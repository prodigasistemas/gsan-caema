/*
* Copyright (C) 2007-2007 the GSAN - Sistema Integrado de Gestão de Serviços de Saneamento
*
* This file is part of GSAN, an integrated service management system for Sanitation
*
* GSAN is free software; you can redistribute it and/or modify
* it under the terms of the GNU General Public License as published by
* the Free Software Foundation; either version 2 of the License.
*
* GSAN is distributed in the hope that it will be useful,
* but WITHOUT ANY WARRANTY; without even the implied warranty of
* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
* GNU General Public License for more details.
*
* You should have received a copy of the GNU General Public License
* along with this program; if not, write to the Free Software
* Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA
*/
/*
* GSAN - Sistema Integrado de Gestão de Serviços de Saneamento
* Copyright (C) <2007> 
* Adriano Britto Siqueira
* Alexandre Santos Cabral
* Ana Carolina Alves Breda
* Ana Maria Andrade Cavalcante
* Aryed Lins de Araújo
* Bruno Leonardo Rodrigues Barros
* Carlos Elmano Rodrigues Ferreira
* Cláudio de Andrade Lira
* Denys Guimarães Guenes Tavares
* Eduardo Breckenfeld da Rosa Borges
* Fabíola Gomes de Araújo
* Flávio Leonardo Cavalcanti Cordeiro
* Francisco do Nascimento Júnior
* Homero Sampaio Cavalcanti
* Ivan Sérgio da Silva Júnior
* José Edmar de Siqueira
* José Thiago Tenório Lopes
* Kássia Regina Silvestre de Albuquerque
* Leonardo Luiz Vieira da Silva
* Márcio Roberto Batista da Silva
* Maria de Fátima Sampaio Leite
* Micaela Maria Coelho de Araújo
* Nelson Mendonça de Carvalho
* Newton Morais e Silva
* Pedro Alexandre Santos da Silva Filho
* Rafael Corrêa Lima e Silva
* Rafael Francisco Pinto
* Rafael Koury Monteiro
* Rafael Palermo de Araújo
* Raphael Veras Rossiter
* Roberto Sobreira Barbalho
* Rodrigo Avellar Silveira
* Rosana Carvalho Barbosa
* Sávio Luiz de Andrade Cavalcante
* Tai Mu Shih
* Thiago Augusto Souza do Nascimento
* Tiago Moreno Rodrigues
* Vivianne Barbosa Sousa
*
* Este programa é software livre; você pode redistribuí-lo e/ou
* modificá-lo sob os termos de Licença Pública Geral GNU, conforme
* publicada pela Free Software Foundation; versão 2 da
* Licença.
* Este programa é distribuído na expectativa de ser útil, mas SEM
* QUALQUER GARANTIA; sem mesmo a garantia implícita de
* COMERCIALIZAÇÃO ou de ADEQUAÇÃO A QUALQUER PROPÓSITO EM
* PARTICULAR. Consulte a Licença Pública Geral GNU para obter mais
* detalhes.
* Você deve ter recebido uma cópia da Licença Pública Geral GNU
* junto com este programa; se não, escreva para Free Software
* Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA
* 02111-1307, USA.
*/

package gcom.cadastro;

import gcom.arrecadacao.ControladorArrecadacaoLocal;
import gcom.arrecadacao.ControladorArrecadacaoLocalHome;
import gcom.arrecadacao.pagamento.FiltroPagamento;
import gcom.arrecadacao.pagamento.Pagamento;
import gcom.atendimentopublico.ControladorAtendimentoPublicoLocal;
import gcom.atendimentopublico.ControladorAtendimentoPublicoLocalHome;
import gcom.atendimentopublico.bean.DadosContratoPPPHelper;
import gcom.atendimentopublico.bean.DadosLigacoesBoletimCadastroHelper;
import gcom.atendimentopublico.ligacaoagua.ControladorLigacaoAguaLocal;
import gcom.atendimentopublico.ligacaoagua.ControladorLigacaoAguaLocalHome;
import gcom.atendimentopublico.ligacaoagua.FiltroLigacaoAguaSituacao;
import gcom.atendimentopublico.ligacaoagua.LigacaoAgua;
import gcom.atendimentopublico.ligacaoagua.LigacaoAguaDiametro;
import gcom.atendimentopublico.ligacaoagua.LigacaoAguaMaterial;
import gcom.atendimentopublico.ligacaoagua.LigacaoAguaPerfil;
import gcom.atendimentopublico.ligacaoagua.LigacaoAguaSituacao;
import gcom.atendimentopublico.ligacaoesgoto.FiltroLigacaoEsgotoSituacao;
import gcom.atendimentopublico.ligacaoesgoto.LigacaoEsgoto;
import gcom.atendimentopublico.ligacaoesgoto.LigacaoEsgotoDiametro;
import gcom.atendimentopublico.ligacaoesgoto.LigacaoEsgotoMaterial;
import gcom.atendimentopublico.ligacaoesgoto.LigacaoEsgotoPerfil;
import gcom.atendimentopublico.ligacaoesgoto.LigacaoEsgotoSituacao;
import gcom.atendimentopublico.ordemservico.FiltroFotoSituacaoOrdemServico;
import gcom.atendimentopublico.ordemservico.FotoSituacaoOrdemServico;
import gcom.atendimentopublico.registroatendimento.ControladorRegistroAtendimentoLocal;
import gcom.atendimentopublico.registroatendimento.ControladorRegistroAtendimentoLocalHome;
import gcom.atendimentopublico.registroatendimento.FiltroSolicitacaoTipoEspecificacao;
import gcom.atendimentopublico.registroatendimento.MeioSolicitacao;
import gcom.atendimentopublico.registroatendimento.RegistroAtendimento;
import gcom.atendimentopublico.registroatendimento.SolicitacaoTipoEspecificacao;
import gcom.atendimentopublico.registroatendimento.bean.DefinirDataPrevistaUnidadeDestinoEspecificacaoHelper;
import gcom.batch.ControladorBatchLocal;
import gcom.batch.ControladorBatchLocalHome;
import gcom.batch.UnidadeProcessamento;
import gcom.cadastro.atualizacaocadastral.CepAtlzCad;
import gcom.cadastro.atualizacaocadastral.FiltroCepAtlzCad;
import gcom.cadastro.atualizacaocadastral.FiltroHidrometroInstalacaoHistoricoAtualizacaoCadastral;
import gcom.cadastro.atualizacaocadastral.FiltroImovelAtualizacaoCadastral;
import gcom.cadastro.atualizacaocadastral.FiltroLogradouroAtlzCad;
import gcom.cadastro.atualizacaocadastral.FiltroLogradouroBairroAtlzCad;
import gcom.cadastro.atualizacaocadastral.FiltroLogradouroCepAtlzCad;
import gcom.cadastro.atualizacaocadastral.HidrometroInstalacaoHistoricoAtualizacaoCadastral;
import gcom.cadastro.atualizacaocadastral.ImovelFotoAtualizacaoCadastral;
import gcom.cadastro.atualizacaocadastral.ImovelOcorrenciaAtualizacaoCadastral;
import gcom.cadastro.atualizacaocadastral.LogradouroAtlzCad;
import gcom.cadastro.atualizacaocadastral.LogradouroBairroAtlzCad;
import gcom.cadastro.atualizacaocadastral.LogradouroCepAtlzCad;
import gcom.cadastro.atualizacaocadastral.RoteiroQuadraAtlzCad;
import gcom.cadastro.atualizacaocadastral.bean.AtualizacaoCadastralArquivoTextoHelper;
import gcom.cadastro.atualizacaocadastral.bean.ComandoAtualizacaoCadastralHelper;
import gcom.cadastro.atualizacaocadastral.bean.ConsultarRoteiroDispositivoMovelHelper;
import gcom.cadastro.atualizacaocadastral.bean.DadosCadastradorHelper;
import gcom.cadastro.atualizacaocadastral.bean.DadosImovelPreGsanHelper;
import gcom.cadastro.atualizacaocadastral.bean.DadosResumoMovimentoAtualizacaoCadastralHelper;
import gcom.cadastro.atualizacaocadastral.bean.ImoveisNaoMigradosHelper;
import gcom.cadastro.atualizacaocadastral.bean.ImoveisRoteiroDispositivoMovelHelper;
import gcom.cadastro.atualizacaocadastralsimplificado.AtualizacaoCadastralSimplificado;
import gcom.cadastro.atualizacaocadastralsimplificado.AtualizacaoCadastralSimplificadoBinario;
import gcom.cadastro.atualizacaocadastralsimplificado.AtualizacaoCadastralSimplificadoCritica;
import gcom.cadastro.atualizacaocadastralsimplificado.AtualizacaoCadastralSimplificadoLinha;
import gcom.cadastro.atualizacaocadastralsimplificado.FiltroAtualizacaoCadastralSimplificadoCritica;
import gcom.cadastro.cliente.Cliente;
import gcom.cadastro.cliente.ClienteAtualizacaoCadastral;
import gcom.cadastro.cliente.ClienteConta;
import gcom.cadastro.cliente.ClienteEndereco;
import gcom.cadastro.cliente.ClienteFone;
import gcom.cadastro.cliente.ClienteFoneAtualizacaoCadastral;
import gcom.cadastro.cliente.ClienteImovel;
import gcom.cadastro.cliente.ClienteImovelFimRelacaoMotivo;
import gcom.cadastro.cliente.ClienteRelacaoTipo;
import gcom.cadastro.cliente.ClienteTipo;
import gcom.cadastro.cliente.ClienteUnificado;
import gcom.cadastro.cliente.ControladorClienteLocal;
import gcom.cadastro.cliente.ControladorClienteLocalHome;
import gcom.cadastro.cliente.FiltroCliente;
import gcom.cadastro.cliente.FiltroClienteAtualizacaoCadastral;
import gcom.cadastro.cliente.FiltroClienteConta;
import gcom.cadastro.cliente.FiltroClienteEndereco;
import gcom.cadastro.cliente.FiltroClienteFoneAtualizacaoCadastral;
import gcom.cadastro.cliente.FiltroClienteImovel;
import gcom.cadastro.cliente.FiltroClienteTipo;
import gcom.cadastro.cliente.FiltroFoneTipo;
import gcom.cadastro.cliente.FiltroOrgaoExpedidorRg;
import gcom.cadastro.cliente.FiltroPessoaSexo;
import gcom.cadastro.cliente.FoneTipo;
import gcom.cadastro.cliente.IRepositorioCliente;
import gcom.cadastro.cliente.IRepositorioClienteImovel;
import gcom.cadastro.cliente.OrgaoExpedidorRg;
import gcom.cadastro.cliente.PessoaSexo;
import gcom.cadastro.cliente.Profissao;
import gcom.cadastro.cliente.RamoAtividade;
import gcom.cadastro.cliente.RepositorioClienteHBM;
import gcom.cadastro.cliente.RepositorioClienteImovelHBM;
import gcom.cadastro.cliente.bean.ClienteEmitirBoletimCadastroHelper;
import gcom.cadastro.empresa.Empresa;
import gcom.cadastro.empresa.EmpresaCobrancaFaixa;
import gcom.cadastro.empresa.EmpresaContratoCobranca;
import gcom.cadastro.empresa.FiltroEmpresa;
import gcom.cadastro.empresa.FiltroEmpresaCobrancaFaixa;
import gcom.cadastro.empresa.FiltroEmpresaContratoCobranca;
import gcom.cadastro.empresa.IRepositorioEmpresa;
import gcom.cadastro.empresa.RepositorioEmpresaHBM;
import gcom.cadastro.endereco.Cep;
import gcom.cadastro.endereco.ControladorEnderecoLocal;
import gcom.cadastro.endereco.ControladorEnderecoLocalHome;
import gcom.cadastro.endereco.EnderecoReferencia;
import gcom.cadastro.endereco.EnderecoTipo;
import gcom.cadastro.endereco.FiltroCep;
import gcom.cadastro.endereco.FiltroEnderecoReferencia;
import gcom.cadastro.endereco.FiltroLogradouro;
import gcom.cadastro.endereco.FiltroLogradouroBairro;
import gcom.cadastro.endereco.FiltroLogradouroCep;
import gcom.cadastro.endereco.FiltroLogradouroTipo;
import gcom.cadastro.endereco.FiltroLogradouroTitulo;
import gcom.cadastro.endereco.Logradouro;
import gcom.cadastro.endereco.LogradouroBairro;
import gcom.cadastro.endereco.LogradouroCep;
import gcom.cadastro.endereco.LogradouroTipo;
import gcom.cadastro.endereco.LogradouroTitulo;
import gcom.cadastro.endereco.bean.ExibirFiltrarLogradouroHelper;
import gcom.cadastro.funcionario.FiltroFuncionario;
import gcom.cadastro.funcionario.Funcionario;
import gcom.cadastro.geografico.Bairro;
import gcom.cadastro.geografico.ControladorGeograficoLocal;
import gcom.cadastro.geografico.ControladorGeograficoLocalHome;
import gcom.cadastro.geografico.FiltroBairro;
import gcom.cadastro.geografico.FiltroMunicipio;
import gcom.cadastro.geografico.FiltroMunicipioFeriado;
import gcom.cadastro.geografico.FiltroUnidadeFederacao;
import gcom.cadastro.geografico.Municipio;
import gcom.cadastro.geografico.MunicipioFeriado;
import gcom.cadastro.geografico.UnidadeFederacao;
import gcom.cadastro.imovel.AreaConstruidaFaixa;
import gcom.cadastro.imovel.CadastroOcorrencia;
import gcom.cadastro.imovel.Categoria;
import gcom.cadastro.imovel.ControladorImovelLocal;
import gcom.cadastro.imovel.ControladorImovelLocalHome;
import gcom.cadastro.imovel.EntidadeBeneficente;
import gcom.cadastro.imovel.FiltroCadastroOcorrencia;
import gcom.cadastro.imovel.FiltroCategoria;
import gcom.cadastro.imovel.FiltroEntidadeBeneficente;
import gcom.cadastro.imovel.FiltroFonteAbastecimento;
import gcom.cadastro.imovel.FiltroImovel;
import gcom.cadastro.imovel.FiltroImovelInscricaoAlterada;
import gcom.cadastro.imovel.FiltroImovelPerfil;
import gcom.cadastro.imovel.FiltroImovelProgramaEspecial;
import gcom.cadastro.imovel.FiltroImovelSubcategoriaAtualizacaoCadastral;
import gcom.cadastro.imovel.FiltroPavimentoCalcada;
import gcom.cadastro.imovel.FiltroPavimentoRua;
import gcom.cadastro.imovel.FiltroSubCategoria;
import gcom.cadastro.imovel.FonteAbastecimento;
import gcom.cadastro.imovel.IRepositorioImovel;
import gcom.cadastro.imovel.Imovel;
import gcom.cadastro.imovel.ImovelAtualizacaoCadastral;
import gcom.cadastro.imovel.ImovelContaEnvio;
import gcom.cadastro.imovel.ImovelInscricaoAlterada;
import gcom.cadastro.imovel.ImovelPerfil;
import gcom.cadastro.imovel.ImovelProgramaEspecial;
import gcom.cadastro.imovel.ImovelSubcategoria;
import gcom.cadastro.imovel.ImovelSubcategoriaAtualizacaoCadastral;
import gcom.cadastro.imovel.ImovelSubcategoriaPK;
import gcom.cadastro.imovel.PavimentoCalcada;
import gcom.cadastro.imovel.PavimentoRua;
import gcom.cadastro.imovel.RepositorioImovelHBM;
import gcom.cadastro.imovel.Subcategoria;
import gcom.cadastro.imovel.bean.GerarArquivoTextoAtualizacaoCadastralHelper;
import gcom.cadastro.imovel.bean.ImovelGeracaoTabelasTemporariasCadastroHelper;
import gcom.cadastro.localidade.ControladorLocalidadeLocal;
import gcom.cadastro.localidade.ControladorLocalidadeLocalHome;
import gcom.cadastro.localidade.FiltroGerenciaRegional;
import gcom.cadastro.localidade.FiltroLocalidade;
import gcom.cadastro.localidade.FiltroQuadra;
import gcom.cadastro.localidade.FiltroSetorComercial;
import gcom.cadastro.localidade.FiltroUnidadeNegocio;
import gcom.cadastro.localidade.GerenciaRegional;
import gcom.cadastro.localidade.IRepositorioSetorComercial;
import gcom.cadastro.localidade.Localidade;
import gcom.cadastro.localidade.Quadra;
import gcom.cadastro.localidade.QuadraFace;
import gcom.cadastro.localidade.RepositorioSetorComercialHBM;
import gcom.cadastro.localidade.SetorComercial;
import gcom.cadastro.localidade.UnidadeNegocio;
import gcom.cadastro.sistemaparametro.FiltroNacionalFeriado;
import gcom.cadastro.sistemaparametro.FiltroSistemaAlteracaoHistorico;
import gcom.cadastro.sistemaparametro.NacionalFeriado;
import gcom.cadastro.sistemaparametro.SistemaAlteracaoHistorico;
import gcom.cadastro.sistemaparametro.SistemaParametro;
import gcom.cadastro.sistemaparametro.bean.DadosEnvioEmailHelper;
import gcom.cadastro.sistemaparametro.bean.FeriadoHelper;
import gcom.cadastro.tarifasocial.ControladorTarifaSocialLocal;
import gcom.cadastro.tarifasocial.ControladorTarifaSocialLocalHome;
import gcom.cadastro.tarifasocial.TarifaSocialCarta;
import gcom.cadastro.tarifasocial.TarifaSocialCartaDebito;
import gcom.cadastro.tarifasocial.TarifaSocialCartaDebitoPK;
import gcom.cadastro.tarifasocial.TarifaSocialCartaPK;
import gcom.cadastro.tarifasocial.TarifaSocialComandoCarta;
import gcom.cadastro.tarifasocial.TarifaSocialDadoEconomia;
import gcom.cadastro.tarifasocial.TarifaSocialMotivoCarta;
import gcom.cadastro.unidade.FiltroUnidadeOrganizacional;
import gcom.cadastro.unidade.UnidadeOrganizacional;
import gcom.cobranca.CobrancaAcao;
import gcom.cobranca.CobrancaAcaoAtividadeComando;
import gcom.cobranca.CobrancaAcaoAtividadeCronograma;
import gcom.cobranca.CobrancaSituacaoHistorico;
import gcom.cobranca.CobrancaSituacaoMotivo;
import gcom.cobranca.CobrancaSituacaoTipo;
import gcom.cobranca.ControladorCobrancaLocal;
import gcom.cobranca.ControladorCobrancaLocalHome;
import gcom.cobranca.IRepositorioCobranca;
import gcom.cobranca.RepositorioCobrancaHBM;
import gcom.cobranca.bean.CalcularAcrescimoPorImpontualidadeHelper;
import gcom.cobranca.bean.ContaValoresHelper;
import gcom.cobranca.bean.EmitirDocumentoCobrancaBoletimCadastroHelper;
import gcom.cobranca.bean.GuiaPagamentoValoresHelper;
import gcom.cobranca.bean.ObterDebitoImovelOuClienteHelper;
import gcom.fachada.Fachada;
import gcom.faturamento.ControladorFaturamentoLocal;
import gcom.faturamento.ControladorFaturamentoLocalHome;
import gcom.faturamento.FaturamentoGrupo;
import gcom.faturamento.IRepositorioFaturamento;
import gcom.faturamento.RepositorioFaturamentoHBM;
import gcom.faturamento.consumotarifa.ConsumoTarifa;
import gcom.faturamento.conta.Conta;
import gcom.faturamento.conta.ContaMensagem;
import gcom.faturamento.conta.FiltroConta;
import gcom.faturamento.conta.FiltroContaMensagem;
import gcom.faturamento.credito.CreditoARealizar;
import gcom.faturamento.debito.DebitoACobrar;
import gcom.faturamento.debito.DebitoTipo;
import gcom.faturamento.debito.FiltroDebitoTipo;
import gcom.gui.cobranca.parcelamentojudicial.bean.RegistroImovelHelper;
import gcom.gui.portal.CadastrarImovelSorteioActionHelper;
import gcom.gui.relatorio.cadastro.FiltrarRelatorioAcessoSPCHelper;
import gcom.gui.relatorio.cadastro.GerarRelatorioAlteracoesCpfCnpjHelper;
import gcom.gui.relatorio.cadastro.GerarRelatorioTipoServicoHelper;
import gcom.gui.relatorio.cadastro.micromedicao.FiltrarRelatorioColetaMedidorEnergiaHelper;
import gcom.gui.relatorio.seguranca.GerarRelatorioAlteracoesSistemaColunaHelper;
import gcom.integracao.ControladorIntegracaoLocal;
import gcom.integracao.ControladorIntegracaoLocalHome;
import gcom.integracao.IRepositorioIntegracao;
import gcom.integracao.RepositorioIntegracaoHBM;
import gcom.interceptor.Interceptador;
import gcom.interceptor.RegistradorOperacao;
import gcom.micromedicao.ArquivoTextoLigacoesHidrometroHelper;
import gcom.micromedicao.ControladorMicromedicaoLocal;
import gcom.micromedicao.ControladorMicromedicaoLocalHome;
import gcom.micromedicao.IRepositorioMicromedicao;
import gcom.micromedicao.Leiturista;
import gcom.micromedicao.RepositorioMicromedicaoHBM;
import gcom.micromedicao.Rota;
import gcom.micromedicao.SituacaoTransmissaoLeitura;
import gcom.micromedicao.consumo.LigacaoTipo;
import gcom.micromedicao.hidrometro.FiltroHidrometro;
import gcom.micromedicao.hidrometro.FiltroHidrometroCapacidade;
import gcom.micromedicao.hidrometro.FiltroHidrometroInstalacaoHistorico;
import gcom.micromedicao.hidrometro.FiltroHidrometroLocalInstalacao;
import gcom.micromedicao.hidrometro.FiltroHidrometroMarca;
import gcom.micromedicao.hidrometro.FiltroHidrometroProtecao;
import gcom.micromedicao.hidrometro.Hidrometro;
import gcom.micromedicao.hidrometro.HidrometroCapacidade;
import gcom.micromedicao.hidrometro.HidrometroInstalacaoHistorico;
import gcom.micromedicao.hidrometro.HidrometroLocalInstalacao;
import gcom.micromedicao.hidrometro.HidrometroMarca;
import gcom.micromedicao.hidrometro.HidrometroProtecao;
import gcom.micromedicao.hidrometro.HidrometroSituacao;
import gcom.micromedicao.leitura.FiltroLeiturista;
import gcom.micromedicao.medicao.FiltroMedicaoTipo;
import gcom.micromedicao.medicao.MedicaoTipo;
import gcom.operacional.SubSistemaEsgotoArquivoTexto;
import gcom.operacional.SubSistemaEsgotoArquivoTextoErro;
import gcom.relatorio.atendimentopublico.RelatorioSorteioPremiosHelper;
import gcom.relatorio.cadastro.GerarRelatorioAtualizacaoCadastralViaInternetHelper;
import gcom.relatorio.cadastro.RelatorioAcessoSPCBean;
import gcom.relatorio.cadastro.RelatorioAnaliseInconsistenciasAtualizacaoCadastralBean;
import gcom.relatorio.cadastro.RelatorioAtualizacaoCadastralHelper;
import gcom.relatorio.cadastro.RelatorioBoletimCadastroIndividualBean;
import gcom.relatorio.cadastro.RelatorioClientesMesmoCpfCnpj;
import gcom.relatorio.cadastro.RelatorioClientesMesmoCpfCnpjHelper;
import gcom.relatorio.cadastro.RelatorioImoveisInconsistentesBean;
import gcom.relatorio.cadastro.RelatorioMensagensPendentesCadastradorBean;
import gcom.relatorio.cadastro.RelatorioQuantitativoMensagensPendentesBean;
import gcom.relatorio.cadastro.RelatorioResumoPosicaoAtualizacaoCadastralBean;
import gcom.relatorio.cadastro.RelatorioResumoPosicaoAtualizacaoCadastralPacoteBean;
import gcom.relatorio.cadastro.RelatorioResumoSituacaoImoveisAnalistaCadastradorBean;
import gcom.relatorio.cadastro.RelatorioTipoServicoBean;
import gcom.relatorio.cadastro.cliente.AtualizarClienteAPartirDispositivoMovelHelper;
import gcom.relatorio.cadastro.imovel.FiltrarRelatorioImoveisAlteracaoInscricaoViaBatchHelper;
import gcom.relatorio.cadastro.imovel.FiltrarRelatorioImoveisAtivosNaoMedidosHelper;
import gcom.relatorio.cadastro.imovel.FiltrarRelatorioImoveisConsumoMedioHelper;
import gcom.relatorio.cadastro.imovel.FiltrarRelatorioImoveisFaturasAtrasoHelper;
import gcom.relatorio.cadastro.imovel.FiltrarRelatorioImoveisFaturasRecentesDiaFaturasAntigasAtrasoHelper;
import gcom.relatorio.cadastro.imovel.FiltrarRelatorioImoveisProgramasEspeciaisHelper;
import gcom.relatorio.cadastro.imovel.FiltrarRelatorioImoveisSituacaoLigacaoAguaHelper;
import gcom.relatorio.cadastro.imovel.FiltrarRelatorioImoveisTipoConsumoHelper;
import gcom.relatorio.cadastro.imovel.FiltrarRelatorioImoveisUltimosConsumosAguaHelper;
import gcom.relatorio.cadastro.imovel.RelatorioImoveisAtivosNaoMedidosHelper;
import gcom.relatorio.cadastro.imovel.RelatorioImoveisConsumoMedioHelper;
import gcom.relatorio.cadastro.imovel.RelatorioImoveisFaturasAtrasoHelper;
import gcom.relatorio.cadastro.imovel.RelatorioImoveisFaturasRecentesDiaFaturasAntigasAtrasoHelper;
import gcom.relatorio.cadastro.imovel.RelatorioImoveisProgramasEspeciaisHelper;
import gcom.relatorio.cadastro.imovel.RelatorioImoveisSituacaoLigacaoAguaHelper;
import gcom.relatorio.cadastro.imovel.RelatorioImoveisTipoConsumoHelper;
import gcom.relatorio.cadastro.imovel.RelatorioImoveisUltimosConsumosAguaBean;
import gcom.relatorio.cadastro.imovel.RelatorioImoveisUltimosConsumosAguaHelper;
import gcom.relatorio.cadastro.imovel.RelatorioResumoImoveisAlteracaoInscricaoViaBatchBean;
import gcom.relatorio.cadastro.imovel.RelatorioResumoImoveisAlteracaoInscricaoViaBatchLigAguaBean;
import gcom.relatorio.cadastro.imovel.RelatorioResumoImoveisAlteracaoInscricaoViaBatchSetorBean;
import gcom.relatorio.cadastro.imovel.RelatorioResumoImoveisAlteracaoInscricaoViaBatchUsuarioBean;
import gcom.relatorio.cadastro.micromedicao.RelatorioColetaMedidorEnergiaHelper;
import gcom.relatorio.cobranca.RelatorioComprovanteCadastramentoSorteioBean;
import gcom.seguranca.Atributo;
import gcom.seguranca.acesso.Operacao;
import gcom.seguranca.acesso.OperacaoEfetuada;
import gcom.seguranca.acesso.usuario.FiltroUsuario;
import gcom.seguranca.acesso.usuario.Usuario;
import gcom.seguranca.acesso.usuario.UsuarioAcao;
import gcom.seguranca.acesso.usuario.UsuarioAcaoUsuarioHelper;
import gcom.seguranca.transacao.AlteracaoTipo;
import gcom.seguranca.transacao.ControladorTransacaoLocal;
import gcom.seguranca.transacao.ControladorTransacaoLocalHome;
import gcom.seguranca.transacao.Tabela;
import gcom.seguranca.transacao.TabelaAtualizacaoCadastral;
import gcom.seguranca.transacao.TabelaColuna;
import gcom.seguranca.transacao.TabelaColunaAtualizacaoCadastral;
import gcom.seguranca.transacao.TabelaLinhaColunaAlteracao;
import gcom.tarefa.TarefaRelatorio;
import gcom.util.CollectionUtil;
import gcom.util.ConstantesJNDI;
import gcom.util.ConstantesSistema;
import gcom.util.ControladorException;
import gcom.util.ControladorUtilLocal;
import gcom.util.ControladorUtilLocalHome;
import gcom.util.ErroRepositorioException;
import gcom.util.FachadaException;
import gcom.util.IRepositorioUtil;
import gcom.util.IoUtil;
import gcom.util.ParserUtil;
import gcom.util.RepositorioUtilHBM;
import gcom.util.ServiceLocator;
import gcom.util.ServiceLocatorException;
import gcom.util.SistemaException;
import gcom.util.Util;
import gcom.util.ZipUtil;
import gcom.util.email.ErroEmailException;
import gcom.util.email.ServicosEmail;
import gcom.util.filtro.ParametroNulo;
import gcom.util.filtro.ParametroSimples;
import gcom.util.filtro.ParametroSimplesDiferenteDe;
import gcom.util.filtro.ParametroSimplesIn;

import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.OutputStreamWriter;
import java.math.BigDecimal;
import java.text.Normalizer;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Collection;
import java.util.Collections;
import java.util.Comparator;
import java.util.Date;
import java.util.GregorianCalendar;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.List;
import java.util.Set;
import java.util.StringTokenizer;
import java.util.TreeMap;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import java.util.zip.ZipOutputStream;

import javax.ejb.CreateException;
import javax.ejb.EJBException;
import javax.ejb.SessionBean;
import javax.ejb.SessionContext;

import br.com.danhil.BarCode.Interleaved2of5;

/**
 * <p>
 * a
 * Title: GCOM
 * </p>
 * <p>
 * 
 * Description: Sistema de Gestão Comercial
 * </p>
 * <p>
 * 
 * Copyright: Copyright (c) 2004
 * </p>
 * <p>
 * 
 * Company: COMPESA - Companhia Pernambucana de Saneamento
 * </p>
 * 
 * @author not attributable
 * @created 6 de Setembro de 2005
 * @version 1.0
 */

public class ControladorCadastro implements SessionBean {

	private static final long serialVersionUID = 1L;

	SessionContext sessionContext;

	private IRepositorioEmpresa repositorioEmpresa = null;

	protected IRepositorioCadastro repositorioCadastro = null;

	private IRepositorioSetorComercial repositorioSetorComercial = null;

	private IRepositorioCobranca repositorioCobranca = null;

	private IRepositorioClienteImovel repositorioClienteImovel = null;

	private IRepositorioImovel repositorioImovel = null;

	private IRepositorioFaturamento repositorioFaturamento = null;

	private IRepositorioUtil repositorioUtil = null;

	private IRepositorioMicromedicao repositorioMicromedicao = null;
	
	private IRepositorioCliente repositorioCliente = null;
	
	private IRepositorioIntegracao repositorioIntegracao = null;

	/**
	 * < <Descrição do método>>
	 * 
	 * @exception CreateException
	 *                Descrição da exceção
	 */
	public void ejbCreate() throws CreateException {
		repositorioEmpresa = RepositorioEmpresaHBM.getInstancia();
		repositorioCadastro = RepositorioCadastroHBM.getInstancia();
		repositorioSetorComercial = RepositorioSetorComercialHBM.getInstancia();
		repositorioCobranca = RepositorioCobrancaHBM.getInstancia();
		repositorioClienteImovel = RepositorioClienteImovelHBM.getInstancia();
		repositorioImovel = RepositorioImovelHBM.getInstancia();
		repositorioFaturamento = RepositorioFaturamentoHBM.getInstancia();
		repositorioUtil = RepositorioUtilHBM.getInstancia();
		repositorioMicromedicao = RepositorioMicromedicaoHBM.getInstancia();
		repositorioCliente = RepositorioClienteHBM.getInstancia();
		repositorioIntegracao = RepositorioIntegracaoHBM.getInstancia();
		
	}

	/**
	 * < <Descrição do método>>
	 */
	public void ejbRemove() {
	}

	/**
	 * < <Descrição do método>>
	 */
	public void ejbActivate() {
	}

	/**
	 * < <Descrição do método>>
	 */
	public void ejbPassivate() {
	}

	/**
	 * Seta o valor de sessionContext
	 * 
	 * @param sessionContext
	 *            O novo valor de sessionContext
	 */
	public void setSessionContext(SessionContext sessionContext) {
		this.sessionContext = sessionContext;
	}

	private ControladorFaturamentoLocal getControladorFaturamento() {
		ControladorFaturamentoLocalHome localHome = null;
		ControladorFaturamentoLocal local = null;

		// pega a instância do ServiceLocator.

		ServiceLocator locator = null;

		try {
			locator = ServiceLocator.getInstancia();

			localHome = (ControladorFaturamentoLocalHome) locator
					.getLocalHomePorEmpresa(ConstantesJNDI.CONTROLADOR_FATURAMENTO_SEJB);
			// guarda a referencia de um objeto capaz de fazer chamadas
			// objetos remotamente
			local = localHome.create();

			return local;
		} catch (CreateException e) {
			throw new SistemaException(e);
		} catch (ServiceLocatorException e) {
			throw new SistemaException(e);
		}
	}
	/**
	 * Retorna o valor de controladorUtil
	 * 
	 * @return O valor de controladorUtil
	 */
	protected ControladorUtilLocal getControladorUtil() {

		ControladorUtilLocalHome localHome = null;
		ControladorUtilLocal local = null;

		// pega a instância do ServiceLocator.

		ServiceLocator locator = null;

		try {
			locator = ServiceLocator.getInstancia();

			localHome = (ControladorUtilLocalHome) locator
					.getLocalHome(ConstantesJNDI.CONTROLADOR_UTIL_SEJB);
			// guarda a referencia de um objeto capaz de fazer chamadas à
			// objetos remotamente
			local = localHome.create();

			return local;
		} catch (CreateException e) {
			throw new SistemaException(e);
		} catch (ServiceLocatorException e) {
			throw new SistemaException(e);
		}

	}

	/**
	 * Retorna o valor de controladorAcesso
	 * 
	 * @return O valor de controladorAcesso
	 */
	protected ControladorArrecadacaoLocal getControladorArrecadacao() {
		ControladorArrecadacaoLocalHome localHome = null;
		ControladorArrecadacaoLocal local = null;

		// pega a instância do ServiceLocator.

		ServiceLocator locator = null;

		try {
			locator = ServiceLocator.getInstancia();

			localHome = (ControladorArrecadacaoLocalHome) locator
					.getLocalHomePorEmpresa(ConstantesJNDI.CONTROLADOR_ARRECADACAO_SEJB);
			// guarda a referencia de um objeto capaz de fazer chamadas à
			// objetos remotamente
			local = localHome.create();

			return local;
		} catch (CreateException e) {
			throw new SistemaException(e);
		} catch (ServiceLocatorException e) {
			throw new SistemaException(e);
		}
	}

	protected ControladorLigacaoAguaLocal getControladorLigacaoAgua() {

		ControladorLigacaoAguaLocalHome localHome = null;
		ControladorLigacaoAguaLocal local = null;

		// pega a instância do ServiceLocator.

		ServiceLocator locator = null;

		try {
			locator = ServiceLocator.getInstancia();

			localHome = (ControladorLigacaoAguaLocalHome) locator
					.getLocalHome(ConstantesJNDI.CONTROLADOR_LIGACAO_AGUA_SEJB);
			// guarda a referencia de um objeto capaz de fazer chamadas à
			// objetos remotamente
			local = localHome.create();

			return local;
		} catch (CreateException e) {
			throw new SistemaException(e);
		} catch (ServiceLocatorException e) {
			throw new SistemaException(e);
		}

	}

	/**
	 * Retorna o valor de controladorEndereco
	 * 
	 * @return O valor de controladorEndereco
	 */
	protected ControladorEnderecoLocal getControladorEndereco() {

		ControladorEnderecoLocalHome localHome = null;
		ControladorEnderecoLocal local = null;

		// pega a instância do ServiceLocator.

		ServiceLocator locator = null;

		try {
			locator = ServiceLocator.getInstancia();

			localHome = (ControladorEnderecoLocalHome) locator
					.getLocalHome(ConstantesJNDI.CONTROLADOR_ENDERECO_SEJB);
			// guarda a referencia de um objeto capaz de fazer chamadas à
			// objetos remotamente
			local = localHome.create();

			return local;
		} catch (CreateException e) {
			throw new SistemaException(e);
		} catch (ServiceLocatorException e) {
			throw new SistemaException(e);
		}
	}

	/**
	 * Retorna o valor de controladorImovel
	 * 
	 * @return O valor de controladorImovel
	 */
	protected ControladorImovelLocal getControladorImovel() {

		ControladorImovelLocalHome localHome = null;
		ControladorImovelLocal local = null;

		// pega a instância do ServiceLocator.

		ServiceLocator locator = null;

		try {
			locator = ServiceLocator.getInstancia();

			localHome = (ControladorImovelLocalHome) locator
					.getLocalHome(ConstantesJNDI.CONTROLADOR_IMOVEL_SEJB);
			// guarda a referencia de um objeto capaz de fazer chamadas à
			// objetos remotamente
			local = localHome.create();

			return local;
		} catch (CreateException e) {
			throw new SistemaException(e);
		} catch (ServiceLocatorException e) {
			throw new SistemaException(e);
		}
	}

	/**
	 * Author: Rafael Santos Data: 04/01/2006
	 * 
	 * Retorna o valor do Controlador de Cobranca
	 * 
	 * @return O valor de controladorCobrancaLocal
	 */
	protected ControladorCobrancaLocal getControladorCobranca() {

		ControladorCobrancaLocalHome localHome = null;
		ControladorCobrancaLocal local = null;

		// pega a instância do ServiceLocator.

		ServiceLocator locator = null;

		try {
			locator = ServiceLocator.getInstancia();

			localHome = (ControladorCobrancaLocalHome) locator
					.getLocalHomePorEmpresa(ConstantesJNDI.CONTROLADOR_COBRANCA_SEJB);
			// guarda a referencia de um objeto capaz de fazer chamadas
			// objetos remotamente
			local = localHome.create();

			return local;
		} catch (CreateException e) {
			throw new SistemaException(e);
		} catch (ServiceLocatorException e) {
			throw new SistemaException(e);
		}

	}

	/**
	 * Retorna o valor de controladorAtendimentoPublico
	 * 
	 * @return O valor de controladorAtendimentoPublico
	 */
	protected ControladorAtendimentoPublicoLocal getControladorAtendimentoPublico() {

		ControladorAtendimentoPublicoLocalHome localHome = null;
		ControladorAtendimentoPublicoLocal local = null;

		// pega a instância do ServiceLocator.

		ServiceLocator locator = null;

		try {
			locator = ServiceLocator.getInstancia();

			localHome = (ControladorAtendimentoPublicoLocalHome) locator
					.getLocalHome(ConstantesJNDI.CONTROLADOR_ATENDIMENTO_PUBLICO_SEJB);
			// guarda a referencia de um objeto capaz de fazer chamadas à
			// objetos remotamente
			local = localHome.create();

			return local;
		} catch (CreateException e) {
			throw new SistemaException(e);
		} catch (ServiceLocatorException e) {
			throw new SistemaException(e);
		}
	}

	/**
	 * Retorna o valor de controladorCliente
	 * 
	 * @return O valor de controladorImovel
	 */
	protected ControladorClienteLocal getControladorCliente() {

		ControladorClienteLocalHome localHome = null;
		ControladorClienteLocal local = null;

		// pega a instância do ServiceLocator.

		ServiceLocator locator = null;

		try {
			locator = ServiceLocator.getInstancia();

			localHome = (ControladorClienteLocalHome) locator
					.getLocalHome(ConstantesJNDI.CONTROLADOR_CLIENTE_SEJB);
			// guarda a referencia de um objeto capaz de fazer chamadas à
			// objetos remotamente
			local = localHome.create();

			return local;
		} catch (CreateException e) {
			throw new SistemaException(e);
		} catch (ServiceLocatorException e) {
			throw new SistemaException(e);
		}
	}

	/**
	 * Retorna o valor do ControladorBatch
	 * 
	 * @author Rafael Corrêa
	 * @date 31/05/2007
	 * 
	 * @return O valor de ControladorBatch
	 */
	protected ControladorBatchLocal getControladorBatch() {
		ControladorBatchLocalHome localHome = null;
		ControladorBatchLocal local = null;

		// pega a instância do ServiceLocator.

		ServiceLocator locator = null;

		try {
			locator = ServiceLocator.getInstancia();

			localHome = (ControladorBatchLocalHome) locator
					.getLocalHome(ConstantesJNDI.CONTROLADOR_BATCH_SEJB);
			// guarda a referencia de um objeto capaz de fazer chamadas à
			// objetos remotamente
			local = localHome.create();

			return local;
		} catch (CreateException e) {
			throw new SistemaException(e);
		} catch (ServiceLocatorException e) {
			throw new SistemaException(e);
		}
	}
	
	private ControladorRegistroAtendimentoLocal getControladorRegistroAtendimento() {
		ControladorRegistroAtendimentoLocalHome localHome = null;
		ControladorRegistroAtendimentoLocal local = null;

		// pega a instância do ServiceLocator.

		ServiceLocator locator = null;

		try {
			locator = ServiceLocator.getInstancia();
			localHome = (ControladorRegistroAtendimentoLocalHome) locator
					.getLocalHome(ConstantesJNDI.CONTROLADOR_REGISTRO_ATENDIMENTO_SEJB);
			// guarda a referencia de um objeto capaz de fazer chamadas à
			// objetos remotamente
			local = localHome.create();

			return local;
		} catch (CreateException e) {
			throw new SistemaException(e);
		} catch (ServiceLocatorException e) {
			throw new SistemaException(e);
		}
	}

	protected ControladorMicromedicaoLocal getControladorMicromedicao() {
		ControladorMicromedicaoLocalHome localHome = null;
		ControladorMicromedicaoLocal local = null;

		// pega a instância do ServiceLocator.

		ServiceLocator locator = null;

		try {
			locator = ServiceLocator.getInstancia();

			localHome = (ControladorMicromedicaoLocalHome) locator
					.getLocalHomePorEmpresa(ConstantesJNDI.CONTROLADOR_MICROMEDICAO_SEJB);
			// guarda a referencia de um objeto capaz de fazer chamadas à
			// objetos remotamente
			local = localHome.create();

			return local;
		} catch (CreateException e) {
			throw new SistemaException(e);
		} catch (ServiceLocatorException e) {
			throw new SistemaException(e);
		}
	}

	protected ControladorTransacaoLocal getControladorTransacao() {
		ControladorTransacaoLocalHome localHome = null;
		ControladorTransacaoLocal local = null;

		// pega a instância do ServiceLocator.

		ServiceLocator locator = null;

		try {
			locator = ServiceLocator.getInstancia();

			localHome = (ControladorTransacaoLocalHome) locator
					.getLocalHome(ConstantesJNDI.CONTROLADOR_TRANSACAO_SEJB);
			// guarda a referencia de um objeto capaz de fazer chamadas
			// objetos remotamente
			local = localHome.create();

			return local;
		} catch (CreateException e) {
			throw new SistemaException(e);
		} catch (ServiceLocatorException e) {
			throw new SistemaException(e);
		}

	}
	
	/**
	 * Retorna o valor de controladorTarifaSocial
	 * 
	 * @return O valor de controladorTarifaSocial
	 */
	private ControladorTarifaSocialLocal getControladorTarifaSocialSEJB() {
		ControladorTarifaSocialLocalHome localHome = null;
		ControladorTarifaSocialLocal local = null;

		// pega a instância do ServiceLocator.

		ServiceLocator locator = null;

		try {
			locator = ServiceLocator.getInstancia();

			localHome = (ControladorTarifaSocialLocalHome) locator
					.getLocalHome(ConstantesJNDI.CONTROLADOR_TARIFA_SOCIAL_SEJB);
			// guarda a referencia de um objeto capaz de fazer chamadas
			// objetos remotamente
			local = localHome.create();

			return local;
		} catch (CreateException e) {
			throw new SistemaException(e);
		} catch (ServiceLocatorException e) {
			throw new SistemaException(e);
		}
	}

	/**
	 * Retorna o valor de controladorUtil
	 * 
	 * @return O valor de controladorUtil
	 */
	protected ControladorLocalidadeLocal getControladorLocalidade() {

		ControladorLocalidadeLocalHome localHome = null;
		ControladorLocalidadeLocal local = null;

		// pega a instância do ServiceLocator.

		ServiceLocator locator = null;

		try {
			locator = ServiceLocator.getInstancia();

			localHome = (ControladorLocalidadeLocalHome) locator
					.getLocalHome(ConstantesJNDI.CONTROLADOR_LOCALIDADE_SEJB);
			// guarda a referencia de um objeto capaz de fazer chamadas à
			// objetos remotamente
			local = localHome.create();

			return local;
		} catch (CreateException e) {
			throw new SistemaException(e);
		} catch (ServiceLocatorException e) {
			throw new SistemaException(e);
		}

	}
	
	/**
	 * Retorna o valor de controladorUtil
	 * 
	 * @return O valor de controladorUtil
	 */
	protected ControladorIntegracaoLocal getControladorIntegracao() {

		ControladorIntegracaoLocalHome localHome = null;
		ControladorIntegracaoLocal local = null;

		// pega a instância do ServiceLocator.

		ServiceLocator locator = null;

		try {
			locator = ServiceLocator.getInstancia();

			localHome = (ControladorIntegracaoLocalHome) locator
					.getLocalHome(ConstantesJNDI.CONTROLADOR_INTEGRACAO_SEJB);
			// guarda a referencia de um objeto capaz de fazer chamadas à
			// objetos remotamente
			local = localHome.create();

			return local;
		} catch (CreateException e) {
			throw new SistemaException(e);
		} catch (ServiceLocatorException e) {
			throw new SistemaException(e);
		}

	}
	
	/**
	 * Retorna o valor de controladorUtil
	 * 
	 * @return O valor de controladorUtil
	 */
	protected ControladorGeograficoLocal getControladorGeografico() {

		ControladorGeograficoLocalHome localHome = null;
		ControladorGeograficoLocal local = null;

		// pega a instância do ServiceLocator.

		ServiceLocator locator = null;

		try {
			locator = ServiceLocator.getInstancia();

			localHome = (ControladorGeograficoLocalHome) locator
					.getLocalHome(ConstantesJNDI.CONTROLADOR_GEOGRAFICO_SEJB);
			// guarda a referencia de um objeto capaz de fazer chamadas à
			// objetos remotamente
			local = localHome.create();

			return local;
		} catch (CreateException e) {
			throw new SistemaException(e);
		} catch (ServiceLocatorException e) {
			throw new SistemaException(e);
		}

	}
	
	/**
	 * Permite inserir um Sistema Alteracao Historico
	 * 
	 * [UC0217] Inserir Sistema Alteracao Historico
	 * 
	 * @author Thiago Tenório
	 * @date 30/03/2006
	 * 
	 */
	public Integer inserirHistoricoAlteracaoSistema(
			SistemaAlteracaoHistorico sistemaAlteracaoHistorico)
			throws ControladorException {

		FiltroSistemaAlteracaoHistorico filtroSistemaAlteracaoHistorico = new FiltroSistemaAlteracaoHistorico();
		filtroSistemaAlteracaoHistorico
				.adicionarParametro(new ParametroSimples(
						FiltroSistemaAlteracaoHistorico.NOME,
						sistemaAlteracaoHistorico.getNome()));

		Collection colecaoSistemaAlteracaoHistorico = getControladorUtil()
				.pesquisar(filtroSistemaAlteracaoHistorico,
						SistemaAlteracaoHistorico.class.getName());

		if (colecaoSistemaAlteracaoHistorico != null
				&& !colecaoSistemaAlteracaoHistorico.isEmpty()) {
			throw new ControladorException(
					"atencao.numero_resolucao_ja_existente");
		}

		sistemaAlteracaoHistorico.setUltimaAlteracao(new Date());

		Integer id = (Integer) getControladorUtil().inserir(
				sistemaAlteracaoHistorico);

		return id;

	}

	/**
	 * Permite inserir uma Gerencia Regional
	 * 
	 * [UC0217] Inserir Gerencia Regional
	 * 
	 * @author Thiago Tenório
	 * @date 30/03/2006
	 * 
	 */
	public Integer inserirGerenciaRegional(GerenciaRegional gerenciaRegional)
			throws ControladorException {

		FiltroGerenciaRegional filtroGerenciaRegional = new FiltroGerenciaRegional();

		filtroGerenciaRegional.adicionarParametro(new ParametroSimples(
				FiltroGerenciaRegional.NOME, gerenciaRegional.getNome()));

		filtroGerenciaRegional.adicionarParametro(new ParametroSimples(
				FiltroGerenciaRegional.NOME_ABREVIADO, gerenciaRegional
						.getNomeAbreviado()));

		// Collection colecaoEnderecos = getControladorUtil().pesquisar(
		// filtroGerenciaRegional, GerenciaRegional.class.getName());

		// if (colecaoEnderecos != null && !colecaoEnderecos.isEmpty()) {
		// throw new ControladorException(
		// "atencao.endereco_localidade_nao_informado");
		// }

		Integer id = (Integer) getControladorUtil().inserir(gerenciaRegional);

		return id;

	}

	/**
	 * [UC0298] Manter Gerência Regional [] Atualizar Gerencia Regional Metodo
	 * que atualiza a Gerencia Regional
	 * 
	 * 
	 * @author Thiago Tenório
	 * @date 25/05/2006
	 * 
	 * 
	 * @throws ControladorException
	 */

	public void atualizarGerenciaRegional(GerenciaRegional gerenciaRegional)
			throws ControladorException {

		// Verifica se todos os campos obrigatorios foram preenchidos

		if ((gerenciaRegional.getId() == null || gerenciaRegional.getId()
				.equals("" + ConstantesSistema.NUMERO_NAO_INFORMADO))
				&& (gerenciaRegional.getNome() == null || gerenciaRegional
						.getNome().equals(
								"" + ConstantesSistema.NUMERO_NAO_INFORMADO))
				&& (gerenciaRegional.getNomeAbreviado() == null || gerenciaRegional
						.getNomeAbreviado().equals(
								"" + ConstantesSistema.NUMERO_NAO_INFORMADO))
				&& (gerenciaRegional.getFone() == null || gerenciaRegional
						.getFone().equals(
								"" + ConstantesSistema.NUMERO_NAO_INFORMADO))) {
			throw new ControladorException(
					"atencao.filtro.nenhum_parametro_informado");

		}

		// Verifica se o campo Nome foi preenchido

		if (gerenciaRegional.getNome() == null
				|| gerenciaRegional.getNome().equals(
						"" + ConstantesSistema.NUMERO_NAO_INFORMADO)) {
			throw new ControladorException("atencao.Informe_entidade", null,
					" Nome");
		}

		// Verifica se o campo Nome Abreviado foi preenchido
		if (gerenciaRegional.getNomeAbreviado() == null
				|| gerenciaRegional.getNomeAbreviado().equals(
						"" + ConstantesSistema.NUMERO_NAO_INFORMADO)) {
			throw new ControladorException("atencao.Informe_entidade", null,
					" Nome Abreviado");
		}

		// Verifica se o campo Telefone foi preenchido
		if (gerenciaRegional.getFone() == null
				|| gerenciaRegional.getFone().equals(
						"" + ConstantesSistema.NUMERO_NAO_INFORMADO)) {
			throw new ControladorException("atencao.Informe_entidade", null,
					" Telefone");
		}

		// [FS0003] - Atualização realizada por outro usuário
		FiltroGerenciaRegional filtroGerenciaRegional = new FiltroGerenciaRegional();
		filtroGerenciaRegional.adicionarParametro(new ParametroSimples(
				FiltroGerenciaRegional.ID, gerenciaRegional.getId()));

		Collection colecaoGerenciaRegionalBase = getControladorUtil()
				.pesquisar(filtroGerenciaRegional,
						GerenciaRegional.class.getName());

		if (colecaoGerenciaRegionalBase == null
				|| colecaoGerenciaRegionalBase.isEmpty()) {
			sessionContext.setRollbackOnly();
			throw new ControladorException("atencao.atualizacao.timestamp");
		}

		GerenciaRegional gerenciaRegionalBase = (GerenciaRegional) colecaoGerenciaRegionalBase
				.iterator().next();

		if (gerenciaRegionalBase.getUltimaAlteracao().after(
				gerenciaRegional.getUltimaAlteracao())) {
			sessionContext.setRollbackOnly();
			throw new ControladorException("atencao.atualizacao.timestamp");
		}

		gerenciaRegional.setUltimaAlteracao(new Date());

		getControladorUtil().atualizar(gerenciaRegional);

	}

	/**
	 * Pesquisa as empresas que serão processadas no emitir contas
	 * 
	 * @author Sávio Luiz
	 * @date 09/01/2007
	 * 
	 */

	public Collection pesquisarIdsEmpresa() throws ControladorException {
		try {
			return repositorioEmpresa.pesquisarIdsEmpresa();
		} catch (ErroRepositorioException e) {
			throw new ControladorException("erro.sistema", e);
		}
	}

	
	/**
	 * Informar Parametros do Sistema
	 * 
	 * @author Rômulo Aurélio
	 * @date 09/01/2007
	 * 
	 */

	public void informarParametrosSistema(SistemaParametro sistemaParametro,
			Usuario usuarioLogado) throws ControladorException {

		/*
		 * Validação de Campos Obrigatórios
		 */

		if (sistemaParametro.getNomeEstado().equals("")) {
			// O Nome do Estado é obrigatório
			throw new ControladorException("atencao.informe_campo", null,
					"Nome do Estado");
		}

		if (sistemaParametro.getNomeEmpresa().equals("")) {
			// O Nome da Empresa é obrigatório
			throw new ControladorException("atencao.informe_campo", null,
					"Nome da Empresa");
		}

		if (sistemaParametro.getNomeAbreviadoEmpresa().equals("")) {
			// O Abreviatura da Empresa é obrigatório
			throw new ControladorException("atencao.informe_campo", null,
					"Abreviatura da Empresa");
		}

		if (sistemaParametro.getCnpjEmpresa().equals("")) {
			// CNPJ é obrigatório
			throw new ControladorException("atencao.informe_campo", null,
					"CNPJ");
		}

		if (sistemaParametro.getLogradouro().equals("")) {
			// O Logradouro é obrigatório
			throw new ControladorException("atencao.informe_campo", null,
					"Logradouro");
		}

		if (sistemaParametro.getAnoMesFaturamento() == null
				|| sistemaParametro.getAnoMesFaturamento().equals("")) {
			// O Mês e Ano de Referência é obrigatório
			throw new ControladorException("atencao.informe_campo", null,
					"Mês e Ano de Referência");
		}

		if (sistemaParametro.getAnoMesArrecadacao() == null
				|| sistemaParametro.getAnoMesArrecadacao().equals("")) {
			// O Mês e Ano de Referência é obrigatório
			throw new ControladorException("atencao.informe_campo", null,
					"Mês e Ano de Referência");
		}

		if (sistemaParametro.getMenorConsumoGrandeUsuario() == null
				|| sistemaParametro.getMenorConsumoGrandeUsuario().equals("")) {
			// O Menor Consumo para ser Grande Usuário é obrigatório
			throw new ControladorException("atencao.informe_campo", null,
					"Menor Consumo para ser Grande Usuário");
		}

		if (sistemaParametro.getValorMinimoEmissaoConta() == null
				|| sistemaParametro.getValorMinimoEmissaoConta().equals("")) {
			// O Menor Valor para Emissão de Contas é obrigatório
			throw new ControladorException("atencao.informe_campo", null,
					"Menor Valor para Emissão de Contas");
		}

		if (sistemaParametro.getMenorEconomiasGrandeUsuario() == null
				|| sistemaParametro.getMenorEconomiasGrandeUsuario().equals("")) {
			// O Qtde de Economias para ser Grande Usuário é obrigatório
			throw new ControladorException("atencao.informe_campo", null,
					"Qtde de Economias para ser Grande Usuário");
		}

		if (sistemaParametro.getMesesMediaConsumo() == null
				|| sistemaParametro.getMesesMediaConsumo().equals("")) {
			// O Menor Valor para Emissão de Contas é obrigatório
			throw new ControladorException("atencao.informe_campo", null,
					"Meses para Cálculo de Média de Consumo");
		}

		if (sistemaParametro.getNumeroMinimoDiasEmissaoVencimento() == null
				|| sistemaParametro.getNumeroMinimoDiasEmissaoVencimento()
						.equals("")) {
			throw new ControladorException("atencao.informe_campo", null,
					"Número de Dias entre o Vencimento e o Início da Cobrança");
		}

		if (sistemaParametro.getIncrementoMaximoConsumoRateio() == null
				|| sistemaParametro.getIncrementoMaximoConsumoRateio().equals(
						"")) {
			throw new ControladorException("atencao.informe_campo", null,
					"Incremento Máximo de Consumo por economia em Rateio");
		}

		if (sistemaParametro.getDecrementoMaximoConsumoRateio() == null
				|| sistemaParametro.getDecrementoMaximoConsumoRateio().equals(
						"")) {
			throw new ControladorException("atencao.informe_campo", null,
					"Decremento Máximo de Consumo por economia em Rateio");
		}

		if (sistemaParametro.getDiasMaximoAlterarOS() == null
				|| sistemaParametro.getDiasMaximoAlterarOS().equals("")) {
			throw new ControladorException("atencao.informe_campo", null,
					"Dias Máximo para Alterar Dados da OS");

		}

		if (sistemaParametro.getUltimoRAManual() == null
				|| sistemaParametro.getUltimoRAManual().equals("")) {
			throw new ControladorException("atencao.informe_campo", null,
					"Último ID Utilizado para Geração do RA Manual");

		}

		if (sistemaParametro.getTituloPagina() == null
				|| sistemaParametro.getTituloPagina().equals("")) {
			throw new ControladorException("atencao.informe_campo", null,
					"Títulos de Relatório");

		}
		sistemaParametro.setUltimaAlteracao(new Date());

		// ------------ REGISTRAR TRANSAÇÃO----------------------------

		// RegistradorOperacao registradorOperacao = new RegistradorOperacao(
		// Operacao.OPERACAO_SISTEMA_PARAMETROS_INSERIR,
		// new UsuarioAcaoUsuarioHelper(usuario,
		// UsuarioAcao.USUARIO_ACAO_EFETUOU_OPERACAO));
		//
		// Operacao operacao = new Operacao();
		// operacao.setId(Operacao.OPERACAO_SISTEMA_PARAMETROS_INSERIR);
		//
		// OperacaoEfetuada operacaoEfetuada = new OperacaoEfetuada();
		// operacaoEfetuada.setOperacao(operacao);
		//
		// sistemaParametro.setOperacaoEfetuada(operacaoEfetuada);
		// sistemaParametro.adicionarUsuario(Usuario.USUARIO_TESTE,
		// UsuarioAcao.USUARIO_ACAO_EFETUOU_OPERACAO);
		// registradorOperacao.registrarOperacao(sistemaParametro);

		// ------------ REGISTRAR TRANSAÇÃO----------------------------

		getControladorUtil().atualizar(sistemaParametro);

	}

	/**
	 * [UC0534] Inserir Feriado
	 * 
	 * @author Kassia Albuquerque
	 * @date 17/01/2007
	 * 
	 */
	public Integer inserirFeriado(NacionalFeriado nacionalFeriado,
			MunicipioFeriado municipioFeriado, Usuario usuarioLogado)
			throws ControladorException {

		if (nacionalFeriado != null) {

			// [FS0003] - Verificando a existência do Feriado Nacional pela
			// descrição

			FiltroNacionalFeriado filtroNacionalFeriado = new FiltroNacionalFeriado();

			/*
			 * filtroNacionalFeriado .adicionarParametro(new ParametroSimples(
			 * FiltroNacionalFeriado.NOME, nacionalFeriado .getDescricao()));
			 * filtroNacionalFeriado.adicionarParametro(new
			 * ParametroSimples(FiltroNacionalFeriado.DATA,
			 * nacionalFeriado.getData()));
			 * 
			 * Collection colecaoNacionalFeriado =
			 * getControladorUtil().pesquisar( filtroNacionalFeriado,
			 * NacionalFeriado.class.getName());
			 * 
			 * if (colecaoNacionalFeriado != null &&
			 * !colecaoNacionalFeriado.isEmpty()) { throw new
			 * ControladorException(
			 * "atencao.nacional_feriado.decricao.existente"); }
			 */

			// Verificando existência de mais de um Feriado Nacional numa mesma
			// data
			filtroNacionalFeriado.limparListaParametros();

			filtroNacionalFeriado.adicionarParametro(new ParametroSimples(
					FiltroNacionalFeriado.DATA, nacionalFeriado.getData()));

			Collection colecaoNacionalFeriado = getControladorUtil().pesquisar(
					filtroNacionalFeriado, NacionalFeriado.class.getName());

			if (colecaoNacionalFeriado != null
					&& !colecaoNacionalFeriado.isEmpty()) {
				throw new ControladorException(
						"atencao.nacional_feriado_com_data_existente");
			} else {
				filtroNacionalFeriado.limparListaParametros();

				filtroNacionalFeriado.adicionarParametro(new ParametroSimples(
						FiltroNacionalFeriado.DATA, nacionalFeriado.getData()));

				filtroNacionalFeriado.adicionarParametro(new ParametroSimples(
						FiltroNacionalFeriado.NOME, nacionalFeriado
								.getDescricao()));

				Collection colecaoNacionalFeriado2 = getControladorUtil()
						.pesquisar(filtroNacionalFeriado,
								NacionalFeriado.class.getName());

				if (!colecaoNacionalFeriado2.isEmpty()) {

					Iterator iterator2 = colecaoNacionalFeriado2.iterator();

					while (iterator2.hasNext()) {
						NacionalFeriado nacionalMunicipal = (NacionalFeriado) iterator2
								.next();

						Date data = nacionalMunicipal.getData();

						String data2String = Util.formatarData(data);

						String data2Tela = Util.formatarData(municipioFeriado
								.getDataFeriado());

						String ano2 = data2String.substring(6, 10);

						String ano2Tela = data2Tela.substring(6, 10);

						if (ano2.equals(ano2Tela)) {
							throw new ControladorException(
									"atencao.nacional_feriado_mesmo_nome_mesmo_ano");
						}
					}
				}
			}

			nacionalFeriado.setUltimaAlteracao(new Date());

			// ------------ REGISTRAR TRANSAÇÃO----------------------------
			RegistradorOperacao registradorOperacao = new RegistradorOperacao(
					Operacao.OPERACAO_FERIADO_INSERIR,
					new UsuarioAcaoUsuarioHelper(usuarioLogado,
							UsuarioAcao.USUARIO_ACAO_EFETUOU_OPERACAO));

			Operacao operacao = new Operacao();
			operacao.setId(Operacao.OPERACAO_FERIADO_INSERIR);

			OperacaoEfetuada operacaoEfetuada = new OperacaoEfetuada();
			operacaoEfetuada.setOperacao(operacao);

			nacionalFeriado.setOperacaoEfetuada(operacaoEfetuada);
			nacionalFeriado.adicionarUsuario(usuarioLogado,
					UsuarioAcao.USUARIO_ACAO_EFETUOU_OPERACAO);
			registradorOperacao.registrarOperacao(nacionalFeriado);
			// ------------ REGISTRAR TRANSAÇÃO----------------------------

			Integer idFeriado = (Integer) getControladorUtil().inserir(
					nacionalFeriado);

			return idFeriado;

		} else {

			// Verificando existencia de data Feriado Municipal numa mesma data
			// de Feriado Nacional

			FiltroNacionalFeriado filtroNacionalFeriado = new FiltroNacionalFeriado();

			filtroNacionalFeriado.adicionarParametro(new ParametroSimples(
					FiltroNacionalFeriado.DATA, municipioFeriado
							.getDataFeriado()));

			Collection colecaoNacionalFeriado = getControladorUtil().pesquisar(
					filtroNacionalFeriado, NacionalFeriado.class.getName());

			if (colecaoNacionalFeriado != null
					&& !colecaoNacionalFeriado.isEmpty()) {

				throw new ControladorException(
						"atencao.nacional_feriado_com_data_existente");
			}

			// Verificando se existe Feriado Municipal com mesma data do que
			// esta sendo atualizado
			FiltroMunicipioFeriado filtroMunicipioFeriado2 = new FiltroMunicipioFeriado();

			filtroMunicipioFeriado2.adicionarParametro(new ParametroSimples(
					FiltroMunicipioFeriado.DATA, municipioFeriado
							.getDataFeriado()));

			filtroMunicipioFeriado2.adicionarParametro(new ParametroSimples(
					FiltroMunicipioFeriado.ID_MUNICIPIO, municipioFeriado
							.getMunicipio()));

			Collection colecaoMunicipioFeriado1 = getControladorUtil()
					.pesquisar(filtroMunicipioFeriado2,
							MunicipioFeriado.class.getName());

			if (colecaoMunicipioFeriado1 != null
					&& !colecaoMunicipioFeriado1.isEmpty()) {
				throw new ControladorException(
						"atencao.municipio_feriado_com_data_existente");
			}

			filtroMunicipioFeriado2.limparListaParametros();

			filtroMunicipioFeriado2.adicionarParametro(new ParametroSimples(
					FiltroMunicipioFeriado.NOME, municipioFeriado
							.getDescricaoFeriado()));

			filtroMunicipioFeriado2.adicionarParametro(new ParametroSimples(
					FiltroMunicipioFeriado.DATA, municipioFeriado
							.getDataFeriado()));

			filtroMunicipioFeriado2.adicionarParametro(new ParametroSimples(
					FiltroMunicipioFeriado.ID_MUNICIPIO, municipioFeriado
							.getMunicipio()));

			Collection colecaoMunicipioFeriado2 = getControladorUtil()
					.pesquisar(filtroMunicipioFeriado2,
							MunicipioFeriado.class.getName());

			if (colecaoMunicipioFeriado2 != null
					&& !colecaoMunicipioFeriado2.isEmpty()) {
				throw new ControladorException(
						"atencao.municipio_feriado_com_data_existente");
			} else {
				// [FS0006] Verificar Existencia do feriado para outra data
				// informada
				filtroMunicipioFeriado2.limparListaParametros();

				filtroMunicipioFeriado2
						.adicionarParametro(new ParametroSimples(
								FiltroMunicipioFeriado.NOME, municipioFeriado
										.getDescricaoFeriado()));

				filtroMunicipioFeriado2
						.adicionarParametro(new ParametroSimples(
								FiltroMunicipioFeriado.ID_MUNICIPIO,
								municipioFeriado.getMunicipio()));

				Collection colecaoMunicipioFeriado = getControladorUtil()
						.pesquisar(filtroMunicipioFeriado2,
								MunicipioFeriado.class.getName());

				if (colecaoMunicipioFeriado != null
						&& !colecaoMunicipioFeriado.isEmpty()) {
					Iterator iterator = colecaoMunicipioFeriado.iterator();

					while (iterator.hasNext()) {
						MunicipioFeriado feriadoMunicipal = (MunicipioFeriado) iterator
								.next();

						Date data = feriadoMunicipal.getDataFeriado();

						String dataString = Util.formatarData(data);

						String dataTela = Util.formatarData(municipioFeriado
								.getDataFeriado());

						String ano = dataString.substring(6, 10);

						String anoTela = dataTela.substring(6, 10);

						if (ano.equals(anoTela)) {
							throw new ControladorException(
									"atencao.municipio_feriado_mesmo_nome_mesmo_ano");
						}
					}
				}
			}

		}
		municipioFeriado.setUltimaAlteracao(new Date());

		// ------------ REGISTRAR TRANSAÇÃO----------------------------
		RegistradorOperacao registradorOperacao = new RegistradorOperacao(
				Operacao.OPERACAO_FERIADO_INSERIR,
				new UsuarioAcaoUsuarioHelper(usuarioLogado,
						UsuarioAcao.USUARIO_ACAO_EFETUOU_OPERACAO));

		Operacao operacao = new Operacao();
		operacao.setId(Operacao.OPERACAO_FERIADO_INSERIR);

		OperacaoEfetuada operacaoEfetuada = new OperacaoEfetuada();
		operacaoEfetuada.setOperacao(operacao);

		municipioFeriado.setOperacaoEfetuada(operacaoEfetuada);
		municipioFeriado.adicionarUsuario(usuarioLogado,
				UsuarioAcao.USUARIO_ACAO_EFETUOU_OPERACAO);
		registradorOperacao.registrarOperacao(municipioFeriado);
		// ------------ REGISTRAR TRANSAÇÃO----------------------------

		Integer idFeriado = (Integer) getControladorUtil().inserir(
				municipioFeriado);
		return idFeriado;
	}

	/**
	 * Pesquisa os feriados(nacionais e municipais)
	 * 
	 * @author Kássia Albuquerque
	 * @date 22/01/2007
	 * 
	 */
	public Collection pesquisarFeriado(Short tipoFeriado, String descricao,
			Date dataFeriadoInicio, Date dataFeriadoFim, Integer idMunicipio,
			Integer numeroPagina, Short indicadorPerene, Boolean impressao) throws ControladorException {

		Collection colecaoObject = new ArrayList();

		Collection colecaoFeriado = new ArrayList();

		try {
			
			if(!impressao){
				colecaoObject = repositorioCadastro.pesquisarFeriado(tipoFeriado,
					descricao, dataFeriadoInicio, dataFeriadoFim, idMunicipio,
					numeroPagina, indicadorPerene);
			}else{
				colecaoObject = repositorioCadastro.pesquisarFeriadoTotal(tipoFeriado,
					descricao, dataFeriadoInicio, dataFeriadoFim, idMunicipio,
					numeroPagina, indicadorPerene);
			}
			Iterator iteratorObject = colecaoObject.iterator();
			while (iteratorObject.hasNext()) {
				Object[] arrayObject = (Object[]) iteratorObject.next();
				if (arrayObject != null) {
					// instancia um FeriadoHelper que é um helper
					FeriadoHelper feriadoHelper = new FeriadoHelper();
					// tipo do feriado
					if (arrayObject[0] != null) {
						feriadoHelper.setTipoFeriado((Short) arrayObject[0]);
					}
					// código do feriado
					if (arrayObject[1] != null) {
						feriadoHelper.setId((Integer) arrayObject[1]);
					}
					// descrição do feriado
					if (arrayObject[2] != null) {
						feriadoHelper.setDescricao((String) arrayObject[2]);
					}
					// descrição do município
					if (arrayObject[3] != null) {
						feriadoHelper
								.setDescricaoMunicipio((String) arrayObject[3]);
					}
					// data do feriado
					if (arrayObject[4] != null) {
						feriadoHelper.setData((Date) arrayObject[4]);
					}

					colecaoFeriado.add(feriadoHelper);
				}
			}

		} catch (ErroRepositorioException e) {
			throw new ControladorException("erro.sistema", e);
		}

		return colecaoFeriado;
	}

	/**
	 * Pesquisar quantidade de registro dos feriados(nacionais e municipais)
	 * 
	 * @author Kássia Albuquerque
	 * @date 22/01/2007
	 * 
	 */
	public Integer pesquisarFeriadoCount(Short tipoFeriado, String descricao,
			Date dataFeriadoInicio, Date dataFeriadoFim, Integer idMunicipio, Short indicadorPerene)
			throws ControladorException {
		try {
			return repositorioCadastro.pesquisarFeriadoCount(tipoFeriado,
					descricao, dataFeriadoInicio, dataFeriadoFim, idMunicipio, indicadorPerene);
		} catch (ErroRepositorioException e) {
			throw new ControladorException("erro.sistema", e);
		}
	}

	/**
	 * [UC0535] Manter Feriado [SB0001] Atualizar Feriado
	 * 
	 * @author Kassia Albuquerque
	 * @date 27/01/2006
	 * 
	 * @pparam feriado
	 * @throws ControladorException
	 */

	public void atualizarFeriado(NacionalFeriado nacionalFeriado,
			MunicipioFeriado municipioFeriado, Usuario usuarioLogado)
			throws ControladorException {

		if (nacionalFeriado != null) {

			// [FS0003] - Verificando a existência do Feriado Nacional pela
			// descrição

			FiltroNacionalFeriado filtroNacionalFeriado = new FiltroNacionalFeriado();
			/*
			 * filtroNacionalFeriado .adicionarParametro(new ParametroSimples(
			 * FiltroNacionalFeriado.NOME, nacionalFeriado .getDescricao()));
			 * 
			 * filtroNacionalFeriado .adicionarParametro(new
			 * ParametroSimplesDiferenteDe( FiltroNacionalFeriado.ID,
			 * nacionalFeriado.getId()));
			 * 
			 * Collection colecaoNacionalFeriado =
			 * getControladorUtil().pesquisar( filtroNacionalFeriado,
			 * NacionalFeriado.class.getName());
			 * 
			 * if (colecaoNacionalFeriado != null &&
			 * !colecaoNacionalFeriado.isEmpty()) { throw new
			 * ControladorException(
			 * "atencao.nacional_feriado.decricao.existente"); }
			 */

			// Verificando existência de mais de um Feriado Nacional numa mesma
			// data
			filtroNacionalFeriado.limparListaParametros();

			filtroNacionalFeriado.adicionarParametro(new ParametroSimples(
					FiltroNacionalFeriado.DATA, nacionalFeriado.getData()));

			filtroNacionalFeriado
					.adicionarParametro(new ParametroSimplesDiferenteDe(
							FiltroNacionalFeriado.ID, nacionalFeriado.getId()));

			Collection colecaoNacionalFeriado = new ArrayList();

			colecaoNacionalFeriado = getControladorUtil().pesquisar(
					filtroNacionalFeriado, NacionalFeriado.class.getName());

			if (!colecaoNacionalFeriado.isEmpty()) {
				throw new ControladorException(
						"atencao.nacional_feriado_com_data_existente");
			} else {
				filtroNacionalFeriado.limparListaParametros();

				filtroNacionalFeriado.adicionarParametro(new ParametroSimples(
						FiltroNacionalFeriado.DATA, nacionalFeriado.getData()));

				filtroNacionalFeriado.adicionarParametro(new ParametroSimples(
						FiltroNacionalFeriado.NOME, nacionalFeriado
								.getDescricao()));
				filtroNacionalFeriado.adicionarParametro(new ParametroSimplesDiferenteDe(
						FiltroNacionalFeriado.ID, nacionalFeriado.getId()));

				Collection colecaoNacionalFeriado2 = getControladorUtil()
						.pesquisar(filtroNacionalFeriado,
								NacionalFeriado.class.getName());

				if (!colecaoNacionalFeriado2.isEmpty()) {

					Iterator iterator2 = colecaoNacionalFeriado2.iterator();

					while (iterator2.hasNext()) {
						NacionalFeriado nacionalMunicipal = (NacionalFeriado) iterator2
								.next();

						Date data = nacionalMunicipal.getData();

						String data2String = Util.formatarData(data);

						String data2Tela = Util.formatarData(nacionalFeriado
								.getData());

						String ano2 = data2String.substring(6, 10);

						String ano2Tela = data2Tela.substring(6, 10);

						if (ano2.equals(ano2Tela)
								&& !data.equals(nacionalFeriado.getData())) {
							throw new ControladorException(
									"atencao.nacional_feriado_mesmo_nome_mesmo_ano");
						}
					}
				}
			}

			nacionalFeriado.setUltimaAlteracao(new Date());

			// ------------ REGISTRAR TRANSAÇÃO----------------------------
			RegistradorOperacao registradorOperacao = new RegistradorOperacao(
					Operacao.OPERACAO_FERIADO_ATUALIZAR,
					new UsuarioAcaoUsuarioHelper(usuarioLogado,
							UsuarioAcao.USUARIO_ACAO_EFETUOU_OPERACAO));

			Operacao operacao = new Operacao();
			operacao.setId(Operacao.OPERACAO_FERIADO_ATUALIZAR);

			OperacaoEfetuada operacaoEfetuada = new OperacaoEfetuada();
			operacaoEfetuada.setOperacao(operacao);

			nacionalFeriado.setOperacaoEfetuada(operacaoEfetuada);
			nacionalFeriado.adicionarUsuario(usuarioLogado,
					UsuarioAcao.USUARIO_ACAO_EFETUOU_OPERACAO);
			registradorOperacao.registrarOperacao(nacionalFeriado);
			// ------------ REGISTRAR TRANSAÇÃO----------------------------

			// [FS0004] - Atualização realizada por outro usuário

			FiltroNacionalFeriado filtroNacionalFeriadoBase = new FiltroNacionalFeriado();

			// Seta o filtro para buscar o FERIADO na base
			filtroNacionalFeriadoBase.adicionarParametro(new ParametroSimples(
					FiltroNacionalFeriado.ID, nacionalFeriado.getId()));

			// Procura servicoPerfilTipo na base
			Collection feriadoAtualizados = getControladorUtil().pesquisar(
					filtroNacionalFeriadoBase, NacionalFeriado.class.getName());

			NacionalFeriado nacionalFeriadoNaBase = (NacionalFeriado) Util
					.retonarObjetoDeColecao(feriadoAtualizados);

			if (nacionalFeriadoNaBase == null) {

				sessionContext.setRollbackOnly();
				throw new ControladorException(
						"atencao.registro_remocao_nao_existente");
			}

			// Verificar se o feriado já foi atualizado por outro usuário
			// durante esta atualização

			if (nacionalFeriadoNaBase.getUltimaAlteracao().after(
					nacionalFeriado.getUltimaAlteracao())) {

				sessionContext.setRollbackOnly();
				throw new ControladorException("atencao.atualizacao.timestamp");
			}

			nacionalFeriado.setUltimaAlteracao(new Date());

			// Atualiza o objeto na base
			getControladorUtil().atualizar(nacionalFeriado);

		} else {

			// Verificando existencia de data Feriado Municipal numa mesma data
			// de Feriado Nacional
			FiltroNacionalFeriado filtroNacionalFeriado = new FiltroNacionalFeriado();

			filtroNacionalFeriado.adicionarParametro(new ParametroSimples(
					FiltroNacionalFeriado.DATA, municipioFeriado
							.getDataFeriado()));

			Collection colecaoNacionalFeriado = getControladorUtil().pesquisar(
					filtroNacionalFeriado, NacionalFeriado.class.getName());

			if (colecaoNacionalFeriado != null
					&& !colecaoNacionalFeriado.isEmpty()) {

				throw new ControladorException(
						"atencao.nacional_feriado_com_data_existente");
			}

			// [FS0003] - Verificando a existência do Feriado Municipal pela
			// descrição

			// Verificando se existe Feriado Municipal com mesma data do que
			// esta sendo atualizado
			FiltroMunicipioFeriado filtroMunicipioFeriado2 = new FiltroMunicipioFeriado();

			filtroMunicipioFeriado2.adicionarParametro(new ParametroSimples(
					FiltroMunicipioFeriado.DATA, municipioFeriado
							.getDataFeriado()));

			filtroMunicipioFeriado2.adicionarParametro(new ParametroSimples(
					FiltroMunicipioFeriado.ID_MUNICIPIO, municipioFeriado
							.getMunicipio()));

			filtroMunicipioFeriado2
					.adicionarParametro(new ParametroSimplesDiferenteDe(
							FiltroMunicipioFeriado.ID, municipioFeriado.getId()));

			Collection colecaoMunicipioFeriado2 = getControladorUtil()
					.pesquisar(filtroMunicipioFeriado2,
							MunicipioFeriado.class.getName());

			if (colecaoMunicipioFeriado2 != null
					&& !colecaoMunicipioFeriado2.isEmpty()) {
				throw new ControladorException(
						"atencao.municipio_feriado_com_data_existente");
			} else {
				// [FS0006] Verificar Existencia do feriado para outra data
				// informada
				filtroMunicipioFeriado2.limparListaParametros();

				filtroMunicipioFeriado2
						.adicionarParametro(new ParametroSimples(
								FiltroMunicipioFeriado.NOME, municipioFeriado
										.getDescricaoFeriado()));

				filtroMunicipioFeriado2
						.adicionarParametro(new ParametroSimples(
								FiltroMunicipioFeriado.ID_MUNICIPIO,
								municipioFeriado.getMunicipio()));
				
				filtroMunicipioFeriado2
						.adicionarParametro(new ParametroSimplesDiferenteDe(
								FiltroMunicipioFeriado.ID, 
								municipioFeriado.getId()));

				Collection colecaoMunicipioFeriado = getControladorUtil()
						.pesquisar(filtroMunicipioFeriado2,
								MunicipioFeriado.class.getName());

				if (colecaoMunicipioFeriado != null
						&& !colecaoMunicipioFeriado.isEmpty()) {
					Iterator iterator = colecaoMunicipioFeriado.iterator();

					while (iterator.hasNext()) {
						MunicipioFeriado feriadoMunicipal = (MunicipioFeriado) iterator
								.next();

						Date data = feriadoMunicipal.getDataFeriado();

						String dataString = Util.formatarData(data);

						String dataTela = Util.formatarData(municipioFeriado
								.getDataFeriado());

						String ano = dataString.substring(6, 10);

						String anoTela = dataTela.substring(6, 10);

						if (ano.equals(anoTela)
								&& !data.equals(municipioFeriado
										.getDataFeriado())) {
							throw new ControladorException(
									"atencao.municipio_feriado_mesmo_nome_mesmo_ano");
						}
					}
				}
			}

			municipioFeriado.setUltimaAlteracao(new Date());

			// ------------ REGISTRAR TRANSAÇÃO----------------------------
			RegistradorOperacao registradorOperacao = new RegistradorOperacao(
					Operacao.OPERACAO_FERIADO_ATUALIZAR,
					new UsuarioAcaoUsuarioHelper(usuarioLogado,
							UsuarioAcao.USUARIO_ACAO_EFETUOU_OPERACAO));

			Operacao operacao = new Operacao();
			operacao.setId(Operacao.OPERACAO_FERIADO_ATUALIZAR);

			OperacaoEfetuada operacaoEfetuada = new OperacaoEfetuada();
			operacaoEfetuada.setOperacao(operacao);

			municipioFeriado.setOperacaoEfetuada(operacaoEfetuada);
			municipioFeriado.adicionarUsuario(usuarioLogado,
					UsuarioAcao.USUARIO_ACAO_EFETUOU_OPERACAO);
			registradorOperacao.registrarOperacao(municipioFeriado);
			// ------------ REGISTRAR TRANSAÇÃO----------------------------

			// [FS0004] - Atualização realizada por outro usuário

			FiltroMunicipioFeriado filtroMunicipioFeriadoBase = new FiltroMunicipioFeriado();
			// Seta o filtro para buscar o FERIADO na base
			filtroMunicipioFeriadoBase.adicionarParametro(new ParametroSimples(
					FiltroMunicipioFeriado.ID, municipioFeriado.getId()));

			// Procura feriado na base
			Collection feriadoAtualizados = getControladorUtil().pesquisar(
					filtroMunicipioFeriadoBase,
					MunicipioFeriado.class.getName());

			MunicipioFeriado municipioFeriadoNaBase = (MunicipioFeriado) Util
					.retonarObjetoDeColecao(feriadoAtualizados);

			if (municipioFeriadoNaBase == null) {

				sessionContext.setRollbackOnly();
				throw new ControladorException(
						"atencao.registro_remocao_nao_existente");
			}

			// Verificar se o feriado já foi atualizado por outro usuário
			// durante esta atualização

			if (municipioFeriadoNaBase.getUltimaAlteracao().after(
					municipioFeriado.getUltimaAlteracao())) {

				sessionContext.setRollbackOnly();
				throw new ControladorException("atencao.atualizacao.timestamp");
			}

			municipioFeriado.setUltimaAlteracao(new Date());

			// Atualiza o objeto na base
			getControladorUtil().atualizar(municipioFeriado);

		}
	}

	/**
	 * [UC0535] Manter Feriado
	 * 
	 * Remover Feriado
	 * 
	 * @author Kassia Albuquerque
	 * @date 29/01/2007
	 * 
	 * @pparam feriado
	 * @throws ControladorException
	 */
	public void removerFeriado(String[] ids, Usuario usuarioLogado)
			throws ControladorException {

		// ------------ REGISTRAR TRANSAÇÃO ----------------
		Operacao operacao = new Operacao();
		operacao.setId(Operacao.OPERACAO_FERIADO_REMOVER);

		OperacaoEfetuada operacaoEfetuada = new OperacaoEfetuada();
		operacaoEfetuada.setOperacao(operacao);

		UsuarioAcaoUsuarioHelper usuarioAcaoUsuarioHelper = new UsuarioAcaoUsuarioHelper(
				usuarioLogado, UsuarioAcao.USUARIO_ACAO_EFETUOU_OPERACAO);
		Collection<UsuarioAcaoUsuarioHelper> colecaoUsuarios = new ArrayList();
		colecaoUsuarios.add(usuarioAcaoUsuarioHelper);
		// ------------ REGISTRAR TRANSAÇÃO ----------------

		if (ids != null && ids.length != 0) {
			for (int i = 0; i < ids.length; i++) {
				String[] idsColecao = ids[i].split(";");
				if (idsColecao[1].equals("2")) {
					this.getControladorUtil().removerUm(
							new Integer(idsColecao[0]),
							MunicipioFeriado.class.getName(), operacaoEfetuada,
							colecaoUsuarios);
				} else {
					this.getControladorUtil().removerUm(
							new Integer(idsColecao[0]),
							NacionalFeriado.class.getName(), operacaoEfetuada,
							colecaoUsuarios);
				}

			}
		}
	}

	/**
	 * Pesquisar os ids do Setor comercial pela localidade
	 * 
	 * @author Ana Maria
	 * @date 07/02/2007
	 * 
	 * @return Collection<Integer>
	 * @throws ErroRepositorioException
	 */
	public Collection<Integer> pesquisarIdsSetorComercial(Integer idLocalidade)
			throws ControladorException {
		try {
			return repositorioSetorComercial
					.pesquisarIdsSetorComercial(idLocalidade);
		} catch (ErroRepositorioException ex) {
			sessionContext.setRollbackOnly();
			throw new ControladorException("erro.sistema", ex);
		}

	}

	/**
	 * Informar Mensagem do Sistema
	 * 
	 * @author Kássia Albuquerque
	 * @date 02/03/2007
	 * 
	 */
	public void atualizarMensagemSistema(SistemaParametro sistemaParametro,
			Usuario usuarioLogado) throws ControladorException {

		// [FS0003] - Atualização realizada por outro usuário
		if (sistemaParametro == null) {
			sessionContext.setRollbackOnly();
			throw new ControladorException(
					"atencao.registro_remocao_nao_existente");
		}

		// Verificar se já foi atualizado por outro usuário durante esta
		// atualização
		SistemaParametro sistemaParametroBase = getControladorUtil()
				.pesquisarParametrosDoSistema();

		if (sistemaParametroBase.getUltimaAlteracao().after(
				sistemaParametro.getUltimaAlteracao())) {
			sessionContext.setRollbackOnly();
			throw new ControladorException("atencao.atualizacao.timestamp");
		}
		try {
			// Atualiza o objeto na base
			repositorioCadastro.atualizarMensagemSistema(sistemaParametro
					.getMensagemSistema());
		} catch (ErroRepositorioException ex) {
			sessionContext.setRollbackOnly();
			throw new ControladorException("erro.sistema", ex);
		}
	}

	/**
	 * Pesquisa os dados do email do batch para ser enviado
	 * 
	 * @author Sávio Luiz
	 * @date 13/03/2007
	 * 
	 */
	public EnvioEmail pesquisarEnvioEmail(Integer idEnvioEmail)
			throws ControladorException {
		try {
			return repositorioCadastro.pesquisarEnvioEmail(idEnvioEmail);
		} catch (ErroRepositorioException ex) {
			sessionContext.setRollbackOnly();
			throw new ControladorException("erro.sistema", ex);
		}
	}

	public DadosEnvioEmailHelper pesquisarDadosEmailSistemaParametros()
			throws ControladorException {

		try {
			return repositorioCadastro.pesquisarDadosEmailSistemaParametros();
		} catch (ErroRepositorioException ex) {
			sessionContext.setRollbackOnly();
			throw new ControladorException("erro.sistema", ex);
		}
	}

	/**
	 * [UC0842] Inserir Funcionário
	 * 
	 * @author Rômulo Aurélio, Raphael Rossiter
	 * @date 12/04/2007, 17/06/2009
	 * 
	 * @param funcionario,
	 * @param usuarioLogado
	 * @throws ControladorException
	 */
	public void inserirFuncionario(Funcionario funcionario,
			Usuario usuarioLogado) throws ControladorException {

		// VALIDANDO OS DADOS DO FUNCIONÁRIO
		this.validarFuncionario(funcionario, true);

		// ------------ REGISTRAR TRANSAÇÃO ----------------
		RegistradorOperacao registradorOperacao = new RegistradorOperacao(
				Operacao.OPERACAO_FUNCIONARIO_INSERIR,
				new UsuarioAcaoUsuarioHelper(usuarioLogado,
						UsuarioAcao.USUARIO_ACAO_EFETUOU_OPERACAO));

		Operacao operacao = new Operacao();
		operacao.setId(Operacao.OPERACAO_FUNCIONARIO_INSERIR);

		OperacaoEfetuada operacaoEfetuada = new OperacaoEfetuada();
		operacaoEfetuada.setOperacao(operacao);

		funcionario.setOperacaoEfetuada(operacaoEfetuada);
		funcionario.adicionarUsuario(usuarioLogado,
				UsuarioAcao.USUARIO_ACAO_EFETUOU_OPERACAO);
		registradorOperacao.registrarOperacao(funcionario);
		// ------------ REGISTRAR TRANSAÇÃO ----------------

		getControladorUtil().inserir(funcionario);

	}

	/**
	 * [UC????] Atualizar Funcionario
	 * 
	 * @author Rômulo Aurélio
	 * @date 17/04/2007
	 * 
	 * @param funcionario,
	 *            usuarioLogado, idFuncionario
	 * 
	 */
	public void atualizarFuncionario(Funcionario funcionario,
			Usuario usuarioLogado) throws ControladorException {

		// VALIDANDO OS DADOS DO FUNCIONÁRIO
		this.validarFuncionario(funcionario, false);

		// ------------ REGISTRAR TRANSAÇÃO ----------------
		RegistradorOperacao registradorOperacao = new RegistradorOperacao(
				Operacao.OPERACAO_FUNCIONARIO_ATUALIZAR,
				new UsuarioAcaoUsuarioHelper(usuarioLogado,
						UsuarioAcao.USUARIO_ACAO_EFETUOU_OPERACAO));

		Operacao operacao = new Operacao();
		operacao.setId(Operacao.OPERACAO_FUNCIONARIO_ATUALIZAR);

		OperacaoEfetuada operacaoEfetuada = new OperacaoEfetuada();
		operacaoEfetuada.setOperacao(operacao);

		funcionario.setOperacaoEfetuada(operacaoEfetuada);
		funcionario.adicionarUsuario(usuarioLogado,
				UsuarioAcao.USUARIO_ACAO_EFETUOU_OPERACAO);
		registradorOperacao.registrarOperacao(funcionario);
		// ------------ REGISTRAR TRANSAÇÃO ----------------

		getControladorUtil().atualizar(funcionario);

	}

	/**
	 * Pesquisar todos ids dos setores comerciais.
	 * 
	 * [UC0564 - Gerar Resumo das Instalações de Hidrômetros]
	 * 
	 * @author Pedro Alexandre
	 * @date 25/04/2007
	 * 
	 * @return
	 * @throws ControladorException
	 */
	public Collection<Integer> pesquisarTodosIdsSetorComercial()
			throws ControladorException {
		try {
			return repositorioCadastro.pesquisarTodosIdsSetorComercial();
		} catch (ErroRepositorioException e) {
			throw new ControladorException("erro.sistema", e);
		}
	}

	/**
	 * Este caso de uso permite a emissão de boletins de cadastro
	 * 
	 * [UC0582] Emitir Boletim de Cadastro
	 * 
	 * @author Rafael Corrêa, Ivan Sergio
	 * @data 15/05/2007, 26/01/2009
	 * @alteracao 26/01/2009 - CRC1076 - Alterado o nome do arquivo gerado.
	 * 
	 * @param
	 * @return void
	 */
	public void emitirBoletimCadastro(
			CobrancaAcaoAtividadeCronograma cronogramaAtividadeAcaoCobranca,
			CobrancaAcaoAtividadeComando comandoAtividadeAcaoCobranca,
			Date dataAtualPesquisa, CobrancaAcao cobrancaAcao,
			int idFuncionalidadeIniciada) throws ControladorException {

		int idUnidadeIniciada = 0;

		if (comandoAtividadeAcaoCobranca != null) {
			idUnidadeIniciada = getControladorBatch()
					.iniciarUnidadeProcessamentoBatch(idFuncionalidadeIniciada,
							UnidadeProcessamento.COB_ACAO_ATIV_COMAND,
							comandoAtividadeAcaoCobranca.getId());
		} else {
			idUnidadeIniciada = getControladorBatch()
					.iniciarUnidadeProcessamentoBatch(idFuncionalidadeIniciada,
							UnidadeProcessamento.COB_ACAO_ATIV_CRONOG,
							cronogramaAtividadeAcaoCobranca.getId());
		}

		Integer idCronogramaAtividadeAcaoCobranca = null;
		Integer idComandoAtividadeAcaoCobranca = null;

		if (cronogramaAtividadeAcaoCobranca != null
				&& cronogramaAtividadeAcaoCobranca.getId() != null) {
			idCronogramaAtividadeAcaoCobranca = cronogramaAtividadeAcaoCobranca
					.getId();
		}
		if (comandoAtividadeAcaoCobranca != null
				&& comandoAtividadeAcaoCobranca.getId() != null) {
			idComandoAtividadeAcaoCobranca = comandoAtividadeAcaoCobranca
					.getId();
		}

		// Caso seja cobrança ação atividade cronograma e seja Fiscalização
		// cortado ou suprimido então gera boletin de cadastro
		// Caso seja cobrança ação atividade comando e o indicador de emissão de
		// boletim seja "SIM"(1) então gera boletin de cadastro
		if ((idCronogramaAtividadeAcaoCobranca != null && (cobrancaAcao.getId()
				.equals(CobrancaAcao.FISCALIZACAO_SUPRIMIDO) || cobrancaAcao
				.getId().equals(CobrancaAcao.FISCALIZACAO_CORTADO)))
				|| (idComandoAtividadeAcaoCobranca != null
						&& comandoAtividadeAcaoCobranca.getIndicadorBoletim() != null && comandoAtividadeAcaoCobranca
						.getIndicadorBoletim()
						.equals(
								CobrancaAcaoAtividadeComando.INDICADOR_BOLETIM_SIM))) {

			System.out.println("********************");
			System.out.println("INICIO BOLETIM CADASTRO");
			System.out.println("********************");

			try {

				boolean flagFimPesquisa = false;
				final int quantidadeCobrancaDocumento = 500;
				int quantidadeCobrancaDocumentoInicio = 0;
				StringBuilder boletimCadastroTxt = new StringBuilder();
				int pagina = 0;

				while (!flagFimPesquisa) {

					pagina++;

					Collection colecaoEmitirBoletimCadastro = null;
					try {

						colecaoEmitirBoletimCadastro = repositorioCobranca
								.pesquisarCobrancaDocumentoBoletimCadastro(
										idCronogramaAtividadeAcaoCobranca,
										idComandoAtividadeAcaoCobranca,
										dataAtualPesquisa,
										cobrancaAcao.getId(),
										quantidadeCobrancaDocumentoInicio);

					} catch (ErroRepositorioException ex) {
						ex.printStackTrace();
						throw new ControladorException("erro.sistema", ex);
					}

					if (colecaoEmitirBoletimCadastro != null
							&& !colecaoEmitirBoletimCadastro.isEmpty()) {

						if (colecaoEmitirBoletimCadastro.size() < quantidadeCobrancaDocumento) {
							flagFimPesquisa = true;
						} else {
							quantidadeCobrancaDocumentoInicio = quantidadeCobrancaDocumentoInicio + 500;
						}

						Iterator colecaoEmitirBoletimCadastroIterator = colecaoEmitirBoletimCadastro
								.iterator();
						int count = 0;

						EmitirDocumentoCobrancaBoletimCadastroHelper emitirDocumentoCobrancaBoletimCadastroHelper = null;

						while (colecaoEmitirBoletimCadastroIterator.hasNext()) {

							emitirDocumentoCobrancaBoletimCadastroHelper = (EmitirDocumentoCobrancaBoletimCadastroHelper) colecaoEmitirBoletimCadastroIterator
									.next();

							count++;

							System.out
									.println("VEZ QUE ENTRA:"
											+ pagina
											+ " / "
											+ count
											+ " / IMÓVEL:"
											+ emitirDocumentoCobrancaBoletimCadastroHelper
													.getIdImovel().toString());

							if (emitirDocumentoCobrancaBoletimCadastroHelper != null) {
								criarDadosTxtBoletimCadastro(
										boletimCadastroTxt,
										emitirDocumentoCobrancaBoletimCadastroHelper);
							}

							emitirDocumentoCobrancaBoletimCadastroHelper = null;

							boletimCadastroTxt.append(System
									.getProperty("line.separator"));
						}
					} else {
						flagFimPesquisa = true;
					}
				}

				System.out.println("********************");
				System.out.println("FIM BOLETIM CADASTRO");
				System.out.println("********************");

				Date dataAtual = new Date();

				String nomeZip = null;
				String tituloComandoEventual = null;
				String grupo = null;

				if (comandoAtividadeAcaoCobranca != null
						&& comandoAtividadeAcaoCobranca.getId() != null) {

					tituloComandoEventual = comandoAtividadeAcaoCobranca
							.getDescricaoTitulo();
					nomeZip = "BOLETIM_CADASTRAL_" + tituloComandoEventual
							+ " " + Util.formatarDataComHora(dataAtual);
				} else {
					grupo = cronogramaAtividadeAcaoCobranca
							.getCobrancaAcaoCronograma()
							.getCobrancaGrupoCronogramaMes().getCobrancaGrupo()
							.getId().toString();

					nomeZip = "BOLETIM_CAD_GRUPO_" + grupo + "_"
							+ Util.formatarDataComHora(dataAtual);
				}

				nomeZip = nomeZip.replace("/", "_");
				nomeZip = nomeZip.replace(" ", "_");
				nomeZip = nomeZip.replace(":", "_");
				nomeZip = nomeZip.replace("/", "_");

				try {
					if (boletimCadastroTxt != null
							&& boletimCadastroTxt.length() != 0) {

						boletimCadastroTxt.append("\u0004");

						// criar o arquivo zip
						File compactado = new File(nomeZip + ".zip"); // nomeZip
						ZipOutputStream zos = new ZipOutputStream(
								new FileOutputStream(compactado));

						File leitura = new File(nomeZip + ".txt");

						BufferedWriter out = new BufferedWriter(
								new OutputStreamWriter(new FileOutputStream(
										leitura.getAbsolutePath())));

						out.write(boletimCadastroTxt.toString());
						out.flush();
						out.close();
						ZipUtil.adicionarArquivo(zos, leitura);

						// close the stream
						zos.close();
						leitura.delete();
					}

					System.out.println("********************");
					System.out.println("FIM GERAÇÃO ARQUIVO");
					System.out.println("********************");

				} catch (IOException e) {
					e.printStackTrace();
					throw new ControladorException("erro.sistema", e);
				} catch (Exception e) {
					e.printStackTrace();
					throw new ControladorException("erro.sistema", e);
				}

				getControladorBatch().encerrarUnidadeProcessamentoBatch(null,
						idUnidadeIniciada, false);

			} catch (Exception e) {

				// Este catch serve para interceptar qualquer exceção que o
				// processo
				// batch venha a lançar e garantir que a unidade de
				// processamento do
				// batch será atualizada com o erro ocorrido
				e.printStackTrace();
				getControladorBatch().encerrarUnidadeProcessamentoBatch(e,
						idUnidadeIniciada, true);
				throw new EJBException(e);
			}
		} else {
			getControladorBatch().encerrarUnidadeProcessamentoBatch(null,
					idUnidadeIniciada, false);
		}
	}

	private void criarDadosTxtBoletimCadastro(
			StringBuilder boletimCadastroTxt,
			EmitirDocumentoCobrancaBoletimCadastroHelper emitirDocumentoCobrancaBoletimCadastroHelper)
			throws ControladorException {

		ClienteEmitirBoletimCadastroHelper clienteEmitirBoletimCadastroHelperProprietario = null;
		ClienteEmitirBoletimCadastroHelper clienteEmitirBoletimCadastroHelperUsuario = null;

		clienteEmitirBoletimCadastroHelperProprietario = getControladorCliente()
				.pesquisarClienteEmitirBoletimCadastro(
						emitirDocumentoCobrancaBoletimCadastroHelper
								.getIdImovel(), ClienteRelacaoTipo.PROPRIETARIO);

		clienteEmitirBoletimCadastroHelperUsuario = getControladorCliente()
				.pesquisarClienteEmitirBoletimCadastro(
						emitirDocumentoCobrancaBoletimCadastroHelper
								.getIdImovel(), ClienteRelacaoTipo.USUARIO);

		// Início do processo de geração do arquivo txt

		// Número Documento/Referência
		boletimCadastroTxt.append(Util.completaString("", 8));

		// Dados do Cliente Proprietário
		if (clienteEmitirBoletimCadastroHelperProprietario != null) {

			adicionarDadosClienteEmitirBoletimCadastroTxt(boletimCadastroTxt,
					clienteEmitirBoletimCadastroHelperProprietario);
		} else {
			boletimCadastroTxt.append(Util.completaString("", 279));
		}

		// Dados do Cliente Usuário
		if (clienteEmitirBoletimCadastroHelperUsuario != null) {

			adicionarDadosClienteEmitirBoletimCadastroTxt(boletimCadastroTxt,
					clienteEmitirBoletimCadastroHelperUsuario);

		} else {
			boletimCadastroTxt.append(Util.completaString("", 279));
		}

		// Dados do Imóvel
		boletimCadastroTxt.append(Util.completaString("", 1));

		// Inscrição
		String inscricaoImovel =

		// Localidade
		Util.adicionarZerosEsquedaNumero(3,
				emitirDocumentoCobrancaBoletimCadastroHelper.getIdLocalidade()
						.toString())

				// Setor Comercial
				+ Util.adicionarZerosEsquedaNumero(3,
						emitirDocumentoCobrancaBoletimCadastroHelper
								.getCodigoSetorComercial().toString())

				// Quadra
				+ Util.adicionarZerosEsquedaNumero(3, ""
						+ emitirDocumentoCobrancaBoletimCadastroHelper
								.getNumeroQuadra())

				// Lote
				+ Util.adicionarZerosEsquedaNumero(4, ""
						+ emitirDocumentoCobrancaBoletimCadastroHelper
								.getLote())

				// Sublote
				+ Util.adicionarZerosEsquedaNumero(3, ""
						+ emitirDocumentoCobrancaBoletimCadastroHelper
								.getSubLote());

		boletimCadastroTxt.append(Util.completaString(inscricaoImovel, 16));

		// Matrícula do imóvel
		String matriculaImovelFormatada = Util
				.adicionarZerosEsquedaNumero(9, ""
						+ emitirDocumentoCobrancaBoletimCadastroHelper
								.getIdImovel());

		boletimCadastroTxt.append(Util.completaString(matriculaImovelFormatada,
				9));

		// Código do Cliente Proprietário
		String idClienteProprietario = "";

		if (clienteEmitirBoletimCadastroHelperProprietario != null) {

			idClienteProprietario = Util.adicionarZerosEsquedaNumero(12,
					clienteEmitirBoletimCadastroHelperProprietario.getCliente()
							.getId().toString());
		}

		boletimCadastroTxt.append(Util
				.completaString(idClienteProprietario, 12));

		// Inscrição Atual
		boletimCadastroTxt.append(Util.completaString("", 16));

		// Número de Moradores
		String numeroMoradores = "";

		if (emitirDocumentoCobrancaBoletimCadastroHelper.getNumeroMorador() != null) {

			numeroMoradores = Util.adicionarZerosEsquedaNumero(4,
					emitirDocumentoCobrancaBoletimCadastroHelper
							.getNumeroMorador().toString());
		}

		boletimCadastroTxt.append(Util.completaString(numeroMoradores, 4));

		// Nome na Conta
		String nomeConta = "";
		Integer idRelacaoTipo = null;

		try {

			idRelacaoTipo = repositorioClienteImovel
					.retornaTipoRelacaoClienteImovelNomeConta(emitirDocumentoCobrancaBoletimCadastroHelper
							.getIdImovel());

		} catch (ErroRepositorioException ex) {
			ex.printStackTrace();
			throw new ControladorException("erro.sistema", ex);
		}

		if (idRelacaoTipo != null) {

			if (idRelacaoTipo.toString().equals(
					ClienteRelacaoTipo.PROPRIETARIO.toString())) {
				nomeConta = "P";
			} else if (idRelacaoTipo.toString().equals(
					ClienteRelacaoTipo.USUARIO.toString())) {
				nomeConta = "U";
			} else {
				nomeConta = "R";
			}
		}

		boletimCadastroTxt.append(Util.completaString(nomeConta, 1));

		// Código do Cliente Usuário
		String idClienteUsuario = "";

		if (clienteEmitirBoletimCadastroHelperUsuario != null) {
			idClienteUsuario = Util.adicionarZerosEsquedaNumero(12,
					clienteEmitirBoletimCadastroHelperUsuario.getCliente()
							.getId().toString());
		}

		boletimCadastroTxt.append(Util.completaString(idClienteUsuario, 12));

		// Logradouro
		String idLogradouro = "";

		if (emitirDocumentoCobrancaBoletimCadastroHelper.getIdLogradouro() != null) {

			idLogradouro = Util.adicionarZerosEsquedaNumero(9,
					emitirDocumentoCobrancaBoletimCadastroHelper
							.getIdLogradouro().toString());
		}

		boletimCadastroTxt.append(Util.completaString(idLogradouro, 9));

		// Endereço Abreviado
		String enderecoImovel = getControladorEndereco()
				.pesquisarEnderecoFormatado(
						emitirDocumentoCobrancaBoletimCadastroHelper
								.getIdImovel());

		if (enderecoImovel == null) {
			enderecoImovel = "";
		}

		boletimCadastroTxt.append(Util.completaString(enderecoImovel, 60));

		// CEP
		String cep = "";

		if (emitirDocumentoCobrancaBoletimCadastroHelper.getCodigoCep() != null) {

			cep = Util.adicionarZerosEsquedaNumero(8,
					emitirDocumentoCobrancaBoletimCadastroHelper.getCodigoCep()
							.toString());
		}

		boletimCadastroTxt.append(Util.completaString(cep, 8));

		// Bairro
		String bairro = "";

		if (emitirDocumentoCobrancaBoletimCadastroHelper.getCodigoBairro() != null) {

			bairro = Util.adicionarZerosEsquedaNumero(3,
					emitirDocumentoCobrancaBoletimCadastroHelper
							.getCodigoBairro().toString());
		}

		boletimCadastroTxt.append(Util.completaString(bairro, 3));

		// Referência
		String referencia = "";

		if (emitirDocumentoCobrancaBoletimCadastroHelper.getReferencia() != null) {

			referencia = emitirDocumentoCobrancaBoletimCadastroHelper
					.getReferencia().toString();
		}

		boletimCadastroTxt.append(Util.completaString(referencia, 1));

		// Número do Imóvel
		String numeroImovel = "";

		if (emitirDocumentoCobrancaBoletimCadastroHelper.getNumeroImovel() != null) {

			numeroImovel = Util.adicionarZerosEsquedaNumero(5,
					emitirDocumentoCobrancaBoletimCadastroHelper
							.getNumeroImovel().toString());
		}

		boletimCadastroTxt.append(Util.completaString(numeroImovel, 5));

		// Complemento
		String complemento = "";

		if (emitirDocumentoCobrancaBoletimCadastroHelper.getComplemento() != null) {
			complemento = emitirDocumentoCobrancaBoletimCadastroHelper
					.getComplemento();
		}

		boletimCadastroTxt.append(Util.completaString(complemento, 19));

		// Dados das Subcategorias
		Collection colecaoSubcategorias = getControladorImovel()
				.obterQuantidadeEconomiasSubCategoria(
						emitirDocumentoCobrancaBoletimCadastroHelper
								.getIdImovel());

		String subcategorias = "";

		if (colecaoSubcategorias != null && !colecaoSubcategorias.isEmpty()) {

			Iterator colecaoSubcategoriasIterator = colecaoSubcategorias
					.iterator();

			for (int i = 0; i < 6; i++) {

				if (colecaoSubcategoriasIterator.hasNext()) {

					Subcategoria subcategoria = (Subcategoria) colecaoSubcategoriasIterator
							.next();

					subcategorias = subcategorias
							+ Util.adicionarZerosEsquedaNumero(2, subcategoria
									.getId()
									+ "")
							+ Util.adicionarZerosEsquedaNumero(4, subcategoria
									.getQuantidadeEconomias().toString());
				} else {
					break;
				}
			}
		}

		boletimCadastroTxt.append(Util.completaString(subcategorias, 36));

		// Qtde Apartamentos (Hotel)
		boletimCadastroTxt.append(Util.completaString("", 6));

		// Área Construída
		String areaConstruida = "";

		if (emitirDocumentoCobrancaBoletimCadastroHelper.getAreaConstruida() != null) {

			areaConstruida = ""
					+ emitirDocumentoCobrancaBoletimCadastroHelper
							.getAreaConstruida().intValue();
		}

		boletimCadastroTxt.append(Util.completaString(areaConstruida, 6));

		// Situação de Água
		String situacaoAgua = "";

		if (emitirDocumentoCobrancaBoletimCadastroHelper
				.getIdLigacaoAguaSituacao() != null) {

			situacaoAgua = emitirDocumentoCobrancaBoletimCadastroHelper
					.getIdLigacaoAguaSituacao().toString();
		}

		boletimCadastroTxt.append(Util.completaString(situacaoAgua, 1));

		// Obtém os dados das ligações de água e esgoto
		DadosLigacoesBoletimCadastroHelper dadosLigacoesBoletimCadastroHelper = getControladorAtendimentoPublico()
				.obterDadosLigacaoAguaEsgoto(
						emitirDocumentoCobrancaBoletimCadastroHelper
								.getIdImovel());

		// Diâmetro Ligação Água
		String diametroLigAgua = "";

		if (dadosLigacoesBoletimCadastroHelper.getLigacaoAgua() != null
				&& dadosLigacoesBoletimCadastroHelper.getLigacaoAgua()
						.getLigacaoAguaDiametro() != null) {

			diametroLigAgua = dadosLigacoesBoletimCadastroHelper
					.getLigacaoAgua().getLigacaoAguaDiametro().getId()
					.toString();

		}

		boletimCadastroTxt.append(Util.completaString(diametroLigAgua, 1));

		// Material Ligação Água
		String materialLigAgua = "";

		if (dadosLigacoesBoletimCadastroHelper.getLigacaoAgua() != null
				&& dadosLigacoesBoletimCadastroHelper.getLigacaoAgua()
						.getLigacaoAguaMaterial() != null) {

			materialLigAgua = dadosLigacoesBoletimCadastroHelper
					.getLigacaoAgua().getLigacaoAguaMaterial().getId()
					.toString();

		}

		boletimCadastroTxt.append(Util.completaString(materialLigAgua, 1));

		// Volume Reservatório Inferior
		String volumeReservatorioInferior = "";

		if (emitirDocumentoCobrancaBoletimCadastroHelper
				.getVolumeReservatorioInferior() != null) {

			volumeReservatorioInferior = emitirDocumentoCobrancaBoletimCadastroHelper
					.getVolumeReservatorioInferior().toString();
		}

		boletimCadastroTxt.append(Util.completaString(
				volumeReservatorioInferior, 1));

		// Volume Reservatório Superior
		String volumeReservatorioSuperior = "";

		if (emitirDocumentoCobrancaBoletimCadastroHelper
				.getVolumeReservatorioSuperior() != null) {

			volumeReservatorioSuperior = emitirDocumentoCobrancaBoletimCadastroHelper
					.getVolumeReservatorioSuperior().toString();
		}

		boletimCadastroTxt.append(Util.completaString(
				volumeReservatorioSuperior, 1));

		// Volume Piscina
		String volumePiscina = "";

		if (emitirDocumentoCobrancaBoletimCadastroHelper.getVolumePiscina() != null) {
			volumePiscina = emitirDocumentoCobrancaBoletimCadastroHelper
					.getVolumePiscina().toString();
		}

		boletimCadastroTxt.append(Util.completaString(volumePiscina, 1));

		// Jardim
		String jardim = "";

		if (emitirDocumentoCobrancaBoletimCadastroHelper.getJardim() != null) {
			jardim = emitirDocumentoCobrancaBoletimCadastroHelper.getJardim()
					.toString();
		}

		boletimCadastroTxt.append(Util.completaString(jardim, 1));

		// Pavimento Calçada
		String pavimentoCalcada = "";

		if (emitirDocumentoCobrancaBoletimCadastroHelper
				.getIdPavimentoCalcada() != null) {

			pavimentoCalcada = Util.adicionarZerosEsquedaNumero(2,
					emitirDocumentoCobrancaBoletimCadastroHelper
							.getIdPavimentoCalcada().toString());
		}

		boletimCadastroTxt.append(Util.completaString(pavimentoCalcada, 2));

		// Pavimento Rua
		String pavimentoRua = "";

		if (emitirDocumentoCobrancaBoletimCadastroHelper.getIdPavimentoRua() != null) {

			pavimentoRua = Util.adicionarZerosEsquedaNumero(2,
					emitirDocumentoCobrancaBoletimCadastroHelper
							.getIdPavimentoRua().toString());
		}

		boletimCadastroTxt.append(Util.completaString(pavimentoRua, 2));

		// Fonte de Abastecimento
		String fonteAbastecimento = "";

		if (emitirDocumentoCobrancaBoletimCadastroHelper
				.getIdFonteAbastecimento() != null) {
			fonteAbastecimento = emitirDocumentoCobrancaBoletimCadastroHelper
					.getIdFonteAbastecimento().toString();
		}

		boletimCadastroTxt.append(Util.completaString(fonteAbastecimento, 1));

		// Tipo de Poço
		String pocoTipo = "";

		if (emitirDocumentoCobrancaBoletimCadastroHelper.getIdPoco() != null) {
			pocoTipo = emitirDocumentoCobrancaBoletimCadastroHelper.getIdPoco()
					.toString();
		}

		boletimCadastroTxt.append(Util.completaString(pocoTipo, 1));

		// Número de Pontos
		String numeroPontos = "";

		if (emitirDocumentoCobrancaBoletimCadastroHelper
				.getNumeroPontosUtilizacao() != null) {

			numeroPontos = Util.adicionarZerosEsquedaNumero(4,
					emitirDocumentoCobrancaBoletimCadastroHelper
							.getNumeroPontosUtilizacao().toString());
		}

		boletimCadastroTxt.append(Util.completaString(numeroPontos, 4));

		// Situação de Esgoto
		String situacaoEsgoto = "";

		if (emitirDocumentoCobrancaBoletimCadastroHelper
				.getIdLigacaoEsgotoSituacao() != null) {

			situacaoEsgoto = emitirDocumentoCobrancaBoletimCadastroHelper
					.getIdLigacaoEsgotoSituacao().toString();
		}

		boletimCadastroTxt.append(Util.completaString(situacaoEsgoto, 1));

		// Diâmetro Ligação Esgoto
		String diametroLigEsgoto = "";

		if (dadosLigacoesBoletimCadastroHelper.getLigacaoEsgoto() != null
				&& dadosLigacoesBoletimCadastroHelper.getLigacaoEsgoto()
						.getLigacaoEsgotoDiametro() != null) {

			diametroLigEsgoto = dadosLigacoesBoletimCadastroHelper
					.getLigacaoEsgoto().getLigacaoEsgotoDiametro().getId()
					.toString();

		}

		boletimCadastroTxt.append(Util.completaString(diametroLigEsgoto, 1));

		// Material Ligação Esgoto
		String materialLigEsgoto = "";

		if (dadosLigacoesBoletimCadastroHelper.getLigacaoEsgoto() != null
				&& dadosLigacoesBoletimCadastroHelper.getLigacaoEsgoto()
						.getLigacaoEsgotoMaterial() != null) {

			materialLigEsgoto = dadosLigacoesBoletimCadastroHelper
					.getLigacaoEsgoto().getLigacaoEsgotoMaterial().getId()
					.toString();

		}

		boletimCadastroTxt.append(Util.completaString(materialLigEsgoto, 1));

		// Perfil do Imóvel
		String perfilImovel = "";

		if (emitirDocumentoCobrancaBoletimCadastroHelper.getIdImovelPerfil() != null) {
			perfilImovel = emitirDocumentoCobrancaBoletimCadastroHelper
					.getIdImovelPerfil().toString();
		}

		boletimCadastroTxt.append(Util.completaString(perfilImovel, 1));

		// Despejo
		String despejo = "";

		if (emitirDocumentoCobrancaBoletimCadastroHelper.getIdDespejo() != null) {
			despejo = emitirDocumentoCobrancaBoletimCadastroHelper
					.getIdDespejo().toString();
		}

		boletimCadastroTxt.append(Util.completaString(despejo, 1));

		// Dados do Hidrômetro na Ligação de Água
		// Leitura Inicial
		String leituraInicial = "";

		if (dadosLigacoesBoletimCadastroHelper.getLigacaoAgua() != null
				&& dadosLigacoesBoletimCadastroHelper.getLigacaoAgua()
						.getHidrometroInstalacaoHistorico() != null) {

			leituraInicial = Util.adicionarZerosEsquedaNumero(6,
					dadosLigacoesBoletimCadastroHelper.getLigacaoAgua()
							.getHidrometroInstalacaoHistorico()
							.getNumeroLeituraInstalacao().toString());

		}

		// Numero do Hidrometro
		String numeroHidrometro = "";
		if (dadosLigacoesBoletimCadastroHelper.getLigacaoAgua() != null
				&& dadosLigacoesBoletimCadastroHelper.getLigacaoAgua()
						.getHidrometroInstalacaoHistorico() != null) {

			numeroHidrometro = dadosLigacoesBoletimCadastroHelper
					.getLigacaoAgua().getHidrometroInstalacaoHistorico()
					.getHidrometro().getNumero();
		}

		boletimCadastroTxt.append(Util.completaString(leituraInicial, 6));

		// Capacidade
		String capacidadeHidrometro = "";

		if (dadosLigacoesBoletimCadastroHelper.getLigacaoAgua() != null
				&& dadosLigacoesBoletimCadastroHelper.getLigacaoAgua()
						.getHidrometroInstalacaoHistorico() != null
				&& dadosLigacoesBoletimCadastroHelper.getLigacaoAgua()
						.getHidrometroInstalacaoHistorico().getHidrometro()
						.getHidrometroCapacidade() != null) {

			capacidadeHidrometro = Util.adicionarZerosEsquedaNumero(2,
					dadosLigacoesBoletimCadastroHelper.getLigacaoAgua()
							.getHidrometroInstalacaoHistorico().getHidrometro()
							.getHidrometroCapacidade().getId().toString());

		}

		boletimCadastroTxt.append(Util.completaString(capacidadeHidrometro, 2));

		// Marca
		String marcaHidrometro = "";

		if (dadosLigacoesBoletimCadastroHelper.getLigacaoAgua() != null
				&& dadosLigacoesBoletimCadastroHelper.getLigacaoAgua()
						.getHidrometroInstalacaoHistorico() != null
				&& dadosLigacoesBoletimCadastroHelper.getLigacaoAgua()
						.getHidrometroInstalacaoHistorico().getHidrometro()
						.getHidrometroMarca() != null) {

			marcaHidrometro = Util.adicionarZerosEsquedaNumero(2,
					dadosLigacoesBoletimCadastroHelper.getLigacaoAgua()
							.getHidrometroInstalacaoHistorico().getHidrometro()
							.getHidrometroMarca().getId().toString());

		}

		boletimCadastroTxt.append(Util.completaString(marcaHidrometro, 2));

		// Local de Instalação do Hidrômetro
		String localInstalacaoHidrometro = "";

		if (dadosLigacoesBoletimCadastroHelper.getLigacaoAgua() != null
				&& dadosLigacoesBoletimCadastroHelper.getLigacaoAgua()
						.getHidrometroInstalacaoHistorico() != null
				&& dadosLigacoesBoletimCadastroHelper.getLigacaoAgua()
						.getHidrometroInstalacaoHistorico()
						.getHidrometroLocalInstalacao() != null) {

			localInstalacaoHidrometro = Util.adicionarZerosEsquedaNumero(2,
					dadosLigacoesBoletimCadastroHelper.getLigacaoAgua()
							.getHidrometroInstalacaoHistorico()
							.getHidrometroLocalInstalacao().getId().toString());

		}

		boletimCadastroTxt.append(Util.completaString(
				localInstalacaoHidrometro, 2));

		// Proteção
		String protecaoHidrometro = "";

		if (dadosLigacoesBoletimCadastroHelper.getLigacaoAgua() != null
				&& dadosLigacoesBoletimCadastroHelper.getLigacaoAgua()
						.getHidrometroInstalacaoHistorico() != null
				&& dadosLigacoesBoletimCadastroHelper.getLigacaoAgua()
						.getHidrometroInstalacaoHistorico()
						.getHidrometroProtecao() != null) {

			protecaoHidrometro = dadosLigacoesBoletimCadastroHelper
					.getLigacaoAgua().getHidrometroInstalacaoHistorico()
					.getHidrometroProtecao().getId().toString();

		}

		boletimCadastroTxt.append(Util.completaString(protecaoHidrometro, 1));

		// Indicador Cavalete
		String indicadorCavalete = "";

		if (dadosLigacoesBoletimCadastroHelper.getLigacaoAgua() != null
				&& dadosLigacoesBoletimCadastroHelper.getLigacaoAgua()
						.getHidrometroInstalacaoHistorico() != null
				&& dadosLigacoesBoletimCadastroHelper.getLigacaoAgua()
						.getHidrometroInstalacaoHistorico()
						.getIndicadorExistenciaCavalete() != null) {

			protecaoHidrometro = dadosLigacoesBoletimCadastroHelper
					.getLigacaoAgua().getHidrometroInstalacaoHistorico()
					.getIndicadorExistenciaCavalete().toString();

		}

		boletimCadastroTxt.append(Util.completaString(indicadorCavalete, 1));

		// Número IPTU
		String numeroIptu = "";

		if (emitirDocumentoCobrancaBoletimCadastroHelper.getNumeroIptu() != null) {

			numeroIptu = Util.adicionarZerosEsquedaNumero(26, ""
					+ emitirDocumentoCobrancaBoletimCadastroHelper
							.getNumeroIptu().intValue());
		}

		boletimCadastroTxt.append(Util.completaString(numeroIptu, 26));

		// Número Contrato CELPE
		String numeroCelpe = "";
		if (emitirDocumentoCobrancaBoletimCadastroHelper.getNumeroCelpe() != null) {
			numeroCelpe = Util.adicionarZerosEsquedaNumero(10,
					emitirDocumentoCobrancaBoletimCadastroHelper
							.getNumeroCelpe().toString());
		}
		boletimCadastroTxt.append(Util.completaString(numeroCelpe, 10));

		// Codigo Rota
		String codigoRota = "";
		if (emitirDocumentoCobrancaBoletimCadastroHelper.getCodigoRota() != null) {
			codigoRota = Util.adicionarZerosEsquedaNumero(7,
					emitirDocumentoCobrancaBoletimCadastroHelper
							.getCodigoRota().toString());
		}
		boletimCadastroTxt.append(Util.completaString(codigoRota, 7));

		// Sequencial da Rota
		String sequencialRota = "";
		if (emitirDocumentoCobrancaBoletimCadastroHelper
				.getNumeroSequencialRota() != null) {
			sequencialRota = Util.adicionarZerosEsquedaNumero(8,
					emitirDocumentoCobrancaBoletimCadastroHelper
							.getNumeroSequencialRota().toString());
		}
		boletimCadastroTxt.append(Util.completaString(sequencialRota, 8));

		// Valor Debitos
		SistemaParametro sistemaParametro = this.getControladorUtil()
				.pesquisarParametrosDoSistema();

		Integer anoMesReferenciaFinal = sistemaParametro.getAnoMesFaturamento();

		int anoMesSubtraido = Util
				.subtrairMesDoAnoMes(anoMesReferenciaFinal, 1);

		Integer dataVencimentoFinalInteger = sistemaParametro
				.getAnoMesArrecadacao();
		String anoMesSubtraidoString = ""
				+ Util.subtrairMesDoAnoMes(dataVencimentoFinalInteger, 1);

		int ano = Integer.parseInt(anoMesSubtraidoString.substring(0, 4));
		int mes = Integer.parseInt(anoMesSubtraidoString.substring(4, 6));

		// recupera o ultimo dia do anomes e passa a data como parametro
		Calendar dataVencimentoFinal = GregorianCalendar.getInstance();
		dataVencimentoFinal.set(Calendar.YEAR, ano);
		dataVencimentoFinal.set(Calendar.MONTH, (mes - 1));
		dataVencimentoFinal.set(Calendar.DAY_OF_MONTH, dataVencimentoFinal
				.getActualMaximum(Calendar.DAY_OF_MONTH));

		Date dataFinalDate = dataVencimentoFinal.getTime();

		// converte String em data
		Date dataVencimento = Util.converteStringParaDate("01/01/1900");

		ObterDebitoImovelOuClienteHelper debitoImovelClienteHelper = this
				.getControladorCobranca().obterDebitoImovelOuCliente(
						1,
						""
								+ emitirDocumentoCobrancaBoletimCadastroHelper
										.getIdImovel(), null, null, "190001",
						"" + anoMesSubtraido, dataVencimento, dataFinalDate, 1,
						1, 1, 1, 1, 1, 1, null);

		BigDecimal valorTotal = this
				.calcularValorTotalDebitoBoletimCadastro(debitoImovelClienteHelper);

		boletimCadastroTxt.append(Util.completaString(Util.formataBigDecimal(
				valorTotal, 2, true), 11));

		// Descrição Abreviada da Principal Categoria do imovel
		Categoria categoria = this.getControladorImovel()
				.obterPrincipalCategoriaImovel(
						emitirDocumentoCobrancaBoletimCadastroHelper
								.getIdImovel());

		String descricaoAbreviadaPrincipalCategoria = "";
		if (categoria != null) {
			descricaoAbreviadaPrincipalCategoria = categoria
					.getDescricaoAbreviada();
		}
		boletimCadastroTxt.append(Util.completaString(
				descricaoAbreviadaPrincipalCategoria, 3));

		// **********************************************************************
		// Alterado por: Ivan Sergio
		// data: 12/05/2009
		// CRC1818
		// Alteracao: Adicionar os campos Nome do Bairro e Municipio do
		// Proprietario e Imovel.
		// **********************************************************************
		Integer idMunicipio = null;
		Integer codigoBairro = null;

		String nomeBairroProprietario = "";
		String nomeMunicipioProprietario = "";

		if (clienteEmitirBoletimCadastroHelperProprietario != null) {
			if (clienteEmitirBoletimCadastroHelperProprietario
					.getClienteEndereco().getLogradouroBairro() != null
					&& clienteEmitirBoletimCadastroHelperProprietario
							.getClienteEndereco().getLogradouroBairro()
							.getBairro() != null
					&& clienteEmitirBoletimCadastroHelperProprietario
							.getClienteEndereco().getLogradouroBairro()
							.getBairro().getMunicipio() != null) {

				codigoBairro = clienteEmitirBoletimCadastroHelperProprietario
						.getClienteEndereco().getLogradouroBairro().getBairro()
						.getCodigo();

				idMunicipio = clienteEmitirBoletimCadastroHelperProprietario
						.getClienteEndereco().getLogradouroBairro().getBairro()
						.getMunicipio().getId();

				FiltroBairro filtroBairro = new FiltroBairro();
				filtroBairro.adicionarParametro(new ParametroSimples(
						FiltroBairro.MUNICIPIO_ID, idMunicipio));
				filtroBairro.adicionarParametro(new ParametroSimples(
						FiltroBairro.CODIGO, codigoBairro));
				filtroBairro
						.adicionarCaminhoParaCarregamentoEntidade("municipio");

				Collection colecaoBairro = getControladorUtil().pesquisar(
						filtroBairro, Bairro.class.getName());

				if (colecaoBairro != null && !colecaoBairro.isEmpty()) {
					Bairro dadosBairro = (Bairro) Util
							.retonarObjetoDeColecao(colecaoBairro);

					nomeBairroProprietario = dadosBairro.getNome();
					nomeMunicipioProprietario = dadosBairro.getMunicipio()
							.getNome();
				}
			}
		}

		boletimCadastroTxt.append(Util.completaString(nomeBairroProprietario,
				30));
		boletimCadastroTxt.append(Util.completaString(
				nomeMunicipioProprietario, 30));

		Imovel imovel = getControladorEndereco().pesquisarImovelParaEndereco(
				emitirDocumentoCobrancaBoletimCadastroHelper.getIdImovel());

		// Nome do Bairro do Imovel
		String nomeBairroImovel = "";

		if (imovel.getLogradouroBairro() != null
				&& imovel.getLogradouroBairro().getBairro() != null) {

			nomeBairroImovel = imovel.getLogradouroBairro().getBairro()
					.getNome();
		}
		boletimCadastroTxt.append(Util.completaString(nomeBairroImovel, 30));

		// Nome do Municipio do Imovel
		String nomeMunicipioImovel = "";

		if (imovel.getLogradouroBairro().getBairro() != null
				&& imovel.getLogradouroBairro().getBairro().getMunicipio() != null) {

			nomeMunicipioImovel = imovel.getLogradouroBairro().getBairro()
					.getMunicipio().getNome();
		}
		boletimCadastroTxt.append(Util.completaString(nomeMunicipioImovel, 30));

		// Numero do Hidrometro
		boletimCadastroTxt.append(Util.completaString(numeroHidrometro, 10));
		// **********************************************************************

		String codigosSubcategorias = "";

		if (colecaoSubcategorias != null && !colecaoSubcategorias.isEmpty()) {

			Iterator colecaoSubcategoriasIterator = colecaoSubcategorias
					.iterator();

			for (int i = 0; i < 6; i++) {

				if (colecaoSubcategoriasIterator.hasNext()) {

					Subcategoria subcategoria = (Subcategoria) colecaoSubcategoriasIterator
							.next();

					codigosSubcategorias = codigosSubcategorias
							+ Util.adicionarZerosEsquedaNumero(3, subcategoria
									.getCodigo()
									+ "");
				} else {
					break;
				}
			}
		}

		boletimCadastroTxt
				.append(Util.completaString(codigosSubcategorias, 18));
		
		if (clienteEmitirBoletimCadastroHelperProprietario != null
				&& clienteEmitirBoletimCadastroHelperProprietario.getTarifaSocialDadoEconomia() != null) {
			// Tipo de Renda
			String tipoRenda = "";
	
			if (clienteEmitirBoletimCadastroHelperProprietario.getTarifaSocialDadoEconomia().getRendaTipo() != null) {
				tipoRenda = clienteEmitirBoletimCadastroHelperProprietario.getTarifaSocialDadoEconomia()
						.getRendaTipo().getDescricao();
			}
	
			boletimCadastroTxt.append(Util.completaString(tipoRenda, 20));
			
			// Valor Renda
			String valorRenda = "";
	
			if (clienteEmitirBoletimCadastroHelperProprietario.getTarifaSocialDadoEconomia().getValorRendaFamiliar() != null) {
				valorRenda = Util.formataBigDecimal(
						clienteEmitirBoletimCadastroHelperProprietario.getTarifaSocialDadoEconomia().getValorRendaFamiliar(),
						2, true);
			}
	
			boletimCadastroTxt.append(Util.completaString(valorRenda, 10));
			
			// Tipo de Cartão 
			String tipoCartao = "";
	
			if (clienteEmitirBoletimCadastroHelperProprietario.getTarifaSocialDadoEconomia().getTarifaSocialCartaoTipo() != null) {
				tipoCartao = clienteEmitirBoletimCadastroHelperProprietario.getTarifaSocialDadoEconomia()
						.getTarifaSocialCartaoTipo().getDescricao();
			}
	
			boletimCadastroTxt.append(Util.completaString(tipoCartao, 20));
	
			// Número Cartão
			String nomeroCartao = "";
	
			if (clienteEmitirBoletimCadastroHelperProprietario.getTarifaSocialDadoEconomia().getNumeroCartaoProgramaSocial() != null) {
				nomeroCartao = clienteEmitirBoletimCadastroHelperProprietario.getTarifaSocialDadoEconomia()
						.getNumeroCartaoProgramaSocial().toString();
			}
	
			boletimCadastroTxt.append(Util.completaString(nomeroCartao, 11));
		} else {
			boletimCadastroTxt.append(Util.completaString("", 58));
		}
		
	}

	/**
	 * Este caso de uso permite a emissão de boletins de cadastro
	 * 
	 * [UC0582] Emitir Boletim de Cadastro
	 * 
	 * @author Rafael Pinto
	 * @data 15/01/2008
	 * 
	 * @param ObterDebitoImovelOuClienteHelper
	 * @return BigDecimal valorTotalDebito
	 */
	private BigDecimal calcularValorTotalDebitoBoletimCadastro(
			ObterDebitoImovelOuClienteHelper debitoImovelClienteHelper) {

		BigDecimal valorTotal = BigDecimal.ZERO;

		if (debitoImovelClienteHelper != null) {

			BigDecimal valorConta = BigDecimal.ZERO;
			BigDecimal valorDebitoACobrar = BigDecimal.ZERO;
			BigDecimal valorGuiaPagamento = BigDecimal.ZERO;
			BigDecimal valorCreditoARealizar = BigDecimal.ZERO;

			ContaValoresHelper dadosConta = null;
			DebitoACobrar dadosDebito = null;
			CreditoARealizar dadosCredito = null;
			GuiaPagamentoValoresHelper dadosGuiaPagamentoValoresHelper = null;

			Collection<ContaValoresHelper> colecaoContaValores = debitoImovelClienteHelper
					.getColecaoContasValores();
			if (colecaoContaValores != null && !colecaoContaValores.isEmpty()) {

				Iterator<ContaValoresHelper> colecaoContaValoresIterator = colecaoContaValores
						.iterator();

				// percorre a colecao de conta somando o valor para obter um
				// valor total
				while (colecaoContaValoresIterator.hasNext()) {

					dadosConta = (ContaValoresHelper) colecaoContaValoresIterator
							.next();
					valorConta = valorConta.add(dadosConta.getConta()
							.getValorTotal());
				}
			}

			Collection<DebitoACobrar> colecaoDebitoACobrar = debitoImovelClienteHelper
					.getColecaoDebitoACobrar();

			if (colecaoDebitoACobrar != null && !colecaoDebitoACobrar.isEmpty()) {
				Iterator<DebitoACobrar> colecaoDebitoACobrarIterator = colecaoDebitoACobrar
						.iterator();

				// percorre a colecao de debito a cobrar somando o valor para
				// obter um valor total
				while (colecaoDebitoACobrarIterator.hasNext()) {

					dadosDebito = (DebitoACobrar) colecaoDebitoACobrarIterator
							.next();
					// alterado por Vivianne Sousa data:11/04/2008
					// analista :Adriano
					valorDebitoACobrar = valorDebitoACobrar.add(dadosDebito
							.getValorTotalComBonus());
				}
			}

			Collection<CreditoARealizar> colecaoCreditoARealizar = debitoImovelClienteHelper
					.getColecaoCreditoARealizar();

			if (colecaoCreditoARealizar != null
					&& !colecaoCreditoARealizar.isEmpty()) {

				Iterator<CreditoARealizar> colecaoCreditoARealizarIterator = colecaoCreditoARealizar
						.iterator();

				// percorre a colecao de credito a realizar somando o valor para
				// obter um valor total
				while (colecaoCreditoARealizarIterator.hasNext()) {

					dadosCredito = (CreditoARealizar) colecaoCreditoARealizarIterator
							.next();
					// alterado por Vivianne Sousa data:11/04/2008
					// analista :Adriano
					valorCreditoARealizar = valorCreditoARealizar
							.add(dadosCredito.getValorTotalComBonus());

				}
			}

			Collection<GuiaPagamentoValoresHelper> colecaoGuiaPagamentoValores = debitoImovelClienteHelper
					.getColecaoGuiasPagamentoValores();

			if (colecaoGuiaPagamentoValores != null
					&& !colecaoGuiaPagamentoValores.isEmpty()) {
				Iterator<GuiaPagamentoValoresHelper> colecaoGuiaPagamentoValoresHelperIterator = colecaoGuiaPagamentoValores
						.iterator();

				// percorre a colecao de guia de pagamento somando o valor para
				// obter um valor total
				while (colecaoGuiaPagamentoValoresHelperIterator.hasNext()) {

					dadosGuiaPagamentoValoresHelper = (GuiaPagamentoValoresHelper) colecaoGuiaPagamentoValoresHelperIterator
							.next();

					valorGuiaPagamento = valorGuiaPagamento
							.add(dadosGuiaPagamentoValoresHelper
									.getGuiaPagamento().getValorDebito());
				}
			}

			valorTotal = valorConta.add(valorDebitoACobrar);
			valorTotal = valorTotal.add(valorGuiaPagamento);
			valorTotal = valorTotal.subtract(valorCreditoARealizar);

		}// fim do if debitoImovelClienteHelper != null

		return valorTotal;
	}

	public void adicionarDadosClienteEmitirBoletimCadastroTxt(
			StringBuilder boletimCadastroTxt,
			ClienteEmitirBoletimCadastroHelper clienteEmitirBoletimCadastroHelper) {

		// Dados do Cliente

		// Id do Cliente
		String idClienteFormatado = Util.adicionarZerosEsquedaNumero(9,
				clienteEmitirBoletimCadastroHelper.getCliente().getId()
						.toString());

		boletimCadastroTxt.append(idClienteFormatado);

		// Nome do Cliente
		String nomeCliente = "";

		if (clienteEmitirBoletimCadastroHelper.getCliente().getNome() != null) {
			nomeCliente = clienteEmitirBoletimCadastroHelper.getCliente()
					.getNome();
		}

		boletimCadastroTxt.append(Util.completaString(nomeCliente, 23));

		// Tipo do Cliente
		String tipoCliente = "";

		if (clienteEmitirBoletimCadastroHelper.getCliente().getClienteTipo() != null) {
			tipoCliente = Util.adicionarZerosEsquedaNumero(2,
					clienteEmitirBoletimCadastroHelper.getCliente()
							.getClienteTipo().getId().toString());
		}

		boletimCadastroTxt.append(Util.completaString(tipoCliente, 2));

		// CPF/CNPJ
		String cpfCnpj = "";

		if (clienteEmitirBoletimCadastroHelper.getCliente().getCpf() != null) {
			cpfCnpj = Util.adicionarZerosEsquedaNumero(14,
					clienteEmitirBoletimCadastroHelper.getCliente().getCpf());
		}

		if (clienteEmitirBoletimCadastroHelper.getCliente().getCnpj() != null) {
			cpfCnpj = Util.adicionarZerosEsquedaNumero(14,
					clienteEmitirBoletimCadastroHelper.getCliente().getCnpj());
		}

		boletimCadastroTxt.append(Util.completaString(cpfCnpj, 14));

		// RG
		String rg = "";

		if (clienteEmitirBoletimCadastroHelper.getCliente().getRg() != null) {
			rg = Util.adicionarZerosEsquedaNumero(13,
					clienteEmitirBoletimCadastroHelper.getCliente().getRg());
		}

		boletimCadastroTxt.append(Util.completaString(rg, 13));

		// Data de Emissão RG
		String dataEmissaoRG = "";

		if (clienteEmitirBoletimCadastroHelper.getCliente().getDataEmissaoRg() != null) {
			dataEmissaoRG = Util.formatarData(
					clienteEmitirBoletimCadastroHelper.getCliente()
							.getDataEmissaoRg()).replace("/", "");
		}

		boletimCadastroTxt.append(Util.completaString(dataEmissaoRG, 8));

		// Órgão Expedidor RG
		String orgaoExpedidorRG = "";

		if (clienteEmitirBoletimCadastroHelper.getCliente()
				.getOrgaoExpedidorRg() != null) {
			orgaoExpedidorRG = clienteEmitirBoletimCadastroHelper.getCliente()
					.getOrgaoExpedidorRg().getDescricaoAbreviada();
		}

		boletimCadastroTxt.append(Util.completaString(orgaoExpedidorRG, 4));

		// Unidade Federação
		String unidadeFederacao = "";

		if (clienteEmitirBoletimCadastroHelper.getCliente()
				.getUnidadeFederacao() != null) {

			unidadeFederacao = clienteEmitirBoletimCadastroHelper.getCliente()
					.getUnidadeFederacao().getSigla();
		}

		boletimCadastroTxt.append(Util.completaString(unidadeFederacao, 2));

		// Data de Nascimento
		String dataNascimento = "";

		if (clienteEmitirBoletimCadastroHelper.getCliente().getDataNascimento() != null) {
			dataNascimento = Util.formatarData(
					clienteEmitirBoletimCadastroHelper.getCliente()
							.getDataNascimento()).replace("/", "");
		}

		boletimCadastroTxt.append(Util.completaString(dataNascimento, 8));

		// Profissão
		String profissao = "";

		if (clienteEmitirBoletimCadastroHelper.getCliente().getProfissao() != null) {
			profissao = clienteEmitirBoletimCadastroHelper.getCliente()
					.getProfissao().getDescricao();
		}

		boletimCadastroTxt.append(Util.completaString(profissao, 18));

		// Pessoa Sexo
		String sexo = "";

		if (clienteEmitirBoletimCadastroHelper.getCliente().getPessoaSexo() != null) {
			sexo = clienteEmitirBoletimCadastroHelper.getCliente()
					.getPessoaSexo().getId().toString();
		}

		boletimCadastroTxt.append(Util.completaString(sexo, 1));

		// Nome da Mãe
		String nomeMae = "";

		if (clienteEmitirBoletimCadastroHelper.getCliente().getNomeMae() != null) {
			nomeMae = clienteEmitirBoletimCadastroHelper.getCliente()
					.getNomeMae();
		}

		boletimCadastroTxt.append(Util.completaString(nomeMae, 32));

		// Indicador de Uso
		String indicadorUso = "";

		if (clienteEmitirBoletimCadastroHelper.getCliente().getIndicadorUso() != null) {
			indicadorUso = clienteEmitirBoletimCadastroHelper.getCliente()
					.getIndicadorUso().toString();
		}

		boletimCadastroTxt.append(Util.completaString(indicadorUso, 1));

		// Dados do Endereço do Cliente

		// Tipo de Endereço
		String tipoEndereco = "";

		if (clienteEmitirBoletimCadastroHelper.getClienteEndereco()
				.getEnderecoTipo() != null) {
			tipoEndereco = clienteEmitirBoletimCadastroHelper
					.getClienteEndereco().getEnderecoTipo().getId().toString();
		}

		boletimCadastroTxt.append(Util.completaString(tipoEndereco, 1));

		// Logradouro
		String logradouro = "";

		if (clienteEmitirBoletimCadastroHelper.getClienteEndereco()
				.getLogradouroCep() != null
				&& clienteEmitirBoletimCadastroHelper.getClienteEndereco()
						.getLogradouroCep().getLogradouro() != null) {

			logradouro = Util.adicionarZerosEsquedaNumero(9,
					clienteEmitirBoletimCadastroHelper.getClienteEndereco()
							.getLogradouroCep().getLogradouro().getId()
							.toString());
		}

		boletimCadastroTxt.append(Util.completaString(logradouro, 9));

		// Endereço Abreviado
		String endereco = "";

		if (clienteEmitirBoletimCadastroHelper.getEnderecoFormatado() != null) {
			endereco = clienteEmitirBoletimCadastroHelper
					.getEnderecoFormatado();
		}

		boletimCadastroTxt.append(Util.completaString(endereco, 60));

		// CEP
		String cep = "";

		if (clienteEmitirBoletimCadastroHelper.getClienteEndereco()
				.getLogradouroCep() != null
				&& clienteEmitirBoletimCadastroHelper.getClienteEndereco()
						.getLogradouroCep().getCep() != null) {

			cep = Util
					.adicionarZerosEsquedaNumero(8,
							clienteEmitirBoletimCadastroHelper
									.getClienteEndereco().getLogradouroCep()
									.getCep().getCodigo().toString());
		}

		boletimCadastroTxt.append(Util.completaString(cep, 8));

		// Bairro
		String bairro = "";

		if (clienteEmitirBoletimCadastroHelper.getClienteEndereco()
				.getLogradouroBairro() != null
				&& clienteEmitirBoletimCadastroHelper.getClienteEndereco()
						.getLogradouroBairro().getBairro() != null) {

			bairro = Util.adicionarZerosEsquedaNumero(3, ""
					+ clienteEmitirBoletimCadastroHelper.getClienteEndereco()
							.getLogradouroBairro().getBairro().getCodigo());
		}

		boletimCadastroTxt.append(Util.completaString(bairro, 3));

		// Referência
		String referencia = "";

		if (clienteEmitirBoletimCadastroHelper.getClienteEndereco()
				.getEnderecoReferencia() != null) {
			referencia = clienteEmitirBoletimCadastroHelper
					.getClienteEndereco().getEnderecoReferencia().getId()
					.toString();
		}

		boletimCadastroTxt.append(Util.completaString(referencia, 1));

		// Número do Imóvel
		String numeroImovel = "";

		if (clienteEmitirBoletimCadastroHelper.getClienteEndereco().getNumero() != null) {
			numeroImovel = Util.adicionarZerosEsquedaNumero(5,
					clienteEmitirBoletimCadastroHelper.getClienteEndereco()
							.getNumero().toString());
		}

		boletimCadastroTxt.append(Util.completaString(numeroImovel, 5));

		// Complemento
		String complemento = "";

		if (clienteEmitirBoletimCadastroHelper.getClienteEndereco()
				.getComplemento() != null) {
			complemento = clienteEmitirBoletimCadastroHelper
					.getClienteEndereco().getComplemento();
		}

		boletimCadastroTxt.append(Util.completaString(complemento, 19));

		// Dados do Telefone do Cliente
		// Tipo do Telefone
		Collection clientesFone = clienteEmitirBoletimCadastroHelper
				.getClientesFone();

		if (clientesFone != null && !clientesFone.isEmpty()) {

			Iterator clientesFoneIterator = clientesFone.iterator();

			int tamanho = clientesFone.size();

			while (clientesFoneIterator.hasNext()) {

				ClienteFone clienteFone = (ClienteFone) clientesFoneIterator
						.next();

				String tipoTelefone = "";

				if (clienteFone.getFoneTipo() != null) {
					tipoTelefone = clienteFone.getFoneTipo().getId().toString();
				}

				boletimCadastroTxt.append(Util.completaString(tipoTelefone, 1));

				// DDD
				String ddd = "";

				if (clienteFone.getDdd() != null) {
					ddd = Util.adicionarZerosEsquedaNumero(2, clienteFone
							.getDdd());
				}

				boletimCadastroTxt.append(Util.completaString(ddd, 2));

				// Número do Telefone
				String numeroTelefone = "";

				if (clienteFone.getTelefone() != null) {
					numeroTelefone = clienteFone.getTelefone();
				}

				boletimCadastroTxt.append(Util
						.completaString(numeroTelefone, 8));

				// Ramal
				String ramal = "";

				if (clienteFone.getRamal() != null) {
					ramal = clienteFone.getRamal();
				}

				boletimCadastroTxt.append(Util.completaString(ramal, 4));

			}

			if (tamanho == 1) {
				boletimCadastroTxt.append(Util.completaString("", 15));
			}

		} else {
			boletimCadastroTxt.append(Util.completaString("", 30));
		}
		
		boletimCadastroTxt.append(Util.completaString("", 8));
	}

	/**
	 * Permite inserir uma Anormalidade de Leitura
	 * 
	 * [UC0217] Inserir Anormalidade Leitura
	 * 
	 * @author Thiago Tenório
	 * @date 30/03/2006
	 * 
	 */
	public Integer inserirClienteTipo(ClienteTipo clienteTipo,
			Usuario usuarioLogado) throws ControladorException {

		// ------------ REGISTRAR TRANSAÇÃO----------------------------
		RegistradorOperacao registradorOperacao = new RegistradorOperacao(
				Operacao.OPERACAO_CLIENTE_TIPO_INSERIR,
				new UsuarioAcaoUsuarioHelper(usuarioLogado,
						UsuarioAcao.USUARIO_ACAO_EFETUOU_OPERACAO));

		Operacao operacao = new Operacao();
		operacao.setId(Operacao.OPERACAO_CLIENTE_TIPO_INSERIR);

		OperacaoEfetuada operacaoEfetuada = new OperacaoEfetuada();
		operacaoEfetuada.setOperacao(operacao);

		clienteTipo.setOperacaoEfetuada(operacaoEfetuada);
		clienteTipo.adicionarUsuario(usuarioLogado,
				UsuarioAcao.USUARIO_ACAO_EFETUOU_OPERACAO);
		registradorOperacao.registrarOperacao(clienteTipo);
		// ------------ REGISTRAR TRANSAÇÃO----------------------------

		Integer id = (Integer) getControladorUtil().inserir(clienteTipo);

		return id;

	}

	/**
	 * [UC0298] Manter Agência bancária [] Atualizar Agência Bancária Metodo que
	 * atualiza a Agência Bancária
	 * 
	 * 
	 * @author Thiago Tenório
	 * @date 25/05/2006
	 * 
	 * 
	 * @throws ControladorException
	 */

	public void atualizarClienteTipo(ClienteTipo clienteTipo)
			throws ControladorException {

		// Verifica se todos os campos obrigatorios foram preenchidos

		if ((clienteTipo.getId() == null || clienteTipo.getId().equals(
				"" + ConstantesSistema.NUMERO_NAO_INFORMADO))
				&& (clienteTipo.getDescricao() == null || clienteTipo
						.getDescricao().equals(
								"" + ConstantesSistema.NUMERO_NAO_INFORMADO))
				&& (clienteTipo.getEsferaPoder() == null || clienteTipo
						.getEsferaPoder().equals(
								"" + ConstantesSistema.NUMERO_NAO_INFORMADO))
				&& (clienteTipo.getIndicadorPessoaFisicaJuridica() == null || clienteTipo
						.getIndicadorPessoaFisicaJuridica().equals(
								"" + ConstantesSistema.NUMERO_NAO_INFORMADO))) {
			throw new ControladorException(
					"atencao.filtro.nenhum_parametro_informado");

		}

		// Verifica se o campo Descrição foi preenchido

		if (clienteTipo.getDescricao() == null
				|| clienteTipo.getDescricao().equals(
						"" + ConstantesSistema.NUMERO_NAO_INFORMADO)) {
			throw new ControladorException("atencao.Informe_entidade", null,
					" Descrição");
		}

		// Verifica se o campo Esfera Poder foi preenchido
		if (clienteTipo.getEsferaPoder() == null
				|| clienteTipo.getEsferaPoder().equals(
						"" + ConstantesSistema.NUMERO_NAO_INFORMADO)) {
			throw new ControladorException("atencao.Informe_entidade", null,
					" Esfera Poder");
		}

		// Verifica se o campo Referência do Tipo de Serviço foi preenchido
		if (clienteTipo.getIndicadorPessoaFisicaJuridica() == null
				|| clienteTipo.getIndicadorPessoaFisicaJuridica().equals(
						"" + ConstantesSistema.NUMERO_NAO_INFORMADO)) {
			throw new ControladorException("atencao.Informe_entidade", null,
					" Tipo de Pessoa");
		}

		// [FS0003] - Atualização realizada por outro usuário
		FiltroClienteTipo filtroClienteTipo = new FiltroClienteTipo();
		filtroClienteTipo.adicionarParametro(new ParametroSimples(
				FiltroClienteTipo.ID, clienteTipo.getId()));

		Collection colecaoClienteTipoBase = getControladorUtil().pesquisar(
				filtroClienteTipo, ClienteTipo.class.getName());

		if (colecaoClienteTipoBase == null || colecaoClienteTipoBase.isEmpty()) {
			sessionContext.setRollbackOnly();
			throw new ControladorException("atencao.atualizacao.timestamp");
		}

		ClienteTipo clienteTipoBase = (ClienteTipo) colecaoClienteTipoBase
				.iterator().next();

		if (clienteTipoBase.getUltimaAlteracao().after(
				clienteTipo.getUltimaAlteracao())) {
			sessionContext.setRollbackOnly();
			throw new ControladorException("atencao.atualizacao.timestamp");
		}

		clienteTipo.setUltimaAlteracao(new Date());

		getControladorUtil().atualizar(clienteTipo);

	}

	/**
	 * Migração dos dados do município de Ribeirão - O sistema gerar as tabelas
	 * cliente, cliente_endereço, imovel, cliente_imovel, imovel_subcategoria,
	 * ligacao_agua a parti da tabela Cadastro_ribeirao;
	 * 
	 * @author Ana Maria
	 * 
	 * @throws ControladorException
	 */
	public void inserirRiberao() throws ControladorException {
		/*
		 * try {
		 * 
		 * List colecaoCadastroRibeiraop = (List) repositorioCadastro
		 * .pesquisarCadastroRibeiraop(); Integer idBairro =
		 * repositorioCadastro.pesquisarBairro(); Integer cepPesquisado =
		 * repositorioCadastro.pesquisarCEP(); Object[] setorQuadra =
		 * repositorioCadastro .pesquisarSetorQuadra(118);
		 * 
		 * int limiteSuperior; int limiteInferior; int limiteMaximo =
		 * colecaoCadastroRibeiraop.size(); int quantidadeMaximaPorColecao =
		 * 500; int indece = 6394;
		 * 
		 * for (int i = 0; i < limiteMaximo; i = i + quantidadeMaximaPorColecao) {
		 * 
		 * if (limiteMaximo < quantidadeMaximaPorColecao) { limiteInferior = 0;
		 * limiteSuperior = limiteMaximo; } else { limiteInferior = i;
		 * limiteSuperior = i + quantidadeMaximaPorColecao;
		 * 
		 * if (limiteSuperior > limiteMaximo) { limiteSuperior = limiteMaximo; } }
		 * 
		 * List colecaoTemporaria = new ArrayList();
		 * colecaoTemporaria.addAll(colecaoCadastroRibeiraop.subList(
		 * limiteInferior, limiteSuperior)); if (colecaoTemporaria != null &&
		 * !colecaoTemporaria.isEmpty()) { Iterator colecaoTemporariaIterator =
		 * colecaoTemporaria .iterator(); while
		 * (colecaoTemporariaIterator.hasNext()) { //CadastroRibeiraop cr =
		 * (CadastroRibeiraop) colecaoTemporariaIterator.next(); // Inserir
		 * Cliente Cliente cliente = new Cliente();
		 * cliente.setNome(cr.getNome()); ClienteTipo ct = new ClienteTipo(); if
		 * (cr.getClasse().equals("PAR")) { ct.setId(25); } else if
		 * (cr.getClasse().equals("PBM")) { ct.setId(7); } else if
		 * (cr.getClasse().equals("PBF")) { ct.setId(17); } else if
		 * (cr.getClasse().equals("PBE")) { ct.setId(8); }
		 * cliente.setClienteTipo(ct); cliente
		 * .setIndicadorUso(ConstantesSistema.INDICADOR_USO_ATIVO);
		 * cliente.setUltimaAlteracao(new Date()); cliente
		 * .setIndicadorAcaoCobranca(ConstantesSistema.INDICADOR_USO_ATIVO);
		 * cliente
		 * .setIndicadorCobrancaAcrescimos(ConstantesSistema.INDICADOR_USO_ATIVO);
		 * cliente
		 * .setIndicadorGeraArquivoTexto(ConstantesSistema.INDICADOR_USO_DESATIVO);
		 * 
		 * Integer idCliente = (Integer) getControladorUtil() .inserir(cliente);
		 * System.out.println("idCliente:" + idCliente);
		 *  // InserirImovel Imovel imovel = new Imovel(); Localidade lc = new
		 * Localidade(); lc.setId(new Integer(118)); imovel.setLocalidade(lc);
		 * SetorComercial st = new SetorComercial(); st.setId((Integer)
		 * setorQuadra[0]); imovel.setSetorComercial(st); Quadra qd = new
		 * Quadra(); qd.setId((Integer) setorQuadra[1]); imovel.setQuadra(qd);
		 * imovel.setLote((short) indece); System.out.println(indece); indece =
		 * indece + 1; imovel.setSubLote(new Short("0")); String
		 * numeroImovelMenor = null; String numeroImovelMaior = null; if
		 * (cr.getNumeroImovel().length() <= 5) {
		 * imovel.setNumeroImovel(cr.getNumeroImovel()); numeroImovelMenor = "'" +
		 * cr.getNumeroImovel() + "'"; } else {
		 * imovel.setComplementoEndereco(cr.getNumeroImovel());
		 * numeroImovelMaior = "'" + cr.getNumeroImovel() + "'"; }
		 * 
		 * imovel.setIndicadorImovelCondominio(new Short("2"));
		 * LigacaoAguaSituacao ligSit = new LigacaoAguaSituacao();
		 * ligSit.setId(new Integer(cr.getSituacaoAgua()));
		 * imovel.setLigacaoAguaSituacao(ligSit); LigacaoEsgotoSituacao ligESit =
		 * new LigacaoEsgotoSituacao(); ligESit.setId(1);
		 * imovel.setLigacaoEsgotoSituacao(ligESit); ImovelPerfil imovPerf = new
		 * ImovelPerfil(); imovPerf.setId(5); imovel.setImovelPerfil(imovPerf);
		 * imovel.setNumeroParcelamento(new Short("0"));
		 * imovel.setNumeroReparcelamento(new Short("0"));
		 * imovel.setNumeroReparcelamentoConsecutivos(new Short( "0"));
		 * imovel.setIndicadorEmissaoExtratoFaturamento(new Short( "2"));
		 * imovel.setIndicadorDebitoConta(new Short("2"));
		 * imovel.setIndicadorExclusao(new Short("2"));
		 * imovel.setUltimaAlteracao(new Date()); ConsumoTarifa ctarifa = new
		 * ConsumoTarifa(); if (cr.getCategoria().equals("R-3")) {
		 * ctarifa.setId(2); } else { ctarifa.setId(1); }
		 * imovel.setConsumoTarifa(ctarifa); EnderecoReferencia endRef = new
		 * EnderecoReferencia(); endRef.setId(1);
		 * imovel.setEnderecoReferencia(endRef);
		 * imovel.setQuantidadeEconomias(new Short("1")); imovel
		 * .setIndicadorSuspensaoAbastecimento(new Short( "2"));
		 * 
		 * Integer idLogB = repositorioCadastro .pesquisarLogradouroBairro(cr
		 * .getCodigoLogradouro()); LogradouroBairro logB = new
		 * LogradouroBairro(); logB.setId(idLogB);
		 * imovel.setLogradouroBairro(logB); Integer idLogC =
		 * repositorioCadastro .pesquisarLogradouroCep(cr
		 * .getCodigoLogradouro()); LogradouroCep logC = new LogradouroCep();
		 * logC.setId(idLogC); imovel.setLogradouroCep(logC);
		 * imovel.setIndicadorJardim(new Short("2")); ImovelContaEnvio icte =
		 * new ImovelContaEnvio(); icte.setId(2);
		 * imovel.setImovelContaEnvio(icte);
		 * 
		 * Integer idImovel = (Integer) getControladorUtil() .inserir(imovel);
		 * System.out.println("idImovel:" + idImovel);
		 *  // Inserir imovel no CadastroRiberao
		 * repositorioCadastro.atualizarImovelRibeirao(idImovel,
		 * cr.getCodigo());
		 *  // Data Calendar dataCalendar = new GregorianCalendar();
		 * StringBuffer dataBD = new StringBuffer();
		 * 
		 * dataCalendar.setTime(new Date());
		 * 
		 * dataBD.append("'" + dataCalendar.get(Calendar.YEAR));
		 *  // Obs.: Janeiro no Calendar é mês zero if
		 * ((dataCalendar.get(Calendar.MONTH) + 1) > 9) { dataBD.append("-" +
		 * dataCalendar.get(Calendar.MONTH) + 1); } else { dataBD.append("-" +
		 * "0" + (dataCalendar.get(Calendar.MONTH) + 1)); }
		 * 
		 * if (dataCalendar.get(Calendar.DAY_OF_MONTH) > 9) { dataBD.append("-" +
		 * dataCalendar.get(Calendar.DAY_OF_MONTH) + "'"); } else {
		 * dataBD.append("-" + "0" + dataCalendar.get(Calendar.DAY_OF_MONTH) +
		 * "'"); }
		 * 
		 * String data = dataBD.toString();
		 *  // Inserir Cliente_Endereco
		 * repositorioCadastro.inserirClienteEndereco(idCliente,
		 * numeroImovelMenor, numeroImovelMaior, cepPesquisado, idBairro, cr
		 * .getCodigoLogradouro(), idLogB, idLogC);
		 *  // Inserir Cliente_Imovel
		 * repositorioCadastro.inserirClienteImovel(idCliente, idImovel, data);
		 *  // Inserir Imovel_Subcategoria Integer idSubcategoria = null; if
		 * (cr.getCategoria().substring(0, 1).equals("R")) { idSubcategoria =
		 * 10; } else if (cr.getCategoria().equals("C-1")) { idSubcategoria =
		 * 20; } else if (cr.getCategoria().substring(0, 1) .equals("I")) {
		 * idSubcategoria = 30; } else if (cr.getCategoria().equals("C-3")) {
		 * idSubcategoria = 40; } else { idSubcategoria = 10; }
		 * repositorioCadastro.inserirImovelSubcategoria(idImovel,
		 * idSubcategoria);
		 * 
		 * //Inserir Ligacao_Agua
		 * repositorioCadastro.inserirLigacaoAgua(idImovel, data);
		 *  } }
		 *  }
		 *  } catch (ErroRepositorioException e) { throw new
		 * ControladorException("erro.sistema", e); }
		 */
	}

	/**
	 * Este caso de uso permite a emissão de boletins de cadastro
	 * 
	 * [UC0582] Emitir Boletim de Cadastro pelo Filtro Imóvel por Outros
	 * Critérios
	 * 
	 * Alterado por: Ivan Sergio Data: 26/01/2009
	 * 
	 * @alteracao 26/01/2009 - CRC1076 - Alterado o nome do arquivo gerado.
	 * 
	 * @param
	 * @return void
	 */
	public byte[] emitirBoletimCadastro(String idImovelCondominio,
			String idImovelPrincipal, String idFaturasAtraso,
			String consumoMinimoInicialAgua, String consumoMinimoFinalAgua,
			String idSituacaoLigacaoEsgoto, String consumoMinimoInicialEsgoto,
			String consumoMinimoFinalEsgoto,
			String intervaloValorPercentualEsgotoInicial,
			String intervaloValorPercentualEsgotoFinal,
			String intervaloMediaMinimaImovelInicial,
			String intervaloMediaMinimaImovelFinal,
			String intervaloMediaMinimaHidrometroInicial,
			String intervaloMediaMinimaHidrometroFinal, String idImovelPerfil,
			String idPocoTipo, String idFaturamentoSituacaoTipo,
			String idCobrancaSituacaoTipo, String idSituacaoEspecialCobranca,
			String idEloAnormalidade, String areaConstruidaInicial,
			String areaConstruidaFinal, String idCadastroOcorrencia,
			String idConsumoTarifa, String idGerenciaRegional,
			String idLocalidadeInicial, String idLocalidadeFinal,
			String setorComercialInicial, String setorComercialFinal,
			String quadraInicial, String quadraFinal, String loteOrigem,
			String loteDestno, String cep, String logradouro, String bairro,
			String municipio, String idTipoMedicao, String indicadorMedicao,
			String idSubCategoria, String idCategoria,
			String quantidadeEconomiasInicial, String quantidadeEconomiasFinal,
			String diaVencimento, String idCliente, String idClienteTipo,
			String idClienteRelacaoTipo, String numeroPontosInicial,
			String numeroPontosFinal, String numeroMoradoresInicial,
			String numeroMoradoresFinal, String idAreaConstruidaFaixa,
			String idUnidadeNegocio, String indicadorCpfCnpj, String cpfCnpj) throws ControladorException {

		System.out.println("********************");
		System.out.println("INICIO BOLETIM CADASTRO");
		System.out.println("********************");

		boolean flagFimPesquisa = false;
		final int quantidadeCobrancaDocumento = 500;
		int quantidadeCobrancaDocumentoInicio = 0;
		StringBuilder boletimCadastroTxt = new StringBuilder();
		int pagina = 0;

		while (!flagFimPesquisa) {

			pagina++;

			Collection colecaoEmitirBoletimCadastro = null;
			try {

				colecaoEmitirBoletimCadastro = repositorioImovel
						.pesquisarBoletimCadastro(idImovelCondominio,
								idImovelPrincipal, idFaturasAtraso,
								consumoMinimoInicialAgua,
								consumoMinimoFinalAgua,
								idSituacaoLigacaoEsgoto,
								consumoMinimoInicialEsgoto,
								consumoMinimoFinalEsgoto,
								intervaloValorPercentualEsgotoInicial,
								intervaloValorPercentualEsgotoFinal,
								intervaloMediaMinimaImovelInicial,
								intervaloMediaMinimaImovelFinal,
								intervaloMediaMinimaHidrometroInicial,
								intervaloMediaMinimaHidrometroFinal,
								idImovelPerfil, idPocoTipo,
								idFaturamentoSituacaoTipo,
								idCobrancaSituacaoTipo,
								idSituacaoEspecialCobranca, idEloAnormalidade,
								areaConstruidaInicial, areaConstruidaFinal,
								idCadastroOcorrencia, idConsumoTarifa,
								idGerenciaRegional, idLocalidadeInicial,
								idLocalidadeFinal, setorComercialInicial,
								setorComercialFinal, quadraInicial,
								quadraFinal, loteOrigem, loteDestno, cep,
								logradouro, bairro, municipio, idTipoMedicao,
								indicadorMedicao, idSubCategoria, idCategoria,
								quantidadeEconomiasInicial,
								quantidadeEconomiasFinal, diaVencimento,
								idCliente, idClienteTipo, idClienteRelacaoTipo,
								numeroPontosInicial, numeroPontosFinal,
								numeroMoradoresInicial, numeroMoradoresFinal,
								idAreaConstruidaFaixa, idUnidadeNegocio,
								quantidadeCobrancaDocumentoInicio, indicadorCpfCnpj, cpfCnpj);

			} catch (ErroRepositorioException ex) {
				ex.printStackTrace();
				throw new ControladorException("erro.sistema", ex);
			}

			if (colecaoEmitirBoletimCadastro != null
					&& !colecaoEmitirBoletimCadastro.isEmpty()) {

				if (colecaoEmitirBoletimCadastro.size() < quantidadeCobrancaDocumento) {
					flagFimPesquisa = true;
				} else {
					quantidadeCobrancaDocumentoInicio = quantidadeCobrancaDocumentoInicio + 500;
				}

				Iterator colecaoEmitirBoletimCadastroIterator = colecaoEmitirBoletimCadastro
						.iterator();
				int count = 0;

				EmitirDocumentoCobrancaBoletimCadastroHelper emitirDocumentoCobrancaBoletimCadastroHelper = null;
				while (colecaoEmitirBoletimCadastroIterator.hasNext()) {

					emitirDocumentoCobrancaBoletimCadastroHelper = (EmitirDocumentoCobrancaBoletimCadastroHelper) colecaoEmitirBoletimCadastroIterator
							.next();

					count++;

					System.out.println("VEZ QUE ENTRA:"
							+ pagina
							+ " / "
							+ count
							+ " / IMÓVEL:"
							+ emitirDocumentoCobrancaBoletimCadastroHelper
									.getIdImovel().toString());

					if (emitirDocumentoCobrancaBoletimCadastroHelper != null) {
						criarDadosTxtBoletimCadastro(boletimCadastroTxt,
								emitirDocumentoCobrancaBoletimCadastroHelper);
					}

					emitirDocumentoCobrancaBoletimCadastroHelper = null;

					boletimCadastroTxt.append(System
							.getProperty("line.separator"));

				}
			} else {
				flagFimPesquisa = true;
			}
		}

		System.out.println("********************");
		System.out.println("FIM BOLETIM CADASTRO");
		System.out.println("********************");

		Date dataAtual = new Date();

		String nomeZip = null;
		/*
		 * String tituloComandoEventual = null; if (comandoAtividadeAcaoCobranca !=
		 * null && comandoAtividadeAcaoCobranca.getId() != null) {
		 * tituloComandoEventual = comandoAtividadeAcaoCobranca
		 * .getDescricaoTitulo(); nomeZip = "BOL_CAD " + tituloComandoEventual + " " +
		 * Util.formatarDataComHora(dataAtual); }else {
		 */
		nomeZip = "BOLETIM_CADASTRAL " + Util.formatarDataComHora(dataAtual);
		// }

		nomeZip = nomeZip.replace("/", "_");
		nomeZip = nomeZip.replace(" ", "_");
		nomeZip = nomeZip.replace(":", "_");

		nomeZip = nomeZip.replace("/", "_");

		byte[] retornoArray = null;

		try {
			if (boletimCadastroTxt != null) {

				boletimCadastroTxt.append("\u0004");
				// criar o arquivo zip
				File compactado = File.createTempFile("zipHtml" + nomeZip,
						".zip");
				ZipOutputStream zos = new ZipOutputStream(new FileOutputStream(
						compactado));

				File leitura = new File(nomeZip + ".txt");
				BufferedWriter out = new BufferedWriter(new OutputStreamWriter(
						new FileOutputStream(leitura.getAbsolutePath())));
				out.write(boletimCadastroTxt.toString());
				out.flush();
				out.close();
				ZipUtil.adicionarArquivo(zos, leitura);

				// close the stream
				zos.close();

				ByteArrayOutputStream retorno = new ByteArrayOutputStream();

				FileInputStream inputStream = new FileInputStream(compactado);

				int INPUT_BUFFER_SIZE = 1024;
				byte[] temp = new byte[INPUT_BUFFER_SIZE];
				int numBytesRead = 0;

				while ((numBytesRead = inputStream.read(temp, 0,
						INPUT_BUFFER_SIZE)) != -1) {
					retorno.write(temp, 0, numBytesRead);
				}

				inputStream.close();

				leitura.delete();

				// retorno.flush();
				// retorno.close();

				retornoArray = retorno.toByteArray();

			}

			System.out.println("********************");
			System.out.println("FIM GERAÇÃO ARQUIVO");
			System.out.println("********************");

		} catch (IOException e) {
			e.printStackTrace();
			throw new ControladorException("erro.sistema", e);
		} catch (Exception e) {
			e.printStackTrace();
			throw new ControladorException("erro.sistema", e);
		}

		return retornoArray;

	}

	/**
	 * 
	 * Pesquisa os imóveis do cliente de acordo com o tipo de relação
	 * 
	 * 
	 * 
	 * [UC0251] Gerar Atividade de Ação de Cobrança [SB0001] Gerar Atividade de
	 * 
	 * Ação de Cobrança para os Imóveis do Cliente
	 * 
	 * 
	 * 
	 * @author Sávio Luiz
	 * 
	 * @created 23/11/2007
	 * 
	 * 
	 * 
	 * @param cliente
	 * 
	 * @param relacaoClienteImovel
	 * 
	 * @return
	 * 
	 * @throws ErroRepositorioException
	 * 
	 */

	public Collection pesquisarClientesSubordinados(Integer idCliente)

	throws ControladorException {
		try {
			// chama o metódo de pesquisar do repositório
			return repositorioCadastro.pesquisarClientesSubordinados(idCliente);

			// erro no hibernate
		} catch (ErroRepositorioException ex) {

			// levanta a exceção para a próxima camada
			throw new ControladorException("erro.sistema", ex);
		}
	}

	/**
	 * 
	 * [UC0624] Gerar Relatório para Atualização Cadastral
	 * 
	 * @author Flávio Cordeiro
	 */
	public Collection pesquisarDadosRelatorioAtualizacaoCadastral(
			int anoMesFaturamento, Integer idFaturamentoGrupo,
			int indicadorLocalidadeInformatizada, Collection idLocalidades,
			Collection idSetores, Collection idQuadras, String rotaInicial,
			String rotaFinal, String sequencialRotaInicial,
			String sequencialRotaFinal, String tipoRelatorio,
			Usuario usuarioLogado) throws ControladorException {

		Collection retorno = new ArrayList();
		try {
			Collection colecaoObjeto = repositorioCadastro
					.pesquisarRelatorioAtualizacaoCadastral(idLocalidades,
							idSetores, idQuadras, rotaInicial, rotaFinal,
							sequencialRotaInicial, sequencialRotaFinal);
			if (colecaoObjeto != null && !colecaoObjeto.isEmpty()) {
				Iterator iterator = colecaoObjeto.iterator();

				while (iterator.hasNext()) {
					RelatorioAtualizacaoCadastralHelper relatorioAtualizacaoCadastralHelper = new RelatorioAtualizacaoCadastralHelper();
					Object[] objeto = (Object[]) iterator.next();
					// idImovel
					if (objeto[0] != null) {
						relatorioAtualizacaoCadastralHelper
								.setIdImovel((Integer) objeto[0]);
						relatorioAtualizacaoCadastralHelper
								.setInscricao(getControladorImovel()
										.pesquisarInscricaoImovel(
												relatorioAtualizacaoCadastralHelper
														.getIdImovel()));
					}
					// matricula Imovel
					if (objeto[1] != null) {
						relatorioAtualizacaoCadastralHelper
								.setIdImovel((Integer) objeto[1]);
					}
					// nome cliente
					if (objeto[2] != null) {
						relatorioAtualizacaoCadastralHelper
								.setNomeCliente((String) objeto[2]);
					}
					// localidade id
					if (objeto[3] != null) {
						relatorioAtualizacaoCadastralHelper
								.setIdLocalidade((Integer) objeto[3]);
					}
					// localidade descricao
					if (objeto[4] != null) {
						relatorioAtualizacaoCadastralHelper
								.setLocalidadeDescricao((String) objeto[4]);
					}
					// setor comercial codigo
					if (objeto[5] != null) {
						relatorioAtualizacaoCadastralHelper
								.setCodigoSetorComercial((Integer) objeto[5]);
					}
					// setor comercial descricao
					if (objeto[6] != null) {
						relatorioAtualizacaoCadastralHelper
								.setSetorComercialDescricao((String) objeto[6]);
					}
					// unidade negocio nome
					if (objeto[7] != null) {
						relatorioAtualizacaoCadastralHelper
								.setUnidadeNegocioDescricao((String) objeto[7]);
					}
					// rota codigo
					if (objeto[8] != null) {
						String rota = (String) objeto[8];
						// imovel numero sequencial rota
						if (objeto[9] != null) {
							rota = rota + "." + (String) objeto[9];
						}
						relatorioAtualizacaoCadastralHelper
								.setRotaSequencialRota(rota);
					}

					// imovel indicador exclusao
					if (objeto[10] != null) {
						relatorioAtualizacaoCadastralHelper
								.setIndicadorExclusao((String) objeto[10]);
					}

					// Unidade de negocio id
					if (objeto[11] != null) {
						relatorioAtualizacaoCadastralHelper
								.setIdUnidadeNegocio((Integer) objeto[11]);
					}

					String endereco = getControladorEndereco()
							.obterEnderecoAbreviadoImovel(
									relatorioAtualizacaoCadastralHelper
											.getIdImovel());
					if (endereco != null && !endereco.trim().equals("")) {
						relatorioAtualizacaoCadastralHelper
								.setEndereco(endereco);
					}

					Collection existeLigacaoAgua = getControladorLigacaoAgua()
							.verificaExistenciaLigacaoAgua(
									relatorioAtualizacaoCadastralHelper
											.getIdImovel());
					if (existeLigacaoAgua != null) {

					}

					retorno.add(relatorioAtualizacaoCadastralHelper);

				}

				// parte nova para o relatório ter o processamento em batch
				// cria uma instância da classe do relatório

			}
		} catch (ErroRepositorioException e) {
			sessionContext.setRollbackOnly();
			throw new ControladorException("erro.sistema", e);
		}
		return retorno;
	}

	/**
	 * [UC0725] Gerar Relatório de Imóveis por Situação da Ligação de Agua
	 * 
	 * @author Rafael Pinto
	 * @date 03/12/2007
	 * 
	 * @param FiltrarRelatorioImoveisSituacaoLigacaoAguaHelper
	 * 
	 * @return Collection<Object[]>
	 * @throws ErroRepositorioException
	 */
	public Collection<RelatorioImoveisSituacaoLigacaoAguaHelper> pesquisarRelatorioImoveisSituacaoLigacaoAgua(
			FiltrarRelatorioImoveisSituacaoLigacaoAguaHelper filtro)
			throws ControladorException {

		Collection<RelatorioImoveisSituacaoLigacaoAguaHelper> retorno = new ArrayList<RelatorioImoveisSituacaoLigacaoAguaHelper>();

		Collection<Object[]> colecaoPesquisa = null;

		try {
			colecaoPesquisa = this.repositorioCadastro
					.pesquisarRelatorioImoveisSituacaoLigacaoAgua(filtro);
		} catch (ErroRepositorioException e) {
			throw new ControladorException("erro.sistema", e);
		}

		if (colecaoPesquisa != null && !colecaoPesquisa.isEmpty()) {

			Iterator itera = colecaoPesquisa.iterator();

			while (itera.hasNext()) {
				Object[] objeto = (Object[]) itera.next();

				RelatorioImoveisSituacaoLigacaoAguaHelper helper = new RelatorioImoveisSituacaoLigacaoAguaHelper();

				Integer idImovel = (Integer) objeto[0];
				Integer localidade = (Integer) objeto[5];
				Integer codigoSetorComercial = (Integer) objeto[7];
				Integer numeroQuadra = (Integer) objeto[9];

				Short lote = (Short) objeto[15];
				Short subLote = (Short) objeto[16];

				helper.setMatriculaImovel(Util
						.retornaMatriculaImovelFormatada(idImovel));
				helper.setGerenciaRegional((Integer) objeto[1]);
				helper.setNomeGerenciaRegional((String) objeto[2]);
				helper.setUnidadeNegocio((Integer) objeto[3]);
				helper.setNomeUnidadeNegocio((String) objeto[4]);
				helper.setLocalidade(localidade);
				helper.setDescricaoLocalidade((String) objeto[6]);
				helper.setSetorComercial(codigoSetorComercial);
				helper.setDescricaoSetorComercial((String) objeto[8]);
				helper.setNumeroQuadra(numeroQuadra);
				helper.setNomeCliente((String) objeto[10]);
				helper.setSituacaoLigacaoAgua((String) objeto[11]);
				helper.setSituacaoLigacaoEsgoto((String) objeto[12]);

				helper.setRota((Short) objeto[13]);
				helper.setSequencialRota((Integer) objeto[14]);

				Imovel imovel = new Imovel();
				imovel.setId(idImovel);

				Localidade local = new Localidade();
				local.setId(localidade);
				imovel.setLocalidade(local);

				SetorComercial setorComercial = new SetorComercial();
				setorComercial.setCodigo(codigoSetorComercial);
				imovel.setSetorComercial(setorComercial);

				Quadra quadra = new Quadra();
				quadra.setNumeroQuadra(numeroQuadra);
				imovel.setQuadra(quadra);

				imovel.setLote(lote);
				imovel.setSubLote(subLote);

				helper.setInscricaoImovel(imovel.getInscricaoFormatada());

				String endereco = this.getControladorEndereco()
						.obterEnderecoAbreviadoImovel(idImovel);
				helper.setEndereco(endereco);

				retorno.add(helper);
			}
		}

		return retorno;
	}

	/**
	 * [UC0726] Gerar Relatório de Imóveis com Faturas em Atraso
	 * 
	 * @author Bruno Barros
	 * @date 06/12/2007
	 * 
	 * @param FiltrarRelatorioImoveisFaturasAtrasoHelper
	 * 
	 * @return Collection<RelatorioImoveisSituacaoLigacaoAguaHelper>
	 * @throws ErroRepositorioException
	 */
	public Collection<RelatorioImoveisFaturasAtrasoHelper> pesquisarRelatorioImoveisFaturasAtrasoAgrupadasLocalizacao(
			FiltrarRelatorioImoveisFaturasAtrasoHelper filtro)
			throws ControladorException {

		Collection<RelatorioImoveisFaturasAtrasoHelper> retorno = new ArrayList<RelatorioImoveisFaturasAtrasoHelper>();

		Collection<Object[]> colecaoPesquisa = null;

		try {
			colecaoPesquisa = this.repositorioCadastro
					.pesquisarRelatorioImoveisFaturasAtrasoAgrupadasLocalizacao(filtro);
		} catch (ErroRepositorioException e) {
			throw new ControladorException("erro.sistema", e);
		}

		if (colecaoPesquisa != null && !colecaoPesquisa.isEmpty()) {

			Iterator itera = colecaoPesquisa.iterator();

			while (itera.hasNext()) {
				Object[] objeto = (Object[]) itera.next();

				RelatorioImoveisFaturasAtrasoHelper helper = new RelatorioImoveisFaturasAtrasoHelper();

				Integer idImovel = (Integer) objeto[12];
				Integer localidade = (Integer) objeto[6];
				Integer codigoSetorComercial = (Integer) objeto[4];
				Integer numeroQuadra = (Integer) objeto[15];
				String cpf = (String) objeto[22];
				String cnpj = (String) objeto[23];

				helper.setMatriculaImovel(Util
						.retornaMatriculaImovelFormatada(idImovel));
				helper.setGerenciaRegional((Integer) objeto[0]);
				helper.setNomeGerenciaRegional((String) objeto[1]);
				helper.setUnidadeNegocio((Integer) objeto[2]);
				helper.setNomeUnidadeNegocio((String) objeto[3]);
				helper.setLocalidade(localidade);
				helper.setDescricaoLocalidade((String) objeto[7]);
				helper.setSetorComercial(codigoSetorComercial);
				helper.setDescricaoSetorComercial((String) objeto[5]);
				helper.setNomeClienteUsuario((String) objeto[8]);
				helper.setSituacaoLigacaoAgua((String) objeto[9]);
				helper.setSituacaoLigacaoEsgoto((String) objeto[14]);
				helper.setRota((Short) objeto[10]);
				helper.setSequencialRota((Integer) objeto[11]);
				helper.setQuantidadeFaturasAtraso(((Integer) objeto[17]));
				helper
						.setValorFaturasAtrasoSemEncargos((BigDecimal) objeto[18]);
				helper.setReferenciaFaturasAtrasoInicial((Integer) objeto[16]);
				helper.setReferenciaFaturasAtrasoFinal((Integer) objeto[19]);

				if (cpf != null && !cpf.equals("")) {
					helper.setCpfOuCnpjClienteUsuario(Util.formatarCpf(cpf));
				}
				if (cnpj != null && !cnpj.equals("")) {
					helper.setCpfOuCnpjClienteUsuario(Util.formatarCnpj(cnpj));
				}
				Imovel imovel = new Imovel();
				imovel.setId(idImovel);

				Localidade local = new Localidade();
				local.setId(localidade);
				imovel.setLocalidade(local);

				SetorComercial setorComercial = new SetorComercial();
				setorComercial.setCodigo(codigoSetorComercial);
				imovel.setSetorComercial(setorComercial);

				Quadra quadra = new Quadra();
				quadra.setNumeroQuadra(numeroQuadra);
				imovel.setQuadra(quadra);

				imovel.setLote((Short) objeto[20]);
				imovel.setSubLote((Short) objeto[21]);

				helper.setInscricaoImovel(imovel.getInscricaoFormatada());

				String endereco = this.getControladorEndereco()
						.pesquisarEnderecoFormatado(idImovel);
				helper.setEndereco(endereco);

				/*
				 * if((String) objeto[22] != null){
				 * helper.setCpfCnpj(Util.formatarCpf((String) objeto[22]));
				 * }else{ helper.setCpfCnpj(Util.formatarCnpj((String)
				 * objeto[23])); }
				 */

				retorno.add(helper);
			}
		}

		return retorno;
	}

	/**
	 * [UC0726] - Gerar Relatório de Imóveis com Faturas em Atraso
	 * 
	 * @since 31/08/2009
	 * @author Marlon Patrick
	 */
	public Collection<RelatorioImoveisFaturasAtrasoHelper> pesquisarRelatorioImoveisFaturasAtrasoAgrupadasCliente(
			FiltrarRelatorioImoveisFaturasAtrasoHelper filtro)
			throws ControladorException {

		Collection<RelatorioImoveisFaturasAtrasoHelper> retorno = new ArrayList<RelatorioImoveisFaturasAtrasoHelper>();

		Collection<Object[]> colecaoPesquisa = null;

		try {
			colecaoPesquisa = this.repositorioCadastro
					.pesquisarRelatorioImoveisFaturasAtrasoAgrupadasCliente(filtro);
		} catch (ErroRepositorioException e) {
			throw new ControladorException("erro.sistema", e);
		}

		if (!Util.isVazioOrNulo(colecaoPesquisa)) {

			for (Object[] dadosRelatorio : colecaoPesquisa) {

				RelatorioImoveisFaturasAtrasoHelper helper = new RelatorioImoveisFaturasAtrasoHelper();

				helper.setIdCliente((Integer) dadosRelatorio[0]);
				helper.setNomeCliente((String) dadosRelatorio[1]);
				helper.setGerenciaRegional((Integer) dadosRelatorio[2]);
				helper.setLocalidade((Integer) dadosRelatorio[3]);
				helper.setSetorComercial((Integer) dadosRelatorio[4]);
				helper.setNumeroQuadra((Integer) dadosRelatorio[5]);
				helper.setSituacaoLigacaoAgua((String) dadosRelatorio[6]);
				helper
						.setReferenciaFaturasAtrasoInicial((Integer) dadosRelatorio[7]);
				helper
						.setQuantidadeFaturasAtraso(((Integer) dadosRelatorio[8]));
				helper
						.setValorFaturasAtrasoSemEncargos((BigDecimal) dadosRelatorio[9]);
				helper.setRota((Short) dadosRelatorio[10]);
				helper.setSequencialRota((Integer) dadosRelatorio[11]);
				helper.setIdImovel((Integer) dadosRelatorio[12]);
				helper.setMatriculaImovel(Util
						.retornaMatriculaImovelFormatada(helper.getIdImovel()));
				helper.setSituacaoLigacaoEsgoto((String) dadosRelatorio[13]);
				helper
						.setReferenciaFaturasAtrasoFinal((Integer) dadosRelatorio[14]);

				String endereco = this.getControladorEndereco()
						.pesquisarEnderecoFormatado(helper.getIdImovel());
				helper.setEndereco(endereco);

				configurarInscricaoImovelFormatada(helper);

				Cliente clienteUsuario = getControladorImovel()
						.consultarClienteUsuarioImovel(
								new Imovel(helper.getIdImovel()));
				helper.setNomeClienteUsuario(clienteUsuario.getNome());

				// getControladorCobranca().calcularAcrescimoPorImpontualidade(
				// anoMesReferenciaDebito, dataVencimento, dataPagamento,
				// valorDebito,
				// valorMultasCobradas, indicadorMulta, anoMesArrecadacao,
				// idConta,
				// indicadorArrecadacao);

				retorno.add(helper);
			}
		}

		return retorno;
	}

	/**
	 * Méto auxiliar usado para obter a inscrição formatada de um imóvel e setar
	 * a mesma no Helper
	 * 
	 * @since 01/09/2009
	 * @author Marlon Patrick
	 */
	private void configurarInscricaoImovelFormatada(
			RelatorioImoveisFaturasAtrasoHelper helper) {

		SetorComercial setorComercial = new SetorComercial();
		setorComercial.setCodigo(helper.getSetorComercial());

		Quadra quadra = new Quadra();
		quadra.setNumeroQuadra(helper.getNumeroQuadra());

		Imovel imovel = new Imovel(helper.getIdImovel());
		imovel.setQuadra(quadra);
		imovel.setSetorComercial(setorComercial);
		imovel.setLocalidade(new Localidade(helper.getLocalidade()));

		helper.setInscricaoImovel(imovel.getInscricaoFormatada());
	}

	/**
	 * [UC0725] Gerar Relatório de Imóveis por Situação da Ligação de Agua
	 * 
	 * Pesquisa o Total Registro
	 * 
	 * @author Rafael Pinto
	 * @date 04/12/2007
	 * 
	 * @param FiltrarRelatorioImoveisFaturasAtrasoHelper
	 * 
	 * @return Integer
	 * @throws ControladorException
	 */
	public Integer pesquisarTotalRegistroRelatorioImoveisSituacaoLigacaoAgua(
			FiltrarRelatorioImoveisSituacaoLigacaoAguaHelper filtro)
			throws ControladorException {

		try {
			return this.repositorioCadastro
					.pesquisarTotalRegistroRelatorioImoveisSituacaoLigacaoAgua(filtro);
		} catch (ErroRepositorioException e) {
			throw new ControladorException("erro.sistema", e);
		}
	}

	/**
	 * [UC0726] Gerar Relatório de Imóveis com Faturas em Atraso
	 * 
	 * Pesquisa o Total Registro
	 * 
	 * @author Bruno Barros
	 * @date 06/12/2007
	 * 
	 * @param FiltrarRelatorioImoveisSituacaoLigacaoAguaHelper
	 * 
	 * @return Integer
	 * @throws ControladorException
	 */
	public Integer pesquisarTotalRegistroRelatorioImoveisFaturasAtrasoLocalizacao(
			FiltrarRelatorioImoveisFaturasAtrasoHelper filtro)
			throws ControladorException {

		Integer retorno = null;

		try {
			retorno = this.repositorioCadastro
					.pesquisarTotalRegistroRelatorioImoveisFaturasAtrasoLocalizacao(filtro);
		} catch (ErroRepositorioException e) {
			throw new ControladorException("erro.sistema", e);
		}

		return retorno;
	}

	public Integer pesquisarTotalRegistroRelatorioImoveisFaturasAtrasoCliente(
			FiltrarRelatorioImoveisFaturasAtrasoHelper filtro)
			throws ControladorException {

		Integer retorno = null;

		try {
			retorno = this.repositorioCadastro
					.pesquisarTotalRegistroRelatorioImoveisFaturasAtrasoCliente(filtro);
		} catch (ErroRepositorioException e) {
			throw new ControladorException("erro.sistema", e);
		}

		return retorno;
	}

	/**
	 * Pesquisa os imoveis para o relatorio de imoveis por consumo medio
	 * 
	 * @author Bruno Barros
	 * @data 17/12/2007
	 * 
	 * @param filtro
	 * @return Collection<RelatorioImoveisConsumoMedioHelper>
	 * @throws FachadaException
	 */
	public Collection<RelatorioImoveisConsumoMedioHelper> pesquisarRelatorioImoveisConsumoMedio(
			FiltrarRelatorioImoveisConsumoMedioHelper filtro)
			throws ControladorException {
		Collection<RelatorioImoveisConsumoMedioHelper> retorno = new ArrayList<RelatorioImoveisConsumoMedioHelper>();

		Collection<RelatorioImoveisConsumoMedioHelper> colecaoPesquisa = null;

		SistemaParametro sistemaParametro = this.getControladorUtil()
				.pesquisarParametrosDoSistema();

		try {
			colecaoPesquisa = this.repositorioCadastro
					.pesquisarRelatorioImoveisConsumoMedio(filtro,
							sistemaParametro.getAnoMesFaturamento());
		} catch (ErroRepositorioException e) {
			throw new ControladorException("erro.sistema", e);
		}

		if (colecaoPesquisa != null && !colecaoPesquisa.isEmpty()) {

			Iterator itera = colecaoPesquisa.iterator();

			while (itera.hasNext()) {
				Object[] objeto = (Object[]) itera.next();

				RelatorioImoveisConsumoMedioHelper helper = new RelatorioImoveisConsumoMedioHelper();

				Integer idImovel = (Integer) objeto[13];
				Integer localidade = (Integer) objeto[4];
				Integer codigoSetorComercial = (Integer) objeto[6];
				Integer numeroQuadra = (Integer) objeto[18];

				helper.setMatriculaImovel(Util
						.retornaMatriculaImovelFormatada(idImovel));
				helper.setGerenciaRegional((Integer) objeto[0]);
				helper.setNomeGerenciaRegional((String) objeto[1]);
				helper.setUnidadeNegocio((Integer) objeto[2]);
				helper.setNomeUnidadeNegocio((String) objeto[3]);
				helper.setLocalidade(localidade);
				helper.setDescricaoLocalidade((String) objeto[5]);
				helper.setSetorComercial(codigoSetorComercial);
				helper.setDescricaoSetorComercial((String) objeto[7]);
				helper.setNomeCliente((String) objeto[8]);
				helper.setSituacaoLigacaoAgua((String) objeto[9]);

				helper.setConsumoMedioAgua((Integer) objeto[10]);
				helper.setCodigoRota((Short) objeto[11]);
				
				if (objeto[12] != null){
					helper.setSequencialRota((Integer) objeto[12]);
				}
				
				helper.setSituacaoLigacaoEsgoto((String) objeto[14]);
				helper.setConsumoMedioEsgoto((Integer) objeto[15]);

				// Montamos um objeto imovel para poder pesquisar sua inscrição
				Imovel imovel = new Imovel();
				imovel.setId(idImovel);

				Localidade local = new Localidade();
				local.setId(localidade);
				imovel.setLocalidade(local);

				SetorComercial setorComercial = new SetorComercial();
				setorComercial.setCodigo(codigoSetorComercial);
				imovel.setSetorComercial(setorComercial);

				Quadra quadra = new Quadra();
				quadra.setNumeroQuadra(numeroQuadra);
				imovel.setQuadra(quadra);

				imovel.setLote((Short) objeto[16]);
				imovel.setSubLote((Short) objeto[17]);

				helper.setInscricaoImovel(imovel.getInscricaoFormatada());
				// ------------------------------------------------------------

				// Selecionamos o endereço
				String endereco = this.getControladorEndereco()
						.obterEnderecoAbreviadoImovel(idImovel);
				helper.setEndereco(endereco);

				retorno.add(helper);
			}
		}

		return retorno;
	}

	/**
	 * [UC0727] Gerar Relatório de Imóveis por Consumo Medio Pesquisa a
	 * quantidade de imoveis para o relatorio de imoveis por consumo medio
	 * 
	 * @author Bruno Barros
	 * @data 17/12/2007
	 * 
	 * @param filtro
	 * @return Integer
	 * @throws ControladorException
	 */
	public Integer pesquisarTotalRegistroRelatorioImoveisConsumoMedio(
			FiltrarRelatorioImoveisConsumoMedioHelper filtro)
			throws ControladorException {


		SistemaParametro sistemaParametro = this.getControladorUtil().pesquisarParametrosDoSistema();
		
		try {
			return this.repositorioCadastro
					.pesquisarTotalRegistroRelatorioImoveisConsumoMedio(filtro, 
							sistemaParametro.getAnoMesFaturamento());

		} catch (ErroRepositorioException ex) {
			throw new ControladorException("erro.sistema", ex);
		}
	}

	/**
	 * [UC0731] Gerar Relatório de Imóveis com os Ultimos Consumos de Agua
	 * 
	 * @author Rafael Pinto
	 * @date 19/12/2007
	 * 
	 * @param FiltrarRelatorioImoveisUltimosConsumosAguaHelper
	 * 
	 * @return Integer
	 * @throws ErroRepositorioException
	 */
	public Integer pesquisarTotalRegistroRelatorioImoveisUltimosConsumosAgua(
			FiltrarRelatorioImoveisUltimosConsumosAguaHelper filtro)
			throws ControladorException {

		try {
			return this.repositorioCadastro
					.pesquisarTotalRegistroRelatorioImoveisUltimosConsumosAgua(filtro);
		} catch (ErroRepositorioException e) {
			throw new ControladorException("erro.sistema", e);
		}
	}

	/**
	 * [UC0731] Gerar Relatório de Imóveis com os Ultimos Consumos de Agua
	 * 
	 * @author Rafael Pinto
	 * @date 18/12/2007
	 * 
	 * @param FiltrarRelatorioImoveisUltimosConsumosAguaHelper
	 * 
	 * @return Collection<Object[]>
	 * @throws ErroRepositorioException
	 */
	public List pesquisarRelatorioImoveisUltimosConsumosAgua(FiltrarRelatorioImoveisUltimosConsumosAguaHelper filtro) throws ControladorException {

		List retorno = new ArrayList();

		Collection<Object[]> colecaoPesquisa = null;

		int anoMes = this.getControladorUtil().pesquisarParametrosDoSistema().getAnoMesFaturamento();
		
		int anoMesSubtraido1 = Util.subtrairMesDoAnoMes(anoMes, 1);
		String descricaoConsumo1 = Util.retornaDescricaoAnoMes(""+ anoMesSubtraido1);
		filtro.setAnoMesSubtraido1(anoMesSubtraido1);
		
		int anoMesSubtraido2 = Util.subtrairMesDoAnoMes(anoMes, 2);
		String descricaoConsumo2 = Util.retornaDescricaoAnoMes(""+ anoMesSubtraido2);
		filtro.setAnoMesSubtraido2(anoMesSubtraido2);
		
		int anoMesSubtraido3 = Util.subtrairMesDoAnoMes(anoMes, 3);
		String descricaoConsumo3 = Util.retornaDescricaoAnoMes(""+ anoMesSubtraido3);
		filtro.setAnoMesSubtraido3(anoMesSubtraido3);
		
		int anoMesSubtraido4 = Util.subtrairMesDoAnoMes(anoMes, 4);
		String descricaoConsumo4 = Util.retornaDescricaoAnoMes(""+ anoMesSubtraido4);
		filtro.setAnoMesSubtraido4(anoMesSubtraido4);
		
		int anoMesSubtraido5 = Util.subtrairMesDoAnoMes(anoMes, 5);
		String descricaoConsumo5 = Util.retornaDescricaoAnoMes(""+ anoMesSubtraido5);
		filtro.setAnoMesSubtraido5(anoMesSubtraido5);
		
		int anoMesSubtraido6 = Util.subtrairMesDoAnoMes(anoMes, 6);
		String descricaoConsumo6 = Util.retornaDescricaoAnoMes(""+ anoMesSubtraido6);
		filtro.setAnoMesSubtraido6(anoMesSubtraido6);
		
		int anoMesSubtraido7 = Util.subtrairMesDoAnoMes(anoMes, 7);
		String descricaoConsumo7 = Util.retornaDescricaoAnoMes(""+ anoMesSubtraido7);
		filtro.setAnoMesSubtraido7(anoMesSubtraido7);
		
		int anoMesSubtraido8 = Util.subtrairMesDoAnoMes(anoMes, 8);
		String descricaoConsumo8 = Util.retornaDescricaoAnoMes(""+ anoMesSubtraido8);
		filtro.setAnoMesSubtraido8(anoMesSubtraido8);
		
		int anoMesSubtraido9 = Util.subtrairMesDoAnoMes(anoMes, 9);
		String descricaoConsumo9 = Util.retornaDescricaoAnoMes(""+ anoMesSubtraido9);
		filtro.setAnoMesSubtraido9(anoMesSubtraido9);
		
		int anoMesSubtraido10 = Util.subtrairMesDoAnoMes(anoMes, 10);
		String descricaoConsumo10 = Util.retornaDescricaoAnoMes(""+ anoMesSubtraido10);
		filtro.setAnoMesSubtraido10(anoMesSubtraido10);
		
		int anoMesSubtraido11 = Util.subtrairMesDoAnoMes(anoMes, 11);
		String descricaoConsumo11 = Util.retornaDescricaoAnoMes(""+ anoMesSubtraido11);
		filtro.setAnoMesSubtraido11(anoMesSubtraido11);
		
		int anoMesSubtraido12 = Util.subtrairMesDoAnoMes(anoMes, 12);
		String descricaoConsumo12 = Util.retornaDescricaoAnoMes(""+ anoMesSubtraido12);
		filtro.setAnoMesSubtraido12(anoMesSubtraido12);
		
		System.out.println("---------------------------------------------------------------------------------------------inicio pesquisa: "+ new Date());
		try {
			colecaoPesquisa = this.repositorioCadastro
					.pesquisarRelatorioImoveisUltimosConsumosAgua(filtro);
		} catch (ErroRepositorioException e) {
			throw new ControladorException("erro.sistema", e);
		}
		System.out.println("-------------------------------------------------------------------------------------------terminou pesquisa: "+ new Date());
		
		
		if (colecaoPesquisa != null && !colecaoPesquisa.isEmpty()) {

			Iterator itera = colecaoPesquisa.iterator();

			while (itera.hasNext()) {
				Object[] objeto = (Object[]) itera.next();

				RelatorioImoveisUltimosConsumosAguaHelper helper = new RelatorioImoveisUltimosConsumosAguaHelper();

				Integer idImovel = (Integer) objeto[0];
				Integer localidade = (Integer) objeto[5];
				Integer codigoSetorComercial = (Integer) objeto[7];
				Integer numeroQuadra = (Integer) objeto[9];

				Short lote = (Short) objeto[15];
				Short subLote = (Short) objeto[16];

				helper.setMatriculaImovel(Util
						.retornaMatriculaImovelFormatada(idImovel));
				helper.setGerenciaRegional((Integer) objeto[1]);
				helper.setNomeGerenciaRegional((String) objeto[2]);
				helper.setUnidadeNegocio((Integer) objeto[3]);
				helper.setNomeUnidadeNegocio((String) objeto[4]);
				helper.setLocalidade(localidade);
				helper.setDescricaoLocalidade((String) objeto[6]);
				helper.setSetorComercial(codigoSetorComercial);
				helper.setDescricaoSetorComercial((String) objeto[8]);

				helper.setNomeCliente((String) objeto[10]);
				helper.setSituacaoLigacaoAgua((String) objeto[11]);
				helper.setSituacaoLigacaoEsgoto((String) objeto[12]);

				helper.setRota((Short) objeto[13]);
				helper.setSequencialRota((Integer) objeto[14]);

				Imovel imovel = new Imovel();
				imovel.setId(idImovel);

				Localidade local = new Localidade();
				local.setId(localidade);
				imovel.setLocalidade(local);

				SetorComercial setorComercial = new SetorComercial();
				setorComercial.setCodigo(codigoSetorComercial);
				imovel.setSetorComercial(setorComercial);

				Quadra quadra = new Quadra();
				quadra.setNumeroQuadra(numeroQuadra);
				imovel.setQuadra(quadra);

				imovel.setLote(lote);
				imovel.setSubLote(subLote);

				helper.setInscricaoImovel(imovel.getInscricaoFormatada());

				String endereco = this.getControladorEndereco()
						.obterEnderecoAbreviadoImovel(idImovel);
				helper.setEndereco(endereco);

				helper.setSubCategoria((Integer) objeto[32]);
				
				helper.setEconomias((Short) objeto[19]);

				helper.setDescricaoConsumo1(descricaoConsumo1);
				helper.setConsumoAgua1((String) objeto[20]);

				helper.setDescricaoConsumo2(descricaoConsumo2);
				helper.setConsumoAgua2((String) objeto[21]);

				// 3-Consumo Agua
				helper.setDescricaoConsumo3(descricaoConsumo3);
				helper.setConsumoAgua3((String) objeto[22]);

				// 4-Consumo Agua
				helper.setDescricaoConsumo4(descricaoConsumo4);
				helper.setConsumoAgua4((String) objeto[23]);

				// 5-Consumo Agua
				helper.setDescricaoConsumo5(descricaoConsumo5);
				helper.setConsumoAgua5((String) objeto[24]);

				// 6-Consumo Agua
				helper.setDescricaoConsumo6(descricaoConsumo6);
				helper.setConsumoAgua6((String) objeto[25]);

				// 7-Consumo Agua
				helper.setDescricaoConsumo7(descricaoConsumo7);
				helper.setConsumoAgua7((String) objeto[26]);

				// 8-Consumo Agua
				helper.setDescricaoConsumo8(descricaoConsumo8);
				helper.setConsumoAgua8((String) objeto[27]);

				// 9-Consumo Agua
				helper.setDescricaoConsumo9(descricaoConsumo9);
				helper.setConsumoAgua9((String) objeto[28]);

				// 10-Consumo Agua
				helper.setDescricaoConsumo10(descricaoConsumo10);
				helper.setConsumoAgua10((String) objeto[29]);

				// 11-Consumo Agua
				helper.setDescricaoConsumo11(descricaoConsumo11);
				helper.setConsumoAgua11((String) objeto[30]);

				// 12-Consumo Agua
				helper.setDescricaoConsumo12(descricaoConsumo12);
				helper.setConsumoAgua12((String) objeto[31]);

				RelatorioImoveisUltimosConsumosAguaBean relatorioBean = 
						new RelatorioImoveisUltimosConsumosAguaBean(helper);
				
				retorno.add(relatorioBean);
			}
		}
		System.out.println("-------------------------------------------------------------------------------------------terminou montar o bean: "+ new Date());
		return retorno;
	}

	/**
	 * [UC0731] Gerar Relatório de Imóveis com os Ultimos Consumos de Agua
	 * 
	 * Monta os consumos anteriores do imovel
	 * 
	 * @author Rafael Pinto
	 * @date 19/12/2007
	 * 
	 * @param idImovel
	 * @param anoMes
	 * 
	 * @return String[3]
	 * @throws ErroRepositorioException
	 */
	private String[] montarConsumoHistorico(int idImovel, int anoMes,
			int qtdMeses) throws ControladorException {

		String[] retorno = new String[3];

		String consumoAgua = "";

		int anoMesSubtraido = Util.subtrairMesDoAnoMes(anoMes, qtdMeses);
		String descricaoConsumo = Util.retornaDescricaoAnoMes(""
				+ anoMesSubtraido);

		Object[] consumoHistorico = this.getControladorMicromedicao()
				.obterConsumoAnteriorAnormalidadeDoImovel(idImovel,
						anoMesSubtraido, LigacaoTipo.LIGACAO_AGUA);

		if (consumoHistorico != null) {
			if (consumoHistorico[0] != null) {
				consumoAgua = "" + (Integer) consumoHistorico[0];
			}
		}

		retorno[0] = descricaoConsumo;
		retorno[1] = consumoAgua;

		return retorno;
	}

	/**
	 * [UC00728] Gerar Relatório de Imóveis Ativos e Não Medidos
	 * 
	 * @author Rafael Pinto
	 * @date 03/01/2008
	 * 
	 * @param FiltrarRelatorioImoveisAtivosNaoMedidosHelper
	 * 
	 * @return Collection<RelatorioImoveisAtivosNaoMedidosHelper>
	 * @throws ErroRepositorioException
	 */
	public Collection<RelatorioImoveisAtivosNaoMedidosHelper> pesquisarRelatorioImoveisAtivosNaoMedidos(
			FiltrarRelatorioImoveisAtivosNaoMedidosHelper filtro)
			throws ControladorException {

		Collection<RelatorioImoveisAtivosNaoMedidosHelper> retorno = new ArrayList<RelatorioImoveisAtivosNaoMedidosHelper>();

		Collection<Object[]> colecaoPesquisa = null;

		try {
			colecaoPesquisa = this.repositorioCadastro
					.pesquisarRelatorioImoveisAtivosNaoMedidos(filtro);
		} catch (ErroRepositorioException e) {
			throw new ControladorException("erro.sistema", e);
		}

		if (colecaoPesquisa != null && !colecaoPesquisa.isEmpty()) {

			Iterator itera = colecaoPesquisa.iterator();

			while (itera.hasNext()) {
				Object[] objeto = (Object[]) itera.next();

				RelatorioImoveisAtivosNaoMedidosHelper helper = new RelatorioImoveisAtivosNaoMedidosHelper();

				Integer idImovel = (Integer) objeto[0];
				Integer localidade = (Integer) objeto[5];
				Integer codigoSetorComercial = (Integer) objeto[7];
				Integer numeroQuadra = (Integer) objeto[9];

				Short lote = (Short) objeto[15];
				Short subLote = (Short) objeto[16];

				helper.setMatriculaImovel(Util
						.retornaMatriculaImovelFormatada(idImovel));

				helper.setGerenciaRegional((Integer) objeto[1]);
				helper.setNomeGerenciaRegional((String) objeto[2]);
				helper.setUnidadeNegocio((Integer) objeto[3]);
				helper.setNomeUnidadeNegocio((String) objeto[4]);
				helper.setLocalidade(localidade);
				helper.setDescricaoLocalidade((String) objeto[6]);
				helper.setSetorComercial(codigoSetorComercial);
				helper.setDescricaoSetorComercial((String) objeto[8]);
				helper.setNumeroQuadra(numeroQuadra);
				helper.setNomeCliente((String) objeto[10]);
				helper.setSituacaoLigacaoAgua((String) objeto[11]);
				helper.setSituacaoLigacaoEsgoto((String) objeto[12]);

				helper.setRota((Short) objeto[13]);
				helper.setSequencialRota((Integer) objeto[14]);

				Imovel imovel = new Imovel();
				imovel.setId(idImovel);

				Localidade local = new Localidade();
				local.setId(localidade);
				imovel.setLocalidade(local);

				SetorComercial setorComercial = new SetorComercial();
				setorComercial.setCodigo(codigoSetorComercial);
				imovel.setSetorComercial(setorComercial);

				Quadra quadra = new Quadra();
				quadra.setNumeroQuadra(numeroQuadra);
				imovel.setQuadra(quadra);

				imovel.setLote(lote);
				imovel.setSubLote(subLote);

				helper.setInscricaoImovel(imovel.getInscricaoFormatada());

				String endereco = this.getControladorEndereco()
						.obterEnderecoAbreviadoImovel(idImovel);
				helper.setEndereco(endereco);

				retorno.add(helper);
			}
		}

		return retorno;
	}

	/**
	 * [UC00728] Gerar Relatório de Imóveis Ativos e Não Medidos
	 * 
	 * @author Rafael Pinto
	 * @date 03/01/2008
	 * 
	 * @param FiltrarRelatorioImoveisAtivosNaoMedidosHelper
	 * 
	 * @return Integer
	 * @throws ErroRepositorioException
	 */
	public Integer pesquisarTotalRegistroRelatorioImoveisAtivosNaoMedidos(
			FiltrarRelatorioImoveisAtivosNaoMedidosHelper filtro)
			throws ControladorException {

		try {
			return this.repositorioCadastro
					.pesquisarTotalRegistroRelatorioImoveisAtivosNaoMedidos(filtro);
		} catch (ErroRepositorioException e) {
			throw new ControladorException("erro.sistema", e);
		}
	}

	/**
	 * [UC0729] Gerar Relatório de Imóveis por Tipo de Consumo
	 * 
	 * @author Bruno Barros
	 * @date 10/01/2008
	 * 
	 * @param RelatorioImoveisTipoConsumoHelper
	 * 
	 * @return Collection<RelatorioImoveisTipoConsumoHelper>
	 * @throws FachadaException
	 */
	public Collection<RelatorioImoveisTipoConsumoHelper> pesquisarRelatorioImoveisTipoConsumo(
			FiltrarRelatorioImoveisTipoConsumoHelper filtro)
			throws ControladorException {
		Collection<RelatorioImoveisTipoConsumoHelper> retorno = new ArrayList<RelatorioImoveisTipoConsumoHelper>();

		Collection<Object[]> colecaoPesquisa = null;

		try {
			colecaoPesquisa = this.repositorioCadastro
					.pesquisarRelatorioImoveisTipoConsumo(filtro);
		} catch (ErroRepositorioException e) {
			throw new ControladorException("erro.sistema", e);
		}

		if (colecaoPesquisa != null && !colecaoPesquisa.isEmpty()) {

			Iterator itera = colecaoPesquisa.iterator();

			while (itera.hasNext()) {
				Object[] objeto = (Object[]) itera.next();

				RelatorioImoveisTipoConsumoHelper helper = new RelatorioImoveisTipoConsumoHelper();

				Integer idImovel = (Integer) objeto[8];
				Integer localidade = (Integer) objeto[4];
				Integer codigoSetorComercial = (Integer) objeto[6];
				Integer numeroQuadra = (Integer) objeto[15];

				helper.setMatriculaImovel(Util
						.retornaMatriculaImovelFormatada(idImovel));
				helper.setGerenciaRegional((Integer) objeto[0]);
				helper.setNomeGerenciaRegional((String) objeto[1]);
				helper.setUnidadeNegocio((Integer) objeto[2]);
				helper.setNomeUnidadeNegocio((String) objeto[3]);
				helper.setLocalidade(localidade);
				helper.setDescricaoLocalidade((String) objeto[5]);
				helper.setSetorComercial(codigoSetorComercial);
				helper.setDescricaoSetorComercial((String) objeto[7]);
				helper.setNomeCliente((String) objeto[9]);
				helper.setSituacaoLigacaoAgua((String) objeto[10]);

				helper.setTipoConsumo((String) objeto[11]);
				helper.setCodigoRota((Short) objeto[12]);
				helper.setSequencialRota((Integer) objeto[13]);
				helper.setSituacaoLigacaoEsgoto((String) objeto[14]);
				String mesAno = Util.formatarAnoMesParaMesAno(objeto[18]
						.toString());
				helper.setReferencia(mesAno);

				// Montamos um objeto imovel para poder pesquisar sua inscrição
				Imovel imovel = new Imovel();
				imovel.setId(idImovel);

				Localidade local = new Localidade();
				local.setId(localidade);
				imovel.setLocalidade(local);

				SetorComercial setorComercial = new SetorComercial();
				setorComercial.setCodigo(codigoSetorComercial);
				imovel.setSetorComercial(setorComercial);

				Quadra quadra = new Quadra();
				quadra.setNumeroQuadra(numeroQuadra);
				imovel.setQuadra(quadra);

				imovel.setLote((Short) objeto[16]);
				imovel.setSubLote((Short) objeto[17]);

				helper.setInscricaoImovel(imovel.getInscricaoFormatada());
				// ------------------------------------------------------------

				// Selecionamos o endereço
				String endereco = this.getControladorEndereco()
						.obterEnderecoAbreviadoImovel(idImovel);
				helper.setEndereco(endereco);

				retorno.add(helper);
			}
		}

		return retorno;
	}

	/**
	 * [UC0729] Gerar Relatório de Imóveis por Tipo de Consumo
	 * 
	 * @author Bruno Barros
	 * @date 10/01/2008
	 * 
	 * @param RelatorioImoveisTipoConsumoHelper
	 * 
	 * @return Collection<RelatorioImoveisTipoConsumoHelper>
	 * @throws FachadaException
	 */
	public Integer pesquisarTotalRegistroRelatorioImoveisTipoConsumo(
			FiltrarRelatorioImoveisTipoConsumoHelper filtro)
			throws ControladorException {

		try {
			return this.repositorioCadastro
					.pesquisarTotalRegistroRelatorioImoveisTipoConsumo(filtro);
		} catch (ErroRepositorioException e) {
			throw new ControladorException("erro.sistema", e);
		}
	}

	/**
	 * [UC00730] Gerar Relatório de Imóveis com Faturas Recentes em Dia e
	 * Faturas Antigas em Atraso
	 * 
	 * @author Rafael Pinto
	 * @date 08/01/2008
	 * 
	 * @param
	 * FiltrarRelatorioImoveisFaturasRecentesDiaFaturasAntigasAtrasoHelper
	 * 
	 * @return Collection<RelatorioImoveisFaturasRecentesDiaFaturasAntigasAtrasoHelper>
	 * @throws ErroRepositorioException
	 */
	public Collection<RelatorioImoveisFaturasRecentesDiaFaturasAntigasAtrasoHelper> pesquisarRelatorioImoveisFaturasRecentesDiaFaturasAntigasAtraso(
			FiltrarRelatorioImoveisFaturasRecentesDiaFaturasAntigasAtrasoHelper filtro)
			throws ControladorException {

		Collection<RelatorioImoveisFaturasRecentesDiaFaturasAntigasAtrasoHelper> retorno = new ArrayList<RelatorioImoveisFaturasRecentesDiaFaturasAntigasAtrasoHelper>();

		Collection<Object[]> colecaoPesquisa = null;

		try {
			colecaoPesquisa = this.repositorioCadastro
					.pesquisarRelatorioImoveisFaturasRecentesDiaFaturasAntigasAtraso(filtro);
		} catch (ErroRepositorioException e) {
			throw new ControladorException("erro.sistema", e);
		}

		if (colecaoPesquisa != null && !colecaoPesquisa.isEmpty()) {

			Iterator itera = colecaoPesquisa.iterator();

			while (itera.hasNext()) {
				Object[] objeto = (Object[]) itera.next();

				RelatorioImoveisFaturasRecentesDiaFaturasAntigasAtrasoHelper helper = new RelatorioImoveisFaturasRecentesDiaFaturasAntigasAtrasoHelper();

				Integer idImovel = (Integer) objeto[0];
				Integer localidade = (Integer) objeto[5];
				Integer codigoSetorComercial = (Integer) objeto[7];
				Integer numeroQuadra = (Integer) objeto[9];

				Short lote = (Short) objeto[15];
				Short subLote = (Short) objeto[16];

				helper.setMatriculaImovel(Util
						.retornaMatriculaImovelFormatada(idImovel));
				helper.setGerenciaRegional((Integer) objeto[1]);
				helper.setNomeGerenciaRegional((String) objeto[2]);
				helper.setUnidadeNegocio((Integer) objeto[3]);
				helper.setNomeUnidadeNegocio((String) objeto[4]);
				helper.setLocalidade(localidade);
				helper.setDescricaoLocalidade((String) objeto[6]);
				helper.setSetorComercial(codigoSetorComercial);
				helper.setDescricaoSetorComercial((String) objeto[8]);

				helper.setNomeCliente((String) objeto[10]);
				helper.setSituacaoLigacaoAgua((String) objeto[11]);
				helper.setSituacaoLigacaoEsgoto((String) objeto[12]);

				helper.setRota((Short) objeto[13]);
				helper.setSequencialRota((Integer) objeto[14]);

				Imovel imovel = new Imovel();
				imovel.setId(idImovel);

				Localidade local = new Localidade();
				local.setId(localidade);
				imovel.setLocalidade(local);

				SetorComercial setorComercial = new SetorComercial();
				setorComercial.setCodigo(codigoSetorComercial);
				imovel.setSetorComercial(setorComercial);

				Quadra quadra = new Quadra();
				quadra.setNumeroQuadra(numeroQuadra);
				imovel.setQuadra(quadra);

				imovel.setLote(lote);
				imovel.setSubLote(subLote);

				helper.setInscricaoImovel(imovel.getInscricaoFormatada());

				String endereco = this.getControladorEndereco()
						.obterEnderecoAbreviadoImovel(idImovel);
				helper.setEndereco(endereco);

				Categoria categoria = this.getControladorImovel()
						.obterPrincipalCategoriaImovel(idImovel);

				ImovelSubcategoria imovelSubCategoria = this
						.getControladorImovel().obterPrincipalSubcategoria(
								categoria.getId(), idImovel);

				helper.setSubCategoria(imovelSubCategoria.getComp_id()
						.getSubcategoria().getId());
				helper.setEconomias((Short) objeto[19]);

				try {
					Object[] dadosConta = this.repositorioFaturamento
							.pesquisarQuantidadeFaturasValorFaturas(idImovel);

					helper.setQuantidadeFaturasAtraso((Integer) dadosConta[0]);
					helper.setValorFaturasAtras((BigDecimal) dadosConta[1]);

					Integer dadosRefenciaAntigaConta = this.repositorioFaturamento
							.pesquisarReferenciaAntigaContaSemPagamento(idImovel);

					helper.setReferenciaInicial(dadosRefenciaAntigaConta);

					Integer dadosRefenciaAtualConta = this.repositorioFaturamento
							.pesquisarReferenciaAtualContaSemPagamento(idImovel);

					helper.setReferenciaFinal(dadosRefenciaAtualConta);

				} catch (ErroRepositorioException e) {
					throw new ControladorException("erro.sistema", e);
				}

				retorno.add(helper);
			}
		}

		return retorno;
	}

	/**
	 * [UC00730] Gerar Relatório de Imóveis com Faturas Recentes em Dia e
	 * Faturas Antigas em Atraso
	 * 
	 * @author Rafael Pinto
	 * @date 08/01/2008
	 * 
	 * @param
	 * FiltrarRelatorioImoveisFaturasRecentesDiaFaturasAntigasAtrasoHelper
	 * 
	 * @return Integer
	 * @throws ErroRepositorioException
	 */
	public Integer pesquisarTotalRelatorioImoveisFaturasRecentesDiaFaturasAntigasAtraso(
			FiltrarRelatorioImoveisFaturasRecentesDiaFaturasAntigasAtrasoHelper filtro)
			throws ControladorException {

		try {
			return this.repositorioCadastro
					.pesquisarTotalRegistroRelatorioImoveisFaturasRecentesDiaFaturasAntigasAtraso(filtro);
		} catch (ErroRepositorioException e) {
			throw new ControladorException("erro.sistema", e);
		}

	}

	/**
	 * [UC0762] Gerar Arquivo Texto com Dados Cadastrais - CAERN
	 * 
	 * @author Tiago Moreno
	 * @date 08/04/2008
	 * 
	 * @param ArquivoTextoDadosCadastraisHelper
	 * 
	 * @return
	 * @throws ControladorException
	 */
	public void gerarArquivoTextoDadosCadastrais(
			ArquivoTextoDadosCadastraisHelper arquivoTextoDadosCadastraisHelper)
			throws ControladorException {

		// Recupera os imoveis a serem submetidos ao processo
		Collection<Imovel> imoveis = (Collection) this
				.recuperaImoveisArquivoTextoDadosCadastrais(arquivoTextoDadosCadastraisHelper);

		// verifica se há imoveis para os parametros informados
		if (imoveis == null || imoveis.isEmpty()) {
			throw new ControladorException(
					"atencao.sem_registros_arquivo_texto");
		}

		// joga numa colecao de helper todas as informacoes necessarias
		Collection<StringArquivoTextoDadosCadastraisHelper> collectionHelper = this
				.formatarStringArquivoTextoDadosCadastrais(imoveis);

		// Arquivo texto final
		StringBuilder arquivoTxFinal = new StringBuilder();
		BufferedWriter out = null;
		ZipOutputStream zos = null;

		try {

			int i = 1;
			int j = collectionHelper.size();

			// itera a colecao do helper montando as linhas
			for (Iterator iter = collectionHelper.iterator(); iter.hasNext();) {
				StringArquivoTextoDadosCadastraisHelper helper = (StringArquivoTextoDadosCadastraisHelper) iter
						.next();

				// variavel que cria linha por linha
				StringBuilder arquivoTx = new StringBuilder();

				// Inscricao Imovel - 16
				if (helper.getInscricaoImovel() != null
						&& !helper.getInscricaoImovel().equalsIgnoreCase("")) {
					arquivoTx.append(Util.completaString(helper
							.getInscricaoImovel(), 16));
					arquivoTx.append(";");
				} else {
					arquivoTx.append(Util.completaString(" ", 16));
					arquivoTx.append(";");
				}

				// Matricula Imovel Imovel - 8
				if (helper.getMatriculaImovel() != null
						&& !helper.getMatriculaImovel().equalsIgnoreCase("")) {
					arquivoTx.append(Util.completaString(helper
							.getMatriculaImovel(), 8));
					arquivoTx.append(";");
				} else {
					arquivoTx.append(Util.completaString(" ", 8));
					arquivoTx.append(";");
				}

				// Nome Cliente usuario- 28
				if (helper.getNomeCliente() != null
						&& !helper.getNomeCliente().equalsIgnoreCase("")) {
					arquivoTx.append(Util.completaString(helper
							.getNomeCliente(), 28));
					arquivoTx.append(";");
				} else {
					arquivoTx.append(Util.completaString(" ", 28));
					arquivoTx.append(";");
				}

				// Numero Imovel Imovel - 5
				if (helper.getNumeroImovel() != null
						&& !helper.getNumeroImovel().equalsIgnoreCase("")) {
					arquivoTx.append(Util.completaString(helper
							.getNumeroImovel(), 5));
					arquivoTx.append(";");
				} else {
					arquivoTx.append(Util.completaString(" ", 5));
					arquivoTx.append(";");
				}

				// Complemento do Endereco do Imovel - 10
				if (helper.getComplementoEndereco() != null
						&& !helper.getComplementoEndereco()
								.equalsIgnoreCase("")) {
					arquivoTx.append(Util.completaString(helper
							.getComplementoEndereco(), 10));
					arquivoTx.append(";");
				} else {
					arquivoTx.append(Util.completaString(" ", 10));
					arquivoTx.append(";");
				}

				// Situacao de Agua do Imovel - 1
				if (helper.getSituacaoAgua() != null
						&& !helper.getSituacaoAgua().equalsIgnoreCase("")) {
					arquivoTx.append(Util.completaString(helper
							.getSituacaoAgua(), 1));
					arquivoTx.append(";");
				} else {
					arquivoTx.append(Util.completaString(" ", 1));
					arquivoTx.append(";");
				}

				// Situacao do Imovel - 1
				if (helper.getSituacaoImovel() != null
						&& !helper.getSituacaoImovel().equalsIgnoreCase("")) {
					arquivoTx.append(Util.completaString(helper
							.getSituacaoImovel(), 1));
					arquivoTx.append(";");
				} else {
					arquivoTx.append(Util.completaString(" ", 1));
					arquivoTx.append(";");
				}

				// Situacao de Esgoto do Imovel - 1
				if (helper.getSituacaoEsgoto() != null
						&& !helper.getSituacaoEsgoto().equalsIgnoreCase("")) {
					arquivoTx.append(Util.completaString(helper
							.getSituacaoEsgoto(), 1));
					arquivoTx.append(";");
				} else {
					arquivoTx.append(Util.completaString(" ", 1));
					arquivoTx.append(";");
				}

				// Codigo da Subcategoria 01 - 3
				if (helper.getCodigoSubcategoria01() != null
						&& !helper.getCodigoSubcategoria01().equalsIgnoreCase(
								"")) {
					arquivoTx.append(Util.completaString(Util
							.adicionarZerosEsquedaNumero(3, helper
									.getCodigoSubcategoria01()), 3));
					arquivoTx.append(";");
				} else {
					arquivoTx.append(Util.completaString("000", 3));
					arquivoTx.append(";");
				}

				// Quantidade da Subcategoria 01 - 3
				if (helper.getQuantidadeSubcategoria01() != null
						&& !helper.getQuantidadeSubcategoria01()
								.equalsIgnoreCase("")) {
					arquivoTx.append(Util.completaString(Util
							.adicionarZerosEsquedaNumero(3, helper
									.getQuantidadeSubcategoria01()), 3));
					arquivoTx.append(";");
				} else {
					arquivoTx.append(Util.completaString("000", 3));
					arquivoTx.append(";");
				}

				// Codigo da Subcategoria 02 - 3
				if (helper.getCodigoSubcategoria02() != null
						&& !helper.getCodigoSubcategoria02().equalsIgnoreCase(
								"")) {
					arquivoTx.append(Util.completaString(Util
							.adicionarZerosEsquedaNumero(3, helper
									.getCodigoSubcategoria02()), 3));
					arquivoTx.append(";");
				} else {
					arquivoTx.append(Util.completaString("000", 3));
					arquivoTx.append(";");
				}

				// Quantidade da Subcategoria 02 - 3
				if (helper.getQuantidadeSubcategoria02() != null
						&& !helper.getQuantidadeSubcategoria02()
								.equalsIgnoreCase("")) {
					arquivoTx.append(Util.completaString(Util
							.adicionarZerosEsquedaNumero(3, helper
									.getQuantidadeSubcategoria02()), 3));
					arquivoTx.append(";");
				} else {
					arquivoTx.append(Util.completaString("000", 3));
					arquivoTx.append(";");
				}

				// Codigo da Subcategoria 03 - 3
				if (helper.getCodigoSubcategoria03() != null
						&& !helper.getCodigoSubcategoria03().equalsIgnoreCase(
								"")) {
					arquivoTx.append(Util.completaString(Util
							.adicionarZerosEsquedaNumero(3, helper
									.getCodigoSubcategoria03()), 3));
					arquivoTx.append(";");
				} else {
					arquivoTx.append(Util.completaString("000", 3));
					arquivoTx.append(";");
				}

				// Quantidade da Subcategoria 03 - 3
				if (helper.getQuantidadeSubcategoria03() != null
						&& !helper.getQuantidadeSubcategoria03()
								.equalsIgnoreCase("")) {
					arquivoTx.append(Util.completaString(Util
							.adicionarZerosEsquedaNumero(3, helper
									.getQuantidadeSubcategoria03()), 3));
					arquivoTx.append(";");
				} else {
					arquivoTx.append(Util.completaString("000", 3));
					arquivoTx.append(";");
				}

				// Codigo da Subcategoria 04 - 3
				if (helper.getCodigoSubcategoria04() != null
						&& !helper.getCodigoSubcategoria04().equalsIgnoreCase(
								"")) {
					arquivoTx.append(Util.completaString(Util
							.adicionarZerosEsquedaNumero(3, helper
									.getCodigoSubcategoria04()), 3));
					arquivoTx.append(";");
				} else {
					arquivoTx.append(Util.completaString("000", 3));
					arquivoTx.append(";");
				}

				// Quantidade da Subcategoria 04 - 3
				if (helper.getQuantidadeSubcategoria04() != null
						&& !helper.getQuantidadeSubcategoria04()
								.equalsIgnoreCase("")) {
					arquivoTx.append(Util.completaString(Util
							.adicionarZerosEsquedaNumero(3, helper
									.getQuantidadeSubcategoria04()), 3));
					arquivoTx.append(";");
				} else {
					arquivoTx.append(Util.completaString("000", 3));
					arquivoTx.append(";");
				}

				// Codigo da Subcategoria 05 - 3
				if (helper.getCodigoSubcategoria05() != null
						&& !helper.getCodigoSubcategoria05().equalsIgnoreCase(
								"")) {
					arquivoTx.append(Util.completaString(Util
							.adicionarZerosEsquedaNumero(3, helper
									.getCodigoSubcategoria05()), 3));
					arquivoTx.append(";");
				} else {
					arquivoTx.append(Util.completaString("000", 3));
					arquivoTx.append(";");
				}

				// Quantidade da Subcategoria 05 - 3
				if (helper.getQuantidadeSubcategoria05() != null
						&& !helper.getQuantidadeSubcategoria05()
								.equalsIgnoreCase("")) {
					arquivoTx.append(Util.completaString(Util
							.adicionarZerosEsquedaNumero(3, helper
									.getQuantidadeSubcategoria05()), 3));
					arquivoTx.append(";");
				} else {
					arquivoTx.append(Util.completaString("000", 3));
					arquivoTx.append(";");
				}

				// Tipo do Logradouro do Imovel - 5
				if (helper.getTipoLogradouro() != null
						&& !helper.getTipoLogradouro().equalsIgnoreCase("")) {
					arquivoTx.append(Util.completaString(helper
							.getTipoLogradouro(), 5));
					arquivoTx.append(";");
				} else {
					arquivoTx.append(Util.completaString(" ", 5));
					arquivoTx.append(";");
				}

				// Título do Logradouro do Imovel - 6
				if (helper.getTituloLogradouro() != null
						&& !helper.getTituloLogradouro().equalsIgnoreCase("")) {
					arquivoTx.append(Util.completaString(helper
							.getTituloLogradouro(), 6));
					arquivoTx.append(";");
				} else {
					arquivoTx.append(Util.completaString(" ", 6));
					arquivoTx.append(";");
				}

				// Nome do Logradouro do Imovel - 19
				if (helper.getNomeLogradouro() != null
						&& !helper.getNomeLogradouro().equalsIgnoreCase("")) {
					arquivoTx.append(Util.completaString(helper
							.getNomeLogradouro(), 19));
					arquivoTx.append(";");
				} else {
					arquivoTx.append(Util.completaString(" ", 19));
					arquivoTx.append(";");
				}

				// Nome do Bairro do Imovel - 20
				if (helper.getNomeBairro() != null
						&& !helper.getNomeBairro().equalsIgnoreCase("")) {
					arquivoTx.append(Util.completaString(
							helper.getNomeBairro(), 20));
					arquivoTx.append(";");
				} else {
					arquivoTx.append(Util.completaString(" ", 20));
					arquivoTx.append(";");
				}

				// adicionando a linha no TXT
				arquivoTxFinal.append(arquivoTx.toString());

				// zerando a variavel da linha
				arquivoTx = null;

				// adicionando quebra da linha
				arquivoTxFinal.append(System.getProperty("line.separator"));

				System.out.println("Gerada Linha: " + i + "/" + j);
				i++;

			}

			System.out.println("CRIANDO O ARQUIVO TEXTO...");

			// criando nome do arquivo
			String nomeZip = null;

			String data = Util.formatarDataSemBarraDDMMAAAA(new Date());

			String hora = Util.formatarHoraSemDataSemDoisPontos(new Date());

			nomeZip = "ARQUIVO_DADOS_CADASTRAIS_" + data + "_" + hora;

			File compactadoTipo = new File(nomeZip + ".zip");
			File leituraTipo = new File(nomeZip + ".txt");

			if (arquivoTxFinal != null && arquivoTxFinal.length() != 0) {
				zos = new ZipOutputStream(new FileOutputStream(compactadoTipo));
				out = new BufferedWriter(new OutputStreamWriter(
						new FileOutputStream(leituraTipo.getAbsolutePath())));
				out.write(arquivoTxFinal.toString());
				out.flush();
				ZipUtil.adicionarArquivo(zos, leituraTipo);
				zos.close();
				leituraTipo.delete();
				out.close();
			}

			// limpa todos os campos
			nomeZip = null;
			out = null;
			zos = null;
			compactadoTipo = null;
			leituraTipo = null;
			arquivoTxFinal = null;

			System.out.println("ARQUIVO TEXTO CRIADO COM SUCESSO!");

		} catch (IOException e) {
			String mensagem = e.getMessage();
			String[] inicioMensagem = mensagem.split("\\.");
			if (inicioMensagem != null
					&& (inicioMensagem[0].equals("erro") || inicioMensagem[0]
							.equals("atencao"))) {
				throw new ControladorException(mensagem);
			} else {
				throw new ControladorException("erro.sistema", e);
			}
		} catch (Exception e) {
			e.printStackTrace();
			String mensagem = e.getMessage();
			if (mensagem != null) {
				String[] inicioMensagem = mensagem.split("\\.");
				if (inicioMensagem != null
						&& (inicioMensagem[0].equals("erro") || inicioMensagem[0]
								.equals("atencao"))) {
					throw new ControladorException(mensagem);
				} else {
					throw new ControladorException("erro.sistema", e);
				}
			} else {
				throw new ControladorException("erro.sistema", e);
			}
		}

	}

	/**
	 * [UC0762] Gerar Arquivo Texto com Dados Cadastrais - CAERN
	 * 
	 * Retornar a string formatada para o Arquivo Texto dos dados cadastrais
	 * 
	 * @author Tiago Moreno
	 * @date 08/04/2008
	 * 
	 * @param ArquivoTextoDadosCadastraisHelper
	 * 
	 * @return
	 * @throws ControladorException
	 */
	public Collection<StringArquivoTextoDadosCadastraisHelper> formatarStringArquivoTextoDadosCadastrais(
			Collection<Imovel> imoveis) throws ControladorException {

		Collection<StringArquivoTextoDadosCadastraisHelper> retorno = new ArrayList();

		int i = 1;
		int j = imoveis.size();

		for (Iterator iter = imoveis.iterator(); iter.hasNext();) {

			Imovel imovel = (Imovel) iter.next();

			StringArquivoTextoDadosCadastraisHelper objeto = new StringArquivoTextoDadosCadastraisHelper();

			// Inscricao do Imovel - 16
			objeto.setInscricaoImovel(getControladorImovel()
					.pesquisarInscricaoImovelSemPonto(imovel.getId()));

			// Matricula do Imovel - 8
			objeto.setMatriculaImovel(Util.adicionarZerosEsquedaNumero(8,
					imovel.getId().toString()));

			// Nome do Cliente - 28
			FiltroClienteImovel filtroClienteImovel = new FiltroClienteImovel();

			filtroClienteImovel.adicionarParametro(new ParametroSimples(
					FiltroClienteImovel.IMOVEL_ID, imovel.getId().toString()));
			filtroClienteImovel.adicionarParametro(new ParametroSimples(
					FiltroClienteImovel.CLIENTE_RELACAO_TIPO_ID,
					ClienteRelacaoTipo.USUARIO));
			filtroClienteImovel.adicionarParametro(new ParametroNulo(
					FiltroClienteImovel.DATA_FIM_RELACAO));

			filtroClienteImovel
					.adicionarCaminhoParaCarregamentoEntidade("imovel");
			filtroClienteImovel
					.adicionarCaminhoParaCarregamentoEntidade("cliente");
			filtroClienteImovel
					.adicionarCaminhoParaCarregamentoEntidade("clienteRelacaoTipo");

			ClienteImovel clienteImovel = (ClienteImovel) getControladorUtil()
					.pesquisar(filtroClienteImovel,
							ClienteImovel.class.getName()).iterator().next();
			objeto.setNomeCliente(Util.completaString(clienteImovel
					.getCliente().getNome(), 28));

			// Numero do Imovel - 5
			objeto.setNumeroImovel(Util.completaString(
					imovel.getNumeroImovel(), 5));

			// Complemento Endereco - 10
			objeto.setComplementoEndereco(Util.completaString(imovel
					.getComplementoEndereco(), 10));

			// Situacao de Ligacao de Agua - 1
			String ligacaoAgua = " ";

			if (imovel.getLigacaoAguaSituacao().getId().equals(
					LigacaoAguaSituacao.POTENCIAL)
					|| imovel.getLigacaoAguaSituacao().getId().equals(
							LigacaoAguaSituacao.FACTIVEL)) {
				ligacaoAgua = "0";
			} else {
				ligacaoAgua = "1";
			}
			objeto.setSituacaoAgua(ligacaoAgua);

			// Situacao do Imovel
			String situacaoImovel = " ";

			switch (imovel.getLigacaoAguaSituacao().getId()) {
			case 1:
				situacaoImovel = "0";
				break;
			case 2:
				situacaoImovel = "0";
				break;
			case 3:
				situacaoImovel = "1";
				break;
			case 4:
				situacaoImovel = "1";
				break;
			case 5:
				situacaoImovel = "2";
				break;
			case 6:
				situacaoImovel = "3";
				break;
			case 7:
				situacaoImovel = "3";
				break;
			case 8:
				situacaoImovel = "3";
				break;
			case 9:
				situacaoImovel = "9";
				break;
			}

			objeto.setSituacaoImovel(Util.completaString(situacaoImovel, 1));

			// Situacao de Ligacao de Esgoto - 1
			String ligacaoEsgoto = " ";

			if (imovel.getLigacaoEsgotoSituacao().getId().equals("1")
					|| imovel.getLigacaoEsgotoSituacao().getId().equals("2")) {

				ligacaoEsgoto = "0";
			} else if (imovel.getLigacaoEsgoto() == null
					|| imovel.getLigacaoEsgoto().getLigacaoEsgotoPerfil() == null) {
				ligacaoEsgoto = "0";
			} else if (imovel.getLigacaoEsgoto().getLigacaoEsgotoPerfil()
					.getId().equals("2")) {
				ligacaoEsgoto = "2";
			} else {
				ligacaoEsgoto = "1";
			}

			objeto.setSituacaoEsgoto(ligacaoEsgoto);

			// subcategorias e economias
			Collection<ImovelSubcategoria> colecaoImovelSubcategoria = getControladorImovel()
					.pesquisarImovelSubcategoria(imovel);

			int qtImovelSubCategoria = colecaoImovelSubcategoria.size();

			Iterator iterImovelSubCategoria = colecaoImovelSubcategoria
					.iterator();

			ImovelSubcategoria imovSubCat01 = new ImovelSubcategoria();
			ImovelSubcategoria imovSubCat02 = new ImovelSubcategoria();
			ImovelSubcategoria imovSubCat03 = new ImovelSubcategoria();
			ImovelSubcategoria imovSubCat04 = new ImovelSubcategoria();
			ImovelSubcategoria imovSubCat05 = new ImovelSubcategoria();

			if (qtImovelSubCategoria == 1) {

				imovSubCat01 = (ImovelSubcategoria) iterImovelSubCategoria
						.next();
				objeto
						.setCodigoSubcategoria01(((ImovelSubcategoria) imovSubCat01)
								.getComp_id().getSubcategoria().getCodigo()
								+ "");
				objeto
						.setQuantidadeSubcategoria01(((ImovelSubcategoria) imovSubCat01)
								.getQuantidadeEconomias()
								+ "");
			} else if (qtImovelSubCategoria == 2) {
				imovSubCat01 = (ImovelSubcategoria) iterImovelSubCategoria
						.next();
				objeto
						.setCodigoSubcategoria01(((ImovelSubcategoria) imovSubCat01)
								.getComp_id().getSubcategoria().getCodigo()
								+ "");
				objeto
						.setQuantidadeSubcategoria01(((ImovelSubcategoria) imovSubCat01)
								.getQuantidadeEconomias()
								+ "");

				imovSubCat02 = (ImovelSubcategoria) iterImovelSubCategoria
						.next();
				objeto
						.setCodigoSubcategoria02(((ImovelSubcategoria) imovSubCat02)
								.getComp_id().getSubcategoria().getCodigo()
								+ "");
				objeto
						.setQuantidadeSubcategoria02(((ImovelSubcategoria) imovSubCat02)
								.getQuantidadeEconomias()
								+ "");
			} else if (qtImovelSubCategoria == 3) {
				imovSubCat01 = (ImovelSubcategoria) iterImovelSubCategoria
						.next();
				objeto
						.setCodigoSubcategoria01(((ImovelSubcategoria) imovSubCat01)
								.getComp_id().getSubcategoria().getCodigo()
								+ "");
				objeto
						.setQuantidadeSubcategoria01(((ImovelSubcategoria) imovSubCat01)
								.getQuantidadeEconomias()
								+ "");

				imovSubCat02 = (ImovelSubcategoria) iterImovelSubCategoria
						.next();
				objeto
						.setCodigoSubcategoria02(((ImovelSubcategoria) imovSubCat02)
								.getComp_id().getSubcategoria().getCodigo()
								+ "");
				objeto
						.setQuantidadeSubcategoria02(((ImovelSubcategoria) imovSubCat02)
								.getQuantidadeEconomias()
								+ "");

				imovSubCat03 = (ImovelSubcategoria) iterImovelSubCategoria
						.next();
				objeto
						.setCodigoSubcategoria03(((ImovelSubcategoria) imovSubCat03)
								.getComp_id().getSubcategoria().getCodigo()
								+ "");
				objeto
						.setQuantidadeSubcategoria03(((ImovelSubcategoria) imovSubCat03)
								.getQuantidadeEconomias()
								+ "");

			} else if (qtImovelSubCategoria == 4) {
				imovSubCat01 = (ImovelSubcategoria) iterImovelSubCategoria
						.next();
				objeto
						.setCodigoSubcategoria01(((ImovelSubcategoria) imovSubCat01)
								.getComp_id().getSubcategoria().getCodigo()
								+ "");
				objeto
						.setQuantidadeSubcategoria01(((ImovelSubcategoria) imovSubCat01)
								.getQuantidadeEconomias()
								+ "");

				imovSubCat02 = (ImovelSubcategoria) iterImovelSubCategoria
						.next();
				objeto
						.setCodigoSubcategoria02(((ImovelSubcategoria) imovSubCat02)
								.getComp_id().getSubcategoria().getCodigo()
								+ "");
				objeto
						.setQuantidadeSubcategoria02(((ImovelSubcategoria) imovSubCat02)
								.getQuantidadeEconomias()
								+ "");

				imovSubCat03 = (ImovelSubcategoria) iterImovelSubCategoria
						.next();
				objeto
						.setCodigoSubcategoria03(((ImovelSubcategoria) imovSubCat03)
								.getComp_id().getSubcategoria().getCodigo()
								+ "");
				objeto
						.setQuantidadeSubcategoria03(((ImovelSubcategoria) imovSubCat03)
								.getQuantidadeEconomias()
								+ "");

				imovSubCat04 = (ImovelSubcategoria) iterImovelSubCategoria
						.next();
				objeto
						.setCodigoSubcategoria04(((ImovelSubcategoria) imovSubCat04)
								.getComp_id().getSubcategoria().getCodigo()
								+ "");
				objeto
						.setQuantidadeSubcategoria04(((ImovelSubcategoria) imovSubCat04)
								.getQuantidadeEconomias()
								+ "");

			} else if (qtImovelSubCategoria == 5) {
				imovSubCat01 = (ImovelSubcategoria) iterImovelSubCategoria
						.next();
				objeto
						.setCodigoSubcategoria01(((ImovelSubcategoria) imovSubCat01)
								.getComp_id().getSubcategoria().getCodigo()
								+ "");
				objeto
						.setQuantidadeSubcategoria01(((ImovelSubcategoria) imovSubCat01)
								.getQuantidadeEconomias()
								+ "");

				imovSubCat02 = (ImovelSubcategoria) iterImovelSubCategoria
						.next();
				objeto
						.setCodigoSubcategoria02(((ImovelSubcategoria) imovSubCat02)
								.getComp_id().getSubcategoria().getCodigo()
								+ "");
				objeto
						.setQuantidadeSubcategoria02(((ImovelSubcategoria) imovSubCat02)
								.getQuantidadeEconomias()
								+ "");

				imovSubCat03 = (ImovelSubcategoria) iterImovelSubCategoria
						.next();
				objeto
						.setCodigoSubcategoria03(((ImovelSubcategoria) imovSubCat03)
								.getComp_id().getSubcategoria().getCodigo()
								+ "");
				objeto
						.setQuantidadeSubcategoria03(((ImovelSubcategoria) imovSubCat03)
								.getQuantidadeEconomias()
								+ "");

				imovSubCat04 = (ImovelSubcategoria) iterImovelSubCategoria
						.next();
				objeto
						.setCodigoSubcategoria04(((ImovelSubcategoria) imovSubCat04)
								.getComp_id().getSubcategoria().getCodigo()
								+ "");
				objeto
						.setQuantidadeSubcategoria04(((ImovelSubcategoria) imovSubCat04)
								.getQuantidadeEconomias()
								+ "");

				imovSubCat05 = (ImovelSubcategoria) iterImovelSubCategoria
						.next();
				objeto
						.setCodigoSubcategoria05(((ImovelSubcategoria) imovSubCat05)
								.getComp_id().getSubcategoria().getCodigo()
								+ "");
				objeto
						.setQuantidadeSubcategoria05(((ImovelSubcategoria) imovSubCat05)
								.getQuantidadeEconomias()
								+ "");

			}

			// pesquisa o endereco do imovel
			Collection endereco = getControladorEndereco()
					.pesquisarEnderecoTotalmenteDividido(imovel.getId());

			Object[] objetoEndereco = (Object[]) endereco.iterator().next();

			// Tipo Logradouro - 5
			objeto.setTipoLogradouro(Util.completaString(
					(String) objetoEndereco[22], 5));

			// Titulo Logradouro - 6
			objeto.setTituloLogradouro(Util.completaString(
					(String) objetoEndereco[23], 6));

			// Nome Logradouro - 19
			objeto.setNomeLogradouro(Util.completaString(
					(String) objetoEndereco[0], 19));

			// Nome Bairro - 20
			objeto.setNomeBairro(Util.completaString(
					(String) objetoEndereco[4], 20));

			retorno.add(objeto);

			System.out.println("Formatada Linha: " + i + "/" + j);
			i++;
		}

		return retorno;
	}

	/**
	 * [UC0762] Gerar Arquivo Texto com Dados Cadastrais - CAERN
	 * 
	 * O método retorna uma colecao de Imoveis para que a partir daí comece a
	 * geracao das linhas TXTs.
	 * 
	 * @author Tiago Moreno
	 * @date 08/04/2008
	 * 
	 * @param ArquivoTextoDadosCadastraisHelper
	 * 
	 * @return Collection<Imovel>
	 * @throws ControladorException
	 */

	public Collection<Imovel> recuperaImoveisArquivoTextoDadosCadastrais(
			ArquivoTextoDadosCadastraisHelper arquivoTextoDadosCadastraisHelper)
			throws ControladorException {

		try {
			return this.repositorioCadastro
					.pesquisarImovelArquivoTextoDadosCadastrais(arquivoTextoDadosCadastraisHelper);
		} catch (ErroRepositorioException e) {
			throw new ControladorException("erro.sistema", e);
		}

	}

	/**
	 * [UC0763] Gerar Arquivo Texto de Ligacoes com Hidrometro - CAERN
	 * 
	 * @author Tiago Moreno
	 * @date 10/04/2008
	 * 
	 * @param ArquivoTextoLigacoesHidrometroHelper
	 * 
	 * @return
	 * @throws ControladorException
	 */
	public Collection<HidrometroInstalacaoHistorico> recuperaImoveisArquivoTextoLigacoesHidrometro(
			ArquivoTextoLigacoesHidrometroHelper arquivoTextoLigacoesHidrometroHelper)
			throws ControladorException {

		try {
			return this.repositorioCadastro
					.pesquisarImovelArquivoTextoLigacoesHidrometro(arquivoTextoLigacoesHidrometroHelper);
		} catch (ErroRepositorioException e) {
			throw new ControladorException("erro.sistema", e);
		}

	}

	/**
	 * Pesquisar os todos os ids de Setor comercial
	 * 
	 * @author Vivianne Sousa
	 * @date 07/02/2007
	 * 
	 * @return Collection<Integer>
	 * @throws ErroRepositorioException
	 */
	public Collection<Integer> pesquisarIdsCodigosSetorComercial()
			throws ControladorException {

		try {
			return this.repositorioSetorComercial
					.pesquisarIdsCodigosSetorComercial();
		} catch (ErroRepositorioException e) {
			throw new ControladorException("erro.sistema", e);
		}

	}

	/**
	 * [UC0330] Inserir Mensagem da Conta
	 * 
	 * [SB0001] Pesquisar Setor Comercial
	 * 
	 * @author Raphael Rossiter
	 * @date 25/06/2008
	 * 
	 * @param tipoArgumento
	 * @param indiceInicial
	 * @param indiceFinal
	 * @param anoMesReferencia
	 * @return Collection
	 * @throws ControladorException
	 */
	public Collection pesquisarSetorComercialPorQualidadeAgua(
			int tipoArgumento, BigDecimal indiceInicial,
			BigDecimal indiceFinal, Integer anoMesReferencia)
			throws ControladorException {

		Collection colecaoRetorno = new ArrayList();
		Collection colecaoDadosQualidadeAgua = null;

		try {

			colecaoDadosQualidadeAgua = this.repositorioCadastro
					.pesquisarSetorComercialPorQualidadeAgua(tipoArgumento,
							indiceInicial, indiceFinal, anoMesReferencia);

		} catch (ErroRepositorioException e) {
			throw new ControladorException("erro.sistema", e);
		}

		// Caso a qualidade de água não exista na tabela QUALIDADE_AGUA
		if (colecaoDadosQualidadeAgua == null
				|| colecaoDadosQualidadeAgua.isEmpty()) {

			throw new ControladorException("atencao.pesquisa_inexistente",
					null, "Qualidade de Água");
		}

		Iterator iterator = colecaoDadosQualidadeAgua.iterator();
		Object[] dadosQualidadeAgua = null;

		while (iterator.hasNext()) {

			dadosQualidadeAgua = (Object[]) iterator.next();

			// Caso a qualidade de água tenha localidade na tabela
			// QUALIDADE_AGUA
			if (dadosQualidadeAgua[0] != null) {

				Localidade localidade = new Localidade();
				localidade.setId((Integer) dadosQualidadeAgua[0]);
				localidade.setDescricao((String) dadosQualidadeAgua[1]);

				/*
				 * Caso a qualidade de água tenha setor comercial na tabela
				 * QUALIDADE_AGUA, o mesmo será disponibilizado.
				 */
				if (dadosQualidadeAgua[2] != null) {

					// Será necessário carregar o nome da localidade para ser
					// visualizado ao lado do nome do setor
					SetorComercial setorComercial = (SetorComercial) dadosQualidadeAgua[2];
					setorComercial.setLocalidade(localidade);

					FiltroContaMensagem filtroContaMensagem = new FiltroContaMensagem();

					filtroContaMensagem
							.adicionarParametro(new ParametroSimples(
									FiltroContaMensagem.ANO_MES_REFERECIA_FATURAMENTO,
									anoMesReferencia));

					filtroContaMensagem
							.adicionarParametro(new ParametroSimples(
									FiltroContaMensagem.SETOR_COMERCIAL_ID,
									setorComercial.getId()));

					Collection colecaoContaMensagem = this.getControladorUtil()
							.pesquisar(filtroContaMensagem,
									ContaMensagem.class.getName());

					if (colecaoContaMensagem == null
							|| colecaoContaMensagem.isEmpty()) {
						colecaoRetorno.add(dadosQualidadeAgua[2]);
					}

				}
				// Caso contrário todos os setores da localidade serão
				// disponibilizados
				else {

					FiltroSetorComercial filtroSetorComercial = new FiltroSetorComercial(
							FiltroSetorComercial.DESCRICAO);

					filtroSetorComercial
							.adicionarCaminhoParaCarregamentoEntidade("localidade");

					filtroSetorComercial
							.adicionarParametro(new ParametroSimples(
									FiltroSetorComercial.ID_LOCALIDADE,
									localidade.getId()));

					Collection colecaoSetoresPorLocalidade = this
							.getControladorUtil().pesquisar(
									filtroSetorComercial,
									SetorComercial.class.getName());

					if (colecaoSetoresPorLocalidade != null
							&& !colecaoSetoresPorLocalidade.isEmpty()) {

						Iterator iteratorSetores = colecaoSetoresPorLocalidade
								.iterator();

						while (iteratorSetores.hasNext()) {

							SetorComercial setorComercial = (SetorComercial) iteratorSetores
									.next();

							FiltroContaMensagem filtroContaMensagem = new FiltroContaMensagem();

							filtroContaMensagem
									.adicionarParametro(new ParametroSimples(
											FiltroContaMensagem.ANO_MES_REFERECIA_FATURAMENTO,
											anoMesReferencia));

							filtroContaMensagem
									.adicionarParametro(new ParametroSimples(
											FiltroContaMensagem.SETOR_COMERCIAL_ID,
											setorComercial.getId()));

							Collection colecaoContaMensagem = this
									.getControladorUtil().pesquisar(
											filtroContaMensagem,
											ContaMensagem.class.getName());

							if (colecaoContaMensagem == null
									|| colecaoContaMensagem.isEmpty()) {
								colecaoRetorno.add(setorComercial);
							}
						}
					}
				}
			}
		}

		return colecaoRetorno;
	}

	/**
	 * [UC0726] Gerar Relatório de Imóveis com Faturas em Atraso
	 * 
	 * @author Flávio Leonardo
	 * @date 10/09/2008
	 * 
	 * @param FiltrarRelatorioImoveisFaturasAtrasoHelper
	 * 
	 * @return Collection<RelatorioImoveisSituacaoLigacaoAguaHelper>
	 * @throws ErroRepositorioException
	 */
	public Collection<RelatorioImoveisFaturasAtrasoHelper> pesquisarRelatorioImoveisFaturasAtrasoDescritasLocalizacao(
			FiltrarRelatorioImoveisFaturasAtrasoHelper filtro)
			throws ControladorException {

		Collection<RelatorioImoveisFaturasAtrasoHelper> retorno = new ArrayList<RelatorioImoveisFaturasAtrasoHelper>();

		Collection<Object[]> colecaoPesquisa = null;

		try {
			colecaoPesquisa = this.repositorioCadastro
					.pesquisarRelatorioImoveisFaturasAtrasoDescritasLocalizacao(filtro);
		} catch (ErroRepositorioException e) {
			throw new ControladorException("erro.sistema", e);
		}

		if (colecaoPesquisa != null && !colecaoPesquisa.isEmpty()) {

			Iterator itera = colecaoPesquisa.iterator();

			while (itera.hasNext()) {
				Object[] objeto = (Object[]) itera.next();

				RelatorioImoveisFaturasAtrasoHelper helper = new RelatorioImoveisFaturasAtrasoHelper();

				Integer idImovel = (Integer) objeto[12];

				Integer localidade = (Integer) objeto[6];
				Integer codigoSetorComercial = (Integer) objeto[4];
				Integer numeroQuadra = (Integer) objeto[15];

				String cpf = (String) objeto[21];
				String cnpj = (String) objeto[22];

				helper.setMatriculaImovel(Util
						.retornaMatriculaImovelFormatada(idImovel));
				helper.setGerenciaRegional((Integer) objeto[0]);
				helper.setNomeGerenciaRegional((String) objeto[1]);
				helper.setUnidadeNegocio((Integer) objeto[2]);
				helper.setNomeUnidadeNegocio((String) objeto[3]);
				helper.setLocalidade(localidade);
				helper.setDescricaoLocalidade((String) objeto[7]);
				helper.setSetorComercial(codigoSetorComercial);
				helper.setDescricaoSetorComercial((String) objeto[5]);
				helper.setNomeClienteUsuario((String) objeto[8]);
				helper.setSituacaoLigacaoAgua((String) objeto[9]);
				helper.setSituacaoLigacaoEsgoto((String) objeto[14]);
				helper.setRota((Short) objeto[10]);
				helper.setSequencialRota((Integer) objeto[11]);
				helper.setQuantidadeFaturasAtraso(0);
				// helper.setQuantidadeFaturasAtraso( ( (Integer) objeto[17] )
				// );
				helper
						.setValorFaturasAtrasoSemEncargos((BigDecimal) objeto[17]);
				helper.setReferenciaFaturasAtrasoInicial((Integer) objeto[16]);
				// helper.setReferenciaFaturasAtrasoFinal( (Integer) objeto[19]
				// );
				helper.setReferenciaFaturasAtrasoFinal(0);
				helper.setVencimento((Date) objeto[20]);

				if (cpf != null && !cpf.equals("")) {
					helper.setCpfOuCnpjClienteUsuario(Util.formatarCpf(cpf));
				}

				if (cnpj != null && !cnpj.equals("")) {
					helper.setCpfOuCnpjClienteUsuario(Util.formatarCnpj(cnpj));
				}

				Imovel imovel = new Imovel();
				imovel.setId(idImovel);

				Localidade local = new Localidade();
				local.setId(localidade);
				imovel.setLocalidade(local);

				SetorComercial setorComercial = new SetorComercial();
				setorComercial.setCodigo(codigoSetorComercial);
				imovel.setSetorComercial(setorComercial);

				Quadra quadra = new Quadra();
				quadra.setNumeroQuadra(numeroQuadra);
				imovel.setQuadra(quadra);

				imovel.setLote((Short) objeto[18]);
				imovel.setSubLote((Short) objeto[19]);

				helper.setInscricaoImovel(imovel.getInscricaoFormatada());

				String endereco = this.getControladorEndereco()
						.pesquisarEnderecoFormatado(idImovel);
				helper.setEndereco(endereco);

				retorno.add(helper);
			}
		}

		return retorno;
	}

	/**
	 * [UC0726] Gerar Relatório de Imóveis com Faturas em Atraso
	 * 
	 * @since 02/09/2009
	 * @author Marlon Patrick
	 * @throws Exception
	 */
	public Collection<RelatorioImoveisFaturasAtrasoHelper> pesquisarRelatorioImoveisFaturasAtrasoDescritasCliente(
			FiltrarRelatorioImoveisFaturasAtrasoHelper filtro)
			throws ControladorException {

		Collection<RelatorioImoveisFaturasAtrasoHelper> retorno = new ArrayList<RelatorioImoveisFaturasAtrasoHelper>();

		Collection<Object[]> colecaoPesquisa = null;

		try {
			colecaoPesquisa = this.repositorioCadastro
					.pesquisarRelatorioImoveisFaturasAtrasoDescritasCliente(filtro);

			if (!Util.isVazioOrNulo(colecaoPesquisa)) {

				for (Object[] dadosRelatorio : colecaoPesquisa) {

					RelatorioImoveisFaturasAtrasoHelper helper = new RelatorioImoveisFaturasAtrasoHelper();

					helper.setIdCliente((Integer) dadosRelatorio[0]);
					helper.setNomeCliente((String) dadosRelatorio[1]);
					helper.setGerenciaRegional((Integer) dadosRelatorio[2]);
					helper.setLocalidade((Integer) dadosRelatorio[3]);
					helper.setSetorComercial((Integer) dadosRelatorio[4]);
					helper.setNumeroQuadra((Integer) dadosRelatorio[5]);
					helper.setRota((Short) dadosRelatorio[6]);
					helper.setSequencialRota((Integer) dadosRelatorio[7]);
					helper.setIdImovel((Integer) dadosRelatorio[8]);
					helper.setMatriculaImovel(Util
							.retornaMatriculaImovelFormatada(helper
									.getIdImovel()));
					helper.setSituacaoLigacaoAgua((String) dadosRelatorio[9]);
					helper
							.setSituacaoLigacaoEsgoto((String) dadosRelatorio[10]);
					helper.setIdConta((Integer) dadosRelatorio[11]);
					helper
							.setReferenciaFaturasAtrasoInicial((Integer) dadosRelatorio[12]);
					helper.setVencimento((Date) dadosRelatorio[13]);
					helper
							.setIndicadorCobrancaMultaConta((Short) dadosRelatorio[14]);
					helper
							.setValorFaturasAtrasoSemEncargos((BigDecimal) dadosRelatorio[15]);
					helper.setReferenciaFaturasAtrasoFinal(0);

					String endereco = this.getControladorEndereco()
							.pesquisarEnderecoFormatado(helper.getIdImovel());
					helper.setEndereco(endereco);

					configurarInscricaoImovelFormatada(helper);

					Cliente clienteUsuario = getControladorImovel()
							.consultarClienteUsuarioImovel(
									new Imovel(helper.getIdImovel()));
					helper.setNomeClienteUsuario(clienteUsuario.getNome());

					if (Util.verificarNaoVazio(clienteUsuario.getCnpj())) {
						helper.setCpfOuCnpjClienteUsuario(clienteUsuario
								.getCnpjFormatado());
					} else {
						helper.setCpfOuCnpjClienteUsuario(clienteUsuario
								.getCpfFormatado());
					}

					Object[] pagamentoContasMenorData = repositorioFaturamento
							.obterArrecadacaoFormaPagamentoContasMenorData(
									helper.getIdConta(), helper.getIdImovel(),
									helper.getReferenciaFaturasAtrasoInicial());

					Date dataPagamento = null;
					if (pagamentoContasMenorData != null) {
						dataPagamento = (Date) pagamentoContasMenorData[1];
					}

					BigDecimal valorMultasCobradas = repositorioFaturamento
							.pesquisarValorMultasCobradas(helper.getIdConta());

					SistemaParametro sistemaParametros = Fachada.getInstancia()
							.pesquisarParametrosDoSistema();

					CalcularAcrescimoPorImpontualidadeHelper valorHelper = getControladorCobranca()
							.calcularAcrescimoPorImpontualidade(
									helper.getReferenciaFaturasAtrasoFinal(),
									helper.getVencimento(),
									dataPagamento,
									helper.getValorFaturasAtrasoSemEncargos(),
									valorMultasCobradas,
									helper.getIndicadorCobrancaMultaConta(),
									sistemaParametros.getAnoMesArrecadacao()
											.toString(),
									helper.getIdConta(),
									ConstantesSistema.INDICADOR_ARRECADACAO_ATIVO);

					helper.setValorFaturasAtrasoComEncargos(valorHelper
							.getValorTotalAcrescimosImpontualidade().add(
									helper.getValorFaturasAtrasoSemEncargos()));

					retorno.add(helper);
				}
			}

		} catch (ErroRepositorioException e) {
			throw new ControladorException("erro.sistema", e);
		}

		return retorno;
	}

	/**
	 * [UC0xxx] Inserir Unidade de Negocio
	 * 
	 * 
	 * @author Rômulo Aurélio
	 * @date 29/09/2008
	 * 
	 * 
	 * @return Integer
	 * @throws ControladorException
	 * @throws ControladorException
	 */

	public Integer inserirUnidadeNegocio(UnidadeNegocio unidadeNegocio,
			Usuario usuarioLogado) throws ControladorException {

		Integer retorno = null;

		if (unidadeNegocio.getNome() != null
				&& unidadeNegocio.getNome().equalsIgnoreCase("")) {
			throw new ControladorException("atencao.required", null, "Nome");

		}

		if (unidadeNegocio.getNomeAbreviado() != null
				&& unidadeNegocio.getNomeAbreviado().equalsIgnoreCase("")) {
			throw new ControladorException("atencao.required", null,
					"Nome Abreviado");

		}

		if (unidadeNegocio.getGerenciaRegional() == null
				|| unidadeNegocio.getGerenciaRegional().getId().toString()
						.equalsIgnoreCase("")) {
			throw new ControladorException("atencao.required", null,
					"Gerência Regional");
		}

		FiltroUnidadeNegocio filtroUnidadeNegocio = new FiltroUnidadeNegocio();

		filtroUnidadeNegocio.adicionarParametro(new ParametroSimples(
				FiltroUnidadeNegocio.NOME, unidadeNegocio.getNome()));

		// Pesquisa se existe algum funcionario com a matricula informada

		Collection colecaoUnidadeNegocioNome = new ArrayList();

		colecaoUnidadeNegocioNome = getControladorUtil().pesquisar(
				filtroUnidadeNegocio, UnidadeNegocio.class.getName());

		if (colecaoUnidadeNegocioNome != null
				&& !colecaoUnidadeNegocioNome.isEmpty()) {
			throw new ControladorException(
					"atencao.unidade_negocio_ja_existente");

		}

		unidadeNegocio.setUltimaAlteracao(new Date());

		// ------------ REGISTRAR TRANSAÇÃO ----------------
		RegistradorOperacao registradorOperacao = new RegistradorOperacao(
				Operacao.OPERACAO_INSERIR_UNIDADE_NEGOCIO,
				new UsuarioAcaoUsuarioHelper(usuarioLogado,
						UsuarioAcao.USUARIO_ACAO_EFETUOU_OPERACAO));

		Operacao operacao = new Operacao();
		// MUDARRRRRRRRR
		operacao.setId(Operacao.OPERACAO_INSERIR_UNIDADE_NEGOCIO);

		OperacaoEfetuada operacaoEfetuada = new OperacaoEfetuada();
		operacaoEfetuada.setOperacao(operacao);

		unidadeNegocio.setOperacaoEfetuada(operacaoEfetuada);
		unidadeNegocio.adicionarUsuario(usuarioLogado,
				UsuarioAcao.USUARIO_ACAO_EFETUOU_OPERACAO);
		registradorOperacao.registrarOperacao(unidadeNegocio);
		// ------------ REGISTRAR TRANSAÇÃO ----------------

		retorno = (Integer) getControladorUtil().inserir(unidadeNegocio);

		return retorno;

	}

	/**
	 * [UC0???] Atualizar Unidade de Negocio
	 * 
	 * 
	 * @author Rômulo Aurélio
	 * @date 29/09/2008
	 * 
	 * 
	 * @throws ControladorException
	 * @throws ControladorException
	 */

	public void atualizarUnidadeNegocio(UnidadeNegocio unidadeNegocio,
			Usuario usuarioLogado) throws ControladorException {

		if (unidadeNegocio.getNome() != null
				&& unidadeNegocio.getNome().equalsIgnoreCase("")) {
			throw new ControladorException("atencao.required", null, "Nome");

		}

		if (unidadeNegocio.getNomeAbreviado() != null
				&& unidadeNegocio.getNomeAbreviado().equalsIgnoreCase("")) {
			throw new ControladorException("atencao.required", null,
					"Nome Abreviado");

		}

		if (unidadeNegocio.getGerenciaRegional() == null
				|| unidadeNegocio.getGerenciaRegional().getId().toString()
						.equalsIgnoreCase("")) {
			throw new ControladorException("atencao.required", null,
					"Gerência Regional");
		}

		FiltroUnidadeNegocio filtroUnidadeNegocio = new FiltroUnidadeNegocio();

		filtroUnidadeNegocio.adicionarParametro(new ParametroSimples(
				FiltroUnidadeNegocio.NOME, unidadeNegocio.getNome()));

		// Pesquisa se existe algum funcionario com a matricula informada

		Collection colecaoUnidadeNegocioNome = new ArrayList();

		colecaoUnidadeNegocioNome = getControladorUtil().pesquisar(
				filtroUnidadeNegocio, UnidadeNegocio.class.getName());

		if (colecaoUnidadeNegocioNome != null
				&& !colecaoUnidadeNegocioNome.isEmpty()) {

			UnidadeNegocio unidadeNegocioBase = (UnidadeNegocio) colecaoUnidadeNegocioNome
					.iterator().next();

			if (unidadeNegocio.getId().intValue() != unidadeNegocioBase.getId()
					.intValue()) {

				throw new ControladorException(
						"atencao.unidade_negocio_ja_existente");
			}
		}

		unidadeNegocio.setUltimaAlteracao(new Date());

		// ------------ REGISTRAR TRANSAÇÃO ----------------
		RegistradorOperacao registradorOperacao = new RegistradorOperacao(
				Operacao.OPERACAO_INSERIR_UNIDADE_NEGOCIO,
				new UsuarioAcaoUsuarioHelper(usuarioLogado,
						UsuarioAcao.USUARIO_ACAO_EFETUOU_OPERACAO));

		Operacao operacao = new Operacao();
		// MUDARRRRRRRRR
		operacao.setId(Operacao.OPERACAO_INSERIR_UNIDADE_NEGOCIO);

		OperacaoEfetuada operacaoEfetuada = new OperacaoEfetuada();
		operacaoEfetuada.setOperacao(operacao);

		unidadeNegocio.setOperacaoEfetuada(operacaoEfetuada);
		unidadeNegocio.adicionarUsuario(usuarioLogado,
				UsuarioAcao.USUARIO_ACAO_EFETUOU_OPERACAO);
		registradorOperacao.registrarOperacao(unidadeNegocio);
		// ------------ REGISTRAR TRANSAÇÃO ----------------

		getControladorUtil().atualizar(unidadeNegocio);

	}
	
	/**
	 * [UC0784] Remover Empresa
	 * 
	 * 
	 * @author Maxwell Moreira
	 * @date 22/08/2012
	 * 
	 * 
	 * @return void
	 * @throws ControladorException
	 */
	
	public void removerEmpresa(Empresa empresa,
			EmpresaContratoCobranca empresaCobranca, Usuario usuarioLogado,
			List<EmpresaCobrancaFaixa> colecaoEmpresaCobrancaFaixa)
			throws ControladorException {
		
		try {
		
			RegistradorOperacao registradorOperacao = new RegistradorOperacao(
					Operacao.OPERACAO_REMOVER_EMPRESA, new UsuarioAcaoUsuarioHelper(usuarioLogado, 
							UsuarioAcao.USUARIO_ACAO_EFETUOU_OPERACAO));

			Operacao operacao = new Operacao();	    
			operacao.setId(Operacao.OPERACAO_REMOVER_EMPRESA);

	        OperacaoEfetuada operacaoEfetuada = new OperacaoEfetuada();
	        operacaoEfetuada.setOperacao(operacao);
		
		
	        if (colecaoEmpresaCobrancaFaixa != null && !colecaoEmpresaCobrancaFaixa.isEmpty()) {
			
	        	Iterator iterator = colecaoEmpresaCobrancaFaixa.iterator();
	        	EmpresaContratoCobranca  empresaContratoCobranca = new EmpresaContratoCobranca();    
	        	empresaContratoCobranca.setId(empresaCobranca.getId());
		
	        	while(iterator.hasNext()) {
			
		    	
	        		EmpresaCobrancaFaixa empresaCobrancaFaixa = (EmpresaCobrancaFaixa) iterator.next();
		    	
	        		// ------------ REGISTRAR TRANSAÇÃO ----------------
		    	
		        	empresaCobrancaFaixa.setUltimaAlteracao(new Date());
			        empresaCobrancaFaixa.setEmpresaContratoCobranca(empresaContratoCobranca);
			        registradorOperacao.registrarOperacao(empresaCobrancaFaixa);
			        getControladorTransacao().registrarTransacao(empresaCobrancaFaixa);
		
			        // ------------ REGISTRAR TRANSAÇÃO ----------------
				
			        getControladorUtil().remover(empresaCobrancaFaixa);
	        	}
	        }	
	    
	        if (empresaCobranca != null) {
	    	
	        	// ------------ REGISTRAR TRANSAÇÃO ----------------
	    
	        	empresaCobranca.setEmpresa(empresa);
	        	empresaCobranca.setUltimaAlteracao(new Date());
		        empresaCobranca.setOperacaoEfetuada(operacaoEfetuada);
		        empresaCobranca.adicionarUsuario(usuarioLogado,
		        		UsuarioAcao.USUARIO_ACAO_EFETUOU_OPERACAO);
		        registradorOperacao.registrarOperacao(empresaCobranca);
		        getControladorTransacao().registrarTransacao(empresaCobranca);
		    
		        // ------------ REGISTRAR TRANSAÇÃO ----------------
	    
		        getControladorUtil().remover(empresaCobranca);
	        }	
		
		    // ------------ REGISTRAR TRANSAÇÃO ----------------
	    
	        empresa.setUltimaAlteracao(new Date());
	        empresa.setOperacaoEfetuada(operacaoEfetuada);
	        empresa.adicionarUsuario(usuarioLogado, UsuarioAcao.USUARIO_ACAO_EFETUOU_OPERACAO);
	        registradorOperacao.registrarOperacao(empresa);
	        getControladorTransacao().registrarTransacao(empresa);
	
	        // ------------ REGISTRAR TRANSAÇÃO ----------------
		
	       getControladorUtil().remover(empresa);
			
	} catch (ControladorException e) {
		sessionContext.setRollbackOnly();
		throw new ControladorException("erro.sistema", e);	
	}
}
	/**
	 * [UC0789] Inserir Empresa
	 * 
	 * 
	 * @author Rômulo Aurélio
	 * @date 29/09/2008
	 * 
	 * 
	 * @return Integer
	 * @throws ControladorException
	 */

	public Integer inserirEmpresa(Empresa empresa,
			EmpresaContratoCobranca empresaCobranca, Usuario usuarioLogado,
			List<EmpresaCobrancaFaixa> colecaoEmpresaCobrancaFaixa)
			throws ControladorException {

		Integer retorno = null;

		if (empresa.getDescricao() != null
				&& empresa.getDescricao().equalsIgnoreCase("")) {
			throw new ControladorException("atencao.required", null,
					"Descrição");
		}

		if (empresa.getIndicadorEmpresaPrincipal() != null
				&& empresa.getIndicadorEmpresaPrincipal().toString()
						.equalsIgnoreCase("")) {
			throw new ControladorException("atencao.required", null,
					"Indicador de Empresa Principal");
		}

		if (empresa.getIndicadorEmpresaContratadaCobranca() != null
				&& empresa.getIndicadorEmpresaContratadaCobranca().toString()
						.equalsIgnoreCase("")) {
			throw new ControladorException("atencao.required", null,
					"Indicador de Empresa Cobrança");
		}
		
		
		FiltroEmpresa filtroEmpresa = new FiltroEmpresa();
		filtroEmpresa.adicionarParametro(new ParametroSimples(
		FiltroEmpresa.DESCRICAO, empresa.getDescricao()));

		// Pesquisa se existe alguma empresa com a descricao informada
		Collection colecaoEmpresaDescricao = new ArrayList();

	    colecaoEmpresaDescricao = getControladorUtil().pesquisar(filtroEmpresa,
		Empresa.class.getName());

		if (colecaoEmpresaDescricao != null
		&& !colecaoEmpresaDescricao.isEmpty()) {
		throw new ControladorException("atencao.empresa_ja_cadastrada", null,
		    			 empresa.getDescricao());
		}
		    
		try {

		    // ------------ REGISTRAR TRANSAÇÃO ----------------
		    
		    // Ultima Alteracao
		    empresa.setUltimaAlteracao(new Date());
		    
		    RegistradorOperacao registradorOperacao = new RegistradorOperacao(
		    		Operacao.OPERACAO_INSERIR_EMPRESA, new UsuarioAcaoUsuarioHelper(usuarioLogado, 
		    				UsuarioAcao.USUARIO_ACAO_EFETUOU_OPERACAO));

		    Operacao operacao = new Operacao();
		    operacao.setId(Operacao.OPERACAO_INSERIR_EMPRESA);
		    
		    OperacaoEfetuada operacaoEfetuada = new OperacaoEfetuada();
		    operacaoEfetuada.setOperacao(operacao);

		    empresa.setOperacaoEfetuada(operacaoEfetuada);
		    empresa.adicionarUsuario(usuarioLogado, UsuarioAcao.USUARIO_ACAO_EFETUOU_OPERACAO);
		    
		    registradorOperacao.registrarOperacao(empresa);
		    getControladorTransacao().registrarTransacao(empresa);
		
		    // ------------ REGISTRAR TRANSAÇÃO ----------------
		    
		    retorno = (Integer) getControladorUtil().inserir(empresa);
		    Integer idEmpresaCobranca = null;
		
		    // ------------ REGISTRAR TRANSAÇÃO ----------------
		    
		    if (empresaCobranca != null) {
		    	
		    	empresaCobranca.setEmpresa(empresa);
		    	empresaCobranca.setUltimaAlteracao(new Date());
			    empresaCobranca.setOperacaoEfetuada(operacaoEfetuada);
			    empresaCobranca.adicionarUsuario(usuarioLogado,
			    		UsuarioAcao.USUARIO_ACAO_EFETUOU_OPERACAO);
			    registradorOperacao.registrarOperacao(empresaCobranca);
			    getControladorTransacao().registrarTransacao(empresaCobranca);
			    
			    // ------------ REGISTRAR TRANSAÇÃO ----------------
			
				idEmpresaCobranca = (Integer) getControladorUtil().inserir(empresaCobranca);

				if (colecaoEmpresaCobrancaFaixa != null && !colecaoEmpresaCobrancaFaixa.isEmpty()) {
					
					Iterator iterator = colecaoEmpresaCobrancaFaixa.iterator();
					EmpresaContratoCobranca  empresaContratoCobranca = new EmpresaContratoCobranca();
				    empresaContratoCobranca.setId(idEmpresaCobranca);
				
				    while(iterator.hasNext()) {
					
				    	EmpresaCobrancaFaixa empresaCobrancaFaixa = (EmpresaCobrancaFaixa) iterator.next();
				    	
				    	// ------------ REGISTRAR TRANSAÇÃO ----------------
				    	
				    	empresaCobrancaFaixa.setUltimaAlteracao(new Date());
					    empresaCobrancaFaixa.setEmpresaContratoCobranca(empresaContratoCobranca);
					    registradorOperacao.registrarOperacao(empresaCobrancaFaixa);
					    getControladorTransacao().registrarTransacao(empresaCobrancaFaixa);
				
					    // ------------ REGISTRAR TRANSAÇÃO ----------------
						
					    getControladorUtil().inserir(empresaCobrancaFaixa);
				    }
				}
		    }
		} catch (ControladorException e) {
			sessionContext.setRollbackOnly();
			throw new ControladorException("erro.sistema", e);
		}
		return retorno;
	}

	/**
	 * [UC0784] Manter Empresa
	 * 
	 * 
	 * @author Rômulo Aurélio
	 * @date 29/09/2008
	 * 
	 * 
	 * @throws ControladorException
	 */

	public void atualizarEmpresa(Empresa empresa,
			EmpresaContratoCobranca empresaCobrancaTela, Usuario usuarioLogado,
			List<EmpresaCobrancaFaixa> colecaoEmpresaCobrancaFaixa,
			List<EmpresaCobrancaFaixa> colecaoEmpresaCobrancaFaixaRemover)
			throws ControladorException {

		if (empresa.getDescricao() != null 
				&& empresa.getDescricao().equalsIgnoreCase("")) {
			throw new ControladorException("atencao.required", null,
					"Descrição");
		}

		if (empresa.getIndicadorEmpresaPrincipal() != null
				&& empresa.getIndicadorEmpresaPrincipal().toString().equalsIgnoreCase("")) {
			throw new ControladorException("atencao.required", null,
					"Indicador de Empresa Principal");
		}

		if (empresa.getIndicadorEmpresaContratadaCobranca() != null
				&& empresa.getIndicadorEmpresaContratadaCobranca().toString().equalsIgnoreCase("")) {
			throw new ControladorException("atencao.required", null,
					"Indicador de Empresa Cobrança");
		}
		
		FiltroEmpresa filtroEmpresa = new FiltroEmpresa();
		filtroEmpresa.adicionarParametro(new ParametroSimples(FiltroEmpresa.DESCRICAO, empresa.getDescricao()));

	    //Pesquisa se existe alguma empresa com a descricao informada
	    Collection colecaoEmpresaDescricao = new ArrayList();
	    colecaoEmpresaDescricao = getControladorUtil().pesquisar(filtroEmpresa, Empresa.class.getName());

	    if (colecaoEmpresaDescricao != null
	    		&& !colecaoEmpresaDescricao.isEmpty()) {
	    	Empresa empresaBase = (Empresa) colecaoEmpresaDescricao.iterator().next();
	    	if (empresa.getId().intValue() != empresaBase.getId().intValue()) {
	    		throw new ControladorException("atencao.empresa_ja_cadastrada",
					null, empresa.getDescricao());
	    	}
	    }
	    
	    EmpresaContratoCobranca empresaCobrancaBase = null;

		    // ------------ REGISTRAR TRANSAÇÃO ----------------
		 
		    // Ultima Alteracao
		    empresa.setUltimaAlteracao(new Date());
		    
		    RegistradorOperacao registradorOperacao = new RegistradorOperacao(
		    		Operacao.OPERACAO_ATUALIZAR_EMPRESA,
		    		new UsuarioAcaoUsuarioHelper(usuarioLogado,
		    				UsuarioAcao.USUARIO_ACAO_EFETUOU_OPERACAO));

		    Operacao operacao = new Operacao();
		    operacao.setId(Operacao.OPERACAO_ATUALIZAR_EMPRESA);
		    
		    OperacaoEfetuada operacaoEfetuada = new OperacaoEfetuada();
		    operacaoEfetuada.setOperacao(operacao);
		    
		    empresa.setOperacaoEfetuada(operacaoEfetuada);
		    empresa.adicionarUsuario(usuarioLogado,
		    		UsuarioAcao.USUARIO_ACAO_EFETUOU_OPERACAO);
		    
		    registradorOperacao.registrarOperacao(empresa);
		    getControladorTransacao().registrarTransacao(empresa);
		    
		    // ------------ REGISTRAR TRANSAÇÃO ----------------
		    
		    getControladorUtil().atualizar(empresa);
		    
		   /*
		    * Remover registros de EmpresaCobrancaFaixa
		    */
		    
		    if (colecaoEmpresaCobrancaFaixaRemover != null && !colecaoEmpresaCobrancaFaixaRemover.isEmpty()) {
		    	Iterator iterator = colecaoEmpresaCobrancaFaixaRemover.iterator();
		    	while(iterator.hasNext()) {
		    		EmpresaCobrancaFaixa empresaCobrancaFaixa = (EmpresaCobrancaFaixa) iterator.next();
		    		getControladorUtil().remover(empresaCobrancaFaixa);
		    	}
		    }
		    
		    FiltroEmpresaContratoCobranca filtroEmpresaCobranca = new FiltroEmpresaContratoCobranca();
		    filtroEmpresaCobranca.adicionarParametro(new ParametroSimples(
		    		FiltroEmpresaContratoCobranca.EMPRESA_ID, empresa.getId()));

		    Collection colecaoEmpesaCobrancaBase = getControladorUtil().pesquisar(
		    		filtroEmpresaCobranca, EmpresaContratoCobranca.class.getName());

		    if (colecaoEmpesaCobrancaBase != null
		    		&& !colecaoEmpesaCobrancaBase.isEmpty()) {
		    	empresaCobrancaBase = (EmpresaContratoCobranca) colecaoEmpesaCobrancaBase
		    			.iterator().next();
		    }

		    // Caso o usuario tenha atualizado os dados de cobranca na tela,
		    // atualiza a tabela EmpresaCobranca
		
		    if (empresaCobrancaTela != null && empresaCobrancaBase != null) {

			   // ------------ REGISTRAR TRANSAÇÃO ----------------

		    	empresaCobrancaTela.setId(empresaCobrancaBase.getId());
		    	empresaCobrancaTela.setUltimaAlteracao(new Date());
		    	empresaCobrancaTela.adicionarUsuario(usuarioLogado,
					   UsuarioAcao.USUARIO_ACAO_EFETUOU_OPERACAO);	
			   
		    	registradorOperacao.registrarOperacao(empresaCobrancaTela);
		    	getControladorTransacao().registrarTransacao(empresaCobrancaTela);
			   
			   // ------------ REGISTRAR TRANSAÇÃO ----------------
			   
			   getControladorUtil().atualizar(empresaCobrancaTela);
			   
			   if (colecaoEmpresaCobrancaFaixa != null && !colecaoEmpresaCobrancaFaixa.isEmpty()) {

				   Iterator iterator = colecaoEmpresaCobrancaFaixa.iterator();
				   EmpresaContratoCobranca empresaContratoCobranca = new EmpresaContratoCobranca();
				   empresaContratoCobranca.setId(empresaCobrancaBase.getId());

				   while(iterator.hasNext()) {
					   EmpresaCobrancaFaixa empresaCobrancaFaixa = (EmpresaCobrancaFaixa) iterator.next();
					   if (empresaCobrancaFaixa.getId() == null
							   && empresaCobrancaFaixa.getUltimaAlteracao() == null) {
						   empresaCobrancaFaixa.setEmpresaContratoCobranca(empresaContratoCobranca);
						   empresaCobrancaFaixa.setUltimaAlteracao(new Date());
						   this.getControladorUtil().inserir(empresaCobrancaFaixa);
					   }
				   }
			   }
		    } 
		    
		    /*
			 * Caso o usuario tenha informado os dados de cobranca na tela, e na
			 * base nao tenha dados da tabela EmpresaCobranca para a empresa a
			 * ser atualizada, insere os dados de cobranca em EmpresaCobranca
			 */
		
		    else if (empresaCobrancaTela != null && empresaCobrancaBase == null) {
		    	
		    	// ------------ REGISTRAR TRANSAÇÃO ----------------

		    	Integer idEmpresaCobranca = null;
		    	empresaCobrancaTela.setUltimaAlteracao(new Date());
		    	empresaCobrancaTela.adicionarUsuario(usuarioLogado, UsuarioAcao.USUARIO_ACAO_EFETUOU_OPERACAO);
		    	
		    	registradorOperacao.registrarOperacao(empresaCobrancaTela);
		    	getControladorTransacao().registrarTransacao(empresaCobrancaTela);
		    	
		    	// ------------ REGISTRAR TRANSAÇÃO ----------------
			
		    	idEmpresaCobranca = (Integer) getControladorUtil().inserir(empresaCobrancaTela);
		    	
		    	if (colecaoEmpresaCobrancaFaixa != null && !colecaoEmpresaCobrancaFaixa.isEmpty()) {
		    		Iterator iterator = colecaoEmpresaCobrancaFaixa.iterator();
		    		EmpresaContratoCobranca empresaContratoCobranca = new EmpresaContratoCobranca();
		    		empresaContratoCobranca.setId(idEmpresaCobranca);
		    		
		    		while(iterator.hasNext()) {
					
		    			EmpresaCobrancaFaixa empresaCobrancaFaixa = (EmpresaCobrancaFaixa) iterator.next();
		    			if (empresaCobrancaFaixa.getId() == null
		    					&& empresaCobrancaFaixa.getUltimaAlteracao() == null) {
						empresaCobrancaFaixa.setEmpresaContratoCobranca(empresaContratoCobranca);
						empresaCobrancaFaixa.setUltimaAlteracao(new Date());	
						getControladorUtil().inserir(empresaCobrancaFaixa);
		    			}
		    		}
		    	}
		    } 
		    
		    /*
			 * Caso o usuario nao tenha informado os dados de cobranca na tela,
			 * e na base os dados tenha dados da tabela EmpresaCobranca, remove
			 * os dados de cobranca em EmpresaCobranca
			 */

		    else if (empresaCobrancaTela == null && empresaCobrancaBase != null) {
		    	
		    	if (colecaoEmpresaCobrancaFaixa == null || colecaoEmpresaCobrancaFaixa.isEmpty()) {
		    		FiltroEmpresaCobrancaFaixa filtroEmpresaCobrancaFaixaRemover = new FiltroEmpresaCobrancaFaixa();
		    		filtroEmpresaCobrancaFaixaRemover.adicionarParametro(new ParametroSimples(
		    				FiltroEmpresaCobrancaFaixa.EMPRESA_CONTRATO_COBRANCA_ID, empresaCobrancaBase.getId()));

				    Collection colecaoEmpesaCobrancaFaixaRemover = getControladorUtil().pesquisar(
				    		filtroEmpresaCobrancaFaixaRemover, EmpresaCobrancaFaixa.class.getName());
		    		
		    		Iterator iterator = colecaoEmpesaCobrancaFaixaRemover.iterator();
		    		while(iterator.hasNext()) {
		    			EmpresaCobrancaFaixa empresaCobrancaFaixa = (EmpresaCobrancaFaixa) iterator.next();
		    			if (empresaCobrancaFaixa.getId() != null
		    					&& empresaCobrancaFaixa.getUltimaAlteracao() != null) {
		    				getControladorUtil().remover(empresaCobrancaFaixa);
		    			}
		    		}
		    	}
		    
		    	// ------------ REGISTRAR TRANSAÇÃO ----------------
		    	
		    	empresaCobrancaBase.adicionarUsuario(usuarioLogado, UsuarioAcao.USUARIO_ACAO_EFETUOU_OPERACAO);
		    	
		    	registradorOperacao.registrarOperacao(empresaCobrancaBase);
		    	getControladorTransacao().registrarTransacao(empresaCobrancaBase);
		    	
		    	// ------------ REGISTRAR TRANSAÇÃO ----------------
		  	
		    	getControladorUtil().remover(empresaCobrancaBase);
		    	
		    }
	}
	
	
	

	/**
	 * [UC0831] Gerar Tabelas para Atualização Cadastral via celular
	 * 
	 * @author Vinicius Medeiros
	 * @date 25/08/2008
	 */
	public ImovelAtualizacaoCadastral obterImovelGeracaoTabelasTemporarias(
			Integer idImovel, Integer indicadorResetorizacao) throws ControladorException {

		ImovelAtualizacaoCadastral imovelAtualizacaoCadastral = null;

		try {
			
			Object[] element = repositorioCadastro
					.obterImovelGeracaoTabelasTemporarias(idImovel);

			// Imóvel
			imovelAtualizacaoCadastral = new ImovelAtualizacaoCadastral();
			if (element != null) {
				
				// Id Imóvel
				Imovel imovel = new Imovel();
				imovel.setId((Integer) element[0]);
				imovelAtualizacaoCadastral.setImovel(imovel.getId());

				if(indicadorResetorizacao == null || indicadorResetorizacao.equals(2)){
					// Localidade
					if (element[1] != null) {
						imovelAtualizacaoCadastral
								.setIdLocalidade((Integer) element[1]);
					}
	
					// Setor Comercial
					if (element[2] != null) {
						imovelAtualizacaoCadastral
								.setCodigoSetorComercial((Integer) element[2]);
					}
	
					// Quadra
					if (element[3] != null) {
						imovelAtualizacaoCadastral
								.setNumeroQuadra((Integer) element[3]);
					}
	
					// Lote
					if (element[4] != null) {
						imovelAtualizacaoCadastral.setLote(Short
								.parseShort(element[4].toString()));
					}
	
					// SubLote
					if (element[5] != null) {
						imovelAtualizacaoCadastral.setSubLote(Short
								.parseShort(element[5].toString()));
					}
					
					//Indicador Resetorização
					imovelAtualizacaoCadastral.setIndicadorResetorizado(ConstantesSistema.NAO);
				
				}else{
					Object[] dados = repositorioCadastro
							.obterDadosImovelInsricaoResetorizada(idImovel);
					
					if(dados != null){
						//Localidade
						if(dados[0] != null){
							imovelAtualizacaoCadastral
									.setIdLocalidade((Integer) dados[0]);
						}
						
						//Setor Comercial
						if(dados[1] != null){
							imovelAtualizacaoCadastral
									.setCodigoSetorComercial((Integer) dados[1]);
						}
						
						//Quadra
						if(dados[2] != null){
							imovelAtualizacaoCadastral
									.setNumeroQuadra((Integer) dados[2]);
						}
						
						//Lote
						if(dados[3] != null){
							imovelAtualizacaoCadastral
									.setLote(Short.parseShort(dados[3].toString()));
						}
						
						//SubLote
						if(dados[4] != null){
							imovelAtualizacaoCadastral
									.setSubLote(Short.parseShort(dados[4].toString()));
						}
					}
					
					//Indicador Resetorização
					imovelAtualizacaoCadastral.setIndicadorResetorizado(ConstantesSistema.SIM);
				}

				// Sequência de Rota
				if (element[6] != null) {
					imovelAtualizacaoCadastral
							.setNumeroSequencialRota((Integer) element[6]);
				}

				// Número de moradores
				if (element[7] != null) {
					imovelAtualizacaoCadastral
							.setNumeroMorador((Short) element[7]);
				}

				// Código Logradouro
				if (element[8] != null) {
					imovelAtualizacaoCadastral.setIdLogradouro(   ((Integer) element[8]).longValue()  );
				} else if (element[9] != null) {
					imovelAtualizacaoCadastral.setIdLogradouro(((Integer) element[9]).longValue());
				}

				// Logradouro
				Collection colecaoEndereco = getControladorEndereco().pesquisarLogradouro(idImovel);
				
				if (colecaoEndereco != null && !colecaoEndereco.isEmpty()) {

					Iterator enderecoIterator = colecaoEndereco.iterator();

					Object[] arrayEndereco = (Object[]) enderecoIterator.next();

					String nome = (String) arrayEndereco[0];
					imovelAtualizacaoCadastral.setDescricaoLogradouro(nome);

					if (arrayEndereco[3] != null) {
						Integer idTipo = (Integer) arrayEndereco[3];
						imovelAtualizacaoCadastral.setIdLogradouroTipo(idTipo);
						String tipo = (String) arrayEndereco[1];
						imovelAtualizacaoCadastral.setDsLogradouroTipo(tipo);
					}

					if (arrayEndereco[4] != null) {
						Integer idTitulo = (Integer) arrayEndereco[4];
						imovelAtualizacaoCadastral
								.setIdLogradouroTitulo(idTitulo);
						String titulo = (String) arrayEndereco[2];
						imovelAtualizacaoCadastral
								.setDsLogradouroTitulo(titulo);
					}

					if (arrayEndereco[5] != null) {
						Integer idMunicipio = (Integer) arrayEndereco[5];
						imovelAtualizacaoCadastral.setIdMunicipio(idMunicipio);
						String nomeMunicipio = (String) arrayEndereco[6];
						imovelAtualizacaoCadastral
								.setNomeMunicipio(nomeMunicipio);
					}

					if (arrayEndereco[7] != null) {
						Integer idUnidadeFederacao = (Integer) arrayEndereco[7];
						imovelAtualizacaoCadastral
								.setIdUinidadeFederacao(idUnidadeFederacao);
						String dsUnidadeFederacao = (String) arrayEndereco[8];
						imovelAtualizacaoCadastral
								.setDsUFSiglaMunicipio(dsUnidadeFederacao);
					}
				}

				// Cep
				if (element[10] != null) {
					imovelAtualizacaoCadastral
							.setCodigoCep((Integer) element[10]);
				}

				// Bairro
				if (element[11] != null) {
					imovelAtualizacaoCadastral
							.setIdBairro((Integer) element[11]);
				}

				// Descrição do bairro
				if (element[12] != null) {
					imovelAtualizacaoCadastral
							.setNomeBairro((String) element[12]);
				}

				// Código de referência
				if (element[13] != null) {
					imovelAtualizacaoCadastral
							.setIdEnderecoReferencia((Integer) element[13]);
				}

				// Número do imóvel
				imovelAtualizacaoCadastral
						.setNumeroImovel((String)element[14]);
			
				// Complemento do Imóvel
				String trunk = ((String) element[15]);
				
				if ( trunk != null && trunk.length() > 25 ){
					trunk = trunk.substring( 0, 24 );
				}
				
				imovelAtualizacaoCadastral
						.setComplementoEndereco( trunk );

				// Área Construida
				if (element[16] != null) {
					imovelAtualizacaoCadastral
							.setAreaConstruida((BigDecimal) element[16]);
				}

				// Situação de água
				if (element[17] != null) {
					imovelAtualizacaoCadastral
							.setIdLigacaoAguaSituacao((Integer) element[17]);
				}

				// Volume do resevatório inferior
				if (element[18] != null) {
					imovelAtualizacaoCadastral
							.setVolumeReservatorioInferior((BigDecimal) element[18]);
				}

				// Volume do resevatório superior
				if (element[19] != null) {
					imovelAtualizacaoCadastral
							.setVolumeReservatorioSuperior((BigDecimal) element[19]);
				}

				// Volume Piscina
				if (element[20] != null) {
					imovelAtualizacaoCadastral
							.setVolumePiscina((BigDecimal) element[20]);
				}

				// Indicador de Jardim
				if (element[21] != null) {
					imovelAtualizacaoCadastral
							.setIndicadorJardim((Short) element[21]);
				}

				// Pavimento calçada
				if (element[22] != null) {
					imovelAtualizacaoCadastral
							.setIdPavimentoCalcada((Integer) element[22]);
				}

				// Pavimento rua
				if (element[23] != null) {
					imovelAtualizacaoCadastral
							.setIdPavimentoRua((Integer) element[23]);
				}

				// Fonte de abastecimento
				if (element[24] != null) {
					imovelAtualizacaoCadastral
							.setIdFonteAbastecimento((Integer) element[24]);
				}

				// Poço
				if (element[25] != null) {
					imovelAtualizacaoCadastral
							.setIdPocoTipo((Integer) element[25]);
				}

				// Número de pontos
				if (element[26] != null) {
					imovelAtualizacaoCadastral
							.setNumeroPontosUtilizacao((Short) element[26]);
				}

				// Situação da ligação de esgoto
				if (element[27] != null) {
					imovelAtualizacaoCadastral
							.setIdLigacaoEsgotoSituacao((Integer) element[27]);
				}

				// Perfil do Imóvel
				if (element[28] != null) {
					imovelAtualizacaoCadastral
							.setIdImovelPerfil((Integer) element[28]);
				}

				// Tipo despejo
				if (element[29] != null) {
					imovelAtualizacaoCadastral
							.setIdDespejo((Integer) element[29]);
				}

				// Coordenadas UTMX
				if (element[30] != null) {
					imovelAtualizacaoCadastral
							.setCoordenadaX((BigDecimal) element[30]);
				}

				// Coordenadas UTMY
				if (element[31] != null) {
					imovelAtualizacaoCadastral
							.setCoordenadaY((BigDecimal) element[31]);
				}

				// Imóvel Principal
				if (element[32] != null) {
					imovelAtualizacaoCadastral
							.setCodigoImovelPrincipal((Integer) element[32]);
				}

				// Número de IPTU
				if (element[33] != null) {
					imovelAtualizacaoCadastral
							.setNumeroIptu((BigDecimal) element[33]);
				}

				// Contrato de energia
				if (element[34] != null) {
					imovelAtualizacaoCadastral
							.setNumeroContratoEnergia((Long) element[34]);
				}
				
				imovelAtualizacaoCadastral.setUltimaAlteracao(new Date());
				
				imovelAtualizacaoCadastral.setIndicadorExclusao(ConstantesSistema.NAO);
				imovelAtualizacaoCadastral.setIndicadorPendente(ConstantesSistema.NAO);
				imovelAtualizacaoCadastral.setIndicadorDadosRetorno(ConstantesSistema.NAO);
				imovelAtualizacaoCadastral.setIndicadorAlertaTarifaSocial(ConstantesSistema.NAO);
				
				imovelAtualizacaoCadastral.setIndicadorBairroNovo(ConstantesSistema.NAO);
				imovelAtualizacaoCadastral.setIndicadorLogradouroNovo(ConstantesSistema.NAO);
				imovelAtualizacaoCadastral.setIndicadorImovelNovo(ConstantesSistema.NAO);
				
				// Area Construida Faixa
				if (element[35] != null) {
					imovelAtualizacaoCadastral.setIdAreaConstruidaFaixa((Integer) element[35]);
				}

				// poco id
				if (element[36] != null) {
					Integer idPoco = (Integer) element[36];
					if ( !idPoco.equals(Integer.valueOf(0) ) ) {
						imovelAtualizacaoCadastral.setIndicadorPoco(ConstantesSistema.SIM);
					} else{
						imovelAtualizacaoCadastral.setIndicadorPoco(ConstantesSistema.NAO);	
					}
				} else {
					imovelAtualizacaoCadastral.setIndicadorPoco(ConstantesSistema.NAO);
				}
				
				//Código Logradouro cep
				if (element[37] != null) {
					imovelAtualizacaoCadastral
							.setIdLogradouroBairro((Integer) element[37]);
				}
				
				// Código Logradouro bairro
				if (element[38] != null) {
					imovelAtualizacaoCadastral
							.setIdLogradouroCep((Integer) element[38]);
				}
			}
		} catch (ErroRepositorioException e) {
			e.printStackTrace();
			throw new ControladorException("erro.sistema", e);
		}

		return imovelAtualizacaoCadastral;

	}

	/**
	 * [UC0831] Gerar Tabelas para Atualização Cadastral via celular
	 * 
	 * @author Vinicius Medeiros
	 * @date 25/08/2008
	 */
	public void obterImovelClienteProprietarioUsuario(Integer idSetor,
			Integer idFuncionalidadeIniciada,
			ImovelGeracaoTabelasTemporariasCadastroHelper helper)
			throws ControladorException {

		int idUnidadeIniciada = 0;

		try {

			if (helper.getColecaoMatriculas() != null && 
				!helper.getColecaoMatriculas().isEmpty()) {
				
				idUnidadeIniciada = 
					getControladorBatch().iniciarUnidadeProcessamentoBatch(
						idFuncionalidadeIniciada,
						UnidadeProcessamento.FUNCIONALIDADE, 0);
			} else {
				idUnidadeIniciada = 
					getControladorBatch().iniciarUnidadeProcessamentoBatch(
						idFuncionalidadeIniciada,
						UnidadeProcessamento.SETOR_COMERCIAL, (idSetor));
			}

			Collection colecaoIdsImovel = null;

			if (helper.getColecaoMatriculas() != null && 
				!helper.getColecaoMatriculas().isEmpty()) {
				
				colecaoIdsImovel = helper.getColecaoMatriculas();
			} else {
				colecaoIdsImovel = 
					repositorioCadastro.obterIdsImovelGeracaoTabelasTemporarias(idSetor,helper);
				
				if (helper.getImovelSituacao() != null && new Integer(helper.getImovelSituacao()) == 2) {
					
					colecaoIdsImovel = 
						repositorioCadastro.pesquisarImovelDebitoAtualizacaoCadastral(colecaoIdsImovel);
				}
			}

			this.gerarTabelasTemporarias(colecaoIdsImovel,helper);

			getControladorBatch().encerrarUnidadeProcessamentoBatch(null,idUnidadeIniciada, false);

		} catch (Exception ex) {
			ex.printStackTrace();
			getControladorBatch().encerrarUnidadeProcessamentoBatch(ex,
					idUnidadeIniciada, true);
			throw new EJBException(ex);
		}
	}
	
	/**
	 * [UC0831] Gerar Tabelas para Atualização Cadastral via celular
	 * 
	 * @author Rafael Pinto
	 * @date 21/12/2011
	 */
	public void obterImovelClienteProprietarioUsuario(ImovelGeracaoTabelasTemporariasCadastroHelper helper)
			throws ControladorException {

		try {
			//Monta a tabela que contem o filtro usado para geracao das tabelas temporarias
			ParametroTabelaAtualizacaoCadastro parametro = new ParametroTabelaAtualizacaoCadastro();
			parametro.montarParametroTabelaAtualizacaoCadastro(helper);
			
			Integer idParametro = (Integer) getControladorUtil().inserir(parametro);
			
			parametro.setId(idParametro);
			
			helper.setParametro(parametro);
			
			this.validarImovelGerarTabelasTemporarias(new Integer(helper.getMatricula()), idParametro);
			
			this.gerarTabelasTemporarias(helper.getColecaoMatriculas(),helper);

			getControladorIntegracao().inserirDadosAdmin(idParametro);
		} catch (Exception ex) {
			sessionContext.setRollbackOnly();
			throw new ControladorException("erro.sistema", ex);
		}
	}
	
	/**
	 * [UC0831] Gerar Tabelas para Atualização Cadastral via celular
	 * 
	 * @author Rafael Pinto
	 * @date 27/12/2011
	 */
	
	public void validarImovelGerarTabelasTemporarias(Integer idImovel, Integer idParametro)
		throws ControladorException {
		
		Imovel imovel =
			this.getControladorImovel().pesquisarImovel(idImovel);
		
		if(imovel == null){
			throw new ControladorException("atencao.imovel.inexistente");
		}else{
			
			if(imovel.getIndicadorExclusao().shortValue() == ConstantesSistema.SIM.shortValue()){
				throw new ControladorException("atencao.imovel.excluido");
			}
			
			if (imovelJaExisteImovelAtualizacaoCadastral(idImovel, idParametro)) {
				throw new ControladorException("atencao.imovel.pendente_atualizacao_cadastral");
			}
			
		}
		
	}
	
	/**
	 * [UC0831] Gerar Tabelas para Atualização Cadastral via celular
	 * 
	 * @author Rafael Pinto
	 * @date 21/12/2011
	 */
	private void gerarTabelasTemporarias(Collection colecaoIdsImovel,
		ImovelGeracaoTabelasTemporariasCadastroHelper helper) throws ControladorException {
		
		if(!Util.isVazioOrNulo(colecaoIdsImovel)){
			
			ParametroTabelaAtualizacaoCadastro parametro = helper.getParametro();
			
			ClienteAtualizacaoCadastral clienteAtualizacaoCadastralProprietario = null;
			ClienteAtualizacaoCadastral clienteAtualizacaoCadastralUsuario = null;

			Iterator iteratorImovel = colecaoIdsImovel.iterator();
			while (iteratorImovel.hasNext()) {
				Integer idImovel = (Integer) iteratorImovel.next();

				ImovelAtualizacaoCadastral imovelAtualizacaoCadastral = 
						this.obterImovelGeracaoTabelasTemporarias(idImovel,null);

				// Imovel Atualização Cadastral
				if (imovelAtualizacaoCadastral.getImovel() != null) {
					
					if ( parametro != null ) {
						imovelAtualizacaoCadastral.setParametroTabelaAtualizacaoCadastro(parametro);
					}

					if (!imovelJaExisteImovelAtualizacaoCadastral(imovelAtualizacaoCadastral.getImovel(), 
							imovelAtualizacaoCadastral.getParametroTabelaAtualizacaoCadastro().getId())) {
						
						imovelAtualizacaoCadastral
								.setIdSituacaoAtualizacaoCadastral(SituacaoAtualizacaoCadastral.DISPONIVEL);
						
						if (helper.getColecaoMatriculas() == null || helper.getColecaoMatriculas().isEmpty()) {
							imovelAtualizacaoCadastral.setIdEmpresa(new Integer(helper.getFirma()));
						}
						imovelAtualizacaoCadastral.setIndicadorAtualizado(ConstantesSistema.NAO);
						imovelAtualizacaoCadastral.setParametroTabelaAtualizacaoCadastro(parametro);
						
						Integer idImovelAtualizacaoCadastral = 
								(Integer) getControladorUtil().inserir(imovelAtualizacaoCadastral);
						
						imovelAtualizacaoCadastral.setId(idImovelAtualizacaoCadastral);
						
						// Imovel Subcategoria
						Collection imovelSubcategorias = obterImovelSubcategoriaAtualizacaoCadastral(idImovel);
						
						Iterator imovelSubcategoriaIter = imovelSubcategorias.iterator();
						
						while (imovelSubcategoriaIter.hasNext()) {
							ImovelSubcategoriaAtualizacaoCadastral imovSubAtual = 
									(ImovelSubcategoriaAtualizacaoCadastral) imovelSubcategoriaIter.next();
							
							imovSubAtual.setUltimaAlteracao(new Date());
							imovSubAtual.setImovelAtualizacaoCadastral(imovelAtualizacaoCadastral);
							
							getControladorUtil().inserir(imovSubAtual);
						}

						// Cliente Usuario
						clienteAtualizacaoCadastralUsuario = 
							getControladorCliente().obterClientetuAlizacaoCadastral(idImovel, 
								ClienteRelacaoTipo.USUARIO);

						if (clienteAtualizacaoCadastralUsuario != null) {

							clienteAtualizacaoCadastralUsuario.setParametroTabelaAtualizacaoCadastro(parametro);
							clienteAtualizacaoCadastralUsuario.setImovelAtualizacaoCadastral(imovelAtualizacaoCadastral);
							clienteAtualizacaoCadastralUsuario.setUltimaAlteracao(new Date());
							
							Integer idClienteAtualizacaoCadastral = 
								(Integer) getControladorUtil().inserir(clienteAtualizacaoCadastralUsuario);

							// Cliente Fone Usuário
							Collection clienteFonesAtualizacaoCadastral = 
								getControladorCliente().obterDadosClienteFone(clienteAtualizacaoCadastralUsuario.getIdCliente());
							
							if (clienteFonesAtualizacaoCadastral != null && !clienteFonesAtualizacaoCadastral.isEmpty()) {
								
								Iterator clienteFonesAtualizacaoCadastralIter = clienteFonesAtualizacaoCadastral.iterator();
								
								while (clienteFonesAtualizacaoCadastralIter.hasNext()) {
									
									ClienteFoneAtualizacaoCadastral clienteFoneAtualizacaoCadastral = 
										(ClienteFoneAtualizacaoCadastral) clienteFonesAtualizacaoCadastralIter.next();
									
									ClienteAtualizacaoCadastral clienteAtualizacaoCadastral = new ClienteAtualizacaoCadastral();
									clienteAtualizacaoCadastral.setId(idClienteAtualizacaoCadastral);
									clienteFoneAtualizacaoCadastral.setClienteAtualizacaoCadastral(clienteAtualizacaoCadastral);
									clienteFoneAtualizacaoCadastral.setUltimaAlteracao(new Date());
									getControladorUtil().inserir(clienteFoneAtualizacaoCadastral);
								}
							}
						}
						
						// Cliente Proprietario
						clienteAtualizacaoCadastralProprietario = 
							getControladorCliente().obterClientetuAlizacaoCadastral(
								idImovel, 
								ClienteRelacaoTipo.PROPRIETARIO);

						if (clienteAtualizacaoCadastralProprietario != null) {

							clienteAtualizacaoCadastralProprietario.setParametroTabelaAtualizacaoCadastro(parametro);
							clienteAtualizacaoCadastralProprietario.setImovelAtualizacaoCadastral(imovelAtualizacaoCadastral);
							clienteAtualizacaoCadastralProprietario.setUltimaAlteracao(new Date());
							
							Integer idClienteAtualizacaoCadastral = 
								(Integer) getControladorUtil().inserir(clienteAtualizacaoCadastralProprietario);

							// Cliente Fone Proprietario
							Collection clienteFonesAtualizacaoCadastral = 
								getControladorCliente().obterDadosClienteFone(
									clienteAtualizacaoCadastralProprietario.getIdCliente());
							
							if (clienteFonesAtualizacaoCadastral != null && !clienteFonesAtualizacaoCadastral.isEmpty()) {
								
								Iterator clienteFonesAtualizacaoCadastralIter = clienteFonesAtualizacaoCadastral.iterator();
								
								while (clienteFonesAtualizacaoCadastralIter.hasNext()) {
									
									ClienteFoneAtualizacaoCadastral clienteFoneAtualizacaoCadastral = 
										(ClienteFoneAtualizacaoCadastral) clienteFonesAtualizacaoCadastralIter.next();
									
									ClienteAtualizacaoCadastral clienteAtualizacaoCadastral = new ClienteAtualizacaoCadastral();
									clienteAtualizacaoCadastral.setId(idClienteAtualizacaoCadastral);
									clienteFoneAtualizacaoCadastral.setClienteAtualizacaoCadastral(clienteAtualizacaoCadastral);
									clienteFoneAtualizacaoCadastral.setUltimaAlteracao(new Date());
									
									getControladorUtil().inserir(clienteFoneAtualizacaoCadastral);
								}
							}
						}

						
						try {
							Collection colecaoDadosHidrometro = repositorioCadastro.obterDadosHidrometroInstalacaoHistorico(idImovel);
							
							if (colecaoDadosHidrometro != null && !colecaoDadosHidrometro.isEmpty() )  {
								
								Iterator iteratorDadosHidrometro = colecaoDadosHidrometro.iterator();
								while (iteratorDadosHidrometro.hasNext()) {

									Object[] element = (Object[]) iteratorDadosHidrometro.next();
									
									HidrometroInstalacaoHistoricoAtualizacaoCadastral hidrometroAtualizacaoCadastral = new HidrometroInstalacaoHistoricoAtualizacaoCadastral();
									
									//numero do hidrometro
									if ( element[0] != null  ) {
										hidrometroAtualizacaoCadastral.setNumeroHidrometro((String) element[0]);
									}
									
									//Data de instalacao hidrometro
									if ( element[1] != null  ) {
										hidrometroAtualizacaoCadastral.setDataInstalacaoHidrometro((Date) element[1]);
									}
									
									//Medicao Tipo
									if ( element[2] != null  ) {
										MedicaoTipo medicaoTipo = new MedicaoTipo();
										medicaoTipo.setId((Integer) element[2]);
										
										hidrometroAtualizacaoCadastral.setMedicaoTipo(medicaoTipo);
									}
									
									//Hidrometro Local instalacao
									if ( element[3] != null  ) {
										HidrometroLocalInstalacao hidrometroLocalInstalacao = new HidrometroLocalInstalacao();
										hidrometroLocalInstalacao.setId((Integer) element[3]);
										
										hidrometroAtualizacaoCadastral.setHidrometroLocalInstalacao(hidrometroLocalInstalacao);
									}
									
									//Hidrometro Protecao
									if ( element[4] != null  ) {
										HidrometroProtecao hidrometroProtecao = new HidrometroProtecao();
										hidrometroProtecao.setId((Integer) element[4]);
										
										hidrometroAtualizacaoCadastral.setHidrometroProtecao(hidrometroProtecao);
									}
									
									//Leitura hidrometro
									if ( element[5] != null  ) {
										hidrometroAtualizacaoCadastral.setNumeroInstalacaoHidrometro((Integer) element[5]);
									}
									//Indicador Cavalete
									if ( element[6] != null  ) {
										hidrometroAtualizacaoCadastral.setIndicadorCavalete((Short) element[6]);
									}
									
									//Imovel atualizacao cadastral
									hidrometroAtualizacaoCadastral.setImovelAtualizacaoCadastral(imovelAtualizacaoCadastral);
									
									//Ultima Alteracao
									hidrometroAtualizacaoCadastral.setUltimaAlteracao(new Date());
									
									getControladorUtil().inserir(hidrometroAtualizacaoCadastral);
								}
							}
							
						} catch (ErroRepositorioException e) {
							e.printStackTrace();
						}
						
						// Atualizar Situacao Atualizacao Cadastral
						getControladorImovel().atualizarImovelSituacaoAtualizacaoCadastral(
							idImovel, 
							SituacaoAtualizacaoCadastral.BLOQUEADO);

						Integer idEmpresa = null;
						if (helper.getFirma() != null && !helper.getFirma().equals(""+ ConstantesSistema.NUMERO_NAO_INFORMADO)) {
							idEmpresa = new Integer(helper.getFirma());
						}

						getControladorImovel().atualizarImovelAtualizacaoCadastralSituacaoAtualizacaoCadastral(
							idImovel,
							SituacaoAtualizacaoCadastral.DISPONIVEL,
							idEmpresa,
							parametro.getId());
					}
				}
			}
		}
		
	}

	/**
	 * [UC0831] Gerar Tabelas para Atualização Cadastral via celular
	 * 
	 * @author Vinicius Medeiros
	 * @date 18/08/2008
	 */
	public Collection obterImovelSubcategoriaAtualizacaoCadastral(
			Integer idImovel) throws ControladorException {

		try {

			return this.repositorioCadastro
					.obterImovelSubcategoriaAtualizacaoCadastral(idImovel);

		} catch (ErroRepositorioException ex) {
			ex.printStackTrace();
			sessionContext.setRollbackOnly();
			throw new ControladorException("erro.sistema", ex);
		}

	}

	// Método para verificar se já existe o Cliente no banco
	public Boolean clienteJaExisteClienteAtualizacaoCadastral(Integer idCliente)
			throws ControladorException {

		Boolean retorno = false;
		Integer idClienteAtualizacaoCadastral = getControladorCliente()
				.verificaExistenciaClienteAtualizacaoCadastral(idCliente);

		if (idClienteAtualizacaoCadastral != null) {
			retorno = true;
		}

		return retorno;
	}

	// Método para verificar se já existe o Imóvel no banco
	public Boolean imovelJaExisteImovelAtualizacaoCadastral(Integer idImovel, Integer idParametro)
			throws ControladorException {

		Boolean retorno = false;
		Integer idImovelAtualizacaoCadastral = getControladorImovel()
				.verificaExistenciaImovelAtualizacaoCadastral(idImovel, idParametro);

		if (idImovelAtualizacaoCadastral != null) {
			retorno = true;
		}

		return retorno;
	}

	/**
	 * Gerar Arquivo Texto da Atualização Cadastral para Dispositivo Móvel
	 * 
	 * @param helper
	 * 
	 * @author Ana Maria
	 * @date 17/09/2008
	 * @exception ControladorException
	 * @throws ErroRepositorioException
	 */

	public void gerarArquivoTextoAtualizacaoCadastralDispositivoMovel(
			Integer idFuncionalidadeIniciada,
			GerarArquivoTextoAtualizacaoCadastralHelper helper)
			throws ControladorException {

		int idUnidadeIniciada = 0;

		idUnidadeIniciada = getControladorBatch()
				.iniciarUnidadeProcessamentoBatch(idFuncionalidadeIniciada,
						UnidadeProcessamento.SETOR_COMERCIAL, 0);

		ArquivoTextoAtualizacaoCadastral arquivoTextoAtualizacaoCadastral = new ArquivoTextoAtualizacaoCadastral();

		// Parâmetros
		if (helper.getIdLocalidade() != null
				&& !helper.getIdLocalidade().equals("")) {
			Localidade localidade = new Localidade();
			localidade.setId(helper.getIdLocalidade());
			arquivoTextoAtualizacaoCadastral.setLocalidade(localidade);
			if (helper.getSetorComercialCD() != null
					&& !helper.getSetorComercialCD().equals("")) {
				arquivoTextoAtualizacaoCadastral.setCodigoSetorComercial(helper
						.getSetorComercialCD());
				if (helper.getNumeroQuadraInicial() != null
						&& !helper.getNumeroQuadraInicial().equals("")) {
					arquivoTextoAtualizacaoCadastral
							.setNumeroQuadraInicial(helper
									.getNumeroQuadraInicial());
					arquivoTextoAtualizacaoCadastral
							.setNumeroQuadraFinal(helper.getNumeroQuadraFinal());
				} else {
					arquivoTextoAtualizacaoCadastral.setCodigoRota(helper
							.getRotaCD());
				}
			}
		}

		// Descrição do Arquivo
		arquivoTextoAtualizacaoCadastral.setDescricaoArquivo(helper
				.getDescricao());

		// Leiturista
		if (helper.getIdLeiturista() != null
				&& !helper.getIdLeiturista().equals("")) {
			Leiturista leiturista = new Leiturista();
			leiturista.setId(helper.getIdLeiturista());
			arquivoTextoAtualizacaoCadastral.setLeiturista(leiturista);
		}

		// Situação do Arquivo
		SituacaoTransmissaoLeitura situacaoTransmissaoLeitura = new SituacaoTransmissaoLeitura();
		situacaoTransmissaoLeitura.setId(helper.getSituacao());
		arquivoTextoAtualizacaoCadastral
				.setSituacaoTransmissaoLeitura(situacaoTransmissaoLeitura);

		// nenhum campo do filtro foi informado
		Collection<Leiturista> colecaoLeiturista = new ArrayList();
		if (helper.getColecaoImovel() == null
				|| helper.getColecaoImovel().isEmpty()) {

			FiltroLeiturista filtroLeiturista = new FiltroLeiturista();
			filtroLeiturista.adicionarParametro(new ParametroSimples(
					FiltroLeiturista.ID, helper.getIdLeiturista()));
			filtroLeiturista
					.adicionarCaminhoParaCarregamentoEntidade("empresa");

			colecaoLeiturista = getControladorUtil().pesquisar(
					filtroLeiturista, Leiturista.class.getName());

			Leiturista leiturista = (Leiturista) Util
					.retonarObjetoDeColecao(colecaoLeiturista);
			Integer idEmpresaLeiturista = leiturista.getEmpresa().getId();

			try {
				Collection<Integer> idsImoveis = repositorioCadastro
						.pesquisarIdsImoveisAtualizacaoCadastral(idEmpresaLeiturista);

				if (idsImoveis == null || idsImoveis.isEmpty()) {
					// Nenhum Imovel cadastrado
					throw new ControladorException(
							"atencao.pesquisa.nenhumresultado");
				}

				helper.setColecaoImovel(idsImoveis);

			} catch (ErroRepositorioException e) {
			}

		}

		// Quatidade Imóvel
		arquivoTextoAtualizacaoCadastral.setQuantidadeImovel(helper
				.getQtdImovel());

		// Arquivo texto
		StringBuilder arquivoTexto = new StringBuilder();

		byte[] arquivoTextoByte = null;

		try {

			arquivoTextoByte = IoUtil.transformarObjetoParaBytes(arquivoTexto);
			arquivoTextoAtualizacaoCadastral.setArquivoTexto(arquivoTextoByte);

			// Data última alteração
			arquivoTextoAtualizacaoCadastral.setUltimaAlteracao(new Date());

			Integer idArquivoTexto = (Integer) getControladorUtil().inserir(
					arquivoTextoAtualizacaoCadastral);
			arquivoTexto = this.gerarArquivoTxt(helper.getColecaoImovel(),
					idArquivoTexto);

			// -------------------------------------------------------------------------
			ZipOutputStream zos = null;
			BufferedWriter out = null;
			File leituraTipo = new File(helper.getDescricao() + ".txt");
			File compactado = new File(helper.getDescricao() + ".zip"); // nomeZip
			zos = new ZipOutputStream(new FileOutputStream(compactado));
			out = new BufferedWriter(new OutputStreamWriter(
					new FileOutputStream(leituraTipo.getAbsolutePath())));
			out.write(arquivoTexto.toString());
			out.flush();
			out.close();
			ZipUtil.adicionarArquivo(zos, leituraTipo);
			zos.close();
			// -------------------------------------------------------------------------

			arquivoTextoByte = IoUtil.transformarObjetoParaBytes(arquivoTexto);
			arquivoTextoAtualizacaoCadastral.setArquivoTexto(arquivoTextoByte);

			getControladorUtil().atualizar(arquivoTextoAtualizacaoCadastral);

			getControladorBatch().encerrarUnidadeProcessamentoBatch(null,
					idUnidadeIniciada, false);

		} catch (Exception ex) {
			ex.printStackTrace();
			getControladorBatch().encerrarUnidadeProcessamentoBatch(ex,
					idUnidadeIniciada, true);
			throw new EJBException(ex);
		}
	}

	/**
	 * Gerar Arquivo Texto para Atualização Cadastral
	 * 
	 * @param colecaoImovelFiltrado
	 * 
	 * @author Ana Maria
	 * @date 17/09/2008
	 * @exception ControladorException
	 */
	private StringBuilder gerarArquivoTxt(Collection colecaoImovelFiltrado,
			Integer idArquivoTexto) throws ControladorException {

		try {

			StringBuilder arquivoTexto = new StringBuilder();
			Iterator imovelFiltradoIterator = colecaoImovelFiltrado.iterator();
			// Header
			arquivoTexto.append(this
					.gerarArquivoTextoRegistroTipoHeader(idArquivoTexto));
			Integer qtdRegistro = 1;

			while (imovelFiltradoIterator.hasNext()) {

				Integer idImovelAtualizacaoCadastral = (Integer) imovelFiltradoIterator.next();

				// REGISTRO_TIPO_01(Dados do imóvel)
				arquivoTexto.append(this
						.gerarArquivoTextoRegistroTipo01(idImovelAtualizacaoCadastral));
				qtdRegistro = qtdRegistro + 1;
				
				ImovelAtualizacaoCadastral imov = null;

				imov = getControladorImovel().pesquisarImovelAtualizacaoCadastral(
					idImovelAtualizacaoCadastral);
				
				Integer idImovel = imov.getImovel();

				Collection colecaoClienteImovel = repositorioClienteImovel.pesquisarClienteImovelAtualizacaoCadastral(idImovel);

				Iterator colecaoClienteImovelIterator = colecaoClienteImovel.iterator();

				while (colecaoClienteImovelIterator.hasNext()) {
					ClienteAtualizacaoCadastral cliente = (ClienteAtualizacaoCadastral) colecaoClienteImovelIterator.next();

					// REGISTRO_TIPO_02(Dados do cliente)
					arquivoTexto.append(this.gerarArquivoTextoRegistroTipo02(cliente, idImovel));
					qtdRegistro = qtdRegistro + 1;

					Collection colecaoClienteFone = getControladorCliente()
							.pesquisarClienteFoneAtualizacaoCadastral(
									cliente.getIdCliente(), idImovel, null,
									cliente.getIdClienteRelacaoTipo(),null);
					if (colecaoClienteFone != null
							&& !colecaoClienteFone.isEmpty()) {
						// REGISTRO_TIPO_03(Dados do Telefone)
						arquivoTexto.append(this
								.gerarArquivoTextoRegistroTipo03(
										colecaoClienteFone, idImovel,cliente.getIdCliente()));
						qtdRegistro = qtdRegistro + colecaoClienteFone.size();
					}
				}

				Collection colecaoImovelSubcategoria = getControladorImovel()
						.pesquisarImovelSubcategoriaAtualizacaoCadastral(
								idImovel, null,null);
				if (colecaoImovelSubcategoria != null
						&& !colecaoImovelSubcategoria.isEmpty()) {
					// REGISTRO_TIPO_04(Dados Economias e subcategoria)
					arquivoTexto.append(this.gerarArquivoTextoRegistroTipo04(
							colecaoImovelSubcategoria, idImovel));
					qtdRegistro = qtdRegistro
							+ colecaoImovelSubcategoria.size();
				}

				// Seta o imóvel com situação "em campo"
				getControladorImovel()
						.atualizarImovelAtualizacaoCadastralSituacaoAtualizacaoCadastral(
								idImovel,
								SituacaoAtualizacaoCadastral.EM_CAMPO, null,null);
			}

			// Trailer
			arquivoTexto.append(this
					.gerarArquivoTextoRegistroTipoTrailer(qtdRegistro));

			return arquivoTexto;

		} catch (ErroRepositorioException e) {
			throw new ControladorException("erro.sistema", e);
		}
	}

	public void carregarImovelAtualizacaoCadastral(BufferedReader buffer)
			throws ControladorException {

		Integer matricula = null;
		ParserUtil parserCliente = null;

		try {

			String line = null;

			Integer idArquivoTexto = null;
			RegistradorOperacao registradorOperacao = null;
			Imovel imovel = new Imovel();
			Integer idCliente = null;
			Integer idClienteRelacaoTipo = null;
			Cliente cliente = new Cliente();
			ArquivoTextoAtualizacaoCadastral arquivoTexto = null;
			Interceptador interceptador = Interceptador.getInstancia();
			ImovelAtualizacaoCadastral imovelAtualizacaoCadastralBase = null;
			boolean indicadorExcluido = false;
			boolean indicadorRepetido = false;
			Integer idClieteUsuario = null;

			int qtdLinhas = 1;
			
			registradorOperacao = new RegistradorOperacao(
					Operacao.OPERACAO_CARREGAR_DADOS_ATUALIZACAO_CADASTRAL,
					matricula, matricula, new UsuarioAcaoUsuarioHelper(
							Usuario.USUARIO_BATCH,
							UsuarioAcao.USUARIO_ACAO_EFETUOU_OPERACAO));

			while ((line = buffer.readLine()) != null) {
				ParserUtil parser = new ParserUtil(line);

				String primeiraLetra = parser.obterDadoParserTrim(1);

				if (qtdLinhas++ % 100 == 0) {
					System.out.println(" >>> Gerando diferencas do arquivo: "
							+ qtdLinhas);
				}

				if ("0".equals(primeiraLetra)) {

					String header = line.substring(1);

					ParserUtil parserHeader = new ParserUtil(header);

					parserHeader.obterDadoParser(1);

					parserHeader.obterDadoParser(8);

					idArquivoTexto = Integer.parseInt(parserHeader
							.obterDadoParser(9));

					arquivoTexto = repositorioCadastro
							.pesquisarArquivoTextoAtualizacaoCadastro(
									idArquivoTexto.toString(),
									SituacaoTransmissaoLeitura.EM_CAMPO);

					if (arquivoTexto == null || arquivoTexto.equals("")) {
						throw new ControladorException(
								"atencao.arquivo_txt_ja_realizado");
					}

				} else if ("1".equals(primeiraLetra)) {

					// Pegar a partir do 2º caractere, pois o primeiro é o tipo
					// de registro.
					String imovelLinha = line.substring(1);

					ParserUtil parserImovel = new ParserUtil(imovelLinha);

					String tipoAlteracao = parserImovel.obterDadoParser(1)
							.trim();

					matricula = Integer.parseInt(parserImovel
							.obterDadoParser(9));
					
					
					idClieteUsuario = null;
					indicadorRepetido = false;

					ImovelAtualizacaoCadastral imovelAtualizacaoCadastralTxt = null;
					AlteracaoTipo alteracaoTipo = new AlteracaoTipo();

					if (tipoAlteracao == null || tipoAlteracao.trim().equals("")) {
						continue;
					} else if (tipoAlteracao.equals("E")) {
						imovelAtualizacaoCadastralTxt = new ImovelAtualizacaoCadastral();
						imovelAtualizacaoCadastralBase = getControladorImovel()
								.pesquisarImovelAtualizacaoCadastral(matricula);
						alteracaoTipo.setId(AlteracaoTipo.EXCLUSAO);
						indicadorExcluido = true;
					} else {
						imovelAtualizacaoCadastralTxt = new ImovelAtualizacaoCadastral();

						if (tipoAlteracao.equals("A")) {
							imovelAtualizacaoCadastralBase = getControladorImovel()
									.pesquisarImovelAtualizacaoCadastral(matricula);
							alteracaoTipo.setId(AlteracaoTipo.ALTERACAO);
							indicadorExcluido = false;
						} else if (tipoAlteracao.equals("I")) {
							imovelAtualizacaoCadastralBase = new ImovelAtualizacaoCadastral();
							alteracaoTipo.setId(AlteracaoTipo.INCLUSAO);
							indicadorExcluido = false;
						}

						imovel.setId(matricula);

						// IMOVEL
						Imovel imov = new Imovel();
						imov.setId(matricula);
						
						imovelAtualizacaoCadastralTxt.setImovel(imov.getId());
						
						// LOCALIDADE
						imovelAtualizacaoCadastralTxt.setIdLocalidade(Integer
								.parseInt(parserImovel.obterDadoParser(3)
										.trim()));
						// SETOR COMERCIAL
						imovelAtualizacaoCadastralTxt
								.setCodigoSetorComercial(Integer
										.parseInt(parserImovel.obterDadoParser(
												3).trim()));
						// QUADRA
						imovelAtualizacaoCadastralTxt.setNumeroQuadra(Integer
								.parseInt(parserImovel.obterDadoParser(3)
										.trim()));
						// LOTE
						imovelAtualizacaoCadastralTxt.setLote(Short
								.parseShort(parserImovel.obterDadoParser(4)
										.trim()));
						// SUBLOTE
						imovelAtualizacaoCadastralTxt.setSubLote(Short
								.parseShort(parserImovel.obterDadoParser(3)
										.trim()));
						// SEQUÊNCIA DA ROTA
						String sequenciaRota = parserImovel.obterDadoParser(4);
						if (!sequenciaRota.equals("0000")) {
							imovelAtualizacaoCadastralTxt
									.setNumeroSequencialRota(Integer
											.parseInt(sequenciaRota));
						}
						// NÚMERO MORADOR
						String numeroMorador = parserImovel.obterDadoParser(4);
						if (!numeroMorador.equals("0000")) {
							imovelAtualizacaoCadastralTxt
									.setNumeroMorador(Short
											.parseShort(numeroMorador));
						} else if (imovelAtualizacaoCadastralBase
								.getNumeroMorador() != null) {
							imovelAtualizacaoCadastralTxt
									.setNumeroMorador(new Short("0"));
						}
						// CÓDIGO DO LOGRADOURO
						imovelAtualizacaoCadastralTxt.setIdLogradouro(Long.valueOf(parserImovel.obterDadoParser(9)));
						// TIPO LOGRADOURO
						imovelAtualizacaoCadastralTxt
								.setDsLogradouroTipo(parserImovel
										.obterDadoParser(20).trim());
						// TÍTULO LOGRADOURO
						imovelAtualizacaoCadastralTxt
								.setDsLogradouroTitulo(parserImovel
										.obterDadoParser(25).trim());
						// LOGRADOURO
						imovelAtualizacaoCadastralTxt
								.setDescricaoLogradouro(parserImovel
										.obterDadoParser(40).trim());
						// CEP
						imovelAtualizacaoCadastralTxt.setCodigoCep(Integer
								.parseInt(parserImovel.obterDadoParser(8)
										.trim()));
						// CÓDIGO DO BAIRRO
						imovelAtualizacaoCadastralTxt.setIdBairro(Integer
								.parseInt(parserImovel.obterDadoParser(4)
										.trim()));
						// NOME BAIRRO
						imovelAtualizacaoCadastralTxt
								.setNomeBairro(parserImovel.obterDadoParser(30)
										.trim());
						// CÓDIGO DE REFERÊNCIA
						String enderecoReferencia = parserImovel
								.obterDadoParser(2).trim();
						if (!enderecoReferencia.equals("00")) {
							imovelAtualizacaoCadastralTxt
									.setIdEnderecoReferencia(Integer
											.parseInt(enderecoReferencia));
						}
						// NÚMERO DO IMOVEL
						imovelAtualizacaoCadastralTxt
								.setNumeroImovel(parserImovel
										.obterDadoParser(5).trim());
						// COMPLEMENTO IMÓVEL
						imovelAtualizacaoCadastralTxt
								.setComplementoEndereco(parserImovel
										.obterDadoParser(25).trim());
						// ÁREA CONSTRUÍDA
						String areaConstruida = parserImovel.obterDadoParser(8)
								.trim();
						if (!areaConstruida.equals("00000000")) {
							imovelAtualizacaoCadastralTxt
									.setAreaConstruida(Util
											.formatarMoedaRealparaBigDecimalComUltimos2CamposDecimais(areaConstruida));
						}
						// SITUAÇÃO DA LIGAÇÂO DE ÁGUA
						imovelAtualizacaoCadastralTxt
								.setIdLigacaoAguaSituacao(Integer
										.parseInt(parserImovel
												.obterDadoParser(2)));
						// VOLUME RESERVATÓRIO INFERIOR
						String volumeReservatorioInferior = parserImovel
								.obterDadoParser(5).trim();
						if (!volumeReservatorioInferior.equals("00000")) {
							imovelAtualizacaoCadastralTxt
									.setVolumeReservatorioInferior(Util
											.formatarMoedaRealparaBigDecimalComUltimos2CamposDecimais(volumeReservatorioInferior));
						}
						// VOLUME RESERVATÓRIO SUPERIOR
						String volumeReservatorioSuperior = parserImovel
								.obterDadoParser(5).trim();
						if (!volumeReservatorioSuperior.equals("00000")) {
							imovelAtualizacaoCadastralTxt
									.setVolumeReservatorioSuperior(Util
											.formatarMoedaRealparaBigDecimalComUltimos2CamposDecimais(volumeReservatorioSuperior));
						}
						// VOLUME PISCINA
						String volumePiscina = parserImovel.obterDadoParser(5)
								.trim();
						if (!volumePiscina.equals("00000")) {
							imovelAtualizacaoCadastralTxt
									.setVolumePiscina(Util
											.formatarMoedaRealparaBigDecimalComUltimos2CamposDecimais(volumePiscina));
						}
						// INDICADOR JARDIM
						String indicadoprJardim = parserImovel.obterDadoParser(
								1).trim();
						if (!indicadoprJardim.equals("0")) {
							imovelAtualizacaoCadastralTxt
									.setIndicadorJardim(Short
											.parseShort(indicadoprJardim));
						}
						// CÓDIGO PAVIMENTO CALÇADA
						imovelAtualizacaoCadastralTxt
								.setIdPavimentoCalcada(Integer
										.parseInt(parserImovel.obterDadoParser(
												2).trim()));
						// CÓDIGO PAVIMENTO RUA
						imovelAtualizacaoCadastralTxt.setIdPavimentoRua(Integer
								.parseInt(parserImovel.obterDadoParser(2)
										.trim()));
						// CÓDIGO FONTE DE ABASTECIMENTO
						String fonteAbastecimanto = parserImovel
								.obterDadoParser(2).trim();
						if (!fonteAbastecimanto.equals("00")) {
							imovelAtualizacaoCadastralTxt
									.setIdFonteAbastecimento(Integer
											.parseInt(fonteAbastecimanto));
						} else if (imovelAtualizacaoCadastralBase
								.getIdFonteAbastecimento() != null) {
							imovelAtualizacaoCadastralTxt
									.setIdFonteAbastecimento(0);
						}
						// CÓDIGO POÇO
						String poco = parserImovel.obterDadoParser(2).trim();

						if (!poco.equals("00")) {
							imovelAtualizacaoCadastralTxt.setIdPocoTipo(Integer
									.parseInt(poco));
						} else if (imovelAtualizacaoCadastralBase
								.getIdPocoTipo() != null) {
							imovelAtualizacaoCadastralTxt.setIdPocoTipo(0);
						}
						// NÚMERO DE POMTOS
						String numeroPontos = parserImovel.obterDadoParser(4)
								.trim();
						if (!numeroPontos.equals("0000")) {
							imovelAtualizacaoCadastralTxt
									.setNumeroPontosUtilizacao(Short
											.parseShort(numeroPontos));
						} else if (imovelAtualizacaoCadastralBase
								.getNumeroPontosUtilizacao() != null) {
							imovelAtualizacaoCadastralTxt
									.setNumeroPontosUtilizacao(new Short("0"));
						}
						// SITUAÇÃO DA LIGAÇÃO DE ESGOTO
						imovelAtualizacaoCadastralTxt
								.setIdLigacaoEsgotoSituacao(Integer
										.parseInt(parserImovel.obterDadoParser(
												2).trim()));
						// CÓDIGO PERFIL IMÓVEL
						imovelAtualizacaoCadastralTxt.setIdImovelPerfil(Integer
								.parseInt(parserImovel.obterDadoParser(2)
										.trim()));
						// CÓDIGO TIPO DESPEJO
						imovelAtualizacaoCadastralTxt.setIdDespejo(Integer
								.parseInt(parserImovel.obterDadoParser(1)
										.trim()));
						// COORDENADAS UTMX
						String coordenadaX = parserImovel.obterDadoParser(5)
								.trim();
						if (!coordenadaX.equals("00000")) {
							imovelAtualizacaoCadastralTxt
									.setCoordenadaX(Util
											.formatarMoedaRealparaBigDecimalComUltimos2CamposDecimais(coordenadaX));
						}
						// COORDENADAS UTMY
						String coordenadaY = parserImovel.obterDadoParser(5)
								.trim();
						if (!coordenadaY.equals("00000")) {
							imovelAtualizacaoCadastralTxt
									.setCoordenadaY(Util
											.formatarMoedaRealparaBigDecimalComUltimos2CamposDecimais(coordenadaY));
						}
						// IMÓVEL PRINCIPAL
						String imovelPrincipal = parserImovel
								.obterDadoParser(9).trim();
						if (!imovelPrincipal.equals("000000000")) {
							imovelAtualizacaoCadastralTxt
									.setCodigoImovelPrincipal(Integer
											.parseInt(imovelPrincipal));
						}
						// LEITURA INICIAL DO HIDRÔMETRO
						String numeroLeituraInstalacaoHidrometro = parserImovel
								.obterDadoParser(6).trim();
						if (!numeroLeituraInstalacaoHidrometro.equals("000000")) {
							imovelAtualizacaoCadastralTxt
									.setNumeroLeituraInstalacaoHidrometro(Integer
											.parseInt(numeroLeituraInstalacaoHidrometro));
						} else if (imovelAtualizacaoCadastralBase
								.getNumeroLeituraInstalacaoHidrometro() != null) {
							imovelAtualizacaoCadastralTxt
									.setNumeroLeituraInstalacaoHidrometro(0);
						}
						// CAPACIDADE DO HIDRÔMETRO
						String capacidadeHidrometro = parserImovel
								.obterDadoParser(2).trim();
						if (!capacidadeHidrometro.equals("00")) {
							imovelAtualizacaoCadastralTxt
									.setIdCapacidadeHidrometro(Integer
											.parseInt(capacidadeHidrometro));
						}
						// MARCA DO HIDRÔMETRO
						String marcaHidrometro = parserImovel
								.obterDadoParser(2).trim();
						if (!marcaHidrometro.equals("00")) {
							imovelAtualizacaoCadastralTxt
									.setIdMarcaHidrometro(Integer
											.parseInt(marcaHidrometro));
						}
						// LOCAL DO HIDRÔMETRO
						String localInstalacaoHidrometro = parserImovel
								.obterDadoParser(2).trim();
						if (!localInstalacaoHidrometro.equals("00")) {
							imovelAtualizacaoCadastralTxt
									.setIdLocalInstalacaoHidrometro(Integer
											.parseInt(localInstalacaoHidrometro));
						}
						// PROTEÇÃO DO HIDRÔMETRO
						String protecaoHidrometro = parserImovel
								.obterDadoParser(2).trim();

						if (!protecaoHidrometro.equals("00")
								&& !(protecaoHidrometro.equals(""))) {
							imovelAtualizacaoCadastralTxt
									.setIdProtecaoHidrometro(Integer
											.parseInt(protecaoHidrometro));
						} else if (imovelAtualizacaoCadastralBase
								.getIdProtecaoHidrometro() != null) {
							imovelAtualizacaoCadastralTxt
									.setIdProtecaoHidrometro(0);
						}
						// NÚMERO DO HIDRÔMETRO
						imovelAtualizacaoCadastralTxt
								.setNumeroHidrometro(parserImovel
										.obterDadoParser(10).trim());
						// CAVALETE
						String cavalete = parserImovel.obterDadoParser(1)
								.trim();
						if (!cavalete.equals("0")) {
							imovelAtualizacaoCadastralTxt
									.setIndicadorCavalete(Short
											.parseShort(cavalete));
						}
						// NÚMERO DE IPTU
						String numeroIptu = parserImovel.obterDadoParser(20)
								.trim();
						if (!numeroIptu.equals("00000000000000000000")) {
							imovelAtualizacaoCadastralTxt
									.setNumeroIptu(Util
											.formatarMoedaRealparaBigDecimalComUltimos2CamposDecimais(numeroIptu));
						}
						// CONTRATO COMPANHIA DE ENERGIA
						String numeroContratoEnergia = parserImovel
								.obterDadoParser(10).trim();
						if (!numeroContratoEnergia.equals("0000000000")) {
							imovelAtualizacaoCadastralTxt
									.setNumeroContratoEnergia(Long
											.parseLong(numeroContratoEnergia));
						}
						// NÚMERO MEDIDOR DE ENERGIA
						imovelAtualizacaoCadastralTxt
								.setNumeroMedidirEnergia(parserImovel
										.obterDadoParser(10).trim());

						// OCORRÊNCIA CADASTRO
						String ocorrenciaCadastro = parserImovel
								.obterDadoParser(4).trim();
						if (!ocorrenciaCadastro.equals("0000")) {
							imovelAtualizacaoCadastralTxt
									.setIdCadastroOcorrencia(Integer
											.parseInt(ocorrenciaCadastro));
						}
						// ANORMALIDADE
						parserImovel.obterDadoParser(6).trim();
						// OUTRAS INFORMAÇÕES
						imovelAtualizacaoCadastralTxt
								.setDescricaoOutrasInformacoes(parserImovel
										.obterDadoParser(100).trim());
						// ENTREVISTADO
						imovelAtualizacaoCadastralTxt
								.setNomeEntrevistado(parserImovel
										.obterDadoParser(50).trim());
						// DATA/HORA ENTREVISTA
						parserImovel.obterDadoParser(14).trim();
						// CÓDIGO TIPO LOGRADOURO
						String codigoTipoLogradouro = parserImovel
								.obterDadoParser(3).trim();

						if (!codigoTipoLogradouro.equals("000")
								&& !(codigoTipoLogradouro.equals(""))) {
							imovelAtualizacaoCadastralTxt
									.setIdLogradouroTipo(Integer
											.parseInt(codigoTipoLogradouro));
						}

						// CÓDIGO TÍTULO LOGRADOURO
						String codigoTituloLogradouro = parserImovel
								.obterDadoParser(3).trim();

						if (!codigoTituloLogradouro.equals("000")
								&& !(codigoTituloLogradouro.equals(""))) {
							imovelAtualizacaoCadastralTxt
									.setIdLogradouroTitulo(Integer
											.parseInt(codigoTituloLogradouro));
						}
					}

			

					// percorrer a coleção de coluansAlteradas e gerar objetos
					// de tabela_coluna_atualizacao_cadastral
					Collection<TabelaLinhaColunaAlteracao> colunasAlteradas = interceptador
							.compareObjetoTransacao(
									imovelAtualizacaoCadastralTxt,
									imovelAtualizacaoCadastralBase, null);

					Collection<TabelaColunaAtualizacaoCadastral> colecaoTabelaColunaAtualizacaoCadastral = new ArrayList<TabelaColunaAtualizacaoCadastral>();

					if ((colunasAlteradas != null && !colunasAlteradas.isEmpty()) || alteracaoTipo.getId().equals(AlteracaoTipo.EXCLUSAO)) {
						registradorOperacao
								.registrarOperacao(imovelAtualizacaoCadastralTxt);
						// inserir um objeto de tabela_atualizacao_cadastral
						TabelaAtualizacaoCadastral tabelaAtualizacaoCadastral = new TabelaAtualizacaoCadastral();
						tabelaAtualizacaoCadastral
								.setAlteracaoTipo(alteracaoTipo);
						tabelaAtualizacaoCadastral
								.setIdRegistroAlterado(matricula);
						tabelaAtualizacaoCadastral
								.setIndicadorPrincipal(new Short("1"));
						tabelaAtualizacaoCadastral.setLeiturista(arquivoTexto
								.getLeiturista());
						tabelaAtualizacaoCadastral.setCodigoImovel(matricula);
						tabelaAtualizacaoCadastral
								.setOperacaoEfetuada(imovelAtualizacaoCadastralTxt
										.getOperacaoEfetuada());
						Tabela tabela = new Tabela();
						tabela.setId(Tabela.IMOVEL_ATUALIZACAO_CADASTRAL);
						tabelaAtualizacaoCadastral
								.setArquivoTextoAtualizacaoCadastral(arquivoTexto);
						tabelaAtualizacaoCadastral.setTabela(tabela);
						tabelaAtualizacaoCadastral
								.setIndicadorAutorizado(ConstantesSistema.INDICADOR_REGISTRO_ACEITO);
						
						if (colunasAlteradas != null && !colunasAlteradas.isEmpty()){

							Iterator colunasAlteradasIter = colunasAlteradas
									.iterator();
							while (colunasAlteradasIter.hasNext()) {
								TabelaLinhaColunaAlteracao tabelaLinhaColunaAlteracao = (TabelaLinhaColunaAlteracao) colunasAlteradasIter
										.next();
								TabelaColunaAtualizacaoCadastral tabelaColunaAtualizacaoCadastral = new TabelaColunaAtualizacaoCadastral();
								if(tabelaLinhaColunaAlteracao.getConteudoColunaAnterior() != null &&
										!tabelaLinhaColunaAlteracao.getConteudoColunaAnterior().equals("")){
								  tabelaColunaAtualizacaoCadastral
										.setColunaValorAnterior(tabelaLinhaColunaAlteracao
												.getConteudoColunaAnterior());
								}else{
									 tabelaColunaAtualizacaoCadastral.setColunaValorAnterior(null);
								}
								if(tabelaLinhaColunaAlteracao.getConteudoColunaAtual() != null &&
										!tabelaLinhaColunaAlteracao.getConteudoColunaAtual().equals("")){
									tabelaColunaAtualizacaoCadastral
											.setColunaValorAtual(tabelaLinhaColunaAlteracao
													.getConteudoColunaAtual());
								}else{
									 tabelaColunaAtualizacaoCadastral.setColunaValorAtual(null);
								}
								tabelaColunaAtualizacaoCadastral
										.setIndicadorAutorizado(ConstantesSistema.INDICADOR_REGISTRO_NAO_ACEITO);
								tabelaColunaAtualizacaoCadastral
										.setTabelaAtualizacaoCadastral(tabelaAtualizacaoCadastral);
								tabelaColunaAtualizacaoCadastral
										.setTabelaColuna(tabelaLinhaColunaAlteracao
												.getTabelaColuna());
								colecaoTabelaColunaAtualizacaoCadastral
										.add(tabelaColunaAtualizacaoCadastral);
							}
						}else{
							//caso o tipo de alteração seja exclusão, 
							// então cria um registro na tabela de tabelaColunaAtualizacaoCadastral
							TabelaColunaAtualizacaoCadastral tabelaColunaAtualizacaoCadastral = new TabelaColunaAtualizacaoCadastral();
							
							  tabelaColunaAtualizacaoCadastral
									.setColunaValorAnterior(""+matricula);
							  tabelaColunaAtualizacaoCadastral
										.setColunaValorAtual(""+matricula);
							
							tabelaColunaAtualizacaoCadastral
									.setIndicadorAutorizado(ConstantesSistema.INDICADOR_REGISTRO_NAO_ACEITO);
							tabelaColunaAtualizacaoCadastral
									.setTabelaAtualizacaoCadastral(tabelaAtualizacaoCadastral);
							TabelaColuna tabelaColuna = new TabelaColuna();
							tabelaColuna.setId(TabelaColuna.ID_IMOVEL);
							tabelaColunaAtualizacaoCadastral.setTabelaColuna(tabelaColuna);
							colecaoTabelaColunaAtualizacaoCadastral
									.add(tabelaColunaAtualizacaoCadastral);
						}
						getControladorTransacao()
								.inserirOperacaoEfetuadaAtualizacaoCadastral(
										imovelAtualizacaoCadastralTxt
												.getUsuarioAcaoUsuarioHelp(),
										imovelAtualizacaoCadastralTxt
												.getOperacaoEfetuada(),
										tabelaAtualizacaoCadastral,
										colecaoTabelaColunaAtualizacaoCadastral);
					}

				} else if ("2".equals(primeiraLetra) && !indicadorExcluido) {

					String clienteLinha = line.substring(1);

					parserCliente = new ParserUtil(clienteLinha);

					AlteracaoTipo alteracaoTipo = new AlteracaoTipo();

					ClienteAtualizacaoCadastral clienteAtualizacaoCadastralTxt = null;

					String tipoAlteracao = parserCliente.obterDadoParser(1);
					
					if (tipoAlteracao == null || tipoAlteracao.trim().equals("")) {
						continue;
					} 

					 idClienteRelacaoTipo = Integer.parseInt(parserCliente.obterDadoParser(1));

					idCliente = Integer.parseInt(parserCliente.obterDadoParser(9));
					cliente.setId(idCliente);										

					ClienteAtualizacaoCadastral clienteAtualizacaoCadastralBase = null;
					
					if(idClienteRelacaoTipo.equals(ConstantesSistema.CLIENTE_IMOVEL_TIPO_USUARIO)){
						idClieteUsuario = idCliente;
					}else if (idClieteUsuario != null && idClieteUsuario.equals(idCliente)){
						getControladorTransacao().atualizarClienteRelacaoTipoAtualizacaoCadastral(matricula, idCliente);
						indicadorRepetido = true;
						continue;
					}else{
						indicadorRepetido = false;
					}
					
					if (tipoAlteracao.equals("E")) {
						clienteAtualizacaoCadastralBase = getControladorCliente()
							.pesquisarClienteAtualizacaoCadastral(idCliente, matricula, idClienteRelacaoTipo);
						alteracaoTipo.setId(AlteracaoTipo.EXCLUSAO);	
						clienteAtualizacaoCadastralTxt = new ClienteAtualizacaoCadastral();
					} else{
						 if (tipoAlteracao.equals("I")) {
							 clienteAtualizacaoCadastralBase = new ClienteAtualizacaoCadastral();
								alteracaoTipo.setId(AlteracaoTipo.INCLUSAO);
						}else if (tipoAlteracao.equals("A")) {
							clienteAtualizacaoCadastralBase = getControladorCliente()
								.pesquisarClienteAtualizacaoCadastral(idCliente, matricula, idClienteRelacaoTipo);
							alteracaoTipo.setId(AlteracaoTipo.ALTERACAO);
						}
						
						clienteAtualizacaoCadastralTxt = new ClienteAtualizacaoCadastral();
						// CÓDIGO DO CLIENTE
						clienteAtualizacaoCadastralTxt.setIdCliente(idCliente);
						// TIPO RELAÇÃO DO CLIENTE
						clienteAtualizacaoCadastralTxt.setIdClienteRelacaoTipo(idClienteRelacaoTipo);
						
						// NOME
						clienteAtualizacaoCadastralTxt.setNomeCliente(parserCliente
								.obterDadoParser(50).trim());
						// TIPO DO CLIENTE
						Integer tipoCliente = Integer.parseInt(parserCliente
								.obterDadoParser(4));
						clienteAtualizacaoCadastralTxt
								.setIdClienteTipo(tipoCliente);
						// CPF/CNPJ
						clienteAtualizacaoCadastralTxt.setCpfCnpj(parserCliente
								.obterDadoParser(14).trim());
						// RG
						clienteAtualizacaoCadastralTxt.setRg(parserCliente
								.obterDadoParser(13).trim());
						// DATA DA EMISSÃO
						String dataEmissaoRg = parserCliente.obterDadoParser(8).trim();
	
						if (!dataEmissaoRg.equals("")
								&& !dataEmissaoRg.equals("00000000")) {
							clienteAtualizacaoCadastralTxt.setDataEmissaoRg(Util
									.converteStringSemBarraParaDate(dataEmissaoRg));
						}
						// ORG. EXPEDITOR
						clienteAtualizacaoCadastralTxt
								.setDsAbreviadaOrgaoExpedidorRg(parserCliente
										.obterDadoParser(6).trim());
						// UF
						clienteAtualizacaoCadastralTxt
								.setDsUFSiglaOrgaoExpedidorRg(parserCliente
										.obterDadoParser(2).trim());
						// DATA DE NASCIMENTO
						String dataNascimento = parserCliente.obterDadoParser(8)
								.trim();
	
						if (!dataNascimento.equals("")
								&& !dataNascimento.equals("00000000")) {
							clienteAtualizacaoCadastralTxt
									.setDataNascimento(Util
											.formatarDataSemHora(Util
													.converteStringSemBarraParaDate(dataNascimento)));
						}
						// PROFISSÃO
						String idProfissaoRamoAtividade = parserCliente.obterDadoParser(4);
						
						Short tipoClienteIndicador = null;
						FiltroClienteTipo filtroClienteTipo = new FiltroClienteTipo();
						filtroClienteTipo.adicionarParametro(new ParametroSimples(FiltroClienteTipo.ID, tipoCliente));
						Collection pesquisa = getControladorUtil().pesquisar(filtroClienteTipo, ClienteTipo.class.getName());
						if (pesquisa != null && !pesquisa.isEmpty()) {
							ClienteTipo clienteTipo = (ClienteTipo) Util.retonarObjetoDeColecao(pesquisa);
							tipoClienteIndicador = clienteTipo.getIndicadorPessoaFisicaJuridica();				
						}	
						if(tipoClienteIndicador.equals(ClienteTipo.INDICADOR_PESSOA_FISICA)){
							if (!idProfissaoRamoAtividade.equals("0000")) {
								clienteAtualizacaoCadastralTxt.setIdProfissao(Integer.parseInt(idProfissaoRamoAtividade));
							} else if (clienteAtualizacaoCadastralBase.getIdProfissao() != null) {
								clienteAtualizacaoCadastralTxt.setIdProfissao(0);
							}
						}else{
							if (!idProfissaoRamoAtividade.equals("0000")) {
								clienteAtualizacaoCadastralTxt.setIdRamoAtividade(Integer.parseInt(idProfissaoRamoAtividade));
							} else if (clienteAtualizacaoCadastralBase.getIdProfissao() != null) {
								clienteAtualizacaoCadastralTxt.setIdRamoAtividade(0);
							}
						}
	
						// SEXO
						String pessoaSexo = parserCliente.obterDadoParser(1);
	
						
//						if(pessoaSexo.equalsIgnoreCase("M")){
//						  clienteAtualizacaoCadastralTxt.setIdPessoaSexo(1); 
//						} else{
//						  if (pessoaSexo.equalsIgnoreCase("F")){
//						  clienteAtualizacaoCadastralTxt.setIdPessoaSexo(2); 
//						  }
//						}
						 
						// o arquivo enviado pela serasa defini o sexo com M e F
						if(!pessoaSexo.equals("1") && !pessoaSexo.equals("2")){
							clienteAtualizacaoCadastralTxt.setIdPessoaSexo(0);							
						}else{
							clienteAtualizacaoCadastralTxt.setIdPessoaSexo(Integer
								.parseInt(pessoaSexo));
						}
						
						// NOME DA MÃE
						clienteAtualizacaoCadastralTxt.setNomeMae(parserCliente
								.obterDadoParser(50).trim());
						// INDICADOR DE USO
						String indicadorUso = parserCliente.obterDadoParser(1).trim();
						if(indicadorUso != null && !indicadorUso.equals("")){
							clienteAtualizacaoCadastralTxt.setIndicadorUso(Short
								.parseShort(indicadorUso));
						}else{
							clienteAtualizacaoCadastralTxt.setIndicadorUso(new Short("1"));
						}
						// TIPO DE ENDEREÇO
						String idTipoCliente = parserCliente.obterDadoParser(2).trim();
						if(idTipoCliente != null && !idTipoCliente.equals("")){
							clienteAtualizacaoCadastralTxt.setIdEnderecoTipo(Integer
									.parseInt(idTipoCliente));
						}
						
						// CÓDIGO DO LOGRADOURO
						String idLogradouro = parserCliente.obterDadoParser(9).trim();
						if(idLogradouro != null && !idLogradouro.equals("")){
							clienteAtualizacaoCadastralTxt.setIdLogradouro(Integer
								.parseInt(idLogradouro));
						}
						// TIPO LOGRADOURO
						clienteAtualizacaoCadastralTxt
								.setDsLogradouroTipo(parserCliente.obterDadoParser(
										20).trim());
						// TÍTULO LOGRADOURO
						clienteAtualizacaoCadastralTxt
								.setDsLogradouroTitulo(parserCliente
										.obterDadoParser(25).trim());
						// LOGRADOURO
						clienteAtualizacaoCadastralTxt
								.setDescricaoLogradouro(parserCliente
										.obterDadoParser(40).trim());
						// CEP
						String codigoCep = parserCliente.obterDadoParser(8).trim();
						if (!codigoCep.equals("") && !codigoCep.equals("00000000")) {
							clienteAtualizacaoCadastralTxt.setCodigoCep(Integer
									.parseInt(codigoCep));
						}
						// CÓDIGO DO BAIRRO
						String idBairro = parserCliente.obterDadoParser(4).trim();
						if(idBairro != null && !idBairro.equals("")){
							clienteAtualizacaoCadastralTxt.setIdBairro(Integer
									.parseInt(idBairro));
						
						}
						
						// DESCRIÇÃO DO BAIRRO
						clienteAtualizacaoCadastralTxt.setNomeBairro(parserCliente
								.obterDadoParser(30).trim());
						// CÓDIGO DE REFERÊNCIA
						String enderecoReferencia = parserCliente.obterDadoParser(2).trim();
						if(enderecoReferencia != null && !enderecoReferencia.equals("")){
						clienteAtualizacaoCadastralTxt
								.setIdEnderecoReferencia(Integer
										.parseInt(enderecoReferencia));
						}
						// NÚMERO
						clienteAtualizacaoCadastralTxt
								.setNumeroImovel(parserCliente.obterDadoParser(5)
										.trim());
						// COMPLEMENTO
						clienteAtualizacaoCadastralTxt
								.setComplementoEndereco(parserCliente
										.obterDadoParser(25).trim());
						// EMAIL
						clienteAtualizacaoCadastralTxt.setEmail(parserCliente
								.obterDadoParser(40).trim());
						// CNAE
						String cnae = parserCliente.obterDadoParser(7).trim();
						if (!cnae.equals("") && !cnae.equals("0000000")
								&& !cnae.trim().equalsIgnoreCase("")) {
							clienteAtualizacaoCadastralTxt.setCnae(Integer
									.parseInt(cnae));
						}
						
						parserCliente.obterDadoParser(9).trim();
	
						// CÓDIGO TIPO LOGRADOURO
						String codigoTipoLogradouro = parserCliente
								.obterDadoParser(3).trim();
	
						if (!codigoTipoLogradouro.equals("000")
								&& !(codigoTipoLogradouro.equals(""))) {
							clienteAtualizacaoCadastralTxt
									.setIdLogradouroTipo(Integer
											.parseInt(codigoTipoLogradouro));
						}
	
						// CÓDIGO TÍTULO LOGRADOURO
						String codigoTituloLogradouro = parserCliente
								.obterDadoParser(3).trim();
	
						if (!codigoTituloLogradouro.equals("000")
								&& !(codigoTituloLogradouro.equals(""))) {
							clienteAtualizacaoCadastralTxt
									.setIdLogradouroTitulo(Integer
											.parseInt(codigoTituloLogradouro));
						}
	
						
					
					}

					// percorrer a coleção de coluansAlteradas e gerar objetos
					// de tabela_coluna_atualizacao_cadastral
					Collection<TabelaLinhaColunaAlteracao> colunasAlteradas = interceptador
							.compareObjetoTransacao(
									clienteAtualizacaoCadastralTxt,
									clienteAtualizacaoCadastralBase, null);

					Collection<TabelaColunaAtualizacaoCadastral> colecaoTabelaColunaAtualizacaoCadastral = new ArrayList<TabelaColunaAtualizacaoCadastral>();

					if ((colunasAlteradas != null && !colunasAlteradas.isEmpty()) || alteracaoTipo.getId().equals(AlteracaoTipo.EXCLUSAO)) {

						registradorOperacao
								.registrarOperacao(clienteAtualizacaoCadastralTxt);

						// inserir um objeto de tabela_atualizacao_cadastral
						TabelaAtualizacaoCadastral tabelaAtualizacaoCadastral = new TabelaAtualizacaoCadastral();
						tabelaAtualizacaoCadastral
								.setAlteracaoTipo(alteracaoTipo);
						if(clienteAtualizacaoCadastralBase != null && clienteAtualizacaoCadastralBase.getId() != null){
							tabelaAtualizacaoCadastral
							.setIdRegistroAlterado(clienteAtualizacaoCadastralBase.getId());
						}else{
							tabelaAtualizacaoCadastral
							.setIdRegistroAlterado(idCliente);
						}
						tabelaAtualizacaoCadastral.setCodigoImovel(matricula);
						tabelaAtualizacaoCadastral.setCodigoCliente(idCliente);
						tabelaAtualizacaoCadastral
								.setIndicadorPrincipal(new Short("2"));
						tabelaAtualizacaoCadastral.setLeiturista(arquivoTexto
								.getLeiturista());
						tabelaAtualizacaoCadastral
								.setOperacaoEfetuada(clienteAtualizacaoCadastralTxt
										.getOperacaoEfetuada());
						Tabela tabela = new Tabela();
						tabela.setId(Tabela.CLIENTE_ATUALIZACAO_CADASTRAL);
						tabelaAtualizacaoCadastral
								.setArquivoTextoAtualizacaoCadastral(arquivoTexto);
						tabelaAtualizacaoCadastral.setTabela(tabela);
						tabelaAtualizacaoCadastral
								.setIndicadorAutorizado(ConstantesSistema.INDICADOR_REGISTRO_ACEITO);
						
						if (colunasAlteradas != null && !colunasAlteradas.isEmpty()) {

							Iterator colunasAlteradasIter = colunasAlteradas
									.iterator();
							while (colunasAlteradasIter.hasNext()) {
								TabelaLinhaColunaAlteracao tabelaLinhaColunaAlteracao = (TabelaLinhaColunaAlteracao) colunasAlteradasIter
										.next();
								TabelaColunaAtualizacaoCadastral tabelaColunaAtualizacaoCadastral = new TabelaColunaAtualizacaoCadastral();
								if(tabelaLinhaColunaAlteracao.getConteudoColunaAnterior() != null &&
										!tabelaLinhaColunaAlteracao.getConteudoColunaAnterior().equals("")){
								  tabelaColunaAtualizacaoCadastral
										.setColunaValorAnterior(tabelaLinhaColunaAlteracao
												.getConteudoColunaAnterior());
								}else{
									 tabelaColunaAtualizacaoCadastral.setColunaValorAnterior(null);
								}
								if(tabelaLinhaColunaAlteracao.getConteudoColunaAtual() != null &&
										!tabelaLinhaColunaAlteracao.getConteudoColunaAtual().equals("")){
									tabelaColunaAtualizacaoCadastral
											.setColunaValorAtual(tabelaLinhaColunaAlteracao
													.getConteudoColunaAtual());
								}else{
									 tabelaColunaAtualizacaoCadastral.setColunaValorAtual(null);
								}
								tabelaColunaAtualizacaoCadastral
										.setIndicadorAutorizado(ConstantesSistema.INDICADOR_REGISTRO_NAO_ACEITO);
								tabelaColunaAtualizacaoCadastral
										.setTabelaAtualizacaoCadastral(tabelaAtualizacaoCadastral);
								tabelaColunaAtualizacaoCadastral
										.setTabelaColuna(tabelaLinhaColunaAlteracao
												.getTabelaColuna());
								colecaoTabelaColunaAtualizacaoCadastral
										.add(tabelaColunaAtualizacaoCadastral);
							}
						}else{
							//caso o tipo de alteração seja exclusão, 
							// então cria um registro na tabela de tabelaColunaAtualizacaoCadastral
							TabelaColunaAtualizacaoCadastral tabelaColunaAtualizacaoCadastral = new TabelaColunaAtualizacaoCadastral();
							
							  tabelaColunaAtualizacaoCadastral
									.setColunaValorAnterior(""+idCliente);
							  tabelaColunaAtualizacaoCadastral
										.setColunaValorAtual(""+idCliente);
							
							tabelaColunaAtualizacaoCadastral
									.setIndicadorAutorizado(ConstantesSistema.INDICADOR_REGISTRO_NAO_ACEITO);
							tabelaColunaAtualizacaoCadastral
									.setTabelaAtualizacaoCadastral(tabelaAtualizacaoCadastral);
							TabelaColuna tabelaColuna = new TabelaColuna();
							tabelaColuna.setId(TabelaColuna.ID_CLIENTE_ATU_CADASTRAL);
							tabelaColunaAtualizacaoCadastral.setTabelaColuna(tabelaColuna);
							colecaoTabelaColunaAtualizacaoCadastral
									.add(tabelaColunaAtualizacaoCadastral);
						}
						getControladorTransacao()
								.inserirOperacaoEfetuadaAtualizacaoCadastral(
										clienteAtualizacaoCadastralTxt
												.getUsuarioAcaoUsuarioHelp(),
										clienteAtualizacaoCadastralTxt
												.getOperacaoEfetuada(),
										tabelaAtualizacaoCadastral,
										colecaoTabelaColunaAtualizacaoCadastral);
					}

				} else if ("3".equals(primeiraLetra) && !indicadorExcluido && !indicadorRepetido) {

					String clienteFone = line.substring(1);

					ParserUtil parserClienteFone = new ParserUtil(clienteFone);

					String tipoAlteracao = parserClienteFone.obterDadoParser(1);

					Integer tipoFone = Integer.parseInt(parserClienteFone
							.obterDadoParser(2));

					ClienteFoneAtualizacaoCadastral clienteFoneAtualizacaoCadastralBase = null;
					
					ClienteFoneAtualizacaoCadastral clienteFoneAtualizacaoCadastralTxt = null;
					
					clienteFoneAtualizacaoCadastralTxt = new ClienteFoneAtualizacaoCadastral();
					// TIPO DO TELEFONE
					clienteFoneAtualizacaoCadastralTxt.setIdFoneTipo(tipoFone);
					// DDD
					String ddd = parserClienteFone.obterDadoParser(2).trim();
					if (!ddd.equals("00")) {
						clienteFoneAtualizacaoCadastralTxt.setDdd(ddd);
					}
					// NÚMERO DO TELEFONE
					String numeroFone = parserClienteFone.obterDadoParser(8).trim();
					clienteFoneAtualizacaoCadastralTxt
							.setTelefone(numeroFone);
					// RAMAL
					String ramal = parserClienteFone.obterDadoParser(4).trim();
					if (!ramal.equals("0000")) {
						clienteFoneAtualizacaoCadastralTxt.setRamal(ramal);
					}
					
					// ID DO CLIENTE
					idCliente = Integer.parseInt(parserClienteFone.obterDadoParser(9));
					
					// INDICADOR FONE PADRÃO
					clienteFoneAtualizacaoCadastralTxt.setIndicadorFonePadrao(Short.parseShort(parserClienteFone.obterDadoParser(1)));

					AlteracaoTipo alteracaoTipo = new AlteracaoTipo();

					if (tipoAlteracao == null || tipoAlteracao.trim().equals("")) {
						continue;
					} else if (tipoAlteracao.equals("E")) {
						Collection colecaoClienteFoneAtualizacaoCadastral = getControladorCliente()
						.pesquisarClienteFoneAtualizacaoCadastral(idCliente, matricula, tipoFone,null,numeroFone);
						clienteFoneAtualizacaoCadastralBase = (ClienteFoneAtualizacaoCadastral) colecaoClienteFoneAtualizacaoCadastral.iterator().next();
						alteracaoTipo.setId(AlteracaoTipo.EXCLUSAO);	
					} else{
						 if (tipoAlteracao.equals("I")) {
								alteracaoTipo.setId(AlteracaoTipo.INCLUSAO);
						}else if (tipoAlteracao.equals("A")) {
							Collection colecaoClienteFoneAtualizacaoCadastral = getControladorCliente()
							.pesquisarClienteFoneAtualizacaoCadastral(idCliente, matricula, tipoFone,null,numeroFone);
							clienteFoneAtualizacaoCadastralBase = (ClienteFoneAtualizacaoCadastral) colecaoClienteFoneAtualizacaoCadastral.iterator().next();
							alteracaoTipo.setId(AlteracaoTipo.ALTERACAO);
						}
					}

					
					

					// percorrer a coleção de coluansAlteradas e gerar objetos
					// de tabela_coluna_atualizacao_cadastral
					Collection<TabelaLinhaColunaAlteracao> colunasAlteradas = interceptador
							.compareObjetoTransacao(clienteFoneAtualizacaoCadastralTxt,
									clienteFoneAtualizacaoCadastralBase, null);

					Collection<TabelaColunaAtualizacaoCadastral> colecaoTabelaColunaAtualizacaoCadastral = new ArrayList<TabelaColunaAtualizacaoCadastral>();

					if ((colunasAlteradas != null && !colunasAlteradas.isEmpty()) || alteracaoTipo.getId().equals(AlteracaoTipo.EXCLUSAO)) {
						registradorOperacao.registrarOperacao(clienteFoneAtualizacaoCadastralTxt);
	
						// inserir um objeto de tabela_atualizacao_cadastral
						TabelaAtualizacaoCadastral tabelaAtualizacaoCadastral = new TabelaAtualizacaoCadastral();
						tabelaAtualizacaoCadastral
								.setAlteracaoTipo(alteracaoTipo);
						if(clienteFoneAtualizacaoCadastralBase != null && clienteFoneAtualizacaoCadastralBase.getId() != null){
							tabelaAtualizacaoCadastral
							.setIdRegistroAlterado(clienteFoneAtualizacaoCadastralBase.getId());
						}else{
						  tabelaAtualizacaoCadastral
								.setIdRegistroAlterado(idCliente);
						}
						tabelaAtualizacaoCadastral.setCodigoImovel(matricula);
						tabelaAtualizacaoCadastral.setCodigoCliente(idCliente);
						tabelaAtualizacaoCadastral
								.setIndicadorPrincipal(new Short("2"));
						tabelaAtualizacaoCadastral.setLeiturista(arquivoTexto
								.getLeiturista());
						tabelaAtualizacaoCadastral
								.setOperacaoEfetuada(clienteFoneAtualizacaoCadastralTxt
										.getOperacaoEfetuada());
						Tabela tabela = new Tabela();
						tabela.setId(Tabela.CLIENTE_FONE_ATUALIZACAO_CADASTRAL);
						tabelaAtualizacaoCadastral
								.setArquivoTextoAtualizacaoCadastral(arquivoTexto);
						tabelaAtualizacaoCadastral.setTabela(tabela);
						tabelaAtualizacaoCadastral
								.setIndicadorAutorizado(ConstantesSistema.INDICADOR_REGISTRO_ACEITO);
					
						if (colunasAlteradas != null && !colunasAlteradas.isEmpty()) {
							Iterator colunasAlteradasIter = colunasAlteradas
								.iterator();
							while (colunasAlteradasIter.hasNext()) {
								TabelaLinhaColunaAlteracao tabelaLinhaColunaAlteracao = (TabelaLinhaColunaAlteracao) colunasAlteradasIter
										.next();
								TabelaColunaAtualizacaoCadastral tabelaColunaAtualizacaoCadastral = new TabelaColunaAtualizacaoCadastral();
								if(tabelaLinhaColunaAlteracao.getConteudoColunaAnterior() != null &&
										!tabelaLinhaColunaAlteracao.getConteudoColunaAnterior().equals("")){
								  tabelaColunaAtualizacaoCadastral
										.setColunaValorAnterior(tabelaLinhaColunaAlteracao
												.getConteudoColunaAnterior());
								}else{
									 tabelaColunaAtualizacaoCadastral.setColunaValorAnterior(null);
								}
								if(tabelaLinhaColunaAlteracao.getConteudoColunaAtual() != null &&
										!tabelaLinhaColunaAlteracao.getConteudoColunaAtual().equals("")){
									tabelaColunaAtualizacaoCadastral
											.setColunaValorAtual(tabelaLinhaColunaAlteracao
													.getConteudoColunaAtual());
								}else{
									 tabelaColunaAtualizacaoCadastral.setColunaValorAtual(null);
								}
								tabelaColunaAtualizacaoCadastral
										.setIndicadorAutorizado(ConstantesSistema.INDICADOR_REGISTRO_NAO_ACEITO);
								tabelaColunaAtualizacaoCadastral
										.setTabelaAtualizacaoCadastral(tabelaAtualizacaoCadastral);
								tabelaColunaAtualizacaoCadastral
										.setTabelaColuna(tabelaLinhaColunaAlteracao
												.getTabelaColuna());
								colecaoTabelaColunaAtualizacaoCadastral
										.add(tabelaColunaAtualizacaoCadastral);
							}
						}else{
							//caso o tipo de alteração seja exclusão, 
							// então cria um registro na tabela de tabelaColunaAtualizacaoCadastral
							TabelaColunaAtualizacaoCadastral tabelaColunaAtualizacaoCadastral = new TabelaColunaAtualizacaoCadastral();
							
							  tabelaColunaAtualizacaoCadastral
									.setColunaValorAnterior(""+idCliente);
							  tabelaColunaAtualizacaoCadastral
										.setColunaValorAtual(""+idCliente);
							
							tabelaColunaAtualizacaoCadastral
									.setIndicadorAutorizado(ConstantesSistema.INDICADOR_REGISTRO_NAO_ACEITO);
							tabelaColunaAtualizacaoCadastral
									.setTabelaAtualizacaoCadastral(tabelaAtualizacaoCadastral);
							TabelaColuna tabelaColuna = new TabelaColuna();
							tabelaColuna.setId(TabelaColuna.ID_CLIENTE_TELEFONE_ATU_CADASTRAL);
							tabelaColunaAtualizacaoCadastral.setTabelaColuna(tabelaColuna);
							colecaoTabelaColunaAtualizacaoCadastral
									.add(tabelaColunaAtualizacaoCadastral);
						}
						
						getControladorTransacao()
						.inserirOperacaoEfetuadaAtualizacaoCadastral(
								clienteFoneAtualizacaoCadastralTxt
										.getUsuarioAcaoUsuarioHelp(),
								clienteFoneAtualizacaoCadastralTxt
										.getOperacaoEfetuada(),
								tabelaAtualizacaoCadastral,
								colecaoTabelaColunaAtualizacaoCadastral);
					}
					
					

				} else if ("4".equals(primeiraLetra) && !indicadorExcluido) {

					String imovelSubcategoria = line.substring(1);

					ParserUtil parserImovelSubcategoria = new ParserUtil(
							imovelSubcategoria);

					ImovelSubcategoriaAtualizacaoCadastral imovelSubcategoriaAtualizacaoCadastralTxt = new ImovelSubcategoriaAtualizacaoCadastral();

					String tipoAlteracao = parserImovelSubcategoria
							.obterDadoParser(1);

					ImovelSubcategoriaAtualizacaoCadastral imovelSubcategoriaAtualizacaoCadastralBase = null;
					AlteracaoTipo alteracaoTipo = new AlteracaoTipo();
					Integer idSubcategoria = Integer
							.parseInt(parserImovelSubcategoria
									.obterDadoParser(2));
					String descricaoSubcategoria = parserImovelSubcategoria
					.obterDadoParser(50).trim();
					
					Short qtdEconomias = Short
					.parseShort(parserImovelSubcategoria
							.obterDadoParser(4));
					Integer idCategoria = Integer.parseInt(parserImovelSubcategoria.obterDadoParser(2));

					if (tipoAlteracao == null || tipoAlteracao.trim().equals("")) {
						continue;
					} else if (tipoAlteracao.equals("E")) {
						Collection colecaoImovelSubcategoriaAtualizacaoCadastral = getControladorImovel()
								.pesquisarImovelSubcategoriaAtualizacaoCadastral(matricula, idSubcategoria,idCategoria);
						imovelSubcategoriaAtualizacaoCadastralBase = (ImovelSubcategoriaAtualizacaoCadastral) colecaoImovelSubcategoriaAtualizacaoCadastral.iterator().next();
						alteracaoTipo.setId(AlteracaoTipo.EXCLUSAO);	
						imovelSubcategoriaAtualizacaoCadastralTxt = new ImovelSubcategoriaAtualizacaoCadastral();
					} else{
						 if (tipoAlteracao.equals("I")) {
							 imovelSubcategoriaAtualizacaoCadastralTxt = new ImovelSubcategoriaAtualizacaoCadastral();
								alteracaoTipo.setId(AlteracaoTipo.INCLUSAO);
						}else if (tipoAlteracao.equals("A")) {
							Collection colecaoImovelSubcategoriaAtualizacaoCadastral = getControladorImovel()
									.pesquisarImovelSubcategoriaAtualizacaoCadastral(matricula, idSubcategoria,idCategoria);
							imovelSubcategoriaAtualizacaoCadastralBase = (ImovelSubcategoriaAtualizacaoCadastral) colecaoImovelSubcategoriaAtualizacaoCadastral.iterator().next();
							alteracaoTipo.setId(AlteracaoTipo.ALTERACAO);
						}

					}
					
					// CÓDIGO DA SUBCATEGORIA
					imovelSubcategoriaAtualizacaoCadastralTxt
							.setIdSubcategoria(idSubcategoria);

					// DESCRIÇÃO SUBCATEGORIA
					imovelSubcategoriaAtualizacaoCadastralTxt
							.setDescricaoSubcategoria(descricaoSubcategoria);
					// QTD. DE ECONOMIAS
					imovelSubcategoriaAtualizacaoCadastralTxt
							.setQuantidadeEconomias(qtdEconomias);
					// CÓDIGO CATEGORIA
					imovelSubcategoriaAtualizacaoCadastralTxt
							.setIdCategoria(idCategoria);
					// DESCRIÇÃO CATEGORIA
					imovelSubcategoriaAtualizacaoCadastralTxt
							.setDescricaoCategoria(parserImovelSubcategoria
									.obterDadoParser(15).trim());

					// percorrer a coleção de coluansAlteradas e gerar objetos
					// de tabela_coluna_atualizacao_cadastral
					Collection<TabelaLinhaColunaAlteracao> colunasAlteradas = interceptador
							.compareObjetoTransacao(
									imovelSubcategoriaAtualizacaoCadastralTxt,
									imovelSubcategoriaAtualizacaoCadastralBase,
									null);

					Collection<TabelaColunaAtualizacaoCadastral> colecaoTabelaColunaAtualizacaoCadastral = new ArrayList<TabelaColunaAtualizacaoCadastral>();
					
					if ((colunasAlteradas != null && !colunasAlteradas.isEmpty()) || alteracaoTipo.getId().equals(AlteracaoTipo.EXCLUSAO)) {
					

						registradorOperacao
								.registrarOperacao(imovelSubcategoriaAtualizacaoCadastralTxt);
	
						// inserir um objeto de tabela_atualizacao_cadastral
						TabelaAtualizacaoCadastral tabelaAtualizacaoCadastral = new TabelaAtualizacaoCadastral();
						tabelaAtualizacaoCadastral
								.setAlteracaoTipo(alteracaoTipo);
						if(imovelSubcategoriaAtualizacaoCadastralBase != null && imovelSubcategoriaAtualizacaoCadastralBase.getId() != null){
							tabelaAtualizacaoCadastral
							.setIdRegistroAlterado(imovelSubcategoriaAtualizacaoCadastralBase.getId());	
						}else{
							tabelaAtualizacaoCadastral
							.setIdRegistroAlterado(idSubcategoria);
						}
	
						tabelaAtualizacaoCadastral.setCodigoImovel(matricula);
						tabelaAtualizacaoCadastral
								.setIndicadorPrincipal(new Short("2"));
						tabelaAtualizacaoCadastral.setLeiturista(arquivoTexto
								.getLeiturista());
						tabelaAtualizacaoCadastral
								.setOperacaoEfetuada(imovelSubcategoriaAtualizacaoCadastralTxt
										.getOperacaoEfetuada());
						Tabela tabela = new Tabela();
						tabela
								.setId(Tabela.IMOVEL_SUBCATEGORIA_ATUALIZACAO_CADASTRAL);
						tabelaAtualizacaoCadastral
								.setArquivoTextoAtualizacaoCadastral(arquivoTexto);
						tabelaAtualizacaoCadastral.setTabela(tabela);
						tabelaAtualizacaoCadastral
								.setIndicadorAutorizado(ConstantesSistema.INDICADOR_REGISTRO_ACEITO);
	
						if(colunasAlteradas != null && !colunasAlteradas.isEmpty()){
							Iterator colunasAlteradasIter = colunasAlteradas
								.iterator();
							while (colunasAlteradasIter.hasNext()) {
								TabelaLinhaColunaAlteracao tabelaLinhaColunaAlteracao = (TabelaLinhaColunaAlteracao) colunasAlteradasIter
										.next();
								TabelaColunaAtualizacaoCadastral tabelaColunaAtualizacaoCadastral = new TabelaColunaAtualizacaoCadastral();
								if(tabelaLinhaColunaAlteracao.getConteudoColunaAnterior() != null &&
										!tabelaLinhaColunaAlteracao.getConteudoColunaAnterior().equals("")){
								  tabelaColunaAtualizacaoCadastral
										.setColunaValorAnterior(tabelaLinhaColunaAlteracao
												.getConteudoColunaAnterior());
								}else{
									 tabelaColunaAtualizacaoCadastral.setColunaValorAnterior(null);
								}
								if(tabelaLinhaColunaAlteracao.getConteudoColunaAtual() != null &&
										!tabelaLinhaColunaAlteracao.getConteudoColunaAtual().equals("")){
									tabelaColunaAtualizacaoCadastral
											.setColunaValorAtual(tabelaLinhaColunaAlteracao
													.getConteudoColunaAtual());
								}else{
									 tabelaColunaAtualizacaoCadastral.setColunaValorAtual(null);
								}
								tabelaColunaAtualizacaoCadastral
										.setIndicadorAutorizado(ConstantesSistema.INDICADOR_REGISTRO_NAO_ACEITO);
								tabelaColunaAtualizacaoCadastral
										.setTabelaAtualizacaoCadastral(tabelaAtualizacaoCadastral);
								tabelaColunaAtualizacaoCadastral
										.setTabelaColuna(tabelaLinhaColunaAlteracao
												.getTabelaColuna());
								colecaoTabelaColunaAtualizacaoCadastral
										.add(tabelaColunaAtualizacaoCadastral);
							}
						}else{
							//caso o tipo de alteração seja exclusão, 
							// então cria um registro na tabela de tabelaColunaAtualizacaoCadastral
							TabelaColunaAtualizacaoCadastral tabelaColunaAtualizacaoCadastral = new TabelaColunaAtualizacaoCadastral();
							
							  tabelaColunaAtualizacaoCadastral
									.setColunaValorAnterior(""+idSubcategoria);
							  tabelaColunaAtualizacaoCadastral
										.setColunaValorAtual(""+idSubcategoria);
							
							tabelaColunaAtualizacaoCadastral
									.setIndicadorAutorizado(ConstantesSistema.INDICADOR_REGISTRO_NAO_ACEITO);
							tabelaColunaAtualizacaoCadastral
									.setTabelaAtualizacaoCadastral(tabelaAtualizacaoCadastral);
							TabelaColuna tabelaColuna = new TabelaColuna();
							tabelaColuna.setId(TabelaColuna.CODIGO_SUBCATEGORIA_IMOVEL_SUBCATEGORIA_ATU_CADASTRAL);
							tabelaColunaAtualizacaoCadastral.setTabelaColuna(tabelaColuna);
							colecaoTabelaColunaAtualizacaoCadastral
									.add(tabelaColunaAtualizacaoCadastral);
						}
						
						getControladorTransacao()
						.inserirOperacaoEfetuadaAtualizacaoCadastral(
								imovelSubcategoriaAtualizacaoCadastralTxt
										.getUsuarioAcaoUsuarioHelp(),
								imovelSubcategoriaAtualizacaoCadastralTxt
										.getOperacaoEfetuada(),
								tabelaAtualizacaoCadastral,
								colecaoTabelaColunaAtualizacaoCadastral);
						}
					
					
					
				}
				// line = buffer.readLine();
			}

			repositorioCadastro.atualizarArquivoTextoAtualizacaoCadstral(
					idArquivoTexto, SituacaoTransmissaoLeitura.TRANSMITIDO);

		} catch (ControladorException e) {
			sessionContext.setRollbackOnly();
			throw e;
		} catch (Exception ex) {
			ex.printStackTrace();
			System.out.println("Matrícula"+matricula);
			throw new EJBException(ex);
		} finally {
			if (buffer != null) {
				try {
					buffer.close();
				} catch (Exception e) {
				}
			}
		}
	}

	/**
	 * Gerar Arquivo Texto para Atualização Cadastral
	 * 
	 * Registro Tipo Header
	 * 
	 * @author Ana Maria
	 * @date 11/05/2009
	 * 
	 * @param imovel
	 * @throws ControladorException
	 */
	public StringBuilder gerarArquivoTextoRegistroTipoHeader(
			Integer idArquivoTexto) throws ControladorException {

		StringBuilder arquivoTextoRegistroTipoHeader = new StringBuilder();

		// TIPO DO REGISTRO
		arquivoTextoRegistroTipoHeader.append("0");

		// TIPO MOVIMENTO
		arquivoTextoRegistroTipoHeader.append(" ");

		// DATA DA GERAÇÃO
		arquivoTextoRegistroTipoHeader.append(Util
				.formatarDataSemBarraDDMMAAAA(new Date()));

		// ID DO ARQUIVO TEXTO ATUALIZACAO CADASTRAL
		arquivoTextoRegistroTipoHeader.append(Util.adicionarZerosEsquedaNumero(
				9, idArquivoTexto.toString()));

		// VERSÃO DP APLICATIVO
		arquivoTextoRegistroTipoHeader.append("01.00.00.1");

		arquivoTextoRegistroTipoHeader.append(System
				.getProperty("line.separator"));

		return arquivoTextoRegistroTipoHeader;
	}

	/**
	 * Gerar Arquivo Texto para Atualização Cadastral
	 * 
	 * Registro Tipo 01 - Dados do imóvel
	 * 
	 * @author Ana Maria
	 * @date 22/09/2008
	 * 
	 * @param imovel
	 * @throws ControladorException
	 */
	public StringBuilder gerarArquivoTextoRegistroTipo01(Integer imovel)
			throws ControladorException {

		ImovelAtualizacaoCadastral imov = null;

		imov = getControladorImovel().pesquisarImovelAtualizacaoCadastral(
				imovel);

		StringBuilder arquivoTextoRegistroTipo01 = new StringBuilder();

		// TIPO DO REGISTRO (DADOS DO IMÓVEL)
		arquivoTextoRegistroTipo01.append("1");

		// TIPO MOVIMENTO
		arquivoTextoRegistroTipo01.append(" ");

		// MATRÍCULA DO IMÓVEL
		arquivoTextoRegistroTipo01.append(Util.adicionarZerosEsquedaNumero(9,
				imov.getImovel().toString()));

		// LOCALIDADE
		arquivoTextoRegistroTipo01.append(Util.adicionarZerosEsquedaNumero(3,
				imov.getIdLocalidade().toString()));

		// CÓDIGO SETOR COMERCIAL
		arquivoTextoRegistroTipo01.append(Util.adicionarZerosEsquedaNumero(3,
				String.valueOf(imov.getCodigoSetorComercial())));

		// NÚMERO QUADRA
		arquivoTextoRegistroTipo01.append(Util.adicionarZerosEsquedaNumero(3,
				String.valueOf(imov.getNumeroQuadra())));

		// LOTE
		arquivoTextoRegistroTipo01.append(Util.adicionarZerosEsquedaNumero(4,
				String.valueOf(imov.getLote())));

		// SUBLOTE
		arquivoTextoRegistroTipo01.append(Util.adicionarZerosEsquedaNumero(3,
				String.valueOf(imov.getSubLote())));

		// SEQUÊNCIA DA ROTA
		if (imov.getNumeroSequencialRota() != null
				&& !imov.getNumeroSequencialRota().equals("")) {
			arquivoTextoRegistroTipo01.append(Util.adicionarZerosEsquedaNumero(
					4, imov.getNumeroSequencialRota().toString()));
		} else {
			arquivoTextoRegistroTipo01.append(Util.adicionarZerosEsquedaNumero(
					4, ""));
		}

		// NÚMERO DE MORADORES
		if (imov.getNumeroMorador() != null
				&& !imov.getNumeroMorador().equals("")) {
			arquivoTextoRegistroTipo01.append(Util.adicionarZerosEsquedaNumero(
					4, imov.getNumeroMorador().toString()));
		} else {
			arquivoTextoRegistroTipo01.append(Util.adicionarZerosEsquedaNumero(
					4, ""));
		}

		// NOME DA CONTA
		// Foi excluido

		// CÓDIGO DO LOGRADOURO
		arquivoTextoRegistroTipo01.append(Util.adicionarZerosEsquedaNumero(9,
				imov.getIdLogradouro().toString()));

		// TIPO LOGRADOURO
		arquivoTextoRegistroTipo01.append(Util.completaString(imov
				.getDsLogradouroTipo(), 20));

		// TÍTULO LOGRADOURO
		arquivoTextoRegistroTipo01.append(Util.completaString(imov
				.getDsLogradouroTitulo(), 25));

		// NOME LOGRADOURO
		arquivoTextoRegistroTipo01.append(Util.completaString(imov
				.getDescricaoLogradouro(), 40));

		// CEP
		if (imov.getCodigoCep() != null && !imov.getCodigoCep().equals("")) {
			arquivoTextoRegistroTipo01.append(Util.adicionarZerosEsquedaNumero(
					8, imov.getCodigoCep().toString()));
		} else {
			arquivoTextoRegistroTipo01.append(Util.adicionarZerosEsquedaNumero(
					8, ""));
		}

		// BAIRRO
		if (imov.getIdBairro() != null && !imov.getIdBairro().equals("")) {
			arquivoTextoRegistroTipo01.append(Util.adicionarZerosEsquedaNumero(
					4, imov.getIdBairro().toString()));
			arquivoTextoRegistroTipo01.append(Util.completaString(imov
					.getNomeBairro(), 30));
		}

		// REFERÊNCIA
		if (imov.getIdEnderecoReferencia() != null
				&& !imov.getIdEnderecoReferencia().equals("")) {
			arquivoTextoRegistroTipo01.append(Util.adicionarZerosEsquedaNumero(
					2, imov.getIdEnderecoReferencia().toString()));
		} else {
			arquivoTextoRegistroTipo01.append(Util.adicionarZerosEsquedaNumero(
					2, ""));
		}

		// NÚMERO DO IMÓVEL
		arquivoTextoRegistroTipo01.append(Util.completaString(imov
				.getNumeroImovel().trim(), 5));

		// COMPLEMENTO
		if (imov.getComplementoEndereco() != null
				&& !imov.getComplementoEndereco().equals("")) {
			arquivoTextoRegistroTipo01.append(Util.completaString(imov
					.getComplementoEndereco(), 25));
		} else {
			arquivoTextoRegistroTipo01.append(Util.completaString("", 25));
		}

		// ÁREA CONSTRUIDA
		if (imov.getAreaConstruida() != null
				&& !imov.getAreaConstruida().equals("")) {
			arquivoTextoRegistroTipo01.append(Util.adicionarZerosEsquedaNumero(
					8, Util.formatarBigDecimalParaString(imov
							.getAreaConstruida())));
		} else {
			arquivoTextoRegistroTipo01.append(Util.adicionarZerosEsquedaNumero(
					8, ""));
		}

		// LIGACAO_SITUACAO_AGUA
		arquivoTextoRegistroTipo01.append(Util.adicionarZerosEsquedaNumero(2,
				imov.getIdLigacaoAguaSituacao().toString()));

		// VOLUME DO RESEVATÓRIO INFERIOR
		if (imov.getVolumeReservatorioInferior() != null
				&& !imov.getVolumeReservatorioInferior().equals("")) {
			arquivoTextoRegistroTipo01.append(Util.adicionarZerosEsquedaNumero(
					5, Util.formatarBigDecimalParaString(imov
							.getVolumeReservatorioInferior())));
		} else {
			arquivoTextoRegistroTipo01.append(Util.adicionarZerosEsquedaNumero(
					5, ""));
		}

		// VOLUME DO RESEVATÓRIO SUPERIOR
		if (imov.getVolumeReservatorioSuperior() != null
				&& !imov.getVolumeReservatorioSuperior().equals("")) {
			arquivoTextoRegistroTipo01.append(Util.adicionarZerosEsquedaNumero(
					5, Util.formatarBigDecimalParaString(imov
							.getVolumeReservatorioSuperior())));
		} else {
			arquivoTextoRegistroTipo01.append(Util.adicionarZerosEsquedaNumero(
					5, ""));
		}

		// VOLUME DA PISCINA
		if (imov.getVolumePiscina() != null) {
			arquivoTextoRegistroTipo01.append(Util.adicionarZerosEsquedaNumero(
					5, Util.formatarBigDecimalParaString(imov
							.getVolumePiscina())));
		} else {
			arquivoTextoRegistroTipo01.append(Util.adicionarZerosEsquedaNumero(
					5, ""));
		}

		// INDICADOR DE JARDIM
		if (imov.getIndicadorJardim() != null
				&& !imov.getIndicadorJardim().equals("")) {
			arquivoTextoRegistroTipo01.append(Util.adicionarZerosEsquedaNumero(
					1, imov.getIndicadorJardim().toString()));
		} else {
			arquivoTextoRegistroTipo01.append(Util.adicionarZerosEsquedaNumero(
					1, ""));
		}

		// PAVIMENTAÇÃO CALÇADA
		if (imov.getIdPavimentoCalcada() != null
				&& !imov.getIdPavimentoCalcada().equals("")) {
			arquivoTextoRegistroTipo01.append(Util.adicionarZerosEsquedaNumero(
					2, imov.getIdPavimentoCalcada().toString()));
		} else {
			arquivoTextoRegistroTipo01.append(Util.adicionarZerosEsquedaNumero(
					2, ""));
		}

		// PAVIMENTAÇÃO RUA
		if (imov.getIdPavimentoRua() != null
				&& !imov.getIdPavimentoRua().equals("")) {
			arquivoTextoRegistroTipo01.append(Util.adicionarZerosEsquedaNumero(
					2, imov.getIdPavimentoRua().toString()));
		} else {
			arquivoTextoRegistroTipo01.append(Util.adicionarZerosEsquedaNumero(
					2, ""));
		}

		// FONTE DE ABASTECIMENTO
		if (imov.getIdFonteAbastecimento() != null
				&& !imov.getIdFonteAbastecimento().equals("")) {
			arquivoTextoRegistroTipo01.append(Util.adicionarZerosEsquedaNumero(
					2, imov.getIdFonteAbastecimento().toString()));
		} else {
			arquivoTextoRegistroTipo01.append(Util.adicionarZerosEsquedaNumero(
					2, ""));
		}

		// POÇO
		if (imov.getIdPocoTipo() != null && !imov.getIdPocoTipo().equals("")) {
			arquivoTextoRegistroTipo01.append(Util.adicionarZerosEsquedaNumero(
					2, imov.getIdPocoTipo().toString()));
		} else {
			arquivoTextoRegistroTipo01.append(Util.adicionarZerosEsquedaNumero(
					2, ""));
		}

		// NÚMERO DE PONTOS
		if (imov.getNumeroPontosUtilizacao() != null
				&& !imov.getNumeroPontosUtilizacao().equals("")) {
			arquivoTextoRegistroTipo01.append(Util.adicionarZerosEsquedaNumero(
					4, imov.getNumeroPontosUtilizacao().toString()));
		} else {
			arquivoTextoRegistroTipo01.append(Util.adicionarZerosEsquedaNumero(
					4, ""));
		}

		// LIGACAO_SITUACAO_ESGOTO
		arquivoTextoRegistroTipo01.append(Util.adicionarZerosEsquedaNumero(2,
				imov.getIdLigacaoEsgotoSituacao().toString()));

		// PERFIL DO IMÓVEL
		arquivoTextoRegistroTipo01.append(Util.adicionarZerosEsquedaNumero(2,
				imov.getIdImovelPerfil().toString()));

		// DESPEJO
		if (imov.getIdDespejo() != null && !imov.getIdDespejo().equals("")) {
			arquivoTextoRegistroTipo01.append(Util.adicionarZerosEsquedaNumero(
					1, imov.getIdDespejo().toString()));
		} else {
			arquivoTextoRegistroTipo01.append(Util.adicionarZerosEsquedaNumero(
					1, ""));
		}

		// COORDENADAS UTM X
		if (imov.getCoordenadaX() != null && !imov.getCoordenadaX().equals("")) {
			arquivoTextoRegistroTipo01.append(Util
					.adicionarZerosEsquedaNumero(5,
							Util.formatarBigDecimalParaString(imov
									.getCoordenadaX())));
		} else {
			arquivoTextoRegistroTipo01.append(Util.adicionarZerosEsquedaNumero(
					5, ""));
		}

		// COORDENADAS UTM Y
		if (imov.getCoordenadaY() != null && !imov.getCoordenadaY().equals("")) {
			arquivoTextoRegistroTipo01.append(Util
					.adicionarZerosEsquedaNumero(5,
							Util.formatarBigDecimalParaString(imov
									.getCoordenadaY())));
		} else {
			arquivoTextoRegistroTipo01.append(Util.adicionarZerosEsquedaNumero(
					5, ""));
		}

		// IMÓVEL PRINCIPAL
		if (imov.getCodigoImovelPrincipal() != null
				&& !imov.getCodigoImovelPrincipal().equals("")) {
			arquivoTextoRegistroTipo01.append(Util.adicionarZerosEsquedaNumero(
					9, imov.getCodigoImovelPrincipal().toString()));
		} else {
			arquivoTextoRegistroTipo01.append(Util.adicionarZerosEsquedaNumero(
					9, ""));
		}

		// Leitura inicial hidrômetro
		if (imov.getNumeroLeituraInstalacaoHidrometro() != null) {
			arquivoTextoRegistroTipo01.append(Util.adicionarZerosEsquedaNumero(
					6, imov.getNumeroLeituraInstalacaoHidrometro().toString()));
		} else {
			arquivoTextoRegistroTipo01.append(Util.adicionarZerosEsquedaNumero(
					6, ""));
		}

		// Capacidade hidrômetro
		if (imov.getIdCapacidadeHidrometro() != null) {
			arquivoTextoRegistroTipo01.append(Util.adicionarZerosEsquedaNumero(
					2, imov.getIdCapacidadeHidrometro().toString()));
		} else {
			arquivoTextoRegistroTipo01.append(Util.adicionarZerosEsquedaNumero(
					2, ""));
		}

		// Marca hidrômetro
		if (imov.getIdMarcaHidrometro() != null) {
			arquivoTextoRegistroTipo01.append(Util.adicionarZerosEsquedaNumero(
					2, imov.getIdMarcaHidrometro().toString()));
		} else {
			arquivoTextoRegistroTipo01.append(Util.adicionarZerosEsquedaNumero(
					2, ""));
		}

		// Local hidrômetro
		if (imov.getIdLocalInstalacaoHidrometro() != null) {
			arquivoTextoRegistroTipo01.append(Util.adicionarZerosEsquedaNumero(
					2, imov.getIdLocalInstalacaoHidrometro().toString()));
		} else {
			arquivoTextoRegistroTipo01.append(Util.adicionarZerosEsquedaNumero(
					2, ""));
		}

		// Proteção hidrômetro
		if (imov.getIdProtecaoHidrometro() != null) {
			arquivoTextoRegistroTipo01.append(Util.adicionarZerosEsquedaNumero(
					2, imov.getIdProtecaoHidrometro().toString()));
		} else {
			arquivoTextoRegistroTipo01.append(Util.adicionarZerosEsquedaNumero(
					2, ""));
		}

		// Número hidrômetro
		if (imov.getNumeroHidrometro() != null) {
			arquivoTextoRegistroTipo01.append(Util.completaString(imov
					.getNumeroHidrometro().toString(), 10));
		} else {
			arquivoTextoRegistroTipo01.append(Util.completaString("", 10));
		}

		// Cavalete hidrômetro
		if (imov.getIndicadorCavalete() != null) {
			arquivoTextoRegistroTipo01.append(Util.adicionarZerosEsquedaNumero(
					1, imov.getIndicadorCavalete().toString()));
		} else {
			arquivoTextoRegistroTipo01.append(Util.adicionarZerosEsquedaNumero(
					1, ""));
		}

		// Num. IPTU
		if (imov.getNumeroIptu() != null && !imov.getNumeroIptu().equals("")) {
			arquivoTextoRegistroTipo01.append(Util.adicionarZerosEsquedaNumero(
					20, imov.getNumeroIptu().toString()));
		} else {
			arquivoTextoRegistroTipo01.append(Util.adicionarZerosEsquedaNumero(
					20, ""));
		}

		// Num. Contrato Cia. Eletrecidade
		if (imov.getNumeroContratoEnergia() != null
				&& !imov.getNumeroContratoEnergia().equals("")) {
			arquivoTextoRegistroTipo01.append(Util.adicionarZerosEsquedaNumero(
					10, imov.getNumeroContratoEnergia().toString()));
		} else {
			arquivoTextoRegistroTipo01.append(Util.adicionarZerosEsquedaNumero(
					10, ""));
		}

		// Medidor de Energia
		arquivoTextoRegistroTipo01.append(Util.completaString("", 10));

		// Ocorrência cadastro
		arquivoTextoRegistroTipo01.append(Util.adicionarZerosEsquedaNumero(4,
				""));

		// Anormalidade para o elo
		arquivoTextoRegistroTipo01.append(Util.adicionarZerosEsquedaNumero(6,
				""));

		// Outras informações
		arquivoTextoRegistroTipo01.append(Util.completaString("", 100));

		// Entrevistado
		arquivoTextoRegistroTipo01.append(Util.completaString("", 50));

		// Data/Hora da Entrevista
		arquivoTextoRegistroTipo01.append(Util.adicionarZerosEsquedaNumero(14,
				""));

		// CÓDIGO TIPO LOGRADOURO
		if (imov.getIdLogradouroTipo() != null
				&& !imov.getIdLogradouroTipo().equals("")) {
			arquivoTextoRegistroTipo01.append(Util.adicionarZerosEsquedaNumero(
					3, imov.getIdLogradouroTipo().toString()));
		} else {
			arquivoTextoRegistroTipo01.append(Util.adicionarZerosEsquedaNumero(
					3, ""));
		}

		// CÓDIGO TÍTULO LOGRADOURO
		if (imov.getIdLogradouroTitulo() != null
				&& !imov.getIdLogradouroTitulo().equals("")) {
			arquivoTextoRegistroTipo01.append(Util.adicionarZerosEsquedaNumero(
					3, imov.getIdLogradouroTitulo().toString()));
		} else {
			arquivoTextoRegistroTipo01.append(Util.adicionarZerosEsquedaNumero(
					3, ""));
		}

		// CÓDIGO DO MUNICÍPIO
		arquivoTextoRegistroTipo01.append(Util.adicionarZerosEsquedaNumero(4,
				imov.getIdMunicipio().toString()));

		// NOME MUNICÍPIO
		arquivoTextoRegistroTipo01.append(Util.completaString(imov
				.getNomeMunicipio(), 30));

		// CÓDIGO DA UNIDADE FEDERAÇÃO
		arquivoTextoRegistroTipo01.append(Util.adicionarZerosEsquedaNumero(2,
				imov.getIdUinidadeFederacao().toString()));

		// SIGLA DA UNIDADE FEDERAÇÃO
		arquivoTextoRegistroTipo01.append(Util.completaString(imov
				.getDsUFSiglaMunicipio(), 2));

		arquivoTextoRegistroTipo01.append(System.getProperty("line.separator"));

		return arquivoTextoRegistroTipo01;

	}

	/**
	 * Gerar Arquivo Texto para Atualização Cadastral
	 * 
	 * Registro Tipo 02 - Dados do(s) cliente(s)
	 * 
	 * @author Ana Maria
	 * @date 22/09/2008
	 * 
	 * @param imovel
	 * @throws ControladorException
	 */
	public StringBuilder gerarArquivoTextoRegistroTipo02(
			ClienteAtualizacaoCadastral cliente, Integer idImovel)
			throws ControladorException {

		StringBuilder arquivoTextoRegistroTipo02 = new StringBuilder();

		// TIPO DO REGISTRO (DADOS DO CLIENTE)
		arquivoTextoRegistroTipo02.append("2");

		// TIPO MOVIMENTO
		arquivoTextoRegistroTipo02.append(" ");

		// CLIENTE RELAÇÃO TIPO
		if (cliente.getIdClienteRelacaoTipo() != null
				&& !cliente.getIdClienteRelacaoTipo().equals("")) {
			arquivoTextoRegistroTipo02.append(Util.adicionarZerosEsquedaNumero(
					1, cliente.getIdClienteRelacaoTipo().toString()));
		} else {
			arquivoTextoRegistroTipo02.append(Util.adicionarZerosEsquedaNumero(
					1, ""));
		}

		// CÓDIGO DO CLIENTE
		arquivoTextoRegistroTipo02.append(Util.adicionarZerosEsquedaNumero(9,
				cliente.getIdCliente().toString()));

		// NOME DO CLIENTE
		arquivoTextoRegistroTipo02.append(Util.completaString(cliente
				.getNomeCliente(), 50));

		// CLIENTE TIPO
		arquivoTextoRegistroTipo02.append(Util.adicionarZerosEsquedaNumero(4,
				cliente.getIdClienteTipo().toString()));

		// CPF OU CNPJ
		if (cliente.getCpfCnpj() != null && !cliente.getCpfCnpj().equals("")) {
			arquivoTextoRegistroTipo02.append(Util.completaString(cliente
					.getCpfCnpj().toString(), 14));
		} else {
			arquivoTextoRegistroTipo02.append(Util.completaString("", 14));
		}

		// RG
		if (cliente.getRg() != null && !cliente.getRg().equals("")) {
			arquivoTextoRegistroTipo02.append(Util.completaString(cliente
					.getRg().toString(), 13));
		} else {
			arquivoTextoRegistroTipo02.append(Util.completaString("", 13));
		}

		// DATA DE EMISSÂO
		if (cliente.getDataEmissaoRg() != null
				&& !cliente.getDataEmissaoRg().equals("")) {
			arquivoTextoRegistroTipo02.append(Util.adicionarZerosEsquedaNumero(
					8, Util.formatarDataSemBarraDDMMAAAA(cliente
							.getDataEmissaoRg())));
		} else {
			arquivoTextoRegistroTipo02.append(Util.adicionarZerosEsquedaNumero(
					8, ""));
		}

		// ORG EXPEDITOR
		if (cliente.getDsAbreviadaOrgaoExpedidorRg() != null
				&& !cliente.getDsAbreviadaOrgaoExpedidorRg().equals("")) {
			arquivoTextoRegistroTipo02.append(Util.completaString(cliente
					.getDsAbreviadaOrgaoExpedidorRg(), 6));
		} else {
			arquivoTextoRegistroTipo02.append(Util.completaString("", 6));
		}

		// UF
		if (cliente.getDsUFSiglaOrgaoExpedidorRg() != null
				&& !cliente.getDsUFSiglaOrgaoExpedidorRg().equals("")) {
			arquivoTextoRegistroTipo02.append(Util.completaString(cliente
					.getDsUFSiglaOrgaoExpedidorRg(), 2));
		} else {
			arquivoTextoRegistroTipo02.append(Util.completaString("", 2));
		}

		// DATA DE NASCIMENTO
		if (cliente.getDataNascimento() != null
				&& !cliente.getDataNascimento().equals("")) {
			arquivoTextoRegistroTipo02.append(Util.adicionarZerosEsquedaNumero(
					8, Util.formatarDataSemBarraDDMMAAAA(cliente
							.getDataNascimento())));
		} else {
			arquivoTextoRegistroTipo02.append(Util.adicionarZerosEsquedaNumero(
					8, ""));
		}

		// PROFISSÃO
		if (cliente.getIdProfissao() != null
				&& !cliente.getIdProfissao().equals("")) {
			arquivoTextoRegistroTipo02.append(Util.adicionarZerosEsquedaNumero(
					4, cliente.getIdProfissao().toString()));
		}else if(cliente.getIdRamoAtividade() != null && !cliente.getIdRamoAtividade().equals("")){
			arquivoTextoRegistroTipo02.append(Util.adicionarZerosEsquedaNumero(
					4, cliente.getIdRamoAtividade().toString()));			
		}else {
			arquivoTextoRegistroTipo02.append(Util.adicionarZerosEsquedaNumero(
					4, ""));
		}

		// PESSOA SEXO
		if (cliente.getIdPessoaSexo() != null
				&& !cliente.getIdPessoaSexo().equals("")) {
			arquivoTextoRegistroTipo02.append(Util.adicionarZerosEsquedaNumero(
					1, cliente.getIdPessoaSexo().toString()));
		} else {
			arquivoTextoRegistroTipo02.append(Util.adicionarZerosEsquedaNumero(
					1, ""));
		}

		// NOME DA MÃE
		if (cliente.getNomeMae() != null && !cliente.getNomeMae().equals("")) {
			arquivoTextoRegistroTipo02.append(Util.completaString(cliente
					.getNomeMae(), 50));
		} else {
			arquivoTextoRegistroTipo02.append(Util.completaString("", 50));
		}

		// INDICADOR DE USO
		arquivoTextoRegistroTipo02.append(Util.adicionarZerosEsquedaNumero(1,
				cliente.getIndicadorUso().toString()));

		// TIPO DE ENDEREÇO
		arquivoTextoRegistroTipo02.append(Util.adicionarZerosEsquedaNumero(2,
				cliente.getIdEnderecoTipo().toString()));

		// CÓDIGO DO LOGRADOURO
		arquivoTextoRegistroTipo02.append(Util.adicionarZerosEsquedaNumero(9,
				cliente.getIdLogradouro().toString()));

		// TIPO LOGRADOURO
		arquivoTextoRegistroTipo02.append(Util.completaString(cliente
				.getDsLogradouroTipo(), 20));

		// TÍTULO LOGRADOURO
		arquivoTextoRegistroTipo02.append(Util.completaString(cliente
				.getDsLogradouroTitulo(), 25));

		// NOME LOGRADOURO
		arquivoTextoRegistroTipo02.append(Util.completaString(cliente
				.getDescricaoLogradouro(), 40));

		// CEP
		if (cliente.getCodigoCep() != null
				&& !cliente.getCodigoCep().equals("")) {
			arquivoTextoRegistroTipo02.append(Util.adicionarZerosEsquedaNumero(
					8, cliente.getCodigoCep().toString()));
		} else {
			arquivoTextoRegistroTipo02.append(Util.adicionarZerosEsquedaNumero(
					8, ""));
		}

		// BAIRRO
		if (cliente.getIdBairro() != null && !cliente.getIdBairro().equals("")) {
			arquivoTextoRegistroTipo02.append(Util.adicionarZerosEsquedaNumero(
					4, cliente.getIdBairro().toString()));
			arquivoTextoRegistroTipo02.append(Util.completaString(cliente
					.getNomeBairro(), 30));
		} else {
			arquivoTextoRegistroTipo02.append(Util.adicionarZerosEsquedaNumero(
					4, ""));
			arquivoTextoRegistroTipo02.append(Util.completaString("", 30));
		}

		// REFERÊNCIA
		if (cliente.getIdEnderecoReferencia() != null
				&& !cliente.getIdEnderecoReferencia().equals("")) {
			arquivoTextoRegistroTipo02.append(Util.adicionarZerosEsquedaNumero(
					2, cliente.getIdEnderecoReferencia().toString()));
		} else {
			arquivoTextoRegistroTipo02.append(Util.adicionarZerosEsquedaNumero(
					2, ""));
		}

		// NÚMERO
		if (cliente.getNumeroImovel() != null && !cliente.getNumeroImovel().trim().equals("")) {
			arquivoTextoRegistroTipo02.append(Util.completaString(cliente
					.getNumeroImovel(), 5));
		} else {
			arquivoTextoRegistroTipo02.append(Util.completaString("", 5));
		}

		// COMPLEMENTO
		if (cliente.getComplementoEndereco() != null
				&& !cliente.getComplementoEndereco().equals("")) {
			arquivoTextoRegistroTipo02.append(Util.completaString(cliente
					.getComplementoEndereco(), 25));
		} else {
			arquivoTextoRegistroTipo02.append(Util.completaString("", 25));
		}

		// E_MAIL
		if (cliente.getEmail() != null && !cliente.getEmail().equals("")) {
			arquivoTextoRegistroTipo02.append(Util.completaString(cliente
					.getEmail(), 40));
		} else {
			arquivoTextoRegistroTipo02.append(Util.completaString("", 40));
		}

		// CNAE
		arquivoTextoRegistroTipo02.append(Util.adicionarZerosEsquedaNumero(7,
				""));

		// IMOVEL
		arquivoTextoRegistroTipo02.append(Util.adicionarZerosEsquedaNumero(9,
				idImovel.toString()));

		// CÓDIGO TIPO LOGRADOURO
		if (cliente.getIdLogradouroTipo() != null
				&& !cliente.getIdLogradouroTipo().equals("")) {
			arquivoTextoRegistroTipo02.append(Util.adicionarZerosEsquedaNumero(
					3, cliente.getIdLogradouroTipo().toString()));
		} else {
			arquivoTextoRegistroTipo02.append(Util.adicionarZerosEsquedaNumero(
					3, ""));
		}

		// CÓDIGO TÍTULO LOGRADOURO
		if (cliente.getIdLogradouroTitulo() != null
				&& !cliente.getIdLogradouroTitulo().equals("")) {
			arquivoTextoRegistroTipo02.append(Util.adicionarZerosEsquedaNumero(
					3, cliente.getIdLogradouroTitulo().toString()));
		} else {
			arquivoTextoRegistroTipo02.append(Util.adicionarZerosEsquedaNumero(
					3, ""));
		}

		// CÓDIGO DO MUNICÍPIO
		arquivoTextoRegistroTipo02.append(Util.adicionarZerosEsquedaNumero(4,
				cliente.getIdMunicipio().toString()));

		// NOME MUNICÍPIO
		arquivoTextoRegistroTipo02.append(Util.completaString(cliente
				.getNomeMunicipio(), 30));

		// CÓDIGO DA UNIDADE FEDERAÇÃO
		arquivoTextoRegistroTipo02.append(Util.adicionarZerosEsquedaNumero(2,
				cliente.getIdUinidadeFederacao().toString()));

		// SIGLA DA UNIDADE FEDERAÇÃO
		arquivoTextoRegistroTipo02.append(Util.completaString(cliente
				.getDsUFSiglaMunicipio(), 2));

		arquivoTextoRegistroTipo02.append(System.getProperty("line.separator"));

		return arquivoTextoRegistroTipo02;

	}

	/**
	 * Gerar Arquivo Texto para Atualização Cadastral
	 * 
	 * Registro Tipo 03 - Dados do(s) telefone(s)
	 * 
	 * @author Ana Maria
	 * @date 22/09/2008
	 * 
	 * @param imovel
	 * @throws ControladorException
	 */
	public StringBuilder gerarArquivoTextoRegistroTipo03(
			Collection colecaoClienteFone, Integer idImovel,Integer idCliente)
			throws ControladorException {

		StringBuilder arquivoTextoRegistroTipo03 = new StringBuilder();

		Iterator clienteFoneIterator = colecaoClienteFone.iterator();
		while (clienteFoneIterator.hasNext()) {

			ClienteFoneAtualizacaoCadastral clienteFone = (ClienteFoneAtualizacaoCadastral) clienteFoneIterator
					.next();
			// TIPO DO REGISTRO
			arquivoTextoRegistroTipo03.append("3");

			// TIPO MOVIMENTO
			arquivoTextoRegistroTipo03.append(" ");

			// TIPO DE TELEFONE
			arquivoTextoRegistroTipo03.append(Util.adicionarZerosEsquedaNumero(
					2, clienteFone.getIdFoneTipo().toString()));

			// DDD
			if (clienteFone.getDdd() != null
					&& !clienteFone.getDdd().equals("")) {
				arquivoTextoRegistroTipo03.append(Util
						.adicionarZerosEsquedaNumero(2, clienteFone.getDdd()
								.toString()));
			} else {
				arquivoTextoRegistroTipo03.append(Util
						.adicionarZerosEsquedaNumero(2, ""));
			}

			// NÚMERO DO TELEFONE
			if (clienteFone.getTelefone() != null
					&& !clienteFone.getTelefone().equals("")) {
				arquivoTextoRegistroTipo03.append(Util
						.adicionarZerosEsquedaNumero(8, Util.truncarString(
								clienteFone.getTelefone().toString(), 8)));
			} else {
				arquivoTextoRegistroTipo03.append(Util
						.adicionarZerosEsquedaNumero(8, ""));
			}

			// RAMAL
			if (clienteFone.getRamal() != null
					&& !clienteFone.getRamal().equals("")) {
				arquivoTextoRegistroTipo03.append(Util
						.adicionarZerosEsquedaNumero(4, clienteFone.getRamal()
								.toString()));
			} else {
				arquivoTextoRegistroTipo03.append(Util
						.adicionarZerosEsquedaNumero(4, ""));
			}

			// CLIENTE
			arquivoTextoRegistroTipo03.append(Util.adicionarZerosEsquedaNumero(
					9, idCliente.toString()));
			
			// INDICADOR FONE PARÃO (1 posição)
			arquivoTextoRegistroTipo03.append(clienteFone.getIndicadorFonePadrao());

			arquivoTextoRegistroTipo03.append(System
					.getProperty("line.separator"));
		}

		return arquivoTextoRegistroTipo03;

	}

	/**
	 * Gerar Arquivo Texto para Atualização Cadastral
	 * 
	 * Registro Tipo 04 - Dados Economias e subcategoria
	 * 
	 * @author Ana Maria
	 * @date 23/09/2008
	 * 
	 * @param imovel
	 * @throws ControladorException
	 */
	public StringBuilder gerarArquivoTextoRegistroTipo04(
			Collection colecaoImovelSubcategoria, Integer idImovel)
			throws ControladorException {

		StringBuilder arquivoTextoRegistroTipo04 = new StringBuilder();

		Iterator imovelSubcategoriaIterator = colecaoImovelSubcategoria
				.iterator();
		while (imovelSubcategoriaIterator.hasNext()) {

			ImovelSubcategoriaAtualizacaoCadastral imovelSubcategoria = (ImovelSubcategoriaAtualizacaoCadastral) imovelSubcategoriaIterator
					.next();

			// TIPO DO REGISTRO
			arquivoTextoRegistroTipo04.append("4");

			// TIPO MOVIMENTO
			arquivoTextoRegistroTipo04.append(" ");

			// CÓDIGO DA SUBCATEGORIA
			arquivoTextoRegistroTipo04.append(Util.adicionarZerosEsquedaNumero(
					2, imovelSubcategoria.getIdSubcategoria().toString()));

			// DESCRIÇÃO DA SUBCATEGORIA
			arquivoTextoRegistroTipo04.append(Util.completaString(
					imovelSubcategoria.getDescricaoSubcategoria(), 50));

			// QTD DE ECONOMIAS
			arquivoTextoRegistroTipo04.append(Util.adicionarZerosEsquedaNumero(
					4, new Integer(imovelSubcategoria.getQuantidadeEconomias())
							.toString()));

			// CÓDIGO DA CATEGORIA
			arquivoTextoRegistroTipo04.append(Util.adicionarZerosEsquedaNumero(
					2, imovelSubcategoria.getIdCategoria().toString()));

			// DESCRIÇÃO DA CATEGORIA
			arquivoTextoRegistroTipo04.append(Util.completaString(
					imovelSubcategoria.getDescricaoCategoria(), 15));

			// IMOVEL
			arquivoTextoRegistroTipo04.append(Util.adicionarZerosEsquedaNumero(
					9, idImovel.toString()));

			arquivoTextoRegistroTipo04.append(System
					.getProperty("line.separator"));

		}
		return arquivoTextoRegistroTipo04;
	}

	/**
	 * Gerar Arquivo Texto para Atualização Cadastral
	 * 
	 * Registro Tipo Trailer
	 * 
	 * @author Ana Maria
	 * @date 11/05/2009
	 * 
	 * @param imovel
	 * @throws ControladorException
	 */
	public StringBuilder gerarArquivoTextoRegistroTipoTrailer(
			Integer qtdRegistro) throws ControladorException {

		qtdRegistro = qtdRegistro + 1;

		StringBuilder arquivoTextoRegistroTipoHeader = new StringBuilder();

		// TIPO DO REGISTRO
		arquivoTextoRegistroTipoHeader.append("9");

		// TIPO MOVIMENTO
		arquivoTextoRegistroTipoHeader.append(" ");

		// TOTAL DE REGISTROS GRAVADOS
		arquivoTextoRegistroTipoHeader.append(Util.adicionarZerosEsquedaNumero(
				6, qtdRegistro.toString()));

		return arquivoTextoRegistroTipoHeader;
	}

	/**
	 * 
	 * 
	 * @author bruno
	 * @date 12/01/2009
	 * 
	 * @param indicadorTipoFeriado
	 * @param anoOrigemFeriado
	 * @param anoDestinoFeriado
	 */
	public void espelharFeriados(String indicadorTipoFeriado,
			String anoOrigemFeriado, String anoDestinoFeriado)
			throws ControladorException {

		try {
			// Realizamos a pesquisa para os feriados nacionais
			Collection<NacionalFeriado> nacionais = null;

			// Verificamos de o ano de origem e o ano de destino são iguais
			if (Integer.parseInt(anoDestinoFeriado) <= Integer
					.parseInt(anoOrigemFeriado)) {
				throw new ControladorException(
						"atencao.ano_origem_e_destino_iguais");
			}

			if (indicadorTipoFeriado.equals("1")
					|| indicadorTipoFeriado.equals("3")) {
				// Excluimos os feriados
				repositorioCadastro.excluirFeriadosNacionais(anoDestinoFeriado);

				nacionais = repositorioCadastro
						.pesquisarFeriadosNacionais(anoOrigemFeriado);

				for (NacionalFeriado nacional : nacionais) {
					// [FS0003] - Verificar existência do feriado
					FiltroNacionalFeriado filtro = new FiltroNacionalFeriado();

					filtro
							.adicionarParametro(new ParametroSimples(
									FiltroNacionalFeriado.NOME, nacional
											.getDescricao()));

					Calendar c = GregorianCalendar.getInstance();
					c.setTime(nacional.getData());
					c.set(Calendar.YEAR, Integer.parseInt(anoDestinoFeriado));

					filtro.adicionarParametro(new ParametroSimples(
							FiltroNacionalFeriado.DATA, c.getTime()));

					Collection<NacionalFeriado> colFeriadoEncontrado = repositorioUtil
							.pesquisar(filtro, NacionalFeriado.class.getName());

					if (colFeriadoEncontrado != null
							&& colFeriadoEncontrado.size() > 0) {
						throw new ControladorException(
								"atencao.nacional_feriado_com_data_existente");
					}

					// Colocamos a data do feriado com 1 ano na frente
					nacional.setData(c.getTime());
					nacional.setUltimaAlteracao(new Date());
				}
			}

			// Realizamos a pesquisa para os feriados Municipais
			Collection<MunicipioFeriado> municipais = null;

			if (indicadorTipoFeriado.equals("2")
					|| indicadorTipoFeriado.equals("3")) {

				// Excluimos os feriados
				repositorioCadastro
						.excluirFeriadosMunicipais(anoDestinoFeriado);

				municipais = repositorioCadastro
						.pesquisarFeriadosMunicipais(anoOrigemFeriado);

				for (MunicipioFeriado municipal : municipais) {
					// [FS0003] - Verificar existência do feriado por descrição
					FiltroMunicipioFeriado filtro = new FiltroMunicipioFeriado();

					filtro.adicionarParametro(new ParametroSimples(
							FiltroMunicipioFeriado.NOME, municipal
									.getDescricaoFeriado()));

					Calendar c = GregorianCalendar.getInstance();
					c.setTime(municipal.getDataFeriado());
					c.set(Calendar.YEAR, Integer.parseInt(anoDestinoFeriado));

					filtro.adicionarParametro(new ParametroSimples(
							FiltroMunicipioFeriado.DATA, c.getTime()));

					Collection<MunicipioFeriado> colFeriadoEncontrado = repositorioUtil
							.pesquisar(filtro, MunicipioFeriado.class.getName());

					if (colFeriadoEncontrado != null
							&& colFeriadoEncontrado.size() > 0) {
						throw new ControladorException(
								"atencao.municipio_feriado_com_data_existente");
					}

					municipal.setDataFeriado(c.getTime());
					municipal.setUltimaAlteracao(new Date());
				}
			}

			// [FS0010] Verificar existencia de feriados para o ano de origem
			if ((indicadorTipoFeriado.equals("1") && (nacionais == null || nacionais
					.size() == 0))
					|| (indicadorTipoFeriado.equals("2") && (municipais == null || municipais
							.size() == 0))
					|| (indicadorTipoFeriado.equals("3") && ((nacionais == null || nacionais
							.size() == 0) || (nacionais == null || nacionais
							.size() == 0)))) {
				throw new ControladorException(
						"atencao.ano_origem_sem_feriados");
			}

			// Inserimos os dados
			if (nacionais != null) {
				for (NacionalFeriado nacional : nacionais) {
					repositorioUtil.inserir(nacional);
				}
			}

			if (municipais != null) {
				for (MunicipioFeriado municipal : municipais) {
					repositorioUtil.inserir(municipal);
				}
			}
		} catch (ErroRepositorioException e) {
			throw new ControladorException("erro.sistema", e);
		}
	}

	/**
	 * [UC0880] - Gerar Movimento de Extensao de Contas em Cobranca por Empresa
	 * 
	 * @author Rômulo Aurélio
	 * @date 09/02/2009
	 * 
	 * @param idRota
	 * @param anoMesReferencia
	 * @return boolean
	 * @throws ControladorException
	 */
	public Collection pesquisarLocalidades() throws ControladorException {

		Collection retorno = null;

		try {
			retorno = repositorioCadastro.pesquisarLocalidades();
		} catch (ErroRepositorioException e) {
			throw new ControladorException("erro.sistema", e);
		}

		return retorno;

	}

	/**
	 * [UC0890]Consultar Arquivo Texto Atualização Cadastral
	 * 
	 * @author Ana Maria
	 * @date 04/03/2009
	 * 
	 * @return Collection
	 * @throws ControladorException
	 */
	public Collection pesquisarArquivoTextoAtualizacaoCadastro(
			String idEmpresa, String idLocalidade, String idAgenteComercial,
			String idSituacaoTransmissao) throws ControladorException {

		Collection retorno = new ArrayList();

		Collection<Object[]> colecaoPesquisa = null;

		try {
			colecaoPesquisa = this.repositorioCadastro
					.pesquisarArquivoTextoAtualizacaoCadastro(idEmpresa,
							idLocalidade, idAgenteComercial,
							idSituacaoTransmissao);
		} catch (ErroRepositorioException e) {
			throw new ControladorException("erro.sistema", e);
		}

		if (colecaoPesquisa != null && !colecaoPesquisa.isEmpty()) {

			Iterator itera = colecaoPesquisa.iterator();

			while (itera.hasNext()) {
				Object[] objeto = (Object[]) itera.next();

				ArquivoTextoAtualizacaoCadastral arquivoTexto = new ArquivoTextoAtualizacaoCadastral();

				arquivoTexto.setId((Integer) objeto[0]);
				if (objeto[1] != null) {
					Localidade loc = new Localidade();
					loc.setId((Integer) objeto[1]);
					arquivoTexto.setLocalidade(loc);
				}
				arquivoTexto.setCodigoSetorComercial((Integer) objeto[2]);
				arquivoTexto.setCodigoRota((Integer) objeto[3]);
				arquivoTexto.setDescricaoArquivo((String) objeto[4]);
				arquivoTexto.setQuantidadeImovel((Integer) objeto[5]);
				Leiturista leit = new Leiturista();
				if (objeto[6] != null) {
					Cliente clie = new Cliente();
					clie.setNome((String) objeto[6]);
					leit.setCliente(clie);
				}
				if (objeto[7] != null) {
					Funcionario funcionario = new Funcionario();
					funcionario.setNome((String) objeto[7]);
					leit.setFuncionario(funcionario);
				}
				SituacaoTransmissaoLeitura situacao = new SituacaoTransmissaoLeitura();
				situacao.setDescricaoSituacao((String) objeto[8]);
				arquivoTexto.setSituacaoTransmissaoLeitura(situacao);
				arquivoTexto.setLeiturista(leit);

				retorno.add(arquivoTexto);
			}
		}

		return retorno;
	}

	/**
	 * [UC0890]Consultar Arquivo Texto Atualização Cadastral
	 * 
	 * @author Ana Maria
	 * @date 04/03/2009
	 * 
	 * @return Collection
	 * @throws ControladorException
	 */
	public ArquivoTextoAtualizacaoCadastral pesquisarArquivoTextoAtualizacaoCadastro(
			String idArquivoTxt) throws ControladorException {

		ArquivoTextoAtualizacaoCadastral retorno = null;

		try {
			retorno = this.repositorioCadastro
					.pesquisarArquivoTextoAtualizacaoCadastro(idArquivoTxt);
		} catch (ErroRepositorioException e) {
			throw new ControladorException("erro.sistema", e);
		}

		return retorno;
	}

	/**
	 * 
	 * [UC0890]Consultar Arquivo Texto Atualização Cadastral
	 * 
	 * @author Ana Maria
	 * @date 05/03/2009
	 * 
	 * @return void
	 * @throws ControladorException
	 */
	public void atualizarArquivoTextoAtualizacaoCadstral(Integer idArquivoTxt)
			throws ControladorException {

		try {
			this.repositorioCadastro.atualizarArquivoTextoAtualizacaoCadstral(
					idArquivoTxt, SituacaoTransmissaoLeitura.EM_CAMPO);
		} catch (ErroRepositorioException e) {
			throw new ControladorException("erro.sistema", e);
		}
	}

	/**
	 * Método para verificar o Cliente é um funcionário
	 * 
	 * @author Vinicius Medeiros
	 * @date 08/04/2009
	 * 
	 * @param idCliente
	 * @return
	 * @throws ControladorException
	 */

	public Integer clienteSelecionadoFuncionario(Integer idCliente)
			throws ControladorException {

		try {
			return this.repositorioCadastro
					.verificarClienteSelecionadoFuncionario(idCliente);
		} catch (ErroRepositorioException e) {
			throw new ControladorException("erro.sistema", e);
		}

	}

	/**
	 * [UC0024] Inserir Quadra
	 * 
	 * @author Raphael Rossiter
	 * @date 03/04/2009
	 * 
	 * @param quadraFaceNova
	 * @param colecaoQuadraFace
	 * @throws ControladorException
	 */
	public void validarQuadraFace(QuadraFace quadraFaceNova,
			Collection colecaoQuadraFace, boolean verificarExistencia)
			throws ControladorException {

		/*
		 * Bacia (Caso o Indicador de Rede de Esgoto seja com rede de esgoto ou
		 * rede de esgoto parcial deve ser informado; caso contrário, não
		 * informar
		 */
		if (quadraFaceNova.getIndicadorRedeEsgoto() != null
				&& (quadraFaceNova.getIndicadorRedeEsgoto().equals(
						QuadraFace.COM_REDE) || quadraFaceNova
						.getIndicadorRedeEsgoto().equals(QuadraFace.PARCIAL))
				&& quadraFaceNova.getBacia() == null) {

			throw new ControladorException("atencao.campo.informada", null,
					"Bacia");
		}

		/*
		 * Distrito Operacional (Caso o Indicador de Rede de Água seja com rede
		 * de água ou rede de água parcial deve ser informado; caso contrário,
		 * não informar).
		 */
		if (quadraFaceNova.getIndicadorRedeAgua() != null
				&& (quadraFaceNova.getIndicadorRedeAgua().equals(
						QuadraFace.COM_REDE) || quadraFaceNova
						.getIndicadorRedeAgua().equals(QuadraFace.PARCIAL))
				&& quadraFaceNova.getDistritoOperacional() == null) {

			throw new ControladorException("atencao.campo.informado", null,
					"Distrito Operacional");
		}

		if (verificarExistencia) {

			// [FS0013] - Verificar existência da face da quadra
			if (colecaoQuadraFace != null && !colecaoQuadraFace.isEmpty()) {

				Iterator it = colecaoQuadraFace.iterator();

				while (it.hasNext()) {

					QuadraFace quadraFaceJaCadastrada = (QuadraFace) it.next();

					if (quadraFaceJaCadastrada.getNumeroQuadraFace().equals(
							quadraFaceNova.getNumeroQuadraFace())) {

						throw new ControladorException(
								"atencao.quadra_face_ja_informada", null,
								quadraFaceNova.getNumeroQuadraFace().toString());
					}
				}
			}
		}
	}

	/**
	 * Pesquisa a Quadra Face atraves da quadra associada
	 * 
	 * Autor: Arthur Carvalho
	 * 
	 * Data: 28/04/2009
	 */
	public Collection<Object[]> pesquisarQuadraFaceAssociadaQuadra(
			Integer idQuadra) throws ControladorException {

		Collection<Object[]> quadraFace = null;

		try {
			quadraFace = repositorioCadastro
					.pesquisarQuadraFaceAssociadaQuadra(idQuadra);
		} catch (ErroRepositorioException e) {
			throw new ControladorException("erro.sistema", e);
		}

		return quadraFace;
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see gcom.cadastro.ControladorCadastroLocal#validarSeClienteEhPessoaJuridica(Cliente)
	 */
	public void validarSeClienteEhPessoaJuridica(Cliente cliente)
			throws ControladorException {

		if (cliente == null)
			throw new ControladorException("atencao.cliente.inexistente");

		if (cliente.getClienteTipo() == null)
			throw new ControladorException("atencao.cliente.tipo.inexistente");

		if (!cliente.getClienteTipo().getIndicadorPessoaFisicaJuridica()
				.equals(ClienteTipo.INDICADOR_PESSOA_JURIDICA))
			throw new ControladorException(
					"atencao.cliente.tipo.pessoa_juridica");

	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see gcom.cadastro.ControladorCadastroLocal#validarSeDebitoTipoNaoEhGeradoAutomaticamente(DebitoTipo)
	 */
	public void validarSeDebitoTipoNaoEhGeradoAutomaticamente(
			DebitoTipo debitoTipo) throws ControladorException {

		if (debitoTipo == null)
			throw new ControladorException("atencao.debito_tipo.inexistente");

		if (!debitoTipo.getIndicadorGeracaoAutomatica().equals(
				ConstantesSistema.SIM))
			throw new ControladorException(
					"atencao.debito_tipo.gerado_automaticamente");

	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see gcom.cadastro.ControladorCadastroLocal#validarPreExistenciaEntidadeBeneficente(EntidadeBeneficente)
	 */
	public void validarPreExistenciaEntidadeBeneficente(
			EntidadeBeneficente entidadeBeneficente)
			throws ControladorException {

		if (entidadeBeneficente == null)
			throw new ControladorException("atencao.debito_tipo.inexistente");

		Cliente cliente = entidadeBeneficente.getCliente();

		if (cliente == null)
			throw new ControladorException("atencao.cliente.inexistente");

		FiltroEntidadeBeneficente filtroEntidadeBeneficente = new FiltroEntidadeBeneficente();
		filtroEntidadeBeneficente.adicionarParametro(new ParametroSimples(
				FiltroEntidadeBeneficente.ID_CLIENTE, cliente.getId()));

		Collection<EntidadeBeneficente> entidadesDoMesmoCliente = getControladorUtil()
				.pesquisar(filtroEntidadeBeneficente,
						EntidadeBeneficente.class.getName());

		if (entidadesDoMesmoCliente != null
				&& !entidadesDoMesmoCliente.isEmpty()) {

			FiltroCliente filtroCliente = new FiltroCliente();
			filtroCliente.adicionarParametro(new ParametroSimples(
					FiltroCliente.ID, cliente.getId()));

			cliente = (Cliente) Util
					.retonarObjetoDeColecao(getControladorUtil().pesquisar(
							filtroCliente, Cliente.class.getName()));

			throw new ControladorException(
					"atencao.entidade_beneficente.cliente.pre_existente", null,
					cliente.getNome());
		}

	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see gcom.cadastro.ControladorCadastroLocal#inserirEntidadeBeneficente(EntidadeBeneficente)
	 */
	public Integer inserirEntidadeBeneficente(
			EntidadeBeneficente entidadeBeneficente)
			throws ControladorException {
		Integer retorno = null;

		Cliente cliente = entidadeBeneficente.getCliente();

		if (cliente.getId() != null && !new Integer(0).equals(cliente.getId())) {
			FiltroCliente filtroCliente = new FiltroCliente();

			filtroCliente.adicionarParametro(new ParametroSimples(
					FiltroCliente.ID, cliente.getId()));
			filtroCliente
					.adicionarCaminhoParaCarregamentoEntidade("clienteTipo");

			Collection colecaoCliente = getControladorUtil().pesquisar(
					filtroCliente, Cliente.class.getName());

			// [FS0001] - Verificar existência do cliente
			if (colecaoCliente == null || colecaoCliente.isEmpty()) {
				throw new ControladorException("atencao.cliente.inexistente",
						null, "Cliente");
			} else {
				Cliente clienteEncontrado = (Cliente) Util
						.retonarObjetoDeColecao(colecaoCliente);

				// [FS0002] - Verificar se cliente é pessoa jurídica
				validarSeClienteEhPessoaJuridica(clienteEncontrado);

			}
		} else {
			throw new ControladorException("atencao.cliente.inexistente", null,
					"Cliente");
		}

		DebitoTipo debitoTipo = entidadeBeneficente.getDebitoTipo();

		if (debitoTipo.getId() != null
				&& !new Integer(0).equals(debitoTipo.getId())) {

			FiltroDebitoTipo filtroDebitoTipo = new FiltroDebitoTipo();
			filtroDebitoTipo.adicionarParametro(new ParametroSimples(
					FiltroDebitoTipo.ID, debitoTipo.getId()));

			Collection colecaoDebitoTipo = getControladorUtil().pesquisar(
					filtroDebitoTipo, DebitoTipo.class.getName());

			// [FS0003] - Verificar existência do tipo de débito
			if (colecaoDebitoTipo == null || colecaoDebitoTipo.isEmpty()) {
				throw new ControladorException(
						"atencao.debito_tipo.inexistente", null,
						"Tipo de Débito");
			} else {
				DebitoTipo debitoTipoEncontrado = (DebitoTipo) Util
						.retonarObjetoDeColecao(colecaoDebitoTipo);

				// [FS0004] Verificar se tipo de débito não é gerado
				// automaticamente
				validarSeDebitoTipoNaoEhGeradoAutomaticamente(debitoTipoEncontrado);

			}
		} else {
			throw new ControladorException("atencao.debito_tipo.inexistente",
					null, "Tipo de Débito");
		}

		Empresa empresa = entidadeBeneficente.getEmpresa();

		if (empresa == null || empresa.getId() == null
				|| new Integer(0).equals(empresa.getId()))
			throw new ControladorException("atencao.campo_texto.obrigatorio",
					null, "Empresa");

		// [FS0006] - Verificar pré-existência da entidade beneficente
		validarPreExistenciaEntidadeBeneficente(entidadeBeneficente);

		// Toda entidade beneficente é inserida por padrão como ativa
		entidadeBeneficente
				.setIndicadorUso(ConstantesSistema.INDICADOR_USO_ATIVO);

		retorno = (Integer) getControladorUtil().inserir(entidadeBeneficente);

		return retorno;
	}

	/**
	 * [UC0842] Inserir Funcionário
	 * 
	 * @author Raphael Rossiter
	 * @date 17/06/2009
	 * 
	 * @param funcionario
	 * @param acao ->
	 *            INSERIR = TRUE, ATUALIZAR = FALSE
	 * @throws ControladorException
	 */
	public void validarFuncionario(Funcionario funcionario, boolean acao)
			throws ControladorException {

		FiltroFuncionario filtroFuncionario = new FiltroFuncionario();
		Funcionario funcionarioJaCadastrado = null;

		if (acao) {

			// MATRÍCULA
			filtroFuncionario.adicionarParametro(new ParametroSimples(
					FiltroFuncionario.ID, funcionario.getId().toString()));

			// Pesquisa se existe algum funcionario com a matricula informada

			Collection colecaoFuncionarioMatricula = getControladorUtil()
					.pesquisar(filtroFuncionario, Funcionario.class.getName());

			if (colecaoFuncionarioMatricula != null
					&& !colecaoFuncionarioMatricula.isEmpty()) {

				throw new ControladorException(
						"atencao.funcionario_matricula_ja_existente");

			}

		}

		// NOME
		if (funcionario.getNome() == null
				|| funcionario.getNome().equalsIgnoreCase("")) {
			throw new ControladorException("atencao.required", null, "Nome");
		}

		// CPF
		if (funcionario.getNumeroCpf() != null
				&& !funcionario.getNumeroCpf().equals("")) {

			// CPF INVÁLIDO
			if (!Util.validacaoCPF(funcionario.getNumeroCpf())) {

				throw new ControladorException("atencao.cpf_invalido");
			}

			// CPF JÁ CADASTRADO
			filtroFuncionario.limparListaParametros();

			filtroFuncionario.adicionarParametro(new ParametroSimples(
					FiltroFuncionario.NUMERO_CPF, funcionario.getNumeroCpf()));

			Collection colecaoFuncionario = this.getControladorUtil()
					.pesquisar(filtroFuncionario, Funcionario.class.getName());

			if (colecaoFuncionario != null && !colecaoFuncionario.isEmpty()) {

				funcionarioJaCadastrado = (Funcionario) colecaoFuncionario
						.iterator().next();

				if (acao) {

					// VALIDAÇÃO PARA INSERIR FUNCIONÁRIO
					throw new ControladorException(
							"atencao.cpf.funcionario.ja_cadastrado", null, ""
									+ funcionarioJaCadastrado.getId());
				} else if (funcionarioJaCadastrado.getId().intValue() != funcionario
						.getId().intValue()) {

					// VALIDAÇÃO PARA ATUALIZAR FUNCIONÁRIO
					throw new ControladorException(
							"atencao.cpf.funcionario.ja_cadastrado", null, ""
									+ funcionarioJaCadastrado.getId());
				}

			}
		}

		// DATA DE NASCIMENTO
		if (funcionario.getDataNascimento() != null
				&& !funcionario.getDataNascimento().equals("")) {

			int idadeFuncionario = Util.anosEntreDatas(funcionario
					.getDataNascimento(), new Date());

			if (idadeFuncionario < ConstantesSistema.IDADE_MINIMA_FUNCIONARIO) {

				throw new ControladorException(
						"atencao.funcionario_idade_minima");
			}
		}

		// CARGO
		if (funcionario.getFuncionarioCargo() != null
				&& funcionario.getFuncionarioCargo().getId().toString()
						.equalsIgnoreCase(
								"" + ConstantesSistema.NUMERO_NAO_INFORMADO)) {

			throw new ControladorException("atencao.required", null, "Cargo");

		}

		// EMPRESA
		if (funcionario.getEmpresa() != null
				&& funcionario.getEmpresa().getId().toString()
						.equalsIgnoreCase(
								"" + ConstantesSistema.NUMERO_NAO_INFORMADO)) {

			throw new ControladorException("atencao.required", null, "Empresa");

		}

		// VERIFICANDO SE O USUÁRIO JÁ FOI CADASTRADO
		filtroFuncionario.limparListaParametros();

		filtroFuncionario.adicionarParametro(new ParametroSimples(
				FiltroFuncionario.NOME, funcionario.getNome()));

		filtroFuncionario.adicionarParametro(new ParametroSimples(
				FiltroFuncionario.UNIDADE_EMPRESA, funcionario.getEmpresa()
						.getId().toString()));

		filtroFuncionario.adicionarParametro(new ParametroSimples(
				FiltroFuncionario.UNIDADE_ORGANIZACIONAL_ID, funcionario
						.getUnidadeOrganizacional().getId().toString()));

		Collection colecaoFuncionario = getControladorUtil().pesquisar(
				filtroFuncionario, Funcionario.class.getName());

		if (colecaoFuncionario != null && !colecaoFuncionario.isEmpty()) {

			funcionarioJaCadastrado = (Funcionario) colecaoFuncionario
					.iterator().next();

			if (acao) {

				throw new ControladorException(
						"atencao.funcionario_ja_existente");
			} else if (funcionarioJaCadastrado.getId().intValue() != funcionario
					.getId().intValue()) {

				throw new ControladorException(
						"atencao.funcionario_ja_existente");
			}
		}
	}

	/**
	 * [UC0830] Gerar Tabelas para Atualização Cadastral via celular
	 * 
	 * @author Ana Maria
	 * @date 22/06/2009
	 * 
	 * @return Collection<Object[]>
	 * @throws ErroRepositorioException
	 */

	public Collection<Integer> pesquisarSetorComercialGeracaoTabelasTemporarias(
			ImovelGeracaoTabelasTemporariasCadastroHelper helper)
			throws ControladorException {

		Collection<Integer> idsSetor = null;

		try {
			idsSetor = repositorioCadastro
					.pesquisarSetorComercialGeracaoTabelasTemporarias(helper);
		} catch (ErroRepositorioException e) {
			throw new ControladorException("erro.sistema", e);
		}

		return idsSetor;
	}

	/**
	 * [UC0830] Gerar Tabelas para Atualização Cadastral via celular
	 * 
	 * @author Ana Maria
	 * @date 22/06/2009
	 * 
	 * @return Collection<Object[]>
	 * @throws ErroRepositorioException
	 */

	public Collection<Integer> obterIdsImovelGeracaoTabelasTemporarias(
			ImovelGeracaoTabelasTemporariasCadastroHelper helper)
			throws ControladorException {
		Collection colecaoIdsImovel = new ArrayList();

		try {

			colecaoIdsImovel = repositorioCadastro
					.obterIdsImovelGeracaoTabelasTemporarias(null, helper);

			if (helper.getImovelSituacao() != null
					&& new Integer(helper.getImovelSituacao()) == 2) {
				colecaoIdsImovel = repositorioCadastro
						.pesquisarImovelDebitoAtualizacaoCadastral(colecaoIdsImovel);
			}

		} catch (ErroRepositorioException e) {
			throw new ControladorException("erro.sistema", e);
		}

		return colecaoIdsImovel;
	}

	/**
	 * [UC0912] Gerar Boletim de Custo Atualização Cadastral
	 * 
	 * @author Vivianne Sousa
	 * @date 25/06/2009
	 * 
	 * @param idEmpresa
	 * @param data
	 * @throws ControladorException
	 */
	public Object[] gerarBoletimCustoAtualizacaoCadastral(Empresa empresa,
			Date dataAtualizacaoInicio, Date dataAtualizacaoFim)
			throws ControladorException {

		try {

			Object[] retorno = new Object[2];
			// TreeMap<AtributosBoletimChaveHelper, AtributosBoletimHelper>
			// 3. O sistema obtém os dados do contrato com a empresa
			EmpresaContratoCadastro empresaContratoCadastro = repositorioCadastro
					.pesquisarEmpresaContratoCadastro(empresa.getId());

			// [FS0001 ? Verificar existência de contrato vigente para a
			// empresa].
			if (empresaContratoCadastro == null) {
				throw new ControladorException(
						"atencao.nao_existe_contrato_vigente_empresa", null,
						empresa.getDescricao());
			}

			// 4. O sistema seleciona os atributos que compõem o boletim
			// (a partir da tabela ATRIBUTO ordenando pelo grupo do atributo
			// (ATGR_ID) e pela ordem de emissão (ATRB_NNORDEMEMISSAO)).
			Collection colecaoAtributos = repositorioCadastro
					.pesquisarAtributosBoletim();
			Iterator iterAtributos = colecaoAtributos.iterator();

			// 5. O sistema cria uma Lista de Atributos do Boletim e atribui
			// valores aos campos da lista
			TreeMap<AtributosBoletimChaveHelper, AtributosBoletimHelper> mapAtributosBoletim = new TreeMap();

			// 5.7. Quantidade de Atualizações do Atributo (valor zero).
			Integer quantidadeAtualizacaoAtributo = 0;

			while (iterAtributos.hasNext()) {

				Atributo atributo = (Atributo) iterAtributos.next();

				// 5.6. Valor de Atualização do Atributo
				// (ECCA_VLATUALIZACAO da tabela
				// EMPRESA_CONTRATO_CADASTRO_ATRIBUTO
				// com ATRB_ID=ATRB_ID da tabela ATRIBUTO e ECCD_ID=ECCD_ID da
				// tabela EMPRESA_CONTRATO_CADASTRO);
				BigDecimal valorAtualizacaoAtributo = repositorioCadastro
						.pesquisarValorAtualizacaoAtributo(atributo.getId(),
								empresaContratoCadastro.getId());

				AtributosBoletimChaveHelper chave = new AtributosBoletimChaveHelper(
						atributo.getId(), atributo.getAtributoGrupo().getId(),
						atributo.getNumeroOrdemEmissao());

				AtributosBoletimHelper atributosBoletim = new AtributosBoletimHelper(
						atributo, valorAtualizacaoAtributo,
						quantidadeAtualizacaoAtributo);

				mapAtributosBoletim.put(chave, atributosBoletim);

			}

			// 6. O sistema seleciona as operações efetuadas pela empresa no
			// período informado e com imóvel associado
			// [SB0001 ? Selecionar Operações Efetuadas com Imóvel Associado].
			Collection colecaoOperacoesEfetuadasComImovelAssociado = repositorioCadastro
					.pesquisarOperacoesEfetuadasComImovelAssociado(
							dataAtualizacaoInicio, dataAtualizacaoFim, empresa
									.getId());

			// 7. O sistema seleciona as operações efetuadas pela empresa no
			// período informado e sem imóvel associado
			// [SB0002 ? Selecionar Operações Efetuadas sem Imóvel Associado].
			Collection colecaoOperacoesEfetuadasSemImovelAssociado = repositorioCadastro
					.pesquisarOperacoesEfetuadasSemImovelAssociado(
							dataAtualizacaoInicio, dataAtualizacaoFim, empresa
									.getId());

			// 8. Caso as seleções não retornem nenhum registro,
			// o sistema deverá exibir a mensagem "A pesquisa não retornou
			// nenhum resultado" e retornar para a tela de parâmetros.
			// 9.2. Atribui à lista as operações efetuadas sem imóvel associado.
			// Neste caso, o Conteúdo do Argumento deve corresponder ao conteúdo
			// do segundo argumento (TBLA_ID2).
			if ((colecaoOperacoesEfetuadasComImovelAssociado == null || colecaoOperacoesEfetuadasComImovelAssociado
					.isEmpty())
					&& (colecaoOperacoesEfetuadasSemImovelAssociado == null || colecaoOperacoesEfetuadasSemImovelAssociado
							.isEmpty())) {
				throw new ControladorException(
						"atencao.pesquisa.nenhumresultado");
			}

			// 9. O sistema cria uma Lista de Operações Efetuadas a partir das
			// seleções realizadas:
			// 9.1. Atribui à lista as operações efetuadas com imóvel associado.
			// 9.2. Atribui à lista as operações efetuadas sem imóvel associado.
			Collection colecaoOperacoesEfetuadas = new ArrayList();
			if (colecaoOperacoesEfetuadasComImovelAssociado != null
					&& !colecaoOperacoesEfetuadasComImovelAssociado.isEmpty()) {
				colecaoOperacoesEfetuadas
						.addAll(colecaoOperacoesEfetuadasComImovelAssociado);
			}
			if (colecaoOperacoesEfetuadasSemImovelAssociado != null
					&& !colecaoOperacoesEfetuadasSemImovelAssociado.isEmpty()) {
				colecaoOperacoesEfetuadas
						.addAll(colecaoOperacoesEfetuadasSemImovelAssociado);
			}

			// 10. ordena a Lista de Operações Efetuadas pelos campos Conteúdo
			// do Argumento e Identificador do Atributo (ATRB_ID).
			Collections.sort((List) colecaoOperacoesEfetuadas,
					new Comparator() {

						public int compare(Object a, Object b) {

							int retorno = 0;
							OperacoesEfetuadasHelper helper1 = (OperacoesEfetuadasHelper) a;
							OperacoesEfetuadasHelper helper2 = (OperacoesEfetuadasHelper) b;

							if (helper1.getArgumento().compareTo(
									helper2.getArgumento()) == 0) {

								retorno = helper1
										.getId2TabelaLinhaAlteracao()
										.compareTo(
												helper2
														.getId2TabelaLinhaAlteracao());

							} else {
								retorno = helper1.getArgumento().compareTo(
										helper2.getArgumento());
							}
							return retorno;

						}
					});

			BigDecimal valorVisita = empresaContratoCadastro.getValorVisita();
			Integer argumentoAnterior = null;
			Integer argumento = null;

			Collection colecaoOperacoesEfetuadasArgumento = new ArrayList();

			Integer numeroImoveisAtualizados = 0;

			// 11.4. Enquanto houver operações na Lista de Operações Efetuadas
			// para serem processadas:
			Iterator iterOperacoesEfetuadas = colecaoOperacoesEfetuadas
					.iterator();
			while (iterOperacoesEfetuadas.hasNext()) {

				OperacoesEfetuadasHelper operacoesEfetuadas = (OperacoesEfetuadasHelper) iterOperacoesEfetuadas
						.next();

				// quando for a primeira vez
				if (argumentoAnterior == null) {
					argumentoAnterior = operacoesEfetuadas.getArgumento();
				}
				argumento = operacoesEfetuadas.getArgumento();

				// mudou o argumento
				if (argumentoAnterior.compareTo(argumento) != 0) {

					// cria uma Lista de Atributos por Argumento e acumula os
					// valores na Lista de Atributos do Boletim
					processaAtributosArgumentoEAcumulaValores(
							colecaoOperacoesEfetuadasArgumento,
							mapAtributosBoletim, valorVisita);

					// 11.4.1. Número de Imóveis Atualizados = Número de Imóveis
					// Atualizados mais um.
					numeroImoveisAtualizados++;

					argumentoAnterior = operacoesEfetuadas.getArgumento();
					colecaoOperacoesEfetuadasArgumento.clear();
				}

				colecaoOperacoesEfetuadasArgumento.add(operacoesEfetuadas);
			}
			// ultimo argumento
			// cria uma Lista de Atributos por Argumento e acumula os valores na
			// Lista de Atributos do Boletim
			processaAtributosArgumentoEAcumulaValores(
					colecaoOperacoesEfetuadasArgumento, mapAtributosBoletim,
					valorVisita);
			numeroImoveisAtualizados++;

			retorno[0] = mapAtributosBoletim;
			retorno[1] = numeroImoveisAtualizados;

			return retorno;

		} catch (ErroRepositorioException ex) {
			throw new ControladorException("erro.sistema", ex);
		}

	}

	/**
	 * [UC0912] Gerar Boletim de Custo Atualização Cadastral
	 * 
	 * cria uma Lista de Atributos por Argumento e acumula os valores na Lista
	 * de Atributos do Boletim
	 * 
	 * @author Vivianne Sousa
	 * @date 25/06/2009
	 */
	public void processaAtributosArgumentoEAcumulaValores(
			Collection colecaoOperacoesEfetuadasArgumento,
			TreeMap<AtributosBoletimChaveHelper, AtributosBoletimHelper> mapAtributosBoletim,
			BigDecimal valorVisita) {

		AtributosBoletimHelper atributosArgumento = null;
		BigDecimal valorAtualizacoesArgumento = BigDecimal.ZERO;
		Collection<AtributosBoletimHelper> colecaoAtributosPorArgumento = new ArrayList();
		Iterator iterOperacoesEfetuadasArgumento = colecaoOperacoesEfetuadasArgumento
				.iterator();

		while (iterOperacoesEfetuadasArgumento.hasNext()) {
			OperacoesEfetuadasHelper operacoesEfetuadasArgumento = (OperacoesEfetuadasHelper) iterOperacoesEfetuadasArgumento
					.next();
			// System.out.println("-----" +
			// operacoesEfetuadasArgumento.getArgumento());

			// 11.3.4. Para cada atributo da Lista de Atributos por Argumento, o
			// sistema obtém o valor da atualização por atributo
			BigDecimal valorAtualizacaoAtributo = operacoesEfetuadasArgumento
					.getValorAtualizacaoAtributo();

			// 11.3.5. Valor das Atualizações Efetuadas para o Argumento =
			// somatório de Valor de Atualização do Atributo do Argumento.
			valorAtualizacoesArgumento = valorAtualizacoesArgumento
					.add(valorAtualizacaoAtributo);

			// 11.3.2.1. Identificador do Atributo do Argumento = ATRB_ID;
			// 11.3.2.2. Quantidade de Atualizações do Atributo do Argumento =
			// um (1).
			atributosArgumento = new AtributosBoletimHelper(
					operacoesEfetuadasArgumento
							.getAtributosBoletimChaveHelper().getIdAtributo(),
					valorAtualizacaoAtributo, 1, operacoesEfetuadasArgumento
							.getAtributosBoletimChaveHelper());

			colecaoAtributosPorArgumento.add(atributosArgumento);

		}

		AtributosBoletimChaveHelper chave = null;
		// 11.3.6.1. Caso o Valor das Atualizações Efetuadas para o Argumento
		// não atinja o valor mínimo
		// (Valor das Atualizações Efetuadas para o Argumento menor que
		// ECCD_VLVISITA da tabela EMPRESA_CONTRATO_CADASTRO)
		// if(valorAtualizacoesArgumento.compareTo(valorVisita) < 0){
		// //11.3.6.1.1. Quantidade de Atualizações do Atributo da Lista
		// //de Atributos do Boletim para o atributo de visita
		// //(Identificador do Atributo da Lista de Atributos do Boletim com
		// Indicador de Visita=1)
		// //= Quantidade de Atualizações do Atributo da Lista de Atributos do
		// Boletim para o atributo de visita
		// //(Identificador do Atributo da Lista de Atributos do Boletim com
		// Indicador de Visita=1) mais um (1).
		// chave = AtributosBoletimChaveHelper.NOTIFICACAO_VISITA;
		//			
		// AtributosBoletimHelper AtributosBoletimAlterar =
		// mapAtributosBoletim.get(chave);
		//			
		// int quantidade =
		// AtributosBoletimAlterar.getQuantidadeAtualizacaoAtributo().intValue()
		// + 1;
		//			
		// AtributosBoletimAlterar.setQuantidadeAtualizacaoAtributo(quantidade);
		//
		// }else{
		// 11.3.6.2. Caso contrário, para cada atributo da Lista de Atributos
		// por Argumento:
		// 11.3.6.2.1. Quantidade de Atualizações do Atributo da Lista
		// de Atributos do Boletim para o atributo (Identificador do Atributo do
		// Argumento)
		// = Quantidade de Atualizações do Atributo da Lista de Atributos do
		// Boletim para o atributo
		// (Identificador do Atributo do Argumento) mais Quantidade de
		// Atualizações do Atributo do Argumento

		Iterator iterAtributosPorArgumento = colecaoAtributosPorArgumento
				.iterator();
		while (iterAtributosPorArgumento.hasNext()) {
			AtributosBoletimHelper atribBoletim = (AtributosBoletimHelper) iterAtributosPorArgumento
					.next();
			chave = atribBoletim.getAtributosBoletimChaveHelper();

			AtributosBoletimHelper AtributosBoletimAlterar = mapAtributosBoletim
					.get(chave);

			int quantidade = AtributosBoletimAlterar
					.getQuantidadeAtualizacaoAtributo().intValue()
					+ atribBoletim.getQuantidadeAtualizacaoAtributo()
							.intValue();

			AtributosBoletimAlterar
					.setQuantidadeAtualizacaoAtributo(quantidade);

		}
		// }

	}

	/**
	 * [UC0925] Emitir Boletos
	 * 
	 * @author Rômulo Aurélio / Analista: Rafael Pinto
	 * @date 25/11/2009
	 */
	public void emitirBoletos(Integer idFuncionalidadeIniciada,Integer grupo, Integer entidadeBeneficente)throws ControladorException{
        
        int idUnidadeIniciada = 0;
       
        try {
	        /*
	         * Registrar o início do processamento da Unidade de
	         * Processamento do Batch
	        */
        	idUnidadeIniciada = getControladorBatch().iniciarUnidadeProcessamentoBatch(idFuncionalidadeIniciada,UnidadeProcessamento.FUNCIONALIDADE,0);
            
    		boolean flagFimPesquisa = false;
    		final int quantidadeCobrancaDocumento = 1000;
    		int quantidadeInicio = 0;
    		StringBuilder boletoTxt = new StringBuilder();

    		System.out.println("***************************************");
    		System.out.println("EMITIR BOLETOS");
    		System.out.println("***************************************");
    		
    		SistemaParametro sistemaParametro = getControladorUtil().pesquisarParametrosDoSistema();
    		
    		FiltroEntidadeBeneficente filtroEntidadeBeneficente = new FiltroEntidadeBeneficente();
    		filtroEntidadeBeneficente.adicionarCaminhoParaCarregamentoEntidade(FiltroEntidadeBeneficente.DEBITO_TIPO);
    		filtroEntidadeBeneficente.adicionarCaminhoParaCarregamentoEntidade(FiltroEntidadeBeneficente.CLIENTE);
    		
    		Collection colecaoEntidadeBeneficente = this.getControladorUtil().pesquisar(filtroEntidadeBeneficente, 
    		EntidadeBeneficente.class.getName());
    		
    		EntidadeBeneficente entidadeBeneficenteObjeto = (EntidadeBeneficente) Util.retonarObjetoDeColecao(colecaoEntidadeBeneficente);
    		
    		while (!flagFimPesquisa) {
    			Collection dadosBoleto = repositorioCadastro.pesquisarDadosBoleto(
    					quantidadeInicio,grupo,sistemaParametro.getNomeAbreviadoEmpresa());
    			
    			if(dadosBoleto != null && !dadosBoleto.isEmpty()){
    				
    				Iterator iterDadosBoleto = dadosBoleto.iterator();
            		

					if (dadosBoleto.size() < quantidadeCobrancaDocumento) {
						flagFimPesquisa = true;
					} else {
						quantidadeInicio = quantidadeInicio + 1000;
					}
    				
					System.out.println("***************************************");
					System.out.println("QUANTIDADE :" + dadosBoleto.size());
					System.out.println("***************************************");
					
            		while (iterDadosBoleto.hasNext()) {
            			DadosBoletoHelper helper = (DadosBoletoHelper) iterDadosBoleto.next();
            			
        				//1.1 Inscrição
        				boletoTxt.append(Util.completaString(helper.getImovel().getInscricaoFormatada(), 20));
        				
        				//1.2 Matrícula Imóvel
        				String matriculaStr = Util.adicionarZerosEsquedaNumero(9, "" + helper.getImovel().getId()); 
        				boletoTxt.append(matriculaStr.substring(0,8) + "." + matriculaStr.substring(8,9));
        				
        				//1.3 Nome Cliente Usuário
        				boletoTxt.append(Util.completaString(helper.getNomeCliente(), 40));
            							
        				//1.4 Endereço do Imóvel
        				String endereco = getControladorEndereco().pesquisarEnderecoFormatado(helper.getImovel().getId());
        				boletoTxt.append(Util.completaString(endereco, 60));				
            							
            			//1.5 Grupo de Faturamento
        				boletoTxt.append(Util.adicionarZerosEsquedaNumero(2,helper.getIdGrupoFaturamento().toString()));	
        				
        				//1.6 Empresa
        				boletoTxt.append(helper.getIdEmpresa().toString());	
            							
            							
            			//1.7 Representação Numérica do Código de Barras
        				//1.8 Código de Barras
        				
        				BigDecimal valorCodigoBarras = pesquisarValorSugeridoDebitoTipo(entidadeBeneficenteObjeto.getDebitoTipo().getId());
            										
        				String representacaoNumericaCodBarra = "";

        				// Obtém a representação numérica do código de barra
        				representacaoNumericaCodBarra = this.getControladorArrecadacao().obterRepresentacaoNumericaCodigoBarra(
        								4,
        								valorCodigoBarras,
        								helper.getImovel().getLocalidade().getId(),
        								helper.getImovel().getId(),
        								null,
        								null,
        								entidadeBeneficenteObjeto.getDebitoTipo().getId(),
        								"" + Util.getAno(new Date()),
        								null,
        								null,
        								null,
        								null,
        								null);

        				// Formata a representação númerica do código de barras
        				String representacaoNumericaCodBarraFormatada = representacaoNumericaCodBarra.substring(0, 11)
        						+ " " + representacaoNumericaCodBarra.substring(11, 12)
        						+ " " + representacaoNumericaCodBarra.substring(12, 23)
        						+ " " + representacaoNumericaCodBarra.substring(23, 24)
        						+ " " + representacaoNumericaCodBarra.substring(24, 35)
        						+ " " + representacaoNumericaCodBarra.substring(35, 36)
        						+ " " + representacaoNumericaCodBarra.substring(36, 47)
        						+ " " + representacaoNumericaCodBarra.substring(47, 48);

        				boletoTxt.append(representacaoNumericaCodBarraFormatada);

        				// Cria o objeto para gerar o código de barras no padrão intercalado 2 de 5
        							Interleaved2of5 codigoBarraIntercalado2de5 = new Interleaved2of5();
         
        							// Recupera a representação númerica do código de barras sem os dígitos verificadores 
        				String representacaoCodigoBarrasSemDigitoVerificador = 
        					    representacaoNumericaCodBarra.substring(0, 11)
        						+ representacaoNumericaCodBarra.substring(12, 23)
        						+ representacaoNumericaCodBarra.substring(24, 35)
        						+ representacaoNumericaCodBarra.substring(36, 47);

        				boletoTxt.append(codigoBarraIntercalado2de5.encodeValue(representacaoCodigoBarrasSemDigitoVerificador));
        				// Codigo da Rota tam (02)
        				boletoTxt.append(Util.adicionarZerosEsquedaNumeroTruncando(2,helper.getCodigoRota().toString()));
        				//Sequencial da Rota Tam (04)
        				boletoTxt.append("." + Util.adicionarZerosEsquedaNumeroTruncando(4,helper.getSequencialRota().toString()));
        				
        				boletoTxt.append(System.getProperty("line.separator"));
            			
            		}	
    				
    			}else{
    				flagFimPesquisa = true;
    			}
    			
    		}
    		
    		    		
    		Date dataAtual = new Date();

    		String nomeEntidade = null;
    		String nomeZip = null;

    		nomeEntidade = entidadeBeneficenteObjeto.getCliente().getNome().replace(" ", "_");
    		nomeZip = "BOLETO_" + nomeEntidade + "_GRUPO_" + grupo + "_" + Util.formatarData(dataAtual) + Util.formatarHoraSemDataSemDoisPontos(dataAtual);
    		nomeZip = nomeZip.replace("/", "_");

    		// pegar o arquivo, zipar pasta e arquivo e escrever no stream
    		try {

    			System.out.println("***************************************");
    			System.out.println("INICO DA CRIACAO DO ARQUIVO");
    			System.out.println("***************************************");

    			if (boletoTxt != null && boletoTxt.length() != 0) {

    				// criar o arquivo zip
    				File compactado = new File(nomeZip + ".zip"); // nomeZip
    				ZipOutputStream zos = new ZipOutputStream(new FileOutputStream(compactado));

    				File leitura = new File(nomeZip + ".txt");
    				BufferedWriter out = new BufferedWriter(new OutputStreamWriter(new FileOutputStream(leitura.getAbsolutePath())));
    				out.write(boletoTxt.toString());
    				out.close();
    				ZipUtil.adicionarArquivo(zos, leitura);

    				// close the stream
    				zos.close();
    				leitura.delete();
    			}
    			System.out.println("***************************************");
    			System.out.println("FIM DA CRIACAO DO ARQUIVO");
    			System.out.println("***************************************");

    		} catch (IOException e) {
    			e.printStackTrace();
    			throw new ControladorException("erro.sistema", e);
    		} catch (Exception e) {
    			e.printStackTrace();
    			throw new ControladorException("erro.sistema", e);
    		}
            
            getControladorBatch().encerrarUnidadeProcessamentoBatch(null,idUnidadeIniciada, false);
        System.out.println("******* FIM **********");
        } catch (Exception ex) {
            ex.printStackTrace();
            getControladorBatch().encerrarUnidadeProcessamentoBatch(ex,idUnidadeIniciada, true);
            throw new EJBException(ex);
        }
        
    }


	/**
	 * [UC0925] Emitir Boletos
	 * 
	 * retrona DBTP_VLLIMITE para DBTP_ID = idDebitoTipo
	 * 
	 * @author Vivianne Sousa
	 * @date 09/07/2009
	 * 
	 * @throws ErroRepositorioException
	 */
	public BigDecimal pesquisarValorLimiteDebitoTipo(Integer idDebitoTipo)
			throws ControladorException {
		try {
			return repositorioCadastro
					.pesquisarValorLimiteDebitoTipo(idDebitoTipo);
		} catch (ErroRepositorioException e) {
			throw new ControladorException("erro.sistema", e);
		}

	}

	/**
	 * Obtém a quantidade de economias da categoria, levando em consideração o
	 * fator de economias
	 * 
	 * @author Rafael Corrêa
	 * @date 09/08/2009
	 * 
	 * @throws ControladorException
	 */
	public int obterQuantidadeEconomiasCategoria(Categoria categoria)
			throws ControladorException {
		int qtd = 0;

		// Caso a categoria tenha fator de economias diferente de NULO
		if (categoria.getFatorEconomias() != null) {
			qtd = categoria.getFatorEconomias().intValue();
		} else {
			qtd = categoria.getQuantidadeEconomiasCategoria();
		}

		return qtd;
	}

	/**
	 * Obtém a quantidade de economias da subcategoria, levando em consideração
	 * o fator de economias
	 * 
	 * @author Rafael Corrêa
	 * @date 09/08/2009
	 * 
	 * @throws ControladorException
	 */
	public int obterQuantidadeEconomiasSubcategoria(Subcategoria subcategoria)
			throws ControladorException {
		int qtd = 0;

		// Caso a categoria tenha fator de economias diferente de NULO
		if (subcategoria.getCategoria().getFatorEconomias() != null) {
			qtd = subcategoria.getCategoria().getFatorEconomias().intValue();
		} else {
			qtd = subcategoria.getQuantidadeEconomias();
		}

		return qtd;
	}

	/**
	 * [UC0407]-Filtrar Imóveis para Inserir ou Manter Conta [FS0011]-Verificar
	 * a abrangência do código do usuário
	 * 
	 * @author Vivianne Sousa
	 * @date 31/07/2009
	 * 
	 * @throws ErroRepositorioException
	 */
	public UnidadeNegocio pesquisarUnidadeNegocioUsuario(Integer idUsuario)
			throws ControladorException {
		try {
			return repositorioCadastro
					.pesquisarUnidadeNegocioUsuario(idUsuario);
		} catch (ErroRepositorioException e) {
			throw new ControladorException("erro.sistema", e);
		}

	}

	/**
	 * [UC0928]-Manter Situação Especial de Faturamento [FS0003]-Verificar a
	 * existência do setor
	 * 
	 * @author Marlon Patrick
	 * @date 11/08/2009
	 * 
	 * @throws ErroRepositorioException
	 */
	public boolean verificarExistenciaSetorComercial(Integer idSetorComercial)
			throws ControladorException {
		try {
			Integer qtdSetores = this.repositorioSetorComercial
					.verificarExistenciaSetorComercial(idSetorComercial);
			return (qtdSetores > 0);

		} catch (ErroRepositorioException ex) {
			ex.printStackTrace();
			throw new ControladorException("erro.sistema", ex);
		}
	}

	/**
	 * [UCXXXX] Excluir Imoveis Da Tarifa Social CRC - 2113
	 * 
	 * @author Genival Barbosa
	 * @date 15/09/2009
	 */
	public void excluirImoveisDaTarifaSocial(Integer idSetor,
			Integer idFuncionalidadeIniciada, Integer anoMesFaturamento)
			throws ControladorException {

		int idUnidadeIniciada = 0;

		try {

			Object[] dados = null;
			Object obj = null;

			idUnidadeIniciada = getControladorBatch()
					.iniciarUnidadeProcessamentoBatch(idFuncionalidadeIniciada,
							UnidadeProcessamento.SETOR_COMERCIAL, (idSetor));

			List colecao = repositorioCadastro
					.pesquisarImoveisExcluirDaTarifaSocial(idSetor,
							anoMesFaturamento);
			String idImovel = "";
			String quantidadeEconomias = "";
			String consumoMedio = "";

			if (colecao != null && !colecao.isEmpty()) {
				for (int i = 0; i < colecao.size(); i++) {
					obj = colecao.get(i);
					if (obj != null) {
						if (obj instanceof Object[]) {
							dados = (Object[]) obj;

							idImovel = dados[0].toString();
							quantidadeEconomias = dados[1].toString();
							consumoMedio = dados[2].toString();
						}
						Double quantidadeEconomiasPORConsumoMedio = Double
								.parseDouble(consumoMedio)
								/ Double.parseDouble(quantidadeEconomias);
						if (quantidadeEconomiasPORConsumoMedio > 19) {
							repositorioCadastro
									.atualizarExcluirDaTarifaSocialTabelaDadoEconomia(idImovel);
							repositorioCadastro
									.atualizarExcluirDaTarifaSocialTabelaImovel(idImovel);
						}
					}
				}
			}

			getControladorBatch().encerrarUnidadeProcessamentoBatch(null,
					idUnidadeIniciada, false);

		} catch (Exception ex) {
			ex.printStackTrace();
			getControladorBatch().encerrarUnidadeProcessamentoBatch(ex,
					idUnidadeIniciada, true);
			throw new EJBException(ex);
		}
	}

	/**
	 * Pesquisa a quantidade de imoveis para o relatorio de imoveis por consumo
	 * medio
	 * 
	 * @author Arthur Carvalho
	 * @data 02/10/2009
	 * 
	 * @param filtro
	 * @return quantidade de imoveis
	 * @throws FachadaException
	 */
	public Integer pesquisarRelatorioImoveisConsumoMedioCount(
			FiltrarRelatorioImoveisConsumoMedioHelper filtro)
			throws ControladorException {

		SistemaParametro sistemaParametro = this.getControladorUtil()
				.pesquisarParametrosDoSistema();

		try {

			return repositorioCadastro
					.pesquisarRelatorioImoveisConsumoMedioCount(filtro,
							sistemaParametro.getAnoMesFaturamento());

		} catch (ErroRepositorioException e) {
			throw new ControladorException("erro.sistema", e);
		}
	}

	/**
	 * Pesquisa a quantidade de imoveis na tabela imovel atualizacao cadastral
	 * 
	 * @author Arthur Carvalho
	 * @data 02/10/2009
	 * 
	 * @param filtro
	 * @return quantidade de imoveis
	 * @throws FachadaException
	 */
	public Integer pesquisarImovelAtualizacaoCadastralComIndicadorExclusaoCount()
			throws ControladorException {

		try {

			return repositorioCadastro
					.pesquisarImovelAtualizacaoCadastralComIndicadorExclusaoCount();

		} catch (ErroRepositorioException e) {
			throw new ControladorException("erro.sistema", e);
		}
	}

	/**
	 * [UC0969] Importar arquivo de atualização cadastral simplificado
	 * 
	 * @author Samuel Valerio, Higor Gondim
	 * @date 22/10/2009, 21/05/2010
	 * 
	 * @param arquivo
	 *            Arquivo texto a ser importado
	 * @return Id do arquivo texto recém-inserido
	 * @throws ControladorException
	 */
	public Integer inserirArquivoTextoAtualizacaoCadastralSimplificado(
			AtualizacaoCadastralSimplificado arquivo,
			AtualizacaoCadastralSimplificadoBinario arquivoBinario,
			Collection<AtualizacaoCadastralSimplificadoLinha> linhas)
			throws ControladorException {

		Integer retorno = null;

		int qtdeImoveisComHidrometro = 0;
		int qtdeImoveisComHidrometroAtualizados = 0;
		int qtdeImoveisComEconomiasAtualizados = 0;
		int qtdeImoveisComMedidorEnergiaAtualizados = 0;
		int qtdeImoveisComClienteAtualizados = 0;

		// buscando todas as críticas de uma vez para armazená-las em memória
		// e depois percorrê-las visando não pesquisar a mesma crítica várias
		// vezes (otimização)
		FiltroAtualizacaoCadastralSimplificadoCritica filtro = new FiltroAtualizacaoCadastralSimplificadoCritica();
		Collection<AtualizacaoCadastralSimplificadoCritica> criticas = getControladorUtil()
				.pesquisar(filtro,
						AtualizacaoCadastralSimplificadoCritica.class.getName());

		// percore todas as linhas do arquivo
		for (AtualizacaoCadastralSimplificadoLinha linha : linhas) {
			try {
				// se há hidrômetro no imóvel
				if (linha.getNumeroMedidor() != null
						&& !"".equals(linha.getNumeroMedidor().trim())) {
					qtdeImoveisComHidrometro++;

					// código do retorno da validação e atualização do
					// hidrômetro
					final Integer validouEAtualizouHidrometro = validarEAtualizarHidrometro(linha);

					// se o retorno for nulo, é pq atualizou com sucesso
					if (validouEAtualizouHidrometro == null)
						qtdeImoveisComHidrometroAtualizados++;
					else if (validouEAtualizouHidrometro != -1) // -1 indica que
																// o hidrômetro
																// já está
																// atualizado no
																// sistema
						adicionarCritica(criticas, linha,
								validouEAtualizouHidrometro);
				} else { // caso não tenha hidrômetro no imóvel
					final boolean haHidrometroNoImovel = verificarAusenciaHidrometro(linha);
					// caso não exista hidrômetro no imóvel
					if (!haHidrometroNoImovel)
						adicionarCritica(
								criticas,
								linha,
								AtualizacaoCadastralSimplificadoCritica.IMOVEL_COM_HIDROMETRO);
				}
			} catch (ParseException pe) {
				throw new ControladorException("erro.sistema", pe);
			} catch (ErroRepositorioException ere) {
				throw new ControladorException("erro.sistema", ere);
			}

			// código do retorno da validação e atualização de subcategorias e
			// economias
			final Integer validouEAtualizouEconomias = validarEAtualizarEconomias(linha);

			// se o retorno for nulo, é pq atualizou com sucesso
			if (validouEAtualizouEconomias == null) {
				qtdeImoveisComEconomiasAtualizados++;
			} else if (validouEAtualizouEconomias != -1) { // -1 indica que as
															// economias já
															// estão atualizadas
															// no sistema
				adicionarCritica(criticas, linha, validouEAtualizouEconomias);
			}

			// [SB0004] Validar e atualizar numero do medidor de energia do imovel
			if (linha.getNumeroMedidorEnergia() != null
					&& !"".equals(linha.getNumeroMedidorEnergia().trim())) {

				// codigo do retorno da validacao e atualizacao do numero do
				// medidor de energia
				final Integer validouEAtualizouMedidorEnergia = validarEAtualizarMedidorEnergia(linha);

				// se o retorno for nulo, e pq atualizou com sucesso
				if (validouEAtualizouMedidorEnergia == null) {
					qtdeImoveisComMedidorEnergiaAtualizados++;
				} else if (validouEAtualizouMedidorEnergia != -1) { // -1 indica
																	// que o
					// numero do medidor ja
					// esta atualizado
					// no sistema
					adicionarCritica(criticas, linha,
							validouEAtualizouMedidorEnergia);
				}
			}
			
			// [SB0005] Validar e atualizar informações de cliente
			if (linha.getNumeroCPF() != null && !"".equals(linha.getNumeroCPF().trim())) {
				
				// codigo do retorno da validacao e atualizacao dos dados do cliente
				final Integer validouEAtualizouCliente = validarEAtualizarCliente(linha);

				// se o retorno for nulo, e pq atualizou com sucesso
				if (validouEAtualizouCliente == null) {
					
					qtdeImoveisComClienteAtualizados++;
					
				} else if (validouEAtualizouCliente != -1) { // -1 indica que o numero do medidor ja esta atualizado no sistema
					
					adicionarCritica(criticas, linha, validouEAtualizouCliente);
					
				}
			}

		}

		// considera-se que há um imóvel por linha no arquivo
		Integer qtdeTotalImoveis = linhas.size();

		arquivo
				.setQtdeImoveisComEconomiasAtualizados(qtdeImoveisComEconomiasAtualizados);
		arquivo.setQtdeImoveisComHidrometro(qtdeImoveisComHidrometro);
		arquivo
				.setQtdeImoveisComHidrometroAtualizados(qtdeImoveisComHidrometroAtualizados);
		arquivo.setQtdeImoveisSemHidrometro(qtdeTotalImoveis
				- qtdeImoveisComHidrometro);
		arquivo.setQtdeImoveisComMedidorEnergiaAtualizados(qtdeImoveisComMedidorEnergiaAtualizados);
		arquivo.setQtdeTotalImoveis(qtdeTotalImoveis);

		retorno = (Integer) getControladorUtil().inserir(arquivo);

		arquivoBinario.setArquivo(arquivo);

		getControladorUtil().inserir(arquivoBinario);

		for (AtualizacaoCadastralSimplificadoLinha linha : linhas)
			getControladorUtil().inserir(linha);

		return retorno;

	}

	/**
	 * Verifica se há hidrômetro no imóvel.
	 * 
	 * [SB0002] Validar ausência de hidrômetro no imóvel [UC0969] Importar
	 * arquivo de atualização cadastral simplificado
	 * 
	 * @author Samuel Valerio
	 * @date 22/10/2009
	 * 
	 * @param linha
	 *            Linha com o imóvel a ser verificado.
	 * @return true se existir hidrômetro no imóvel, false caso contrário
	 * @throws ErroRepositorioException
	 * @throws ControladorException
	 */
	private boolean verificarAusenciaHidrometro(
			AtualizacaoCadastralSimplificadoLinha linha)
			throws ErroRepositorioException, ControladorException {
		Hidrometro hidrometro = obterHidrometroAtualmenteInstalado(linha
				.getNumeroLigacao());
		if (hidrometro != null)
			return false;
		else
			return true;
	}

	/**
	 * Adiciona crítica à linha passada como parâmetro.
	 * 
	 * [UC0969] Importar arquivo de atualização cadastral simplificado
	 * 
	 * @author Samuel Valerio
	 * @date 22/10/2009
	 * 
	 * @param criticas
	 *            Críticas existentes na base de dados
	 * @param linha
	 *            Linha para a qual será adicionada a crítica.
	 * @param idCritica
	 * @throws ControladorException
	 */
	private void adicionarCritica(
			Collection<AtualizacaoCadastralSimplificadoCritica> criticas,
			AtualizacaoCadastralSimplificadoLinha linha, Integer idCritica)
			throws ControladorException {
		// inicializando a coleção de críticas (se necessário)
		if (linha.getCriticas() == null)
			linha
					.setCriticas(new HashSet<AtualizacaoCadastralSimplificadoCritica>());

		// percorrendo as críticas existentes até encontrar a crítica a ser
		// adicionada
		for (AtualizacaoCadastralSimplificadoCritica critica : criticas) {
			// se o id foi igual, esta crítica deve ser adicionada
			if (critica.getId().equals(idCritica)) {
				linha.getCriticas().add(critica);
				return;
			}
		}

		// caso percorra todas as críticas e não encontre a correpondente, lança
		// exceção
		throw new ControladorException(
				"erro.atualizacao_cadastral_simplificado.critica_inexistente");

	}

	/**
	 * Valida o número do hidrômetro que vem no arquivo. Bem como verifica se
	 * seu fabricante e capacidade estão cadastrados na base de dados.
	 * 
	 * [SB0001] Validar e atualizar Hidrômetro [UC0969] Importar arquivo de
	 * atualização cadastral simplificado
	 * 
	 * @author Samuel Valerio
	 * @date 22/10/2009
	 * 
	 * @param linha
	 * @return Código indicativo da validação: nulo se foi atualizado com
	 *         sucesso, -1 se já estava atualizado e um número maior que zero se
	 *         houve crítica.
	 * @throws ParseException
	 * @throws ErroRepositorioException
	 * @throws ControladorException
	 */
	public Integer validarEAtualizarHidrometro(
			AtualizacaoCadastralSimplificadoLinha linha) throws ParseException,
			ErroRepositorioException, ControladorException {
		Integer retorno = null; // por padrão, retorna nulo que indica a
								// atualização com sucesso

		final int TAMANHO_PADRAO_ABNT = 10;

		// valida se o tamanho do número do hidrômetro segue o padrão ABNT
		if (linha.getNumeroMedidor() != null
				&& linha.getNumeroMedidor().trim().length() != TAMANHO_PADRAO_ABNT)
			return AtualizacaoCadastralSimplificadoCritica.HIDROMETRO_FORA_TAMANHO_PADRAO_ABNT;

		final String COMPOSICAO_PADRAO_ABNT = "[A-Z]\\d\\d[A-Z]\\d\\d\\d\\d\\d\\d";
		Pattern p = Pattern.compile(COMPOSICAO_PADRAO_ABNT);
		Matcher m = p.matcher(linha.getNumeroMedidor());
		// valida se o número do hidrômetro segue o padrão ABNT
		if (linha.getNumeroMedidor() != null && !m.find())
			return AtualizacaoCadastralSimplificadoCritica.HIDROMETRO_FORA_PADRAO_ABNT;

		Hidrometro hidrometro = obterHidrometroAtualmenteInstalado(linha
				.getNumeroLigacao());
		// valida se tem hidrômetro atualmente instalado no imóvel
		if (hidrometro == null)
			return AtualizacaoCadastralSimplificadoCritica.IMOVEL_SEM_HIDROMETRO;
		else if (hidrometro.getNumero().equals(linha.getNumeroMedidor()))
			return -1; // retornar -1 quando o hidrômetro já está atualizado no
						// imóvel

		FiltroHidrometro filtroHidrometro = new FiltroHidrometro();
		filtroHidrometro.adicionarParametro(new ParametroSimples(
				FiltroHidrometro.NUMERO_HIDROMETRO, linha.getNumeroMedidor()
						.trim()));
		Hidrometro hidrometroInstaladoEmOutroImovel = (Hidrometro) Util
				.retonarObjetoDeColecao(getControladorUtil().pesquisar(
						filtroHidrometro, Hidrometro.class.getName()));
		// valida se o hidrômetro deste número já não está cadastrado
		if (hidrometroInstaladoEmOutroImovel != null
				&& hidrometro != null
				&& !hidrometroInstaladoEmOutroImovel.getNumero().equals(
						hidrometro.getNumero()))
			return AtualizacaoCadastralSimplificadoCritica.HIDROMETRO_INSTALADO_OUTRO_IMOVEL;

		String codigoDaCapacidade = linha.getNumeroMedidor().substring(0, 1);
		FiltroHidrometroCapacidade filtroHidrometroCapacidade = new FiltroHidrometroCapacidade();
		filtroHidrometroCapacidade.adicionarParametro(new ParametroSimples(
				FiltroHidrometroCapacidade.CODIGO_HIDROMETRO_CAPACIDADE,
				codigoDaCapacidade));
		HidrometroCapacidade hidrometroCapacidade = (HidrometroCapacidade) Util
				.retonarObjetoDeColecao(getControladorUtil().pesquisar(
						filtroHidrometroCapacidade,
						HidrometroCapacidade.class.getName()));
		// valida se a capacidade está cadastrada no sistema
		if (hidrometroCapacidade == null)
			return AtualizacaoCadastralSimplificadoCritica.HIDROMETRO_CAPACIDADE_INEXISTENTE;
		else
			hidrometro.setHidrometroCapacidade(hidrometroCapacidade);

		String terminacaoDoAnoDeFabricacao = linha.getNumeroMedidor()
				.substring(1, 3);

		// valida se a terminação do ano de fabricação é composta apenas por
		// números
		try {
			Integer.parseInt(terminacaoDoAnoDeFabricacao);
		} catch (NumberFormatException nfe) {
			return AtualizacaoCadastralSimplificadoCritica.HIDROMETRO_ANO_FABRICACAO_INVALIDO;
		}

		// complementa e atribui o ano de fabricação
		if (Integer.parseInt(terminacaoDoAnoDeFabricacao) >= 80)
			hidrometro.setAnoFabricacao(Short.parseShort("19"
					+ terminacaoDoAnoDeFabricacao));
		else
			hidrometro.setAnoFabricacao(Short.parseShort("20"
					+ terminacaoDoAnoDeFabricacao));

		Integer anoDataAquisicao = Util.getAno(hidrometro.getDataAquisicao());
		SimpleDateFormat formatoData = new SimpleDateFormat("dd/MM/yyyy");

		// Se o ano de aquisição for menor que o ano de fabricação ou maior que
		// o ano de fabricação mais 3
		// A data de aquisição é considerada inválida e é atribuído o valor
		// padrão de 1 de janeiro do ano de fabricação
		// Regra definida por Márcio e Joab da Comercial
		// exemplo: para o ano de fabricação 2005 o ano de aquisição deve estar
		// entre 2005 e 2008. Caso não esteja
		// é atribuída a data de aquisição 01/01/2005.
		// atribui a data de aquisição
		if (anoDataAquisicao < hidrometro.getAnoFabricacao()
				|| anoDataAquisicao > hidrometro.getAnoFabricacao() + 3)
			hidrometro.setDataAquisicao(formatoData.parse("01/01/"
					+ hidrometro.getAnoFabricacao()));

		String codigoDoFabricante = linha.getNumeroMedidor().substring(3, 4);
		FiltroHidrometroMarca filtroHidrometroMarca = new FiltroHidrometroMarca();
		filtroHidrometroMarca.adicionarParametro(new ParametroSimples(
				FiltroHidrometroMarca.CODIGO, codigoDoFabricante));
		HidrometroMarca hidrometroMarca = (HidrometroMarca) Util
				.retonarObjetoDeColecao(getControladorUtil().pesquisar(
						filtroHidrometroMarca, HidrometroMarca.class.getName()));
		// atribui a marca (fabricante) do hidrômetro
		if (hidrometroMarca == null)
			return AtualizacaoCadastralSimplificadoCritica.HIDROMETRO_FABRICANTE_INEXISTENTE;
		else
			hidrometro.setHidrometroMarca(hidrometroMarca);

		String numerosSequenciaisDoFabricante = linha.getNumeroMedidor()
				.substring(4);
		// valida de os sequenciais do fabricante sao apenas numeros
		try {
			Integer.parseInt(numerosSequenciaisDoFabricante);
		} catch (NumberFormatException nfe) {
			return AtualizacaoCadastralSimplificadoCritica.HIDROMETRO_SEQUENCIAIS_FABRICANTE_INVALIDOS;
		}

		// atribui o número do hidrômetro que veio do arquivo
		hidrometro.setNumero(linha.getNumeroMedidor());

		getControladorUtil().atualizar(hidrometro);

		return retorno;
	}

	/**
	 * Obtém o hidrômetro atualmente instalado para o imóvel passado como
	 * parâmetro.
	 * 
	 * [UC0969] Importar arquivo de atualização cadastral simplificado
	 * 
	 * @author Samuel Valerio
	 * @date 22/10/2009
	 * 
	 * @param idImovel
	 *            Id do imóvel para o qual se quer obter o hidrômetro instalado.
	 * @return O hidrômetro atualmente instalado no imóvel
	 * @throws ErroRepositorioException
	 */
	public Hidrometro obterHidrometroAtualmenteInstalado(Integer idImovel)
			throws ErroRepositorioException {
		Integer idHidrometroInstalacaoHistorico;
		idHidrometroInstalacaoHistorico = repositorioMicromedicao
				.verificarExistenciaHidrometroInstalacaoHistoricoTipoAgua(idImovel);
		if (idHidrometroInstalacaoHistorico == null
				|| 0 == idHidrometroInstalacaoHistorico)
			idHidrometroInstalacaoHistorico = repositorioMicromedicao
					.verificarExistenciaHidrometroInstalacaoHistoricoTipoPoco(idImovel);

		if (idHidrometroInstalacaoHistorico != null
				&& 0 != idHidrometroInstalacaoHistorico) {
			FiltroHidrometroInstalacaoHistorico filtroHidrometroInstalacaoHistorico = new FiltroHidrometroInstalacaoHistorico();
			filtroHidrometroInstalacaoHistorico
					.adicionarParametro(new ParametroSimples(
							FiltroHidrometroInstalacaoHistorico.ID,
							idHidrometroInstalacaoHistorico));
			filtroHidrometroInstalacaoHistorico
					.adicionarCaminhoParaCarregamentoEntidade(FiltroHidrometroInstalacaoHistorico.HIDROMETRO);
			return ((HidrometroInstalacaoHistorico) Util
					.retonarObjetoDeColecao(repositorioUtil.pesquisar(
							filtroHidrometroInstalacaoHistorico,
							HidrometroInstalacaoHistorico.class.getName())))
					.getHidrometro();
		} else {
			return null;
		}

	}

	/**
	 * Busca as críticas existentes para o arquivo passado como parâmetro.
	 * 
	 * [UC0969] Importar arquivo de atualização cadastral simplificado
	 * 
	 * @author Samuel Valerio
	 * @date 22/10/2009
	 * 
	 * @param idArquivo
	 *            Id do arquivo texto importado
	 * @return Críticas existentes para o arquivo.
	 * @throws ControladorException
	 */
	public Collection<AtualizacaoCadastralSimplificadoCritica> pesquisarAtualizacaoCadastralSimplificadoCritica(
			int idArquivo) throws ControladorException {
		try {
			return repositorioCadastro
					.pesquisarAtualizacaoCadastralSimplificadoCritica(idArquivo);
		} catch (ErroRepositorioException e) {
			throw new ControladorException("erro.sistema", e);
		}
	}

	/**
	 * Valida se as subcategorias a serem atualizadas existem na base de dados.
	 * Se não existirem, gera uma crítica e aborta a atualização.
	 * 
	 * [SB0003] Validar e atualizar subcategorias e economias do imóvel [UC0969]
	 * Importar arquivo de atualização cadastral simplificado
	 * 
	 * @author Samuel Valerio
	 * @date 22/10/2009
	 * 
	 * @param linha
	 *            Linha contendo a matrícula do imóvel bem como as subcategorias
	 *            e economias vindas da pesquisa de campo
	 * @return Código indicativo da validação: nulo se foi atualizado com
	 *         sucesso, -1 se já estava atualizado e um número maior que zero se
	 *         houve crítica.
	 * @throws ControladorException
	 */
	public Integer validarEAtualizarEconomias(
			AtualizacaoCadastralSimplificadoLinha linha)
			throws ControladorException {
		Integer retorno = null; // por padrão, retorna nulo que indica a
								// atualização com sucesso

		// obtendo as subcategorias do imóvel do BD
		Collection<ImovelSubcategoria> subcategorias = getControladorImovel()
				.obterColecaoImovelSubcategorias(
						new Imovel(linha.getNumeroLigacao()), 1);

		// em princípio, deve-se remover do BD todas as subcategorias do imóvel
		// e adicionar todas as subcategorias vindas no arquivo
		Collection<ImovelSubcategoria> subcategoriasARemover = new ArrayList<ImovelSubcategoria>(
				subcategorias);

		// percorre todas as subcategorias do imóvel existentes na base para
		// comparar com as subcategorias vindas do arquivo
		for (ImovelSubcategoria imovelSubcategoria : subcategorias) {
			for (int i = 0; i < linha.getCategorias().size(); i++) {
				Integer categoria = Integer.parseInt(linha.getCategorias().get(
						i));
				// se encontrar uma subcategoria que coincida e tenha o mesmo
				// número de economias
				if (imovelSubcategoria.getComp_id().getSubcategoria()
						.getCodigo() == categoria
						&& imovelSubcategoria.getQuantidadeEconomias() == Integer
								.parseInt(linha.getEconomias().get(i))) {
					// esta subcategoria não deve ser mais removida da base
					subcategoriasARemover.remove(imovelSubcategoria);

					// esta subcategoria não deve ser adicionada na base
					linha.getCategorias().remove(i);
					linha.getEconomias().remove(i);
				}
			}
		}

		// caso existam subcategorias a serem removidas do BD
		if (subcategoriasARemover.size() > 0) {
			// remove-as uma a uma, registrando a transação para possibilitar
			// auditoria futura
			for (ImovelSubcategoria imovelSubcategoria : subcategoriasARemover) {
				Imovel imovel = imovelSubcategoria.getComp_id().getImovel();
				RegistradorOperacao registradorOperacao = new RegistradorOperacao(
						Operacao.OPERACAO_IMOVEL_ATUALIZAR, imovel.getId(),
						imovel.getId(), new UsuarioAcaoUsuarioHelper(linha
								.getArquivo().getUsuario(),
								UsuarioAcao.USUARIO_ACAO_EFETUOU_OPERACAO));

				registradorOperacao.registrarOperacao(imovel);
				registradorOperacao.registrarOperacao(imovelSubcategoria);
				getControladorUtil().remover(imovelSubcategoria);
			}
		}

		// caso existam subcategorias a serem adicionadas no BD (vindas do
		// arquivo)
		if (linha.getCategorias().size() > 0) {
			// adiciona uma a uma, registrando a transação para possibilitar
			// auditoria futura
			for (int i = 0; i < linha.getCategorias().size(); i++) {
				String cat = linha.getCategorias().get(i);

				FiltroImovel filtroImovel = new FiltroImovel();
				filtroImovel.adicionarParametro(new ParametroSimples(
						FiltroImovel.ID, linha.getNumeroLigacao()));
				// carregando entidades necessárias para não dar LazyException
				filtroImovel
						.adicionarCaminhoParaCarregamentoEntidade("setorComercial");
				filtroImovel
						.adicionarCaminhoParaCarregamentoEntidade("areaConstruidaFaixa");
				filtroImovel
						.adicionarCaminhoParaCarregamentoEntidade("pavimentoCalcada");
				filtroImovel
						.adicionarCaminhoParaCarregamentoEntidade("imovelPerfil");
				filtroImovel
						.adicionarCaminhoParaCarregamentoEntidade("reservatorioVolumeFaixaSuperior");
				filtroImovel
						.adicionarCaminhoParaCarregamentoEntidade("reservatorioVolumeFaixaInferior");
				filtroImovel
						.adicionarCaminhoParaCarregamentoEntidade("localidade");
				filtroImovel.adicionarCaminhoParaCarregamentoEntidade("quadra");
				filtroImovel
						.adicionarCaminhoParaCarregamentoEntidade("pavimentoRua");
				filtroImovel
						.adicionarCaminhoParaCarregamentoEntidade("enderecoReferencia");
				filtroImovel
						.adicionarCaminhoParaCarregamentoEntidade("pavimentoRua");
				filtroImovel
						.adicionarCaminhoParaCarregamentoEntidade("pocoTipo");
				filtroImovel
						.adicionarCaminhoParaCarregamentoEntidade("despejo");
				filtroImovel
						.adicionarCaminhoParaCarregamentoEntidade("fonteAbastecimento");
				filtroImovel
						.adicionarCaminhoParaCarregamentoEntidade("piscinaVolumeFaixa");
				filtroImovel
						.adicionarCaminhoParaCarregamentoEntidade("imovelTipoHabitacao");
				filtroImovel
						.adicionarCaminhoParaCarregamentoEntidade("imovelTipoPropriedade");
				filtroImovel
						.adicionarCaminhoParaCarregamentoEntidade("imovelTipoPropriedade");
				filtroImovel
						.adicionarCaminhoParaCarregamentoEntidade("imovelTipoCobertura");
				filtroImovel
						.adicionarCaminhoParaCarregamentoEntidade("logradouroBairro");
				filtroImovel
						.adicionarCaminhoParaCarregamentoEntidade("logradouroBairro.bairro");
				filtroImovel
						.adicionarCaminhoParaCarregamentoEntidade("logradouroCep");
				filtroImovel
						.adicionarCaminhoParaCarregamentoEntidade("logradouroCep.cep");
				filtroImovel
						.adicionarCaminhoParaCarregamentoEntidade("logradouroCep.logradouro");
				filtroImovel
						.adicionarCaminhoParaCarregamentoEntidade("logradouroCep.logradouro.logradouroTipo");
				filtroImovel
						.adicionarCaminhoParaCarregamentoEntidade("logradouroCep.logradouro.logradouroTitulo");
				filtroImovel
						.adicionarCaminhoParaCarregamentoEntidade("rotaEntrega");
				filtroImovel
						.adicionarCaminhoParaCarregamentoEntidade("funcionario");
				filtroImovel
						.adicionarCaminhoParaCarregamentoEntidade("imovelSubcategorias");

				Imovel imovel = (Imovel) Util
						.retonarObjetoDeColecao(getControladorUtil().pesquisar(
								filtroImovel, Imovel.class.getName()));
				FiltroSubCategoria filtroSubcategoria = new FiltroSubCategoria();
				filtroSubcategoria.adicionarParametro(new ParametroSimples(
						FiltroSubCategoria.CODIGO, cat));
				filtroSubcategoria
						.adicionarCaminhoParaCarregamentoEntidade("categoria");
				Subcategoria subcategoria = (Subcategoria) Util
						.retonarObjetoDeColecao(getControladorUtil().pesquisar(
								filtroSubcategoria,
								Subcategoria.class.getName()));
				// caso venha uma subcategoria no arquivo que não exista no BD
				// deve-se gerar uma crítica e abortar a atualização das
				// economias
				if (subcategoria == null)
					return AtualizacaoCadastralSimplificadoCritica.IMOVEL_SUBCATEGORIA_INEXISTENTE;

				// Criando um ImovelSubcategoria para a sub categoria do arquivo
				// ---
				// Associando um imovel a uma subcategoria
				ImovelSubcategoriaPK ispk = new ImovelSubcategoriaPK(imovel,
						subcategoria);
				ImovelSubcategoria imovelSubcategoria = new ImovelSubcategoria(
						ispk, new Short(linha.getEconomias().get(i)));
				// Colocando data da atualização individualmete no
				// imovelSubcategoria
				imovelSubcategoria.setUltimaAlteracao(new Date());

				RegistradorOperacao registradorOperacao = new RegistradorOperacao(
						Operacao.OPERACAO_IMOVEL_ATUALIZAR, imovel.getId(),
						imovel.getId(), new UsuarioAcaoUsuarioHelper(linha
								.getArquivo().getUsuario(),
								UsuarioAcao.USUARIO_ACAO_EFETUOU_OPERACAO));

				registradorOperacao.registrarOperacao(imovel);
				registradorOperacao.registrarOperacao(imovelSubcategoria);
				getControladorUtil().inserir(imovelSubcategoria);
			}
		}

		// se removeu (subcategoriasARemover.size() > 0) ou adicionou
		// (linha.getCategorias.size()>0)
		// economias, retorna nulo
		if (subcategoriasARemover.size() > 0
				|| linha.getCategorias().size() > 0) {
			return retorno; // retorna nulo indicando que as
							// subcategorias/economias do imóvel fora
							// atualizadas com sucesso
		} else {
			return -1; // retorna -1 se as economias do imóvel já estão
						// atualizadas
		}

	}
	
	/**
	 * Busca o imovel atraves do identificador unico (id).
	 * Caso o numero do medidor de energia seja nulo ou diferente das informacoes
	 * vindas na atualizacao, atualiza o numero do medidor de energia
	 * 
	 * [SB0004] Validar e atualizar numero do medidor de energia do imovel
	 * [UC0969] Importar arquivo de atualizacao cadastral simplificado
	 * 
	 * @author Higor Gondim
	 * @date 21/05/2010
	 * 
	 * @param linha
	 *            Linha contendo a matricula do imovel bem como o numero do
	 *            medidor de energia que vem de campo
	 * @return Codigo indicativo da validacao: nulo se foi atualizado com
	 *         sucesso, -1 se ja estava atualizado e um numero maior que zero se
	 *         houve critica.
	 * @throws ControladorException
	 */
	public Integer validarEAtualizarMedidorEnergia(
			AtualizacaoCadastralSimplificadoLinha linha)
			throws ControladorException {
		Integer retorno = null; // por padrao, retorna nulo que indica a
		// atualizacao com sucesso

		// obtendo o imovel a partir da matricula
		FiltroImovel filtroImovel = new FiltroImovel();
		filtroImovel.adicionarParametro(new ParametroSimples(FiltroImovel.ID,
				linha.getImovel().getId()));

		// Pesquisa o imovel
		Imovel imovel = (Imovel) Util
				.retonarObjetoDeColecao(getControladorUtil().pesquisar(
						filtroImovel, Imovel.class.getName()));

		// Atualiza imovel com o numero do medidor caso nao esteja atualizado
		if (imovel.getNumeroMedidorEnergia() == null
				|| !imovel.getNumeroMedidorEnergia().equals(
						linha.getNumeroMedidorEnergia().trim())) {
							imovel.setNumeroMedidorEnergia(linha.getNumeroMedidorEnergia().trim());
			getControladorUtil().atualizar(imovel);
		} else {
			retorno = -1;// retorna -1 se o medidor de energia do imovel ja esta
			// atualizada
		}

		return retorno;
	}
	
	/**
	 * Efetua atualizacao de cliente com base nas regras de negocio definidas em [UC0969][SB0005]
	 * 
	 * [SB0005] Validar e atualizar informações de cliente
	 * [UC0969] Importar arquivo de atualizacao cadastral simplificado
	 * 
	 * @author Higor Gondim
	 * @date 27/04/2011
	 * 
	 * @param linha
	 *            Linha contendo a matricula do imovel bem como os dados do cliente que vem de campo
	 * @return Codigo indicativo da validacao: nulo se foi atualizado com
	 *         sucesso, -1 se ja estava atualizado e um numero maior que zero se
	 *         houve critica.
	 * @throws ControladorException
	 */
	public Integer validarEAtualizarCliente(
			AtualizacaoCadastralSimplificadoLinha linha)
			throws ControladorException {
		Integer retorno = null; // por padrao, retorna nulo que indica a atualizacao com sucesso

		if (linha.getNumeroCPF() != null && !"".equals(linha.getNumeroCPF().trim())) {
			
			//Validando CPF
			if (!Util.validacaoCPF(linha.getNumeroCPF())){
				return AtualizacaoCadastralSimplificadoCritica.CPF_INVALIDO;
			}
			
			//Buscando imovel e cliente usuario associado
			FiltroClienteImovel filtroClienteImovel = new FiltroClienteImovel();
			filtroClienteImovel.adicionarParametro(new ParametroSimples(FiltroClienteImovel.IMOVEL, linha.getImovel()));
			filtroClienteImovel.adicionarParametro(new ParametroSimples(FiltroClienteImovel.CLIENTE_RELACAO_TIPO, ClienteRelacaoTipo.USUARIO));
			filtroClienteImovel.adicionarParametro(new ParametroNulo(FiltroClienteImovel.DATA_FIM_RELACAO));
			filtroClienteImovel.adicionarCaminhoParaCarregamentoEntidade(FiltroClienteImovel.CLIENTE);
			filtroClienteImovel.adicionarCaminhoParaCarregamentoEntidade(FiltroClienteImovel.IMOVEL);
			
			ClienteImovel atualClienteImovel = (ClienteImovel) Util.retonarObjetoDeColecao(getControladorUtil().pesquisar(filtroClienteImovel, ClienteImovel.class.getName()));
			
			Imovel imovel = atualClienteImovel.getImovel();

			//Pesquisando cliente com CPF informado
			FiltroCliente filtroCliente = new FiltroCliente();
			filtroCliente.adicionarParametro(new ParametroSimples(FiltroCliente.CPF, linha.getNumeroCPF()));
			
			Cliente cliente = (Cliente) Util.retonarObjetoDeColecao(getControladorUtil().pesquisar(filtroCliente, Cliente.class.getName()));
			
			if (cliente != null){
				if (cliente.getRg() != null && !cliente.getRg().trim().equals("")){
					if ((linha.getNumeroRG() != null && !linha.getNumeroRG().trim().equals("")) && cliente.getRg().trim().equals(linha.getNumeroRG().trim())){
						atualizarDadosClienteAtual(linha, cliente, atualClienteImovel);
					} else{
						return AtualizacaoCadastralSimplificadoCritica.INFORMACOES_DE_USUARIOS_CONFLITANTES;
					}
				} else{
					atualizarDadosClienteAtual(linha, cliente, atualClienteImovel);
				}
			} else{
				//Criar um novo cliente com dados de campo e associalo ao imovel
				ClienteImovelFimRelacaoMotivo clienteImovelFimRelacaoMotivo = new ClienteImovelFimRelacaoMotivo();
				clienteImovelFimRelacaoMotivo.setId(ClienteImovelFimRelacaoMotivo.ATUALIZACAO_CADASTRAL_SIMPLIFICADA);
				atualClienteImovel.setClienteImovelFimRelacaoMotivo(clienteImovelFimRelacaoMotivo);
				atualClienteImovel.setDataFimRelacao(new Date());
									
				//Criando o novo cliente
				Cliente novoCliente = new Cliente();
				
				//Setando identificacao e documentos
				novoCliente.setNome(linha.getNomeCliente().trim());
				if (linha.getNumeroRG() != null){
					novoCliente.setRg(linha.getNumeroRG());
				}
				novoCliente.setCpf(linha.getNumeroCPF());
				
				novoCliente.setIndicadorUso(new Short("1"));
				novoCliente.setClienteTipo(atualClienteImovel.getCliente().getClienteTipo());
				
				//Setando endereco
				ClienteEndereco clienteEndereco = new ClienteEndereco();
				EnderecoTipo enderecoTipo = new EnderecoTipo();
				enderecoTipo.setId(1);//Residencial
				clienteEndereco.setEnderecoTipo(enderecoTipo);
				clienteEndereco.setCliente(novoCliente);
				clienteEndereco.setLogradouroBairro(imovel.getLogradouroBairro());
				clienteEndereco.setLogradouroCep(imovel.getLogradouroCep());
				clienteEndereco.setNumero(imovel.getNumeroImovel());
				clienteEndereco.setComplemento(imovel.getComplementoEndereco());
				clienteEndereco.setIndicadorEnderecoCorrespondencia(new Short("1"));
				clienteEndereco.setUltimaAlteracao(new Date());
				
				Set<ClienteEndereco> clienteEnderecos = new HashSet<ClienteEndereco>();
				clienteEnderecos.add(clienteEndereco);
				
				novoCliente.setClienteEnderecos(clienteEnderecos);
				
				//Setando o sexo
				PessoaSexo pessoaSexo = new PessoaSexo();
				if (linha.getSexoCliente().equals("M")){
					pessoaSexo.setId(1);
				} else if (linha.getSexoCliente().equals("F")){
					pessoaSexo.setId(2);
				} else{
					pessoaSexo.setId(0);
				}
				novoCliente.setPessoaSexo(pessoaSexo);
				
				//Setando telefone
				ClienteFone clienteFone = null;
				if (linha.getNumeroTelefone() != null) {
					if (linha.getNumeroTelefone().startsWith("3") || linha.getNumeroTelefone().startsWith("4") || linha.getNumeroTelefone().startsWith("8") || linha.getNumeroTelefone().startsWith("9")){
						clienteFone = new ClienteFone();
						clienteFone.setCliente(novoCliente);
						FoneTipo foneTipo = new FoneTipo();
						if (linha.getNumeroTelefone().startsWith("3") || linha.getNumeroTelefone().startsWith("4")){
							foneTipo.setId(FoneTipo.RESIDENCIAL);
						} else if (linha.getNumeroTelefone().startsWith("8") || linha.getNumeroTelefone().startsWith("9")){
							foneTipo.setId(FoneTipo.CELULAR);
						}
						clienteFone.setFoneTipo(foneTipo);
						clienteFone.setTelefone(linha.getNumeroTelefone());
						clienteFone.setIndicadorTelefonePadrao(new Short("1"));
						clienteFone.setUltimaAlteracao(new Date());
						
						Set clienteFones = new HashSet();
						clienteFones.add(clienteFone);
						novoCliente.setClienteFones(clienteFones);
					}
				}
				
				//Setando itens obrigatorios
				novoCliente.setIndicadorAcrescimos(atualClienteImovel.getCliente().getIndicadorAcrescimos());
				novoCliente.setIndicadorGeraArquivoTexto(atualClienteImovel.getCliente().getIndicadorGeraArquivoTexto());
				novoCliente.setIndicadorVencimentoMesSeguinte(atualClienteImovel.getCliente().getIndicadorVencimentoMesSeguinte());
				novoCliente.setIndicadorGeraFaturaAntecipada(atualClienteImovel.getCliente().getIndicadorGeraFaturaAntecipada());
				novoCliente.setIndicadorUsoNomeFantasiaConta(atualClienteImovel.getCliente().getIndicadorUsoNomeFantasiaConta());
				novoCliente.setIndicadorPermiteNegativacao(atualClienteImovel.getCliente().getIndicadorPermiteNegativacao());
				novoCliente.setUltimaAlteracao(new Date());
				
				//Associando novo cliente como imovel
				ClienteRelacaoTipo novoClienteRelacaoTipo = new ClienteRelacaoTipo();
				novoClienteRelacaoTipo.setId(new Integer(ClienteRelacaoTipo.USUARIO));
				
				ClienteImovel novoClienteImovel = new ClienteImovel();
				novoClienteImovel.setCliente(novoCliente);
				novoClienteImovel.setClienteRelacaoTipo(novoClienteRelacaoTipo);
				novoClienteImovel.setImovel(imovel);
				novoClienteImovel.setIndicadorNomeConta(atualClienteImovel.getIndicadorNomeConta());
				novoClienteImovel.setDataInicioRelacao(new Date());
				novoClienteImovel.setUltimaAlteracao(new Date());
				
				getControladorUtil().atualizar(atualClienteImovel);
				getControladorUtil().inserir(novoCliente);
				getControladorUtil().inserir(clienteEndereco);
				if (clienteFone != null){
					getControladorUtil().inserir(clienteFone);
				}
				getControladorUtil().inserir(novoClienteImovel);
			}
			
		}

		return retorno;
	}
	
	/**
	 * Efetua atualizacao de cliente encontrado com o cpf informado e associa ao imovel em questao
	 * 
	 * [SB0005] Validar e atualizar informações de cliente
	 * [UC0969] Importar arquivo de atualizacao cadastral simplificado
	 * 
	 * @author Higor Gondim
	 * @date 18/10/2011
	 * 
	 * @param linha Linha do arquivo de atualizacao cadastral
	 * @param cliente Cliente encontrado no banco de dados com o cpf informado
	 * @param atualClienteImovel Associacao de cliente imovel (USUARIO) valida para o imovel
	 * 
	 * @throws ControladorException
	 */
	public void atualizarDadosClienteAtual(
			AtualizacaoCadastralSimplificadoLinha linha, 
			Cliente cliente, ClienteImovel atualClienteImovel)
			throws ControladorException {
		//Setando nome
		cliente.setNome(linha.getNomeCliente().trim());
		
		//Setando RG
		if (linha.getNumeroRG() != null){
			cliente.setRg(linha.getNumeroRG());
		}
		
		//Setando o sexo
		PessoaSexo pessoaSexo = new PessoaSexo();
		if (linha.getSexoCliente().equals("M")){
			pessoaSexo.setId(1);
		} else if (linha.getSexoCliente().equals("F")){
			pessoaSexo.setId(2);
		} else{
			pessoaSexo.setId(0);
		}
		cliente.setPessoaSexo(pessoaSexo);
		
		//Setando telefone
		ClienteFone clienteFone = null;
		if (linha.getNumeroTelefone() != null) {
			if (linha.getNumeroTelefone().startsWith("3") || linha.getNumeroTelefone().startsWith("4") || linha.getNumeroTelefone().startsWith("8") || linha.getNumeroTelefone().startsWith("9")){
				clienteFone = new ClienteFone();
				clienteFone.setCliente(cliente);
				FoneTipo foneTipo = new FoneTipo();
				if (linha.getNumeroTelefone().startsWith("3") || linha.getNumeroTelefone().startsWith("4")){
					foneTipo.setId(FoneTipo.RESIDENCIAL);
				} else if (linha.getNumeroTelefone().startsWith("8") || linha.getNumeroTelefone().startsWith("9")){
					foneTipo.setId(FoneTipo.CELULAR);
				}
				clienteFone.setFoneTipo(foneTipo);
				clienteFone.setTelefone(linha.getNumeroTelefone());
				clienteFone.setIndicadorTelefonePadrao(new Short("2"));
				clienteFone.setUltimaAlteracao(new Date());
				
				Set clienteFones = new HashSet();
				clienteFones.add(clienteFone);
				cliente.setClienteFones(clienteFones);

				getControladorUtil().inserir(clienteFone);
			}
		}
		
		if (!atualClienteImovel.getCliente().getId().equals(cliente.getId())){
			//Atualizar cliente do imovel vindo da pesquisa cadastral com o cliente buscado!
			ClienteImovelFimRelacaoMotivo clienteImovelFimRelacaoMotivo = new ClienteImovelFimRelacaoMotivo();
			clienteImovelFimRelacaoMotivo.setId(ClienteImovelFimRelacaoMotivo.ATUALIZACAO_CADASTRAL_SIMPLIFICADA);
			atualClienteImovel.setClienteImovelFimRelacaoMotivo(clienteImovelFimRelacaoMotivo);
			atualClienteImovel.setDataFimRelacao(new Date());
			
			//Associando cliente buscado com o imovel
			ClienteRelacaoTipo novoClienteRelacaoTipo = new ClienteRelacaoTipo();
			novoClienteRelacaoTipo.setId(new Integer(ClienteRelacaoTipo.USUARIO));
			
			ClienteImovel novoClienteImovel = new ClienteImovel();
			novoClienteImovel.setCliente(cliente);
			novoClienteImovel.setClienteRelacaoTipo(novoClienteRelacaoTipo);
			novoClienteImovel.setImovel(atualClienteImovel.getImovel());
			novoClienteImovel.setIndicadorNomeConta(atualClienteImovel.getIndicadorNomeConta());
			novoClienteImovel.setDataInicioRelacao(new Date());
			novoClienteImovel.setUltimaAlteracao(new Date());
			
			getControladorUtil().atualizar(atualClienteImovel);
			getControladorUtil().inserir(novoClienteImovel);
		}
		
		getControladorUtil().atualizar(cliente);
	}
	
	/**
	 * 
	 * [UC0973] Inserir Imóvel em Programa Especial
	 * [FS0004] Validar dados do imóvel no programa especial
	 * @author Hugo Amorim
	 * @since 17/12/2009
	 *
	 */
	public void validarDadosInserirImovelProgramaEspecial(ImovelProgramaEspecial imovelProgramaEspecial) throws ControladorException {
		
		// Obter Parametros do sistema	
		SistemaParametro sistemaParametro = this.getControladorUtil().pesquisarParametrosDoSistema();
		
		if(imovelProgramaEspecial.getImovel().getLigacaoAguaSituacao()!=null){
			if(imovelProgramaEspecial.getImovel().getLigacaoAguaSituacao().getId().compareTo(LigacaoAguaSituacao.LIGADO)!=0){
				throw new ControladorException("atencao.situacao.agua.invalido");
			}
		}
		
		// [FS0004] Validar dados do imóvel no programa especial	
		// Verifica se categoria do imovel
		// e igual a residencial
		Collection colecaoSubcategoriasImovel = 
			this.getControladorImovel().obterColecaoImovelSubcategorias(imovelProgramaEspecial.getImovel(),new Integer(0));
		
		if(colecaoSubcategoriasImovel!=null && !colecaoSubcategoriasImovel.isEmpty()){
			for (Iterator iterator = colecaoSubcategoriasImovel.iterator(); iterator
					.hasNext();) {
				ImovelSubcategoria imovelSubcategoria = (ImovelSubcategoria) iterator.next();
							
				if(imovelSubcategoria.getComp_id().getSubcategoria().getCategoria().getId().compareTo(new Integer(1))!=0){
					throw new ControladorException("atencao.categoria.nao.permite.incluir.programa");
				}	
			}
		}
		
		// [FS0004] Validar dados do imóvel no programa especial
		// Verifica se immóvel não possui hidrometro
		// e tem área construída superior a 100m2
		
		 // Obtém o indicador de existência de hidrômetro para o imóvel, caso exista
		 // retorna 1(um) indicando SIM caso contrário retorna 2(dois) indicando NÃO
		 Integer possuiHidrometro = this.getControladorImovel().obterIndicadorExistenciaHidrometroImovel(imovelProgramaEspecial.getImovel().getId());
		
		if(possuiHidrometro.compareTo(new Integer(2))==0 
				&& imovelProgramaEspecial.getImovel().getAreaConstruida().compareTo(new BigDecimal("100"))>0){
			throw new ControladorException("atencao.area.maior.permitida");
		}
		
		// [FS0004] Validar dados do imóvel no programa especial
		// Verifica consumo de água do mês atual se não houver no mês atual
		// é maior que 25m3
		
		Integer mesAnoFaturamento = sistemaParametro.getAnoMesFaturamento();
		Integer mesAnoAnteriorFaturamento = Util.subtraiAteSeisMesesAnoMesReferencia(mesAnoFaturamento, 1);
		
		Integer consumoFaturado = null;
		
		consumoFaturado = this.getControladorImovel()
								.obterConsumoFaturadoImovelNoMes(imovelProgramaEspecial.getImovel().getId(),
										mesAnoFaturamento);		
		if(consumoFaturado==null){
			
			consumoFaturado = this.getControladorImovel()
				.obterConsumoFaturadoImovelNoMes(imovelProgramaEspecial.getImovel().getId(),
						mesAnoAnteriorFaturamento);		
		}
		
		if(consumoFaturado!=null 
				&& possuiHidrometro.compareTo(new Integer(1))==0
					&& consumoFaturado.compareTo(new Integer(25))>0){
			throw new ControladorException("atencao.consumo.anterior.invalido");
		}
		
		// [FS0004] Validar dados do imóvel no programa especial
		// Verifica se cliente reponsável pelo imóvel 
		// é diferente do responsável pelo programa especial
		FiltroClienteImovel filtroClienteImovel = new FiltroClienteImovel();
		filtroClienteImovel
				.adicionarCaminhoParaCarregamentoEntidade("cliente");
		filtroClienteImovel
				.adicionarCaminhoParaCarregamentoEntidade("clienteRelacaoTipo");
		
		filtroClienteImovel.adicionarParametro(new ParametroSimples(
				FiltroClienteImovel.IMOVEL_ID, imovelProgramaEspecial.getImovel().getId()));
		filtroClienteImovel.adicionarParametro(new ParametroSimples(
				FiltroClienteImovel.CLIENTE_RELACAO_TIPO_ID, ClienteRelacaoTipo.RESPONSAVEL));
		filtroClienteImovel.adicionarParametro(new ParametroNulo(
				FiltroClienteImovel.DATA_FIM_RELACAO));

		Collection clientesImovel = getControladorUtil().pesquisar(
				filtroClienteImovel, ClienteImovel.class.getName());
		
		ClienteImovel clienteImovel = (ClienteImovel) Util.retonarObjetoDeColecao(clientesImovel);
		
		if(sistemaParametro.getClienteResponsavelProgramaEspecial()!=null){
			if(clienteImovel!=null 
					&& clienteImovel.getCliente().getId()
						.compareTo(sistemaParametro.getClienteResponsavelProgramaEspecial().getId())!=0){
				
				throw new ControladorException("atencao.cliente.diferente.responsavel.programa",
					null,
					clienteImovel.getCliente().getId().toString());
			}
		}
		
		// Valida se imovel está em processo de suspensão.
		FiltroImovelProgramaEspecial filtroImovelProgramaEspecial = new FiltroImovelProgramaEspecial();

		filtroImovelProgramaEspecial
				.adicionarParametro(new ParametroSimples(
						FiltroImovelProgramaEspecial.IMOVEL_ID, imovelProgramaEspecial.getImovel().getId()));
		filtroImovelProgramaEspecial
				.adicionarParametro(new ParametroSimples(
						FiltroImovelProgramaEspecial.FORMA_SUSPENSAO, ImovelProgramaEspecial.FORMA_SUSPENSAO_OPERADOR));
		
		Collection<ImovelProgramaEspecial> colecaoImovelProgramaEspecial = 
			this.getControladorUtil().pesquisar(filtroImovelProgramaEspecial,
				ImovelProgramaEspecial.class.getName());
		
		ImovelProgramaEspecial imovelProgramaEspecialEmProcessoDeSuspensao = 
			(ImovelProgramaEspecial) Util.retonarObjetoDeColecao(colecaoImovelProgramaEspecial);
		
		if(imovelProgramaEspecialEmProcessoDeSuspensao!=null){
			throw new ControladorException("atencao.imovel_em_processo_de_suspensao");
		}

	}
	
	/**
	 * [UC0925] Emitir Boletos
	 *
	 * retrona DBTP_VLLIMITE para DBTP_ID = idDebitoTipo
	 *
	 * @author Rômulo Aurélio
	 * @date 22/12/2009
	 * 
	 * @throws ErroRepositorioException
	 */
	public BigDecimal pesquisarValorSugeridoDebitoTipo(
			Integer idDebitoTipo) throws ControladorException {
		try {
			return repositorioCadastro.pesquisarValorSugeridoDebitoTipo(idDebitoTipo);
		} catch (ErroRepositorioException e) {
			throw new ControladorException("erro.sistema", e);
		}
	}
	/**
	 * 
	 * [UC0976] Suspender Imóvel em Programa Especial
	 * [FS0004] Validar dados da suspensão imóvel no programa especial
	 * @author Hugo Amorim
	 * @since 21/12/2009
	 *
	 */
	public void validarDadosSuspensaoImovelProgramaEspecial(ImovelProgramaEspecial imovelProgramaEspecial) throws ControladorException{
		
		Pagamento pagamento = null;
		Conta conta = null;
		ClienteConta clienteConta = null;
		
		SistemaParametro sistemaParametro = this.getControladorUtil().pesquisarParametrosDoSistema();
		
		FiltroConta filtroConta = new FiltroConta();
		
		filtroConta.adicionarParametro(
				new ParametroSimples(FiltroConta.IMOVEL_ID, imovelProgramaEspecial.getImovel().getId()));
		filtroConta.adicionarParametro(
				new ParametroSimples(FiltroConta.REFERENCIA, sistemaParametro.getAnoMesFaturamento()));
		
		Collection<Conta> colecaoContas = this.getControladorUtil().pesquisar(filtroConta, Conta.class.getName());
	
		conta = (Conta) Util.retonarObjetoDeColecao(colecaoContas);
		
		if(conta!=null){
			
			FiltroClienteConta filtroClienteConta = new FiltroClienteConta();
			
			filtroClienteConta.adicionarParametro(
					new ParametroSimples(FiltroClienteConta.CONTA_ID, conta.getId()));
			filtroClienteConta.adicionarParametro(
					new ParametroSimples(FiltroClienteConta.CLIENTE_ID, sistemaParametro.getClienteResponsavelProgramaEspecial().getId()));
			
			filtroClienteConta.adicionarCaminhoParaCarregamentoEntidade(FiltroClienteConta.CONTA);
			filtroClienteConta.adicionarCaminhoParaCarregamentoEntidade(FiltroClienteConta.CLIENTE);
			
			
			Collection<ClienteConta> colecaoClienteConta = this.getControladorUtil().pesquisar(filtroClienteConta, ClienteConta.class.getName());
			
			clienteConta = (ClienteConta) Util.retonarObjetoDeColecao(colecaoClienteConta);
			
			if(clienteConta!=null){
				
				FiltroPagamento filtroPagamento = new FiltroPagamento();
				
				filtroPagamento.adicionarParametro(
						new ParametroSimples(FiltroPagamento.CONTA_ID, clienteConta.getConta().getId()));
				
				Collection<Pagamento> colecaoPagamento = this.getControladorUtil().pesquisar(filtroPagamento, Pagamento.class.getName());
				
				pagamento = (Pagamento) Util.retonarObjetoDeColecao(colecaoPagamento);
								
			}
			
		}
		
		if(conta !=null && clienteConta!=null && pagamento==null){
			
			throw new ControladorException("atencao.suspensao.so.possivel.depois.faturamento");
				
		}
		
	}
		
	/**
	 * 
	 * [UC0976] Suspender Imóvel em Programa Especial Forma Online
	 *  	Suspende Imóvel em Programa Especial forma Online
	 * @author Hugo Amorim
	 * @since 13/01/2010
	 *
	 */
	public void suspenderImovelEmProgramaEspecialOnline(ImovelProgramaEspecial imovelProgramaEspecial,
			Usuario usuarioLogado,Short formaSuspensao) throws ControladorException{	
		
		Date dataAtual = new Date();
		
		Imovel imovel = imovelProgramaEspecial.getImovel();
		ImovelPerfil imovelPerfil = new ImovelPerfil();
		imovelPerfil.setId(ImovelPerfil.NORMAL);
		imovel.setIndicadorEmissaoExtratoFaturamento(ConstantesSistema.NAO);
		imovel.setImovelPerfil(imovelPerfil);
		imovel.setUltimaAlteracao(dataAtual);

		this.getControladorUtil().atualizar(imovel);		
			
		imovelProgramaEspecial.setUltimaAlteracao(dataAtual);
		imovelProgramaEspecial.setMesAnoSaidaPrograma(imovel.getQuadra().getRota().getFaturamentoGrupo().getAnoMesReferencia());
		imovelProgramaEspecial.setUsuarioSuspensao(usuarioLogado);
		imovelProgramaEspecial.setFormaSuspensao(formaSuspensao);
		imovelProgramaEspecial.setDataSuspensao(dataAtual);
		imovelProgramaEspecial.setUltimaAlteracao(dataAtual);

		this.getControladorUtil().atualizar(imovelProgramaEspecial);
		
	}
	
	/**
	 * 
	 * [UC0973] Inserir Imóvel em Programa Especial
	 *  	Inseri Imóvel em Programa Especial
	 * @author Hugo Amorim
	 * @since 13/01/2010
	 *
	 */
	public Integer inserirImovelEmProgramaEspecial(ImovelProgramaEspecial imovelProgramaEspecial,
			Usuario usuarioLogado) throws ControladorException{
		
		SistemaParametro sistemaParametro = this.getControladorUtil().pesquisarParametrosDoSistema();
		
		Date dataAtual = new Date();
		
		FiltroClienteImovel filtroClienteImovel = new FiltroClienteImovel();
		filtroClienteImovel
				.adicionarCaminhoParaCarregamentoEntidade("cliente");
		filtroClienteImovel
				.adicionarCaminhoParaCarregamentoEntidade("clienteRelacaoTipo");
		
		filtroClienteImovel.adicionarParametro(new ParametroSimples(
				FiltroClienteImovel.IMOVEL_ID, imovelProgramaEspecial.getImovel().getId()));
		filtroClienteImovel.adicionarParametro(new ParametroSimples(
				FiltroClienteImovel.CLIENTE_RELACAO_TIPO_ID, ClienteRelacaoTipo.RESPONSAVEL));
		filtroClienteImovel.adicionarParametro(new ParametroNulo(
				FiltroClienteImovel.DATA_FIM_RELACAO));
		filtroClienteImovel.adicionarParametro(new ParametroSimples(
				FiltroClienteImovel.CLIENTE_ID, sistemaParametro.getClienteResponsavelProgramaEspecial().getId()));

		Collection clientesImovel = this.getControladorUtil().pesquisar(
				filtroClienteImovel, ClienteImovel.class.getName());
		
		ClienteImovel clienteImovel = (ClienteImovel) Util.retonarObjetoDeColecao(clientesImovel);
		
		if(clienteImovel==null){
			ClienteImovel clienteImovelInclusao = new ClienteImovel();
			
			Cliente cliente = new Cliente();
			cliente.setId(sistemaParametro.getClienteResponsavelProgramaEspecial().getId());
			clienteImovelInclusao.setCliente(cliente);		
			clienteImovelInclusao.setImovel(imovelProgramaEspecial.getImovel());
			clienteImovelInclusao.setUltimaAlteracao(dataAtual);
			clienteImovelInclusao.setDataInicioRelacao(dataAtual);
			ClienteRelacaoTipo clienteRelacaoTipo = new ClienteRelacaoTipo();
			clienteRelacaoTipo.setId(new Integer(ClienteRelacaoTipo.RESPONSAVEL));
			clienteImovelInclusao.setClienteRelacaoTipo(clienteRelacaoTipo);
			clienteImovelInclusao.setIndicadorNomeConta(ConstantesSistema.NAO);
			clienteImovelInclusao.setUltimaAlteracao(dataAtual);
			
			this.getControladorUtil().inserir(clienteImovelInclusao);
		}
		
		ImovelPerfil imovelPerfil = new ImovelPerfil();
		imovelPerfil.setId(sistemaParametro.getPerfilProgramaEspecial().getId());
		
		Imovel imovel = imovelProgramaEspecial.getImovel();
		imovel.setImovelPerfil(imovelPerfil);
		imovel.setIndicadorEmissaoExtratoFaturamento(ConstantesSistema.SIM);
		imovel.setUltimaAlteracao(dataAtual);
		CobrancaSituacaoTipo cobrancaSituacaoTipo = new CobrancaSituacaoTipo();
		//Constante = 1
		cobrancaSituacaoTipo.setId(CobrancaSituacaoTipo.COBRANCA_EMPRESA_TERCEIRIZADA);
		imovel.setCobrancaSituacaoTipo(cobrancaSituacaoTipo);
		
		this.getControladorUtil().atualizar(imovel);
		
		/**
		 * Inserir Situacao de cobranca historico
		 * @author Arthur Carvalho
		 * @date 02/08/2011
		 */		
		
		CobrancaSituacaoMotivo cobrancaSituacaoMotivo = new CobrancaSituacaoMotivo();
		cobrancaSituacaoMotivo.setId(CobrancaSituacaoMotivo.IMOVEL_CADASTRADO_VIVA_AGUA);
		
		CobrancaSituacaoHistorico cobrancaSituacaoHistorico = new CobrancaSituacaoHistorico();
		cobrancaSituacaoHistorico.setImovel(imovel);
		cobrancaSituacaoHistorico.setCobrancaSituacaoMotivo(cobrancaSituacaoMotivo);
		cobrancaSituacaoHistorico.setCobrancaSituacaoTipo(cobrancaSituacaoTipo);
		cobrancaSituacaoHistorico.setAnoMesCobrancaSituacaoInicio(imovelProgramaEspecial.getImovel().getQuadra().getRota().getFaturamentoGrupo().getAnoMesReferencia());
		cobrancaSituacaoHistorico.setAnoMesCobrancaSituacaoFim(new Integer(201512));
		cobrancaSituacaoHistorico.setUsuario(usuarioLogado);
		cobrancaSituacaoHistorico.setUltimaAlteracao(new Date());

		this.getControladorUtil().inserir(cobrancaSituacaoHistorico);
		
		
		imovelProgramaEspecial.setDataInclusao(dataAtual);
		imovelProgramaEspecial.setMesAnoInicioPrograma(imovelProgramaEspecial.getImovel().getQuadra().getRota().getFaturamentoGrupo().getAnoMesReferencia());	
		imovelProgramaEspecial.setUltimaAlteracao(dataAtual);
		imovelProgramaEspecial.setUsuarioResponsavel(usuarioLogado);
		imovelProgramaEspecial.setImovelPerfil(imovelPerfil);
			
		Integer idImovelInserido = 
			(Integer) this.getControladorUtil().inserir(imovelProgramaEspecial);
		
		return idImovelInserido;
		
	}
	
	/**
	 * 
	 * [UC0976] Suspender Imóvel em Programa Especial Batch
	 *  	Suspende Imóveis ativos no Programa Especial
	 * @author Hugo Amorim
	 * @since 13/01/2010
	 *
	 */
	public void suspenderImovelEmProgramaEspecialBatch(int idFuncionalidadeIniciada,
			Usuario usuarioLogado,Rota rota)
		throws ControladorException{
		
		Short formaSuspensao = ImovelProgramaEspecial.FORMA_SUSPENSAO_BATCH;
		
		int idUnidadeIniciada = 0;
		
		boolean imovelParaSuspender = false;
		
		int quantidadeImoveisLidos = 0;
		int quantidadeImoveisSuspensos = 0;
		
		SistemaParametro sistemaParametro = this.getControladorUtil().pesquisarParametrosDoSistema();
		
		idUnidadeIniciada = 
			getControladorBatch().iniciarUnidadeProcessamentoBatch(
				idFuncionalidadeIniciada,
				UnidadeProcessamento.ROTA,rota.getId());
		
		
		// Variáveis para a paginação da pesquisa de Imovel por Grupo Faturamento
		// ========================================================================
		boolean flagTerminou = false;
		final int quantidadeRegistros = 5000;
		int numeroIndice = 0;
		// ========================================================================
		
		try{
			
			if(sistemaParametro.getPerfilProgramaEspecial()==null){
				throw new ControladorException("atencao.nao.existe.perfil.programa.cadastrado");
			}
			
			while(!flagTerminou){
		
				Collection imoveisProgramaEspecial = repositorioCadastro.pesquisarImovelEmProgramaEspecial(
						sistemaParametro.getPerfilProgramaEspecial().getId(),
						rota,
						numeroIndice,
						quantidadeRegistros);
										
				if(imoveisProgramaEspecial!=null && !imoveisProgramaEspecial.isEmpty()){
			
					Iterator imoveisProgramaEspecialIterator = imoveisProgramaEspecial.iterator();	

					while (imoveisProgramaEspecialIterator.hasNext()) {
			
						Object[] dados = (Object[]) imoveisProgramaEspecialIterator.next();
						quantidadeImoveisLidos+=1;
						
						ImovelProgramaEspecial imovelProgramaEspecial = (ImovelProgramaEspecial) dados[0];
						
						Imovel imovel = (Imovel) dados[1];
						
						Quadra quadra = new Quadra();
						quadra.setId(new Integer(dados[2].toString()));
						
						FaturamentoGrupo faturamentoGrupo = new FaturamentoGrupo();
						faturamentoGrupo.setId(new Integer(dados[4].toString()));
						faturamentoGrupo.setAnoMesReferencia(new Integer(dados[5].toString()));
						
						rota.setFaturamentoGrupo(faturamentoGrupo);
						quadra.setRota(rota);
						imovel.setQuadra(quadra);
						imovelProgramaEspecial.setImovel(imovel);
						
						/*
						 * 2.2.1.	Caso a data de suspensão não esteja informada;
						 * 				 [FS0007]  Verifica dados do imóvel no programa especial
						 * 2.2.2.	Ou caso o indicador de forma de suspensão igual a 1; 
						 * 				 [FS0008]  Verifica dados do imóvel no programa especial suspenso
                         *		
						 */
						
						if(imovelProgramaEspecial.getFormaSuspensao()!=null
								&& imovelProgramaEspecial.getFormaSuspensao()
									.compareTo(ImovelProgramaEspecial.FORMA_SUSPENSAO_OPERADOR)==0){
							
							boolean suspender = false;
							// [FS0008] Verifica dados do imóvel no programa especial suspenso
							suspender = this.verificarRemocaoRelacaoClienteComImovel(imovelProgramaEspecial, sistemaParametro);
							
						    if(suspender){
						    	imovelParaSuspender = true;
						    	quantidadeImoveisSuspensos+=1;
						    }
							
						}else{
							//[FS0007]  Verifica dados do imóvel no programa especial
							imovelParaSuspender = validarDadosSuspenderImovelProgramaEspecial(
								imovelProgramaEspecial,sistemaParametro);
							
						}
						
						if(imovelParaSuspender){
							
							this.efetuarSuspensaoImovelEmProgramaEspecial(
									imovelProgramaEspecial,usuarioLogado,formaSuspensao);
							
							quantidadeImoveisSuspensos+=1;
							
						}else{
							continue;
						}
					}			
				}
			
			/**
			 * Incrementa o nº do indice da páginação
			 */
			numeroIndice = numeroIndice + quantidadeRegistros;

			/**
			 * Caso a coleção de imoveis retornados for menor que a
			 * quantidade de registros seta a flag indicando que a
			 * paginação terminou.
			 */
			if (imoveisProgramaEspecial == null || imoveisProgramaEspecial.size() < quantidadeRegistros) {

				flagTerminou = true;
			}

			if (imoveisProgramaEspecial != null) {
				imoveisProgramaEspecial.clear();
				imoveisProgramaEspecial = null;
			}				
		}// FIM DO LOOP DA PAGINAÇÃO
			
		getControladorBatch().encerrarUnidadeProcessamentoBatch(
				null, idUnidadeIniciada, false);				
			
		} catch (Exception e) { 
			// Este catch serve para interceptar
			// qualquer exceção que o processo batch
			// venha a lançar e garantir que a unidade
			// de processamento do batch será atualizada
			// com o erro ocorrido
			
			EnvioEmail envioEmail = 
				this.pesquisarEnvioEmail(
					EnvioEmail.SUSPENDER_IMOVEL_EM_PROGRAMA_ESPECIAL_EMAIL);

			String emailRemetente = envioEmail.getEmailReceptor();

			String tituloMensagem = envioEmail.getTituloMensagem();

			String emailReceptor = envioEmail.getEmailReceptor();

			String mensagem = envioEmail.getCorpoMensagem();
			
			mensagem = mensagem + " Quantidades de imóveis lidos " + quantidadeImoveisLidos 
				+ " ,  quantidades de imóveis suspensos " + quantidadeImoveisSuspensos + " . Log Erro -> "
				+ e.getMessage();
			
			try {
				ServicosEmail.enviarMensagem(emailRemetente, emailReceptor,
						tituloMensagem, mensagem);
			} catch (ErroEmailException erroEnviarEmail) {
				
			}
			
			
			getControladorBatch().encerrarUnidadeProcessamentoBatch(e,
					idUnidadeIniciada, true);
		 }		
		
		
//		EnvioEmail envioEmail = 
//			this.pesquisarEnvioEmail(
//				EnvioEmail.SUSPENDER_IMOVEL_EM_PROGRAMA_ESPECIAL_EMAIL);
//
//		String emailRemetente = envioEmail.getEmailReceptor();
//
//		String tituloMensagem = envioEmail.getTituloMensagem();
//
//		String emailReceptor = envioEmail.getEmailReceptor();
//
//		String mensagem = envioEmail.getCorpoMensagem();
//		
//		mensagem = mensagem + " Quantidades de imóveis lidos " + quantidadeImoveisLidos 
//			+ " ,  quantidades de imóveis suspensos " + quantidadeImoveisSuspensos + " .";
//		
//
//		
//		try {
//			ServicosEmail.enviarMensagem(emailRemetente, emailReceptor,
//					tituloMensagem, mensagem);
//		} catch (ErroEmailException erroEnviarEmail) {
//			
//		}
	}
	
	/**
	 * 
	 * [UC0973] Inserir Imóvel em Programa Especial
	 * [FS0007] Validar dados do imóvel no programa especial
	 * @author Hugo Amorim
	 * @since 17/12/2009
	 *
	 */
	private boolean validarDadosSuspenderImovelProgramaEspecial(ImovelProgramaEspecial imovelProgramaEspecial,
			SistemaParametro sistemaParametro) throws ControladorException {
		
		boolean retorno = false;		
		
		// Verifica Situação
		// de agua.
		if(imovelProgramaEspecial.getImovel().getLigacaoAguaSituacao()!=null){
			if(imovelProgramaEspecial.getImovel().getLigacaoAguaSituacao().getId().compareTo(LigacaoAguaSituacao.LIGADO)!=0){
				
				return true;
				
			}
		}
			
		// Verifica se categoria do imovel
		// e igual a residencial
		Collection colecaoSubcategoriasImovel = 
			this.getControladorImovel().obterColecaoImovelSubcategorias(imovelProgramaEspecial.getImovel(),new Integer(0));
		
		if(colecaoSubcategoriasImovel!=null && !colecaoSubcategoriasImovel.isEmpty()){
			for (Iterator iterator = colecaoSubcategoriasImovel.iterator(); iterator
					.hasNext();) {
				ImovelSubcategoria imovelSubcategoria = (ImovelSubcategoria) iterator.next();
							
				if(imovelSubcategoria.getComp_id().getSubcategoria().getCategoria().getId().compareTo(Categoria.RESIDENCIAL)!=0){
					
					return true;
				}	
			}
		}
		
		// Verifica se immóvel não possui hidrometro
		// e tem área construída superior a 100m2
		
		// Obtém o indicador de existência de hidrômetro para o imóvel, caso exista
		// retorna 1(um) indicando SIM caso contrário retorna 2(dois) indicando NÃO
		Integer possuiHidrometro = this.getControladorImovel().obterIndicadorExistenciaHidrometroImovel(imovelProgramaEspecial.getImovel().getId());
		
		if(possuiHidrometro.compareTo(new Integer(2))==0 
				&& imovelProgramaEspecial.getImovel().getAreaConstruida().compareTo(new BigDecimal("100"))>0){

			return true;
		}
		
		// [FS0005] Validar dados do imóvel no programa especial
		// Verifica consumo de água do mês atual
		// é maior que 25m3	
		
		FaturamentoGrupo faturamentoGrupo = Fachada.getInstancia()
				.recuperaGrupoFaturamentoDoImovel(imovelProgramaEspecial.getImovel().getId());

		Integer mesAnoFaturamento = faturamentoGrupo.getAnoMesReferencia();
		Integer mesAnoAnteriorFaturamento = Util.subtraiAteSeisMesesAnoMesReferencia(mesAnoFaturamento, 1);
		
		Integer consumoFaturado = null;
		
		consumoFaturado = this.getControladorImovel()
								.obterConsumoFaturadoImovelNoMes(imovelProgramaEspecial.getImovel().getId(),
										mesAnoFaturamento);		
		if(consumoFaturado==null){
			
			consumoFaturado = this.getControladorImovel()
				.obterConsumoFaturadoImovelNoMes(imovelProgramaEspecial.getImovel().getId(),
						mesAnoAnteriorFaturamento);		
		}
		
		if(consumoFaturado != null && 
			possuiHidrometro.compareTo(new Integer(1)) == 0 && 
			consumoFaturado.compareTo(new Integer(25)) > 0){
			
			return true;
		}	
		
		FiltroClienteImovel filtroClienteImovel = new FiltroClienteImovel();
		
		filtroClienteImovel.adicionarParametro(new ParametroSimples(
				FiltroClienteImovel.IMOVEL_ID, imovelProgramaEspecial.getImovel().getId()));
		filtroClienteImovel.adicionarParametro(new ParametroSimples(
				FiltroClienteImovel.CLIENTE_RELACAO_TIPO_ID, ClienteRelacaoTipo.RESPONSAVEL));
		filtroClienteImovel.adicionarParametro(new ParametroNulo(
				FiltroClienteImovel.DATA_FIM_RELACAO));
		filtroClienteImovel.adicionarParametro(new ParametroSimples(
				FiltroClienteImovel.CLIENTE_ID, sistemaParametro.getClienteResponsavelProgramaEspecial().getId()));

		Collection clientesImovel = this.getControladorUtil().pesquisar(
				filtroClienteImovel, ClienteImovel.class.getName());
		
		ClienteImovel clienteImovel = (ClienteImovel) Util.retonarObjetoDeColecao(clientesImovel);
		
		if(clienteImovel==null){
			
			return true;
		}

		return retorno;

	}
	

	/**
	 * [UC0979] Gerar Relatório de Imóveis em Programas Especiais Analitico
	 * 
	 * @author Hugo Leonardo
	 * @date 18/01/2010
	 * 
	 * @param RelatorioImoveisProgramasEspeciaisHelper
	 * 
	 * @return Collection<RelatorioImoveisProgramasEspeciaisHelper>
	 * @throws FachadaException
	 */
	public Collection pesquisarRelatorioImoveisProgramasEspeciaisAnalitico(
		FiltrarRelatorioImoveisProgramasEspeciaisHelper helper)throws ControladorException {
		
		Collection colecaoRetorno = new ArrayList();
		try {
			
			Collection imovelProgramaEspecial =  repositorioCadastro.pesquisarRelatorioImoveisProgramasEspeciaisAnalitico(helper);
			
			Iterator iteratorImovelPrograma = imovelProgramaEspecial.iterator();
			
			while (iteratorImovelPrograma.hasNext()) {
			
				RelatorioImoveisProgramasEspeciaisHelper relatorioHelper = new RelatorioImoveisProgramasEspeciaisHelper();
				
				Object[] objeto = (Object[]) iteratorImovelPrograma.next();
				
				//Id do Imovel
				if ( objeto[0] != null ) {
					String idImovel = objeto[0].toString();
					Imovel imovel = new Imovel();
					relatorioHelper.setEndereco(getControladorEndereco().obterEnderecoAbreviadoImovel(
							(Integer)objeto[0] ));
					imovel.setId(Integer.parseInt(idImovel));
					
					idImovel = imovel.getMatriculaFormatada();
					
					relatorioHelper.setIdImovel(idImovel);
				}
				
				// Id Regiao de Desenvolvimento
				if ( objeto[1] != null ) {
					Integer idRegiaoDesenvolvimento = (Integer) objeto[1];
					
					relatorioHelper.setIdRegiaoDesenvolvimento( idRegiaoDesenvolvimento);
				}
				
				//Nome da Regiao de Desenvolvimento
				if ( objeto[2] != null ) {
					relatorioHelper.setNomeRegiaoDesenvolvimento( (String) objeto[2]);
				}
				
				/*
				//Id da unidade de negocio
				if ( objeto[1] != null ) {
					Integer idUnidadeNegocio = (Integer) objeto[1];
					
					relatorioHelper.setIdUnidadeNegocio( idUnidadeNegocio);
				}
				
				//Nome da unidade de negocio
				if ( objeto[2] != null ) {
					relatorioHelper.setNomeUnidadeNegocio( (String) objeto[2]);
				}
				*/
				
				//Id da localidade
				if ( objeto[3] != null ) {
					Integer idLocalidade = (Integer) objeto[3];
					
					relatorioHelper.setIdLocalidade( idLocalidade);
				}
				
				//nome da localidade
				if ( objeto[4] != null ) {
					relatorioHelper.setNomeLocalidade( (String) objeto[4]);
				}
				
				//nome do cliente
				if( objeto[5] != null){
					relatorioHelper.setNomeUsuario( (String) objeto[5]);
				}
				
				//situacao medicao
				if( objeto[6] != null){
					relatorioHelper.setSituacaoMedicao( (String) objeto[6]);
				}
				
				//consumo agua
				if(objeto[7] != null){
					Integer consumoAgua = (Integer) objeto[7];
					
					relatorioHelper.setConsumoAgua( consumoAgua);
				}
				
				//valor conta
				if(objeto[8] != null){
					BigDecimal valorConta = (BigDecimal) objeto[8];
					
					relatorioHelper.setValorConta( valorConta);
				}
				
				colecaoRetorno.add(relatorioHelper);
			}
			
		} catch (ErroRepositorioException e) {
			throw new ControladorException("erro.sistema", e);
		}
		return colecaoRetorno;
	}
	
	/**
	 * [UC0979] Gerar Relatório de Imóveis em Programas Especiais
	 * 
	 * @author Hugo Leonardo
	 * @date 19/01/2010
	 * 
	 * @param RelatorioImoveisProgramasEspeciaisHelper
	 * 
	 * @return Collection<RelatorioImoveisProgramasEspeciaisHelper>
	 * @throws FachadaException
	 */
	public Integer pesquisarTotalRegistroRelatorioImoveisProgramaEspecial(
			FiltrarRelatorioImoveisProgramasEspeciaisHelper filtro) 
			throws ControladorException{
		
		
		try {
			return this.repositorioCadastro
					.pesquisarTotalRegistroRelatorioImoveisProgramaEspecial(filtro);
			
		} catch (ErroRepositorioException ex) {
			throw new ControladorException("erro.sistema", ex);
		}
		
	}
	
	/**
	 * [UC0979] Gerar Relatório de Imóveis em Programas Especiais Sintetico
	 * 
	 * @author Hugo Leonardo
	 * @date 25/01/2010
	 * 
	 * @param RelatorioImoveisProgramasEspeciaisHelper
	 * 
	 * @return Collection<RelatorioImoveisProgramasEspeciaisHelper>
	 * @throws FachadaException
	 */
	public Collection pesquisarRelatorioImoveisProgramasEspeciaisSintetico(
		FiltrarRelatorioImoveisProgramasEspeciaisHelper helper)throws ControladorException {
		
		Collection colecaoRetorno = new ArrayList();
		try {
			
			Collection imovelProgramaEspecialSemHidr =  
				repositorioCadastro.pesquisarRelatorioImoveisProgramasEspeciaisSintetico(helper);
			
			Iterator iteratorImovelPrograma = imovelProgramaEspecialSemHidr.iterator();
			
			while (iteratorImovelPrograma.hasNext()) {
			
				RelatorioImoveisProgramasEspeciaisHelper relatorioHelper = 
						new RelatorioImoveisProgramasEspeciaisHelper();
				
				Object[] objeto = (Object[]) iteratorImovelPrograma.next();
				
				// Id Região de Desenvolvimento
				if ( objeto[0] != null ) {
					Integer idRegiaoDesenvolvimento = (Integer) objeto[0];
					
					relatorioHelper.setIdRegiaoDesenvolvimento( idRegiaoDesenvolvimento);
				}
				
				//Nome da unidade de negocio
				if ( objeto[1] != null ) {
					relatorioHelper.setNomeRegiaoDesenvolvimento( (String) objeto[1]);
				}
				
				/*
				//Id da unidade de negocio
				if ( objeto[0] != null ) {
					Integer idUnidadeNegocio = (Integer) objeto[0];
					
					relatorioHelper.setIdUnidadeNegocio( idUnidadeNegocio);
				}
				
				//Nome da unidade de negocio
				if ( objeto[1] != null ) {
					relatorioHelper.setNomeUnidadeNegocio( (String) objeto[1]);
				}
				*/
				
				//Id da localidade
				if ( objeto[2] != null ) {
					Integer idLocalidade = (Integer) objeto[2];
					
					relatorioHelper.setIdLocalidade( idLocalidade);
				}
				
				//nome da localidade
				if ( objeto[3] != null ) {
					relatorioHelper.setNomeLocalidade( (String) objeto[3]);
				}
				
				// QTD Imoveis Sem HIDR.
				if(objeto[4] != null){
					Integer qtdImoveisSemHidr = (Integer) objeto[4];
					
					relatorioHelper.setQtdImoveisSemHidr(qtdImoveisSemHidr);
				}
				
				// Valor Contas de Imoveis Sem HIDR.
				if(objeto[5] != null){
					BigDecimal valorContasSemHidr = (BigDecimal) objeto[5];

					relatorioHelper.setValorContasSemHidr(valorContasSemHidr);
				}

				// QTD de Imoveis com Hidro
				if ( objeto[6] != null ) {
					Integer qtdImoveisComHidr = (Integer) objeto[6];

					relatorioHelper.setQtdImoveisComHidr( qtdImoveisComHidr);
				}
				
				//valor Contas de Imoveis com HIDR
				if ( objeto[7] != null ) {
					BigDecimal valorContasComHidr = (BigDecimal) objeto[7];

					relatorioHelper.setValorContasComHidr( valorContasComHidr);
				}
				
				colecaoRetorno.add(relatorioHelper);
			}
			
		} catch (ErroRepositorioException e) {
			throw new ControladorException("erro.sistema", e);
		}
		return colecaoRetorno;
	}
	
	/**
	 * 
	 * [UC0976] Suspender Imóvel em Programa Especial Batch
	 *   Suspende Imóvel em Programa Especial Forma Batch
	 * @author Hugo Amorim
	 * @since 29/01/2010
	 *
	 */
    private void efetuarSuspensaoImovelEmProgramaEspecial(ImovelProgramaEspecial imovelProgramaEspecial,
			Usuario usuarioLogado,Short formaSuspensao) throws ControladorException{
		
		SistemaParametro sistemaParametro = this.getControladorUtil().pesquisarParametrosDoSistema();
		
		Date dataAtual = new Date();
		
		FiltroClienteImovel filtroClienteImovel = new FiltroClienteImovel();
		filtroClienteImovel.adicionarCaminhoParaCarregamentoEntidade("cliente");
		
		filtroClienteImovel
				.adicionarCaminhoParaCarregamentoEntidade("clienteRelacaoTipo");
		
		filtroClienteImovel.adicionarParametro(new ParametroSimples(
				FiltroClienteImovel.IMOVEL_ID, imovelProgramaEspecial
						.getImovel().getId()));
		
		filtroClienteImovel.adicionarParametro(
				new ParametroNulo(FiltroClienteImovel.DATA_FIM_RELACAO));
		
		filtroClienteImovel.adicionarParametro(new ParametroSimples(
				FiltroClienteImovel.CLIENTE_RELACAO_TIPO_ID,
				ClienteRelacaoTipo.RESPONSAVEL));
		
		filtroClienteImovel.adicionarParametro(new ParametroSimples(
				FiltroClienteImovel.CLIENTE_ID, sistemaParametro
						.getClienteResponsavelProgramaEspecial().getId()));

		Collection clientesImovel = this.getControladorUtil().pesquisar(filtroClienteImovel,
				ClienteImovel.class.getName());

		ClienteImovel clienteImovelAtulizar = (ClienteImovel) Util
				.retonarObjetoDeColecao(clientesImovel);
		
		if(clienteImovelAtulizar!=null){
		
			clienteImovelAtulizar.setDataFimRelacao(dataAtual);
			ClienteImovelFimRelacaoMotivo clienteImovelFimRelacaoMotivo = new ClienteImovelFimRelacaoMotivo();
			clienteImovelFimRelacaoMotivo
					.setId(ClienteImovelFimRelacaoMotivo.EXCLUSAO_PROGRAMA_ESPECIAL);
			clienteImovelAtulizar
					.setClienteImovelFimRelacaoMotivo(clienteImovelFimRelacaoMotivo);
			clienteImovelAtulizar.setUltimaAlteracao(dataAtual);

			this.getControladorUtil().atualizar(clienteImovelAtulizar);
		}
		
		Imovel imovel = imovelProgramaEspecial.getImovel();
		ImovelPerfil imovelPerfil = new ImovelPerfil();
		imovelPerfil.setId(ImovelPerfil.NORMAL);
		imovel.setIndicadorEmissaoExtratoFaturamento(ConstantesSistema.NAO);
		imovel.setImovelPerfil(imovelPerfil);
		imovel.setUltimaAlteracao(dataAtual);

		this.getControladorUtil().atualizar(imovel);		
			
		imovelProgramaEspecial.setUltimaAlteracao(dataAtual);
		imovelProgramaEspecial.setMesAnoSaidaPrograma(imovel.getQuadra().getRota().getFaturamentoGrupo().getAnoMesReferencia());
		imovelProgramaEspecial.setUsuarioSuspensao(Usuario.USUARIO_BATCH);
		imovelProgramaEspecial.setFormaSuspensao(formaSuspensao);
		imovelProgramaEspecial.setDataSuspensao(dataAtual);
		imovelProgramaEspecial.setUltimaAlteracao(dataAtual);

		this.getControladorUtil().atualizar(imovelProgramaEspecial);
		
	}
    
    /**
	 * 
	 * [UC0976] Suspender Imóvel em Programa Especial Batch
	 * 
	 * Remover somente Relação caso tenha sido suspenso de forma online. 
	 * 
	 * @author Hugo Amorim
     * @throws ControladorException 
	 * @since 29/01/2010
	 *
	 */
    private boolean verificarRemocaoRelacaoClienteComImovel(ImovelProgramaEspecial imovelProgramaEspecial,SistemaParametro sistemaParametro) throws ControladorException{
    	
    	boolean retorno = false;
    	
    	//Date dataAtual = new Date();
    	
    	FiltroClienteImovel filtroClienteImovel = new FiltroClienteImovel();
    	
		filtroClienteImovel.adicionarCaminhoParaCarregamentoEntidade("cliente");
		filtroClienteImovel.adicionarCaminhoParaCarregamentoEntidade("clienteRelacaoTipo");
		
		filtroClienteImovel.adicionarParametro(new ParametroSimples(
				FiltroClienteImovel.IMOVEL_ID, imovelProgramaEspecial
						.getImovel().getId()));
		
		filtroClienteImovel.adicionarParametro(
				new ParametroNulo(FiltroClienteImovel.DATA_FIM_RELACAO));
		
		filtroClienteImovel.adicionarParametro(new ParametroSimples(
				FiltroClienteImovel.CLIENTE_RELACAO_TIPO_ID,
				ClienteRelacaoTipo.RESPONSAVEL));
		
		filtroClienteImovel.adicionarParametro(new ParametroSimples(
				FiltroClienteImovel.CLIENTE_ID, sistemaParametro
						.getClienteResponsavelProgramaEspecial().getId()));

		Collection clientesImovel = this.getControladorUtil().pesquisar(filtroClienteImovel,
				ClienteImovel.class.getName());

		ClienteImovel clienteImovelAtulizar = (ClienteImovel) Util
				.retonarObjetoDeColecao(clientesImovel);
		
		if(clienteImovelAtulizar!=null){
			/*
			clienteImovelAtulizar.setDataFimRelacao(dataAtual);
			ClienteImovelFimRelacaoMotivo clienteImovelFimRelacaoMotivo = new ClienteImovelFimRelacaoMotivo();
			clienteImovelFimRelacaoMotivo
					.setId(ClienteImovelFimRelacaoMotivo.EXCLUSAO_PROGRAMA_ESPECIAL);
			clienteImovelAtulizar
					.setClienteImovelFimRelacaoMotivo(clienteImovelFimRelacaoMotivo);
			clienteImovelAtulizar.setUltimaAlteracao(dataAtual);

			this.getControladorUtil().atualizar(clienteImovelAtulizar);
			*/
			
			retorno = true;
		}
      return retorno;	
    }
    
    /**
	 * 
	 * [UC0973] Inserir Imóvel em Programa Especial
	 * 
	 * Verificar se existe parcelamento para o Imovel em Programa Especial.
	 * 
	 * @author Hugo Leonardo
     * @throws ControladorException 
	 * @date 10/02/2010
	 *
	 */

			public Boolean verificarExistenciaParcelamentoImovel(Integer idImovel) throws ControladorException{
    	
    	try {
			Integer qtdSetores = this.repositorioCadastro.verificarExistenciaParcelamentoImovel(idImovel);
			return (qtdSetores > 0);

		} catch (ErroRepositorioException ex) {
			ex.printStackTrace();
			throw new ControladorException("erro.sistema", ex);
		}
    }
    
    /**
	 * [UC0999] Gerar Relatório de Coleta de Medidor de Energia.
	 * 
	 * @author Hugo Leonardo
	 * @date 09/03/2010
	 * 
	 * @param FiltrarRelatorioColetaMedidorEnergiaHelper
	 * 
	 * @return Collection<RelatorioColetaMedidorEnergiaHelper>
	 * @throws ControladorException
	 */
	public Collection<RelatorioColetaMedidorEnergiaHelper> pesquisarRelatorioColetaMedidorEnergia(
			FiltrarRelatorioColetaMedidorEnergiaHelper helper) throws ControladorException{
		
		Collection colecaoRetorno = new ArrayList();
		try {
			
			Collection coletaMedidorEnergia =  
				repositorioCadastro.pesquisarRelatorioColetaMedidorEnergia(
						helper.getIdFaturamentoGrupo() != null ? helper.getIdFaturamentoGrupo().toString() : null, 
						helper.getIdLocalidadeInicial() != null ? helper.getIdLocalidadeInicial().toString() : null,
						helper.getIdLocalidadeFinal() != null ? helper.getIdLocalidadeFinal().toString() : null,
						helper.getIdSetorComercialInicial() != null ? helper.getIdSetorComercialInicial().toString() : null,
						helper.getIdSetorComercialFinal() != null ? helper.getIdSetorComercialFinal().toString() : null,
						helper.getRotaInicial() != null ? helper.getRotaInicial().toString() : null,
						helper.getRotaFinal() != null ? helper.getRotaFinal().toString() : null,
						helper.getSequencialRotaInicial() != null ? helper.getSequencialRotaInicial().toString() : null,
						helper.getSequencialRotaFinal() != null ? helper.getSequencialRotaFinal().toString() : null);
			
			Iterator iteratorColetaMedidorEnergia = coletaMedidorEnergia.iterator();
			
			while (iteratorColetaMedidorEnergia.hasNext()) {
			
				RelatorioColetaMedidorEnergiaHelper relatorioHelper = 
						new RelatorioColetaMedidorEnergiaHelper();
				
				Object[] objeto = (Object[]) iteratorColetaMedidorEnergia.next();
				
				// Id do faturamentoGrupo
				if ( objeto[0] != null ) {
					Integer faturamentoGrupo = (Integer) objeto[0];
					
					relatorioHelper.setIdFaturamentoGrupo( faturamentoGrupo.toString());
				}
				
				// Descrição do faturamentoGrupo
				if ( objeto[1] != null ) {
					String descricaoFaturamentoGrupo = (String) objeto[1];
					relatorioHelper.setDescricaoFaturamentoGrupo( descricaoFaturamentoGrupo);
				}
				
				// Id localidade
				if ( objeto[2] != null ) {
					Integer idLocalidade = (Integer) objeto[2];
					relatorioHelper.setIdLocalidade( idLocalidade.toString());
				}
				
				// Descrição localidade
				if ( objeto[3] != null ) {
					String descricaoLocalidade = (String) objeto[3];
					relatorioHelper.setDescricaoLocalidade( descricaoLocalidade);
				}
				
				// Codigo Rota
				if ( objeto[4] != null ) {
					Short codigoRota = (Short) objeto[4];
					relatorioHelper.setRota( codigoRota.toString());
				}
				
				// Nome Cliente
				if ( objeto[5] != null ) {
					String nomeCliente = (String) objeto[5];
					relatorioHelper.setNomeCliente( nomeCliente);
				}
				
				// Id Imovel
				if ( objeto[6] != null ) {
					Integer idImovel = (Integer) objeto[6];
					relatorioHelper.setMatriculaImovel( idImovel.toString());
				}
				
				colecaoRetorno.add(relatorioHelper);
			}
			
		} catch (ErroRepositorioException e) {
			throw new ControladorException("erro.sistema", e);
		}
		return colecaoRetorno;
		
	}
	
    /**
	 * [UC0999] Gerar Relatório de Coleta de Medidor de Energia.
	 * 
	 * Obtém a quantidade de imoveis de acordo com o filtro.
	 * 
	 * @author Hugo Leonardo
	 * @date 09/03/2010
	 * 
	 * @param FiltrarRelatorioColetaMedidorEnergiaHelper
	 * 
	 * @return Integer
	 * @throws ControladorException
	 */
	public Integer countRelatorioColetaMedidorEnergia(
			FiltrarRelatorioColetaMedidorEnergiaHelper helper) throws ControladorException{
		
		try {
			return this.repositorioCadastro
					.pesquisarTotalRegistroRelatorioColetaMedidorEnergia(
							helper.getIdFaturamentoGrupo() != null ? helper.getIdFaturamentoGrupo().toString() : null, 
							helper.getIdLocalidadeInicial() != null ? helper.getIdLocalidadeInicial().toString() : null,
							helper.getIdLocalidadeFinal() != null ? helper.getIdLocalidadeFinal().toString() : null,
							helper.getIdSetorComercialInicial() != null ? helper.getIdSetorComercialInicial().toString() : null,
							helper.getIdSetorComercialFinal() != null ? helper.getIdSetorComercialFinal().toString() : null,
							helper.getRotaInicial() != null ? helper.getRotaInicial().toString() : null,
							helper.getRotaFinal() != null ? helper.getRotaFinal().toString() : null,
							helper.getSequencialRotaInicial() != null ? helper.getSequencialRotaInicial().toString() : null,
							helper.getSequencialRotaFinal() != null ? helper.getSequencialRotaFinal().toString() : null);
			
		} catch (ErroRepositorioException ex) {
			throw new ControladorException("erro.sistema", ex);
		}
	}

    /**
	 * [UC1011] Emitir Boletim de Cadastro Individual.
	 * 
	 * Criar Dados para Relatório de Boletim de Cadastro Individual
	 * 
	 * @author Hugo Leonardo
	 * @date 24/03/2010
	 * 
	 * @param idImovel
	 * 
	 * @return RelatorioBoletimCadastroIndividualBean
	 * @throws ControladorException
	 */
	public RelatorioBoletimCadastroIndividualBean criarDadosRelatorioBoletimCadastroIndividual(
			Integer idImovel) throws ControladorException{
		
		RelatorioBoletimCadastroIndividualBean bean = new RelatorioBoletimCadastroIndividualBean();
		
		
		ClienteEmitirBoletimCadastroHelper clienteProprietario = null;
		ClienteEmitirBoletimCadastroHelper clienteUsuario = null;

		clienteProprietario = getControladorCliente()
				.pesquisarClienteEmitirBoletimCadastro(idImovel, ClienteRelacaoTipo.PROPRIETARIO);

		clienteUsuario = getControladorCliente()
				.pesquisarClienteEmitirBoletimCadastro(idImovel, ClienteRelacaoTipo.USUARIO);

		// Início do processo de geração do arquivo txt

		// Dados do Cliente Proprietário
		if (clienteProprietario != null) {

			//Nome Proprietario
			String nomeProprietario = "";
			if (clienteProprietario.getCliente().getNome() != null) {
				nomeProprietario = clienteProprietario.getCliente().getNome();
			}
			bean.setNomeProprietario(nomeProprietario);
			
			//sexo Proprietario
			String sexoProprietario = "";
			if(clienteProprietario.getCliente().getPessoaSexo() != null){
				sexoProprietario = clienteProprietario.getCliente().getPessoaSexo().getId().toString();
			}
			bean.setSexoProprietario(sexoProprietario);
			
			// cpf Proprietario
			String cpfProprietario = "";
			if(clienteProprietario.getCliente().getCpf() != null){
				cpfProprietario = clienteProprietario.getCliente().getCpfFormatado();
			}
			bean.setCpfProprietario(cpfProprietario);
			
			// cnpj Proprietario
			String cnpjProprietario = "";
			if(clienteProprietario.getCliente().getCnpjFormatado() != null){
				cnpjProprietario = clienteProprietario.getCliente().getCnpjFormatado();
			}
			bean.setCnpjProprietario(cnpjProprietario);
			
			//rg Proprietario
			String rgProprietario = "";
			if (clienteProprietario.getCliente().getRg() != null) {
				rgProprietario = clienteProprietario.getCliente().getRg();
				
				// Órgão Expedidor RG
				String orgaoExpedidorRG = "";

				if (clienteProprietario.getCliente().getOrgaoExpedidorRg() != null) {
					orgaoExpedidorRG = clienteProprietario.getCliente()
							.getOrgaoExpedidorRg().getDescricaoAbreviada();
				}
				rgProprietario += " " + orgaoExpedidorRG;
			}
			bean.setRgProprietario(rgProprietario);
			
			//uf Proprietario
			String ufProprietario = "";
			if(clienteProprietario.getCliente().getUnidadeFederacao() != null 
					&& clienteProprietario.getCliente().getUnidadeFederacao().getSigla() != null){
				ufProprietario = clienteProprietario.getCliente().getUnidadeFederacao().getSigla();
			}
			bean.setUfProprietario(ufProprietario);
			
			// fone Tipo Proprietario
			// Número fone Proprietario
			Collection clientesFone = clienteProprietario.getClientesFone();

			if (clientesFone != null && !clientesFone.isEmpty()) {

				Iterator clientesFoneIterator = clientesFone.iterator();

				while (clientesFoneIterator.hasNext()) {

					ClienteFone clienteFone = (ClienteFone) clientesFoneIterator.next();

					//fone Tipo Proprietario
					String foneTipoProprietario = "";
					if (clienteFone.getFoneTipo() != null ) {
						foneTipoProprietario = clienteFone.getFoneTipo().getId().toString();
					}
					bean.setFoneTipoProprietario(foneTipoProprietario);

					// Número fone Proprietario
					String foneProprietario = "";

					if (clienteFone.getTelefone() != null) {
						foneProprietario = clienteFone.getDddTelefone();
					}
					
					// Ramal
					String ramal = "";

					if (clienteFone.getRamal() != null) {
						ramal = clienteFone.getRamal();
						foneProprietario += "-"+ramal;
					}
					bean.setFoneProprietario(foneProprietario);
				}
			}
			
			// endereco Proprietario
			String enderecoProprietario = "";

			// Logradouro
			String logradouro = "";
			if (clienteProprietario.getClienteEndereco()
					.getLogradouroCep() != null
					&& clienteProprietario.getClienteEndereco()
							.getLogradouroCep().getLogradouro() != null) {

				logradouro = Util.adicionarZerosEsquedaNumero(9,
						clienteProprietario.getClienteEndereco()
								.getLogradouroCep().getLogradouro().getId()
								.toString());
			}
			// Endereço Abreviado
			String endereco = "";
			if (clienteProprietario.getEnderecoFormatado() != null) {
				endereco = clienteProprietario.getEnderecoFormatado();
			}
			enderecoProprietario += logradouro +" "+endereco;
			bean.setEnderecoProprietario(enderecoProprietario);
			
			// endereco Ref. Proprietario
			String enderecoRefProprietario = "";
			if(clienteProprietario.getClienteEndereco().getEnderecoReferencia() != null 
					&& clienteProprietario.getClienteEndereco().getEnderecoReferencia().getDescricao() != null){
				enderecoRefProprietario = clienteProprietario.getClienteEndereco()
						.getEnderecoReferencia().getDescricao();
			}
			bean.setEnderecoRefProprietario(enderecoRefProprietario);
			
			//Id Endereco Ref. Proprietario
			String idEnderecoRefProprietario = "";
			if(clienteProprietario.getClienteEndereco()
					.getEnderecoReferencia() != null){
				
				idEnderecoRefProprietario = clienteProprietario.getClienteEndereco()
					.getEnderecoReferencia().getId().toString();
			}
			bean.setIdEnderecoRefProprietario(idEnderecoRefProprietario);
			
			//enderecoComplementoProprietario
			String enderecoComplementoProprietario = "";
			if(clienteProprietario.getClienteEndereco().getComplemento() != null){
				enderecoComplementoProprietario = clienteProprietario.getClienteEndereco().getComplemento();
			}
			bean.setEnderecoComplementoProprietario(enderecoComplementoProprietario);
			
			//bairro Proprietario
			String bairroProprietario = "";
			if(clienteProprietario.getClienteEndereco().getLogradouroBairro().getBairro() != null 
					&& clienteProprietario.getClienteEndereco().getLogradouroBairro().getBairro().getNome() != null){
				bairroProprietario = clienteProprietario.getClienteEndereco().getLogradouroBairro()
						.getBairro().getNome();
			}
			bean.setBairroProprietario(bairroProprietario);
			
			//municipio Proprietario
			String municipioProprietario = "";
			if(clienteProprietario.getClienteEndereco().getLogradouroBairro().getBairro() != null 
					&& clienteProprietario.getClienteEndereco().getLogradouroBairro()
					.getBairro().getMunicipio().getNome() != null){
				municipioProprietario = clienteProprietario.getClienteEndereco().getLogradouroBairro()
					.getBairro().getMunicipio().getNome();
			}
			bean.setMunicipioProprietario(municipioProprietario);
			
			//cep Proprietario
			String cepProprietario = "";
			if(clienteProprietario.getClienteEndereco().getLogradouroCep().getCep() != null){
				cepProprietario = clienteProprietario.getClienteEndereco().getLogradouroCep()
						.getCep().getCepFormatado();
			}
			bean.setCepProprietario(cepProprietario);
			
			//endereco Tipo Proprietario
			String enderecoTipoProprietario = "";
			if(clienteProprietario.getClienteEndereco().getEnderecoTipo() != null){
				enderecoTipoProprietario = clienteProprietario.getClienteEndereco().getEnderecoTipo().getId().toString();
			}
			bean.setEnderecoTipoProprietario(enderecoTipoProprietario);
			
			//
			// USUÁRIO
			//
			
			//nome Usuario
			String nomeUsuario = "";
			if(clienteUsuario.getCliente().getNome() != null){
				nomeUsuario = clienteUsuario.getCliente().getNome();
			}
			bean.setNomeUsuario(nomeUsuario);
			
			//sexo Usuario
			String sexoUsuario = "";
			if(clienteUsuario.getCliente() != null && clienteUsuario.getCliente().getPessoaSexo() != null){
				sexoUsuario = clienteUsuario.getCliente().getPessoaSexo().getId().toString();
			}
			bean.setSexoUsuario(sexoUsuario);
			
			//cpf Usuario
			String cpfUsuario = "";
			if(clienteUsuario.getCliente().getCpf() != null){
				cpfUsuario = clienteUsuario.getCliente().getCpfFormatado();
			}
			bean.setCpfUsuario(cpfUsuario);
			
			// cnpj Usuario
			String cnpjUsuario = "";
			if(clienteUsuario.getCliente().getCnpjFormatado() != null){
				cnpjUsuario = clienteUsuario.getCliente().getCnpjFormatado();
			}
			bean.setCnpjUsuario(cnpjUsuario);
			
			//rg Usuario
			String rgUsuario = "";
			if (clienteUsuario.getCliente().getRg() != null) {
				rgUsuario = clienteUsuario.getCliente().getRg();
				
				// Órgão Expedidor RG
				String orgaoExpedidorRG = "";

				if (clienteUsuario.getCliente().getOrgaoExpedidorRg() != null) {
					orgaoExpedidorRG = clienteUsuario.getCliente()
							.getOrgaoExpedidorRg().getDescricaoAbreviada();
				}
				rgUsuario += " " + orgaoExpedidorRG;
			}
			bean.setRgUsuario(rgUsuario);
			
			//uf Usuario
			String ufUsuario = "";
			if(clienteUsuario.getCliente().getUnidadeFederacao() != null && clienteUsuario.getCliente().getUnidadeFederacao().getSigla() != null){
				ufUsuario = clienteUsuario.getCliente().getUnidadeFederacao().getSigla();
			}
			bean.setUfUsuario(ufUsuario);
			
			// fone Tipo Usuario
			// Número fone Usuario
			Collection clientesFoneUsuario = clienteUsuario.getClientesFone();

			if (clientesFoneUsuario != null && !clientesFoneUsuario.isEmpty()) {

				Iterator clientesFoneIterator = clientesFoneUsuario.iterator();

				while (clientesFoneIterator.hasNext()) {

					ClienteFone clienteFone = (ClienteFone) clientesFoneIterator.next();

					//fone Tipo Usuario
					String foneTipoUsuario = "";
					if (clienteFone.getFoneTipo() != null) {
						foneTipoUsuario = clienteFone.getFoneTipo().getId().toString();
					}
					bean.setFoneTipoUsuario(foneTipoUsuario);

					// Número fone Proprietario
					String foneUsuario = "";

					if (clienteFone.getTelefone() != null) {
						foneUsuario = clienteFone.getDddTelefone();
					}
					
					// Ramal
					String ramal = "";

					if (clienteFone.getRamal() != null) {
						ramal = clienteFone.getRamal();
						foneUsuario += "-"+ramal;
					}
					bean.setFoneUsuario(foneUsuario);
				}
			}
			
			//Carregar Imovel
			FiltroImovel filtroImovel = new FiltroImovel(); 
			filtroImovel.adicionarParametro(new ParametroSimples(FiltroImovel.ID, idImovel));
			filtroImovel.adicionarCaminhoParaCarregamentoEntidade(FiltroImovel.IMOVEL_PERFIL);
			filtroImovel.adicionarCaminhoParaCarregamentoEntidade(FiltroImovel.ENDERECO_REFERENCIA);
			filtroImovel.adicionarCaminhoParaCarregamentoEntidade(FiltroImovel.CEP);
			filtroImovel.adicionarCaminhoParaCarregamentoEntidade(FiltroImovel.BAIRRO);
			filtroImovel.adicionarCaminhoParaCarregamentoEntidade(FiltroImovel.MUNICIPIO);
			filtroImovel.adicionarCaminhoParaCarregamentoEntidade(FiltroImovel.PAVIMENTO_RUA);
			filtroImovel.adicionarCaminhoParaCarregamentoEntidade(FiltroImovel.PAVIMENTO_CALCADA);
			filtroImovel.adicionarCaminhoParaCarregamentoEntidade(FiltroImovel.CADASTRO_OCORRENCIA);
			
			Collection<Imovel> imovelPesquisado = 
				this.getControladorUtil().pesquisar(filtroImovel, Imovel.class.getName());
			
			Imovel imovel= null;
			
			if (imovelPesquisado != null && !imovelPesquisado.isEmpty()) {
				imovel = (Imovel) Util.retonarObjetoDeColecao(imovelPesquisado);
			}
			
			// inscricao
			String inscricao = "";
			inscricao = this.getControladorImovel().pesquisarInscricaoImovel(idImovel);
			bean.setInscricao(inscricao);
			
			//matricula
			String matricula = "";
			matricula = Util.retornaMatriculaImovelFormatada(idImovel);
			bean.setMatricula(matricula);
			
			//perfil Imovel
			String perfilImovel = "";
			if(imovel.getImovelPerfil() != null){
				perfilImovel = imovel.getImovelPerfil().getId().toString();
			}
			bean.setPerfilImovel(perfilImovel);
			
			//endereco Imovel
			String enderecoImovel = "";
			enderecoImovel = getControladorEndereco().pesquisarEndereco(idImovel);
			bean.setEnderecoImovel(enderecoImovel);
			
			//endereco Ref. Imovel
			String enderecoRefImovel = "";
			if(imovel.getEnderecoReferencia() != null && imovel.getEnderecoReferencia().getDescricao() != null){
				enderecoRefImovel = imovel.getEnderecoReferencia().getDescricao().toString();
			}
			bean.setEnderecoRefImovel(enderecoRefImovel);
			
			// Id Endereco Ref. Imovel
			String idEnderecoRefImovel = "";
			if(imovel.getEnderecoReferencia() != null){
				
				idEnderecoRefImovel = imovel.getEnderecoReferencia().getId().toString();
			}
			bean.setIdEnderecoRefImovel(idEnderecoRefImovel);
			
			//endereco Complemento Imovel
			String enderecoComplementoImovel = "";
			if(imovel.getComplementoEndereco() != null){
				enderecoComplementoImovel = imovel.getComplementoEndereco();
			}
			bean.setEnderecoComplementoImovel(enderecoComplementoImovel);
			
			//bairro Imovel
			String bairroImovel = "";
			if(imovel.getLogradouroBairro().getBairro() != null 
					&& imovel.getLogradouroBairro().getBairro().getNome() != null){
				bairroImovel = imovel.getLogradouroBairro().getBairro().getNome();
			}
			bean.setBairroImovel(bairroImovel);
			
			//municipio Imovel
			String municipioImovel = "";
			if(imovel.getLogradouroBairro().getBairro() != null 
					&& imovel.getLogradouroBairro().getBairro().getMunicipio().getNome() != null){
				municipioImovel = imovel.getLogradouroBairro().getBairro().getMunicipio().getNome();
			}
			bean.setMunicipioImovel(municipioImovel);
			
			//cep Imovel
			String cepImovel = "";
			if(imovel.getLogradouroCep() != null && imovel.getLogradouroCep().getCep().getCodigo() != null){
				cepImovel = imovel.getLogradouroCep().getCep().getCodigo().toString();
			}
			bean.setCepImovel(cepImovel);
			
			//numero Moradores
			String numeroMoradores = "";
			if(imovel.getNumeroMorador() != null){
				numeroMoradores = imovel.getNumeroMorador().toString();
			}
			bean.setNumeroMoradores(numeroMoradores);
			
			//numero Medidor Celpe
			String numeroMedidorCelpe = "";
			if(imovel.getNumeroMedidorEnergia() != null){
				numeroMedidorCelpe = imovel.getNumeroMedidorEnergia();
			}
			bean.setNumeroMedidorCelpe(numeroMedidorCelpe);
			
			//pavimento Tipo Rua
			String pavimentoTipoRua = "";
			if(imovel.getPavimentoRua() != null){
				pavimentoTipoRua = imovel.getPavimentoRua().getId().toString();
			}
			bean.setPavimentoTipoRua(pavimentoTipoRua);
			
			// Pavimento Tipo Calcada
			String pavimentoTipoCalcada = "";
			if ( imovel.getPavimentoCalcada().getId() != null) {
				pavimentoTipoCalcada = imovel.getPavimentoCalcada().getId().toString();
			}
			bean.setPavimentoTipoCalcada(pavimentoTipoCalcada);
			
			//abastecimento Fonte
			String abastecimentoFonte = "";
			if(imovel.getFonteAbastecimento().getId() != null){
				abastecimentoFonte = imovel.getFonteAbastecimento().getId().toString();
			}
			
			bean.setAbastecimentoFonte(abastecimentoFonte);
			
			//esgoto Situacao
			String esgotoSituacao = "";
			if(imovel.getLigacaoEsgotoSituacao() != null){
				esgotoSituacao = imovel.getLigacaoEsgotoSituacao().getId().toString();
			}
			bean.setEsgotoSituacao(esgotoSituacao);
			
			//agua Situacao
			String aguaSituacao = "";
			if(imovel.getLigacaoAguaSituacao() != null){
				aguaSituacao = imovel.getLigacaoAguaSituacao().getId().toString();
			}
			bean.setAguaSituacao(aguaSituacao);
			
			// Obtém os dados das ligações de água e esgoto
			DadosLigacoesBoletimCadastroHelper dadosLigacoesBoletimCadastroHelper = getControladorAtendimentoPublico()
					.obterDadosLigacaoAguaEsgoto(idImovel);
			
			
			//hidrometro
			// se igual a 0 - NÃO
			// se igual a 1 - SIM
			String hidrometro = "0";
			
			// hidrometro Numero
			String hidrometroNumero = "";
			if (dadosLigacoesBoletimCadastroHelper.getLigacaoAgua() != null
					&& dadosLigacoesBoletimCadastroHelper.getLigacaoAgua()
							.getHidrometroInstalacaoHistorico() != null) {

				hidrometro = "1";
				hidrometroNumero = dadosLigacoesBoletimCadastroHelper
						.getLigacaoAgua().getHidrometroInstalacaoHistorico()
						.getHidrometro().getNumero();
			}
			bean.setHidrometro(hidrometro);
			bean.setHidrometroNumero(hidrometroNumero);
			
			// hidrometro Capacidade
			String hidrometroCapacidade = "";
			if (dadosLigacoesBoletimCadastroHelper.getLigacaoAgua() != null
					&& dadosLigacoesBoletimCadastroHelper.getLigacaoAgua()
							.getHidrometroInstalacaoHistorico() != null
					&& dadosLigacoesBoletimCadastroHelper.getLigacaoAgua()
							.getHidrometroInstalacaoHistorico().getHidrometro()
							.getHidrometroCapacidade() != null) {

				hidrometroCapacidade = Util.adicionarZerosEsquedaNumero(2,
						dadosLigacoesBoletimCadastroHelper.getLigacaoAgua()
								.getHidrometroInstalacaoHistorico().getHidrometro()
								.getHidrometroCapacidade().getId().toString());

			}
			bean.setHidrometroCapacidade(hidrometroCapacidade);

			// hidrometro Marca
			String hidrometroMarca = "";
			if (dadosLigacoesBoletimCadastroHelper.getLigacaoAgua() != null
					&& dadosLigacoesBoletimCadastroHelper.getLigacaoAgua()
							.getHidrometroInstalacaoHistorico() != null
					&& dadosLigacoesBoletimCadastroHelper.getLigacaoAgua()
							.getHidrometroInstalacaoHistorico().getHidrometro()
							.getHidrometroMarca() != null) {

				hidrometroMarca = Util.adicionarZerosEsquedaNumero(2,
						dadosLigacoesBoletimCadastroHelper.getLigacaoAgua()
								.getHidrometroInstalacaoHistorico().getHidrometro()
								.getHidrometroMarca().getId().toString());

			}
			bean.setHidrometroMarca(hidrometroMarca);

			// Local de Instalação do Hidrômetro
			String localInstalacao = "";
			if (dadosLigacoesBoletimCadastroHelper.getLigacaoAgua() != null
					&& dadosLigacoesBoletimCadastroHelper.getLigacaoAgua()
							.getHidrometroInstalacaoHistorico() != null
					&& dadosLigacoesBoletimCadastroHelper.getLigacaoAgua()
							.getHidrometroInstalacaoHistorico()
							.getHidrometroLocalInstalacao() != null) {

				localInstalacao = Util.adicionarZerosEsquedaNumero(2,
						dadosLigacoesBoletimCadastroHelper.getLigacaoAgua()
								.getHidrometroInstalacaoHistorico()
								.getHidrometroLocalInstalacao().getId().toString());

			}
			bean.setLocalInstalacao(localInstalacao);
			
			// protecao Tipo
			String protecaoTipo = "";
			if (dadosLigacoesBoletimCadastroHelper.getLigacaoAgua() != null
					&& dadosLigacoesBoletimCadastroHelper.getLigacaoAgua()
							.getHidrometroInstalacaoHistorico() != null
					&& dadosLigacoesBoletimCadastroHelper.getLigacaoAgua()
							.getHidrometroInstalacaoHistorico()
							.getHidrometroProtecao() != null) {

				protecaoTipo = dadosLigacoesBoletimCadastroHelper
						.getLigacaoAgua().getHidrometroInstalacaoHistorico()
						.getHidrometroProtecao().getId().toString();

			}
			bean.setProtecaoTipo(protecaoTipo);
			
			// Indicador Cavalete
			String cavalete = "";
			if (dadosLigacoesBoletimCadastroHelper.getLigacaoAgua() != null
					&& dadosLigacoesBoletimCadastroHelper.getLigacaoAgua()
							.getHidrometroInstalacaoHistorico() != null
					&& dadosLigacoesBoletimCadastroHelper.getLigacaoAgua()
							.getHidrometroInstalacaoHistorico()
							.getIndicadorExistenciaCavalete() != null) {

				cavalete = dadosLigacoesBoletimCadastroHelper
						.getLigacaoAgua().getHidrometroInstalacaoHistorico()
						.getIndicadorExistenciaCavalete().toString();

			}
			bean.setCavalete(cavalete);
			
			//ocorrenciaCadastro
			String ocorrenciaCadastro = "";
			if(imovel.getCadastroOcorrencia() != null ){
				ocorrenciaCadastro = imovel.getCadastroOcorrencia().getId().toString();
			}
			bean.setOcorrenciaCadastro(ocorrenciaCadastro);
			
			
			//categoriaPrincipal
			String categoriaPrincipal = "";
			
			// Descrição Abreviada da Principal Categoria do imovel
			Categoria categoria = this.getControladorImovel()
					.obterPrincipalCategoriaImovel(idImovel);
			
			if (categoria != null) {
				categoriaPrincipal = categoria.getId().toString();
			}
			bean.setCategoriaPrincipal(categoriaPrincipal);

		} 

		// Dados das Subcategorias
		Collection colecaoSubcategorias = getControladorImovel()
				.obterQuantidadeEconomiasSubCategoria(idImovel);

		String subcategorias = "";
		String numeroEconomias = "";

		if (colecaoSubcategorias != null && !colecaoSubcategorias.isEmpty()) {

			Iterator colecaoSubcategoriasIterator = colecaoSubcategorias
					.iterator();

			for (int i = 0; i < 6; i++) {

				if (colecaoSubcategoriasIterator.hasNext()) {

					Subcategoria subcategoria = (Subcategoria) colecaoSubcategoriasIterator
							.next();

					subcategorias += Util.adicionarZerosEsquedaNumero(2, subcategoria
									.getId().toString() + "        ");
					
					numeroEconomias += Util.adicionarZerosEsquedaNumero(4, subcategoria
									.getQuantidadeEconomias().toString() + "        ");
				} else {
					break;
				}
			}
		}
		bean.setSubcategorias(subcategorias);
		bean.setNumeroEconomias(numeroEconomias);
		
		return bean;
	}
	
	/**
	 * 
	 * Batch criado para atualização da coluna codigo debito automatico do imovel.
	 * 
	 * @author Hugo Amorim
	 * @date 30/03/2010	
	 */
	public void atualizarCodigoDebitoAutomatico(Integer idFuncionalidadeIniciada,
			SetorComercial setorComercial) throws ControladorException{
				
		int idUnidadeIniciada = 0;
		
		try {
			
			// -------------------------
			// Registrar o início do processamento da Unidade de
			// Processamento do Batch
			// -------------------------

			idUnidadeIniciada = getControladorBatch()
					.iniciarUnidadeProcessamentoBatch(idFuncionalidadeIniciada,
							UnidadeProcessamento.SETOR_COMERCIAL, setorComercial.getId());
			
			// Variáveis para a paginação da pesquisa
			// ========================================================================
			boolean flagTerminou = false;
			final int quantidadeMaxima = 300;
			int quantidadeInicio = 0;
			// ========================================================================
			
			//Variaveis
			String matriculaSemDigito = null;
			Integer codigoDebitoAutomatico = null;
			
			while (!flagTerminou) {
				
				Collection<Integer> colecaoDados = 
					this.repositorioCadastro
						.pesquisarIdsImoveisDoSetorComercial(setorComercial.getId(),quantidadeInicio,quantidadeMaxima);
						
				for (Integer idImovel : colecaoDados) {
					
					matriculaSemDigito = Util.obterMatriculaSemDigitoVerificador(idImovel.toString());
					Integer digitoVerificadorModulo11 = Util.obterDigitoVerificadorModulo11(matriculaSemDigito);
						
					codigoDebitoAutomatico = new Integer(matriculaSemDigito+digitoVerificadorModulo11.toString());

					this.repositorioCadastro.atualizarCodigoDebitoAutomatico(idImovel,codigoDebitoAutomatico);
					
				}
				
				// Incrementa o nº do indice da páginação
				quantidadeInicio = quantidadeInicio + quantidadeMaxima;
	
				/**
				 * Caso a coleção de dados retornados for menor que a
				 * quantidade de registros seta a flag indicando que a
				 * paginação terminou.
				 */
				if (colecaoDados == null || 
						colecaoDados.size() < quantidadeMaxima) {
	
					flagTerminou = true;
				}
	
				if (colecaoDados != null) {
					colecaoDados.clear();
					colecaoDados = null;
				}
			}
			
			
			
			getControladorBatch().encerrarUnidadeProcessamentoBatch(null,idUnidadeIniciada, false);
		
		} catch (Exception e) {
			e.printStackTrace();
			getControladorBatch().encerrarUnidadeProcessamentoBatch(e,idUnidadeIniciada, true);
			throw new EJBException(e);
		}
		
	}
	
    /**
     * [UC0811] Processar Requisições do Dispositivo Móvel Impressao Simultanea.
     * 
     * Método que baixa a nova versão do JAD do mobile para o celular
     * 
     * @author Bruno Barros
     * @date 08/06/2010
     *  
     * @param 
     * @throws IOException
     */   
    public byte[] baixarNovaVersaoJad() throws ControladorException {
        try {
            return this.repositorioCadastro
                .baixarNovaVersaoJad();
        } catch (ErroRepositorioException e) {
            sessionContext.setRollbackOnly();
            throw new ControladorException("erro.sistema", e);
        }
        
    }
    
    /**
     * [UC0811] Processar Requisições do Dispositivo Móvel Impressao Simultanea.
     * 
     * Método que baixa a nova versão do JAR do mobile para o celular
     * 
     * @author Bruno Barros
     * @date 08/06/2010
     *  
     * @param 
     * @throws IOException
     */   
    public byte[] baixarNovaVersaoJar() throws ControladorException {
        try {
            return this.repositorioCadastro.baixarNovaVersaoJar();
        } catch (ErroRepositorioException e) {
            sessionContext.setRollbackOnly();
            throw new ControladorException("erro.sistema", e);
        }
        
    }
    
    /**
     * 
     * @author Fernando Fontelles
     * @date 07/07/2010
     * 
     * @param idImovel
     * @return
     * @throws ControladorException
     */
    public boolean verificarSituacaoImovelCobrancaJudicial(Integer idImovel) throws ControladorException{
    	
    	try {
    		
            return this.repositorioCadastro.verificarSituacaoImovelCobrancaJudicial(idImovel);
            
        } catch (ErroRepositorioException e) {
        	
            sessionContext.setRollbackOnly();
            throw new ControladorException("erro.sistema", e);
            
        }
    	
    }
    
    /**
     * 
     * @author Fernando Fontelles
     * @date 07/07/2010
     * 
     * @param idImovel
     * @return
     * @throws ControladorException
     */
    public boolean verificarSituacaoImovelNegativacao( Integer idImovel ) throws ControladorException{
    	
    	try {
    		
            return this.repositorioCadastro.verificarSituacaoImovelNegativacao(idImovel);
            
        } catch (ErroRepositorioException e) {
        	
            sessionContext.setRollbackOnly();
            throw new ControladorException("erro.sistema", e);
            
        }
    	
    }
    
    /**
     * 
     * [UC1036] - Inserir Cadastro de Email do Cliente
     * 
     * @author Fernando Fontelles
     * @date 09/07/2010
     * 
     * @param idCliente
     * @param nomeClienteAnterior
     * @param cpfAnterior
     * @param cnpjAnterior
     * @param emailAnterior
     * @param nomeSolicitante
     * @param cpfSolicitante
     * @param nomeClienteAtual
     * @param cpfClienteAtual
     * @param cnpjClienteAtual
     * @param emailAtual
     * @return
     */
    public Integer inserirCadastroEmailCliente( Integer idCliente, String nomeClienteAnterior, 
     		String cpfAnterior, String cnpjAnterior, String emailAnterior, String nomeSolicitante, 
     		String cpfSolicitante, String nomeClienteAtual, String cpfClienteAtual,
 			String cnpjClienteAtual, String emailAtual) throws ControladorException{
 		    	
 		    	try {
 		    		
 		            return this.repositorioCadastro.inserirCadastroEmailCliente( idCliente, nomeClienteAnterior, 
 		            		cpfAnterior, cnpjAnterior, emailAnterior, nomeSolicitante, cpfSolicitante, 
 		            		nomeClienteAtual, cpfClienteAtual, cnpjClienteAtual, emailAtual);
 		            
 		        } catch (ErroRepositorioException e) {
 		        	
 		            sessionContext.setRollbackOnly();
 		            throw new ControladorException("erro.sistema", e);
 		            
 		        }
 		    	
 	}
    
    /**
     * [UC1074] Gerar Relatório Alterações no Sistema por Coluna
     * 
     * @author Hugo Amorim
     * @date 08/09/2010
     */
 	public Collection<Object[]> pesquisarDadosRelatorioAlteracoesSistemaColuna(GerarRelatorioAlteracoesSistemaColunaHelper helper)
 		throws ControladorException{
 		
 		Collection<Object[]> retorno = null;
 		
 		try {
 			
	    	//POR USUARIO
 			if(helper.getTipoRelatorio().equals("1")){
 				retorno = this.repositorioCadastro.pesquisarDadosRelatorioAlteracoesSistemaColunaPorUsuario(helper);
 			}
 			//POR LOCALIDADE
 			else if(helper.getTipoRelatorio().equals("2")){
 				retorno = this.repositorioCadastro.pesquisarDadosRelatorioAlteracoesSistemaColunaPorLocalidade(helper);
 			}
	            
	    } catch (ErroRepositorioException e) {        	
	        throw new ControladorException("erro.sistema", e);	            
	    }
	    
	    return retorno;
 	}
 	
 	/**
     * [UC1074] Gerar Relatório Alterações no Sistema por Coluna
     * 
     * [FS0007] 
     * 
     * @author Hugo Amorim
     * @date 08/09/2010
     */
 	public boolean verificarRelacaoColuna(Integer idColuna) throws ControladorException {
		try {
			 
			return this.repositorioCadastro.verificarRelacaoColuna(idColuna);
		
		} catch (ErroRepositorioException ex) {
			ex.printStackTrace();
			throw new ControladorException("erro.sistema", ex);
		}
 	}
 	
 	/**
     * [UC1076] Gerar Relatório Atualizações Cadastrais Via Internet.
     * 
     * @author Daniel Alves
     * @date 28/09/2010
     * Consulta do Relatório Analítico
     */
 	public Collection pesquisarDadosRelatorioAtualizacaoCadastralViaInternet(GerarRelatorioAtualizacaoCadastralViaInternetHelper filtro)
 		throws ControladorException{
 		
 			try {
 				return this.repositorioCadastro
 						.pesquisarDadosRelatorioAtualizacaoCadastralViaInternet(filtro);
 			} catch (ErroRepositorioException e) {
 				throw new ControladorException("erro.sistema", e);
 			}

	}
 	
 	/**
     * [UC1076] Gerar Relatório Atualizações Cadastrais Via Internet.
     * 
     * @author Daniel Alves
     * @date 28/09/2010
     * Consulta do Relatório Resumo
     */
 	public Collection pesquisarDadosRelatorioResumoAtualizacaoCadastralViaInternet(GerarRelatorioAtualizacaoCadastralViaInternetHelper filtro)
 		throws ControladorException{
 		
 			try {
 				return this.repositorioCadastro
 						.pesquisarDadosRelatorioResumoAtualizacaoCadastralViaInternet(filtro);
 			} catch (ErroRepositorioException e) {
 				throw new ControladorException("erro.sistema", e);
 			}

	}
 	
 	/**
     * [UC1076] Gerar Relatório Atualizações Cadastrais Via Internet.
     * 
     * @author Hugo Amorim de Lyra
     * @date 06/10/2010
     */
 	public Integer countRelatorioAtualizacaoCadastralViaInternet(GerarRelatorioAtualizacaoCadastralViaInternetHelper helper)
 		throws ControladorException{
 		try {
				return this.repositorioCadastro
						.countRelatorioAtualizacaoCadastralViaInternet(helper);
			} catch (ErroRepositorioException e) {
				throw new ControladorException("erro.sistema", e);
			}
 	}
 	
	
	/**
	 * 
	 * [UC0113] - Faturar Grupo de Faturamento
	 * 
	 * @author Rômulo Aurélio
	 * @date 28/09/2010
	 * 
	 * @return
	 */
	public ClienteImovel pesquisarClienteResponsavelComEsferaPoderPublico(
			Integer idImovel) throws ControladorException {

		try {

			return this.repositorioCadastro
					.pesquisarClienteResponsavelComEsferaPoderPublico(idImovel);

		} catch (ErroRepositorioException e) {

			sessionContext.setRollbackOnly();
			throw new ControladorException("erro.sistema", e);

		}

	}
	
	/**
	 * [UC1121] Gerar Relatório de Imóveis com Alteração de Inscrição Via Batch
	 *
	 * @author Hugo Leonardo
	 * @date 19/01/2011
	 *
	 * @throws ErroRepositorioException
	 */
	public Collection<ImovelInscricaoAlterada> pesquisarRelatorioImoveisAlteracaoInscricaoViaBatch( 
			FiltrarRelatorioImoveisAlteracaoInscricaoViaBatchHelper relatorioHelper) throws ControladorException{
	
		try {			
			
			return this.repositorioCadastro.pesquisarRelatorioImoveisAlteracaoInscricaoViaBatch(relatorioHelper);
	     
        } catch (ErroRepositorioException ex) {
            ex.printStackTrace();
            throw new ControladorException("erro.sistema", ex);
        }

	}
	
	/**
	 * [UC1121] Gerar Relatório de Imóveis com Alteração de Inscrição Via Batch
	 *
	 * @author Hugo Leonardo
	 * @date 19/01/2011
	 *
	 * @throws ErroRepositorioException
	 */
	public Integer countTotalRelatorioImoveisAlteracaoInscricaoViaBatch( 
			FiltrarRelatorioImoveisAlteracaoInscricaoViaBatchHelper relatorioHelper) throws ControladorException{
	
		try {			
			
			return this.repositorioCadastro.countTotalRelatorioImoveisAlteracaoInscricaoViaBatch(relatorioHelper);
	     
        } catch (ErroRepositorioException ex) {
            ex.printStackTrace();
            throw new ControladorException("erro.sistema", ex);
        }

	}

    /**
     * [UC1124] Gerar Relatório de Alterações de CPF/CNPJ
     * 
     * @author Mariana Victor
     * @date 16/02/2011
     */
 	public Collection<Object[]> pesquisarDadosRelatorioAlteracoesCpfCnpj(GerarRelatorioAlteracoesCpfCnpjHelper helper)
 		throws ControladorException {
 		
 		Collection<Object[]> retorno = null;
 		
 		try {
 			
	    	//POR USUARIO
 			if(helper.getTipoRelatorio().equals("1")){
 				retorno = this.repositorioCadastro.pesquisarDadosRelatorioAlteracoesCpfCnpjPorUsuario(helper);
 			}
 			//POR LOCALIDADE
 			else if(helper.getTipoRelatorio().equals("2")){
 				retorno = this.repositorioCadastro.pesquisarDadosRelatorioAlteracoesCpfCnpjPorLocalidade(helper);
 			}
 			//POR MEIO
 			else if(helper.getTipoRelatorio().equals("3")){
 				retorno = this.repositorioCadastro.pesquisarDadosRelatorioAlteracoesCpfCnpjPorMeio(helper);
 			}
	            
	    } catch (ErroRepositorioException e) {        	
	        throw new ControladorException("erro.sistema", e);	            
	    }
	    
	    return retorno;
 	}
 	
	/**
	 * Solicitar Conta em Braile.
	 * 
	 * [UC1128] Solicitar Conta Braile
	 * 
	 * @author Hugo Leonardo
	 * @date 04/03/2011
	 * 
	 */
    public Integer inserirSolicitacaoContaBraile(ContaBraileHelper contaBraileHelper) 
    	throws ControladorException{
 		    	
    	Integer idRA = null;
    	
    	try {
    		
    		ContaBraile contaBraile = null;
    		
	    	contaBraile = this.montarContaBraile(contaBraile, contaBraileHelper);
			
			Integer idContaBraile = (Integer) this.getControladorUtil().inserir(contaBraile);
			
			idRA = this.montarRA(contaBraile,contaBraileHelper.getProtocoloAtendimento());
				
			FiltroContaBraile filtroContaBraile = new FiltroContaBraile();
			filtroContaBraile.adicionarParametro(new ParametroSimples(FiltroContaBraile.ID, idContaBraile));
			
			Collection colecaoContaBraile = this.getControladorUtil().pesquisar(filtroContaBraile, ContaBraile.class.getName());
			
			ContaBraile contaBraileAtu = (ContaBraile) Util.retonarObjetoDeColecao(colecaoContaBraile);
			
			RegistroAtendimento rA = new RegistroAtendimento();
			rA.setId(idRA);
			contaBraileAtu.setRegistroAtendimento(rA);
			contaBraileAtu.setUltimaAlteracao(new Date());
			
			this.getControladorUtil().atualizar(contaBraileAtu);
            
        } catch (ControladorException e) {
        	
        	sessionContext.setRollbackOnly();
        	
        	String p = "";
			List<String> parametros = e.getParametroMensagem();
			if(parametros != null && !parametros.isEmpty()){
				p = parametros.get(0);
			}		
        	
        	throw new ControladorException(e.getMessage(), null, p);
        }    
        
        return idRA;
 	}
    
	/**
	 * Solicitar Conta em Braile.
	 * 
	 * [UC1128] Solicitar Conta Braile
	 * 
	 * @author Hugo Leonardo
	 * @date 04/03/2011
	 * 
	 */
	private ContaBraile montarContaBraile(ContaBraile contaBraile, 
			ContaBraileHelper contaBraileHelper) throws ControladorException{
	
		// Preparar dados para armazenar na tabela		
		String idImovel = "";
		if(contaBraileHelper.getMatricula() != null && !contaBraileHelper.getMatricula().equals("")){
			
			idImovel = contaBraileHelper.getMatricula().trim();
		}else{
			
			throw new ControladorException("atencao.informe.matricula_imovel");
		}
		
		Imovel imovel = new Imovel(); 
		imovel.setId( new Integer(idImovel));
		
		FiltroContaBraile filtroContaBraile = new FiltroContaBraile();
		filtroContaBraile.adicionarParametro(new ParametroSimples(FiltroContaBraile.IMOVEL_ID, imovel.getId()));
		
		Collection colecaoContaBraile = Fachada.getInstancia().pesquisar(filtroContaBraile, ContaBraile.class.getName());
		
		if(!Util.isVazioOrNulo(colecaoContaBraile)){
			
			ContaBraile contaBraileAtu = (ContaBraile) Util.retonarObjetoDeColecao(colecaoContaBraile);
			
			if(contaBraileAtu != null){
				
				throw new ControladorException("atencao.solicitacao_conta_braile.existente", null, imovel.getId().toString());
			}
		}
		
		String nomeCliente = "";
		if(contaBraileHelper.getNomeCliente() != null && !contaBraileHelper.getNomeCliente().equals("")){
			
			nomeCliente = contaBraileHelper.getNomeCliente().toUpperCase();
		}else{
			
			throw new ControladorException("atencao.necessario.confirmar.nome.cliente");
		}
		
		String cpfCliente = "";
		String cnpjCliente = "";
		if ( contaBraileHelper.isIndicadorCpf() ){
			
			cpfCliente = contaBraileHelper.getCpfCnpjCliente();
		}
		else if ( contaBraileHelper.isIndicadorCnpj() ){
			
			cnpjCliente = contaBraileHelper.getCpfCnpjCliente();
		}
		
		String email = contaBraileHelper.getEmail();
		
		String nomeSolicitante = "";
		if(contaBraileHelper.getNomeSolicitante() != null && !contaBraileHelper.getNomeSolicitante().equals("")){
			
			nomeSolicitante = contaBraileHelper.getNomeSolicitante().toUpperCase();
		}else{
			
			throw new ControladorException("atencao.informar_nome_solicitante");
		}
		
		String cpfSolicitante = contaBraileHelper.getCpfSolicitante();
		
		String telefone = "";
		if ( contaBraileHelper.getTelefoneContato() != null 
				&& !contaBraileHelper.getTelefoneContato().equals("") ){
			
			telefone = contaBraileHelper.getTelefoneContato();
		}
		
		String rg = "";
		OrgaoExpedidorRg orgaoExpedidorRg = null;
		UnidadeFederacao unidadeFederacao = null;
		if(contaBraileHelper.getRg() != null && !contaBraileHelper.getRg().equals("") && 
				contaBraileHelper.getOrgaoExpeditor() != null && !contaBraileHelper.getOrgaoExpeditor().equals("-1") && 
				contaBraileHelper.getUnidadeFederacao() != null && !contaBraileHelper.getUnidadeFederacao().equals("-1")){
			
			rg = contaBraileHelper.getRg();
			
			orgaoExpedidorRg = new OrgaoExpedidorRg();
			orgaoExpedidorRg.setId( new Integer(contaBraileHelper.getOrgaoExpeditor()));
			
			unidadeFederacao = new UnidadeFederacao();
			unidadeFederacao.setId( new Integer(contaBraileHelper.getUnidadeFederacao()));
			
		}else{
			
			throw new ControladorException("atencao.rg_campos_relacionados.nao_preenchidos");
		}

		contaBraile = new ContaBraile(
				imovel,
				nomeCliente,
				cpfCliente,
				cnpjCliente,
				email,
				nomeSolicitante,
				cpfSolicitante,
				rg,
				orgaoExpedidorRg,
				unidadeFederacao,
				new Date() );
		
		if(!telefone.equals("")){
			
			contaBraile.setTelefoneContato(telefone);
		}
		
		contaBraile.setUltimaAlteracao( new Date());
		
		return contaBraile;
	
	}
	
	/**
	 * Solicitar Conta em Braile.
	 * 
	 * [UC1128] Solicitar Conta Braile
	 * 
	 * @author Hugo Leonardo
	 * @date 04/03/2011
	 * 
	 */
	private Integer montarRA(ContaBraile contaBraile,String protocoloAtendimento) throws ControladorException{
		
		Integer idMeioSolicitacao = MeioSolicitacao.INTERNET;
		Integer idSolicitacaoTipo = new Integer("1"); //ALTERACAO CADASTRAL
		
		FiltroSolicitacaoTipoEspecificacao filtro = new FiltroSolicitacaoTipoEspecificacao();
		filtro.adicionarParametro( 
			new ParametroSimples( 
				FiltroSolicitacaoTipoEspecificacao.CODIGO_CONSTANTE, 1));
		
		Collection colecaoSolTipEspec = 
			this.getControladorUtil().pesquisar(filtro, SolicitacaoTipoEspecificacao.class.getName());
		
		SolicitacaoTipoEspecificacao solTipEspec = (SolicitacaoTipoEspecificacao) Util.retonarObjetoDeColecao(colecaoSolTipEspec);
		
		if(solTipEspec == null){
			throw new ControladorException("atencao.inexistente.solicitacao_tipo_especificacao.conta_braile");
		}

		FiltroUnidadeOrganizacional filtroUnidadeOrganizacional = new FiltroUnidadeOrganizacional();
		filtroUnidadeOrganizacional.adicionarParametro(new ParametroSimples( FiltroUnidadeOrganizacional.CODIGO_CONSTANTE, new Short("1")));
		Collection colecaoUnidadeOrganizacional = this.getControladorUtil().pesquisar(filtroUnidadeOrganizacional, UnidadeOrganizacional.class.getName());
		
		UnidadeOrganizacional unidadeOrganizacional = (UnidadeOrganizacional) Util.retonarObjetoDeColecao(colecaoUnidadeOrganizacional);
		
		if(unidadeOrganizacional == null){
			
			throw new ControladorException("pesquisa.unidade_organizacional_internet.inexistente");
		}
		
		Integer idSolicitacaoTipoEspecificacao = solTipEspec.getId(); // CONTA BRAILE
		
		Integer idUnidadeAtendimento = unidadeOrganizacional.getId();
		//Integer idUnidadeDestino = new Integer("9048");
		Date dataAtual = new Date();
		
		DefinirDataPrevistaUnidadeDestinoEspecificacaoHelper definirDataPrevistaUnidadeDestinoEspecificacaoHelper = 
			this.getControladorRegistroAtendimento().definirDataPrevistaUnidadeDestinoEspecificacao(new Date(),
					idSolicitacaoTipoEspecificacao); 
		
		String dataAtendimento = Util.formatarData(dataAtual);
		String horaAtendimento = Util.formatarHoraSemData(dataAtual);
		
		FiltroOrgaoExpedidorRg filtroOrgaoExpedidor = new FiltroOrgaoExpedidorRg();
		
		filtroOrgaoExpedidor.adicionarParametro(new ParametroSimples(
				FiltroOrgaoExpedidorRg.ID, contaBraile.getOrgaoExpeditor().getId()));
		
		Collection orgaosExpedidores = this.getControladorUtil().pesquisar(
				filtroOrgaoExpedidor, OrgaoExpedidorRg.class.getName());
		
		OrgaoExpedidorRg orgaoExpedidorRg = (OrgaoExpedidorRg) Util.retonarObjetoDeColecao(orgaosExpedidores);
		
		FiltroUnidadeFederacao filtroUnidadeFederacao = new FiltroUnidadeFederacao();
		
		filtroUnidadeFederacao.adicionarParametro(new ParametroSimples(
				FiltroUnidadeFederacao.ID, contaBraile.getUnidadeFederacao().getId()));
		
		Collection unidadesFederacao = this.getControladorUtil().pesquisar(
				filtroUnidadeFederacao, UnidadeFederacao.class.getName());
		
		UnidadeFederacao unidadeFederacao = (UnidadeFederacao) Util.retonarObjetoDeColecao(unidadesFederacao);
		
		String observacao = contaBraile.getCpfSolicitante() + ";" 
						  + contaBraile.getRg() + ";" 
						  + orgaoExpedidorRg.getDescricaoAbreviada() + ";" 
						  + unidadeFederacao.getSigla() + ";" 
						  + contaBraile.getTelefoneContato() + ";" 
						  + contaBraile.getEmail();
		
		String parecer = "Tramite automático da internet.";
		
		String nomeSolicitante = contaBraile.getNomeSolicitante();
		
		FiltroImovel filtroImovel = new FiltroImovel();
		filtroImovel.adicionarParametro(new ParametroSimples(FiltroImovel.ID, contaBraile.getImovel().getId()));
		filtroImovel.adicionarCaminhoParaCarregamentoEntidade(
				FiltroImovel.LOCALIDADE);
		filtroImovel.adicionarCaminhoParaCarregamentoEntidade(
				FiltroImovel.SETOR_COMERCIAL);
		filtroImovel.adicionarCaminhoParaCarregamentoEntidade(
				FiltroImovel.QUADRA);
		filtroImovel.adicionarCaminhoParaCarregamentoEntidade(
				FiltroImovel.PAVIMENTO_RUA);
		filtroImovel.adicionarCaminhoParaCarregamentoEntidade(
				FiltroImovel.PAVIMENTO_CALCADA);
		
		Collection colecaoImovel = this.getControladorUtil().pesquisar(filtroImovel, Imovel.class.getName());
		
		Imovel imovel = (Imovel) Util.retonarObjetoDeColecao(colecaoImovel);
		
		Collection colecaoEnderecos = new ArrayList();
		Imovel imovelEndereco = this.getControladorEndereco().pesquisarImovelParaEndereco(imovel.getId());
		colecaoEnderecos.add(imovelEndereco);
		
		FiltroUsuario filtroUsuario = new FiltroUsuario();
		filtroUsuario.adicionarParametro(new ParametroSimples(FiltroUsuario.INDICADOR_USUARIO_INTERNET, new Integer("1")));
		Collection colecaoUsuario = this.getControladorUtil().pesquisar(filtroUsuario, Usuario.class.getName());
		
		Usuario  usuarioLogado = (Usuario) Util.retonarObjetoDeColecao(colecaoUsuario);
		
		if(usuarioLogado == null){
			
			throw new ControladorException("pesquisa.usuario_internet.inexistente");
		}
		
		// Endereço
		FiltroClienteEndereco filtroClienteEndereco = new FiltroClienteEndereco();
		
		
		if(!contaBraile.getCpfCliente().equals("")){
			
			filtroClienteEndereco.adicionarParametro(new ParametroSimples(FiltroClienteEndereco.CPF, 
					contaBraile.getCpfCliente()));
			
		}else if(!contaBraile.getCnpjCliente().equals("")){
			
			filtroClienteEndereco.adicionarParametro(new ParametroSimples(FiltroClienteEndereco.CNPJ, 
					contaBraile.getCnpjCliente()));
		}
		
		Collection colecaoEndereco = null;
		
		if(!contaBraile.getCpfCliente().equals("") || !contaBraile.getCnpjCliente().equals("")){
			
			Collection colecaoClienteEndereco = this.getControladorUtil().pesquisar(filtroClienteEndereco, ClienteEndereco.class.getName());
			
			ClienteEndereco clienteEndereco = (ClienteEndereco) Util.retonarObjetoDeColecao(colecaoClienteEndereco);
			
			colecaoEndereco = new ArrayList();
			colecaoEndereco.add(clienteEndereco);
		}
		
		Integer[] idRA = this.getControladorRegistroAtendimento().inserirRegistroAtendimento(
				
				// Indicador Atendimento OnLine
				new Short("1"), 
			
				// Data Atendimento / Hora Atendimento
				dataAtendimento, horaAtendimento,
			
				// Tempo Espera Inicial / Final
				null, null, 
			
				// Meio Solicitação / Solicitação Tipo Especificação
				idMeioSolicitacao, idSolicitacaoTipoEspecificacao, 
			
				// Data Prevista / Observação
				Util.formatarData(definirDataPrevistaUnidadeDestinoEspecificacaoHelper.getDataPrevista()), observacao,
			
				// Imóvel / Descrição do Local da Ocorrência / Solicitação Tipo
				contaBraile.getImovel().getId(), null, idSolicitacaoTipo,
			
				// Coleção de Endereços / Ponto Referência Local Ocorrência
				colecaoEnderecos, null, 
			
				// Bairro Área
				null,
					
				// Localidade		
				imovel.getLocalidade().getId(), 
			
				// Setor Comercial
				imovel.getSetorComercial().getId(), 
					
				// Quadra		
				imovel.getQuadra().getId(),
			
				// Divisão Esgoto / Local Ocorrência
				null, null, 
			
				// Pavimento Rua / Pavimento Calçada
				imovel.getPavimentoRua().getId(), imovel.getPavimentoCalcada().getId(),
			
				// Unidade Atendimento / Usuário Logado
				idUnidadeAtendimento, usuarioLogado.getId(),
			
				// Cliente / Ponto Referência Solicitante
				null, null, 
			
				// Nome Solicitante / Novo Solicitante
				nomeSolicitante, false,
			
				// Unidade Solicitante / Funcionário
				null, null, 
			
				// Coleção Telefones / Coleção Endereços Solicitante
				null, colecaoEndereco, 
			
				// Unidade Destino / Parecer Unidade Destino
				idUnidadeAtendimento, parecer, 
			
				// Serviço Tipo / Número RA Manual / RA Gerado
				null, null, null,null,null,ConstantesSistema.NAO, null, 
				
				protocoloAtendimento, null, null,null, null, null,null,null,
				null,null,ConstantesSistema.NAO,ConstantesSistema.NAO,ConstantesSistema.NAO, null);
		
		return idRA[0];
		
	}
	
	/**
	 * UC1162 AUTORIZAR ALTERACAO INSCRICAO IMOVEL
	 * @author Rodrigo Cabral
	 * @date 05/06/2011
	 */
	public Collection pesquisaImovelInscricaoAlterada(ImovelInscricaoAlteradaHelper helper)throws ControladorException {
		try {
			
			Collection colecaoRetorno = null;
			Integer totalImoveis = null;
			Integer idQuadra = null;
			Integer idSetorComercial = null;
			Integer indicadorAutorizar = null;
			Collection colecaoImovelInscricaoAlterada = null;
			
			if(helper.getIndicadorSelecionarPorLocalizacaoGeografica().equals("1")){
				colecaoImovelInscricaoAlterada = repositorioCadastro.pesquisaImovelInscricaoAlterada(helper);
			}else{
				colecaoImovelInscricaoAlterada = repositorioCadastro.pesquisaImovelInscricaoAlteradaPorImoveis(helper);
			}
			
			if(colecaoImovelInscricaoAlterada != null && !colecaoImovelInscricaoAlterada.isEmpty()){
				
				Iterator iterImovelInscricaoAlterada = colecaoImovelInscricaoAlterada.iterator();
				colecaoRetorno = new ArrayList();
				ImovelInscricaoAlteradaHelper retorno = null;
				while (iterImovelInscricaoAlterada.hasNext()) {
					
					Object[] imovelIA = (Object[]) iterImovelInscricaoAlterada.next();
					
					totalImoveis = (Integer) imovelIA[0];
					idQuadra = (Integer) imovelIA[1];
					idSetorComercial = (Integer) imovelIA[2];
					indicadorAutorizar = 0;
					
					FiltroSetorComercial filtroSetorComercial = new FiltroSetorComercial();
					filtroSetorComercial.adicionarParametro(new ParametroSimples(
							FiltroSetorComercial.ID, idSetorComercial));
					
					Collection colecaoSetorComercial = this.getControladorUtil().pesquisar(filtroSetorComercial,
							SetorComercial.class.getName());

					SetorComercial setorComercial = (SetorComercial) Util.retonarObjetoDeColecao(colecaoSetorComercial);
					
					
					FiltroQuadra filtro = new FiltroQuadra();
					filtro.adicionarParametro(new ParametroSimples(
							FiltroQuadra.ID, idQuadra));
					
					Collection colecaoQuadra = this.getControladorUtil().pesquisar(filtro,
							Quadra.class.getName());

					Quadra quadra = (Quadra) Util.retonarObjetoDeColecao(colecaoQuadra);

					
					retorno = new ImovelInscricaoAlteradaHelper(
							indicadorAutorizar, totalImoveis, idQuadra, setorComercial.getCodigo());
					
					retorno.setNumeroQuadra(quadra.getNumeroQuadra());
					
					colecaoRetorno.add(retorno);
					
				}
			}
			return colecaoRetorno;
		} catch (Exception e) {
			throw new EJBException(e);
		}
	}
	

	
	/**
     * [UC1160] Processar Comando Gerado Carta Tarifa Social  
     * 
     * @author: Vivianne Sousa
     * @date: 24/03/2011
     */
    public void processarComandoGerado(Integer idLocalidade , Integer idFuncionalidadeIniciada,
    		TarifaSocialComandoCarta tarifaSocialComandoCarta)throws ControladorException{
        
        int idUnidadeIniciada = 0;
       
        try {
	        /*
	         * Registrar o início do processamento da Unidade de Processamento do Batch
	        */
            idUnidadeIniciada = getControladorBatch().iniciarUnidadeProcessamentoBatch(idFuncionalidadeIniciada,UnidadeProcessamento.LOCALIDADE,(idLocalidade));

            if(tarifaSocialComandoCarta.getDataProcessamento() == null){
            	//[SB0008]-Verificar carta para o comando
            	verificarCartaParaComando(idLocalidade,tarifaSocialComandoCarta);
            	
            	Integer idGerencia = null;
                if(tarifaSocialComandoCarta.getGerenciaRegional() != null && tarifaSocialComandoCarta.getGerenciaRegional().getId() != null){
                	idGerencia = tarifaSocialComandoCarta.getGerenciaRegional().getId();
                }
                
                Integer idUnidade = null;
                if(tarifaSocialComandoCarta.getUnidadeNegocio() != null && tarifaSocialComandoCarta.getUnidadeNegocio().getId() != null){
                	idUnidade = tarifaSocialComandoCarta.getUnidadeNegocio().getId();
                }
                
                Collection colecaoImoveis = null;
    									
    			if(tarifaSocialComandoCarta.getCodigoTipoCarta().equals(new Integer(1))){
    				//CADASTRO
    				colecaoImoveis = getControladorImovel().consultarImovelCadastro(idLocalidade,idGerencia,idUnidade,
    				tarifaSocialComandoCarta.getAnoMesInicialImplantacao(),tarifaSocialComandoCarta.getAnoMesFinalImplantacao());
    				if(colecaoImoveis != null && !colecaoImoveis.isEmpty()){
    					Iterator iterImovel = colecaoImoveis.iterator();
    					while (iterImovel.hasNext()) {
    						Imovel imovel = (Imovel) iterImovel.next();
    						//[SB0002] Verifica Critério Recadastramento
    						
    						Integer criterio = verificaCriterioRecadastramento(imovel,tarifaSocialComandoCarta);
    						if(criterio != null){
    							
    							if(verificaValidadeCarta(imovel,tarifaSocialComandoCarta)){
    								//[SB0005] Gera Cartas Tarifa Social 
    								gerarCartasTarifaSocial(imovel, tarifaSocialComandoCarta,criterio,null);
    								
    							}
    						}
    					}
    				}
    				
    			}else{
    				//COBRANÇA
    				colecaoImoveis = getControladorImovel().consultarImovel(idLocalidade,idGerencia,idUnidade);
    				
    				if(colecaoImoveis != null && !colecaoImoveis.isEmpty()){
    					Iterator iterImovel = colecaoImoveis.iterator();
    					while (iterImovel.hasNext()) {
    						Imovel imovel = (Imovel) iterImovel.next();
    						
    						//[SB0003] Verifica Critério Cobrança
    						Collection colecaoContas = verificaCriterioCobranca(imovel,tarifaSocialComandoCarta);
    						if(colecaoContas != null){
    							
    							if(verificaValidadeCarta(imovel,tarifaSocialComandoCarta)){
    								//[SB0005] Gera Cartas Tarifa Social 
    								gerarCartasTarifaSocial(imovel,tarifaSocialComandoCarta,null,colecaoContas);
    							}
    							
    						}
    					}
    				}
    			}
    								
    			//O sistema atualiza a data de processamento e quantidade de imóveis do comando processado 
    			//na tabela TAR_SOCIAL_COMANDO_CARTA com TSCC_ID = TSCC_ID recebido 
    			Integer qtdeImoveis = getControladorImovel().pesquisarQuantidadeImoveisTarifaSocialCarta(tarifaSocialComandoCarta.getId());
    			getControladorImovel().atualizarTarifaSocialComandoCarta(tarifaSocialComandoCarta.getId(),qtdeImoveis);
    			
            }
			
            getControladorBatch().encerrarUnidadeProcessamentoBatch(null,idUnidadeIniciada, false);
        
        } catch (Exception ex) {
            ex.printStackTrace();
            getControladorBatch().encerrarUnidadeProcessamentoBatch(ex,idUnidadeIniciada, true);
            throw new EJBException(ex);
        }       
        
    }
    
	/**
	 * [UC1160] Processar Comando Gerado Carta Tarifa Social  
	 * 
	 * @author Vivianne Sousa
	 * @date 24/03/2011
	 * 
	 * @throws ControladorException
	 */
	public Collection pesquisarLocalidadesPorGerencia(Integer idGerenciaRegional)throws ControladorException{
	
		try {			
			
			return this.repositorioCadastro.pesquisarLocalidadesPorGerencia(idGerenciaRegional);
	     
        } catch (ErroRepositorioException ex) {
            ex.printStackTrace();
            throw new ControladorException("erro.sistema", ex);
        }

	}
	
	/**
	 * [UC1160] Processar Comando Gerado Carta Tarifa Social  
	 * 
	 * @author Vivianne Sousa
	 * @date 24/03/2011
	 * 
	 * @throws ControladorException
	 */
	public Collection pesquisarLocalidadesPorUnidadeNegocio(Integer idUnidadeNegocio)throws ControladorException{
	
		try {			
			
			return this.repositorioCadastro.pesquisarLocalidadesPorUnidadeNegocio(idUnidadeNegocio);
	     
        } catch (ErroRepositorioException ex) {
            ex.printStackTrace();
            throw new ControladorException("erro.sistema", ex);
        }

	}
	
	/**
	 * [UC1160] Processar Comando Gerado Carta Tarifa Social  
	 * 
	 * @author Vivianne Sousa
	 * @date 24/03/2011
	 * 
	 * @throws ControladorException
	 */
	public Collection pesquisarLocalidade()throws ControladorException{
	
		try {			
			
			return this.repositorioCadastro.pesquisarLocalidade();
	     
        } catch (ErroRepositorioException ex) {
            ex.printStackTrace();
            throw new ControladorException("erro.sistema", ex);
        }

	}
	
	
	/**
	 * [UC1160] Processar Comando Gerado Carta Tarifa Social  
	 * [SB0002]Verifica Critério Recadastramento
	 * 
	 * @author Vivianne Sousa
	 * @date 24/03/2011
	 * 
	 * @throws ControladorException
	 */
	public Integer verificaCriterioRecadastramento(Imovel imovel, TarifaSocialComandoCarta tscc)throws ControladorException{
			
		Integer codigoCriterio = null;
		
		Cliente clienteUsuario = getControladorCliente().pesquisarClienteUsuarioDoImovel(imovel.getId());
		
		//Caso  TSCC_ICCRITERIOCPF = 1
		if(tscc.getIndicadorCriterioCpf().equals(ConstantesSistema.SIM)){
			if(clienteUsuario.getCpf() == null){
				return 1;
			}
		}
		//Caso  TSCC_ICCRITERIOIDENTIDADE = 1
		if(tscc.getIndicadorCriterioIdentidade().equals(ConstantesSistema.SIM)){
			if(clienteUsuario.getRg() == null){
				return 2;
			}
		}
		//Caso  TSCC_ICCRITERIOCONTRATOENERGIA = 1
		if(tscc.getIndicadorCriterioContratoEnergia().equals(ConstantesSistema.SIM)){
			if(imovel.getQuantidadeEconomias().equals(new Short("1"))){
				if(imovel.getNumeroCelpe() == null){
					return 3;
				}
			}else if(imovel.getQuantidadeEconomias().compareTo(new Short("1")) == 1){
				Collection colecaoImovelEconomia = getControladorImovel().pesquisarImovelEconomia(imovel.getId());
				if(colecaoImovelEconomia == null || colecaoImovelEconomia.isEmpty()){
					return 3;
				}
			}
		}
		TarifaSocialDadoEconomia tarifaSocialDadoEconomia = getControladorImovel().pesquisarTarifaSocialDadoEconomia(imovel.getId());
		//Caso  TSCC_ICCRITERIODADOSENERGIA = 1
		if(tscc.getIndicadorCriterioDadosEnergia().equals(ConstantesSistema.SIM)){
			if(tarifaSocialDadoEconomia != null && 
			tarifaSocialDadoEconomia.getTarifaSocialRevisaoMotivo() != null &&
			tarifaSocialDadoEconomia.getTarifaSocialRevisaoMotivo().getId().equals(new Integer(46))){
				return 4;
			}
		}
		//Caso  TSCC_ICCRITERIOPROGRAMASOCIAL = 1
		if(tscc.getIndicadorCriterioProgramaSocial().equals(ConstantesSistema.SIM)){
			if(tarifaSocialDadoEconomia != null && 
			tarifaSocialDadoEconomia.getTarifaSocialCartaoTipo() != null &&
			tarifaSocialDadoEconomia.getTarifaSocialCartaoTipo().getDescricaoAbreviada().equals("BF")){
				return 5;
			}
		}
		//Caso  TSCC_ICCRITERIOSEGDESEMPREGO = 1
		if(tscc.getIndicadorCriterioSeguroDesemprego().equals(ConstantesSistema.SIM)){
			if(tarifaSocialDadoEconomia != null && 
				tarifaSocialDadoEconomia.getTarifaSocialCartaoTipo() != null &&	
				tarifaSocialDadoEconomia.getTarifaSocialCartaoTipo().getId().equals(new Integer(49)) &&
				tarifaSocialDadoEconomia.getDataValidadeCartao() != null && 
				tarifaSocialDadoEconomia.getDataValidadeCartao().compareTo(new Date()) == -1){
				return 6;
			}
		}
		//Caso  TSCC_ICCRITERIORENDACOMPROVAD = 1
		if(tscc.getIndicadorCriterioRendaComprovada().equals(ConstantesSistema.SIM)){
			if(tarifaSocialDadoEconomia != null && 
					tarifaSocialDadoEconomia.getRendaTipo() != null &&
					tarifaSocialDadoEconomia.getRendaTipo().getId().equals(new Integer(1))){
				return 7;
			}
		}
		//Caso  TSCC_ICCRITERIORENDADECLARADA = 1
		if(tscc.getIndicadorCriterioRendaDeclarada().equals(ConstantesSistema.SIM)){
			if(tarifaSocialDadoEconomia != null && 
					tarifaSocialDadoEconomia.getRendaTipo() != null &&
					tarifaSocialDadoEconomia.getRendaTipo().getId().equals(new Integer(2))){
				return 8;
			}
		}
		//Caso  TSCC_ICCRITERIOQTECONOMIA = 1
		if(tscc.getIndicadorCriterioQtdeEconomia().equals(ConstantesSistema.SIM)){
			if(imovel.getQuantidadeEconomias().compareTo(new Short("1")) == 1){
				return 9;
			}
		}
		//Caso  TSCC_ICCRITERIORECADASTRAMENTO = 1
		if(tscc.getIndicadorCriterioRecadastramento().equals(ConstantesSistema.SIM)
			&& tarifaSocialDadoEconomia != null ){
			Date dataRecadastramento = tarifaSocialDadoEconomia.getDataRecadastramento();
		
			if(dataRecadastramento != null){
				dataRecadastramento = Util.subtrairNumeroAnosDeUmaData(dataRecadastramento,2);
				
				if(dataRecadastramento.compareTo(new Date()) == -1){
					return 10;
				}
			}
		}
		
		return codigoCriterio; 
	}
	
	/**
	 * [UC1160] Processar Comando Gerado Carta Tarifa Social  
	 * [SB0004]-Verifica Validade Carta
	 * 
	 * @author Vivianne Sousa
	 * @date 25/03/2011
	 * 
	 * @throws ControladorException
	 */
	public boolean verificaValidadeCarta(Imovel imovel, TarifaSocialComandoCarta tscc)throws ControladorException{
			
		boolean retorno = true;
		TarifaSocialCarta tarifaSocialCarta = getControladorImovel().pesquisarTarifaSocialCarta(imovel.getId(),tscc.getCodigoTipoCarta());
		
		if(tarifaSocialCarta != null && tarifaSocialCarta.getTarifaSocialComandoCarta() != null){
			
			Date dataGeracao = tarifaSocialCarta.getTarifaSocialComandoCarta().getDataGeracao();
			Integer qtdeDiasComparecimento = tarifaSocialCarta.getTarifaSocialComandoCarta().getQuantidadeDiasComparecimento();
			
			if((Util.adicionarNumeroDiasDeUmaData(dataGeracao,qtdeDiasComparecimento)).compareTo(new Date()) == -1 ){
				retorno = false;
			}
		}
		
		return retorno; 
	}
	
	/**
	 * [UC1160] Processar Comando Gerado Carta Tarifa Social  
	 * [SB0003]Verifica Critério Cobrança
	 * 
	 * @author Vivianne Sousa
	 * @date 28/03/2011
	 * 
	 * @throws ControladorException
	 */
	public Collection verificaCriterioCobranca(Imovel imovel, TarifaSocialComandoCarta tscc)throws ControladorException{
			
		Collection retorno = null;
		
		Date dataVencimentoInicial = Util.criarData(1, 1, 0001);
		Date dataVencimentoFinal = Util.subtrairNumeroDiasDeUmaData(new Date(),tscc.getQuantidadeDiasDebitoVencimento().intValue()); 
			//Util.criarData(31, 12, 9999);

		// [UC0067] Obter Débito do Imóvel ou Cliente
		ObterDebitoImovelOuClienteHelper imovelDebitoCredito = Fachada.getInstancia()
				.obterDebitoImovelOuCliente(1, // indicadorDebito
						imovel.getId().toString(), // idImovel
						null, // codigoCliente
						null, // clienteRelacaoTipo
						"000101", // anoMesInicialReferenciaDebito
						"999912", // anoMesFinalReferenciaDebito
						dataVencimentoInicial, // anoMesInicialVencimentoDebito
						dataVencimentoFinal, // anoMesFinalVencimentoDebito
						1, // indicadorPagamento
						1, // indicadorConta
						2, // indicadorDebitoACobrar
						2, // indicadorCreditoARealizar
						2, // indicadorNotasPromissorias
						2, // indicadorGuiasPagamento
						2, // indicadorCalcularAcrescimoImpontualidade
						true);// indicadorContas

		// CONTA
		if (imovelDebitoCredito.getColecaoContasValoresImovel() != null
				&& !imovelDebitoCredito.getColecaoContasValoresImovel().isEmpty()) {
			return imovelDebitoCredito.getColecaoContasValoresImovel();
		}
		return retorno; 
	}
	
	
	/**
	 * [UC1160] Processar Comando Gerado Carta Tarifa Social  
	 * [SB0005]Gera Cartas Tarifa Social  
	 * 
	 * @author Vivianne Sousa
	 * @date 28/03/2011
	 * 
	 * @throws ControladorException
	 */
	public void gerarCartasTarifaSocial(Imovel imovel, TarifaSocialComandoCarta tscc,
			Integer criterio,Collection colecaoContas)throws ControladorException{
		
		try{
			
			TarifaSocialCarta tarifaSocialCarta = new TarifaSocialCarta();
			
			TarifaSocialCartaPK tarifaSocialCartaPK = new TarifaSocialCartaPK();
			Cliente clienteUsuario = getControladorCliente().pesquisarClienteUsuarioDoImovel(imovel.getId());
			tarifaSocialCartaPK.setClienteId(clienteUsuario.getId());
			tarifaSocialCartaPK.setTarifaSocialComandoCartaID(tscc.getId());
			tarifaSocialCartaPK.setImovelId(imovel.getId());
			tarifaSocialCarta.setComp_id(tarifaSocialCartaPK);
			
			tarifaSocialCarta.setImovel(imovel);
			tarifaSocialCarta.setTarifaSocialComandoCarta(tscc);
			tarifaSocialCarta.setCliente(clienteUsuario);
			tarifaSocialCarta.setIndicadorExcluidoTarifaSocial(ConstantesSistema.NAO);
			
			tarifaSocialCarta.setLocalidade(imovel.getLocalidade());
			tarifaSocialCarta.setGerenciaRegional(imovel.getLocalidade().getGerenciaRegional());
			tarifaSocialCarta.setUnidadeNegocio(imovel.getLocalidade().getUnidadeNegocio());
			
			if(tscc.getCodigoTipoCarta().equals(new Integer(2))){
				//correspondente a FATURAS VENCIDAS 
				tarifaSocialCarta.setCodigoMotivo(new Integer(11));
				
				//[SB0006]Gera Dados Débito da Carta
				gerardadosDebitoCarta(imovel,tscc,colecaoContas);
				
			}else{
				TarifaSocialMotivoCarta tsmc =  repositorioCadastro.pesquisarTarifaSocialMotivoCarta(criterio);
				tarifaSocialCarta.setCodigoMotivo(tsmc.getId());
			}
			tarifaSocialCarta.setUltimaAlteracao(new Date());
			getControladorUtil().inserir(tarifaSocialCarta);
		
		} catch (ErroRepositorioException ex) {
			ex.printStackTrace();
			throw new ControladorException("erro.sistema", ex);
		}
	}
	

	/**
	 * [UC1160] Processar Comando Gerado Carta Tarifa Social  
	 * [SB0006]Gera Dados Débito da Carta 
	 * 
	 * @author Vivianne Sousa
	 * @date 28/03/2011
	 * 
	 * @throws ControladorException
	 */
	public void gerardadosDebitoCarta(Imovel imovel, TarifaSocialComandoCarta tscc,Collection colecaoContas)throws ControladorException{
			
		if(colecaoContas != null && !colecaoContas.isEmpty()){
			
			Iterator iterContas = colecaoContas.iterator();
			
			while (iterContas.hasNext()) {
				ContaValoresHelper helper = (ContaValoresHelper) iterContas.next();
				Conta conta = helper.getConta();
				TarifaSocialCartaDebito tarifaSocialCartaDebito = new TarifaSocialCartaDebito();
				
				TarifaSocialCartaDebitoPK tarifaSocialCartaDebitoPK = new TarifaSocialCartaDebitoPK();
				tarifaSocialCartaDebitoPK.setContaId(conta.getId());
				tarifaSocialCartaDebitoPK.setImovelId(imovel.getId());
				tarifaSocialCartaDebitoPK.setTarifaSocialComandoCartaID(tscc.getId());
				tarifaSocialCartaDebito.setComp_id(tarifaSocialCartaDebitoPK);
				
				tarifaSocialCartaDebito.setImovel(imovel);
				tarifaSocialCartaDebito.setConta(conta);
				tarifaSocialCartaDebito.setTarifaSocialComandoCarta(tscc);
				
				tarifaSocialCartaDebito.setDataVencimentoConta(conta.getDataVencimentoConta());
				tarifaSocialCartaDebito.setReferenciaConta(conta.getReferencia());
				tarifaSocialCartaDebito.setValorConta(conta.getValorTotalContaBigDecimal());
				tarifaSocialCartaDebito.setUltimaAlteracao(new Date());
				
				getControladorUtil().inserir(tarifaSocialCartaDebito);
			}
		}
	}
	
	/**
	 * [UC1160] Processar Comando Gerado Carta Tarifa Social  
	 * [SB0007]-Gera Arquivo TXT das Cartas
	 * 
	 * @author Vivianne Sousa
	 * @date 29/03/2011
	 * 
	 * @throws ControladorException
	 */
	public void gerarCartaTarifaSocial(TarifaSocialComandoCarta tscc,Integer idFuncionalidadeIniciada)throws ControladorException{
	    
		BufferedWriter out = null;
		ZipOutputStream zos = null;
		File leitura = null;
		Date dataAtual = new Date();
		String nomeZip = null;
		int idUnidadeIniciada = 0;
		
		try{
			idUnidadeIniciada = getControladorBatch().iniciarUnidadeProcessamentoBatch(idFuncionalidadeIniciada,UnidadeProcessamento.LOCALIDADE,0);
			
			if(tscc.getDataProcessamento() != null && !tscc.getQuantidadeCartasGeradas().equals(0)){
				
				if(tscc.getCodigoTipoCarta().equals(new Integer(1))){
					nomeZip = "CARTAS_RECADASTRAMENTO_" 
					+ Util.formatarData(dataAtual) + Util.formatarHoraSemDataSemDoisPontos(dataAtual);
				}else {
					nomeZip = "CARTAS_COBRANCA_" 
					+ Util.formatarData(dataAtual) + Util.formatarHoraSemDataSemDoisPontos(dataAtual);
				}
				
				// Definindo arquivo para escrita	
				nomeZip = nomeZip.replace("/", "_");
				File compactado = new File(nomeZip + ".zip");
				leitura = new File(nomeZip + ".txt");

			        	
			    zos = new ZipOutputStream(new FileOutputStream(compactado));
			    out = new BufferedWriter(new OutputStreamWriter(new FileOutputStream(leitura.getAbsolutePath())));
				
			    // pegar o arquivo, zipar pasta e arquivo e escrever no stream
				System.out.println("***************************************");
				System.out.println("INICO DA CRIACAO DO ARQUIVO");
				System.out.println("***************************************");
				
				
				Collection colecaoTarifaSocialCarta = getControladorImovel().pesquisarTarifaSocialCarta(tscc.getId());
				
				System.out.println("***************************************");
				System.out.println("QTD DE CARTAS:"	+ colecaoTarifaSocialCarta.size());
				System.out.println("***************************************");

				//HEADER
				StringBuilder headerTxt = new StringBuilder();
				if(tscc.getCodigoTipoCarta().equals(new Integer(1))){
					headerTxt.append(Util.completaStringComEspacoAEsquerda("Carta de Recadastramento Imóvel com Tarifa Social",50));
				}else{
					headerTxt.append(Util.completaStringComEspacoAEsquerda("Carta de Cobrança Imóvel com Tarifa Social",50));
				}
				
				headerTxt.append(Util.completaStringComEspacoAEsquerda(tscc.getId().toString(),10));
				headerTxt.append(Util.completaStringComEspacoAEsquerda(Util.formatarData(tscc.getDataGeracao()),10));
				headerTxt.append(Util.completaStringComEspacoAEsquerda(tscc.getQuantidadeCartasGeradas().toString(),10));
				headerTxt.append(Util.completaStringComEspacoAEsquerda(tscc.getUsuario().getId().toString(),10));
				headerTxt.append(Util.completaStringComEspacoAEsquerda(tscc.getQuantidadeDiasComparecimento().toString(),10));
				headerTxt.append(System.getProperty("line.separator"));
			    out.write(headerTxt.toString());	
				
				Iterator iterTSCR = colecaoTarifaSocialCarta.iterator();
				while (iterTSCR.hasNext()) {
					TarifaSocialCarta tarifaSocialCarta = (TarifaSocialCarta) iterTSCR.next();
					
					Integer idImovel = tarifaSocialCarta.getImovel().getId();
					
					String matriculaImovelFormatada = Util.adicionarZerosEsquedaNumero(8, idImovel.toString());
					matriculaImovelFormatada = matriculaImovelFormatada.substring(0, 7) + "." + matriculaImovelFormatada.substring(7, 8);
					String inscricao = getControladorImovel().pesquisarInscricaoImovel(idImovel);
					String enderecoImovel = this.getControladorEndereco().pesquisarEnderecoFormatado(idImovel);
					String nomeCliente = tarifaSocialCarta.getCliente().getNome();
					
					BigDecimal valorContas = ConstantesSistema.VALOR_ZERO;
					if(tscc.getCodigoTipoCarta().equals(new Integer(2))){
						valorContas = getControladorImovel().pesquisarValorContaTarifaSocialCartaDebito(tscc.getId(),idImovel);
					}
					
					StringBuilder cartaTxt = new StringBuilder();
					cartaTxt.append(matriculaImovelFormatada);
					cartaTxt.append(Util.completaStringComEspacoADireitaCondicaoTamanhoMaximoTruncando(inscricao,20));
					cartaTxt.append(Util.completaStringComEspacoADireitaCondicaoTamanhoMaximoTruncando(enderecoImovel,70));
					cartaTxt.append(Util.completaStringComEspacoADireitaCondicaoTamanhoMaximoTruncando(nomeCliente,50));
					cartaTxt.append(Util.completaStringComEspacoAEsquerdaTruncandoAoTamanhoMaximoInformado(Util.formatarMoedaReal(valorContas),20));
								
					cartaTxt.append(System.getProperty("line.separator"));
				    out.write(cartaTxt.toString());		
					
				}
				
				out.flush();                           
		
			}
	   		
    		getControladorBatch().encerrarUnidadeProcessamentoBatch(null,idUnidadeIniciada, false);	
			System.out.println("***************************************");
			System.out.println("FIM DA CRIACAO DO ARQUIVO");
			System.out.println("***************************************");
		
		} catch (IOException ex) {
			ex.printStackTrace();
            getControladorBatch().encerrarUnidadeProcessamentoBatch(ex,idUnidadeIniciada, true);
            throw new EJBException(ex);
	   } catch (Exception ex) {
            ex.printStackTrace();
            getControladorBatch().encerrarUnidadeProcessamentoBatch(ex,idUnidadeIniciada, true);
            throw new EJBException(ex);
		} finally {
			try{
				out.close();
				ZipUtil.adicionarArquivo(zos, leitura);
		
				// close the stream
				zos.close();
				leitura.delete();
			} catch (IOException e) {
				getControladorBatch().encerrarUnidadeProcessamentoBatch(e,idUnidadeIniciada, true);
	            throw new EJBException(e);
			}
        }
		
	}
	
	/**
	 * [UC1161]Retirar Imóvel da Tarifa Social
	 * 
	 * @author Vivianne Sousa
	 * @date 01/04/2011
	 * 
	 * @throws ControladorException
	 */
	public void retirarImovelTarifaSocial(TarifaSocialComandoCarta tscc,
			int idFuncionalidadeIniciada) throws ControladorException {
		
		int idUnidadeIniciada = 0;
		Integer qtdeImoveisExcluidos = 0;
		try{
			idUnidadeIniciada = getControladorBatch().iniciarUnidadeProcessamentoBatch(idFuncionalidadeIniciada,UnidadeProcessamento.LOCALIDADE,0);

			Collection colecaoImoveis = getControladorImovel().pesquisarImoveisTarifaSocialCarta(tscc.getId(), tscc.getCodigoTipoCarta());
			if(colecaoImoveis != null && !colecaoImoveis.isEmpty()){
				Iterator iterImoveis = colecaoImoveis.iterator();
				
				if(tscc.getCodigoTipoCarta().equals(new Integer(1))){
					
					while (iterImoveis.hasNext()) {
						Imovel imovel = (Imovel) iterImoveis.next();
						
						//[SB0004]Retirar Imóvel Tarifa Social 
						retirarImovelTarifaSocial(imovel, tscc);
						qtdeImoveisExcluidos = qtdeImoveisExcluidos + 1;
					}
					
				}else{
					while (iterImoveis.hasNext()) {
						Imovel imovel = (Imovel) iterImoveis.next();
						
						//[SB0003]Verifica Situação dos Débitos
						Integer qtdeContas = verificaSituacaoDebitos(imovel,tscc);
						
						if(qtdeContas.compareTo(new Integer(0)) == 1){
							//[SB0004]Retirar Imóvel Tarifa Social 
							retirarImovelTarifaSocial(imovel, tscc);
							qtdeImoveisExcluidos = qtdeImoveisExcluidos + 1;
						}
						
					}
					
				}
				
			}

			getControladorImovel().atualizarDataExecucaoTarifaSocialComandoCarta(tscc.getId());
			
			
			try {
				String emailReceptor = "";
				// Envia de Arquivo por email
				EnvioEmail envioEmail = this.pesquisarEnvioEmail(EnvioEmail.RETIRAR_IMOVEL_TARIFA_SOCIAL);

				String emailRemetente = envioEmail.getEmailRemetente();
				String tituloMensagem = envioEmail.getTituloMensagem();
				String corpoMensagem = obterConteudoEmail(qtdeImoveisExcluidos, tscc);

				ServicosEmail.enviarMensagem(emailRemetente, emailReceptor, tituloMensagem, corpoMensagem);

			} catch (Exception e) {
				System.out.println("Erro ao enviar email.");
			}

			getControladorBatch().encerrarUnidadeProcessamentoBatch(null,idUnidadeIniciada, false);

		} catch (Exception e) {

			getControladorBatch().encerrarUnidadeProcessamentoBatch(e,idUnidadeIniciada, true);
			throw new EJBException(e);
		}

	}
	/**
	 * [UC1161]Retirar Imóvel da Tarifa Social
	 * [SB0003]Verifica Situação dos Débitos
	 * 
	 * @author Vivianne Sousa
	 * @date 01/04/2011
	 * 
	 * @throws ControladorException
	 */
	public Integer verificaSituacaoDebitos(Imovel imovel, TarifaSocialComandoCarta tscc)throws ControladorException{
			
		Collection colecaoContasTarifaSocialCartaDebito = getControladorImovel().
		pesquisarContasTarifaSocialCartaDebito(tscc.getId(),imovel.getId());
	
		Integer qtdeContas = getControladorFaturamento().
			pesquisarQtdeContaNaoPaga(colecaoContasTarifaSocialCartaDebito);
		
		return qtdeContas; 
	}
	
	/**
	 * [UC1161]Retirar Imóvel da Tarifa Social
	 * [SB0002]Verifica Média de Consumo
	 * 
	 * @author Vivianne Sousa
	 * @date 04/04/2011
	 * 
	 * @throws ControladorException
	 */
	public boolean verificaMediaConsumo(Imovel imovel)throws ControladorException{
			
		boolean retorno  = false;
		Integer consumoMedio = getControladorMicromedicao().obterConsumoMedioEmConsumoHistorico(imovel.getId(),LigacaoTipo.LIGACAO_AGUA);
				
		if(consumoMedio != null){
			FiltroCategoria filtroCategoria = new FiltroCategoria();
			filtroCategoria.adicionarParametro(new ParametroSimples(FiltroCategoria.CODIGO,Categoria.RESIDENCIAL));
			Collection<Categoria> collCategoria = Fachada.getInstancia().pesquisar(filtroCategoria,Categoria.class.getName());
			Categoria categoria = collCategoria.iterator().next();
			
			Integer consumoMinimoCategoria = categoria.getConsumoMinimo();
			int qtdeEconomias = getControladorImovel().obterQuantidadeEconomias(imovel);
			 
			int consumoMinimo = ((consumoMinimoCategoria.intValue()) * qtdeEconomias);
			 
			if(consumoMedio.intValue() > consumoMinimo){
				retorno = true;
			}
		}
			 
		return retorno; 
	}
	
	/**
	 * [UC1161]Retirar Imóvel da Tarifa Social
	 * [SB0004]Retirar Imóvel tarifa Social
	 * 
	 * @author Vivianne Sousa
	 * @date 04/04/2011
	 * 
	 * @throws ControladorException
	 */
	public void retirarImovelTarifaSocial(Imovel imovel, TarifaSocialComandoCarta tscc)throws ControladorException{
		
		Integer motivoExclusao = null;
		String observacaoRetira = "";
		if(tscc == null){
			motivoExclusao = new Integer(17);
			observacaoRetira = "Imóvel retirado da situação de faturamento através de " +
			"processo batch executado para verificação de imóvel da tarifa social com média de consumo superior a 10m3";
		}else{
			observacaoRetira = "Imóvel retirado da situação de faturamento através de " +
			"processo batch executado por comando de carta de tarifa social com número " + tscc.getId();
			if(tscc.getCodigoTipoCarta().equals(new Integer(1))){
				motivoExclusao = new Integer(22);
			}else{
				motivoExclusao = new Integer(24);
			}
		}
		
		getControladorImovel().retirarImovelTarifaSocial(motivoExclusao, imovel,observacaoRetira);

	}
	
	/**
	 * [UC1161]Retirar Imóvel da Tarifa Social
	 * 
	 * @author Vivianne Sousa
	 * @date 04/04/2011
	 * 
	 * @throws ControladorException
	 */
	public String obterConteudoEmail(Integer qtdeImoveisExcluidos, TarifaSocialComandoCarta tscc)throws ControladorException{
		
		String conteudoEmail = "Processo para exclusão dos imóveis com perfil de TARIFA SOCIAL";
		
		if(tscc == null){
			//mensal
			conteudoEmail = conteudoEmail + " e que apresentaram média de consumo dos ultimos 6 meses superior a 10m, ";
			
		}else{
		
			if(tscc.getCodigoTipoCarta().equals(new Integer(1))){
				//recadastramento
				conteudoEmail = conteudoEmail + ", que recebeu carta de recadastramento do comando " + tscc.getId() 
				+ " ,mas não compareceu para atualização dos dados cadsatrais no prazo estabelecido, ";
				
			}else{
				//cobrança
				conteudoEmail = conteudoEmail + ", que recebeu carta de cobrança do comando " + tscc.getId() 
				+ " ,mas não compareceu para regularização do(s) débito(s) no prazo estabelecido, ";
				
			}
		}
		
		conteudoEmail = conteudoEmail + "foi executado com sucesso e retirou " + qtdeImoveisExcluidos 
			+ " imóveis do perfil correspondente a TARIFA SOCIAL.";
		
		return conteudoEmail; 
	}
	
	
	/**
	 * [UC1161]Retirar Imóvel da Tarifa Social
	 * 
	 * @author Vivianne Sousa
	 * @date 04/04/2011
	 * 
	 * @throws ControladorException
	 */
	public void retirarImovelTarifaSocial(Integer idLocalidade,	int idFuncionalidadeIniciada) throws ControladorException {
		
		int idUnidadeIniciada = 0;

		try{
			idUnidadeIniciada = getControladorBatch().iniciarUnidadeProcessamentoBatch(idFuncionalidadeIniciada,UnidadeProcessamento.LOCALIDADE,(idLocalidade));

			Collection colecaoImoveis = getControladorImovel().pesquisarImoveisTarifaSocial(idLocalidade);
			if(colecaoImoveis != null && !colecaoImoveis.isEmpty()){
				Iterator iterImoveis = colecaoImoveis.iterator();
					
				while (iterImoveis.hasNext()) {
					Imovel imovel = (Imovel) iterImoveis.next();
					
					if(verificaMediaConsumo(imovel)){
						//[SB0004]Retirar Imóvel Tarifa Social 
						retirarImovelTarifaSocial(imovel, null);
					}
				}
			}
		
			getControladorBatch().encerrarUnidadeProcessamentoBatch(null,idUnidadeIniciada, false);

		} catch (Exception e) {

			getControladorBatch().encerrarUnidadeProcessamentoBatch(e,idUnidadeIniciada, true);
			throw new EJBException(e);
		}

	}
	
	
	/**
	 * [UC1160] Processar Comando Gerado Carta Tarifa Social  
	 * [SB0008]-Verificar carta para o comando
	 * 
	 * @author Vivianne Sousa
	 * @date 19/04/2011
	 * 
	 * @throws ControladorException
	 */
	public void verificarCartaParaComando(Integer idLocalidade,TarifaSocialComandoCarta tscc)throws ControladorException{
			
		getControladorImovel().removerCartasComando(tscc.getId(),idLocalidade,tscc.getCodigoTipoCarta());
		
	}
	
	
	/**
	 * [UC1160] Processar Comando Gerado Carta Tarifa Social  
	 * 
	 * @author Vivianne Sousa
	 * @date 02/05/2011
	 * 
	 * @throws ControladorException
	 */
	public Collection pesquisarLocalidadesPorGerenciaEUnidade(Integer idGerenciaRegional
			,Integer idUnidadeNegocio)throws ControladorException{
	
		try {			
			
			return this.repositorioCadastro.pesquisarLocalidadesPorGerenciaEUnidade(
					idGerenciaRegional,idUnidadeNegocio);
	     
        } catch (ErroRepositorioException ex) {
            ex.printStackTrace();
            throw new ControladorException("erro.sistema", ex);
        }

	}
	

	
	/**
	 * [UC1170] Gerar Relatório Acesso ao SPC
	 *  
	 * @author: Diogo Peixoto
	 * @date: 06/05/2011
	 * 
	 * @param FiltrarRelatorioAcessoSPCHelper
	 * @return Collection<RelatorioAcessoSPCBean>
	 * @throws ControladorException
	 */
	public Collection<RelatorioAcessoSPCBean> filtrarRelatorioAcessoSPC(FiltrarRelatorioAcessoSPCHelper filtro) throws ControladorException {
		Collection<Object[]> colecaoAcessoSPC = new ArrayList();
		Collection<RelatorioAcessoSPCBean> beans = new ArrayList();
		RelatorioAcessoSPCBean bean = null;
		
		try {

			colecaoAcessoSPC = this.repositorioCadastro.filtrarRelatorioAcessoSPC(filtro);
			
			if ( colecaoAcessoSPC != null && colecaoAcessoSPC.size() > 0 ){
				
				Iterator iteAcessoSPC = colecaoAcessoSPC.iterator();
				
				while (iteAcessoSPC.hasNext() ){
					
					Object[] linha = (Object[]) iteAcessoSPC.next();
					
					String strUnidade = null;
					if(linha[0] != null){
						strUnidade = String.valueOf((Integer) linha[0]);
					}
					if(linha[1] != null){
						strUnidade += " - " + (String) linha[1];
					}
					
					String strUsuario = null;
					if(linha[2] != null){
						strUsuario = (String) linha[2];
					}
					
					String cpfCliente = null;
					if(linha[3] != null){
						cpfCliente = (String) linha[3];
						cpfCliente = Util.formatarCpf(cpfCliente);
					}

					String cnpjCliente = null;
					if(linha[4] != null){
						cnpjCliente = (String) linha[4];
						cnpjCliente = Util.formatarCnpj(cnpjCliente);
					}
					
					//Define se o cliente é Pessoa Física ou Pessoa Jurídica, dependendo seta o cpf ou cnpj
					String cpfCnpjCliente = null;
					if(cpfCliente != null){
						cpfCnpjCliente = cpfCliente;
					}else if(cnpjCliente != null){
						cpfCnpjCliente = cnpjCliente;
					}
					
					String razaoSocial = null;
					if(linha[5] != null){	
						razaoSocial = (String) linha[5];
					}
					
					String strDataAcesso = null;
					if(linha[6] != null){
						Date dataAacesso = (Date) linha[6];
						SimpleDateFormat sdf = new SimpleDateFormat("dd/MM/yyyy");
						strDataAcesso = sdf.format(dataAacesso);
					}
				
					bean = new RelatorioAcessoSPCBean(strUnidade, strUsuario, strDataAcesso, cpfCnpjCliente, razaoSocial);
					beans.add(bean);
				}				
			}
		} catch (ErroRepositorioException ex) {
			sessionContext.setRollbackOnly();
			ex.printStackTrace();
			throw new ControladorException("erro.sistema", ex);
		}
		return beans;
	}
	
	/**
	 * [UC0925] Emitir Boletos
	 *
	 * retrona DBTP_VLLIMITE para DBTP_ID = idDebitoTipo
	 *
	 * @author Rômulo Aurélio
	 * @date 22/12/2009
	 * 
	 * @throws ErroRepositorioException
	 */
	public void atualizarGrauImportancia(LogradouroBairro logradouroBairro, Integer grauImportancia, Usuario usuario)
			throws ControladorException {
		try {
			
//			 ------------ REGISTRAR TRANSAÇÃO----------------------------
			
			RegistradorOperacao registradorOperacao = new RegistradorOperacao(
					Operacao.ATUALIZAR_IMPORTANCIA_LOGRADOURO_BAIRRO, logradouroBairro.getId(),
					logradouroBairro.getId(), new UsuarioAcaoUsuarioHelper(usuario,
					UsuarioAcao.USUARIO_ACAO_EFETUOU_OPERACAO));
			registradorOperacao.registrarOperacao(logradouroBairro);
			
			
			registradorOperacao.registrarOperacao(logradouroBairro.getProgramaCalibragem());
			getControladorTransacao().registrarTransacao(logradouroBairro);
//			 ------------ REGISTRAR TRANSAÇÃO----------------------------
			
			repositorioCadastro.atualizarGrauImportancia(logradouroBairro,grauImportancia);
		} catch (ErroRepositorioException e) {
			throw new ControladorException("erro.sistema", e);
		}
	}
	
	
	
	
	/**
     * Obtém a coleção de categorias.
     * 
     * @author Hugo Azevedo
     * @date 22/06/2011
     * 
     * @throws ControladorException
     */
	
	public Collection obterCategorias() throws ControladorException{
		Collection retornoQuery = null;
		
		try {
			retornoQuery = this.repositorioCadastro.obterCategorias();
		} catch (ErroRepositorioException e) {
			e.printStackTrace();
		}
		
		Collection retorno = null;
		Object[] obj = null;
		Categoria categoria = null;
		retorno = new ArrayList();
		Iterator it = retornoQuery.iterator();
		while(it.hasNext()){
			
			obj = (Object[])it.next();
			Integer id = (Integer) obj[0];
			String descricao = (String) obj[1];
			
			categoria = new Categoria();
			categoria.setId(id);
			categoria.setDescricao(descricao);
			
			retorno.add(categoria);
		}
		
		return retorno;
		
	}
	
	/**
     * Obtém a coleção de perfis de imóveis.
     * 
     * @author Hugo Azevedo
     * @date 22/06/2011
     * 
     * @throws ControladorException
     */

	public Collection obterPerfisImoveis() throws ControladorException{
		Collection retornoQuery = null;
		
		try {
			retornoQuery = this.repositorioCadastro.obterPerfisImoveis();
		} catch (ErroRepositorioException e) {
			e.printStackTrace();
		}
		
		Collection retorno = new ArrayList();
		Object[] obj = null;
		
		ImovelPerfil perfil = null;
		Iterator it = retornoQuery.iterator();
		
		while(it.hasNext()){
			obj = (Object[]) it.next();
			
			perfil = new ImovelPerfil();
			perfil.setId((Integer) obj[0]);
			perfil.setDescricao((String) obj[1]);
			
			retorno.add(perfil);
			
		}
		
		return retorno;
	}
	

	/**
	 * [UC0060] Inserir Parametros do Sistema
	 * Validar documentos da loja virtual
	 * 
	 * @author Erivan Sousa
	 * @date 15/07/2011
	 * 
	 * @param byte[], String
	 * @throws ControladorException
	 */
	public void validarSistemaParametroLojaVirtual(byte[] fileData, String extensao) throws ControladorException{
		if (fileData.length == 0){
			throw new ControladorException("atencao.campo.informado", null, "Arquivo");
		}		
		
		if (!extensao.equalsIgnoreCase("PDF")){
			throw new ControladorException("atencao.arquivo_invalido");
		}		
		
	}

	
	/**
	 * [MA2011061013]
	 * 
	 * @author Paulo Diniz
	 * @date 02/07/2011
	 * 
	 * @param idImovel
	 * 
	 * @return HidrometroMovimentado
	 * @throws ErroRepositorioException
	 */
	public  List<HidrometroInstalacaoHistorico> pesquisarHidrometroPeloIdImovel(Integer idImovel) throws ControladorException{

		try {
			return repositorioCadastro.pesquisarHidrometroPeloIdImovel(idImovel);
		} catch (ErroRepositorioException ex) {
			throw new ControladorException("erro.sistema", ex);
		}
	}

	/**
	 * [UC0588 / UC0589] Verifica existência do DDD
	 * 
	 * @author Nathalia Santos
	 * @data 23/09/2011
	 */
	public Boolean verificarDdd(Short Ddd) throws ControladorException{

		try {
			return repositorioCadastro.verificarDdd(Ddd);
		} catch (ErroRepositorioException ex) {
			throw new ControladorException("erro.sistema", ex);
		}
	}
	
	/**
	 * [UC0588 / UC0589] Verifica existência do funcionáriio ou do cliente
	 * 
	 * @author Nathalia Santos
	 * @data 03/10/2011
	 */
	public Boolean pesquisarFuncionarioOuCliente(Integer IdFuncionario, Integer IdCliente) throws ControladorException{

		try {
			return repositorioCadastro.pesquisarFuncionarioOuCliente(IdFuncionario, IdCliente);
		} catch (ErroRepositorioException ex) {
			throw new ControladorException("erro.sistema", ex);
		}
	}
	/**
	 * [UC0032] Inserir Logradouro - [UC0033] Manter Logradouro
	 * 
	 * Proposta: 05/10/2011 - Tiago Moreno - PE2011065447 - Verificar existência de Logradouro com mesmo nome
	 *
	 * [FS0012] - Verificar existência de Logradouro com mesmo nome
	 * 
	 * @author Thúlio Araújo
	 * @since 10/10/2011
	 * @param logradouroNome
	 * @return Collection<Logradouro>
	 * @throws ControladorException
	 */
	public Collection<Logradouro> pesquisarLogradouroMesmoNome(String logradouroNome, Integer idMunicipio) 
			throws ControladorException{
		try {
			return repositorioCadastro.pesquisarLogradouroMesmoNome(logradouroNome, idMunicipio);
		} catch (ErroRepositorioException ex) {
			throw new ControladorException("erro.sistema", ex);
		}
	}
	
	/**
	 * [UC0032] Inserir Logradouro - [UC0033] Manter Logradouro
	 * 
	 * Proposta: 05/10/2011 - Tiago Moreno - PE2011065447 - Verificar existência de Logradouro com mesmo nome
	 *
	 * [FS0012] - Verificar existência de Logradouro com mesmo nome
	 * 
	 * @author Thúlio Araújo
	 * @since 10/10/2011
	 * @param logradouroNome
	 * @return Collection<Logradouro>
	 * @throws ErroRepositorioException
	 */
	public Collection<ExibirFiltrarLogradouroHelper> filtrarLogradouroMesmoNome(String logradouroNome, Integer numeroPagina,
			Integer idMunicipio) 
			throws ControladorException{
		
		Collection<ExibirFiltrarLogradouroHelper> colExibirFiltrarLogradouroHelper = new ArrayList();
		
		try {
			Collection<Logradouro> colecaoDados = repositorioCadastro.filtrarLogradouroMesmoNome(logradouroNome, numeroPagina, idMunicipio);
			if (colecaoDados != null && !colecaoDados.isEmpty()){	
				Iterator itDados = colecaoDados.iterator();
				Object[] dados = null;
				while (itDados.hasNext()){
					ExibirFiltrarLogradouroHelper exibirFiltrarLogradouroHelper = new ExibirFiltrarLogradouroHelper();
					dados = (Object[]) itDados.next();
					if (dados != null){
						exibirFiltrarLogradouroHelper.setId(Integer.toString((Integer) dados[0]));
						exibirFiltrarLogradouroHelper.setNome((String) dados[1]);
						exibirFiltrarLogradouroHelper.setBairro((String) dados[2]);
						exibirFiltrarLogradouroHelper.setMunicipio((String) dados[3]);
						if (dados[4] != null){
							exibirFiltrarLogradouroHelper.setCep(Integer.toString((Integer) dados[4]));
						}
					}
					colExibirFiltrarLogradouroHelper.add(exibirFiltrarLogradouroHelper);
				}
			}			
		} catch (ErroRepositorioException ex) {
			throw new ControladorException("erro.sistema", ex);
		}
		return colExibirFiltrarLogradouroHelper;
	}
	
	/**
	 * [UC0032] Inserir Logradouro - [UC0033] Manter Logradouro
	 * 
	 * Proposta: 05/10/2011 - Tiago Moreno - PE2011065447 - Verificar existência de Logradouro com mesmo nome
	 *
	 * [FS0012] - Verificar existência de Logradouro com mesmo nome
	 * 
	 * Método usado para retornar a quantidade de logradouros com o mesmo nome
	 * 
	 * @author Thúlio Araújo
	 * @since 10/10/2011
	 * @param logradouroNome
	 * @return Collection<Logradouro>
	 * @throws ErroRepositorioException
	 */
	public Integer pesquisarQuantidadeLogradouroMesmoNome(String logradouroNome, Integer idMunicipio) 
			throws ControladorException{
		try {
			return repositorioCadastro.pesquisarQuantidadeLogradouroMesmoNome(logradouroNome, idMunicipio);
		} catch (ErroRepositorioException ex) {
			throw new ControladorException("erro.sistema", ex);
		}
	}
	/**
	 * Método que pesquisa uma 
	 * EmpresaCobrancaFaixa pelo id
	 * 
	 * @author Raimundo Martins
	 * @date 24/10/2011
	 * */
	public EmpresaCobrancaFaixa pesquisarEmpresaCobrancaFaixa(Integer idCobrancaFaixa) throws ControladorException{
		try{
			return repositorioCadastro.pesquisarEmpresaCobrancaFaixa(idCobrancaFaixa);
		} catch (ErroRepositorioException ex) {
			throw new ControladorException("erro.sistema", ex);
		}
	}
	
	/**
	 * Pesquisa se o Imovel teve a inscricao alterada para excluido. 
	 * @author Arthur Carvalho
	 * @date 31/10/11
	 * @param idImovel
	 * @return
	 */
	public boolean verificaImovelExcluidoFinalFaturamento(Integer idImovel) throws ControladorException {
		
		boolean retorno = false;
		
		FiltroImovelInscricaoAlterada filtroAlterada = new FiltroImovelInscricaoAlterada();
		filtroAlterada.adicionarParametro( new ParametroSimples( FiltroImovelInscricaoAlterada.INDICADOR_ATUALIZADO , ConstantesSistema.NAO));
		filtroAlterada.adicionarParametro( new ParametroSimples( FiltroImovelInscricaoAlterada.INDICADOR_ALTERACAO_EXCLUIDA , ConstantesSistema.NAO));
		filtroAlterada.adicionarParametro( new ParametroNulo( FiltroImovelInscricaoAlterada.INDICADOR_ERRO_ALTERACAO ));
		filtroAlterada.adicionarParametro( new ParametroSimples( FiltroImovelInscricaoAlterada.INDICADOR_AUTORIZADO, ConstantesSistema.SIM));
		filtroAlterada.adicionarParametro( new ParametroSimples( FiltroImovelInscricaoAlterada.INDICADOR_IMOVEL_EXCLUIDO , ConstantesSistema.SIM));
		filtroAlterada.adicionarParametro( new ParametroSimples( FiltroImovelInscricaoAlterada.IMOVEL_ID , idImovel));
		
		Collection<ImovelInscricaoAlterada> colecaoImovelInscricaoAlterada = getControladorUtil().pesquisar(filtroAlterada, ImovelInscricaoAlterada.class.getName());
	
		if ( colecaoImovelInscricaoAlterada != null && colecaoImovelInscricaoAlterada.size() > 0 ) {
			retorno = true;
		}
		
		return retorno; 
	}
	
	/**
	 * Atualizar nome do usuario com id de funcionario igual ao informado 
	 * 
	 * @author Erivan Sousa
	 * @date 06/12/2011
	 * 
	 * @param idFuncionario
	 * @param nomeFuncionario
	 * 
	 * @throws ControladorException
	 */

	public void atualizarNomeUsuarioComIdFuncionario(Integer idFuncionario,	String nomeFuncionario)throws ControladorException{
		try{
			repositorioCadastro.atualizarNomeUsuarioComIdFuncionario(idFuncionario, nomeFuncionario);
		} catch (ErroRepositorioException ex) {
			throw new ControladorException("erro.sistema", ex);
		}
	}
	
	
	/**
	 * [UC1288] Atualizar Dados Cadastrais do Imóvel pelo Recadastramento
	 *  
	 * @author: Arthur Carvalho
	 * @date: 01/03/2012 
	 * @param idLocalidade
	 * @param idFuncionalidadeIniciada
	 * @throws ControladorException
	 */
	public void atualizarDadosDosImoveisPeloRecadastramento(Integer idLocalidade, Integer idFuncionalidadeIniciada) throws ControladorException {
		
		int idUnidadeIniciada = 0;

		idUnidadeIniciada = getControladorBatch().iniciarUnidadeProcessamentoBatch(idFuncionalidadeIniciada, UnidadeProcessamento.LOCALIDADE, idLocalidade);
		
		Collection<ImovelAtualizacaoCadastral> colecaoPesquisa = null;
		
		try{

			// Variáveis para a paginação da pesquisa de Imovel por Grupo Faturamento
			// ========================================================================
			boolean flagTerminou = false;
			final int quantidadeRegistros = 1000;
			// ========================================================================
	
			while (!flagTerminou) {
				
				//seleciona os registros dos imóveis para atualização 
				colecaoPesquisa = repositorioCadastro.pesquisarImovelAtualizacaoCadastral(ImovelAtualizacaoCadastral.INDICADOR_ATUALIZADO_PENDENTE, 
						ImovelAtualizacaoCadastral.INDICADOR_DADOS_RETORNO, idLocalidade, quantidadeRegistros);

				//[FS0001 - Verificar existência de registros para atualização].
				if (colecaoPesquisa != null && !colecaoPesquisa.isEmpty()) {
	
					Iterator itera = colecaoPesquisa.iterator();
					
					while (itera.hasNext()) {
						
						ImovelAtualizacaoCadastral imovelAtualizacaoCadastral = (ImovelAtualizacaoCadastral) itera.next();
						
						System.out.println("Atualizacao Cadastral - IMAC_ID =" + imovelAtualizacaoCadastral.getId() + " IMOV_ID=" + imovelAtualizacaoCadastral.getImovel() );
						
						Imovel imovel = null;
						//Caso nao seja imovel novo, pesquisa o imovel cadastrado no GSAN
						if ( imovelAtualizacaoCadastral.getIndicadorImovelNovo().equals(ConstantesSistema.NAO) ) {
							imovel = repositorioImovel.pesquisarImovel(imovelAtualizacaoCadastral.getImovel());
						}
						
						//Pesquisa o Comando de atualizacao cadastral.
						Integer idParametroTabelaAtualizacaoCadastro = null;
						ParametroTabelaAtualizacaoCadastro parametroTabelaAtualizacaoCadastro = new ParametroTabelaAtualizacaoCadastro();
						if ( imovelAtualizacaoCadastral.getParametroTabelaAtualizacaoCadastro() != null && 
								imovelAtualizacaoCadastral.getParametroTabelaAtualizacaoCadastro().getId() != null ) {
							
							idParametroTabelaAtualizacaoCadastro = imovelAtualizacaoCadastral.getParametroTabelaAtualizacaoCadastro().getId();
							parametroTabelaAtualizacaoCadastro = repositorioCadastro.pesquisarParametroTabelaAtualizacaoCadastro(idParametroTabelaAtualizacaoCadastro);
						}
						
						Integer idImovel = null;
						LigacaoEsgotoSituacao ligacaoEsgotoSituacao = new LigacaoEsgotoSituacao();
						LigacaoAguaSituacao ligacaoAguaSituacao = new LigacaoAguaSituacao();
						if ( imovel != null ) {
						
							ligacaoEsgotoSituacao.setId(imovel.getLigacaoEsgotoSituacao().getId());
							ligacaoAguaSituacao.setId(imovel.getLigacaoAguaSituacao().getId());
							idImovel = imovel.getId();
						
						} else {
						
							ligacaoAguaSituacao.setId(imovelAtualizacaoCadastral.getIdLigacaoAguaSituacao());
							ligacaoEsgotoSituacao.setId(imovelAtualizacaoCadastral.getIdLigacaoEsgotoSituacao());	
							
							if ( imovelAtualizacaoCadastral.getImovel() != null ) {
								idImovel = imovelAtualizacaoCadastral.getImovel();
							}
						}
						
						//Classe responsavel por enviar todos os parametros para atualizacao cadastral
						DadosCadastraisTransacaoBatchHelper dadosCadastraisTransacaoBatchHelper = new DadosCadastraisTransacaoBatchHelper();
						dadosCadastraisTransacaoBatchHelper.setIdOperacao(Operacao.OPERACAO_ATUALIZAR_IMOVEL_ATUALIZACAO_CADASTRAL_BATCH);
						
				 		//Para cada tipo de alteracao (inclusao, remocao, atualizacao) os atributos são agrupados pelo tipo
				 		Collection<TipoAlteracaoTransacaoBatchHelper> colecaoTipoAlteracaoTransacao = new ArrayList<TipoAlteracaoTransacaoBatchHelper>();
				 		TipoAlteracaoTransacaoBatchHelper tipoAlteracaoTransacaoBatchHelper = new TipoAlteracaoTransacaoBatchHelper();
				 		tipoAlteracaoTransacaoBatchHelper.setIdTabela(Tabela.IMOVEL);
				 		
				 		
				 		
						//Registrar Transação no Processo Batch - adiciona na colecao os atributos que vao ser exibidos no log da transação
						Collection<ParametrosTransacaoBatchHelper> colecaoTransacaoHelper = new ArrayList<ParametrosTransacaoBatchHelper>();

						
						
						//[FS0002 - Verificar situação do imóvel].
						if ( this.verificarSituacaoImovel(imovel, idParametroTabelaAtualizacaoCadastro, null, imovelAtualizacaoCadastral) ) {
							
							Collection<ClienteAtualizacaoCadastral> colecaoClienteAtlzCad = 
									repositorioCadastro.pesquisarClienteAtualizacaoCadastral(
											imovelAtualizacaoCadastral.getId(), null, false);

							SistemaParametro sistemaParametro = repositorioUtil.pesquisarParametrosDoSistema();
							
						 	//Novo Imóvel
						 	if ( imovelAtualizacaoCadastral.getIndicadorImovelNovo().equals(ConstantesSistema.SIM) ) {
						 		
						 		//inserir imovel
						 		imovel = this.inserirImovel(imovelAtualizacaoCadastral, imovel, colecaoTransacaoHelper);
						 		//registrar transacao batch
						 		tipoAlteracaoTransacaoBatchHelper.setTipoAlteracao(AlteracaoTipo.INCLUSAO);
						 		dadosCadastraisTransacaoBatchHelper.setIdArgumentoValor(imovel.getId());
						 		
						 		//Cliente
								if ( colecaoClienteAtlzCad != null && !colecaoClienteAtlzCad.isEmpty() ) {

									//[SB0008] - Registrar Fim de Relação do Cliente com o Imóvel
									ClienteImovel clienteImovel = (ClienteImovel) Util.retonarObjetoDeColecao(this.
											getControladorCliente().obterClienteImovelporRelacaoTipo(
													imovel.getId(), ClienteRelacaoTipo.USUARIO.intValue()));
									
									ClienteAtualizacaoCadastral clienteAtualizacaoCadastral = (ClienteAtualizacaoCadastral) Util.retonarObjetoDeColecao(colecaoClienteAtlzCad);
									
									this.atualizarClienteAtualizacaoCadastral(imovelAtualizacaoCadastral, clienteAtualizacaoCadastral, clienteImovel, 
							 				idParametroTabelaAtualizacaoCadastro, false, imovel);
									
								} else {
									
									//1.2.1. Caso o cliente usuário não seja informado o sistema deve associar o cliente usuário desconhecido 
									//(CLIE_IDUSUARIODESCONHECIDO da tabela SISTEMA_PARAMETRO para o cliente usuário desse imóvel).
									Cliente clienteUsuario = sistemaParametro.getClienteUsuarioDesconhecido();
									Cliente cliente = getControladorCliente().pesquisarClienteDigitado(clienteUsuario.getId());
									
									ClienteImovel clienteImovel = new ClienteImovel();
									clienteImovel.setCliente(cliente);
									clienteImovel.setImovel(imovel);
									clienteImovel.setDataInicioRelacao(new Date());
									clienteImovel.setUltimaAlteracao(new Date());
									ClienteRelacaoTipo clienteRelacaoTipo = new ClienteRelacaoTipo();
									clienteRelacaoTipo.setId(Integer.valueOf(ClienteRelacaoTipo.USUARIO));
									clienteImovel.setClienteRelacaoTipo(clienteRelacaoTipo);
									clienteImovel.setIndicadorNomeConta(ConstantesSistema.SIM);
									
									getControladorUtil().inserir(clienteImovel);
									
								}
								
								Integer quantidadeEconomia = 0;
								
									//CATEGORIA/SUBCATEGORIA
								//Pesquisa as categorias/subcategorias
								Collection<ImovelSubcategoriaAtualizacaoCadastral> colecaoImovelSubcategoriaAtualizacaoCadastral = repositorioCadastro.pesquisarSubCategoriaAtualizacaoCadastral(
										imovelAtualizacaoCadastral.getId());
								
								if ( colecaoImovelSubcategoriaAtualizacaoCadastral != null && !colecaoImovelSubcategoriaAtualizacaoCadastral.isEmpty() ) {
									
									Iterator<ImovelSubcategoriaAtualizacaoCadastral> iterator = colecaoImovelSubcategoriaAtualizacaoCadastral.iterator();
									while ( iterator.hasNext() ) {
										
										ImovelSubcategoriaAtualizacaoCadastral subcategoriaAtlzCadastral = (ImovelSubcategoriaAtualizacaoCadastral)  iterator.next();
										//Monta o id do imovel subcagetoria ( chave composta )
										ImovelSubcategoriaPK imovelSubcategoriaPK = new ImovelSubcategoriaPK();
										imovelSubcategoriaPK.setImovel(imovel);
										
										Subcategoria subcategoria = new Subcategoria();
										subcategoria.setId(subcategoriaAtlzCadastral.getIdSubcategoria());
										imovelSubcategoriaPK.setSubcategoria(subcategoria);
										
										ImovelSubcategoria imovelSubcategoria = new ImovelSubcategoria();
										imovelSubcategoria.setComp_id(imovelSubcategoriaPK);
										imovelSubcategoria.setQuantidadeEconomias(subcategoriaAtlzCadastral.getQuantidadeEconomias());
										imovelSubcategoria.setUltimaAlteracao(new Date());
										
										getControladorUtil().inserir(imovelSubcategoria);
									}
									
									// Obtém a categoria principal do imovel
									Categoria categoriaPrincipal = this.getControladorImovel().obterPrincipalCategoriaImovel(imovel.getId());		
									// Obtém a principal subcategoria do imóvel		
									ImovelSubcategoria subcategoriaPrincipal = getControladorImovel().obterPrincipalSubcategoria(categoriaPrincipal.getId(), imovel.getId());
									
									quantidadeEconomia = getControladorImovel().obterQuantidadeEconomias(imovel);
									
									repositorioImovel.atualizarImovelCategoriaSubcategoriaPrincipal(imovel.getId(), categoriaPrincipal.getId(),
											subcategoriaPrincipal.getComp_id().getSubcategoria().getId(), quantidadeEconomia);
									
									imovel.setCategoriaPrincipalId(categoriaPrincipal.getId());
									imovel.setSubCategoriaPrincipalId(subcategoriaPrincipal.getComp_id().getSubcategoria().getId());

									//registrar transacao da categoria principal do imovel
									ParametrosTransacaoBatchHelper situacaoCategoriaPrincipalTransacao = new ParametrosTransacaoBatchHelper(
											null, categoriaPrincipal.getDescricao(), TabelaColuna.CATEGORIA_TABELA_IMOVEL);
									colecaoTransacaoHelper.add(situacaoCategoriaPrincipalTransacao);
									
									//registrar transacao da subcategoria principal do imovel
									String descricaoSubcategoria = repositorioImovel.obterDescricaoSubcategoria(subcategoriaPrincipal.getComp_id().getSubcategoria().getId());
									ParametrosTransacaoBatchHelper SubCategoriaPrincipalTransacao = new ParametrosTransacaoBatchHelper(
											null, descricaoSubcategoria, TabelaColuna.SUBCATEGORIA_TABELA_IMOVEL);
									colecaoTransacaoHelper.add(SubCategoriaPrincipalTransacao);
								
									ParametrosTransacaoBatchHelper quantidadeEconomiaTransacao = new ParametrosTransacaoBatchHelper(
											null, String.valueOf(quantidadeEconomia), TabelaColuna.QUANTIDADE_ECONOMIA_TABELA_IMOVEL);
									colecaoTransacaoHelper.add(quantidadeEconomiaTransacao);
								}
								
								imovel.setQuantidadeEconomias(quantidadeEconomia.shortValue());
								imovel.setUltimaAlteracao(new Date());
								
								//LIGACAO ESGOTO SITUACAO
								if ( imovelAtualizacaoCadastral.getIdLigacaoEsgotoSituacao() != null && 
										imovelAtualizacaoCadastral.getIdLigacaoEsgotoSituacao().equals(LigacaoEsgotoSituacao.LIGADO) || 
											imovelAtualizacaoCadastral.getIdLigacaoEsgotoSituacao().equals(LigacaoEsgotoSituacao.FACTIVEL_FATURAVEL) ) {
									//UC 1294 efetuar ligacao esgoto atualizacao cadastral
									efetuarLigacaoEsgotoAtualizacaoCadastral(imovel, imovelAtualizacaoCadastral, MedicaoTipo.POCO, idParametroTabelaAtualizacaoCadastro, colecaoTransacaoHelper);
								}
								
								//LIGACAO AGUA SITUACAO
								if ( imovelAtualizacaoCadastral.getIdLigacaoAguaSituacao() != null && 
										imovelAtualizacaoCadastral.getIdLigacaoAguaSituacao().equals(LigacaoAguaSituacao.LIGADO) ) {
									//1291
									this.efetuarLigacaoAguaAtualizacaoCadastral(imovel, idParametroTabelaAtualizacaoCadastro, imovelAtualizacaoCadastral,  colecaoTransacaoHelper);
								}
								
								Collection<HidrometroInstalacaoHistoricoAtualizacaoCadastral> colecaoHidrometroInstHistAtlzCad = repositorioCadastro.
										pesquisarHidrometroInstalacaoHistoricoAtualizacaoCadastral(imovelAtualizacaoCadastral.getId(), null);
								
								if ( colecaoHidrometroInstHistAtlzCad != null && !colecaoHidrometroInstHistAtlzCad.isEmpty() ) {
									
									Iterator<HidrometroInstalacaoHistoricoAtualizacaoCadastral> iteratorHidrometro = colecaoHidrometroInstHistAtlzCad.iterator();
									while ( iteratorHidrometro.hasNext() ) {
										
										HidrometroInstalacaoHistoricoAtualizacaoCadastral hidrometroAltzCadastral = iteratorHidrometro.next();
										
										//UC 1292
										efetuarInstalacaoHidrometroAtualizacaoCadastral(imovel,  imovelAtualizacaoCadastral, 
												hidrometroAltzCadastral.getMedicaoTipo().getId(), idParametroTabelaAtualizacaoCadastro, hidrometroAltzCadastral, false, Usuario.USUARIO_BATCH);
									}
								}
								
						 		
						 	} else {
						 		
						 		tipoAlteracaoTransacaoBatchHelper.setTipoAlteracao(AlteracaoTipo.ALTERACAO);
						 		dadosCadastraisTransacaoBatchHelper.setIdArgumentoValor(imovel.getId());
						 		
						 		//Atualiza imovel.
								//[SB0011 - Validar Cliente].
								boolean clienteValido = this.validarClienteAtualizacaoCadastral(imovelAtualizacaoCadastral,
										ligacaoAguaSituacao, ligacaoEsgotoSituacao, sistemaParametro, 
										idImovel, parametroTabelaAtualizacaoCadastro, colecaoClienteAtlzCad);
								
							 	// [SB0004] - Validar Exclusão do Imóvel 
							 	if ( imovelAtualizacaoCadastral.getIndicadorExclusao().equals(ConstantesSistema.SIM) ) {
							 		
							 		this.validarExclusaoImovel(imovel, imovelAtualizacaoCadastral, null, idParametroTabelaAtualizacaoCadastro);
							 		
							 	}//atualizar 
							 	else {
							 		String cpfCnpj = repositorioCadastro.obterCpfCnpjClienteUsuarioAtualizacaoCadastral(imovelAtualizacaoCadastral.getId());
							 		//2.1.4.1.	<<Inclui>> [UC1290 - Inserir ou Atualizar Imóvel Atualização Cadastral] 
							 		this.inserirAtualizarImovelAtualizacaoCadastral(imovelAtualizacaoCadastral, imovel, 
							 				idParametroTabelaAtualizacaoCadastro, sistemaParametro, cpfCnpj, clienteValido, colecaoTransacaoHelper);
							 		
							 	}
											 		
						 		//2.1.5.	Validar a situação do hidrômetro
								this.validarAtributoSituacaoHidrometro(imovel, null, idParametroTabelaAtualizacaoCadastro, imovelAtualizacaoCadastral);
						 	}
						 	
							//2.1.6
							Collection<RetornoAtualizacaoCadastral> colecaoRetornoAtualizacaoCadastral = repositorioCadastro.
											pesquisarRetornoAtualizacaoCadastral(imovelAtualizacaoCadastral.getId());
							
							if(colecaoRetornoAtualizacaoCadastral != null && !colecaoRetornoAtualizacaoCadastral.isEmpty()){
								Iterator iteratorRetorno = colecaoRetornoAtualizacaoCadastral.iterator();
								while( iteratorRetorno.hasNext() ) {
									
									RetornoAtualizacaoCadastral retornoAtualizacaoCadastral = (RetornoAtualizacaoCadastral) iteratorRetorno.next();
									
									if ( !retornoAtualizacaoCadastral.getCodigoSituacao().equals(RetornoAtualizacaoCadastral.SITUACAO_ATUALIZADO) ) {
										//2.1.6.1.1.	
										imovelAtualizacaoCadastral.setIndicadorAtualizado(ConstantesSistema.SIM);
										imovelAtualizacaoCadastral.setIndicadorPendente(ConstantesSistema.SIM);
										repositorioUtil.atualizar(imovelAtualizacaoCadastral);
										
									} else {
										//2.1.6.2.		
										imovelAtualizacaoCadastral.setIndicadorAtualizado(ConstantesSistema.SIM);
										repositorioUtil.atualizar(imovelAtualizacaoCadastral);
									}
								}
							}else{
								//2.1.6.2.		
								imovelAtualizacaoCadastral.setIndicadorAtualizado(ConstantesSistema.SIM);
								repositorioUtil.atualizar(imovelAtualizacaoCadastral);
							}
													
						} else {
							//2.2
							imovelAtualizacaoCadastral.setIndicadorAtualizado(ConstantesSistema.SIM);
							imovelAtualizacaoCadastral.setIndicadorPendente(ConstantesSistema.SIM);
							repositorioUtil.atualizar(imovelAtualizacaoCadastral);
						}

						// ------------ REGISTRAR TRANSAÇÃO----------------------------
						if ( colecaoTransacaoHelper != null && !colecaoTransacaoHelper.isEmpty() ) {
							
							UsuarioAcao usuarioAcao = UsuarioAcao.USUARIO_ACAO_EFETUOU_OPERACAO;
							Usuario  usuario = Usuario.USUARIO_BATCH;
				
							UsuarioAcaoUsuarioHelper usuarioAcaoUsuarioHelper = new UsuarioAcaoUsuarioHelper(usuario,usuarioAcao);
							
							OperacaoEfetuada operacaoEfetuada = new OperacaoEfetuada();
							Operacao operacao = new Operacao();
							operacao.setId(dadosCadastraisTransacaoBatchHelper.getIdOperacao());
							operacaoEfetuada.setOperacao(operacao);
				
							operacaoEfetuada.setDadosAdicionais("Matricula: "+ imovel.getId());
							operacaoEfetuada.setArgumentoValor(dadosCadastraisTransacaoBatchHelper.getIdArgumentoValor());
							tipoAlteracaoTransacaoBatchHelper.setColecaoParametrosTransacao(colecaoTransacaoHelper);
							colecaoTipoAlteracaoTransacao.add(tipoAlteracaoTransacaoBatchHelper);
							dadosCadastraisTransacaoBatchHelper.setColecaoTipoAlteracaoTransacao(colecaoTipoAlteracaoTransacao);
							getControladorTransacao().processaRegistroOperacaoDadosCadastrais(usuarioAcaoUsuarioHelper, dadosCadastraisTransacaoBatchHelper, operacaoEfetuada);
						}
						// ------------ REGISTRAR TRANSAÇÃO----------------------------
					}
				}
				/**
				 * Caso a coleção de imoveis retornados for menor que a
				 * quantidade de registros seta a flag indicando que a paginação
				 * terminou.
				 */
				if (colecaoPesquisa == null
						|| colecaoPesquisa.size() < quantidadeRegistros) {

					flagTerminou = true;
				}

				if (colecaoPesquisa != null) {
					colecaoPesquisa.clear();
					colecaoPesquisa = null;
				}
			}
			getControladorBatch().encerrarUnidadeProcessamentoBatch(null,
					idUnidadeIniciada, false);

		} catch (Exception e) {
			e.printStackTrace();
			
			getControladorBatch().encerrarUnidadeProcessamentoBatch(e, idUnidadeIniciada, true);
			throw new ControladorException("erro.sistema",e);
		}
	}
	
	/**
	 * @author Arthur Carvalho
	 * 
	 * @param imovelAtualizacaoCadastral
	 * @param imovel
	 */
	public Imovel inserirImovel(ImovelAtualizacaoCadastral imovelAtualizacaoCadastral, Imovel imovel, Collection<ParametrosTransacaoBatchHelper> colecaoHelper) {
		
		try {

			imovel = new Imovel();
			//Matricula do imovel
	 		imovel.setId(imovelAtualizacaoCadastral.getImovel());
	 		
	 		//Localidade
	 		Localidade localidade = new Localidade();
	 		localidade.setId(imovelAtualizacaoCadastral.getIdLocalidade());
	 		imovel.setLocalidade(localidade);
	 		//registrar transacao localidde do imovel
			ParametrosTransacaoBatchHelper localidadeTransacao = new ParametrosTransacaoBatchHelper(
					null, String.valueOf(localidade.getId()), TabelaColuna.LOCALIDADE_TABELA_IMOVEL);
			colecaoHelper.add(localidadeTransacao);
	 		
	 		//Setor Comercial
	 		FiltroSetorComercial filtroSetorComercial = new FiltroSetorComercial();
	 		filtroSetorComercial.adicionarParametro( new ParametroSimples(FiltroSetorComercial.ID_LOCALIDADE, 
	 				imovelAtualizacaoCadastral.getIdLocalidade()));
	 		filtroSetorComercial.adicionarParametro( new ParametroSimples(FiltroSetorComercial.CODIGO_SETOR_COMERCIAL, 
	 				imovelAtualizacaoCadastral.getCodigoSetorComercial()));
	 		Collection colecaoSetorComercial = getControladorUtil().pesquisar(filtroSetorComercial, SetorComercial.class.getName());
	 		SetorComercial setorComercial =  (SetorComercial) Util.retonarObjetoDeColecao(colecaoSetorComercial);
	 		imovel.setSetorComercial(setorComercial);
	 		//registrar transacao da SETOR do imovel
			ParametrosTransacaoBatchHelper setorTransacao = new ParametrosTransacaoBatchHelper(
					null, String.valueOf(setorComercial.getCodigo()), TabelaColuna.SETOR_COMERCIAL_TABELA_IMOVEL);
			colecaoHelper.add(setorTransacao);
	 		
	 		//Quadra
	 		FiltroQuadra filtroQuadra = new FiltroQuadra();
	 		filtroQuadra.adicionarParametro( new ParametroSimples(FiltroQuadra.ID_LOCALIDADE, imovelAtualizacaoCadastral.getIdLocalidade()));
	 		filtroQuadra.adicionarParametro( new ParametroSimples(FiltroQuadra.CODIGO_SETORCOMERCIAL, imovelAtualizacaoCadastral.getCodigoSetorComercial()));
	 		filtroQuadra.adicionarParametro( new ParametroSimples(FiltroQuadra.NUMERO_QUADRA, imovelAtualizacaoCadastral.getNumeroQuadra()));
	 		Collection colecaoQuadra = getControladorUtil().pesquisar(filtroQuadra, Quadra.class.getName());
	 		Quadra quadra = (Quadra) Util.retonarObjetoDeColecao(colecaoQuadra);
	 		imovel.setQuadra(quadra);
	 		//registrar transacao da quadra do imovel
			ParametrosTransacaoBatchHelper quadraTransacao = new ParametrosTransacaoBatchHelper(
					null, String.valueOf(quadra.getNumeroQuadra()), TabelaColuna.QUADRA_TABELA_IMOVEL);
			colecaoHelper.add(quadraTransacao);
	 		
	 		//Lote
	 		imovel.setLote(imovelAtualizacaoCadastral.getLote());
	 		//registrar transacao da lote do imovel
			ParametrosTransacaoBatchHelper loteTransacao = new ParametrosTransacaoBatchHelper(
					null, String.valueOf(imovel.getLote()), TabelaColuna.LOTE_TABELA_IMOVEL);
			colecaoHelper.add(loteTransacao);
	 		
	 		//Sublote
	 		imovel.setSubLote(imovelAtualizacaoCadastral.getSubLote());
	 		//registrar transacao da sublote do imovel
			ParametrosTransacaoBatchHelper subloteTransacao = new ParametrosTransacaoBatchHelper(
					null, String.valueOf(imovel.getSubLote()), TabelaColuna.SUBLOTE_TABELA_IMOVEL);
			colecaoHelper.add(subloteTransacao);
	 		
	 		//Numero Imovel
	 		imovel.setNumeroImovel(imovelAtualizacaoCadastral.getNumeroImovel());
	 		//registrar transacao da sublote do imovel
			ParametrosTransacaoBatchHelper numeroTransacao = new ParametrosTransacaoBatchHelper(
					null, imovel.getNumeroImovel(), TabelaColuna.NUMERO_IMOVEL_TABELA_IMOVEL);
			colecaoHelper.add(numeroTransacao);
	 		
	 		//Complemento endereco
	 		imovel.setComplementoEndereco(imovelAtualizacaoCadastral.getComplementoEndereco());
	 		
	 		//area construida
	 		AreaConstruidaFaixa areaConstruidaFaixa = new AreaConstruidaFaixa();
	 		areaConstruidaFaixa.setId(imovelAtualizacaoCadastral.getIdAreaConstruidaFaixa());
	 		imovel.setAreaConstruidaFaixa(areaConstruidaFaixa);
	 		
	 		//indicador condominio
	 		imovel.setIndicadorImovelCondominio(ConstantesSistema.NAO);
	 		
	 		//Pavimento Calcada
	 		PavimentoCalcada pavimentoCalcada = new PavimentoCalcada();
	 		pavimentoCalcada.setId( imovelAtualizacaoCadastral.getIdPavimentoCalcada());
	 		imovel.setPavimentoCalcada(pavimentoCalcada);
	 		
	 		//PavimentoRua
	 		PavimentoRua pavimentoRua = new PavimentoRua();
	 		pavimentoRua.setId(imovelAtualizacaoCadastral.getIdPavimentoRua());
	 		imovel.setPavimentoRua(pavimentoRua);
	 		
	 		//Fonte abastecimento
	 		FonteAbastecimento fonteAbastecimento = new FonteAbastecimento();
	 		fonteAbastecimento.setId(imovelAtualizacaoCadastral.getIdFonteAbastecimento());
	 		imovel.setFonteAbastecimento(fonteAbastecimento);
	 		
	 		//Ligacao Agua Situacao
	 		LigacaoAguaSituacao aguaSituacao = new LigacaoAguaSituacao();
	 		
	 		if (!imovelAtualizacaoCadastral.getIdLigacaoAguaSituacao().equals(LigacaoAguaSituacao.LIGADO) ) {
	 			
	 			/*
	 			 * Caso a situação da ligação de água que veio de campo seja diferente de LIGADO, o GSAN deverá verificar se existe rede de abastecimento
	 			 * na quadra do imóvel, caso exista; a situação da ligação de água deverá ser igual a FACTÍVEL, caso contrário; POTENCIAL. 
	 			 */
	 			
	 			if (quadra.getIndicadorRedeAgua().equals(Quadra.COM_REDE)){
	 				
	 				aguaSituacao.setId(LigacaoAguaSituacao.FACTIVEL);
	 			}
	 			else{
	 				
	 				aguaSituacao.setId(LigacaoAguaSituacao.POTENCIAL);
	 			}
			}
	 		else{
	 			
	 			aguaSituacao.setId(imovelAtualizacaoCadastral.getIdLigacaoAguaSituacao());
	 		}
	 		
	 		imovel.setLigacaoAguaSituacao(aguaSituacao);
	 		
	 		//Ligacao Esgoto Situacao
	 		LigacaoEsgotoSituacao esgotoSituacao = new LigacaoEsgotoSituacao();
	 		esgotoSituacao.setId(imovelAtualizacaoCadastral.getIdLigacaoEsgotoSituacao());
	 		imovel.setLigacaoEsgotoSituacao(esgotoSituacao);
	 		
	 		//Imovel Perfil 
	 		ImovelPerfil imovelPerfil = new ImovelPerfil();
	 		imovelPerfil.setId(imovelAtualizacaoCadastral.getIdImovelPerfil());
	 		imovel.setImovelPerfil(imovelPerfil);
	 		
			if ( imovelAtualizacaoCadastral.getNumeroMedidirEnergia() != null ) {
				imovel.setNumeroMedidorEnergia(imovelAtualizacaoCadastral.getNumeroMedidirEnergia());
			}
	 		
	 		//numero morador
	 		imovel.setNumeroMorador(imovelAtualizacaoCadastral.getNumeroMorador());
	 		
	 		//Emissao Extrato Faturamento
	 		imovel.setIndicadorEmissaoExtratoFaturamento(ConstantesSistema.NAO);
	 		
	 		//Debito conta
	 		imovel.setIndicadorDebitoConta(ConstantesSistema.NAO);
	 		
	 		//Exclusao
	 		imovel.setIndicadorExclusao(ConstantesSistema.NAO);
	 		
	 		//Ultima alteracao
	 		imovel.setUltimaAlteracao(new Date());
	 		
	 		
	 		FiltroLogradouroBairro filtroLogradouroBairro = new FiltroLogradouroBairro();
	 		filtroLogradouroBairro.adicionarParametro( new ParametroSimples(FiltroLogradouroBairro.ID_BAIRRO, imovelAtualizacaoCadastral.getIdBairro()));
	 		filtroLogradouroBairro.adicionarParametro( new ParametroSimples(FiltroLogradouroBairro.LOGRADOURO, imovelAtualizacaoCadastral.getIdLogradouro()));
	 		
	 		Collection colecaoLogradouroBairro = getControladorUtil().pesquisar(filtroLogradouroBairro, LogradouroBairro.class.getName());
	 		
	 		if ( colecaoLogradouroBairro != null && !colecaoLogradouroBairro.isEmpty() ) {
	 			imovel.setLogradouroBairro( (LogradouroBairro) Util.retonarObjetoDeColecao(colecaoLogradouroBairro));
	 		}else{
	 			
	 			Bairro bairro = new Bairro();
	 			bairro.setId(imovelAtualizacaoCadastral.getIdBairro());
	 			
	 			Logradouro logradouro = new Logradouro();
	 			logradouro.setId(imovelAtualizacaoCadastral.getIdLogradouro().intValue());
	 			
	 			LogradouroBairro logradouroBairro = new LogradouroBairro();
	 			logradouroBairro.setBairro(bairro);
	 			logradouroBairro.setLogradouro(logradouro);
	 			logradouroBairro.setUltimaAlteracao(new Date());
	 			
	 			Integer idLogradouroBairro = (Integer) this.getControladorUtil().inserir(logradouroBairro);
	 			logradouroBairro.setId(idLogradouroBairro);
	 			
	 			imovel.setLogradouroBairro(logradouroBairro);
	 		}
	 		
	 		FiltroLogradouroCep filtroLogradouroCep = new FiltroLogradouroCep();
	 		filtroLogradouroCep.adicionarParametro( new ParametroSimples(FiltroLogradouroCep.CODIGO_CEP, imovelAtualizacaoCadastral.getCodigoCep()));
	 		filtroLogradouroCep.adicionarParametro( new ParametroSimples(FiltroLogradouroCep.LOGRADOURO, imovelAtualizacaoCadastral.getIdLogradouro()));
	 		
	 		Collection colecaoLogradouroCep = getControladorUtil().pesquisar(filtroLogradouroCep, LogradouroCep.class.getName());
	 		
	 		if ( colecaoLogradouroCep != null && !colecaoLogradouroCep.isEmpty() ) {
	 			imovel.setLogradouroCep( (LogradouroCep) Util.retonarObjetoDeColecao(colecaoLogradouroCep));
	 		}else{
	 			
		 		FiltroCep filtroCep = new FiltroCep();
		 		filtroCep.adicionarParametro( new ParametroSimples(FiltroCep.CODIGO, imovelAtualizacaoCadastral.getCodigoCep()));
		 		
		 		Collection colecaoCep = getControladorUtil().pesquisar(filtroCep, Cep.class.getName());
		 		
		 		Cep cep = new Cep();
		 		
		 		if ( colecaoCep != null && !colecaoCep.isEmpty() ) {
		 			cep = (Cep) Util.retonarObjetoDeColecao(colecaoCep);	
		 		}	 			
	 			
	 			Logradouro logradouro = new Logradouro();
	 			logradouro.setId(imovelAtualizacaoCadastral.getIdLogradouro().intValue());
	 			
	 			LogradouroCep logradouroCep = new LogradouroCep();
	 			logradouroCep.setCep(cep);
	 			logradouroCep.setLogradouro(logradouro);
	 			logradouroCep.setUltimaAlteracao(new Date());
	 			logradouroCep.setIndicadorUso(ConstantesSistema.SIM);
	 			
	 			Integer idLogradouroCep = (Integer) this.getControladorUtil().inserir(logradouroCep);
	 			logradouroCep.setId(idLogradouroCep);
	 			
	 			imovel.setLogradouroCep(logradouroCep);
	 		}
	 		
	 		
	 		//Consumo Tarifa
	 		ConsumoTarifa consumoTarifa = new ConsumoTarifa();
	 		consumoTarifa.setId(ConsumoTarifa.CONSUMO_NORMAL);
	 		imovel.setConsumoTarifa(consumoTarifa);
	 		
	 		//Endereco referencia
	 		EnderecoReferencia enderecoReferencia = new EnderecoReferencia();
	 		enderecoReferencia.setId(imovelAtualizacaoCadastral.getIdEnderecoReferencia());
	 		imovel.setEnderecoReferencia(enderecoReferencia);
	 		
	 		
	 		if ( imovelAtualizacaoCadastral.getDescricaoObservacao() != null && !imovelAtualizacaoCadastral.getDescricaoObservacao().equals("") ) {
	 			imovel.setInformacoesComplementares(imovelAtualizacaoCadastral.getDescricaoObservacao());
	 		}
	 		
	 		//Imovel conta envio
	 		ImovelContaEnvio imovelContaEnvio = new ImovelContaEnvio();
	 		imovelContaEnvio.setId(ImovelContaEnvio.ENVIAR_IMOVEL);
	 		imovel.setImovelContaEnvio(imovelContaEnvio);
	 		
	 		imovel.setIndicadorJardim(ConstantesSistema.NAO);
	 		imovel.setIndicadorVencimentoMesSeguinte(ConstantesSistema.NAO);
	 		imovel.setIndicadorNivelInstalacaoEsgoto(ConstantesSistema.NAO);
	 		imovel.setIndicadorRateioNegativo(ConstantesSistema.NAO);
	 		imovel.setIndicadorImovelAreaComum(ConstantesSistema.NAO);
	 		imovel.setIndicadorVinculoCliente(ConstantesSistema.NAO);
	 		
	 		//Situacao Atualizacao cadastral
	 		SituacaoAtualizacaoCadastral situacaoAtualizacaoCadastral = new SituacaoAtualizacaoCadastral();
	 		situacaoAtualizacaoCadastral.setId(SituacaoAtualizacaoCadastral.COLETADO);
	 		imovel.setSituacaoAtualizacaoCadastral(situacaoAtualizacaoCadastral);
	 		
	 		//Informar categoria e subcategoria default para os novos imóveis.
	 		imovel.setCategoriaPrincipalId(Categoria.RESIDENCIAL);
	 		imovel.setSubCategoriaPrincipalId(Subcategoria.RESIDENCIAL);
	 		
	 		imovel.setDataCadastramento( new Date() );
	 		
	 		getControladorImovel().inserirImovel(imovel);
	 		
		} catch (Exception e) {
			e.printStackTrace();
		}
		
		return imovel;
	}
	
	
	
	/**
	 * [UC1290 - Inserir ou Atualizar Imóvel Atualização Cadastral]
	 * 
	 * @author Arthur Carvalho
	 *  
	 * @param imovelAtualizacaoCadastral
	 * @param imovel
	 * @param idParametroTabelaAtualizacaoCadastro
	 * @param sistemaParametro
	 * @param cpfCnpj
	 * @param clienteValido
	 * @throws ControladorException
	 */
	public void inserirAtualizarImovelAtualizacaoCadastral(ImovelAtualizacaoCadastral imovelAtualizacaoCadastral, Imovel imovel, 
			Integer idParametroTabelaAtualizacaoCadastro, SistemaParametro sistemaParametro, String cpfCnpj , boolean clienteValido, 
			Collection<ParametrosTransacaoBatchHelper> colecaoHelper) throws ControladorException {
		
		//[SB0004 - Validar Perfil Imóvel].
		boolean validarPerfilImovel = this.validarPerfilImovelAtualizacaoCadastral(imovel, null, idParametroTabelaAtualizacaoCadastro, 
				imovelAtualizacaoCadastral, sistemaParametro);
		
		if ( validarPerfilImovel ) {
			ImovelPerfil imovelPerfil = new ImovelPerfil();
			imovelPerfil.setId(imovelAtualizacaoCadastral.getIdImovelPerfil());
			imovel.setImovelPerfil(imovelPerfil);
		}
		
		//[SB0005 - Validar Atualização de Inscrição]
		boolean validarAtualizacaoInscricao = this.validarInscricaoImovelAtualizacaoCadastral(imovel, null, idParametroTabelaAtualizacaoCadastro, 
				imovelAtualizacaoCadastral, sistemaParametro);
		
		//[SB0009 - Validar Atualização de Logradouro]
		this.validarAtualizacaoLogradouroAtualizacaoCadastral(imovel, null, 
				idParametroTabelaAtualizacaoCadastro, imovelAtualizacaoCadastral);
		
		//[SB0001 - Validar Atributo Categoria]
		boolean categoriaValida = false;
		boolean economiaValida = false;
		
		//[SB0003 - Validar Atributo Economias]
		if ( validarPerfilImovel ) {
			
			categoriaValida = this.validarAtributoCategoria(imovel, null, idParametroTabelaAtualizacaoCadastro, cpfCnpj, imovelAtualizacaoCadastral);
			
			economiaValida = this.validarAtributosEconomias(imovel, imovelAtualizacaoCadastral, null, idParametroTabelaAtualizacaoCadastro);
		}
		
		//metodo responsavel por atualizar a Categoria/subcategoria e quantidade de economias do imovel
		this.atualizarCategoriaEconomiaAtualizacaoCadastral(imovel, imovelAtualizacaoCadastral, idParametroTabelaAtualizacaoCadastro, categoriaValida, economiaValida, colecaoHelper);
		
		//[SB0010 - Validar Atributo Ligação de Esgoto]
		this.validarAtributoLigacaoEsgoto(imovel, null, idParametroTabelaAtualizacaoCadastro, cpfCnpj, imovelAtualizacaoCadastral, colecaoHelper);
		
		//[SB0002 - Validar Atributo Ligação de Água]
		this.validarAtributoLigacaoAgua(imovel, null, idParametroTabelaAtualizacaoCadastro, cpfCnpj, imovelAtualizacaoCadastral, colecaoHelper);
		
		//[SB0007] - Atualizar Imóvel
		this.atualizarImovelAtualizacaoCadastral(imovel, imovelAtualizacaoCadastral, idParametroTabelaAtualizacaoCadastro, clienteValido, validarPerfilImovel, colecaoHelper);
	}
		
	/**
	 * 
	 * @param imovel
	 * @param imovelAtualizacaoCadastral
	 * @param idParametroTabelaAtualizacaoCadastro
	 * @throws ControladorException
	 */
	private void atualizarCategoriaEconomiaAtualizacaoCadastral(Imovel imovel, ImovelAtualizacaoCadastral imovelAtualizacaoCadastral, Integer idParametroTabelaAtualizacaoCadastro,
			boolean categoriaValida, boolean economiaValida, Collection<ParametrosTransacaoBatchHelper> colecaoHelper) throws ControladorException{
		
		try {
			
			// O sistema verifica se nao existe criticas para Categoria/Subcategoria atualizada do imovel
			if ( categoriaValida && economiaValida ) {

				//o sistema pesquisa a categoria do imovel
				Collection colecaoCategoriaImovel = this.repositorioImovel.pesquisarCategoriaSubcategoriaImovel(imovel.getId());
				Object[] objetoImovel = (Object[]) Util.retonarObjetoDeColecao(colecaoCategoriaImovel);
				Integer idCategoriaImovel = (Integer) objetoImovel[0];
				Integer idSubcategoriaImovel = (Integer) objetoImovel[1];
				
				
				//pesquisa a categoria atualizacao cadastral - nova categoria.
				Collection<Integer> colecaoCategoriaAtualizacaoCadastral = this.repositorioCadastro.obterCategoriaAtualizacaoCadastral(imovelAtualizacaoCadastral.getId());
				Integer idCategoriaAtualizacaoCadastral= (Integer) Util.retonarObjetoDeColecao(colecaoCategoriaAtualizacaoCadastral);
				
				//pesquisa a subcategoria nova 
				ImovelSubcategoriaAtualizacaoCadastral 	imovelSubcategoriaAtualizacaoCadastral = repositorioCadastro.pesquisarImovelSubcategoriaAtualizacaoCadastral(imovelAtualizacaoCadastral.getId());
				Collection colecaoImovelSubcategoriaAtuCad = new ArrayList<ImovelSubcategoriaAtualizacaoCadastral>();
				colecaoImovelSubcategoriaAtuCad.add(imovelSubcategoriaAtualizacaoCadastral);
				
				Collection  colecaoImovelSubcategoria = getControladorImovel().pesquisarImovelSubcategoria(imovel);
				
				//Caso a categoria do imovel seja diferente da categoria do imovel atualizacao cadastral ou a subcategoria
				if ( !idCategoriaImovel.equals(idCategoriaAtualizacaoCadastral) || !idSubcategoriaImovel.equals(imovelSubcategoriaAtualizacaoCadastral.getIdSubcategoria()) ) {				

					//[SB0006] - Inserir Registro no retorno da Atualizacao Cadastral
					this.inserirRetornoAtualizacaoCadastral(imovel.getId(), null, AtributoAtualizacaoCadastral.CATEGORIA_SUBCATEGORIA, 
							RetornoAtualizacaoCadastral.SITUACAO_ATUALIZADO, MensagemAtualizacaoCadastral.ATUALIZACAO_COM_SUCESSO, 
							idParametroTabelaAtualizacaoCadastro, imovelAtualizacaoCadastral,null);
			
					//atualiza a entidade imovel subcategoria
					getControladorImovel().inserirAtualizarImovelSubcategoria(imovel.getId(), colecaoImovelSubcategoria, colecaoImovelSubcategoriaAtuCad);

					//registrar transacal da categoria principal do imovel
					if ( !imovel.getCategoriaPrincipalId().equals(idCategoriaAtualizacaoCadastral) ) {
						ParametrosTransacaoBatchHelper situacaoCategoriaPrincipalTransacao = new ParametrosTransacaoBatchHelper(
								String.valueOf(imovel.getCategoriaPrincipalId()), String.valueOf(idCategoriaAtualizacaoCadastral), TabelaColuna.CATEGORIA_TABELA_IMOVEL);
						colecaoHelper.add(situacaoCategoriaPrincipalTransacao);
					}
					//atualiza o imovel com a categoria principal.
					imovel.setCategoriaPrincipalId(idCategoriaAtualizacaoCadastral);
					
					//registrar transacal da subcategoria principal do imovel
					if ( !imovel.getSubCategoriaPrincipalId().equals(imovelSubcategoriaAtualizacaoCadastral.getIdSubcategoria()) ) {
						ParametrosTransacaoBatchHelper SubCategoriaPrincipalTransacao = new ParametrosTransacaoBatchHelper(
								String.valueOf(imovel.getSubCategoriaPrincipalId()), String.valueOf(imovelSubcategoriaAtualizacaoCadastral.getIdSubcategoria()), TabelaColuna.SUBCATEGORIA_TABELA_IMOVEL);
						colecaoHelper.add(SubCategoriaPrincipalTransacao);
					}
					
					imovel.setSubCategoriaPrincipalId(imovelSubcategoriaAtualizacaoCadastral.getIdSubcategoria());
					
					if ( !imovel.getQuantidadeEconomias().equals(imovelSubcategoriaAtualizacaoCadastral.getQuantidadeEconomias()) ) {
						ParametrosTransacaoBatchHelper quantidadeEconomiaTransacao = new ParametrosTransacaoBatchHelper(
								String.valueOf(imovel.getQuantidadeEconomias()), String.valueOf(imovelSubcategoriaAtualizacaoCadastral.getQuantidadeEconomias()), TabelaColuna.QUANTIDADE_ECONOMIA_TABELA_IMOVEL);
						colecaoHelper.add(quantidadeEconomiaTransacao);
					}
					imovel.setQuantidadeEconomias(imovelSubcategoriaAtualizacaoCadastral.getQuantidadeEconomias());

				} else {
					//Caso a economia seja valida, atualiza a quantidade de economia.
					//pequisa para atualizar a quantidade de economia. Atualiza a quantidade de economias de imovelSubcategoria.
					ImovelSubcategoria imovelSubcategoria = (ImovelSubcategoria) Util.retonarObjetoDeColecao(getControladorImovel().pesquisarImovelSubcategoria(imovel));
					
					Short qtdEconomiasImovelAtuCad = repositorioCadastro.obterQuantidadeEconomiaAtualizacaoCadastral(imovelAtualizacaoCadastral.getId());
					Short quantidadeEconomias = new Short(imovelSubcategoria.getQuantidadeEconomias());
						
					if ( !quantidadeEconomias.equals(qtdEconomiasImovelAtuCad)) {
						//[SB0006] - Inserir Registro no retorno da Atualizacao Cadastral
						this.inserirRetornoAtualizacaoCadastral(imovel.getId(), null, AtributoAtualizacaoCadastral.ECONOMIA, RetornoAtualizacaoCadastral.SITUACAO_ATUALIZADO,
								MensagemAtualizacaoCadastral.ATUALIZACAO_COM_SUCESSO, idParametroTabelaAtualizacaoCadastro, imovelAtualizacaoCadastral,null);

						if ( !imovel.getQuantidadeEconomias().equals(imovelSubcategoriaAtualizacaoCadastral.getQuantidadeEconomias()) ) {
							ParametrosTransacaoBatchHelper quantidadeEconomiaTransacao = new ParametrosTransacaoBatchHelper(
									String.valueOf(imovel.getQuantidadeEconomias()), String.valueOf(imovelSubcategoriaAtualizacaoCadastral.getQuantidadeEconomias()), TabelaColuna.QUANTIDADE_ECONOMIA_TABELA_IMOVEL);
							colecaoHelper.add(quantidadeEconomiaTransacao);
						}
						//atualiza a quantidade de economia do imovel
						imovel.setQuantidadeEconomias(imovelSubcategoriaAtualizacaoCadastral.getQuantidadeEconomias());
	
						
						imovelSubcategoria.setQuantidadeEconomias(imovel.getQuantidadeEconomias());
						getControladorUtil().atualizar(imovelSubcategoria);
					}
				}
	
			}
			
			
		} catch (ErroRepositorioException e) {
			e.printStackTrace();
			throw new ControladorException("erro.sistema",e);
		}
	}
	
	/**
	 * [SB0007] - Atualizar Imóvel
	 * 
	 * @param imovel
	 * @param imovelAtualizacaoCadastral
	 * @param idParametroTabelaAtualizacaoCadastro
	 * @param clienteValido
	 * @throws ControladorException
	 */
	public void atualizarImovelAtualizacaoCadastral(Imovel imovel, ImovelAtualizacaoCadastral imovelAtualizacaoCadastral, Integer idParametroTabelaAtualizacaoCadastro,
			boolean clienteValido, boolean validarPerfilImovel, Collection<ParametrosTransacaoBatchHelper> colecaoHelper) throws ControladorException{

		try{
			//Transacao - Numero do Imóvel
			if ( !imovel.getNumeroImovel().equals(imovelAtualizacaoCadastral.getNumeroImovel()) ) {
				ParametrosTransacaoBatchHelper numeroImovelTransacaoHelper = new ParametrosTransacaoBatchHelper(
						imovel.getNumeroImovel(), imovelAtualizacaoCadastral.getNumeroImovel(), TabelaColuna.NUMERO_IMOVEL_TABELA_IMOVEL);
				colecaoHelper.add(numeroImovelTransacaoHelper);
			}
			//numero do imovel
			imovel.setNumeroImovel(imovelAtualizacaoCadastral.getNumeroImovel());
			imovel.setNumeroMorador(imovelAtualizacaoCadastral.getNumeroMorador());
	 		if ( imovelAtualizacaoCadastral.getDescricaoObservacao() != null && !imovelAtualizacaoCadastral.getDescricaoObservacao().equals("") ) {
	 			imovel.setInformacoesComplementares(imovelAtualizacaoCadastral.getDescricaoObservacao());
	 		}	
			imovel.setComplementoEndereco(imovelAtualizacaoCadastral.getComplementoEndereco());
			
			if ( imovelAtualizacaoCadastral.getCodigoImovelPrincipal() != null  ) {
				Imovel imovelPrincipal = new Imovel();
				imovelPrincipal.setId(imovelAtualizacaoCadastral.getCodigoImovelPrincipal());
				imovel.setImovelPrincipal(imovelPrincipal);
			}
			
			if ( imovelAtualizacaoCadastral.getIdPavimentoCalcada() != null ) {
				
				PavimentoCalcada pavimentoCalcada = new PavimentoCalcada();
				pavimentoCalcada.setId(imovelAtualizacaoCadastral.getIdPavimentoCalcada());
				imovel.setPavimentoCalcada(pavimentoCalcada);	
			} else {
				//[SB0006] - Inserir Registro no retorno da Atualizacao Cadastral
				this.inserirRetornoAtualizacaoCadastral(imovel.getId(), null, AtributoAtualizacaoCadastral.PAVIMENTO_CALCADA, 
						RetornoAtualizacaoCadastral.SITUACAO_PENDENTE, MensagemAtualizacaoCadastral.INFORMACAO_OBRIGATORIA, 
						idParametroTabelaAtualizacaoCadastro, imovelAtualizacaoCadastral,null);	
			}
			
			if ( imovelAtualizacaoCadastral.getIdPavimentoRua() != null ) {
				
				PavimentoRua pavimentoRua = new PavimentoRua();
				pavimentoRua.setId(imovelAtualizacaoCadastral.getIdPavimentoRua());
				imovel.setPavimentoRua(pavimentoRua);	
			} else {
				//[SB0006] - Inserir Registro no retorno da Atualizacao Cadastral
				this.inserirRetornoAtualizacaoCadastral(imovel.getId(), null, AtributoAtualizacaoCadastral.PAVIMENTO_RUA, 
						RetornoAtualizacaoCadastral.SITUACAO_PENDENTE, MensagemAtualizacaoCadastral.INFORMACAO_OBRIGATORIA, 
						idParametroTabelaAtualizacaoCadastro, imovelAtualizacaoCadastral,null);	
			}
			
			if ( imovelAtualizacaoCadastral.getIdFonteAbastecimento() != null ) {
				FonteAbastecimento fonteAbastecimento = new FonteAbastecimento();
				fonteAbastecimento.setId(imovelAtualizacaoCadastral.getIdFonteAbastecimento());
				imovel.setFonteAbastecimento(fonteAbastecimento);
			}
			//Verifica se não é tarifa social
			if ( validarPerfilImovel ) {
				if ( imovelAtualizacaoCadastral.getNumeroContratoEnergia() != null ) {
					imovel.setNumeroCelpe(imovelAtualizacaoCadastral.getNumeroContratoEnergia());
				}
			}
			if ( imovelAtualizacaoCadastral.getNumeroMedidirEnergia() != null ) {
				imovel.setNumeroMedidorEnergia(imovelAtualizacaoCadastral.getNumeroMedidirEnergia());
			}
			
			imovel.setUltimaAlteracao(new Date());
			
			if ( validarPerfilImovel ) {
				if ( imovelAtualizacaoCadastral.getIdAreaConstruidaFaixa() != null ) {
					AreaConstruidaFaixa areaConstruidaFaixa = new AreaConstruidaFaixa();
					areaConstruidaFaixa.setId(imovelAtualizacaoCadastral.getIdAreaConstruidaFaixa());
					imovel.setAreaConstruidaFaixa(areaConstruidaFaixa);
				}
			}
			
			if ( clienteValido ) {

				Collection<ClienteAtualizacaoCadastral> colecaoClienteAtualizacaoCadastral = repositorioCadastro.
							pesquisarClienteAtualizacaoCadastral(imovelAtualizacaoCadastral.getId(), ClienteRelacaoTipo.USUARIO.intValue(), false);
					
					Iterator iteratorClienteAtualizacaoCadastral = colecaoClienteAtualizacaoCadastral.iterator();
					while ( iteratorClienteAtualizacaoCadastral.hasNext() ) {
						
						ClienteAtualizacaoCadastral clienteAtualizacaoCadastral = (ClienteAtualizacaoCadastral) iteratorClienteAtualizacaoCadastral.next();
						
						Collection colecaoClienteImovel = this.getControladorCliente().obterClienteImovelporRelacaoTipo(imovel.getId(), ClienteRelacaoTipo.USUARIO.intValue());
						if ( colecaoClienteImovel != null && !colecaoClienteImovel.isEmpty() ) {
							
							ClienteImovel clienteImovel = (ClienteImovel) Util.retonarObjetoDeColecao(colecaoClienteImovel);
							
							if ( clienteImovel.getCliente().getId().equals(clienteAtualizacaoCadastral.getIdCliente()) && 
									clienteAtualizacaoCadastral.getDataRelacaoFim() != null ) {
								
								clienteImovel.setDataFimRelacao(new Date());
								
								ClienteImovelFimRelacaoMotivo clienteImovelFimRelacaoMotivo = new ClienteImovelFimRelacaoMotivo();
								clienteImovelFimRelacaoMotivo.setId(ClienteImovelFimRelacaoMotivo.ATU_CADASTRAL);
								clienteImovel.setClienteImovelFimRelacaoMotivo(clienteImovelFimRelacaoMotivo);
								clienteImovel.setUltimaAlteracao(new Date());
								
								ClienteRelacaoTipo clienteRelacaoTipo = new ClienteRelacaoTipo();
								clienteRelacaoTipo.setId(clienteAtualizacaoCadastral.getIdClienteRelacaoTipo());
								clienteImovel.setClienteRelacaoTipo(clienteRelacaoTipo);
								repositorioUtil.atualizar(clienteImovel);
							}
						} else {
							
							ClienteImovel clienteImovel = new ClienteImovel();
							clienteImovel.setDataInicioRelacao(new Date());
							
							ClienteRelacaoTipo clienteRelacaoTipo = new ClienteRelacaoTipo();
							clienteRelacaoTipo.setId(clienteAtualizacaoCadastral.getIdClienteRelacaoTipo());
							clienteImovel.setClienteRelacaoTipo(clienteRelacaoTipo);
							
							Cliente cliente = new Cliente();
							cliente.setId(clienteAtualizacaoCadastral.getIdCliente());
							clienteImovel.setCliente(cliente);
							clienteImovel.setImovel(imovel);
							clienteImovel.setUltimaAlteracao(new Date());
							
							clienteImovel.setIndicadorNomeConta(ConstantesSistema.SIM);
							repositorioUtil.inserir(clienteImovel);
						}
					}
			}			
			
			SituacaoAtualizacaoCadastral situacaoAtualizacaoCadastral = new SituacaoAtualizacaoCadastral();
			situacaoAtualizacaoCadastral.setId(SituacaoAtualizacaoCadastral.COLETADO);
			imovel.setSituacaoAtualizacaoCadastral(situacaoAtualizacaoCadastral);
			
			imovel.setDataCadastramento( new Date() );
			
			repositorioUtil.atualizar(imovel);
			
		} catch (Exception e) {
			e.printStackTrace();
			throw new ControladorException("erro.sistema",e);
		}
	}
	
	
	/**
	 * [UC1288] Atualizar Dados Cadastrais do Imóvel pelo Recadastramento
	 * 
	 * //FS0002 - verificar situacao do imovel
	 * @author Arthur Carvalho 
	 * @param imovel
	 * @param idParametroTabelaAtualizacaoCadastro
	 * @param idCliente
	 * @return
	 * @throws ControladorException
	 */
	public boolean verificarSituacaoImovel(Imovel imovel, Integer idParametroTabelaAtualizacaoCadastro, Integer idCliente, 
			ImovelAtualizacaoCadastral imovelAtualizacaoCadastral) throws ControladorException {
		
		boolean retorno = true;
		
		if ( imovel != null && imovel.getIndicadorExclusao() != null 
				&& imovel.getIndicadorExclusao().equals(ConstantesSistema.SIM) ) {
			//[SB0006] - Inserir Registro no retorno da Atualizacao Cadastral
			this.inserirRetornoAtualizacaoCadastral(imovel.getId(), idCliente, AtributoAtualizacaoCadastral.IMOVEL, 
					RetornoAtualizacaoCadastral.SITUACAO_PENDENTE, MensagemAtualizacaoCadastral.IMOVEL_INATIVO, idParametroTabelaAtualizacaoCadastro, 
					imovelAtualizacaoCadastral,null);
			retorno = false;
		}
		return retorno;
	}
	
	/**
	 * [UC1288] Atualizar Dados Cadastrais do Imóvel pelo Recadastramento
	 * [SB0011 - Validar Cliente].
	 * 
	 * @author Arthur Carvalho
	 * 
	 * @param idImovelAtualizacaoCadastral
	 * @param ligacaoAguaSituacao
	 * @param ligacaoEsgotoSituacao
	 * @param validarCliente
	 * @param sistemaParametro
	 * @param imovel
	 * @param parametroTabelaAtualizacaoCadastro
	 * @param cpfCnpj
	 * @param colecaoClienteAtlzCad
	 * @return
	 * @throws ControladorException
	 */
	public boolean validarClienteAtualizacaoCadastral(ImovelAtualizacaoCadastral imovelAtualizacaoCadastral,
			LigacaoAguaSituacao ligacaoAguaSituacao, LigacaoEsgotoSituacao ligacaoEsgotoSituacao, 
			SistemaParametro sistemaParametro, Integer idImovel,
			ParametroTabelaAtualizacaoCadastro parametroTabelaAtualizacaoCadastro,
			Collection<ClienteAtualizacaoCadastral> colecaoClienteAtlzCad)  throws ControladorException{
		Integer idCliente = null;
		boolean validarCliente = true;
		Imovel imovel = new Imovel();
		imovel.setId(idImovel);
		try {
			//[SB0007 - Validar Obrigatoriedade do Cliente Usuário]
			validarCliente = this.validarObrigatoriedadeClienteUsuario(imovelAtualizacaoCadastral, idImovel, 
					parametroTabelaAtualizacaoCadastro,	ligacaoAguaSituacao, ligacaoEsgotoSituacao, sistemaParametro);
			
			boolean permiteRemover = false;
			
			if ( colecaoClienteAtlzCad != null && !colecaoClienteAtlzCad.isEmpty() ) {
				Iterator iteratorClienteAtlzCad = colecaoClienteAtlzCad.iterator();
				while ( iteratorClienteAtlzCad.hasNext() ) {
					
					ClienteAtualizacaoCadastral clienteAtualizacaoCadastral = (ClienteAtualizacaoCadastral) iteratorClienteAtlzCad.next();
					idCliente = clienteAtualizacaoCadastral.getId();
					//1
					if ( clienteAtualizacaoCadastral.getIdClienteRelacaoTipo().equals(new Integer(ClienteRelacaoTipo.USUARIO)) ) {
	
						//[SB0005] - Validar Mais de Um Cliente Usuário
						if ( validarCliente ) {
							
							Collection<ClienteAtualizacaoCadastral> colecaoClienteUsuarioAtlzCad = repositorioCadastro.
									pesquisarClienteAtualizacaoCadastral(imovelAtualizacaoCadastral.getId(), 
									ClienteRelacaoTipo.USUARIO.intValue(), true);
							
							if ( colecaoClienteUsuarioAtlzCad != null && !colecaoClienteUsuarioAtlzCad.isEmpty() && 
									colecaoClienteUsuarioAtlzCad.size() > 1 ) {
							
								this.inserirRetornoAtualizacaoCadastral(idImovel, 
										clienteAtualizacaoCadastral.getIdCliente(),
										AtributoAtualizacaoCadastral.IMOVEL, 
										RetornoAtualizacaoCadastral.SITUACAO_PENDENTE,
										MensagemAtualizacaoCadastral.IMOVEL_ASSOCIADO_A_MAIS_DE_UM_CLIENTE_USUARIO, 
										parametroTabelaAtualizacaoCadastro.getId(), imovelAtualizacaoCadastral,null);
								
								validarCliente = false;
							}
						}
						
									
						if ( validarCliente ) {
						
							//se não for imóvel novo!!
							if ( idImovel != null && idImovel.intValue() != 0) {
	
								//[SB0008] - Registrar Fim de Relação do Cliente com o Imóvel
								ClienteImovel clienteImovel = (ClienteImovel) Util.retonarObjetoDeColecao(this.
										getControladorCliente().obterClienteImovelporRelacaoTipo(
										idImovel, ClienteRelacaoTipo.USUARIO.intValue()));
								
								idCliente = clienteImovel.getCliente().getId();
	
								validarCliente = validarClienteAtualizarClienteAtualizacaoCadastral(clienteImovel, clienteAtualizacaoCadastral, 
										imovelAtualizacaoCadastral, parametroTabelaAtualizacaoCadastro, validarCliente, false, sistemaParametro);
								
								if(validarCliente){
									//remover
									if ( clienteAtualizacaoCadastral.getDataRelacaoFim() != null ) {
	
										ClienteImovelFimRelacaoMotivo clienteImovelFimRelacaoMotivo = new ClienteImovelFimRelacaoMotivo();
										clienteImovelFimRelacaoMotivo.setId(ClienteImovelFimRelacaoMotivo.ATU_CADASTRAL);
										
										clienteImovel.setDataFimRelacao(clienteAtualizacaoCadastral.getDataRelacaoFim());
										clienteImovel.setClienteImovelFimRelacaoMotivo(clienteImovelFimRelacaoMotivo);
										if ( permiteRemover ) {
											repositorioUtil.atualizar(clienteImovel);
										}
									}//atualizar 
									else if ( clienteAtualizacaoCadastral.getIdCliente() != null ) {
										String cpfCnpj = repositorioCadastro.obterCpfCnpjClienteUsuarioAtualizacaoCadastral(imovelAtualizacaoCadastral.getId());
										validarCliente = this.validarAtributoCpfCnpj(cpfCnpj, idImovel, clienteAtualizacaoCadastral.getIdCliente(), 
												parametroTabelaAtualizacaoCadastro, imovelAtualizacaoCadastral,clienteImovel);
										
										if ( validarCliente ) {
											permiteRemover = this.atualizarClienteAtualizacaoCadastral(imovelAtualizacaoCadastral, 
												clienteAtualizacaoCadastral, clienteImovel, parametroTabelaAtualizacaoCadastro.getId(), false, imovel);
										}
									}//inserir
									else {
										String cpfCnpj = repositorioCadastro.obterCpfCnpjClienteUsuarioAtualizacaoCadastral(imovelAtualizacaoCadastral.getId());
										validarCliente = this.validarAtributoCpfCnpj(cpfCnpj, idImovel, clienteAtualizacaoCadastral.getIdCliente(), 
												parametroTabelaAtualizacaoCadastro, imovelAtualizacaoCadastral,clienteImovel);
										
										if ( validarCliente ) {
											permiteRemover = this.atualizarClienteAtualizacaoCadastral(imovelAtualizacaoCadastral, clienteAtualizacaoCadastral, 
													clienteImovel, parametroTabelaAtualizacaoCadastro.getId(), false, imovel);
										}
									}
								}
							}
						}
						
					}//[SB0012] - Validar Cliente Proprietário 
					else if ( clienteAtualizacaoCadastral.getIdClienteRelacaoTipo().equals(
							new Integer(ClienteRelacaoTipo.PROPRIETARIO)) ) {
						
						ClienteImovel clienteImovel = (ClienteImovel) Util.retonarObjetoDeColecao(this.
								getControladorCliente().obterClienteImovelporRelacaoTipo(
								idImovel, ClienteRelacaoTipo.PROPRIETARIO.intValue()));
						//verificar se houve alteração no cliente
						Boolean clienteIgualClienteAtualizacaoCadastral = verificarClienteIgualClienteAtualizacaoCadastral(
								clienteImovel,clienteAtualizacaoCadastral);
						
						if(!clienteIgualClienteAtualizacaoCadastral){
							//[SB0006] - Inserir Registro no retorno da Atualizacao Cadastral
							this.inserirRetornoAtualizacaoCadastral(idImovel, clienteAtualizacaoCadastral.getIdCliente(), AtributoAtualizacaoCadastral.CLIENTE, 
									RetornoAtualizacaoCadastral.SITUACAO_PENDENTE, MensagemAtualizacaoCadastral.CLIENTE_PROPRIETARIO_NAO_PODE_SER_ALTERADO, 
									parametroTabelaAtualizacaoCadastro.getId(), imovelAtualizacaoCadastral,null);
	//						validarCliente = false;
						}
	
	
						
					}//[SB0009 -  Validar Cliente Responsável
					else if ( clienteAtualizacaoCadastral.getIdClienteRelacaoTipo().equals(
							new Integer(ClienteRelacaoTipo.RESPONSAVEL)) ) {
						
						ClienteImovel clienteImovel = (ClienteImovel) Util.retonarObjetoDeColecao(this.
								getControladorCliente().obterClienteImovelporRelacaoTipo(
								idImovel, ClienteRelacaoTipo.RESPONSAVEL.intValue()));
						//verificar se houve alteração no cliente
						Boolean clienteIgualClienteAtualizacaoCadastral = verificarClienteIgualClienteAtualizacaoCadastral(
								clienteImovel,clienteAtualizacaoCadastral);
						
						if(!clienteIgualClienteAtualizacaoCadastral){
							//[SB0006] - Inserir Registro no retorno da Atualizacao Cadastral
							this.inserirRetornoAtualizacaoCadastral(idImovel, clienteAtualizacaoCadastral.getIdCliente(), 
									AtributoAtualizacaoCadastral.CLIENTE, 
									RetornoAtualizacaoCadastral.SITUACAO_PENDENTE,
									MensagemAtualizacaoCadastral.CLIENTE_RESPONSAVEL_NAO_PODE_SER_ALTERADO, 
									parametroTabelaAtualizacaoCadastro.getId(), imovelAtualizacaoCadastral,null);
	//						validarCliente = false;
						}
					}
	
				}
			}
		} catch (Exception e) {
			String mensagem = e.getMessage();

			//caso o cliente possua uma negativacao
			if (mensagem.equals("atencao.cliente_imovel.processo_negativacao")) {
				//caso contrario o sistema gera uma inconsistencia para o imovel.
				this.inserirRetornoAtualizacaoCadastral(idImovel, idCliente, AtributoAtualizacaoCadastral.CLIENTE, 
						RetornoAtualizacaoCadastral.SITUACAO_PENDENTE, MensagemAtualizacaoCadastral.CLIENTE_NEGATIVADO, 
						imovelAtualizacaoCadastral.getParametroTabelaAtualizacaoCadastro().getId(), imovelAtualizacaoCadastral,null);
				
			} else {
				throw new ControladorException(e.getMessage(),e);
			}
		}
		return validarCliente;
	}	
	
	/**
	 * Metodo responsavel por validar os dados do cliente
	 * 
	 *  @author Arthur Carvalho
	 *  @since 19/09/2012
	 *  
	 * @param clienteImovel
	 * @param clienteAtualizacaoCadastral
	 * @param imovelAtualizacaoCadastral
	 * @param parametroTabelaAtualizacaoCadastro
	 * @param validarCliente
	 * @param funcionalidadeOnline
	 * @return
	 * @throws ControladorException
	 */
	public boolean validarClienteAtualizarClienteAtualizacaoCadastral(ClienteImovel clienteImovel, ClienteAtualizacaoCadastral clienteAtualizacaoCadastral, 
			ImovelAtualizacaoCadastral imovelAtualizacaoCadastral, ParametroTabelaAtualizacaoCadastro parametroTabelaAtualizacaoCadastro, boolean validarCliente, 
			boolean funcionalidadeOnline, SistemaParametro sistemaParametro) throws ControladorException{
		
		Boolean clienteIgualClienteAtualizacaoCadastral = null;
		
		// [FS0001 - Verificar Cliente Usuário da Tarifa Social]
		Collection colecaoClienteCadastradoTarifaSocial = this.getControladorTarifaSocialSEJB().
				verificarClienteUsuarioCadastradoTarifaSocial(clienteImovel.getCliente().getId());
		
		if (colecaoClienteCadastradoTarifaSocial != null && !colecaoClienteCadastradoTarifaSocial.isEmpty()) {
			
			if ( funcionalidadeOnline ) {
				throw new ControladorException("atencao.cliente_ts_nao_pode_atualizar");
			} else {
				//verificar se houve alteração no cliente
				clienteIgualClienteAtualizacaoCadastral = verificarClienteIgualClienteAtualizacaoCadastral(
						clienteImovel,clienteAtualizacaoCadastral);
				
				if(!clienteIgualClienteAtualizacaoCadastral){
				
					//[SB0006] - Inserir Registro no retorno da Atualizacao Cadastral
					this.inserirRetornoAtualizacaoCadastral(imovelAtualizacaoCadastral.getImovel(), 
							clienteAtualizacaoCadastral.getIdCliente(), AtributoAtualizacaoCadastral.CLIENTE, 
							RetornoAtualizacaoCadastral.SITUACAO_PENDENTE, 
							MensagemAtualizacaoCadastral.CLIENTE_TS_NAO_PODE_SER_ATUALIZADO, 
							parametroTabelaAtualizacaoCadastro.getId(), imovelAtualizacaoCadastral,null);
					validarCliente = false;
				}
			}
		}

		if(validarCliente){
			
			if(sistemaParametro.getClienteUsuarioDesconhecido() == null ||
				(sistemaParametro.getClienteUsuarioDesconhecido() != null &&
				sistemaParametro.getClienteUsuarioDesconhecido().getId().compareTo(clienteImovel.getCliente().getId()) != 0)){
		
				// [FS0002 - Verificar se cliente de imóvel público
				if( this.getControladorImovel().pesquisarExistenciaImovelPublico(clienteImovel.getCliente().getId())){
					
					if ( funcionalidadeOnline ) {
						throw new ControladorException("atencao.cliente_imovelpublico_nao_pode_atualizar");
					} else {
						//verificar se houve alteração no cliente
						if(clienteIgualClienteAtualizacaoCadastral == null){
							clienteIgualClienteAtualizacaoCadastral = verificarClienteIgualClienteAtualizacaoCadastral(
									clienteImovel,clienteAtualizacaoCadastral);
						}
						
						if(!clienteIgualClienteAtualizacaoCadastral){
						
							//[SB0006] - Inserir Registro no retorno da Atualizacao Cadastral
							this.inserirRetornoAtualizacaoCadastral(imovelAtualizacaoCadastral.getImovel(), clienteAtualizacaoCadastral.getIdCliente(), AtributoAtualizacaoCadastral.CLIENTE, 
									RetornoAtualizacaoCadastral.SITUACAO_PENDENTE, MensagemAtualizacaoCadastral.CLIENTE_IMOVEL_PUBLICO_NAO_PODE_SER_ATUALIZADO, 
									parametroTabelaAtualizacaoCadastro.getId(), imovelAtualizacaoCadastral,null);
							validarCliente = false;
						}
					}
				}
			}
		}
		
		if(validarCliente){
			//[FS0003 - Verificar se cliente inativo]
			if( clienteImovel.getCliente().getIndicadorUso() != null
					&& clienteImovel.getCliente().getIndicadorUso().equals(ConstantesSistema.NAO) ){
				
				if ( funcionalidadeOnline ) {
					throw new ControladorException("atencao.cliente_inativo_nao_pode_atualizar");
				} else {
					//verificar se houve alteração no cliente
					if(clienteIgualClienteAtualizacaoCadastral == null){
						clienteIgualClienteAtualizacaoCadastral = verificarClienteIgualClienteAtualizacaoCadastral(
								clienteImovel,clienteAtualizacaoCadastral);
					}
					
					if(!clienteIgualClienteAtualizacaoCadastral){
					
						//[SB0006] - Inserir Registro no retorno da Atualizacao Cadastral
						this.inserirRetornoAtualizacaoCadastral(imovelAtualizacaoCadastral.getImovel(), clienteAtualizacaoCadastral.getIdCliente(), AtributoAtualizacaoCadastral.CLIENTE, 
								RetornoAtualizacaoCadastral.SITUACAO_PENDENTE, MensagemAtualizacaoCadastral.CLIENTE_INATIVO_NAO_PODE_SER_ATUALIZADO, 
								parametroTabelaAtualizacaoCadastro.getId(), imovelAtualizacaoCadastral,null);
						validarCliente = false;
					}
				}
			}
		}
		return validarCliente;
	}
	/**
	 * [UC1288] Atualizar Dados Cadastrais do Imóvel pelo Recadastramento
	 * //[SB0007 - Validar Obrigatoriedade do Cliente Usuário]
	 * @author Arthur Carvalho
	 * 
	 * @param imovelAtualizacaoCadastral
	 * @param idImovel
	 * @param parametroTabelaAtualizacaoCadastro
	 * @param ligacaoAguaSituacao
	 * @param ligacaoEsgotoSituacao
	 * @param sistemaParametro
	 * @return
	 * @throws ControladorException
	 */
	public boolean validarObrigatoriedadeClienteUsuario(ImovelAtualizacaoCadastral imovelAtualizacaoCadastral, Integer idImovel, ParametroTabelaAtualizacaoCadastro 
			parametroTabelaAtualizacaoCadastro, LigacaoAguaSituacao ligacaoAguaSituacao , LigacaoEsgotoSituacao ligacaoEsgotoSituacao, SistemaParametro sistemaParametro) 
					throws ControladorException {
		
		boolean validarCliente = true;
		try {
			Collection<ClienteAtualizacaoCadastral> colecaoClienteAtualizacaoCadastralDataFimNulo = 
					repositorioCadastro.pesquisarClienteAtualizacaoCadastral(imovelAtualizacaoCadastral.getId(), ClienteRelacaoTipo.USUARIO.intValue(), true);
			
			//1.1.	Caso não exista cliente usuário para o imóvel
			if ( colecaoClienteAtualizacaoCadastralDataFimNulo == null || colecaoClienteAtualizacaoCadastralDataFimNulo.isEmpty() ) {
				
				//Caso inclusao do imovel
				if ( idImovel == null ) {
					if ( ( !ligacaoAguaSituacao.getId().equals(LigacaoAguaSituacao.FACTIVEL) && 
							!ligacaoAguaSituacao.getId().equals(LigacaoAguaSituacao.POTENCIAL) )|| 
							( !ligacaoEsgotoSituacao.getId().equals(LigacaoEsgotoSituacao.FACTIVEL) && 
							  !ligacaoEsgotoSituacao.getId().equals(LigacaoEsgotoSituacao.POTENCIAL)) 
							) {
						
						//[SB0006] - Inserir Registro no retorno da Atualizacao Cadastral
						this.inserirRetornoAtualizacaoCadastral(idImovel, null, AtributoAtualizacaoCadastral.IMOVEL, 
								RetornoAtualizacaoCadastral.SITUACAO_PENDENTE, MensagemAtualizacaoCadastral.CLIENTE_USUARIO_OBRIGATORIO, 
								parametroTabelaAtualizacaoCadastro.getId(), imovelAtualizacaoCadastral,null);
						
						validarCliente = false;
					} else if ( sistemaParametro.getClienteUsuarioDesconhecido() == null ) {
						
						//[SB0006] - Inserir Registro no retorno da Atualizacao Cadastral
						this.inserirRetornoAtualizacaoCadastral(idImovel, null, AtributoAtualizacaoCadastral.CLIENTE, 
								RetornoAtualizacaoCadastral.SITUACAO_PENDENTE, MensagemAtualizacaoCadastral.CLIENTE_USUARIO_OBRIGATORIO, 
								parametroTabelaAtualizacaoCadastro.getId(), imovelAtualizacaoCadastral,null);
						
						validarCliente = false;
					}
					
				}//caso atualizacao do imovel 
				else {
					//[SB0006] - Inserir Registro no retorno da Atualizacao Cadastral
					this.inserirRetornoAtualizacaoCadastral(idImovel, null, AtributoAtualizacaoCadastral.CLIENTE, 
							RetornoAtualizacaoCadastral.SITUACAO_PENDENTE, MensagemAtualizacaoCadastral.CLIENTE_USUARIO_OBRIGATORIO, 
							parametroTabelaAtualizacaoCadastro.getId(), imovelAtualizacaoCadastral,null);
					
					validarCliente = false;
				}
			}
		} catch (Exception e) {
			e.printStackTrace();
			throw new ControladorException("erro.sistema",e);
		}
		
		return validarCliente;
	}
	
	
	/**
	 * [UC1299] Atualizar Cliente para Atualização Cadastral
	 * 
	 * @author Arthur Carvalho
	 * 
	 * @param imovelAtualizacaoCadastral
	 * @param clienteAtualizacaoCadastral
	 * @param clienteImovel
	 * @throws ControladorException
	 */
	public boolean atualizarClienteAtualizacaoCadastral(ImovelAtualizacaoCadastral imovelAtualizacaoCadastral, ClienteAtualizacaoCadastral clienteAtualizacaoCadastral, 
			ClienteImovel clienteImovel, Integer idParametroTabelaAtualizacaoCadastro, boolean funcionalidadeOnline, Imovel imovel) throws ControladorException {
		

		//mota o helper com os parametros necessarios para atualizar o cliente.
		AtualizarClienteAPartirDispositivoMovelHelper helper = getControladorAtendimentoPublico().montarAtualizarClienteAPartirDispositivoMovelHelper(null, null, imovel.getId(), null, null,
				 clienteAtualizacaoCadastral, clienteImovel, Operacao.OPERACAO_ATUALIZAR_CLIENTE_ATUALIZACAO_CADASTRAL_BATCH);
		
		ParametroTabelaAtualizacaoCadastro parametroTabelaAtualizacaoCadastro = new ParametroTabelaAtualizacaoCadastro();
		parametroTabelaAtualizacaoCadastro.setId(idParametroTabelaAtualizacaoCadastro);
		
		imovelAtualizacaoCadastral.setParametroTabelaAtualizacaoCadastro(parametroTabelaAtualizacaoCadastro);
		helper.setImovelAtualizacaoCadastral(imovelAtualizacaoCadastral);
		
		//atualiza os dados do cliente.
		helper = getControladorAtendimentoPublico().atualizarClienteAPartirDoDispositivoMovel(helper);

		return helper.isClienteAtualizar();
	}
	
	
	/**
	 * 
	 * @author Arthur Carvalho
	 * @date 29/09/2011
	 * 
	 * @param Integer
	 * 
	 * @return 
	 * @throws ControladorException
	 */
	public void atualizarDadosFoneClienteAtual(Integer idClienteAtualizacaoCadastral, Integer idCliente, ImovelAtualizacaoCadastral imovelAtualizacaoCadastral) throws ControladorException {
		
		try{
			
			//pesquisa o cliente fone atualizacao cadastral
			Collection colecaoClienteFoneAtualizacaoCadastral = getControladorCliente().obterDadosClienteFoneAtualizacaoCadastral(idClienteAtualizacaoCadastral);
			
			//valida se o cliente foi informado pelo formulario.
			if ( imovelAtualizacaoCadastral.getCapaLoteAtualizacaoCadastral() != null && imovelAtualizacaoCadastral.getCapaLoteAtualizacaoCadastral().getId() != null ) {
				
				//Telefones informados pelo formulario digitacao.
				
				//recupera o telefone informado pela digitacao.
				if ( colecaoClienteFoneAtualizacaoCadastral != null && !colecaoClienteFoneAtualizacaoCadastral.isEmpty() ) {
					
					ClienteFoneAtualizacaoCadastral clienteFoneAtualizacaoCadastral = (ClienteFoneAtualizacaoCadastral) Util.retonarObjetoDeColecao(colecaoClienteFoneAtualizacaoCadastral);
					
					Collection<ClienteFone> colecaoClienteFone = this.getControladorCliente().pesquisarClienteFone(idCliente);
					
					if (colecaoClienteFone != null && 
						!colecaoClienteFone.isEmpty()) {
						
						Iterator iClienteFone = colecaoClienteFone.iterator();

						//percorre todos os telefones do cliente ate encontrar o fone padrao.
						while (iClienteFone.hasNext()) {
							ClienteFone clienteFone = (ClienteFone) iClienteFone.next();
							
							if (clienteFone.getIndicadorTelefonePadrao().equals(ClienteFone.INDICADOR_FONE_PADRAO)) {
								
								//Atualiza 
								if(clienteFoneAtualizacaoCadastral.getDdd() != null){
									clienteFone.setDdd(clienteFoneAtualizacaoCadastral.getDdd());
								}
								if(clienteFoneAtualizacaoCadastral.getRamal() != null){
									clienteFone.setRamal(clienteFoneAtualizacaoCadastral.getRamal());
								}
								if (clienteFoneAtualizacaoCadastral.getIdFoneTipo() != null) {
									FoneTipo foneTipo = new FoneTipo();
									foneTipo.setId(clienteFoneAtualizacaoCadastral.getIdFoneTipo());
									clienteFone.setFoneTipo(foneTipo);
								}
								if(clienteFoneAtualizacaoCadastral.getContato() != null){
									clienteFone.setContato(clienteFoneAtualizacaoCadastral.getContato());
								}
								if(clienteFoneAtualizacaoCadastral.getIndicadorFonePadrao() != null){
									clienteFone.setIndicadorTelefonePadrao(clienteFoneAtualizacaoCadastral.getIndicadorFonePadrao());
								}
								clienteFone.setUltimaAlteracao(new Date());
								this.getControladorUtil().atualizar(clienteFone);
								
								break;
							}
						}
					}
				}
			} else {
			
				//Telefones informados pelo tablet.
				
				//pesquisa o telefone do cliente.
				Collection colecaoClienteFone = repositorioCliente.pesquisarClienteFone(idCliente);
				
				//remove todos os telefones do cliente
				Iterator iterClienteFone = colecaoClienteFone.iterator();
				while (iterClienteFone.hasNext()) {
					
					ClienteFone clienteFone = (ClienteFone) iterClienteFone.next();
					
					this.getControladorUtil().remover(clienteFone);
				}
				boolean clientePossuiIndicadorFonePadrao = true;
				Iterator iterClienteFoneIndicadorPadrao = colecaoClienteFoneAtualizacaoCadastral.iterator();
				while ( iterClienteFoneIndicadorPadrao.hasNext() ) {
					
					ClienteFoneAtualizacaoCadastral clienteFoneAtualizacaoCadastral = (ClienteFoneAtualizacaoCadastral) iterClienteFoneIndicadorPadrao.next();
					
					if ( clienteFoneAtualizacaoCadastral.getIndicadorFonePadrao() != null && 
							clienteFoneAtualizacaoCadastral.getIndicadorFonePadrao().equals(ConstantesSistema.SIM) ){
						clientePossuiIndicadorFonePadrao = false;
					}
				}
				
				
				Iterator iterClienteFoneAtualizacaoCadastral = colecaoClienteFoneAtualizacaoCadastral.iterator();
				while (iterClienteFoneAtualizacaoCadastral.hasNext()) {
					
					ClienteFoneAtualizacaoCadastral clienteFoneAtualizacaoCadastral = (ClienteFoneAtualizacaoCadastral) iterClienteFoneAtualizacaoCadastral.next();
					
					//Nao existe telefone cadastrado na base do GSAN, novo telefone é gerado.
					ClienteFone clienteFone = new ClienteFone();
														
					Cliente cliente = new Cliente();
					cliente.setId(idCliente);
					
					if (clienteFoneAtualizacaoCadastral.getIdFoneTipo() != null) {
						FoneTipo foneTipo = new FoneTipo();
						foneTipo.setId(clienteFoneAtualizacaoCadastral.getIdFoneTipo());
						clienteFone.setFoneTipo(foneTipo);
					}else{
						FoneTipo foneTipo = new FoneTipo();
						foneTipo.setId(FoneTipo.RESIDENCIAL);
						clienteFone.setFoneTipo(foneTipo);
					}
					clienteFone.setCliente(cliente);
					if ( clientePossuiIndicadorFonePadrao ) {
						clienteFone.setIndicadorTelefonePadrao(ConstantesSistema.SIM);
						clientePossuiIndicadorFonePadrao = false;
					} else if(clienteFoneAtualizacaoCadastral.getIndicadorFonePadrao() != null){
						clienteFone.setIndicadorTelefonePadrao(clienteFoneAtualizacaoCadastral.getIndicadorFonePadrao());
					}else{
						clienteFone.setIndicadorTelefonePadrao(ConstantesSistema.NAO);
					}
					clienteFone.setDdd(clienteFoneAtualizacaoCadastral.getDdd());
					clienteFone.setRamal(clienteFoneAtualizacaoCadastral.getRamal());
					clienteFone.setTelefone(clienteFoneAtualizacaoCadastral.getTelefone());
					clienteFone.setUltimaAlteracao(new Date());
					
					this.getControladorUtil().inserir(clienteFone);
				}
			}
			
		} catch (ErroRepositorioException e) {
			e.printStackTrace();
			throw new ControladorException("erro.sistema", e);
		}
	}
	
	/**
	 * [UC1299] Atualizar Cliente para Atualização Cadastral
	 * 
	 * @author Arthur Carvalho
	 * @date 15/03/2012
	 * 
	 * @param Integer
	 * 
	 * @return 
	 * @throws ControladorException
	 */
	public void atualizarDadosRGClienteAtual(ClienteAtualizacaoCadastral clienteAtualizacaoCadastral, 
			Integer idCliente, Integer idUnidadeFederecao, Integer idOrgaoExpedidor)
		throws ControladorException {
		
		try {

			FiltroCliente filtro =  new FiltroCliente();
			filtro.adicionarParametro(new ParametroSimples(FiltroCliente.ID, idCliente));
			Collection<Cliente> colecaoCLiente = this.getControladorUtil()
					.pesquisar(filtro, Cliente.class.getName());
			Cliente cliente = (Cliente) Util.retonarObjetoDeColecao(colecaoCLiente);
			cliente.setRg(clienteAtualizacaoCadastral.getRg());
			OrgaoExpedidorRg orgaoExpedidorRg = new OrgaoExpedidorRg();
			orgaoExpedidorRg.setId(idOrgaoExpedidor);
			
			UnidadeFederacao unidadeFederacao = new UnidadeFederacao();
			unidadeFederacao.setId(idUnidadeFederecao);
			cliente.setOrgaoExpedidorRg(orgaoExpedidorRg);
			cliente.setUnidadeFederacao(unidadeFederacao);
			if (clienteAtualizacaoCadastral.getRg() == null) {
				cliente.setDataEmissaoRg(null);
			}
			cliente.setUltimaAlteracao(new Date());
			
			
			this.repositorioUtil.atualizar(cliente);
			
		} catch (ErroRepositorioException e) {
			e.printStackTrace();
			throw new ControladorException("erro.sistema", e);
		}
		
	}

	
	/**
	 * [SB0002] - Inserir Novo Cliente
	 * 
	 * @authorArthur Carvalho
	 * @date 15/03/2012
	 * 
	 * @param Integer
	 * 
	 * @return 
	 * @throws ControladorException
	 */
	public Integer inserirNovoCliente(ClienteAtualizacaoCadastral clienteAtualizacaoCadastral, Cliente clienteAnterior, Integer idOrgaoExpedidor, 
			Integer idUnidadeFederacao, Imovel imovel) throws ControladorException {
		
		Integer codigoCliente = null;
		
		try {
			// 1.	O sistema efetua a inserção de um novo cliente <<Inclui>> [UC0007 - Inserir Cliente]: 
			//  passando os dados oriundos do cliente anterior e mais as atualizações informadas 
			//  a partir do dispositivo móvel
			
			// 1.1.	Tabela CLIENTE:
			Cliente cliente = new Cliente();
			
			// ATCV_NMCLIENTE
			if ( clienteAtualizacaoCadastral.getNomeCliente().length() > 49 ) { 
				cliente.setNome(clienteAtualizacaoCadastral.getNomeCliente().substring(0, 49));
			} else {
				cliente.setNome(clienteAtualizacaoCadastral.getNomeCliente());
			}
			// ATCV_NMCLIENTE
			cliente.setNomeClienteReceitaFederal(clienteAtualizacaoCadastral.getNomeCliente());
			cliente.setNomeAbreviado(clienteAtualizacaoCadastral.getNomeAbreviadoCliente());
			
			// CLTP_ID do arquivo
			ClienteTipo clienteTipo = new ClienteTipo();
			clienteTipo.setId(clienteAtualizacaoCadastral.getIdClienteTipo());
			cliente.setClienteTipo(clienteTipo);
			
			// ATCV_NNCPF
			if (clienteAtualizacaoCadastral.getCpfCnpj() != null && Util.validacaoCPF(clienteAtualizacaoCadastral.getCpfCnpj()) ) {
				cliente.setCpf(clienteAtualizacaoCadastral.getCpfCnpj());	
			} else {
				// ATCV_NNCNPJ
				cliente.setCnpj(clienteAtualizacaoCadastral.getCpfCnpj());
			}
			
			// ATCV_NNRG
			cliente.setRg(clienteAtualizacaoCadastral.getRg());
			
			// OERG_IDRG da tabela ARQ_TXT_RET_CLIE_VISCAMPO
			OrgaoExpedidorRg  orgaoExpedidorRg = new OrgaoExpedidorRg();
			orgaoExpedidorRg.setId(idOrgaoExpedidor);
			cliente.setOrgaoExpedidorRg(orgaoExpedidorRg);
			
			// UNFE_IDRG da tabela ARQ_TXT_RET_CLIE_VISCAMPO
			UnidadeFederacao unidadeFederacao  = new UnidadeFederacao();
			unidadeFederacao.setId(idUnidadeFederacao);
			cliente.setUnidadeFederacao(unidadeFederacao);
			
			if (clienteAtualizacaoCadastral.getRg() == null) {
				cliente.setDataEmissaoRg(null);
			} else {
				cliente.setDataEmissaoRg(clienteAtualizacaoCadastral.getDataEmissaoRg());
			}
			
			cliente.setDataNascimento(clienteAtualizacaoCadastral.getDataNascimento());
			Profissao profissao = new Profissao();
			profissao.setId(clienteAtualizacaoCadastral.getIdProfissao());
			cliente.setProfissao(profissao);
			
			PessoaSexo pessoaSexo = new PessoaSexo();
			pessoaSexo.setId(clienteAtualizacaoCadastral.getIdPessoaSexo());
			cliente.setPessoaSexo(pessoaSexo);
			
			RamoAtividade ramoAtividade = new RamoAtividade();
			ramoAtividade.setId(clienteAtualizacaoCadastral.getIdRamoAtividade());
			cliente.setRamoAtividade(ramoAtividade);
			
			cliente.setEmail(clienteAtualizacaoCadastral.getEmail());
			
			cliente.setNomeMae(clienteAtualizacaoCadastral.getNomeMae());
			
			// 1 correspondente a "Ativo"
			cliente.setIndicadorUso(ConstantesSistema.SIM);
			
			
			if ( clienteAnterior != null ) {
				// CLIE_ICCOBRANCAACRESCIMOS anterior
				cliente.setIndicadorAcrescimos(clienteAnterior.getIndicadorAcrescimos());
				// CLIE_ICGERAARQUIVOTEXTO anterior
				cliente.setIndicadorGeraArquivoTexto(clienteAnterior.getIndicadorGeraArquivoTexto());
				// CLIE_ICVENCIMENTOMESSEGUINTE anterior
				cliente.setIndicadorVencimentoMesSeguinte(clienteAnterior.getIndicadorVencimentoMesSeguinte());
				// CLIE_ICGERAFATURAANTECIPADA anterior
				cliente.setIndicadorGeraFaturaAntecipada(clienteAnterior.getIndicadorGeraFaturaAntecipada());
				// CLIE_ICUSONOMEFANTASIACONTA anterior
				cliente.setIndicadorUsoNomeFantasiaConta(clienteAnterior.getIndicadorUsoNomeFantasiaConta());
				// CLIE_ICPERMITENEGATIVACAO anterior
				cliente.setIndicadorPermiteNegativacao(clienteAnterior.getIndicadorPermiteNegativacao());
				
				cliente.setIndicadorNegativacaoPeriodo(ConstantesSistema.NAO);
			} else {
				cliente.setIndicadorAcrescimos(ConstantesSistema.SIM);
				cliente.setIndicadorGeraArquivoTexto(ConstantesSistema.NAO);
				cliente.setIndicadorVencimentoMesSeguinte(ConstantesSistema.NAO);
				cliente.setIndicadorGeraFaturaAntecipada(ConstantesSistema.NAO);
				cliente.setIndicadorUsoNomeFantasiaConta(ConstantesSistema.NAO);
				cliente.setIndicadorPermiteNegativacao(ConstantesSistema.SIM);
				cliente.setIndicadorNegativacaoPeriodo(ConstantesSistema.NAO);
			}
			
			cliente.setUltimaAlteracao(new Date());

			// Cliente Fone Usuário
			Collection clienteFonesAtualizacaoCadastral = 
				getControladorCliente().obterDadosClienteFoneAtualizacaoCadastral(clienteAtualizacaoCadastral.getId());
			Collection<ClienteFone> colecaoFones = new ArrayList();
			if (clienteFonesAtualizacaoCadastral != null && !clienteFonesAtualizacaoCadastral.isEmpty()) {
				ClienteFone clienteFone = new ClienteFone();
				
				ClienteFoneAtualizacaoCadastral clienteFoneAtualizacaoCadastral = (ClienteFoneAtualizacaoCadastral) 
						Util.retonarObjetoDeColecao(clienteFonesAtualizacaoCadastral);
				
				// ATCF_CDDDD
				if (clienteFoneAtualizacaoCadastral.getDdd() != null) {
					clienteFone.setDdd(clienteFoneAtualizacaoCadastral.getDdd());
				}
				
				// ATCF_NNFONE
				if (clienteFoneAtualizacaoCadastral.getTelefone() != null) {
					clienteFone.setTelefone(clienteFoneAtualizacaoCadastral.getTelefone());
				}
				
				// ARCF_NNFONERAMAL
				if (clienteFoneAtualizacaoCadastral.getRamal() != null) {
					clienteFone.setRamal(clienteFoneAtualizacaoCadastral.getRamal());
				}
				
				// 1 correspondente a "Fone Padrão"
				clienteFone.setIndicadorTelefonePadrao(ConstantesSistema.SIM);
				
				// FNET_ID da tabela ARQ_TXT_RET_FONE_VISCAMPO 
				FoneTipo foneTipo = new FoneTipo();
				foneTipo.setId(clienteFoneAtualizacaoCadastral.getIdFoneTipo());
				clienteFone.setFoneTipo(foneTipo);
				
				// Data e hora correntes.
				clienteFone.setUltimaAlteracao(new Date());
				
				colecaoFones.add(clienteFone);

			}
			
			

			// 1.3.	Tabela CLIENTE_ENDERECO:
			Collection<ClienteEndereco> colecaoEnderecos = new ArrayList<ClienteEndereco>();
			ClienteEndereco clienteEndereco = new ClienteEndereco();
			if ( clienteAnterior != null ) {
				ClienteEndereco clienteEnderecoAnterior = this.getControladorArrecadacao()
						.pesquisarClienteEnderecoPagamento(clienteAnterior.getId());
				if (clienteEnderecoAnterior != null) {
					// EDTP_ID anterior
					clienteEndereco.setEnderecoTipo(clienteEnderecoAnterior.getEnderecoTipo());
					// EDRF_ID anterior
					clienteEndereco.setEnderecoReferencia(clienteEnderecoAnterior.getEnderecoReferencia());
					// CLED_NNIMOVEL anterior
					clienteEndereco.setNumero(clienteEnderecoAnterior.getNumero());
					// CLED_DSCOMPLEMENTOENDERECO anterior
					clienteEndereco.setComplemento(clienteEnderecoAnterior.getComplemento());
					// CLED_ICENDERECOCORRESPONDENCIA anterior
					clienteEndereco.setIndicadorEnderecoCorrespondencia(
						clienteEnderecoAnterior.getIndicadorEnderecoCorrespondencia());
					// Data e hora correntes.
					clienteEndereco.setUltimaAlteracao(new Date());
					// LGBR_ID anterior
					clienteEndereco.setLogradouroBairro(clienteEnderecoAnterior.getLogradouroBairro());
					// LGCP_ID anterior
					clienteEndereco.setLogradouroCep(clienteEnderecoAnterior.getLogradouroCep());
				
					
					colecaoEnderecos.add(clienteEndereco);
							
				}
			} else {
				// EDTP_ID anterior
				EnderecoTipo enderecoTipo = new EnderecoTipo();
				if ( clienteAtualizacaoCadastral.getCpfCnpj() != null && Util.validacaoCPF(clienteAtualizacaoCadastral.getCpfCnpj()) ) {
					enderecoTipo.setId(1);
					clienteEndereco.setEnderecoTipo(enderecoTipo);	
				} else {
					enderecoTipo.setId(2);
					clienteEndereco.setEnderecoTipo(enderecoTipo);	
				}
				
				// EDRF_ID anterior
				clienteEndereco.setEnderecoReferencia(imovel.getEnderecoReferencia());
				// CLED_NNIMOVEL anterior
				clienteEndereco.setNumero(imovel.getNumeroImovel());
				// CLED_DSCOMPLEMENTOENDERECO anterior
				clienteEndereco.setComplemento(imovel.getComplementoEndereco());
				// CLED_ICENDERECOCORRESPONDENCIA anterior
				clienteEndereco.setIndicadorEnderecoCorrespondencia(ConstantesSistema.SIM);
				// Data e hora correntes.
				clienteEndereco.setUltimaAlteracao(new Date());
				// LGBR_ID anterior
				clienteEndereco.setLogradouroBairro(imovel.getLogradouroBairro());
				// LGCP_ID anterior
				clienteEndereco.setLogradouroCep(imovel.getLogradouroCep());
				
				colecaoEnderecos.add(clienteEndereco);
			}

			codigoCliente = 
				this.inserirCliente(cliente,
					colecaoFones, 
					colecaoEnderecos);
			
		} catch (ControladorException e) {
			e.printStackTrace();
			throw new ControladorException("erro.sistema", e);
		}
		
		return codigoCliente;
	}
	
	/**
	 * Insere um cliente no sistema
	 * 
	 * @param cliente
	 *            Cliente a ser inserido
	 * @param telefones
	 *            Telefones do cliente
	 * @param enderecos
	 *            Endereços do cliente
	 * @return Descrição do retorno
	 * @throws ControladorException
	 */
	public Integer inserirCliente(Cliente cliente, Collection telefones, Collection enderecos) throws ControladorException {

		Integer chaveClienteGerada = (Integer) getControladorUtil().inserir(
				cliente);

		cliente.setId(chaveClienteGerada);

		if (telefones != null) {

			// Inserir os fones do cliente
			Iterator iteratorTelefones = telefones.iterator();

			while (iteratorTelefones.hasNext()) {
				ClienteFone clienteFone = (ClienteFone) iteratorTelefones
						.next();

				clienteFone.setCliente(cliente);
				getControladorUtil().inserir(clienteFone);

			}
		}

		// Inserir os endereços do cliente
		Iterator iteratorEnderecos = enderecos.iterator();

		while (iteratorEnderecos.hasNext()) {
			ClienteEndereco clienteEndereco = (ClienteEndereco) iteratorEnderecos
					.next();

			clienteEndereco.setCliente(cliente);
			getControladorUtil().inserir(clienteEndereco);

		}

		return chaveClienteGerada;
	}
	/**
	 * [SB0006] - Verificar Dados do RG do Cliente
	 * 
	 * @author Arthur Carvalho
	 * @date 15/03/2012
	 * 
	 * @param Integer
	 * @return 
	 * @throws ControladorException
	 */
	public void verificarDadosRGCliente(ClienteAtualizacaoCadastral clienteAtualizacaoCadastral, Integer idOrgaoExpedidor) 
			throws ControladorException {
	
		
		try {
			
			// 1. Caso exista outro cliente com os dados do RG, o sistema limpa os dados encontrados:
			if (clienteAtualizacaoCadastral.getRg() != null && clienteAtualizacaoCadastral.getIdUinidadeFederacao() != null && idOrgaoExpedidor != null) {
			
				FiltroCliente filtroClienteRG = new FiltroCliente();
				filtroClienteRG.adicionarParametro(new ParametroSimples(
					FiltroCliente.RG, 
					clienteAtualizacaoCadastral.getRg()));
				filtroClienteRG.adicionarParametro(new ParametroSimples(
					FiltroCliente.UNIDADE_FEDERACAO_ID, 
					clienteAtualizacaoCadastral.getIdUinidadeFederacao()));
				filtroClienteRG.adicionarParametro(new ParametroSimples(
					FiltroCliente.ORGAO_EXPEDIDOR_RG_ID,
					idOrgaoExpedidor));
				Collection<Cliente> colecaoClienteRG = this.getControladorUtil()
						.pesquisar(filtroClienteRG, Cliente.class.getName());
				
				if (colecaoClienteRG != null && !colecaoClienteRG.isEmpty()) {
					Cliente cliente = (Cliente) Util.retonarObjetoDeColecao(colecaoClienteRG);
					cliente.setRg(null);
					cliente.setDataEmissaoRg(null);
					cliente.setUnidadeFederacao(null);
					cliente.setOrgaoExpedidorRg(null);
					this.getControladorUtil().atualizar(cliente);
					
				}
				
			}
		} catch (ControladorException e) {
			e.printStackTrace();
			throw new ControladorException("erro.sistema", e);
		}
		
		// 3.	O sistema retorna ao passo correspondente no fluxo onde foi chamado.
	}
	
	/**
	 * [UC1299] Atualizar Cliente para Atualização Cadastral
	 * 
	 * [SB0001] - Atualizar CPF/CNPJ do Cliente Anterior
	 * 
	 * @author Arthur Carvalho
	 * @date 15/03/2012
	 * 
	 * @param Integer
	 * 
	 * @return 
	 * @throws ControladorException
	 */
	public void atualizaClienteAnterior(Integer idCliente) throws ControladorException {
		
		try {
			
			FiltroCliente filtro =  new FiltroCliente();
			filtro.adicionarParametro(new ParametroSimples(FiltroCliente.ID, idCliente));
			Collection<Cliente> colecaoCLiente = this.getControladorUtil()
					.pesquisar(filtro, Cliente.class.getName());
			Cliente cliente = (Cliente) Util.retonarObjetoDeColecao(colecaoCLiente);
			cliente.setCpf(null);
			cliente.setCnpj(null);
			cliente.setUltimaAlteracao(new Date());
			
			this.repositorioUtil.atualizar(cliente);

		} catch (ErroRepositorioException e) {
			e.printStackTrace();
			throw new ControladorException("erro.sistema", e);
		}
	}
	/**
	 * [UC1299] Atualizar Cliente para Atualização Cadastral
	 * [SB0003] - Substituir Cliente Usuário do Imóvel
	 * 
	 * @author Arthur Carvalho
	 * @date 14/03/2012
	 * 
	 * @param Integer
	 * @return 
	 * @throws ControladorException
	 */
	public void substituirClienteUsuarioDoImovel(Integer idCliente, ClienteImovel clienteImovel, Integer idImovel)
		throws ControladorException {
		
		try {
			
			// 1. O sistema efetua a substituição do cliente usuário do imóvel
			Short icNomeContaAnterior = ConstantesSistema.SIM;
			if ( clienteImovel != null ) {
				icNomeContaAnterior = this.repositorioClienteImovel.pesquisarIndicadorNomeConta(clienteImovel.getCliente().getId(), idImovel);
			}
			Date dataFim = new Date();
			this.repositorioClienteImovel.desvinculaClienteUsuarioAtualDoImovel(idImovel, dataFim);
			
			// 1.2.	Vincula o novo cliente usuário atual do imóvel
			// 1.2.1. Insere nova linha na tabela de relacionamento entre cliente e imóvel, conforme a seguir;
			ClienteImovel inserirClienteImovel = new ClienteImovel();
			
//			FiltroCliente filtro =  new FiltroCliente();
//			filtro.adicionarParametro(new ParametroSimples(FiltroCliente.ID, idCliente));
//			
//			Collection<Cliente> colecaoCLiente = this.getControladorUtil().pesquisar(filtro, Cliente.class.getName());
//			
			Cliente cliente = new Cliente();
			cliente.setId(idCliente);
			
			Imovel imovel = new Imovel();
			imovel.setId(idImovel);
			
			ClienteRelacaoTipo clienteRelacaoTipo = new ClienteRelacaoTipo();
			clienteRelacaoTipo.setId(new Integer(ClienteRelacaoTipo.USUARIO));
			
			// CLIE_ID do novo cliente pesquisado ou inserido,
			inserirClienteImovel.setCliente(cliente);
			
			// IMOV_ID da tabela ORDEM_SERVICO com ORSE_ID=ORSE_ID informado como parâmetro.
			inserirClienteImovel.setImovel(imovel);
			
			// Data corrente.
			inserirClienteImovel.setDataInicioRelacao(new Date());
			
			// CRTP_ID da tabela CLIENTE_RELACAO_TIPO correspondente a "USUARIO".
			inserirClienteImovel.setClienteRelacaoTipo(clienteRelacaoTipo);
					
			inserirClienteImovel.setIndicadorNomeConta(icNomeContaAnterior);
			inserirClienteImovel.setUltimaAlteracao(new Date());
			
			this.getControladorUtil().inserir(inserirClienteImovel);
			
			
		} catch (ErroRepositorioException e) {
			e.printStackTrace();
			throw new ControladorException("erro.sistema", e);
		}
		
	}

		
	/**
	  * [UC1288] Atualizar Dados Cadastrais do Imóvel pelo Recadastramento
	  *  
	  * [SB0001] - Validar Atributo Cpf Cnpj
	  *  
	  * @author: Arthur Carvalho
	  * @date: 01/03/2012 
	  */
	public boolean validarAtributoCpfCnpj(String cpfCnpj, Integer idImovel, Integer idClienteADMIN, 
			ParametroTabelaAtualizacaoCadastro parametroTabelaAtualizacaoCadastro, 
			ImovelAtualizacaoCadastral imovelAtualizacaoCadastral,
			ClienteImovel clienteImovelCOMPESA) throws ControladorException {
	
		boolean retorno = true;

		try {	
			//Caso nao tenha sido informado CPF/CNPJ
			if ( cpfCnpj == null || cpfCnpj.equals("")  ) {
				
				//[SB0006] - Inserir Registro no retorno da Atualizacao Cadastral
				this.inserirRetornoAtualizacaoCadastral(idImovel, idClienteADMIN, AtributoAtualizacaoCadastral.CPF_CNPJ, 
						RetornoAtualizacaoCadastral.SITUACAO_PENDENTE,
								MensagemAtualizacaoCadastral.CPF_CNPJ_NAO_INFORMADO, parametroTabelaAtualizacaoCadastro.getId(), imovelAtualizacaoCadastral,null);
				retorno = false;
				
			} else if ( !Util.validacaoCPF(cpfCnpj) && !Util.validacaoCNPJ(cpfCnpj) ) {
				//[SB0006] - Inserir Registro no retorno da Atualizacao Cadastral
				this.inserirRetornoAtualizacaoCadastral(idImovel, idClienteADMIN, AtributoAtualizacaoCadastral.CPF_CNPJ, 
						RetornoAtualizacaoCadastral.SITUACAO_PENDENTE,
								MensagemAtualizacaoCadastral.NUMERO_CPF_CNPJ_INVALIDO, parametroTabelaAtualizacaoCadastro.getId(), imovelAtualizacaoCadastral,null);
				retorno = false;
				
				
			} else{
				
				String cpfCnpjGSAN = getControladorCliente().retornaCPFCNPJCliente(clienteImovelCOMPESA.getCliente().getId());
				
				if((cpfCnpjGSAN == null && cpfCnpj != null)
					|| (cpfCnpjGSAN != null && cpfCnpj == null)
					|| !cpfCnpjGSAN.equals(cpfCnpj)){
					
					if(	repositorioCadastro.verificarRegistroAtendimentoAtualizacaoCadastral(idImovel)){
						
						//[SB0006] - Inserir Registro no retorno da Atualizacao Cadastral
						this.inserirRetornoAtualizacaoCadastral(idImovel, idClienteADMIN, AtributoAtualizacaoCadastral.CPF_CNPJ, 
								RetornoAtualizacaoCadastral.SITUACAO_PENDENTE, MensagemAtualizacaoCadastral.CPF_CNPJ_ASSOCIADO_RA, 
								parametroTabelaAtualizacaoCadastro.getId(), imovelAtualizacaoCadastral,null);
						
						retorno = false;
					}
				}
			}
			
		}catch (Exception e) {
			e.printStackTrace();
			throw new ControladorException("erro.sistema",e);
		}
		
		return retorno;
		
	}		
	/**
	  * [UC1288] Atualizar Dados Cadastrais do Imóvel pelo Recadastramento
	  *  
	  * [SB0002] - Validar Atributo Categoria
	  *  
	  * @author: Arthur Carvalho
	  * @date: 01/03/2012 
	  */
	public boolean validarAtributoCategoria(Imovel imovel, Integer idCliente, Integer idParametroTabelaAtualizacaoCadastro, 
			String cpfCnpj, ImovelAtualizacaoCadastral imovelAtualizacaoCadastral)  throws ControladorException{
		
		boolean retorno = true;
		try {
			
		Collection colecaoCategoriaImovel = this.repositorioImovel.pesquisarCategoriaSubcategoriaImovel(imovel.getId());
		
		Collection<Integer> colecaoCategoriaAtualizacaoCadastral = this.repositorioCadastro.obterCategoriaAtualizacaoCadastral(imovelAtualizacaoCadastral.getId());
		
		//Caso o imovel possua mais de uma categoria 
		if ( (colecaoCategoriaImovel != null && colecaoCategoriaImovel.size() > 1) || 
				(colecaoCategoriaAtualizacaoCadastral != null && colecaoCategoriaAtualizacaoCadastral.size() > 1) ) {
			
			//[SB0006] - Inserir Registro no retorno da Atualizacao Cadastral
			this.inserirRetornoAtualizacaoCadastral(imovel.getId(), idCliente, AtributoAtualizacaoCadastral.CATEGORIA_SUBCATEGORIA, 
					RetornoAtualizacaoCadastral.SITUACAO_PENDENTE, MensagemAtualizacaoCadastral.IMOVEL_POSSUI_MAIS_DE_UMA_CATEGORIA, 
					idParametroTabelaAtualizacaoCadastro, imovelAtualizacaoCadastral,null);
			retorno = false;
		} else {
			
			Object[] objetoImovel = (Object[]) Util.retonarObjetoDeColecao(colecaoCategoriaImovel);
			Integer idCategoriaImovel = (Integer) objetoImovel[0];
			Integer idSubcategoriaImovel = (Integer) objetoImovel[1];
			
			Integer idCategoriaAtualizacaoCadastral= (Integer) Util.retonarObjetoDeColecao(colecaoCategoriaAtualizacaoCadastral);
			
			//Caso a categoria do imovel seja diferente da categoria do imovel atualizacao cadastral
			if ( !idCategoriaImovel.equals(idCategoriaAtualizacaoCadastral) ) {
				
				//Caso a categoria seja publica ou residencial
				if( idCategoriaAtualizacaoCadastral.equals(Categoria.PUBLICO) ||  idCategoriaAtualizacaoCadastral.equals(Categoria.RESIDENCIAL) ) {
					//[SB0006] - Inserir Registro no retorno da Atualizacao Cadastral
					this.inserirRetornoAtualizacaoCadastral(imovel.getId(), idCliente, AtributoAtualizacaoCadastral.CATEGORIA_SUBCATEGORIA, 
							RetornoAtualizacaoCadastral.SITUACAO_PENDENTE, MensagemAtualizacaoCadastral.CATEGORIA_INCONSISTENTE, 
							idParametroTabelaAtualizacaoCadastro, imovelAtualizacaoCadastral,null);
					retorno = false;
				
				} else if ( idCategoriaImovel.equals(Categoria.INDUSTRIAL) ||  idCategoriaImovel.equals(Categoria.PUBLICO)) {
					//[SB0006] - Inserir Registro no retorno da Atualizacao Cadastral
					this.inserirRetornoAtualizacaoCadastral(imovel.getId(), idCliente, AtributoAtualizacaoCadastral.CATEGORIA_SUBCATEGORIA, 
							RetornoAtualizacaoCadastral.SITUACAO_PENDENTE, MensagemAtualizacaoCadastral.CATEGORIA_INCONSISTENTE, 
							idParametroTabelaAtualizacaoCadastro, imovelAtualizacaoCadastral,null);
					retorno = false;
				} else {
					//[SB0008] - Validar Cliente Usuário do Imóvel
					retorno = this.validarClienteUsuarioDoImovel(imovel, imovelAtualizacaoCadastral, idCliente, idParametroTabelaAtualizacaoCadastro,idCategoriaAtualizacaoCadastral, cpfCnpj);
				}
			}else{
				//se for da mesma categoria, verificar se houve alteração na subcategoria 
				Collection<Integer> colecaoSubcategoriaAtualizacaoCadastral = this.repositorioCadastro.
						obterSubcategoriaAtualizacaoCadastral(imovelAtualizacaoCadastral.getId());
				
				Integer idSubcategoriaAtualizacaoCadastral= (Integer) Util.retonarObjetoDeColecao(colecaoSubcategoriaAtualizacaoCadastral);
				
				if ( !idSubcategoriaImovel.equals(idSubcategoriaAtualizacaoCadastral) ) {
					//[SB0008] - Validar Cliente Usuário do Imóvel
					retorno = this.validarClienteUsuarioDoImovel(imovel, imovelAtualizacaoCadastral, idCliente, idParametroTabelaAtualizacaoCadastro,idCategoriaAtualizacaoCadastral, cpfCnpj);
				}
			}
		}
		
		
		} catch (ErroRepositorioException e) {
			e.printStackTrace();
			throw new ControladorException("erro.sistema",e);
		}
		return retorno;
	}
	
	/**
	  *  [UC1290] Inserir ou Atualizar Imóvel Atualização Cadastral
	  *  
	  * [SB0002] - Validar Atributo Ligacao de Agua
	  *  
	  * @author: Arthur Carvalho
	  * @date: 01/03/2012 
	  */
	public boolean validarAtributoLigacaoAgua(Imovel imovel, Integer idCliente, Integer idParametroTabelaAtualizacaoCadastro, 
			String cpfCnpj, ImovelAtualizacaoCadastral imovelAtualizacaoCadastral, Collection<ParametrosTransacaoBatchHelper> colecaoHelper )  throws ControladorException{
		
		boolean retorno = true;
//		try {
			
			if ( !imovel.getLigacaoAguaSituacao().getId().equals(imovelAtualizacaoCadastral.getIdLigacaoAguaSituacao()) ) {
				
				//Caso o imovel seja ligado e o imovel atualizacao cadastral seja diferente de ligado
				if ( imovel.getLigacaoAguaSituacao().getId().equals(LigacaoAguaSituacao.LIGADO) && 
						!imovelAtualizacaoCadastral.getIdLigacaoAguaSituacao().equals(LigacaoAguaSituacao.LIGADO) ) {
					
					//[SB0006] - Inserir Registro no retorno da Atualizacao Cadastral
					this.inserirRetornoAtualizacaoCadastral(imovel.getId(), idCliente, AtributoAtualizacaoCadastral.SITUACAO_LIGACAO_AGUA, 
							RetornoAtualizacaoCadastral.SITUACAO_PENDENTE, MensagemAtualizacaoCadastral.ALTERACAO_DA_LIGACAO_DE_AGUA_COM_REDUCAO_DE_FATURAMENTO, 
							idParametroTabelaAtualizacaoCadastro, imovelAtualizacaoCadastral,null);
					retorno = false;
				} else if (  !imovel.getLigacaoAguaSituacao().getId().equals(LigacaoAguaSituacao.LIGADO) && 
						!imovelAtualizacaoCadastral.getIdLigacaoAguaSituacao().equals(LigacaoAguaSituacao.LIGADO) ) {
					//[SB0006] - Inserir Registro no retorno da Atualizacao Cadastral
					this.inserirRetornoAtualizacaoCadastral(imovel.getId(), idCliente, AtributoAtualizacaoCadastral.SITUACAO_LIGACAO_AGUA, 
							RetornoAtualizacaoCadastral.SITUACAO_PENDENTE, MensagemAtualizacaoCadastral.ALTERACAO_DA_LIGACAO_DE_AGUA_COM_REDUCAO_DE_FATURAMENTO, 
							idParametroTabelaAtualizacaoCadastro, imovelAtualizacaoCadastral,null);
					retorno = false;
					
				} else if (imovel.getLigacaoAguaSituacao().getId().equals(LigacaoAguaSituacao.FACTIVEL) || 
						imovel.getLigacaoAguaSituacao().getId().equals(LigacaoAguaSituacao.POTENCIAL) ) {
		
					//[UC1291 - Efetuar Ligacao de Água Atualização Cadastral]
					retorno = this.efetuarLigacaoAguaAtualizacaoCadastral(imovel, idParametroTabelaAtualizacaoCadastro, imovelAtualizacaoCadastral,colecaoHelper);
					
				}else if (imovel.getLigacaoAguaSituacao().getId().equals(LigacaoAguaSituacao.LIGADO_EM_ANALISE)  ) {
		
					
					if ( imovel.getLigacaoAgua() != null && imovel.getLigacaoAgua().getId() != null ) {
						
						LigacaoAguaSituacao ligacaoAguaSituacao = new LigacaoAguaSituacao();
						ligacaoAguaSituacao.setId(LigacaoAguaSituacao.LIGADO);
						imovel.setLigacaoAguaSituacao(ligacaoAguaSituacao);
						
						//[SB0006] - Inserir Registro no retorno da Atualizacao Cadastral
						this.inserirRetornoAtualizacaoCadastral(imovel.getId(), idCliente, AtributoAtualizacaoCadastral.SITUACAO_LIGACAO_AGUA, 
								RetornoAtualizacaoCadastral.SITUACAO_ATUALIZADO, MensagemAtualizacaoCadastral.ATUALIZACAO_COM_SUCESSO, 
								idParametroTabelaAtualizacaoCadastro, imovelAtualizacaoCadastral,null);
						
					} else {
						//[UC1291 - Efetuar Ligacao de Água Atualização Cadastral]
						retorno = this.efetuarLigacaoAguaAtualizacaoCadastral(imovel, idParametroTabelaAtualizacaoCadastro, imovelAtualizacaoCadastral, colecaoHelper);
					}
				}//5.2 
				else if ( imovel.getLigacaoAguaSituacao().getId().equals(LigacaoAguaSituacao.CORTADO) ) {
					
					
					this.inserirRetornoAtualizacaoCadastral(imovel.getId(), idCliente, 
							AtributoAtualizacaoCadastral.SITUACAO_LIGACAO_AGUA, 
							RetornoAtualizacaoCadastral.SITUACAO_PENDENTE, 
							MensagemAtualizacaoCadastral.ALTERACAO_DA_LIGACAO_DE_AGUA_APENAS_COM_AUTORIZACAO, 
							idParametroTabelaAtualizacaoCadastro, imovelAtualizacaoCadastral,null);
					retorno = false;
					
//					se descomentar abaixo, verificar onde será a atualização da situação da ligação de água
//					no retorno da fiscalização? verificar se imóvel tem débito?
//					ou como esta hj , sem verificar se imóvel tem débito?
//					
//						//5.2.1 
//						if ( imovelAtualizacaoCadastral.getParametroTabelaAtualizacaoCadastro() == null ||
//								repositorioCadastro.pesquisarParametroTabelaAtualizacaoCadastral(imovelAtualizacaoCadastral.getParametroTabelaAtualizacaoCadastro().getId(), imovel.getLigacaoAgua().getUltimaAlteracao() ) ) {
//							//[SB0006] - Inserir Registro no retorno da Atualizacao Cadastral
//							this.inserirRetornoAtualizacaoCadastral(imovel.getId(), idCliente, AtributoAtualizacaoCadastral.SITUACAO_LIGACAO_AGUA, 
//									RetornoAtualizacaoCadastral.SITUACAO_PENDENTE, MensagemAtualizacaoCadastral.ALTERACAO_DA_LIGACAO_DE_AGUA_APOS_ENVIO_A_CONTRATADA, 
//									idParametroTabelaAtualizacaoCadastro, imovelAtualizacaoCadastral,null);
//							retorno = false;
//						}//5.2.2
//						else {
//						
//							//5.2.2.1.1 - Gera Ordem de Servico
//							OrdemServico ordemServico = new OrdemServico();
//							ordemServico.setImovel(imovel);
//							ordemServico.setObservacao("ORDEM DE SERVICO GERADA PELA ATUALIZACAO CADASTRAL");
//							boolean cobrarValorServico = false;
//							Integer idOrdemServico = getControladorOrdemServico().gerarOrdemServicoFiscalizacao(ordemServico, Usuario.USUARIO_BATCH, cobrarValorServico, null);
//							
//							//5.2.2.1.2 - Informa o retorno da fiscalização
//							FiscalizacaoSituacao fiscalizacaoSituacao = repositorioOrdemServico.pesquisaFiscalizacaoSituacao(FiscalizacaoSituacao.CORTADO_RELIGADO_A_REVELIA);
//		
//							SituacaoEncontradaHelper situacaoEncontradaHelper = new SituacaoEncontradaHelper();
//							
//							situacaoEncontradaHelper.setGeracaoDebito(ConstantesSistema.SIM);
//							situacaoEncontradaHelper.setFiscalizacaoSituacao(fiscalizacaoSituacao);
//							situacaoEncontradaHelper.setDataFiscalizacao(new Date());
//							Collection colecaoSituacaoEncontradaHelper = new ArrayList();
//							colecaoSituacaoEncontradaHelper.add(situacaoEncontradaHelper);
//							//5.2.2.1.3
//							FiltroUnidadeOrganizacional filtroUnidade = new FiltroUnidadeOrganizacional();
//							        
//					        filtroUnidade.adicionarParametro(new ParametroSimples(
//					        	FiltroUnidadeOrganizacional.ID_LOCALIDADE,imovel.getLocalidade().getId()));
//					        
//							Collection colecaoUnidade = this.getControladorUtil().pesquisar(filtroUnidade, UnidadeOrganizacional.class.getName());
//							UnidadeOrganizacional unidadeOrganizacional = (UnidadeOrganizacional) Util.retonarObjetoDeColecao(colecaoUnidade);
//							
//							Usuario usuarioBatch = repositorioUsuario.pesquisarUsuarioRotinaBatch();
//							usuarioBatch.setUnidadeOrganizacional(unidadeOrganizacional);	
//							
//							getControladorOrdemServico().informarRetornoOSFiscalizacao(idOrdemServico, null, LigacaoAguaSituacao.CORTADO, 
//									imovel.getLigacaoEsgotoSituacao().getId(),  imovel.getId(), MedicaoTipo.LIGACAO_AGUA.toString(), ConstantesSistema.SIM.toString(), null, 
//									usuarioBatch, null, ConstantesSistema.SIM, ConstantesSistema.NAO, colecaoSituacaoEncontradaHelper, null, null);
//							
//							getControladorOrdemServico().encerrarOSComExecucaoSemReferencia(idOrdemServico, new Date(), usuarioBatch, AtendimentoMotivoEncerramento.ATUALIZACAO_CADASTRAL_COMPESA,
//									new Date(), "ORDEM DE SERVICO ENCERRADA ATRAVES DA FUNCIONALIDADE DE ATUALIZACAO CADASTRAL", ConstantesSistema.NAO.toString(), null, null, null, null, null, 
//									ConstantesSistema.NAO.toString(), null, null, null, null, null, null);
//							
//							LigacaoAguaSituacao ligacaoAguaSituacao = new LigacaoAguaSituacao();
//							ligacaoAguaSituacao.setId(LigacaoAguaSituacao.LIGADO);
//							imovel.setLigacaoAguaSituacao(ligacaoAguaSituacao);
//							//[SB0006] - Inserir Registro no retorno da Atualizacao Cadastral
//							this.inserirRetornoAtualizacaoCadastral(imovel.getId(), idCliente, AtributoAtualizacaoCadastral.SITUACAO_LIGACAO_AGUA, 
//									RetornoAtualizacaoCadastral.SITUACAO_ATUALIZADO, MensagemAtualizacaoCadastral.ATUALIZACAO_COM_SUCESSO, 
//									idParametroTabelaAtualizacaoCadastro, imovelAtualizacaoCadastral,null);
//						}
				}//5.3
				else if ( imovel.getLigacaoAguaSituacao().getId().equals(LigacaoAguaSituacao.SUPRIMIDO)
						|| imovel.getLigacaoAguaSituacao().getId().equals(LigacaoAguaSituacao.SUPR_PARC_PEDIDO)
						|| imovel.getLigacaoAguaSituacao().getId().equals(LigacaoAguaSituacao.SUPR_PARC)) {
					
					this.inserirRetornoAtualizacaoCadastral(imovel.getId(), idCliente, 
							AtributoAtualizacaoCadastral.SITUACAO_LIGACAO_AGUA, 
							RetornoAtualizacaoCadastral.SITUACAO_PENDENTE, 
							MensagemAtualizacaoCadastral.ALTERACAO_DA_LIGACAO_DE_AGUA_APENAS_COM_AUTORIZACAO, 
							idParametroTabelaAtualizacaoCadastro, imovelAtualizacaoCadastral,null);
					retorno = false;
					
//					se descomentar abaixo, verificar onde será a atualização da situação da ligação de água
//					no retorno da fiscalização? verificar se imóvel tem débito?
//					ou como esta hj , sem verificar se imóvel tem débito?
					
//					if ( imovelAtualizacaoCadastral.getParametroTabelaAtualizacaoCadastro() == null || 
//							repositorioCadastro.pesquisarParametroTabelaAtualizacaoCadastral(imovelAtualizacaoCadastral.getParametroTabelaAtualizacaoCadastro().getId(), 
//							imovel.getLigacaoAgua().getUltimaAlteracao() ) ) {
//						//[SB0006] - Inserir Registro no retorno da Atualizacao Cadastral
//						this.inserirRetornoAtualizacaoCadastral(imovel.getId(), idCliente, AtributoAtualizacaoCadastral.SITUACAO_LIGACAO_AGUA, 
//								RetornoAtualizacaoCadastral.SITUACAO_PENDENTE, MensagemAtualizacaoCadastral.ALTERACAO_DA_LIGACAO_DE_AGUA_APOS_ENVIO_A_CONTRATADA, 
//								idParametroTabelaAtualizacaoCadastro, imovelAtualizacaoCadastral,null);
//						
//						retorno = false;
//						
//					} else {
//	
//						//5.2.2.1.1 - Gera Ordem de Servico
//						OrdemServico ordemServico = new OrdemServico();
//						ordemServico.setImovel(imovel);
//						ordemServico.setObservacao("ORDEM DE SERVICO GERADA PELA ATUALIZACAO CADASTRAL");
//						
//						boolean cobrarValorServico = false;
//						Integer idOrdemServico = getControladorOrdemServico().gerarOrdemServicoFiscalizacao(ordemServico, Usuario.USUARIO_BATCH, cobrarValorServico, null);
//						
//						//5.2.2.1.2 - Informa o retorno da fiscalização
//						FiscalizacaoSituacao fiscalizacaoSituacao = repositorioOrdemServico.pesquisaFiscalizacaoSituacao(FiscalizacaoSituacao.LIGADO_CLANDESTINO_DE_AGUA);
//	
//						SituacaoEncontradaHelper situacaoEncontradaHelper = new SituacaoEncontradaHelper();
//						situacaoEncontradaHelper.setFiscalizacaoSituacao(fiscalizacaoSituacao);
//						situacaoEncontradaHelper.setDataFiscalizacao(new Date());
//						situacaoEncontradaHelper.setGeracaoDebito(ConstantesSistema.SIM);
//						
//						Collection colecaoSituacaoEncontradaHelper = new ArrayList();
//						colecaoSituacaoEncontradaHelper.add(situacaoEncontradaHelper);
//						
//						//5.2.2.1.3
//						FiltroUnidadeOrganizacional filtroUnidade = new FiltroUnidadeOrganizacional();
//				        
//				        filtroUnidade.adicionarParametro(new ParametroSimples(
//				        	FiltroUnidadeOrganizacional.ID_LOCALIDADE,imovel.getLocalidade().getId()));
//				        
//						Collection colecaoUnidade = this.getControladorUtil().pesquisar(filtroUnidade, UnidadeOrganizacional.class.getName());
//						UnidadeOrganizacional unidadeOrganizacional = (UnidadeOrganizacional) Util.retonarObjetoDeColecao(colecaoUnidade);
//						
//						Usuario usuarioBatch = repositorioUsuario.pesquisarUsuarioRotinaBatch();
//						usuarioBatch.setUnidadeOrganizacional(unidadeOrganizacional);	
//						
//						getControladorOrdemServico().informarRetornoOSFiscalizacao(idOrdemServico, null, LigacaoAguaSituacao.SUPRIMIDO, 
//								imovel.getLigacaoEsgotoSituacao().getId(),  imovel.getId(), MedicaoTipo.LIGACAO_AGUA.toString(), ConstantesSistema.SIM.toString(), null, 
//								Usuario.USUARIO_BATCH, null, ConstantesSistema.SIM, ConstantesSistema.NAO, colecaoSituacaoEncontradaHelper, null, null);
//						
//						//5.2.2.1.3
//						getControladorOrdemServico().encerrarOSComExecucaoSemReferencia(idOrdemServico, new Date(), usuarioBatch, AtendimentoMotivoEncerramento.ATUALIZACAO_CADASTRAL_COMPESA,
//								new Date(), "ORDEM DE SERVICO ENCERRADA ATRAVES DA FUNCIONALIDADE DE ATUALIZACAO CADASTRAL", ConstantesSistema.NAO.toString(), null, null, null, null, null, 
//								ConstantesSistema.NAO.toString(), null, null, null, null, null, null);
//						
//						LigacaoAguaSituacao ligacaoAguaSituacao = new LigacaoAguaSituacao();
//						ligacaoAguaSituacao.setId(LigacaoAguaSituacao.LIGADO);
//						imovel.setLigacaoAguaSituacao(ligacaoAguaSituacao);
//						
//						//[SB0006] - Inserir Registro no retorno da Atualizacao Cadastral
//						this.inserirRetornoAtualizacaoCadastral(imovel.getId(), idCliente, AtributoAtualizacaoCadastral.SITUACAO_LIGACAO_AGUA, 
//								RetornoAtualizacaoCadastral.SITUACAO_ATUALIZADO, MensagemAtualizacaoCadastral.ATUALIZACAO_COM_SUCESSO, 
//								idParametroTabelaAtualizacaoCadastro, imovelAtualizacaoCadastral,null);
//					}
				}
			}
			
//		} catch (ErroRepositorioException e) {
//			e.printStackTrace();
//			throw new ControladorException("erro.sistema",e);
//		}
		return retorno;
	}
	
	/**
	  * [UC1288] Atualizar Dados Cadastrais do Imóvel pelo Recadastramento
	  *  
	  *  [SB0004] - Validar Atributo Economias
	  *  
	  * @author: Arthur Carvalho
	  * @date: 01/03/2012 
	  */
	public boolean validarAtributosEconomias(Imovel imovel, ImovelAtualizacaoCadastral imovelAtualizacaoCadastral, Integer idCliente, Integer idParametroTabelaAtualizacaoCadastro) 
			throws ControladorException{
		
		boolean retorno = true;
		try {

			
//			Collection<Short> colecaoQtdEconomiasImovelAtuCad = repositorioCadastro.
//			obterQuantidadeEconomiaAtualizacaoCadastral(imovelAtualizacaoCadastral.getId());
//			if ( colecaoQtdEconomiasImovelAtuCad != null && !colecaoQtdEconomiasImovelAtuCad.isEmpty() 
//					&& colecaoQtdEconomiasImovelAtuCad.size() > 1 ) {
//				
//				//[SB0006] - Inserir Registro no retorno da Atualizacao Cadastral
////				this.inserirRetornoAtualizacaoCadastral(imovel.getId(), idCliente, AtributoAtualizacaoCadastral.ECONOMIA, RetornoAtualizacaoCadastral.SITUACAO_PENDENTE,
////						MensagemAtualizacaoCadastral.IMOVEL_POSSUI_MAIS_DE_UMA_CATEGORIA, idParametroTabelaAtualizacaoCadastro, imovelAtualizacaoCadastral,null);
//				
//			} 
			
			Collection colecaoCategoriaImovel = this.repositorioImovel.pesquisarCategoriaSubcategoriaImovel(imovel.getId());
			Collection<Integer> colecaoCategoriaAtualizacaoCadastral = this.repositorioCadastro.obterCategoriaAtualizacaoCadastral(imovelAtualizacaoCadastral.getId());
			
			Short qtdEconomiasImovelAtuCad = repositorioCadastro.
					obterQuantidadeEconomiaAtualizacaoCadastral(imovelAtualizacaoCadastral.getId());
			
			if ( (colecaoCategoriaImovel != null && colecaoCategoriaImovel.size() > 1) || 
				 (colecaoCategoriaAtualizacaoCadastral != null && colecaoCategoriaAtualizacaoCadastral.size() > 1) ) {
				
				Short quantidadeEconomias = (Short)this.repositorioImovel.pesquisarObterQuantidadeEconomias(imovel);
				
				if ( quantidadeEconomias.compareTo(qtdEconomiasImovelAtuCad) > 0 ) {
					
					//[SB0006] - Inserir Registro no retorno da Atualizacao Cadastral
					this.inserirRetornoAtualizacaoCadastral(imovel.getId(), idCliente, AtributoAtualizacaoCadastral.ECONOMIA, RetornoAtualizacaoCadastral.SITUACAO_PENDENTE,
							MensagemAtualizacaoCadastral.QUANTIDADE_ECONOMIA_INCONSISTENTE, idParametroTabelaAtualizacaoCadastro, imovelAtualizacaoCadastral,null);
					
				}
				retorno = false;				
			}else {
				
//				Short qtdEconomiasImovelAtuCad = (Short) Util.retonarObjetoDeColecao(colecaoQtdEconomiasImovelAtuCad);
				Collection  colecaoImovelSubcategoria = getControladorImovel().pesquisarImovelSubcategoria(imovel);
				ImovelSubcategoria imovelSubcategoria = (ImovelSubcategoria) Util.retonarObjetoDeColecao(colecaoImovelSubcategoria);
				Short quantidadeEconomias = new Short(imovelSubcategoria.getQuantidadeEconomias());
				
				if ( quantidadeEconomias.compareTo(qtdEconomiasImovelAtuCad) > 0 ) {
					retorno = false;
					
					//[SB0006] - Inserir Registro no retorno da Atualizacao Cadastral
					this.inserirRetornoAtualizacaoCadastral(imovel.getId(), idCliente, AtributoAtualizacaoCadastral.ECONOMIA, RetornoAtualizacaoCadastral.SITUACAO_PENDENTE,
							MensagemAtualizacaoCadastral.QUANTIDADE_ECONOMIA_INCONSISTENTE, idParametroTabelaAtualizacaoCadastro, imovelAtualizacaoCadastral,null);
					
				} else {
					
					if ( quantidadeEconomias.equals(qtdEconomiasImovelAtuCad)) {
						
						retorno = false;
					}
				}
			}
		
		} catch (ErroRepositorioException e) {
			e.printStackTrace();
			throw new ControladorException("erro.sistema",e);
		}
		return retorno;
	}
	
	/**
	  * [UC1288] Atualizar Dados Cadastrais do Imóvel pelo Recadastramento
	  *  
	  *  [SB0004] - Validar Perfil do Imovel
	  *  
	  * @author: Arthur Carvalho
	  * @date: 01/03/2012 
	  */
	public boolean validarPerfilImovelAtualizacaoCadastral(Imovel imovel, Integer idCliente, Integer idParametroTabelaAtualizacaoCadastro,
			ImovelAtualizacaoCadastral imovelAtualizacaoCadastral, SistemaParametro sistemaParametro)  throws ControladorException{
		
		boolean retorno = true;
		try {
	
			//
			if ( imovelAtualizacaoCadastral.getIdImovelPerfil().equals(ImovelPerfil.TARIFA_SOCIAL) ) {
			
				//1.1.1.1.	Área construída do imóvel 
				if ((imovelAtualizacaoCadastral.getIdAreaConstruidaFaixa() == null 
					&& imovel.getAreaConstruidaFaixa() != null && imovel.getAreaConstruidaFaixa().getId() != null) 
				 ||(imovelAtualizacaoCadastral.getIdAreaConstruidaFaixa() != null 
					&& imovel.getAreaConstruidaFaixa() == null ) 
				 || (imovelAtualizacaoCadastral.getIdAreaConstruidaFaixa() != null 
					&& imovel.getAreaConstruidaFaixa() != null && imovel.getAreaConstruidaFaixa().getId() != null
					&& !imovelAtualizacaoCadastral.getIdAreaConstruidaFaixa().equals(imovel.getAreaConstruidaFaixa().getId())) ) {
					
					//[SB0006] - Inserir Registro no retorno da Atualizacao Cadastral
					this.inserirRetornoAtualizacaoCadastral(imovel.getId(), idCliente, AtributoAtualizacaoCadastral.AREA_CONSTRUIDA, 
							RetornoAtualizacaoCadastral.SITUACAO_PENDENTE, MensagemAtualizacaoCadastral.PERFIL_IMOVEL_TS_NAO_ATUALIZADA, 
							idParametroTabelaAtualizacaoCadastro, imovelAtualizacaoCadastral,null);
					retorno = false;
				} 
			
					
				ClienteImovel clienteImovel = (ClienteImovel) Util.retonarObjetoDeColecao(this.getControladorCliente().obterClienteImovelporRelacaoTipo(
						imovel.getId(), ClienteRelacaoTipo.USUARIO.intValue()));
				
				ClienteAtualizacaoCadastral clienteAtualizacaoCadastral = (ClienteAtualizacaoCadastral) Util.retonarObjetoDeColecao(
						repositorioCadastro.pesquisarClienteAtualizacaoCadastral(imovelAtualizacaoCadastral.getId(), ClienteRelacaoTipo.USUARIO.intValue(), false));
	
				//1.1.1.2.	Código do cliente usuário 
				if ( clienteAtualizacaoCadastral == null || clienteAtualizacaoCadastral.getIdCliente() == null
					|| (!clienteImovel.getCliente().getId().equals(clienteAtualizacaoCadastral.getIdCliente()))) {
					//[SB0006] - Inserir Registro no retorno da Atualizacao Cadastral
					this.inserirRetornoAtualizacaoCadastral(imovel.getId(), clienteImovel.getCliente().getId(), AtributoAtualizacaoCadastral.CLIENTE, 
							RetornoAtualizacaoCadastral.SITUACAO_PENDENTE, MensagemAtualizacaoCadastral.PERFIL_IMOVEL_TS_NAO_ATUALIZADA, 
							idParametroTabelaAtualizacaoCadastro, imovelAtualizacaoCadastral,null);
					retorno = false;
				}else{
					
					//verificar se houve alteração no cliente
					Boolean clienteIgualClienteAtualizacaoCadastral = verificarClienteIgualClienteAtualizacaoCadastral(
							clienteImovel,clienteAtualizacaoCadastral);
					
					if(!clienteIgualClienteAtualizacaoCadastral){
						//[SB0006] - Inserir Registro no retorno da Atualizacao Cadastral
						this.inserirRetornoAtualizacaoCadastral(imovel.getId(), clienteImovel.getCliente().getId(), AtributoAtualizacaoCadastral.CLIENTE, 
								RetornoAtualizacaoCadastral.SITUACAO_PENDENTE, MensagemAtualizacaoCadastral.PERFIL_IMOVEL_TS_NAO_ATUALIZADA, 
								idParametroTabelaAtualizacaoCadastro, imovelAtualizacaoCadastral,null);
						retorno = false;
					}
				}
				
				
				ClienteImovel clienteImovelProprietario = (ClienteImovel) Util.retonarObjetoDeColecao(this.getControladorCliente().obterClienteImovelporRelacaoTipo(
						imovel.getId(), ClienteRelacaoTipo.PROPRIETARIO.intValue()));
				
				ClienteAtualizacaoCadastral clienteAtualizacaoCadastralProprietario = (ClienteAtualizacaoCadastral) Util.retonarObjetoDeColecao(
						repositorioCadastro.pesquisarClienteAtualizacaoCadastral(imovelAtualizacaoCadastral.getId(), ClienteRelacaoTipo.PROPRIETARIO.intValue(), false));
				
				//1.1.1.3.	Código do cliente proprietário 
				if ( (clienteImovelProprietario == null && clienteAtualizacaoCadastralProprietario != null) 	) {
				//	|| (clienteImovelProprietario != null && clienteAtualizacaoCadastralProprietario == null)
					
					//[SB0006] - Inserir Registro no retorno da Atualizacao Cadastral
					this.inserirRetornoAtualizacaoCadastral(imovel.getId(), 
							clienteAtualizacaoCadastralProprietario.getIdCliente(), AtributoAtualizacaoCadastral.CLIENTE, 
							RetornoAtualizacaoCadastral.SITUACAO_PENDENTE, MensagemAtualizacaoCadastral.PERFIL_IMOVEL_TS_NAO_ATUALIZADA, 
							idParametroTabelaAtualizacaoCadastro, imovelAtualizacaoCadastral,null);
					retorno = false;
					
				}else if(clienteImovelProprietario != null && clienteAtualizacaoCadastralProprietario != null){
					
					if(!Util.ehIgual(clienteImovelProprietario.getCliente().getId(),
							clienteAtualizacaoCadastralProprietario.getIdCliente())){
						//[SB0006] - Inserir Registro no retorno da Atualizacao Cadastral
						this.inserirRetornoAtualizacaoCadastral(imovel.getId(), 
								clienteImovelProprietario.getCliente().getId(), AtributoAtualizacaoCadastral.CLIENTE, 
								RetornoAtualizacaoCadastral.SITUACAO_PENDENTE, MensagemAtualizacaoCadastral.PERFIL_IMOVEL_TS_NAO_ATUALIZADA, 
								idParametroTabelaAtualizacaoCadastro, imovelAtualizacaoCadastral,null);
						
						retorno = false;
					}else{
						//verificar se houve alteração no cliente
						Boolean clienteIgualClienteAtualizacaoCadastral = verificarClienteIgualClienteAtualizacaoCadastral(
								clienteImovelProprietario,clienteAtualizacaoCadastralProprietario);
						
						if(!clienteIgualClienteAtualizacaoCadastral){
							//[SB0006] - Inserir Registro no retorno da Atualizacao Cadastral
							this.inserirRetornoAtualizacaoCadastral(imovel.getId(),
									clienteImovelProprietario.getCliente().getId(),
									AtributoAtualizacaoCadastral.CLIENTE, RetornoAtualizacaoCadastral.SITUACAO_PENDENTE, 
									MensagemAtualizacaoCadastral.PERFIL_IMOVEL_TS_NAO_ATUALIZADA, 
									idParametroTabelaAtualizacaoCadastro, imovelAtualizacaoCadastral,null);
							retorno = false;
						}
					}
				}
				
				//1.1.1.4.	Número de contrato da companhia energética 
				if ( (imovel.getNumeroCelpe() == null && imovelAtualizacaoCadastral.getNumeroContratoEnergia() != null ) 
					|| (imovel.getNumeroCelpe() != null && imovelAtualizacaoCadastral.getNumeroContratoEnergia() == null ) 
					|| (imovel.getNumeroCelpe() != null && imovelAtualizacaoCadastral.getNumeroContratoEnergia() != null 
						&& !imovel.getNumeroCelpe().equals(imovelAtualizacaoCadastral.getNumeroContratoEnergia())) ) {
					
					//[SB0006] - Inserir Registro no retorno da Atualizacao Cadastral
					this.inserirRetornoAtualizacaoCadastral(imovel.getId(), idCliente, AtributoAtualizacaoCadastral.NUMERO_CONTRATO_DA_COMPANHIA_ENERGETICA, 
							RetornoAtualizacaoCadastral.SITUACAO_PENDENTE, MensagemAtualizacaoCadastral.PERFIL_IMOVEL_TS_NAO_ATUALIZADA, 
							idParametroTabelaAtualizacaoCadastro, imovelAtualizacaoCadastral,null);
					retorno = false;
				}
				
				//1.1.1.5.	Economias por Subcategoria 
				Short qtdEconomiasImovelAtuCad = repositorioCadastro.obterSomatorioQuantidadeEconomiaAtualizacaoCadastral(imovelAtualizacaoCadastral.getId());
				
				if ((imovel.getQuantidadeEconomias() == null && qtdEconomiasImovelAtuCad != null) 
					||(imovel.getQuantidadeEconomias() != null && qtdEconomiasImovelAtuCad == null) 
					||(imovel.getQuantidadeEconomias() != null && qtdEconomiasImovelAtuCad != null
						&& !imovel.getQuantidadeEconomias().equals(qtdEconomiasImovelAtuCad)) ) {
					
					//[SB0006] - Inserir Registro no retorno da Atualizacao Cadastral
					this.inserirRetornoAtualizacaoCadastral(imovel.getId(), idCliente, AtributoAtualizacaoCadastral.ECONOMIA, 
							RetornoAtualizacaoCadastral.SITUACAO_PENDENTE, MensagemAtualizacaoCadastral.PERFIL_IMOVEL_TS_NAO_ATUALIZADA, 
							idParametroTabelaAtualizacaoCadastro, imovelAtualizacaoCadastral,null);
					retorno = false ;
				}
				
				
				//--------------------------------------------------------------
				Collection colecaoCategoriaImovel = this.repositorioImovel.pesquisarCategoriaSubcategoriaImovel(imovel.getId());
				
				Collection<Integer> colecaoCategoriaAtualizacaoCadastral = this.repositorioCadastro.obterCategoriaAtualizacaoCadastral(imovelAtualizacaoCadastral.getId());
				
				//Caso o imovel possua mais de uma categoria 
				if ( (colecaoCategoriaImovel != null && colecaoCategoriaImovel.size() > 1) || 
						(colecaoCategoriaAtualizacaoCadastral != null && colecaoCategoriaAtualizacaoCadastral.size() > 1) ) {
					
					
					if ( colecaoCategoriaImovel.size() != colecaoCategoriaAtualizacaoCadastral.size() ) {
						
						//[SB0006] - Inserir Registro no retorno da Atualizacao Cadastral
						this.inserirRetornoAtualizacaoCadastral(imovel.getId(), idCliente, AtributoAtualizacaoCadastral.CATEGORIA_SUBCATEGORIA, 
								RetornoAtualizacaoCadastral.SITUACAO_PENDENTE, MensagemAtualizacaoCadastral.PERFIL_IMOVEL_TS_NAO_ATUALIZADA, 
								idParametroTabelaAtualizacaoCadastro, imovelAtualizacaoCadastral,null);
						retorno = false ;
						
					}else{
						
						//pesquisar coleção de ImovelSubcategoriaAtualizacaoCadastral 
						Collection<ImovelSubcategoriaAtualizacaoCadastral> colecaoImovelSubcategoriaAtualizacaoCadastral = 
								repositorioCadastro.pesquisarSubCategoriaAtualizacaoCadastral(imovelAtualizacaoCadastral.getId());
						//pesquisar coleção de ImovelSubcategoria  
						Collection colecaoImovelSubcategoria = repositorioImovel.pesquisarImovelSubcategoria(imovel.getId());
						
						//Percorrer coleção de ImovelSubcategoria e comparar com a coleção de ImovelSubcategoriaAtualizacaoCadastral
						//retirar das coleções os registros iguais, 
						//se restar algum registro em uma das coleções é pq houve alteração
						Iterator iterImovelSubcategoria = colecaoImovelSubcategoria.iterator();
						
						while (iterImovelSubcategoria.hasNext()) {
							ImovelSubcategoria imovelSubcat = (ImovelSubcategoria) iterImovelSubcategoria.next();
							Integer idSubcategoria = imovelSubcat.getComp_id().getSubcategoria().getId();

							Iterator iterImovelSubcategoriaAtuCad = colecaoImovelSubcategoriaAtualizacaoCadastral.iterator();
							while (iterImovelSubcategoriaAtuCad.hasNext()) {
								ImovelSubcategoriaAtualizacaoCadastral imovelSubcatAtuCad = (ImovelSubcategoriaAtualizacaoCadastral) iterImovelSubcategoriaAtuCad.next();
								
								if(idSubcategoria.compareTo(imovelSubcatAtuCad.getIdSubcategoria()) == 0){
									iterImovelSubcategoria.remove();
									iterImovelSubcategoriaAtuCad.remove();
								}
							}
							
						}
						
						if(colecaoImovelSubcategoriaAtualizacaoCadastral.size() > 0 ||colecaoImovelSubcategoria.size() > 0){
							//[SB0006] - Inserir Registro no retorno da Atualizacao Cadastral
							this.inserirRetornoAtualizacaoCadastral(imovel.getId(), idCliente, AtributoAtualizacaoCadastral.CATEGORIA_SUBCATEGORIA, 
									RetornoAtualizacaoCadastral.SITUACAO_PENDENTE, MensagemAtualizacaoCadastral.PERFIL_IMOVEL_TS_NAO_ATUALIZADA, 
									idParametroTabelaAtualizacaoCadastro, imovelAtualizacaoCadastral,null);
							retorno = false ;
						}
						
					}
					
				} else {
					
					Object[] objetoImovel = (Object[]) Util.retonarObjetoDeColecao(colecaoCategoriaImovel);
					Integer idCategoriaImovel = (Integer) objetoImovel[0];
					Integer idSubcategoriaImovel = (Integer) objetoImovel[1];
					
					Integer idCategoriaAtualizacaoCadastral= (Integer) Util.retonarObjetoDeColecao(colecaoCategoriaAtualizacaoCadastral);
					
					//Caso a categoria do imovel seja diferente da categoria do imovel atualizacao cadastral
					if ( !idCategoriaImovel.equals(idCategoriaAtualizacaoCadastral) ) {
						
						//[SB0006] - Inserir Registro no retorno da Atualizacao Cadastral
						this.inserirRetornoAtualizacaoCadastral(imovel.getId(), idCliente, AtributoAtualizacaoCadastral.CATEGORIA_SUBCATEGORIA, 
								RetornoAtualizacaoCadastral.SITUACAO_PENDENTE, MensagemAtualizacaoCadastral.PERFIL_IMOVEL_TS_NAO_ATUALIZADA, 
								idParametroTabelaAtualizacaoCadastro, imovelAtualizacaoCadastral,null);
						retorno = false ;
						
					}else{
						//se for da mesma categoria, verificar se houve alteração na subcategoria 
						Collection<Integer> colecaoSubcategoriaAtualizacaoCadastral = this.repositorioCadastro.
								obterSubcategoriaAtualizacaoCadastral(imovelAtualizacaoCadastral.getId());
						
						Integer idSubcategoriaAtualizacaoCadastral= (Integer) Util.retonarObjetoDeColecao(colecaoSubcategoriaAtualizacaoCadastral);
						
						if ( !idSubcategoriaImovel.equals(idSubcategoriaAtualizacaoCadastral) ) {
							
							//[SB0006] - Inserir Registro no retorno da Atualizacao Cadastral
							this.inserirRetornoAtualizacaoCadastral(imovel.getId(), idCliente, AtributoAtualizacaoCadastral.CATEGORIA_SUBCATEGORIA, 
									RetornoAtualizacaoCadastral.SITUACAO_PENDENTE, MensagemAtualizacaoCadastral.PERFIL_IMOVEL_TS_NAO_ATUALIZADA, 
									idParametroTabelaAtualizacaoCadastro, imovelAtualizacaoCadastral,null);
							retorno = false ;
						}
					}
				}
				//--------------------------------------------------------
				
			}
			
			if ( imovelAtualizacaoCadastral.getIndicadorAlertaTarifaSocial() == null 
					|| imovelAtualizacaoCadastral.getIndicadorAlertaTarifaSocial().equals(ConstantesSistema.SIM) ) {
				//[SB0006] - Inserir Registro no retorno da Atualizacao Cadastral
				this.inserirRetornoAtualizacaoCadastral(imovel.getId(), idCliente, AtributoAtualizacaoCadastral.IMOVEL, 
						RetornoAtualizacaoCadastral.SITUACAO_PENDENTE, MensagemAtualizacaoCadastral.ALERTA_DE_TARIFA_SOCIAL, 
						idParametroTabelaAtualizacaoCadastro, imovelAtualizacaoCadastral,null);
			}
		
		} catch (ErroRepositorioException e) {
			e.printStackTrace();
			throw new ControladorException("erro.sistema",e);
		}
		return retorno;
	}
	
	/**
	  * [UC1288] Atualizar Dados Cadastrais do Imóvel pelo Recadastramento
	  *  
	  *  [SB0005] - Validar Atualização de Inscrição
	  *  
	  * @author: Arthur Carvalho
	  * @date: 01/03/2012 
	  */
	public boolean validarInscricaoImovelAtualizacaoCadastral(Imovel imovel, Integer idCliente, Integer idParametroTabelaAtualizacaoCadastro,
			ImovelAtualizacaoCadastral imovelAtualizacaoCadastral, SistemaParametro sistemaParametro)  throws ControladorException{
		
		boolean retorno = true;
	
//		if ( !imovel.getLocalidade().getId().equals(imovelAtualizacaoCadastral.getIdLocalidade()) ) {
//			
//			//[SB0006] - Inserir Registro no retorno da Atualizacao Cadastral
//			this.inserirRetornoAtualizacaoCadastral(imovel.getId(), idCliente, AtributoAtualizacaoCadastral.LOCALIDADE, 
//					RetornoAtualizacaoCadastral.PENDENTE_POR_INSCRICAO, MensagemAtualizacaoCadastral.PENDENTE_POR_INSCRICAO, 
//					idParametroTabelaAtualizacaoCadastro, imovelAtualizacaoCadastral,null);
//			
//			retorno = false;
//		}
//		
//		if ( imovel.getSetorComercial().getCodigo() != imovelAtualizacaoCadastral.getCodigoSetorComercial() ) {
//			//[SB0006] - Inserir Registro no retorno da Atualizacao Cadastral
//			this.inserirRetornoAtualizacaoCadastral(imovel.getId(), idCliente, AtributoAtualizacaoCadastral.SETOR_COMERCIAL, 
//					RetornoAtualizacaoCadastral.PENDENTE_POR_INSCRICAO, MensagemAtualizacaoCadastral.PENDENTE_POR_INSCRICAO, 
//					idParametroTabelaAtualizacaoCadastro, imovelAtualizacaoCadastral,null);
//			
//			retorno = false;
//			 
//		}
//		
//		if ( imovel.getQuadra().getNumeroQuadra() != imovelAtualizacaoCadastral.getNumeroQuadra() ) {
//			//[SB0006] - Inserir Registro no retorno da Atualizacao Cadastral
//			this.inserirRetornoAtualizacaoCadastral(imovel.getId(), idCliente, AtributoAtualizacaoCadastral.QUADRA, 
//					RetornoAtualizacaoCadastral.PENDENTE_POR_INSCRICAO, MensagemAtualizacaoCadastral.PENDENTE_POR_INSCRICAO, 
//					idParametroTabelaAtualizacaoCadastro, imovelAtualizacaoCadastral,null);
//			
//			retorno = false;
//		}
//	
//		if ( imovel.getLote() != imovelAtualizacaoCadastral.getLote() ) {
//			//[SB0006] - Inserir Registro no retorno da Atualizacao Cadastral
//			this.inserirRetornoAtualizacaoCadastral(imovel.getId(), idCliente, AtributoAtualizacaoCadastral.LOTE, 
//					RetornoAtualizacaoCadastral.PENDENTE_POR_INSCRICAO, MensagemAtualizacaoCadastral.PENDENTE_POR_INSCRICAO, 
//					idParametroTabelaAtualizacaoCadastro, imovelAtualizacaoCadastral,null);
//			
//			retorno = false;
//		}
//		
//		if ( imovel.getSubLote() != imovelAtualizacaoCadastral.getSubLote() ) {
//			//[SB0006] - Inserir Registro no retorno da Atualizacao Cadastral
//			this.inserirRetornoAtualizacaoCadastral(imovel.getId(), idCliente, AtributoAtualizacaoCadastral.SUBLOTE, 
//					RetornoAtualizacaoCadastral.PENDENTE_POR_INSCRICAO, MensagemAtualizacaoCadastral.PENDENTE_POR_INSCRICAO, 
//					idParametroTabelaAtualizacaoCadastro, imovelAtualizacaoCadastral,null);
//			
//			retorno = false;
//		}
//		
//		if ( !retorno ) {
			
//			//[FS0038 - Verificar Existência de Alteração de Inscrição Pendente para o Imóvel]
		getControladorImovel().verificarExistenciaAlteracaoInscricaoPendenteImovel(imovel);
		
		
		SetorComercial setorComercial = null;
		try {
			setorComercial = repositorioCadastro.pesquisarSetorComercial(imovelAtualizacaoCadastral.getIdLocalidade(), imovelAtualizacaoCadastral.getCodigoSetorComercial()); 
		
		
			Quadra quadra = getControladorLocalidade().obterQuadraSetorComercial(setorComercial.getId(), imovelAtualizacaoCadastral.getNumeroQuadra());
		
		
			//[FS0039] Verificar Duplicidade de Inscricao
			ImovelInscricaoAlterada imovelInscricaoAlteradaDuplicado = getControladorImovel().verificarDuplicidadeImovelInscricaoAlterada(imovelAtualizacaoCadastral.getIdLocalidade(), setorComercial.getId(),
					quadra.getId(), null, Integer.valueOf(imovelAtualizacaoCadastral.getLote()), Integer.valueOf(imovelAtualizacaoCadastral.getSubLote()) );
			
			
			if ( imovelInscricaoAlteradaDuplicado != null && imovelInscricaoAlteradaDuplicado.getId() != null ) {
				//[SB0006] - Inserir Registro no retorno da Atualizacao Cadastral
				this.inserirRetornoAtualizacaoCadastral(imovel.getId(), idCliente, AtributoAtualizacaoCadastral.IMOVEL, 
						RetornoAtualizacaoCadastral.SITUACAO_PENDENTE, MensagemAtualizacaoCadastral.IMOVEL_INSCRICAO_EM_DUPLICIDADE, 
						idParametroTabelaAtualizacaoCadastro, imovelAtualizacaoCadastral, null);
			
			} else {

				ImovelInscricaoAlterada imovelInscricaoAlterada = new ImovelInscricaoAlterada();
				
				imovelInscricaoAlterada.setImovel(imovel);
				imovelInscricaoAlterada.setFaturamentoGrupo(null);
				
				//Dados da inscrição Anterior
				imovelInscricaoAlterada.setLocalidadeAnterior(imovel.getLocalidade());
				imovelInscricaoAlterada.setSetorComercialAnterior(imovel.getSetorComercial());
				imovelInscricaoAlterada.setQuadraAnterior(imovel.getQuadra());
				imovelInscricaoAlterada.setQuadraFaceAnterior(
						imovel.getQuadraFace()!=null?imovel.getQuadraFace():null);
				imovelInscricaoAlterada.setLoteAnterior(imovel.getLote());
				imovelInscricaoAlterada.setSubLoteAnterior(imovel.getSubLote());
				
				//Dados da inscrição Atual
				Localidade localidade = new Localidade();
				localidade.setId(imovelAtualizacaoCadastral.getIdLocalidade());
				imovelInscricaoAlterada.setLocalidadeAtual(localidade);
				
				
				imovelInscricaoAlterada.setSetorComercialAtual(setorComercial);
				imovelInscricaoAlterada.setQuadraAtual(quadra);
				imovelInscricaoAlterada.setLoteAtual(imovelAtualizacaoCadastral.getLote());
				imovelInscricaoAlterada.setSubLoteAtual(imovelAtualizacaoCadastral.getSubLote());
				
				imovelInscricaoAlterada.setIndicadorAtualizado(ConstantesSistema.NAO);
				imovelInscricaoAlterada.setIndicadorAtualizacaoExcluida(ConstantesSistema.NAO);
				imovelInscricaoAlterada.setIndicadorImovelExcluido(ConstantesSistema.NAO);
				imovelInscricaoAlterada.setIndicadorErroAlteracao(null);
				
				if (sistemaParametro.getIndicadorAlteracaoInscricaoImovel().toString().equals(""+ConstantesSistema.SIM)){
					
					imovelInscricaoAlterada.setIndicadorAutorizado(ConstantesSistema.NAO);
				} else {
					
					imovelInscricaoAlterada.setIndicadorAutorizado(ConstantesSistema.SIM);
				}
				
				imovelInscricaoAlterada.setDataAlteracaoOnline(new Date());
				imovelInscricaoAlterada.setDataAlteracaoBatch(new Date());
				imovelInscricaoAlterada.setUltimaAlteracao(new Date());
				
				if(imovelAtualizacaoCadastral.getCapaLoteAtualizacaoCadastral() != null){
					imovelInscricaoAlterada.setCodigoOrigem(ImovelInscricaoAlterada.DIGITACAO);
				}else{
					imovelInscricaoAlterada.setCodigoOrigem(ImovelInscricaoAlterada.TABLET);
				}
				
				repositorioUtil.inserir(imovelInscricaoAlterada);
					
			}
		} catch (ErroRepositorioException e) {
			e.printStackTrace();
			throw new ControladorException("erro.sistema",e);
		}
		return retorno;
	}
	

	/**
	  * [UC1288] Atualizar Dados Cadastrais do Imóvel pelo Recadastramento
	  *  
	  * [SBXXXX] - Inserir Registro no retorno da Atualizacao Cadastral
	  *  
	  * @author: Arthur Carvalho
	  * @date: 01/03/2012 
	  */
	public void inserirRetornoAtualizacaoCadastral(Integer idImovel, Integer idCliente, 
			Integer idAtributoAtualizacaoCadastral, Short codigoSituacao,
			Integer idMensagemAtualizacaoCadastral, Integer idParametroTabelaAtualizacaoCadastro,
			ImovelAtualizacaoCadastral imovelAtualizacaoCadastral, Integer idMedicaoTipo) 
					throws ControladorException {
		
		RetornoAtualizacaoCadastral retornoAtualizacaoCadastral = new RetornoAtualizacaoCadastral();
		
		if ( idImovel != null ) {
			Imovel imovel = new Imovel();
			imovel.setId(idImovel);
			retornoAtualizacaoCadastral.setImovel(imovel);
		}
		
		if ( idCliente != null && !idCliente.equals(Integer.valueOf("0") ) ) {
			Cliente cliente = new Cliente();
			cliente.setId(idCliente);
			retornoAtualizacaoCadastral.setCliente(cliente);
		}
		
		if(idMedicaoTipo != null){
			MedicaoTipo medicaoTipo = new MedicaoTipo();
			medicaoTipo.setId(idMedicaoTipo);
			retornoAtualizacaoCadastral.setMedicaoTipo(medicaoTipo);
		}
		
		AtributoAtualizacaoCadastral atributoAtualizacaoCadastral = new AtributoAtualizacaoCadastral();
		atributoAtualizacaoCadastral.setId(idAtributoAtualizacaoCadastral);
		retornoAtualizacaoCadastral.setAtributoAtualizacaoCadastral(atributoAtualizacaoCadastral);
		
		retornoAtualizacaoCadastral.setCodigoSituacao(codigoSituacao);
		
		MensagemAtualizacaoCadastral mensagemAtualizacaoCadastral = new MensagemAtualizacaoCadastral();
		mensagemAtualizacaoCadastral.setId(idMensagemAtualizacaoCadastral);
		retornoAtualizacaoCadastral.setMensagemAtualizacaoCadastral(mensagemAtualizacaoCadastral);
		
		ParametroTabelaAtualizacaoCadastro parametro = new ParametroTabelaAtualizacaoCadastro();
		parametro.setId(idParametroTabelaAtualizacaoCadastro);
		retornoAtualizacaoCadastral.setParametroTabelaAtualizacaoCadastro(parametro);
		
		retornoAtualizacaoCadastral.setImovelAtualizacaoCadastral(imovelAtualizacaoCadastral);
		
		retornoAtualizacaoCadastral.setUltimaAlteracao(new Date());
		try {
			repositorioUtil.inserir(retornoAtualizacaoCadastral);
		} catch (ErroRepositorioException e) {
			e.printStackTrace();
			throw new ControladorException("erro.sistema",e);
		}
	}
	
	/**
	  * [UC1288] Atualizar Dados Cadastrais do Imóvel pelo Recadastramento
	  *  
	  * [SB0008] - Validar Cliente Usuário do Imóvel
	  *  
	  * @author: Arthur Carvalho
	  * @date: 01/03/2012 
	  */
	public boolean validarClienteUsuarioDoImovel(Imovel imovel, ImovelAtualizacaoCadastral imovelAtualizacaoCadastral, Integer idCliente, 
			Integer idParametroTabelaAtualizacaoCadastro,
			Integer idCategoriaAtualizacaoCadastral, String cpfCnpj)  throws ControladorException{
		boolean retorno = true;
		
		if ( (idCategoriaAtualizacaoCadastral.equals(Categoria.COMERCIAL) || idCategoriaAtualizacaoCadastral.equals(Categoria.INDUSTRIAL) || idCategoriaAtualizacaoCadastral.equals(Categoria.PUBLICO)) 
				&& cpfCnpj != null && Util.validacaoCPF(cpfCnpj) ) {
			
			//[SB0006] - Inserir Registro no retorno da Atualizacao Cadastral
			this.inserirRetornoAtualizacaoCadastral(imovel.getId(), idCliente, AtributoAtualizacaoCadastral.CATEGORIA_SUBCATEGORIA, 
					RetornoAtualizacaoCadastral.SITUACAO_PENDENTE, MensagemAtualizacaoCadastral.IMOVEL_CATEGORIA_COM_PUB_IND_ASSOCIADO_CPF, 
					idParametroTabelaAtualizacaoCadastro, imovelAtualizacaoCadastral,null);
			retorno = false;
			
		} else if  ( idCategoriaAtualizacaoCadastral.equals(Categoria.RESIDENCIAL) && cpfCnpj != null && Util.validacaoCNPJ(cpfCnpj) ) {

			//[SB0006] - Inserir Registro no retorno da Atualizacao Cadastral
			this.inserirRetornoAtualizacaoCadastral(imovel.getId(), idCliente, AtributoAtualizacaoCadastral.CATEGORIA_SUBCATEGORIA, 
					RetornoAtualizacaoCadastral.SITUACAO_PENDENTE, MensagemAtualizacaoCadastral.IMOVEL_CATEGORIA_RES_ASSOCIADO_CNPJ, 
					idParametroTabelaAtualizacaoCadastro, imovelAtualizacaoCadastral,null);
			
			retorno = false;
		}
		
		return retorno;
	}
	
	/**
	  * [UC1288] Atualizar Dados Cadastrais do Imóvel pelo Recadastramento
	  * [SB0004] - Validar Exclusão do Imóvel 
	  *  
	  * @author: Arthur Carvalho
	  * @date: 01/03/2012 
	  */
	public void validarExclusaoImovel(Imovel imovel, ImovelAtualizacaoCadastral imovelAtualizacaoCadastral, Integer idCliente, Integer idParametroTabelaAtualizacaoCadastro) 
			throws ControladorException{
		
		//[SB0006] - Inserir Registro no retorno da Atualizacao Cadastral
		this.inserirRetornoAtualizacaoCadastral(imovel.getId(), idCliente, AtributoAtualizacaoCadastral.IMOVEL, RetornoAtualizacaoCadastral.SITUACAO_PENDENTE,
						MensagemAtualizacaoCadastral.IMOVEL_EXCLUIDO, idParametroTabelaAtualizacaoCadastro, imovelAtualizacaoCadastral,null);
		
	}
	
	/**
	  * [UC1288] Atualizar Dados Cadastrais do Imóvel pelo Recadastramento
	  *  
	  * [SB0006] - Validar Atributo Situacao do Hidrometro
	  *  
	  * @author: Arthur Carvalho
	  * @date: 01/03/2012 obterDadosHidrometroInstalacaoHistorico
	  */
	public void validarAtributoSituacaoHidrometro(Imovel imovel, Integer idCliente, Integer idParametroTabelaAtualizacaoCadastro,
			ImovelAtualizacaoCadastral imovelAtualizacaoCadastral ) throws ControladorException {
		
		try {
			
			Collection<HidrometroInstalacaoHistoricoAtualizacaoCadastral> colecaoHidrometroInstHistAtlzCad = repositorioCadastro.
					pesquisarHidrometroInstalacaoHistoricoAtualizacaoCadastral(imovelAtualizacaoCadastral.getId(), null);
			
			String numeroHidrometroLigacaoAgua = null;
			if ( imovel.getLigacaoAgua() != null && imovel.getLigacaoAgua().getHidrometroInstalacaoHistorico() != null && 
					imovel.getLigacaoAgua().getHidrometroInstalacaoHistorico().getHidrometro() != null &&  
					imovel.getLigacaoAgua().getHidrometroInstalacaoHistorico().getHidrometro().getNumero() != null &&
					!imovel.getLigacaoAgua().getHidrometroInstalacaoHistorico().getHidrometro().getNumero().equals("")) {
				
				numeroHidrometroLigacaoAgua = imovel.getLigacaoAgua().getHidrometroInstalacaoHistorico().getHidrometro().getNumero(); 
			}
			
			String nnHidrometroEsgoto = null;
			if (  imovel.getHidrometroInstalacaoHistorico() != null && imovel.getHidrometroInstalacaoHistorico().getHidrometro() != null &&  
					imovel.getHidrometroInstalacaoHistorico().getHidrometro().getNumero() != null && 
					!imovel.getHidrometroInstalacaoHistorico().getHidrometro().getNumero().equals("")) {
				
				nnHidrometroEsgoto = imovel.getHidrometroInstalacaoHistorico().getHidrometro().getNumero(); 
			}
			
			if ( colecaoHidrometroInstHistAtlzCad != null && !colecaoHidrometroInstHistAtlzCad.isEmpty() ) {
				Iterator iteratorHidrometro = colecaoHidrometroInstHistAtlzCad.iterator();
				while( iteratorHidrometro.hasNext() ) {
					
					HidrometroInstalacaoHistoricoAtualizacaoCadastral hidrometroInstHistAtlzCad = (HidrometroInstalacaoHistoricoAtualizacaoCadastral) iteratorHidrometro.next();
				
					if ( hidrometroInstHistAtlzCad.getMedicaoTipo().getId().equals(MedicaoTipo.LIGACAO_AGUA) ) {
						
						// INICIO - Validações Relacionadas à Ligação de água
						//1.3
						if ( numeroHidrometroLigacaoAgua != null && ( hidrometroInstHistAtlzCad.getNumeroHidrometro() == null ||
								hidrometroInstHistAtlzCad.getNumeroHidrometro().equals("") ) ) {
							//[SB0006] - Inserir Registro no retorno da Atualizacao Cadastral
							this.inserirRetornoAtualizacaoCadastral(imovel.getId(), idCliente, AtributoAtualizacaoCadastral.SITUACAO_HIDROMETRO, 
									RetornoAtualizacaoCadastral.SITUACAO_PENDENTE, MensagemAtualizacaoCadastral.SITUACAO_HIDROMETRO_INCONSISTENTE, 
									idParametroTabelaAtualizacaoCadastro, imovelAtualizacaoCadastral,MedicaoTipo.LIGACAO_AGUA);
							
						}//1.4
						else if ( numeroHidrometroLigacaoAgua == null && hidrometroInstHistAtlzCad.getNumeroHidrometro() != null && 
								!hidrometroInstHistAtlzCad.getNumeroHidrometro().equals("") ) {
							//1.4.1 Efetuar Instalacao do Hidrometro
							this.efetuarInstalacaoHidrometroAtualizacaoCadastral(imovel, imovelAtualizacaoCadastral,
									MedicaoTipo.LIGACAO_AGUA, idParametroTabelaAtualizacaoCadastro, hidrometroInstHistAtlzCad, false,Usuario.USUARIO_BATCH);
							
						}//1.5 
						else if ( numeroHidrometroLigacaoAgua != null && hidrometroInstHistAtlzCad.getNumeroHidrometro() != null && 
								!hidrometroInstHistAtlzCad.getNumeroHidrometro().toUpperCase().equalsIgnoreCase(numeroHidrometroLigacaoAgua.toUpperCase()) ) {
							
							//[SB0006] - Inserir Registro no retorno da Atualizacao Cadastral
							this.inserirRetornoAtualizacaoCadastral(imovel.getId(), idCliente, AtributoAtualizacaoCadastral.SITUACAO_HIDROMETRO, 
									RetornoAtualizacaoCadastral.SITUACAO_PENDENTE, MensagemAtualizacaoCadastral.SITUACAO_HIDROMETRO_INCONSISTENTE, 
									idParametroTabelaAtualizacaoCadastro, imovelAtualizacaoCadastral,MedicaoTipo.LIGACAO_AGUA);
						}
						
					} else if ( hidrometroInstHistAtlzCad.getMedicaoTipo().getId().equals(MedicaoTipo.POCO) ) {
				
						//2.3
						if (nnHidrometroEsgoto != null && (hidrometroInstHistAtlzCad.getNumeroHidrometro() == null || 
								hidrometroInstHistAtlzCad.getNumeroHidrometro().equals("") ) ) {
							
							//[SB0006] - Inserir Registro no retorno da Atualizacao Cadastral
							this.inserirRetornoAtualizacaoCadastral(imovel.getId(), idCliente, AtributoAtualizacaoCadastral.SITUACAO_HIDROMETRO, 
									RetornoAtualizacaoCadastral.SITUACAO_PENDENTE, MensagemAtualizacaoCadastral.SITUACAO_HIDROMETRO_INCONSISTENTE, 
									idParametroTabelaAtualizacaoCadastro, imovelAtualizacaoCadastral,MedicaoTipo.POCO);
							
						}//2.4
						else if ( nnHidrometroEsgoto == null && hidrometroInstHistAtlzCad.getNumeroHidrometro() != null && 
								!hidrometroInstHistAtlzCad.getNumeroHidrometro().equals("") ) {
							
							//1.4.1 Efetuar Instalacao do Hidrometro
							this.efetuarInstalacaoHidrometroAtualizacaoCadastral(imovel,  imovelAtualizacaoCadastral, MedicaoTipo.POCO, 
									idParametroTabelaAtualizacaoCadastro, hidrometroInstHistAtlzCad, false,Usuario.USUARIO_BATCH);
							
						}//2.5 
						else if ( nnHidrometroEsgoto != null && hidrometroInstHistAtlzCad.getNumeroHidrometro() != null && 
								!hidrometroInstHistAtlzCad.getNumeroHidrometro().toUpperCase().equalsIgnoreCase(nnHidrometroEsgoto.toUpperCase()) ) {
							
							//[SB0006] - Inserir Registro no retorno da Atualizacao Cadastral
							this.inserirRetornoAtualizacaoCadastral(imovel.getId(), idCliente, AtributoAtualizacaoCadastral.SITUACAO_HIDROMETRO, 
									RetornoAtualizacaoCadastral.SITUACAO_PENDENTE, MensagemAtualizacaoCadastral.SITUACAO_HIDROMETRO_INCONSISTENTE, 
									idParametroTabelaAtualizacaoCadastro, imovelAtualizacaoCadastral,MedicaoTipo.POCO);
						}
					}
				}
			} else {
				//1.3
				if ( numeroHidrometroLigacaoAgua != null ) {
					//[SB0006] - Inserir Registro no retorno da Atualizacao Cadastral
					this.inserirRetornoAtualizacaoCadastral(imovel.getId(), idCliente, AtributoAtualizacaoCadastral.SITUACAO_HIDROMETRO, 
							RetornoAtualizacaoCadastral.SITUACAO_PENDENTE, MensagemAtualizacaoCadastral.SITUACAO_HIDROMETRO_INCONSISTENTE, 
							idParametroTabelaAtualizacaoCadastro, imovelAtualizacaoCadastral,MedicaoTipo.LIGACAO_AGUA);
				
				}
				
				if ( nnHidrometroEsgoto != null ) {
					//[SB0006] - Inserir Registro no retorno da Atualizacao Cadastral
					this.inserirRetornoAtualizacaoCadastral(imovel.getId(), idCliente, AtributoAtualizacaoCadastral.SITUACAO_HIDROMETRO, 
							RetornoAtualizacaoCadastral.SITUACAO_PENDENTE, MensagemAtualizacaoCadastral.SITUACAO_HIDROMETRO_INCONSISTENTE, 
							idParametroTabelaAtualizacaoCadastro, imovelAtualizacaoCadastral,MedicaoTipo.POCO);
				}
			}
		} catch (ErroRepositorioException e) {
			e.printStackTrace();
			throw new ControladorException("erro.sistema",e);
		}
	}

	/**
	 * [UC1292] Efetuar Instalação de Hidrômetro para Atualização Cadastral
	 * 
	 * @author Arthur Carvalho
	 * @since 07/02/2012
	 */
	public void efetuarInstalacaoHidrometroAtualizacaoCadastral(Imovel imovel, 
			ImovelAtualizacaoCadastral imovelAtualizacaoCadastral, Integer medicaoTipo,
			Integer idParametroTabelaAtualizacaoCadastro, 
			HidrometroInstalacaoHistoricoAtualizacaoCadastral hidrometroInstHistAtlzCad, 
			boolean funcionalidadeOnline, Usuario usuarioLogado) throws ControladorException {
		
		try{
			boolean validacaoPermitida = true;

			
			//[FS0004] - Verificar Preenchimento dos Campos
			if (!this.verificarCamposObrigatoriosHidrometroInstalacaoHistoricoAtualizacaoCadastral( imovel, 
					 idParametroTabelaAtualizacaoCadastro, imovelAtualizacaoCadastral, hidrometroInstHistAtlzCad,medicaoTipo, funcionalidadeOnline) ) {
				 validacaoPermitida = false;
			}
				
			//[FS0001] - Verificar Situação do Hidrômetro
			Hidrometro hidrometro = repositorioCadastro.pesquisarHidrometroPeloNumero(hidrometroInstHistAtlzCad.getNumeroHidrometro());  
			if ( !this.verificarSituacaoHidrometro(imovel, idParametroTabelaAtualizacaoCadastro, hidrometro, imovelAtualizacaoCadastral,medicaoTipo, funcionalidadeOnline) ) {
				validacaoPermitida = false;
			}

			//[FS0002 - Verificar a situação de água ou esgoto]
			if ( !this.verificarSituacaoAguaEsgoto(imovel, idParametroTabelaAtualizacaoCadastro, medicaoTipo, imovelAtualizacaoCadastral, funcionalidadeOnline) ) {
				validacaoPermitida = false;
			}
						
			// [FS0003] - Verificar a Existência de Hidrômetro no Imóvel/Ligação de água.
			if( !this.verificarExistenciaHidrometroAtualizacaoCadastral(imovel, idParametroTabelaAtualizacaoCadastro, medicaoTipo, imovelAtualizacaoCadastral, funcionalidadeOnline) ) {
				validacaoPermitida = false;
			}
					
			if ( validacaoPermitida ) {
				
				//[SB0001] - Gerar Histórico de Instalação do Hidrômetro
				HidrometroInstalacaoHistorico hidrometroInstalacaoHistorico = this.inserirHidrometroInstalacaoHistorico(
						hidrometroInstHistAtlzCad, hidrometro, imovel);
				
				//[SB0002] - Atualizar Imóvel/Ligação de Água.
				this.atualizarImovelLigacaoAguaAtualizacaoCadastral(hidrometroInstHistAtlzCad.getMedicaoTipo().getId(), imovel.getId(), hidrometroInstalacaoHistorico.getId());
				
				//[SB0003] - Atualizar Hidrômetro:
				HidrometroSituacao hidrometroSituacao = new HidrometroSituacao();
				hidrometroSituacao.setId(HidrometroSituacao.INSTALADO);
				hidrometro.setHidrometroSituacao(hidrometroSituacao);
				hidrometroSituacao.setUltimaAlteracao(new Date());
				repositorioUtil.atualizar(hidrometro);
				
				//[SB0006] - Verificar Situação Especial Faturamento
				getControladorAtendimentoPublico().verificarStuacaoEspecialFaturamento(imovel, null, usuarioLogado.getId());
				
				if (!funcionalidadeOnline){
					//[SB0006] - Inserir Registro no retorno da Atualizacao Cadastral
					this.inserirRetornoAtualizacaoCadastral(imovel.getId(), null, AtributoAtualizacaoCadastral.SITUACAO_HIDROMETRO, 
							RetornoAtualizacaoCadastral.SITUACAO_ATUALIZADO, MensagemAtualizacaoCadastral.ATUALIZACAO_COM_SUCESSO, 
							idParametroTabelaAtualizacaoCadastro, imovelAtualizacaoCadastral,hidrometroInstHistAtlzCad.getMedicaoTipo().getId());
				}
			}
			
		} catch (ErroRepositorioException e) {
			e.printStackTrace();
			throw new ControladorException("erro.sistema",e);
		}
	}
		
	/**
	 * [UC1292] Efetuar Instalação de Hidrômetro para Atualização Cadastral
	 * 
	 * [FS0001 - Verificar preenchimento dos campos] 
	 * 
	 * @author Arthur Carvalho
	 * @since 07/03/2012
	 */
	public boolean verificarSituacaoHidrometro(Imovel imovel , Integer idParametroTabelaAtualizacaoCadastro,
			Hidrometro hidrometro, ImovelAtualizacaoCadastral imovelAtualizacaoCadastral,Integer medicaoTipo, boolean funcionalidadeOnline) throws ControladorException{
		
		boolean retorno = true;
		
		//1
		if ( hidrometro == null || hidrometro.getId() == null ) {

			if ( funcionalidadeOnline ) {
				throw new ControladorException("atencao.hidrometro_inexistente_estoque");
			} else {
				//[SB0006] - Inserir Registro no retorno da Atualizacao Cadastral
				this.inserirRetornoAtualizacaoCadastral(imovel.getId(), null, AtributoAtualizacaoCadastral.SITUACAO_HIDROMETRO, 
						RetornoAtualizacaoCadastral.SITUACAO_PENDENTE, MensagemAtualizacaoCadastral.HIDROMETRO_INEXISTENTE, 
						idParametroTabelaAtualizacaoCadastro, imovelAtualizacaoCadastral,medicaoTipo);
				retorno = false;
			}
		} else { 
			
			String idImovel = getControladorMicromedicao().pesquisarImovelHidrometroInstalado(hidrometro.getId());
			if(idImovel != null && !idImovel.equals("")){
				
				if ( funcionalidadeOnline ) {
					throw new ControladorException("atencao.hidrometro_nao_disponivel");
				} else {
					//[SB0006] - Inserir Registro no retorno da Atualizacao Cadastral
					this.inserirRetornoAtualizacaoCadastral(imovel.getId(),null, AtributoAtualizacaoCadastral.SITUACAO_HIDROMETRO, 
							RetornoAtualizacaoCadastral.SITUACAO_PENDENTE, MensagemAtualizacaoCadastral.HIDROMETRO_JA_INSTALADO_OUTRO_IMOVEL, 
							idParametroTabelaAtualizacaoCadastro, imovelAtualizacaoCadastral,medicaoTipo);
					retorno = false;
				}
				
			}else if ( !hidrometro.getHidrometroSituacao().getId().equals(HidrometroSituacao.DISPONIVEL) ) {
				
				if ( funcionalidadeOnline ) {
					throw new ControladorException("atencao.hidrometro_nao_disponivel");
				} else {
					//[SB0006] - Inserir Registro no retorno da Atualizacao Cadastral
					this.inserirRetornoAtualizacaoCadastral(imovel.getId(), null,AtributoAtualizacaoCadastral.SITUACAO_HIDROMETRO, 
							RetornoAtualizacaoCadastral.SITUACAO_PENDENTE, MensagemAtualizacaoCadastral.HIDROMETRO_NAO_PODE_SER_INSTALADO, 
							idParametroTabelaAtualizacaoCadastro, imovelAtualizacaoCadastral,medicaoTipo);
					retorno = false;
				}
			} 
			
//			if (hidrometro.getHidrometroLocalArmazenagem() != null && imovel.getLocalidade().getHidrometroLocalArmazenagem() != null && 
//					hidrometro.getHidrometroLocalArmazenagem().getId() != null && imovel.getLocalidade().getHidrometroLocalArmazenagem().getId() != null &&
//					!hidrometro.getHidrometroLocalArmazenagem().getId().equals(imovel.getLocalidade().getHidrometroLocalArmazenagem().getId()) ) {
//			
//				//[SB0006] - Inserir Registro no retorno da Atualizacao Cadastral
//				this.inserirRetornoAtualizacaoCadastral(imovel.getId(), idCliente, AtributoAtualizacaoCadastral.SITUACAO_HIDROMETRO, 
//						RetornoAtualizacaoCadastral.SITUACAO_PENDENTE, MensagemAtualizacaoCadastral.HIDROMETRO_NAO_ESTA_NA_LOCALIDADE_DO_IMOVEL, 
//						idParametroTabelaAtualizacaoCadastro, imovelAtualizacaoCadastral);
//				retorno = false;
//			}
		}
		return retorno;
	}
	/**
	 * [UC1292] Efetuar Instalação de Hidrômetro para Atualização Cadastral
	 * 
	 * [FS0002 - Verificar situação do hidrômetro]
	 * 
	 * @author Arthur Carvalho
	 * @since 07/03/2012
	 */
	public boolean verificarSituacaoAguaEsgoto(Imovel imovel , Integer idParametroTabelaAtualizacaoCadastro,
			Integer medicaoTipo, ImovelAtualizacaoCadastral imovelAtualizacaoCadastral, boolean funcionalidadeOnline) throws ControladorException{
		
		boolean retorno = true;
		
		if ( medicaoTipo.equals(MedicaoTipo.POCO) ) {
			if ( !imovel.getLigacaoEsgotoSituacao().getId().equals(LigacaoEsgotoSituacao.LIGADO) ) {

				if ( funcionalidadeOnline ) {
					throw new ControladorException("atencao.situacao_ligacao_esgoto_invalida_instalar_hidrometro");
				} else {
					//[SB0006] - Inserir Registro no retorno da Atualizacao Cadastral
					this.inserirRetornoAtualizacaoCadastral(imovel.getId(), null, AtributoAtualizacaoCadastral.SITUACAO_LIGACAO_ESGOTO, 
							RetornoAtualizacaoCadastral.SITUACAO_PENDENTE, MensagemAtualizacaoCadastral.SITUACAO_LIGACAO_ESGOTO_INVALIDA, 
							idParametroTabelaAtualizacaoCadastro, imovelAtualizacaoCadastral,MedicaoTipo.POCO);
					retorno = false;
				}
			} 
	
		} else if ( medicaoTipo.equals(MedicaoTipo.LIGACAO_AGUA) ){
				
			if ( !imovel.getLigacaoAguaSituacao().getId().equals(LigacaoAguaSituacao.LIGADO) && 
						!imovel.getLigacaoAguaSituacao().getId().equals(LigacaoAguaSituacao.LIGADO_EM_ANALISE) &&
						!imovel.getLigacaoAguaSituacao().getId().equals(LigacaoAguaSituacao.CORTADO)) {
				
				if ( funcionalidadeOnline ) {
					throw new ControladorException("atencao.situacao_ligacao_agua_invalida_instalar_hidrometro");
				} else {
					//[SB0006] - Inserir Registro no retorno da Atualizacao Cadastral
					this.inserirRetornoAtualizacaoCadastral(imovel.getId(), null, AtributoAtualizacaoCadastral.SITUACAO_LIGACAO_AGUA, 
							RetornoAtualizacaoCadastral.SITUACAO_PENDENTE, MensagemAtualizacaoCadastral.SITUACAO_LIGACAO_AGUA_INVALIDA, 
							idParametroTabelaAtualizacaoCadastro, imovelAtualizacaoCadastral,MedicaoTipo.LIGACAO_AGUA);
					retorno = false;
				}
			}
		}
		return retorno;
	}
	
	/**
	 * [UC1292] Efetuar Instalação de Hidrômetro para Atualização Cadastral
	 * 
	 * [FS0003] - Verificar a Existência de Hidrômetro no Imóvel/Ligação de água.
	 * 
	 * @author Arthur Carvalho
	 * @since 07/03/2012
	 */
	public boolean verificarExistenciaHidrometroAtualizacaoCadastral(Imovel imovel , Integer idParametroTabelaAtualizacaoCadastro,
			Integer medicaoTipo, ImovelAtualizacaoCadastral imovelAtualizacaoCadastral, boolean funcionalidadeOnline) throws ControladorException{
		
		boolean retorno = true;
		
		if ( medicaoTipo.equals(MedicaoTipo.POCO) && imovel.getHidrometroInstalacaoHistorico() != null && imovel.getHidrometroInstalacaoHistorico().getId() != null ) {
			if ( funcionalidadeOnline ) {
				throw new ControladorException("atencao.imovel_possui_hidrometro_no_poco");
			} else {
				//[SB0006] - Inserir Registro no retorno da Atualizacao Cadastral
				this.inserirRetornoAtualizacaoCadastral(imovel.getId(), null, AtributoAtualizacaoCadastral.SITUACAO_HIDROMETRO, 
						RetornoAtualizacaoCadastral.SITUACAO_PENDENTE, MensagemAtualizacaoCadastral.HIDROMETRO_INSTALADO_POCO, 
						idParametroTabelaAtualizacaoCadastro, imovelAtualizacaoCadastral,medicaoTipo);
				retorno = false;		
			}
		}
		
		if ( medicaoTipo.equals(MedicaoTipo.LIGACAO_AGUA) && imovel.getLigacaoAgua() != null && imovel.getLigacaoAgua().getHidrometroInstalacaoHistorico() != null 
				&& imovel.getLigacaoAgua().getHidrometroInstalacaoHistorico().getId() != null ) {
			if ( funcionalidadeOnline ) {
				throw new ControladorException("atencao.ligacao_agua_possui_hidrometro");
			} else {
				//[SB0006] - Inserir Registro no retorno da Atualizacao Cadastral
				this.inserirRetornoAtualizacaoCadastral(imovel.getId(), null, AtributoAtualizacaoCadastral.SITUACAO_HIDROMETRO, 
						RetornoAtualizacaoCadastral.SITUACAO_PENDENTE, MensagemAtualizacaoCadastral.HIDROMETRO_INSTALADO_LIGACAO_AGUA, 
						idParametroTabelaAtualizacaoCadastro, imovelAtualizacaoCadastral,medicaoTipo);
				retorno = false;
			}
		}
		
		return retorno;
	}
	
	/**
	 * [UC1292] Efetuar Instalação de Hidrômetro para Atualização Cadastral
	 * 
	 * [FS0004 - Verificar preenchimento dos campos] 
	 * 
	 * @author Arthur Carvalho
	 * @since 07/03/2012
	 */
	public boolean verificarCamposObrigatoriosHidrometroInstalacaoHistoricoAtualizacaoCadastral(Imovel imovel ,  
			Integer idParametroTabelaAtualizacaoCadastro, ImovelAtualizacaoCadastral imovelAtualizacaoCadastral, 
			HidrometroInstalacaoHistoricoAtualizacaoCadastral hidrometroInstHistAtlzCad, Integer medicaoTipo, boolean funcionalidadeOnline) throws ControladorException{
		
		boolean retorno = true;
//		if ( hidrometroInstHistAtlzCad.getNumeroHidrometro()  == null 
//			|| hidrometroInstHistAtlzCad.getDataInstalacaoHidrometro() == null  
//			|| hidrometroInstHistAtlzCad.getMedicaoTipo() == null 
//			|| hidrometroInstHistAtlzCad.getHidrometroLocalInstalacao() == null 
//			|| hidrometroInstHistAtlzCad.getHidrometroProtecao() == null 
//			|| hidrometroInstHistAtlzCad.getNumeroInstalacaoHidrometro() == null ) {
//			
//			//[SB0006] - Inserir Registro no retorno da Atualizacao Cadastral
//			this.inserirRetornoAtualizacaoCadastral(imovel.getId(), idCliente, 
//					AtributoAtualizacaoCadastral.SITUACAO_HIDROMETRO, 
//					RetornoAtualizacaoCadastral.SITUACAO_PENDENTE, 
//					MensagemAtualizacaoCadastral.INFORMACAO_OBRIGATORIA, 
//					idParametroTabelaAtualizacaoCadastro, imovelAtualizacaoCadastral);
//			retorno = false;
//		}
		
		if ( hidrometroInstHistAtlzCad.getNumeroHidrometro()  == null) {
			
			if ( funcionalidadeOnline ) {
				throw new ControladorException("atencao.ligacao_agua_possui_hidrometro");
			} else {
				//[SB0006] - Inserir Registro no retorno da Atualizacao Cadastral
				this.inserirRetornoAtualizacaoCadastral(imovel.getId(), null, 
						AtributoAtualizacaoCadastral.NUMERO_HIDROMETRO, 
						RetornoAtualizacaoCadastral.SITUACAO_PENDENTE, 
						MensagemAtualizacaoCadastral.INFORMACAO_OBRIGATORIA, 
						idParametroTabelaAtualizacaoCadastro, imovelAtualizacaoCadastral,medicaoTipo);
				retorno = false;
			}
		}
		if ( hidrometroInstHistAtlzCad.getDataInstalacaoHidrometro()  == null) {
			
			//comentado por Vivianne Sousa - 05/09/2012  
			//tela de digitação não tem essa informação, usar data corrente
			hidrometroInstHistAtlzCad.setDataInstalacaoHidrometro(new Date());
						
//			//[SB0006] - Inserir Registro no retorno da Atualizacao Cadastral
//			this.inserirRetornoAtualizacaoCadastral(imovel.getId(), idCliente, 
//					AtributoAtualizacaoCadastral.DATA_INST_HIDROMETRO, 
//					RetornoAtualizacaoCadastral.SITUACAO_PENDENTE, 
//					MensagemAtualizacaoCadastral.INFORMACAO_OBRIGATORIA, 
//					idParametroTabelaAtualizacaoCadastro, imovelAtualizacaoCadastral,medicaoTipo);
//			retorno = false;
		}
		if ( hidrometroInstHistAtlzCad.getMedicaoTipo()  == null) {
			if ( funcionalidadeOnline ) {
				throw new ControladorException("atencao.ligacao_agua_possui_hidrometro");
			} else {
				//[SB0006] - Inserir Registro no retorno da Atualizacao Cadastral
				this.inserirRetornoAtualizacaoCadastral(imovel.getId(), null, 
						AtributoAtualizacaoCadastral.HIDROMETRO_MEDICAO_TIPO, 
						RetornoAtualizacaoCadastral.SITUACAO_PENDENTE, 
						MensagemAtualizacaoCadastral.INFORMACAO_OBRIGATORIA, 
						idParametroTabelaAtualizacaoCadastro, imovelAtualizacaoCadastral,medicaoTipo);
				retorno = false;
			}
		}
		if ( hidrometroInstHistAtlzCad.getHidrometroLocalInstalacao()  == null) {
			if ( funcionalidadeOnline ) {
				throw new ControladorException("atencao.ligacao_agua_possui_hidrometro");
			} else {
				//[SB0006] - Inserir Registro no retorno da Atualizacao Cadastral
				this.inserirRetornoAtualizacaoCadastral(imovel.getId(), null, 
						AtributoAtualizacaoCadastral.LOCAL_INST_HIDROMETRO, 
						RetornoAtualizacaoCadastral.SITUACAO_PENDENTE, 
						MensagemAtualizacaoCadastral.INFORMACAO_OBRIGATORIA, 
						idParametroTabelaAtualizacaoCadastro, imovelAtualizacaoCadastral,medicaoTipo);
				retorno = false;
			}
		}
		if (  hidrometroInstHistAtlzCad.getHidrometroProtecao()  == null) {
			if ( funcionalidadeOnline ) {
				throw new ControladorException("atencao.ligacao_agua_possui_hidrometro");
			} else {
				//[SB0006] - Inserir Registro no retorno da Atualizacao Cadastral
				this.inserirRetornoAtualizacaoCadastral(imovel.getId(), null, 
						AtributoAtualizacaoCadastral.PROTECAO_HIDROMETRO, 
						RetornoAtualizacaoCadastral.SITUACAO_PENDENTE, 
						MensagemAtualizacaoCadastral.INFORMACAO_OBRIGATORIA, 
						idParametroTabelaAtualizacaoCadastro, imovelAtualizacaoCadastral,medicaoTipo);
				retorno = false;
			}
		}
		if ( hidrometroInstHistAtlzCad.getNumeroInstalacaoHidrometro()  == null) {
			if ( funcionalidadeOnline ) {
				throw new ControladorException("atencao.ligacao_agua_possui_hidrometro");
			} else {
				//[SB0006] - Inserir Registro no retorno da Atualizacao Cadastral
				this.inserirRetornoAtualizacaoCadastral(imovel.getId(), null, 
						AtributoAtualizacaoCadastral.LEITURA_INST_HIDROMETRO, 
						RetornoAtualizacaoCadastral.SITUACAO_PENDENTE, 
						MensagemAtualizacaoCadastral.INFORMACAO_OBRIGATORIA, 
						idParametroTabelaAtualizacaoCadastro, imovelAtualizacaoCadastral,medicaoTipo);
				retorno = false;
			}
		}
		
		return retorno;
	}
		
	/**
	 * [UC1292] Efetuar Instalação de Hidrômetro para Atualização Cadastral
	 * 
	 * [SB0001 - Gerar Histórico de Instalação do Hidrômetro] 
	 * 
	 * @author Arthur Carvalho
	 * @since 07/03/2012
	 */
	public HidrometroInstalacaoHistorico inserirHidrometroInstalacaoHistorico(
			HidrometroInstalacaoHistoricoAtualizacaoCadastral hidrometroInstHistAtlzCad, Hidrometro hidrometro,
			Imovel imovel ) throws ControladorException {
		
		HidrometroInstalacaoHistorico hidrometroInstalacaoHistorico = criarObjetoHidrometroInstalacaoHistorico(
				hidrometroInstHistAtlzCad, hidrometro, imovel);		
		
		Integer idHidrometroInstalacaoHistorico = (Integer) getControladorUtil().inserir(hidrometroInstalacaoHistorico);
		hidrometroInstalacaoHistorico.setId(idHidrometroInstalacaoHistorico);
		return hidrometroInstalacaoHistorico;
	}
	/**
	 * [UC1292] Efetuar Instalação de Hidrômetro para Atualização Cadastral
	 * 
	 * [SB0001 - Gerar Histórico de Instalação do Hidrômetro] 
	 * 
	 * @author Arthur Carvalho
	 * @since 07/03/2012
	 */
	public HidrometroInstalacaoHistorico criarObjetoHidrometroInstalacaoHistorico(
			HidrometroInstalacaoHistoricoAtualizacaoCadastral hidrometroInstHistAtlzCad,
			Hidrometro hidrometro, Imovel imovel) {
		HidrometroInstalacaoHistorico hidrometroInstalacaoHistorico = new HidrometroInstalacaoHistorico();
		
		hidrometroInstalacaoHistorico.setHidrometro(hidrometro);
		
		hidrometroInstalacaoHistorico.setDataInstalacao(hidrometroInstHistAtlzCad.getDataInstalacaoHidrometro());
		
		hidrometroInstalacaoHistorico.setNumeroLeituraInstalacao(hidrometroInstHistAtlzCad.getNumeroInstalacaoHidrometro());
		
		hidrometroInstalacaoHistorico.setMedicaoTipo(hidrometroInstHistAtlzCad.getMedicaoTipo());
		
		hidrometroInstalacaoHistorico.setRateioTipo(null);
		
		hidrometroInstalacaoHistorico.setHidrometroLocalInstalacao(hidrometroInstHistAtlzCad.getHidrometroLocalInstalacao());
		
		hidrometroInstalacaoHistorico.setHidrometroProtecao(hidrometroInstHistAtlzCad.getHidrometroProtecao());
		
		hidrometroInstalacaoHistorico.setDataRetirada(null);
		
		hidrometroInstalacaoHistorico.setNumeroLeituraRetirada(null);
		
		hidrometroInstalacaoHistorico.setDataImplantacaoSistema(new Date());
		
		hidrometroInstalacaoHistorico.setNumeroLeituraCorte(null);
		
		hidrometroInstalacaoHistorico.setIndicadorExistenciaCavalete(ConstantesSistema.NAO);
		
		hidrometroInstalacaoHistorico.setIndicadorInstalcaoSubstituicao(ConstantesSistema.SIM);
		
		hidrometroInstalacaoHistorico.setNumeroLeituraSupressao(null);
		
		hidrometroInstalacaoHistorico.setUltimaAlteracao(new Date());
		
		if ( hidrometroInstHistAtlzCad.getMedicaoTipo().getId().equals(MedicaoTipo.POCO) ) {
			
			hidrometroInstalacaoHistorico.setImovel(imovel);
		} else {
			LigacaoAgua ligacaoAgua = new LigacaoAgua();
			ligacaoAgua.setId(imovel.getId());
			hidrometroInstalacaoHistorico.setLigacaoAgua(ligacaoAgua);
		}
		
		hidrometroInstalacaoHistorico.setNumeroSelo(null);
		hidrometroInstalacaoHistorico.setUsuarioInstalacao(null);
		hidrometroInstalacaoHistorico.setUsuarioRetirada(null);
		hidrometroInstalacaoHistorico.setNumeroLacre(null);
		hidrometroInstalacaoHistorico.setIndicadorMedicaoTelemedido(ConstantesSistema.NAO);
		return hidrometroInstalacaoHistorico;
	}
	
	/**
	 * [UC1292] Efetuar Instalação de Hidrômetro para Atualização Cadastral
	 * 
	 * [SB0002 - Atualizar Imóvel/Ligação de Água]
	 * 
	 * @author Arthur Carvalho
	 * @since 07/03/2012
	 */
	public void atualizarImovelLigacaoAguaAtualizacaoCadastral(Integer medicaoTipo,
			Integer idImovel , Integer idHidrometroInstalacaoHistorico) throws ControladorException {
		try {

			if ( medicaoTipo.equals(MedicaoTipo.POCO) ) {
				repositorioCadastro.atualizarImovel(idImovel, idHidrometroInstalacaoHistorico);
			} else {
				repositorioCadastro.atualizarLigacaoAgua(idImovel, idHidrometroInstalacaoHistorico);
			}
			
		} catch (ErroRepositorioException e) {
			e.printStackTrace();
			throw new ControladorException("erro.sistema",e);
		}
	}
	
	/**
	 * [UC1291] Efetuar Ligação Água Atualização Cadastral
	 * 
	 * @author Arthur Carvalho
	 * @since 07/02/2012
	 */
	public boolean efetuarLigacaoAguaAtualizacaoCadastral(Imovel imovel, Integer idParametroTabelaAtualizacaoCadastro, 
			ImovelAtualizacaoCadastral imovelAtualizacaoCadastral, Collection<ParametrosTransacaoBatchHelper> colecaoHelper) throws ControladorException {
		boolean validacaoPermitida = true;
			
		//FS0001 - Validar Situação de Água do Imóvel
//		if ( !imovel.getLigacaoAguaSituacao().getId().equals(LigacaoAguaSituacao.POTENCIAL) && 
//				!imovel.getLigacaoAguaSituacao().getId().equals(LigacaoAguaSituacao.FACTIVEL) &&
//				!imovel.getLigacaoAguaSituacao().getId().equals(LigacaoAguaSituacao.EM_FISCALIZACAO) ) {
//			
//			//[SB0006] - Inserir Registro no retorno da Atualizacao Cadastral
//			this.inserirRetornoAtualizacaoCadastral(imovel.getId(), idCliente, AtributoAtualizacaoCadastral.SITUACAO_LIGACAO_AGUA, 
//					RetornoAtualizacaoCadastral.SITUACAO_PENDENTE, MensagemAtualizacaoCadastral.SITUACAO_LIGACAO_AGUA_INVALIDA_PARA_EFETUAR_LIGACAO, 
//					idParametroTabelaAtualizacaoCadastro, imovelAtualizacaoCadastral);
//			
//			validacaoPermitida = false;
//		}
		
		
//		if ( validacaoPermitida ) {
			
			try {
				//PE20140110166 - Vivianne Sousa - 11/04/2014
				//2.Caso não exista rede de água na quadra do imóvel 
				if ( imovel.getQuadra().getIndicadorRedeAgua().equals(Quadra.SEM_REDE) ) {
					
					if(imovelAtualizacaoCadastral != null && imovelAtualizacaoCadastral.getIndicadorImovelNovo().equals(ConstantesSistema.SIM)){
						
						LigacaoAguaSituacao ligacaoAguaSituacao = new LigacaoAguaSituacao();
						ligacaoAguaSituacao.setId(LigacaoAguaSituacao.POTENCIAL);
						
						imovel.setLigacaoAguaSituacao(ligacaoAguaSituacao);
						imovel.setUltimaAlteracao(new Date());
						repositorioUtil.atualizar(imovel);
					}
					
				}else{
					
					//SB0001 - Gerar Ligacao de Água
					LigacaoAguaDiametro ligacaoAguaDiametro = new LigacaoAguaDiametro();
					ligacaoAguaDiametro.setId(LigacaoAguaDiametro.MEIA_POLEGADA);
					
					LigacaoAguaPerfil ligacaoAguaPerfil = new LigacaoAguaPerfil();
					ligacaoAguaPerfil.setId(LigacaoAguaPerfil.NORMAL);
					
					LigacaoAguaMaterial ligacaoAguaMaterial = new LigacaoAguaMaterial();
					ligacaoAguaMaterial.setId(LigacaoAguaMaterial.PVC_SOLDAVEL);
					
					if ( imovel.getLigacaoAgua() != null && imovel.getLigacaoAgua().getId() != null ) {
						
						LigacaoAgua ligacaoAgua = imovel.getLigacaoAgua(); 
						ligacaoAgua.setLigacaoAguaDiametro(ligacaoAguaDiametro);
						ligacaoAgua.setLigacaoAguaMaterial(ligacaoAguaMaterial);
						ligacaoAgua.setLigacaoAguaPerfil(ligacaoAguaPerfil);
						repositorioUtil.atualizar(ligacaoAgua);
						
					} else {
						
						LigacaoAgua ligacaoAgua = new LigacaoAgua(imovel.getId(), new Date(), new Date(), null, null, null, null, null, new Date(), null, null, null, null, imovel, null, null, ligacaoAguaPerfil, null, ligacaoAguaDiametro, null, ligacaoAguaMaterial, null, null);
						repositorioUtil.inserir(ligacaoAgua);
					}
			
					//SB0002 - Atualizar Imovel
					LigacaoAguaSituacao ligacaoAguaSituacao = new LigacaoAguaSituacao();
					ligacaoAguaSituacao.setId(LigacaoAguaSituacao.LIGADO);

					if ( !imovel.getLigacaoAguaSituacao().getId().equals(ligacaoAguaSituacao.getId()) ) {
						ParametrosTransacaoBatchHelper situacaoAguaTransacao = new ParametrosTransacaoBatchHelper(
								String.valueOf(imovel.getLigacaoAguaSituacao().getDescricao()), "LIGADO", TabelaColuna.LIGACAO_AGUA_SITUACAO_ID_TABELA_IMOVEL);
						colecaoHelper.add(situacaoAguaTransacao);
					}
					
					imovel.setLigacaoAguaSituacao(ligacaoAguaSituacao);
					imovel.setUltimaAlteracao(new Date());
					if (imovel.getLigacaoEsgotoSituacao().getId().equals(LigacaoEsgotoSituacao.LIG_FORA_DE_USO) ) {
						
						LigacaoEsgotoSituacao ligacaoEsgotoSituacao = new LigacaoEsgotoSituacao();
						ligacaoEsgotoSituacao.setId(LigacaoEsgotoSituacao.LIGADO);
						imovel.setLigacaoEsgotoSituacao(ligacaoEsgotoSituacao);
					}
					repositorioUtil.atualizar(imovel);
				
					//FS0003 - Verificar situação de rede de água da quadra
//					if ( imovel.getQuadra().getIndicadorRedeAgua().equals(ConstantesSistema.NAO) ) {
//						Quadra quadra = imovel.getQuadra();
//						quadra.setIndicadorRedeAgua(ConstantesSistema.SIM);
//						repositorioUtil.atualizar(quadra);
//					}
				}

				
				//[SB0006] - Inserir Registro no retorno da Atualizacao Cadastral
				this.inserirRetornoAtualizacaoCadastral(imovel.getId(), null, AtributoAtualizacaoCadastral.SITUACAO_LIGACAO_AGUA, 
						RetornoAtualizacaoCadastral.SITUACAO_ATUALIZADO, MensagemAtualizacaoCadastral.ATUALIZACAO_COM_SUCESSO, 
						idParametroTabelaAtualizacaoCadastro, imovelAtualizacaoCadastral,null);
				
			} catch (ErroRepositorioException e) {
				e.printStackTrace();
				throw new ControladorException("erro.sistema",e);
			}
//		}
		return validacaoPermitida;
	}
		
	/**
	 * [UC1294] Efetuar Ligação Esgoto Atualização Cadastral
	 * 
	 * @author Arthur Carvalho
	 * @since 07/02/2012
	 */
	public boolean efetuarLigacaoEsgotoAtualizacaoCadastral(Imovel imovel, ImovelAtualizacaoCadastral imovelAtualizacaoCadastral, Integer medicaoTipo,
			Integer idParametroTabelaAtualizacaoCadastro, Collection<ParametrosTransacaoBatchHelper> colecaoHelper) throws ControladorException {
		
		boolean validacaoPermitida = true;
			
//		//FS0001 - Validar Situação de Água do Imóvel
//		if ( !imovel.getLigacaoEsgotoSituacao().getId().equals(LigacaoEsgotoSituacao.POTENCIAL) && 
//				!imovel.getLigacaoEsgotoSituacao().getId().equals(LigacaoEsgotoSituacao.FACTIVEL) &&
//				!imovel.getLigacaoEsgotoSituacao().getId().equals(LigacaoEsgotoSituacao.EM_FISCALIZACAO) ) {
//			
//			//[SB0006] - Inserir Registro no retorno da Atualizacao Cadastral
//			this.inserirRetornoAtualizacaoCadastral(imovel.getId(), idCliente, AtributoAtualizacaoCadastral.SITUACAO_LIGACAO_ESGOTO, 
//					RetornoAtualizacaoCadastral.SITUACAO_PENDENTE, MensagemAtualizacaoCadastral.SITUACAO_LIGACAO_ESGOTO_INVALIDA_PARA_EFETUAR_LIGACAO, 
//					idParametroTabelaAtualizacaoCadastro, imovelAtualizacaoCadastral);
//			
//			validacaoPermitida = false;
//		}
//		
//		
//		if ( validacaoPermitida ) {
			
			try {

				//PE20140110166 - Vivianne Sousa - 11/04/2014
				//2.Caso não exista rede de esgoto na quadra do imóvel 
				if ( imovel.getQuadra().getIndicadorRedeEsgoto().equals(Quadra.SEM_REDE) ) {
					
					if(imovelAtualizacaoCadastral != null && imovelAtualizacaoCadastral.getIndicadorImovelNovo().equals(ConstantesSistema.SIM)){
					
						LigacaoEsgotoSituacao ligacaoEsgotoSituacao = new LigacaoEsgotoSituacao();
						ligacaoEsgotoSituacao.setId(LigacaoEsgotoSituacao.POTENCIAL);
						
						imovel.setLigacaoEsgotoSituacao(ligacaoEsgotoSituacao);
						imovel.setUltimaAlteracao(new Date());
						repositorioUtil.atualizar(imovel);
					
					}
					
				}else{
					//SB0001 - Gerar Ligacao de Esgoto
					LigacaoEsgotoDiametro ligacaoEsgotoDiametro = new LigacaoEsgotoDiametro();
					ligacaoEsgotoDiametro.setId(LigacaoEsgotoDiametro.QUATRO_POLEGADAs);
					
					LigacaoEsgotoPerfil ligacaoEsgotoPerfil = new LigacaoEsgotoPerfil();
					ligacaoEsgotoPerfil.setId(LigacaoEsgotoPerfil.CONVENCIONAL);
					
					LigacaoEsgotoMaterial ligacaoEsgotoMaterial = new LigacaoEsgotoMaterial();
					ligacaoEsgotoMaterial.setId(LigacaoEsgotoMaterial.PVC);
					
					if ( imovel.getLigacaoEsgoto()!= null && imovel.getLigacaoEsgoto().getId() != null ) {
						
						LigacaoEsgoto ligacaoEsgoto = imovel.getLigacaoEsgoto(); 
						ligacaoEsgoto.setLigacaoEsgotoDiametro(ligacaoEsgotoDiametro);
						ligacaoEsgoto.setLigacaoEsgotoMaterial(ligacaoEsgotoMaterial);
						ligacaoEsgoto.setLigacaoEsgotoPerfil(ligacaoEsgotoPerfil);
						repositorioUtil.atualizar(ligacaoEsgoto);
						
					} else {
						
						BigDecimal cemPorcento = new BigDecimal(100);
						LigacaoEsgoto ligacaoEsgoto = new LigacaoEsgoto(imovel.getId(), new Date(), null, LigacaoEsgotoPerfil.CEM_PORCENTO, cemPorcento, 
								new Date(), ConstantesSistema.NAO, ConstantesSistema.NAO, imovel, ligacaoEsgotoPerfil, ligacaoEsgotoDiametro, ligacaoEsgotoMaterial);
						
						repositorioUtil.inserir(ligacaoEsgoto);
					}
			
					//SB0002 - Atualizar Imovel
					LigacaoEsgotoSituacao ligacaoEsgotoSituacao = new LigacaoEsgotoSituacao();
					ligacaoEsgotoSituacao.setId(LigacaoEsgotoSituacao.LIGADO);

					if ( !imovel.getLigacaoEsgotoSituacao().getId().equals(ligacaoEsgotoSituacao.getId()) ) {
						ParametrosTransacaoBatchHelper situacaoAguaTransacao = new ParametrosTransacaoBatchHelper(
								String.valueOf(imovel.getLigacaoAguaSituacao().getDescricao()), "LIGADO", TabelaColuna.LIGACAO_ESGOTO_SITUACAO_ID_TABELA_IMOVEL);
						colecaoHelper.add(situacaoAguaTransacao);
					}
					imovel.setLigacaoEsgotoSituacao(ligacaoEsgotoSituacao);
					imovel.setUltimaAlteracao(new Date());
					repositorioUtil.atualizar(imovel);
				
//					//FS0003 - Verificar situação de rede de água da quadra
//					if ( imovel.getQuadra().getIndicadorRedeEsgoto().equals(ConstantesSistema.NAO) ) {
//						Quadra quadra = imovel.getQuadra();
//						quadra.setIndicadorRedeEsgoto(ConstantesSistema.SIM);
//						repositorioUtil.atualizar(quadra);
//					}
				}
				
				//[SB0006] - Inserir Registro no retorno da Atualizacao Cadastral
				this.inserirRetornoAtualizacaoCadastral(imovel.getId(), null, AtributoAtualizacaoCadastral.SITUACAO_LIGACAO_ESGOTO, 
						RetornoAtualizacaoCadastral.SITUACAO_ATUALIZADO, MensagemAtualizacaoCadastral.ATUALIZACAO_COM_SUCESSO, 
						idParametroTabelaAtualizacaoCadastro, imovelAtualizacaoCadastral,null);
				
			} catch (ErroRepositorioException e) {
				e.printStackTrace();
				throw new ControladorException("erro.sistema",e);
			}
			
			
//		}
		return validacaoPermitida;
	}
		
	/**
	  * [UC1290] Inserir ou Atualizar Imóvel Atualização Cadastral
	  *  
	  * [SB0009] - Validar Atualização de Logradouro
	  *  
	  * @author: Arthur Carvalho
	  * @date: 01/03/2012 
	  */
	public boolean validarAtualizacaoLogradouroAtualizacaoCadastral(Imovel imovel, Integer idCliente, Integer idParametroTabelaAtualizacaoCadastro, 
			ImovelAtualizacaoCadastral imovelAtualizacaoCadastral)  throws ControladorException{
		
		boolean retorno = true;
		
		try {
			
			boolean exibirMensagem = false;
			
			if ( !imovel.getLogradouroCep().getLogradouro().getId().equals( imovelAtualizacaoCadastral.getIdLogradouro() ) ) {
				exibirMensagem = true;
				
				imovelAtualizacaoCadastral.setIndicadorLogradouroNovo(ConstantesSistema.NAO);
				
			}
			
			if ( !imovel.getLogradouroBairro().getBairro().getId().equals( imovelAtualizacaoCadastral.getIdBairro() ) ) {
				exibirMensagem = true;
				
				//3.2
				if ( repositorioCadastro.existeBairroGsanAdmin(imovelAtualizacaoCadastral.getIdBairro() )) {
					imovelAtualizacaoCadastral.setIndicadorBairroNovo(ConstantesSistema.SIM);
				} else {
					imovelAtualizacaoCadastral.setIndicadorBairroNovo(ConstantesSistema.NAO);
				}
			}
			
			if ( exibirMensagem ) {
				//[SB0006] - Inserir Registro no retorno da Atualizacao Cadastral
				this.inserirRetornoAtualizacaoCadastral(imovel.getId(), idCliente, AtributoAtualizacaoCadastral.LOGRADOURO_BAIRRO, 
						RetornoAtualizacaoCadastral.PENDENTE_POR_LOGRADOURO, MensagemAtualizacaoCadastral.ATUALIZACAO_PENDENTE_POR_LOGRADOURO, 
						idParametroTabelaAtualizacaoCadastro, imovelAtualizacaoCadastral,null);
				retorno = false;
			} 
			
//			if ( !imovel.getLogradouroCep().getCep().getCodigo().equals(imovelAtualizacaoCadastral.getCodigoCep()) ) {
//				//[SB0006] - Inserir Registro no retorno da Atualizacao Cadastral
//				this.inserirRetornoAtualizacaoCadastral(imovel.getId(), idCliente, AtributoAtualizacaoCadastral.LOGRADOURO_CEP, 
//						RetornoAtualizacaoCadastral.PENDENTE_POR_LOGRADOURO, MensagemAtualizacaoCadastral.ATUALIZACAO_PENDENTE_POR_LOGRADOURO, 
//						idParametroTabelaAtualizacaoCadastro, imovelAtualizacaoCadastral);
//				retorno = false;
//			}
			
		} catch (ErroRepositorioException e) {
			e.printStackTrace();
			sessionContext.setRollbackOnly();
			throw new ControladorException("erro.sistema",e);
		}
		return retorno;
	}
	
	/**
	  *  [UC1290] Inserir ou Atualizar Imóvel Atualização Cadastral
	  *  
	  * [SB0010] - Validar Atributo Ligacao de Esgoto
	  *  
	  * @author: Arthur Carvalho
	  * @date: 01/03/2012 
	  */
	public boolean validarAtributoLigacaoEsgoto(Imovel imovel, Integer idCliente, Integer idParametroTabelaAtualizacaoCadastro, 
			String cpfCnpj, ImovelAtualizacaoCadastral imovelAtualizacaoCadastral, Collection<ParametrosTransacaoBatchHelper> colecaoHelper)  throws ControladorException{
		
		
		boolean retorno = true;
		
		if ( !imovel.getLigacaoEsgotoSituacao().getId().equals(imovelAtualizacaoCadastral.getIdLigacaoEsgotoSituacao()) ) {
			
			//Caso o imovel seja ligado e o imovel atualizacao cadastral seja diferente de ligado
			if ( imovel.getLigacaoEsgotoSituacao().getId().equals(LigacaoEsgotoSituacao.LIGADO) && 
					!imovelAtualizacaoCadastral.getIdLigacaoEsgotoSituacao().equals(LigacaoEsgotoSituacao.LIGADO)) {
				
				//[SB0006] - Inserir Registro no retorno da Atualizacao Cadastral
				this.inserirRetornoAtualizacaoCadastral(imovel.getId(), idCliente, AtributoAtualizacaoCadastral.SITUACAO_LIGACAO_ESGOTO, 
						RetornoAtualizacaoCadastral.SITUACAO_PENDENTE, MensagemAtualizacaoCadastral.ALTERACAO_DA_LIGACAO_DE_ESGOTO_COM_REDUCAO_DE_FATURAMENTO, 
						idParametroTabelaAtualizacaoCadastro, imovelAtualizacaoCadastral,null);
				retorno = false;
			} else if (  !imovel.getLigacaoEsgotoSituacao().getId().equals(LigacaoEsgotoSituacao.LIGADO) && 
					!imovelAtualizacaoCadastral.getIdLigacaoEsgotoSituacao().equals(LigacaoEsgotoSituacao.LIGADO) ) {
				
				//[SB0006] - Inserir Registro no retorno da Atualizacao Cadastral
				this.inserirRetornoAtualizacaoCadastral(imovel.getId(), idCliente, AtributoAtualizacaoCadastral.SITUACAO_LIGACAO_ESGOTO, 
						RetornoAtualizacaoCadastral.SITUACAO_PENDENTE, MensagemAtualizacaoCadastral.ALTERACAO_DA_LIGACAO_DE_ESGOTO_COM_REDUCAO_DE_FATURAMENTO, 
						idParametroTabelaAtualizacaoCadastro, imovelAtualizacaoCadastral,null);
				retorno = false;
			} else{ 
				
				if (imovel.getLigacaoEsgotoSituacao().getId().equals(LigacaoEsgotoSituacao.FACTIVEL) || 
					imovel.getLigacaoEsgotoSituacao().getId().equals(LigacaoEsgotoSituacao.POTENCIAL) ) {
	
					//[UC1291 - Efetuar Ligacao de Esgoto Atualização Cadastral]
					retorno = this.efetuarLigacaoEsgotoAtualizacaoCadastral(imovel, imovelAtualizacaoCadastral, 
							MedicaoTipo.POCO, idParametroTabelaAtualizacaoCadastro, colecaoHelper);
				} else {
					//[SB0006] - Inserir Registro no retorno da Atualizacao Cadastral
					this.inserirRetornoAtualizacaoCadastral(imovel.getId(), idCliente, AtributoAtualizacaoCadastral.SITUACAO_LIGACAO_ESGOTO, 
							RetornoAtualizacaoCadastral.SITUACAO_PENDENTE, MensagemAtualizacaoCadastral.ALTERACAO_DA_LIGACAO_DE_ESGOTO_COM_REDUCAO_DE_FATURAMENTO, 
							idParametroTabelaAtualizacaoCadastro, imovelAtualizacaoCadastral,null);
					retorno = false;
				}
			}
		}
		
		return retorno;
	}
	

	/**
	 * [UC1295] Efetuar Sorteio de Prêmios
	 * 
	 * 2. O sistema exibe o primeiro prêmio a ser sorteado.
	 * 
	 * @author Mariana Victor
	 * @date 06/03/2012
	 * 
	 * @return Object[]
	 * @throws ControladorException
	 */
	public Object[] pesquisarProximoPremio(Integer idSorteio) throws ControladorException {
		try{
			return repositorioCadastro.pesquisarProximoPremio(idSorteio);
		} catch (ErroRepositorioException ex) {
			throw new ControladorException("erro.sistema", ex);
		}
	}

	/**
	 * [UC1295] Efetuar Sorteio de Prêmios
	 * 
	 * @author Mariana Victor
	 * @date 07/03/2012
	 * 
	 * @return Collection<Object[]>
	 * @throws ControladorException
	 */
	public Collection<Object[]> pesquisarImoveisAptoSorteio() throws ControladorException {
		try{
			return repositorioCadastro.pesquisarImoveisAptoSorteio();
		} catch (ErroRepositorioException ex) {
			throw new ControladorException("erro.sistema", ex);
		}
	}


	/**
	 * [[UC1295] Efetuar Sorteio de Prêmios
	 * 
	 * [SB0002] - Atualizar Tabelas.
	 * 
	 * @author Mariana Victor
	 * @data 09/03/2012
	 * 
	 * @param
	 * @return void
	 */
	public void atualizarImovelSorteio(Integer idImovel, 
			Integer idPremio, Integer numeroOrdemSorteio) throws ControladorException {
		try{
			repositorioCadastro.atualizarImovelSorteio(idImovel, 
				idPremio, numeroOrdemSorteio);
		} catch (ErroRepositorioException ex) {
			throw new ControladorException("erro.sistema", ex);
		}
	}

	/**
	 * [UC1295] Efetuar Sorteio de Prêmios
	 * 
	 * @author Mariana Victor
	 * @date 09/03/2012
	 * 
	 * @return Integer
	 * @throws ControladorException
	 */
	public Integer pesquisarNumeroOrdemSorteio() throws ControladorException {
		try{
			return repositorioCadastro.pesquisarNumeroOrdemSorteio();
		} catch (ErroRepositorioException ex) {
			throw new ControladorException("erro.sistema", ex);
		}
	}

	/**
	 * [UC1295] Efetuar Sorteio de Prêmios
	 * 
	 * [SB0003] - Emitir Relatório
	 * 
	 * @author Mariana Victor
	 * @date 09/03/2012
	 * 
	 * @return Collection<RelatorioSorteioPremiosHelper>
	 * @throws ControladorException
	 */
	public Collection<RelatorioSorteioPremiosHelper> pesquisarDadosRelatorioImoveisSorteados()
			throws ControladorException {
		try{
			Collection<RelatorioSorteioPremiosHelper> retorno = new ArrayList<RelatorioSorteioPremiosHelper>();
			
			Collection<Object[]> colecaoDadosImoveisSorteados =  repositorioCadastro.pesquisarDadosRelatorioImoveisSorteados();
			
			if (colecaoDadosImoveisSorteados != null
					&& !colecaoDadosImoveisSorteados.isEmpty()) {
				Iterator iterator = colecaoDadosImoveisSorteados.iterator();
				
				while(iterator.hasNext()) {
					Object[] dadosImovelSorteado = (Object[]) iterator.next();
					RelatorioSorteioPremiosHelper helper = new RelatorioSorteioPremiosHelper();

					String premio = (String) dadosImovelSorteado[0];
					Integer idImovel = (Integer) dadosImovelSorteado[1];
					Integer numeroOrdemSorteioImovel = (Integer) dadosImovelSorteado[2];
					Integer ordemPremio = (Integer) dadosImovelSorteado[3];
					Integer numeroSorteio = (Integer) dadosImovelSorteado[4];
					String gerenciaRegional = (String) dadosImovelSorteado[5];
					String localidade = (String) dadosImovelSorteado[6];
					
					String endereco = this.getControladorEndereco().pesquisarEndereco(idImovel);
					String matricula = Util.retornaMatriculaImovelFormatada(idImovel);
					Cliente cliente = this.getControladorImovel().pesquisarClienteUsuarioImovel(idImovel);

					helper.setPremio(premio);
					helper.setOrdemPremio(ordemPremio.toString());
					helper.setNumeroOrdemSorteioImovel(numeroOrdemSorteioImovel.toString());
					helper.setEndereco(endereco);
					helper.setNumeroSorteio(numeroSorteio.toString());
					helper.setGerenciaRegional(gerenciaRegional);
					helper.setLocalidade(localidade);
					helper.setMatricula(matricula);
					helper.setNomeCliente(cliente.getNome());
					if (cliente.getCpfFormatado() != null 
							&& !cliente.getCpfFormatado().trim().equals("")) {
						helper.setCpfCliente(cliente.getCpfFormatado());
					}
					
					retorno.add(helper);
				}
			}
			
			return retorno;
		} catch (ErroRepositorioException ex) {
			throw new ControladorException("erro.sistema", ex);
		}
	}

	/**
	 * [UC1295] Efetuar Sorteio de Prêmios
	 * 
	 * [SB0004] - Gerar TXT.
	 * 
	 * @author Mariana Victor
	 * @date 09/03/2012
	 * 
	 * @param
	 * @return byte[]
	 */
	public byte[] emitirRelatorioSorteioPremiosArquivoTexto(Collection<RelatorioSorteioPremiosHelper> colecao) 
			throws ControladorException {

		StringBuilder relatorioSorteioPremiosTxt = new StringBuilder();
		int sequencialImpressao = 0;

		if (colecao != null && !colecao.isEmpty()) {
			
			Iterator colecaoIterator = colecao
					.iterator();

			while (colecaoIterator.hasNext()) {
	
				RelatorioSorteioPremiosHelper helper = 
					(RelatorioSorteioPremiosHelper) colecaoIterator.next();
	
				sequencialImpressao++;
	
				if (helper != null) {
					criarDadosTxtRelatorioSorteioPremios(relatorioSorteioPremiosTxt,
							helper);
				}
	
				relatorioSorteioPremiosTxt.append(System
				.getProperty("line.separator"));
	
			}
		}

		String nomeZip = "PREMIOS_IMOVEIS_SORTEADOS";

		byte[] retornoArray = null;

		try {
			if (relatorioSorteioPremiosTxt != null) {

				//relatorioSorteioPremiosTxt.append("\u0004");
				// criar o arquivo zip
				File compactado = File.createTempFile("zipHtml" + nomeZip,
						".zip");
				ZipOutputStream zos = new ZipOutputStream(new FileOutputStream(
						compactado));

				File leitura = new File(nomeZip + ".txt");
				BufferedWriter out = new BufferedWriter(new OutputStreamWriter(
						new FileOutputStream(leitura.getAbsolutePath())));
				out.write(relatorioSorteioPremiosTxt.toString());
				out.flush();
				out.close();
				ZipUtil.adicionarArquivo(zos, leitura);

				// close the stream
				zos.close();

				ByteArrayOutputStream retorno = new ByteArrayOutputStream();

				FileInputStream inputStream = new FileInputStream(compactado);

				int INPUT_BUFFER_SIZE = 1024;
				byte[] temp = new byte[INPUT_BUFFER_SIZE];
				int numBytesRead = 0;

				while ((numBytesRead = inputStream.read(temp, 0,
						INPUT_BUFFER_SIZE)) != -1) {
					retorno.write(temp, 0, numBytesRead);
				}

				inputStream.close();

				leitura.delete();

				// retorno.flush();
				// retorno.close();

				retornoArray = retorno.toByteArray();

			}

		} catch (IOException e) {
			e.printStackTrace();
			throw new ControladorException("erro.sistema", e);
		} catch (Exception e) {
			e.printStackTrace();
			throw new ControladorException("erro.sistema", e);
		}

		return retornoArray;

	}

	/**
	 * [UC1295] Efetuar Sorteio de Prêmios
	 * 
	 * [SB0004] - Gerar TXT.
	 * 
	 * @author Mariana Victor
	 * @date 09/03/2012
	 * 
	 * @param
	 * @return byte[]
	 */
	private void criarDadosTxtRelatorioSorteioPremios(
			StringBuilder relatorioSorteioPremiosTxt,
			RelatorioSorteioPremiosHelper helper)
			throws ControladorException {

		// Início do processo de geração do arquivo txt

		// Número de Ordem do Sorteio
		String numeroOrdemSorteioImovel = "";

		if (helper.getNumeroOrdemSorteioImovel() != null
				&& !helper.getNumeroOrdemSorteioImovel().equals("")) {

			numeroOrdemSorteioImovel = helper
					.getNumeroOrdemSorteioImovel().toString();
		}

		relatorioSorteioPremiosTxt.append(numeroOrdemSorteioImovel);
		relatorioSorteioPremiosTxt.append("#");
		
		
		// Matrícula do Imóvel
		String matricula = "";

		if (helper.getMatricula() != null
				&& !helper.getMatricula().equals("")) {

			matricula = helper
					.getMatricula();
		}
		
		relatorioSorteioPremiosTxt.append(matricula);
		relatorioSorteioPremiosTxt.append("#");
		
		
		// Gerência Regional do Imóvel
		String gerenciaRegional = "";

		if (helper.getGerenciaRegional() != null
				&& !helper.getGerenciaRegional().equals("")) {

			gerenciaRegional = helper
					.getGerenciaRegional();
		}
		
		relatorioSorteioPremiosTxt.append(gerenciaRegional);
		relatorioSorteioPremiosTxt.append("#");
		
		
		// Localidade do Imóvel 
		String localidade = "";

		if (helper.getLocalidade() != null
				&& !helper.getLocalidade().equals("")) {

			localidade = helper
					.getLocalidade();
		}
		
		relatorioSorteioPremiosTxt.append(localidade);
		relatorioSorteioPremiosTxt.append("#");

		
		// CPF do Cliente Usuário
		String cpfCliente = "";

		if (helper.getCpfCliente() != null
				&& !helper.getCpfCliente().equals("")) {

			cpfCliente = helper
					.getCpfCliente();
		}
		
		relatorioSorteioPremiosTxt.append(cpfCliente);
		relatorioSorteioPremiosTxt.append("#");

		
		// Nome do Cliente Usuário
		String nomeCliente = "";

		if (helper.getNomeCliente() != null
				&& !helper.getNomeCliente().equals("")) {

			nomeCliente = helper
					.getNomeCliente();
		}
		
		relatorioSorteioPremiosTxt.append(nomeCliente);
		relatorioSorteioPremiosTxt.append("#");

		
		// Endereço
		String endereco = "";

		if (helper.getEndereco() != null
				&& !helper.getEndereco().equals("")) {

			endereco = helper
					.getEndereco();
		}
		
		relatorioSorteioPremiosTxt.append(endereco);
		relatorioSorteioPremiosTxt.append("#");

		
		// Prêmio Sorteado
		String premio = "";

		if (helper.getPremio() != null
				&& !helper.getPremio().equals("")) {

			premio = helper
					.getPremio();
		}
		
		relatorioSorteioPremiosTxt.append(premio);
		
	}

	/**
	 * [UC1295] Efetuar Sorteio de Prêmios
	 * 
	 * [SB0003] - Emitir Relatório
	 * 
	 * @author Mariana Victor
	 * @date 30/03/2012
	 * 
	 * @return Object[]
	 * @throws ControladorException
	 */
	public Object[] pesquisarDadosImoveisSorteados(Integer idImovel) 
			throws ControladorException {
		try{
			return repositorioCadastro.pesquisarDadosImoveisSorteados(idImovel);
		} catch (ErroRepositorioException ex) {
			throw new ControladorException("erro.sistema", ex);
		}
	} 
	
	/**
	 * @author Fernanda Almeida
	 * @date 03/05/2012
	 * 
	 * @param
	 * @throws IOException
	 */
	public Object[] baixarNovaVersaoApk(Integer idSistemaAndroid) throws ControladorException {
		try{
		
			return this.repositorioCadastro.baixarNovaVersaoApk( idSistemaAndroid );
			
		 } catch (ErroRepositorioException ex) {
	            ex.printStackTrace();
	            throw new ControladorException("erro.sistema", ex);
	        }
	}
	
	
	/**
	 * [UC1297] Atualizar Dados Cadastrais para Imoveis Inconsistentes
	 * 
	 * [SB0006] Relatório dos Imoveis Inconsistentes
	 * 
	 * @author Davi Menezes
	 * @date 26/03/2012
	 * 
	 * @return Collection<RelatorioImoveisInconsistentesBean>
	 * @throws ControladorException
	 */
	public Collection<RelatorioImoveisInconsistentesBean> pesquisarRelatorioImoveisInconsistentes(String [] idsRegistro,
			String idLocalidade, String codigoSetorComercial, String numeroQuadraInicial,
			String numeroQuadraFinal, String idCadastrador, String indicadorSituacaoMovimento,
			String tipoInconsistencia)throws ControladorException {
		
		Collection<RelatorioImoveisInconsistentesBean> colBeans = new ArrayList<RelatorioImoveisInconsistentesBean>();
		
		RelatorioImoveisInconsistentesBean bean = null;
		
		Collection colecao = null;
	
		try{
			String idImovelAnterior = "";
			String idLocalidadeAnterior = "";
			for(int i = 0; i < idsRegistro.length; i++){
				String[] aux = idsRegistro[i].split("\\|");
				Integer idMovimento = Integer.parseInt(aux[0]);
				String data = aux[1];
				Date dataMovimento = Util.converteStringParaDate(data);
						
//						Util.criarData(Integer.parseInt(data.substring(0, 2 )), 
//					Integer.parseInt(data.substring(3, 5)), Integer.parseInt(data.substring(6)));
				
				colecao = repositorioCadastro.pesquisarRelatorioImoveisInconsistentes(idMovimento, dataMovimento,
						idLocalidade,codigoSetorComercial,numeroQuadraInicial,numeroQuadraFinal,
						idCadastrador, indicadorSituacaoMovimento, tipoInconsistencia);
				
				if(!Util.isVazioOrNulo(colecao)){
					Iterator iterator = colecao.iterator();
					
					Integer total = new Integer(0);
					
					while(iterator.hasNext()){
						Object[] array = (Object []) iterator.next();
						bean = new RelatorioImoveisInconsistentesBean();
						
						if((String) array[0] != null){
							String idImovel = ((String) array[0]);
							bean.setIdImovel(Integer.valueOf(idImovel));
							
							Imovel imovel = repositorioImovel.pesquisarImovel(Integer.parseInt(idImovel));
							
							if(imovel != null){
								bean.setMatricula(imovel.getMatriculaFormatada());
							}
						}
						
						Date novaData = (Date) array[1];
						bean.setDataMovimento(Util.formatarData(novaData));
						
						
//						if (!colBeans.contains(bean)) {
							
							bean.setIdLocalidade((String) array[2]);
							bean.setDescricaoLocalidade((String) array[3]);
							
							if ( idLocalidadeAnterior.equals("") ) {
								
								idLocalidadeAnterior = bean.getIdLocalidade();
								idImovelAnterior= (String) array[0];
								total = new Integer(1);
								
							} else if ( idLocalidadeAnterior.equals( bean.getIdLocalidade() ) ){
								
								if (  !idImovelAnterior.equals( (String) array[0]) ) {
									
									total = new Integer(1);
									idImovelAnterior = (String) array[0];
								} else {
									total = new Integer(0);
								}
							} else {
								idLocalidadeAnterior = bean.getIdLocalidade();
								idImovelAnterior= (String) array[0];
								total = new Integer(1);
							}
							
							bean.setTotal(total);
							
							if((String) array[4] != null){
								bean.setCodigoSetor((String) array[4]);
							}else{
								bean.setCodigoSetor("");
							}
							
							if((String) array[5] != null){
								bean.setQuadra((String) array[5]);
							}else{
								bean.setQuadra("");
							}
							
							
							if((String) array[6] != null){
								bean.setSituacaoCadastral((String) array[6]);
							}else{
								bean.setSituacaoCadastral("");
							}
							
							if((String) array[7] != null){
								bean.setDadoInconsistente((String) array[7]);
							}else{
								bean.setDadoInconsistente("");
							}
							
							if((String) array[8] != null){
								bean.setTipoInconsistencia((String) array[8]);
							}else{
								bean.setTipoInconsistencia("");
							}
							
							if((String) array[9] != null){
								bean.setCadastrador((String) array[9]);
							}else{
								bean.setCadastrador("");
							}
							
							colBeans.add(bean);
							
//						}
					
					}
				}
			}
		}catch(ErroRepositorioException e){
			throw new ControladorException("erro.sistema", e);
		}
		
		return colBeans;
	}
	
	/**
	 * [UC1297] Pesquisar Imovel Atualização Cadastral
	 * 
	 * @author Arthur Carvalho
	 * @since 01/03/2012
	 * 
	 * @param indicadorAtualizacao
	 * @return
	 * @throws ControladorException
	 */
	public ImovelAtualizacaoCadastral pesquisarImovelAtualizacaoCadastral(Integer idImovelAtualizacaoCadastral ) throws ControladorException{
		try{
			return repositorioCadastro.pesquisarImovelAtualizacaoCadastral(idImovelAtualizacaoCadastral);
		}catch(ErroRepositorioException e){
			throw new ControladorException("erro.sistema", e);
		}
	}
	
	/**
	 * [UC1297] Pesquisar Cliente Atualização Cadastral
	 * 
	 * @author Davi Menezes
	 * @since 29/03/2012
	 * 
	 * @param idImovelAtualizacaoCadastral
	 * @return
	 * @throws ControladorException
	 */
	public Collection<ClienteAtualizacaoCadastral> pesquisarClienteAtualizacaoCadastral(Integer idImovelAtualizacaoCadastral) throws ControladorException{
		try{
			
			Collection colecaoClienteAtualizacaoCadastral = repositorioCadastro.pesquisarClienteAtualizacaoCadastral(idImovelAtualizacaoCadastral);;
			
			if(colecaoClienteAtualizacaoCadastral != null && !colecaoClienteAtualizacaoCadastral.isEmpty()){
				Iterator iterClienteAtualizacaoCadastral = colecaoClienteAtualizacaoCadastral.iterator();
				
				while (iterClienteAtualizacaoCadastral.hasNext()) {
					ClienteAtualizacaoCadastral clienteAtualizacaoCadastral = (ClienteAtualizacaoCadastral) iterClienteAtualizacaoCadastral.next();
					if(clienteAtualizacaoCadastral.getIdProfissao() != null){
						String descricaoProf =  repositorioCadastro.pesquisarDescricaoProfissao(
								clienteAtualizacaoCadastral.getIdProfissao());
						if(descricaoProf != null){
							clienteAtualizacaoCadastral.setDescricaoProfissao(descricaoProf);
						}else{
							clienteAtualizacaoCadastral.setDescricaoProfissao("");
						}
					}
				}
			}
			
			return colecaoClienteAtualizacaoCadastral;
			
//			return repositorioCadastro.pesquisarClienteAtualizacaoCadastral(idImovelAtualizacaoCadastral);
		}catch (ErroRepositorioException e) {
			throw new ControladorException("erro.sistema", e);
		}
	}
	
	/**
	 * [UC1297] Pesquisar Imovel Subcategoria Atualização Cadastral
	 * 
	 * @author Davi Menezes
	 * @since 29/03/2012
	 * 
	 * @param idImovelAtualizacaoCadastral
	 * @return
	 * @throws ControladorException
	 */
	public Collection<ImovelSubcategoriaAtualizacaoCadastral> pesquisarSubCategoriaAtualizacaoCadastral(Integer idImovelAtualizacaoCadastral) 
			throws ControladorException{
		try{
			return repositorioCadastro.pesquisarSubCategoriaAtualizacaoCadastral(idImovelAtualizacaoCadastral);
		}catch(ErroRepositorioException e){
			throw new ControladorException("erro.sistema", e);
		}
		
	}
	
	/**
	 * [UC 1311] Gerar Resumo da Posição de Atualização Cadastral
	 * 
	 * @author Davi Menezes, Anderson Cabral
	 * @since 11/04/2012, 13/08/2013
	 * 
	 * @param Helper
	 * @return Collection
	 * @throws ControladorException
	 */
	public Collection<RelatorioResumoPosicaoAtualizacaoCadastralBean> pesquisarResumoPosicaoAtualizacaoCadastral(
		DadosResumoMovimentoAtualizacaoCadastralHelper helper) throws ControladorException{
		
		Collection<RelatorioResumoPosicaoAtualizacaoCadastralBean> colecaoBeans = new ArrayList<RelatorioResumoPosicaoAtualizacaoCadastralBean>();
		Collection retorno = null;
		
		try{
			retorno = repositorioCadastro.pesquisarResumoPosicaoAtualizacaoCadastral(helper);
			
			if(!Util.isVazioOrNulo(retorno)){
				
				Iterator iterator = retorno.iterator();
				Integer idLocalidadeAnterior = 0;
				Integer quantidadeImoveisNaLocalidade = 0;
				
				while(iterator.hasNext()){
					
					Object[] array = (Object []) iterator.next();

					Integer quantidadeImoveisIncluidos = 0;
					Integer quantidadeImoveisAtualizados = 0;
					
					//Quantidade de Imoveis Incluidos que retornaram do tablet
					if((Integer) array[7] != null){
						quantidadeImoveisIncluidos = (Integer) array[7];
					}

					//Quantidade de Imoveis Atualizados que retornaram do tablet
					if((Integer) array[8] != null){
						quantidadeImoveisAtualizados = (Integer) array[8];
					}
					
					
					if(quantidadeImoveisIncluidos.intValue() != 0 || quantidadeImoveisAtualizados.intValue() != 0){
					
						RelatorioResumoPosicaoAtualizacaoCadastralBean bean = new RelatorioResumoPosicaoAtualizacaoCadastralBean();
						
						//Id Localidade
						if((Integer) array[0] != null){
							Integer idLocalidade = (Integer) array[0];						
							bean.setIdLocalidade(idLocalidade);
							
							if(idLocalidade.intValue() != idLocalidadeAnterior){
								
								quantidadeImoveisNaLocalidade = repositorioImovel.pesquisarQuantidadeImoveisPorLocalidade(idLocalidade);
								idLocalidadeAnterior = idLocalidade;
							}
							
							bean.setQuantidadeImoveisNaLocalidade(quantidadeImoveisNaLocalidade);
						}
						
						//Descricao Localidade
						if((String) array[1] != null){
							String descricaoLocalidade = (String) array[1];
							bean.setDescricaoLocalidade(descricaoLocalidade);
						}
						
						//Quantidade de Imoveis selecionados para o Roteiro
						if((Integer) array[2] != null){
							bean.setQuantidadeImoveisRoteiro((Integer) array[2]);
						}
						
						if((Integer) array[11] != null){
							bean.setQuantidadePreGsanAtualizados((Integer) array[11]);
						}
						
						if((Integer) array[12] != null){
							bean.setQuantidadePreGsanIncluidos((Integer) array[12]);
						}
						
						if((Integer) array[13] != null){
							bean.setQuantidadeComInconsistencia((Integer) array[13]);
						}
						
						if((Integer) array[14] != null){
							bean.setQuantidadeSemInconsistencia((Integer) array[14]);
						}
						
						if((Integer) array[15] != null){
							bean.setQuantidadeRetornoCampo((Integer) array[15]);
						}
						
						if((Integer) array[16] != null){
							bean.setQuantidadeRemovido((Integer) array[16]);
						}
						
						//Quantidade de Imoveis no Ambiente Virtual II
						if((Integer) array[4] != null){
							bean.setQuantidadeAmbienteII((Integer) array[4]);
						}
						
						//Quantidade de Imoveis Atualizados no GSAN
						if((Integer) array[5] != null){
							bean.setQuantidadeAtualizadosGSAN((Integer) array[5]);
						}
						
						
						//Quantidade de Imoveis Incluidos que retornaram do tablet
						bean.setQuantidadeImoveisIncluidos(quantidadeImoveisIncluidos);
	
						//Quantidade de Imoveis Atualizados que retornaram do tablet
						bean.setQuantidadeImoveisAtualizados(quantidadeImoveisAtualizados);
						
						//Usuario associado ao arquivo
						if((String) array[9] != null){
							bean.setNomeUsuario((String) array[9]);
						}
						
						//codigo do setor
						if((Integer) array[10] != null){
							bean.setCodigoSetor(((Integer) array[10]).toString());
						}
						
						
						colecaoBeans.add(bean);
					}
				}
			}
		
		}catch(ErroRepositorioException ex){
			throw new ControladorException("erro.sistema", ex);
		}
		
		return colecaoBeans;
	}
	
	/**
	 * [UC 1312] Gerar Resumo da Situação dos imóveis por cadastrador
	 * 
	 * @author Davi Menezes
	 * @since 12/04/2012
	 * 
	 * @param Helper
	 * @return Collection<>
	 * @throws ErroRepositorioException
	 */
	public Collection<RelatorioResumoSituacaoImoveisAnalistaCadastradorBean> pesquisarResumoSituacaoImoveis(
		DadosResumoMovimentoAtualizacaoCadastralHelper helper) throws ControladorException{
		
		Collection<RelatorioResumoSituacaoImoveisAnalistaCadastradorBean> colecaoBeans = 
				new ArrayList<RelatorioResumoSituacaoImoveisAnalistaCadastradorBean>();
		
		Collection colecaoResumoCadastrador = null;
		
		boolean valido = true;
		
		try{
			colecaoResumoCadastrador = repositorioCadastro.pesquisarResumoSituacaoImoveisPorCadastradorAnalista(helper);
			
			if(!Util.isVazioOrNulo(colecaoResumoCadastrador)){
				Iterator iterator = colecaoResumoCadastrador.iterator();
				
				Integer qtdTotalImoveisInconsistentes = 0;
				Integer qtdTotalImoveisAtualizados = 0;
				Integer qtdTotalImoveisCadastrador = 0;
				
				Integer qtdTotalImoveisAprovados = 0;
				Integer qtdTotalImoveisAceitos = 0;
				Integer qtdTotalImoveisRejeitados = 0;
				Integer qtdTotalImoveisAnalista = 0;
				
				while(iterator.hasNext()){
					RelatorioResumoSituacaoImoveisAnalistaCadastradorBean bean = new RelatorioResumoSituacaoImoveisAnalistaCadastradorBean();
					Object [] array = (Object []) iterator.next();
					valido = true;
					
					String tipo = (String) array[8];
					if(tipo != null && tipo.equalsIgnoreCase("cad")){
						bean.setTipoCadastradorAnalista("1");
						bean.setDescTipo("Cadastrador");
					}
					else{
						bean.setTipoCadastradorAnalista("2");
						bean.setDescTipo("Analista");
					}
						bean.setDescQuantidade1("Qtde Inconsist. Aprovadas");
						bean.setDescPercentagem1("%");
						bean.setDescQuantidade2("Qtde Inconsist. Aceitas");
						bean.setDescPercentagem2("%");
						bean.setDescQuantidade3("Qtde Inconsist. Rejeitadas");
						bean.setDescPercentagem3("%");
						bean.setDescTotalImoveis("Total Incons.");
										
										
						
						bean.setIdAnalistaCadastrador((Integer)array[2]);
						
						if((Integer) array[0] != null){
							bean.setIdLocalidade((Integer) array[0]);
						}
						
						if((String) array[1] != null){
							bean.setDescricaoLocalidade((String) array[1]);
						}
						
						if((String) array[3] != null){
							bean.setNomeAnalistaCadastrador((String) array[3]);
						}
						
						Integer totalImoveisAprovados = 0;
						if((Integer) array[4] != null){
							totalImoveisAprovados = (Integer) array[4];
							bean.setQtdImoveis1(totalImoveisAprovados);
							
							qtdTotalImoveisAprovados = qtdTotalImoveisAprovados + totalImoveisAprovados;
						}
						
						Integer totalImoveisAceitos = 0;
						if((Integer) array[5] != null){
							totalImoveisAceitos = (Integer) array[5];
							bean.setQtdImoveis2(totalImoveisAceitos);
							
							qtdTotalImoveisAceitos = qtdTotalImoveisAceitos + totalImoveisAceitos;
						}
						
						Integer totalImoveisRejeitados = 0;
						if((Integer) array[6] != null){
							totalImoveisRejeitados = (Integer) array[6];
							bean.setQtdImoveis3(totalImoveisRejeitados);
							
							qtdTotalImoveisRejeitados = qtdTotalImoveisRejeitados + totalImoveisRejeitados;
						}
						
						Integer totalImoveis = totalImoveisAprovados + totalImoveisAceitos + totalImoveisRejeitados;
						bean.setTotalImoveis(totalImoveis);
						
						qtdTotalImoveisAnalista = qtdTotalImoveisAnalista + totalImoveis;
						
						if(totalImoveis != 0){
							BigDecimal percentualImoveisAprovados = Util.
									divideDepoisMultiplicaComCasasDecimais(totalImoveisAprovados, totalImoveis, 100); 
//									new BigDecimal(totalImoveisAprovados).divide
//									(new BigDecimal(totalImoveis), 2, BigDecimal.ROUND_HALF_UP)
//									.multiply(new BigDecimal(100));
							bean.setPercentualImoveis1(percentualImoveisAprovados);
							
							BigDecimal percentualImoveisAceitos = Util.
									divideDepoisMultiplicaComCasasDecimais(totalImoveisAceitos, totalImoveis, 100); 
//									new BigDecimal(totalImoveisAceitos).divide
//									(new BigDecimal(totalImoveis), 2, BigDecimal.ROUND_HALF_UP)
//									.multiply(new BigDecimal(100));
							bean.setPercentualImoveis2(percentualImoveisAceitos);
							
							BigDecimal percentualImoveisRejeitados = Util.
									divideDepoisMultiplicaComCasasDecimais(totalImoveisRejeitados, totalImoveis, 100); 
//									new BigDecimal(totalImoveisRejeitados).divide(new BigDecimal(totalImoveis), 2, BigDecimal.ROUND_HALF_UP)
//									.multiply(new BigDecimal(100));
							bean.setPercentualImoveis3(percentualImoveisRejeitados);
						}else{
							if(totalImoveisAprovados == 0 && totalImoveisAceitos == 0 && totalImoveisRejeitados == 0)
								valido = false;
							
							bean.setPercentualImoveis1(new BigDecimal(0));
							bean.setPercentualImoveis2(new BigDecimal(0));
							bean.setPercentualImoveis3(new BigDecimal(0));
						}
						
						//calculo dos percentuais finais
						BigDecimal percentualTotalImoveisAprovados = Util.
								divideDepoisMultiplicaComCasasDecimais(qtdTotalImoveisAprovados,
										qtdTotalImoveisAnalista, 100);  
//								new BigDecimal(qtdTotalImoveisAprovados)
//									.divide(new BigDecimal(qtdTotalImoveisAnalista), 2, BigDecimal.ROUND_HALF_UP)
//									.multiply(new BigDecimal(100));
						bean.setPercentualTotalImoveis1(percentualTotalImoveisAprovados);
						
						BigDecimal percentualTotalImoveisAceitos = Util.
								divideDepoisMultiplicaComCasasDecimais(qtdTotalImoveisAceitos,
										qtdTotalImoveisAnalista, 100);   
//								new BigDecimal(qtdTotalImoveisAceitos)
//									.divide(new BigDecimal(qtdTotalImoveisAnalista), 2, BigDecimal.ROUND_HALF_UP)
//									.multiply(new BigDecimal(100));
						bean.setPercentualTotalImoveis2(percentualTotalImoveisAceitos);
						
						BigDecimal percentualTotalImoveisRejeitados = Util.
								divideDepoisMultiplicaComCasasDecimais(qtdTotalImoveisRejeitados,
										qtdTotalImoveisAnalista, 100);
//								new BigDecimal(qtdTotalImoveisRejeitados)
//									.divide(new BigDecimal(qtdTotalImoveisAnalista), 2, BigDecimal.ROUND_HALF_UP)
//									.multiply(new BigDecimal(100));
						bean.setPercentualTotalImoveis3(percentualTotalImoveisRejeitados);
					
						if(valido)
							colecaoBeans.add(bean);
					}
				}

		}catch(ErroRepositorioException ex){
			throw new ControladorException("erro.sistema", ex);
		}
		
		return colecaoBeans;
	}
	
	/**
	 * [UC 1314] Gerar Resumo Quantitativo de Mensagens Pendentes
	 * 
	 * @author Davi Menezes
	 * @since 18/04/2012
	 * 
	 * @param Helper
	 * @return Collection<>
	 * @throws ControladorException
	 */
	public Collection<RelatorioQuantitativoMensagensPendentesBean> pesquisarResumoQuantitativoMensagensPendentes(
		DadosResumoMovimentoAtualizacaoCadastralHelper helper) throws ControladorException{
		
		Collection<RelatorioQuantitativoMensagensPendentesBean> colecaoBeans = new ArrayList<RelatorioQuantitativoMensagensPendentesBean>();
		Collection colecao = null;
		
		try{
			colecao = this.repositorioCadastro.pesquisarResumoQuantitativoMensagensPendentes(helper);
			
			if(!Util.isVazioOrNulo(colecao)){
				RelatorioQuantitativoMensagensPendentesBean bean = null;
				Iterator iterator = colecao.iterator();
				
				String idLocalidadeAnterior = "";
				String idLocalidade = "";
				Integer quantidadeTotalImoveisLocalidade = 0;
				Integer quantidadeImoveisComInconsistencias = 0;
				
				while(iterator.hasNext()){
					bean = new RelatorioQuantitativoMensagensPendentesBean();
					Object[] array = (Object []) iterator.next();
					
					if((Integer) array[0] != null){
						idLocalidade = String.valueOf((Integer) array[0]);
						bean.setIdLocalidade((Integer) array[0]);
					}
					
					if((String) array[1] != null){
						bean.setDescricaoLocalidade((String) array[1]);
					}
					
					if((String) array[2] != null){
						bean.setDescricaoMensagem((String) array[2]);
					}
					
					if((Integer) array[3] != null){
						bean.setQuantidadeImoveisPendentes((Integer) array[3]);
					}
					
					if(!idLocalidade.equals(idLocalidadeAnterior)){
						quantidadeTotalImoveisLocalidade = repositorioCadastro.recuperaQtdeImoveisPorLocalidadeEEmpresa(
								 Integer.parseInt(idLocalidade),Integer.parseInt(helper.getIdEmpresa()));
						if(quantidadeTotalImoveisLocalidade == null){
							quantidadeTotalImoveisLocalidade = 0;
						}
						
						quantidadeImoveisComInconsistencias = repositorioCadastro.recuperaQtdeImoveisComInconsistenciasPorLocalidadeEEmpresa(
								 Integer.parseInt(idLocalidade),Integer.parseInt(helper.getIdEmpresa()));
								
						if(quantidadeImoveisComInconsistencias == null){
							quantidadeImoveisComInconsistencias = 0;
						}
					}
					
					bean.setQuantidadeImoveisLocalidade(quantidadeTotalImoveisLocalidade.toString());
					bean.setQuantidadeImoveisComInconsistencias(quantidadeImoveisComInconsistencias.toString());
					
					idLocalidadeAnterior = idLocalidade;
					
					colecaoBeans.add(bean);
				}
			}
			
		}catch(ErroRepositorioException ex){
			throw new ControladorException("erro.sistema", ex);
		}
		
		return colecaoBeans;
	}
	
	/**
	 * [UC 1313] Gerar Resumo Quantitativo de Mensagens Pendentes por Cadastrador
	 * 
	 * @author Davi Menezes
	 * @since 18/04/2012
	 * 
	 * @param Helper
	 * @return Collection<>
	 * @throws ControladorException
	 */
	public Collection<RelatorioMensagensPendentesCadastradorBean> pesquisarResumoQuantitativoMensagensPendentesCadastrador(
		DadosResumoMovimentoAtualizacaoCadastralHelper helper) throws ControladorException{
		
		Collection<RelatorioMensagensPendentesCadastradorBean> colecaoBeans = new ArrayList<RelatorioMensagensPendentesCadastradorBean>();
		Collection colecao = null;
		
		try{
			colecao = repositorioCadastro.pesquisarResumoQuantitativoMensagensPendentesCadastrador(helper);
			
			if(!Util.isVazioOrNulo(colecao)){
				String localidadeAnterior = "";
				String idLocalidade = "";
				String idCadastradorAnterior = "";
				String idCadastrador = "";
				
				Integer quantidadeTotalGeralLocalidade = 0;
				Integer quantidadeTotalPorCadastrador = 0;
				Integer quantidadeTotalGeralCadastrador = 0;
				BigDecimal percTotalGeralCadastradorPorTotalLocalidade = BigDecimal.ZERO;
				
				RelatorioMensagensPendentesCadastradorBean bean = new RelatorioMensagensPendentesCadastradorBean();
				Iterator iterator = colecao.iterator();
				
				while(iterator.hasNext()){
					bean = new RelatorioMensagensPendentesCadastradorBean();
					Object [] array = (Object[]) iterator.next();
					
					if((Integer) array[0] != null){
						idLocalidade = String.valueOf((Integer) array[0]);
						bean.setIdLocalidade((Integer) array[0]);
					}
					
					if((String) array[1] != null){
						bean.setDescricaoLocalidade((String) array[1]);
					}
					
					if((Integer) array[2] != null){
						idCadastrador = String.valueOf((Integer) array[2]);
						bean.setIdCadastrador((Integer) array[2]);
					}
					
					if((String) array[3] != null){
						bean.setNomeCadastrador((String) array[3]);
					}
					
					if((String) array[4] != null){
						bean.setDescricaoMensagem((String) array[4]);
					}
					
					Integer qtdImoveisPorMensagemCadastrador = 1;
					if((Integer) array[5] != null){
						qtdImoveisPorMensagemCadastrador = (Integer) array[5];
						bean.setQuantidadeImoveis(new BigDecimal(qtdImoveisPorMensagemCadastrador));
					}
					
					//adicionado por Vivianne Sousa - 02/08/2012
					//quantidade de inconsistências por cadastrador
//					if(idLocalidade.equals(localidadeAnterior)){
//						if(!idCadastrador.equals(idCadastradorAnterior)){
//							quantidadeTotalPorCadastrador = repositorioCadastro.
//									pesquisarQuantidadeMensagensPendentesCadastrador(helper,
//											bean.getIdLocalidade(),bean.getIdCadastrador()); 
//							
//							if(quantidadeTotalPorCadastrador == null){
//								quantidadeTotalPorCadastrador = 0;
//							}
//						}
//					}else{
//
//						quantidadeTotalPorCadastrador = repositorioCadastro.
//								pesquisarQuantidadeMensagensPendentesCadastrador(helper,
//										bean.getIdLocalidade(),bean.getIdCadastrador()); 
//						if(quantidadeTotalPorCadastrador == null){
//							quantidadeTotalPorCadastrador = 0;
//						}
//						
//						quantidadeTotalGeralLocalidade = repositorioCadastro.
//								pesquisarQuantidadeMensagensPendentesLocalidade(helper);
//						
//						//calculando o total de inconsistencias dos cadastradores e
//						//o percentual em relação ao total de inconsistencias da localidade
//						Integer idCadastradorHelper = null;
//						if(helper.getIdCadastrador() != null){
//							idCadastradorHelper = new Integer (helper.getIdCadastrador());
//						}
//						quantidadeTotalGeralCadastrador = repositorioCadastro.
//								pesquisarQuantidadeMensagensPendentesCadastrador(helper,
//								bean.getIdLocalidade(),idCadastradorHelper); 
//						percTotalGeralCadastradorPorTotalLocalidade = Util.divideDepoisMultiplicaComCasasDecimais(quantidadeTotalGeralCadastrador, 
//						quantidadeTotalGeralLocalidade, 100);		
//					}
//					
//					bean.setPercTotalGeralCadastradorPorTotalLocalidade(percTotalGeralCadastradorPorTotalLocalidade.setScale(2));
//					bean.setQuantidadeTotalGeralCadastrador(quantidadeTotalGeralCadastrador);
//
//					if(quantidadeTotalPorCadastrador != null && quantidadeTotalPorCadastrador != 0){
//						BigDecimal resultado = Util.divideDepoisMultiplicaComCasasDecimais(qtdImoveisPorMensagemCadastrador, 
//								quantidadeTotalPorCadastrador, 100);		
//						bean.setPercentagemMsgPorCadastrador(resultado.setScale(2));
//						bean.setQuantidadeTotalPorCadastrador(quantidadeTotalPorCadastrador);
//					}
//					
//					localidadeAnterior = idLocalidade;
//					idCadastradorAnterior = idCadastrador;
//					
//					if(quantidadeTotalGeralLocalidade != null && quantidadeTotalGeralLocalidade != 0){
//						BigDecimal resultado = Util.divideDepoisMultiplicaComCasasDecimais(quantidadeTotalPorCadastrador, 
//								quantidadeTotalGeralLocalidade, 100);	
//						bean.setPercentagem(resultado.setScale(2));
//						bean.setQuantidadeTotal(quantidadeTotalGeralLocalidade);
//					}
					
					colecaoBeans.add(bean);
				}

			}
		}catch(ErroRepositorioException ex){
			throw new ControladorException("erro.sistema", ex);
		}
		
		return colecaoBeans;
	}
	
	
	/**
	 * [UC1297] Pesquisar HidrometroInstalacaoHistoricoAtualizacaoCadastral
	 * 
	 * @author Arthur Carvalho
	 * @since 29/03/2012
	 * 
	 * @param idImovelAtualizacaoCadastral
	 * @return
	 * @throws ControladorException
	 */
	public Collection<HidrometroInstalacaoHistoricoAtualizacaoCadastral> pesquisarHidrometroInstalacaoHistoricoAtualizacaoCadastral(Integer idImovelAtualizacaoCadastral, Integer medicaoTipo) throws ControladorException{
		
		try{
			
			return repositorioCadastro.pesquisarHidrometroInstalacaoHistoricoAtualizacaoCadastral(idImovelAtualizacaoCadastral, null);
			
		}catch(ErroRepositorioException e){
			throw new ControladorException("erro.sistema", e);
		}
		
	}
	
	/**
	 * [UC1295] Efetuar Sorteio de Prêmios
	 * 
	 * @author Mariana Victor
	 * @date 12/04/2012
	 * 
	 * @return Date
	 * @throws ControladorException
	 */
	public Date pesquisarDataSorteio() 
			throws ControladorException {
		try{
			return repositorioCadastro.pesquisarDataSorteio();
		}catch(ErroRepositorioException e){
			throw new ControladorException("erro.sistema", e);
		}
		
	}
	
	/**
	 * [UC 1315] Gerar Resumo da Posição de Atualização Cadastral por Pacote
	 * 
	 * @author Davi Menezes
	 * @since 19/04/2012
	 * 
	 * @param Helper
	 * @return Collection
	 * @throws ControladorException
	 */
	public Collection<RelatorioResumoPosicaoAtualizacaoCadastralPacoteBean> pesquisarResumoPosicaoAtualizacaoCadastralPacote(
			DadosResumoMovimentoAtualizacaoCadastralHelper helper) throws ControladorException{
		
		Collection<RelatorioResumoPosicaoAtualizacaoCadastralPacoteBean> colecaoBean = new ArrayList<RelatorioResumoPosicaoAtualizacaoCadastralPacoteBean>();
		Collection colecao = null;
		
		try{
			colecao = repositorioCadastro.pesquisarResumoPosicaoAtualizacaoCadastralPacoteRecebido(helper);
			
			Integer idPtac = 0;
			Integer quantidadeImoveisNaoVisitados = new Integer(0);
			Integer quantidadeImoveisVisitados = new Integer(0);
			
			if(!Util.isVazioOrNulo(colecao)){
				RelatorioResumoPosicaoAtualizacaoCadastralPacoteBean bean = new RelatorioResumoPosicaoAtualizacaoCadastralPacoteBean();
				Iterator iterator = colecao.iterator();
				
				while(iterator.hasNext()){
					bean = new RelatorioResumoPosicaoAtualizacaoCadastralPacoteBean();
					Object[] array = (Object []) iterator.next();
					
					if((Integer) array[0] != null){
						bean.setIdLocalidade((Integer) array[0]);
					}
					
					if((String) array[1] != null){
						bean.setDescricaoLocalidade((String) array[1]);
					}
					
					if((Date) array[2] != null){
						String dataMovimento = Util.formatarData((Date) array[2]);
						bean.setDataMovimentacao(dataMovimento);
						
						helper.setIdLocalidadeInicial(bean.getIdLocalidade().toString());
						
						//pesquisar quantidade de imoveis visitados e nao visitados na base admin
						Object[] dados = repositorioIntegracao.pesquisarQuantidadeImoveisVisitados(helper, (Date) array[2]);
						
						if ( dados != null ) {

							if ( dados[0] != null ) {
								quantidadeImoveisNaoVisitados = (Integer) dados[0];
							} else {
								quantidadeImoveisNaoVisitados = Integer.valueOf(0);
							}
							
							if ( dados[1] != null ) {
								quantidadeImoveisVisitados = (Integer) dados[1];
							} else {
								quantidadeImoveisVisitados = Integer.valueOf(0);
							}
						} 
						
					}
					
					bean.setQtdImoveisNaoVisitadas(quantidadeImoveisNaoVisitados);
					bean.setQtdImoveisVisitados(quantidadeImoveisVisitados);
					
					if((Integer) array[3] != null){
						idPtac = (Integer) array[3];
						helper.setIdLocalidadeInicial(String.valueOf(bean.getIdLocalidade()));
						
						Integer qtdEnviados = repositorioCadastro.
							pesquisarResumoPosicaoAtualizacaoCadastralPacoteEnviado(helper, idPtac);
						
						bean.setQtdImoveisLiberados(qtdEnviados);
					}
					
					if((Integer) array[4] != null){
						bean.setQtdImoveisAtualizados((Integer) array[4]);
					}
					
					if((Integer) array[5] != null){
						bean.setQtdImoveisInconsistentes((Integer) array[5]);
					}
					
					if((Integer) array[6] != null){
						bean.setQtdTotalImoveis((Integer) array[6]);
					}
					colecaoBean.add(bean);
				}
			}
		}catch(ErroRepositorioException ex){
			throw new ControladorException("erro.sistema", ex);
		}
		
		return colecaoBean;
	}
	
	/**
	 * [UC 1326] Consultar Setores/Quadra Não Migrados para o Admin
	 * 
	 * @author Davi Menezes
	 * @since 30/04/2012
	 * 
	 * @param idLocalidade, codigoSetor, numeroQuadra
	 * @return Collection<ImoveisNaoMigradosHelper>
	 * @throws ControladorException
	 */
	public Collection<ImoveisNaoMigradosHelper> pesquisarSetoresNaoMigrados(String idLocalidade, String codigoSetor, String numeroQuadra)
			throws ControladorException{
		
		Collection<ImoveisNaoMigradosHelper> colecaoRetorno = new ArrayList<ImoveisNaoMigradosHelper>();
		Collection<?> colecao = null;
		
		try{
			//Pesquisar Setor Comercial
			colecao = repositorioCadastro.pesquisarSetoresNaoMigrados(idLocalidade, codigoSetor, numeroQuadra);
			
			if(!Util.isVazioOrNulo(colecao)){
				Iterator iterator = colecao.iterator();
				while(iterator.hasNext()){
					ImoveisNaoMigradosHelper helper = new ImoveisNaoMigradosHelper();
					Object codSetor = (Object) iterator.next();
					
					if((Integer) codSetor != null){
						helper.setCodigoSetor(String.valueOf((Integer) codSetor));
					}
					colecaoRetorno.add(helper);
				}
			}
		}catch(ErroRepositorioException ex){
			throw new ControladorException("erro.sistema", ex);
		}
		
		return colecaoRetorno;
	}
	
	public Collection<ImoveisNaoMigradosHelper> pesquisarQuadrasNaoMigradas(String idLocalidade, String codigoSetor, String numeroQuadra)
			throws ControladorException{
		
		Collection<ImoveisNaoMigradosHelper> colecaoRetorno = new ArrayList<ImoveisNaoMigradosHelper>();
		Collection<?> colecao = null;
		
		try{
			//Pesquisar Quadra
			colecao = repositorioCadastro.pesquisarQuadrasNaoMigradas(idLocalidade, codigoSetor, numeroQuadra);
			
			if(!Util.isVazioOrNulo(colecao)){
				Iterator iterator = colecao.iterator();
				while(iterator.hasNext()){
					ImoveisNaoMigradosHelper helper = new ImoveisNaoMigradosHelper();
					Object numQuadra = (Object) iterator.next();
					
					if((Integer) numQuadra != null){
						helper.setNumeroQuadra(String.valueOf((Integer) numQuadra));
					}
					colecaoRetorno.add(helper);
				}
			}	
		}catch(ErroRepositorioException ex){
			throw new ControladorException("erro.sistema", ex);
		}
		
		return colecaoRetorno;
		
	}
	
	public Collection<ImoveisNaoMigradosHelper> pesquisarImoveisNaoMigrados(String idLocalidade, String codigoSetor, Collection<Integer> numeroQuadra)
		throws ControladorException{
		
		Collection<ImoveisNaoMigradosHelper> colecaoRetorno = new ArrayList<ImoveisNaoMigradosHelper>();
		Collection<?> colecao = null;
		
		try{
			//Pesquisar Imovel
			colecao = repositorioCadastro.pesquisarImoveisNaoMigrados(idLocalidade, codigoSetor, numeroQuadra);
			
			if(!Util.isVazioOrNulo(colecao)){
				Iterator iterator = colecao.iterator();
				while(iterator.hasNext()){
					ImoveisNaoMigradosHelper helper = new ImoveisNaoMigradosHelper();
					Object idImovel = (Object) iterator.next();
					
					if((Integer) idImovel != null){
						helper.setIdImovel(String.valueOf((Integer) idImovel));
					}
					colecaoRetorno.add(helper);
				}
			}
		}catch(ErroRepositorioException ex){
			throw new ControladorException("erro.sistema", ex);
		}
		
		return colecaoRetorno;
	}
	
	/**
	 * [UC 1326] Consultar Setores/Quadra Retornados do Admin
	 * 
	 * @author Davi Menezes
	 * @since 30/04/2012
	 * 
	 * @param idLocalidade, codigoSetor, numeroQuadra
	 * @return Collection<ImoveisNaoMigradosHelper>
	 * @throws ControladorException
	 */
	
	public Collection<ImoveisNaoMigradosHelper> pesquisarSetoresRetornados(String idLocalidade, String codigoSetor, String numeroQuadra)
			throws ControladorException {
		
		Collection<ImoveisNaoMigradosHelper> colecaoRetorno = new ArrayList<ImoveisNaoMigradosHelper>();
		Collection<?> colecao = null;
		
		try{
			//Pesquisar Setor
			colecao = repositorioCadastro.pesquisarSetoresRetornados(idLocalidade, codigoSetor, numeroQuadra);
			
			if(!Util.isVazioOrNulo(colecao)){
				Iterator iterator = colecao.iterator();
				while(iterator.hasNext()){
					ImoveisNaoMigradosHelper helper = new ImoveisNaoMigradosHelper();
					Object codSetor = (Object) iterator.next();
					
					if((Integer) codSetor != null){
						helper.setCodigoSetor(String.valueOf((Integer) codSetor));
					}
					colecaoRetorno.add(helper);
				}
			}
		}catch(ErroRepositorioException ex){
			throw new ControladorException("erro.sistema", ex);
		}
		return colecaoRetorno;
	}
	
	public Collection<ImoveisNaoMigradosHelper> pesquisarQuadrasRetornadas(String idLocalidade, String codigoSetor, String numeroQuadra)
			throws ControladorException {
		
		Collection<ImoveisNaoMigradosHelper> colecaoRetorno = new ArrayList<ImoveisNaoMigradosHelper>();
		Collection<?> colecao = null;
		
		try{
			//Pesquisar Quadra
			colecao = repositorioCadastro.pesquisarQuadrasRetornadas(idLocalidade, codigoSetor, numeroQuadra);
			
			if(!Util.isVazioOrNulo(colecao)){
				Iterator iterator = colecao.iterator();
				while(iterator.hasNext()){
					ImoveisNaoMigradosHelper helper = new ImoveisNaoMigradosHelper();
					Object numQuadra = (Object) iterator.next();
					
					if((Integer) numQuadra != null){
						helper.setNumeroQuadra(String.valueOf((Integer) numQuadra));
					}
					colecaoRetorno.add(helper);
				}
			}
		}catch(ErroRepositorioException ex){
			throw new ControladorException("erro.sistema", ex);
		}
		return colecaoRetorno;
	}
	
	public Collection<ImoveisNaoMigradosHelper> pesquisarImoveisRetornados(String idLocalidade, String codigoSetor, Collection<Integer> numeroQuadra)
		throws ControladorException {
		
		Collection<ImoveisNaoMigradosHelper> colecaoRetorno = new ArrayList<ImoveisNaoMigradosHelper>();
		Collection<?> colecao = null;
		
		try{
			//Pesquisar Imovel
			colecao = repositorioCadastro.pesquisarImoveisRetornados(idLocalidade, codigoSetor, numeroQuadra);
			
			if(!Util.isVazioOrNulo(colecao)){
				Iterator iterator = colecao.iterator();
				while(iterator.hasNext()){
					ImoveisNaoMigradosHelper helper = new ImoveisNaoMigradosHelper();
					Object idImovel = (Object) iterator.next();
					
					if((Integer) idImovel != null){
						helper.setIdImovel(String.valueOf((Integer) idImovel));
					}
					colecaoRetorno.add(helper);
				}
			}
		}catch(ErroRepositorioException ex){
			throw new ControladorException("erro.sistema", ex);
		}
		
		return colecaoRetorno;
	}
	
	/**
	 * [UC1261] - Gerar Tabelas Temporárias para Atualização Cadastral por Localidade

	 * @author Arthur Carvalho
	 * @since 10/05/2012
	 * 
	 * @return
	 * @throws ErroRepositorioException
	 */
	public Collection<SetorComercial> pesquisarColecaoSetorComercialTabelasTemporarias(String idLocalidade, String empresa, Collection<Integer> colecaoSetorComercial, String selecionados) throws ControladorException {
		
		Collection<SetorComercial> colecaoSetor = new ArrayList<SetorComercial>();
		
		String colecaoCodigoSetor = "";
		if ( colecaoSetorComercial != null ) {
			
			Iterator<Integer> iteratorSetorComercial = colecaoSetorComercial.iterator();
			while( iteratorSetorComercial.hasNext() ) {
				colecaoCodigoSetor += iteratorSetorComercial.next() +",";
			}
			colecaoCodigoSetor = colecaoCodigoSetor.substring(0, colecaoCodigoSetor.length() -1);
		}
		
		try{
			
			Collection<Integer> colecaoCodigo = repositorioSetorComercial.
					pesquisarColecaoSetorComercialTabelasTemporarias(idLocalidade, empresa, colecaoCodigoSetor, selecionados);
			
			if ( colecaoCodigo != null && !colecaoCodigo.isEmpty() ) {
				
				Iterator iterator = colecaoCodigo.iterator();
				while ( iterator.hasNext() ) {
					SetorComercial setorComercial = new SetorComercial();
					Integer codigo = (Integer) iterator.next();
					
					setorComercial.setCodigo(codigo);
					colecaoSetor.add(setorComercial);
				}
			}
			
		}catch(ErroRepositorioException e){
			throw new ControladorException("erro.sistema", e);
		}
		return colecaoSetor;
	}
	
	/**
	 * [UC1261] - Gerar Tabelas Temporárias para Atualização Cadastral por Localidade

	 * @author Arthur Carvalho
	 * @since 10/05/2012
	 * 
	 * @return
	 * @throws ErroRepositorioException
	 */
	public Collection<SetorComercial> pesquisarColecaoSetorComercialTabelasTemporariasParcial(String idLocalidade, String idEmpresa, Collection<Integer> colecaoSetorComercial,String selecionados) throws ControladorException {
		
		Collection<SetorComercial> colecaoSetor = new ArrayList<SetorComercial>();
		
		String colecaoCodigoSetor = "";
		if ( colecaoSetorComercial != null ) {
			
			Iterator<Integer> iteratorSetorComercial = colecaoSetorComercial.iterator();
			while( iteratorSetorComercial.hasNext() ) {
				colecaoCodigoSetor += iteratorSetorComercial.next() +",";
			}
			colecaoCodigoSetor = colecaoCodigoSetor.substring(0, colecaoCodigoSetor.length() -1);
		}
		
		try{
			Collection<Integer> colecaoCodigo = repositorioSetorComercial.pesquisarColecaoSetorComercialTabelasTemporariasParcial(idLocalidade, idEmpresa, 
					colecaoCodigoSetor, selecionados);
			
			if ( colecaoCodigo != null && !colecaoCodigo.isEmpty() ) {
				
				Iterator iterator = colecaoCodigo.iterator();
				while ( iterator.hasNext() ) {
					SetorComercial setorComercial = new SetorComercial();
					Integer codigo = (Integer) iterator.next();
					
					setorComercial.setCodigo(codigo);
					colecaoSetor.add(setorComercial);
				}
			}
			
		}catch(ErroRepositorioException e){
			throw new ControladorException("erro.sistema", e);
		}
		
		return colecaoSetor;
	}
	
	/**
	 * [UC1261] - Gerar Tabelas Temporárias para Atualização Cadastral por Localidade

	 * @author Arthur Carvalho
	 * @since 10/05/2012
	 * 
	 * @return
	 * @throws ErroRepositorioException
	 */
	public Collection<SetorComercial> pesquisarColecaoSetorComercialEnviadosTabelasTemporarias(String idLocalidade, String idEmpresa) 
			throws ControladorException {
		
		Collection<SetorComercial> colecaoSetor = new ArrayList<SetorComercial>();
		
		
		try{
			Collection<Integer> colecaoCodigo = repositorioSetorComercial.pesquisarColecaoSetorComercialEnviadosTabelasTemporarias(idLocalidade, idEmpresa);
			
			if ( colecaoCodigo != null && !colecaoCodigo.isEmpty() ) {
				
				Iterator iterator = colecaoCodigo.iterator();
				while ( iterator.hasNext() ) {
					SetorComercial setorComercial = new SetorComercial();
					Integer codigo = (Integer) iterator.next();
					
					setorComercial.setCodigo(codigo);
					colecaoSetor.add(setorComercial);
				}
			}
			
		}catch(ErroRepositorioException e){
			throw new ControladorException("erro.sistema", e);
		}
		
		return colecaoSetor;
	}
	
	/**
	 * [UC1261] - Gerar Tabelas Temporárias para Atualização Cadastral por Localidade

	 * @author Arthur Carvalho
	 * @since 10/05/2012
	 * 
	 * @return
	 * @throws ErroRepositorioException
	 */
	public Collection<SetorComercial> pesquisarColecaoSetorComercialEnviadosTabelasTemporariasParcial(String idLocalidade, String idEmpresa) 
			throws ControladorException {
		
		Collection<SetorComercial> colecaoSetor = new ArrayList<SetorComercial>();
		
		
		try{
			Collection<Integer> colecaoCodigo = repositorioSetorComercial.pesquisarColecaoSetorComercialEnviadosTabelasTemporariasParcial(idLocalidade, idEmpresa);
			
			if ( colecaoCodigo != null && !colecaoCodigo.isEmpty() ) {
				
				Iterator iterator = colecaoCodigo.iterator();
				while ( iterator.hasNext() ) {
					SetorComercial setorComercial = new SetorComercial();
					Integer codigo = (Integer) iterator.next();
					
					setorComercial.setCodigo(codigo);
					colecaoSetor.add(setorComercial);
				}
			}
			
		}catch(ErroRepositorioException e){
			throw new ControladorException("erro.sistema", e);
		}
		
		return colecaoSetor;
	}
	
	/**
	 * [UC1261] - Gerar Tabelas Temporárias para Atualização Cadastral por Localidade

	 * @author Arthur Carvalho
	 * @since 10/05/2012
	 * 
	 * @return
	 * @throws ErroRepositorioException
	 */
	public Collection<SetorComercial> pesquisarColecaoSetorComercialEnviadosTabelasTemporarias(String idLocalidade, String idEmpresa, 
			Collection<Integer> colecaoSetorComercialSelecionados) throws ControladorException {
		
		Collection<SetorComercial> colecaoSetor = new ArrayList<SetorComercial>();
		
		String colecaoCodigoSetor = "";
		if ( colecaoSetorComercialSelecionados != null ) {
			
			Iterator<Integer> iteratorSetorComercial = colecaoSetorComercialSelecionados.iterator();
			while( iteratorSetorComercial.hasNext() ) {
				colecaoCodigoSetor += iteratorSetorComercial.next() +",";
			}
			colecaoCodigoSetor = colecaoCodigoSetor.substring(0, colecaoCodigoSetor.length() -1);
		}
		try{
			Collection<Integer> colecaoCodigo = repositorioSetorComercial.pesquisarColecaoSetorComercialEnviadosTabelasTemporarias(idLocalidade, idEmpresa, colecaoCodigoSetor);
			
			if ( colecaoCodigo != null && !colecaoCodigo.isEmpty() ) {
				
				Iterator iterator = colecaoCodigo.iterator();
				while ( iterator.hasNext() ) {
					SetorComercial setorComercial = new SetorComercial();
					Integer codigo = (Integer) iterator.next();
					
					setorComercial.setCodigo(codigo);
					colecaoSetor.add(setorComercial);
				}
			}
			
		}catch(ErroRepositorioException e){
			throw new ControladorException("erro.sistema", e);
		}
		
		return colecaoSetor;
	}
	/**
	 * [UC1261] - Gerar Tabelas Temporárias para Atualização Cadastral por Localidade
	 * 
	 * @author Arthur Carvalho
	 * @since 12/05/2012
	 * 
	 * @param idEmpresa
	 * @return
	 * @throws ErroRepositorioException
	 */
	public Collection<Localidade> pesquisarLocalidadeAreaAtualizacaoCadastral(Integer idEmpresa) throws ControladorException {
		
		try{
			return repositorioCadastro.pesquisarLocalidadeAreaAtualizacaoCadastral(idEmpresa);
			
		}catch(ErroRepositorioException e){
			throw new ControladorException("erro.sistema", e);
		}
	}
	
	/**
	 * [UC1261] - Gerar Tabelas Temporárias para Atualização Cadastral por Localidade

	 * @author Arthur Carvalho
	 * @since 10/05/2012
	 * 
	 * @return
	 * @throws ErroRepositorioException
	 */
	public Collection<SetorComercial> pesquisarColecaoSetorComercialEnviadosTabelasTemporariasParcial(String idLocalidade, String idEmpresa, 
			Collection<Integer> colecaoSetorComercialSelecionados) throws ControladorException {
		
		Collection<SetorComercial> colecaoSetor = new ArrayList<SetorComercial>();
		
		String colecaoCodigoSetor = "";
		if ( colecaoSetorComercialSelecionados != null ) {
			
			Iterator<Integer> iteratorSetorComercial = colecaoSetorComercialSelecionados.iterator();
			while( iteratorSetorComercial.hasNext() ) {
				colecaoCodigoSetor += iteratorSetorComercial.next() +",";
			}
			colecaoCodigoSetor = colecaoCodigoSetor.substring(0, colecaoCodigoSetor.length() -1);
		}
		try{
			Collection<Integer> colecaoCodigo = repositorioSetorComercial.pesquisarColecaoSetorComercialEnviadosTabelasTemporariasParcial(idLocalidade, idEmpresa, colecaoCodigoSetor);
			
			if ( colecaoCodigo != null && !colecaoCodigo.isEmpty() ) {
				
				Iterator iterator = colecaoCodigo.iterator();
				while ( iterator.hasNext() ) {
					SetorComercial setorComercial = new SetorComercial();
					Integer codigo = (Integer) iterator.next();
					
					setorComercial.setCodigo(codigo);
					colecaoSetor.add(setorComercial);
				}
			}
			
		}catch(ErroRepositorioException e){
			throw new ControladorException("erro.sistema", e);
		}
		
		return colecaoSetor;
	}
	

	/**
     * [UC1333] Gerar Relatório por tipo de servico
     * 
     * @author Carlos Chaves
     * @date 04/05/2012
     */
 	public Collection<RelatorioTipoServicoBean> pesquisarDadosRelatorioTipoServico(GerarRelatorioTipoServicoHelper helper)
 		throws ControladorException {
 		
 		Collection<RelatorioTipoServicoBean> retorno = new ArrayList<RelatorioTipoServicoBean>();
 		Collection<Object[]> colecaoDadosConsulta = null;
 		
 		
 		try {
 			//POR USUARIO
 			if(helper.getTipoRelatorio().equals("1")){
 				
 				if(helper.getIdServico().equals("1")){
 					colecaoDadosConsulta = this.repositorioCadastro.pesquisarDadosRelatorioTipoServicoParcelamentoPorUsuario(helper);
 				}else if(helper.getIdServico().equals("2")){
 					colecaoDadosConsulta = this.repositorioCadastro.pesquisarDadosRelatorioTipoServicoSegundaViaPorUsuario(helper);
 				}else if(helper.getIdServico().equals("3")){
 					colecaoDadosConsulta = this.repositorioCadastro.pesquisarDadosRelatorioTipoServicoExtratoDebitoPorUsuario(helper);
 				}else if(helper.getIdServico().equals("4")){
 					colecaoDadosConsulta = this.repositorioCadastro.pesquisarDadosRelatorioTipoServicoAverbacaoPorUsuario(helper);
 				}else if(helper.getIdServico().equals("5")){
 					colecaoDadosConsulta = this.repositorioCadastro.pesquisarDadosRelatorioTipoServicoRevisaoConsumoPorUsuario(helper);
 				}
 				
 				for (Object[] dadosConsulta : colecaoDadosConsulta) {
 	 				RelatorioTipoServicoBean bean = new RelatorioTipoServicoBean((String)dadosConsulta[2],(Integer)dadosConsulta[1],(String)dadosConsulta[0],(String)dadosConsulta[3],(String)dadosConsulta[4]);
 	 				retorno.add(bean);
 	 			}
 			}
 			
 			//POR LOCALIDADE
 			if(helper.getTipoRelatorio().equals("2")){
 				
 				if(helper.getIdServico().equals("1")){
 					if(helper.getOpcaoTotalizacao() !=null && helper.getOpcaoTotalizacao().equals("estado") && !helper.getOpcaoTotalizacao().equals("")){
 						colecaoDadosConsulta = this.repositorioCadastro.pesquisarDadosRelatorioTipoServicoParcelamentoPorLocalidadeEstado(helper);
 					}else if(helper.getOpcaoTotalizacao() !=null && ( helper.getOpcaoTotalizacao().equals("estadoGerencia") || helper.getOpcaoTotalizacao().equals("gerenciaRegional")) && !helper.getOpcaoTotalizacao().equals("")){
 						colecaoDadosConsulta = this.repositorioCadastro.pesquisarDadosRelatorioTipoServicoParcelamentoPorLocalidadeEstadoGerencia(helper);
 					}else if(helper.getOpcaoTotalizacao() !=null && helper.getOpcaoTotalizacao().equals("estadoUnidadeNegocio") && !helper.getOpcaoTotalizacao().equals("")){
 						colecaoDadosConsulta = this.repositorioCadastro.pesquisarDadosRelatorioTipoServicoParcelamentoPorLocalidadeEstadoNegocio(helper);
 					}else if(helper.getOpcaoTotalizacao() !=null && helper.getOpcaoTotalizacao().equals("unidadeNegocio") && !helper.getOpcaoTotalizacao().equals("")){
 						colecaoDadosConsulta = this.repositorioCadastro.pesquisarDadosRelatorioTipoServicoParcelamentoPorLocalidadeEstadoNegocio(helper);
 					}else if(helper.getOpcaoTotalizacao() !=null && ( helper.getOpcaoTotalizacao().equals("estadoLocalidade") || helper.getOpcaoTotalizacao().equals("localidade") ) && !helper.getOpcaoTotalizacao().equals("")){
 						colecaoDadosConsulta = this.repositorioCadastro.pesquisarDadosRelatorioTipoServicoParcelamentoPorLocalidadeEstadoLocalidade(helper);
 					}else if(helper.getOpcaoTotalizacao() !=null && helper.getOpcaoTotalizacao().equals("gerenciaRegionalLocalidade") && !helper.getOpcaoTotalizacao().equals("")){
 						colecaoDadosConsulta = this.repositorioCadastro.pesquisarDadosRelatorioTipoServicoParcelamentoPorLocalidadeGerenciaLocalidade(helper);
 					}else{
 						//colecaoDadosConsulta = this.repositorioCadastro.pesquisarDadosRelatorioTipoServicoParcelamentoPorLocalidade(helper);
 					}
 					
 					
 				}
 				else if(helper.getIdServico().equals("2")){
 					if(helper.getOpcaoTotalizacao() !=null && helper.getOpcaoTotalizacao().equals("estado") && !helper.getOpcaoTotalizacao().equals("")){
 						colecaoDadosConsulta = this.repositorioCadastro.pesquisarDadosRelatorioTipoServicoSegundaViaPorLocalidadeEstado(helper);
 					}else if(helper.getOpcaoTotalizacao() !=null && ( helper.getOpcaoTotalizacao().equals("estadoGerencia") || helper.getOpcaoTotalizacao().equals("gerenciaRegional")) && !helper.getOpcaoTotalizacao().equals("")){
 						colecaoDadosConsulta = this.repositorioCadastro.pesquisarDadosRelatorioTipoServicoSegundaViaPorLocalidadeEstadoGerencia(helper);
 					}else if(helper.getOpcaoTotalizacao() !=null && helper.getOpcaoTotalizacao().equals("estadoUnidadeNegocio") && !helper.getOpcaoTotalizacao().equals("")){
 						colecaoDadosConsulta = this.repositorioCadastro.pesquisarDadosRelatorioTipoServicoSegundaViaPorLocalidadeEstadoNegocio(helper);
 					}else if(helper.getOpcaoTotalizacao() !=null && helper.getOpcaoTotalizacao().equals("unidadeNegocio") && !helper.getOpcaoTotalizacao().equals("")){
 						colecaoDadosConsulta = this.repositorioCadastro.pesquisarDadosRelatorioTipoServicoSegundaViaPorLocalidadeEstadoNegocio(helper);
 					}else if(helper.getOpcaoTotalizacao() !=null && ( helper.getOpcaoTotalizacao().equals("estadoLocalidade") || helper.getOpcaoTotalizacao().equals("localidade") ) && !helper.getOpcaoTotalizacao().equals("")){
 						colecaoDadosConsulta = this.repositorioCadastro.pesquisarDadosRelatorioTipoServicoSegundaViaPorLocalidadeEstadoLocalidade(helper);
 					}else if(helper.getOpcaoTotalizacao() !=null && helper.getOpcaoTotalizacao().equals("gerenciaRegionalLocalidade") && !helper.getOpcaoTotalizacao().equals("")){
 						colecaoDadosConsulta = this.repositorioCadastro.pesquisarDadosRelatorioTipoServicoSegundaViaPorLocalidadeGerenciaLocalidade(helper);
 					}else{
 						//colecaoDadosConsulta = this.repositorioCadastro.pesquisarDadosRelatorioTipoServicoSegundaViaPorLocalidade(helper);
 					}		
 				}
 				else if(helper.getIdServico().equals("3")){
 					if(helper.getOpcaoTotalizacao() !=null && helper.getOpcaoTotalizacao().equals("estado") && !helper.getOpcaoTotalizacao().equals("")){
 						colecaoDadosConsulta = this.repositorioCadastro.pesquisarDadosRelatorioTipoServicoExtratoDebitoPorLocalidadeEstado(helper);
 					}else if(helper.getOpcaoTotalizacao() !=null && ( helper.getOpcaoTotalizacao().equals("estadoGerencia") || helper.getOpcaoTotalizacao().equals("gerenciaRegional")) && !helper.getOpcaoTotalizacao().equals("")){
 						colecaoDadosConsulta = this.repositorioCadastro.pesquisarDadosRelatorioTipoServicoExtratoDebitoPorLocalidadeEstadoGerencia(helper);
 					}else if(helper.getOpcaoTotalizacao() !=null && helper.getOpcaoTotalizacao().equals("estadoUnidadeNegocio") && !helper.getOpcaoTotalizacao().equals("")){
 						colecaoDadosConsulta = this.repositorioCadastro.pesquisarDadosRelatorioTipoServicoExtratoDebitoPorLocalidadeEstadoNegocio(helper);
 					}else if(helper.getOpcaoTotalizacao() !=null && helper.getOpcaoTotalizacao().equals("unidadeNegocio") && !helper.getOpcaoTotalizacao().equals("")){
 						colecaoDadosConsulta = this.repositorioCadastro.pesquisarDadosRelatorioTipoServicoExtratoDebitoPorLocalidadeEstadoNegocio(helper);
 					}else if(helper.getOpcaoTotalizacao() !=null && (helper.getOpcaoTotalizacao().equals("estadoLocalidade") || helper.getOpcaoTotalizacao().equals("localidade") ) && !helper.getOpcaoTotalizacao().equals("")){
 						colecaoDadosConsulta = this.repositorioCadastro.pesquisarDadosRelatorioTipoServicoExtratoDebitoPorLocalidadeEstadoLocalidade(helper);
 					}else if(helper.getOpcaoTotalizacao() !=null && helper.getOpcaoTotalizacao().equals("gerenciaRegionalLocalidade") && !helper.getOpcaoTotalizacao().equals("")){
 						colecaoDadosConsulta = this.repositorioCadastro.pesquisarDadosRelatorioTipoServicoExtratoDebitoPorLocalidadeGerenciaLocalidade(helper);
 					}else{
 						//colecaoDadosConsulta = this.repositorioCadastro.pesquisarDadosRelatorioTipoServicoExtratoDebitoPorLocalidade(helper);
 					}
 					
 				}
 				
 				else if(helper.getIdServico().equals("4")){
 					if(helper.getOpcaoTotalizacao() !=null && helper.getOpcaoTotalizacao().equals("estado") && !helper.getOpcaoTotalizacao().equals("")){
 						colecaoDadosConsulta = this.repositorioCadastro.pesquisarDadosRelatorioTipoServicoAverbacaoPorLocalidadeEstado(helper);
 					}else if(helper.getOpcaoTotalizacao() !=null && ( helper.getOpcaoTotalizacao().equals("estadoGerencia") || helper.getOpcaoTotalizacao().equals("gerenciaRegional")) && !helper.getOpcaoTotalizacao().equals("")){
 						colecaoDadosConsulta = this.repositorioCadastro.pesquisarDadosRelatorioTipoServicoAverbacaoPorLocalidadeEstadoGerencia(helper);
 					}else if(helper.getOpcaoTotalizacao() !=null && helper.getOpcaoTotalizacao().equals("estadoUnidadeNegocio") && !helper.getOpcaoTotalizacao().equals("")){
 						colecaoDadosConsulta = this.repositorioCadastro.pesquisarDadosRelatorioTipoServicoAverbacaoPorLocalidadeEstadoNegocio(helper);
 					}else if(helper.getOpcaoTotalizacao() !=null && helper.getOpcaoTotalizacao().equals("unidadeNegocio") && !helper.getOpcaoTotalizacao().equals("")){
 						colecaoDadosConsulta = this.repositorioCadastro.pesquisarDadosRelatorioTipoServicoAverbacaoPorLocalidadeEstadoNegocio(helper);
 					}else if(helper.getOpcaoTotalizacao() !=null && (helper.getOpcaoTotalizacao().equals("estadoLocalidade") || helper.getOpcaoTotalizacao().equals("localidade") ) && !helper.getOpcaoTotalizacao().equals("")){
 						colecaoDadosConsulta = this.repositorioCadastro.pesquisarDadosRelatorioTipoServicoAverbacaoPorLocalidadeEstadoLocalidade(helper);
 					}else if(helper.getOpcaoTotalizacao() !=null && helper.getOpcaoTotalizacao().equals("gerenciaRegionalLocalidade") && !helper.getOpcaoTotalizacao().equals("")){
 						colecaoDadosConsulta = this.repositorioCadastro.pesquisarDadosRelatorioTipoServicoAverbacaoPorLocalidadeGerenciaLocalidade(helper);
 					}else{
 						//colecaoDadosConsulta = this.repositorioCadastro.pesquisarDadosRelatorioTipoServicoAverbacaoPorLocalidade(helper);
 					}
 					
 				}
 				
 				else if(helper.getIdServico().equals("5")){
 					
 					if(helper.getOpcaoTotalizacao() !=null && helper.getOpcaoTotalizacao().equals("estado") && !helper.getOpcaoTotalizacao().equals("")){
 						colecaoDadosConsulta = this.repositorioCadastro.pesquisarDadosRelatorioTipoServicoRevisaoConsumoPorLocalidadeEstado(helper);
 					}else if(helper.getOpcaoTotalizacao() !=null && ( helper.getOpcaoTotalizacao().equals("estadoGerencia") || helper.getOpcaoTotalizacao().equals("gerenciaRegional"))  && !helper.getOpcaoTotalizacao().equals("")){
 						colecaoDadosConsulta = this.repositorioCadastro.pesquisarDadosRelatorioTipoServicoRevisaoConsumoPorLocalidadeEstadoGerencia(helper);
 					}else if(helper.getOpcaoTotalizacao() !=null && helper.getOpcaoTotalizacao().equals("estadoUnidadeNegocio") && !helper.getOpcaoTotalizacao().equals("")){
 						colecaoDadosConsulta = this.repositorioCadastro.pesquisarDadosRelatorioTipoServicoRevisaoConsumoPorLocalidadeEstadoNegocio(helper);
 					}else if(helper.getOpcaoTotalizacao() !=null && helper.getOpcaoTotalizacao().equals("unidadeNegocio") && !helper.getOpcaoTotalizacao().equals("")){
 						colecaoDadosConsulta = this.repositorioCadastro.pesquisarDadosRelatorioTipoServicoRevisaoConsumoPorLocalidadeEstadoNegocio(helper);
 					}else if(helper.getOpcaoTotalizacao() !=null && ( helper.getOpcaoTotalizacao().equals("estadoLocalidade") || helper.getOpcaoTotalizacao().equals("localidade") ) && !helper.getOpcaoTotalizacao().equals("")){
 						colecaoDadosConsulta = this.repositorioCadastro.pesquisarDadosRelatorioTipoServicoRevisaoConsumoPorLocalidadeEstadoLocalidade(helper);
 					}else if(helper.getOpcaoTotalizacao() !=null && helper.getOpcaoTotalizacao().equals("gerenciaRegionalLocalidade") && !helper.getOpcaoTotalizacao().equals("")){
 						colecaoDadosConsulta = this.repositorioCadastro.pesquisarDadosRelatorioTipoServicoRevisaoConsumoPorLocalidadeGerenciaLocalidade(helper);
 					}else{
 						//colecaoDadosConsulta = this.repositorioCadastro.pesquisarDadosRelatorioTipoServicoRevisaoConsumoPorLocalidade(helper);
 					}
 					
 				}
 				
 				
 				
 				
 				for (Object[] dadosConsulta : colecaoDadosConsulta) {
 					
 					int quantidadeRegistro = (Integer)dadosConsulta[0];
 					
 						
 					if(helper.getOpcaoTotalizacao() !=null && helper.getOpcaoTotalizacao().equals("gerenciaRegionalLocalidade") && !helper.getOpcaoTotalizacao().equals("")){
 						RelatorioTipoServicoBean bean = new RelatorioTipoServicoBean((Integer)dadosConsulta[0], (String)dadosConsulta[1], (String)dadosConsulta[2] );
 	 	 				retorno.add(bean);	
 					}else if(helper.getOpcaoTotalizacao().equals("estado") && quantidadeRegistro == 0){
 						// FAZER NADA
 					}
 					else{
 						RelatorioTipoServicoBean bean = new RelatorioTipoServicoBean((Integer)dadosConsulta[0], (String)dadosConsulta[1], "");
 						retorno.add(bean);
 					}
				}
 				
 				
 				
 			}
 			
 			//POR SOLICITACAO
 			else if(helper.getTipoRelatorio().equals("3")){
 				
 				if(helper.getIdServico().equals("1")){
 					colecaoDadosConsulta = this.repositorioCadastro.pesquisarDadosRelatorioTipoServicoParcelamentoPorMeioSolicitacao(helper);
 				}else if(helper.getIdServico().equals("2")){
 					colecaoDadosConsulta = this.repositorioCadastro.pesquisarDadosRelatorioTipoServicoSegundaViaPorMeioSolicitacao(helper);
 				}else if(helper.getIdServico().equals("3")){
 					colecaoDadosConsulta = this.repositorioCadastro.pesquisarDadosRelatorioTipoServicoExtratoDebitoPorMeioSolicitacao(helper);
 				}else if(helper.getIdServico().equals("4")){
 					colecaoDadosConsulta = this.repositorioCadastro.pesquisarDadosRelatorioTipoServicoAverbacaoPorMeioSolicitacao(helper);
 				}else if(helper.getIdServico().equals("5")){
 					colecaoDadosConsulta = this.repositorioCadastro.pesquisarDadosRelatorioTipoServicoRevisaoConsumoPorMeioSolicitacao(helper);
 				}
 				
 				for (Object[] dadosConsulta : colecaoDadosConsulta) {
 	 				RelatorioTipoServicoBean bean = new RelatorioTipoServicoBean((String)dadosConsulta[0],(Integer)dadosConsulta[1]);
 	 				retorno.add(bean);
 	 			}
 				
 			}
 			
	            
	    } catch (ErroRepositorioException e) {        	
	        throw new ControladorException("erro.sistema", e);	            
	    }
	    
	    return retorno;
 	}
	
	
	/**
	 * [UC1337] Atualizar Logradouro do Imóvel da Atualização Cadastral
	 * 
	 * @author Arthur Carvalho
	 * @date 16/05/2012
	 */
	public void atualizarLogradouroImovelAtualizacaoCadastral(Integer idFuncionalidadeIniciada) throws ControladorException {

		int idUnidadeIniciada = 0;

		/*
		 * Registrar o início do processamento da Unidade de
		 * Processamento do Batch
		*/		
		idUnidadeIniciada = getControladorBatch().iniciarUnidadeProcessamentoBatch(idFuncionalidadeIniciada,UnidadeProcessamento.FUNCIONALIDADE,0);
		
		try {

			Collection<RetornoAtualizacaoCadastral>  colecaoRetornoAtualizacaoCadastral = repositorioCadastro.pesquisarRetornoAtualizacaoCadastralPendenteLogradouro();

			if ( colecaoRetornoAtualizacaoCadastral != null && !colecaoRetornoAtualizacaoCadastral.isEmpty() ) {
				
				Iterator<RetornoAtualizacaoCadastral> iteratorRetornoAtualizacaoCadastral = colecaoRetornoAtualizacaoCadastral.iterator();
				while ( iteratorRetornoAtualizacaoCadastral.hasNext() ) {
					
					RetornoAtualizacaoCadastral retornoAtualizacaoCadastral = (RetornoAtualizacaoCadastral) iteratorRetornoAtualizacaoCadastral.next();
					
					ImovelAtualizacaoCadastral imovelAtualizacaoCadastral = retornoAtualizacaoCadastral.getImovelAtualizacaoCadastral();
					
					Long idLogradouro = null;
					Integer idBairro = null;
					
					//[SB0001]-Atualizar Logradouro 

					idLogradouro = imovelAtualizacaoCadastral.getIdLogradouro();

					
					
					//[SB0002]-Atualizar Bairro 
					if ( imovelAtualizacaoCadastral.getIndicadorBairroNovo().equals(ConstantesSistema.SIM) ) {
						
						idBairro = repositorioCadastro.pesquisaridBairroGsanAdmin(imovelAtualizacaoCadastral.getIdBairro());
					} else {
						idBairro = imovelAtualizacaoCadastral.getIdBairro();
					}
					
					
					//[SB0003] - Atualizar Logradouro Bairro 
					Imovel imovel = repositorioImovel.pesquisarImovel(imovelAtualizacaoCadastral.getImovel());
					FiltroLogradouroBairro filtroLogradouroBairro = new FiltroLogradouroBairro();
					filtroLogradouroBairro.adicionarParametro( new ParametroSimples(FiltroLogradouroBairro.ID_LOGRADOURO, idLogradouro));
					filtroLogradouroBairro.adicionarParametro( new ParametroSimples(FiltroLogradouroBairro.ID_BAIRRO, idBairro));
					
					Collection<LogradouroBairro> colecaoLogradouroBairro = repositorioUtil.pesquisar(filtroLogradouroBairro, LogradouroBairro.class.getName());
					
					if ( colecaoLogradouroBairro != null && !colecaoLogradouroBairro.isEmpty() ) {
						
						LogradouroBairro logradouroBairro = (LogradouroBairro) Util.retonarObjetoDeColecao(colecaoLogradouroBairro);
					
						repositorioCadastro.atualizarLogradouroBairroDoImovel(imovel.getId(), logradouroBairro.getId());
							
					} else {
						LogradouroBairro logradouroBairro = new LogradouroBairro();
						
						Logradouro logradouro = new Logradouro();
						logradouro.setId(idLogradouro.intValue());
						//logr_id
						logradouroBairro.setLogradouro(logradouro);
						
						//bair_id
						Bairro bairro  = new Bairro();
						bairro.setId(idBairro);
						logradouroBairro.setBairro(bairro);
						
						logradouroBairro.setUltimaAlteracao(new Date());
						
						Integer idLogradouroBairro = (Integer) repositorioUtil.inserir(logradouroBairro);
						repositorioCadastro.atualizarLogradouroBairroDoImovel(imovel.getId(), idLogradouroBairro);
						
					}
					
					
					//[SB0004] - Atualizar Logradouro CEP 
					if ( imovel.getLogradouroCep() != null && imovel.getLogradouroCep().getCep() != null && imovel.getLogradouroCep().getCep().getCepId() != null ) {
						
						FiltroLogradouroCep filtroLogradouroCep = new FiltroLogradouroCep();
						filtroLogradouroCep.adicionarParametro( new ParametroSimples(FiltroLogradouroCep.ID_LOGRADOURO, idLogradouro));
						filtroLogradouroCep.adicionarParametro( new ParametroSimples(FiltroLogradouroCep.ID_CEP, imovel.getLogradouroCep().getCep().getCepId()));
						
						Collection<LogradouroCep> colecaoLogradouroCep = repositorioUtil.pesquisar(filtroLogradouroCep, LogradouroCep.class.getName());
						
						if ( colecaoLogradouroCep != null && !colecaoLogradouroCep.isEmpty() ) {
						
							LogradouroCep logradouroCep = (LogradouroCep) Util.retonarObjetoDeColecao(colecaoLogradouroCep);
							
							repositorioCadastro.atualizarLogradouroCepDoImovel(imovel.getId(), logradouroCep.getId());
						} else {
							
							LogradouroCep logradouroCep = new LogradouroCep();
							
							Logradouro logradouro = new Logradouro();
							logradouro.setId(idLogradouro.intValue());
							logradouroCep.setLogradouro(logradouro);
							
							Cep cep = new Cep();
							cep.setCepId(imovel.getLogradouroCep().getCep().getCepId());
							logradouroCep.setCep(cep);
							
							logradouroCep.setIndicadorUso(ConstantesSistema.SIM);
							logradouroCep.setUltimaAlteracao(new Date());
							
							Integer idLogradouroCep = (Integer) repositorioUtil.inserir(logradouroCep);
							
							repositorioCadastro.atualizarLogradouroCepDoImovel(imovel.getId(), idLogradouroCep);
							
						}
					}
					
					retornoAtualizacaoCadastral.setDataAtualizacao(new Date());
					retornoAtualizacaoCadastral.setCodigoSituacao(RetornoAtualizacaoCadastral.SITUACAO_ATUALIZADO);
					
					MensagemAtualizacaoCadastral mensagemAtualizacaoCadastral = new MensagemAtualizacaoCadastral();
					mensagemAtualizacaoCadastral.setId(MensagemAtualizacaoCadastral.ATUALIZACAO_COM_SUCESSO);
					retornoAtualizacaoCadastral.setMensagemAtualizacaoCadastral(mensagemAtualizacaoCadastral);
					
					repositorioUtil.atualizar(retornoAtualizacaoCadastral);
					
				}
			}
		
			getControladorBatch().encerrarUnidadeProcessamentoBatch(null,idUnidadeIniciada, false);

		} catch (Exception ex) {
			ex.printStackTrace();
			getControladorBatch().encerrarUnidadeProcessamentoBatch(ex,
					idUnidadeIniciada, true);
			throw new EJBException(ex);
		}
	}
	
	/**
     * [UC1261] - Gerar Tabelas Temporárias para Atualização Cadastral por Localidade

     * @author Arthur Carvalho
     * @since 10/05/2012
     *
     * @return
     * @throws ErroRepositorioException
     */
    public Collection<Quadra> pesquisarColecaoQuadraTabelasTemporarias(String idLocalidade, Collection<Integer> colecaoSetorComercialSelecionados)
            throws ControladorException {
       
        Collection<Quadra> colecaoQuadra = new ArrayList<Quadra>();
       
        String colecaoCodigoSetor = "";
        if ( colecaoSetorComercialSelecionados != null ) {
           
            Iterator<Integer> iteratorSetorComercial = colecaoSetorComercialSelecionados.iterator();
            while( iteratorSetorComercial.hasNext() ) {
                colecaoCodigoSetor += iteratorSetorComercial.next() +",";
            }
            colecaoCodigoSetor = colecaoCodigoSetor.substring(0, colecaoCodigoSetor.length() -1);
        }
        try{
            Collection<Integer[]> colecaoCodigo = 
            	repositorioCadastro.pesquisarColecaoQuadraTabelasTemporarias(idLocalidade, colecaoCodigoSetor);
           
            if ( colecaoCodigo != null && !colecaoCodigo.isEmpty() ) {
               
                Iterator iterator = colecaoCodigo.iterator();
                while ( iterator.hasNext() ) {
                    
                    Object[] array = (Object[]) iterator.next();
                    
                    Integer numero = (Integer) array[0];
                    Integer codigoSetor = (Integer) array[1];
                   
                    Quadra quadra = new Quadra();
                    quadra.setNumeroQuadra(numero);
                    
                    SetorComercial setor = new SetorComercial();
                    setor.setCodigo(codigoSetor);
                    quadra.setSetorComercial(setor);
                    
                    colecaoQuadra.add(quadra);
                }
            }
           
        }catch(ErroRepositorioException e){
            throw new ControladorException("erro.sistema", e);
        }
       
        return colecaoQuadra;
    }
	
	/**
	 * [UC 1328] - Suspender Localidade para Atualização Cadastral
	 * [SF 0002] - Atualizar o indicador de bloquear logradouro do municipio
	 * 
	 * @author Davi Menezes
	 * @date 01/06/2012
	 * 
	 * @param idMunicipio
	 * @return
	 * @throws ControladorException
	 */
	public Collection<AreaAtualizacaoCadastral> pesquisarMunicipioAreaAtualizacaoCadastral(Integer idMunicipio)
			throws ControladorException {
		try{
			return repositorioCadastro.pesquisarMunicipioAreaAtualizacaoCadastral(idMunicipio);
		}catch (ErroRepositorioException e) {
			throw new ControladorException("erro.sistema", e);
		}
	}
	
	/**
	 * [UC1288] Atualizar Dados Cadastrais do Imóvel pelo Recadastramento
	 * [SB0011 - Validar Cliente].
	 * 
	 * @author Vivianne Sousa
	 * @date 10/07/2012
	 */
	public Boolean verificarClienteIgualClienteAtualizacaoCadastral(ClienteImovel clienteImovel,
			ClienteAtualizacaoCadastral clienteAtualizacaoCadastral)throws ControladorException {
		
		try{
			
			Boolean clienteIgualClienteAtualizacaoCadastral = false;
			Cliente cliente = null;
			
			if(clienteImovel != null && clienteImovel.getCliente() != null){
				cliente = clienteImovel.getCliente();
				Integer idOrgaoExpedidor = repositorioCadastro.pesquisarOrgaoExpedidorDoRG(clienteAtualizacaoCadastral.getImovelAtualizacaoCadastral().getId());
				Integer idUnidadeFederacao = repositorioCadastro.pesquisarUnidadeFederacaoDoRG(clienteAtualizacaoCadastral.getImovelAtualizacaoCadastral().getId());
				
				Integer idOrgaoExpedidorCliente = null;
				if(cliente.getOrgaoExpedidorRg() != null){
					idOrgaoExpedidorCliente = cliente.getOrgaoExpedidorRg().getId();
				}
				Integer idUnidadeFederacaoCliente = null;
				if(cliente.getUnidadeFederacao() != null){
					idUnidadeFederacaoCliente = cliente.getUnidadeFederacao().getId();
				}
				Integer idClienteTipo = null;
				if(cliente.getClienteTipo() != null){
					idClienteTipo = cliente.getClienteTipo().getId();
				}
				Integer idProfissaoCliente  = null;
				if(cliente.getProfissao() != null){
					idProfissaoCliente = cliente.getProfissao().getId();
				}
				Integer idSexoCliente = null;
				if(cliente.getPessoaSexo() != null){
					idSexoCliente = cliente.getPessoaSexo().getId();
				}
				Integer idRamoAtividade = null;
				if(cliente.getRamoAtividade() != null){
					idRamoAtividade = cliente.getRamoAtividade().getId();
				}
				
				//Util.ehIgual(cliente.getId(),clienteAtualizacaoCadastral.getIdCliente())
				if(
						   Util.ehIgual(cliente.getNome(),clienteAtualizacaoCadastral.getNomeCliente())
						&& Util.ehIgual(cliente.getNomeAbreviado(),clienteAtualizacaoCadastral.getNomeAbreviadoCliente())
						&& Util.ehIgual(idClienteTipo,clienteAtualizacaoCadastral.getIdClienteTipo())
						&& Util.ehIgual(cliente.getRg(),clienteAtualizacaoCadastral.getRg())
						&& Util.ehIgual(cliente.getDataEmissaoRg(),clienteAtualizacaoCadastral.getDataEmissaoRg())
						&& (Util.ehIgual(idOrgaoExpedidorCliente,idOrgaoExpedidor) || idOrgaoExpedidor == null)
						&& (Util.ehIgual(idUnidadeFederacaoCliente,idUnidadeFederacao) || idUnidadeFederacao == null)
						&& Util.ehIgual(cliente.getDataNascimento(),clienteAtualizacaoCadastral.getDataNascimento())
						&& Util.ehIgual(idProfissaoCliente,clienteAtualizacaoCadastral.getIdProfissao())
						&& Util.ehIgual(idSexoCliente,clienteAtualizacaoCadastral.getIdPessoaSexo())
						&& Util.ehIgual(idRamoAtividade,clienteAtualizacaoCadastral.getIdRamoAtividade())
						&& Util.ehIgual(cliente.getEmail(),clienteAtualizacaoCadastral.getEmail())
						&& Util.ehIgual(cliente.getNomeMae(),clienteAtualizacaoCadastral.getNomeMae())
						&& (Util.ehIgual(cliente.getCpf(),clienteAtualizacaoCadastral.getCpfCnpj()) 
							|| Util.ehIgual(cliente.getCnpj(),clienteAtualizacaoCadastral.getCpfCnpj()))
						&& Util.ehIgual(clienteImovel.getDataFimRelacao(),clienteAtualizacaoCadastral.getDataRelacaoFim())
					){
						
					clienteIgualClienteAtualizacaoCadastral = true;
				}
				
				//comparar se foi alterado o telefone
				if(clienteIgualClienteAtualizacaoCadastral){
					
					Collection colecaoClienteFoneAtualizacaoCadastral = getControladorCliente().
							obterDadosClienteFoneAtualizacaoCadastral(clienteAtualizacaoCadastral.getId());
					Collection colecaoClienteFone = repositorioCliente.pesquisarClienteFone(cliente.getId());
					
					if((colecaoClienteFoneAtualizacaoCadastral != null && !colecaoClienteFoneAtualizacaoCadastral.isEmpty())
						&& (colecaoClienteFone == null || colecaoClienteFone.isEmpty())){
						clienteIgualClienteAtualizacaoCadastral = false;
						
					}else if(colecaoClienteFoneAtualizacaoCadastral != null && !colecaoClienteFoneAtualizacaoCadastral.isEmpty()
							&& colecaoClienteFone != null && !colecaoClienteFone.isEmpty()){
						
						if(colecaoClienteFoneAtualizacaoCadastral.size() > colecaoClienteFone.size()){
							clienteIgualClienteAtualizacaoCadastral = false;
							
						}else{
							
							Iterator iterClienteFoneAtualizacaoCadastral = colecaoClienteFoneAtualizacaoCadastral.iterator();
							while (iterClienteFoneAtualizacaoCadastral.hasNext() && clienteIgualClienteAtualizacaoCadastral) {
								ClienteFoneAtualizacaoCadastral clienteFoneAtualizacaoCadastral = 
										(ClienteFoneAtualizacaoCadastral) iterClienteFoneAtualizacaoCadastral.next();
								
								boolean existeFone = false;
								Iterator iterClienteFone = colecaoClienteFone.iterator();
								while (iterClienteFone.hasNext() && !existeFone) {
									ClienteFone clienteFone = (ClienteFone) iterClienteFone.next();
								
									if(Util.ehIgual(clienteFone.getTelefone(),clienteFoneAtualizacaoCadastral.getTelefone())
									&& Util.ehIgual(clienteFone.getDdd(),clienteFoneAtualizacaoCadastral.getDdd())
									&& Util.ehIgual(clienteFone.getRamal(),clienteFoneAtualizacaoCadastral.getRamal())
									&& Util.ehIgual(clienteFone.getFoneTipo().getId(),clienteFoneAtualizacaoCadastral.getIdFoneTipo())
									&& Util.ehIgual(clienteFone.getContato(),clienteFoneAtualizacaoCadastral.getContato())
									&& Util.ehIgual(clienteFone.getIndicadorTelefonePadrao(),clienteFoneAtualizacaoCadastral.getIndicadorFonePadrao())){
										existeFone = true;
									}
								}
								if(!existeFone){
									clienteIgualClienteAtualizacaoCadastral = false;
								}
							}
						}
					}
				}
			}
	
			return clienteIgualClienteAtualizacaoCadastral;
			
			
		}catch (ErroRepositorioException e) {
			throw new ControladorException("erro.sistema", e);
		}
	}
	
	
	/**
	 * [UC0870] - Gerar Movimento de Contas em Cobranca por Empresa
	 *  
	 * Retorna o setor comercial do imovel
	 * 
	 * @author Rômulo Aurélio
	 * @date 30/07/2012
	 * */	
	public Integer pesquisarIdSetorComercialImovel(Integer idImovel) throws ControladorException{
		
		try{
		
			return repositorioCadastro.pesquisarIdSetorComercialImovel(idImovel);
			
		}catch (ErroRepositorioException e) {
			throw new ControladorException("erro.sistema", e);
		}
		
		
	}
	
	/**
	 *  UC1297 Atualizar Dados Cadastrais Para Imóveis Inconsistentes
	 * 
	 * @author Vivianne Sousa
	 * @date 26/07/2012
	 */
	public Logradouro pesquisarLogradouroImovelAtualizacaoCadastral(Long idLogradouro) throws ControladorException {
		
		try{
			Logradouro retorno = null;
			
			if(idLogradouro != null){

				
				FiltroLogradouro filtroLogradouro = new FiltroLogradouro();
				filtroLogradouro.adicionarParametro(new ParametroSimples(FiltroLogradouro.ID,idLogradouro));
				filtroLogradouro.adicionarCaminhoParaCarregamentoEntidade("logradouroTipo");
				filtroLogradouro.adicionarCaminhoParaCarregamentoEntidade("logradouroTitulo");
				retorno = (Logradouro) Util.retonarObjetoDeColecao(getControladorUtil().
						pesquisar(filtroLogradouro, Logradouro.class.getName()));
			}
			
			return retorno;
			
		}catch(Exception e){
			throw new ControladorException("erro.sistema", e);
		}
	}

	
	/**
	 * [UC1361] EfetuarDigitacaoDadosParaAtualizacaoCadastral
	 * 
	 * @author Davi menezes
	 * @date 03/08/2012
	 * 
	 */
	public void inserirDadosAtualizacaoCadastral(ImovelAtualizacaoCadastral imovelAtualizacaoCadastral, 
			ClienteAtualizacaoCadastral clienteAtualizacaoCadastral, ClienteFoneAtualizacaoCadastral clienteFoneAtualizacaoCadastral,
			Collection<ImovelSubcategoriaAtualizacaoCadastral> colecaoImovelSubcategoria, 
			HidrometroInstalacaoHistoricoAtualizacaoCadastral hidrometroInstalacaoHistorico) throws ControladorException {
		
		try{
			if(imovelAtualizacaoCadastral != null){
				
				if(imovelAtualizacaoCadastral.getId() == null || imovelAtualizacaoCadastral.getId().equals("")){
					Integer idImovelAtualizacaoCadastral = (Integer) this.getControladorUtil().inserir(imovelAtualizacaoCadastral);
					imovelAtualizacaoCadastral.setId(idImovelAtualizacaoCadastral);
				}else{
					this.getControladorUtil().atualizar(imovelAtualizacaoCadastral);
				}
				
				if(clienteAtualizacaoCadastral != null){
					clienteAtualizacaoCadastral.setImovelAtualizacaoCadastral(imovelAtualizacaoCadastral);
					
					if(clienteAtualizacaoCadastral.getId() == null || clienteAtualizacaoCadastral.getId().equals("")){
						Integer idClienteAtualizacaoCadastral = (Integer) this.getControladorUtil().inserir(clienteAtualizacaoCadastral);
						clienteAtualizacaoCadastral.setId(idClienteAtualizacaoCadastral);
					}else{
						this.getControladorUtil().atualizar(clienteAtualizacaoCadastral);
					}
					
					
					if(clienteFoneAtualizacaoCadastral != null){
						clienteFoneAtualizacaoCadastral.setClienteAtualizacaoCadastral(clienteAtualizacaoCadastral);
						
						if(clienteFoneAtualizacaoCadastral.getId() == null || clienteFoneAtualizacaoCadastral.getId().equals("")){
							this.getControladorUtil().inserir(clienteFoneAtualizacaoCadastral);
						}else{
							this.getControladorUtil().atualizar(clienteFoneAtualizacaoCadastral);
						}
					}
				}
				
				if(hidrometroInstalacaoHistorico != null){
					hidrometroInstalacaoHistorico.setImovelAtualizacaoCadastral(imovelAtualizacaoCadastral);
					
					if(hidrometroInstalacaoHistorico.getId() == null || hidrometroInstalacaoHistorico.getId().equals("")){
						this.getControladorUtil().inserir(hidrometroInstalacaoHistorico);
					}else{
						this.getControladorUtil().atualizar(hidrometroInstalacaoHistorico);
					}
				}
				
				if(!Util.isVazioOrNulo(colecaoImovelSubcategoria)){
					ImovelSubcategoriaAtualizacaoCadastral imovelSubcategoriaAtualizacaoCadastral = null;
					
					Iterator<?> iterator = colecaoImovelSubcategoria.iterator();
					while(iterator.hasNext()){
						imovelSubcategoriaAtualizacaoCadastral = (ImovelSubcategoriaAtualizacaoCadastral) iterator.next();
						imovelSubcategoriaAtualizacaoCadastral.setImovelAtualizacaoCadastral(imovelAtualizacaoCadastral);
						
						if(imovelSubcategoriaAtualizacaoCadastral.getId() == null || imovelSubcategoriaAtualizacaoCadastral.equals("")){
							this.getControladorUtil().inserir(imovelSubcategoriaAtualizacaoCadastral);
						}else{
							this.getControladorUtil().atualizar(imovelSubcategoriaAtualizacaoCadastral);
						}
					}
				}
				
			}
			
		}catch(ControladorException e){
			sessionContext.setRollbackOnly();
			throw new ControladorException("erro.sistema", e);
		}
	}
	
	/**
	 * [UC1381] Emitir Comprovante de Cadastramento de Sorteio
	 * [IT0003] Pesquisar Imóvel Apto para Sorteio
	 * 
	 * @author Hugo Azevedo
	 * @date 18/10/2012
	 * 
	 **/
	public Collection pesquisarImovelAptoSorteio(Integer idImovel) throws ControladorException{
		
		Collection retorno = null;
		try{
			retorno = repositorioCadastro.pesquisarImovelAptoSorteio(idImovel);
		}catch(ErroRepositorioException e){
			sessionContext.setRollbackOnly();
			throw new ControladorException("erro.sistema", e);
		}
		
		return retorno;
	}
	
	/**
	 * [UC1381] Emitir Comprovante de Cadastramento de Sorteio
	 * [IT0004] Pesquisar Dados Cadastro Sorteio
	 * 
	 * @author Hugo Azevedo
	 * @date 18/10/2012
	 * 
	 **/
	public List<RelatorioComprovanteCadastramentoSorteioBean> pesquisarDadosCadastroSorteio(Integer idImovel)  throws ControladorException{
		List<RelatorioComprovanteCadastramentoSorteioBean> retorno = new ArrayList();
		try{
			
			//O sistema deverá pesquisar os dados do imóvel cadastrado como apto para sorteio
			Object[] objSorteio = repositorioCadastro.pesquisarDadosCadastroSorteio(idImovel);
			
			if(objSorteio != null){
				
				//e obter as seguintes informações:
				RelatorioComprovanteCadastramentoSorteioBean bean = new RelatorioComprovanteCadastramentoSorteioBean();
				
				//1. Nome do Cliente
				bean.setNomeCliente((String)objSorteio[0]);
				
				//2. Logradouro
				bean.setLogradouro((String)objSorteio[1]);
				
				//3. Número do Endereço
				bean.setNumeroEndereco((String)objSorteio[2]);
				
				//4. Complemento
				bean.setComplemento((String)objSorteio[3]);
				
				//5. Bairro
				bean.setBairro((String)objSorteio[4]);
				
				//6. Município
				bean.setMunicipio((String)objSorteio[5]);
				
				//7. Estado
				bean.setEstado((String)objSorteio[6]);
				
				//8. E-mail
				if (objSorteio[7] != null) {
					bean.setEmail((String)objSorteio[7]);
				} else {
					bean.setEmail("-");
				}
				
				//9. Telefone Fixo (DDD + Número)
				if (objSorteio[8] != null && objSorteio[9] != null) {
					bean.setTelFixo((String)objSorteio[8] + "-" + (String)objSorteio[9]);
				} else {
					bean.setTelFixo("-");
				}
				
				//10. Telefone Celular (DDD + Número)
				if (objSorteio[10] != null && objSorteio[11] != null) {
					bean.setTelCelular((String)objSorteio[10] + "-" + (String)objSorteio[11]);
				}else {
					bean.setTelCelular("-");
				}
				
				//11. Unidade Organizacional
				bean.setUnidadeOrganizacional((String)objSorteio[12]);
				
				//12. Data da Inscrição
				bean.setDataInscricao((Date)objSorteio[13]);
				
				//13. Número do Sorteio
				bean.setNumeroSorteio((String)objSorteio[14]);
				
				retorno.add(bean);
				
			}
			
		}catch(ErroRepositorioException e){
			sessionContext.setRollbackOnly();
			throw new ControladorException("erro.sistema", e);
		}
		
		return retorno;
	}
	
	/**
	 * [UC1381] Emitir Comprovante de Cadastramento de Sorteio
	 * [IT0005] Obter E-mail cadastrado
	 * 
	 * @author Hugo Azevedo
	 * @date 22/10/2012
	 * 
	 **/
	public String obterEmailCadastrado(Integer idImovel) throws ControladorException{
		try{
			return repositorioCadastro.obterEmailCadastrado(idImovel);
		}catch(ErroRepositorioException e){
			sessionContext.setRollbackOnly();
			throw new ControladorException("erro.sistema", e);
		}
		
	}

	/**
	 * [UC 1386] - Processar Arquivo de Resetorização de Imóveis
	 * 
	 * @author Davi Menezes
	 * @since 31/10/2012
	 */
	public void processarArquivoResetorizacaoImoveis(Integer idFuncionalidadeIniciada) throws ControladorException {
		int idUnidadeIniciada = 0;
		
		try{
			/*
			 * Registrar o início do processamento da Unidade de Processamento
			 * do Batch
			 */
			idUnidadeIniciada = getControladorBatch()
					.iniciarUnidadeProcessamentoBatch(idFuncionalidadeIniciada,
							UnidadeProcessamento.FUNCIONALIDADE, 0);
			
			System.out.println("***************************************");
			System.out.println("PROCESSAR ARQUIVO DE RESETORIZAÇÃO DE IMOVEIS ");
			System.out.println("***************************************");
			
			SistemaParametro sistemaParametro = this.getControladorUtil().pesquisarParametrosDoSistema();
			
			if(sistemaParametro.getArquivosResetorizacaoAProcessar() != null 
					&& sistemaParametro.getArquivosResetorizacaoProcessado() != null
						&& sistemaParametro.getArquivosResetorizacaoCritica() != null){
				
				//1. O sistema seleciona os arquivos na pasta definida
				//   para ser processado
				File diretorio = new File(sistemaParametro.getArquivosResetorizacaoAProcessar());
				File[] arquivos = diretorio.listFiles();
				
				if(arquivos != null){
					for (int index = 0; index < arquivos.length; index++){
						FileReader reader = new FileReader(arquivos[index]);
						BufferedReader buffer = new BufferedReader(reader);
						
						String linhaLida = buffer.readLine();
						
						buffer.close();
			            reader.close();
			            
			            String nomeArquivo = arquivos[index].getName();
			            String extensao = nomeArquivo.substring(nomeArquivo.lastIndexOf("."), nomeArquivo.length());
			            
			            if(extensao != null && extensao.equals(".txt")){
						
							System.out.println("************** PROCESSANDO "+arquivos[index].getName()+" **************");
							
							//[Validar Arquivo de Resetorização de Imóveis]
							HashMap map = this.validarArquivoResetorizacao(arquivos[index], sistemaParametro);
//							
//							if(map != null && map.get("arquivoInvalido") != null){
//								boolean arquivoInvalido = (Boolean) map.get("arquivoInvalido");
//								
//								if(arquivoInvalido){
//									//remove o arquivo processado e passa para o próximo arquivo.
//									//[SB0002 - Remover Arquivo com Erro]
//									this.removerArquivoProcessadoComErro(arquivos[index], sistemaParametro);
//									
//								}else{
									Collection<ImovelInscricaoResetorizadaHelper> colHelper = 
											(Collection<ImovelInscricaoResetorizadaHelper>) map.get("colecaoHelper");
									
									//insere os registros do arquivo na tabela Imovel Inscrição Resetorizada
									//[SB0003] - Processar Arquivo
									this.inserirImovelInscricaoResetorizada(colHelper);
									
									//remove o arquivo processado e passa para o próximo arquivo.
									//[SB0001 - Remover Arquivo Processado]
									this.removerArquivoProcessado(arquivos[index], sistemaParametro);
//								}
//							}
			            }
					}
				}
			}
			
			getControladorBatch().encerrarUnidadeProcessamentoBatch(null,
					idUnidadeIniciada, false);
			
			System.out.println("******* FIM PROCESSAR ARQUIVO DE RESETORIZAÇÃO DE IMOVEIS **********");
			
		}catch (Exception ex) {
			sessionContext.setRollbackOnly();
			ex.printStackTrace();
			getControladorBatch().encerrarUnidadeProcessamentoBatch(ex,
					idUnidadeIniciada, true);
			throw new EJBException(ex);
		}
	}
	
	/**
	 * [UC 1386] - Processar Arquivo de Resetorização de Imóveis
	 * 
	 * @author Davi Menezes
	 * @since 01/11/2012
	 */
	private HashMap validarArquivoResetorizacao(File arquivo, SistemaParametro sistemaParametro) throws ControladorException{
		//Guardar o Arquivo
		HashMap retorno = new HashMap();
		
		try{
			// abre o arquivo
			FileReader reader = new FileReader(arquivo);
			BufferedReader buffer = new BufferedReader(reader);
			
			boolean arquivoInvalido = false;
			
			String idImovel = null;
			String idLocalidade = null;
			String codigoSetorComercial = null;
			String numeroQuadra = null;
			String lote = null;
			String subLote = null;
			
			//criar o Helper
			ImovelInscricaoResetorizadaHelper helper = null;
			
			//criar a coleção de Helper
			Collection<ImovelInscricaoResetorizadaHelper> colHelper = new ArrayList<ImovelInscricaoResetorizadaHelper>();
			
			//Armazena os dados invalidos
			StringBuilder dadosInvalidos = new StringBuilder("");
			
			//Linha do Arquivo
			String linhaLida = null;
			
			System.out.println("INICIO-ARQUIVO RESETORIZACAO DE IMOVEIS: CRIA REGISTRO DADOS IMOVEIS");
			
			while ((linhaLida = buffer.readLine()) != null) {
				helper = new ImovelInscricaoResetorizadaHelper();
				
				linhaLida.replace(";;", "; ;");
				StringTokenizer stk = new StringTokenizer(linhaLida, ";");
				List<String> colArquivos = new ArrayList<String>();
				
				while(stk.hasMoreTokens()){
					colArquivos.add(stk.nextToken());
				}
				
				arquivoInvalido = false;
				
				//Armazena o registro invalido
				StringBuilder sb = new StringBuilder("");
				String mensagemErro = "";
				
				if ( validarCampoResetorizacao(colArquivos, 0, false) ) {
					helper.setIdImovel(colArquivos.get(0));
				}else{
					arquivoInvalido = true;
					mensagemErro = "REGISTRO INVALIDO";
				}
				
				if ( validarCampoResetorizacao(colArquivos, 1, false) ) {
					helper.setIdLocalidade(colArquivos.get(1));
				}else{
					arquivoInvalido = true;
					mensagemErro = "REGISTRO INVALIDO";
				}
				
				if ( validarCampoResetorizacao(colArquivos, 2, false) ) {
					helper.setCodigoSetorComercial(colArquivos.get(2));
				}else{
					arquivoInvalido = true;
					mensagemErro = "REGISTRO INVALIDO";
				}
				
				if ( validarCampoResetorizacao(colArquivos, 3, false) ) {
					helper.setNumeroQuadra(colArquivos.get(3));
				}else{
					arquivoInvalido = true;
					mensagemErro = "REGISTRO INVALIDO";
				}
				
				if ( validarCampoResetorizacao(colArquivos, 4, false) ) {
					helper.setNumeroLote(colArquivos.get(4));
				}else{
					arquivoInvalido = true;
					mensagemErro = "REGISTRO INVALIDO";
				}
				
				if ( validarCampoResetorizacao(colArquivos, 5, false) ) {
					helper.setNumeroSubLote( colArquivos.get(5));
				}else{
					arquivoInvalido = true;
					mensagemErro = "REGISTRO INVALIDO";
				}
				
				if ( !arquivoInvalido ) {
					
					colHelper.add(helper);
					
				} else {
					
					if ( validarCampoResetorizacao(colArquivos, 0, true) ) {
						sb.append(colArquivos.get(0)+ ";" );
					}
					if ( validarCampoResetorizacao(colArquivos, 1, true) ) {
						sb.append(colArquivos.get(1)+ ";" );
					}
					if ( validarCampoResetorizacao(colArquivos, 2, true) ) {
						sb.append(colArquivos.get(2)+ ";" );
					}
					if ( validarCampoResetorizacao(colArquivos, 3, true) ) {
						sb.append(colArquivos.get(3)+ ";" );
					}
					if ( validarCampoResetorizacao(colArquivos, 4, true) ) {
						sb.append(colArquivos.get(4)+ ";" );
					}
					if ( validarCampoResetorizacao(colArquivos, 5, true) ) {
						sb.append(colArquivos.get(5)+ ";" );
					}
					
					sb.append( mensagemErro + ";" );
					sb.append("\n");
					dadosInvalidos.append(sb);					
				}
			}
			
			if ( dadosInvalidos != null && dadosInvalidos.length() > 0) {
				 // Cria o arquivo com os dados invalidos
	            FileOutputStream fileOut = null;
	            fileOut = new FileOutputStream(sistemaParametro.getArquivosResetorizacaoCritica() + "/" + arquivo.getName());
	            fileOut.write(dadosInvalidos.toString().getBytes());
	            fileOut.flush();
	            fileOut.close();
			}
            
			System.out.println("FIM-ARQUIVO RESETORIZACAO IMOVEIS: CRIA REGISTRO DADOS IMOVEIS");
			
			// fecha o arquivo
            buffer.close();
            reader.close();
            
//            retorno.put("arquivoInvalido", arquivoInvalido);
            retorno.put("colecaoHelper", colHelper);
			
		} catch (Exception ex) {
			throw new ControladorException("erro.sistema", ex);
		}
		
		return retorno;
	}
	
	/**
	 * Valida se o campo do arquivo de resetorizacao é valido.
	 */
	private boolean validarCampoResetorizacao(List<String> colecaoArquivos, int position , boolean inserirCampo) {
		boolean campoValido = true;
		
		//Caso o campo que va recuperar nao exista no arquivo
		if ( (position == 0 && colecaoArquivos.size() < 1)  || (position == 1 && colecaoArquivos.size() < 2) ||
				(position == 2 && colecaoArquivos.size() < 3) || (position == 3 && colecaoArquivos.size() < 4) || 
				(position == 4 && colecaoArquivos.size() < 5) || (position == 5 && colecaoArquivos.size() < 6) ) {
			
				campoValido = false;	
			 
			
		
		} else if ( colecaoArquivos.get(position).trim().equals("") || colecaoArquivos.get(position).trim().equalsIgnoreCase("null") ) {
			if ( !inserirCampo ) {
				campoValido = false;	
			}
		}
		
		return campoValido;
	}
	
	/**
	 * [UC 1386] - Processar Arquivo de Resetorização de Imóveis
	 * 
	 * [SB 0003] - Processar Arquivo
	 * 
	 * @author Davi Menezes
	 * @since 01/11/2012
	 */
	private void inserirImovelInscricaoResetorizada(Collection<ImovelInscricaoResetorizadaHelper> colecaoHelper) throws ControladorException {
		try{
			if(!Util.isVazioOrNulo(colecaoHelper)){
				ImovelInscricaoResetorizada imovelInscricaoResetorizada = null;
				ImovelInscricaoResetorizadaHelper helper = null;
				
				Iterator<ImovelInscricaoResetorizadaHelper> itHelper = colecaoHelper.iterator();
				while(itHelper.hasNext()){
					helper = (ImovelInscricaoResetorizadaHelper) itHelper.next();
					
					imovelInscricaoResetorizada = new ImovelInscricaoResetorizada();
					imovelInscricaoResetorizada.setImovel(new Imovel(Integer.parseInt(helper.getIdImovel().trim())));
					imovelInscricaoResetorizada.setLocalidade(new Localidade(Integer.parseInt(helper.getIdLocalidade().trim())));
					imovelInscricaoResetorizada.setCodigoSetorComercial(Integer.parseInt(helper.getCodigoSetorComercial().trim()));
					imovelInscricaoResetorizada.setNumeroQuadra(Integer.parseInt(helper.getNumeroQuadra().trim()));
					imovelInscricaoResetorizada.setNumeroLote(Integer.parseInt(helper.getNumeroLote().trim()));
					imovelInscricaoResetorizada.setNumeroSubLote(Integer.parseInt(helper.getNumeroSubLote().trim()));
					imovelInscricaoResetorizada.setIndicadorAtualizacao(ConstantesSistema.NAO);
					imovelInscricaoResetorizada.setUltimaAlteracao(new Date());
					
					
					//Pesquisa o imóvel, com a nova inscricao para validar se a inscricao foi alterada ou continua a mesma.
					Integer idImovel = repositorioImovel.pesquisarImovelPorInscricao(Integer.valueOf(helper.getIdLocalidade()),
								Integer.valueOf(helper.getCodigoSetorComercial()),
								Integer.valueOf(helper.getNumeroQuadra()),
								Integer.valueOf(helper.getNumeroLote()),
								Integer.valueOf(helper.getNumeroSubLote()),
								Integer.valueOf(helper.getIdImovel()));
				
					//Caso nao exista imovel com a nova inscricao informada o sistema vai inserir o imovel na sala virtual.
					if ( idImovel == null ) {
				
						this.getControladorUtil().inserir(imovelInscricaoResetorizada);
					}
				}
			}
		
		}catch (Exception e) {
			e.printStackTrace();
			throw new ControladorException("erro.sistema", e);
		}
	}
	
	/**
	 * [UC 1386] - Processar Arquivo de Resetorização de Imóveis
	 * 
	 * [SB 0002] - Remover Arquivo com Erro
	 * 
	 * @author Davi Menezes
	 * @since 01/11/2012
	 */
	private boolean removerArquivoProcessadoComErro(File arquivo, SistemaParametro sistemaParametro) throws ControladorException {
		boolean retorno = false;
		
		try{
			//1. O sistema remove o arquivo da pasta dos arquivos para processar 
			//   e coloca na pasta dos arquivos com críticas
			File dir = new File(sistemaParametro.getArquivosResetorizacaoCritica());
			retorno = arquivo.renameTo(new File(dir, arquivo.getName()));
		
		}catch (Exception ex) {
			ex.printStackTrace();
			throw new ControladorException("erro.sistema", ex);
		}
		return retorno;
	}
	
	/**
	 * [UC 1386] - Processar Arquivo de Resetorização de Imóveis
	 * 
	 * [SB 0001] - Remover Arquivo Processado
	 * 
	 * @author Davi Menezes
	 * @since 01/11/2012
	 */
	private boolean removerArquivoProcessado(File arquivo, SistemaParametro sistemaParametro) throws ControladorException {
		boolean retorno = false;
		
		try{
			//1. O sistema remove o arquivo da pasta dos arquivos para processar
			//	 e coloca na pasta dos arquivos processados
			File dir = new File(sistemaParametro.getArquivosResetorizacaoProcessado());
			retorno = arquivo.renameTo(new File(dir, arquivo.getName()));
			
		}catch (Exception ex) {
			ex.printStackTrace();
			throw new ControladorException("erro.sistema", ex);
		}
		return retorno;
	}
	
	/**
	 * [UC 1387] - Validar Resetorização dos Imóveis - GSAN
	 * 
	 * @author Davi Menezes
	 * @since 08/11/2012
	 */
	public void validarResetorizacaoImoveis(Integer idFuncionalidadeIniciada) throws ControladorException {
		int idUnidadeIniciada = 0;
		
		try{
			/*
			 * Registrar o início do processamento da Unidade de Processamento
			 * do Batch
			 */
			idUnidadeIniciada = getControladorBatch()
					.iniciarUnidadeProcessamentoBatch(idFuncionalidadeIniciada,
							UnidadeProcessamento.FUNCIONALIDADE, 0);
			
			System.out.println("***************************************");
			System.out.println("VALIDAR RESETORIZAÇÃO DE IMOVEIS ");
			System.out.println("***************************************");
			
			//Pesquisar os Imoveis que tiveram a Inscrição Resetorizada
			Collection<ImovelInscricaoResetorizada> colecaoImovelInscricaoResetorizada = 
					this.repositorioCadastro.pesquisarImoveisInscricaoResetorizada();
			
			if(!Util.isVazioOrNulo(colecaoImovelInscricaoResetorizada)){
				ImovelInscricaoResetorizada imovelInscricaoResetorizada = null;
				ImovelInscricaoAlterada imovelInscricaoAlterada = null;
				Imovel imovel = null;
				boolean inscricaoValida = true;
				
				SetorComercial setorComercial = null;
				
				Quadra quadra = null;
				
				int contador = 1;
				
				Iterator<?> iterator = colecaoImovelInscricaoResetorizada.iterator();
				while(iterator.hasNext()){
					imovelInscricaoResetorizada = (ImovelInscricaoResetorizada) iterator.next();
					
					System.out.println("ID Imóvel Inscrição Resetorizada: " + imovelInscricaoResetorizada.getId());
					
					System.out.println("Registro " + contador + " / " + colecaoImovelInscricaoResetorizada.size());
					
					//Validar os Dados do Registro
					inscricaoValida = this.validarDadosRegistroImovelInscricaoAlterada(imovelInscricaoResetorizada);
					
					/*
					 * Se a incrição for válida, insere o registro na tabela
					 * Imovel Inscrição Alterada
					 */
					if(inscricaoValida){
						//Pesquisar o Imóvel
						imovel = this.getControladorImovel().pesquisarImovelDigitado(imovelInscricaoResetorizada.getImovel().getId());
						
						/*
						 * [SB 0003] - Inserir Registro Validado
						 * 
						 * Caso a inscrição seja valida, insere os registros
						 * na tabela Imovel Inscrição Alterada
						 */
						imovelInscricaoAlterada = new ImovelInscricaoAlterada();
						imovelInscricaoAlterada.setImovel(imovel);
						imovelInscricaoAlterada.setLocalidadeAnterior(imovel.getLocalidade());
						imovelInscricaoAlterada.setSetorComercialAnterior(imovel.getSetorComercial());
						imovelInscricaoAlterada.setQuadraAnterior(imovel.getQuadra());
						imovelInscricaoAlterada.setQuadraFaceAnterior(null);
						imovelInscricaoAlterada.setLoteAnterior(imovel.getLote());
						imovelInscricaoAlterada.setSubLoteAnterior(imovel.getSubLote());
						imovelInscricaoAlterada.setLocalidadeAtual(imovelInscricaoResetorizada.getLocalidade());
						
						//Pesquisar Setor Comercial
						setorComercial = this.getControladorCobranca().obterSetorComercialLocalidade(
								String.valueOf(imovelInscricaoResetorizada.getLocalidade().getId()), 
								String.valueOf(imovelInscricaoResetorizada.getCodigoSetorComercial()));
						imovelInscricaoAlterada.setSetorComercialAtual(setorComercial);
						
						//Pesquisar Quadra
						if(setorComercial != null){
							quadra = this.getControladorLocalidade().obterQuadraSetorComercial(
									setorComercial.getId(), imovelInscricaoResetorizada.getNumeroQuadra().intValue());
							imovelInscricaoAlterada.setQuadraAtual(quadra);
						}
						
						imovelInscricaoAlterada.setQuadraFaceAtual(null);
						imovelInscricaoAlterada.setLoteAtual(imovelInscricaoResetorizada.getNumeroLote().shortValue());
						imovelInscricaoAlterada.setSubLoteAtual(imovelInscricaoResetorizada.getNumeroSubLote().shortValue());
						imovelInscricaoAlterada.setIndicadorAtualizado(ConstantesSistema.NAO);
						imovelInscricaoAlterada.setIndicadorAtualizacaoExcluida(ConstantesSistema.NAO);
						imovelInscricaoAlterada.setIndicadorImovelExcluido(ConstantesSistema.NAO);
						imovelInscricaoAlterada.setIndicadorErroAlteracao(null);
						imovelInscricaoAlterada.setDataAlteracaoOnline(new Date());
						imovelInscricaoAlterada.setDataAlteracaoBatch(null);
						imovelInscricaoAlterada.setFaturamentoGrupo(null);
						imovelInscricaoAlterada.setIndicadorAutorizado(ConstantesSistema.NAO);
						imovelInscricaoAlterada.setUsuarioAlteracao(null);
						imovelInscricaoAlterada.setUsuarioAutorizacao(null);
						imovelInscricaoAlterada.setUltimaAlteracao(new Date());
						imovelInscricaoAlterada.setCodigoOrigem(Integer.valueOf(ConstantesSistema.SIM));
						
						/*
						 * Inserir o registro na tabela
						 * Imovel Inscrição Alterada
						 */
						this.getControladorUtil().inserir(imovelInscricaoAlterada);
						
						/*
						 * Atualizar o Indicador de Atualização do registro
						 * da tabela Imovel Inscrição Resetorizada
						 */
						imovelInscricaoResetorizada.setIndicadorAtualizacao(ConstantesSistema.SIM);
						imovelInscricaoResetorizada.setUltimaAlteracao(new Date());
						
						this.getControladorUtil().atualizar(imovelInscricaoResetorizada);
					}
					
					contador++;
				}
			}
			
			//Encerrar Processamento Batch
			getControladorBatch().encerrarUnidadeProcessamentoBatch(null,
					idUnidadeIniciada, false);
			
			System.out.println("******* FIM VALIDAR RESETORIZAÇÃO DE IMOVEIS **********");
		
		/*
		 * Caso ocorra algum erro, o sistema faz o rollback das transações
		 * do batch e encerrar o processamento
		 */
		}catch (Exception ex) {
			sessionContext.setRollbackOnly();
			ex.printStackTrace();
			getControladorBatch().encerrarUnidadeProcessamentoBatch(ex,
					idUnidadeIniciada, true);
			throw new EJBException(ex);
		}
	}

	/**
	 * [UC1380] Cadastrar Imóveis para Sorteio
	 * 
	 * [FE0004] Verificar Imóvel Apto
	 * 
	 * @author Mariana Victor
	 * @date 19/10/2012
	 * 
	 */
	public String verificarImovelApto(CadastrarImovelSorteioActionHelper helper) throws ControladorException {
		
		try{
			boolean usuarioLogado = false;
			
			if (helper.getIdUsuarioLogado() != null
					&& helper.getIdUsuarioLogado().compareTo(new Integer("0")) > 0) {
				usuarioLogado = true;
			}
			
			// 1. Caso não exista imóvel com a matrícula informada 
			//  [IT0002] Pesquisar Matrícula do Imóvel
			if (this.getControladorImovel().verificarExistenciaImovel(
					helper.getIdImovel()).compareTo(new Integer("0")) == 0) {
				
				return "MATRÍCULA INEXISTENTE";
				
			} 
			
			// 3. Caso contrário, caso o imóvel já esteja cadastrado como apto para o sorteio 
			//  [IT0008] Pesquisar Imóvel Cadastrado para Sorteio
			if (this.repositorioCadastro.pesquisarImovelCadastradoSorteio(
					helper.getIdImovel())) {
				if (usuarioLogado) {
					return "IMÓVEL JÁ APTO PARA SORTEIO - NÃO PODE SER INSCRITO NOVAMENTE.";
				} else {
					return "IMÓVEL JÁ APTO PARA SORTEIO - NÃO PODE SER INSCRITO NOVAMENTE. SOLICITE <a href=\"/gsan/exibirEmitirComprovanteCadastroSorteioAction.do\" style=\"color: #008fd6;\">AQUI</a> A SEGUNDA VIA DO COMPROVANTE DO SORTEIO.";
				}
				
			}
			
			// 2. Caso contrário, caso o imóvel possua débito vencido 
			//  (existir algum registro na lista de débitos obtida no 
			//   [SB0011] Obter Débitos do Imóvel)
			if (this.obterDebitosImovelSorteio(helper.getIdImovel())) {
				if (usuarioLogado) {
					return "IMÓVEL COM DÉBITO, NEGOCIE-O PRIMEIRO E DEPOIS FAÇA SUA INSCRIÇÃO.";
				} else {
					return "IMÓVEL COM DÉBITO - NÃO PODE SER CADASTRADO NO SORTEIO.";
				}
				
			}
			
			
			//  [IT0009] Pesquisar Situação de Ligação do Imóvel
			//  [IT0012] Obter Situação de Ligação do Imóvel Inválida
			String situacaoLigacaoInvalida = this.repositorioCadastro
					.pesquisarSituacaoLigacaoImovel(helper.getIdImovel());
			
			// 4. Caso contrário, caso a situação do imóvel for inválida 
			if (situacaoLigacaoInvalida != null
					&& !situacaoLigacaoInvalida.trim().equals("")) {
				if (usuarioLogado) {
					return "IMÓVEL " + situacaoLigacaoInvalida + " - NÃO PODE SER CADASTRADO NO SORTEIO.";
				} else {
					return "SITUAÇÃO CADASTRAL DO IMÓVEL NÃO É VÁLIDA PARA PARTICIPAR DO SORTEIO - PROCURE UMA DE NOSSAS LOJAS OU CALL CENTER.";
				}
				
			}
			
			// [IT0004] Obter dados do Imóvel
			DadosImovelHelper dadosImovelHelper = this.repositorioCadastro
					.obterDadosImovelSorteio(helper.getIdImovel());
				
			// 5. Caso contrário, caso o município informado seja diferente do Município do Imóvel 
			// obtido na consulta dos dados do imóvel [IT0004] Obter dados do Imóvel
			if (dadosImovelHelper != null 
					&& dadosImovelHelper.getIdMunicipio().compareTo(helper.getIdMunicipio()) != 0) {
				// 5.1.	O sistema deverá armazenar o imóvel como não apto para o sorteio passando  
				// a descrição da diferença "Dados informados divergem do cadastro - município"  
				//  [SB0009] Cadastrar Imóvel Não Apto Diferença Cadastro
				this.cadastrarImovelParaSorteio(false, "Dados informados divergem do cadastro - município", helper);
				
				if (usuarioLogado) {
					return "MUNICÍPIO INFORMADO DIVERGE DO CADASTRO.";
				} else {
					return "MUNICÍPIO INFORMADO DIVERGE DO CADASTRO - PROCURE UMA DE NOSSAS LOJAS OU CALL CENTER PARA ATUALIZAR SEU CADASTRO E DEPOIS FAÇA SUA INSCRIÇÃO.";
				}
			}
			
			// 6. Caso contrário, caso o bairro informado seja diferente do Bairro do Imóvel 
			// obtido na consulta dos dados do imóvel  [IT0004] Obter dados do Imóvel
//			if (dadosImovelHelper != null 
//					&& dadosImovelHelper.getIdBairro().compareTo(helper.getIdBairro()) != 0) {
				// 5.1.	O sistema deverá armazenar o imóvel como não apto para o sorteio passando 
				//  a descrição da diferença "Dados informados divergem do cadastro - bairro" 
				//  [SB0009] Cadastrar Imóvel Não Apto Diferença Cadastro
//				this.cadastrarImovelParaSorteio(false, "Dados informados divergem do cadastro - bairro", helper);
//				
//				if (usuarioLogado) {
//					return "BAIRRO INFORMADO DIVERGE DO CADASTRO.";
//				} else {
//					return "BAIRRO INFORMADO DIVERGE DO CADASTRO - PROCURE UMA DE NOSSAS LOJAS OU CALL CENTER PARA ATUALIZAR SEU CADASTRO E DEPOIS FAÇA SUA INSCRIÇÃO.";
//				}
//			}
			
			// 7. Caso contrário, caso a Categoria do imóvel não seja Residencial 
			//  [IT0004] Obter dados do Imóvel
			if (dadosImovelHelper != null 
					&& dadosImovelHelper.getIdCategoria().compareTo(Categoria.RESIDENCIAL) != 0) {
				return "IMÓVEL TEM QUE SER RESIDENCIAL.";
			}

			// 8. Caso contrário, caso o Nome informado não corresponda ao Nome do Cliente referente 
			// ao Tipo de Relação com Imóvel selecionado obtido na consulta dos dados do imóvel  
			// [IT0004] Obter dados do Imóvel [SB0013] Comparar Nome do Cliente
			if (dadosImovelHelper != null 
					&& (
						(helper.getIndicadorTipoRelacao().compareTo(ConstantesSistema.SIM) == 0 
							&& !this.compararNomeCliente(helper.getNome(), dadosImovelHelper.getNomeClienteProprietario())
						)
						|| (helper.getIndicadorTipoRelacao().compareTo(ConstantesSistema.NAO) == 0 
								&& !this.compararNomeCliente(helper.getNome(), dadosImovelHelper.getNomeClienteUsuario())
							)
						)) {
				// 8.1.	O sistema deverá armazenar o imóvel como não apto para o sorteio 
				// passando a descrição da diferença "Dados informados divergem do cadastro - nome"
				// [SB0009] Cadastrar Imóvel Não Apto Diferença Cadastro
				this.cadastrarImovelParaSorteio(false, "Dados informados divergem do cadastro - nome", helper);
				
				if (usuarioLogado) {
					return "NOME INFORMADO DIVERGE DO CADASTRO.";
				} else {
					return "NOME INFORMADO DIVERGE DO CADASTRO - PROCURE UMA DE NOSSAS LOJAS OU CALL CENTER PARA ATUALIZAR SEU CADASTRO E DEPOIS FAÇA SUA INSCRIÇÃO.";
				}	
			}
			
			// 9. Caso contrário, caso o Documento informado não corresponda ao Documento do Cliente
			// referente ao Tipo de Relação com Imóvel selecionado obtido na consulta dos dados do imóvel 
			// [IT0004] Obter dados do Imóvel
			// 9.1.	Caso o Documento seja do tipo CPF:
			if (dadosImovelHelper != null
				&& helper.getCpfCliente() != null
				&& (
						(helper.getIndicadorTipoRelacao().compareTo(ConstantesSistema.SIM) == 0
							&& (dadosImovelHelper.getDocumentoClienteProprietario() == null
									|| !dadosImovelHelper.getDocumentoClienteProprietario().equalsIgnoreCase(helper.getCpfCliente())
								)
						)
						|| (helper.getIndicadorTipoRelacao().compareTo(ConstantesSistema.NAO) == 0 
								&&	(dadosImovelHelper.getDocumentoClienteUsuario() == null
									|| !dadosImovelHelper.getDocumentoClienteUsuario().equalsIgnoreCase(helper.getCpfCliente())
								)
							)
					)) {
				// 9.1.1. O sistema deverá armazenar o imóvel como não apto para o sorteio passando 
				// a descrição da diferença "Dados informados divergem do cadastro - CPF"
				//  [SB0009] Cadastrar Imóvel Não Apto Diferença Cadastro
				this.cadastrarImovelParaSorteio(false, "Dados informados divergem do cadastro - CPF", helper);
				
				if (usuarioLogado) {
					return "CPF INFORMADO DIVERGE DO CADASTRO.";
				} else {
					return "CPF INFORMADO DIVERGE DO CADASTRO - PROCURE UMA DE NOSSAS LOJAS OU CALL CENTER PARA ATUALIZAR SEU CADASTRO E DEPOIS FAÇA SUA INSCRIÇÃO.";
				}
			}
			// 9. Caso contrário, caso o Documento informado não corresponda ao Documento do Cliente
			// referente ao Tipo de Relação com Imóvel selecionado obtido na consulta dos dados do imóvel 
			// [IT0004] Obter dados do Imóvel
			// 9.2.	Caso contrário:
			if (dadosImovelHelper != null 
				&& helper.getCnpjCliente() != null
				&& (
						(helper.getIndicadorTipoRelacao().compareTo(ConstantesSistema.SIM) == 0 
							&&	(dadosImovelHelper.getDocumentoClienteProprietario() == null
									|| !dadosImovelHelper.getDocumentoClienteProprietario().equalsIgnoreCase(helper.getCnpjCliente())
								)
						)
						|| (helper.getIndicadorTipoRelacao().compareTo(ConstantesSistema.NAO) == 0 
								&&	(dadosImovelHelper.getDocumentoClienteUsuario() == null
									|| !dadosImovelHelper.getDocumentoClienteUsuario().equalsIgnoreCase(helper.getCnpjCliente())
								)
							)
					)) {
				// 9.2.1. O sistema deverá armazenar o imóvel como não apto para o sorteio passando 
				// a descrição da diferença "Dados informados divergem do cadastro - CNPJ" 
				//  [SB0009] Cadastrar Imóvel Não Apto Diferença Cadastro
				this.cadastrarImovelParaSorteio(false, "Dados informados divergem do cadastro - CNPJ", helper);
				
				if (usuarioLogado) {
					return "CNPJ INFORMADO DIVERGE DO CADASTRO.";
				} else {
					return "CNPJ INFORMADO DIVERGE DO CADASTRO - PROCURE UMA DE NOSSAS LOJAS OU CALL CENTER PARA ATUALIZAR SEU CADASTRO E DEPOIS FAÇA SUA INSCRIÇÃO.";
				}
			}
			
			//[IT0013] Exibir Lista de Imóveis Não Aptos
			Collection<String> cpfImpedidoSorteio = this.repositorioCadastro.pesquisarCpfImpedido();

			//8. Caso contrário, caso o Documento informado seja CPF e o imóvel esteja cadastrado como não apto para participar do sorteio
			if (helper.getCpfCliente() != null 
					&& cpfImpedidoSorteio.contains(helper.getCpfCliente())) {
				// 5.1.	O sistema deverá armazenar o imóvel como não apto para o sorteio passando 
				//  a descrição da diferença "Dados informados divergem do cadastro - bairro" 
				//  [SB0009] Cadastrar Imóvel Não Apto Diferença Cadastro
				this.cadastrarImovelParaSorteio(false, "CPF não apto", helper);
				
				if (usuarioLogado) {
					return "CPF INFORMADO NÃO ESTÁ APTO.";
				} else {
					return "CPF INFORMADO NÃO ESTÁ APTO.";
				}
			}
			
			
			return null;
			
		}catch(ErroRepositorioException e){
			e.printStackTrace();
			throw new ControladorException("erro.sistema", e);
		}
	}
	
	/**
	 * [UC1380] Cadastrar Imóveis para Sorteio
	 * [SB0011] Obter Débitos do Imóvel
	 * 
	 * [UC1295] Efetuar Sorteio de Prêmios
	 * [SB010] Verificar Débitos do Imóvel.
	 * 
	 * @author Mariana Victor
	 * @date 22/10/2012
	 * 
	 */
	private boolean obterDebitosImovelSorteio(Integer idImovel) throws ControladorException {
		
		// seta valores constantes para chamar o metodo que consulta debitos do
		// imovel
		Integer indicadorDebitoImovel = new Integer(1);
		Integer indicadorPagamento = new Integer(1);
		Integer indicadorConta = new Integer(1);
		Integer indicadorDebito = new Integer(2);
		Integer indicadorCredito = new Integer(2);
		Integer indicadorNotas = new Integer(2);
		Integer indicadorGuias = new Integer(2);
		Integer indicadorAtualizar = new Integer(1);
		
		String referenciaInicial = "01/0001";
		String referenciaFinal = "12/9999";
		
		// Para auxiliar na formatação de uma data
		SimpleDateFormat formatoData = new SimpleDateFormat("dd/MM/yyyy");
		String mesInicial = referenciaInicial.substring(0, 2);
		String anoInicial = referenciaInicial.substring(3, referenciaInicial
				.length());
		String anoMesInicial = anoInicial + mesInicial;
		String mesFinal = referenciaFinal.substring(0, 2);
		String anoFinal = referenciaFinal
				.substring(3, referenciaFinal.length());
		String anoMesFinal = anoFinal + mesFinal;

		Date dataVencimentoDebitoI;
		Date dataVencimentoDebitoF = new Date();

		try {
			dataVencimentoDebitoI = formatoData.parse("01/01/0001");
		} catch (ParseException ex) {
			dataVencimentoDebitoI = null;
		}
		
		// Obtendo os débitos do imovel
		ObterDebitoImovelOuClienteHelper colecaoDebitoImovel = getControladorCobranca()
				.obterDebitoImovelOuCliente(
						indicadorDebitoImovel.intValue(),
						idImovel.toString(), null, null, anoMesInicial,
						anoMesFinal, dataVencimentoDebitoI,
						dataVencimentoDebitoF, indicadorPagamento.intValue(),
						indicadorConta.intValue(), indicadorDebito.intValue(),
						indicadorCredito.intValue(), indicadorNotas.intValue(),
						indicadorGuias.intValue(), indicadorAtualizar
								.intValue(), null);
		
		if (colecaoDebitoImovel == null 
				|| ((colecaoDebitoImovel.getColecaoContasValores() == null
						|| colecaoDebitoImovel.getColecaoContasValores().isEmpty())
					&& (colecaoDebitoImovel.getColecaoContasValoresImovel() == null
							|| colecaoDebitoImovel.getColecaoContasValoresImovel().isEmpty())
					)
			){
			return false;
		}
		
		return true;
		
	}

	
	/**
	 * [UC1380] Cadastrar Imóveis para Sorteio
	 * 
	 * [IT0011] Cadastrar o Imóvel para o Sorteio
	 * 
	 * @author Mariana Victor
	 * @date 22/10/2012
	 * 
	 */
	public ImovelCadastroSorteio cadastrarImovelParaSorteio(boolean imovelApto, 
			String descricaoDiferenca, CadastrarImovelSorteioActionHelper helper) 
			throws ControladorException {
		
		try{
			ImovelCadastroSorteio imovelCadastroSorteio = new ImovelCadastroSorteio();
			
			//[IT0010] Pesquisar Imóvel Não Apto para Sorteio
			FiltroImovelCadastroSorteio filtroImovelCadastroSorteio = new FiltroImovelCadastroSorteio();
			filtroImovelCadastroSorteio.adicionarParametro(new ParametroSimples(
				FiltroImovelCadastroSorteio.IMOVEL_ID, helper.getIdImovel()));
			/*
			 * Autor: Jonathan Marcos
			 * Data:18/09/2013
			 * [IT0010] Pesquisar Imovel Nao Apto para Sorteio
			 * Analista : Ana Maria
			 * [Observacao] colocar indicador(IMCS_ICPARTICIPACAOSORTEIO) no filtroImovelCadastroSorteio 
			 * ------------------------- INICIO--------------------------------------------------------
			 */
			filtroImovelCadastroSorteio.adicionarParametro(new ParametroSimples(
				FiltroImovelCadastroSorteio.INDICADOR_IMOVEL_PARTICIPACAO_SORTEIO, ConstantesSistema.SIM));
			//------------------------- FIM -----------------------------------------------------------
			
			Collection<ImovelCadastroSorteio> colecaoImovelCadastroSorteio = this.getControladorUtil()
					.pesquisar(filtroImovelCadastroSorteio, ImovelCadastroSorteio.class.getName());
			
			if (colecaoImovelCadastroSorteio != null
					&& !colecaoImovelCadastroSorteio.isEmpty()) {
				imovelCadastroSorteio = (ImovelCadastroSorteio) Util.retonarObjetoDeColecao(
					colecaoImovelCadastroSorteio);
			}
			
			// caso o imóvel seja apto para o sorteio, o sistema deverá gerar automaticamente 
			// um número aleatório de 6 (seis) posições com valor tendo como o número inicial igual a 1 (um)
			// caso o imóvel seja apto para o sorteio, armazenar valor 1, caso contrário armazenar valor 2
			if (imovelApto) {
				Collection<Integer> colecaoNumerosSorteados = this.repositorioCadastro.pesquisarNumerosSorteio();
				Integer numeroSorteio = null;
				do {
					numeroSorteio = Util.obterNumeroInteiroAleatorio(1,999999);
				} while (colecaoNumerosSorteados.contains(numeroSorteio));
				
				imovelCadastroSorteio.setNumeroGerado(numeroSorteio);
				imovelCadastroSorteio.setIndicadorImovelApto(ConstantesSistema.SIM);
				
			} else {
				imovelCadastroSorteio.setIndicadorImovelApto(ConstantesSistema.NAO);
			}
			
			imovelCadastroSorteio.setDataInscricao(new Date());
			
			if (descricaoDiferenca != null && !descricaoDiferenca.trim().equals("")) {
				imovelCadastroSorteio.setDescricaoDiferenca(descricaoDiferenca);
			}
			
			Imovel imovel = new Imovel();
			imovel.setId(helper.getIdImovel());
			imovelCadastroSorteio.setImovel(imovel);
			
			imovelCadastroSorteio.setNomeCliente(helper.getNome());
			
			if (helper.getRg() != null
					&& !helper.getRg().trim().equals("")) {
				imovelCadastroSorteio.setRg(helper.getRg());
			} else {
				imovelCadastroSorteio.setRg(null);
			}

			if (helper.getDataNascimento() != null) {
				imovelCadastroSorteio.setDataNascimento(helper.getDataNascimento());
			} else {
				imovelCadastroSorteio.setDataNascimento(null);
			}

			if (helper.getCpfCliente() != null
					&& !helper.getCpfCliente().trim().equals("")) {
				imovelCadastroSorteio.setCpf(helper.getCpfCliente());
			} else {
				imovelCadastroSorteio.setCpf(null);
			}

			if (helper.getCnpjCliente() != null
					&& !helper.getCnpjCliente().trim().equals("")) {
				imovelCadastroSorteio.setCnpj(helper.getCnpjCliente());
			} else {
				imovelCadastroSorteio.setCnpj(null);
			}

			if (helper.getIndicadorTipoRelacao() != null) {
				imovelCadastroSorteio.setIndicadorProprietario(
					helper.getIndicadorTipoRelacao());
			} else {
				imovelCadastroSorteio.setIndicadorProprietario(null);
			}

			if (helper.getEmail() != null
					&& !helper.getEmail().trim().equals("")) {
				imovelCadastroSorteio.setEmail(helper.getEmail());
			} else {
				imovelCadastroSorteio.setEmail(null);
			}

			if (helper.getDddTelefoneFixo() != null) {
				imovelCadastroSorteio.setDddFixo(
					helper.getDddTelefoneFixo());
			} else {
				imovelCadastroSorteio.setDddFixo(null);
			}

			if (helper.getNumeroTelefoneFixo() != null) {
				imovelCadastroSorteio.setTelefoneFixo(
					helper.getNumeroTelefoneFixo());
			} else {
				imovelCadastroSorteio.setTelefoneFixo(null);
			}

			if (helper.getDddTelefoneCelular() != null) {
				imovelCadastroSorteio.setDddCelular(
					helper.getDddTelefoneCelular());
			} else {
				imovelCadastroSorteio.setDddCelular(null);
			}

			if (helper.getNumeroTelefoneCelular() != null) {
				imovelCadastroSorteio.setTelefoneCelular(
					helper.getNumeroTelefoneCelular());
			} else {
				imovelCadastroSorteio.setTelefoneCelular(null);
			}


			Bairro bairro = new Bairro();
			bairro.setId(helper.getIdBairro());
			imovelCadastroSorteio.setBairro(bairro);


			if (helper.getLogradouro() != null
					&& !helper.getLogradouro().trim().equals("")) {
				imovelCadastroSorteio.setLogradouro(helper.getLogradouro());
			} else {
				imovelCadastroSorteio.setLogradouro(null);
			}

			if (helper.getNumeroEndereco() != null) {
				imovelCadastroSorteio.setNumeroEndereco(helper.getNumeroEndereco());
			} else {
				imovelCadastroSorteio.setNumeroEndereco(null);
			}

			if (helper.getComplemento() != null
					&& !helper.getComplemento().trim().equals("")) {
				imovelCadastroSorteio.setComplemento(helper.getComplemento());
			} else {
				imovelCadastroSorteio.setComplemento(null);
			}

			if (helper.getCep() != null) {
				imovelCadastroSorteio.setCep(helper.getCep());
			} else {
				imovelCadastroSorteio.setCep(null);
			}

			if (helper.getIdUsuarioLogado() != null) {
				FiltroUsuario filtroUsuario = new FiltroUsuario();
				filtroUsuario.adicionarParametro(new ParametroSimples(
					FiltroUsuario.ID, helper.getIdUsuarioLogado()));
				filtroUsuario.adicionarCaminhoParaCarregamentoEntidade(
					FiltroUsuario.UNIDADE_ORGANIZACIONAL);
				Collection<Usuario> colecaoUsuario = this.getControladorUtil()
						.pesquisar(filtroUsuario, Usuario.class.getName());
				if (colecaoUsuario != null
						&& !colecaoUsuario.isEmpty()) {
					Usuario usuario = (Usuario) Util.retonarObjetoDeColecao(colecaoUsuario);
					imovelCadastroSorteio.setUsuario(usuario);
					imovelCadastroSorteio.setUnidadeOrganizacional(usuario.getUnidadeOrganizacional());
				}
			} else {
				imovelCadastroSorteio.setUsuario(null);
				imovelCadastroSorteio.setUnidadeOrganizacional(null);
			}

			imovelCadastroSorteio.setDataSorteio(null);
			imovelCadastroSorteio.setNumeroOrdemSorteio(null);
			imovelCadastroSorteio.setPremioSorteio(null);
			imovelCadastroSorteio.setUltimaAlteracao(new Date());
			
			/*
			 * Autor: Jonathan Marcos
			 * Data:18/09/2013
			 * [IT0011] Cadastrar o Imovel para o Sorteio.
			 * Analista : Ana Maria
			 * [Observacao] colocar indicador(IMCS_ICPARTICIPACAOSORTEIO) no objeto imovelCadastroSorteio
			 * ------------------------- INICIO--------------------------------------------------------
			 */
			imovelCadastroSorteio.setIndicadorParticipacaoSorteio(ConstantesSistema.SIM);
			//------------------------- FIM -----------------------------------------------------------
			
			if (imovelCadastroSorteio.getId() != null) {
				this.getControladorUtil().atualizar(imovelCadastroSorteio);
			} else {
				this.getControladorUtil().inserir(imovelCadastroSorteio);
			}
			
			return imovelCadastroSorteio;
			
		}catch(ErroRepositorioException e){
			e.printStackTrace();
			throw new ControladorException("erro.sistema", e);
		}
	}
	
	/**
	 * [UC1380] Cadastrar Imóveis para Sorteio
	 * 
	 * [IT0001] Exibir Quantidade Total de Inscritos
	 * 
	 * @author Mariana Victor
	 * @date 22/10/2012
	 */
	public Integer pesquisarQuantidadeTotalInscritos() throws ControladorException {
		
		try{
		
			return repositorioCadastro.pesquisarQuantidadeTotalInscritos();
			
		}catch (ErroRepositorioException e) {
			throw new ControladorException("erro.sistema", e);
		}
	}

	/**
	 * [UC1295] Efetuar Sorteio de Prêmios
	 * 
	 * @author Mariana Victor
	 * @date 25/10/2012
	 * 
	 * @return Collection<Object[]>
	 * @throws ControladorException
	 */
	public Collection<Object[]> pesquisarImoveisAptoSorteioFiqueLegal() throws ControladorException {
		try{
			return repositorioCadastro.pesquisarImoveisAptoSorteioFiqueLegal();
		} catch (ErroRepositorioException ex) {
			throw new ControladorException("erro.sistema", ex);
		}
	}

	/**
	 * [UC1295] Efetuar Sorteio de Prêmios
	 * 
	 * @author Mariana Victor
	 * @date 25/10/2012
	 * 
	 * @return Collection<Object[]>
	 * @throws ControladorException
	 */
	public Collection<Object[]> pesquisarImoveisAptoSorteioMensal() throws ControladorException {
		try{
			return repositorioCadastro.pesquisarImoveisAptoSorteioMensal();
		} catch (ErroRepositorioException ex) {
			throw new ControladorException("erro.sistema", ex);
		}
	}

	/**
	 * [UC1295] Efetuar Sorteio de Prêmios
	 * 
	 * @author Mariana Victor
	 * @date 25/10/2012
	 * 
	 * @return Integer
	 * @throws ControladorException
	 */
	public Integer pesquisarNumeroOrdemSorteioFiqueLegal() throws ControladorException {
		try{
			return repositorioCadastro.pesquisarNumeroOrdemSorteioFiqueLegal();
		} catch (ErroRepositorioException ex) {
			throw new ControladorException("erro.sistema", ex);
		}
	}

	/**
	 * [UC1295] Efetuar Sorteio de Prêmios
	 * 
	 * @author Mariana Victor
	 * @date 25/10/2012
	 * 
	 * @return Integer
	 * @throws ControladorException
	 */
	public Integer pesquisarNumeroOrdemSorteioMensal() throws ControladorException {
		try{
			return repositorioCadastro.pesquisarNumeroOrdemSorteioMensal();
		} catch (ErroRepositorioException ex) {
			throw new ControladorException("erro.sistema", ex);
		}
	}

	/**
	 * [UC1295] Efetuar Sorteio de Prêmios
	 * 
	 * [SB010] Verificar Débitos do Imóvel.
	 * [SB011] Verificar Situação de Ligação do Imóvel.
	 * [SB012] Verificar Categoria Residencial do Imóvel.
	 * 
	 * @author Mariana Victor
	 * @date 25/10/2012
	 * 
	 * @return Integer
	 * @throws ControladorException
	 */
	public boolean verificarImovelAptoSorteioFiqueLegal(Integer idImovel) 
			throws ControladorException {
		try{
			boolean imovelApto = true;
			
			String situacaoLigacaoInvalida = this.repositorioCadastro
					.pesquisarSituacaoLigacaoImovel(idImovel);
			
			//[SB010] Verificar Débitos do Imóvel.
			//[SB011] Verificar Situação de Ligação do Imóvel.
			//[SB012] Verificar Categoria Residencial do Imóvel.
			if (this.obterDebitosImovelSorteio(idImovel)
					|| (situacaoLigacaoInvalida != null
							&& !situacaoLigacaoInvalida.trim().equals(""))
					|| this.repositorioCadastro.obterCategoriaPrincipalImovel(idImovel)
							.compareTo(Categoria.RESIDENCIAL) != 0) {
				imovelApto = false;
			
			}
			
			return imovelApto;
		} catch (ErroRepositorioException ex) {
			throw new ControladorException("erro.sistema", ex);
		}
	}
	
	/**
	 * [UC1295] Efetuar Sorteio de Prêmios
	 * 
	 * [SB013] - Atualizar Tabelas Sorteio Fique Legal
	 * 
	 * @author Mariana Victor
	 * @data 25/10/2012
	 * 
	 * @param
	 * @return void
	 */
	public void atualizarImovelSorteioFiqueLegal(Integer idImovel, 
			Integer idPremio, Integer numeroOrdemSorteio) throws ControladorException {
		try{
			repositorioCadastro.atualizarImovelSorteioFiqueLegal(idImovel, 
				idPremio, numeroOrdemSorteio);
		} catch (ErroRepositorioException ex) {
			throw new ControladorException("erro.sistema", ex);
		}
	}
	
	/**
	 * [UC1295] Efetuar Sorteio de Prêmios
	 * 
	 * [SB0005] - Atualizar Tabelas Sorteio Mensal.
	 * 
	 * @author Mariana Victor
	 * @data 25/10/2012
	 * 
	 * @param
	 * @return void
	 */
	public void atualizarImovelSorteioMensal(Integer idImovel, 
			Integer idPremio, Integer numeroOrdemSorteio) throws ControladorException {
		try{
			repositorioCadastro.atualizarImovelSorteioMensal(idImovel, 
				idPremio, numeroOrdemSorteio);
		} catch (ErroRepositorioException ex) {
			throw new ControladorException("erro.sistema", ex);
		}
	}
	
	/**
	 * [UC1295] Efetuar Sorteio de Prêmios
	 * 
	 * 2.1. Caso o tipo do sorteio seja "Sorteio para Adimplentes":
	 * 
	 * @author Mariana Victor
	 * @data 25/10/2012
	 * 
	 * @param
	 * @return void
	 */
	public Collection<ImovelSorteadoHelper> efetuarSorteioAdimplentes(
		Integer idPremio, Integer quantidadePremio) throws ControladorException {
		
		try {
			Collection<ImovelSorteadoHelper> colecaoImovelSorteadoHelper = 
					new ArrayList<ImovelSorteadoHelper>();
			
			List<Object[]> imoveisAptoSorteio = (List<Object[]>)
					this.pesquisarImoveisAptoSorteio();
			
			List<Integer> numerosSorteados = new ArrayList<Integer>();
	
			Collection<String> colecaoCpfImpedido = 
					this.repositorioCadastro.pesquisarCpfImpedido();

			Collection<Integer> colecaoImovelImpedido = 
					this.repositorioCadastro.pesquisarImovelImpedidoSorteio();
			
			for (int i = 0; i < quantidadePremio; i++) {
				ImovelSorteadoHelper helper = new ImovelSorteadoHelper();
				boolean sorteado = false;
				
				while (!sorteado 
						&& imoveisAptoSorteio.size() > numerosSorteados.size()) {
					
					Integer posicaoNumeroSorteado = Util.obterNumeroInteiroAleatorio(0,imoveisAptoSorteio.size() - 1);
					
					Object[] imovelSorteado = imoveisAptoSorteio.get(posicaoNumeroSorteado.intValue());
					
					Integer numeroSorteado = (Integer) imovelSorteado[0];
					Integer idImovel = (Integer) imovelSorteado[1];
					Integer numeroOrdemSorteio = this.pesquisarNumeroOrdemSorteio();
					
					if(!numerosSorteados.contains(numeroSorteado)) {

						numerosSorteados.add(numeroSorteado);
						
						if(this.getControladorAtendimentoPublico()
								.verificarImoveisAptoSorteio(idImovel)
								&& !colecaoImovelImpedido.contains(idImovel)) {
							
							String referenciaInicial = "01/0001";
							String referenciaFinal = "01/2012";
							String dataVencimentoInicial = "01/01/0001";
							String dataVencimentoFinal = "29/02/2012";
		
							// Para auxiliar na formatação de uma data
							SimpleDateFormat formatoData = new SimpleDateFormat("dd/MM/yyyy");
							String mesInicial = referenciaInicial.substring(0, 2);
							String anoInicial = referenciaInicial.substring(3, referenciaInicial.length());
							String anoMesInicial = anoInicial + mesInicial;
							String mesFinal = referenciaFinal.substring(0, 2);
							String anoFinal = referenciaFinal.substring(3, referenciaFinal.length());
							String anoMesFinal = anoFinal + mesFinal;
		
							Date dataVencimentoDebitoI;
							Date dataVencimentoDebitoF;
		
							try {
								dataVencimentoDebitoI = formatoData.parse(dataVencimentoInicial);
								dataVencimentoDebitoF = formatoData.parse(dataVencimentoFinal);
							} catch (ParseException ex) {
								dataVencimentoDebitoI = null;
								dataVencimentoDebitoF = null;
							}
							
							// seta valores constantes para chamar o metodo que consulta debitos do imovel
							Integer tipoImovel = new Integer(1);
							Integer indicadorPagamento = new Integer(1);
							Integer indicadorConta = new Integer(1);
							Integer indicadorDebito = new Integer(1);
							Integer indicadorCredito = new Integer(1);
							Integer indicadorNotas = new Integer(1);
							Integer indicadorGuias = new Integer(1);
							Integer indicadorAtualizar = new Integer(1);
		
							// Obtendo os débitos do imovel
							ObterDebitoImovelOuClienteHelper colecaoDebitoImovel = this.getControladorCobranca()
									.obterDebitoImovelOuCliente(tipoImovel.intValue(),
											idImovel.toString(), null, null,
											anoMesInicial, anoMesFinal,
											dataVencimentoDebitoI,
											dataVencimentoDebitoF, indicadorPagamento
													.intValue(), indicadorConta
													.intValue(), indicadorDebito
													.intValue(), indicadorCredito
													.intValue(), indicadorNotas
													.intValue(), indicadorGuias
													.intValue(), indicadorAtualizar
													.intValue(), null);
							
							if (colecaoDebitoImovel == null 
									|| ((colecaoDebitoImovel.getColecaoContasValores() == null
											|| colecaoDebitoImovel.getColecaoContasValores().isEmpty())
										&& (colecaoDebitoImovel.getColecaoContasValoresImovel() == null
												|| colecaoDebitoImovel.getColecaoContasValoresImovel().isEmpty())
										&& (colecaoDebitoImovel.getColecaoCreditoARealizar() == null
												|| colecaoDebitoImovel.getColecaoCreditoARealizar().isEmpty())
										&& (colecaoDebitoImovel.getColecaoDebitoACobrar() == null
												|| colecaoDebitoImovel.getColecaoDebitoACobrar().isEmpty())
										&& (colecaoDebitoImovel.getColecaoDebitoCreditoParcelamentoHelper() == null
												|| colecaoDebitoImovel.getColecaoDebitoCreditoParcelamentoHelper().isEmpty())
										&& (colecaoDebitoImovel.getColecaoGuiasPagamentoValores() == null
												|| colecaoDebitoImovel.getColecaoGuiasPagamentoValores().isEmpty())
										)
								){
								
								String endereco = this.getControladorEndereco().pesquisarEndereco(idImovel);
								String matricula = Util.retornaMatriculaImovelFormatada(idImovel);
								Cliente cliente = this.getControladorImovel().pesquisarClienteUsuarioImovel(idImovel);
								
								if(cliente.getCpf() != null
										&& !cliente.getCpf().trim().equals("")
										&& colecaoCpfImpedido.contains(cliente.getCpf())) {
									continue;
								}
								
								Object[] dadosGerenciaLoca = this.pesquisarDadosImoveisSorteados(idImovel);
								
								helper.setNumeroSorteado(numeroSorteado.toString());
								helper.setEndereco(endereco);
								helper.setMatricula(matricula);
								helper.setGerenciaRegional((String) dadosGerenciaLoca[0]);
								helper.setLocalidade((String) dadosGerenciaLoca[1]);
								helper.setNomeClienteUsuario(cliente.getNome());
								if (cliente.getCpfFormatado() != null 
										&& !cliente.getCpfFormatado().trim().equals("")) {
									helper.setCpfClienteUsuario(cliente.getCpfFormatado());
								}
								
								numeroOrdemSorteio++;
								this.atualizarImovelSorteio(idImovel, idPremio, numeroOrdemSorteio);
								
								colecaoImovelSorteadoHelper.add(helper);
								sorteado = true;
							}
						}
					}
					
				}
			}
			
			return colecaoImovelSorteadoHelper;
		} catch (ErroRepositorioException ex) {
			ex.printStackTrace();
			throw new ControladorException("erro.sistema", ex);
		}
	}

	/**
	 * [UC1295] Efetuar Sorteio de Prêmios
	 * 
	 * 2.2.	Caso contrário, caso o tipo do sorteio seja "Sorteio Fique Legal":
	 * 
	 * @author Mariana Victor
	 * @data 25/10/2012
	 * 
	 * @param
	 * @return void
	 */
	public Collection<ImovelSorteadoHelper> efetuarSorteioFiqueLegal(
		Integer idPremio, Integer quantidadePremio) throws ControladorException {
		
		try {
			Collection<ImovelSorteadoHelper> colecaoImovelSorteadoHelper = 
					new ArrayList<ImovelSorteadoHelper>();
			
			List<Object[]> imoveisAptoSorteio = (List<Object[]>)
					this.pesquisarImoveisAptoSorteioFiqueLegal();
			
			List<Integer> numerosSorteados = new ArrayList<Integer>();
	
			Collection<String> colecaoCpfImpedido = 
					this.repositorioCadastro.pesquisarCpfImpedido();
	
			Collection<Integer> colecaoImovelImpedido = 
					this.repositorioCadastro.pesquisarImovelImpedidoSorteio();
			
			for (int i = 0; i < quantidadePremio; i++) {
				ImovelSorteadoHelper helper = new ImovelSorteadoHelper();
				boolean sorteado = false;
				
				while (!sorteado 
						&& imoveisAptoSorteio.size() > numerosSorteados.size()) {
					Integer posicaoNumeroSorteado = Util.obterNumeroInteiroAleatorio(0,imoveisAptoSorteio.size() - 1);
					
					Object[] imovelSorteado = imoveisAptoSorteio.get(posicaoNumeroSorteado.intValue());
					
					Integer numeroSorteado = (Integer) imovelSorteado[0];
					Integer idImovel = (Integer) imovelSorteado[1];
					Integer numeroOrdemSorteio = this.pesquisarNumeroOrdemSorteioFiqueLegal();
					
					//[SB010] - Verificar Débitos do Imóvel.
					//[SB011] - Verificar Situação de Ligação do Imóvel.
					//[SB012] - Verificar Categoria Residencial do Imóvel.
					if(!numerosSorteados.contains(numeroSorteado)) {
						
						numerosSorteados.add(numeroSorteado);
						
						if (this.verificarImovelAptoSorteioFiqueLegal(idImovel)
								&& !colecaoImovelImpedido.contains(idImovel)) {
							
							if(imovelSorteado[3] != null
									&& colecaoCpfImpedido.contains((String) imovelSorteado[3])) {
								continue;
							}								
							
							numeroOrdemSorteio++;
							
							String endereco = this.getControladorEndereco().pesquisarEndereco(idImovel);
							String matricula = Util.retornaMatriculaImovelFormatada(idImovel);
							String nomeCliente = (String) imovelSorteado[2];
							String cpfCnpjCliente = null;
							if (imovelSorteado[3] != null) {
								cpfCnpjCliente = Util.formatarCpf((String) imovelSorteado[3]);
							} else if (imovelSorteado[4] != null) {
								cpfCnpjCliente = Util.formatarCnpj((String) imovelSorteado[4]);
							}
							Object[] dadosGerenciaLoca = this.pesquisarDadosImoveisSorteados(idImovel);
							
							helper.setNumeroSorteado(numeroSorteado.toString());
							helper.setEndereco(endereco);
							helper.setMatricula(matricula);
							helper.setGerenciaRegional((String) dadosGerenciaLoca[0]);
							helper.setLocalidade((String) dadosGerenciaLoca[1]);
							helper.setNomeClienteUsuario(nomeCliente);
							helper.setCpfCnpjCliente(cpfCnpjCliente);
							
							this.atualizarImovelSorteioFiqueLegal(idImovel, idPremio, numeroOrdemSorteio);
							
							colecaoImovelSorteadoHelper.add(helper);
							sorteado = true;
							
						}
						
					}
					
				}
			}
			
			return colecaoImovelSorteadoHelper;
		} catch (ErroRepositorioException ex) {
			ex.printStackTrace();
			throw new ControladorException("erro.sistema", ex);
		}
	}

	/**
	 * [UC1295] Efetuar Sorteio de Prêmios
	 * 
	 * 2.3.	Caso contrário, ou seja, "Sorteio Mensal":
	 * 
	 * @author Mariana Victor
	 * @data 25/10/2012
	 * 
	 * @param
	 * @return void
	 */
	public Collection<ImovelSorteadoHelper> efetuarSorteioMensal(
		Integer idPremio, Integer quantidadePremio) throws ControladorException {
		
		try {
			Collection<ImovelSorteadoHelper> colecaoImovelSorteadoHelper = 
					new ArrayList<ImovelSorteadoHelper>();
			
			List<Object[]> imoveisAptoSorteio = (List<Object[]>)
					this.pesquisarImoveisAptoSorteioMensal();
			
			List<Integer> numerosSorteados = new ArrayList<Integer>();
	
			Collection<String> colecaoCpfImpedido = 
					this.repositorioCadastro.pesquisarCpfImpedido();
	
			Collection<Integer> colecaoImovelImpedido = 
					this.repositorioCadastro.pesquisarImovelImpedidoSorteio();
			
			for (int i = 0; i < quantidadePremio; i++) {
				ImovelSorteadoHelper helper = new ImovelSorteadoHelper();
				boolean sorteado = false;
				
				 while (!sorteado
							&& imoveisAptoSorteio.size() > numerosSorteados.size()) {
					Integer posicaoNumeroSorteado = Util.obterNumeroInteiroAleatorio(0,imoveisAptoSorteio.size() - 1);
					
					Object[] imovelSorteado = imoveisAptoSorteio.get(posicaoNumeroSorteado.intValue());
					
					Integer numeroSorteado = (Integer) imovelSorteado[0];
					Integer idImovel = (Integer) imovelSorteado[1];
					Integer numeroOrdemSorteio = this.pesquisarNumeroOrdemSorteioMensal();
					
					//[SB010] - Verificar Débitos do Imóvel.
					//[SB011] - Verificar Situação de Ligação do Imóvel.
					//[SB012] - Verificar Categoria Residencial do Imóvel.
					if(!numerosSorteados.contains(numeroSorteado)) {
						
						numerosSorteados.add(numeroSorteado);
						
						if (this.getControladorAtendimentoPublico()
									.verificarImovelAptoSorteioMensal(idImovel)
							&& !this.obterDebitosImovelSorteio(idImovel)
							&& !colecaoImovelImpedido.contains(idImovel)) {
	
							numeroOrdemSorteio++;
							
							String endereco = this.getControladorEndereco().pesquisarEndereco(idImovel);
							String matricula = Util.retornaMatriculaImovelFormatada(idImovel);
							Cliente cliente = this.getControladorImovel().pesquisarClienteUsuarioImovel(idImovel);

							if(cliente.getCpf() != null
									&& !cliente.getCpf().trim().equals("")
									&& colecaoCpfImpedido.contains(cliente.getCpf())) {
								continue;
							}
							
							Object[] dadosGerenciaLoca = this.pesquisarDadosImoveisSorteados(idImovel);
							
							helper.setNumeroSorteado(numeroSorteado.toString());
							helper.setEndereco(endereco);
							helper.setMatricula(matricula);
							helper.setGerenciaRegional((String) dadosGerenciaLoca[0]);
							helper.setLocalidade((String) dadosGerenciaLoca[1]);
							helper.setNomeClienteUsuario(cliente.getNome());
							if (cliente.getCpfFormatado() != null 
									&& !cliente.getCpfFormatado().trim().equals("")) {
								helper.setCpfClienteUsuario(cliente.getCpfFormatado());
							}
							
							this.atualizarImovelSorteioMensal(idImovel, idPremio, numeroOrdemSorteio);
							
							colecaoImovelSorteadoHelper.add(helper);
							sorteado = true;
						}
						
					}
					
				}
			}
			
			return colecaoImovelSorteadoHelper;
		} catch (ErroRepositorioException ex) {
			ex.printStackTrace();
			throw new ControladorException("erro.sistema", ex);
		}
	}

	/**
	 * [UC1295] Efetuar Sorteio de Prêmios
	 * 
	 * [SB014] - Emitir Relatório Sorteio Fique Legal
	 * 
	 * @author Mariana Victor
	 * @date 26/10/2012
	 * 
	 * @return Collection<RelatorioSorteioPremiosHelper>
	 * @throws ControladorException
	 */
	public Collection<RelatorioSorteioPremiosHelper> pesquisarDadosRelatorioImoveisSorteadosFiqueLegal()
			throws ControladorException {
		try{
			Collection<RelatorioSorteioPremiosHelper> retorno = new ArrayList<RelatorioSorteioPremiosHelper>();
			
			Collection<Object[]> colecaoDadosImoveisSorteados =  repositorioCadastro.pesquisarDadosRelatorioImoveisSorteadosFiqueLegal();
			
			if (colecaoDadosImoveisSorteados != null
					&& !colecaoDadosImoveisSorteados.isEmpty()) {
				Iterator iterator = colecaoDadosImoveisSorteados.iterator();
				
				while(iterator.hasNext()) {
					Object[] dadosImovelSorteado = (Object[]) iterator.next();
					RelatorioSorteioPremiosHelper helper = new RelatorioSorteioPremiosHelper();

					String premio = (String) dadosImovelSorteado[0];
					Integer idImovel = (Integer) dadosImovelSorteado[1];
					Integer numeroOrdemSorteioImovel = (Integer) dadosImovelSorteado[2];
					Integer ordemPremio = (Integer) dadosImovelSorteado[3];
					Integer numeroSorteio = (Integer) dadosImovelSorteado[4];
					String nomeCliente = (String) dadosImovelSorteado[5];
					String cpfCnpjCliente = null;
					if (dadosImovelSorteado[6] != null) {
						cpfCnpjCliente = Util.formatarCpf((String) dadosImovelSorteado[6]);
					} else if (dadosImovelSorteado[7] != null) {
						cpfCnpjCliente = Util.formatarCnpj((String) dadosImovelSorteado[7]);
					}  
					String gerenciaRegional = (String) dadosImovelSorteado[8];
					String localidade = (String) dadosImovelSorteado[9];
					
					String endereco = this.getControladorEndereco().pesquisarEndereco(idImovel);
					String matricula = Util.retornaMatriculaImovelFormatada(idImovel);

					helper.setPremio(premio);
					helper.setOrdemPremio(ordemPremio.toString());
					helper.setNumeroOrdemSorteioImovel(numeroOrdemSorteioImovel.toString());
					helper.setEndereco(endereco);
					helper.setNumeroSorteio(numeroSorteio.toString());
					helper.setGerenciaRegional(gerenciaRegional);
					helper.setLocalidade(localidade);
					helper.setMatricula(matricula);
					helper.setNomeCliente(nomeCliente);
					helper.setCpfCliente(cpfCnpjCliente);
					retorno.add(helper);
				}
			}
			
			return retorno;
		} catch (ErroRepositorioException ex) {
			throw new ControladorException("erro.sistema", ex);
		}
	}

	/**
	 * [UC1295] Efetuar Sorteio de Prêmios
	 * 
	 * [SB0006] - Emitir Relatório Sorteio Mensal
	 * 
	 * @author Mariana Victor
	 * @date 26/10/2012
	 * 
	 * @return Collection<RelatorioSorteioPremiosHelper>
	 * @throws ControladorException
	 */
	public Collection<RelatorioSorteioPremiosHelper> pesquisarDadosRelatorioImoveisSorteadosMensal()
			throws ControladorException {
		try{
			Collection<RelatorioSorteioPremiosHelper> retorno = new ArrayList<RelatorioSorteioPremiosHelper>();
			
			Collection<Object[]> colecaoDadosImoveisSorteados =  repositorioCadastro.pesquisarDadosRelatorioImoveisSorteadosMensal();
			
			if (colecaoDadosImoveisSorteados != null
					&& !colecaoDadosImoveisSorteados.isEmpty()) {
				Iterator iterator = colecaoDadosImoveisSorteados.iterator();
				
				while(iterator.hasNext()) {
					Object[] dadosImovelSorteado = (Object[]) iterator.next();
					RelatorioSorteioPremiosHelper helper = new RelatorioSorteioPremiosHelper();

					String premio = (String) dadosImovelSorteado[0];
					Integer idImovel = (Integer) dadosImovelSorteado[1];
					Integer numeroOrdemSorteioImovel = (Integer) dadosImovelSorteado[2];
					Integer ordemPremio = (Integer) dadosImovelSorteado[3];
					Integer numeroSorteio = (Integer) dadosImovelSorteado[4];
					String gerenciaRegional = (String) dadosImovelSorteado[5];
					String localidade = (String) dadosImovelSorteado[6];
					
					String endereco = this.getControladorEndereco().pesquisarEndereco(idImovel);
					String matricula = Util.retornaMatriculaImovelFormatada(idImovel);
					Cliente cliente = this.getControladorImovel().pesquisarClienteUsuarioImovel(idImovel);

					helper.setPremio(premio);
					helper.setOrdemPremio(ordemPremio.toString());
					helper.setNumeroOrdemSorteioImovel(numeroOrdemSorteioImovel.toString());
					helper.setEndereco(endereco);
					helper.setNumeroSorteio(numeroSorteio.toString());
					helper.setGerenciaRegional(gerenciaRegional);
					helper.setLocalidade(localidade);
					helper.setMatricula(matricula);
					helper.setNomeCliente(cliente.getNome());
					if (cliente.getCpfFormatado() != null 
							&& !cliente.getCpfFormatado().trim().equals("")) {
						helper.setCpfCliente(cliente.getCpfFormatado());
					}
					
					retorno.add(helper);
				}
			}
			
			return retorno;
		} catch (ErroRepositorioException ex) {
			throw new ControladorException("erro.sistema", ex);
		}
	}
	
	/**
	 * [UC1295] Efetuar Sorteio de Prêmios
	 * 
	 * @author Mariana Victor
	 * @date 26/10/2012
	 * 
	 * @return Date
	 * @throws ControladorException
	 */
	public Date pesquisarDataSorteioFiqueLegal() 
			throws ControladorException {
		try{
			return repositorioCadastro.pesquisarDataSorteioFiqueLegal();
		}catch(ErroRepositorioException e){
			throw new ControladorException("erro.sistema", e);
		}
		
	}
	
	/**
	 * [UC1295] Efetuar Sorteio de Prêmios
	 * 
	 * @author Mariana Victor
	 * @date 26/10/2012
	 * 
	 * @return Date
	 * @throws ControladorException
	 */
	public Date pesquisarDataSorteioMensal() 
			throws ControladorException {
		try{
			return repositorioCadastro.pesquisarDataSorteioMensal();
		}catch(ErroRepositorioException e){
			throw new ControladorException("erro.sistema", e);
		}
		
	}
	
	/**
	 * [UC1380] Cadastrar Imóveis para Sorteio
	 * 
	 * [IT0008] Pesquisar Imóvel Cadastrado para Sorteio.
	 * 
	 * @author Mariana Victor
	 * @date 22/10/2012
	 */
	public boolean pesquisarImovelCadastradoSorteio(Integer idImovel) 
			throws ControladorException{
		try{
			
			return repositorioCadastro.pesquisarImovelCadastradoSorteio(idImovel);
			
		}catch (ErroRepositorioException e) {
			throw new ControladorException("erro.sistema", e);
		}
	}
	
	/**
	 * [UC0472] Consultar Imóvel
	 * 
	 * [SB0006 - Verificar Categoria Residencial do Imóvel] 
	 * [SB0007 - Verificar Cliente do Imóvel Apto para Sorteio]
	 * 
	 * @author Ana Maria
	 * @date 25/10/2012
	 */
	public boolean verificarImovelAptoSorteio(Integer idImovel) 
			throws ControladorException{
		try{
			
			return repositorioCadastro.verificarImovelAptoSorteio(idImovel);
			
		}catch (ErroRepositorioException e) {
			throw new ControladorException("erro.sistema", e);
		}
	}
	
	/**
	 * [UC1380] Cadastrar Imóveis para Sorteio
	 * 
	 * [SB0013] Comparar Nome do Cliente
	 * 
	 * @author Mariana Victor
	 * @date 01/11/2012
	 */
	private boolean compararNomeCliente(String nomeClienteInformado, String nomeClienteImovel) {
		
		if (nomeClienteImovel == null
				|| nomeClienteImovel.trim().equals("") ) {
			return false;
		}
		
		// 1.1.	Comparar a primeira parte do nome do cliente (considerar toda a string até o primeiro espaço no nome)
		String primeiroNomeClienteInformado = nomeClienteInformado.trim().split(" ")[0];
		String primeiroNomeClienteImovel = nomeClienteImovel.trim().split(" ")[0];
		
		// 1.2.	Desconsiderar os acentos e o caractere de ponto;
		//remove acentos
		primeiroNomeClienteInformado = Normalizer.normalize(
				primeiroNomeClienteInformado, Normalizer.Form.NFKD)
			.replaceAll("\\p{InCombiningDiacriticalMarks}+", "");
		primeiroNomeClienteImovel = Normalizer.normalize(
				primeiroNomeClienteImovel, Normalizer.Form.NFKD)
			.replaceAll("\\p{InCombiningDiacriticalMarks}+", "");

		//remove caractere que não seja letra nem número (pontuação)
		primeiroNomeClienteInformado = primeiroNomeClienteInformado
				.replaceAll("[^a-zA-Z1-9]", "");
		primeiroNomeClienteImovel = primeiroNomeClienteImovel
				.replaceAll("[^a-zA-Z1-9]", "");
		
		String nomeClienteInformadoComparacao = primeiroNomeClienteInformado;
		String nomeClienteImovelComparacao = primeiroNomeClienteImovel;;
		
		//1.3.	Desconsiderar se o nome for maiúsculo ou minúsculo.
		if (!nomeClienteImovelComparacao.equalsIgnoreCase(
			nomeClienteInformadoComparacao.trim())) {
			return false;
		}
		
		return true;
	}

	/**
	 * [UC 1387] - Validar Resetorização dos Imóveis - GSAN
	 * 
	 * [SB 0002] - Validar dados do registro
	 * 
	 * @author Davi Menezes
	 * @date 08/11/2012
	 */
	private boolean validarDadosRegistroImovelInscricaoAlterada(
			ImovelInscricaoResetorizada imovelInscricaoResetorizada) throws ControladorException {
		
		boolean inscricaoValida = true;
		
		OcorrenciaResetorizacao ocorrenciaResetorizacao = null;

		FiltroImovel filtroImovel = new FiltroImovel();
		filtroImovel.adicionarParametro(new ParametroSimples(FiltroImovel.ID,
													imovelInscricaoResetorizada.getImovel().getId()));

		Collection<?> colecaoImovel = this.getControladorUtil().pesquisar(filtroImovel, Imovel.class.getName());
		if (Util.isVazioOrNulo(colecaoImovel)) {
			inscricaoValida = false;

			ocorrenciaResetorizacao = new OcorrenciaResetorizacao(
				OcorrenciaResetorizacao.MATRICULA_IMOVEL_NAO_CADASTRADA);
			
		} else {

			FiltroLocalidade filtroLocalidade = new FiltroLocalidade();
			filtroLocalidade.adicionarParametro(
				new ParametroSimples(FiltroLocalidade.ID, imovelInscricaoResetorizada.getLocalidade().getId()));

			Collection<?> colecaoLocalidade = this.getControladorUtil().pesquisar(filtroLocalidade, Localidade.class.getName());
			if (Util.isVazioOrNulo(colecaoLocalidade)) {
				inscricaoValida = false;

				ocorrenciaResetorizacao = new OcorrenciaResetorizacao(
					OcorrenciaResetorizacao.LOCALIDADE_NAO_CADASTRADA);
				
			} else {

//				// [FE 0001] - Validar matrícula do imóvel
//				FiltroImovelInscricaoAlterada filtroImovelInscricaoAlterada = new FiltroImovelInscricaoAlterada();
//				filtroImovelInscricaoAlterada.adicionarParametro(
//					new ParametroSimples(FiltroImovelInscricaoAlterada.IMOVEL_ID, imovelInscricaoResetorizada.getImovel().getId()));
//				filtroImovelInscricaoAlterada.adicionarParametro(
//					new ParametroSimples(FiltroImovelInscricaoAlterada.INDICADOR_ATUALIZADO, ConstantesSistema.NAO));
//				filtroImovelInscricaoAlterada.adicionarParametro(
//					new ParametroSimples(FiltroImovelInscricaoAlterada.INDICADOR_ALTERACAO_EXCLUIDA, ConstantesSistema.NAO));
//
//				Collection<?> colecao = this.getControladorUtil().pesquisar(filtroImovelInscricaoAlterada, ImovelInscricaoAlterada.class.getName());
//				if (!Util.isVazioOrNulo(colecao)) {
//					inscricaoValida = false;
//
//					ocorrenciaResetorizacao = new OcorrenciaResetorizacao(
//						OcorrenciaResetorizacao.MATRICULA_IMOVEL_EXISTENTE);
//
//				} else {
				
				//[SB0004] - Verificar Existência de Alteração de Inscrição Pendente para o Imóvel
				getControladorImovel().verificarExistenciaAlteracaoInscricaoPendenteImovel(imovelInscricaoResetorizada.getImovel());

				// [FE 0002] - Validar Novo Setor Comercial
				FiltroSetorComercial filtroSetorComercial = new FiltroSetorComercial();
				filtroSetorComercial.adicionarParametro(
					new ParametroSimples(FiltroSetorComercial.CODIGO_SETOR_COMERCIAL, imovelInscricaoResetorizada.getCodigoSetorComercial()));
				filtroSetorComercial.adicionarParametro(
					new ParametroSimples(FiltroSetorComercial.INDICADORUSO, ConstantesSistema.INDICADOR_USO_ATIVO));

				Collection<?> colecaoSetorComercial = this.getControladorUtil().pesquisar(filtroSetorComercial, SetorComercial.class.getName());
				if (Util.isVazioOrNulo(colecaoSetorComercial)) {
					inscricaoValida = false;

					ocorrenciaResetorizacao = new OcorrenciaResetorizacao(
						OcorrenciaResetorizacao.CODIGO_SETOR_NAO_CADASTRADO);

				} else {

					// [FE 0003] - Validar Nova Quadra
					FiltroQuadra filtroQuadra = new FiltroQuadra();
					filtroQuadra.adicionarParametro(
						new ParametroSimples(FiltroQuadra.NUMERO_QUADRA, imovelInscricaoResetorizada.getNumeroQuadra()));
					filtroQuadra.adicionarParametro(
						new ParametroSimples(FiltroQuadra.INDICADORUSO, ConstantesSistema.INDICADOR_USO_ATIVO));

					Collection<?> colecaoQuadra = this.getControladorUtil().pesquisar(filtroQuadra, Quadra.class.getName());
					if (Util.isVazioOrNulo(colecaoQuadra)) {
						inscricaoValida = false;

						ocorrenciaResetorizacao = new OcorrenciaResetorizacao(
							OcorrenciaResetorizacao.NUMERO_QUADRA_NAO_CADASTRADO);

					} else {

						// [FE 0004] - Validar Relação de Quadra e Setor
						// Comercial com Localidade
						filtroQuadra = new FiltroQuadra();
						filtroQuadra.adicionarParametro(
							new ParametroSimples(FiltroQuadra.NUMERO_QUADRA, imovelInscricaoResetorizada.getNumeroQuadra()));
						filtroQuadra.adicionarParametro(
							new ParametroSimples(FiltroQuadra.CODIGO_SETORCOMERCIAL, imovelInscricaoResetorizada.getCodigoSetorComercial()));
						filtroQuadra.adicionarParametro(
							new ParametroSimples(FiltroQuadra.ID_LOCALIDADE, imovelInscricaoResetorizada.getLocalidade().getId()));
						filtroQuadra.adicionarParametro(
							new ParametroSimples(FiltroQuadra.INDICADORUSO, ConstantesSistema.INDICADOR_USO_ATIVO));

						colecaoQuadra = this.getControladorUtil().pesquisar(filtroQuadra, Quadra.class.getName());
						if (Util.isVazioOrNulo(colecaoQuadra)) {
							inscricaoValida = false;

							ocorrenciaResetorizacao = new OcorrenciaResetorizacao(
								OcorrenciaResetorizacao.SETOR_QUADRA_NAO_ASSOCIADO_LOCALIDADE);

						}
					}
				}
			}
		}
//		}
		if (ocorrenciaResetorizacao != null) {
			imovelInscricaoResetorizada.setOcorrenciaResetorizacao(ocorrenciaResetorizacao);
			imovelInscricaoResetorizada.setUltimaAlteracao(new Date());

			this.getControladorUtil().atualizar(imovelInscricaoResetorizada);
		}

		return inscricaoValida;
	}
	
	/**
	 * [UC 1391] - Gerar Roteiro Dispositivo Movel Atualização Cadastral
	 * 
	 * [IT 0005] - Pesquisar Imóveis Resetorizados
	 * [IT 0008] - Pesquisar Imóveis Não Resetorizados
	 * 
	 * @author Davi Menezes
	 * @date 19/11/2012
	 */
	public Collection<ImoveisRoteiroDispositivoMovelHelper> pesquisarImoveisRoteiroDispositivoMovel(String idLocalidade, 
			String codigoSetorComercial, Collection<Integer> quadrasSelecionadas, 
			Collection<Integer> colecaoLigacaoAguaSituacao, String clienteUsuario, String[] indicadorSituacaoImovel) throws ControladorException{
		
		try{
			ImoveisRoteiroDispositivoMovelHelper helper = null;
			Imovel imovel = null;
			
			Collection<ImoveisRoteiroDispositivoMovelHelper> retorno = new ArrayList<ImoveisRoteiroDispositivoMovelHelper>();
			
			Collection<Integer> colecaoImoveisResetorizados = new ArrayList<Integer>(); 
					
//			boolean localidadeResetorizada = existeLocalidadeResetorizada(Integer.valueOf(idLocalidade) ) ;
//			
//			if ( localidadeResetorizada ) {
//				
//				Collection<Object []> colecao = repositorioCadastro.pesquisarImoveisResetorizados(idLocalidade, codigoSetorComercial, 
//						numeroQuadraInicial, numeroQuadraFinal, colecaoLigacaoAguaSituacao, clienteUsuario);
//				
//				if(!Util.isVazioOrNulo(colecao)){
//					Iterator<Object []> it = colecao.iterator();
//					
//					while(it.hasNext()){
//						helper = new ImoveisRoteiroDispositivoMovelHelper();
//						
//						Object[] array = (Object []) it.next();
//						
//						Integer idImovel = (Integer) array[0];
//						colecaoImoveisResetorizados.add(idImovel);
//						
//						imovel = getControladorImovel().pesquisarImovel(idImovel);
//						
//						Integer localidade = (Integer) array[1];
//						Integer setor = (Integer) array[2];
//						Integer quadra = (Integer) array[3];
//						Integer lote = (Integer) array[4];
//						Integer subLote = (Integer) array[5];
//						
//						helper.setIdImovel(String.valueOf(idImovel));
//						helper.setSetor(String.valueOf(setor));
//						helper.setQuadra(String.valueOf(quadra));
//						
//						//Imovel resetorizado nao tem rota.
//						helper.setRota("");
//						
//						helper.setLote(String.valueOf(lote));
//						helper.setSubLote(String.valueOf(subLote));
//						helper.setInsricaoImovel(this.imovelInscricaoFormatada(localidade, setor, quadra, lote, subLote));
//						helper.setIndicadorResetorizacao(String.valueOf(ConstantesSistema.SIM));
//						
//						retorno.add(helper);
//					}
//					
//					Collection<Integer> colecaoLigacoesNaoFaturadas = new ArrayList<Integer>();
//					colecaoLigacoesNaoFaturadas.add(LigacaoAguaSituacao.POTENCIAL);
//					colecaoLigacoesNaoFaturadas.add(LigacaoAguaSituacao.SUPRIMIDO);
//					colecaoLigacoesNaoFaturadas.add(LigacaoAguaSituacao.FACTIVEL);
//					
//					Collection<Object []> colecaoImoveisNaoResetorizados = repositorioImovel.pesquisarImoveisNaoResetorizados(idLocalidade, 
//							colecaoLigacoesNaoFaturadas, clienteUsuario, colecaoImoveisResetorizados);
//					
//					if(!Util.isVazioOrNulo(colecaoImoveisNaoResetorizados)){
//						Iterator<Object []> iterator = colecaoImoveisNaoResetorizados.iterator();
//						
//						while(iterator.hasNext()){
//							helper = new ImoveisRoteiroDispositivoMovelHelper();
//							Object[] array = (Object []) iterator.next();
//							
//							Integer idImovel = (Integer) array[0];
//							Integer localidade = (Integer) array[1];
//							Integer codigoSetor = (Integer) array[2];
//							Integer numeroQuadra = (Integer) array[3];
//							Short lote = (Short) array[4];
//							Short subLote = (Short) array[5];
//							Short rota = (Short) array[6];
//							
//							Integer intLote = Integer.parseInt(lote.toString());
//							Integer intSubLote = Integer.parseInt(subLote.toString());
//							
//							helper.setIdImovel(String.valueOf(idImovel));
//							helper.setInsricaoImovel(this.imovelInscricaoFormatada(localidade, codigoSetor, numeroQuadra, intLote, intSubLote));
//							helper.setSetor(String.valueOf(codigoSetor));
//							helper.setQuadra(String.valueOf(numeroQuadra));
//							helper.setRota(String.valueOf(rota));
//							helper.setLote(String.valueOf(lote));
//							helper.setSubLote(String.valueOf(subLote));
//							helper.setIndicadorResetorizacao(String.valueOf(ConstantesSistema.NAO));
//						
//							retorno.add(helper);
//						}
//					}
//				}
//				
//				//Caso a localidade seja resetorizada e a pesquisa nao retorne nenhum imovel.
//				if ( retorno.isEmpty() ) {
//					throw new ControladorException(
//							"atencao.pesquisa.nenhumresultado");
//				}
//			} else {

				Collection<Object []> colecaoImoveis = repositorioImovel.pesquisarImoveisRoteiroDispositivoMovel(
						idLocalidade, codigoSetorComercial, quadrasSelecionadas, colecaoLigacaoAguaSituacao, clienteUsuario, indicadorSituacaoImovel);
				
				if(!Util.isVazioOrNulo(colecaoImoveis)){
					Iterator<Object []> it = colecaoImoveis.iterator();
					
					while(it.hasNext()){
						helper = new ImoveisRoteiroDispositivoMovelHelper();
						
						Object [] array = (Object []) it.next(); 
						
						Integer idImovel = (Integer) array[0];
						Integer localidade = (Integer) array[1];
						Integer codigoSetor = (Integer) array[2];
						Integer numeroQuadra = (Integer) array[3];
						Short lote = (Short) array[4];
						Short subLote = (Short) array[5];
						Short rota = (Short) array[6];
						
						Integer intLote = Integer.parseInt(lote.toString());
						Integer intSubLote = Integer.parseInt(subLote.toString());
						
						helper.setIdImovel(String.valueOf(idImovel));
						helper.setInsricaoImovel(this.imovelInscricaoFormatada(localidade, codigoSetor, numeroQuadra, intLote, intSubLote));
						helper.setSetor(String.valueOf(codigoSetor));
						helper.setQuadra(String.valueOf(numeroQuadra));
						helper.setRota(String.valueOf(rota));
						helper.setLote(String.valueOf(lote));
						helper.setSubLote(String.valueOf(subLote));
						helper.setIndicadorResetorizacao(String.valueOf(ConstantesSistema.NAO));
					
						retorno.add(helper);
					}
				} else {
//					throw new ControladorException(
//							"atencao.pesquisa.nenhumresultado");
				}
//			}
			
			return retorno;
			
		}catch (ErroRepositorioException e) {
			throw new ControladorException("erro.sistema", e);
		}
	}
	
	/**
	 * Verifica se existe resetorizacao para localidade informada
	 * @param idLocalidade
	 * @return
	 */
	private boolean existeLocalidadeResetorizada(Integer idLocalidade) throws ControladorException {
		
		boolean retorno = false;
		
		FiltroImovelInscricaoResetorizada filtroImovelInscricaoResetorizada = new FiltroImovelInscricaoResetorizada();
		filtroImovelInscricaoResetorizada.adicionarParametro( new ParametroSimples( FiltroImovelInscricaoResetorizada.LOCALIDADE , idLocalidade));
		
		Collection<ImovelInscricaoResetorizada> colecaoImovelInscricaoResetorizada = getControladorUtil()
						.pesquisar(filtroImovelInscricaoResetorizada, ImovelInscricaoResetorizada.class.getName());
			
		if ( colecaoImovelInscricaoResetorizada != null && !colecaoImovelInscricaoResetorizada.isEmpty() ) {
			retorno = true;
		}
		
		return retorno;
	}
	
	private String imovelInscricaoFormatada(Integer loc, Integer setor, Integer qd, Integer lt, Integer subLt){
		String inscricao = "";

		String zeroUm = "0";
		String zeroDois = "00";
		String zeroTres = "000";

		String localidade, setorComercial, quadra, lote, subLote;

		localidade = String.valueOf(loc);
		setorComercial = String.valueOf(setor);
		quadra = String.valueOf(qd);
		lote = String.valueOf(lt);
		subLote = String.valueOf(subLt);

		if (String.valueOf(loc).length() < 3
				&& String.valueOf(loc)
						.length() > 1) {
			localidade = zeroUm + loc;
		} else if (String.valueOf(loc)
				.length() < 3) {
			localidade = zeroDois + loc;
		}

		if (String.valueOf(setor).length() < 3
				&& String.valueOf(setor)
						.length() > 1) {
			setorComercial = zeroUm + setor;
		} else if (String.valueOf(setor)
				.length() < 3) {
			setorComercial = zeroDois + setor;
		}

		if (String.valueOf(qd).length() < 3
				&& String.valueOf(qd)
						.length() > 1) {
			quadra = zeroUm + qd;
		} else if (String.valueOf(qd)
				.length() < 3) {
			quadra = zeroDois + qd;
		}

		if (String.valueOf(lt).length() < 4
				&& String.valueOf(lt).length() > 2) {
			lote = zeroUm + lt;
		} else if (String.valueOf(lt).length() < 3
				&& String.valueOf(lt).length() > 1) {
			lote = zeroDois + lt;
		} else if (String.valueOf(lt).length() < 2) {
			lote = zeroTres + lt;
		}

		if (String.valueOf(subLt).length() < 3
				&& String.valueOf(subLt).length() > 1) {
			subLote = zeroUm + subLt;
		} else if (String.valueOf(subLt).length() < 3) {
			subLote = zeroDois + subLt;
		}

		inscricao = localidade + "." + setorComercial + "." + quadra + "."
				+ lote + "." + subLote;

		return inscricao;
	}
	
	/**
	 * [UC 1391] - Gerar Roteiro Dispositivo Movel Atualização Cadastral
	 * 
	 * @author Davi Menezes
	 * @date 20/11/2012
	 */
	public void gerarRoteiroDispositivoMovel(Integer idFuncionalidadeIniciada, Collection<String> colecaoImoveis, ComandoAtualizacaoCadastralHelper helper)
			throws ControladorException {
		
		int idUnidadeIniciada = 0;
		
		try{
			/*
			 * Registrar o início do processamento da Unidade de Processamento
			 * do Batch
			 */
			idUnidadeIniciada = getControladorBatch()
					.iniciarUnidadeProcessamentoBatch(idFuncionalidadeIniciada,
							UnidadeProcessamento.FUNCIONALIDADE, 0);
			
			System.out.println("***************************************");
			System.out.println("GERAR ROTEIRO DISPOSITIVO MOVEL ATUALIZAÇÃO CADASTRAL ");
			System.out.println("***************************************");
			
			//Montar Dados do Parametro Tabela Atualização Cadastral
			ParametroTabelaAtualizacaoCadastro parametro = new ParametroTabelaAtualizacaoCadastro();
			parametro.setEmpresa(helper.getEmpresa());
			parametro.setLocalidadeInicial(helper.getLocalidade());
			parametro.setLocalidadeFinal(helper.getLocalidade());
			parametro.setCodigoSetorComercialInicial(helper.getCodigoSetorComercial());
			parametro.setCodigoSetorComercialFinal(helper.getCodigoSetorComercial());
//			parametro.setNumeroQuadraInicial(helper.getNumeroQuadraInicial());
//			parametro.setNumeroQuadraFinal(helper.getNumeroQuadraFinal());
			parametro.setUsuario(helper.getUsuarioLogado());
			parametro.setUltimaAlteracao(new Date());
			
			//Inserir Parametro Tabela Atualizacao Cadastral
			Integer idParametro = (Integer) getControladorUtil().inserir(parametro);
			parametro.setId(idParametro);
			
			System.out.println("ID Parametro Tabela Atualização Cadastral: " + idParametro);
			
//			Caso o usuário escolha a opção: "Arquivos Gerados pela GEO"
//			4.1. [SB0006] Gerar Roteiro por Arquivos Gerados pelo GEO
//			4.2. [SB0001] Gerar Comando de Atualização Cadastral 
//			4.3. [SB0002] Inserir Imóvel no ambiente Virtual
//			4.4. [SB0003] Gerar Arquivo Texto
//			4.5. [SB0004] Inserir Arquivo Texto
			Set<Integer> colecaoSetores = new HashSet<Integer>();
			if(helper.getIndicadorGerarRoteiroPeloGEO().equals(ConstantesSistema.SIM.toString())){

				String caminhoPastaPai = "/usr/local/jboss/bin/inscricao_atraves_leiturista/roteiro";
//				String caminhoPastaPai = "/home/ipad/ipad/tools/jboss/bin/inscricao_atraves_leiturista/roteiro";
				String caminhoPastaAProcessar = caminhoPastaPai + "/a_processar";
				String caminhoPastaProcessado = caminhoPastaPai +  "/processado";
				String caminhoPastaErro = caminhoPastaPai + "/erro_processamento";
				
				File diretorio = new File(caminhoPastaAProcessar);
				File[] arquivos = diretorio.listFiles();
				
				colecaoImoveis = new ArrayList<String>();
				
				if(arquivos != null){
					for (int index = 0; index < arquivos.length; index++){
						File arquivo = arquivos[index];
						FileReader reader = new FileReader(arquivo);
						BufferedReader buffer = new BufferedReader(reader);
						String extensao = null;
						
			            String nomeArquivo = arquivos[index].getName();
			            if(nomeArquivo.contains(".")){
			            	extensao = nomeArquivo.substring(nomeArquivo.lastIndexOf("."), nomeArquivo.length());
			            }
			            
			            if(extensao != null && extensao.equals(".txt")){
						
							System.out.println("************** PROCESSANDO "+arquivos[index].getName()+" **************");
							
							File arquivoComErro = new File(caminhoPastaErro + "/erro_" + nomeArquivo);
							FileWriter fileWriter = new FileWriter(arquivoComErro);
							
							//[Validar Imoveis do arquivo GEO]
							String matricula = "";
							while ((matricula = buffer.readLine()) != null) {
								
								if(matricula != ""){
									Imovel imovel = repositorioImovel.pesquisarImovelGerarRoteiro(Integer.parseInt(matricula));
									if(imovel != null){
										if(imovel.getLocalidade().getId().equals(helper.getLocalidade().getId())){
											if(imovel.getSituacaoAtualizacaoCadastral() == null
													|| imovel.getSituacaoAtualizacaoCadastral().getId().equals(SituacaoAtualizacaoCadastral.DISPONIVEL)
													|| imovel.getSituacaoAtualizacaoCadastral().getId().equals(SituacaoAtualizacaoCadastral.COLETADO)){
												colecaoImoveis.add(matricula  + "/" + ConstantesSistema.NAO);							
												colecaoSetores.add(imovel.getSetorComercial().getCodigo());
											}else{
												//colocar matricula no arquivo de erro
												fileWriter.write(matricula + " Imóvel não disponível \n");
											}
										}else{
											if(!arquivoComErro.exists()){
												arquivoComErro.createNewFile();
											}
											//colocar matricula no arquivo de erro
											fileWriter.write(matricula + " Imóvel não faz parte da localidade: " + helper.getLocalidade().getId() + "\n");
										}
										
									}else{
										if(!arquivoComErro.exists()){
											arquivoComErro.createNewFile();
										}
										
										//colocar matricula no arquivo de erro
										fileWriter.write(matricula + " Imóvel não encontrado " + "\n");
									}
								}
								
							}
							
							//fecha arquivo
							buffer.close();
				            reader.close();
				            fileWriter.close();
				            
							//O sistema remove o arquivo da pasta dos arquivos para processar 
							//e coloca na pasta dos arquivos processados
							File pastaProcessado = new File(caminhoPastaProcessado);
							arquivo.renameTo(new File(pastaProcessado, arquivo.getName()));				            
			            }
					}
				}
			}else{
			
				/**
				 *@author  Anderson Cabral
				 *@since 18/03/2013
				 * ***/
				//Inserir as Quadras na tabela Roteiro_quadra_atlz_cad
				Integer[] idsQuadras = helper.getQuadrasSelecionadas();
				
				if(idsQuadras != null){
					for(Integer id : idsQuadras){
						RoteiroQuadraAtlzCad roteiroQuadraAtlzCad = new RoteiroQuadraAtlzCad();
						roteiroQuadraAtlzCad.setNumeroQuadra(id);
						roteiroQuadraAtlzCad.setParametroTabelaAtualizacaoCadastro(parametro);
						roteiroQuadraAtlzCad.setUltimaAlteracao(new Date());
						
						getControladorUtil().inserir(roteiroQuadraAtlzCad);
					}
				}
			}
			
			if(!Util.isVazioOrNulo(colecaoImoveis)){
				
				//Gerar Tabelas Temporárias
				this.gerarTabelasTemporarias(colecaoImoveis, helper.getEmpresa(), parametro);
			
				Collection<Integer> colecaoIdImoveis = new ArrayList<Integer>();
				
				Iterator iteratorImovel = colecaoImoveis.iterator();
				while(iteratorImovel.hasNext()){
					String auxiliar = (String) iteratorImovel.next();
					
					StringTokenizer stk = new StringTokenizer(auxiliar, "/");
					List<String> colArquivos = new ArrayList<String>();
					
					while(stk.hasMoreTokens()){
						colArquivos.add(stk.nextToken());
					}
					
					Integer idImovel = Integer.parseInt(colArquivos.get(0));
					colecaoIdImoveis.add(idImovel);
				}
							
				//Data Atual
				Integer diaAtual = Util.getDiaMes(new Date());
				String  anoMesAtual = Util.getAnoMesComoString(new Date());
				
				//Descrição do Arquivo de Atualização Cadastral
				String descricaoArquivo = String.valueOf(idParametro) + anoMesAtual + String.valueOf(diaAtual) + ".txt";
				
				//ID Leiturista
				Integer idLeiturista = helper.getLeiturista().getId();
				
				//Gerar Arquivo Texto
				StringBuilder retorno = new StringBuilder("");
				
				//Registro Tipo 19 - Sistema Parâmetro
				retorno.append(this.gerarRegistroTipo19AC(idLeiturista, parametro.getLocalidadeInicial().getId(), parametro.getCodigoSetorComercialInicial(), 
						idParametro, colecaoImoveis.size(), descricaoArquivo, helper.getEmpresa().getId()));
				
				//Registro Tipo 1 - Bairro | Tipo 2 cep | tipo 3 Logradouro |tipo 4 Logradouro bairro |
				//tipo 5 Logradouro cep | 
				retorno.append(this.gerarRegistroTipo1AC(colecaoIdImoveis, parametro.getLocalidadeInicial().getId(), parametro.getCodigoSetorComercialInicial()));
				
				//Registro Tipo 28 - Imovel perfil
				retorno.append(this.gerarRegistroTipo28AC());
				
				//Registro Tipo 29 - Quadra
				retorno.append(this.gerarRegistroTipo29AC(parametro.getLocalidadeInicial().getId(), parametro.getCodigoSetorComercialInicial(), colecaoSetores));
				
				//Registro Tipo 30 - Cadastro Ocorrencia
				retorno.append(this.gerarRegistroTipo30AC());
				
				//Registro Tipo 31 - Unidade Federecao
				retorno.append(this.gerarRegistroTipo31AC());
				
				//Registro Tipo 32 - Hidrometro Marca
				retorno.append(this.gerarRegistroTipo32AC());
				
				//Registro Tipo 33 - Hidrometro Capacidade
				retorno.append(this.gerarRegistroTipo33AC());
				
				//Registro Tipo 34 - Cliente Tipo
				retorno.append(this.gerarRegistroTipo34AC());
				
				//Registro Tipo 35 - Medicao Tipo
				retorno.append(this.gerarRegistroTipo35AC());
				
				//Registro Tipo 6 - Pavimento Rua
				retorno.append(this.gerarRegistroTipo6AC());
				
				//Registro Tipo 5 - Pavimento Calçada
				retorno.append(this.gerarRegistroTipo7AC());
				
				//Registro Tipo 8 - Fonte Abastecimento
				retorno.append(this.gerarRegistroTipo8AC());
				
				//Registro Tipo 9 - Categoria
				retorno.append(this.gerarRegistroTipo9AC());
				
				//Registro Tipo 10 - SubCategoria
				retorno.append(this.gerarRegistroTipo10AC());
				
				//Registro Tipo 11 - Ligação Água Situação
				retorno.append(this.gerarRegistroTipo11AC());
				
				//Registro Tipo 12 - Ligação Esgoto Situação
				retorno.append(this.gerarRegistroTipo12AC());
				
				//Registro Tipo 13 - Hidrômetro Local Instalação
				retorno.append(this.gerarRegistroTipo13AC());
				
				//Registro Tipo 14 - Hidrômetro Proteção
				retorno.append(this.gerarRegistroTipo14AC());
				
				//Registro Tipo 15 - Orgão Expedidor RG
				retorno.append(this.gerarRegistroTipo15AC());
				
				//Registro Tipo 16 - Endereço Referência
				retorno.append(this.gerarRegistroTipo16AC());
				
				//Registro Tipo 15 - Pessoa Sexo
				retorno.append(this.gerarRegistroTipo17AC());
				
				//Registro Tipo 18 - Fone Tipo
				retorno.append(this.gerarRegistroTipo18AC());
				
				//Registro Tipo 20 - Imovel Atualização Cadastral
				retorno.append(this.gerarRegistroTipo20AC(idParametro));
				
				//Registro Tipo 36 - Setor Comercial
				if(Util.isVazioOrNulo(colecaoSetores) && parametro.getCodigoSetorComercialInicial() != null){
					colecaoSetores.add(parametro.getCodigoSetorComercialInicial());
				}
				retorno.append(this.gerarRegistroTipo36AC(colecaoSetores, parametro.getLocalidadeInicial().getId()));
				
				
				
				//Ultimo registro a ser enviado, indicador informando que o arquivo foi carregado com sucesso.
				StringBuilder ultimoRegistro = new StringBuilder();
				ultimoRegistro.append("37|");
				ultimoRegistro.append("1");
				ultimoRegistro.append("\n");			
				
				//adiciona o ultimo registro ao arquivo
				retorno.append(ultimoRegistro);
				
				
				//Situação do Arquivo - Disponível
				SituacaoTransmissaoLeitura situacaoTransmissaoLeitura = new SituacaoTransmissaoLeitura(SituacaoTransmissaoLeitura.DISPONIVEL);
				
				//Montar Dados da Atualização Cadastral Arquivo Texto
				AtualizacaoCadastralArquivoTexto atualizacaoCadastralArquivoTexto = new AtualizacaoCadastralArquivoTexto();
				atualizacaoCadastralArquivoTexto.setArquivoTexto(retorno.toString().getBytes());
				atualizacaoCadastralArquivoTexto.setDescricaoArquivo(descricaoArquivo);
				atualizacaoCadastralArquivoTexto.setQuantidadeImovel(colecaoImoveis.size());
				atualizacaoCadastralArquivoTexto.setDataArquivoLiberado(null);
				atualizacaoCadastralArquivoTexto.setParametroTabelaAtualizacaoCadastro(parametro);
				atualizacaoCadastralArquivoTexto.setSituacaoTransmissaoLeitura(situacaoTransmissaoLeitura);
				atualizacaoCadastralArquivoTexto.setLeiturista(helper.getLeiturista());
				atualizacaoCadastralArquivoTexto.setUltimaAlteracao(new Date());
				
				//Inserir a Atualização Cadastral Arquivo Texto
				getControladorUtil().inserir(atualizacaoCadastralArquivoTexto);
			
			}
			
			getControladorBatch().encerrarUnidadeProcessamentoBatch(null,
					idUnidadeIniciada, false);
			
			System.out.println("******* FIM GERAR ROTEIRO DISPOSITIVO MOVEL ATUALIZAÇÃO CADASTRAL **********");
		
		}catch (Exception e) {
			e.printStackTrace();
			getControladorBatch().encerrarUnidadeProcessamentoBatch(e,
					idUnidadeIniciada, true);
			throw new EJBException(e);
		}
	}

	
	/**
	 * [UC 1391] - Gerar Roteiro Dispositivo Móvel
	 * 
	 * @author Davi Menezes
	 * @throws ErroRepositorioException 
	 * @date 21/11/2012
	 */
	private void gerarTabelasTemporarias(Collection colecaoIdsImovel, 
			Empresa empresa, ParametroTabelaAtualizacaoCadastro parametro) throws ControladorException, ErroRepositorioException{
		
		if(!Util.isVazioOrNulo(colecaoIdsImovel)){
			ClienteAtualizacaoCadastral clienteAtualizacaoCadastralProprietario = null;
			ClienteAtualizacaoCadastral clienteAtualizacaoCadastralUsuario = null;
			
			Iterator iteratorImovel = colecaoIdsImovel.iterator();
			while(iteratorImovel.hasNext()){
				String auxiliar = (String) iteratorImovel.next();
				
				StringTokenizer stk = new StringTokenizer(auxiliar, "/");
				List<String> colArquivos = new ArrayList<String>();
				
				while(stk.hasMoreTokens()){
					colArquivos.add(stk.nextToken());
				}
				
				Integer idImovel = Integer.parseInt(colArquivos.get(0));
				Integer indicadorResetorizacao = Integer.parseInt(colArquivos.get(1));
				
				System.out.println("Imóvel: " + idImovel);
				
				ImovelAtualizacaoCadastral imovelAtualizacaoCadastral = null;
				Integer idImovelAtuCadastral = null;
				
				//[UC1261][SB0003]-Incluir Imoveis na Tabela Temporaria
				//1.1. Caso o imóvel seja retornado para campo (exista registro na tabela CADASTRO.IMOVEL_ATLZ_CADASTRAL 
				//com IMOV_ID = id do imóvel selecionado e IMAC_ICDADOSRETORNO = 1 e IMAC_CDSITUACAO = 2) 
				//pesquisar os dados a partir da tabela CADASTRO.IMOVEL_ATLZ_CADASTRAL, 
				//caso exista mais de um registro na tabela, seleciona o registro com maior IMAC_ID.
				FiltroImovelAtualizacaoCadastral filtroImovelAtualizacaoCadastral = new FiltroImovelAtualizacaoCadastral();
				filtroImovelAtualizacaoCadastral.adicionarParametro(new ParametroSimples(FiltroImovelAtualizacaoCadastral.IMOVEL, idImovel));
				filtroImovelAtualizacaoCadastral.adicionarParametro(new ParametroSimples(FiltroImovelAtualizacaoCadastral.INDICADOR_DADOS_RETORNO, ConstantesSistema.SIM));
				filtroImovelAtualizacaoCadastral.adicionarParametro(new ParametroSimples(FiltroImovelAtualizacaoCadastral.CODIGO_SITUACAO, ConstantesSistema.NAO));
				filtroImovelAtualizacaoCadastral.setCampoOrderBy(FiltroImovelAtualizacaoCadastral.ID);
				
				Collection<ImovelAtualizacaoCadastral> colecaoimovelAtuCadastral = (Collection<ImovelAtualizacaoCadastral>) getControladorUtil().pesquisar(filtroImovelAtualizacaoCadastral, ImovelAtualizacaoCadastral.class.getName());
				
				if(colecaoimovelAtuCadastral != null && !colecaoimovelAtuCadastral.isEmpty()){
					LinkedList<ImovelAtualizacaoCadastral> listaImovelAtuCadastral = new LinkedList<ImovelAtualizacaoCadastral>(colecaoimovelAtuCadastral);
					imovelAtualizacaoCadastral = listaImovelAtuCadastral.getLast();
				}
				
				if(imovelAtualizacaoCadastral != null && 
						imovelAtualizacaoCadastral.getId() != null 
						&& imovelAtualizacaoCadastral.getId().intValue() != 0){
					idImovelAtuCadastral = imovelAtualizacaoCadastral.getId();
					
					imovelAtualizacaoCadastral.setId(null);
					imovelAtualizacaoCadastral.setIndicadorExclusao(ConstantesSistema.NAO);
					imovelAtualizacaoCadastral.setIndicadorPendente(ConstantesSistema.NAO);
					imovelAtualizacaoCadastral.setIndicadorDadosRetorno(ConstantesSistema.NAO);
					imovelAtualizacaoCadastral.setCodigo(null);
					imovelAtualizacaoCadastral.setCodigoSituacao(null);
					imovelAtualizacaoCadastral.setLogin(null);
					imovelAtualizacaoCadastral.setDataVisita(null);
					imovelAtualizacaoCadastral.setDataRecebimentoMovimento(null);
					imovelAtualizacaoCadastral.setUltimaAlteracao(new Date());
					
				}else{			
					//1.2. Caso contrario para cada imóvel selecionado incluir  
					//nas tabelas relacionadas com o imóvel  os dados a partir da tabela cadastro.imovel
					imovelAtualizacaoCadastral = this.obterImovelGeracaoTabelasTemporarias(idImovel, indicadorResetorizacao);
				}
				
				// Imovel Atualização Cadastral
				if (imovelAtualizacaoCadastral.getImovel() != null) {
					
					if ( parametro != null ) {
						imovelAtualizacaoCadastral.setParametroTabelaAtualizacaoCadastro(parametro);
					}

					if (!imovelJaExisteImovelAtualizacaoCadastral(imovelAtualizacaoCadastral.getImovel(), 
							imovelAtualizacaoCadastral.getParametroTabelaAtualizacaoCadastro().getId())) {
						
						imovelAtualizacaoCadastral
								.setIdSituacaoAtualizacaoCadastral(SituacaoAtualizacaoCadastral.DISPONIVEL);
						
						if(empresa != null){
							imovelAtualizacaoCadastral.setIdEmpresa(empresa.getId());
						}
						
						imovelAtualizacaoCadastral.setIndicadorAtualizado(ConstantesSistema.NAO);
						imovelAtualizacaoCadastral.setParametroTabelaAtualizacaoCadastro(parametro);
						
						Integer idImovelAtualizacaoCadastral = 
								(Integer) getControladorUtil().inserir(imovelAtualizacaoCadastral);
						
						imovelAtualizacaoCadastral.setId(idImovelAtualizacaoCadastral);
						
						// Imovel Subcategoria
						Collection imovelSubcategorias = null;
						//Caso o imovel seja retornado para campo pesquisar os dados a partir 
						//da tabela CADASTRO.IMOVEL_SUBCATG_ATLZ_CAD com IMAC_ID = id do imovel atualização cadastral.
						if(idImovelAtuCadastral != null){
							imovelSubcategorias = this.pesquisarSubCategoriaAtualizacaoCadastral(idImovelAtuCadastral);
						}else{
							imovelSubcategorias = obterImovelSubcategoriaAtualizacaoCadastral(idImovel);
						}
						
						Iterator imovelSubcategoriaIter = imovelSubcategorias.iterator();
						
						while (imovelSubcategoriaIter.hasNext()) {
							ImovelSubcategoriaAtualizacaoCadastral imovSubAtual = 
									(ImovelSubcategoriaAtualizacaoCadastral) imovelSubcategoriaIter.next();
							
							imovSubAtual.setId(null);
							imovSubAtual.setUltimaAlteracao(new Date());
							imovSubAtual.setImovelAtualizacaoCadastral(imovelAtualizacaoCadastral);
							
							getControladorUtil().inserir(imovSubAtual);
						}

						// Cliente Usuario
						//Caso o imoovel seja retornado para campo pesquisar os dados a partir 
						//da tabela CADASTRO.CLIENTE_ATLZ_CADASTRAL com IMAC_ID = id do imovel atualização cadastral.
						if(idImovelAtuCadastral != null){
							Collection<ClienteAtualizacaoCadastral> colecaoCliente = repositorioCadastro.pesquisarClienteAtualizacaoCadastralClienteUsuario(idImovelAtuCadastral);
							clienteAtualizacaoCadastralUsuario = (ClienteAtualizacaoCadastral) Util.retonarObjetoDeColecao(colecaoCliente);
						}else{
							clienteAtualizacaoCadastralUsuario = 
								getControladorCliente().obterClientetuAlizacaoCadastral(idImovel, 
									ClienteRelacaoTipo.USUARIO);
						}
						
						if (clienteAtualizacaoCadastralUsuario != null) {
							Integer idAntigoClienteAtualizacaoCadastral = clienteAtualizacaoCadastralUsuario.getId();
							
							clienteAtualizacaoCadastralUsuario.setId(null);
							clienteAtualizacaoCadastralUsuario.setParametroTabelaAtualizacaoCadastro(parametro);
							clienteAtualizacaoCadastralUsuario.setImovelAtualizacaoCadastral(imovelAtualizacaoCadastral);
							clienteAtualizacaoCadastralUsuario.setUltimaAlteracao(new Date());
							
							Integer idClienteAtualizacaoCadastral = 
								(Integer) getControladorUtil().inserir(clienteAtualizacaoCadastralUsuario);

							// Cliente Fone Usuario
							// Caso o imovel seja retornado para campo pesquisar os dados a partir da tabela 
							//CADASTRO.CLIENTE_FONE_ATLZ_CAD com CLAC_ID = id do cliente atualizacao Cadastral 
							Collection clienteFonesAtualizacaoCadastral = null;
							if(idAntigoClienteAtualizacaoCadastral != null){
								clienteFonesAtualizacaoCadastral = getControladorCliente().obterDadosClienteFoneAtualizacaoCadastral(idAntigoClienteAtualizacaoCadastral);
							}else{
								clienteFonesAtualizacaoCadastral = 
									getControladorCliente().obterDadosClienteFone(clienteAtualizacaoCadastralUsuario.getIdCliente());
							}
							
							if (clienteFonesAtualizacaoCadastral != null && !clienteFonesAtualizacaoCadastral.isEmpty()) {
								
								Iterator clienteFonesAtualizacaoCadastralIter = clienteFonesAtualizacaoCadastral.iterator();
								
								while (clienteFonesAtualizacaoCadastralIter.hasNext()) {
									
									ClienteFoneAtualizacaoCadastral clienteFoneAtualizacaoCadastral = 
										(ClienteFoneAtualizacaoCadastral) clienteFonesAtualizacaoCadastralIter.next();
									
									ClienteAtualizacaoCadastral clienteAtualizacaoCadastral = new ClienteAtualizacaoCadastral();
									clienteAtualizacaoCadastral.setId(idClienteAtualizacaoCadastral);
									
									clienteFoneAtualizacaoCadastral.setId(null);
									clienteFoneAtualizacaoCadastral.setClienteAtualizacaoCadastral(clienteAtualizacaoCadastral);
									clienteFoneAtualizacaoCadastral.setUltimaAlteracao(new Date());
									getControladorUtil().inserir(clienteFoneAtualizacaoCadastral);
								}
							}
						}
						
//						// Cliente Proprietario
//						clienteAtualizacaoCadastralProprietario = 
//							getControladorCliente().obterClientetuAlizacaoCadastral(
//								idImovel, 
//								ClienteRelacaoTipo.PROPRIETARIO);
//
//						if (clienteAtualizacaoCadastralProprietario != null) {
//
//							clienteAtualizacaoCadastralProprietario.setParametroTabelaAtualizacaoCadastro(parametro);
//							clienteAtualizacaoCadastralProprietario.setImovelAtualizacaoCadastral(imovelAtualizacaoCadastral);
//							clienteAtualizacaoCadastralProprietario.setUltimaAlteracao(new Date());
//							
//							Integer idClienteAtualizacaoCadastral = 
//								(Integer) getControladorUtil().inserir(clienteAtualizacaoCadastralProprietario);
//
//							// Cliente Fone Proprietario
//							Collection clienteFonesAtualizacaoCadastral = 
//								getControladorCliente().obterDadosClienteFone(
//									clienteAtualizacaoCadastralProprietario.getIdCliente());
//							
//							if (clienteFonesAtualizacaoCadastral != null && !clienteFonesAtualizacaoCadastral.isEmpty()) {
//								
//								Iterator clienteFonesAtualizacaoCadastralIter = clienteFonesAtualizacaoCadastral.iterator();
//								
//								while (clienteFonesAtualizacaoCadastralIter.hasNext()) {
//									
//									ClienteFoneAtualizacaoCadastral clienteFoneAtualizacaoCadastral = 
//										(ClienteFoneAtualizacaoCadastral) clienteFonesAtualizacaoCadastralIter.next();
//									
//									ClienteAtualizacaoCadastral clienteAtualizacaoCadastral = new ClienteAtualizacaoCadastral();
//									clienteAtualizacaoCadastral.setId(idClienteAtualizacaoCadastral);
//									clienteFoneAtualizacaoCadastral.setClienteAtualizacaoCadastral(clienteAtualizacaoCadastral);
//									clienteFoneAtualizacaoCadastral.setUltimaAlteracao(new Date());
//									
//									getControladorUtil().inserir(clienteFoneAtualizacaoCadastral);
//								}
//							}
//						}

						try {
							
							//Hidrometro Instalacao Historico
							//Caso o imovel seja retornado para campo pesquisar os dados a partir da tabela 
							//MICROMEDICAO.HIDROM_INST_HIST_ATL_CAD com IMAC_ID = id do imovel atualizacao cadastral
							Collection colecaoDadosHidrometro = null;
							if(idImovelAtuCadastral != null){
								colecaoDadosHidrometro = repositorioCadastro.pesquisarHidrometroInstalacaoHistoricoAtualizacaoCadastral(idImovelAtualizacaoCadastral, null);
							
								if (colecaoDadosHidrometro != null && !colecaoDadosHidrometro.isEmpty() )  {
									
									Iterator iteratorDadosHidrometro = colecaoDadosHidrometro.iterator();
									while (iteratorDadosHidrometro.hasNext()) {
										HidrometroInstalacaoHistoricoAtualizacaoCadastral hidrometroAtualizacaoCadastral = (HidrometroInstalacaoHistoricoAtualizacaoCadastral) iteratorDadosHidrometro.next();
										hidrometroAtualizacaoCadastral.setId(null);
										hidrometroAtualizacaoCadastral.setImovelAtualizacaoCadastral(imovelAtualizacaoCadastral);
										hidrometroAtualizacaoCadastral.setUltimaAlteracao(new Date());
												
										getControladorUtil().inserir(hidrometroAtualizacaoCadastral);
									}
								}
							
							}else{
								colecaoDadosHidrometro = repositorioCadastro.obterDadosHidrometroInstalacaoHistorico(idImovel);
							
								if (colecaoDadosHidrometro != null && !colecaoDadosHidrometro.isEmpty() )  {
									
									Iterator iteratorDadosHidrometro = colecaoDadosHidrometro.iterator();
									while (iteratorDadosHidrometro.hasNext()) {
	
										Object[] element = (Object[]) iteratorDadosHidrometro.next();
										
										HidrometroInstalacaoHistoricoAtualizacaoCadastral hidrometroAtualizacaoCadastral = new HidrometroInstalacaoHistoricoAtualizacaoCadastral();
										
										//numero do hidrometro
										if ( element[0] != null  ) {
											hidrometroAtualizacaoCadastral.setNumeroHidrometro((String) element[0]);
										}
										
										//Data de instalacao hidrometro
										if ( element[1] != null  ) {
											hidrometroAtualizacaoCadastral.setDataInstalacaoHidrometro((Date) element[1]);
										}
										
										//Medicao Tipo
										if ( element[2] != null  ) {
											MedicaoTipo medicaoTipo = new MedicaoTipo();
											medicaoTipo.setId((Integer) element[2]);
											
											hidrometroAtualizacaoCadastral.setMedicaoTipo(medicaoTipo);
										}
										
										//Hidrometro Local instalacao
										if ( element[3] != null  ) {
											HidrometroLocalInstalacao hidrometroLocalInstalacao = new HidrometroLocalInstalacao();
											hidrometroLocalInstalacao.setId((Integer) element[3]);
											
											hidrometroAtualizacaoCadastral.setHidrometroLocalInstalacao(hidrometroLocalInstalacao);
										}
										
										//Hidrometro Protecao
										if ( element[4] != null  ) {
											HidrometroProtecao hidrometroProtecao = new HidrometroProtecao();
											hidrometroProtecao.setId((Integer) element[4]);
											
											hidrometroAtualizacaoCadastral.setHidrometroProtecao(hidrometroProtecao);
										}
										
										//Leitura hidrometro
										if ( element[5] != null  ) {
											hidrometroAtualizacaoCadastral.setNumeroInstalacaoHidrometro((Integer) element[5]);
										}
										
										//hidrometro cavalete
										if ( element[6] != null  ) {
											hidrometroAtualizacaoCadastral.setIndicadorCavalete((Short) element[6]);
										}
										
										//Imovel atualizacao cadastral
										hidrometroAtualizacaoCadastral.setImovelAtualizacaoCadastral(imovelAtualizacaoCadastral);
										
										//Ultima Alteracao
										hidrometroAtualizacaoCadastral.setUltimaAlteracao(new Date());
										
										getControladorUtil().inserir(hidrometroAtualizacaoCadastral);
									}
								}
							}
							
						} catch (ErroRepositorioException e) {
							e.printStackTrace();
						}
						
						// Atualizar Situacao Atualizacao Cadastral
						getControladorImovel().atualizarImovelSituacaoAtualizacaoCadastral(
							idImovel, 
							SituacaoAtualizacaoCadastral.BLOQUEADO);

						Integer idEmpresa = null;
						if (empresa != null) {
							idEmpresa = empresa.getId();
						}

						getControladorImovel().atualizarImovelAtualizacaoCadastralSituacaoAtualizacaoCadastral(
							idImovel,
							SituacaoAtualizacaoCadastral.DISPONIVEL,
							idEmpresa,
							parametro.getId());
					}
				}
			}
		}
	}
	
	/**
	 * Pesquisar Registro Tipo 1 - Bairros
	 * 
	 * @author Davi Menezes
	 * @date 21/11/2012
	 */
	private String gerarRegistroTipo1AC(Collection<Integer> colecaoImoveis, Integer idLocalidade, Integer setorComercial) throws ControladorException{
		try{
			StringBuilder retorno = new StringBuilder();
			
			Collection colecaoBairros = repositorioCadastro.pesquisarBairrosImovel(idLocalidade);
			
			if(!Util.isVazioOrNulo(colecaoBairros)){
				Object[] array = null;

				Iterator<?> it = colecaoBairros.iterator();
				while(it.hasNext()){
					array = (Object[]) it.next();
					
					retorno.append("01|");
					retorno.append(Util.formatarCampoParaConcatenacao(array[0].toString()));
					retorno.append(Util.formatarCampoParaConcatenacao(array[1].toString()));
					retorno.append(Util.formatarCampoParaConcatenacao(array[2]));
					retorno.append("\n");
				}
				
				//Seleciona apenas os bairros dos imoveis
				Set<Integer> colecaoBairrosImoveis = new HashSet<Integer>();
				for(Integer matricula : colecaoImoveis){
					Imovel imovel = repositorioImovel.pesquisarImovelGerarRoteiro(matricula);
					colecaoBairrosImoveis.add(imovel.getLogradouroBairro().getBairro().getId());
				}
				
				//Retorno Tipo 25 - Logradouro Tipo
				retorno.append(this.gerarRegistroTipo25AC());
				
				//Retorno Tipo 26 - Logradouro Titulo 
				retorno.append(this.gerarRegistroTipo26AC());

				Municipio municipio = null;
				if(setorComercial != null){
					FiltroSetorComercial filtroSetorComercial = new FiltroSetorComercial();
					filtroSetorComercial.adicionarParametro( new ParametroSimples(FiltroSetorComercial.LOCALIDADE_ID, idLocalidade));
					filtroSetorComercial.adicionarParametro( new ParametroSimples(FiltroSetorComercial.CODIGO_SETOR_COMERCIAL, setorComercial));
					filtroSetorComercial.adicionarCaminhoParaCarregamentoEntidade(FiltroSetorComercial.MUNICIPIO);
					
					Collection<SetorComercial> colecaoSetorComercial = getControladorUtil().pesquisar(filtroSetorComercial, SetorComercial.class.getName());
				
					municipio = (Municipio) ((SetorComercial) Util.retonarObjetoDeColecao(colecaoSetorComercial)).getMunicipio();
				}else{
					FiltroLocalidade filtroLocalidade = new FiltroLocalidade();
					filtroLocalidade.adicionarParametro(new ParametroSimples(FiltroLocalidade.ID, idLocalidade));
					filtroLocalidade.adicionarCaminhoParaCarregamentoEntidade(FiltroLocalidade.MUNICIPIO);
					
					Collection<Localidade> colecaoLocalidade = getControladorUtil().pesquisar(filtroLocalidade, Localidade.class.getName());
					
					Localidade localidade = (Localidade) Util.retonarObjetoDeColecao(colecaoLocalidade);
					
					municipio = localidade.getMunicipio();
				}
				
				Cep cep = null;
				Short indicadorCepUnico = ConstantesSistema.NAO;
				if(municipio != null){

					if (!getControladorGeografico().verificarMunicipioComCepPorLogradouro(municipio)){
		              	
		              	cep = getControladorEndereco().obterCepUnicoMunicipio(municipio);
		              	indicadorCepUnico = ConstantesSistema.SIM;
		              	
		              	retorno.append("02|");
						retorno.append(Util.formatarCampoParaConcatenacao(cep.getCepId().toString()));
						retorno.append(Util.formatarCampoParaConcatenacao(cep.getCodigo().toString()));
						retorno.append("\n");
					} else {
						//Registro Tipo 2 - Cep
						retorno.append(this.gerarRegistroTipo2AC(colecaoBairrosImoveis));
					}
					
					//Municipio
					retorno.append("27|");
					retorno.append(Util.formatarCampoParaConcatenacao(municipio.getId().toString()));
					retorno.append(Util.formatarCampoParaConcatenacao(municipio.getNome()));
					retorno.append(Util.formatarCampoParaConcatenacao(indicadorCepUnico.toString()));
					retorno.append("\n");
				}
				
				
				//Registro Tipo 3 - Logradouro
				retorno.append(this.gerarRegistroTipo3AC(colecaoBairrosImoveis));
				
				//Registro Tipo 4 - Logradouro Bairro
				retorno.append(this.gerarRegistroTipo4AC(colecaoBairrosImoveis));
				
				//Registro Tipo 5 - Logradouro Cep
				if ( indicadorCepUnico.equals(ConstantesSistema.NAO) ) {
					retorno.append(this.gerarRegistroTipo5AC(colecaoBairrosImoveis));
				} else {
					
					FiltroLogradouroCep filtroLogradouroCep = new FiltroLogradouroCep();
					filtroLogradouroCep.adicionarParametro( new ParametroSimples(FiltroLogradouroCep.ID_CEP, cep.getCepId()));
					filtroLogradouroCep.adicionarCaminhoParaCarregamentoEntidade(FiltroLogradouroCep.LOGRADOURO);
					filtroLogradouroCep.adicionarCaminhoParaCarregamentoEntidade(FiltroLogradouroCep.CEP);
					
					Collection<LogradouroCep> colecaoLogradouroCep = getControladorUtil().pesquisar(filtroLogradouroCep, LogradouroCep.class.getName());
					
					Iterator iteratorLogradouroCep = colecaoLogradouroCep.iterator();
					while ( iteratorLogradouroCep.hasNext() ) {
						
						LogradouroCep logradouroCep = (LogradouroCep) iteratorLogradouroCep.next();
						
						retorno.append("05|");
						retorno.append(Util.formatarCampoParaConcatenacao(logradouroCep.getId().toString()));
						retorno.append(Util.formatarCampoParaConcatenacao(logradouroCep.getCep().getCepId()).toString());
						retorno.append(Util.formatarCampoParaConcatenacao(logradouroCep.getLogradouro().getId()).toString());
						retorno.append("\n");
					}
				}
				
			}
			
			return retorno.toString();
		}catch(ErroRepositorioException e){
			throw new ControladorException("erro.sistema", e);
		}
	}
	
	/**
	 * Pesquisar Registro Tipo 2 - Cep
	 * 
	 * @author Davi Menezes
	 * @date 21/11/2012
	 * 
	 */
	private String gerarRegistroTipo2AC(Collection<Integer> colecaoBairros) throws ControladorException{
		try{
			StringBuilder retorno = new StringBuilder();
			
			Collection colecaoCep = repositorioCadastro.pesquisarCepBairros(colecaoBairros);
			
			if(!Util.isVazioOrNulo(colecaoCep)){
				Object[] array = null;
				
				Iterator<?> it = colecaoCep.iterator();
				while(it.hasNext()){
					array = (Object []) it.next();
					
					retorno.append("02|");
					retorno.append(Util.formatarCampoParaConcatenacao(array[0].toString()));
					retorno.append(Util.formatarCampoParaConcatenacao(array[1].toString()));
					retorno.append("\n");
				}
			}
			
			return retorno.toString();
		}catch(ErroRepositorioException e){
			throw new ControladorException("erro.sistema", e);
		}
	}
	
	/**
	 * Pesquisar Registro Tipo 3- Logradouros
	 * 
	 * @author Davi Menezes
	 * @date 21/11/2012
	 * 
	 */
	private String gerarRegistroTipo3AC(Collection<Integer> colecaoBairros) throws ControladorException {
		try{
			StringBuilder retorno = new StringBuilder();
			
			Collection colecaoLogradouros = repositorioCadastro.pesquisarLogradouro(colecaoBairros);
			
			if(!Util.isVazioOrNulo(colecaoLogradouros)){
				Object[] array = null;
				
				Iterator<?> it = colecaoLogradouros.iterator();
				while(it.hasNext()){
					array = (Object []) it.next();
					
					retorno.append("03|");
					retorno.append(Util.formatarCampoParaConcatenacao(array[0].toString()));
					retorno.append(Util.formatarCampoParaConcatenacao(array[1]));
					retorno.append(Util.formatarCampoParaConcatenacao(array[2]));
					retorno.append(Util.formatarCampoParaConcatenacao(array[3]));
					retorno.append(Util.formatarCampoParaConcatenacao(array[4].toString()));
					retorno.append(Util.formatarCampoParaConcatenacao(array[5].toString()));
					retorno.append(Util.formatarCampoParaConcatenacao(array[6]));
					retorno.append("\n");
				}
			}
			
			return retorno.toString();
		}catch(ErroRepositorioException e){
			throw new ControladorException("erro.sistema", e);
		}
	}
	
	/**
	 * Pesquisar Registro Tipo 4- Logradouro Bairro
	 * 
	 * @author Arthur Carvalho
	 * @date 21/11/2012
	 * 
	 */
	private String gerarRegistroTipo4AC(Collection<Integer> colecaoBairros) throws ControladorException {
		try{
			StringBuilder retorno = new StringBuilder();
			
			Collection colecaoLogradouros = repositorioCadastro.pesquisarLogradouroBairros(colecaoBairros);
			
			if(!Util.isVazioOrNulo(colecaoLogradouros)){
				Object[] array = null;
				
				Iterator<?> it = colecaoLogradouros.iterator();
				while(it.hasNext()){
					array = (Object []) it.next();
					
					retorno.append("04|");
					retorno.append(Util.formatarCampoParaConcatenacao(array[0].toString()));
					retorno.append(Util.formatarCampoParaConcatenacao(array[1]).toString());
					retorno.append(Util.formatarCampoParaConcatenacao(array[2]).toString());
					retorno.append("\n");
				}
			}
			
			return retorno.toString();
		}catch(ErroRepositorioException e){
			throw new ControladorException("erro.sistema", e);
		}
	}
	
	/**
	 * Pesquisar Registro Tipo 5- Logradouro Cep
	 * 
	 * @author Arthur Carvalho
	 * @date 21/11/2012
	 * 
	 */
	private String gerarRegistroTipo5AC(Collection<Integer> colecaoBairros) throws ControladorException {
		try{
			StringBuilder retorno = new StringBuilder();
			
			Collection colecaoLogradouros = repositorioCadastro.pesquisarLogradouroCepBairros(colecaoBairros);
			
			if(!Util.isVazioOrNulo(colecaoLogradouros)){
				Object[] array = null;
				
				Iterator<?> it = colecaoLogradouros.iterator();
				while(it.hasNext()){
					array = (Object []) it.next();
					
					retorno.append("05|");
					retorno.append(Util.formatarCampoParaConcatenacao(array[0].toString()));
					retorno.append(Util.formatarCampoParaConcatenacao(array[1]).toString());
					retorno.append(Util.formatarCampoParaConcatenacao(array[2]).toString());
					retorno.append("\n");
				}
			}
			
			return retorno.toString();
		}catch(ErroRepositorioException e){
			throw new ControladorException("erro.sistema", e);
		}
	}
	
	
	/**
	 * Pesquisar Registro Tipo 6 - Pavimento Rua
	 * 
	 * @author Davi Menezes
	 * @date 22/11/2012
	 */
	private String gerarRegistroTipo6AC() throws ControladorException {
		StringBuilder retorno = new StringBuilder();
		
		FiltroPavimentoRua filtroPavimentoRua = new FiltroPavimentoRua(FiltroPavimentoRua.ID);
		filtroPavimentoRua.adicionarParametro(new ParametroSimples(
				FiltroPavimentoRua.INDICADOR_USO, ConstantesSistema.INDICADOR_USO_ATIVO));
		
		Collection<?> colPavimentoRua = getControladorUtil().pesquisar(
				filtroPavimentoRua, PavimentoRua.class.getName());
		if(!Util.isVazioOrNulo(colPavimentoRua)){
			PavimentoRua pavimentoRua = null;
			
			Iterator<?> it = colPavimentoRua.iterator();
			while(it.hasNext()){
				pavimentoRua = (PavimentoRua) it.next();
				
				retorno.append("06|");
				retorno.append(Util.formatarCampoParaConcatenacao(pavimentoRua.getId().toString()));
				retorno.append(Util.formatarCampoParaConcatenacao(pavimentoRua.getDescricao()));
				retorno.append("\n");
			}
		}
		
		return retorno.toString();
	}
	
	/**
	 * Pesquisar Registro Tipo 7 - Pavimento Calçada
	 * 
	 * @author Davi Menezes
	 * @date 22/11/2012
	 */
	private String gerarRegistroTipo7AC() throws ControladorException {
		StringBuilder retorno = new StringBuilder();
		
		FiltroPavimentoCalcada filtroPavimentoCalcada = new FiltroPavimentoCalcada(
				FiltroPavimentoCalcada.ID);
		filtroPavimentoCalcada.adicionarParametro(new ParametroSimples(
				FiltroPavimentoCalcada.INDICADOR_USO, ConstantesSistema.INDICADOR_USO_ATIVO));
		
		Collection<?> colPavimentoCalcada = getControladorUtil().pesquisar(
				filtroPavimentoCalcada, PavimentoCalcada.class.getName());
		if(!Util.isVazioOrNulo(colPavimentoCalcada)){
			PavimentoCalcada pavimentoCalcada = null;
			
			Iterator<?> it = colPavimentoCalcada.iterator();
			while(it.hasNext()){
				pavimentoCalcada = (PavimentoCalcada) it.next();
				
				retorno.append("07|");
				retorno.append(Util.formatarCampoParaConcatenacao(pavimentoCalcada.getId().toString()));
				retorno.append(Util.formatarCampoParaConcatenacao(pavimentoCalcada.getDescricao()));
				retorno.append("\n");
			}
		}
		
		return retorno.toString();
	}
	
	/**
	 * Pesquisar Registro Tipo 8 - Fonte de Abastecimento
	 * 
	 * @author Davi Menezes
	 * @date 22/11/2012
	 */
	private String gerarRegistroTipo8AC() throws ControladorException {
		StringBuilder retorno = new StringBuilder();
		
		FiltroFonteAbastecimento filtroFonteAbastecimento = new FiltroFonteAbastecimento(
				FiltroFonteAbastecimento.ID);
		filtroFonteAbastecimento.adicionarParametro(new ParametroSimples(
				FiltroFonteAbastecimento.INDICADOR_USO, ConstantesSistema.INDICADOR_USO_ATIVO));
		
		Collection<?> colFonteAbastecimento = getControladorUtil().pesquisar(
				filtroFonteAbastecimento, FonteAbastecimento.class.getName());
		if(!Util.isVazioOrNulo(colFonteAbastecimento)){
			FonteAbastecimento fonteAbastecimento = null;
			
			Iterator<?> it = colFonteAbastecimento.iterator();
			while(it.hasNext()){
				fonteAbastecimento = (FonteAbastecimento) it.next();
				
				retorno.append("08|");
				retorno.append(Util.formatarCampoParaConcatenacao(fonteAbastecimento.getId().toString()));
				retorno.append(Util.formatarCampoParaConcatenacao(fonteAbastecimento.getDescricao()));
				retorno.append("\n");
			}
		}
		
		return retorno.toString();
	}
	
	/**
	 * Pesquisar Registro Tipo 9 - Categoria
	 * 
	 * @author Davi Menezes
	 * @date 22/11/2012
	 */
	private String gerarRegistroTipo9AC() throws ControladorException {
		StringBuilder retorno = new StringBuilder();
		
		FiltroCategoria filtroCategoria = new FiltroCategoria(FiltroCategoria.CODIGO);
		filtroCategoria.adicionarParametro(new ParametroSimples(
				FiltroCategoria.INDICADOR_USO, ConstantesSistema.INDICADOR_USO_ATIVO));
		
		Collection<?> colCategoria = getControladorUtil().pesquisar(filtroCategoria, Categoria.class.getName());
		if(!Util.isVazioOrNulo(colCategoria)){
			Categoria categoria = null;
			
			Iterator<?> it = colCategoria.iterator();
			while(it.hasNext()){
				categoria = (Categoria) it.next();
				
				retorno.append("09|");
				retorno.append(Util.formatarCampoParaConcatenacao(categoria.getId().toString()));
				retorno.append(Util.formatarCampoParaConcatenacao(categoria.getDescricao()));
				retorno.append("\n");
			}
		}
		
		return retorno.toString();
	}
	
	/**
	 * Pesquisar Registro Tipo 10 - SubCategoria
	 * 
	 * @author Davi Menezes
	 * @date 22/11/2012
	 */
	private String gerarRegistroTipo10AC() throws ControladorException {
		StringBuilder retorno = new StringBuilder();
		
		FiltroSubCategoria filtroSubCategoria = new FiltroSubCategoria(FiltroSubCategoria.ID);
		filtroSubCategoria.adicionarParametro(new ParametroSimples(
				FiltroSubCategoria.INDICADOR_USO, ConstantesSistema.INDICADOR_USO_ATIVO));
		filtroSubCategoria.adicionarCaminhoParaCarregamentoEntidade(FiltroSubCategoria.CATEGORIA);
		
		Collection<?> colSubCategoria = getControladorUtil().pesquisar(filtroSubCategoria, Subcategoria.class.getName());
		if(!Util.isVazioOrNulo(colSubCategoria)){
			Subcategoria subCategoria = null;
			
			Iterator<?> it = colSubCategoria.iterator();
			while(it.hasNext()){
				subCategoria = (Subcategoria) it.next();
				
				retorno.append("10|");
				retorno.append(Util.formatarCampoParaConcatenacao(subCategoria.getId().toString()));
				retorno.append(Util.formatarCampoParaConcatenacao(subCategoria.getCategoria().getId()));
				retorno.append(Util.formatarCampoParaConcatenacao(subCategoria.getDescricao()));
				retorno.append("\n");
			}
		}
		
		return retorno.toString();
	}
	
	/**
	 * Pesquisar Registro Tipo 11 - Ligação Água Situação
	 * 
	 * @author Davi Menezes
	 * @date 22/11/2012
	 */
	private String gerarRegistroTipo11AC() throws ControladorException {
		StringBuilder retorno = new StringBuilder();
		
		FiltroLigacaoAguaSituacao filtroLigacaoAguaSituacao = new FiltroLigacaoAguaSituacao(
				FiltroLigacaoAguaSituacao.ID);
		filtroLigacaoAguaSituacao.adicionarParametro(new ParametroSimples(
				FiltroLigacaoAguaSituacao.INDICADOR_USO, ConstantesSistema.INDICADOR_USO_ATIVO));
		
		Collection<?> colLigacaoAguaSituacao = getControladorUtil().pesquisar(
				filtroLigacaoAguaSituacao, LigacaoAguaSituacao.class.getName());
		if(!Util.isVazioOrNulo(colLigacaoAguaSituacao)){
			LigacaoAguaSituacao ligacaoAguaSituacao = null;
			
			Iterator<?> it = colLigacaoAguaSituacao.iterator();
			while(it.hasNext()){
				ligacaoAguaSituacao = (LigacaoAguaSituacao) it.next();
				
				retorno.append("11|");
				retorno.append(Util.formatarCampoParaConcatenacao(ligacaoAguaSituacao.getId().toString()));
				retorno.append(Util.formatarCampoParaConcatenacao(ligacaoAguaSituacao.getDescricao()));
				retorno.append("\n");
			}
		}
		
		return retorno.toString();
	}
	
	/**
	 * Pesquisar Registro Tipo 12 - Ligação Esgoto Situação
	 * 
	 * @author Davi Menezes
	 * @date 22/11/2012
	 */
	private String gerarRegistroTipo12AC() throws ControladorException {
		StringBuilder retorno = new StringBuilder();
		
		FiltroLigacaoEsgotoSituacao filtroLigacaoEsgotoSituacao = new FiltroLigacaoEsgotoSituacao(
				FiltroLigacaoEsgotoSituacao.ID);
		filtroLigacaoEsgotoSituacao.adicionarParametro(new ParametroSimples(
				FiltroLigacaoEsgotoSituacao.INDICADOR_USO, ConstantesSistema.INDICADOR_USO_ATIVO));
		
		Collection<?> colLigacaoEsgotoSituacao = getControladorUtil().pesquisar(
				filtroLigacaoEsgotoSituacao, LigacaoEsgotoSituacao.class.getName());
		if(!Util.isVazioOrNulo(colLigacaoEsgotoSituacao)){
			LigacaoEsgotoSituacao ligacaoEsgotoSituacao = null;
			
			Iterator<?> it = colLigacaoEsgotoSituacao.iterator();
			while(it.hasNext()){
				ligacaoEsgotoSituacao = (LigacaoEsgotoSituacao) it.next();
				
				retorno.append("12|");
				retorno.append(Util.formatarCampoParaConcatenacao(ligacaoEsgotoSituacao.getId().toString()));
				retorno.append(Util.formatarCampoParaConcatenacao(ligacaoEsgotoSituacao.getDescricao()));
				retorno.append("\n");
			}
		}
		
		return retorno.toString();
	}
	
	/**
	 * Pesquisar Registro Tipo 13 - Hidrômetro Local Instalação
	 * 
	 * @author Davi Menezes
	 * @date 22/11/2012
	 */
	private String gerarRegistroTipo13AC() throws ControladorException {
		StringBuilder retorno = new StringBuilder();
		
		FiltroHidrometroLocalInstalacao filtroHidrometroLocalInstalacao = new FiltroHidrometroLocalInstalacao(
				FiltroHidrometroLocalInstalacao.ID);
		filtroHidrometroLocalInstalacao.adicionarParametro(new ParametroSimples(
				FiltroHidrometroLocalInstalacao.INDICADOR_USO, ConstantesSistema.INDICADOR_USO_ATIVO));
		
		Collection<?> colHidrometroLocalInstalacao = getControladorUtil().pesquisar(
				filtroHidrometroLocalInstalacao, HidrometroLocalInstalacao.class.getName());
		if(!Util.isVazioOrNulo(colHidrometroLocalInstalacao)){
			HidrometroLocalInstalacao hidrometroLocalInstalacao = null;
			
			Iterator<?> it = colHidrometroLocalInstalacao.iterator();
			while(it.hasNext()){
				hidrometroLocalInstalacao = (HidrometroLocalInstalacao) it.next();
				
				retorno.append("13|");
				retorno.append(Util.formatarCampoParaConcatenacao(hidrometroLocalInstalacao.getId().toString()));
				retorno.append(Util.formatarCampoParaConcatenacao(hidrometroLocalInstalacao.getDescricao()));
				retorno.append("\n");
			}
		}
		
		return retorno.toString();
	}
	
	/**
	 * Pesquisar Registro Tipo 14 - Hidrômetro Proteção
	 * 
	 * @author Davi Menezes
	 * @date 22/11/2012
	 */
	private String gerarRegistroTipo14AC() throws ControladorException {
		StringBuilder retorno = new StringBuilder();
		
		FiltroHidrometroProtecao filtroHidrometroProtecao = new FiltroHidrometroProtecao(FiltroHidrometroProtecao.ID);
		filtroHidrometroProtecao.adicionarParametro(new ParametroSimples(
				FiltroHidrometroProtecao.INDICADOR_USO, ConstantesSistema.INDICADOR_USO_ATIVO));
		
		Collection<?> colHidrometroProtecao = getControladorUtil().pesquisar(
				filtroHidrometroProtecao, HidrometroProtecao.class.getName());
		if(!Util.isVazioOrNulo(colHidrometroProtecao)){
			HidrometroProtecao hidrometroProtecao = null;
			
			Iterator<?> it = colHidrometroProtecao.iterator();
			while(it.hasNext()){
				hidrometroProtecao = (HidrometroProtecao) it.next();
				
				retorno.append("14|");
				retorno.append(Util.formatarCampoParaConcatenacao(hidrometroProtecao.getId().toString()));
				retorno.append(Util.formatarCampoParaConcatenacao(hidrometroProtecao.getDescricao()));
				retorno.append("\n");
			}
		}
		
		return retorno.toString();
	}
	
	/**
	 * Pesquisar Registro Tipo 15 - Orgão Expedidor RG
	 * 
	 * @author Davi Menezes
	 * @date 22/11/2012
	 */
	private String gerarRegistroTipo15AC() throws ControladorException {
		StringBuilder retorno = new StringBuilder();
		
		FiltroOrgaoExpedidorRg filtroRG = new FiltroOrgaoExpedidorRg(FiltroOrgaoExpedidorRg.ID);
		filtroRG.adicionarParametro(new ParametroSimples(
				FiltroOrgaoExpedidorRg.INDICADOR_USO, ConstantesSistema.INDICADOR_USO_ATIVO));
		
		Collection<?> colOrgaoExpedidorRg = getControladorUtil().pesquisar(filtroRG, OrgaoExpedidorRg.class.getName());
		if(!Util.isVazioOrNulo(colOrgaoExpedidorRg)){
			OrgaoExpedidorRg orgaoExpedidorRg = null;
			
			Iterator<?> it = colOrgaoExpedidorRg.iterator();
			while(it.hasNext()){
				orgaoExpedidorRg = (OrgaoExpedidorRg) it.next();
				
				retorno.append("15|");
				retorno.append(Util.formatarCampoParaConcatenacao(orgaoExpedidorRg.getId().toString()));
				retorno.append(Util.formatarCampoParaConcatenacao(orgaoExpedidorRg.getDescricao()));
				retorno.append(Util.formatarCampoParaConcatenacao(orgaoExpedidorRg.getDescricaoAbreviada()));
				retorno.append("\n");
			}
		}
		
		return retorno.toString();
	}
	
	/**
	 * Pesquisar Registro Tipo 16 - Endereco Referencia
	 * 
	 *  @author Davi Menezes
	 *  @date 22/11/2012
	 */
	private String gerarRegistroTipo16AC() throws ControladorException {
		StringBuilder retorno = new StringBuilder();
		
		FiltroEnderecoReferencia filtroEnderecoReferencia = new FiltroEnderecoReferencia(
				FiltroEnderecoReferencia.ID);
		filtroEnderecoReferencia.adicionarParametro(new ParametroSimples(
				FiltroEnderecoReferencia.INDICADORUSO, ConstantesSistema.INDICADOR_USO_ATIVO));
		
		Collection<?> colEnderecoReferencia = getControladorUtil().pesquisar(
				filtroEnderecoReferencia, EnderecoReferencia.class.getName());
		if(!Util.isVazioOrNulo(colEnderecoReferencia)){
			EnderecoReferencia enderecoReferencia = null;
			
			Iterator<?> it = colEnderecoReferencia.iterator();
			while(it.hasNext()){
				enderecoReferencia = (EnderecoReferencia) it.next();
				
				retorno.append("16|");
				retorno.append(Util.formatarCampoParaConcatenacao(enderecoReferencia.getId().toString()));
				retorno.append(Util.formatarCampoParaConcatenacao(enderecoReferencia.getDescricao()));
				retorno.append(Util.formatarCampoParaConcatenacao(enderecoReferencia.getDescricaoAbreviada()));
				retorno.append("\n");
			}
		}
		
		return retorno.toString();
	}
	
	/**
	 * Pesquisar Registro Tipo 15 - Pessoa Sexo
	 * 
	 * @author Davi Menezes
	 * @date 22/11/2012
	 */
	private String gerarRegistroTipo17AC() throws ControladorException {
		StringBuilder retorno = new StringBuilder();
		
		FiltroPessoaSexo filtroPessoaSexo = new FiltroPessoaSexo(FiltroPessoaSexo.ID);
		filtroPessoaSexo.adicionarParametro(new ParametroSimples(
				FiltroPessoaSexo.INDICADOR_USO, ConstantesSistema.INDICADOR_USO_ATIVO));
		
		Collection<?> colPessoaSexo = getControladorUtil().pesquisar(filtroPessoaSexo, PessoaSexo.class.getName());
		if(!Util.isVazioOrNulo(colPessoaSexo)){
			PessoaSexo pessoaSexo = null;
			
			Iterator<?> it = colPessoaSexo.iterator();
			while(it.hasNext()){
				pessoaSexo = (PessoaSexo) it.next();
				
				retorno.append("17|");
				retorno.append(Util.formatarCampoParaConcatenacao(pessoaSexo.getId().toString()));
				retorno.append(Util.formatarCampoParaConcatenacao(pessoaSexo.getDescricao()));
				retorno.append("\n");
			}
		}
		
		return retorno.toString();
	}
	
	/**
	 * Pesquisar Registro Tipo 18 - Fone Tipo
	 * 
	 * @author Davi Menezes
	 * @date 27/11/2012 
	 */
	private String gerarRegistroTipo18AC() throws ControladorException {
		StringBuilder retorno = new StringBuilder();
		
		FiltroFoneTipo filtroFoneTipo = new FiltroFoneTipo(FiltroFoneTipo.ID);
		filtroFoneTipo.adicionarParametro(new ParametroSimples(
				FiltroFoneTipo.INDICADOR_USO, ConstantesSistema.INDICADOR_USO_ATIVO));
		
		Collection<?> colFoneTipo = getControladorUtil().pesquisar(filtroFoneTipo, FoneTipo.class.getName());
		if(!Util.isVazioOrNulo(colFoneTipo)){
			FoneTipo foneTipo = null;
			
			Iterator<?> it = colFoneTipo.iterator();
			while(it.hasNext()){
				foneTipo = (FoneTipo) it.next();
				
				retorno.append("18|");
				retorno.append(Util.formatarCampoParaConcatenacao(foneTipo.getId().toString()));
				retorno.append(Util.formatarCampoParaConcatenacao(foneTipo.getDescricao()));
				retorno.append("\n");
			}
		}
		
		return retorno.toString();
	}
	
	/**
	 * Pesquisar Registro Tipo 19 - Sistema Parâmetro
	 * 
	 * @author Davi Menezes
	 * @date 27/11/2012
	 */
	private String gerarRegistroTipo19AC(Integer idLeiturista, Integer idLocalidade, Integer codigoSetorComercial, Integer idComando, 
			Integer quantidadeImovel, String descricaoArquivo, Integer idEmpresa) throws ControladorException {
		StringBuilder retorno = new StringBuilder();
		
		SetorComercial setorComercial = null;
		if(codigoSetorComercial != null){
			FiltroSetorComercial filtroSetorComercial = new FiltroSetorComercial();
			filtroSetorComercial.adicionarParametro( new ParametroSimples( FiltroSetorComercial.LOCALIDADE_ID, idLocalidade));
			filtroSetorComercial.adicionarParametro( new ParametroSimples( FiltroSetorComercial.CODIGO_SETOR_COMERCIAL, codigoSetorComercial));
			
			Collection<SetorComercial> colecaoSetorComercial = getControladorUtil().pesquisar(filtroSetorComercial, SetorComercial.class.getName());
			
			setorComercial = (SetorComercial) Util.retonarObjetoDeColecao(colecaoSetorComercial);
		}
		
		FiltroLocalidade filtroLocalidade = new FiltroLocalidade();
		filtroLocalidade.adicionarParametro(new ParametroSimples( FiltroLocalidade.ID, idLocalidade));
		
		Collection<Localidade> colecaoLocalidade = getControladorUtil().pesquisar(filtroLocalidade, Localidade.class.getName());
		
		Localidade localidade = (Localidade) Util.retonarObjetoDeColecao(colecaoLocalidade);
		
		  //VERSÃO DO CELULAR
        FiltroVersaoSistemasAndroid filtro  = new FiltroVersaoSistemasAndroid();
        filtro.adicionarParametro(new ParametroSimples(
        		FiltroVersaoSistemasAndroid.SISTEMA_ANDROID_ID, SistemaAndroid.ATUALIZACAO_CADASTRAL));
        filtro.adicionarCaminhoParaCarregamentoEntidade(FiltroVersaoSistemasAndroid.SISTEMA_ANDROID);
        filtro.setCampoOrderBy(FiltroVersaoSistemasAndroid.ID);
        ArrayList<VersaoSistemasAndroid> colecaoVersoes = (ArrayList<VersaoSistemasAndroid>) Fachada.getInstancia()
        		.pesquisar(filtro, VersaoSistemasAndroid.class.getName());
        VersaoSistemasAndroid versao = null;
        if (colecaoVersoes!=null && !colecaoVersoes.isEmpty()){      
        	versao = colecaoVersoes.get(colecaoVersoes.size()-1);
        
        } else {
        	versao = new VersaoSistemasAndroid();
        	versao.setNumeroVersao("1");
        }
        
		
		
		gcom.micromedicao.FiltroLeiturista filtroLeiturista = new gcom.micromedicao.FiltroLeiturista();
		filtroLeiturista.adicionarParametro(new ParametroSimples(gcom.micromedicao.FiltroLeiturista.ID, idLeiturista));
		filtroLeiturista.adicionarCaminhoParaCarregamentoEntidade(gcom.micromedicao.FiltroLeiturista.USUARIO);
		
		Collection<?> colLeiturista = getControladorUtil().pesquisar(filtroLeiturista, Leiturista.class.getName());
		if(!Util.isVazioOrNulo(colLeiturista)){
			Leiturista leiturista = (Leiturista) Util.retonarObjetoDeColecao(colLeiturista);
			
			retorno.append("19|");
			retorno.append(Util.formatarCampoParaConcatenacao(leiturista.getUsuario().getLogin()));
			retorno.append(Util.formatarCampoParaConcatenacao(leiturista.getUsuario().getSenha()));
			retorno.append(Util.formatarCampoParaConcatenacao(leiturista.getNumeroImei()));
			retorno.append(Util.formatarCampoParaConcatenacao(versao.getNumeroVersao()));
			retorno.append(Util.formatarCampoParaConcatenacao(localidade.getId()));
			retorno.append(Util.formatarCampoParaConcatenacao(localidade.getDescricao()));
			if(setorComercial != null){
				retorno.append(Util.formatarCampoParaConcatenacao(setorComercial.getCodigo()));
				retorno.append(Util.formatarCampoParaConcatenacao(setorComercial.getDescricao()));
			}else{
				retorno.append("|");
				retorno.append("|");
			}
			retorno.append(Util.formatarCampoParaConcatenacao(idComando));
			retorno.append(Util.formatarCampoParaConcatenacao(quantidadeImovel));
			retorno.append(Util.formatarCampoParaConcatenacao(descricaoArquivo));
			retorno.append(Util.formatarCampoParaConcatenacao(idEmpresa));
			retorno.append("\n");
		}
		
		return retorno.toString();
	}
	
	/**
	 * Pesquisar Registro Tipo 20 - Imovel Atualização Cadastral
	 * 
	 * @author Davi Menezes
	 * @date 22/11/2012
	 */
	private String gerarRegistroTipo20AC(Integer idParametro) throws ControladorException {
		StringBuilder retorno = new StringBuilder();
		
		FiltroImovelAtualizacaoCadastral filtroImovelAtualizacaoCadastral = 
				new FiltroImovelAtualizacaoCadastral(FiltroImovelAtualizacaoCadastral.ID);
		filtroImovelAtualizacaoCadastral.adicionarParametro(new ParametroSimples(
				FiltroImovelAtualizacaoCadastral.ID_PARAMETRO_TABELA_ATUALIZACAO_CADASTRAL, idParametro));
		
		Collection<?> colecaoImovelAtualizacaoCadastral = getControladorUtil().pesquisar(
				filtroImovelAtualizacaoCadastral, ImovelAtualizacaoCadastral.class.getName());
		if(!Util.isVazioOrNulo(colecaoImovelAtualizacaoCadastral)){
			Collection<Integer> colecaoImoveis = new ArrayList<Integer>();
			
			ImovelAtualizacaoCadastral imovelAtualizacaoCadastral = null;
			
			Iterator<?> it = colecaoImovelAtualizacaoCadastral.iterator();
			while(it.hasNext()){
				imovelAtualizacaoCadastral = (ImovelAtualizacaoCadastral) it.next();
				
				colecaoImoveis.add(imovelAtualizacaoCadastral.getId());
				
				retorno.append("20|");
				retorno.append(Util.formatarCampoParaConcatenacao(imovelAtualizacaoCadastral.getId().toString())); //1
				retorno.append(Util.formatarCampoParaConcatenacao(imovelAtualizacaoCadastral.getImovel().toString())); //2
				retorno.append(Util.formatarCampoParaConcatenacao(imovelAtualizacaoCadastral.getIdMunicipio())); //3
				retorno.append(Util.formatarCampoParaConcatenacao(imovelAtualizacaoCadastral.getNomeMunicipio())); //4
				retorno.append(Util.formatarCampoParaConcatenacao(imovelAtualizacaoCadastral.getIdLocalidade())); //5
				
				Localidade localidade = getControladorLocalidade().pesquisarLocalidade(imovelAtualizacaoCadastral.getIdLocalidade());
				if(localidade != null){
					retorno.append(Util.formatarCampoParaConcatenacao(localidade.getDescricao())); //6
				}else{
					retorno.append("|");
				}
				
				retorno.append(Util.formatarCampoParaConcatenacao(imovelAtualizacaoCadastral.getCodigoSetorComercial())); //7
				retorno.append(Util.formatarCampoParaConcatenacao(imovelAtualizacaoCadastral.getNumeroQuadra())); //8
				retorno.append(Util.formatarCampoParaConcatenacao(imovelAtualizacaoCadastral.getLote())); //9
				retorno.append(Util.formatarCampoParaConcatenacao(imovelAtualizacaoCadastral.getSubLote())); //10
				retorno.append(Util.formatarCampoParaConcatenacao(imovelAtualizacaoCadastral.getIdLogradouro())); //11
				retorno.append(Util.formatarCampoParaConcatenacao(imovelAtualizacaoCadastral.getIdEnderecoReferencia())); //12
				retorno.append(Util.formatarCampoParaConcatenacao(imovelAtualizacaoCadastral.getNumeroImovel())); //13
				retorno.append(Util.formatarCampoParaConcatenacao(imovelAtualizacaoCadastral.getComplementoEndereco())); //14
				retorno.append(Util.formatarCampoParaConcatenacao(imovelAtualizacaoCadastral.getIdLogradouroBairro())); //15
				retorno.append(Util.formatarCampoParaConcatenacao(imovelAtualizacaoCadastral.getIdLogradouroCep())); //16
				retorno.append(Util.formatarCampoParaConcatenacao(imovelAtualizacaoCadastral.getIdImovelPerfil())); //17
				retorno.append(Util.formatarCampoParaConcatenacao(imovelAtualizacaoCadastral.getNumeroMedidirEnergia())); //18
				retorno.append(Util.formatarCampoParaConcatenacao(imovelAtualizacaoCadastral.getNumeroMorador())); //19
				retorno.append(Util.formatarCampoParaConcatenacao(imovelAtualizacaoCadastral.getIdPavimentoRua())); //20
				retorno.append(Util.formatarCampoParaConcatenacao(imovelAtualizacaoCadastral.getIdPavimentoCalcada())); //21
				retorno.append(Util.formatarCampoParaConcatenacao(imovelAtualizacaoCadastral.getIdFonteAbastecimento())); //22
				retorno.append(Util.formatarCampoParaConcatenacao(imovelAtualizacaoCadastral.getIdLigacaoAguaSituacao())); //23
				retorno.append(Util.formatarCampoParaConcatenacao(imovelAtualizacaoCadastral.getIdLigacaoEsgotoSituacao())); //24
				retorno.append(Util.formatarCampoParaConcatenacao(imovelAtualizacaoCadastral.getIndicadorAlertaTarifaSocial())); //25
				retorno.append(Util.formatarCampoParaConcatenacao(imovelAtualizacaoCadastral.getIdBairro())); //26
				retorno.append(Util.formatarCampoParaConcatenacao(imovelAtualizacaoCadastral.getCodigoCep())); //27
				
				SetorComercial setorComercial =  getControladorCobranca().obterSetorComercialLocalidade(imovelAtualizacaoCadastral.getIdLocalidade().toString(), String.valueOf(imovelAtualizacaoCadastral.getCodigoSetorComercial()));
				retorno.append(Util.formatarCampoParaConcatenacao(setorComercial.getDescricao())); //28
				
				retorno.append("\n");
			}
			
			//Gerar Registro Tipo 21 - Cliente Atualização Cadastral
			retorno.append(this.gerarRegistroTipo21AC(colecaoImoveis));
			
			//Gerar Registro Tipo 23 - Hidrômetro Instalação Histórico Atualização Cadastral
			retorno.append(this.gerarRegistroTipo23AC(colecaoImoveis));
			
			//Gerar Registro Tipo 24 - Imóvel Subcategoria Atualização Cadastral
			retorno.append(this.gerarRegistroTipo24AC(colecaoImoveis));
		}
		
		return retorno.toString();
	}
	
	/**
	 * Pesquisar Registro Tipo 21 - Cliente Atualização Cadastral
	 * 
	 * @author Davi Menezes
	 * @date 22/11/2012
	 */
	private String gerarRegistroTipo21AC(Collection<Integer> colecaoImoveis) throws ControladorException {
		StringBuilder retorno = new StringBuilder();
		
		Collection colClienteAtualizacaoCadastral = new ArrayList();
		
		if(colecaoImoveis.size() > 999){
			List<List<Integer>> particoes = CollectionUtil.particao((List<Integer>) colecaoImoveis, 999);

			int qtdQuebras = 999;
			int indice = colecaoImoveis.size() / qtdQuebras;
			
			if (colecaoImoveis.size() % qtdQuebras !=0){
				indice ++;
			}
			
			for (int i = 0; i < indice; i++) {
				
				Collection colecaoAux = null;

				FiltroClienteAtualizacaoCadastral filtroClienteAtualizacaoCadastral = 
						new FiltroClienteAtualizacaoCadastral(FiltroClienteAtualizacaoCadastral.ID);
			
				filtroClienteAtualizacaoCadastral.adicionarParametro(new ParametroSimplesIn(
						FiltroClienteAtualizacaoCadastral.ID_IMOVEL_ATUALIZACAO_CADASTRAL, particoes.get(i)));
				
				colecaoAux = getControladorUtil().pesquisar(filtroClienteAtualizacaoCadastral, ClienteAtualizacaoCadastral.class.getName());
				
				colClienteAtualizacaoCadastral.addAll(colecaoAux);
			}
			
		}else{
		
			FiltroClienteAtualizacaoCadastral filtroClienteAtualizacaoCadastral = 
					new FiltroClienteAtualizacaoCadastral(FiltroClienteAtualizacaoCadastral.ID);
			
			filtroClienteAtualizacaoCadastral.adicionarParametro(new ParametroSimplesIn(
					FiltroClienteAtualizacaoCadastral.ID_IMOVEL_ATUALIZACAO_CADASTRAL, colecaoImoveis));
			
			colClienteAtualizacaoCadastral = getControladorUtil().pesquisar(
					filtroClienteAtualizacaoCadastral, ClienteAtualizacaoCadastral.class.getName());
		}
		
		if(!Util.isVazioOrNulo(colClienteAtualizacaoCadastral)){
			Collection<Integer> colecaoClientes = new ArrayList<Integer>();
			
			ClienteAtualizacaoCadastral clienteAtualizacaoCadastral = null;
			
			Iterator<?> it = colClienteAtualizacaoCadastral.iterator();
			while(it.hasNext()){
				clienteAtualizacaoCadastral = (ClienteAtualizacaoCadastral) it.next();
				
				colecaoClientes.add(clienteAtualizacaoCadastral.getId());
				
				retorno.append("21|");
				retorno.append(Util.formatarCampoParaConcatenacao(clienteAtualizacaoCadastral.getId().toString()));
				retorno.append(Util.formatarCampoParaConcatenacao(clienteAtualizacaoCadastral.getImovelAtualizacaoCadastral().getId().toString()));
				retorno.append(Util.formatarCampoParaConcatenacao(clienteAtualizacaoCadastral.getIdClienteTipo()));
				retorno.append(Util.formatarCampoParaConcatenacao(clienteAtualizacaoCadastral.getCpfCnpj()));
				retorno.append(Util.formatarCampoParaConcatenacao(clienteAtualizacaoCadastral.getNomeCliente()));
				retorno.append(Util.formatarCampoParaConcatenacao(clienteAtualizacaoCadastral.getRg()));
				
				if ( clienteAtualizacaoCadastral.getOrgaoExpedidorRG() != null  ) {
					retorno.append(Util.formatarCampoParaConcatenacao(clienteAtualizacaoCadastral.getOrgaoExpedidorRG().getId()));
				} else {
					retorno.append(Util.formatarCampoParaConcatenacao(null));
				}
				
				retorno.append(Util.formatarCampoParaConcatenacao(clienteAtualizacaoCadastral.getIdUinidadeFederacao()));
				retorno.append(Util.formatarCampoParaConcatenacao(clienteAtualizacaoCadastral.getIdPessoaSexo()));
				
				String dataEmissao ="";
				
				if ( clienteAtualizacaoCadastral.getDataEmissaoRg() != null ) {
					dataEmissao = Util.formatarData(clienteAtualizacaoCadastral.getDataEmissaoRg());
				}
				retorno.append(Util.formatarCampoParaConcatenacao(dataEmissao));
				
				String dataNascimento ="";
				if ( clienteAtualizacaoCadastral.getDataNascimento() != null ) {
					dataNascimento = Util.formatarData(clienteAtualizacaoCadastral.getDataNascimento());
				}

				retorno.append(Util.formatarCampoParaConcatenacao(dataNascimento));
				
				retorno.append(Util.formatarCampoParaConcatenacao(clienteAtualizacaoCadastral.getIdCliente()));
				
				retorno.append("\n");
			}
			
			//Gerar Registro Tipo 20 - Cliente Fone Atualização Cadastral
			retorno.append(this.gerarRegistroTipo22AC(colecaoClientes));
		}
		
		return retorno.toString();
	}
	
	/**
	 * Pesquisar Registro Tipo 22 - Cliente Fone Atualização Cadastral
	 * 
	 * @author Davi Menezes
	 * @date 22/11/2012
	 */
	private String gerarRegistroTipo22AC(Collection<Integer> colecaoCliente) throws ControladorException {
		StringBuilder retorno = new StringBuilder();
		
		Collection colClienteFoneAtualizacaoCadastral =  new ArrayList();
		
		if(colecaoCliente.size() > 999){
			List<List<Integer>> particoes = CollectionUtil.particao((List<Integer>) colecaoCliente, 999);

			int qtdQuebras = 999;
			int indice = colecaoCliente.size() / qtdQuebras;
			
			if (colecaoCliente.size() % qtdQuebras !=0){
				indice ++;
			}
			
			for (int i = 0; i < indice; i++) {
				
				Collection colecaoAux = null;
				
				FiltroClienteFoneAtualizacaoCadastral filtroClienteFone = new FiltroClienteFoneAtualizacaoCadastral(
					FiltroClienteFoneAtualizacaoCadastral.ID);
				filtroClienteFone.adicionarCaminhoParaCarregamentoEntidade(
					FiltroClienteFoneAtualizacaoCadastral.CLIENTE_ATUALIZACAO_CADASTRAL);
				
				
				filtroClienteFone.adicionarParametro(new ParametroSimplesIn(
						FiltroClienteFoneAtualizacaoCadastral.ID_CLIENTE_ATUALIZACAO_CADASTRAL, particoes.get(i)));
				
				colecaoAux = getControladorUtil().pesquisar(
						filtroClienteFone, ClienteFoneAtualizacaoCadastral.class.getName());
				
				colClienteFoneAtualizacaoCadastral.addAll(colecaoAux);
			}
		}else{
			
			FiltroClienteFoneAtualizacaoCadastral filtroClienteFone = new FiltroClienteFoneAtualizacaoCadastral(
				FiltroClienteFoneAtualizacaoCadastral.ID);
			filtroClienteFone.adicionarCaminhoParaCarregamentoEntidade(
				FiltroClienteFoneAtualizacaoCadastral.CLIENTE_ATUALIZACAO_CADASTRAL);
			
			filtroClienteFone.adicionarParametro(new ParametroSimplesIn(
					FiltroClienteFoneAtualizacaoCadastral.ID_CLIENTE_ATUALIZACAO_CADASTRAL, colecaoCliente));
			
			colClienteFoneAtualizacaoCadastral = getControladorUtil().pesquisar(
					filtroClienteFone, ClienteFoneAtualizacaoCadastral.class.getName());
		}
		
		if(!Util.isVazioOrNulo(colClienteFoneAtualizacaoCadastral)){
			ClienteFoneAtualizacaoCadastral clienteFoneAtualizacaoCadastral = null;
			
			Iterator<?> it = colClienteFoneAtualizacaoCadastral.iterator();
			while(it.hasNext()){
				clienteFoneAtualizacaoCadastral = (ClienteFoneAtualizacaoCadastral) it.next();
				
				retorno.append("22|");
				retorno.append(Util.formatarCampoParaConcatenacao(clienteFoneAtualizacaoCadastral.getClienteAtualizacaoCadastral().getId()));
				retorno.append(Util.formatarCampoParaConcatenacao(clienteFoneAtualizacaoCadastral.getClienteAtualizacaoCadastral().getIdCliente()));
				retorno.append(Util.formatarCampoParaConcatenacao(clienteFoneAtualizacaoCadastral.getIdFoneTipo()));
				retorno.append(Util.formatarCampoParaConcatenacao(clienteFoneAtualizacaoCadastral.getDdd()));
				retorno.append(Util.formatarCampoParaConcatenacao(clienteFoneAtualizacaoCadastral.getTelefone()));
				retorno.append(Util.formatarCampoParaConcatenacao(clienteFoneAtualizacaoCadastral.getIndicadorFonePadrao()));
				retorno.append("\n");
			}
		}
		
		return retorno.toString();
	}
	
	/**
	 * Pesquisar Registro Tipo 23 - Hidrômetro Instalação Histórico Atualização Cadastral
	 * 
	 * @author Davi Menezes
	 * @date 22/11/2012
	 */
	private String gerarRegistroTipo23AC(Collection<Integer> colecaoImoveis) throws ControladorException {
		StringBuilder retorno = new StringBuilder();
		
		Collection colHidrometroAtualizacaoCadastral =  new ArrayList();
		
		if(colecaoImoveis.size() > 999){
			List<List<Integer>> particoes = CollectionUtil.particao((List<Integer>) colecaoImoveis, 999);

			int qtdQuebras = 999;
			int indice = colecaoImoveis.size() / qtdQuebras;
			
			if (colecaoImoveis.size() % qtdQuebras !=0){
				indice ++;
			}
			
			for (int i = 0; i < indice; i++) {
				Collection colecaoAux = null;
				
				FiltroHidrometroInstalacaoHistoricoAtualizacaoCadastral filtroHidrometro = 
						new FiltroHidrometroInstalacaoHistoricoAtualizacaoCadastral(FiltroHidrometroInstalacaoHistoricoAtualizacaoCadastral.ID);
				filtroHidrometro.adicionarCaminhoParaCarregamentoEntidade(
						FiltroHidrometroInstalacaoHistoricoAtualizacaoCadastral.HIDROMETRO_LOCAL_INSTALACAO);
				filtroHidrometro.adicionarCaminhoParaCarregamentoEntidade(
						FiltroHidrometroInstalacaoHistoricoAtualizacaoCadastral.HIDROMETRO_PROTECAO);
				filtroHidrometro.adicionarCaminhoParaCarregamentoEntidade(
						FiltroHidrometroInstalacaoHistoricoAtualizacaoCadastral.IMOVEL_ATUALIZACAO_CADASTRAL);
				
				
				filtroHidrometro.adicionarParametro(new ParametroSimplesIn(
						FiltroHidrometroInstalacaoHistoricoAtualizacaoCadastral.ID_IMOVEL_ATUALIZACAO_CADASTRAL, particoes.get(i)));
				
				colecaoAux = getControladorUtil().pesquisar(
						filtroHidrometro, HidrometroInstalacaoHistoricoAtualizacaoCadastral.class.getName());
				
				colHidrometroAtualizacaoCadastral.addAll(colecaoAux);
				
			}
		}else{
			
			FiltroHidrometroInstalacaoHistoricoAtualizacaoCadastral filtroHidrometro = 
					new FiltroHidrometroInstalacaoHistoricoAtualizacaoCadastral(FiltroHidrometroInstalacaoHistoricoAtualizacaoCadastral.ID);
			filtroHidrometro.adicionarCaminhoParaCarregamentoEntidade(
					FiltroHidrometroInstalacaoHistoricoAtualizacaoCadastral.HIDROMETRO_LOCAL_INSTALACAO);
			filtroHidrometro.adicionarCaminhoParaCarregamentoEntidade(
					FiltroHidrometroInstalacaoHistoricoAtualizacaoCadastral.HIDROMETRO_PROTECAO);
			filtroHidrometro.adicionarCaminhoParaCarregamentoEntidade(
					FiltroHidrometroInstalacaoHistoricoAtualizacaoCadastral.IMOVEL_ATUALIZACAO_CADASTRAL);
			
			filtroHidrometro.adicionarParametro(new ParametroSimplesIn(
				FiltroHidrometroInstalacaoHistoricoAtualizacaoCadastral.ID_IMOVEL_ATUALIZACAO_CADASTRAL, colecaoImoveis));
			
			colHidrometroAtualizacaoCadastral = getControladorUtil().pesquisar(
					filtroHidrometro, HidrometroInstalacaoHistoricoAtualizacaoCadastral.class.getName());
		}
		
		if(!Util.isVazioOrNulo(colHidrometroAtualizacaoCadastral)){
			HidrometroInstalacaoHistoricoAtualizacaoCadastral hidrometroHistorico = null;
			
			Iterator<?> it = colHidrometroAtualizacaoCadastral.iterator();
			while(it.hasNext()){
				hidrometroHistorico = (HidrometroInstalacaoHistoricoAtualizacaoCadastral) it.next();
				
				retorno.append("23|");
				retorno.append(Util.formatarCampoParaConcatenacao(hidrometroHistorico.getId()));
				retorno.append(Util.formatarCampoParaConcatenacao(hidrometroHistorico.getImovelAtualizacaoCadastral().getId()));
				retorno.append(Util.formatarCampoParaConcatenacao(hidrometroHistorico.getMedicaoTipo().getId()));
				retorno.append(Util.formatarCampoParaConcatenacao(hidrometroHistorico.getNumeroHidrometro()));
				retorno.append(Util.formatarCampoParaConcatenacao(hidrometroHistorico.getHidrometroLocalInstalacao().getId()));
				retorno.append(Util.formatarCampoParaConcatenacao(hidrometroHistorico.getHidrometroProtecao().getId()));
				retorno.append(Util.formatarCampoParaConcatenacao(hidrometroHistorico.getIndicadorCavalete()));
				retorno.append(Util.formatarCampoParaConcatenacao(hidrometroHistorico.getNumeroInstalacaoHidrometro()));
				retorno.append("\n");
			}
		}
		
		return retorno.toString();
	}
	
	/**
	 * Pesquisar Registro Tipo 24 - Imóvel Subcategoria Atualização Cadastral
	 * 
	 * @author Davi Menezes
	 * @date 22/11/2012
	 */
	private String gerarRegistroTipo24AC(Collection<Integer> colecaoImoveis) throws ControladorException {
		StringBuilder retorno = new StringBuilder();
		
		Collection colImovelSubCategoria = new ArrayList();
		
		if(colecaoImoveis.size() > 999){
			List<List<Integer>> particoes = CollectionUtil.particao((List<Integer>) colecaoImoveis, 999);

			int qtdQuebras = 999;
			int indice = colecaoImoveis.size() / qtdQuebras;
			
			if (colecaoImoveis.size() % qtdQuebras !=0){
				indice ++;
			}
			
			for (int i = 0; i < indice; i++) {
				Collection colecaoAux = null;

				FiltroImovelSubcategoriaAtualizacaoCadastral filtroImovelSubCategoria = 
						new FiltroImovelSubcategoriaAtualizacaoCadastral(FiltroImovelSubcategoriaAtualizacaoCadastral.ID);
				
				filtroImovelSubCategoria.adicionarParametro(new ParametroSimplesIn(
						FiltroImovelSubcategoriaAtualizacaoCadastral.ID_IMOVEL_ATUALIZACAO_CADASTRAL, particoes.get(i)));
				
				colecaoAux = getControladorUtil().pesquisar(
						filtroImovelSubCategoria, ImovelSubcategoriaAtualizacaoCadastral.class.getName());
				
				colImovelSubCategoria.addAll(colecaoAux);
			}
		}else{
			FiltroImovelSubcategoriaAtualizacaoCadastral filtroImovelSubCategoria = 
					new FiltroImovelSubcategoriaAtualizacaoCadastral(FiltroImovelSubcategoriaAtualizacaoCadastral.ID);
			
			filtroImovelSubCategoria.adicionarParametro(new ParametroSimplesIn(
					FiltroImovelSubcategoriaAtualizacaoCadastral.ID_IMOVEL_ATUALIZACAO_CADASTRAL, colecaoImoveis));
			
			colImovelSubCategoria = getControladorUtil().pesquisar(
					filtroImovelSubCategoria, ImovelSubcategoriaAtualizacaoCadastral.class.getName());
		}
		
		if(!Util.isVazioOrNulo(colImovelSubCategoria)){
			ImovelSubcategoriaAtualizacaoCadastral imovelSubCategoria = null;
			
			Iterator<?> it = colImovelSubCategoria.iterator();
			while(it.hasNext()){
				imovelSubCategoria = (ImovelSubcategoriaAtualizacaoCadastral) it.next();
				
				retorno.append("24|");
				retorno.append(Util.formatarCampoParaConcatenacao(imovelSubCategoria.getImovelAtualizacaoCadastral().getId()));
				retorno.append(Util.formatarCampoParaConcatenacao(imovelSubCategoria.getIdImovel()));
				retorno.append(Util.formatarCampoParaConcatenacao(imovelSubCategoria.getIdCategoria()));
				retorno.append(Util.formatarCampoParaConcatenacao(imovelSubCategoria.getIdSubcategoria()));
				retorno.append(Util.formatarCampoParaConcatenacao(imovelSubCategoria.getQuantidadeEconomias()));
				retorno.append("\n");
			}
		}
		
		return retorno.toString();
	}
	
	/**
	 * [UC 1392] - Consultar Roteiro Dispositivo Movel
	 * 
	 * [IT 0003] - Selecionar Arquivos
	 * 
	 * @author Davi Menezes
	 * @date 27/11/2012
	 */
	public Collection<AtualizacaoCadastralArquivoTextoHelper> pesquisarArquivoRoteiroAtualizacaoCadastral (
			ConsultarRoteiroDispositivoMovelHelper helper) throws ControladorException {
		
		Collection<AtualizacaoCadastralArquivoTextoHelper> colecaoArquivoTextoHelper = new ArrayList<AtualizacaoCadastralArquivoTextoHelper>();
		
		try{
			Collection colecaoArquivos = repositorioCadastro.pesquisarArquivoRoteiroAtualizacaoCadastral(helper);
			
			if(!Util.isVazioOrNulo(colecaoArquivos)){
				AtualizacaoCadastralArquivoTextoHelper arquivoHelper = null;
				Object [] array = null;
				
				Iterator<?> it = colecaoArquivos.iterator();
				while(it.hasNext()){
					arquivoHelper = new AtualizacaoCadastralArquivoTextoHelper();
					
					array = (Object []) it.next();
					
					if((Integer) array[0] != null){
						arquivoHelper.setId(String.valueOf((Integer) array[0]));
					}
					
					Integer idParametro = null;					
					if((Integer) array[1] != null){
						idParametro = (Integer) array[1];
						
						Integer qtdRecebidos = repositorioCadastro.pesquisarQuantidadeImoveisRecebidosAtualizacaoCadastral(idParametro);
						
						arquivoHelper.setIdParametro(idParametro);					
						arquivoHelper.setQuantidadeRecebida(String.valueOf(qtdRecebidos));
					}
					
					if((Integer) array[2] != null){
						arquivoHelper.setIdLocalidade(String.valueOf((Integer) array[2]));
					}
					
					if((Integer) array[3] != null){
						arquivoHelper.setCodigoSetorComercial(String.valueOf((Integer) array[3]));
					}
					
					if(idParametro != null){
						
						//pesquisa quadras
						ArrayList<Integer> idsQuadras =	(ArrayList<Integer>) repositorioCadastro.pesquisarRoteiroQuadra(idParametro);
						arquivoHelper.setColecaoQuadras(idsQuadras);
					}
					
					if((Integer) array[5] != null){
						arquivoHelper.setQuantidadeEnviada(String.valueOf((Integer) array[5]));
					}
					
					if((String) array[6] != null){
						arquivoHelper.setNomeUsuario((String) array[6]);
					}
					
					if((String) array[7] != null){
						arquivoHelper.setSituacaoArquivo((String) array[7]);
					}
					
					if((Integer) array[8] != null){
						arquivoHelper.setIdSituacaoArquivo((Integer) array[8]);
					}
					
					if((Date) array[9] != null){
						arquivoHelper.setDataLiberacao(Util.formatarData((Date) array[9]));
					} else {
						arquivoHelper.setDataLiberacao("");
					}
					
					/*
					 * @author Jonathan Marcos
					 * @date 18/02/2014
					 * RM10091
					 * [OBSERVACOES]
					 * 		- RETORNA A DATA DE FINALIZACAO
					 * 		  DO ARQUIVO CADAS TENHA SIDO
					 * 		  FINALIZADO
					 */
					if(array[10] !=null){
						arquivoHelper.setDataFinalizacaoArquivo(Util.formatarData((Date) array[10]));
					}else{
						arquivoHelper.setDataFinalizacaoArquivo("");
					}
					
					colecaoArquivoTextoHelper.add(arquivoHelper);
				}
			}
		
		}catch (ErroRepositorioException ex) {
			throw new ControladorException("erro.sistema", ex);
		}
		
		return colecaoArquivoTextoHelper;
	}
	
	/**
	 * [UC1392] - Consultar Roteiro Dispositivo Móvel Atualização Cadastral
	 * 
	 * @author Davi Menezes
	 * @date 28/11/2012
	 *
	 */
	public void atualizarListaAtualizacaoCadastralArquivoTexto(
			Collection<AtualizacaoCadastralArquivoTextoHelper> colecaoAtualizacaoCadastralArquivoTexto,
			Integer idSituacaoLeituraNova, Leiturista leiturista, Date date) throws ControladorException {
		
		try{
			if(leiturista != null){
				StringBuilder retorno = new StringBuilder();
				String linha = "";
				
				Iterator<?> it = colecaoAtualizacaoCadastralArquivoTexto.iterator();
				while(it.hasNext()){
					AtualizacaoCadastralArquivoTextoHelper helper = (AtualizacaoCadastralArquivoTextoHelper) it.next();
					
					FiltroAtualizacaoCadastralArquivoTexto filtro = new FiltroAtualizacaoCadastralArquivoTexto();
					filtro.adicionarParametro(new ParametroSimples(FiltroAtualizacaoCadastralArquivoTexto.ID, helper.getId()));
					filtro.adicionarCaminhoParaCarregamentoEntidade(FiltroAtualizacaoCadastralArquivoTexto.PARAMETRO_TABELA_ATUALIZACAO_CADASTRO);
					
					Collection<?> colArquivos = getControladorUtil().pesquisar(filtro, AtualizacaoCadastralArquivoTexto.class.getName());
					AtualizacaoCadastralArquivoTexto atualizacaoCadastralArquivoTexto = 
							(AtualizacaoCadastralArquivoTexto) Util.retonarObjetoDeColecao(colArquivos);
										
					byte [] arquivo = atualizacaoCadastralArquivoTexto.getArquivoTexto();
					
					BufferedReader buffer = new BufferedReader(new InputStreamReader(new ByteArrayInputStream(arquivo)));
					
					while((linha = buffer.readLine()) != null){
						String tipoRegistro = linha.substring(0, 2);
						
						if(tipoRegistro.equals("19")){
							Integer codigoSetorComercial = null;
							if ( helper.getCodigoSetorComercial() != null ) {
								codigoSetorComercial = Integer.valueOf(helper.getCodigoSetorComercial());	
							}
							
							
							retorno.append(this.gerarRegistroTipo19AC(leiturista.getId(), Integer.valueOf(helper.getIdLocalidade()), codigoSetorComercial,
									atualizacaoCadastralArquivoTexto.getParametroTabelaAtualizacaoCadastro().getId(), atualizacaoCadastralArquivoTexto.getQuantidadeImovel(), 
									atualizacaoCadastralArquivoTexto.getDescricaoArquivo(), atualizacaoCadastralArquivoTexto.getParametroTabelaAtualizacaoCadastro().getEmpresa().getId()));
						}else{
							retorno.append(linha);
							retorno.append("\n");
						}
					}
					
					byte [] novoArquivo = retorno.toString().getBytes();
					
					atualizacaoCadastralArquivoTexto.setArquivoTexto(novoArquivo);
					atualizacaoCadastralArquivoTexto.setUltimaAlteracao(new Date());
					
					getControladorUtil().atualizar(atualizacaoCadastralArquivoTexto);
					
					
				}
			}
			
			if(idSituacaoLeituraNova.equals(SituacaoTransmissaoLeitura.LIBERADO)){
				Collection<AtualizacaoCadastralArquivoTextoHelper> colecaoAtualizacaoCadastralArquivoTextoAtu = new ArrayList<AtualizacaoCadastralArquivoTextoHelper>();
				String colecaoArquivosNaoAtu = "";
				
				for(AtualizacaoCadastralArquivoTextoHelper atualizacaoCadastralArquivoTextoHelper : colecaoAtualizacaoCadastralArquivoTexto){
					
					FiltroAtualizacaoCadastralArquivoTexto filtro = new FiltroAtualizacaoCadastralArquivoTexto();
					filtro.adicionarParametro(new ParametroSimples(FiltroAtualizacaoCadastralArquivoTexto.ID, atualizacaoCadastralArquivoTextoHelper.getId()));
					filtro.adicionarCaminhoParaCarregamentoEntidade(FiltroAtualizacaoCadastralArquivoTexto.PARAMETRO_TABELA_ATUALIZACAO_CADASTRO);
					
					Collection<?> colArquivos = getControladorUtil().pesquisar(filtro, AtualizacaoCadastralArquivoTexto.class.getName());
					AtualizacaoCadastralArquivoTexto atualizacaoCadastralArquivoTexto = (AtualizacaoCadastralArquivoTexto) Util.retonarObjetoDeColecao(colArquivos);
				
					//Caso o metodo tenha sido chamado para liberar o arquivo e 
					//o cadastrado vinculado ao arquivo ja tenha algum outro arquivo vinculado a ele, com situacao liberado ou em campo
					//nao sera possivel liberar o arquivo para ele
					if(this.verificarCadastradorComArquivoEmCampo(atualizacaoCadastralArquivoTexto.getLeiturista().getId())){
						colecaoArquivosNaoAtu += atualizacaoCadastralArquivoTexto.getDescricaoArquivo() + ", ";
					}else{
						colecaoAtualizacaoCadastralArquivoTextoAtu.add(atualizacaoCadastralArquivoTextoHelper);
					}
				}
				
				if(colecaoAtualizacaoCadastralArquivoTextoAtu != null && !colecaoAtualizacaoCadastralArquivoTextoAtu.isEmpty()){
					repositorioCadastro.atualizarListaAtualizacaoCadastralArquivoTexto(colecaoAtualizacaoCadastralArquivoTextoAtu, 
								idSituacaoLeituraNova, leiturista, date);
				}
				
				//Exibi um alert com os arquivos que nao poderam ser liberados
				if(colecaoArquivosNaoAtu.length() > 1){
					throw new ControladorException("atencao.cadastrador_com_arquivo_liberado", null, colecaoArquivosNaoAtu.substring(0, colecaoArquivosNaoAtu.length() - 2));
				}
				
			}else{
				repositorioCadastro.atualizarListaAtualizacaoCadastralArquivoTexto(colecaoAtualizacaoCadastralArquivoTexto, 
					idSituacaoLeituraNova, leiturista, date);
			}
			
			
			if ( idSituacaoLeituraNova.equals(SituacaoTransmissaoLeitura.TRANSMITIDO) ) {
				//Disponibiliza os imóveis que nao foram atualizados no arquivo - dessa forma quando gerar um novo arquivo é possivel selecionar os imóveis.
				Iterator iteratorArquivos = colecaoAtualizacaoCadastralArquivoTexto.iterator();
				while(iteratorArquivos.hasNext()){
					
					AtualizacaoCadastralArquivoTextoHelper helper = (AtualizacaoCadastralArquivoTextoHelper) iteratorArquivos.next();
					repositorioImovel.atualizarSituacaoTransmissaoImovel(helper.getIdParametro());
				}
			}
			
		}catch ( ErroRepositorioException e ) {
			sessionContext.setRollbackOnly();
			throw new ControladorException("erro.sistema", e);
		} catch (NumberFormatException e) {
			e.printStackTrace();
			throw new ControladorException("erro.sistema", e);
		} catch (IOException e) {
			e.printStackTrace();
			throw new ControladorException("erro.sistema", e);
		}
	}
	
	/**
	 * Pesquisar Registro Tipo 25- Logradouro Tipo
	 * 
	 * @author Arthur Carvalho
	 * @date 13/12/2012
	 * 
	 */
	private String gerarRegistroTipo25AC() throws ControladorException {
			StringBuilder retorno = new StringBuilder();
			
			FiltroLogradouroTipo filtroLogradouroTipo = new FiltroLogradouroTipo();
			filtroLogradouroTipo.adicionarParametro( new ParametroSimples(FiltroLogradouroTipo.INDICADORUSO, ConstantesSistema.SIM));
			
			Collection<LogradouroTipo> colecaoLogradouroTipo = getControladorUtil().pesquisar(filtroLogradouroTipo, LogradouroTipo.class.getName());
			
			
			if(!Util.isVazioOrNulo(colecaoLogradouroTipo)){
				
				Iterator<LogradouroTipo> it = colecaoLogradouroTipo.iterator();
				while(it.hasNext()){
					LogradouroTipo logradouroTipo = it.next();
					
					retorno.append("25|");
					retorno.append(Util.formatarCampoParaConcatenacao(logradouroTipo.getId().toString()));
					retorno.append(Util.formatarCampoParaConcatenacao(logradouroTipo.getDescricao()));
					retorno.append(Util.formatarCampoParaConcatenacao(logradouroTipo.getDescricaoAbreviada()));
					retorno.append("\n");
				}
			}
			
			return retorno.toString();
	}
	
	/**
	 * Pesquisar Registro Tipo 26- Logradouro Titulo
	 * 
	 * @author Arthur Carvalho
	 * @date 13/12/2012
	 * 
	 */
	private String gerarRegistroTipo26AC() throws ControladorException {
			StringBuilder retorno = new StringBuilder();
			
			FiltroLogradouroTitulo filtroLogradouroTitulo = new FiltroLogradouroTitulo();
			filtroLogradouroTitulo.adicionarParametro( new ParametroSimples(FiltroLogradouroTitulo.INDICADORUSO, ConstantesSistema.SIM));
			
			Collection<LogradouroTitulo> colecaoLogradouroTitulo = getControladorUtil().pesquisar(filtroLogradouroTitulo, LogradouroTitulo.class.getName());
			
			if(!Util.isVazioOrNulo(colecaoLogradouroTitulo)){
				
				Iterator<LogradouroTitulo> it = colecaoLogradouroTitulo.iterator();
				while(it.hasNext()){
					LogradouroTitulo logradouroTitulo = it.next();
					
					retorno.append("26|");
					retorno.append(Util.formatarCampoParaConcatenacao(logradouroTitulo.getId().toString()));
					retorno.append(Util.formatarCampoParaConcatenacao(logradouroTitulo.getDescricao()));
					retorno.append(Util.formatarCampoParaConcatenacao(logradouroTitulo.getDescricaoAbreviada()));
					retorno.append("\n");
				}
			}
			
			return retorno.toString();
	}
	
	/**
	 * Pesquisar Registro Tipo 29 - Quadra
	 * 
	 * @author Arthur Carvalho
	 * @date 13/12/2012
	 */
	private String gerarRegistroTipo29AC(Integer idLocalidade, Integer setorComercial, Collection<Integer> colecaoSetor) throws ControladorException {
		StringBuilder retorno = new StringBuilder();
		
		FiltroQuadra filtroQuadra = new FiltroQuadra();
		filtroQuadra.adicionarParametro( new ParametroSimples( FiltroQuadra.ID_LOCALIDADE, idLocalidade));
		filtroQuadra.adicionarCaminhoParaCarregamentoEntidade(FiltroQuadra.SETORCOMERCIAL);
		if(setorComercial != null){
			filtroQuadra.adicionarParametro( new ParametroSimples( FiltroQuadra.CODIGO_SETORCOMERCIAL, setorComercial));
		}else{
			filtroQuadra.adicionarParametro( new ParametroSimplesIn(FiltroQuadra.CODIGO_SETORCOMERCIAL, colecaoSetor));
		}
		
		Collection<Quadra> colecaoQuadra = getControladorUtil().pesquisar(filtroQuadra, Quadra.class.getName());
		
		if ( colecaoQuadra != null && !colecaoQuadra.isEmpty() ) {
			Iterator<Quadra> iteratorQuadra = colecaoQuadra.iterator();
			while( iteratorQuadra.hasNext() ) {
				
				Quadra quadra = (Quadra) iteratorQuadra.next();
				retorno.append("29|");
				retorno.append(Util.formatarCampoParaConcatenacao(quadra.getId().toString()));
				retorno.append(Util.formatarCampoParaConcatenacao(quadra.getNumeroQuadra()));
				retorno.append(Util.formatarCampoParaConcatenacao(quadra.getSetorComercial().getCodigo()));
				retorno.append("\n");
				
			}
		}
		
		return retorno.toString();
	}
	
	/**
	 * Pesquisar Registro Tipo 28 - Imovel Perfil
	 * 
	 * @author Arthur Carvalho
	 * @date 13/12/2012
	 */
	private String gerarRegistroTipo28AC() throws ControladorException {
		StringBuilder retorno = new StringBuilder();
		
		FiltroImovelPerfil filtroImovelPerfil = new FiltroImovelPerfil();
		filtroImovelPerfil.adicionarParametro( new ParametroSimples( FiltroImovelPerfil.INDICADOR_USO, ConstantesSistema.SIM));
		
		Collection<ImovelPerfil> colecaoImovelPerfil = getControladorUtil().pesquisar(filtroImovelPerfil, ImovelPerfil.class.getName());
		
		if ( colecaoImovelPerfil != null && !colecaoImovelPerfil.isEmpty() ) {
			Iterator<ImovelPerfil> iteratorImovelPerfil = colecaoImovelPerfil.iterator();
			while( iteratorImovelPerfil.hasNext() ) {
				
				ImovelPerfil imovelPerfil = (ImovelPerfil) iteratorImovelPerfil.next();
				retorno.append("28|");
				retorno.append(Util.formatarCampoParaConcatenacao(imovelPerfil.getId().toString()));
				retorno.append(Util.formatarCampoParaConcatenacao(imovelPerfil.getDescricao()));
				retorno.append("\n");
				
			}
		}
		
		return retorno.toString();
	}
	
	/**
	 * Pesquisar Registro Tipo 30 - Cadastro Ocorrencia
	 * 
	 * @author Arthur Carvalho
	 * @date 13/12/2012
	 */
	private String gerarRegistroTipo30AC() throws ControladorException {
		StringBuilder retorno = new StringBuilder();
		
		FiltroCadastroOcorrencia filtroCadastroOcorrencia = new FiltroCadastroOcorrencia();
		filtroCadastroOcorrencia.adicionarParametro( new ParametroSimples( FiltroCadastroOcorrencia.INDICADOR_USO, ConstantesSistema.SIM));
		
		Collection<CadastroOcorrencia> colecaoCadastroOcorrencia = getControladorUtil().pesquisar(filtroCadastroOcorrencia, CadastroOcorrencia.class.getName());
		
		if ( colecaoCadastroOcorrencia != null && !colecaoCadastroOcorrencia.isEmpty() ) {
			Iterator<CadastroOcorrencia> iteratorCadastroOcorrencia = colecaoCadastroOcorrencia.iterator();
			while( iteratorCadastroOcorrencia.hasNext() ) {
				
				CadastroOcorrencia cadastroOcorrencia = (CadastroOcorrencia) iteratorCadastroOcorrencia.next();
				retorno.append("30|");
				retorno.append(Util.formatarCampoParaConcatenacao(cadastroOcorrencia.getId().toString()));
				retorno.append(Util.formatarCampoParaConcatenacao(cadastroOcorrencia.getDescricao()));
				retorno.append(Util.formatarCampoParaConcatenacao(cadastroOcorrencia.getIndicadorCamposObrigatoriosTablet()));
				retorno.append("\n");
				
			}
		}
		
		return retorno.toString();
	}
	
	/**
	 * Pesquisar Registro Tipo 31 - Unidade Federacao
	 * 
	 * @author Arthur Carvalho
	 * @date 13/12/2012
	 */
	private String gerarRegistroTipo31AC() throws ControladorException {
		StringBuilder retorno = new StringBuilder();
		
		FiltroUnidadeFederacao filtroUnidadeFederacao = new FiltroUnidadeFederacao();
		
		Collection<UnidadeFederacao> colecaoUnidadeFederacao = getControladorUtil().pesquisar(filtroUnidadeFederacao, UnidadeFederacao.class.getName());
		
		if ( colecaoUnidadeFederacao != null && !colecaoUnidadeFederacao.isEmpty() ) {
			Iterator<UnidadeFederacao> iteratorUnidadeFederacao = colecaoUnidadeFederacao.iterator();
			while( iteratorUnidadeFederacao.hasNext() ) {
				
				UnidadeFederacao unidadeFederacao = (UnidadeFederacao) iteratorUnidadeFederacao.next();
				retorno.append("31|");
				retorno.append(Util.formatarCampoParaConcatenacao(unidadeFederacao.getId().toString()));
				retorno.append(Util.formatarCampoParaConcatenacao(unidadeFederacao.getSigla()));
				retorno.append("\n");
				
			}
		}
		
		return retorno.toString();
	}
	
	/**
	 * Pesquisar Registro Tipo 32 - Hidrometro Marca
	 * 
	 * @author Arthur Carvalho
	 * @date 13/12/2012
	 */
	private String gerarRegistroTipo32AC() throws ControladorException {
		StringBuilder retorno = new StringBuilder();
		
		FiltroHidrometroMarca filtroHidrometroMarca = new FiltroHidrometroMarca();
		filtroHidrometroMarca.adicionarParametro( new ParametroSimples(FiltroHidrometroMarca.INDICADOR_USO, ConstantesSistema.SIM));
		
		Collection<HidrometroMarca> colecaoHidrometroMarca = getControladorUtil().pesquisar(filtroHidrometroMarca, HidrometroMarca.class.getName());
		
		if ( colecaoHidrometroMarca != null && !colecaoHidrometroMarca.isEmpty() ) {
			Iterator<HidrometroMarca> iteratorHidrometroMarca = colecaoHidrometroMarca.iterator();
			while( iteratorHidrometroMarca.hasNext() ) {
				
				HidrometroMarca hidrometroMarca = (HidrometroMarca) iteratorHidrometroMarca.next();
				retorno.append("32|");
				retorno.append(Util.formatarCampoParaConcatenacao(hidrometroMarca.getId().toString()));
				retorno.append(Util.formatarCampoParaConcatenacao(hidrometroMarca.getCodigoHidrometroMarca()));
				retorno.append("\n");
				
			}
		}
		
		return retorno.toString();
	}
	
	/**
	 * Pesquisar Registro Tipo 33 - Hidrometro Capacidade
	 * 
	 * @author Arthur Carvalho
	 * @date 13/12/2012
	 */
	private String gerarRegistroTipo33AC() throws ControladorException {
		StringBuilder retorno = new StringBuilder();
		
		FiltroHidrometroCapacidade filtroHidrometroCapacidade = new FiltroHidrometroCapacidade();
		filtroHidrometroCapacidade.adicionarParametro( new ParametroSimples(FiltroHidrometroCapacidade.INDICADOR_USO, ConstantesSistema.SIM));
		
		Collection<HidrometroCapacidade> colecaoHidrometroCapacidade = getControladorUtil().pesquisar(filtroHidrometroCapacidade, HidrometroCapacidade.class.getName());
		
		if ( colecaoHidrometroCapacidade != null && !colecaoHidrometroCapacidade.isEmpty() ) {
			Iterator<HidrometroCapacidade> iteratorHidrometroCapacidade = colecaoHidrometroCapacidade.iterator();
			while( iteratorHidrometroCapacidade.hasNext() ) {
				
				HidrometroCapacidade hidrometroCapacidade = (HidrometroCapacidade) iteratorHidrometroCapacidade.next();
				retorno.append("33|");
				retorno.append(Util.formatarCampoParaConcatenacao(hidrometroCapacidade.getId().toString()));
				retorno.append(Util.formatarCampoParaConcatenacao(hidrometroCapacidade.getCodigoHidrometroCapacidade()));
				retorno.append("\n");
				
			}
		}
		
		return retorno.toString();
	}

	/**
	 * Pesquisar Registro Tipo 34 - Cliente Tipo
	 * 
	 * @author Arthur Carvalho
	 * @date 13/12/2012
	 */
	private String gerarRegistroTipo34AC() throws ControladorException {
		StringBuilder retorno = new StringBuilder();
		
		FiltroClienteTipo filtroClienteTipo = new FiltroClienteTipo();
		filtroClienteTipo.adicionarParametro( new ParametroSimples(FiltroClienteTipo.INDICADOR_USO, ConstantesSistema.SIM));
		
		Collection<ClienteTipo> colecaoClienteTipo = getControladorUtil().pesquisar(filtroClienteTipo, ClienteTipo.class.getName());
		
		if ( colecaoClienteTipo != null && !colecaoClienteTipo.isEmpty() ) {
			Iterator<ClienteTipo> iteratorClienteTipo = colecaoClienteTipo.iterator();
			while( iteratorClienteTipo.hasNext() ) {
				
				ClienteTipo clienteTipo = (ClienteTipo) iteratorClienteTipo.next();
				retorno.append("34|");
				retorno.append(Util.formatarCampoParaConcatenacao(clienteTipo.getId().toString()));
				retorno.append(Util.formatarCampoParaConcatenacao(clienteTipo.getDescricao()));
				retorno.append(Util.formatarCampoParaConcatenacao(clienteTipo.getIndicadorPessoaFisicaJuridica()));
				retorno.append("\n");
				
			}
		}
		
		return retorno.toString();
	}
	
	
	/**
	 * Pesquisar Registro Tipo 35 - Medicao Tipo
	 * 
	 * @author Arthur Carvalho
	 * @date 13/12/2012
	 */
	private String gerarRegistroTipo35AC() throws ControladorException {
		StringBuilder retorno = new StringBuilder();
		
		FiltroMedicaoTipo filtroMedicaoTipo = new FiltroMedicaoTipo();
		filtroMedicaoTipo.adicionarParametro( new ParametroSimples(FiltroMedicaoTipo.INDICADOR_USO, ConstantesSistema.SIM));
		
		Collection<MedicaoTipo> colecaoMedicaoTipo = getControladorUtil().pesquisar(filtroMedicaoTipo, MedicaoTipo.class.getName());
		
		if ( colecaoMedicaoTipo != null && !colecaoMedicaoTipo.isEmpty() ) {
			Iterator<MedicaoTipo> iteratorMedicaoTipo = colecaoMedicaoTipo.iterator();
			while( iteratorMedicaoTipo.hasNext() ) {
				
				MedicaoTipo medicaoTipo = (MedicaoTipo) iteratorMedicaoTipo.next();
				retorno.append("35|");
				retorno.append(Util.formatarCampoParaConcatenacao(medicaoTipo.getId().toString()));
				retorno.append(Util.formatarCampoParaConcatenacao(medicaoTipo.getDescricao()));
				retorno.append("\n");
				
			}
		}
		
		return retorno.toString();
	}
	
	/**
	 * Pesquisar Registro Tipo 36 - Setor Comercial
	 * 
	 * @author Anderson Cabral
	 * @date 25/06/2013
	 */
	private String gerarRegistroTipo36AC(Collection<Integer> colecaoSetorComercial, Integer idLocalidade) throws ControladorException {
		StringBuilder retorno = new StringBuilder();

		for(Integer codigo : colecaoSetorComercial) {
			SetorComercial setorComercial =  getControladorCobranca().obterSetorComercialLocalidade(idLocalidade.toString(), codigo.toString());
			
			retorno.append("36|");
			retorno.append(Util.formatarCampoParaConcatenacao(setorComercial.getId()));
			retorno.append(Util.formatarCampoParaConcatenacao(setorComercial.getCodigo()));
			retorno.append(Util.formatarCampoParaConcatenacao(setorComercial.getDescricao()));
			retorno.append("\n");			
		}
		
		return retorno.toString();
	}

	/**
	 * [UC1428] Unificar ID de Clientes com o Mesmo Documento
	 * 
	 * 1. O sistema executa o step "Processar Unificar ID de Clientes com o Mesmo Documento"
	 *  
	 * @author Mariana Victor
	 * @date 21/01/2013
	 * 
	 * @throws ControladorException
	 */
	public void unificarIDClientesComMesmoDocumento(int idFuncionalidadeIniciada) 
			throws ControladorException {
		int idUnidadeIniciada = 0;

		/*
		 * Registrar o inicio do processamento da Unidade de
		 * Processamento do Batch
		*/		
		idUnidadeIniciada = getControladorBatch()
				.iniciarUnidadeProcessamentoBatch(
						idFuncionalidadeIniciada,
						UnidadeProcessamento.FUNCIONALIDADE,
						0);
		
		try {
			// 1.1.	O sistema seleciona os clientes que deverão ser unificados
			
			//[FE0001] Verificar Tabela Inexistente
			if (!this.repositorioUtil.verificarTabelaBancoOracleExistente(
					"DADOS_CLIENTES_RM7620")){
				ControladorException ex = new ControladorException(
						"Tabela DADOS_CLIENTES_RM7620 inexistente.");
				getControladorBatch().encerrarUnidadeProcessamentoBatch(
					ex,	idUnidadeIniciada, true);
				throw ex;
			}
			
			//[FE0002] Verificar Dados Armazenados.
			if (!this.repositorioCadastro
					.verificarDadosClientesParaUnificar()) {
				ControladorException ex = new ControladorException(
						"Nao existem dados inseridos na tabela DADOS_CLIENTES_RM7620.");
				getControladorBatch().encerrarUnidadeProcessamentoBatch(
					ex,	idUnidadeIniciada, true);
				throw ex;
			}
			
			boolean flagTerminou = false;
			final int quantidadeRegistros = 5000;

			while (!flagTerminou) {
				
				// 1.1.	O sistema seleciona os clientes que deverão ser unificados
				Collection<Object[]> colecaoClientesAtuais = 
						this.repositorioCadastro.obterClientesParaUnificar(
								quantidadeRegistros);
				
				if (colecaoClientesAtuais != null 
						&& !colecaoClientesAtuais.isEmpty()) {
				
					Iterator<Object[]> iteratorClientesAtuais = 
							colecaoClientesAtuais.iterator();
					
					while(iteratorClientesAtuais.hasNext()) {
						Object[] dadosClienteAtual = (Object[]) iteratorClientesAtuais.next();
						
						// [IT0003 - Obter Clientes]
						Short tipoDocumento = null;
						if (dadosClienteAtual[0] != null) {
							tipoDocumento = (Short) dadosClienteAtual[0];
						}
						
						// 1.1.	Código do Cliente Atual 
						String numeroCPF = null;
						// 1.2.	Número do CPF
						String numeroCNPJ = null;
						if (dadosClienteAtual[1] != null) {
							if (tipoDocumento != null && tipoDocumento.compareTo(ConstantesSistema.SIM) == 0) {
								numeroCPF = (String) dadosClienteAtual[1];
							} else {
								numeroCNPJ = (String) dadosClienteAtual[1];
							}
						}
						
						// 1.3.	Número do CNPJ
						Integer codigoClienteAtual = null;
						if (dadosClienteAtual[2] != null) {
							codigoClienteAtual = (Integer) dadosClienteAtual[2];
						}
						
						// 1.2.	Para cada linha obtida no passo 1.1 do fluxo principal pelo [IT0003]:
						// 1.2.1. O sistema seleciona os clientes que possuem o mesmo CPF/CNPJ 
						//   [IT0005 - Obter Clientes com mesmo CPF/CNPJ]
						Collection<Integer> colecaoClientesAnteriores = this.repositorioCadastro
								.obterClientesComMesmoCpfCnpj(codigoClienteAtual, numeroCPF, numeroCNPJ);
						if (colecaoClientesAnteriores != null 
								&& !colecaoClientesAnteriores.isEmpty()) {
							Iterator<Integer> iteratorClientesAnteriores = 
									colecaoClientesAnteriores.iterator();
							
							while(iteratorClientesAnteriores.hasNext()) {
								Integer codigoClienteAnterior = (Integer) iteratorClientesAnteriores.next();
								
								// 1.2.2.1.	O sistema seleciona os imóveis associados ao cliente 
								//  [IT0007 - Obter Imóveis Associados]
								Collection<Object[]> colecaoImoveis = this.repositorioClienteImovel
										.obterImoveisAssociados(codigoClienteAnterior);
								
								// 1.2.2.2.	O sistema atualiza o cadastro do cliente 
								//  [IT0008 - Atualizar Cadastro Cliente]
								this.atualizarCadastroCliente(codigoClienteAnterior, colecaoImoveis, 
									codigoClienteAtual, numeroCPF, numeroCNPJ);
								
							}
						}
						
						// 1.2.3. O sistema atualiza o registro do cliente unificado 
						//  [IT0013 - Atualizar Cliente Unificado]
						this.repositorioCadastro.atualizarClienteUnificado(codigoClienteAtual);
						
					}
					
				}
				
				/**
				 * Caso a coleção de dados retornados for menor que a
				 * quantidade de registros seta a flag indicando que a
				 * paginação terminou.
				 */
				if (colecaoClientesAtuais == null || 
						colecaoClientesAtuais.size() < quantidadeRegistros) {

					flagTerminou = true;
				}

				if (colecaoClientesAtuais != null) {
					colecaoClientesAtuais.clear();
					colecaoClientesAtuais = null;
				}
				
			}
			
			getControladorBatch().encerrarUnidadeProcessamentoBatch(
				null,idUnidadeIniciada, false);
			
		} catch (Exception ex) {
			sessionContext.setRollbackOnly();
			ex.printStackTrace();
			getControladorBatch().encerrarUnidadeProcessamentoBatch(
				ex,	idUnidadeIniciada, true);
			throw new EJBException(ex);
		}
	}

	/**
	 * [UC1428] Unificar ID de Clientes com o Mesmo Documento
	 * 
	 * [IT0009] Atualizar Cadastro Cliente
	 * 
	 * 1.2.2.1.	O sistema seleciona os imóveis associados ao cliente 
	 *  
	 * @author Mariana Victor
	 * @date 21/01/2013
	 * 
	 * @throws ControladorException
	 */
	private void atualizarCadastroCliente(Integer codigoClienteAnterior, 
			Collection<Object[]> colecaoImoveis, Integer codigoClienteAtual,
			String numeroCPF, String numeroCNPJ)
			throws ErroRepositorioException, ControladorException {
		
		// 1. Caso a lista de Matrícula do Imóvel possua um ou mais registros:
		if (colecaoImoveis != null 
				&& !colecaoImoveis.isEmpty()) {
			Iterator<Object[]> iteratorImoveis = 
					colecaoImoveis.iterator();
			
			while(iteratorImoveis.hasNext()) {
				Object[] dadosImovel = (Object[]) iteratorImoveis.next();
				Integer idImovel = (Integer) dadosImovel[0];
				Integer idRegistroAtualizar = (Integer) dadosImovel[1];
				Short indicadorNomeConta = (Short) dadosImovel[2];
				Integer clieRelacaoTipo = (Integer) dadosImovel[3];
				
				// 1. O sistema atualiza os registros da tabela CADASTRO.CLIENTE_IMOVEL
				this.repositorioClienteImovel.atualizarClienteImovel(idRegistroAtualizar);
				
				// 2.1.	Incluir um novo registro na tabela CADASTRO.CLIENTE_IMOVEL
				ClienteImovel clienteImovel = new ClienteImovel();
				clienteImovel.setDataInicioRelacao(new Date());
				clienteImovel.setDataFimRelacao(null);
				clienteImovel.setIndicadorNomeConta(indicadorNomeConta);
				clienteImovel.setUltimaAlteracao(new Date());
				clienteImovel.setClienteRelacaoTipo(new ClienteRelacaoTipo(clieRelacaoTipo));
				clienteImovel.setImovel(new Imovel(idImovel));
				clienteImovel.setCliente(new Cliente(codigoClienteAtual));
				clienteImovel.setClienteImovelFimRelacaoMotivo(null);
				this.getControladorBatch().inserirObjetoParaBatch(clienteImovel);
				
				// 2.2.	Incluir um novo registro na tabela CADASTRO.CLIENTE_UNIFICADO
				ClienteUnificado clienteUnificado = new ClienteUnificado();
				clienteUnificado.setClienteAtual(new Cliente(codigoClienteAtual));
				clienteUnificado.setClienteAnterior(new Cliente(codigoClienteAnterior));
				clienteUnificado.setCpf(numeroCPF);
				clienteUnificado.setCnpj(numeroCNPJ);
				clienteUnificado.setNomeClienteAtual(this.repositorioCliente
						.obterNomeCliente(codigoClienteAtual));
				clienteUnificado.setNomeClienteAnterior(this.repositorioCliente
						.obterNomeCliente(codigoClienteAnterior));
				clienteUnificado.setImovel(new Imovel(idImovel));
				clienteUnificado.setUltimaAlteracao(new Date());
				this.getControladorBatch().inserirObjetoParaBatch(clienteUnificado);
				
			}
		} else {
			// 2. Caso contrário, ou seja, não exista nenhum registro na lista de Matrícula do Imóvel, 
			//  o sistema deverá incluir um novo registro na tabela CADASTRO.CLIENTE_UNIFICADO 
			ClienteUnificado clienteUnificado = new ClienteUnificado();
			clienteUnificado.setClienteAtual(new Cliente(codigoClienteAtual));
			clienteUnificado.setClienteAnterior(new Cliente(codigoClienteAnterior));
			clienteUnificado.setCpf(numeroCPF);
			clienteUnificado.setCnpj(numeroCNPJ);
			clienteUnificado.setNomeClienteAtual(this.repositorioCliente
					.obterNomeCliente(codigoClienteAtual));
			clienteUnificado.setNomeClienteAnterior(this.repositorioCliente
					.obterNomeCliente(codigoClienteAnterior));
			clienteUnificado.setImovel(null);
			clienteUnificado.setUltimaAlteracao(new Date());
			this.getControladorBatch().inserirObjetoParaBatch(clienteUnificado);
		}
		
		// 3. O sistema atualiza o cliente na tabela CADASTRO.CLIENTE 
		this.repositorioCliente.atualizarClienteUnificado(codigoClienteAnterior);

		// 4.	O sistema atualiza o cliente unificado [IT0013 - Atualizar Cliente Unificado]
		this.repositorioCadastro.atualizarClienteUnificado(codigoClienteAnterior);
	}
	
	/**
	 * [UC1428] Unificar ID de Clientes com o Mesmo Documento
	 * 
	 * 2. O sistema executa o step "Gerar Relatorio de Clientes com o Mesmo Cpf/Cnpj"
	 *  
	 * @author Mariana Victor
	 * @date 22/01/2013
	 * 
	 * @throws ControladorException
	 */
	public void gerarRelatorioClientesMesmoCpfCnpj(int idFuncionalidadeIniciada, 
			Usuario usuario) throws ControladorException {
		
		int idUnidadeIniciada = 0;

		/*
		 * Registrar o inicio do processamento da Unidade de
		 * Processamento do Batch
		*/		
		idUnidadeIniciada = getControladorBatch()
				.iniciarUnidadeProcessamentoBatch(
						idFuncionalidadeIniciada,
						UnidadeProcessamento.FUNCIONALIDADE,
						0);
		
		try {
			// 2.1.	O sistema deverá obter as informações para a geração do relatório
			Collection<RelatorioClientesMesmoCpfCnpjHelper> colecaoHelper = 
					this.obterDadosClientesUnificados();
			
			Integer quantidadeRegistros = this.repositorioCadastro
					.obterTotalClientesAnteriores();
			
			if(quantidadeRegistros == null) {
				quantidadeRegistros = new Integer("0");
			}

			RelatorioClientesMesmoCpfCnpj relatorioClientesMesmoCpfCnpj = 
            	new RelatorioClientesMesmoCpfCnpj(usuario);

			relatorioClientesMesmoCpfCnpj.addParametro(
				"tipoFormatoRelatorio",TarefaRelatorio.TIPO_PDF);
			relatorioClientesMesmoCpfCnpj.addParametro(
				"colecaoHelper", colecaoHelper);
			relatorioClientesMesmoCpfCnpj.addParametro(
				"quantidadeRegistros", quantidadeRegistros);

            byte[] relatorioGerado = (byte[]) relatorioClientesMesmoCpfCnpj.executar();
            
            // 2.3.	Caso não tenha sido gerado nenhum dado para o relatório
            if (colecaoHelper == null 
            		|| colecaoHelper.isEmpty()) {

                EnvioEmail envioEmail = this.pesquisarEnvioEmail(
                                EnvioEmail.GERAR_RELATORIO_CLIENTES_MESMO_CPF_CNPJ_VAZIO);
                
                String emailRemetente = envioEmail.getEmailRemetente();					
				String emailDestinatario = envioEmail.getEmailReceptor();					
				String tituloMensagem = envioEmail.getTituloMensagem();					
				String mensagem = envioEmail.getCorpoMensagem();
			
				ServicosEmail.enviarMensagem(emailRemetente, emailDestinatario, tituloMensagem, 
					mensagem);
            
            } else {
            	// 2.4.	Caso contrário
                EnvioEmail envioEmail = this.pesquisarEnvioEmail(
                                EnvioEmail.GERAR_RELATORIO_CLIENTES_MESMO_CPF_CNPJ);
                
                String emailRemetente = envioEmail.getEmailRemetente();

                String tituloMensagem = envioEmail.getTituloMensagem();

                String corpoMensagem = envioEmail.getCorpoMensagem();
                String emailReceptor = envioEmail.getEmailReceptor();

                ZipOutputStream zos = null;
                FileOutputStream out = null;
            	
            	String nomeArquivo = "relatorio_clientes_mesmo_cpf_cnpj";
                
            	nomeArquivo = nomeArquivo.replace("/","");
            	
            	File leitura = new File(nomeArquivo +".pdf");
                File compactado = new File(nomeArquivo + ".zip");
    			zos = new ZipOutputStream(new FileOutputStream(compactado));
                
    			out = new FileOutputStream(leitura.getAbsolutePath());
                out.write(relatorioGerado);
                out.flush();
                
                ZipUtil.adicionarArquivo(zos, leitura);
    			
                ServicosEmail.enviarMensagemArquivoAnexado(emailReceptor,
               		emailRemetente, 
                    tituloMensagem, 
                    corpoMensagem, 
                    leitura);
                
                leitura.delete();

    	    	IoUtil.fecharStream(out);
    	    	IoUtil.fecharStream(zos);
            	
            }
			
			getControladorBatch().encerrarUnidadeProcessamentoBatch(
				null,idUnidadeIniciada, false);
			
		} catch (Exception ex) {
			
			getControladorBatch().encerrarUnidadeProcessamentoBatch(
				ex,	idUnidadeIniciada, true);
			
			ex.printStackTrace();
			throw new EJBException(ex);
		}
	}
	
	/**
	 * [UC1428] Unificar ID de Clientes com o Mesmo Documento
	 * 
	 * [IT0010] Obter Dados dos Clientes Unificados
	 * 
	 * 2.1.	O sistema deverá obter as informações para a geração do relatório
	 *  
	 * @author Mariana Victor
	 * @date 22/01/2013
	 * 
	 * @throws ControladorException
	 */
	private Collection<RelatorioClientesMesmoCpfCnpjHelper> obterDadosClientesUnificados() 
			throws ControladorException {

		Collection<RelatorioClientesMesmoCpfCnpjHelper> colecaoHelper = 
				new ArrayList<RelatorioClientesMesmoCpfCnpjHelper>();

		Collection<Object[]> colecaoDados = new ArrayList<Object[]>();

		try {
			colecaoDados = this.repositorioCadastro.obterDadosClientesUnificados();
			
			Iterator<Object[]> iteratorDados = colecaoDados.iterator();
			
			while (iteratorDados.hasNext()) {
				Object[] dados = (Object[]) iteratorDados.next();
				
				if (dados != null) {
					RelatorioClientesMesmoCpfCnpjHelper helper = new RelatorioClientesMesmoCpfCnpjHelper();
					
					// 1.1.	Código do Cliente Atual 
					if (dados[0] != null) {
						helper.setIdClienteAtual(
							((Integer) dados[0]).toString());
					}
					
					// 1.2.	Código do Cliente Anterior 
					if (dados[1] != null) {
						helper.setIdClienteAnterior(
							((Integer) dados[1]).toString());
					}
					
					// 1.3.	Documento do Cliente 
					if (dados[2] != null) {
						helper.setDocumento(
							Util.formatarCpf((String) dados[2]));
					} else if (dados[3] != null) {
						helper.setDocumento(
							Util.formatarCnpj((String) dados[3]));
					}
					
					// 1.4.	Nome do Cliente Atual 
					if (dados[4] != null) {
						helper.setNomeClienteAtual((String) dados[4]);
					}
					
					// 1.5.	Nome do Cliente Anterior 
					if (dados[5] != null) {
						helper.setNomeClienteAnterior((String) dados[5]);
					}
					
					// 1.6.	Matrícula do Imóvel 
					if (dados[6] != null) {
						helper.setImovel(
							(Util.retornaMatriculaImovelFormatada(
								(Integer) dados[6]).toString()));
					}

					colecaoHelper.add(helper);
				}
			}

		} catch (ErroRepositorioException e) {
			throw new ControladorException("erro.sistema", e);
		}

		return colecaoHelper;
	}
	
	/**
	 * 
	 * [UC1441] Efetuar Parcelamento Judicial
	 * [IT0005] Pesquisar Dados Registro Imóvel
	 * [IT0006] Obter Dados Registro Imóvel
	 * 
	 * @author Hugo Azevedo
	 * @date 19/03/2013
	 */
	public Collection<RegistroImovelHelper> obterDadosRegistroImovel(Integer idImovel) throws ControladorException{
		
		Collection<RegistroImovelHelper> retorno = new ArrayList<RegistroImovelHelper>();
		try{
			
			//[IT0005] Pesquisar Dados Registro Imóvel
			Collection<ClienteImovel> colecaoClienteImovel = repositorioCadastro.pesquisarDadosRegistroImovel(idImovel);
			
			//Para cada registro pesquisado o sistema deverá obter as seguintes informações:
			for(Iterator<ClienteImovel> it = colecaoClienteImovel.iterator();it.hasNext();){
				
				ClienteImovel clim = it.next();
				RegistroImovelHelper helper = new RegistroImovelHelper();
				
				//1. Matrícula do Imóvel
				helper.setImovel(clim.getImovel());
				
				//2. Nome do Cliente Usuário
				helper.setCliente(clim.getCliente());
				
				retorno.add(helper);
			}
			
		} catch (ErroRepositorioException e) {
			throw new ControladorException("erro.sistema", e);
		}
		return retorno;
	}
	
	/**
	 * [UC1443] - Gerar Relatorio de Novos Logradouros
	 * 
	 * @author Anderson Cabral
	 * @since 15/03/2013
	 * 
	 * @param idEmpresa
	 * @param idLocalidade
	 * @return  Collection<Object[]>
	 * @throws ControladorException
	 */
	public Collection<Object[]>  pesquisarLogradouroAtlzCadastral(String idEmpresa, String idLocalidade) throws ControladorException{
		
		try{
			return repositorioCadastro.pesquisarLogradouroAtlzCadastral(idEmpresa, idLocalidade);
			
		}catch ( Exception e ) {
			sessionContext.setRollbackOnly();
			throw new ControladorException("erro.sistema", e);
		}
	}
	
	/**
	 * [UC1443] - Gerar Relatorio de Novos Logradouros
	 * 
	 * @author Anderson Cabral
	 * @since 15/03/2013
	 * 
	 * @param idEmpresa
	 * @param idLocalidade
	 * @return  Collection<Object[]>
	 * @throws ControladorException
	 */
	public Collection<Object[]>  pesquisarLogradouroAtlzCad(String idEmpresa, String idLocalidade) throws ControladorException{
		
		try{
			return repositorioCadastro.pesquisarLogradouroAtlzCad(idEmpresa, idLocalidade);
			
		}catch ( Exception e ) {
			sessionContext.setRollbackOnly();
			throw new ControladorException("erro.sistema", e);
		}
	}
	
	/**
	 * [UC1443] - Gerar Relatorio de Novos Logradouros
	 * 
	 * @author Anderson Cabral
	 * @since 15/03/2013
	 * 
	 * @param idLogradouro
	 * @return  Collection<Object[]>
	 * @throws ControladorException
	 */
	public Collection<Object[]>  pesquisarLogradouroBairroAtlzCad(String idLogradouro) throws ControladorException{
		
		try{
			return repositorioCadastro.pesquisarLogradouroBairroAtlzCad(idLogradouro);
			
		}catch ( Exception e ) {
			sessionContext.setRollbackOnly();
			throw new ControladorException("erro.sistema", e);
		}
	}
	
	/**
	 * [UC1443] - Gerar Relatorio de Novos Logradouros
	 * 
	 * @author Anderson Cabral
	 * @since 15/03/2013
	 * 
	 * @param idLogradouro
	 * @return  Collection<Object[]>
	 * @throws ControladorException
	 */
	public Collection<Object[]>  pesquisarLogradouroCepAtlzCad(String idLogradouro) throws ControladorException{
		
		try{
			return repositorioCadastro.pesquisarLogradouroCepAtlzCad(idLogradouro);
			
		}catch ( Exception e ) {
			sessionContext.setRollbackOnly();
			throw new ControladorException("erro.sistema", e);
		}
	}
	
	/**
	 * [UC1393] Processar Requisições do Dispositivo Móvel Atualização Cadastral.
	 * 
	 * Recebe o dados de apenas um imóvel.
	 * 
	 * @author Rafael Pinto
	 * @date 20/03/2013
	 *  
	 * @param buffer BufferedReader
	 * @throws ControladorException
	 */	
	public void atualizarMovimentoImovelAtualizacaoCadastral(BufferedReader buffer) throws ControladorException{
		
		String idComando = "0";
		String linha = "";
		
		String REGISTRO_TIPO_FINALIZA_ARQUIVO = "00";
		String REGISTRO_TIPO_CEP = "01";
		String REGISTRO_TIPO_LOGRADOURO = "02";
		String REGISTRO_TIPO_LOGRADOURO_BAIRRO = "03";
		String REGISTRO_TIPO_LOGRADOURO_CEP = "04";
		String REGISTRO_TIPO_IMOVEL = "05";
		String REGISTRO_TIPO_CLIENTE = "06";
		String REGISTRO_TIPO_CLIENTE_FONE = "07";
		String REGISTRO_TIPO_HIDROMETRO = "08";
		String REGISTRO_TIPO_SUBCATEGORIA = "09";
		String REGISTRO_TIPO_OCORRENCIA = "10";
		String REGISTRO_TIPO_USUARIO_SEM_LOGIN = "13";
		
		AtualizacaoCadastralArquivoTexto atualizacaoCadastralArquivoTexto = null;
		
		try{
		
			if(buffer == null){
				throw new ControladorException("Arquivo de Atualização Cadastral sem dados");
			}
			boolean imovelNaoTransmitido = true; 
			
			ImovelAtualizacaoCadastral imovel = new ImovelAtualizacaoCadastral();
			Integer idImovelAtualizacaoCadastral = null;
			while((linha = buffer.readLine()) != null){
				
				String tipoRegistro = linha.substring(0, 2);
				List<String> colArquivos = new ArrayList<String>();
				
				colArquivos = Util.split(linha);
				
				System.out.println("INICIO-ATUALIZA O MOVIMENTO IMOVEL ATUALIZACAO CADASTRAL: CRIA REGISTRO");
				
				if(tipoRegistro.equals(REGISTRO_TIPO_USUARIO_SEM_LOGIN)){
					throw new ControladorException("atencao.arquivo_usuario_sem_login");
				} else if(tipoRegistro.equals(REGISTRO_TIPO_FINALIZA_ARQUIVO)){
					
					idComando = (colArquivos.get(1));
					
					System.out.println("INICIO-ATUALIZA O MOVIMENTO IMOVEL ATUALIZACAO CADASTRAL: CRIA REGISTRO DADOS PARAMETROS");
					
					FiltroAtualizacaoCadastralArquivoTexto filtro = new FiltroAtualizacaoCadastralArquivoTexto();
					
					filtro.adicionarParametro(new ParametroSimples(FiltroAtualizacaoCadastralArquivoTexto.ID_PARAMETRO_TABELA_ATUALIZACAO_CADASTRO, idComando));
					filtro.adicionarCaminhoParaCarregamentoEntidade(FiltroAtualizacaoCadastralArquivoTexto.PARAMETRO_TABELA_ATUALIZACAO_CADASTRO);
					filtro.adicionarCaminhoParaCarregamentoEntidade(FiltroAtualizacaoCadastralArquivoTexto.EMPRESA);
					
					Collection<AtualizacaoCadastralArquivoTexto> colArquivoTexto = 
							this.getControladorUtil().pesquisar(filtro, AtualizacaoCadastralArquivoTexto.class.getName());
					
					atualizacaoCadastralArquivoTexto = (AtualizacaoCadastralArquivoTexto) Util.retonarObjetoDeColecao(colArquivoTexto);
					
					if(atualizacaoCadastralArquivoTexto != null && 
							atualizacaoCadastralArquivoTexto.getSituacaoTransmissaoLeitura().getId().equals(SituacaoTransmissaoLeitura.EM_CAMPO)){
						
						SituacaoTransmissaoLeitura situacaoTransmissaoLeitura = new SituacaoTransmissaoLeitura();
						situacaoTransmissaoLeitura.setId(SituacaoTransmissaoLeitura.TRANSMITIDO);
						
						atualizacaoCadastralArquivoTexto.setSituacaoTransmissaoLeitura(situacaoTransmissaoLeitura);
						
						/*
						 * @author Jonathan Marcos
						 * @date 13/02/2014
						 * [OBSERVACOES]
						 * 		- [SB0014] ATUALIZAR A SITUACAO DO ARQUIVO FINALIZADO
						 * 		  SETA A DATA CORRENTE DE FINALIZACAO DO ARQUIVO
						 */
						atualizacaoCadastralArquivoTexto.setDataFinalizacaoArquivo(new Date());
						
						/*
						 * @author Jonathan Marcos
						 * @date 08/04/2014
						 * RM10592
						 * [OBSERVACOES]
						 * 		- Inconsistencia do que foi solicitado no RM 9795 
						 * 		  quando a proposta entrou em producao (RM 10399 COMPESA)
						 * 		  (O PROBLEMA EH QUE A DATA DA ULTIMA ALTERACAO NAO ESTAVA
						 * 			SENDO SETADA QUANDO MUDAVA A SITUACAO DO ARQUIVO
						 * 			PARA FINALIZADO)
						 */
						atualizacaoCadastralArquivoTexto.setUltimaAlteracao(new Date());
						
						repositorioUtil.atualizar(atualizacaoCadastralArquivoTexto);
						
						//Atualizar Situacao de transmissao do imóvel -- Libera para um novo roteiro todos os imoveis que nao foram atualizados desse comando.
						repositorioImovel.atualizarSituacaoTransmissaoImovel(Integer.valueOf(idComando));
						
					} else {
						throw new ControladorException("atencao.arquivo_finalizado");
					}
					
					System.out.println("FIM-ATUALIZA O MOVIMENTO IMOVEL ATUALIZACAO CADASTRAL: CRIA REGISTRO DADOS PARAMETROS");
					
				}else if(tipoRegistro.equals(REGISTRO_TIPO_CEP)){
					
					System.out.println("INICIO-ATUALIZA O MOVIMENTO IMOVEL ATUALIZACAO CADASTRAL: CRIA REGISTRO DADOS CEP");
					
					FiltroCepAtlzCad filtroCepAtlzCad = new FiltroCepAtlzCad();
					filtroCepAtlzCad.adicionarParametro( new ParametroSimples( FiltroCepAtlzCad.ID_CEP_ATLZ_CAD, colArquivos.get(1)));
					
					Collection<CepAtlzCad> colecaoCep = this.getControladorUtil().pesquisar(filtroCepAtlzCad, CepAtlzCad.class.getName());
					
					CepAtlzCad ceAtlzCad = adicionarCepAtlzCad(colArquivos);
					if ( colecaoCep != null && !colecaoCep.isEmpty() ) {
						getControladorUtil().atualizar(ceAtlzCad);
					} else {
						getControladorUtil().inserir(ceAtlzCad);
					}
					
					System.out.println("FIM-ATUALIZA O MOVIMENTO IMOVEL ATUALIZACAO CADASTRAL: CRIA REGISTRO DADOS CEP");
				
				} else if(tipoRegistro.equals(REGISTRO_TIPO_LOGRADOURO)){
					
					System.out.println("INICIO-ATUALIZA O MOVIMENTO IMOVEL ATUALIZACAO CADASTRAL: CRIA REGISTRO DADOS LOGRADOURO");
					
					FiltroLogradouroAtlzCad filtroLogradouroAtlzCad = new FiltroLogradouroAtlzCad();
					filtroLogradouroAtlzCad.adicionarParametro( 
						new ParametroSimples(FiltroLogradouroAtlzCad.CODIGO, colArquivos.get(1)));
					
					Collection<LogradouroAtlzCad> colecaoLogradouroAtlzCad = 
						this.getControladorUtil().pesquisar(filtroLogradouroAtlzCad, LogradouroAtlzCad.class.getName());
					
					//Caso já tenha inserido o logradouro , não existe mais a necessidade de inserir o mesmo logradouro
					if(colecaoLogradouroAtlzCad == null || colecaoLogradouroAtlzCad.isEmpty()){
						LogradouroAtlzCad logradouroAtlzCad = adicionarLogradouroAtlzCad(colArquivos);
						getControladorUtil().inserir(logradouroAtlzCad);
					} else {
						//Caso transmita um logradouro ja atualizado pro gsan.
						LogradouroAtlzCad logradouroAtlzCad  = (LogradouroAtlzCad) Util.retonarObjetoDeColecao(colecaoLogradouroAtlzCad);
						if ( logradouroAtlzCad.getIndicadorAtualizado().equals(ConstantesSistema.SIM) ) {
							logradouroAtlzCad.setIndicadorAtualizado(ConstantesSistema.NAO);
							getControladorUtil().atualizar(logradouroAtlzCad);	
						}
					}
					
					System.out.println("FIM-ATUALIZA O MOVIMENTO IMOVEL ATUALIZACAO CADASTRAL: CRIA REGISTRO DADOS LOGRADOURO");
					
				} else if( tipoRegistro.equals(REGISTRO_TIPO_LOGRADOURO_BAIRRO)){
					
					System.out.println("INICIO-ATUALIZA O MOVIMENTO IMOVEL ATUALIZACAO CADASTRAL: CRIA REGISTRO DADOS LOGRADOURO BAIRRO");
					
					String codigo = colArquivos.get(1); 
					Bairro bairro = new Bairro();
					bairro.setId(Integer.valueOf(colArquivos.get(2)));
					
					
					FiltroLogradouroBairroAtlzCad filtroLogradouroBairroAtlzCad = new FiltroLogradouroBairroAtlzCad();
					filtroLogradouroBairroAtlzCad.adicionarParametro( new ParametroSimples(FiltroLogradouroBairroAtlzCad.ID_BAIRRO, bairro.getId()));
					filtroLogradouroBairroAtlzCad.adicionarParametro( new ParametroSimples(FiltroLogradouroBairroAtlzCad.CODIGO_LOGRADOURO_ATLZ_CAD, codigo));
					
					Collection<LogradouroBairroAtlzCad> colecaoLogradouroBairroAtlzCad = getControladorUtil().pesquisar(filtroLogradouroBairroAtlzCad, LogradouroBairroAtlzCad.class.getName());
					
					if ( colecaoLogradouroBairroAtlzCad == null || colecaoLogradouroBairroAtlzCad.isEmpty() ){
						LogradouroBairroAtlzCad logradouroBairroAtlzCad = adicionarLogradouroBairroAtlzCad(colArquivos);
						getControladorUtil().inserir(logradouroBairroAtlzCad);
					}
					
					System.out.println("FIM-ATUALIZA O MOVIMENTO IMOVEL ATUALIZACAO CADASTRAL: CRIA REGISTRO DADOS LOGRADOURO BAIRRO");
					
				}  else if( tipoRegistro.equals(REGISTRO_TIPO_LOGRADOURO_CEP)){
					
					System.out.println("INICIO-ATUALIZA O MOVIMENTO IMOVEL ATUALIZACAO CADASTRAL: CRIA REGISTRO DADOS LOGRADOURO CEP");
					
					String codigoCep = colArquivos.get(1);
					CepAtlzCad cepAtlzCad = new CepAtlzCad();
					cepAtlzCad.setId(codigoCep);
					String codigo = colArquivos.get(2); 
					
					
					FiltroLogradouroCepAtlzCad filtroLogradouroCepAtlzCad = new FiltroLogradouroCepAtlzCad();
					filtroLogradouroCepAtlzCad.adicionarParametro( new ParametroSimples( FiltroLogradouroCepAtlzCad.ID_CEP_ATLZ_CAD, cepAtlzCad.getId()));
					filtroLogradouroCepAtlzCad.adicionarParametro( new ParametroSimples( FiltroLogradouroCepAtlzCad.CODIGO_LOGRADOURO_ATLZ_CAD, codigo));
					
					Collection<LogradouroCepAtlzCad> colecaoLogradouroCepAtlzCad = getControladorUtil().pesquisar(filtroLogradouroCepAtlzCad, LogradouroCepAtlzCad.class.getName());
					
					if ( colecaoLogradouroCepAtlzCad == null || colecaoLogradouroCepAtlzCad.isEmpty() ) {
						LogradouroCepAtlzCad logradouroCepAtlzCad = adicionarLogradouroCepAtlzCad(colArquivos);
						getControladorUtil().inserir(logradouroCepAtlzCad);	
					}
					
					System.out.println("FIM-ATUALIZA O MOVIMENTO IMOVEL ATUALIZACAO CADASTRAL: CRIA REGISTRO DADOS LOGRADOURO CEP");
				} else if( tipoRegistro.equals(REGISTRO_TIPO_IMOVEL)){
					
					System.out.println("INICIO-ATUALIZA O MOVIMENTO IMOVEL ATUALIZACAO CADASTRAL: CRIA REGISTRO DADOS  IMOVEL");
					
					
					if ( colArquivos.get(2) != null && !colArquivos.get(2).equals("") && Integer.valueOf(colArquivos.get(2)) > 0) {
						Integer quantidade = repositorioCadastro.pesquisarImovelAtlzCadastralJaTransmitido(Integer.valueOf(colArquivos.get(2)), Integer.valueOf(colArquivos.get(26)));
						
						if ( quantidade != null && quantidade > 0 ) {
							imovelNaoTransmitido = false;
						}else{
							imovelNaoTransmitido = true;	
						}
						
					//Caso não tenha id do imovel, é inclusão do imovel
					} else {
						
						Integer quantidade = repositorioCadastro.pesquisarImovelAtlzCadastralNovoJaTransmitido(colArquivos.get(25), Integer.valueOf(colArquivos.get(26)));
						
						if ( quantidade != null && quantidade > 0 ) {
							imovelNaoTransmitido = false;
						}else{
							imovelNaoTransmitido = true;	
						}
						
					}
					
					//verifica se o imovel inserido anteriormente, esta integro, sem inconsistencias no ambiente pre-gsan
					if ( idImovelAtualizacaoCadastral != null ) {
						validaIntegridadeImovelAnterior(idImovelAtualizacaoCadastral);
					}
					
					
					if ( imovelNaoTransmitido ) { 
						imovel = adicionarImovelAtualizacaoCadastral(colArquivos);
						getControladorUtil().inserir(imovel);
						//atualiza o codigo do imovel.
						idImovelAtualizacaoCadastral = imovel.getId();
					}
					System.out.println("FIM-ATUALIZA O MOVIMENTO IMOVEL ATUALIZACAO CADASTRAL: CRIA REGISTRO DADOS  IMOVEL");
				} else if( tipoRegistro.equals(REGISTRO_TIPO_CLIENTE)){
					if ( imovelNaoTransmitido ) { 
						System.out.println("INICIO-ATUALIZA O MOVIMENTO IMOVEL ATUALIZACAO CADASTRAL: CRIA REGISTRO DADOS  CLIENTE");
						
						ClienteAtualizacaoCadastral clienteAtualizacaoCadastral = adicionarClienteAtualizacaoCadastral(colArquivos);
						getControladorUtil().inserir(clienteAtualizacaoCadastral);
						
						System.out.println("FIM-ATUALIZA O MOVIMENTO IMOVEL ATUALIZACAO CADASTRAL: CRIA REGISTRO DADOS  CLIENTE");
					}
				} else if( tipoRegistro.equals(REGISTRO_TIPO_CLIENTE_FONE)){
					if ( imovelNaoTransmitido ) { 
						System.out.println("INICIO-ATUALIZA O MOVIMENTO IMOVEL ATUALIZACAO CADASTRAL: CRIA REGISTRO DADOS  CLIENTE FONE");
						
						ClienteFoneAtualizacaoCadastral clienteFoneAtualizacaoCadastral = adicionarClienteFoneAtualizacaoCadastral(colArquivos);
						getControladorUtil().inserir(clienteFoneAtualizacaoCadastral);
						
						System.out.println("FIM-ATUALIZA O MOVIMENTO IMOVEL ATUALIZACAO CADASTRAL: CRIA REGISTRO DADOS  CLIENTE FONE");
					}
				} else if( tipoRegistro.equals(REGISTRO_TIPO_HIDROMETRO)){
					if ( imovelNaoTransmitido ) { 
						System.out.println("INICIO-ATUALIZA O MOVIMENTO IMOVEL ATUALIZACAO CADASTRAL: CRIA REGISTRO DADOS hidrometro");
						
						HidrometroInstalacaoHistoricoAtualizacaoCadastral hidrometro = adicionarHidrometroInstalacaoHistoricoAtualizacaoCadastral(colArquivos);
						getControladorUtil().inserir(hidrometro);
						
						System.out.println("FIM-ATUALIZA O MOVIMENTO IMOVEL ATUALIZACAO CADASTRAL: CRIA REGISTRO DADOS  hidrometro");
					}
				} else if( tipoRegistro.equals(REGISTRO_TIPO_SUBCATEGORIA)){
					if ( imovelNaoTransmitido ) { 
						System.out.println("INICIO-ATUALIZA O MOVIMENTO IMOVEL ATUALIZACAO CADASTRAL: CRIA REGISTRO DADOS ImovelSubcategoriaAtualizacaoCadastral");
						
						ImovelSubcategoriaAtualizacaoCadastral subcategoria = adicionarImovelSubcategoriaAtualizacaoCadastral(colArquivos);
						getControladorUtil().inserir(subcategoria);
						
						System.out.println("FIM-ATUALIZA O MOVIMENTO IMOVEL ATUALIZACAO CADASTRAL: CRIA REGISTRO DADOS  ImovelSubcategoriaAtualizacaoCadastral");
					}
				} else if( tipoRegistro.equals(REGISTRO_TIPO_OCORRENCIA)){
					if ( imovelNaoTransmitido ) { 
						System.out.println("INICIO-ATUALIZA O MOVIMENTO IMOVEL ATUALIZACAO CADASTRAL: CRIA REGISTRO DADOS OCORRENCIA CADASTRO ATLZ CAD");
						
						ImovelOcorrenciaAtualizacaoCadastral ocorrencia = adicionarImovelOcorrenciaAtualizacaoCadastral(colArquivos);
						getControladorUtil().inserir(ocorrencia);
						
						System.out.println("FIM-ATUALIZA O MOVIMENTO IMOVEL ATUALIZACAO CADASTRAL: CRIA REGISTRO DADOS  OCORRENCIA CADASTRO ATLZ CAD");
					}
				} 
				
				
				System.out.println("FIM-ATUALIZA O MOVIMENTO IMOVEL ATUALIZACAO CADASTRAL: CRIA REGISTRO ");
			}

		
		}catch(Exception ex){
			throw new ControladorException(ex.getMessage(), ex);
		}
	}
	
	/**
	 * Metodo responsavel por verificar se o imovel foi inserido com sucesso apos o carregamento do arquivo de retorno.
	 * 
	 * @param codigoImovel
	 * @throws ControladorException
	 */
	private void validaIntegridadeImovelAnterior(Integer idImovelAtualizacaoCadastral) throws ControladorException {
		
		
		try {
			Integer quantidade = repositorioCadastro.pesquisarIntegridadeImovelAtualizacaoCadastral(idImovelAtualizacaoCadastral);
			
			//caso o imovel nao tenha todos os itens obrigatorios
			//categoria | ocorrencia | cliente
			if ( quantidade == null || quantidade < 1) {
				
				repositorioCadastro.excluirDadosImovelAtualizacaoCadastral(idImovelAtualizacaoCadastral);
				throw new ControladorException("atencao.carregamento_arquivo_retorno_com_imoveis_sem_integridade");
			}
		} catch (ErroRepositorioException e) {
			e.printStackTrace();
		}
	}
	
	
	private CepAtlzCad adicionarCepAtlzCad(List<String> colArquivos){
		
		
		CepAtlzCad cepAtlzCad = new CepAtlzCad();
		cepAtlzCad.setId(colArquivos.get(1));
		cepAtlzCad.setCodigoCep(Integer.parseInt(colArquivos.get(2)));
		cepAtlzCad.setUltimaAlteracao(new Date());
		
		
		return cepAtlzCad;
	}
	
	private LogradouroAtlzCad adicionarLogradouroAtlzCad(List<String> colArquivos){
		
		LogradouroAtlzCad logradouroAtlzCad = new LogradouroAtlzCad();
		logradouroAtlzCad.setCodigo(colArquivos.get(1));
		logradouroAtlzCad.setNome(colArquivos.get(2));
		logradouroAtlzCad.setNomePopular(colArquivos.get(3));
		logradouroAtlzCad.setNomeLoteamento(colArquivos.get(4));
		
		Municipio municipio = new Municipio();
		if ( colArquivos.get(5) != null ) {
			municipio.setId(Integer.valueOf(colArquivos.get(5)));
		}
		logradouroAtlzCad.setMunicipio(municipio);
		
		LogradouroTipo logradouroTipo = new LogradouroTipo();
		if ( Util.validarCamposAtualizacaoCadastral( colArquivos.get(6) ) ) {
			logradouroTipo.setId(Integer.valueOf(colArquivos.get(6)));
		}
		logradouroAtlzCad.setLogradouroTipo(logradouroTipo);
		
		LogradouroTitulo logradouroTitulo = new LogradouroTitulo();
		if ( Util.validarCamposAtualizacaoCadastral( colArquivos.get(7) ) ) {
			 logradouroTitulo.setId(Integer.valueOf(colArquivos.get(7)));
		}
		
		logradouroAtlzCad.setLogradouroTitulo(logradouroTitulo);
		
		logradouroAtlzCad.setUltimaAlteracao(new Date());
		
		logradouroAtlzCad.setIndicadorAtualizado(ConstantesSistema.NAO);
		
		Localidade localidade = new Localidade();
		localidade.setId(Integer.valueOf(colArquivos.get(8)));
		logradouroAtlzCad.setLocalidade(localidade);
		
		Empresa empresa = new Empresa();
		empresa.setId(Integer.valueOf(colArquivos.get(9)));
		logradouroAtlzCad.setEmpresa(empresa);
		
		return logradouroAtlzCad;
	}
	
	private LogradouroBairroAtlzCad adicionarLogradouroBairroAtlzCad(List<String> colArquivos){
		
		LogradouroBairroAtlzCad logradouroBairroAtlzCad = new LogradouroBairroAtlzCad();
		
		try {
			
			String codigo = colArquivos.get(1); 
			FiltroLogradouroAtlzCad filtroLogradouroAtlzCad = new FiltroLogradouroAtlzCad();
			filtroLogradouroAtlzCad.adicionarParametro( new ParametroSimples(FiltroLogradouroAtlzCad.CODIGO, codigo));
			Collection<LogradouroAtlzCad> colecaoLogradouroAtlzCad = this.getControladorUtil().pesquisar(filtroLogradouroAtlzCad, LogradouroAtlzCad.class.getName());
			LogradouroAtlzCad logradouroAtlzCad = (LogradouroAtlzCad) Util.retonarObjetoDeColecao(colecaoLogradouroAtlzCad);
			
			logradouroBairroAtlzCad.setLogradouroAtlzCad(logradouroAtlzCad);
			
			Bairro bairro = new Bairro();
			bairro.setId(Integer.valueOf(colArquivos.get(2)));
			
			logradouroBairroAtlzCad.setBairro(bairro);
			logradouroBairroAtlzCad.setUltimaAlteracao(new Date());
		} catch (ControladorException e) {
			e.printStackTrace();
		} 
		
		
				
		return logradouroBairroAtlzCad;
	}
	
	private LogradouroCepAtlzCad adicionarLogradouroCepAtlzCad(List<String> colArquivos){
		
		LogradouroCepAtlzCad logradouroCepAtlzCad = new LogradouroCepAtlzCad();
		
		try {
			
			String codigoCep = colArquivos.get(1);
			CepAtlzCad cepAtlzCad = new CepAtlzCad();
			cepAtlzCad.setId(codigoCep);
			logradouroCepAtlzCad.setCepAtlzCad(cepAtlzCad);
			
			String codigo = colArquivos.get(2); 
			FiltroLogradouroAtlzCad filtroLogradouroAtlzCad = new FiltroLogradouroAtlzCad();
			filtroLogradouroAtlzCad.adicionarParametro( new ParametroSimples(FiltroLogradouroAtlzCad.CODIGO, codigo));
			
			
			Collection<LogradouroAtlzCad> colecaoLogradouroAtlzCad = this.getControladorUtil().pesquisar(filtroLogradouroAtlzCad, LogradouroAtlzCad.class.getName());
			LogradouroAtlzCad logradouroAtlzCad = (LogradouroAtlzCad) Util.retonarObjetoDeColecao(colecaoLogradouroAtlzCad);
			logradouroCepAtlzCad.setLogradouroAtlzCad(logradouroAtlzCad);
			logradouroCepAtlzCad.setUltimaAlteracao(new Date());
			
		} catch (ControladorException e) {
			e.printStackTrace();
		} 

		return logradouroCepAtlzCad;
	}
	
	private ImovelAtualizacaoCadastral adicionarImovelAtualizacaoCadastral(List<String> colArquivos){
		
		ImovelAtualizacaoCadastral imovelAtualizacaoCadastral = new ImovelAtualizacaoCadastral();
			
		imovelAtualizacaoCadastral.setId(Integer.valueOf(colArquivos.get(1))); 
		
		if ( colArquivos.get(2) != null && !colArquivos.get(2).equals("") ) {
			imovelAtualizacaoCadastral.setImovel(Integer.valueOf(colArquivos.get(2)));
		}
		
		imovelAtualizacaoCadastral.setIdMunicipio(Integer.valueOf(colArquivos.get(3)));
		imovelAtualizacaoCadastral.setIdLocalidade(Integer.valueOf(colArquivos.get(4)));
		imovelAtualizacaoCadastral.setCodigoSetorComercial(Integer.valueOf(colArquivos.get(5)));
		imovelAtualizacaoCadastral.setNumeroQuadra(Integer.valueOf(colArquivos.get(6)));
		imovelAtualizacaoCadastral.setLote(Short.valueOf(colArquivos.get(7)));
		imovelAtualizacaoCadastral.setSubLote(Short.valueOf(colArquivos.get(8)));
		imovelAtualizacaoCadastral.setIdLogradouro(Long.valueOf(colArquivos.get(9)));
		if ( Util.validarCamposAtualizacaoCadastral( colArquivos.get(10) )  ) {
			imovelAtualizacaoCadastral.setIdEnderecoReferencia(Integer.valueOf(colArquivos.get(10)));
		}
		
		//O tratamento desse caracter foi feito pelo tablet, 
		//mais por segurança foi colocado o tratamento no retorno
		//Rafael Pinto
		//11/10/2013
		String complemento = colArquivos.get(12);
		if(complemento != null && (complemento.contains("Â½") || complemento.contains("Â") ) ){

			int posicaoInicial = complemento.indexOf("Ã");
			
			int posicaoFinal = ConstantesSistema.NUMERO_NAO_INFORMADO;
			if(complemento.contains("½")){
				posicaoFinal = complemento.indexOf("½")+1;
			}else if (complemento.contains("¿")){
				posicaoFinal = complemento.indexOf("¿")+1;
			}else if (complemento.contains("Â")){
				posicaoFinal = complemento.indexOf("Â")+1;
			}

			if(posicaoInicial >= 0 && posicaoFinal >= 0){
				String caracterInvalido = complemento.substring(posicaoInicial, posicaoFinal);
				complemento = complemento.replace(caracterInvalido, "");
			}
		}
		
		String numeroImovel = colArquivos.get(11);
		if(numeroImovel != null && (numeroImovel.contains("Â½") || numeroImovel.contains("Â") )){
			
			int posicaoInicial = numeroImovel.indexOf("Ã");
			
			int posicaoFinal = ConstantesSistema.NUMERO_NAO_INFORMADO;
			if(numeroImovel.contains("½")){
				posicaoFinal = numeroImovel.indexOf("½")+1;
			}else if (numeroImovel.contains("¿")){
				posicaoFinal = numeroImovel.indexOf("¿")+1;
			}else if (numeroImovel.contains("Â")){
				posicaoFinal = numeroImovel.indexOf("Â")+1;
			}
			
			if(posicaoInicial >= 0 && posicaoFinal >= 0){
				String caracterInvalido = numeroImovel.substring(posicaoInicial, posicaoFinal);
				numeroImovel = numeroImovel.replace(caracterInvalido, "");
			}
		}
		
		imovelAtualizacaoCadastral.setNumeroImovel(numeroImovel);
		imovelAtualizacaoCadastral.setComplementoEndereco(Util.completaString(complemento, 25));
		imovelAtualizacaoCadastral.setIdLogradouroBairro(Integer.valueOf(colArquivos.get(13)));
		imovelAtualizacaoCadastral.setIdLogradouroCep(Integer.valueOf(colArquivos.get(14)));
		imovelAtualizacaoCadastral.setIdImovelPerfil(Integer.valueOf(colArquivos.get(15)));
		imovelAtualizacaoCadastral.setNumeroMedidirEnergia(colArquivos.get(16));
		
		if ( colArquivos.get(17)!= null && !colArquivos.get(17).toString().trim().equals("") ) {
			imovelAtualizacaoCadastral.setNumeroMorador(Short.valueOf(colArquivos.get(17)));
		}
		
		imovelAtualizacaoCadastral.setIdPavimentoRua(Integer.valueOf(colArquivos.get(18)));
		imovelAtualizacaoCadastral.setIdPavimentoCalcada(Integer.valueOf(colArquivos.get(19)));
		imovelAtualizacaoCadastral.setIdFonteAbastecimento(Integer.valueOf(colArquivos.get(20)));
		imovelAtualizacaoCadastral.setIdLigacaoAguaSituacao(Integer.valueOf(colArquivos.get(21)));
		imovelAtualizacaoCadastral.setIdLigacaoEsgotoSituacao(Integer.valueOf(colArquivos.get(22)));
		imovelAtualizacaoCadastral.setIndicadorAlertaTarifaSocial(Short.valueOf(colArquivos.get(23)));
		
		if(colArquivos.get(24) != null && colArquivos.get(24).length() > 10){
			imovelAtualizacaoCadastral.setDataVisita(Util.converteStringParaDateHora(colArquivos.get(24)));
		}else{
			imovelAtualizacaoCadastral.setDataVisita(Util.converteStringParaDate(colArquivos.get(24)));
		}
		
		imovelAtualizacaoCadastral.setCodigo(colArquivos.get(25));
		ParametroTabelaAtualizacaoCadastro parametroTabelaAtualizacaoCadastro = new ParametroTabelaAtualizacaoCadastro();
		parametroTabelaAtualizacaoCadastro.setId(Integer.valueOf(colArquivos.get(26)));
		imovelAtualizacaoCadastral.setParametroTabelaAtualizacaoCadastro(parametroTabelaAtualizacaoCadastro);
		imovelAtualizacaoCadastral.setIdBairro(Integer.valueOf(colArquivos.get(27)));
		imovelAtualizacaoCadastral.setCodigoCep(Integer.valueOf(colArquivos.get(28)));
		imovelAtualizacaoCadastral.setDescricaoObservacao(colArquivos.get(29));
		imovelAtualizacaoCadastral.setIdEmpresa(Integer.valueOf(colArquivos.get(30)));
		imovelAtualizacaoCadastral.setLogin(colArquivos.get(31));
		
		String indicadorImovelNovoComMatricula = colArquivos.get(33);
		
		imovelAtualizacaoCadastral.setIndicadorAtualizado(ConstantesSistema.NAO);
		imovelAtualizacaoCadastral.setIndicadorExclusao(ConstantesSistema.NAO);
		imovelAtualizacaoCadastral.setIndicadorPendente(ConstantesSistema.NAO);
		imovelAtualizacaoCadastral.setIndicadorDadosRetorno(Short.valueOf("3"));
		imovelAtualizacaoCadastral.setIndicadorBairroNovo(ConstantesSistema.NAO);
		imovelAtualizacaoCadastral.setIndicadorLogradouroNovo(ConstantesSistema.NAO);
		imovelAtualizacaoCadastral.setIndicadorPoco(ConstantesSistema.NAO);
		imovelAtualizacaoCadastral.setIndicadorResetorizado(ConstantesSistema.NAO);
		imovelAtualizacaoCadastral.setDataRecebimentoMovimento(new Date());
		
		if ( imovelAtualizacaoCadastral.getImovel() != null && !imovelAtualizacaoCadastral.getImovel().toString().equals("") &&
				imovelAtualizacaoCadastral.getImovel() > 0 ) {
			imovelAtualizacaoCadastral.setIndicadorImovelNovo(ConstantesSistema.NAO); 
			
			//Caso a matricula informada pelo cadastrador no tablet nao exista no arquivo do tablet.
			if(indicadorImovelNovoComMatricula != null 
					&& indicadorImovelNovoComMatricula.equals(ConstantesSistema.SIM.toString())){
				try {
						Imovel imovel = this.getControladorImovel().pesquisarImovel(imovelAtualizacaoCadastral.getImovel());
					
						if(imovel != null && imovel.getId() != null){
							Collection colecaoIdImovel = new ArrayList();
							colecaoIdImovel.add(imovel.getId() + "/" + ConstantesSistema.NAO);
							
							Empresa empresa =  new Empresa();
							empresa.setId(imovelAtualizacaoCadastral.getIdEmpresa());			
						
							this.gerarTabelasTemporarias(colecaoIdImovel, empresa, parametroTabelaAtualizacaoCadastro);
						}
						
					} catch (ControladorException e) {
						e.printStackTrace();
					} catch (ErroRepositorioException e) {
						e.printStackTrace();
					}
			}
			
		} else {

			try {
				Integer id = getControladorImovel().obterNextValImovel();
				imovelAtualizacaoCadastral.setImovel(id);
			} catch (ControladorException e) {
				e.printStackTrace();
			}
			imovelAtualizacaoCadastral.setIndicadorImovelNovo(ConstantesSistema.SIM);
		}
		
		imovelAtualizacaoCadastral.setUltimaAlteracao(new Date());
		
		return imovelAtualizacaoCadastral;
	}
	
	private ClienteAtualizacaoCadastral adicionarClienteAtualizacaoCadastral(List<String> colArquivos){
		
		ClienteAtualizacaoCadastral clienteAtualizacaoCadastral = new ClienteAtualizacaoCadastral();
			
		Integer idImovelAtlzCadastral = null;
		try {
			idImovelAtlzCadastral = repositorioCadastro.pesquisarIdImovelAtualizacaoCadastral(colArquivos.get(1));
		} catch (ErroRepositorioException e) {
			e.printStackTrace();
		}
		
		ImovelAtualizacaoCadastral imovelAtualizacaoCadastral = new ImovelAtualizacaoCadastral();
		imovelAtualizacaoCadastral.setId(idImovelAtlzCadastral);
		clienteAtualizacaoCadastral.setImovelAtualizacaoCadastral(imovelAtualizacaoCadastral);
		
		if ( Util.validarCamposAtualizacaoCadastral( colArquivos.get(2) ) ) {
			clienteAtualizacaoCadastral.setIdClienteTipo(Integer.valueOf(colArquivos.get(2)));
		}
		
		clienteAtualizacaoCadastral.setCpfCnpj(colArquivos.get(3));
		
		clienteAtualizacaoCadastral.setNomeCliente(colArquivos.get(4));
		
		clienteAtualizacaoCadastral.setRg(colArquivos.get(5));
		
		if ( Util.validarCamposAtualizacaoCadastral( colArquivos.get(6) ) ) {
			OrgaoExpedidorRg orgaoExpedidorRG = new OrgaoExpedidorRg();
			orgaoExpedidorRG.setId(Integer.valueOf(colArquivos.get(6)));
			clienteAtualizacaoCadastral.setOrgaoExpedidorRG(orgaoExpedidorRG);
		}
		 
		if ( Util.validarCamposAtualizacaoCadastral( colArquivos.get(7) ) ) {
			clienteAtualizacaoCadastral.setIdUinidadeFederacao(Integer.valueOf(colArquivos.get(7)));
		}
		 
		if ( colArquivos.get(8) != null ) {
			clienteAtualizacaoCadastral.setDataEmissaoRg(Util.converteStringParaDate(colArquivos.get(8)));
		}
		
		if ( colArquivos.get(9) != null && !colArquivos.get(9).equals("") ) {
			clienteAtualizacaoCadastral.setIdPessoaSexo(Integer.valueOf(colArquivos.get(9)));
		}

		 
		if ( colArquivos.get(10) != null && !"".equals(colArquivos.get(10)) ) {
			clienteAtualizacaoCadastral.setDataNascimento(Util.converteStringParaDate(colArquivos.get(10)));
		}
		
		if ( colArquivos.get(11) != null && !"".equals(colArquivos.get(11)) ) {
			clienteAtualizacaoCadastral.setIdCliente(Integer.valueOf(colArquivos.get(11)));
		}
		
		clienteAtualizacaoCadastral.setIdImovel(0);
		clienteAtualizacaoCadastral.setIndicadorExclusao(ConstantesSistema.NAO);
		clienteAtualizacaoCadastral.setIndicadorUso(ConstantesSistema.SIM);
		clienteAtualizacaoCadastral.setIdClienteRelacaoTipo(Integer.valueOf(ClienteRelacaoTipo.USUARIO));
		clienteAtualizacaoCadastral.setUltimaAlteracao(new Date());

		return clienteAtualizacaoCadastral;
	}
	
	private ClienteFoneAtualizacaoCadastral adicionarClienteFoneAtualizacaoCadastral(List<String> colArquivos){
		
		ClienteFoneAtualizacaoCadastral clienteFoneAtualizacaoCadastral = new ClienteFoneAtualizacaoCadastral();
		
		Integer idClienteAtlzCadastral = null;
		
		try {
		
			idClienteAtlzCadastral = repositorioCadastro.pesquisarIdClienteAtualizacaoCadastral(colArquivos.get(1));
		
		}catch (ErroRepositorioException e) {
			e.printStackTrace();
		}
		
		ClienteAtualizacaoCadastral clienteAtualizacaoCadastral = new ClienteAtualizacaoCadastral();
		clienteAtualizacaoCadastral.setId(idClienteAtlzCadastral);
		clienteFoneAtualizacaoCadastral.setClienteAtualizacaoCadastral(clienteAtualizacaoCadastral);
		clienteFoneAtualizacaoCadastral.setIdFoneTipo(Integer.valueOf(colArquivos.get(2)));
		clienteFoneAtualizacaoCadastral.setDdd(colArquivos.get(3));
		clienteFoneAtualizacaoCadastral.setTelefone(colArquivos.get(4));
		clienteFoneAtualizacaoCadastral.setUltimaAlteracao(new Date());
		
		short indicadorFone = 2;

		//Solucao temporaria até ajustar o retorno no tablet
		//Rafael Pinto
		//10/10/2013
		if(colArquivos.get(5) != null && (colArquivos.get(5).equals("1") || colArquivos.get(5).equals("2")) ){
			indicadorFone = Short.parseShort(colArquivos.get(5));
		}
		
		clienteFoneAtualizacaoCadastral.setIndicadorFonePadrao(indicadorFone);

		return clienteFoneAtualizacaoCadastral;
	}
	
	private HidrometroInstalacaoHistoricoAtualizacaoCadastral adicionarHidrometroInstalacaoHistoricoAtualizacaoCadastral(List<String> colArquivos){
		
		HidrometroInstalacaoHistoricoAtualizacaoCadastral hidrometro = new HidrometroInstalacaoHistoricoAtualizacaoCadastral();
		
		try {
			FiltroImovelAtualizacaoCadastral filtroImovelAtualizacaoCadastral = new FiltroImovelAtualizacaoCadastral();
			filtroImovelAtualizacaoCadastral.adicionarParametro( new ParametroSimples(FiltroImovelAtualizacaoCadastral.CODIGO, colArquivos.get(1)));
			
			Collection<ImovelAtualizacaoCadastral> colecaoImovel = this.getControladorUtil().pesquisar(filtroImovelAtualizacaoCadastral, ImovelAtualizacaoCadastral.class.getName());
			
			ImovelAtualizacaoCadastral imovelAtualizacaoCadastral = (ImovelAtualizacaoCadastral) Util.retonarObjetoDeColecao(colecaoImovel);
		
			hidrometro.setImovelAtualizacaoCadastral(imovelAtualizacaoCadastral);
			hidrometro.setNumeroHidrometro(colArquivos.get(2));
			
			HidrometroLocalInstalacao hidrometroLocalInstalacao = new HidrometroLocalInstalacao();
			
			if ( Util.validarCamposAtualizacaoCadastral( colArquivos.get(3) ) ) {
				hidrometroLocalInstalacao.setId(Integer.valueOf(colArquivos.get(3)));
			}
			
			hidrometro.setHidrometroLocalInstalacao(hidrometroLocalInstalacao);
			HidrometroProtecao hidrometroProtecao = new HidrometroProtecao();
			
			if ( Util.validarCamposAtualizacaoCadastralAceitaZero( colArquivos.get(4) ) ) {
				hidrometroProtecao.setId(Integer.valueOf(colArquivos.get(4)));
			}
			hidrometro.setHidrometroProtecao(hidrometroProtecao);
			hidrometro.setIndicadorCavalete(Short.valueOf(colArquivos.get(5)));
			hidrometro.setNumeroInstalacaoHidrometro(Integer.valueOf(colArquivos.get(6)));
			MedicaoTipo medicaoTipo = new MedicaoTipo();
			medicaoTipo.setId(MedicaoTipo.LIGACAO_AGUA);
			hidrometro.setMedicaoTipo(medicaoTipo);
			hidrometro.setUltimaAlteracao(new Date());
			Date dataInstalacao = imovelAtualizacaoCadastral.getDataVisita();
			
			if ( colArquivos.get(7) != null && !colArquivos.get(7).equals("") ) {
				
				Integer idImovel = Integer.valueOf(colArquivos.get(7)); 
				
				Hidrometro hidrometro1 = getControladorMicromedicao().pesquisarHidrometroPeloNumero(hidrometro.getNumeroHidrometro());
				if ( hidrometro1 != null && hidrometro1.getId() != null ) {
					FiltroHidrometroInstalacaoHistorico filtroHidrometroInstalacaoHistorico = new FiltroHidrometroInstalacaoHistorico();
					filtroHidrometroInstalacaoHistorico.adicionarParametro( new ParametroSimples(FiltroHidrometroInstalacaoHistorico.HIDROMETRO_ID, hidrometro1.getId()));
					filtroHidrometroInstalacaoHistorico.adicionarParametro( new ParametroSimples(FiltroHidrometroInstalacaoHistorico.LIGACAO_AGUA_ID, idImovel));
					
					Collection colecaoHidrometroInstalacaoHistorico = Fachada.getInstancia().pesquisar(filtroHidrometroInstalacaoHistorico, HidrometroInstalacaoHistorico.class.getName());
					if ( colecaoHidrometroInstalacaoHistorico != null && !colecaoHidrometroInstalacaoHistorico.isEmpty() ) {
						HidrometroInstalacaoHistorico hidrometroInstalacaoHistorico = (HidrometroInstalacaoHistorico) Util.retonarObjetoDeColecao(colecaoHidrometroInstalacaoHistorico);
						dataInstalacao = hidrometroInstalacaoHistorico.getDataInstalacao();
					}
				}
			}
			
			hidrometro.setDataInstalacaoHidrometro(dataInstalacao);
			
		} catch (ControladorException e) {
			e.printStackTrace();
		}
		return hidrometro;
	}

	private ImovelSubcategoriaAtualizacaoCadastral adicionarImovelSubcategoriaAtualizacaoCadastral(List<String> colArquivos) throws ControladorException {
		
		ImovelSubcategoriaAtualizacaoCadastral subcategoria = new ImovelSubcategoriaAtualizacaoCadastral();
		
		FiltroImovelAtualizacaoCadastral filtroImovelAtualizacaoCadastral = new FiltroImovelAtualizacaoCadastral();
		filtroImovelAtualizacaoCadastral.adicionarParametro( new ParametroSimples(FiltroImovelAtualizacaoCadastral.CODIGO, colArquivos.get(1)));
		
		Collection<ImovelAtualizacaoCadastral> colecaoImovel = this.getControladorUtil().pesquisar(filtroImovelAtualizacaoCadastral, ImovelAtualizacaoCadastral.class.getName());
		
		ImovelAtualizacaoCadastral imovelAtualizacaoCadastral = (ImovelAtualizacaoCadastral) Util.retonarObjetoDeColecao(colecaoImovel);
		
		subcategoria.setImovelAtualizacaoCadastral(imovelAtualizacaoCadastral);
		subcategoria.setIdCategoria(Integer.valueOf(colArquivos.get(2)));
		
		if ( subcategoria.getIdCategoria().toString().trim().equals("1") ) {
			subcategoria.setDescricaoCategoria(Categoria.RESIDENCIAL_DESCRICAO);
		} else if ( subcategoria.getIdCategoria().toString().trim().equals("2") ) {
			subcategoria.setDescricaoCategoria(Categoria.COMERCIAL_DESCRICAO);
		} else if ( subcategoria.getIdCategoria().toString().trim().equals("3") ) {
			subcategoria.setDescricaoCategoria(Categoria.INDUSTRIAL_DESCRICAO);
		} else if ( subcategoria.getIdCategoria().toString().trim().equals("4") ) {
			subcategoria.setDescricaoCategoria(Categoria.PUBLICO_DESCRICAO);
		}
		
		
		
		subcategoria.setIdSubcategoria(Integer.valueOf(colArquivos.get(3)));
		
		
		//pesquisa a descricao da subcategoria
		FiltroSubCategoria filtroSubCategoria = new FiltroSubCategoria();
		filtroSubCategoria.adicionarParametro( new ParametroSimples(FiltroSubCategoria.ID, subcategoria.getIdSubcategoria()));
		Collection<Subcategoria> colecaoSubcategoria = getControladorUtil().pesquisar(filtroSubCategoria, Subcategoria.class.getName());
		if ( colecaoSubcategoria != null && !colecaoSubcategoria.isEmpty() ) {
			Subcategoria subcategoria2 = (Subcategoria) Util.retonarObjetoDeColecao(colecaoSubcategoria);
			subcategoria.setDescricaoSubcategoria(subcategoria2.getDescricao());
		}
		
		subcategoria.setQuantidadeEconomias(Short.valueOf(colArquivos.get(4)));
		if ( imovelAtualizacaoCadastral.getImovel() != null ) {
			subcategoria.setIdImovel(imovelAtualizacaoCadastral.getImovel());
		}
		subcategoria.setUltimaAlteracao(new Date());
		
		
		return subcategoria;
	}
	
	
	private ImovelOcorrenciaAtualizacaoCadastral adicionarImovelOcorrenciaAtualizacaoCadastral(List<String> colArquivos) throws ControladorException {
		
		ImovelOcorrenciaAtualizacaoCadastral ocorrencia = new ImovelOcorrenciaAtualizacaoCadastral();
		
		CadastroOcorrencia cadastroOcorrencia = new CadastroOcorrencia();
		cadastroOcorrencia.setId(Integer.valueOf(colArquivos.get(1)));
		ocorrencia.setCadastroOcorrencia(cadastroOcorrencia);
		
		Integer idImovelAtlzCadastral = null;
		try {
			idImovelAtlzCadastral = repositorioCadastro.pesquisarIdImovelAtualizacaoCadastral(colArquivos.get(2));
		} catch (ErroRepositorioException e) {
			e.printStackTrace();
		}
		
		ImovelAtualizacaoCadastral imovelAtualizacaoCadastral = new ImovelAtualizacaoCadastral();
		imovelAtualizacaoCadastral.setId(idImovelAtlzCadastral);
		ocorrencia.setImovelAtualizacaoCadastral(imovelAtualizacaoCadastral);
		
		ocorrencia.setUltimaAlteracao(new Date());
		
		return ocorrencia;
	}
	
	public void inserirFotoAtualizacaoCadastral(String codigo, int tipoFoto, byte[] foto) throws ControladorException{
		
		ImovelFotoAtualizacaoCadastral imovelFotoAtualizacaoCadastral = new ImovelFotoAtualizacaoCadastral();
		
		//Carregando os objetos
		FiltroFotoSituacaoOrdemServico filtroSituacaoFoto = new FiltroFotoSituacaoOrdemServico();
		filtroSituacaoFoto.adicionarParametro(new ParametroSimples(FiltroFotoSituacaoOrdemServico.ID, tipoFoto));
		Collection<FotoSituacaoOrdemServico> colFotoSituacaoOrdemServico = this.getControladorUtil().pesquisar(filtroSituacaoFoto , FotoSituacaoOrdemServico.class.getName());
		
		FotoSituacaoOrdemServico situacao = (FotoSituacaoOrdemServico) Util.retonarObjetoDeColecao(colFotoSituacaoOrdemServico);
		
		FotoSituacaoOrdemServico fsos = new FotoSituacaoOrdemServico();
		fsos.setId(tipoFoto);
		Integer idImovelAtlzCadastral = null;
		try {
			idImovelAtlzCadastral = repositorioCadastro.pesquisarIdImovelAtualizacaoCadastral(codigo);
		} catch (ErroRepositorioException e) {
			e.printStackTrace();
		}
		
		if ( idImovelAtlzCadastral != null ) {
			ImovelAtualizacaoCadastral imovelAtualizacaoCadastral = new ImovelAtualizacaoCadastral();
			imovelAtualizacaoCadastral.setId(idImovelAtlzCadastral);
			//Fim do carregamento
			
			
			
			//inserindo os valores
			imovelFotoAtualizacaoCadastral.setFotoSituacao(fsos);
			imovelFotoAtualizacaoCadastral.setImovelAtualizacaoCadastral(imovelAtualizacaoCadastral);
			imovelFotoAtualizacaoCadastral.setFotoImovel(foto);
			imovelFotoAtualizacaoCadastral.setUltimaAlteracao(new Date());
			
			//inserindo o objeto
			this.getControladorUtil().inserir(imovelFotoAtualizacaoCadastral);
		}
	}
	
	/**
	 * [UC1392] - Consultar Roteiro Dispositivo Movel Atualizacao Cadastral
	 * 
	 * @author Anderson Cabral
	 * @since 18/03/2013
	 * 
	 * @param idParametro
	 * @return Retorna um Collection<Integer> com os numeros das quadras
	 * @throws ControladorException
	 */
	public Collection<Integer>  pesquisarRoteiroQuadra(Integer idParametro) throws ControladorException{
		try{
			return repositorioCadastro.pesquisarRoteiroQuadra(idParametro);
			
		}catch ( Exception e ) {
			sessionContext.setRollbackOnly();
			throw new ControladorException("erro.sistema", e);
		}
	}
	
	/**
	 * @author Arthur Carvalho
	 * @date 22/05/2013
	 * 
	 * @param helper
	 * @return
	 * @throws ControladorException
	 */
	public Collection<Integer>  pesquisarImovelPPP(DadosContratoPPPHelper helper) throws ControladorException{
		try{
			return repositorioCadastro.pesquisarImovelPPP(helper);
			
		}catch ( Exception e ) {
			sessionContext.setRollbackOnly();
			throw new ControladorException("erro.sistema", e);
		}
	}
	
	
	/**
	 * @author Arthur Carvalho
	 * @date 22/05/2013
	 * 
	 * @param helper
	 * @return
	 * @throws ControladorException
	 */
	public void  atualizarSituacaoTransmissaoImovel(Integer idComando) throws ControladorException{
		try{
			
			repositorioImovel.atualizarSituacaoTransmissaoImovel(idComando);
			
		}catch ( Exception e ) {
			sessionContext.setRollbackOnly();
			throw new ControladorException("erro.sistema", e);
		}
	}
	
	
	
	
	/**
	 * [UC1447] - Consultar Imóveis no Ambiente Pré-GSAN
	 * 
	 * Metodo responsavel por atualizar o novos imoveis de atualizacao cadastral com a matricula de imovel que ja exista no gsan.
	 * 
	 * @param helper
	 * @throws ControladorException
	 */
	public void associarImovelNovoAImovelExistenteAtualizacaoCadastral(DadosImovelPreGsanHelper helper) throws ControladorException {

		//pesquisa os parametros
		FiltroImovelAtualizacaoCadastral filtroImovelAtualizacaoCadastral = new FiltroImovelAtualizacaoCadastral();
		filtroImovelAtualizacaoCadastral.adicionarParametro( new ParametroSimples(FiltroImovelAtualizacaoCadastral.ID, helper.getIdImovelAtualizacaoCadastral()));
		
		Collection<ImovelAtualizacaoCadastral> colecaoImovelAtualizacaoCadastral = getControladorUtil().pesquisar(filtroImovelAtualizacaoCadastral, ImovelAtualizacaoCadastral.class.getName());
		ImovelAtualizacaoCadastral imovelAtualizacaoCadastral = (ImovelAtualizacaoCadastral) Util.retonarObjetoDeColecao(colecaoImovelAtualizacaoCadastral);
		

		Collection colecaoIdImovel = new ArrayList();
		colecaoIdImovel.add(helper.getMatriculaGsan() + "/" + ConstantesSistema.NAO);
		
		Empresa empresa =  new Empresa();
		empresa.setId(imovelAtualizacaoCadastral.getIdEmpresa());			
	
		try {
			this.gerarTabelasTemporarias(colecaoIdImovel, empresa, imovelAtualizacaoCadastral.getParametroTabelaAtualizacaoCadastro());
		} catch (ErroRepositorioException e) {
			e.printStackTrace();
		}
		Imovel imovel = getControladorImovel().pesquisarImovel(Integer.valueOf(helper.getMatriculaGsan()));
		
		//relaciona a inscricao do imovel do GSAN ao novo imovel.
		imovelAtualizacaoCadastral.setIdLocalidade(imovel.getLocalidade().getId());
		imovelAtualizacaoCadastral.setCodigoSetorComercial(imovel.getSetorComercial().getCodigo());
		imovelAtualizacaoCadastral.setNumeroQuadra(imovel.getQuadra().getNumeroQuadra());
		imovelAtualizacaoCadastral.setLote(imovel.getLote());
		imovelAtualizacaoCadastral.setSubLote(imovel.getSubLote());
		
		
		imovelAtualizacaoCadastral.setImovel(Integer.valueOf(helper.getMatriculaGsan()));
		imovelAtualizacaoCadastral.setIndicadorImovelNovo(ConstantesSistema.NAO);
		getControladorUtil().atualizar(imovelAtualizacaoCadastral);
	}	
	
	/**
	 *  [UC1392] - Consultar Roteiro Dispositivo Movel Atualizacao Cadastral
	 * 
	 * 
	 * @author Maxwell Moreira
	 * @since 20/06/2013
	 * 
	 * @param idParametro
	 * @return Retorna um Collection<Integer> com os numeros de imoveis
	 * @throws ControladorException
	 */
	public Collection<Integer>  pesquisarImoveisAtualizacaoCadastral(Integer idParametro) throws ControladorException{	
		try{
			return repositorioCadastro.pesquisarImoveisAtualizacaoCadastral(idParametro); 
		}catch ( Exception e ) {
			sessionContext.setRollbackOnly();
			throw new ControladorException("erro.sistema", e);
		}			
	}	
	
	
	/**
	 * Metodo responsavel por atualizar os imovels com os subsistemas informados no arquivo - compesa.
	 * @author Arthur Carvalho
	 * 
	 * @throws ControladorException
	 */
	public void atualizarSubsistemaImovel(Integer idFuncionalidadeIniciada) throws ControladorException { 
		int idUnidadeIniciada = 0;
		
		/*
		 * Registrar o início do processamento da Unidade de Processamento
		 * do Batch
		 */
		idUnidadeIniciada = getControladorBatch()
				.iniciarUnidadeProcessamentoBatch(idFuncionalidadeIniciada,
						UnidadeProcessamento.FUNCIONALIDADE, 0);

		System.out.println("******************************************");
		System.out.println("PROCESSAR ARQUIVO DE SUBSISTEMA DE ESGOTO ");
		System.out.println("******************************************");
		
		
		String pastaSubsistema = "/usr/local/jboss/bin/inscricao_atraves_leiturista/subsistema";
		
		//Recupera o diretorio do arquivo
		File diretorio = new File(pastaSubsistema + "/a_processar");
		//lista todos os arquivos
		File[] arquivos = diretorio.listFiles();
		
		try {
			
			
			//verifica se existe algum arquivo
			if ( arquivos != null ) {
					
				//percorre a lista de arquivos
				for (int index = 0; index < arquivos.length; index++){
					
					FileReader reader = new FileReader(arquivos[index]);
					BufferedReader buffer = new BufferedReader(reader);

					String linhaLida = buffer.readLine();
					
					buffer.close();
		            reader.close();
			            
		            String nomeArquivo = arquivos[index].getName();
		            String extensao = nomeArquivo.substring(nomeArquivo.lastIndexOf("."), nomeArquivo.length());
			            
		            //verifica se o arquivo é txt
		            if ( extensao != null && (extensao.equals(".txt") || extensao.equals(".TXT")) ) {

		            	// abre o arquivo
		            	File arquivoTexto = arquivos[index];
	        			FileReader readerArquivo = new FileReader(arquivoTexto);
	        			BufferedReader bufferArquivo = new BufferedReader(readerArquivo);
	        			
	        			//criar o Helper
	        			ImovelSubsistemaHelper helper = null;
	        			
	        			//Linha do Arquivo
	        			String linha = null;
	        			//Registra os registros validos para geracao de um arquivo processado.
	        			StringBuilder dadosValidos = new StringBuilder("");
	        			//Registra os registros invalidos para geracao de um arquivo com erro.
	        			StringBuilder dadosInvalidos = new StringBuilder("");

	        			System.out.println("INICIO ------------------------------------ " +nomeArquivo);
	        			
	        			int quantidadeImoveis = 0;
	        			int quantidadeImoveisAtualizados = 0;
	        			
	        			SubSistemaEsgotoArquivoTexto subSistemaEsgotoArquivoTexto = new SubSistemaEsgotoArquivoTexto();
	        			subSistemaEsgotoArquivoTexto.setDescricaoArquivo(nomeArquivo);
	        			subSistemaEsgotoArquivoTexto.setQuantidadeImoveisLidos(quantidadeImoveis);
	        			subSistemaEsgotoArquivoTexto.setQuantidadeImoveisAtualizado(quantidadeImoveisAtualizados);
	        			subSistemaEsgotoArquivoTexto.setUltimaAlteracao(new Date());
	        			
	        			Integer idArquivo = (Integer) getControladorUtil().inserir(subSistemaEsgotoArquivoTexto);
	        			subSistemaEsgotoArquivoTexto.setId(idArquivo);
	        			
	        			while ( ( linha = bufferArquivo.readLine() ) != null ) {
	        				
	        				helper = new ImovelSubsistemaHelper();
	        				helper.setMensagemImovelInvalido(null);
	        				
	        				linha.replace(";;", "; ;");
	        				StringTokenizer stk = new StringTokenizer(linha, ";");
	        				List<String> colArquivos = new ArrayList<String>();
	        				
	        				while ( stk.hasMoreTokens() ) {
	        					colArquivos.add(stk.nextToken());
	        				}
	        				
	        				String mensagemErro = "";
	        				String registroComErro = "";
	        				
	        				if (colArquivos.size() > 0 && !"MATRICULA".equals(colArquivos.get(0))){
	        					quantidadeImoveis += 1;
	        				}
	        				
	        				//verifica se a matricula é um numero
	        				if ( colArquivos.size() >= 3 && Util.converterStringParaInteger(colArquivos.get(0)) != null) {
	        					
	        					//Valida Matricula
	        					String matricula = colArquivos.get(0);	
	        					if ( matricula != null && !matricula.trim().equals("") ) {
	        						Imovel imovel = repositorioImovel.pesquisarImovelPorId( Integer.valueOf(matricula) );
	        						if ( imovel == null || imovel.getId() == null ) {
	        							mensagemErro = "IMÓVEL INEXISTENTE";
	        							
	        							registroComErro = matricula;
	        						}
	        					}else{
	        						mensagemErro = "IMÓVEL INEXISTENTE";
	        						
	        						registroComErro = matricula;
	        					}
	        					
        						//Valida Sistema
	        					if ( mensagemErro.length() == 0 && (colArquivos.get(1) == null || colArquivos.get(1).equals("") )) {
	        						mensagemErro = "SISTEMA INVÁLIDO";
	        						
	        						registroComErro = colArquivos.get(1);
	        					}	
	        					
	        					//Valida SubSistema
	        					String descricaoSubSistema = colArquivos.get(2);
	        					boolean subsistemaValido = false;
	        					Integer idSubSistema =null;
	        					if ( descricaoSubSistema != null && !descricaoSubSistema.trim().equals("") ) {
	        						
	        						idSubSistema = repositorioCadastro.verificarExistenciaSubSistema(descricaoSubSistema);
	        						if ( idSubSistema != null && idSubSistema > 0 ) {
	        							subsistemaValido = true;
	        						}
	        					}
	        					
	        					if (mensagemErro.length() == 0 && !subsistemaValido ) {
	        						mensagemErro = "SUBSISTEMA DE ESGOTO INEXISTENTE";
	        						
	        						registroComErro = descricaoSubSistema;
	        					}
	        					
        						helper.setIdImovel(matricula);
        						helper.setSistema(colArquivos.get(1));
        						helper.setIdSubSistema(idSubSistema);
        						helper.setSubSistema( colArquivos.get(2) );
        						helper.setMensagemImovelInvalido(mensagemErro);
	        					
	        				} else {
	        					
	        					
	        					if (  colArquivos.size() < 3 ) {
	        						
	        						if ( colArquivos.size() == 1 )  {
	        							helper.setIdImovel(colArquivos.get(0));
	        						}
	        						if ( colArquivos.size() == 2 )  {
	        							helper.setSistema(colArquivos.get(1));
	        						}
	        						if ( colArquivos.size() == 3 ) {
	        							helper.setSubSistema( colArquivos.get(2) );
	        						}
	        						helper.setMensagemImovelInvalido("REGISTRO INVALIDO");
	        					}else if (!"MATRICULA".equals(colArquivos.get(0)) ) {
		        					
	        						//Não adiciona o cabeçalho no helper
	        						helper.setIdImovel(colArquivos.get(0));
	        						helper.setSistema(colArquivos.get(1));
	        						helper.setSubSistema( colArquivos.get(2) );
	        						helper.setMensagemImovelInvalido("MATRICULA INVALIDA");
	        					}
	        				}
	        				
	        				//Caso o registro seja valido
	        				if ( (colArquivos.size() > 0 && !"MATRICULA".equals(colArquivos.get(0))) &&
	        						(helper.getMensagemImovelInvalido() == null || helper.getMensagemImovelInvalido().equals(""))) {
	        					
	        					quantidadeImoveisAtualizados +=1;
	        					
	        					//atualizar imovel com o subsistema
	        					repositorioImovel.atualizarImovelColunaDinamica(Integer.valueOf(helper.getIdImovel()), "sseg_id", String.valueOf(helper.getIdSubSistema()));
	        					
	        					//Caso o registro seja invalido - armazenar os dados do registro no arquivo de erro.
	        					StringBuilder sb = new StringBuilder("");
	        					sb.append(helper.getIdImovel() + ";" );
	        					sb.append(helper.getSistema() +";" );
	        					sb.append(helper.getSubSistema() + ";" );
	        					sb.append("\n");
	        					dadosValidos.append(sb);
	        				} else if(colArquivos.size() > 0 && !"MATRICULA".equals(colArquivos.get(0))) {
	        					//Caso o registro seja invalido - armazenar os dados do registro no arquivo de erro.
	        					StringBuilder sb = new StringBuilder("");
	        					sb.append(helper.getIdImovel() + ";" );
	        					sb.append(helper.getSistema() +";" );
	        					sb.append(helper.getSubSistema() + ";" );
	        					sb.append(helper.getMensagemImovelInvalido() + ";" ); 
	        					sb.append("\n");
	        					dadosInvalidos.append(sb);

	    	        			SubSistemaEsgotoArquivoTextoErro subSistemaEsgotoArquivoTextoErro = new SubSistemaEsgotoArquivoTextoErro();
	    	        			subSistemaEsgotoArquivoTextoErro.setSubSistemaEsgotoArquivoTexto(subSistemaEsgotoArquivoTexto);
	    	        			subSistemaEsgotoArquivoTextoErro.setDescricaoRegistro(helper.getIdImovel());
	    	        			subSistemaEsgotoArquivoTextoErro.setMensagemErro(registroComErro+"-"+mensagemErro);
	    	        			subSistemaEsgotoArquivoTextoErro.setUltimaAlteracao(new Date());
	    	        			
	    	        			getControladorUtil().inserir(subSistemaEsgotoArquivoTextoErro);
	        				}
	        				
	        			}
	        			
	        			subSistemaEsgotoArquivoTexto.setQuantidadeImoveisLidos(quantidadeImoveis);
	        			subSistemaEsgotoArquivoTexto.setQuantidadeImoveisAtualizado(quantidadeImoveisAtualizados);
	        			subSistemaEsgotoArquivoTexto.setUltimaAlteracao(new Date());	        			
	        			getControladorUtil().atualizar(subSistemaEsgotoArquivoTexto);
	        			
	        			//Valida se existe algum registro invalido
    					if ( !dadosInvalidos.equals("") && dadosInvalidos.length() > 0 ) {
    						 // Escreve no arquivo de retorno criado
    			            FileOutputStream fileOut = null;
    		                fileOut = new FileOutputStream(pastaSubsistema + "/erro_processamento/ERRO_"+ nomeArquivo);
    		                
    		                fileOut.write(dadosInvalidos.toString().getBytes());
    		                fileOut.flush();
    		                fileOut.close();
    					}
    					
    					//Valida se existe algum registro processado
    					if ( !dadosValidos.equals("") && dadosValidos.length() > 0 ) {
    						 // Escreve no arquivo de retorno criado
    			            FileOutputStream fileOut = null;
    		                fileOut = new FileOutputStream(pastaSubsistema + "/processado/"+ nomeArquivo);
    		                
    		                fileOut.write(dadosValidos.toString().getBytes());
    		                fileOut.flush();
    		                fileOut.close();
    					}

    					// fecha o arquivo
	                    buffer.close();
	                    reader.close();
    					
    					//Remover - Arquivos processados
    					File dir = new File(pastaSubsistema + "/a_processar/" +nomeArquivo);
    					dir.delete();
    					
    					System.out.println("FIM------------------------------------ " +nomeArquivo);
					}
				}
			}
			
			getControladorBatch().encerrarUnidadeProcessamentoBatch(
					null,idUnidadeIniciada, false);
			
		}catch (Exception ex) {
			getControladorBatch().encerrarUnidadeProcessamentoBatch(
					ex,	idUnidadeIniciada, true);
			
			ex.printStackTrace();
			throw new EJBException(ex);
		}
	}
	
	/**
	 * Metodo responsavel por pesquisar os usuários da atualização cadastral
	 * @author Vivianne Sousa
	 * @date 22/07/2013
	 * @return
	 * @throws ErroRepositorioException
	 */
	public Collection pesquisarUsuarioAtuCadastral(Integer idEmpresa) throws ControladorException{
		try{
			
			return repositorioCadastro.pesquisarUsuarioAtuCadastral(idEmpresa);
			
		}catch ( Exception e ) {
			sessionContext.setRollbackOnly();
			throw new ControladorException("erro.sistema", e);
		}
	}
	
	/**
	 * 
	 * [UC1121] Gerar Relatório de Imóveis com Alteração de Inscrição Via Batch
	 * @author Arthur Carvalho
	 * 
	 * @param relatorioHelper
	 * @return
	 * @throws ControladorException
	 */
	public Collection<RelatorioResumoImoveisAlteracaoInscricaoViaBatchBean> pesquisarResumoImoveisAlteracaoInscricaoViaBatch( 
			FiltrarRelatorioImoveisAlteracaoInscricaoViaBatchHelper relatorioHelper) throws ControladorException{
		
		//Retorna para o resumo uma colecao do Bean principal
		Collection<RelatorioResumoImoveisAlteracaoInscricaoViaBatchBean> colecaoRetorno = new ArrayList<RelatorioResumoImoveisAlteracaoInscricaoViaBatchBean>();
		
		try {			
			
			//pesquisa as localidades dos imóveis que tem alteração de inscricao
			Collection<Object[]> colecaoDados = this.repositorioCadastro.pesquisarResumoImoveisAlteracaoInscricaoViaBatch(relatorioHelper, null);
	     
			if ( colecaoDados != null && !colecaoDados.isEmpty() ) {
				
				Iterator<Object[]> iteratorDados = colecaoDados.iterator();
				while( iteratorDados.hasNext() ) {
					
					Object[] objeto = (Object[]) iteratorDados.next();
					
					String codigoLocalidade = String.valueOf(objeto[0]);
					String descricaoLocalidade = String.valueOf(objeto[1]);
					Integer qtdeImoveisLocalidade = 0;
					
					//Define a localidade para as pesquisas abaixo agrupar por localidade
					relatorioHelper.setIdLocalidadeEncontrada(Integer.valueOf(codigoLocalidade));
					
					//pesquisa os setores das localidades e quantidade de imóveis por setor que tem alteração de inscricao
					Collection<RelatorioResumoImoveisAlteracaoInscricaoViaBatchSetorBean> colecaoDadosSetor = new ArrayList<RelatorioResumoImoveisAlteracaoInscricaoViaBatchSetorBean>();
					Collection<Object[]> colecaoSetor = this.repositorioCadastro.pesquisarResumoImoveisAlteracaoInscricaoViaBatch(relatorioHelper, "SETOR");
					if ( colecaoSetor != null && !colecaoSetor.isEmpty() ) {
						Iterator<Object[]> iteratorSetor = colecaoSetor.iterator();
						while( iteratorSetor.hasNext() ) {
							
							Object[] objetoSetor = (Object[]) iteratorSetor.next();
							
							String descricaoSetor = String.valueOf(objetoSetor[0]);
							Integer qtdImovel = (Integer)objetoSetor[1];
							//monta o bean do subrelatorio - setor comercial
							RelatorioResumoImoveisAlteracaoInscricaoViaBatchSetorBean setorBean = new RelatorioResumoImoveisAlteracaoInscricaoViaBatchSetorBean(descricaoSetor,qtdImovel);
							
							colecaoDadosSetor.add(setorBean);
							
							qtdeImoveisLocalidade = qtdeImoveisLocalidade + qtdImovel;
						}
					}
					
					//pesquisa as situacoes de ligacoes de agua e quantidade de imóveis da localidade que tem alteração de inscricao
					Collection<RelatorioResumoImoveisAlteracaoInscricaoViaBatchLigAguaBean> colecaoDadosSituacaoLigacaoAgua = new ArrayList<RelatorioResumoImoveisAlteracaoInscricaoViaBatchLigAguaBean>();
					Collection<Object[]> colecaoSituacao = this.repositorioCadastro.pesquisarResumoImoveisAlteracaoInscricaoViaBatch(relatorioHelper, "SITUACAOLIGACAO");
					if ( colecaoSituacao != null && !colecaoSituacao.isEmpty() ) {
						Iterator<Object[]> iteratorSituacao = colecaoSituacao.iterator();
						while( iteratorSituacao.hasNext() ) {
							
							Object[] objetoSituacao = (Object[]) iteratorSituacao.next();
							
							String descricaoSituacao = String.valueOf(objetoSituacao[0]);
							Integer qtdImovel = (Integer)objetoSituacao[1];
							//monta o bean do subrelatorio de ligacao agua situacao
							RelatorioResumoImoveisAlteracaoInscricaoViaBatchLigAguaBean situacaoBean= new RelatorioResumoImoveisAlteracaoInscricaoViaBatchLigAguaBean(descricaoSituacao,qtdImovel);
							
							colecaoDadosSituacaoLigacaoAgua.add(situacaoBean);
						}
					}
					
					//pesquisa os usuarios e quantidade de imóveis da localidade que tem alteração de inscricao
					Collection<RelatorioResumoImoveisAlteracaoInscricaoViaBatchUsuarioBean> colecaoDadosUsuario = new ArrayList<RelatorioResumoImoveisAlteracaoInscricaoViaBatchUsuarioBean>();
					Collection<Object[]> colecaoUsuario = this.repositorioCadastro.pesquisarResumoImoveisAlteracaoInscricaoViaBatch(relatorioHelper, "USUARIO");
					if ( colecaoUsuario != null && !colecaoUsuario.isEmpty() ) {
						Iterator<Object[]> iteratorUsuario = colecaoUsuario.iterator();
						while( iteratorUsuario.hasNext() ) {
							
							Object[] objetoUsuario = (Object[]) iteratorUsuario.next();
					
							//monta o bean do subrelatorio de usuario
							if ( objetoUsuario[0] != null) {
								
								String loginUsuario = String.valueOf(objetoUsuario[0]);
								String nomeUsuario = String.valueOf(objetoUsuario[1]);
								Integer qtdImovel = (Integer)objetoUsuario[2];
								
								RelatorioResumoImoveisAlteracaoInscricaoViaBatchUsuarioBean usuarioBean = new RelatorioResumoImoveisAlteracaoInscricaoViaBatchUsuarioBean(loginUsuario +" - " +nomeUsuario,
										qtdImovel);
								
								colecaoDadosUsuario.add(usuarioBean);
							}
						}
					}
					
					if ( colecaoDadosUsuario.isEmpty() ) {
						colecaoDadosUsuario = null;
					}
					
					//Monta o bean principal 
					RelatorioResumoImoveisAlteracaoInscricaoViaBatchBean bean = 
							new RelatorioResumoImoveisAlteracaoInscricaoViaBatchBean(
							codigoLocalidade, descricaoLocalidade, colecaoDadosSetor, colecaoDadosUsuario,
							colecaoDadosSituacaoLigacaoAgua,qtdeImoveisLocalidade);
					
					colecaoRetorno.add(bean);
				}
			}
			
        } catch (ErroRepositorioException ex) {
            ex.printStackTrace();
            throw new ControladorException("erro.sistema", ex);
        }
		
		return colecaoRetorno;
	}
	
	/**
	 * [UC0011] Inserir Imovel
	 * [FS0025] Validar Número do Medidor de Energia
	*/
	public String pesquisarMedidorEnergia(String numeroMedidorEnergia,Integer idImovel)
			throws ControladorException{
		String idImovelAuxiliar = null;
		String idImovelRetorno = null;
		String idImovelIgual = null;
		boolean verificadorMesmoImovelRetorno = false;
		try {
			Collection colecaoRetorno = repositorioCadastro.pesquisarMedidorEnergia(numeroMedidorEnergia);
			Iterator iterator = colecaoRetorno.iterator();
			if(colecaoRetorno.size()>0){
				int contador = 0;
				while(iterator.hasNext() && verificadorMesmoImovelRetorno==false){
					Object[] objeto = (Object[]) iterator.next();
					idImovelAuxiliar = objeto[0].toString();
					
					if(contador==0){
						idImovelRetorno = objeto[0].toString();
					}
					
					if(Integer.valueOf(idImovelAuxiliar).equals(idImovel)){
						verificadorMesmoImovelRetorno = true;
						idImovelIgual = objeto[0].toString();
						break;
					}
					contador++;
				}
			}
		} catch ( Exception e ) {
			sessionContext.setRollbackOnly();
			throw new ControladorException("erro.sistema", e);
		}
		
		if(verificadorMesmoImovelRetorno==true){
			idImovelRetorno = idImovelIgual;
		}
		
		return idImovelRetorno;
	}
	/**
	 * 
	 * [UC1533] Filtrar Ordem Servico Conexao Esgoto
	 * @author Hugo Azevedo
	 * @date 02/08/2013
	 * 
	 */
	public Municipio pesquisarMunicipio(Integer idMunicipio) throws ControladorException{
		try{			
			return this.repositorioCadastro.pesquisarMunicipio(idMunicipio);		
		 } catch (ErroRepositorioException ex) {
	            ex.printStackTrace();
	            throw new ControladorException("erro.sistema", ex);
	        }
	}
	
	/**
	 * Autor: Jonathan Marcos
	 * Data: 26/09/2013
	 * [UC1295] Efetuar Sorteio Premio
	 */
	public boolean pesquisarPremioPrincipal(Integer idPremio)
		throws ControladorException{
		boolean verificadorPremioPrincipal = false;
		try {
			Integer retornoQuantidade = this.repositorioCadastro.pesquisarPremioPrincipal(idPremio);
			if(retornoQuantidade>0){
				verificadorPremioPrincipal = true;
			}
		} catch ( Exception e ) {
			sessionContext.setRollbackOnly();
			throw new ControladorException("erro.sistema", e);
		}
		return verificadorPremioPrincipal;
	}	
	/**
	 * Autor: Jonathan Marcos
	 * Data: 26/09/2013
	 * [UC1295] Efetuar Sorteio Premio
	 */
	public void atualizarSorteioFiqueLegal2013(Integer idPremio,
			Integer numeroOrdemSorteio,Integer idImovelCadastroSorteio)
		throws ControladorException{
		try {
			ImovelPremioSorteio imovelPremioSorteio = new ImovelPremioSorteio();
			
			//Premio Sorteio
			PremioSorteio premioSorteio = new PremioSorteio();
			premioSorteio.setId(idPremio);
			imovelPremioSorteio.setPremioSorteio(premioSorteio);
			//Imovel Cadastro Sorteio
			ImovelCadastroSorteio imovelCadastroSorteio = new ImovelCadastroSorteio();
			imovelCadastroSorteio.setId(idImovelCadastroSorteio);
			imovelPremioSorteio.setImovelCadastroSorteio(imovelCadastroSorteio);
			//Numero Ordem Sorteio
			imovelPremioSorteio.setNumeroOrdemSorteio(numeroOrdemSorteio);
			//Ultima alteracao
			imovelPremioSorteio.setUltimaAlteracao(new Date());
			//data sorteio
			imovelPremioSorteio.setDataSorteio(new Date());
			
			//Inserir objeto imovelPremioSorteio na base
			getControladorUtil().inserir(imovelPremioSorteio);
			
			//Atualiza a tabela premio sorteio
			repositorioCadastro.atualizarPremioSorteio(idPremio);
		} catch (ErroRepositorioException e) {
			e.printStackTrace();
		}
	}
	
	/**
	 * Autor: Jonathan Marcos
	 * Data: 01/10/2013
	 * [UC1295] Efetuar Sorteio Premio
	 */
	public Integer pesquisarNumeroOrdemSorteioFiqueLegal2013() throws ControladorException {
		try{
			return repositorioCadastro.pesquisarNumeroOrdemSorteioFiqueLegal2013();
		} catch (ErroRepositorioException ex) {
			throw new ControladorException("erro.sistema", ex);
		}
	}
	
	/**
	 * Autor: Jonathan Marcos
	 * Data: 26/09/2013
	 * [UC1295] Efetuar Sorteio Premio
	 */
	public Collection<ImovelSorteadoHelper> efetuarSorteioFiqueLegal2013(Integer idPremio,
		Integer quantidadePremio) throws ControladorException{
		try {
			Collection<ImovelSorteadoHelper> colecaoImovelSorteadoHelper = 
					new ArrayList<ImovelSorteadoHelper>();
			
			FiltroPremioSorteio filtroPremioSorteio = new FiltroPremioSorteio();
			filtroPremioSorteio.adicionarParametro(new ParametroSimples(FiltroPremioSorteio.ID, idPremio));
			Collection<PremioSorteio> colecaoPremioSorteio = this.getControladorUtil().pesquisar(
				filtroPremioSorteio, PremioSorteio.class.getName());
			PremioSorteio premioSorteio = (PremioSorteio) 
					Util.retonarObjetoDeColecao(colecaoPremioSorteio);
			
			List<Object[]> imoveisAptoSorteioFiqueLegal2013 = null;
				imoveisAptoSorteioFiqueLegal2013 = repositorioCadastro.
						pesquisarImoveisAptosSorteioFiqueLegal2013(premioSorteio);
			
			List<Integer> numerosSorteados = new ArrayList<Integer>();
			
			Collection<String> colecaoCpfImpedido = 
					this.repositorioCadastro.pesquisarCpfImpedido();
	
			Collection<Integer> colecaoImovelImpedido = 
					this.repositorioCadastro.pesquisarImovelImpedidoSorteio();
			
			for(int a = 0;a<quantidadePremio;a++){
				ImovelSorteadoHelper helper = new ImovelSorteadoHelper();
				boolean sorteado = false;
				while(!sorteado
						&& imoveisAptoSorteioFiqueLegal2013.size() > numerosSorteados.size()){
					Integer posicaoNumeroSorteado = 
							Util.obterNumeroInteiroAleatorio(0, imoveisAptoSorteioFiqueLegal2013.size() - 1);
					Object[] imovelSorteado = imoveisAptoSorteioFiqueLegal2013.get(posicaoNumeroSorteado.intValue());
					
					Integer numeroSorteado = (Integer) imovelSorteado[0];
					Integer idImovel = (Integer) imovelSorteado[1];
					Integer numeroOrdemSorteio = this.pesquisarNumeroOrdemSorteioFiqueLegal2013();
					
					//[SB010] - Verificar Débitos do Imóvel.
					//[SB011] - Verificar Situação de Ligação do Imóvel.
					//[SB012] - Verificar Categoria Residencial do Imóvel.
					if(!numerosSorteados.contains(numeroSorteado)) {
						
						numerosSorteados.add(numeroSorteado);
						
						if (this.verificarImovelAptoSorteioFiqueLegal(idImovel)
								&& !colecaoImovelImpedido.contains(idImovel)) {
							
							if(imovelSorteado[3] != null
									&& colecaoCpfImpedido.contains((String) imovelSorteado[3])) {
								continue;
							}								
							
							numeroOrdemSorteio++;
							
							String endereco = this.getControladorEndereco().pesquisarEndereco(idImovel);
							String matricula = Util.retornaMatriculaImovelFormatada(idImovel);
							String nomeCliente = (String) imovelSorteado[2];
							String cpfCnpjCliente = null;
							if (imovelSorteado[3] != null) {
								cpfCnpjCliente = Util.formatarCpf((String) imovelSorteado[3]);
							} else if (imovelSorteado[4] != null) {
								cpfCnpjCliente = Util.formatarCnpj((String) imovelSorteado[4]);
							}
							Integer idImovelCadastroSorteio = (Integer)imovelSorteado[5];
							
							Object[] dadosGerenciaLoca = this.pesquisarDadosImoveisSorteados(idImovel);
							
							helper.setNumeroSorteado(numeroSorteado.toString());
							helper.setEndereco(endereco);
							helper.setMatricula(matricula);
							helper.setGerenciaRegional((String) dadosGerenciaLoca[0]);
							helper.setLocalidade((String) dadosGerenciaLoca[1]);
							helper.setNomeClienteUsuario(nomeCliente);
							helper.setCpfCnpjCliente(cpfCnpjCliente);
							
							//[SB017] Atualizar Sorteio Fique Legal 2013
							this.atualizarSorteioFiqueLegal2013(idPremio, numeroOrdemSorteio,idImovelCadastroSorteio);
							
							colecaoImovelSorteadoHelper.add(helper);
							sorteado = true;
						}	
					}
				}
			}
			
			return colecaoImovelSorteadoHelper;
		}  catch ( Exception e ) {
			sessionContext.setRollbackOnly();
			throw new ControladorException("erro.sistema", e);
		}
		
	}
	
	/**
	 * Autor: Jonathan Marcos
	 * Data: 26/09/2013
	 * [UC1295] Efetuar Sorteio Premio
	 */
	public Collection<RelatorioSorteioPremiosHelper> obterDadosRelatorioSorteioFiqueLegal2013(String numeroSorteio)
		throws ControladorException{
		
		try {
			
			Collection<RelatorioSorteioPremiosHelper> retorno = new ArrayList<RelatorioSorteioPremiosHelper>();
			
			Collection<Object[]> colecaoDadosImoveisSorteados =  
					repositorioCadastro.obterDadosRelatorioSorteioFiqueLegal2013(numeroSorteio);
			
			if (colecaoDadosImoveisSorteados != null
					&& !colecaoDadosImoveisSorteados.isEmpty()) {
				Iterator iterator = colecaoDadosImoveisSorteados.iterator();
				
				while(iterator.hasNext()) {
					Object[] dadosImovelSorteado = (Object[]) iterator.next();
					RelatorioSorteioPremiosHelper helper = new RelatorioSorteioPremiosHelper();
					
					Integer ordemPremio = (Integer) dadosImovelSorteado[0];
					String descricaoPremio = (String) dadosImovelSorteado[1];
					Integer numeroOrdemSorteioImovel = (Integer) dadosImovelSorteado[2];
					Integer numeroGeradoSorteio = (Integer) dadosImovelSorteado[3];
					Integer idImovel = (Integer) dadosImovelSorteado[4];
					String gerenciaRegional = (String) dadosImovelSorteado[5];
					String localidade = (String) dadosImovelSorteado[6];
					String nomeCliente = (String) dadosImovelSorteado[7];
					String cpfCnpjCliente = null;
					if (dadosImovelSorteado[8] != null) {
						cpfCnpjCliente = Util.formatarCpf((String) dadosImovelSorteado[8]);
					} else if (dadosImovelSorteado[9] != null) {
						cpfCnpjCliente = Util.formatarCnpj((String) dadosImovelSorteado[9]);
					}
				
					String endereco = this.getControladorEndereco().pesquisarEndereco(idImovel);
					String matricula = Util.retornaMatriculaImovelFormatada(idImovel);

					helper.setOrdemPremio(ordemPremio.toString());
					helper.setPremio(descricaoPremio);
					helper.setNumeroOrdemSorteioImovel(numeroOrdemSorteioImovel.toString());
					helper.setNumeroSorteio(numeroGeradoSorteio.toString());
					helper.setMatricula(matricula);
					helper.setGerenciaRegional(gerenciaRegional);
					helper.setLocalidade(localidade);
					helper.setNomeCliente(nomeCliente);
					helper.setCpfCliente(cpfCnpjCliente);
					helper.setEndereco(endereco);
					
					retorno.add(helper);
				}
			}
			
			return retorno;
		} catch ( Exception e ) {
			sessionContext.setRollbackOnly();
			throw new ControladorException("erro.sistema", e);
		}
	}
	
	/**
	 * Autor: Jonathan Marcos
	 * Data: 26/09/2013
	 * [UC1295] Efetuar Sorteio Premio
	 */
	public Date obterDataSorteioFiqueLegal2013() 
			throws ControladorException {
		try{
			return repositorioCadastro.obterDataSorteioFiqueLegal2013();
		}catch(ErroRepositorioException e){
			throw new ControladorException("erro.sistema", e);
		}
		
	}
	
	/**
	 * Autor: Jonathan Marcos
	 * Data: 30/09/2013
	 * [UC1295] Efetuar Sorteio Premio
	 */
	public Collection<PremioSorteio> obterNumeroSorteioFuqueLegal2013(Integer 
		idSorteio) throws ControladorException{
		List<PremioSorteio> colecaoPremioSorteio = new ArrayList<PremioSorteio>();
		PremioSorteio premioSorteio = null;
		try{
			
			Collection<Object[]> colecaoNumeroSorteio =  
					repositorioCadastro.obterNumeroSorteioFuqueLegal2013(idSorteio);
			
			Iterator iterator = colecaoNumeroSorteio.iterator();
			
			while(iterator.hasNext()){
				Object[] numerosPremioSorteio = (Object[]) iterator.next();
				premioSorteio = new PremioSorteio();
				
				premioSorteio.setId((Integer)numerosPremioSorteio[0]);
				
			colecaoPremioSorteio.add(premioSorteio);
			
			}
	
		}catch(ErroRepositorioException e){
			throw new ControladorException("erro.sistema", e);
		}
		return colecaoPremioSorteio;
	}


/**
	 * [UC 1392] Consultar Roteiro Dispositivo Móvel Atualização Cadastral
	 * [IT 0006] Exibir Dados Cadastrador
	 */
	public Collection<DadosCadastradorHelper> pesquisarDadosCadastrador(Integer idParametroAtualizacaoCadastral)
			throws ControladorException {
		
		DadosCadastradorHelper helper = null;
		
		Collection<DadosCadastradorHelper> colecaoHelper = null;
		Collection retorno = null;
		Object[] array = null;
		String cpf = null;	


		try{
			retorno = repositorioCadastro.pesquisarDadosCadastrador(idParametroAtualizacaoCadastral);
			
			if(!Util.isVazioOrNulo(retorno)){
				colecaoHelper = new ArrayList<DadosCadastradorHelper>();
				
				Iterator<?> it = retorno.iterator();
				while(it.hasNext()){
					array = (Object[]) it.next();
					
					helper = new DadosCadastradorHelper();
					
					if((String) array[0] != null){
						cpf = (String) array[0];
						if(cpf.length() == 11){
							cpf = Util.formatarCpf(cpf);
						}
						
						helper.setCpf(cpf);
					}
					
					if((String) array[1] != null){
						helper.setNome((String) array[1]);
					}else{
						helper.setNome("NÃO CADASTRADO NO GSAN");
					}
					
					if((Integer) array[2] != null){
						helper.setQuantidadeImoveis((Integer) array[2]);
					}
					
					colecaoHelper.add(helper);
				}
			}
			
			return colecaoHelper;
		}catch (ErroRepositorioException ex) {
            ex.printStackTrace();
            throw new ControladorException("erro.sistema", ex);
        }
	}
	
	/**
	 * [UC1560] - Validar Dados dos Endereços Enviados pelo GEO
	 * 
	 * @author Anderson Cabral
	 * @date 19/09/2013
	 */
	public void validarDadosDoEnderecoEnviadosPeloGEO(Integer idFuncionalidadeIniciada) throws ControladorException { 
		int idUnidadeIniciada = 0;
		
		/*
		 * Registrar o início do processamento da Unidade de Processamento
		 * do Batch
		 */
		idUnidadeIniciada = getControladorBatch()
				.iniciarUnidadeProcessamentoBatch(idFuncionalidadeIniciada,
						UnidadeProcessamento.FUNCIONALIDADE, 0);

		System.out.println("******************************************");
		System.out.println("PROCESSAR ARQUIVO DE ENDERECO DO GEO");
		System.out.println("******************************************");
		
//		String pastaEndereco = "C:/IPAD/tools/jboss/bin/inscricao_atraves_leiturista/endereco";
		String pastaEndereco = "/usr/local/jboss/bin/inscricao_atraves_leiturista/endereco";
		
		//Recupera o diretorio do arquivo
		File diretorio = new File(pastaEndereco + "/a_processar");
		//lista todos os arquivos
		File[] arquivos = diretorio.listFiles();
		
		try {
			
			//verifica se existe algum arquivo
			if ( arquivos != null ) {
					
				//percorre a lista de arquivos
				for (int index = 0; index < arquivos.length; index++){
					
					FileReader reader = new FileReader(arquivos[index]);
					BufferedReader buffer = new BufferedReader(reader);
					
					buffer.close();
		            reader.close();
			            
		            String nomeArquivo = arquivos[index].getName();
		            String extensao = nomeArquivo.substring(nomeArquivo.lastIndexOf("."), nomeArquivo.length());
			            
		            //verifica se o arquivo é txt
		            if ( extensao != null && (extensao.equals(".txt") || extensao.equals(".TXT")) ) {

		            	// abre o arquivo
		            	File arquivoTexto = arquivos[index];
	        			FileReader readerArquivo = new FileReader(arquivoTexto);
	        			BufferedReader bufferArquivo = new BufferedReader(readerArquivo);
	        			
	        			//criar o Helper
	        			ImovelEnderecoArquivoGEOHelper helper = null;
	        			
	        			//Linha do Arquivo
	        			String linha = null;
	        			//Registra os registros validos para geracao de um arquivo processado.
	        			StringBuilder dadosValidos = new StringBuilder("");
	        			//Registra os registros invalidos para geracao de um arquivo com erro.
	        			StringBuilder dadosInvalidos = new StringBuilder("");

	        			System.out.println("INICIO ------------------------------------ " +nomeArquivo);
	        			
	        			while ( ( linha = bufferArquivo.readLine() ) != null ) {
	        				
	        				helper = new ImovelEnderecoArquivoGEOHelper();
	        				helper.setMensagemImovelInvalido(null);	        				
	        				String mensagemErro = "";
	        				String matriculaImovel = "";
	        				
	        				linha = linha.replace(";", " ;");
	        				StringTokenizer stk = new StringTokenizer(linha, ";");
	        				List<String> colArquivos = new ArrayList<String>();
	        				
	        				while ( stk.hasMoreTokens() ) {
	        					colArquivos.add(stk.nextToken());
	        				}
	        				
	        				/*************************VALIDA ARQUIVO**************************************/
	        				
	        				//Verifica se existe 13 registros
	        				if (colArquivos.size() == 13) {
	        					
	        					//Valida Matricula
	        					String matricula = colArquivos.get(0);	
	        					matriculaImovel = matricula;
	        					Imovel imovel = null;
	        					if ( matricula != null && !matricula.trim().equals("") && Util.isInteger(matricula.trim())) {
	        						imovel = repositorioImovel.pesquisarImovelPorId( Integer.valueOf(matricula.trim()) );
	        						if ( imovel == null || imovel.getId() == null ) {
	        							mensagemErro = "IMÓVEL INEXISTENTE - ";
	        						}
	        					}else{
	        						mensagemErro = "IMÓVEL INEXISTENTE - ";
	        					}
	        					
	        					//Valida Logradouro Tipo
	        					String logradouroTipoDescr = colArquivos.get(1);
	        					LogradouroTipo logradouroTipo = null;
	        					if(logradouroTipoDescr != null && !logradouroTipoDescr.trim().equals("")){
	        						FiltroLogradouroTipo filtroLogradouroTipo = new FiltroLogradouroTipo();
	        						filtroLogradouroTipo.adicionarParametro(new ParametroSimples(FiltroLogradouroTipo.DESCRICAO, logradouroTipoDescr.trim().toUpperCase()));
	        						filtroLogradouroTipo.adicionarParametro(new ParametroSimples(FiltroLogradouroTipo.INDICADORUSO, ConstantesSistema.INDICADOR_USO_ATIVO));
	        						Collection<LogradouroTipo> colecao =  getControladorUtil().pesquisar(filtroLogradouroTipo, LogradouroTipo.class.getName());
	        						logradouroTipo = (LogradouroTipo) Util.retonarObjetoDeColecao(colecao);
	        						
	        						if(logradouroTipo == null || logradouroTipo.getId() == null){
	        							mensagemErro += "TIPO DO LOGRADOURO INEXISTENTE - ";
	        						}
	        						
	        					}else{
	        						mensagemErro += "TIPO DO LOGRADOURO INEXISTENTE - ";
	        					}
	        					
	        					//Valida Logradouro Titulo
	        					String logradouroTituloDescr = colArquivos.get(2);
	        					LogradouroTitulo logradouroTitulo = null;
	        					if(logradouroTituloDescr != null && !logradouroTituloDescr.trim().equals("")){
	        						FiltroLogradouroTitulo filtroLogradouroTitulo = new FiltroLogradouroTitulo();
	        						filtroLogradouroTitulo.adicionarParametro(new ParametroSimples(FiltroLogradouroTitulo.DESCRICAO, logradouroTituloDescr.trim().toUpperCase()));
	        						filtroLogradouroTitulo.adicionarParametro(new ParametroSimples(FiltroLogradouroTitulo.INDICADORUSO, ConstantesSistema.INDICADOR_USO_ATIVO));
	        						Collection<LogradouroTitulo> colecao =  getControladorUtil().pesquisar(filtroLogradouroTitulo, LogradouroTitulo.class.getName());
	        						logradouroTitulo = (LogradouroTitulo) Util.retonarObjetoDeColecao(colecao);
	        						
	        						if(logradouroTitulo == null || logradouroTitulo.getId() == null){
	        							mensagemErro += "TÍTULO DO LOGRADOURO INEXISTENTE - ";
	        						}	        						
	        					}
	        					
	        					//Nome Logradouro
//	        					String nomeLogradouro = colArquivos.get(3);
	        					
	        					//Numero Imovel
	        					String numeroImovel = colArquivos.get(4);
	        					
	        					//Complemento Endereco Imovel
	        					String complementoEndereco = colArquivos.get(5);
	        					
	        					//Descricao Loteamento
	        					String descricaoLoteamento = colArquivos.get(6);
	        					
	        					//Descricao Bairro
//	        					String descricaoBairro = colArquivos.get(7);
	        					
	        					//Descricao Municipio
//	        					String descricaoMunicipio = colArquivos.get(8);
	        					
	        					//CEP
	        					String codigoCep = colArquivos.get(9);
	        					Cep cep = null;
	        					if(codigoCep != null && !codigoCep.trim().equals("") && Util.isInteger(codigoCep.trim())){
	        						FiltroCep filtroCep = new FiltroCep();
	        						filtroCep.adicionarParametro(new ParametroSimples(FiltroCep.CODIGO, codigoCep));
	        						filtroCep.adicionarParametro(new ParametroSimples(FiltroCep.INDICADORUSO, ConstantesSistema.INDICADOR_USO_ATIVO));
	        						Collection<Cep> colecaoCep = getControladorUtil().pesquisar(filtroCep, Cep.class.getName());
	        						cep = (Cep) Util.retonarObjetoDeColecao(colecaoCep);
	        						
	        						if(cep == null || cep.getCepId() == null){
	        							mensagemErro += "CEP INEXISTENTE - ";
	        						}
	        					}else{
        							mensagemErro += "CEP INEXISTENTE - ";
	        					}
	        					
	        					//Codigo Municipio
	        					String codigoMunicipio = colArquivos.get(12);
	        					Municipio municipio = null;
	        					if(codigoMunicipio  != null && !codigoMunicipio.trim().equals("") && Util.isInteger(codigoMunicipio.trim())){
	        						FiltroMunicipio filtroMunicipio = new FiltroMunicipio();
	        						filtroMunicipio.adicionarParametro(new ParametroSimples(FiltroMunicipio.ID, codigoMunicipio.trim().toUpperCase()));
	        						filtroMunicipio.adicionarParametro(new ParametroSimples(FiltroMunicipio.INDICADOR_USO, ConstantesSistema.INDICADOR_USO_ATIVO));
	        						Collection<Municipio> colecaoMunicipio = getControladorUtil().pesquisar(filtroMunicipio, Municipio.class.getName());
	        						municipio = (Municipio) Util.retonarObjetoDeColecao(colecaoMunicipio);
	        						
	        						if(municipio == null || municipio.getId() == null){
	        							mensagemErro += "CÓDIGO DO MUNICÍPIO INEXISTENTE - ";
	        						}
	        						
	        					}else{
	        						mensagemErro += "CÓDIGO DO MUNICÍPIO INEXISTENTE - ";
	        					}
	        					
	        					Bairro bairro = null;
	        					if(municipio != null && municipio.getId() != null){
		        					//Codigo Bairro
		        					String codigoBairro = colArquivos.get(11);			
		        					if(codigoBairro != null && !codigoBairro.trim().equals("") && Util.isInteger(codigoBairro.trim())){
		        						FiltroBairro filtroBairro = new FiltroBairro();
		        						filtroBairro.adicionarParametro(new ParametroSimples(FiltroBairro.CODIGO, codigoBairro));
		        						filtroBairro.adicionarParametro(new ParametroSimples(FiltroBairro.MUNICIPIO_ID, municipio.getId()));
		        						filtroBairro.adicionarParametro(new ParametroSimples(FiltroBairro.INDICADOR_USO, ConstantesSistema.INDICADOR_USO_ATIVO));
		        						Collection<Bairro> colecaoBairro = getControladorUtil().pesquisar(filtroBairro, Bairro.class.getName());
		        						bairro = (Bairro) Util.retonarObjetoDeColecao(colecaoBairro);
		        						
		        						if(bairro == null || bairro.getId() == null){
		        							mensagemErro += "CÓDIGO DO BAIRRO INEXISTENTE - ";
		        						}
		        						
		        					}else{
		        						mensagemErro += "CÓDIGO DO BAIRRO INEXISTENTE - ";
		        					}
	        					}
	        					
	        					//Valida Logradouro
	        					String logradouroCodigo = colArquivos.get(10);
	        					Logradouro logradouro = null;
	        					if(logradouroCodigo != null && !logradouroCodigo.trim().equals("") && Util.isInteger(logradouroCodigo.trim())){
	        						FiltroLogradouro filtroLogradouro = new FiltroLogradouro();
	        						filtroLogradouro.adicionarParametro(new ParametroSimples(FiltroLogradouro.ID, logradouroCodigo.trim().toUpperCase()));
	        						filtroLogradouro.adicionarParametro(new ParametroSimples(FiltroLogradouro.INDICADORUSO, ConstantesSistema.INDICADOR_USO_ATIVO));
	        						filtroLogradouro.adicionarCaminhoParaCarregamentoEntidade(FiltroLogradouro.LOGRADOUROTIPO);
	        						filtroLogradouro.adicionarCaminhoParaCarregamentoEntidade(FiltroLogradouro.LOGRADOUROTITULO);
	        						Collection<Logradouro> colecao =  getControladorUtil().pesquisar(filtroLogradouro, Logradouro.class.getName());
	        						logradouro = (Logradouro) Util.retonarObjetoDeColecao(colecao);
	        						
	        						if(logradouro == null || logradouro.getId() == null){
	        							mensagemErro += "CÓDIGO DO LOGRADOURO INEXISTENTE - ";
	        							
	        							if(logradouroTipo != null && logradouroTipo.getId() != null){
		        							mensagemErro += "TIPO DO LOGRADOURO INEXISTENTE PARA LOGRADOURO INFORMADO - ";
	        							}
	        							
	        							if(logradouroTitulo != null && logradouroTitulo.getId() != null){
		        							mensagemErro += "TÍTULO DO LOGRADOURO INEXISTENTE PARA LOGRADOURO INFORMADO - ";
	        							}
	        							
	        							if(descricaoLoteamento != null && !descricaoLoteamento.trim().equals("")){
		        							mensagemErro += "LOTEAMENTO INEXISTENTE PARA LOGRADOURO INFORMADO - ";
	        							}
	        							
	        							if(municipio != null && municipio.getId() != null){
		        							mensagemErro += "MUNICÍPIO INEXISTENTE PARA LOGRADOURO INFORMADO - ";
	        							}
	        						}else{
		        						
		        						if(((logradouroTipo == null || logradouroTipo.getId() == null) && (logradouro.getLogradouroTipo() != null && logradouro.getLogradouroTipo().getId() != null))
		        								|| (logradouro.getLogradouroTipo() != null && logradouro.getLogradouroTipo().getId() != null && !logradouro.getLogradouroTipo().getId().equals(logradouroTipo.getId()))){
		        							mensagemErro += "TIPO DO LOGRADOURO INEXISTENTE PARA LOGRADOURO INFORMADO - ";
		        						}
		        						
		        						if(((logradouroTitulo == null || logradouroTitulo.getId() == null)  && (logradouro.getLogradouroTitulo() != null && logradouro.getLogradouroTitulo().getId()!= null))
		        								|| (logradouro.getLogradouroTitulo() != null && logradouro.getLogradouroTitulo().getId() != null && !logradouro.getLogradouroTitulo().getId().equals(logradouroTitulo.getId()))){
		        							mensagemErro += "TÍTULO DO LOGRADOURO INEXISTENTE PARA LOGRADOURO INFORMADO - ";
		        						}
		        						
		        						if(((descricaoLoteamento == null || descricaoLoteamento.trim().equals("")) && logradouro.getLoteamento() != null)
		        								|| (logradouro.getLoteamento() != null && !logradouro.getLoteamento().equals(descricaoLoteamento))){
		        							mensagemErro += "LOTEAMENTO INEXISTENTE PARA LOGRADOURO INFORMADO - ";
		        						}
		        						
		        						if(((municipio == null || municipio.getId() == null) && (logradouro.getMunicipio() != null && logradouro.getMunicipio().getId() != null))
		        								|| (logradouro.getMunicipio() != null && logradouro.getMunicipio().getId() != null && !logradouro.getMunicipio().getId().equals(municipio.getId()))){
		        							mensagemErro += "MUNICÍPIO INEXISTENTE PARA LOGRADOURO INFORMADO - ";
		        						}
	        						}

	        						
	        					}else{
	        						mensagemErro += "CÓDIGO DO LOGRADOURO INEXISTENTE - ";
	        					}  
	        					
	        					/***********************************************************************************/
	        					
	        					if(mensagemErro.equals("")){		        			
	    		        			ImovelEnderecoArquivoTexto imovelEnderecoArquivoTexto = new ImovelEnderecoArquivoTexto();
	    		        			imovelEnderecoArquivoTexto.setImovel(imovel);
	    		        			imovelEnderecoArquivoTexto.setLogradouro(logradouro);
	    		        			imovelEnderecoArquivoTexto.setNumeroImovel(numeroImovel);
	    		        			imovelEnderecoArquivoTexto.setComplementoEndereco(complementoEndereco);
	    		        			imovelEnderecoArquivoTexto.setCep(cep);
	    		        			imovelEnderecoArquivoTexto.setBairro(bairro);
	    		        			imovelEnderecoArquivoTexto.setIndicadorAtualizacao(ConstantesSistema.NAO);
	    		        			imovelEnderecoArquivoTexto.setUltimaAlteracao(new Date());
	    		        			
	    		        			getControladorUtil().inserir(imovelEnderecoArquivoTexto);
	    		        			
	        						helper.setIdImovel(matriculaImovel);        						
	        					}else{
	        						helper.setIdImovel(matriculaImovel);
	        						helper.setMensagemImovelInvalido(mensagemErro);
	        					}
	        					
	        				} else {
	        					if(!Util.isVazioOrNulo(colArquivos)){
	        						helper.setIdImovel(colArquivos.get(0));
	        						helper.setMensagemImovelInvalido("REGISTRO INVALIDO - ");
	        					}
	        				}
	        				
	        				//Caso o registro seja valido
	        				if ( (colArquivos.size() > 0 && !"MATRICULA".equals(colArquivos.get(0))) &&
	        						(helper.getMensagemImovelInvalido() == null || helper.getMensagemImovelInvalido().equals(""))) {
	        					
	        					//Caso o registro seja valido - armazenar os dados do registro no arquivo de processados.
	        					StringBuilder sb = new StringBuilder("");
	        					sb.append(helper.getIdImovel() + ";" );
	        					sb.append("\n");
	        					dadosValidos.append(sb);
	        				} 
	        				//Caso o registro seja invalido
	        				else if(colArquivos.size() > 0 && !"MATRICULA".equals(colArquivos.get(0))) {
	        					//Caso o registro seja invalido - armazenar os dados do registro no arquivo de erro.
	        					StringBuilder sb = new StringBuilder("");
	        					sb.append(helper.getIdImovel() + ";" );
	        					sb.append(helper.getMensagemImovelInvalido() + ";" ); 
	        					sb.append("\n");
	        					dadosInvalidos.append(sb);
	        				}
	        				
	        			}
	        			
	        			//Valida se existe algum registro invalido
    					if ( !dadosInvalidos.equals("") && dadosInvalidos.length() > 0 ) {
    						 // Escreve no arquivo de retorno criado
    			            FileOutputStream fileOut = null;
    		                fileOut = new FileOutputStream(pastaEndereco + "/erro_processamento/ERRO_"+ nomeArquivo);
    		                
    		                fileOut.write(dadosInvalidos.toString().getBytes());
    		                fileOut.flush();
    		                fileOut.close();
    					}
    					
    					//Valida se existe algum registro processado
    					if ( !dadosValidos.equals("") && dadosValidos.length() > 0 ) {
    						 // Escreve no arquivo de retorno criado
    			            FileOutputStream fileOut = null;
    		                fileOut = new FileOutputStream(pastaEndereco + "/processado/"+ nomeArquivo);
    		                
    		                fileOut.write(dadosValidos.toString().getBytes());
    		                fileOut.flush();
    		                fileOut.close();
    					}

    					// fecha o arquivo
	                    buffer.close();
	                    reader.close();
    					
    					//Remover - Arquivos processados
    					File dir = new File(pastaEndereco + "/a_processar/" +nomeArquivo);
    					dir.delete();
    					
    					System.out.println("FIM------------------------------------ " +nomeArquivo);
					}
				}
			}
			
			getControladorBatch().encerrarUnidadeProcessamentoBatch(null,idUnidadeIniciada, false);
			
		}catch (Exception ex) {
			getControladorBatch().encerrarUnidadeProcessamentoBatch(
					ex,	idUnidadeIniciada, true);
			
			ex.printStackTrace();
			throw new EJBException(ex);
		}
	}
	/**
	 * [UC1561] - Liberar os Logradouros para Atualização no GSAN
	 * 
	 * @author Anderson Cabral
	 * @since 27/09/2013
	 */
	public ArrayList<ImovelEnderecoArquivoTextoHelper> pesquisarLogradourosParaAtualizar(Integer idMunicipio) throws ControladorException{
		ArrayList<ImovelEnderecoArquivoTextoHelper> colecaoImovelEnderecoArquivoTextoHelper = null;
		try{			
				Collection<Object[]> dadosLogradouros = this.repositorioCadastro.pesquisarLogradourosParaAtualizar(idMunicipio);
				if(!Util.isVazioOrNulo(dadosLogradouros)){
					colecaoImovelEnderecoArquivoTextoHelper = new ArrayList<ImovelEnderecoArquivoTextoHelper>();
					for(Object[] dadoLogradouro : dadosLogradouros){
						ImovelEnderecoArquivoTextoHelper imovelEnderecoArquivoTextoHelper= new ImovelEnderecoArquivoTextoHelper();
						
						//Id Logradouro
						if(dadoLogradouro[0] != null){
							imovelEnderecoArquivoTextoHelper.setIdLogradouro((Integer) dadoLogradouro[0]);
						}
						
						//Nome Logradouro
						if(dadoLogradouro[1] != null){
							String nome = (String) dadoLogradouro[1];
							String tipo = (String) dadoLogradouro[4];
							String titulo = ""; 
							
							if(dadoLogradouro[5] != null){
								titulo = (String) dadoLogradouro[5];
							}
							
							String descLogradouro = tipo +" "+ titulo +" "+ nome;
							
							imovelEnderecoArquivoTextoHelper.setNomeLogradouro(descLogradouro);
						}
						
						//Id Bairro
						if(dadoLogradouro[2] != null){
							imovelEnderecoArquivoTextoHelper.setIdBairro((Integer) dadoLogradouro[2]);
						}
						
						//Nome Bairro
						if(dadoLogradouro[3] != null){
							imovelEnderecoArquivoTextoHelper.setNomeBairro((String) dadoLogradouro[3]);
						}
						
						//Qtde Imoveis Transferidos
						Integer qtdeImoveisTransferidos = this.pesquisarQtdeImoveisTransferidos(imovelEnderecoArquivoTextoHelper.getIdLogradouro(), imovelEnderecoArquivoTextoHelper.getIdBairro());
						imovelEnderecoArquivoTextoHelper.setQtdeImoveisTransferidos(qtdeImoveisTransferidos);
						
						//Qtde Imoveis Total
						Integer qtdeImoveisTotal = this.pesquisarQtdeTotalImoveis(imovelEnderecoArquivoTextoHelper.getIdLogradouro(), imovelEnderecoArquivoTextoHelper.getIdBairro());;
						imovelEnderecoArquivoTextoHelper.setQtdeImoveisTotal(qtdeImoveisTotal);
						
						colecaoImovelEnderecoArquivoTextoHelper.add(imovelEnderecoArquivoTextoHelper);
						
					}
				};	
					
				return colecaoImovelEnderecoArquivoTextoHelper;
		 } catch (ErroRepositorioException ex) {
	            ex.printStackTrace();
	            throw new ControladorException("erro.sistema", ex);
	     }
	}
	
	/**
	 * [UC1561] - Liberar os Logradouros para Atualização no GSAN
	 * [IT0004] - Pesquisar Quantidade de Imóveis Transferidos 
	 * 
	 * @author Anderson Cabral
	 * @since 26/09/2013
	 */
	public Integer pesquisarQtdeImoveisTransferidos(Integer idLogradouro, Integer idBairro) throws ControladorException{
		try{			
			return this.repositorioCadastro.pesquisarQtdeImoveisTransferidos(idLogradouro, idBairro);		
		 } catch (ErroRepositorioException ex) {
	            ex.printStackTrace();
	            throw new ControladorException("erro.sistema", ex);
	     }
	}
	
	/**
	 * [UC1561] - Liberar os Logradouros para Atualização no GSAN
	 * [IT0003] - Pesquisar Quantidade de Imóveis Total 
	 * 
	 * @author Anderson Cabral
	 * @since 26/09/2013
	 */
	public Integer pesquisarQtdeTotalImoveis(Integer idLogradouro, Integer idBairro) throws ControladorException{
		try{			
			return this.repositorioCadastro.pesquisarQtdeTotalImoveis(idLogradouro, idBairro);		
		 } catch (ErroRepositorioException ex) {
	            ex.printStackTrace();
	            throw new ControladorException("erro.sistema", ex);
	     }
	}
	
	/**
	 * [UC1561] - Liberar os Logradouros para Atualização no GSAN
	 * [SB0001] - Gerar relatório 
	 * 
	 * @author Anderson Cabral
	 * @since 26/09/2013
	 */
	public ArrayList<ImovelEnderecoArquivoTexto> pesquisarTotalImoveisArquivo(Integer idLogradouro, Integer idBairro) throws ControladorException{
		try{			
			return this.repositorioCadastro.pesquisarTotalImoveisArquivo(idLogradouro, idBairro);		
		 } catch (ErroRepositorioException ex) {
	            ex.printStackTrace();
	            throw new ControladorException("erro.sistema", ex);
	     }
	}
	
	/**
	 * [UC1561] - Liberar os Logradouros para Atualização no GSAN
	 * [IT0004] - Pesquisar Imóveis Transferidos 
	 * 
	 * @author Anderson Cabral
	 * @since 30/09/2013
	 */
	public ArrayList<Integer> pesquisarImoveisTransferidos(Integer idLogradouro, Integer idBairro) throws ControladorException{
		try{			
			return this.repositorioCadastro.pesquisarImoveisTransferidos(idLogradouro, idBairro);		
		 } catch (ErroRepositorioException ex) {
	            ex.printStackTrace();
	            throw new ControladorException("erro.sistema", ex);
	     }
	}
	
	/**
	 * [UC1561] - Liberar os Logradouros para Atualização no GSAN
	 * Pesquisa Imovel Endereco Arquivo Texto
	 * 
	 * @author Anderson Cabral
	 * @since 30/09/2013
	 */
	public ImovelEnderecoArquivoTexto pesquisarImovelEnderecoArquivo(Integer idArquivo) throws ControladorException{
		try{			
			return this.repositorioCadastro.pesquisarImovelEnderecoArquivo(idArquivo);		
		 } catch (ErroRepositorioException ex) {
	            ex.printStackTrace();
	            throw new ControladorException("erro.sistema", ex);
	     }
	}
	
	/**
	 * @author Anderson Cabral
	 * @since 17/10/2013
	 */
	public boolean verificarCadastradorComArquivoEmCampo(Integer idCadastrador)  throws ControladorException{

		try{
			return this.repositorioCadastro.verificarCadastradorComArquivoEmCampo(idCadastrador);
	
		}catch(ErroRepositorioException e){
			throw new ControladorException("erro.sistema", e);
		}
	}
	
	
	/**
	 * @author Arthur Carvalho
	 * @param helper
	 * @return
	 * @throws ControladorException
	 */
	public boolean verificarInscricaoInformadaValida(DadosImovelPreGsanHelper helper)  throws ControladorException{

		try{
			return this.repositorioCadastro.verificarInscricaoInformadaValida(helper);
	
		}catch(ErroRepositorioException e){
			throw new ControladorException("erro.sistema", e);
		}
	}
	
	/**
	 * [UC1182] Recepcionar Arquivo TXT Encerramento OS Cobrança
	 * 
	 * Pesquisa o email da Empresa 
	 * 
	 * @author Mariana Victor
	 * @data 22/06/2011
	 */
	public String pesquisarEmailEmpresa(Integer idEmpresa)throws ControladorException{

		try{
			return this.repositorioCadastro.pesquisarEmailEmpresa(idEmpresa);
	
		}catch(ErroRepositorioException e){
			throw new ControladorException("erro.sistema", e);
		}
	}
	
	/**
	 * 
	 * @author Arthur Carvalho
	 * @date 10/12/2013
	 * 
	 * @param imovel
	 * @param numeroImovel
	 * @param complemento
	 * @param logradouroBairro
	 * @param logradouroCep
	 */
	public void atualizarImovelLiberarLogradouros(Imovel imovel, String numeroImovel, String complemento, LogradouroBairro logradouroBairro, LogradouroCep logradouroCep, Usuario usuarioLogado, 
			Logradouro logradouro) throws ControladorException {
		
		//Classe responsavel por enviar todos os parametros para atualizacao cadastral
		DadosCadastraisTransacaoBatchHelper dadosCadastraisTransacaoBatchHelper = new DadosCadastraisTransacaoBatchHelper();
		dadosCadastraisTransacaoBatchHelper.setIdOperacao(Operacao.OPERACAO_LIBERAR_LOGRADOURO_ATUALIZACAO);
		
 		//Para cada tipo de alteracao (inclusao, remocao, atualizacao) os atributos são agrupados pelo tipo
 		Collection<TipoAlteracaoTransacaoBatchHelper> colecaoTipoAlteracaoTransacao = new ArrayList<TipoAlteracaoTransacaoBatchHelper>();
 		TipoAlteracaoTransacaoBatchHelper tipoAlteracaoTransacaoBatchHelper = new TipoAlteracaoTransacaoBatchHelper();
 		tipoAlteracaoTransacaoBatchHelper.setIdTabela(Tabela.IMOVEL);
 		
		//Registrar Transação no Processo Batch - adiciona na colecao os atributos que vao ser exibidos no log da transação
		Collection<ParametrosTransacaoBatchHelper> colecaoTransacaoHelper = new ArrayList<ParametrosTransacaoBatchHelper>();
		//registrar transacao batch
 		tipoAlteracaoTransacaoBatchHelper.setTipoAlteracao(AlteracaoTipo.ALTERACAO);
 		dadosCadastraisTransacaoBatchHelper.setIdArgumentoValor(imovel.getId());
		
 		//registrar transacao do numero do imovel
		ParametrosTransacaoBatchHelper numeroTransacao = new ParametrosTransacaoBatchHelper(
				imovel.getNumeroImovel(), numeroImovel, TabelaColuna.NUMERO_IMOVEL_TABELA_IMOVEL);
		colecaoTransacaoHelper.add(numeroTransacao);
		
		//Atualiza Imovel
		imovel.setNumeroImovel(numeroImovel);
		
		//registrar transacao do complemento de endereco do imovel
		ParametrosTransacaoBatchHelper complementoTransacao = new ParametrosTransacaoBatchHelper(
				imovel.getComplementoEndereco(), complemento, TabelaColuna.COMPLEMENTO_TABELA_IMOVEL);
		colecaoTransacaoHelper.add(complementoTransacao);
		
		imovel.setComplementoEndereco(complemento);
		
		
		String bairro = null;
		if ( imovel.getLogradouroBairro() != null && imovel.getLogradouroBairro().getBairro() != null &&
				imovel.getLogradouroBairro().getBairro().getNome() != null ) {
			bairro = imovel.getLogradouroBairro().getBairro().getNome();
		}
		ParametrosTransacaoBatchHelper bairroTransacao = new ParametrosTransacaoBatchHelper(
				bairro , logradouroBairro.getBairro().getNome(), TabelaColuna.BAIRRO_TABELA_IMOVEL);
		colecaoTransacaoHelper.add(bairroTransacao);
		
		imovel.setLogradouroBairro(logradouroBairro);
		
		
		String cep = null;
		if ( imovel.getLogradouroCep() != null && imovel.getLogradouroCep().getCep() != null &&
				imovel.getLogradouroCep().getCep().getCepFormatado() != null ) {
			cep = imovel.getLogradouroCep().getCep().getCepFormatado();
		}
		
		ParametrosTransacaoBatchHelper cepTransacao = new ParametrosTransacaoBatchHelper(
				cep, logradouroCep.getCep().getCepFormatado(), TabelaColuna.CEP_TABELA_IMOVEL);
		colecaoTransacaoHelper.add(cepTransacao);
		imovel.setLogradouroCep(logradouroCep);
		imovel.setUltimaAlteracao(new Date());
	
		

		String logradouroNome = null;
		if ( imovel.getLogradouroBairro() != null && imovel.getLogradouroBairro().getLogradouro() != null &&
				imovel.getLogradouroBairro().getLogradouro().getNome() != null ) {
			logradouroNome = imovel.getLogradouroBairro().getLogradouro().getNome();
		}
		
		if ( (logradouroNome == null && logradouro.getNome() != null) ||
				(logradouroNome != null && logradouro.getNome() == null) ||
				(logradouroNome != null && logradouro.getNome() != null && !logradouroNome.equals(logradouro.getNome()))) {
			ParametrosTransacaoBatchHelper logradouroTransacao = new ParametrosTransacaoBatchHelper(
					logradouroNome, logradouro.getNome(), TabelaColuna.LOGRADOURO_TABELA_IMOVEL);
			colecaoTransacaoHelper.add(logradouroTransacao);
		}
		String logradouroTipo = null;
		if ( imovel.getLogradouroBairro() != null && imovel.getLogradouroBairro().getLogradouro() != null &&
				imovel.getLogradouroBairro().getLogradouro().getLogradouroTipo() != null ) {
			logradouroTipo = imovel.getLogradouroBairro().getLogradouro().getLogradouroTipo().getDescricao();
		}
		
		String logradouroTipoAtualizado = null;
		if ( logradouro.getLogradouroTipo() != null && logradouro.getLogradouroTipo().getDescricao() != null) {
			logradouroTipoAtualizado = logradouro.getLogradouroTipo().getDescricao();
		}
		
		if ( (logradouroTipoAtualizado == null && logradouroTipo != null) ||
				(logradouroTipoAtualizado != null && logradouroTipo == null) ||
				(logradouroTipoAtualizado != null && logradouroTipo != null && !logradouroTipoAtualizado.equals(logradouroTipo))) {
		ParametrosTransacaoBatchHelper logradouroTipoTransacao = new ParametrosTransacaoBatchHelper(
				logradouroTipo, logradouroTipoAtualizado, TabelaColuna.LOGRADOURO_TIPO_TABELA_IMOVEL);
		colecaoTransacaoHelper.add(logradouroTipoTransacao);
		}
		
		String logradouroTitulo = null;
		if ( imovel.getLogradouroBairro() != null && imovel.getLogradouroBairro().getLogradouro() != null &&
				imovel.getLogradouroBairro().getLogradouro().getLogradouroTitulo() != null ) {
			logradouroTitulo = imovel.getLogradouroBairro().getLogradouro().getLogradouroTitulo().getDescricao();
		}
		
		String logradoutoTituloAtualizado = null;
		if ( logradouro.getLogradouroTitulo() != null && logradouro.getLogradouroTitulo().getDescricao() != null) {
			logradoutoTituloAtualizado = logradouro.getLogradouroTitulo().getDescricao();
		}
		
		if ( (logradoutoTituloAtualizado == null && logradouroTitulo != null) ||
				(logradoutoTituloAtualizado != null && logradouroTitulo == null) ||
				(logradoutoTituloAtualizado != null && logradouroTitulo != null && !logradoutoTituloAtualizado.equals(logradouroTitulo))) {
		ParametrosTransacaoBatchHelper logradouroTituloTransacao = new ParametrosTransacaoBatchHelper(
				logradouroTitulo, logradoutoTituloAtualizado, TabelaColuna.LOGRADOURO_TITULO_TABELA_IMOVEL);
		colecaoTransacaoHelper.add(logradouroTituloTransacao);
		}
		
		
		
		getControladorUtil().atualizar(imovel);
		// ------------ REGISTRAR TRANSAÇÃO----------------------------
		if ( colecaoTransacaoHelper != null && !colecaoTransacaoHelper.isEmpty() ) {
			
			UsuarioAcao usuarioAcao = UsuarioAcao.USUARIO_ACAO_EFETUOU_OPERACAO;
			Usuario  usuario = Usuario.USUARIO_BATCH;

			UsuarioAcaoUsuarioHelper usuarioAcaoUsuarioHelper = new UsuarioAcaoUsuarioHelper(usuario,usuarioAcao);
			
			OperacaoEfetuada operacaoEfetuada = new OperacaoEfetuada();
			Operacao operacao = new Operacao();
			operacao.setId(dadosCadastraisTransacaoBatchHelper.getIdOperacao());
			operacaoEfetuada.setOperacao(operacao);

			operacaoEfetuada.setDadosAdicionais("Matricula: "+ imovel.getId());
			operacaoEfetuada.setArgumentoValor(dadosCadastraisTransacaoBatchHelper.getIdArgumentoValor());
			tipoAlteracaoTransacaoBatchHelper.setColecaoParametrosTransacao(colecaoTransacaoHelper);
			colecaoTipoAlteracaoTransacao.add(tipoAlteracaoTransacaoBatchHelper);
			dadosCadastraisTransacaoBatchHelper.setColecaoTipoAlteracaoTransacao(colecaoTipoAlteracaoTransacao);
			getControladorTransacao().processaRegistroOperacaoDadosCadastrais(usuarioAcaoUsuarioHelper, dadosCadastraisTransacaoBatchHelper, operacaoEfetuada);
		}
		// ------------ REGISTRAR TRANSAÇÃO----------------------------
		
	}
	
	/**
	 * [UC1442] Inserir Novos Logradouros Atualização Cadastral
	 * IT010 - Pesquisar Imóveis associados ao Logradouro
	 * 
	 * @author Anderson Cabral
	 * @since 27/12/2013
	 * 
	 * @param idLogradouro
	 * @return ArrayList<Integer>
	 * @throws ErroRepositorioException
	 */
	public ArrayList<Integer> pesquisarImovelAtualizacaoCadastralPorLogradouro(Integer idLogradouro ) throws ControladorException{

		try{
			return this.repositorioCadastro.pesquisarImovelAtualizacaoCadastralPorLogradouro(idLogradouro);
	
		}catch(ErroRepositorioException e){
			throw new ControladorException("erro.sistema", e);
		}
	}
	
	
	
	/**
	 * [UC1583] Relatório de Análise das Inconsistências da Atualização Cadastral
	 * 
	 * @author Hugo Azevedo
	 * @since 20/02/2014
	 * 
	 * @param Helper
	 * @return Collection<RelatorioAnaliseInconsistenciasAtualizacaoCadastralBean> 
	 */
	public Collection<RelatorioAnaliseInconsistenciasAtualizacaoCadastralBean> 
									obterRelatorioAnaliseInconsistenciasAtualizacaoCadastral(DadosResumoMovimentoAtualizacaoCadastralHelper helper){
		
		Collection<RelatorioAnaliseInconsistenciasAtualizacaoCadastralBean> retorno = new ArrayList<RelatorioAnaliseInconsistenciasAtualizacaoCadastralBean>();
		
		try{	
			Collection<Object []> colecao = repositorioCadastro.pesquisarDadosAnaliseInconsistenciasAtualizacaoCadastral(helper);
			
			if(colecao != null && !colecao.isEmpty()){
				
				for(Iterator<Object []> it = colecao.iterator();it.hasNext();){
					RelatorioAnaliseInconsistenciasAtualizacaoCadastralBean bean = new RelatorioAnaliseInconsistenciasAtualizacaoCadastralBean();
					Object[] obj = it.next();
					
					bean.setTipoAtualizacao((String)obj[0]);
					bean.setLocalidade((String)obj[1]);
					bean.setAnalista((String)obj[2]);
					bean.setSetor((Integer)obj[3]);
					bean.setQuadra((Integer)obj[4]);
					bean.setMatriculaImovel(Util.retornaMatriculaImovelFormatada((Integer)obj[5]));
					bean.setCadastrador((String)obj[6]);
					bean.setDadosInconsistentes((String)obj[7]);
					bean.setInconsistencia((String)obj[8]);
					
					retorno.add(bean);			
				}			
			}		
		}catch(ErroRepositorioException e){
			e.printStackTrace();
			retorno = null;
		}
		
		return retorno;	
	}
	
	/**
	 * @author Jonathan Marcos
	 * @date 15/04/2014
	 * @param imac
	 */
	public ArrayList<CadastroOcorrencia> obterOcorrenciasImovelAtualizacaoCadastral(Integer imac)
		throws ControladorException{
		ArrayList<CadastroOcorrencia> colecaoCadastroOcorrencia = new ArrayList<CadastroOcorrencia>();
		try{
			Collection<Object []> retornoColecao = (Collection<Object[]>) 
					repositorioCadastro.obterOcorrenciasImovelAtualizacaoCadastral(imac);
			CadastroOcorrencia cadastroOcorrencia;
			Iterator iterator = retornoColecao.iterator();
			
			while(iterator.hasNext()){
				Object[] objeto = (Object[]) iterator.next();
				cadastroOcorrencia = new CadastroOcorrencia();
				if(objeto[0]!=null){
					cadastroOcorrencia.setId((Integer)objeto[0]);
				}
				
				if(objeto[1]!=null){
					cadastroOcorrencia.setDescricao((String)objeto[1]);
				}
				
				colecaoCadastroOcorrencia.add(cadastroOcorrencia);
			}
			
		}catch(ErroRepositorioException e){
			throw new ControladorException("erro.sistema", e);
		}
		
		return colecaoCadastroOcorrencia;
	}
}