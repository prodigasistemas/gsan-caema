/* * Copyright (C) 2007-2007 the GSAN - Sistema Integrado de Gestão de Serviços de * Saneamento This file is part of GSAN, an integrated service management system * for Sanitation GSAN is free software; you can redistribute it and/or modify * it under the terms of the GNU General Public License as published by the Free * Software Foundation; either version 2 of the License. GSAN is distributed in * the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the * implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See * the GNU General Public License for more details. You should have received a * copy of the GNU General Public License along with this program; if not, write * to the Free Software Foundation, Inc., 59 Temple Place - Suite 330, Boston, * MA 02111-1307, USA *//* * GSAN - Sistema Integrado de Gestão de Serviços de Saneamento Copyright (C) * <2007> Adriano Britto Siqueira Alexandre Santos Cabral Ana Carolina Alves * Breda Ana Maria Andrade Cavalcante Aryed Lins de Araújo Bruno Leonardo * Rodrigues Barros Carlos Elmano Rodrigues Ferreira Cláudio de Andrade Lira * Denys Guimarães Guenes Tavares Eduardo Breckenfeld da Rosa Borges Fabíola * Gomes de Araújo Flávio Leonardo Cavalcanti Cordeiro Francisco do Nascimento * Júnior Homero Sampaio Cavalcanti Ivan Sérgio da Silva Júnior José Edmar de * Siqueira José Thiago Tenório Lopes Kássia Regina Silvestre de Albuquerque * Leonardo Luiz Vieira da Silva Márcio Roberto Batista da Silva Maria de Fátima * Sampaio Leite Micaela Maria Coelho de Araújo Nelson Mendonça de Carvalho * Newton Morais e Silva Pedro Alexandre Santos da Silva Filho Rafael Corrêa * Lima e Silva Rafael Francisco Pinto Rafael Koury Monteiro Rafael Palermo de * Araújo Raphael Veras Rossiter Roberto Sobreira Barbalho Rodrigo Avellar * Silveira Rosana Carvalho Barbosa Sávio Luiz de Andrade Cavalcante Tai Mu Shih * Thiago Augusto Souza do Nascimento Tiago Moreno Rodrigues Vivianne Barbosa * Sousa Este programa é software livre; você pode redistribuí-lo e/ou * modificá-lo sob os termos de Licença Pública Geral GNU, conforme publicada * pela Free Software Foundation; versão 2 da Licença. Este programa é * distribuído na expectativa de ser útil, mas SEM QUALQUER GARANTIA; sem mesmo * a garantia implícita de COMERCIALIZAÇÃO ou de ADEQUAÇÃO A QUALQUER PROPÓSITO * EM PARTICULAR. Consulte a Licença Pública Geral GNU para obter mais detalhes. * Você deve ter recebido uma cópia da Licença Pública Geral GNU junto com este * programa; se não, escreva para Free Software Foundation, Inc., 59 Temple * Place, Suite 330, Boston, MA 02111-1307, USA. */package gcom.atendimentopublico;import gcom.atendimentopublico.bean.MensagemSmsHelper;import gcom.atendimentopublico.bean.PesquisaSatisfacaoHelper;import gcom.atendimentopublico.ligacaoagua.LigacaoAgua;import gcom.atendimentopublico.ligacaoagua.LigacaoAguaSituacao;import gcom.atendimentopublico.ordemservico.ArquivoTextoRetornoClienteFoneVisitaCampo;import gcom.atendimentopublico.ordemservico.ArquivoTextoRetornoClienteVisitaCampo;import gcom.atendimentopublico.ordemservico.ArquivoTextoRetornoVisitaCampo;import gcom.atendimentopublico.ordemservico.ClieFoneSeletivaVisitaCampo;import gcom.atendimentopublico.ordemservico.ClieOsSeletivaVisitaCampo;import gcom.atendimentopublico.ordemservico.ComandoOSConexaoEsgoto;import gcom.atendimentopublico.ordemservico.Equipe;import gcom.atendimentopublico.ordemservico.FiscalizacaoSituacao;import gcom.atendimentopublico.ordemservico.FiscalizacaoSituacaoServicoACobrar;import gcom.atendimentopublico.ordemservico.MotivoNaoEmissaoCartaEsgoto;import gcom.atendimentopublico.ordemservico.OrdemServico;import gcom.atendimentopublico.ordemservico.OrdemServicoProgramacao;import gcom.atendimentopublico.ordemservico.OsReferidaRetornoTipo;import gcom.atendimentopublico.ordemservico.ServicoCobrancaValor;import gcom.atendimentopublico.ordemservico.ServicoTipo;import gcom.atendimentopublico.ordemservico.bean.ObterValorDebitoHelper;import gcom.atendimentopublico.registroatendimento.AtendimentoMotivoEncerramento;import gcom.atendimentopublico.registroatendimento.RegistroAtendimento;import gcom.atendimentopublico.registroatendimento.RegistroAtendimentoDevolucaoValores;import gcom.atendimentopublico.registroatendimento.SolicitacaoTipoGrupo;import gcom.cadastro.cliente.Cliente;import gcom.cadastro.cliente.ClienteImovel;import gcom.cadastro.cliente.ClienteRelacaoTipo;import gcom.cadastro.cliente.OrgaoExpedidorRg;import gcom.cadastro.geografico.UnidadeFederacao;import gcom.cadastro.imovel.Categoria;import gcom.cadastro.imovel.Imovel;import gcom.cadastro.imovel.ImovelSuprimido;import gcom.cadastro.localidade.GerenciaRegional;import gcom.cadastro.localidade.UnidadeNegocio;import gcom.cadastro.sistemaparametro.SistemaParametro;import gcom.cadastro.unidade.UnidadeOrganizacional;import gcom.cobranca.CobrancaAcaoAtividadeComandoFiscalizacaoSituacao;import gcom.cobranca.DocumentoTipo;import gcom.cobranca.bean.OrdemServicoContaHelper;import gcom.cobranca.parcelamento.ParcelamentoSituacao;import gcom.faturamento.autoinfracao.AutosInfracao;import gcom.faturamento.debito.DebitoTipo;import gcom.gui.atendimentopublico.registroatendimento.FiltrarAcompanhamentoRegistroAtendimentoHelper;import gcom.gui.relatorio.atendimentopublico.FiltrarRelatorioAcompanhamentoBoletimMedicaoHelper;import gcom.gui.relatorio.atendimentopublico.FiltrarRelatorioDebitosCobrancaImovelHelper;import gcom.gui.relatorio.atendimentopublico.FiltrarRelatorioOSSituacaoHelper;import gcom.gui.relatorio.atendimentopublico.FiltrarRelatorioTiposServicoHelper;import gcom.gui.relatorio.atendimentopublico.RelatorioAcompanhamentoOSCobrancaSmartphoneHelper;import gcom.micromedicao.SituacaoTransmissaoLeitura;import gcom.micromedicao.hidrometro.HidrometroCapacidade;import gcom.micromedicao.hidrometro.HidrometroInstalacaoHistorico;import gcom.micromedicao.hidrometro.HidrometroSituacao;import gcom.relatorio.atendimentopublico.FiltrarRelatorioComandosConexaoEsgotoHelper;import gcom.relatorio.atendimentopublico.ordemservico.FiltrarRelatorioReligacaoClientesInadiplentesHelper;import gcom.util.CollectionUtil;import gcom.util.ConstantesSistema;import gcom.util.ControladorException;import gcom.util.ErroRepositorioException;import gcom.util.HibernateUtil;import gcom.util.Util;import java.math.BigDecimal;import java.sql.Connection;import java.sql.PreparedStatement;import java.sql.SQLException;import java.sql.Statement;import java.util.ArrayList;import java.util.Collection;import java.util.Date;import java.util.HashMap;import java.util.HashSet;import java.util.Iterator;import java.util.List;import java.util.Map;import java.util.Set;import org.hibernate.Criteria;import org.hibernate.FetchMode;import org.hibernate.Hibernate;import org.hibernate.HibernateException;import org.hibernate.Query;import org.hibernate.SQLQuery;import org.hibernate.Session;import org.hibernate.criterion.Restrictions;/** * < <Descrição da Classe>> *  * @author Administrador */public class RepositorioAtendimentoPublicoHBM implements		IRepositorioAtendimentoPublico {	private static IRepositorioAtendimentoPublico instancia;	/**	 * Construtor da classe RepositorioMicromedicaoHBM	 */	private RepositorioAtendimentoPublicoHBM() {	}	/**	 * Retorna o valor de instancia	 * 	 * @return O valor de instancia	 */	public static IRepositorioAtendimentoPublico getInstancia() {		if (instancia == null) {			instancia = new RepositorioAtendimentoPublicoHBM();		}		return instancia;	}	/**	 * [UC-0355] - Efetuar Corte de Ligaçã de Àgua [SB001] Atualizar Ligação -	 * (corte de ligação de água) Água- os campos LAGU_DTCORTE e	 * LAGU_NNSELOCORTE e LAGU_ TMULTIMAALTERACAO	 * 	 * @param imovel	 *            Descrição do parâmetro	 * @exception ErroRepositorioExceptions	 *                Descrição da exceção	 * @author Leandro Cavalcanti	 * @date 10/07/2006	 * @param imovel	 * @param idLigacaoAguaSituacao	 * @throws ErroRepositorioException	 */	public void atualizarLigacaoAgua(Integer idImovel,			Integer idLigacaoAguaSituacao, Integer numeroSeloCorte)			throws ErroRepositorioException {		Session session = HibernateUtil.getSession();		String update;		try {			// Atualizar os campos LAST_ID, LAGU_DTCORTE, LAGU_NNSELOCORTE e			// LAGU_ TMULTIMAALTERACAO			update = "update gcom.atendimentopublico.ligacaoagua.LigacaoAgua set "					+ "lagu_id = :idligacaoAgua ,"					+ "lagu_dtcorte = :dataExecOrdServico, "					+ "lagu_nnselocorte = :numeroSeloCorte, "					+ "lagu_tmultimaalteracao = :datahoracorrente "					+ "where lagu_id = :imovelId";			session.createQuery(update)					.setInteger("idligacaoAgua",							idLigacaoAguaSituacao.intValue())					.setDate("dataExecOrdServico", new Date())					.setInteger("numeroSeloCorte", numeroSeloCorte.intValue())					.setInteger("imovelId", idImovel.intValue())					.setDate("datahoracorrente", new Date()).executeUpdate();		} catch (HibernateException e) {			e.printStackTrace();			throw new ErroRepositorioException("Erro no Hibernate");		} finally {			HibernateUtil.closeSession(session);			// session.close();		}	}	/**	 * [UC-0355] - Efetuar Corte de Ligaçã de Àgua [SB001] Atualizar Hidrometro	 * - (corte de ligação de água) Atualizar os campos hidi_nnleituracorte e	 * hidi_tmultimaalteracao de HidrometroInstalacaoHistorico	 * 	 * @param imovel	 *            Descrição do parâmetro	 * @exception ErroRepositorioExceptions	 *                Descrição da exceção	 * @author Leandro Cavalcanti	 * @date 10/07/2006	 * @param imovel	 * @param idLigacaoAguaSituacao	 * @throws ErroRepositorioException	 */	public void atualizarHidrometroLIgacaoAgua(Integer imovelId,			Integer numeroLeituraCorte) throws ErroRepositorioException {		Session session = HibernateUtil.getSession();		String update;		try {			update = "update gcom.micromedicao.hidrometro.HidrometroInstalacaoHistorico set "					+ "hidi_nnleituracorte = :numCorte, hidi_tmultimaalteracao = :datahoracorrente "					+ "where imov_id = :imovelId";			session.createQuery(update)					.setInteger("numCorte", numeroLeituraCorte.intValue())					.setInteger("imovelId", imovelId.intValue())					.setDate("datahoracorrente", new Date()).executeUpdate();		} catch (HibernateException e) {			e.printStackTrace();			throw new ErroRepositorioException("Erro no Hibernate");		} finally {			HibernateUtil.closeSession(session);			// session.close();		}	}	/**	 * [UC-0362] - Efetuar Instalação de Hidrômetro [SB002] Atualizar Ligação de	 * Água Atualizar os campos hidi_id e lagu_tmultimaalteracao de LigacaoAgua	 * 	 * @exception ErroRepositorioExceptions	 *                Descrição da exceção	 * @author Ana Maria	 * @date 13/07/2006	 * @param idLigacaoAgua	 * @param idHidrometroInstalacaoHistorico	 * @throws ErroRepositorioException	 */	public void atualizarHidrometroInstalacaoHistoricoLigacaoAgua(			Integer idLigacaoAgua, Integer idHidrometroInstalacaoHistorico)			throws ErroRepositorioException {		Session session = HibernateUtil.getSession();		String update = null;		try {			if (idHidrometroInstalacaoHistorico != null					&& !idHidrometroInstalacaoHistorico.equals("")) {				update = "update gcom.atendimentopublico.ligacaoagua.LigacaoAgua set "						+ "hidi_id = :idHidrometroInstalacaoHistorico, lagu_tmultimaalteracao = :datahoracorrente "						+ "where lagu_id = :idLigacaoAgua";				session.createQuery(update)						.setInteger("idHidrometroInstalacaoHistorico",								idHidrometroInstalacaoHistorico.intValue())						.setTimestamp("datahoracorrente", new Date())						.setInteger("idLigacaoAgua", idLigacaoAgua.intValue())						.executeUpdate();			} else {				update = "update gcom.atendimentopublico.ligacaoagua.LigacaoAgua set "						+ "hidi_id = null, lagu_tmultimaalteracao = :datahoracorrente "						+ "where lagu_id = :idLigacaoAgua";				session.createQuery(update)						.setTimestamp("datahoracorrente", new Date())						.setInteger("idLigacaoAgua", idLigacaoAgua.intValue())						.executeUpdate();			}		} catch (HibernateException e) {			e.printStackTrace();			throw new ErroRepositorioException("Erro no Hibernate");		} finally {			HibernateUtil.closeSession(session);		}	}	/**	 * [UC-0362] - Efetuar Instalação de Hidrômetro [SB002] Atualizar Imóvel	 * Atualizar os campos hidi_id e imov_tmultimaalteracao de Imovel	 * 	 * @exception ErroRepositorioExceptions	 *                Descrição da exceção	 * @author Ana Maria	 * @date 13/07/2006	 * @param idImovel	 * @param idHidrometroInstalacaoHistorico	 * @throws ErroRepositorioException	 */	public void atualizarHidrometroIntalacaoHistoricoImovel(Integer idImovel,			Integer idHidrometroInstalacaoHistorico, Integer idPocoTipo)			throws ErroRepositorioException {		Session session = HibernateUtil.getSession();		String update = null;		try {			if (idHidrometroInstalacaoHistorico != null					&& !idHidrometroInstalacaoHistorico.equals("")) {				if (idPocoTipo != null) {					update = "update gcom.cadastro.imovel.Imovel set "							+ "hidi_id = :idHidrometroInstalacaoHistorico, imov_tmultimaalteracao = :datahoracorrente, poco_id = :idPocoTipo "							+ "where imov_id = :idImovel";					session.createQuery(update)							.setInteger("idHidrometroInstalacaoHistorico",									idHidrometroInstalacaoHistorico.intValue())							.setTimestamp("datahoracorrente", new Date())							.setInteger("idImovel", idImovel.intValue())							.setInteger("idPocoTipo", idPocoTipo)							.executeUpdate();				} else {					update = "update gcom.cadastro.imovel.Imovel set "							+ "hidi_id = :idHidrometroInstalacaoHistorico, imov_tmultimaalteracao = :datahoracorrente, poco_id = null "							+ "where imov_id = :idImovel";					session.createQuery(update)							.setInteger("idHidrometroInstalacaoHistorico",									idHidrometroInstalacaoHistorico.intValue())							.setTimestamp("datahoracorrente", new Date())							.setInteger("idImovel", idImovel.intValue())							.executeUpdate();				}			} else {				update = "update gcom.cadastro.imovel.Imovel set "						+ "hidi_id = null, imov_tmultimaalteracao = :datahoracorrente, poco_id = null "						+ "where imov_id = :idImovel";				session.createQuery(update)						.setTimestamp("datahoracorrente", new Date())						.setInteger("idImovel", idImovel.intValue())						.executeUpdate();			}		} catch (HibernateException e) {			e.printStackTrace();			throw new ErroRepositorioException("Erro no Hibernate");		} finally {			HibernateUtil.closeSession(session);		}	}	/**	 * [UC-0362] - Efetuar Instalação de Hidrômetro [SB003] Atualizar Hidrômetro	 * Atualizar o campo hisi_id	 * 	 * @exception ErroRepositorioExceptions	 *                Descrição da exceção	 * @author Ana Maria	 * @date 17/07/2006	 * @throws ErroRepositorioException	 */	public void atualizarSituacaoHidrometro(Integer idHidrometro,			Integer situacaoHidrometro) throws ErroRepositorioException {		Session session = HibernateUtil.getSession();		String update = null;		try {			update = "update gcom.micromedicao.hidrometro.Hidrometro set "					+ "hist_id = :idSituacaoHidrometro, hidr_tmultimaalteracao = :datahoracorrente "					+ "where hidr_id = :numeroHidrometro";			session.createQuery(update)					.setInteger("idSituacaoHidrometro", situacaoHidrometro)					.setTimestamp("datahoracorrente", new Date())					.setInteger("numeroHidrometro", idHidrometro.intValue())					.executeUpdate();		} catch (HibernateException e) {			e.printStackTrace();			throw new ErroRepositorioException("Erro no Hibernate");		} finally {			HibernateUtil.closeSession(session);		}	}	/**	 * [UC-0362] - Efetuar Instalação de Hidrômetro [SB003] Atualizar Hidrômetro	 * Atualizar o campo hisi_id	 * 	 * @exception ErroRepositorioExceptions	 *                Descrição da exceção	 * @author Ana Maria	 * @date 17/07/2006	 * @throws ErroRepositorioException	 */	public void atualizarLocalArmazanagemHidrometro(Integer idHidrometro,			Integer localArmazanagemHidrometro) throws ErroRepositorioException {		Session session = HibernateUtil.getSession();		String update = null;		try {			update = "update gcom.micromedicao.hidrometro.Hidrometro set "					+ "hila_id = :localArmazanagemHidrometro "					+ "where hidr_id = :numeroHidrometro";			session.createQuery(update)					.setInteger("localArmazanagemHidrometro",							localArmazanagemHidrometro)					.setInteger("numeroHidrometro", idHidrometro.intValue())					.executeUpdate();		} catch (HibernateException e) {			e.printStackTrace();			throw new ErroRepositorioException("Erro no Hibernate");		} finally {			HibernateUtil.closeSession(session);		}	}	/**	 * Substituicao de hidrometro	 */	public void atualizarSubstituicaoHidrometroInstalacoHistorico(			HidrometroInstalacaoHistorico hidrometroSubstituicaoHistorico)			throws ErroRepositorioException {		Session session = HibernateUtil.getSession();		try {			if (hidrometroSubstituicaoHistorico.getNumeroLeituraRetirada() != null) {				String sql = "update gcom.micromedicao.hidrometro.HidrometroInstalacaoHistorico "						+ "set hidi_dtretiradahidrometro = :dataRetirada "						+ ", hidi_nnleituraretiradahidrometro = :numeroLeituraRetirada "						+ ", hidi_tmultimaalteracao = :data "						+ ", hidi_icinstalacaosubstituicao =:indicadorSubstituicao"						+ " where hidi_id = :id ";				session.createQuery(sql)						.setDate(								"dataRetirada",								hidrometroSubstituicaoHistorico										.getDataRetirada())						.setInteger(								"numeroLeituraRetirada",								hidrometroSubstituicaoHistorico										.getNumeroLeituraRetirada())						.setTimestamp("data", new Date())						.setInteger("id",								hidrometroSubstituicaoHistorico.getId())						.setShort("indicadorSubstituicao", new Short("2"))						.executeUpdate();			} else {				String sql = "update gcom.micromedicao.hidrometro.HidrometroInstalacaoHistorico "						+ "set hidi_dtretiradahidrometro = :dataRetirada "						+ ", hidi_tmultimaalteracao = :data "						+ ", hidi_icinstalacaosubstituicao =:indicadorSubstituicao"						+ " where hidi_id = :id ";				session.createQuery(sql)						.setDate(								"dataRetirada",								hidrometroSubstituicaoHistorico										.getDataRetirada())						.setTimestamp("data", new Date())						.setInteger("id",								hidrometroSubstituicaoHistorico.getId())						.setShort("indicadorSubstituicao", new Short("2"))						.executeUpdate();			}		} catch (HibernateException e) {			throw new ErroRepositorioException("Erro no Hibernate");		} finally {			HibernateUtil.closeSession(session);		}	}	/**	 * [UC-0362] - Efetuar Instalação de Hidrômetro [SB003] Atualizar Hidrômetro	 * Atualizar o campo hisi_id	 * 	 * @exception ErroRepositorioExceptions	 *                Descrição da exceção	 * @author Ana Maria	 * @date 17/07/2006	 * @throws ErroRepositorioException	 */	public void atualizarHidrometroInstalacoHistorico(			HidrometroInstalacaoHistorico hidrometroSubstituicaoHistorico)			throws ErroRepositorioException {		Session session = HibernateUtil.getSession();		try {			if (hidrometroSubstituicaoHistorico.getNumeroLeituraRetirada() != null) {				String sql = "update gcom.micromedicao.hidrometro.HidrometroInstalacaoHistorico "						+ "set hidi_dtretiradahidrometro = :dataRetirada "						+ ", hidi_nnleitretiradahidmt = :numeroLeituraRetirada "						+ ", hidi_tmultimaalteracao = :data "						+ ", usur_idretirada = :idUsuarioRetirada "						+ "where hidi_id = :id ";				session.createQuery(sql)						.setDate(								"dataRetirada",								hidrometroSubstituicaoHistorico										.getDataRetirada())						.setInteger(								"numeroLeituraRetirada",								hidrometroSubstituicaoHistorico										.getNumeroLeituraRetirada())						.setTimestamp("data", new Date())						.setInteger("id",								hidrometroSubstituicaoHistorico.getId())						.setInteger(								"idUsuarioRetirada",								hidrometroSubstituicaoHistorico										.getUsuarioRetirada().getId())						.executeUpdate();			} else {				String sql = "update gcom.micromedicao.hidrometro.HidrometroInstalacaoHistorico "						+ "set hidi_dtretiradahidrometro = :dataRetirada "						+ ", hidi_tmultimaalteracao = :data "						+ "where hidi_id = :id ";				session.createQuery(sql)						.setDate(								"dataRetirada",								hidrometroSubstituicaoHistorico										.getDataRetirada())						.setTimestamp("data", new Date())						.setInteger("id",								hidrometroSubstituicaoHistorico.getId())						.executeUpdate();			}		} catch (HibernateException e) {			throw new ErroRepositorioException("Erro no Hibernate");		} finally {			HibernateUtil.closeSession(session);		}	}	/**	 * [UC0396] - Inserir Tipo de retorno da OS Referida [FS0005] Validar	 * indicador de deferimento	 * 	 * @author lms	 * @date 31/07/2006	 * @throws ErroRepositorioException	 */	public int consultarTotalIndicadorDeferimentoAtivoPorServicoTipoReferencia(			OsReferidaRetornoTipo osReferidaRetornoTipo)			throws ErroRepositorioException {		Session session = HibernateUtil.getSession();		String select = null;		try {			select = "select count(*) from gcom.atendimentopublico.ordemservico.OsReferidaRetornoTipo o where "					+ "o.indicadorDeferimento = "					+ ConstantesSistema.INDICADOR_USO_ATIVO					+ " and "					+ "o.indicadorUso = "					+ ConstantesSistema.INDICADOR_USO_ATIVO					+ " and "					+ "o.servicoTipoReferencia.id = :idServicoTipoReferencia";			return ((Integer) session					.createQuery(select)					.setInteger(							"idServicoTipoReferencia",							osReferidaRetornoTipo.getServicoTipoReferencia()									.getId()).uniqueResult()).intValue();		} catch (HibernateException e) {			e.printStackTrace();			throw new ErroRepositorioException("Erro no Hibernate");		} finally {			HibernateUtil.closeSession(session);		}	}	/**	 * [UC0463] Atualizar Consumo Mínimo da Ligação de Água	 * 	 * @author Leonardo Regis	 * @date 30/08/2006	 * @param ligacaoAgua	 * @exception ErroRepositorioExceptions	 */	public void atualizarConsumoMinimoLigacaoAgua(LigacaoAgua ligacaoAgua)			throws ErroRepositorioException {		Session session = HibernateUtil.getSession();		String update;		try {			update = "update LigacaoAgua set "					+ "numeroConsumoMinimoAgua = :consumoMinimo, "					+ "ultimaAlteracao = :dataCorrente "					+ "where id = :ligacaoAguaId";			session.createQuery(update)					.setInteger("consumoMinimo",							ligacaoAgua.getNumeroConsumoMinimoAgua())					.setTimestamp("dataCorrente",							ligacaoAgua.getUltimaAlteracao())					.setInteger("ligacaoAguaId", ligacaoAgua.getId())					.executeUpdate();		} catch (HibernateException e) {			e.printStackTrace();			throw new ErroRepositorioException("Erro no Hibernate");		} finally {			HibernateUtil.closeSession(session);		}	}	/**	 * [UC0475] Obter Valor do Débito Verificar existência de hidrômetro na	 * ligação de água.	 * 	 * @author Leonardo Regis	 * @date 09/09/2006	 * @param imovelId	 * @return existencia de hidrometro ou não	 * @throws ErroRepositorioException	 */	public boolean verificarExistenciaHidrometroEmLigacaoAgua(Integer imovelId)			throws ErroRepositorioException {		Session session = HibernateUtil.getSession();		String consulta;		boolean retorno = false;		Collection<HidrometroInstalacaoHistorico> retornoConsulta = new ArrayList();		try {			consulta = "SELECT la.hidrometroInstalacaoHistorico "					+ "FROM LigacaoAgua la " + "where la.id = :imovelId";			retornoConsulta = (Collection<HidrometroInstalacaoHistorico>) session					.createQuery(consulta).setInteger("imovelId", imovelId)					.list();			if (retornoConsulta != null && !retornoConsulta.isEmpty()) {				retorno = true;			}		} catch (HibernateException e) {			e.printStackTrace();			throw new ErroRepositorioException("Erro no Hibernate");		} finally {			HibernateUtil.closeSession(session);		}		return retorno;	}	/**	 * [UC0475] Obter Valor do Débito Verificar existência de hidrômetro no	 * imóvel.	 * 	 * @author Leonardo Regis	 * @date 09/09/2006	 * @param imovelId	 * @return existencia de hidrometro ou não	 * @throws ErroRepositorioException	 */	public boolean verificarExistenciaHidrometroEmImovel(Integer imovelId)			throws ErroRepositorioException {		Session session = HibernateUtil.getSession();		String consulta;		boolean retorno = false;		Collection<HidrometroInstalacaoHistorico> retornoConsulta = new ArrayList();		try {			consulta = "SELECT i.hidrometroInstalacaoHistorico "					+ "FROM Imovel i " + "where i.id = :imovelId";			retornoConsulta = (Collection<HidrometroInstalacaoHistorico>) session					.createQuery(consulta).setInteger("imovelId", imovelId)					.list();			if (retornoConsulta != null && !retornoConsulta.isEmpty()) {				retorno = true;			}		} catch (HibernateException e) {			e.printStackTrace();			throw new ErroRepositorioException("Erro no Hibernate");		} finally {			HibernateUtil.closeSession(session);		}		return retorno;	}	/**	 * [UC0475] Obter Valor do Débito Obter Capacidade de Hidrômetro pela	 * Ligação de Água.	 * 	 * @author Leonardo Regis	 * @date 09/09/2006	 * @param imovelId	 * @return existencia de hidrometro ou não	 * @throws ErroRepositorioException	 */	public HidrometroCapacidade obterHidrometroCapacidadeEmLigacaoAgua(			Integer imovelId) throws ErroRepositorioException {		Session session = HibernateUtil.getSession();		String consulta;		HidrometroCapacidade retornoConsulta = null;		try {			consulta = "SELECT h.hidrometroCapacidade "					+ "FROM LigacaoAgua la "					+ "INNER JOIN la.hidrometroInstalacaoHistorico hih "					+ "INNER JOIN hih.hidrometro h "					+ "INNER JOIN h.hidrometroCapacidade hc "					+ "where la.id = :imovelId";			retornoConsulta = (HidrometroCapacidade) session					.createQuery(consulta).setInteger("imovelId", imovelId)					.setMaxResults(1).uniqueResult();		} catch (HibernateException e) {			e.printStackTrace();			throw new ErroRepositorioException("Erro no Hibernate");		} finally {			HibernateUtil.closeSession(session);		}		return retornoConsulta;	}	/**	 * [UC0475] Obter Valor do Débito Obter Capacidade de Hidrômetro pelo	 * Imóvel.	 * 	 * @author Leonardo Regis	 * @date 09/09/2006	 * @param imovelId	 * @return existencia de hidrometro ou não	 * @throws ErroRepositorioException	 */	public HidrometroCapacidade obterHidrometroCapacidadeEmImovel(			Integer imovelId) throws ErroRepositorioException {		Session session = HibernateUtil.getSession();		String consulta;		HidrometroCapacidade retornoConsulta = null;		try {			consulta = "SELECT h.hidrometroCapacidade " + "FROM Imovel i "					+ "INNER JOIN i.hidrometroInstalacaoHistorico hih "					+ "INNER JOIN hih.hidrometro h "					+ "INNER JOIN h.hidrometroCapacidade hc "					+ "where i.id = :imovelId";			retornoConsulta = (HidrometroCapacidade) session					.createQuery(consulta).setInteger("imovelId", imovelId)					.setMaxResults(1).uniqueResult();		} catch (HibernateException e) {			e.printStackTrace();			throw new ErroRepositorioException("Erro no Hibernate");		} finally {			HibernateUtil.closeSession(session);		}		return retornoConsulta;	}	/**	 * [UC0475] Obter Valor do Débito Obter Valor do Debito pelos parâmtros	 * passados.	 * 	 * @author Leonardo Regis	 * @date 09/09/2006	 * @param obterValorDebitoHelper	 * @return o valor do débito	 * @throws ErroRepositorioException	 */	public BigDecimal obterValorDebito(ObterValorDebitoHelper params)			throws ErroRepositorioException {		Session session = HibernateUtil.getSession();		String consulta;		BigDecimal retornoConsulta = null;		try {			consulta = "SELECT scv.valor"					+ " FROM ServicoCobrancaValor scv"					+ " where scv.servicoTipo.id = :servicoTipoId"					+ " and scv.dataVigenciaInicial <= :dataAtual"					+ " and scv.dataVigenciaFinal >= :dataAtual"					+ " and scv.indicadorMedido = :indicadorMedido AND ("					+ " (scv.imovelPerfil.id = :imovelPerfilid OR scv.imovelPerfil.id is null) AND"					+ " (scv.hidrometroCapacidade = :hidrometroCapacidade"					+ " OR scv.hidrometroCapacidade is null) AND"					+ " (scv.categoria = :categoria OR scv.categoria is null) AND"					+ " (scv.subCategoria = :subCategoria OR scv.subCategoria is null) AND"					+ " (scv.quantidadeEconomiasInicial <= :quantidadeEconomias"					+ " OR scv.quantidadeEconomiasInicial is null) AND"					+ " (scv.quantidadeEconomiasFinal >= :quantidadeEconomias OR scv.quantidadeEconomiasFinal is null))"					+ " ORDER BY scv.imovelPerfil,scv.hidrometroCapacidade,scv.categoria,scv.subCategoria";			retornoConsulta = (BigDecimal) session					.createQuery(consulta)					.setInteger("servicoTipoId",							params.getServicoTipo().getId())					.setDate("dataAtual", new Date())					.setShort("indicadorMedido", params.getSituacaoMedicao())					.setInteger(							"imovelPerfilid",							params.getImovelPerfil() != null ? params									.getImovelPerfil().getId() : 0)					.setInteger(							"hidrometroCapacidade",							params.getHidrometroCapacidade() != null ? params									.getHidrometroCapacidade().getId() : 0)					.setInteger(							"categoria",							params.getCategoria() != null ? params									.getCategoria().getId() : 0)					.setInteger(							"subCategoria",							params.getSubcategoria() != null ? params									.getSubcategoria().getId() : 0)					.setInteger(							"quantidadeEconomias",							params.getQuantidadeEconomia() != null ? params									.getQuantidadeEconomia() : 0)					.setMaxResults(1).uniqueResult();			if (retornoConsulta == null) {				consulta = "SELECT scv.valor "						+ "FROM ServicoCobrancaValor scv "						+ "where scv.servicoTipo.id = :servicoTipoId order by scv.ultimaAlteracao desc";				retornoConsulta = (BigDecimal) session						.createQuery(consulta)						.setInteger("servicoTipoId",								params.getServicoTipo().getId())						.setMaxResults(1).uniqueResult();			}			if (retornoConsulta == null) {				consulta = "SELECT st.valor " + "FROM ServicoTipo st "						+ "where st.id = :servicoTipoId ";				retornoConsulta = (BigDecimal) session						.createQuery(consulta)						.setInteger("servicoTipoId",								params.getServicoTipo().getId())						.setMaxResults(1).uniqueResult();			}		} catch (HibernateException e) {			e.printStackTrace();			throw new ErroRepositorioException("Erro no Hibernate");		} finally {			HibernateUtil.closeSession(session);		}		return retornoConsulta;	}	/**	 * Método que retorna o número do hidrômetro da ligação de água	 * 	 * @author Ana Maria	 * @date 12/09/2006	 * @param idImovel	 * @return	 * @throws ControladorException	 */	public String pesquisarNumeroHidrometroLigacaoAgua(Integer idLigacaoAgua)			throws ErroRepositorioException {		String retorno = "";		Session session = HibernateUtil.getSession();		String consulta;		try {			consulta = " select hidr.numero" + " from LigacaoAgua lagu"					+ " inner join lagu.hidrometroInstalacaoHistorico hidi"					+ " inner join hidi.hidrometro hidr"					+ " where lagu.id = :idLigacaoAgua";			retorno = (String) session.createQuery(consulta)					.setInteger("idLigacaoAgua", idLigacaoAgua)					.setMaxResults(1).uniqueResult();		} catch (HibernateException e) {			throw new ErroRepositorioException("Erro no Hibernate");		} finally {			HibernateUtil.closeSession(session);		}		return retorno;	}	/**	 * Método que retorna o tipo da ligação de água, a data do corte da ligação	 * de água e a data da Religação	 * 	 * @author Ana Maria, Raphael Rossiter	 * @date 18/08/2006, 03/01/2008	 * @param idLigacaoAgua	 * @throws ErroRepositorioException	 */	public Object[] pesquisarDadosLigacaoAgua(Integer idLigacaoAgua)			throws ErroRepositorioException {		Object[] retorno = null;		Session session = HibernateUtil.getSession();		String consulta = "";		try {			consulta = "select lagu.corteTipo.id, lagu.dataCorteAdministrativo, lagu.dataReligacao,"					+ " lagu.dataCorte, lagu.dataSupressao"					+ " from LigacaoAgua lagu"					+ " where lagu.id = :idLigacaoAgua";			retorno = (Object[]) session.createQuery(consulta)					.setInteger("idLigacaoAgua", idLigacaoAgua)					.setMaxResults(1).uniqueResult();		} catch (HibernateException e) {			throw new ErroRepositorioException(e, "Erro no Hibernate");		} finally {			HibernateUtil.closeSession(session);		}		return retorno;	}	/**	 * Consulta os dados das ordens de serviço para a geração do relatório	 * 	 * @author Rafael Corrêa, Vivianne Sousa	 * @created 07/10/2006, 09/03/2007	 * @return	 * @throws ErroRepositorioException	 */	public Collection pesquisarOrdemServicoProgramacaoRelatorio(			Integer idEquipe, Date dataRoteiro) throws ErroRepositorioException {		Collection retorno = null;		Session session = HibernateUtil.getSession();		String consulta = null;		try {			if (dataRoteiro != null) {				consulta = "SELECT ospg.nnSequencialProgramacao, ra.id, "						+ "orse.id, svtp.id, orse.observacao "						+ "FROM OrdemServicoProgramacao ospg "						+ "INNER JOIN ospg.ordemServico orse "						+ "INNER JOIN ospg.equipe equipe "						+ "INNER JOIN ospg.programacaoRoteiro progRot "						+ "INNER JOIN orse.servicoTipo svtp "						+ "LEFT JOIN orse.registroAtendimento ra "						+ "WHERE equipe.id = :idEquipe "						+ "AND progRot.dataRoteiro = :dataRoteiro "						+ "AND orse.indicadorProgramada = :programada "						+ "AND (ospg.indicadorAtivo = :indicadorAtivo "						+ "OR (ospg.indicadorAtivo = :indicadorAtivoNao AND ospg.situacaoFechamento = :situacaoFechamento )) "						+ "ORDER BY ospg.nnSequencialProgramacao ";				retorno = session						.createQuery(consulta)						.setInteger("idEquipe", idEquipe)						.setTimestamp("dataRoteiro", dataRoteiro)						.setShort("indicadorAtivo",								OrdemServicoProgramacao.INDICADOR_ATIVO)						.setShort("indicadorAtivoNao",								OrdemServicoProgramacao.INDICADOR_ATIVO_NAO)						.setShort("situacaoFechamento",								OrdemServicoProgramacao.SITUACAO_FECHAMENTO)						.setShort("programada",								ConstantesSistema.INDICADOR_USO_ATIVO).list();			} else {				consulta = "select ospg.nnSequencialProgramacao, ra.id, "						+ "orse.id, svtp.id, orse.observacao "						+ "from OrdemServicoProgramacao ospg "						+ "inner join ospg.ordemServico orse "						+ "inner join ospg.equipe equipe "						+ "left join orse.registroAtendimento ra "						+ "inner join orse.servicoTipo svtp "						+ "where equipe.id = :idEquipe"						+ "AND orse.indicadorProgramada = :programada "						+ "AND (ospg.indicadorAtivo = :indicadorAtivo "						+ "OR (ospg.indicadorAtivo = :indicadorAtivoNao AND ospg.situacaoFechamento = :situacaoFechamento )) "						+ "ORDER BY ospg.nnSequencialProgramacao ";				retorno = session						.createQuery(consulta)						.setInteger("idEquipe", idEquipe)						.setShort("indicadorAtivo",								OrdemServicoProgramacao.INDICADOR_ATIVO)						.setShort("indicadorAtivoNao",								OrdemServicoProgramacao.INDICADOR_ATIVO_NAO)						.setShort("situacaoFechamento",								OrdemServicoProgramacao.SITUACAO_FECHAMENTO)						.setShort("programada",								ConstantesSistema.INDICADOR_USO_ATIVO).list();			}		} catch (HibernateException e) {			// levanta a exceção para a próxima camada			throw new ErroRepositorioException(e, "Erro no Hibernate");		} finally {			// fecha a sessão			HibernateUtil.closeSession(session);		}		return retorno;	}	/**	 * [UC0404] Manter Especificação da Situação do Imovel Este caso de uso	 * remove a especificação e os critério [SB0002] Remover Especificação da	 * situacao	 * 	 * @author Rafael Pinto	 * @created 08/11/2006	 * @throws ControladorException	 *             Controlador Exception	 */	public void removerEspecificacaoSituacaoImovelCriterio(			String[] idsEspecificacaoSituacaoImovel)			throws ErroRepositorioException {		String remocao = null;		Session session = HibernateUtil.getSession();		try {			remocao = "delete EspecificacaoImovSitCriterio "					+ "where esim_id IN(:ids)";			session.createQuery(remocao)					.setParameterList("ids", idsEspecificacaoSituacaoImovel)					.executeUpdate();		} catch (HibernateException e) {			// levanta a exceção para a próxima camada			throw new ErroRepositorioException(e, "Erro no Hibernate");		} finally {			// fecha a sessão			HibernateUtil.closeSession(session);		}	}	/**	 * Pesquisa todos os ids das situações de ligação de água. [UC0564 - Gerar	 * Resumo das Instalações de Hidrômetros]	 * 	 * @author Pedro Alexandre	 * @date 25/04/2007	 * @return	 * @throws ErroRepositorioException	 */	public Collection<Integer> pesquisarTodosIdsSituacaoLigacaoAgua()			throws ErroRepositorioException {		Collection<Integer> retorno = null;		Session session = HibernateUtil.getSession();		String consulta = "";		try {			consulta = "select last.id from LigacaoAguaSituacao last";			retorno = session.createQuery(consulta).list();		} catch (HibernateException e) {			throw new ErroRepositorioException(e, "Erro no Hibernate");		} finally {			HibernateUtil.closeSession(session);		}		return retorno;	}	/**	 * Pesquisa todos os ids das situações de ligação de esgoto. [UC0564 - Gerar	 * Resumo das Instalações de Hidrômetros]	 * 	 * @author Pedro Alexandre	 * @date 25/04/2007	 * @return	 * @throws ErroRepositorioException	 */	public Collection<Integer> pesquisarTodosIdsSituacaoLigacaoEsgoto()			throws ErroRepositorioException {		Collection<Integer> retorno = null;		Session session = HibernateUtil.getSession();		String consulta = "";		try {			consulta = "select lest.id from LigacaoEsgotoSituacao lest";			retorno = session.createQuery(consulta).list();		} catch (HibernateException e) {			throw new ErroRepositorioException(e, "Erro no Hibernate");		} finally {			HibernateUtil.closeSession(session);		}		return retorno;	}	/**	 * Este cso de uso permite efetuar a ligação de água e eventualmente a	 * instalação de hidrômetro, sem informação de RA sendo chamado direto pelo	 * menu. [UC0579] - Efetuar Ligação de Água com Intalação de Hidrômetro	 * 	 * @author Flávio Leonardo	 * @date 25/04/2007	 * @param idImovel	 * @return	 * @throws ErroRepositorioException	 */	public Collection pesquisarEfetuarLigacaoAguaHidrometroSemRA(			Integer idImovel) throws ErroRepositorioException {		Collection retorno = null;		Session session = HibernateUtil.getSession();		try {			String hql = "select imovel.id," // 0					+ " cliente.nome,"// 1					+ " cliente.cpf,"// 2					+ " cliente.cnpj,"// 3					+ " ligacaoAguaSituacao.descricao,"// 4					+ " ligacaoEsgotoSituacao.descricao,"// 5					+ " imovel.indicadorExclusao,"// 6					+ " quadra.indicadorRedeAgua,"// 7					+ " ligacaoAguaSituacao.id,"// 8					+ " ligacaoEsgotoSituacao.id"// 9					+ " from ClienteImovel clienteImovel"					+ " inner join clienteImovel.imovel imovel"					+ " inner join clienteImovel.cliente cliente"					+ " inner join imovel.ligacaoAguaSituacao ligacaoAguaSituacao"					+ " inner join imovel.ligacaoEsgotoSituacao ligacaoEsgotoSituacao"					+ " inner join imovel.quadra quadra"					+ " where imovel.id = :idImovel"					+ " and clienteImovel.clienteRelacaoTipo.id = :relacaoTipo"					+ " and clienteImovel.dataFimRelacao is null";			retorno = session					.createQuery(hql)					.setInteger("idImovel", idImovel)					.setInteger("relacaoTipo",							new Integer(ClienteRelacaoTipo.USUARIO))					.setMaxResults(1).list();		} catch (HibernateException e) {			// levanta a exceção para a próxima camada			throw new ErroRepositorioException(e, "Erro no Hibernate");		} finally {			// fecha a sessão			HibernateUtil.closeSession(session);		}		return retorno;	}	/**	 * [UC0XXX] Gerar Contrato de Prestação de Serviço	 * 	 * @author Rafael Corrêa	 * @date 03/05/2007	 * @throws ErroRepositorioException	 */	public Collection obterDadosContratoPrestacaoServico(Integer idImovel)			throws ErroRepositorioException {		Session session = HibernateUtil.getSession();		String consulta;		Collection retorno = null;		try {			/*			 * consulta = "SELECT clie.clie_nmcliente as nomeCliente,			 * unidNeg.uneg_nmabreviado as nomeUnidadeNegocio, " // 0, 1 +			 * "clieResponsavel.clie_nmcliente as nomeResponsavel,			 * clieResponsavel.clie_nncpf as cpfResponsavel, " // 2, 3 +			 * "clieResponsavel.clie_nnrg as rgResponsavel, clie.clie_nncpf as			 * cpfCliente, clie.clie_nnrg as rgCliente, " // 4, // 5, 6 +			 * "clie.clie_id as idCliente, clieResponsavel.clie_id as			 * idResponsavel, imov.cstf_id as consumoTarifa, " // 7, // 8, 9 +			 * "municipio.muni_nmmunicipio as nomeMunicipio " // 10 + "FROM			 * cadastro.imovel imov " + "INNER JOIN cadastro.localidade loc " +			 * "on loc.loca_id = imov.loca_id " + "LEFT OUTER JOIN			 * cadastro.bairro bairro " + "on loc.bair_id = bairro.bair_id " +			 * "LEFT OUTER JOIN cadastro.municipio municipio " + "on			 * bairro.muni_id = municipio.muni_id " // + "INNER JOIN			 * cadastro.gerencia_regional greg " // + "on greg.greg_id =			 * loc.greg_id " + "INNER JOIN cadastro.unidade_negocio unidNeg " +			 * "on unidNeg.uneg_id = loc.uneg_id " + "INNER JOIN			 * cadastro.cliente_imovel clieImov " + "on clieImov.imov_id =			 * imov.imov_id and clieImov.crtp_id = " +			 * ClienteRelacaoTipo.USUARIO.toString() + "and			 * clieImov.clim_dtrelacaofim is null " + "INNER JOIN			 * cadastro.cliente clie " + "on clie.clie_id = clieImov.clie_id " +			 * "LEFT OUTER JOIN cadastro.cliente clieResponsavel " + "on			 * clieResponsavel.clie_id = unidNeg.clie_id " + "where imov.imov_id			 * = :idImovel";			 */			consulta = "SELECT loc.loca_nmlocalidade as nomeLocalidade, "// 0					+ "clieResponsavel.clie_nmcliente as nomeResponsavel, " // 1					+ "clieResponsavel.clie_nncpf as cpfResponsavel, " // 2					+ "clieResponsavel.clie_nnrg as rgResponsavel, " // 3					+ "clieResponsavel.clie_id as idResponsavel, " // 4					+ "imov.cstf_id as consumoTarifa, " // 5					+ "municipio.muni_nmmunicipio as nomeMunicipio " // 6					// + "clie.clie_nncpf as cpfCliente, " //5					// + "clie.clie_nnrg as rgCliente, " // 6					// + "clie.clie_id as idCliente, " // 7					// + "clieResponsavel.clie_id as idResponsavel, " //8					// + "imov.cstf_id as consumoTarifa, " // 9					// + "municipio.muni_nmmunicipio as nomeMunicipio " // 10					+ "FROM cadastro.imovel imov "					+ "INNER JOIN cadastro.localidade loc "					+ "on loc.loca_id = imov.loca_id "					+ "LEFT OUTER JOIN cadastro.bairro bairro "					+ "on loc.bair_id = bairro.bair_id "					+ "LEFT OUTER JOIN cadastro.municipio municipio "					+ "on bairro.muni_id = municipio.muni_id "					// + "INNER JOIN cadastro.gerencia_regional greg "					// + "on greg.greg_id = loc.greg_id "					/*					 * + "INNER JOIN cadastro.unidade_negocio unidNeg " +					 * "on unidNeg.uneg_id = loc.uneg_id "					 */					/*					 * + "INNER JOIN cadastro.cliente_imovel clieImov " +					 * "on clieImov.imov_id = imov.imov_id and clieImov.crtp_id = "					 * + ClienteRelacaoTipo.USUARIO.toString() +					 * "and clieImov.clim_dtrelacaofim is null "					 */					/*					 * + "INNER JOIN cadastro.cliente clie " +					 * "on clie.clie_id = clieImov.clie_id "					 */					+ "LEFT OUTER JOIN cadastro.cliente clieResponsavel "					+ "on clieResponsavel.clie_id = loc.clie_id "					+ "where imov.imov_id = :idImovel";			retorno = (Collection) session					.createSQLQuery(consulta)					/*					 * .addScalar( "nomeCliente", Hibernate.STRING)					 */.addScalar("nomeLocalidade", Hibernate.STRING)					.addScalar("nomeResponsavel", Hibernate.STRING)					.addScalar("cpfResponsavel", Hibernate.STRING)					.addScalar("rgResponsavel", Hibernate.STRING)					/*					 * .addScalar("cpfCliente",					 * Hibernate.STRING).addScalar("rgCliente",					 * Hibernate.STRING)					 */					/* .addScalar("idCliente", Hibernate.INTEGER) */.addScalar(							"idResponsavel", Hibernate.INTEGER)					.addScalar("consumoTarifa", Hibernate.INTEGER)					.addScalar("nomeMunicipio", Hibernate.STRING)					.setInteger("idImovel", idImovel).list();		} catch (HibernateException e) {			e.printStackTrace();			throw new ErroRepositorioException("Erro no Hibernate");		} finally {			HibernateUtil.closeSession(session);		}		return retorno;	}	/**	 * [UC0582] - Emitir Boletim de Cadastro Obtém os dados necessário da	 * ligação de água, de esgoto e do hidrômetro instalado na ligação de água	 * 	 * @author Rafael Corrêa	 * @date 17/05/2007	 * @throws ErroRepositorioException	 */	public Object[] obterDadosLigacaoAguaEsgoto(Integer idImovel)			throws ErroRepositorioException {		Session session = HibernateUtil.getSession();		String consulta;		Object[] retorno = null;		try {			consulta = "SELECT lagu.lagd_id as diametroLigAgua, lagu.lagm_id as materialLigAgua, "					+ " lesg.legd_id as diametroLigEsgoto, lesg.legm_id as materialLigEsgoto, "					+ " hidrInstHist.hidi_nnleitinstalacaohidmt as leituraInicial, hidr.hicp_id as capacidade, "					+ " hidr.himc_id as marca, hidrInstHist.hili_id as localInstalacao, hidrInstHist.hipr_id as protecao, "					+ " hidrInstHist.hidi_iccavalete as cavalete, hidr.hidr_nnhidrometro as numeroHidrometro "					+ " FROM cadastro.imovel imov "					+ " LEFT OUTER JOIN atendimentopublico.ligacao_agua lagu on lagu.lagu_id = imov.imov_id "					+ " LEFT OUTER JOIN micromedicao.hidrometro_inst_hist hidrInstHist on hidrInstHist.hidi_id = lagu.hidi_id "					+ " LEFT OUTER JOIN micromedicao.hidrometro hidr on hidr.hidr_id = hidrInstHist.hidr_id "					+ " LEFT OUTER JOIN atendimentopublico.ligacao_esgoto lesg on lesg.lesg_id = imov.imov_id "					+ " WHERE imov.imov_id = :idImovel";			retorno = (Object[]) session.createSQLQuery(consulta)					.addScalar("diametroLigAgua", Hibernate.INTEGER)					.addScalar("materialLigAgua", Hibernate.INTEGER)					.addScalar("diametroLigEsgoto", Hibernate.INTEGER)					.addScalar("materialLigEsgoto", Hibernate.INTEGER)					.addScalar("leituraInicial", Hibernate.INTEGER)					.addScalar("capacidade", Hibernate.INTEGER)					.addScalar("marca", Hibernate.INTEGER)					.addScalar("localInstalacao", Hibernate.INTEGER)					.addScalar("protecao", Hibernate.INTEGER)					.addScalar("cavalete", Hibernate.SHORT)					.addScalar("numeroHidrometro", Hibernate.STRING)					.setInteger("idImovel", idImovel).setMaxResults(1)					.uniqueResult();		} catch (HibernateException e) {			e.printStackTrace();			throw new ErroRepositorioException("Erro no Hibernate");		} finally {			HibernateUtil.closeSession(session);		}		return retorno;	}	public void atualizarImovelLigacaoAguaInstalacaoHidrometroSemRA(			Integer idImovel, Integer idHidrometro)			throws ErroRepositorioException {		Session session = HibernateUtil.getSession();		try {			if (idImovel != null) {				String hql = "update gcom.cadastro.imovel.Imovel set "						+ "last_id = :situacao, imov_tmultimaalteracao = :ultimaAlteracao "						+ "where imov_id = :idImovel";				session.createQuery(hql)						.setInteger("situacao", LigacaoAguaSituacao.LIGADO)						.setTimestamp("ultimaAlteracao", new Date())						.setInteger("idImovel", idImovel).executeUpdate();			}			if (idHidrometro != null) {				String hql2 = "update gcom.micromedicao.hidrometro.Hidrometro set "						+ "hist_id = :situacao, hidr_tmultimaalteracao = :ultimaAlteracao "						+ "where hidr_id = :idHidrometro";				session.createQuery(hql2)						.setInteger("situacao", HidrometroSituacao.INSTALADO)						.setTimestamp("ultimaAlteracao", new Date())						.setInteger("idHidrometro", idHidrometro)						.executeUpdate();			}		} catch (HibernateException e) {			// levanta a exceção para a próxima camada			throw new ErroRepositorioException(e, "Erro no Hibernate");		} finally {			// fecha a sessão			HibernateUtil.closeSession(session);		}	}	// *********************************************************	// ****************CONTRATO PESSOA JURIDICA*****************	public Cliente pesquisaClienteContrato(Integer idCliente)			throws ErroRepositorioException {		Cliente retorno = null;		Session session = HibernateUtil.getSession();		String consulta = "";		try {			consulta = "from Cliente cliente"					+ " left join fetch cliente.profissao profissao"					+ " inner join fetch cliente.clienteTipo clienteTipo"					+ " where cliente.id = :idCliente";			retorno = (Cliente) session.createQuery(consulta)					.setInteger("idCliente", idCliente).uniqueResult();		} catch (HibernateException e) {			throw new ErroRepositorioException(e, "Erro no Hibernate");		} finally {			HibernateUtil.closeSession(session);		}		return retorno;	}	public ClienteImovel pesquisarDadosContratoJuridica(Integer idImovel)			throws ErroRepositorioException {		ClienteImovel retorno = null;		Session session = HibernateUtil.getSession();		String consulta = "";		try {			consulta = "from ClienteImovel clienteImovel"					+ " inner join fetch clienteImovel.cliente cliente"					+ " inner join fetch clienteImovel.imovel imovel"					+ " inner join fetch cliente.clienteTipo clienteTipo"					+ " inner join fetch clienteTipo.esferaPoder esferaPoder"					+ " where imovel.id = " + idImovel					+ " and clienteImovel.clienteRelacaoTipo.id = "					+ ClienteRelacaoTipo.USUARIO;			retorno = (ClienteImovel) session.createQuery(consulta)					.setMaxResults(1).uniqueResult();		} catch (HibernateException e) {			throw new ErroRepositorioException(e, "Erro no Hibernate");		} finally {			HibernateUtil.closeSession(session);		}		return retorno;	}	public String pesquisarMunicipio(Integer idImovel)			throws ErroRepositorioException {		String retorno = null;		Session session = HibernateUtil.getSession();		String consulta = "";		try {			consulta = "select municipio.nome from  Imovel imovel"					+ " inner join fetch imovel.localidade localidade"					+ " inner join fetch localidade.logradouroBairro logradouro"					+ " inner join fetch logradouro.bairro bairro"					+ " inner join fetch bairro.municipio municipio"					+ " where imovel.id = :idImovel";			retorno = (String) session.createQuery(consulta)					.setInteger("idImovel", idImovel).uniqueResult();		} catch (HibernateException e) {			throw new ErroRepositorioException(e, "Erro no Hibernate");		} finally {			HibernateUtil.closeSession(session);		}		return retorno;	}	// **********************************************************************************	/**	 * 	 * [UC0482]Emitir 2ª Via de Conta	 * 	 * obter numero do hidrômetro na ligação de água.	 * 	 * 	 * 	 * @author Vivianne Sousa	 * 	 * @date 11/09/2007	 * 	 * 	 * 	 * @param imovelId	 * 	 * @return existencia de hidrometro ou não	 * 	 * @throws ErroRepositorioException	 */	public String obterNumeroHidrometroEmLigacaoAgua(Integer imovelId)			throws ErroRepositorioException {		Session session = HibernateUtil.getSession();		String consulta;		String retornoConsulta = null;		try {			consulta = "SELECT hidr.numero " + "FROM LigacaoAgua la "					+ "inner join la.hidrometroInstalacaoHistorico hidi "					+ "inner join hidi.hidrometro hidr "					+ "where la.id = :imovelId ";			retornoConsulta = (String) session.createQuery(consulta)					.setInteger("imovelId", imovelId).uniqueResult();		} catch (HibernateException e) {			e.printStackTrace();			throw new ErroRepositorioException("Erro no Hibernate");		} finally {			HibernateUtil.closeSession(session);		}		return retornoConsulta;	}	/**	 * 	 * [UC0738] Retorna as informações para o relatório de certidão negativa	 * 	 * @param imo	 * 	 * @return	 * 	 * @throws ErroRepositorioException	 * 	 */	public Collection<Object[]> pesquisarRelatorioCertidaoNegativa(Imovel imo)			throws ErroRepositorioException {		Session session = HibernateUtil.getSession();		String consulta;		Collection retornoConsulta = null;		try {			consulta = " select \n"					+					// 0					"   cli.nome, \n"					+					// 1					"   imo.id, \n"					+					// 2					"   loc.id, \n"					+					// 3					"   sc.codigo, \n"					+					// 4					"   qua.numeroQuadra, \n"					+					// 5					"   imo.lote, \n"					+					// 6					"   imo.subLote, \n"					+					// 7					"   imo.quantidadeEconomias, \n"					+					// 8					"   ip.descricao, \n"					+					// 9					"   las.descricao, \n"					+					// 10					"   les.descricao, \n"					+					// 11					"   pt.descricao, \n"					+					// 12					"   sp.nomeAbreviadoEmpresa, \n"					+					// 13					"   sp.nomeEmpresa, \n"					+					// 14					"   sp.cnpjEmpresa, \n"					+					// 15					"   loc.descricao, \n"					+					// 16					"   coalesce( ltp.descricao, '' ) || ' ' || coalesce( ltt.descricao, '' ) || ' ' || coalesce( log.nome, '' ) as logradouro, \n"					+					// 17					"   sp.numeroImovel, \n"					+					// 18					"   sp.complementoEndereco, \n"					+					// 19					"   er.descricaoAbreviada, \n"					+					// 20					"   bai.nome, \n"					+					// 21					"   cep.codigo, \n"					+					// 22					"   sp.nomeSiteEmpresa, \n"					+					// 23					"   sp.numero0800Empresa, \n"					+					// 24					"   sp.inscricaoEstadual, \n"					+					// 25					"   imo.areaConstruida, \n"					+					// 26					"   areaConstruidaFaixa, \n"					+					// 27					"   hidr.numero, \n "					+					// 28					" unidNeg.nome, \n"					+					// 29					" cli.cpf, \n"					+					// 30					" cli.cnpj, \n"					+					// 31					" cliTipo.indicadorPessoaFisicaJuridica \n"					+ " from \n"					+ "   ClienteImovel ci \n"					+ "   inner join ci.clienteRelacaoTipo crt \n"					+ "   inner join ci.cliente cli \n"					+ "   inner join cli.clienteTipo cliTipo \n"					+ "   inner join ci.imovel imo \n"					+ "   inner join imo.localidade loc \n"					+ "   inner join loc.unidadeNegocio unidNeg \n"					+ "   inner join imo.setorComercial sc \n"					+ "   inner join imo.quadra qua \n"					+ "   inner join imo.imovelPerfil ip \n"					+ "   inner join imo.ligacaoAguaSituacao las \n"					+ "   inner join imo.ligacaoEsgotoSituacao les  \n"					+ "   left join imo.pocoTipo pt,  \n"					+ "   SistemaParametro sp \n"					// + "   left join sp.logradouro log \n"					+ "   left join sp.logradouroCep logradouroCep "					+ "   left join logradouroCep.logradouro log "					+ "   left join log.logradouroTipo ltp \n"					+ "   left join log.logradouroTitulo ltt \n"					+ "   left join sp.enderecoReferencia er \n"					// + "   left join sp.bairro bai \n"					+ "left join sp.logradouroBairro logradouroBairro "					+ "left join logradouroBairro.bairro bai \n "					// + "   left join sp.cep cep \n"					+ "   left join logradouroCep.cep cep "					+ "   left join imo.areaConstruidaFaixa areaConstruidaFaixa \n"					+ "   left join imo.ligacaoAgua lagu \n"					+ "   left join lagu.hidrometroInstalacaoHistorico hidInsHist "					+ "   left join hidInsHist.hidrometro hidr " + " where  \n"					+ "   crt.id = 2 and \n"					+ "   ci.dataFimRelacao is null and \n "					+ "   imo.id = :idImovel \n";			retornoConsulta = session.createQuery(consulta)					.setInteger("idImovel", imo.getId()).list();		} catch (HibernateException e) {			throw new ErroRepositorioException(e, "Erro no Hibernate");		} finally {			HibernateUtil.closeSession(session);		}		return retornoConsulta;	}	/**	 * Pesquisa os dados necessários para a geração do relatório	 * 	 * [UC0864] Gerar Certidão Negativa por Cliente	 * 	 * @return	 * 	 * @throws ErroRepositorioException	 */	public Collection<Object[]> pesquisarRelatorioCertidaoNegativaCliente(			Collection<Integer> idsClientes) throws ErroRepositorioException {		Session session = HibernateUtil.getSession();		String consulta;		Collection<Object[]> retorno = null;		try {			consulta = " SELECT DISTINCT clie.clie_id as idClienteResponsavel, " // 0					+ " clieImov.imov_id as idImovel, " // 1					+ " ligAguaSit.last_dsabreviado as situacaoLigacaoAgua, " // 2					+ " clie.clie_nncpf as cpf, " // 3					+ " clie.clie_nncnpj as cnpj,  " // 4					+ " clieTipo.cltp_icpessoafisicajuridica as incicadorCpfCnpj " // 5					+ " FROM cadastro.cliente clie "					+ " INNER JOIN cadastro.cliente_tipo clieTipo "					+ " on clieTipo.cltp_id = clie.cltp_id "					+ " INNER JOIN cadastro.cliente_imovel clieImov "					+ " on clieImov.clie_id = clie.clie_id and clieImov.clim_dtrelacaofim is null "					+ " INNER JOIN cadastro.imovel imov "					+ " on imov.imov_id = clieImov.imov_id "					+ " INNER JOIN atendimentopublico.ligacao_agua_situacao ligAguaSit "					+ " on ligAguaSit.last_id = imov.last_id "					+ " WHERE clie.clie_id in (:idsClientes)";			retorno = session.createSQLQuery(consulta)					.addScalar("idClienteResponsavel", Hibernate.INTEGER)					.addScalar("idImovel", Hibernate.INTEGER)					.addScalar("situacaoLigacaoAgua", Hibernate.STRING)					.addScalar("cpf", Hibernate.STRING)					.addScalar("cnpj", Hibernate.STRING)					.addScalar("incicadorCpfCnpj", Hibernate.SHORT)					.setParameterList("idsClientes", idsClientes).list();		} catch (HibernateException e) {			throw new ErroRepositorioException(e, "Erro no Hibernate");		} finally {			HibernateUtil.closeSession(session);		}		return retorno;	}	/**	 * [UC0541] Emitir 2a Via Conta Internet	 * 	 * [FS0004] - Cliente não associado ao documento	 * 	 * @author Raphael Rossiter	 * @date 21/10/2008	 * 	 * @param idImovel	 * @param cpf	 * @return Collection	 * @throws ErroRepositorioException	 */	public Collection pesquisarClienteAssociadoImovelComCPF(Integer idImovel,			String cpf) throws ErroRepositorioException {		Collection retorno = null;		Session session = HibernateUtil.getSession();		String consulta = null;		try {			consulta = "SELECT cliente " + "FROM ClienteImovel clienteImovel "					+ "INNER JOIN clienteImovel.cliente cliente "					+ "INNER JOIN clienteImovel.imovel imovel "					+ "WHERE imovel.id = :idImovel "					+ "AND clienteImovel.dataFimRelacao IS NULL "					+ "AND cliente.cpf = :cpf ";			retorno = session.createQuery(consulta)					.setInteger("idImovel", idImovel.intValue())					.setString("cpf", cpf.trim()).list();		} catch (HibernateException e) {			throw new ErroRepositorioException(e, "Erro no Hibernate");		} finally {			HibernateUtil.closeSession(session);		}		return retorno;	}	/**	 * [UC0541] Emitir 2a Via Conta Internet	 * 	 * [FS0004] - Cliente não associado ao documento	 * 	 * @author Raphael Rossiter	 * @date 21/10/2008	 * 	 * @param idImovel	 * @param cnpj	 * @return Collection	 * @throws ErroRepositorioException	 */	public Collection pesquisarClienteAssociadoImovelComCNPJ(Integer idImovel,			String cnpj) throws ErroRepositorioException {		Collection retorno = null;		Session session = HibernateUtil.getSession();		String consulta = null;		try {			consulta = "SELECT cliente " + "FROM ClienteImovel clienteImovel "					+ "INNER JOIN clienteImovel.cliente cliente "					+ "INNER JOIN clienteImovel.imovel imovel "					+ "WHERE imovel.id = :idImovel "					+ "AND clienteImovel.dataFimRelacao IS NULL "					+ "AND cliente.cnpj = :cnpj ";			retorno = session.createQuery(consulta)					.setInteger("idImovel", idImovel.intValue())					.setString("cnpj", cnpj.trim()).list();		} catch (HibernateException e) {			throw new ErroRepositorioException(e, "Erro no Hibernate");		} finally {			HibernateUtil.closeSession(session);		}		return retorno;	}	/**	 * [UC0482] Emitir 2a Via Conta	 * 	 * [FS0002] - Cliente sem documento	 * 	 * @author Raphael Rossiter	 * @date 24/10/2008	 * 	 * @param idImovel	 * @return Collection	 * @throws ErroRepositorioException	 */	public Collection pesquisarClienteAssociadoImovelComDocumentoInformado(			Integer idImovel) throws ErroRepositorioException {		Collection retorno = null;		Session session = HibernateUtil.getSession();		String consulta = null;		try {			consulta = "SELECT cliente "					+ "FROM ClienteImovel clienteImovel "					+ "INNER JOIN clienteImovel.cliente cliente "					+ "INNER JOIN clienteImovel.imovel imovel "					+ "WHERE imovel.id = :idImovel "					+ "AND clienteImovel.dataFimRelacao IS NULL "					+ "AND (cliente.cpf IS NOT NULL OR cliente.cnpj IS NOT NULL)";			retorno = session.createQuery(consulta)					.setInteger("idImovel", idImovel.intValue()).list();		} catch (HibernateException e) {			throw new ErroRepositorioException(e, "Erro no Hibernate");		} finally {			HibernateUtil.closeSession(session);		}		return retorno;	}	/**	 * [UC0150] Retificar Conta	 * 	 * @author Vivianne Sousa	 * @date 26/11/2008	 */	public BigDecimal obterPercentualAguaConsumidaColetadaImovel(			Integer idImovel) throws ErroRepositorioException {		Session session = HibernateUtil.getSession();		String consulta;		BigDecimal retornoConsulta = null;		try {			consulta = "SELECT le.percentualAguaConsumidaColetada "					+ "FROM LigacaoEsgoto le " + "where le.id = :idImovel ";			retornoConsulta = (BigDecimal) session.createQuery(consulta)					.setInteger("idImovel", idImovel).setMaxResults(1)					.uniqueResult();		} catch (HibernateException e) {			e.printStackTrace();			throw new ErroRepositorioException("Erro no Hibernate");		} finally {			HibernateUtil.closeSession(session);		}		return retornoConsulta;	}	/**	 * [UC0XXX] Gerar Contrato de Prestação de Serviço	 * 	 * @author Rafael Corrêa	 * @date 03/05/2007	 * @throws ErroRepositorioException	 */	public Collection obterDadosUnidadeNegocioeInformacoesResponsavel(			Integer idImovel) throws ErroRepositorioException {		Session session = HibernateUtil.getSession();		String consulta;		Collection retorno = null;		try {			consulta = "SELECT unidNeg.uneg_nmabreviado as nomeUnidadeNegocio, " // 0					+ "clieResponsavel.clie_nmcliente as nomeResponsavel, " // 1					+ "clieResponsavel.clie_nncpf as cpfResponsavel, " // 2					+ "clieResponsavel.clie_nnrg as rgResponsavel, " // 3					/*					 * + "clie.clie_nncpf as cpfCliente, " // 5 +					 * "clie.clie_nnrg as rgCliente, " // 6 +					 * "clie.clie_id as idCliente, " //7					 */					+ "clieResponsavel.clie_id as idResponsavel, " // 4					+ "imov.cstf_id as consumoTarifa, " // 5					+ "municipio.muni_nmmunicipio as nomeMunicipio " // 6					+ "FROM cadastro.imovel imov "					+ "INNER JOIN cadastro.localidade loc "					+ "on loc.loca_id = imov.loca_id "					+ "LEFT OUTER JOIN cadastro.bairro bairro "					+ "on loc.bair_id = bairro.bair_id "					+ "LEFT OUTER JOIN cadastro.municipio municipio "					+ "on bairro.muni_id = municipio.muni_id "					// + "INNER JOIN cadastro.gerencia_regional greg "					// + "on greg.greg_id = loc.greg_id "					+ "INNER JOIN cadastro.unidade_negocio unidNeg "					+ "on unidNeg.uneg_id = loc.uneg_id "					/*					 * + "INNER JOIN cadastro.cliente_imovel clieImov " +					 * "on clieImov.imov_id = imov.imov_id and clieImov.crtp_id = "					 * + ClienteRelacaoTipo.USUARIO.toString() +					 * "and clieImov.clim_dtrelacaofim is null " +					 * "INNER JOIN cadastro.cliente clie " +					 * "on clie.clie_id = clieImov.clie_id "					 */					+ "LEFT OUTER JOIN cadastro.cliente clieResponsavel "					+ "on clieResponsavel.clie_id = unidNeg.clie_id "					+ "where imov.imov_id = :idImovel";			retorno = (Collection) session.createSQLQuery(consulta)					.addScalar("nomeCliente", Hibernate.STRING)					.addScalar("nomeUnidadeNegocio", Hibernate.STRING)					.addScalar("nomeResponsavel", Hibernate.STRING)					.addScalar("cpfResponsavel", Hibernate.STRING)					.addScalar("rgResponsavel", Hibernate.STRING)					.addScalar("cpfCliente", Hibernate.STRING)					.addScalar("rgCliente", Hibernate.STRING)					.addScalar("idCliente", Hibernate.INTEGER)					.addScalar("idResponsavel", Hibernate.INTEGER)					.addScalar("consumoTarifa", Hibernate.INTEGER)					.addScalar("nomeMunicipio", Hibernate.STRING)					.setInteger("idImovel", idImovel).list();		} catch (HibernateException e) {			e.printStackTrace();			throw new ErroRepositorioException("Erro no Hibernate");		} finally {			HibernateUtil.closeSession(session);		}		return retorno;	}	/**	 * [UC0898] Atualizar Autos de Infração com prazo de Recurso Vencido	 * 	 * @author Sávio Luiz	 * @date 08/05/2009	 */	public Collection<AutosInfracao> pesquisarAutoInfracaoRecursoVencido(			Integer idSituacaoAutoInfracao, Date prazoEntregaRecursoVencido)			throws ErroRepositorioException {		Session session = HibernateUtil.getSession();		String consulta;		Collection retornoConsulta = null;		try {			consulta = "SELECT ai "					+ "FROM AutosInfracao ai "					+ "INNER JOIN ai.fiscalizacaoSituacao fs "					+ "INNER JOIN ai.autoInfracaoSituacao ais "					+ "where ais.id = :idAutoInfracaoSituacao and  ai.dataEmissao < :prazoEntregaRecursoVencido";			retornoConsulta = session					.createQuery(consulta)					.setInteger("idAutoInfracaoSituacao",							idSituacaoAutoInfracao)					.setDate("prazoEntregaRecursoVencido",							prazoEntregaRecursoVencido).list();		} catch (HibernateException e) {			e.printStackTrace();			throw new ErroRepositorioException("Erro no Hibernate");		} finally {			HibernateUtil.closeSession(session);		}		return retornoConsulta;	}	/**	 * [UC0898] Atualizar Autos de Infração com prazo de Recurso Vencido	 * 	 * [SB0001] Atualizar Autos Infração	 * 	 * @author Sávio Luiz	 * @date 08/05/2009	 */	public void atualizarAutosInfracao(Collection idsAutosInfracao,			Integer idSituacaoAutoInfracao) throws ErroRepositorioException {		Session session = HibernateUtil.getSession();		String update;		try {			update = "update AutosInfracao set "					+ "aist_id = :idSituacaoAutoInfracao,"					+ "auif_tmultimaalteracao = :datahoracorrente "					+ "where auif_id in (:idsAutosInfracao)";			session.createQuery(update)					.setInteger("idSituacaoAutoInfracao",							idSituacaoAutoInfracao)					.setParameterList("idsAutosInfracao", idsAutosInfracao)					.setDate("datahoracorrente", new Date()).executeUpdate();		} catch (HibernateException e) {			e.printStackTrace();			throw new ErroRepositorioException("Erro no Hibernate");		} finally {			HibernateUtil.closeSession(session);		}	}	/**	 * [UC0898] Atualizar Autos de Infração com prazo de Recurso Vencido	 * 	 * @author Sávio Luiz	 * @date 08/05/2009	 */	public Collection<FiscalizacaoSituacaoServicoACobrar> pesquisarFiscalizacaoSituacaoServicoACobrar(			Integer idFiscalizacaoSituacao) throws ErroRepositorioException {		Session session = HibernateUtil.getSession();		String consulta;		Collection<Object[]> retornoConsulta = null;		Collection<FiscalizacaoSituacaoServicoACobrar> collFiscalizacaoSituacaoSAC = null;		try {			consulta = "SELECT fssc.consumoCalculo, "// 0					+ "fs.indicadorAtualizacaoAutosInfracao, "// 1					+ "dt.valorSugerido, "// 2					+ "fssc.numeroVezesServicoCalculadoValor, "// 3					+ "dt.id, "// 4					+ "fs.id, "// 5					+ "fssc.indicadorMultaInfracao "// 6					+ "FROM FiscalizacaoSituacaoServicoACobrar fssc "					+ "INNER JOIN fssc.fiscalizacaoSituacao fs "					+ "INNER JOIN fssc.debitoTipo dt "					+ "where fs.id = :idFiscalizacaoSituacao";			retornoConsulta = session					.createQuery(consulta)					.setInteger("idFiscalizacaoSituacao",							idFiscalizacaoSituacao).list();			collFiscalizacaoSituacaoSAC = new ArrayList();			if (retornoConsulta != null && !retornoConsulta.isEmpty()) {				for (Object[] parmsFiscalizacao : retornoConsulta) {					FiscalizacaoSituacaoServicoACobrar fiscalizacaoSituacaoServicoACobrar = new FiscalizacaoSituacaoServicoACobrar();					if (parmsFiscalizacao != null) {						// consumo do calculo						if (parmsFiscalizacao[0] != null) {							fiscalizacaoSituacaoServicoACobrar									.setConsumoCalculo((Short) parmsFiscalizacao[0]);						}						// indicador de multa de infração						if (parmsFiscalizacao[6] != null) {							fiscalizacaoSituacaoServicoACobrar									.setIndicadorMultaInfracao((Short) parmsFiscalizacao[6]);						}						// id da situação do auto						if (parmsFiscalizacao[5] != null) {							FiscalizacaoSituacao fiscalizacaoSituacao = new FiscalizacaoSituacao();							fiscalizacaoSituacao									.setId((Integer) parmsFiscalizacao[5]);							// Inidicador atualização autos infração							if (parmsFiscalizacao[1] != null) {								fiscalizacaoSituacao										.setIndicadorAtualizacaoAutosInfracao((Short) parmsFiscalizacao[1]);								fiscalizacaoSituacaoServicoACobrar										.setFiscalizacaoSituacao(fiscalizacaoSituacao);							}						}						// valor sugerido do débito tipo						if (parmsFiscalizacao[4] != null) {							DebitoTipo debitoTipo = new DebitoTipo();							debitoTipo.setId((Integer) parmsFiscalizacao[4]);							if (parmsFiscalizacao[2] != null) {								debitoTipo										.setValorSugerido((BigDecimal) parmsFiscalizacao[2]);							}							fiscalizacaoSituacaoServicoACobrar									.setDebitoTipo(debitoTipo);						}						// número de vezes de cálculo de valor						if (parmsFiscalizacao[3] != null) {							fiscalizacaoSituacaoServicoACobrar									.setNumeroVezesServicoCalculadoValor((Short) parmsFiscalizacao[3]);						}						collFiscalizacaoSituacaoSAC								.add(fiscalizacaoSituacaoServicoACobrar);					}				}			}		} catch (HibernateException e) {			e.printStackTrace();			throw new ErroRepositorioException("Erro no Hibernate");		} finally {			HibernateUtil.closeSession(session);		}		return collFiscalizacaoSituacaoSAC;	}	/**	 * [UC0996] Emitir Ordem de Fiscalização para imóveis suprimidos	 * 	 * @author Hugo Amorim	 * @date 08/03/2010	 * @param idFuncionalidadeIniciada	 * @param usuarioLogado	 * @param setorComercial	 */	public Collection<Object[]> pesquisarImoveisBatchEmitirOrdemFiscalizacao(			Integer idSetorComercial, Date data, Integer quantidadeInicio,			Integer quantidadeMaxima) throws ErroRepositorioException {		Session session = HibernateUtil.getSession();		String consulta;		Collection<Object[]> retorno = null;		try {			consulta = "SELECT i.imov_id as imovel,"					+ " iper_dsimovelperfil as perfil,"					+ " i.loca_id as idLocalida,"					+ " sc.stcm_id as idSetor,"					+ " sc.stcm_cdsetorcomercial as codSetor,"					+ " q.qdra_id as idQuadra,"					+ " q.qdra_nnquadra as numeroQuadra,"					+ " imov_nnlote as lote,"					+ " imov_nnsublote as subLote,"					+ " imov_tmultimaalteracao as ultimaAlteracao,"					+ " last.last_id as ligacaoAguaSituacao,"					+ " last.last_dsligacaoaguasituacao as desLigacaoAguaSituacao,"					+ " lest.lest_id as ligacaoEsgotoSituacao,"					+ " lest.lest_dsligacaoesgotosituacao as descLigacaoEsgotoSituacao,"					+ " lagu.lagu_dtcorte as dataCorte,"					+ " clie_nmcliente as nomeCliente,"					+ " clie_nncpf as cpf,"					+ " clie_nncnpj as cnpj,"					+ " clie_nnrg as rg,"					+ " cfon_nnfone as fone,"					+ " cfon_nnfoneramal as ramal,"					+ " fnet_dsfonetipo as foneTipo,"					+ " lagu_dtsupressaoagua as dataSupressao,"					+ " r.ftgr_id as faturamentoGrupo,"					+ " lesg.lesg_nnconsumominimoesgoto as consumoMinimo"					+ " FROM cadastro.imovel i"					+ " INNER JOIN cadastro.setor_comercial sc on sc.stcm_id = i.stcm_id"					+ " INNER JOIN cadastro.quadra q on q.qdra_id = i.qdra_id"					+ " INNER JOIN micromedicao.rota r on r.rota_id = q.rota_id"					+ " INNER JOIN atendimentopublico.ligacao_agua lagu on lagu.lagu_id = i.imov_id"					+ " LEFT JOIN atendimentopublico.ligacao_esgoto lesg on lesg.lesg_id = i.imov_id"					+ " INNER JOIN atendimentopublico.ligacao_esgoto_situacao lest on lest.lest_id = i.lest_id"					+ " INNER JOIN cadastro.imovel_perfil ip on ip.iper_id = i.iper_id"					+ " INNER JOIN atendimentopublico.ligacao_agua_situacao last on last.last_id = i.last_id"					+ " INNER JOIN cadastro.cliente_imovel cliImov on cliImov.imov_id = i.imov_id"					+ " INNER JOIN cadastro.cliente cli on cli.clie_id = cliImov.clie_id"					+ " LEFT JOIN cadastro.cliente_fone cf on cf.clie_id = cli.clie_id AND cfon_icfonepadrao  = :icFonePadrao"					+ " LEFT JOIN cadastro.fone_tipo ft on ft.fnet_id = cf.fnet_id"					+ " LEFT JOIN atendimentopublico.ordem_servico os on os.imov_id = i.imov_id and orse_cdsituacao = :osSituacao "					+ " AND os.svtp_id = (SELECT svtp_id FROM atendimentopublico.servico_tipo WHERE svtp_nncodigoconstante = :servicoTipoFisc ) "					+ " WHERE i.last_id in (:ligacoesAguaSituacao)"					+ " AND i.imov_icexclusao = :indicador"					+ " AND lagu_dtsupressaoagua < :data"					+ " AND cliImov.crtp_id = :clienteRelacaoTipo and clim_dtrelacaofim is null"					+ " AND i.imov_id not in "					+ "(SELECT imov_id FROM atendimentopublico.ordem_servico WHERE svtp_id = "					+ "(SELECT svtp_id FROM atendimentopublico.servico_tipo WHERE svtp_nncodigoconstante = :servicoTipoFisc ) "					+ "and orse_cdsituacao != :osSituacao  ) "					+ " AND i.stcm_id = :idSetor"					+ " ORDER BY i.loca_id,sc.stcm_cdsetorcomercial,q.qdra_nnquadra,imov_nnlote,imov_nnsublote";			Collection ligacoesAguaSituacao = new ArrayList<Integer>();			ligacoesAguaSituacao.add(LigacaoAguaSituacao.SUPRIMIDO);			ligacoesAguaSituacao.add(LigacaoAguaSituacao.SUPR_PARC);			ligacoesAguaSituacao.add(LigacaoAguaSituacao.SUPR_PARC_PEDIDO);			retorno = session					.createSQLQuery(consulta)					.addScalar("imovel", Hibernate.INTEGER)					.addScalar("perfil", Hibernate.STRING)					.addScalar("idLocalida", Hibernate.INTEGER)					.addScalar("idSetor", Hibernate.INTEGER)					.addScalar("codSetor", Hibernate.INTEGER)					.addScalar("idQuadra", Hibernate.INTEGER)					.addScalar("numeroQuadra", Hibernate.INTEGER)					.addScalar("lote", Hibernate.SHORT)					.addScalar("subLote", Hibernate.SHORT)					.addScalar("ultimaAlteracao", Hibernate.TIMESTAMP)					.addScalar("ligacaoAguaSituacao", Hibernate.INTEGER)					.addScalar("desLigacaoAguaSituacao", Hibernate.STRING)					.addScalar("ligacaoEsgotoSituacao", Hibernate.INTEGER)					.addScalar("descLigacaoEsgotoSituacao", Hibernate.STRING)					.addScalar("dataCorte", Hibernate.DATE)					.addScalar("nomeCliente", Hibernate.STRING)					.addScalar("cpf", Hibernate.STRING)					.addScalar("cnpj", Hibernate.STRING)					.addScalar("rg", Hibernate.STRING)					.addScalar("fone", Hibernate.STRING)					.addScalar("ramal", Hibernate.STRING)					.addScalar("foneTipo", Hibernate.STRING)					.addScalar("dataSupressao", Hibernate.DATE)					.addScalar("faturamentoGrupo", Hibernate.INTEGER)					.addScalar("consumoMinimo", Hibernate.INTEGER)					.setParameterList("ligacoesAguaSituacao",							ligacoesAguaSituacao)					.setShort("osSituacao", OrdemServico.SITUACAO_ENCERRADO)					.setInteger("servicoTipoFisc",							ServicoTipo.TIPO_ORDEM_SERVICO_FISCALIZACAO)					.setShort("indicador",							ConstantesSistema.INDICADOR_USO_DESATIVO)					.setShort("icFonePadrao", ConstantesSistema.SIM)					.setDate("data", data)					.setShort("clienteRelacaoTipo", ClienteRelacaoTipo.USUARIO)					.setInteger("idSetor", idSetorComercial)					.setFirstResult(quantidadeInicio)					.setMaxResults(quantidadeMaxima).list();		} catch (HibernateException e) {			throw new ErroRepositorioException(e, "Erro no Hibernate");		} finally {			HibernateUtil.closeSession(session);		}		return retorno;	}	/**	 * [UC0996] Emitir Ordem de Fiscalização para imóveis suprimidos	 * 	 * Inseri objeto na base do tipo ImovelSuprimido	 * 	 * @author Hugo Amorim	 * @date 08/03/2010	 * @param idFuncionalidadeIniciada	 * @param usuarioLogado	 * @param setorComercial	 */	public void inserirImovelSuprimido(ImovelSuprimido imovelSuprimido)			throws ErroRepositorioException {		Session session = HibernateUtil.getSession();		Connection con = null;		Statement stmt = null;		con = session.connection();		try {			stmt = con.createStatement();			String insert = " INSERT INTO cadastro.imoveis_suprimidos("					+ " imsu_id, orse_id, imsu_dstxtgerado, imsu_tmexecucao,"					+ " imsu_tmultimaalteracao, loca_id, stcm_cdsetorcomercial, stcm_id,"					+ " qdra_id, imsu_nnlote, imsu_nnsublote, qdra_nnquadra)"					+ " VALUES (nextval('cadastro.sequence_imoveis_suprimidos')"					+ " ,"					+ imovelSuprimido.getOrdemServico().getId()					+ " ,'"					+ imovelSuprimido.getLinhaTxt()					+ "'"					+ " ,'"					+ imovelSuprimido.getDataExecucao()					+ "'"					+ " , now()"					+ " ,"					+ imovelSuprimido.getIdLocalidade()					+ " ,"					+ imovelSuprimido.getCodigoSetorComercial()					+ " ,"					+ imovelSuprimido.getIdSetorComercial()					+ " ,"					+ imovelSuprimido.getIdQuadra()					+ " ,"					+ imovelSuprimido.getNumeroLote()					+ " ,"					+ imovelSuprimido.getNumeroSubLote()					+ " ,"					+ imovelSuprimido.getNumeroQuadra() + ")";			stmt.executeUpdate(insert);		} catch (HibernateException e) {			throw new ErroRepositorioException(e, "Erro no Hibernate");		} catch (SQLException e) {			throw new ErroRepositorioException(e, "Erro no Hibernate");		} finally {			HibernateUtil.closeSession(session);		}	}	/**	 * [UC0996] Emitir Ordem de Fiscalização para imóveis suprimidos	 * 	 * Pesquisas linhas do txt	 * 	 * @author Hugo Amorim	 * @date 08/03/2010	 * @param idFuncionalidadeIniciada	 * @param usuarioLogado	 * @param setorComercial	 */	public Collection<ImovelSuprimido> pesquisarDadosEmitirArquivoTextoDeOrdemFiscalizacao(			Integer quantidadeInicio, Integer quantidadeMaxima)			throws ErroRepositorioException {		Session session = HibernateUtil.getSession();		Collection retorno = null;		String consulta;		try {			consulta = // "SELECT linhaTxt "			"FROM ImovelSuprimido  "					+ " ORDER BY idLocalidade,codigoSetorComercial,numeroQuadra,numeroLote,numeroSubLote ";			retorno = session.createQuery(consulta)					.setFirstResult(quantidadeInicio)					.setMaxResults(quantidadeMaxima).list();		} catch (HibernateException e) {			e.printStackTrace();			throw new ErroRepositorioException("Erro no Hibernate");		} finally {			HibernateUtil.closeSession(session);		}		return retorno;	}	/**	 * [SB0002]  Replicar os serviços existentes para uma nova vigência e	 * valor. Pesquisa a última vigência de cada tipo serviço, e retorna uma	 * coleção.	 * 	 * @author Josenildo Neves	 * @date 03/02/2010	 */	public Collection<ServicoCobrancaValor> pesquisarServicoCobrancaValorUltimaVigencia(			Integer numeroPagina) throws ErroRepositorioException {		Collection retorno = null;		Session session = HibernateUtil.getSession();		String consulta;		try {			consulta = "select " + "* "					+ "from atendimentopublico.servico_cobranca_valor scv, "					+ "(select " + "svtp_id as id, "					+ "max(scbv_dtvigenciafinal) as data "					+ "from atendimentopublico.servico_cobranca_valor "					+ "group by " + "svtp_id) sc " + "where "					+ "scv.svtp_id = id and "					+ "scv.scbv_dtvigenciafinal = sc.data";			retorno = session.createSQLQuery(consulta)					.addScalar("scbv_id", Hibernate.INTEGER)					.addScalar("svtp_id", Hibernate.INTEGER)					.addScalar("iper_id", Hibernate.INTEGER)					.addScalar("hicp_id", Hibernate.INTEGER)					.addScalar("scbv_vlservico", Hibernate.BIG_DECIMAL)					.addScalar("scbv_icmedido", Hibernate.SHORT)					.addScalar("scbv_tmultimaalteracao", Hibernate.DATE)					.addScalar("scat_id", Hibernate.INTEGER)					.addScalar("scbv_dtvigenciainicial", Hibernate.DATE)					.addScalar("scbv_dtvigenciafinal", Hibernate.DATE)					.addScalar("scbv_qteconomiasinicial", Hibernate.INTEGER)					.addScalar("scbv_qteconomiasfinal", Hibernate.INTEGER)					.addScalar("scbv_icconsideraeconomias", Hibernate.SHORT)					.addScalar("catg_id", Hibernate.INTEGER)					.setFirstResult(10 * numeroPagina).setMaxResults(10).list();		} catch (HibernateException e) {			// levanta a exceção para a próxima camada			throw new ErroRepositorioException(e, "Erro no Hibernate");		} finally {			// fecha a sessão			HibernateUtil.closeSession(session);		}		return retorno;	}	/**	 * [SB0002]  Replicar os serviços existentes para uma nova vigência e	 * valor. Pesquisa a última vigência de cada tipo serviço, e retorna o	 * total.	 * 	 * @author Josenildo Neves	 * @date 03/02/2010	 */	public Integer pesquisarServicoCobrancaValorUltimaVigenciaTotal()			throws ErroRepositorioException {		Integer retorno = null;		Session session = HibernateUtil.getSession();		String consulta;		try {			consulta = "select " + "* "					+ "from atendimentopublico.servico_cobranca_valor scv, "					+ "(select " + "svtp_id as id, "					+ "max(scbv_dtvigenciafinal) as data "					+ "from atendimentopublico.servico_cobranca_valor "					+ "group by " + "svtp_id) sc " + "where "					+ "scv.svtp_id = id and "					+ "scv.scbv_dtvigenciafinal = sc.data";			retorno = session.createSQLQuery(consulta)					.addScalar("scbv_id", Hibernate.INTEGER)					.addScalar("svtp_id", Hibernate.INTEGER)					.addScalar("iper_id", Hibernate.INTEGER)					.addScalar("hicp_id", Hibernate.INTEGER)					.addScalar("scbv_vlservico", Hibernate.DOUBLE)					.addScalar("scbv_icmedido", Hibernate.SHORT)					.addScalar("scbv_tmultimaalteracao", Hibernate.DATE)					.addScalar("scbv_dtvigenciainicial", Hibernate.DATE)					.addScalar("scbv_dtvigenciafinal", Hibernate.DATE)					.addScalar("scat_id", Hibernate.INTEGER)					.addScalar("scbv_qteconomiasinicial", Hibernate.INTEGER)					.addScalar("scbv_qteconomiasfinal", Hibernate.INTEGER)					.addScalar("scbv_icconsideraeconomias", Hibernate.SHORT)					.list().size();		} catch (HibernateException e) {			// levanta a exceção para a próxima camada			throw new ErroRepositorioException(e, "Erro no Hibernate");		} finally {			// fecha a sessão			HibernateUtil.closeSession(session);		}		return retorno;	}	/**	 * [SB0002]  Replicar os Valores de Cobrança de Serviço existentes para uma	 * nova vigência e valor. Pesquisa a última vigência de cada tipo Cobrança,	 * e retorna uma coleção.	 * 	 * @author Hugo Leonardo	 * @date 14/04/2010	 */	public Collection<ServicoCobrancaValor> replicarServicoCobrancaValorUltimaVigencia(			String[] selecionados) throws ErroRepositorioException {		Collection retorno = null;		Session session = HibernateUtil.getSession();		String consulta;		try {			consulta = " select * "					+ " from atendimentopublico.servico_cobranca_valor scv, "					+ " (select svtp_id as id, "					+ " max(scbv_dtvigenciafinal) as data "					+ " from atendimentopublico.servico_cobranca_valor "					+ " group by svtp_id) sc " + " where scv.svtp_id = id "					+ " and scv.scbv_dtvigenciafinal = sc.data "					+ " and scv.scbv_id in (:selecionados)";			retorno = session.createSQLQuery(consulta)					.addScalar("scbv_id", Hibernate.INTEGER)					.addScalar("svtp_id", Hibernate.INTEGER)					.addScalar("iper_id", Hibernate.INTEGER)					.addScalar("hicp_id", Hibernate.INTEGER)					.addScalar("scbv_vlservico", Hibernate.BIG_DECIMAL)					.addScalar("scbv_icmedido", Hibernate.SHORT)					.addScalar("scbv_tmultimaalteracao", Hibernate.DATE)					.addScalar("scat_id", Hibernate.INTEGER)					.addScalar("scbv_dtvigenciainicial", Hibernate.DATE)					.addScalar("scbv_dtvigenciafinal", Hibernate.DATE)					.addScalar("scbv_qteconomiasinicial", Hibernate.INTEGER)					.addScalar("scbv_qteconomiasfinal", Hibernate.INTEGER)					.addScalar("scbv_icconsideraeconomias", Hibernate.SHORT)					.addScalar("catg_id", Hibernate.INTEGER)					.addScalar("scbv_icgerardebito", Hibernate.SHORT)					.setParameterList("selecionados", selecionados).list();		} catch (HibernateException e) {			// levanta a exceção para a próxima camada			throw new ErroRepositorioException(e, "Erro no Hibernate");		} finally {			// fecha a sessão			HibernateUtil.closeSession(session);		}		return retorno;	}	/**	 * [UC0391] Inserir valor cobrança Serviço.	 * 	 * Verificar se existe vigência já cadastrada para o Serviço Tipo.	 * 	 * @author Hugo Leonardo	 * @param dataVigenciaInicial	 * @param dataVigenciaFinal	 * @param idServicoTipo	 * @param opcao	 * @throws ErroRepositorioException	 * @data 03/05/2010	 * 	 *       return String	 * 	 * @see Caso a opcao = 1 - verifica as situações de inserir e atualizar	 *      Serviço Tipo.	 * @see Caso a opcao = 2 - verifica a situação de retificar Serviço Tipo.	 */	public String verificarExistenciaVigenciaServicoTipo(			String dataVigenciaInicial, String dataVigenciaFinal,			Integer idServicoTipo) throws ErroRepositorioException {		String retorno = "";		Session session = HibernateUtil.getSession();		String consulta = "";		consulta += " select svtp_id as cont "				+ " from atendimentopublico.servico_cobranca_valor "				+ " where ((scbv_dtvigenciainicial <= :dataInicial "				+ " or scbv_dtvigenciainicial <= :dataFinal) "				+ " and scbv_dtvigenciafinal >= :dataFinal ) "				+ " and svtp_id = :idServicoTipo";		try {			retorno = (String) session					.createSQLQuery(consulta)					.addScalar("cont", Hibernate.STRING)					.setInteger("idServicoTipo", idServicoTipo)					.setDate("dataInicial",							Util.converteStringParaDate(dataVigenciaInicial))					.setDate("dataFinal",							Util.converteStringParaDate(dataVigenciaFinal))					.setMaxResults(1).uniqueResult();		} catch (HibernateException e) {			// levanta a exceção para a próxima camada			throw new ErroRepositorioException(e, "Erro no Hibernate");		} finally {			// fecha a sessão			HibernateUtil.closeSession(session);		}		return retorno;	}	/**	 * [UC0366] Inserir Registro de Atendimento [SB0034]  Verificar RA de	 * urgência	 * 	 * Verifica se o Registro de Atendimento tem o nivel selecionado como	 * Urgência	 * 	 * @author Daniel Alves	 * @param ID	 *            do Registro de Atendimento	 * @throws ErroRepositorioException	 * @data 03/06/2010	 * 	 * 	 */	public Integer verificarRegistroAtendimentoUrgencia(			Integer idRegistroAtendimento) throws ErroRepositorioException {		Integer retorno = 0;		Session session = HibernateUtil.getSession();		String consulta = "";		consulta += "SELECT COUNT(*) AS contador "				+ "FROM gcom.atendimentopublico.registroatendimento.RegistroAtendimento ra "				+ "INNER JOIN ra.solicitacaoTipoEspecificacao step "				+ "WHERE ra.id = :registroAtendimento "				+ "AND step.indicadorUrgencia = 1";		try {			retorno = (Integer) session.createQuery(consulta)					.setInteger("registroAtendimento", idRegistroAtendimento)					.setMaxResults(1).uniqueResult();		} catch (HibernateException e) {			// levanta a exceção para a próxima camada			throw new ErroRepositorioException(e, "Erro no Hibernate");		} finally {			// fecha a sessão			HibernateUtil.closeSession(session);		}		return retorno;	}	/**	 * [UC0366] Inserir Registro de Atendimento [SB0034]  Verificar RA de	 * urgência	 * 	 * Pesquisar os Usuários da Unidade relacionada a RA, na tabela	 * "VisualizacaoRaUrgencia"	 * 	 * @author Daniel Alves	 * @param ID	 *            do Registro de Atendimento	 * @throws ErroRepositorioException	 * @data 03/06/2010	 * 	 */	public Collection pesquisarUsuarioVisualizacaoRaUrgencia(			Integer idRegistroAtendimento) throws ErroRepositorioException {		Session session = HibernateUtil.getSession();		Collection retorno = null;		int quantidadeRA = verificarRegistroAtendimentoUrgencia(idRegistroAtendimento);		if (quantidadeRA > 0) {			String consulta = "";			consulta += "SELECT ra.id, usuario.id, 2, 2 "					+ "FROM gcom.atendimentopublico.registroatendimento.RegistroAtendimento ra "					+ "INNER JOIN ra.unidadeAtual unidade, "					+ "gcom.seguranca.acesso.usuario.Usuario usuario "					+ "WHERE usuario.unidadeOrganizacional.id = unidade.id "					+ "AND ra.id = :registroAtendimento ";			try {				retorno = (Collection) session						.createQuery(consulta)						.setInteger("registroAtendimento",								idRegistroAtendimento).list();			} catch (HibernateException e) {				// levanta a exceção para a próxima camada				throw new ErroRepositorioException(e, "Erro no Hibernate");			} finally {				// fecha a sessão				HibernateUtil.closeSession(session);			}		}		return retorno;	}	/**	 * [UC0503] Tramitar Conjunto Registro Atendimento * [SB0004]  Verificar RA	 * de urgência	 * 	 * Retorna um ou todos usuários da unidade relacionada a RA, da tabela	 * "VisualizacaoRaUrgencia"	 * 	 * @author Daniel Alves	 * @param ID	 *            do Registro de Atendimento, ID da Unidade, ID do Usuário	 * @throws ErroRepositorioException	 * @data 04/06/2010	 * 	 */	public Collection pesquisarVisualizacaoRaUrgencia(			Integer idRegistroAtendimento, Integer idUnidade, Integer idUsuario)			throws ErroRepositorioException {		Session session = HibernateUtil.getSession();		Collection retorno = null;		// valor padrão, usado para entrar no if quando nao houver RA informada		int quantidadeRA = 1;		if (idRegistroAtendimento != null) {			quantidadeRA = verificarRegistroAtendimentoUrgencia(idRegistroAtendimento);		}		if (quantidadeRA > 0) {			String consulta = "";			consulta += "SELECT vrau.registroAtendimento.id, vrau.usuario.id, 2, 2, vrau.id "					+ "FROM gcom.atendimentopublico.registroatendimento.VisualizacaoRegistroAtendimentoUrgencia vrau "					+ "INNER JOIN vrau.usuario usuario ";			if (idRegistroAtendimento != null) {				consulta += "WHERE vrau.registroAtendimento.id = "						+ idRegistroAtendimento + " ";			} else {				consulta += "WHERE ";			}			if (idUnidade != null) {				consulta += "usuario.unidadeOrganizacional.id = " + idUnidade						+ " AND ";			} else if (idUsuario != null) {				consulta += "usuario.id = " + idUsuario + " AND ";			}			// remove o último AND			consulta = Util.removerUltimosCaracteres(consulta, 4);			try {				retorno = (Collection) session.createQuery(consulta).list();			} catch (HibernateException e) {				// levanta a exceção para a próxima camada				throw new ErroRepositorioException(e, "Erro no Hibernate");			} finally {				// fecha a sessão				HibernateUtil.closeSession(session);			}		}		return retorno;	}	/**	 * [UC0503] Tramitar Conjunto Registro Atendimento * [SB0004]  Verificar RA	 * de urgência	 * 	 * Verifica se o Registro de Atendimento já está relacionado a uma Unidade	 * informada.	 * 	 * @author Daniel Alves	 * @param ID	 *            do Registro de Atendimento	 * @throws ErroRepositorioException	 * @data 05/06/2010	 * 	 */	public Integer verificarUsuariosRegistroAtendimentoUrgencia(			Integer idRegistroAtendimento, Integer idUnidade)			throws ErroRepositorioException {		Integer retorno = 0;		Session session = HibernateUtil.getSession();		String consulta = "";		consulta += "SELECT COUNT(*) as contador "				+ "FROM gcom.atendimentopublico.registroatendimento.VisualizacaoRegistroAtendimentoUrgencia vrau "				+ "INNER JOIN vrau.usuario usuario "				+ "WHERE vrau.registroAtendimento.id = :registroAtendimento "				+ "AND usuario.unidadeOrganizacional.id = " + idUnidade + " ";		try {			retorno = (Integer) session.createQuery(consulta)					.setInteger("registroAtendimento", idRegistroAtendimento)					.setMaxResults(1).uniqueResult();		} catch (HibernateException e) {			// levanta a exceção para a próxima camada			throw new ErroRepositorioException(e, "Erro no Hibernate");		} finally {			// fecha a sessão			HibernateUtil.closeSession(session);		}		return retorno;	}	/**	 * [UC1028] Exibir Registro Atendimento Urgência	 * 	 * Verifica se o Usuario possui algum Registro de Atendimento urgente.	 * 	 * @author Daniel Alves	 * @param ID	 *            do Registro de Atendimento	 * @throws ErroRepositorioException	 * @data 07/06/2010	 * 	 */	public Collection verificarUsuarioRegistroAtendimentoUrgencia(			Integer idUsuario) throws ErroRepositorioException {		Collection retorno = null;		Session session = HibernateUtil.getSession();		String consulta = "";		consulta += "SELECT DISTINCT(vrau.indicadorReiteracao) as indicador "				+ "FROM gcom.atendimentopublico.registroatendimento.VisualizacaoRegistroAtendimentoUrgencia vrau "				+ "INNER JOIN vrau.registroAtendimento rgat "				+ "WHERE vrau.usuario.id = :idUsuario "				+ "AND vrau.indicadorTramite = 2 "				+ "AND vrau.indicadorVisualizacao = 2 ";		// "AND rgat.parecerEncerramento is null " +		// "AND rgat.dataEncerramento is null ";		// consulta +="SELECT COUNT(*) as contador " +		// "FROM gcom.atendimentopublico.registroatendimento.VisualizacaoRegistroAtendimentoUrgencia vrau "		// +		// "WHERE vrau.usuario.id = :idUsuario " +		// "AND vrau.indicadorTramite = 2 " +		// "AND vrau.indicadorVisualizacao = 2 ";		try {			retorno = (Collection) session.createQuery(consulta)					.setInteger("idUsuario", idUsuario).list();		} catch (HibernateException e) {			// levanta a exceção para a próxima camada			throw new ErroRepositorioException(e, "Erro no Hibernate");		} finally {			// fecha a sessão			HibernateUtil.closeSession(session);		}		return retorno;	}	/**	 * Atualiza um ou vários campos da tabela "VisualizacaoRaUrgencia"	 * 	 * @author Daniel Alves	 * @param ID	 *            do Registro de Atendimento, ID da Unidade, ID do Usuário,	 *            indicador Tramite e indicador Visualizacao	 * @throws ErroRepositorioException	 * @data 10/06/2010	 * 	 */	public void atualizarUsuarioRegistroAtendimentoUrgencia(			Integer idRegistroAtendimento, String idUsuarios,			Integer idUsuario, Integer indicadorTramite,			Integer indicadorVisualizacao) throws ErroRepositorioException {		Session session = HibernateUtil.getSession();		String update;		try {			update = "UPDATE gcom.atendimentopublico.registroatendimento.VisualizacaoRegistroAtendimentoUrgencia vrau set ";			if (indicadorTramite != null) {				update += "vrau.indicadorTramite = " + indicadorTramite + ", ";			}			if (indicadorVisualizacao != null) {				update += "vrau.indicadorVisualizacao = "						+ indicadorVisualizacao + ", ";			}			update += "vrau.ultimaAlteracao = :ultimaAlteracao " + "WHERE ";			if (idRegistroAtendimento != null) {				update += "vrau.registroAtendimento.id = "						+ idRegistroAtendimento + " AND ";			}			if (idUsuario != null) {				update += "vrau.usuario.id = " + idUsuario + " AND ";			}			if (idUsuarios != null) {				update += "vrau.usuario.id IN( " + idUsuarios + " ) AND ";			}			update = Util.removerUltimosCaracteres(update, 4);			session.createQuery(update).setDate("ultimaAlteracao", new Date())					.executeUpdate();		} catch (HibernateException e) {			e.printStackTrace();			throw new ErroRepositorioException("Erro no Hibernate");		} finally {			HibernateUtil.closeSession(session);			// session.close();		}	}	/**	 * [UC0251] Gerar Atividade de Ação de Cobrança	 * 	 * @author Hugo Amorim	 * @date 15/07/2010	 */	public Collection<CobrancaAcaoAtividadeComandoFiscalizacaoSituacao> pesquisarCobrancaAcaoAtividadeComandoFiscalizacaoSituacao(			Integer idComando, Collection idsSituacos)			throws ErroRepositorioException {		Session session = HibernateUtil.getSession();		Collection retorno = null;		String consulta;		try {			consulta = "FROM CobrancaAcaoAtividadeComandoFiscalizacaoSituacao"					+ " INNER JOIN FETCH cobAcaoFisc.fiscalizacaoSituacao fiscSit"					+ " WHERE cobrancaAcaoAtividadeComando.id = :idComando"					+ " AND fiscSit.id in ( :idsSituacos )";			retorno = session.createQuery(consulta)					.setInteger("idComando", idComando)					.setParameterList("idsSituacos", idsSituacos).list();		} catch (HibernateException e) {			e.printStackTrace();			throw new ErroRepositorioException("Erro no Hibernate");		} finally {			HibernateUtil.closeSession(session);		}		return retorno;	}	/**	 * [UC1056] Gerar Relatório de Acompanhamento dos Registros de Atendimento	 * 	 * @author Hugo Leonardo, Diogo Peixoto	 * @date 28/09/2010, 26/04/2011	 * 	 * @param FiltrarAcompanhamentoRegistroAtendimentoHelper	 * @return Collection	 * @throws ErroRepositorioException	 */	public Collection pesquisarRelatorioAcompanhamentoRAAnalitico(			FiltrarAcompanhamentoRegistroAtendimentoHelper helper)			throws ErroRepositorioException {		Collection retorno = null;		String consulta = "";		Query query = null;		Session session = HibernateUtil.getSession();		String groupByMunicipio = "";		String orderBy = " rau.unidadeOrganizacional ";		if (!Util.isVazioOrNulo(helper.getMunicipiosAssociados())) {			groupByMunicipio = " GROUP BY munRA.nome, munRA.id,  rau.unidadeOrganizacional.id, step.descricao, ra.registroAtendimento, "					+ " ra.dataEncerramento, ra.dataEncerramento, ame.descricao, rau.unidadeOrganizacional.descricao, ame.id, ra.id ";			orderBy = " munRA.nome ";		}		try {			consulta += this					.montarSelectRelatorioAcompanhamentoAnalitico(helper)					+ this.montarFromRelatorioAcompanhamentoAnalitico(helper)					+ " where ra.unidadeAtual = uni.id and ";			if (Util.verificarNaoVazio(helper.getIdUnidadeAtendimento())) {				consulta += " rau.unidadeOrganizacional = :unidade  and "						+ " rau.atendimentoRelacaoTipo = 1 and ";			}			if (!Util.isVazioOrNulo(helper.getMunicipiosAssociados())) {				consulta += " (munRA.id IN (:municipios) or munImo.id IN (:municipios)) and ";			}			if (!Util.isVazioOrNulo(helper					.getIdsMotivoEncerramentoSelecionados())) {				consulta += " ame.id in (:motivo) and ";			}			if (helper.getPeriodoAtendimentoInicial() != null					&& helper.getPeriodoAtendimentoFinal() != null) {				consulta += " (ra.registroAtendimento between :dtAtendimentoIncial and :dtAtendimentoFinal) and ";			}			if (helper.getPeriodoEncerramentoInicial() != null					&& helper.getPeriodoEncerramentoFinal() != null) {				consulta += " (ra.dataEncerramento between :dtEncerramentoIncial and :dtEncerramentoFinal) and ";			}			if (Util.verificarNaoVazio(helper.getSituacaoRA())) {				consulta += " ra.codigoSituacao = :situacao and ";			}			if (Util.verificarNaoVazio(helper.getSituacaoRA())					&& helper.getSituacaoRA().equals("0")					&& Util.verificarNaoVazio(helper.getSituacaoRAAbertos())					&& helper.getSituacaoRAAbertos().equals("1")) {				consulta += " (ra.dataPrevistaAtual >= :dtCorrente "						+ " or ra.dataPrevistaOriginal >= :dtCorrente) and ";			} else if (Util.verificarNaoVazio(helper.getSituacaoRA())					&& helper.getSituacaoRA().equals("0")					&& Util.verificarNaoVazio(helper.getSituacaoRAAbertos())					&& helper.getSituacaoRAAbertos().equals("0")) {				consulta += " (ra.dataPrevistaAtual < :dtCorrente "						+ " or ra.dataPrevistaOriginal < :dtCorrente) and ";			}			// remove o último AND			consulta = Util.removerUltimosCaracteres(consulta, 4);			consulta += groupByMunicipio;			consulta += " ORDER BY " + orderBy;			query = (Query) session.createQuery(consulta);			if (Util.verificarNaoVazio(helper.getIdUnidadeAtendimento())) {				query.setString("unidade", helper.getIdUnidadeAtendimento()						.toString());			}			if (!Util.isVazioOrNulo(helper.getMunicipiosAssociados())) {				query.setParameterList("municipios",						helper.getMunicipiosAssociados());			}			if (!Util.isVazioOrNulo(helper					.getIdsMotivoEncerramentoSelecionados())) {				query.setParameterList("motivo",						helper.getIdsMotivoEncerramentoSelecionados());			}			if (helper.getPeriodoAtendimentoInicial() != null					&& helper.getPeriodoAtendimentoFinal() != null) {				query.setDate("dtAtendimentoIncial", Util						.formatarDataInicial(helper								.getPeriodoAtendimentoInicial()));				query.setDate("dtAtendimentoFinal", Util						.formatarDataFinal(helper.getPeriodoAtendimentoFinal()));			}			if (helper.getPeriodoEncerramentoInicial() != null					&& helper.getPeriodoEncerramentoFinal() != null) {				query.setDate("dtEncerramentoIncial", Util						.formatarDataInicial(helper								.getPeriodoEncerramentoInicial()));				query.setDate("dtEncerramentoFinal",						Util.formatarDataFinal(helper								.getPeriodoEncerramentoFinal()));			}			if (Util.verificarNaoVazio(helper.getSituacaoRA())					&& helper.getSituacaoRA().equals("0")					&& Util.verificarNaoVazio(helper.getSituacaoRAAbertos())					&& (helper.getSituacaoRAAbertos().equals("0") || helper							.getSituacaoRAAbertos().equals("1"))) {				query.setDate("dtCorrente", new Date());			}			if (Util.verificarNaoVazio(helper.getSituacaoRA())					&& helper.getSituacaoRA().equals("0")) {				query.setShort("situacao",						RegistroAtendimento.SITUACAO_PENDENTE);			} else if (Util.verificarNaoVazio(helper.getSituacaoRA())					&& helper.getSituacaoRA().equals("1")) {				query.setShort("situacao",						RegistroAtendimento.SITUACAO_ENCERRADO);			}			retorno = query.list();		} catch (HibernateException e) {			throw new ErroRepositorioException(e, "Erro no Hibernate");		} finally {			HibernateUtil.closeSession(session);		}		return retorno;	}	/**	 * [UC1056] Gerar Relatório de Acompanhamento dos Registros de Atendimento	 * Método auxiliar para gerar o select HQL do relatório em questão	 * 	 * @author Diogo Peixoto	 * @date 28/04/2011	 * 	 * @param FiltrarAcompanhamentoRegistroAtendimentoHelper	 * @return String	 * @throws ErroRepositorioException	 */	private String montarSelectRelatorioAcompanhamentoAnalitico(			FiltrarAcompanhamentoRegistroAtendimentoHelper helper) {		StringBuilder sb = new StringBuilder();		sb.append(" SELECT DISTINCT (ra.id), ");		sb.append(" rau.unidadeOrganizacional.id, ");		sb.append(" step.descricao, ");		sb.append(" ra.registroAtendimento, ");		sb.append(" ra.dataEncerramento, ");		sb.append(" ame.descricao, ");		sb.append(" rau.unidadeOrganizacional.descricao, ");		sb.append(" ame.id ");		if (!Util.isVazioOrNulo(helper.getMunicipiosAssociados())) {			sb.append(", munRA.nome ");			sb.append(", munRA.id ");		}		return sb.toString();	}	/**	 * [UC1056] Gerar Relatório de Acompanhamento dos Registros de Atendimento	 * Método auxiliar para gerar o select HQL do relatório em questão	 * 	 * @author Diogo Peixoto	 * @date 28/04/2011	 * 	 * @param FiltrarAcompanhamentoRegistroAtendimentoHelper	 * @return String	 * @throws ErroRepositorioException	 */	private String montarFromRelatorioAcompanhamentoAnalitico(			FiltrarAcompanhamentoRegistroAtendimentoHelper helper) {		StringBuilder sb = new StringBuilder();		sb.append(" from gcom.atendimentopublico.registroatendimento.RegistroAtendimento ra ");		sb.append(" inner join ra.solicitacaoTipoEspecificacao step ");		sb.append(" left join ra.atendimentoMotivoEncerramento ame ");		sb.append(" inner join ra.registroAtendimentoUnidades rau ");		sb.append(" inner join rau.unidadeOrganizacional uni ");		sb.append(" left join ra.imovel imov ");		sb.append(" left join imov.localidade locImo ");		sb.append(" left join locImo.municipio munImo ");		if (!Util.isVazioOrNulo(helper.getMunicipiosAssociados())) {			sb.append(" inner join ra.localidade locRA ");			sb.append(" inner join locRA.municipio munRA ");		} else {			sb.append(" left join ra.localidade locRA ");			sb.append(" left join locRA.municipio munRA ");		}		return sb.toString();	}	/**	 * [UC1056] Gerar Relatório de Acompanhamento dos Registros de Atendimento	 * 	 * @author Hugo Leonardo, Diogo Peixoto	 * @date 30/09/2010, 26/04/2011	 * 	 * @param FiltrarAcompanhamentoRegistroAtendimentoHelper	 * @return Integer	 * @throws ErroRepositorioException	 */	public Integer countPesquisarRelatorioAcompanhamentoRAAnalitico(			FiltrarAcompanhamentoRegistroAtendimentoHelper helper)			throws ErroRepositorioException {		Integer retorno = 0;		String consulta = "";		Query query = null;		Session session = HibernateUtil.getSession();		try {			consulta += " select count(distinct ra.id) " // 0					+ " from gcom.atendimentopublico.registroatendimento.RegistroAtendimento ra "					+ " inner join ra.solicitacaoTipoEspecificacao step "					+ " left join ra.atendimentoMotivoEncerramento ame ";			consulta += " inner join ra.registroAtendimentoUnidades rau "					+ " inner join rau.unidadeOrganizacional uni "					+ " left join ra.localidade locRA "					+ " left join locRA.municipio munRA "					+ " left join ra.imovel imov "					+ " left join imov.localidade locImo "					+ " left join locImo.municipio munImo "					+ " where ra.unidadeAtual = uni.id and ";			if (Util.verificarNaoVazio(helper.getIdUnidadeAtendimento())) {				consulta += " rau.unidadeOrganizacional = :unidade  and "						+ " rau.atendimentoRelacaoTipo = 1 and ";			}			if (!Util.isVazioOrNulo(helper.getMunicipiosAssociados())) {				consulta += " (munRA.id IN (:municipios) or munImo.id IN (:municipios)) and ";			}			if (!Util.isVazioOrNulo(helper					.getIdsMotivoEncerramentoSelecionados())) {				consulta += " ame.id in (:motivo) and ";			}			if (helper.getPeriodoAtendimentoInicial() != null					&& helper.getPeriodoAtendimentoFinal() != null) {				consulta += " (ra.registroAtendimento between :dtAtendimentoIncial and :dtAtendimentoFinal) and ";			}			if (helper.getPeriodoEncerramentoInicial() != null					&& helper.getPeriodoEncerramentoFinal() != null) {				consulta += " (ra.dataEncerramento between :dtEncerramentoIncial and :dtEncerramentoFinal) and ";			}			if (Util.verificarNaoVazio(helper.getSituacaoRA())) {				consulta += " ra.codigoSituacao = :situacao and ";			}			if (Util.verificarNaoVazio(helper.getSituacaoRA())					&& helper.getSituacaoRA().equals("0")					&& Util.verificarNaoVazio(helper.getSituacaoRAAbertos())					&& helper.getSituacaoRAAbertos().equals("1")) {				consulta += " (ra.dataPrevistaAtual >= :dtCorrente "						+ " or ra.dataPrevistaOriginal >= :dtCorrente) and ";			} else if (Util.verificarNaoVazio(helper.getSituacaoRA())					&& helper.getSituacaoRA().equals("0")					&& Util.verificarNaoVazio(helper.getSituacaoRAAbertos())					&& helper.getSituacaoRAAbertos().equals("0")) {				consulta += " (ra.dataPrevistaAtual < :dtCorrente "						+ " or ra.dataPrevistaOriginal < :dtCorrente) and ";			}			// remove o último AND			consulta = Util.removerUltimosCaracteres(consulta, 4);			query = (Query) session.createQuery(consulta);			if (Util.verificarNaoVazio(helper.getIdUnidadeAtendimento())) {				query.setString("unidade", helper.getIdUnidadeAtendimento()						.toString());			}			if (!Util.isVazioOrNulo(helper.getMunicipiosAssociados())) {				query.setParameterList("municipios",						helper.getMunicipiosAssociados());			}			if (!Util.isVazioOrNulo(helper					.getIdsMotivoEncerramentoSelecionados())) {				query.setParameterList("motivo",						helper.getIdsMotivoEncerramentoSelecionados());			}			if (helper.getPeriodoAtendimentoInicial() != null					&& helper.getPeriodoAtendimentoFinal() != null) {				query.setDate("dtAtendimentoIncial", Util						.formatarDataInicial(helper								.getPeriodoAtendimentoInicial()));				query.setDate("dtAtendimentoFinal", Util						.formatarDataFinal(helper.getPeriodoAtendimentoFinal()));			}			if (helper.getPeriodoEncerramentoInicial() != null					&& helper.getPeriodoEncerramentoFinal() != null) {				query.setDate("dtEncerramentoIncial", Util						.formatarDataInicial(helper								.getPeriodoEncerramentoInicial()));				query.setDate("dtEncerramentoFinal",						Util.formatarDataFinal(helper								.getPeriodoEncerramentoFinal()));			}			if (Util.verificarNaoVazio(helper.getSituacaoRA())					&& helper.getSituacaoRA().equals("0")					&& Util.verificarNaoVazio(helper.getSituacaoRAAbertos())					&& (helper.getSituacaoRAAbertos().equals("0") || helper							.getSituacaoRAAbertos().equals("1"))) {				query.setDate("dtCorrente", new Date());			}			if (Util.verificarNaoVazio(helper.getSituacaoRA())					&& helper.getSituacaoRA().equals("0")) {				query.setShort("situacao",						RegistroAtendimento.SITUACAO_PENDENTE);			} else if (Util.verificarNaoVazio(helper.getSituacaoRA())					&& helper.getSituacaoRA().equals("1")) {				query.setShort("situacao",						RegistroAtendimento.SITUACAO_ENCERRADO);			}			retorno = (Integer) query.setMaxResults(1).uniqueResult();		} catch (HibernateException e) {			throw new ErroRepositorioException(e, "Erro no Hibernate");		} finally {			HibernateUtil.closeSession(session);		}		return retorno;	}	/**	 * [UC1056] Gerar Relatório de Acompanhamento dos Registros de Atendimento	 * 	 * @author Hugo Leonardo, Diogo Peixoto	 * @date 01/10/2010, 28/04/2011	 * 	 * @param FiltrarAcompanhamentoRegistroAtendimentoHelper	 * @return Collection	 * @throws ErroRepositorioException	 */	public Collection pesquisarRelatorioAcompanhamentoRASinteticoAberto(			FiltrarAcompanhamentoRegistroAtendimentoHelper helper)			throws ErroRepositorioException {		Collection retorno = null;		String consulta = "";		Query query = null;		Session session = HibernateUtil.getSession();		String joinMunicipio = "";		if (!Util.isVazioOrNulo(helper.getMunicipiosAssociados())				&& (helper.getIdUnidadeAtendimento() == null || helper						.getIdUnidadeAtendimento().equals(""))) {			consulta += " select rau.unidadeOrganizacional.descricao, "					+ " muni.nome, "					+ " count(distinct ra.id) "					+ " from gcom.atendimentopublico.registroatendimento.RegistroAtendimento ra "					+ " inner join ra.solicitacaoTipoEspecificacao step "					+ " left join ra.atendimentoMotivoEncerramento ame ";			consulta += " inner join ra.localidade loc "					+ " inner join loc.municipio muni ";		} else {			consulta += " select rau.unidadeOrganizacional.descricao, ";			if (!Util.isVazioOrNulo(helper.getMunicipiosAssociados())) {				consulta += " muni.nome, ";				joinMunicipio = " inner join ra.localidade loc "						+ " inner join loc.municipio muni ";			}			consulta += " count(distinct ra.id) "					+ " from gcom.atendimentopublico.registroatendimento.RegistroAtendimento ra "					+ " inner join ra.solicitacaoTipoEspecificacao step "					+ " left join ra.atendimentoMotivoEncerramento ame ";		}		consulta += joinMunicipio				+ " inner join ra.registroAtendimentoUnidades rau "				+ " inner join rau.unidadeOrganizacional uni "				+ " where ra.unidadeAtual = uni.id and ";		try {			if (Util.verificarNaoVazio(helper.getIdUnidadeAtendimento())) {				consulta += " rau.unidadeOrganizacional = :unidade  and "						+ " rau.atendimentoRelacaoTipo = 1 and ";			}			if (!Util.isVazioOrNulo(helper					.getIdsMotivoEncerramentoSelecionados())) {				consulta += " ame.id in (:motivo) and ";			}			if (!Util.isVazioOrNulo(helper.getMunicipiosAssociados())) {				consulta += " muni.id in (:municipios) and ";			}			if (helper.getPeriodoAtendimentoInicial() != null					&& helper.getPeriodoAtendimentoFinal() != null) {				consulta += " (ra.registroAtendimento between :dtAtendimentoIncial and :dtAtendimentoFinal) and ";			}			if (helper.getPeriodoEncerramentoInicial() != null					&& helper.getPeriodoEncerramentoFinal() != null) {				consulta += " (ra.dataEncerramento between :dtEncerramentoIncial and :dtEncerramentoFinal) and ";			}			if (Util.verificarNaoVazio(helper.getSituacaoRA())) {				consulta += " ra.codigoSituacao = :situacao and ";			}			if (Util.verificarNaoVazio(helper.getSituacaoRA())					&& helper.getSituacaoRA().equals("0")					&& Util.verificarNaoVazio(helper.getSituacaoRAAbertos())					&& helper.getSituacaoRAAbertos().equals("1")) {				consulta += " (ra.dataPrevistaAtual >= :dtCorrente "						+ " or ra.dataPrevistaOriginal >= :dtCorrente) and ";			} else if (Util.verificarNaoVazio(helper.getSituacaoRA())					&& helper.getSituacaoRA().equals("0")					&& Util.verificarNaoVazio(helper.getSituacaoRAAbertos())					&& helper.getSituacaoRAAbertos().equals("0")) {				consulta += " (ra.dataPrevistaAtual < :dtCorrente "						+ " or ra.dataPrevistaOriginal < :dtCorrente) and ";			}			// remove o último AND			consulta = Util.removerUltimosCaracteres(consulta, 4);			if (!Util.isVazioOrNulo(helper.getMunicipiosAssociados())					&& (helper.getIdUnidadeAtendimento() == null || helper							.getIdUnidadeAtendimento().equals(""))) {				consulta += " GROUP BY muni.nome, rau.unidadeOrganizacional.descricao "						+ " ORDER BY muni.nome, rau.unidadeOrganizacional.descricao  ";			} else {				String groupBy = " GROUP BY ";				String orderBy = " ORDER BY ";				if (!Util.isVazioOrNulo(helper.getMunicipiosAssociados())) {					groupBy += " muni.nome, ";					orderBy += " muni.nome, ";				}				groupBy += " rau.unidadeOrganizacional.descricao ";				orderBy += " rau.unidadeOrganizacional.descricao ";				consulta += groupBy + orderBy;			}			query = (Query) session.createQuery(consulta);			if (Util.verificarNaoVazio(helper.getIdUnidadeAtendimento())) {				query.setString("unidade", helper.getIdUnidadeAtendimento()						.toString());			}			if (!Util.isVazioOrNulo(helper					.getIdsMotivoEncerramentoSelecionados())) {				query.setParameterList("motivo",						helper.getIdsMotivoEncerramentoSelecionados());			}			if (!Util.isVazioOrNulo(helper.getMunicipiosAssociados())) {				query.setParameterList("municipios",						helper.getMunicipiosAssociados());			}			if (helper.getPeriodoAtendimentoInicial() != null					&& helper.getPeriodoAtendimentoFinal() != null) {				query.setDate("dtAtendimentoIncial", Util						.formatarDataInicial(helper								.getPeriodoAtendimentoInicial()));				query.setDate("dtAtendimentoFinal", Util						.formatarDataFinal(helper.getPeriodoAtendimentoFinal()));			}			if (helper.getPeriodoEncerramentoInicial() != null					&& helper.getPeriodoEncerramentoFinal() != null) {				query.setDate("dtEncerramentoIncial", Util						.formatarDataInicial(helper								.getPeriodoEncerramentoInicial()));				query.setDate("dtEncerramentoFinal",						Util.formatarDataFinal(helper								.getPeriodoEncerramentoFinal()));			}			if (Util.verificarNaoVazio(helper.getSituacaoRA())					&& helper.getSituacaoRA().equals("0")					&& Util.verificarNaoVazio(helper.getSituacaoRAAbertos())					&& (helper.getSituacaoRAAbertos().equals("0") || helper							.getSituacaoRAAbertos().equals("1"))) {				query.setDate("dtCorrente", new Date());			}			if (Util.verificarNaoVazio(helper.getSituacaoRA())					&& helper.getSituacaoRA().equals("0")) {				query.setShort("situacao",						RegistroAtendimento.SITUACAO_PENDENTE);			} else if (Util.verificarNaoVazio(helper.getSituacaoRA())					&& helper.getSituacaoRA().equals("1")) {				query.setShort("situacao",						RegistroAtendimento.SITUACAO_ENCERRADO);			}			retorno = query.list();		} catch (HibernateException e) {			throw new ErroRepositorioException(e, "Erro no Hibernate");		} finally {			HibernateUtil.closeSession(session);		}		return retorno;	}	/**	 * [UC1056] Gerar Relatório de Acompanhamento dos Registros de Atendimento	 * 	 * @author Hugo Leonardo, Diogo Peixoto	 * @date 01/10/2010, 28/04/2011	 * 	 * @param FiltrarAcompanhamentoRegistroAtendimentoHelper	 * @return Collection	 * @throws ErroRepositorioException	 */	public Collection pesquisarRelatorioAcompanhamentoRASinteticoEncerrado(			FiltrarAcompanhamentoRegistroAtendimentoHelper helper)			throws ErroRepositorioException {		Collection retorno = null;		String consulta = "";		Query query = null;		Session session = HibernateUtil.getSession();		String selectMunicipio = "";		String joinMunicipio = "";		if (!Util.isVazioOrNulo(helper.getMunicipiosAssociados())) {			selectMunicipio = ", muni.nome";			joinMunicipio = " inner join ra.localidade loc inner join loc.municipio muni ";		}		try {			consulta += " select rau.unidadeOrganizacional.descricao, ame.descricao, "					+ " count(distinct ra.id) "					+ selectMunicipio					+ " from gcom.atendimentopublico.registroatendimento.RegistroAtendimento ra "					+ " inner join ra.solicitacaoTipoEspecificacao step "					+ " left join ra.atendimentoMotivoEncerramento ame ";			consulta += " inner join ra.registroAtendimentoUnidades rau "					+ " inner join rau.unidadeOrganizacional uni "					+ joinMunicipio + " where ra.unidadeAtual = uni.id and ";			if (Util.verificarNaoVazio(helper.getIdUnidadeAtendimento())) {				consulta += " rau.unidadeOrganizacional = :unidade  and "						+ " rau.atendimentoRelacaoTipo = 1 and ";			}			if (!Util.isVazioOrNulo(helper					.getIdsMotivoEncerramentoSelecionados())) {				consulta += " ame.id in (:motivo) and ";			}			if (!Util.isVazioOrNulo(helper.getMunicipiosAssociados())) {				consulta += " muni.id in (:municipios) and ";			}			if (helper.getPeriodoAtendimentoInicial() != null					&& helper.getPeriodoAtendimentoFinal() != null) {				consulta += " (ra.registroAtendimento between :dtAtendimentoIncial and :dtAtendimentoFinal) and ";			}			if (helper.getPeriodoEncerramentoInicial() != null					&& helper.getPeriodoEncerramentoFinal() != null) {				consulta += " (ra.dataEncerramento between :dtEncerramentoIncial and :dtEncerramentoFinal) and ";			}			if (Util.verificarNaoVazio(helper.getSituacaoRA())) {				consulta += " ra.codigoSituacao = :situacao and ";			}			if (Util.verificarNaoVazio(helper.getSituacaoRA())					&& helper.getSituacaoRA().equals("0")					&& Util.verificarNaoVazio(helper.getSituacaoRAAbertos())					&& helper.getSituacaoRAAbertos().equals("1")) {				consulta += " (ra.dataPrevistaAtual >= :dtCorrente "						+ " or ra.dataPrevistaOriginal >= :dtCorrente) and ";			} else if (Util.verificarNaoVazio(helper.getSituacaoRA())					&& helper.getSituacaoRA().equals("0")					&& Util.verificarNaoVazio(helper.getSituacaoRAAbertos())					&& helper.getSituacaoRAAbertos().equals("0")) {				consulta += " (ra.dataPrevistaAtual < :dtCorrente "						+ " or ra.dataPrevistaOriginal < :dtCorrente) and ";			}			// remove o último AND			consulta = Util.removerUltimosCaracteres(consulta, 4);			if (!Util.isVazioOrNulo(helper.getMunicipiosAssociados())					&& (helper.getIdUnidadeAtendimento() == null || helper							.getIdUnidadeAtendimento().equals(""))) {				consulta += " GROUP BY muni.nome, rau.unidadeOrganizacional.descricao, ame.descricao "						+ " ORDER BY muni.nome, rau.unidadeOrganizacional.descricao, ame.descricao ";			} else {				String groupBy = " GROUP BY ";				String orderBy = " ORDER BY ";				if (!Util.isVazioOrNulo(helper.getMunicipiosAssociados())) {					groupBy += " muni.nome, ";					orderBy += " muni.nome, ";				}				groupBy += " rau.unidadeOrganizacional.descricao, ame.descricao ";				orderBy += " rau.unidadeOrganizacional.descricao, ame.descricao ";				consulta += groupBy + orderBy;			}			query = (Query) session.createQuery(consulta);			if (Util.verificarNaoVazio(helper.getIdUnidadeAtendimento())) {				query.setString("unidade", helper.getIdUnidadeAtendimento()						.toString());			}			if (!Util.isVazioOrNulo(helper					.getIdsMotivoEncerramentoSelecionados())) {				query.setParameterList("motivo",						helper.getIdsMotivoEncerramentoSelecionados());			}			if (!Util.isVazioOrNulo(helper.getMunicipiosAssociados())) {				query.setParameterList("municipios",						helper.getMunicipiosAssociados());			}			if (helper.getPeriodoAtendimentoInicial() != null					&& helper.getPeriodoAtendimentoFinal() != null) {				query.setDate("dtAtendimentoIncial", Util						.formatarDataInicial(helper								.getPeriodoAtendimentoInicial()));				query.setDate("dtAtendimentoFinal", Util						.formatarDataFinal(helper.getPeriodoAtendimentoFinal()));			}			if (helper.getPeriodoEncerramentoInicial() != null					&& helper.getPeriodoEncerramentoFinal() != null) {				query.setDate("dtEncerramentoIncial", Util						.formatarDataInicial(helper								.getPeriodoEncerramentoInicial()));				query.setDate("dtEncerramentoFinal",						Util.formatarDataFinal(helper								.getPeriodoEncerramentoFinal()));			}			if (Util.verificarNaoVazio(helper.getSituacaoRA())					&& helper.getSituacaoRA().equals("0")					&& Util.verificarNaoVazio(helper.getSituacaoRAAbertos())					&& (helper.getSituacaoRAAbertos().equals("0") || helper							.getSituacaoRAAbertos().equals("1"))) {				query.setDate("dtCorrente", new Date());			}			if (Util.verificarNaoVazio(helper.getSituacaoRA())					&& helper.getSituacaoRA().equals("0")) {				query.setShort("situacao",						RegistroAtendimento.SITUACAO_PENDENTE);			} else if (Util.verificarNaoVazio(helper.getSituacaoRA())					&& helper.getSituacaoRA().equals("1")) {				query.setShort("situacao",						RegistroAtendimento.SITUACAO_ENCERRADO);			}			retorno = query.list();		} catch (HibernateException e) {			throw new ErroRepositorioException(e, "Erro no Hibernate");		} finally {			HibernateUtil.closeSession(session);		}		return retorno;	}	/**	 * [UC1107] Manter Custo de Pavimento por Repavimentadora	 * 	 * @author Hugo Leonardo	 * @date 27/12/2010	 * 	 * @param idRepavimentadora	 *            , idPavimento, indicadorPavimento: 1-Rua, 2-Calçada	 * @return boolean	 */	public boolean verificaRemoverCustoPavimentoPorRepavimentadora(			Integer idRepavimentadora, Integer idPavimento,			Integer indicadorPavimento) throws ErroRepositorioException {		// Cria uma sessão com o hibernate		Session session = HibernateUtil.getSession();		// Retorno Consulta		boolean retorno = false;		// Cria a variável que vai conter o hql		String consulta = "";		try {			if (indicadorPavimento == 1) {				consulta += " SELECT ospv.id "						+ " FROM OrdemServicoPavimento ospv, UnidadeRepavimentadoraCustoPavimentoRua urr1, UnidadeRepavimentadoraCustoPavimentoRua urr2 "						+ " INNER JOIN ospv.ordemServico os"						+ " WHERE ospv.unidadeRepavimentadora.id = :repavimentadora "						+ " AND ((urr1.pavimentoRua.id = ospv.pavimentoRua.id and ospv.pavimentoRuaRetorno is null and urr1.pavimentoRua.id = :pavimento and urr1.unidadeRepavimentadora.id = :repavimentadora) "						+ " OR (urr2.pavimentoRua.id = ospv.pavimentoRuaRetorno.id and ospv.pavimentoRuaRetorno is not null and urr2.pavimentoRua.id = :pavimento and urr2.unidadeRepavimentadora.id = :repavimentadora)) "						+ " AND ( "						+ " 	( "						+ " 	os.dataEncerramento >= urr1.dataVigenciaInicial "						+ " 	AND	os.dataEncerramento <= urr1.dataVigenciaFinal "						+ " 	AND urr1.dataVigenciaFinal is not null "						+ " 	AND ospv.pavimentoRuaRetorno is null "						+ " 	) "						+ " OR ( "						+ "  	os.dataEncerramento >= urr1.dataVigenciaInicial"						+ "  	AND urr1.dataVigenciaFinal is null"						+ "  	AND ospv.pavimentoRuaRetorno is null"						+ "  	)"						+ " OR ( "						+ "  	os.dataEncerramento >= urr2.dataVigenciaInicial"						+ "  	AND	os.dataEncerramento <= urr2.dataVigenciaFinal"						+ " 	AND urr2.dataVigenciaFinal is not null "						+ "  	AND ospv.pavimentoRuaRetorno is not null"						+ " 	) " + " OR ( "						+ " 	os.dataEncerramento >= urr2.dataVigenciaInicial "						+ " 	AND urr2.dataVigenciaFinal is null "						+ " 	AND ospv.pavimentoRuaRetorno is not null "						+ " 	) " + " ) ";			} else {				consulta += " SELECT ospv.id "						+ " FROM OrdemServicoPavimento ospv, UnidadeRepavimentadoraCustoPavimentoCalcada urr1, UnidadeRepavimentadoraCustoPavimentoCalcada urr2 "						+ " INNER JOIN ospv.ordemServico os"						+ " WHERE ospv.unidadeRepavimentadora.id = :repavimentadora "						+ " AND ((urr1.pavimentoCalcada.id = ospv.pavimentoCalcada.id and ospv.pavimentoCalcadaRetorno is null and urr1.pavimentoCalcada.id = :pavimento and urr1.unidadeRepavimentadora.id = :repavimentadora) "						+ " OR (urr2.pavimentoCalcada.id = ospv.pavimentoCalcadaRetorno.id and ospv.pavimentoCalcadaRetorno is not null and urr2.pavimentoCalcada.id = :pavimento and urr2.unidadeRepavimentadora.id = :repavimentadora)) "						+ " AND ( "						+ " 	( "						+ " 	os.dataEncerramento >= urr1.dataVigenciaInicial "						+ " 	AND	os.dataEncerramento <= urr1.dataVigenciaFinal "						+ " 	AND urr1.dataVigenciaFinal is not null "						+ " 	AND ospv.pavimentoCalcadaRetorno is null "						+ " 	) "						+ " OR ( "						+ "  	os.dataEncerramento >= urr1.dataVigenciaInicial"						+ "  	AND urr1.dataVigenciaFinal is null"						+ "  	AND ospv.pavimentoCalcadaRetorno is null"						+ "  	)"						+ " OR ( "						+ "  	os.dataEncerramento >= urr2.dataVigenciaInicial"						+ "  	AND	os.dataEncerramento <= urr2.dataVigenciaFinal"						+ " 	AND urr2.dataVigenciaFinal is not null "						+ "  	AND ospv.pavimentoCalcadaRetorno is not null"						+ " 	) " + " OR ( "						+ " 	os.dataEncerramento >= urr2.dataVigenciaInicial "						+ " 	AND urr2.dataVigenciaFinal is null "						+ " 	AND ospv.pavimentoCalcadaRetorno is not null "						+ " 	) " + " ) ";			}			Integer idRetorno = (Integer) session.createQuery(consulta)					.setInteger("repavimentadora", idRepavimentadora)					.setInteger("pavimento", idPavimento).setMaxResults(1)					.uniqueResult();			if (idRetorno != null) {				retorno = true;			}			// Erro no hibernate		} catch (HibernateException e) {			// Levanta a exceção para a próxima camada			throw new ErroRepositorioException(e, "Erro no Hibernate");		} finally {			// Fecha a sessão com o hibernate			HibernateUtil.closeSession(session);		}		return retorno;	}	/**	 * [UC1107] Manter Custo de Pavimento por Repavimentadora	 * 	 * @author Hugo Leonardo	 * @date 28/12/2010	 * 	 * @param id	 *            , idRepavimentadora, idPavimento, dataInicio, dataFinal,	 *            indicadorPavimento: 1-Rua, 2-Calçada	 * @return Integer	 * 	 * @see Caso retorne resultado: return 0.	 * 	 * @see Caso o indicadorPavimento = 1 e dataFinal = null: return 1.	 * @see Caso o indicadorPavimento = 1 e dataFinal != null: return 2.	 * 	 * @see Caso o indicadorPavimento = 2 e dataFinal = null: return 3.	 * @see Caso o indicadorPavimento = 2 e dataFinal != null: return 4.	 */	public Integer verificaAtualizarCustoPavimentoPorRepavimentadora(			Integer idAtualizacao, Integer idRepavimentadora,			Integer idPavimento, Date dataInicio, Date dataFinal,			Integer indicadorPavimento, Integer tipo)			throws ErroRepositorioException {		// Cria uma sessão com o hibernate		Session session = HibernateUtil.getSession();		// Retorno Consulta		Integer retorno = 0;		Integer idRetorno = null;		// Cria a variável que vai conter o hql		String consulta = "";		try {			if (indicadorPavimento == 1) {				consulta += " select urr1.id "						+ " from UnidadeRepavimentadoraCustoPavimentoRua urr1 "						+ " where urr1.unidadeRepavimentadora.id = :repavimentadora "						+ " and urr1.pavimentoRua.id = :pavimento "						+ " and urr1.id <> :idAtu and ( ";				if (tipo == 1) {					consulta += " urr1.dataVigenciaFinal is null and "							+ "  coalesce(urr1.dataVigenciaFinal, to_date('9999-12-31','YYYY/MM/DD')) >= :dtInicio and "							+ "  urr1.dataVigenciaInicial <= :dtFinal and ";					consulta = Util.removerUltimosCaracteres(consulta, 4) + ")";				} else {					consulta += " urr1.dataVigenciaFinal is not null and "							+ " 	coalesce(urr1.dataVigenciaFinal, to_date('9999-12-31','YYYY/MM/DD')) >= :dtInicio and "							+ " 	urr1.dataVigenciaInicial <= :dtFinal "							+ " or ( urr1.dataVigenciaFinal is null "							+ "      or coalesce(urr1.dataVigenciaFinal, to_date('9999-12-31','YYYY/MM/DD')) >= :dtInicio ) "							+ " and urr1.dataVigenciaInicial <= :dtFinal) ";				}			} else {				consulta += " select urr1.id "						+ " from UnidadeRepavimentadoraCustoPavimentoCalcada urr1 "						+ " where urr1.unidadeRepavimentadora.id = :repavimentadora "						+ " and urr1.pavimentoCalcada.id = :pavimento "						+ " and urr1.id <> :idAtu and ( ";				if (tipo == 1) {					consulta += " urr1.dataVigenciaFinal is null and "							+ " coalesce(urr1.dataVigenciaFinal, to_date('9999-12-31','YYYY/MM/DD')) >= :dtInicio and "							+ " urr1.dataVigenciaInicial <= :dtFinal and ";					consulta = Util.removerUltimosCaracteres(consulta, 4) + ")";				} else {					consulta += " urr1.dataVigenciaFinal is not null and "							+ " 	coalesce(urr1.dataVigenciaFinal, to_date('9999-12-31','YYYY/MM/DD')) >= :dtInicio and "							+ "     urr1.dataVigenciaInicial <= :dtFinal "							+ " or ( urr1.dataVigenciaFinal is null "							+ "      or coalesce(urr1.dataVigenciaFinal, to_date('9999-12-31','YYYY/MM/DD')) >= :dtInicio ) "							+ " and	urr1.dataVigenciaInicial <= :dtFinal) ";				}			}			if (indicadorPavimento == 1) {				if (tipo == 1) {					idRetorno = (Integer) session.createQuery(consulta)							.setInteger("idAtu", idAtualizacao)							.setInteger("repavimentadora", idRepavimentadora)							.setInteger("pavimento", idPavimento)							.setDate("dtInicio", dataInicio)							.setDate("dtFinal", dataFinal).setMaxResults(1)							.uniqueResult();					if (idRetorno != null) {						retorno = 1;					}				} else {					idRetorno = (Integer) session.createQuery(consulta)							.setInteger("idAtu", idAtualizacao)							.setInteger("repavimentadora", idRepavimentadora)							.setInteger("pavimento", idPavimento)							.setDate("dtInicio", dataInicio)							.setDate("dtFinal", dataFinal).setMaxResults(1)							.uniqueResult();					if (idRetorno != null) {						retorno = 2;					}				}			} else {				if (tipo == 1) {					idRetorno = (Integer) session.createQuery(consulta)							.setInteger("idAtu", idAtualizacao)							.setInteger("repavimentadora", idRepavimentadora)							.setInteger("pavimento", idPavimento)							.setDate("dtInicio", dataInicio)							.setDate("dtFinal", dataFinal).setMaxResults(1)							.uniqueResult();					if (idRetorno != null) {						retorno = 3;					}				} else {					idRetorno = (Integer) session.createQuery(consulta)							.setInteger("idAtu", idAtualizacao)							.setInteger("repavimentadora", idRepavimentadora)							.setInteger("pavimento", idPavimento)							.setDate("dtInicio", dataInicio)							.setDate("dtFinal", dataFinal).setMaxResults(1)							.uniqueResult();					if (idRetorno != null) {						retorno = 4;					}				}			}			// Erro no hibernate		} catch (HibernateException e) {			// Levanta a exceção para a próxima camada			throw new ErroRepositorioException(e, "Erro no Hibernate");		} finally {			// Fecha a sessão com o hibernate			HibernateUtil.closeSession(session);		}		return retorno;	}	/**	 * [UC1107] Manter Custo de Pavimento por Repavimentadora	 * 	 * [FS0010] Verificar se existem dias sem valor	 * 	 * @author Hugo Leonardo	 * @date 11/01/2011	 * 	 * @param id	 *            , idRepavimentadora, idPavimento, dataInicio, dataFinal,	 *            indicadorPavimento: 1-Rua, 2-Calçada	 * @return Integer	 * 	 *         VerificarExistenciDiasSemValor	 */	public Integer verificarExistenciDiasSemValorCustoPavimentoPorRepavimentadora(			Integer idAtualizacao, Integer idRepavimentadora,			Integer idPavimento, Date dataInicio, Date dataFinal,			Integer indicadorPavimento, Integer tipo)			throws ErroRepositorioException {		// Cria uma sessão com o hibernate		Session session = HibernateUtil.getSession();		// Retorno Consulta		Integer retorno = 0;		Integer idRetorno = null;		// Cria a variável que vai conter o hql		String consulta = "";		try {			if (indicadorPavimento == 1) {				if (tipo == 1) {					consulta += " select urr1.id "							+ " from UnidadeRepavimentadoraCustoPavimentoRua urr1 "							+ " where urr1.unidadeRepavimentadora.id = :repavimentadora "							+ " and urr1.pavimentoRua.id = :pavimento "							+ " and urr1.id <> :idAtu "							+ " and ( "							+ " 	urr1.id =( "							+ " 			select r.id "							+ " 			from UnidadeRepavimentadoraCustoPavimentoRua r "							+ " 			where r.unidadeRepavimentadora.id = :repavimentadora "							+ " 			and r.pavimentoRua.id = :pavimento "							+ " 			and r.id <> :idAtu "							+ " 			and r.dataVigenciaFinal = ( "							+ " 						select max(r2.dataVigenciaFinal) "							+ " 						from UnidadeRepavimentadoraCustoPavimentoRua r2 "							+ " 						where r2.unidadeRepavimentadora.id = :repavimentadora "							+ " 						and r2.pavimentoRua.id = :pavimento "							+ " 						and r2.id <> :idAtu "							+ " 						and coalesce(r2.dataVigenciaFinal, to_date('9999-12-31','YYYY/MM/DD')) = :dtInicio "							+ " 			) "							+ " 	) "							+ " ) "							+ " and coalesce(urr1.dataVigenciaFinal, to_date('9999-12-31','YYYY/MM/DD')) = :dtInicio ";				} else if (tipo == 2) {					consulta += " select urr1.id "							+ " from UnidadeRepavimentadoraCustoPavimentoRua urr1 "							+ " where urr1.unidadeRepavimentadora.id = :repavimentadora "							+ " and urr1.pavimentoRua.id = :pavimento "							+ " and urr1.id <> :idAtu "							+ " and ( "							+ " 	urr1.id = ( "							+ " 			select r3.id "							+ " 			from UnidadeRepavimentadoraCustoPavimentoRua r3 "							+ " 			where r3.unidadeRepavimentadora.id = :repavimentadora "							+ " 			and r3.pavimentoRua.id = :pavimento "							+ " 			and r3.id <> :idAtu "							+ " 			and r3.dataVigenciaInicial = ( "							+ " 						select max(r4.dataVigenciaInicial) "							+ " 						from UnidadeRepavimentadoraCustoPavimentoRua r4 "							+ " 						where r4.unidadeRepavimentadora.id = :repavimentadora "							+ " 						and r4.pavimentoRua.id = :pavimento "							+ " 						and r4.id <> :idAtu "							+ " 						and coalesce(r4.dataVigenciaInicial, to_date('9999-12-31','YYYY/MM/DD')) = :dtFinal "							+ " 			) " + " 	) "							+ "    and urr1.dataVigenciaInicial = :dtFinal "							+ " ) ";				} else {					consulta += " select urr1.id "							+ " from UnidadeRepavimentadoraCustoPavimentoRua urr1 "							+ " where urr1.unidadeRepavimentadora.id = :repavimentadora "							+ " and urr1.pavimentoRua.id = :pavimento "							+ " and urr1.id <> :idAtu "							+ " and urr1.dataVigenciaInicial > :dtInicio ";				}			} else {				if (tipo == 1) {					consulta += " select urr1.id "							+ " from UnidadeRepavimentadoraCustoPavimentoCalcada urr1 "							+ " where urr1.unidadeRepavimentadora.id = :repavimentadora "							+ " and urr1.pavimentoCalcada.id = :pavimento "							+ " and urr1.id <> :idAtu "							+ " and ( "							+ " 	urr1.id = ( "							+ " 			select r.id "							+ " 			from UnidadeRepavimentadoraCustoPavimentoCalcada r "							+ " 			where r.unidadeRepavimentadora.id = :repavimentadora "							+ " 			and r.pavimentoCalcada.id = :pavimento "							+ " 			and r.id <> :idAtu "							+ " 			and r.dataVigenciaFinal = ( "							+ " 						select max(r2.dataVigenciaFinal) "							+ " 						from UnidadeRepavimentadoraCustoPavimentoCalcada r2 "							+ " 						where r2.unidadeRepavimentadora.id = :repavimentadora "							+ " 						and r2.pavimentoCalcada.id = :pavimento "							+ " 						and r2.id <> :idAtu "							+ " 						and coalesce(r2.dataVigenciaFinal, to_date('9999-12-31','YYYY/MM/DD')) = :dtInicio "							+ " 			) "							+ " 	) "							+ " ) "							+ " and coalesce(urr1.dataVigenciaFinal, to_date('9999-12-31','YYYY/MM/DD')) = :dtInicio ";				} else if (tipo == 2) {					consulta += " select urr1.id "							+ " from UnidadeRepavimentadoraCustoPavimentoCalcada urr1 "							+ " where urr1.unidadeRepavimentadora.id = :repavimentadora "							+ " and urr1.pavimentoCalcada.id = :pavimento "							+ " and urr1.id <> :idAtu "							+ " and ( "							+ " 	urr1.id = ( "							+ " 			select r.id "							+ " 			from UnidadeRepavimentadoraCustoPavimentoCalcada r "							+ " 			where r.unidadeRepavimentadora.id = :repavimentadora "							+ " 			and r.pavimentoCalcada.id = :pavimento "							+ " 			and r.id <> :idAtu "							+ " 			and r.dataVigenciaInicial = ( "							+ " 						select max(r2.dataVigenciaInicial) "							+ " 						from UnidadeRepavimentadoraCustoPavimentoCalcada r2 "							+ " 						where r2.unidadeRepavimentadora.id = :repavimentadora "							+ " 						and r2.pavimentoCalcada.id = :pavimento "							+ " 						and r2.id <> :idAtu "							+ " 						and coalesce(r2.dataVigenciaInicial, to_date('9999-12-31','YYYY/MM/DD')) = :dtFinal "							+ " 			) " + " 	) "							+ " 	and urr1.dataVigenciaInicial = :dtFinal "							+ " ) ";				} else {					consulta += " select urr1.id "							+ " from UnidadeRepavimentadoraCustoPavimentoCalcada urr1 "							+ " where urr1.unidadeRepavimentadora.id = :repavimentadora "							+ " and urr1.pavimentoCalcada.id = :pavimento "							+ " and urr1.id <> :idAtu "							+ " and urr1.dataVigenciaInicial > :dtInicio ";				}			}			if (indicadorPavimento == 1) {				if (tipo == 1) {					idRetorno = (Integer) session.createQuery(consulta)							.setInteger("idAtu", idAtualizacao)							.setInteger("repavimentadora", idRepavimentadora)							.setInteger("pavimento", idPavimento)							.setDate("dtInicio", dataInicio).setMaxResults(1)							.uniqueResult();					if (idRetorno == null) {						retorno = 1;					} else {						retorno = 0;					}				} else if (tipo == 2) {					idRetorno = (Integer) session.createQuery(consulta)							.setInteger("idAtu", idAtualizacao)							.setInteger("repavimentadora", idRepavimentadora)							.setInteger("pavimento", idPavimento)							.setDate("dtFinal", dataFinal).setMaxResults(1)							.uniqueResult();					if (idRetorno == null) {						retorno = 2;					} else {						retorno = 0;					}				} else {					idRetorno = (Integer) session							.createQuery(consulta)							.setInteger("idAtu", idAtualizacao)							.setInteger("repavimentadora", idRepavimentadora)							.setInteger("pavimento", idPavimento)							.setDate(									"dtInicio",									Util.adicionarNumeroDiasDeUmaData(											dataInicio, 0)).setMaxResults(1)							.uniqueResult();					if (idRetorno == null) {						retorno = 0;					} else {						retorno = 3;					}				}			} else {				if (tipo == 1) {					idRetorno = (Integer) session.createQuery(consulta)							.setInteger("idAtu", idAtualizacao)							.setInteger("repavimentadora", idRepavimentadora)							.setInteger("pavimento", idPavimento)							.setDate("dtInicio", dataInicio).setMaxResults(1)							.uniqueResult();					if (idRetorno == null) {						retorno = 4;					} else {						retorno = 0;					}				} else if (tipo == 2) {					idRetorno = (Integer) session.createQuery(consulta)							.setInteger("idAtu", idAtualizacao)							.setInteger("repavimentadora", idRepavimentadora)							.setInteger("pavimento", idPavimento)							.setDate("dtFinal", dataFinal).setMaxResults(1)							.uniqueResult();					if (idRetorno != null) {						retorno = 5;					} else {						retorno = 0;					}				} else {					idRetorno = (Integer) session							.createQuery(consulta)							.setInteger("idAtu", idAtualizacao)							.setInteger("repavimentadora", idRepavimentadora)							.setInteger("pavimento", idPavimento)							.setDate(									"dtInicio",									Util.adicionarNumeroDiasDeUmaData(											dataInicio, -1)).setMaxResults(1)							.uniqueResult();					if (idRetorno == null) {						retorno = 0;					} else {						retorno = 6;					}				}			}			// Erro no hibernate		} catch (HibernateException e) {			// Levanta a exceção para a próxima camada			throw new ErroRepositorioException(e, "Erro no Hibernate");		} finally {			// Fecha a sessão com o hibernate			HibernateUtil.closeSession(session);		}		return retorno;	}	/**	 * [UC0412] Manter Tipo de Serviço	 * 	 * @author Vivianne Sousa	 * @created 07/01/2011	 */	public void removerServicoTipoBoletim(Integer idServicoTipo)			throws ErroRepositorioException {		String remocao = null;		Session session = HibernateUtil.getSession();		try {			remocao = "delete ServicoTipoBoletim "					+ "where svtp_id = :idServicoTipo ";			session.createQuery(remocao)					.setInteger("idServicoTipo", idServicoTipo).executeUpdate();		} catch (HibernateException e) {			// levanta a exceção para a próxima camada			throw new ErroRepositorioException(e, "Erro no Hibernate");		} finally {			// fecha a sessão			HibernateUtil.closeSession(session);		}	}	/**	 * [UC1120] Gerar Relatório de religação de clientes inadimplentes.	 * 	 * @author Hugo Leonardo	 * @date 25/01/2011	 * 	 * @throws ErroRepositorioException	 */	public Collection pesquisarRelatorioReligacaoClientesInadiplentesOS(			FiltrarRelatorioReligacaoClientesInadiplentesHelper relatorioHelper)			throws ErroRepositorioException {		Collection retorno = null;		Session session = HibernateUtil.getSession();		String consulta = "";		Query query = null;		Map parameters = new HashMap();		try {			if (relatorioHelper.getEscolhaRelatorio() == 1) {				consulta = " select distinct (os.id), os.imovel.id, os.dataEncerramento "						+ " from OrdemServico os "						+ " inner join os.imovel imo "						+ " inner join os.ordemServicoUnidades orseunid "						+ " inner join os.servicoTipo servtipo "						+ " inner join imo.localidade loca ";			} else if (relatorioHelper.getEscolhaRelatorio() == 2) {				consulta = " select os.imovel.id, count(os.imovel.id) "						+ " from OrdemServico os "						+ " inner join os.imovel imo "						+ " inner join os.servicoTipo servtipo "						+ " inner join imo.localidade loca ";			} else if (relatorioHelper.getEscolhaRelatorio() == 3					|| relatorioHelper.getEscolhaRelatorio() == 4) {				/*				 * consulta = " select os.imovel.id, " +				 * " orseunid.usuario.id, " + " count(os.imovel.id), " +				 * " count (orseunid.usuario.id) " + " from OrdemServico os " +				 * " inner join os.imovel imo " +				 * " inner join os.ordemServicoUnidades orseunid " +				 * " inner join os.servicoTipo servtipo " +				 * " inner join imo.localidade loca ";				 */				consulta = " select orseunid.usuario.id "						+ " from OrdemServico os "						+ " inner join os.imovel imo "						+ " inner join os.ordemServicoUnidades orseunid "						+ " inner join os.servicoTipo servtipo "						+ " inner join imo.localidade loca ";			} else if (relatorioHelper.getEscolhaRelatorio() == 5) {				consulta = " select os.imovel.id, " + " orseunid.usuario.id, "						+ " clieimo.cliente.id, " + " count(os.imovel.id), "						+ " count (orseunid.usuario.id), "						+ " count (clieimo.cliente.id) "						+ " from OrdemServico os "						+ " inner join os.imovel imo "						+ " inner join imo.clienteImoveis clieimo "						+ " inner join os.ordemServicoUnidades orseunid "						+ " inner join os.servicoTipo servtipo "						+ " inner join imo.localidade loca ";			}			// Gerência Regional			if (relatorioHelper.getGerenciaRegional() != null) {				consulta += " inner join loca.gerenciaRegional gereg ";			}			// Unidade Negócio			if (relatorioHelper.getUnidadeNegocio() != null) {				consulta += " inner join loca.unidadeNegocio unineg ";			}			// Setor Comercial			if (relatorioHelper.getSetorComercial() != null) {				consulta += " inner join imo.setorComercial setcom ";			}			// Cliente			if (relatorioHelper.getCliente() != null					&& relatorioHelper.getEscolhaRelatorio() != 5) {				consulta += " inner join imo.clienteImoveis clieimo ";			}			// Usuário			if (relatorioHelper.getUsuario() != null) {				consulta += " inner join orseunid.usuario usua ";			}			consulta += " where 1=1 ";			if (relatorioHelper.getEscolhaRelatorio() == 1) {				if (relatorioHelper.getDataInicioEncerramento() != null						&& relatorioHelper.getDataFimEncerramento() != null) {					consulta += " and os.dataEncerramento between :dataInicialEncerramento and :dataFinalEncerramento ";					parameters.put("dataInicialEncerramento",							relatorioHelper.getDataInicioEncerramento());					parameters.put("dataFinalEncerramento",							relatorioHelper.getDataFimEncerramento());				}			} else {				consulta += " and os.dataEncerramento between :dataInicialEncerramento and :dataFinalEncerramento ";				parameters.put("dataInicialEncerramento",						relatorioHelper.getDataInicioRecorrencia());				parameters.put("dataFinalEncerramento",						relatorioHelper.getDataFimRecorrencia());			}			consulta += " and os.situacao = 2 "					+ " and servtipo.constanteFuncionalidadeTipoServico = 243 ";			if (relatorioHelper.getEscolhaRelatorio() == 1) {				consulta += " and orseunid.atendimentoRelacaoTipo in (1, 3) ";			} else if (relatorioHelper.getEscolhaRelatorio() == 2) {				// consulta +=				// " and orseunid.atendimentoRelacaoTipo in (1, 3) ";			} else if (relatorioHelper.getEscolhaRelatorio() == 3) {				consulta += " and orseunid.atendimentoRelacaoTipo = 1 ";			} else if (relatorioHelper.getEscolhaRelatorio() == 4) {				consulta += " and orseunid.atendimentoRelacaoTipo = 3 ";			} else if (relatorioHelper.getEscolhaRelatorio() == 5) {				consulta += " and orseunid.atendimentoRelacaoTipo = 3 "						+ " and clieimo.clienteRelacaoTipo.id = 2 "						+ " and clieimo.dataFimRelacao is null ";			}			// Gerência Regional			if (relatorioHelper.getGerenciaRegional() != null) {				consulta += " and gereg.id = :gerencia ";				parameters.put("gerencia",						relatorioHelper.getGerenciaRegional());			}			// Unidade Negócio			if (relatorioHelper.getUnidadeNegocio() != null) {				consulta += " and unineg.id = :unidade ";				parameters.put("unidade", relatorioHelper.getUnidadeNegocio());			}			// Localidade			if (relatorioHelper.getLocalidade() != null) {				consulta += " and loca.id = :localidade ";				parameters.put("localidade", relatorioHelper.getLocalidade());			}			// Setor Comercial			if (relatorioHelper.getSetorComercial() != null) {				consulta += " and setcom.id = :setor ";				parameters.put("setor", relatorioHelper.getSetorComercial());			}			// Cliente			if (relatorioHelper.getCliente() != null) {				consulta += " and clieimo.clie.id = :cliente ";				parameters.put("cliente", relatorioHelper.getCliente());			}			// Usuário			if (relatorioHelper.getUsuario() != null) {				consulta += " and usua.id = :usuario ";				parameters.put("usuario", relatorioHelper.getUsuario());			}			if (relatorioHelper.getEscolhaRelatorio() == 1) {				consulta += " order by os.imovel, os.id ";			} else if (relatorioHelper.getEscolhaRelatorio() == 2) {				consulta += " group by os.imovel.id "						+ " having count(os.imovel.id) > 1 "						+ " order by os.imovel.id ";			} else if (relatorioHelper.getEscolhaRelatorio() == 3					|| relatorioHelper.getEscolhaRelatorio() == 4) {				/*				 * consulta += " group by os.imovel.id, orseunid.usuario.id " +				 * " having count(os.imovel.id) > 1 and count(orseunid.usuario.id) > 1 "				 * + " order by os.imovel.id ";				 */				consulta += " group by orseunid.usuario.id "						+ " having count(orseunid.usuario.id) > 1 "						+ " order by orseunid.usuario.id ";			} else if (relatorioHelper.getEscolhaRelatorio() == 5) {				consulta += " group by os.imovel.id, orseunid.usuario.id, clieimo.cliente.id "						+ " having count(os.imovel.id) > 1 and count(orseunid.usuario.id) > 1 "						+ " and count(clieimo.cliente.id) > 1 "						+ " order by os.imovel.id ";			}			query = session.createQuery(consulta);			// ITERA OS PARAMETROS E COLOCA			// OS MESMOS NA QUERY			Set set = parameters.keySet();			Iterator iterMap = set.iterator();			while (iterMap.hasNext()) {				String key = (String) iterMap.next();				if (parameters.get(key) instanceof Set) {					Set setList = (HashSet) parameters.get(key);					query.setParameterList(key, setList);				} else if (parameters.get(key) instanceof Collection) {					Collection collection = (ArrayList) parameters.get(key);					query.setParameterList(key, collection);				} else if (parameters.get(key) instanceof Date) {					Date data = (Date) parameters.get(key);					query.setTimestamp(key, data);				} else {					query.setParameter(key, parameters.get(key));				}			}			retorno = query.list();		} catch (HibernateException e) {			throw new ErroRepositorioException(e, "Erro no Hibernate");		} finally {			HibernateUtil.closeSession(session);		}		return retorno;	}	/**	 * [UC1120] Gerar Relatório de religação de clientes inadimplentes.	 * 	 * @author Hugo Leonardo	 * @date 28/01/2011	 * 	 * @see opcao = 1 - pagamento	 * @see opcao = 2 - historico	 * 	 * @throws ErroRepositorioException	 */	public Collection pesquisarRelatorioReligacaoClientesInadiplentes(			Integer os, Integer imovel, Date dataEncerramentoOS, Integer tipo)			throws ErroRepositorioException {		Collection retorno = null;		Session session = HibernateUtil.getSession();		String consulta = "";		try {			if (tipo == 1) {				consulta = " SELECT contas11_.cnta_id as conta "						+ " FROM faturamento.conta contas11_ "						+ " WHERE contas11_.imov_id = :imovel "						+ " AND ( contas11_.dcst_idatual IN ( 0 , 1 , 2 ) ) "						+ " AND contas11_.cnta_dtvencimentoconta <= :dataEncerramentoOS "						+ " AND ( " + " 	EXISTS ( " + " 		SELECT pag1.pgmt_id "						+ " 		FROM arrecadacao.pagamento pag1 "						+ " 		WHERE pag1.cnta_id = contas11_.cnta_id "						+ " 		AND pag1.pgmt_dtpagamento > :dataEncerramentoOS "						+ " 		) " + "	OR " + "  	NOT EXISTS ( "						+ " 		SELECT pag.pgmt_id "						+ " 		FROM arrecadacao.pagamento pag "						+ " 		WHERE pag.cnta_id = contas11_.cnta_id " + " 	 ) "						+ " ) " + " order by contas11_.cnta_id ";			} else {				consulta = " SELECT contas11_.cnta_id as conta "						+ " FROM faturamento.conta_historico contas11_ "						+ " WHERE contas11_.imov_id = :imovel "						+ " AND ( contas11_.dcst_idatual IN ( 0 , 1 , 2 ) ) "						+ " AND contas11_.cnhi_dtvencimentoconta <= :dataEncerramentoOS "						+ " AND ( " + " 	EXISTS ( " + " 		SELECT pag1.pghi_id "						+ " 		FROM arrecadacao.pagamento_historico pag1 "						+ " 		WHERE pag1.cnta_id = contas11_.cnta_id "						+ " 		AND pag1.pghi_dtpagamento > :dataEncerramentoOS "						+ " 		) " + " ) " + " order by contas11_.cnta_id ";			}			retorno = session.createSQLQuery(consulta)					.addScalar("conta", Hibernate.INTEGER)					.setInteger("imovel", imovel)					.setDate("dataEncerramentoOS", dataEncerramentoOS).list();		} catch (HibernateException e) {			throw new ErroRepositorioException(e, "Erro no Hibernate");		} finally {			HibernateUtil.closeSession(session);		}		return retorno;	}	/**	 * [UC1120] Gerar Relatório de religação de clientes inadimplentes.	 * 	 * @author Hugo Leonardo	 * @date 31/01/2011	 * 	 * @throws ErroRepositorioException	 */	public Collection<OrdemServico> pesquisarRelatorioReligacaoClientesInadiplentes(			Collection<Integer> idsOS) throws ErroRepositorioException {		Session session = HibernateUtil.getSession();		String consulta = "";		Collection<OrdemServico> retornoConsulta = new ArrayList();		try {			consulta = " SELECT os " + " FROM OrdemServico os "					+ " inner join fetch os.imovel imo "					+ " WHERE os.id in (:idsOS) " + " ORDER BY imo.id ";			if (idsOS.size() > 999) {				System.out.println("## TAMANHO TOTAL = " + idsOS.size());				List<List<Integer>> particoes = CollectionUtil.particao(						(List<Integer>) idsOS, 999);				int qtdQuebras = 999;				int indice = idsOS.size() / qtdQuebras;				if (idsOS.size() % qtdQuebras != 0) {					indice++;				}				System.out.println("## QUANTIDADE PARTIÇÕES = " + indice);				for (int i = 0; i < indice; i++) {					System.out.println("## TAMANHO PARTIÇÃO DE INDICE  "							+ indice + " = " + particoes.get(i).size());					Collection<OrdemServico> retornoConsultaParte = null;					retornoConsultaParte = session.createQuery(consulta)							.setParameterList("idsOS", particoes.get(i)).list();					retornoConsulta.addAll(retornoConsultaParte);				}			} else {				retornoConsulta = session.createQuery(consulta)						.setParameterList("idsOS", idsOS).list();			}		} catch (HibernateException e) {			throw new ErroRepositorioException(e, "Erro no Hibernate");		} finally {			HibernateUtil.closeSession(session);		}		return retornoConsulta;	}	/**	 * [UC1120] Gerar Relatório de religação de clientes inadimplentes	 * 	 * @author Hugo Leonardo	 * @date 01/02/2011	 * 	 * @throws ErroRepositorioException	 */	public Collection pesquisarRelatorioReligacaoClientesInadiplentesRecorrentes(			Integer imovel,			FiltrarRelatorioReligacaoClientesInadiplentesHelper relatorioHelper)			throws ErroRepositorioException {		Collection retorno = null;		Session session = HibernateUtil.getSession();		String consulta = "";		Query query = null;		Map parameters = new HashMap();		try {			consulta = " select distinct (os.id) " + " from OrdemServico os "					+ " inner join os.imovel imo "					+ " inner join os.ordemServicoUnidades orseunid "					+ " inner join os.servicoTipo servtipo "					+ " inner join imo.localidade loca ";			// Gerência Regional			if (relatorioHelper.getGerenciaRegional() != null) {				consulta += " inner join loca.gerenciaRegional gereg ";			}			// Unidade Negócio			if (relatorioHelper.getUnidadeNegocio() != null) {				consulta += " inner join loca.unidadeNegocio unineg ";			}			// Setor Comercial			if (relatorioHelper.getSetorComercial() != null) {				consulta += " inner join imo.setorComercial setcom ";			}			// Cliente			if (relatorioHelper.getCliente() != null) {				consulta += " inner join imo.clienteImoveis clieimo ";			}			// Usuário			if (relatorioHelper.getUsuario() != null) {				consulta += " inner join orseunid.usuario usua ";			}			consulta += " where imo.id = :imovel ";			parameters.put("imovel", imovel);			if (relatorioHelper.getEscolhaRelatorio() == 1) {				if (relatorioHelper.getDataInicioEncerramento() != null						&& relatorioHelper.getDataFimEncerramento() != null) {					consulta += " and os.dataEncerramento between :dataInicialEncerramento and :dataFinalEncerramento ";					parameters.put("dataInicialEncerramento",							relatorioHelper.getDataInicioEncerramento());					parameters.put("dataFinalEncerramento",							relatorioHelper.getDataFimEncerramento());				}			} else {				if (relatorioHelper.getDataInicioRecorrencia() != null						&& relatorioHelper.getDataFimRecorrencia() != null) {					consulta += " and os.dataEncerramento between :dataInicialRecorrencia and :dataFinalRecorrencia ";					parameters.put("dataInicialRecorrencia",							relatorioHelper.getDataInicioRecorrencia());					parameters.put("dataFinalRecorrencia",							relatorioHelper.getDataFimRecorrencia());				}			}			consulta += " and os.situacao = 2 "					+ " and servtipo.constanteFuncionalidadeTipoServico = 243 "					+ " and orseunid.atendimentoRelacaoTipo.id in (1, 3) ";			// Gerência Regional			if (relatorioHelper.getGerenciaRegional() != null) {				consulta += " and gereg.id = :gerencia ";				parameters.put("gerencia",						relatorioHelper.getGerenciaRegional());			}			// Unidade Negócio			if (relatorioHelper.getUnidadeNegocio() != null) {				consulta += " and unineg.id = :unidade ";				parameters.put("unidade", relatorioHelper.getUnidadeNegocio());			}			// Localidade			if (relatorioHelper.getLocalidade() != null) {				consulta += " and loca.id = :localidade ";				parameters.put("localidade", relatorioHelper.getLocalidade());			}			// Setor Comercial			if (relatorioHelper.getSetorComercial() != null) {				consulta += " and setcom.id = :setor ";				parameters.put("setor", relatorioHelper.getSetorComercial());			}			// Cliente			if (relatorioHelper.getCliente() != null) {				consulta += " and clieimo.cliente.id = :cliente ";				parameters.put("cliente", relatorioHelper.getCliente());			}			// Usuário			if (relatorioHelper.getUsuario() != null) {				consulta += " and usua.id = :usuario ";				parameters.put("usuario", relatorioHelper.getUsuario());			}			consulta += " order by os.id ";			query = session.createQuery(consulta);			// ITERA OS PARAMETROS E COLOCA			// OS MESMOS NA QUERY			Set set = parameters.keySet();			Iterator iterMap = set.iterator();			while (iterMap.hasNext()) {				String key = (String) iterMap.next();				if (parameters.get(key) instanceof Set) {					Set setList = (HashSet) parameters.get(key);					query.setParameterList(key, setList);				} else if (parameters.get(key) instanceof Collection) {					Collection collection = (ArrayList) parameters.get(key);					query.setParameterList(key, collection);				} else if (parameters.get(key) instanceof Date) {					Date data = (Date) parameters.get(key);					query.setTimestamp(key, data);				} else {					query.setParameter(key, parameters.get(key));				}			}			retorno = query.list();		} catch (HibernateException e) {			throw new ErroRepositorioException(e, "Erro no Hibernate");		} finally {			HibernateUtil.closeSession(session);		}		return retorno;	}	/**	 * [UC1120] Gerar Relatório de religação de clientes inadimplentes.	 * 	 * @author Hugo Leonardo	 * @date 09/02/2011	 * 	 * @throws ErroRepositorioException	 */	public Collection pesquisarRelatorioReligacaoClientesInadiplentesDatasOS(			FiltrarRelatorioReligacaoClientesInadiplentesHelper relatorioHelper,			Integer imovel) throws ErroRepositorioException {		Collection<Object[]> retorno = null;		Session session = HibernateUtil.getSession();		String consulta = "";		Query query = null;		Map parameters = new HashMap();		try {			consulta = " select distinct(os.dataEncerramento), os.id "					+ " from OrdemServico os " + " inner join os.imovel imo "					+ " inner join os.ordemServicoUnidades orseunid "					+ " inner join os.servicoTipo servtipo "					+ " inner join imo.localidade loca ";			// Gerência Regional			if (relatorioHelper.getGerenciaRegional() != null) {				consulta += " inner join loca.gerenciaRegional gereg ";			}			// Unidade Negócio			if (relatorioHelper.getUnidadeNegocio() != null) {				consulta += " inner join loca.unidadeNegocio unineg ";			}			// Setor Comercial			if (relatorioHelper.getSetorComercial() != null) {				consulta += " inner join imo.setorComercial setcom ";			}			// Cliente			if (relatorioHelper.getCliente() != null) {				consulta += " inner join imo.clienteImoveis clieimo ";			}			// Usuário			if (relatorioHelper.getUsuario() != null) {				consulta += " inner join orseunid.usuario usua ";			}			consulta += " where imo.id = :imovel "					+ " and os.dataEncerramento between :dataInicialEncerramento and :dataFinalEncerramento ";			parameters.put("imovel", imovel);			parameters.put("dataInicialEncerramento",					relatorioHelper.getDataInicioRecorrencia());			parameters.put("dataFinalEncerramento",					relatorioHelper.getDataFimRecorrencia());			consulta += " and os.situacao = 2 "					+ " and servtipo.constanteFuncionalidadeTipoServico = 243 "					+ " and orseunid.atendimentoRelacaoTipo in (1,3) ";			// Gerência Regional			if (relatorioHelper.getGerenciaRegional() != null) {				consulta += " and gereg.id = :gerencia ";				parameters.put("gerencia",						relatorioHelper.getGerenciaRegional());			}			// Unidade Negócio			if (relatorioHelper.getUnidadeNegocio() != null) {				consulta += " and unineg.id = :unidade ";				parameters.put("unidade", relatorioHelper.getUnidadeNegocio());			}			// Localidade			if (relatorioHelper.getLocalidade() != null) {				consulta += " and loca.id = :localidade ";				parameters.put("localidade", relatorioHelper.getLocalidade());			}			// Setor Comercial			if (relatorioHelper.getSetorComercial() != null) {				consulta += " and setcom.id = :setor ";				parameters.put("setor", relatorioHelper.getSetorComercial());			}			// Cliente			if (relatorioHelper.getCliente() != null) {				consulta += " and clieimo.cliente.id = :cliente ";				parameters.put("cliente", relatorioHelper.getCliente());			}			// Usuário			if (relatorioHelper.getUsuario() != null) {				consulta += " and usua.id = :usuario ";				parameters.put("usuario", relatorioHelper.getUsuario());			}			consulta += " order by os.dataEncerramento ";			query = session.createQuery(consulta);			// ITERA OS PARAMETROS E COLOCA			// OS MESMOS NA QUERY			Set set = parameters.keySet();			Iterator iterMap = set.iterator();			while (iterMap.hasNext()) {				String key = (String) iterMap.next();				if (parameters.get(key) instanceof Set) {					Set setList = (HashSet) parameters.get(key);					query.setParameterList(key, setList);				} else if (parameters.get(key) instanceof Collection) {					Collection collection = (ArrayList) parameters.get(key);					query.setParameterList(key, collection);				} else if (parameters.get(key) instanceof Date) {					Date data = (Date) parameters.get(key);					query.setTimestamp(key, data);				} else {					query.setParameter(key, parameters.get(key));				}			}			retorno = query.list();		} catch (HibernateException e) {			throw new ErroRepositorioException(e, "Erro no Hibernate");		} finally {			HibernateUtil.closeSession(session);		}		return retorno;	}	/**	 * [UC1120] Gerar Relatório de religação de clientes inadimplentes	 * 	 * @author Hugo Leonardo	 * @date 16/02/2011	 * 	 * @throws ErroRepositorioException	 */	public Collection pesquisarRecorrenciaPorUsuarioQueAbriuOuEncerrouOS(			Integer usuario,			FiltrarRelatorioReligacaoClientesInadiplentesHelper relatorioHelper)			throws ErroRepositorioException {		Collection retorno = null;		Session session = HibernateUtil.getSession();		String consulta = "";		Query query = null;		Map parameters = new HashMap();		try {			consulta = " select os.id, imo.id, os.dataEncerramento "					+ " from OrdemServico os " + " inner join os.imovel imo "					+ " inner join os.ordemServicoUnidades orseunid "					+ " inner join os.servicoTipo servtipo "					+ " inner join imo.localidade loca ";			// Gerência Regional			if (relatorioHelper.getGerenciaRegional() != null) {				consulta += " inner join loca.gerenciaRegional gereg ";			}			// Unidade Negócio			if (relatorioHelper.getUnidadeNegocio() != null) {				consulta += " inner join loca.unidadeNegocio unineg ";			}			// Setor Comercial			if (relatorioHelper.getSetorComercial() != null) {				consulta += " inner join imo.setorComercial setcom ";			}			// Cliente			if (relatorioHelper.getCliente() != null) {				consulta += " inner join imo.clienteImoveis clieimo ";			}			// Usuário			if (relatorioHelper.getUsuario() != null) {				// consulta +=" inner join orseunid.usuario usua ";			}			consulta += " where orseunid.usuario.id = :usuario ";			parameters.put("usuario", usuario);			if (relatorioHelper.getEscolhaRelatorio() == 1) {				if (relatorioHelper.getDataInicioEncerramento() != null						&& relatorioHelper.getDataFimEncerramento() != null) {					consulta += " and os.dataEncerramento between :dataInicialEncerramento and :dataFinalEncerramento ";					parameters.put("dataInicialEncerramento",							relatorioHelper.getDataInicioEncerramento());					parameters.put("dataFinalEncerramento",							relatorioHelper.getDataFimEncerramento());				}			} else {				if (relatorioHelper.getDataInicioRecorrencia() != null						&& relatorioHelper.getDataFimRecorrencia() != null) {					consulta += " and os.dataEncerramento between :dataInicialRecorrencia and :dataFinalRecorrencia ";					parameters.put("dataInicialRecorrencia",							relatorioHelper.getDataInicioRecorrencia());					parameters.put("dataFinalRecorrencia",							relatorioHelper.getDataFimRecorrencia());				}			}			consulta += " and os.situacao = 2 "					+ " and servtipo.constanteFuncionalidadeTipoServico = 243 ";			if (relatorioHelper.getEscolhaRelatorio() == 3) {				consulta += " and orseunid.atendimentoRelacaoTipo.id = 1 ";			} else if (relatorioHelper.getEscolhaRelatorio() == 4) {				consulta += " and orseunid.atendimentoRelacaoTipo.id = 3 ";			}			// Gerência Regional			if (relatorioHelper.getGerenciaRegional() != null) {				consulta += " and gereg.id = :gerencia ";				parameters.put("gerencia",						relatorioHelper.getGerenciaRegional());			}			// Unidade Negócio			if (relatorioHelper.getUnidadeNegocio() != null) {				consulta += " and unineg.id = :unidade ";				parameters.put("unidade", relatorioHelper.getUnidadeNegocio());			}			// Localidade			if (relatorioHelper.getLocalidade() != null) {				consulta += " and loca.id = :localidade ";				parameters.put("localidade", relatorioHelper.getLocalidade());			}			// Setor Comercial			if (relatorioHelper.getSetorComercial() != null) {				consulta += " and setcom.id = :setor ";				parameters.put("setor", relatorioHelper.getSetorComercial());			}			// Cliente			if (relatorioHelper.getCliente() != null) {				consulta += " and clieimo.cliente.id = :cliente ";				parameters.put("cliente", relatorioHelper.getCliente());			}			// Usuário			if (relatorioHelper.getUsuario() != null) {				consulta += " and orseunid.usuario.id = :usuario ";				parameters.put("usuario", relatorioHelper.getUsuario());			}			consulta += " order by os.id ";			query = session.createQuery(consulta);			// ITERA OS PARAMETROS E COLOCA			// OS MESMOS NA QUERY			Set set = parameters.keySet();			Iterator iterMap = set.iterator();			while (iterMap.hasNext()) {				String key = (String) iterMap.next();				if (parameters.get(key) instanceof Set) {					Set setList = (HashSet) parameters.get(key);					query.setParameterList(key, setList);				} else if (parameters.get(key) instanceof Collection) {					Collection collection = (ArrayList) parameters.get(key);					query.setParameterList(key, collection);				} else if (parameters.get(key) instanceof Date) {					Date data = (Date) parameters.get(key);					query.setTimestamp(key, data);				} else {					query.setParameter(key, parameters.get(key));				}			}			retorno = query.list();		} catch (HibernateException e) {			throw new ErroRepositorioException(e, "Erro no Hibernate");		} finally {			HibernateUtil.closeSession(session);		}		return retorno;	}	/**	 * Obtém a coleção de perfis de tipo de serviço para OS.	 * 	 * @author Hugo Azevedo	 * @date 22/06/2011	 * 	 * @throws ControladorException	 */	public Collection obterColecaoTipoOSgerada()			throws ErroRepositorioException {		Session session = HibernateUtil.getSession();		String consulta = "";		Collection retorno = null;		consulta = "SELECT st.id, st.descricao " + " FROM ServicoTipo st "				+ " WHERE st.indicadorEmpresaCobranca = :indicador";		try {			retorno = session					.createQuery(consulta)					.setInteger("indicador",							ConstantesSistema.INDICADOR_USO_ATIVO).list();		} catch (HibernateException e) {			throw new ErroRepositorioException(e, "Erro no Hibernate");		} finally {			HibernateUtil.closeSession(session);		}		return retorno;	}	/**	 * 	 * [UC1186] Gerar Relatório Ordem de Serviço Cobrança p/Resultado	 * 	 * Obtém a coleção de OS a partir dos parâmetros passados pela	 * funcionalidade de Acompanhamento de Cobrança por Resultado.	 * 	 * @author Hugo Azevedo	 * @date 27/06/2011	 * 	 * @throws ErroRepositorioException	 */	public Collection obterColecaoImovelOSCobrancaResultado(			String[] categoriaImovel, String[] perfilImovel,			String[] gerenciaRegional, String[] unidadeNegocio,			String idLocalidadeInicial, String idLocalidadeFinal,			String idSetorComercialInicial, String idSetorComercialFinal,			String idQuadraInicial, String idQuadraFinal, String tipoServico,			String comando) throws ErroRepositorioException {		Session sessao = HibernateUtil.getSession();		String consulta = "";		Collection retorno = null;		consulta = "select distinct imcon.id, grc.id, grc.nome, unc.id, unc.nome "				+ "from EmpresaCobrancaConta emcobco "				+ "inner join emcobco.comandoEmpresaCobrancaConta cecc "				// + "inner join fetch emcobco.contaGeral cong "				// + "inner join fetch cong.conta con "				+ "inner join emcobco.imovel imcon "				+ "inner join imcon.imovelSubcategorias imconsubc "				+ "inner join imconsubc.comp_id.subcategoria subcc "				+ "inner join subcc.categoria catc "				+ "inner join imcon.imovelPerfil ipc "				+ "inner join imcon.localidade locc "				+ "inner join locc.gerenciaRegional grc "				+ "inner join locc.unidadeNegocio unc "				+ "inner join imcon.setorComercial scc "				+ "inner join imcon.quadra qc "				/*				 * + "inner join cong.contaHistorico conh " +				 * "inner join conh.imovel imconh " +				 * "inner join imconh.imovelSubcategorias imconhsubch " +				 * "inner join imconhsubch.comp_id.subcategoria subcch  " +				 * "inner join subcch.categoria catch " +				 * "inner join imconh.imovelPerfil ipch " +				 * "inner join imconh.localidade locch " +				 * "inner join locch.gerenciaRegional grch " +				 * "inner join locch.unidadeNegocio unch " +				 * "inner join imconh.setorComercial scch " +				 * "inner join imconh.quadra qch "				 */				+ "where cecc.id = :comando  and imcon.indicadorExclusao = :indicadorExclusao ";		// Coleção de categorias		if (categoriaImovel != null && categoriaImovel.length > 0) {			consulta += "and catc.id in ( :categoria ) ";		}		// Coleção de perfis do imóvel		if (perfilImovel != null && perfilImovel.length > 0) {			consulta += "and ipc.id in ( :perfil ) ";		}		// Coleção de gerências regionais		if (gerenciaRegional != null && gerenciaRegional.length > 0) {			consulta += "and grc.id in ( :gerenciaR ) ";		}		// Coleção de unidades de negócio		if (unidadeNegocio != null && unidadeNegocio.length > 0) {			consulta += "and unc.id in ( :unidadeN ) ";		}		// Localidade inicial e final		if (idLocalidadeInicial != null && !"".equals(idLocalidadeInicial)				&& idLocalidadeFinal != null && !"".equals(idLocalidadeFinal)) {			consulta += "and locc.id between :localidadeI AND :localidadeF ";		}		// Setor comercial inicial e final		if (idSetorComercialInicial != null				&& !"".equals(idSetorComercialInicial)				&& idSetorComercialFinal != null				&& !"".equals(idSetorComercialFinal)) {			consulta += "and scc between :setorI AND :setorF ";		}		// Quadra inicial e final		if (idQuadraInicial != null && !"".equals(idQuadraInicial)				&& idQuadraFinal != null && !"".equals(idQuadraFinal)) {			consulta += "and qc between :quadraI AND :quadraF ";		}		// Criando a query		Query query = sessao.createQuery(consulta);		// Inserindo os parâmetros nos seus respectivos campos		query.setInteger("comando", new Integer(comando)).setInteger(				"indicadorExclusao", ConstantesSistema.INDICADOR_IMOVEL_ATIVO);		if (categoriaImovel != null && categoriaImovel.length > 0)			query.setParameterList("categoria", categoriaImovel);		if (perfilImovel != null && perfilImovel.length > 0)			query.setParameterList("perfil", perfilImovel);		if (gerenciaRegional != null && gerenciaRegional.length > 0)			query.setParameterList("gerenciaR", gerenciaRegional);		if (unidadeNegocio != null && unidadeNegocio.length > 0)			query.setParameterList("unidadeN", unidadeNegocio);		if (idLocalidadeInicial != null && !"".equals(idLocalidadeInicial)				&& idLocalidadeFinal != null && !"".equals(idLocalidadeFinal))			query.setInteger("localidadeI", new Integer(idLocalidadeInicial))					.setInteger("localidadeF", new Integer(idLocalidadeFinal));		if (idSetorComercialInicial != null				&& !"".equals(idSetorComercialInicial)				&& idSetorComercialFinal != null				&& !"".equals(idSetorComercialFinal))			query.setInteger("setorI", new Integer(idSetorComercialInicial))					.setInteger("setorF", new Integer(idSetorComercialFinal));		if (idQuadraInicial != null && !"".equals(idQuadraInicial)				&& idQuadraFinal != null && !"".equals(idQuadraFinal))			query.setInteger("quadraI", new Integer(idQuadraInicial))					.setInteger("quadraF", new Integer(idQuadraFinal));		try {			System.out.println(query.getQueryString());			retorno = query.list();		} catch (HibernateException e) {			throw new ErroRepositorioException(e, "Erro no Hibernate");		} finally {			HibernateUtil.closeSession(sessao);		}		return retorno;	}	/**	 * [UC1182] Recepcionar Arquivo TXT Encerramento OS Cobrança	 * 	 * Consulta chamada pelo "[FS0008  Validar Motivo Encerramento]"	 * 	 * @author Mariana Victor	 * @data 20/06/2011	 */	public Boolean verificarAtendimentoMotivoEncerramento(			Integer idMotivoEncerramento) throws ErroRepositorioException {		Integer retorno = null;		Session session = HibernateUtil.getSession();		String consulta;		try {			consulta = " SELECT count(*) AS quantidade " // 0					+ "  FROM atendimentopublico.atend_motivo_encmt "					+ "  WHERE amen_id = :idMotivoEncerramento ";			retorno = (Integer) session.createSQLQuery(consulta)					.addScalar("quantidade", Hibernate.INTEGER)					.setInteger("idMotivoEncerramento", idMotivoEncerramento)					.setMaxResults(1).uniqueResult();		} catch (HibernateException e) {			throw new ErroRepositorioException(e, "Erro no Hibernate");		} finally {			HibernateUtil.closeSession(session);		}		if (retorno != null && retorno.compareTo(new Integer(0)) > 0) {			return true;		}		return false;	}	/**	 * [UC1177] Gerar Relatório de Ordens de Serviço por Situação	 * 	 * Método auxiliar utilizado para montar toda a estrutura SELECT do	 * relatório de ordem de servico por situação. No SELECT, pode haver uma	 * parâmetro para ser passado na query (caso a situação da OS seja diferente	 * de 8 (TODAS as OS).	 * 	 * As colunas resultantes para o relatório analítico são:	 * 	 * (numeroOS, INTEGER) (matriculaImovel, INTEGER) (tipoServico, STRING)	 * (dataEncerramento, DATE) (naoCobrada, STRING) (valorConsumoFraudado,	 * BIG_DECIMAL) (numeroOS, INTEGER) (valorMulta, BIG_DECIMAL)	 * (motivoEncerramento, STRING) (retornoFiscalizacao, STRING)	 * (parecerEncerramento, STRING) (situacaoOS, STRING)	 * 	 * As colunas resultantes para o relatório sintético são:	 * 	 * (tipoServico, STRING) (motivoEncerramento, STRING) (retornoFiscalizacao,	 * STRING) (situacaoOS, STRING) (quantidade, Integer)	 * 	 * @author Diogo Peixoto	 * @date 02/08/2011	 * 	 * @return String	 */	private String filtrarRelatorioOSSituacaoSelect(			FiltrarRelatorioOSSituacaoHelper helper, boolean boletimGerado,			boolean unionFiscalizadas, String situacao) {		StringBuilder sb = new StringBuilder();		if (helper.getOpcaoRelatorio().equals("1")) {			sb.append("SELECT ");			sb.append("orse.orse_id AS numeroOS, "); // 0 - Número Ordem Serviço			sb.append("imov.imov_id AS matriculaImovel, "); // 1 - Matrícula do															// Imóvel			sb.append("svtp.svtp_dsservicotipo AS tipoServico, "); // 2 - Tipo																	// de																	// Serviço			sb.append("orse.orse_tmencerramento AS dataEncerramento, "); // 3 -																			// Data																			// Encerramento			sb.append("(CASE WHEN ((SELECT COUNT(*) ");			sb.append("FROM atendimentopublico.ordem_servico orse2 ");			sb.append("INNER JOIN atendimentopublico.fiscaliz_sit_serv_a_cob fzstSit ON fzstSit.fzst_id = orse2.fzst_id ");			sb.append("WHERE NOT EXISTS (SELECT dbtCo.imov_id ");			sb.append("FROM faturamento.debito_a_cobrar dbtCo ");			sb.append("WHERE dbtCo.imov_id = orse2.imov_id AND dbtCo.dbtp_id = fzstSit.dbtp_id AND dbtCo.dbac_tmatudebito = orse2.orse_tmencerramento) ");			sb.append("AND NOT EXISTS (SELECT dbtHist.imov_id ");			sb.append("FROM faturamento.deb_a_cobrar_hist dbtHist ");			sb.append("WHERE dbtHist.imov_id = orse2.imov_id AND dbtHist.dbtp_id = fzstSit.dbtp_id AND dbtHist.dahi_tmatudebito = orse2.orse_tmencerramento) ");			sb.append("AND orse2.orse_id = orse.orse_id) > 0) THEN '*' ");			sb.append("ELSE '' END) AS naoCobrada, ");// 4 - Não Cobrada														// Automaticamente			sb.append("((SELECT dbac.dbac_vldebito AS valorConsumoFraudado ");			sb.append("FROM faturamento.debito_a_cobrar dbac ");			sb.append("INNER JOIN faturamento.debito_tipo dbtp ON dbac.dbtp_id = dbtp.dbtp_id ");			sb.append("WHERE dbac.imov_id = imov.imov_id AND dbac.dbac_tmatudebito = orse.orse_tmencerramento AND dbtp.dbtp_nncodigoconstante = 206) ");			sb.append("UNION ");			sb.append("(SELECT dbach.dahi_vldebito AS valorConsumoFraudado ");			sb.append("FROM faturamento.deb_a_cobrar_hist dbach ");			sb.append("INNER JOIN faturamento.debito_tipo dbtp ON dbach.dbtp_id = dbtp.dbtp_id ");			sb.append("WHERE dbach.imov_id = imov.imov_id AND dbach.dahi_tmatudebito = orse.orse_tmencerramento AND dbtp.dbtp_nncodigoconstante = 206)) ");			sb.append("AS valorConsumoFraudado, ");// 5 - Valor do Consumo													// Fraudado			sb.append("((SELECT dbac.dbac_vldebito AS valorMulta ");			sb.append("FROM faturamento.debito_a_cobrar dbac ");			sb.append("INNER JOIN faturamento.debito_tipo dbtp ON dbac.dbtp_id = dbtp.dbtp_id ");			sb.append("WHERE dbac.imov_id = imov.imov_id AND dbac.dbac_tmatudebito = orse.orse_tmencerramento AND dbtp.dbtp_nncodigoconstante = 205) ");			sb.append("UNION ");			sb.append("(SELECT dbach.dahi_vldebito AS valorMulta ");			sb.append("FROM faturamento.deb_a_cobrar_hist dbach ");			sb.append("INNER JOIN faturamento.debito_tipo dbtp ON dbach.dbtp_id = dbtp.dbtp_id ");			sb.append("WHERE dbach.imov_id = imov.imov_id AND dbach.dahi_tmatudebito = orse.orse_tmencerramento AND dbtp.dbtp_nncodigoconstante = 205)) ");			sb.append("AS valorMulta, ");// 6 - Valor da Multa			sb.append("encmt.amen_dsmotivoencerramento AS motivoEncerramento, ");// 7																					// -																					// Motivo																					// Encerramento			sb.append("fzst.fzst_dsfiscalizacaosituacao AS retornoFiscalizacao, ");// 8																					// -																					// Retorno																					// de																					// Fiscalizaçã			sb.append("orse.orse_dsparecerencerramento AS parecerEncerramento ");// 9																					// -																					// Parecer																					// Encerramento		} else {			if (!unionFiscalizadas) {				sb.append("SELECT ");				if (helper.getSituacaoOS().equals("8")						|| helper.getSituacaoOS().equals("13")) {					sb.append("temp.numeroOS, ");				}				sb.append("temp.tipoServico, ");// 1 Tipo de Serviço				sb.append("temp.motivoEncerramento, ");// 2 - Motivo														// Encerramento				sb.append("temp.retornoFiscalizacao, ");// 3 - Retorno de														// Fiscalização				// Caso a situação seja todas, pegar do parâmetro a situação da				// os				if (helper.getSituacaoOS().equals("8")) {					sb.append(situacao);				} else {					sb.append("temp.situacaoOS, ");				}// 4 - Situação da Ordem de Serviço				sb.append("SUM(temp.quantidade) AS quantidade ");// 5 -																	// Quantidade																	// de OS por																	// tipo/motivo/retorno				sb.append("FROM (");			}			sb.append("SELECT ");			sb.append("orse.orse_id AS numeroOS, ");			sb.append("svtp.svtp_dsservicotipo AS tipoServico, ");			sb.append("encmt.amen_dsmotivoencerramento AS motivoEncerramento, ");			sb.append("fzst.fzst_dsfiscalizacaosituacao AS retornoFiscalizacao, ");			if (helper.getSituacaoOS().equals("13")) {				sb.append(situacao);			}			sb.append("1 AS quantidade ");		}		/*		 * Se a situação da OS for diferente de TODAS, os registros encontrados		 * serão da situação passada no filtro.		 */		if (!helper.getSituacaoOS().equals("8")				&& !helper.getSituacaoOS().equals("13")) {			sb.append(", :situacaoOS AS situacaoOS ");// 10 - Situação da Ordem														// de Serviço		}		return sb.toString();	}	/**	 * [UC1177] Gerar Relatório de Ordens de Serviço por Situação	 * 	 * O segundo parâmetro (boletimGerado) é um booleano que indica se para um	 * dado grupo de cobrança e um mês referencia foi gerado um boletim de	 * medição.	 * 	 * @author Diogo Peixoto	 * @date 09/06/2011	 * 	 * @param FiltrarRelatorioOSSituacaoHelper	 * @param boletimGerado	 * @return Collection<FiltrarRelatorioOSSituacaoHelper>	 * @throws ErroRepositorioException	 */	public Collection<Object[]> filtrarRelatorioOSSituacao(			FiltrarRelatorioOSSituacaoHelper helper, boolean boletimGerado)			throws ErroRepositorioException {		Collection<Object[]> relatorios = new ArrayList<Object[]>();		/*		 * Esse método pesquisa as ordens de serviço por situação. O helper do		 * parâmetro possui a situação da os com os seguintes valores:		 * 		 * 1 Descontadas 2 Encerradas 3 Executadas 4 Fiscalizadas 5 Justificadas		 * 6 Penalizadas por Fiscalização 7 Penalizadas por Decurso de Prazo 8		 * Todas 9 Encerradas com Execução 10 Encerradas por Decurso de Prazo 11		 * Pendentes 12 Fiscalizadas Boletim Não Gerado 13 Todas Boletim Não		 * Gerado		 */		Session session = HibernateUtil.getSession();		String consulta = "";		Map<String, Object> parameters = new HashMap<String, Object>();		StringBuilder sb = new StringBuilder();		StringBuilder sbParametrosOpcionais = new StringBuilder();		String clausulaWhere = "";		String groupBy = "";		String orderBy = "";		try {			if (!helper.getSituacaoOS().equals("2")					&& !helper.getSituacaoOS().equals("4")					&& !helper.getSituacaoOS().equals("8")					&& !helper.getSituacaoOS().equals("13")) {				sb.append(this.filtrarRelatorioOSSituacaoSelect(helper,						boletimGerado, false, null));				sb.append("FROM atendimentopublico.ordem_servico orse ");			}			// Descontadas			if (helper.getSituacaoOS().equals("1")) {				sb.append(this.filtrarRelatorioOSSituacaoDescontadas());				parameters.put("situacaoOS", "DESCONTADAS");				// Executadas			} else if (helper.getSituacaoOS().equals("3")) {				sb.append(this.filtrarRelatorioOSSituacaoExecutadas());				parameters.put("situacaoOS", "EXECUTADAS");				// Justificadas			} else if (helper.getSituacaoOS().equals("5")) {				sb.append(this.filtrarRelatorioOSSituacaoJustificadas());				parameters.put("situacaoOS", "JUSTIFICADAS");				// Penalizadas por fiscalização			} else if (helper.getSituacaoOS().equals("6")) {				sb.append(this						.filtrarRelatorioOSSituacaoPenalizadaFiscalizacao());				parameters.put("situacaoOS", "PENALIZADAS POR FISCALIZAÇÃO");				// Penalizadas por Decurso de Prazo			} else if (helper.getSituacaoOS().equals("7")) {				sb.append(this						.filtrarRelatorioOSSituacaoPenalizadaDecursoPrazo());				parameters						.put("situacaoOS", "PENALIZADAS POR DECURSO DE PRAZO");				// Encerradas com Execução			} else if (helper.getSituacaoOS().equals("9")) {				sb.append(this.filtrarRelatorioOSSituacaoBoletimNaoGerado());				clausulaWhere += " AND orse.orse_cdsituacao = 2 AND orse.amen_id != 32 AND encmt.amen_icexecucao = 1 ";				parameters.put("situacaoOS", "ENCERRADAS COM EXECUÇÃO");				// Pendentes			} else if (helper.getSituacaoOS().equals("11")) {				sb.append(this.filtrarRelatorioOSSituacaoBoletimNaoGerado());				clausulaWhere += " AND orse.orse_cdsituacao = 1 ";				parameters.put("situacaoOS", "PENDENTES");				// Fiscalizadas Boletim Não Gerado			} else if (helper.getSituacaoOS().equals("12")) {				sb.append(this.filtrarRelatorioOSSituacaoBoletimNaoGerado());				sb.append("INNER JOIN atendimentopublico.ordem_servico orseRef ON orseRef.orse_idreferencia = orse.orse_id ");				parameters.put("situacaoOS", "FISCALIZADAS");				// Encerradas com decurso de prazo			} else if (helper.getSituacaoOS().equals("10")) {				sb.append(this.filtrarRelatorioOSSituacaoBoletimNaoGerado());				clausulaWhere += " AND orse.orse_cdsituacao = 2 AND orse.amen_id = 32 ";				parameters.put("situacaoOS", "ENCERRADAS COM DECURSO DE PRAZO");			}			if (helper.getOpcaoOSCobranca() != null					&& helper.getOpcaoOSCobranca().equalsIgnoreCase(							"naoCobradasAutomaticamente")) {				sbParametrosOpcionais						.append("INNER JOIN atendimentopublico.fiscaliz_sit_serv_a_cob fiscACobrar ON orse.fzst_id = fiscACobrar.fzst_id ");				clausulaWhere += " AND NOT EXISTS (SELECT dbtCo.imov_id ";				clausulaWhere += "FROM faturamento.debito_a_cobrar dbtCo ";				clausulaWhere += "WHERE dbtCo.imov_id = orse.imov_id AND dbtCo.dbtp_id = fiscACobrar.dbtp_id AND dbtCo.dbac_tmatudebito = orse.orse_tmencerramento) ";				clausulaWhere += " AND NOT EXISTS (SELECT dbtHist.imov_id ";				clausulaWhere += " FROM faturamento.deb_a_cobrar_hist dbtHist ";				clausulaWhere += " WHERE dbtHist.imov_id = orse.imov_id AND dbtHist.dbtp_id = fiscACobrar.dbtp_id AND dbtHist.dahi_tmatudebito = orse.orse_tmencerramento) ";			}			if (helper.getServicoTipo() != null) {				clausulaWhere += " AND orse.svtp_id = :servicoTipo ";				parameters.put("servicoTipo", helper.getServicoTipo().getId());			}			boolean existeLocalidade;			existeLocalidade = (helper.getLocalidade() != null ? existeLocalidade = true					: false);			// Localidade			if (existeLocalidade) {				sbParametrosOpcionais						.append("INNER JOIN cadastro.localidade loca ON loca.loca_id = imov.loca_id ");				clausulaWhere += " AND loca.loca_id = :idLocalidade ";				parameters.put("idLocalidade", helper.getLocalidade().getId());			}			if (helper.getEloPolo() != null) {				// Elo Polo				if (!existeLocalidade) {					sbParametrosOpcionais							.append("INNER JOIN cadastro.localidade loca ON loca.loca_id = imov.loca_id ");					existeLocalidade = true;				}				clausulaWhere += " AND loca.loca_cdelo = :idEloPolo ";				parameters.put("idEloPolo", helper.getEloPolo().getId());			}			// Gerência Regional			GerenciaRegional gerencia = helper.getGerenciaRegional();			if (gerencia != null) {				if (existeLocalidade) {					sbParametrosOpcionais							.append("INNER JOIN cadastro.gerencia_regional ger ON ger.greg_id = loca.greg_id ");				} else {					sbParametrosOpcionais							.append("INNER JOIN cadastro.localidade loca ON loca.loca_id = imov.loca_id ");					sbParametrosOpcionais							.append("INNER JOIN cadastro.gerencia_regional ger ON ger.greg_id = loca.greg_id ");					existeLocalidade = true;				}				clausulaWhere += " AND ger.greg_id = :idGerencia ";				parameters.put("idGerencia", gerencia.getId());			}			// Unidade Negócio			UnidadeNegocio unidade = helper.getUnidadeNegocio();			if (unidade != null) {				if (existeLocalidade) {					sbParametrosOpcionais							.append("INNER JOIN cadastro.unidade_negocio uni ON uni.uneg_id = loca.uneg_id ");				} else {					sbParametrosOpcionais							.append("INNER JOIN cadastro.localidade loca ON loca.loca_id = imov.loca_id ");					sbParametrosOpcionais							.append("INNER JOIN cadastro.unidade_negocio uni ON uni.uneg_id = loca.uneg_id ");				}				clausulaWhere += " AND uni.uneg_id = :idUnidade ";				parameters.put("idUnidade", unidade.getId());			}			// Setor Comercial			if (helper.getSetorComercial() != null) {				sbParametrosOpcionais						.append("INNER JOIN cadastro.setor_comercial setor ON setor.stcm_id = imov.stcm_id ");				clausulaWhere += " AND setor.stcm_id = :idSetor ";				parameters.put("idSetor", helper.getSetorComercial().getId());			}			// Quadra			if (helper.getQuadra() != null) {				sbParametrosOpcionais						.append("INNER JOIN cadastro.quadra quadra ON quadra.qdra_id = imov.qdra_id ");				clausulaWhere += " AND quadra.qdra_id = :idQuadra ";				parameters.put("idQuadra", helper.getQuadra().getId());			}			if (helper.getSituacaoOS().equals("2")) {				if (helper.getOpcaoRelatorio().equals("1")) {					sb.append("SELECT DISTINCT aux.numeroOS, ");					sb.append("aux.matriculaImovel, ");					sb.append("aux.tipoServico, ");					sb.append("aux.dataEncerramento, ");					sb.append("aux.naoCobrada, ");					sb.append("aux.valorConsumoFraudado, ");					sb.append("aux.valorMulta, ");					sb.append("aux.motivoEncerramento, ");					sb.append("aux.retornoFiscalizacao, ");					sb.append("aux.parecerEncerramento, ");					sb.append("aux.situacaoOS ");				} else if (helper.getOpcaoRelatorio().equals("2")) {					sb.append("SELECT DISTINCT aux.tipoServico, ");					sb.append("aux.motivoEncerramento, ");					sb.append("aux.retornoFiscalizacao, ");					sb.append("aux.situacaoOS AS situacaoOS, ");					sb.append("SUM(aux.quantidade) AS quantidade ");				}				sb.append("FROM (");				sb.append(this.filtrarRelatorioOSSituacaoSelect(helper,						boletimGerado, true, null));				sb.append("FROM atendimentopublico.ordem_servico orse ");				sb.append(this.filtrarRelatorioOSSituacaoExecutadas());				sb.append(sbParametrosOpcionais.toString());				if (!clausulaWhere.trim().equals("")) {					sb.append(" WHERE ");					clausulaWhere = clausulaWhere.replaceFirst("AND", "");					sb.append(clausulaWhere);				}				sb.append(" UNION ALL ");				sb.append(this.filtrarRelatorioOSSituacaoSelect(helper,						boletimGerado, true, null));				sb.append("FROM atendimentopublico.ordem_servico orse ");				sb.append(this.filtrarRelatorioOSSituacaoJustificadas());				sb.append(sbParametrosOpcionais.toString());				if (!clausulaWhere.trim().equals("")) {					sb.append(" WHERE ");					clausulaWhere = clausulaWhere.replaceFirst("AND", "");					sb.append(clausulaWhere);				}				sb.append(") aux");				parameters.put("situacaoOS", "ENCERRADAS");			} else if (helper.getSituacaoOS().equals("4")) {				sb.append(this.filtrarRelatorioOSSituacaoSelect(helper,						boletimGerado, false, null));				sb.append("FROM atendimentopublico.ordem_servico orse ");				sb.append(this.filtrarRelatorioOSSituacaoFiscalizadas(helper,						boletimGerado, sbParametrosOpcionais.toString(),						clausulaWhere));				parameters.put("situacaoOS", "FISCALIZADAS");			} else if (helper.getSituacaoOS().equals("8")					|| helper.getSituacaoOS().equals("13")) {				sb.append(this.filtrarRelatorioOSSituacaoTodas(helper,						boletimGerado, sbParametrosOpcionais.toString(),						clausulaWhere));			} else {				sb.append(sbParametrosOpcionais.toString());			}			if (!clausulaWhere.equals("")					&& !helper.getSituacaoOS().equals("2")					&& !helper.getSituacaoOS().equals("4")					&& !helper.getSituacaoOS().equals("8")					&& !helper.getSituacaoOS().equals("13")) {				/*				 * Este trecho do código retira o primeiro AND da cláusula where				 * e adiciona espaço em branco na última comparação para não dar				 * erro na query. Ex: 'WHERE AND os.orse_id' => 'WHERE				 * os.orse_id '				 */				sb.append("WHERE ");				clausulaWhere = clausulaWhere.trim();				clausulaWhere = clausulaWhere.replaceFirst("AND", "");				clausulaWhere += " ";				sb.append(clausulaWhere);			}			// Caso seja o relatório sintético			if (helper.getOpcaoRelatorio().equals("2")					&& !helper.getSituacaoOS().equals("8")					&& !helper.getSituacaoOS().equals("13")) {				groupBy += " GROUP BY tipoServico, motivoEncerramento, retornoFiscalizacao, situacaoOS ";				orderBy += " ORDER BY tipoServico, motivoEncerramento, retornoFiscalizacao ";				if (!helper.getSituacaoOS().equals("2")) {					sb.append(") temp");				}			}			sb.append(groupBy);			sb.append(orderBy);			consulta = sb.toString();			SQLQuery sqlQuery = session.createSQLQuery(consulta);			sqlQuery.setInteger("amReferencia", helper.getDataReferencia());			sqlQuery.setInteger("cobrancaGrupoID", helper.getIdGrupoCobranca());			if (helper.getOpcaoRelatorio().equalsIgnoreCase("1")) {				sqlQuery = sqlQuery						.addScalar("numeroOS", Hibernate.INTEGER)						.addScalar("matriculaImovel", Hibernate.INTEGER)						.addScalar("tipoServico", Hibernate.STRING)						.addScalar("dataEncerramento", Hibernate.DATE)						.addScalar("naoCobrada", Hibernate.STRING)						.addScalar("valorConsumoFraudado",								Hibernate.BIG_DECIMAL)						.addScalar("valorMulta", Hibernate.BIG_DECIMAL)						.addScalar("motivoEncerramento", Hibernate.STRING)						.addScalar("retornoFiscalizacao", Hibernate.STRING)						.addScalar("parecerEncerramento", Hibernate.STRING)						.addScalar("situacaoOS", Hibernate.STRING);			} else {				sqlQuery = sqlQuery.addScalar("tipoServico", Hibernate.STRING)						.addScalar("motivoEncerramento", Hibernate.STRING)						.addScalar("retornoFiscalizacao", Hibernate.STRING)						.addScalar("situacaoOS", Hibernate.STRING)						.addScalar("quantidade", Hibernate.INTEGER);			}			// ITERA OS PARAMETROS E COLOCA			// OS MESMOS NA QUERY			Set<String> set = parameters.keySet();			Iterator<String> iterMap = set.iterator();			while (iterMap.hasNext()) {				String key = iterMap.next();				sqlQuery.setParameter(key, parameters.get(key));			}			relatorios = sqlQuery.list();		} catch (HibernateException e) {			throw new ErroRepositorioException(e, "Erro no Hibernate");		} finally {			HibernateUtil.closeSession(session);		}		return relatorios;	}	private String filtrarRelatorioOSSituacaoTodas(			FiltrarRelatorioOSSituacaoHelper filtro, boolean boletimGerado,			String joins, String where) {		StringBuilder sb = new StringBuilder();		if (boletimGerado) {			if (filtro.getOpcaoRelatorio().equals("1")) {				sb.append("SELECT aux4.numeroOS AS numeroOS, ");				sb.append("aux4.matriculaImovel AS matriculaImovel, ");				sb.append("aux4.tipoServico AS tipoServico, ");				sb.append("aux4.dataEncerramento AS dataEncerramento, ");				sb.append("aux4.naoCobrada AS naoCobrada, ");				sb.append("aux4.valorConsumoFraudado AS valorConsumoFraudado, ");				sb.append("aux4.valorMulta AS valorMulta, ");				sb.append("aux4.motivoEncerramento AS motivoEncerramento, ");				sb.append("aux4.retornoFiscalizacao AS retornoFiscalizacao, ");				sb.append("aux4.parecerEncerramento, ");				sb.append("aux4.SITUACAO AS situacaoOS ");				sb.append("FROM (");				sb.append("SELECT aux3.numeroOS, ");				sb.append("aux3.matriculaImovel, ");				sb.append("aux3.tipoServico, ");				sb.append("aux3.dataEncerramento, ");				sb.append("aux3.naoCobrada, ");				sb.append("aux3.valorConsumoFraudado, ");				sb.append("aux3.valorMulta, ");				sb.append("aux3.motivoEncerramento, ");				sb.append("aux3.retornoFiscalizacao, ");				sb.append("aux3.parecerEncerramento, ");				sb.append("min(aux3.Situacao) as SITUACAO ");				sb.append("FROM (");				sb.append("SELECT aux.numeroOS, ");				sb.append("aux.matriculaImovel, ");				sb.append("aux.tipoServico, ");				sb.append("aux.dataEncerramento, ");				sb.append("aux.naoCobrada, ");				sb.append("aux.valorConsumoFraudado, ");				sb.append("aux.valorMulta, ");				sb.append("aux.motivoEncerramento, ");				sb.append("aux.retornoFiscalizacao, ");				sb.append("aux.parecerEncerramento, ");				sb.append("1 AS SITUACAO ");				sb.append("FROM (");				sb.append(this.filtrarRelatorioOSSituacaoSelect(filtro,						boletimGerado, false, null));				sb.append("FROM atendimentopublico.ordem_servico orse ");				sb.append(this.filtrarRelatorioOSSituacaoFiscalizadas(filtro,						boletimGerado, joins, where));				sb.append(") aux ");				sb.append("UNION ALL ");				sb.append(this.filtrarRelatorioOSSituacaoSelect(filtro,						boletimGerado, false, null));				sb.append(", 2 AS SITUACAO ");				sb.append("FROM atendimentopublico.ordem_servico orse ");				sb.append(this.filtrarRelatorioOSSituacaoDescontadas());				sb.append(joins);				String whereTratado = "";				if (!where.trim().equals("")) {					sb.append("WHERE ");					whereTratado = where.trim();					whereTratado = whereTratado.replaceFirst("AND", "");					whereTratado += " ";				}				sb.append(whereTratado);				sb.append(" UNION ALL ");				sb.append(this.filtrarRelatorioOSSituacaoSelect(filtro,						boletimGerado, false, null));				sb.append(", 3 AS SITUACAO ");				sb.append("FROM atendimentopublico.ordem_servico orse ");				sb.append(this.filtrarRelatorioOSSituacaoExecutadas());				sb.append(joins);				whereTratado = "";				if (!where.trim().equals("")) {					sb.append("WHERE ");					whereTratado = where.trim();					whereTratado = whereTratado.replaceFirst("AND", "");					whereTratado += " ";				}				sb.append(whereTratado);				sb.append(" UNION ALL ");				sb.append(this.filtrarRelatorioOSSituacaoSelect(filtro,						boletimGerado, false, null));				sb.append(", 4 AS SITUACAO ");				sb.append("FROM atendimentopublico.ordem_servico orse ");				sb.append(this.filtrarRelatorioOSSituacaoJustificadas());				sb.append(joins);				whereTratado = "";				if (!where.trim().equals("")) {					sb.append("WHERE ");					whereTratado = where.trim();					whereTratado = whereTratado.replaceFirst("AND", "");					whereTratado += " ";				}				sb.append(whereTratado);				sb.append(" UNION ALL ");				sb.append(this.filtrarRelatorioOSSituacaoSelect(filtro,						boletimGerado, false, null));				sb.append(", 5 AS SITUACAO ");				sb.append("FROM atendimentopublico.ordem_servico orse ");				sb.append(this						.filtrarRelatorioOSSituacaoPenalizadaFiscalizacao());				sb.append(joins);				whereTratado = "";				if (!where.trim().equals("")) {					sb.append("WHERE ");					whereTratado = where.trim();					whereTratado = whereTratado.replaceFirst("AND", "");					whereTratado += " ";				}				sb.append(whereTratado);				sb.append(" UNION ALL ");				sb.append(this.filtrarRelatorioOSSituacaoSelect(filtro,						boletimGerado, false, null));				sb.append(", 6 AS SITUACAO ");				sb.append("FROM atendimentopublico.ordem_servico orse ");				sb.append(this						.filtrarRelatorioOSSituacaoPenalizadaDecursoPrazo());				sb.append(joins);				whereTratado = "";				if (!where.trim().equals("")) {					sb.append("WHERE ");					whereTratado = where.trim();					whereTratado = whereTratado.replaceFirst("AND", "");					whereTratado += " ";				}				sb.append(whereTratado);				sb.append(") aux3 ");				sb.append("GROUP BY 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 ");				sb.append("ORDER BY 11, 2 ");				sb.append(") aux4 ");				sb.append("ORDER BY 11, 1 ");			} else if (filtro.getOpcaoRelatorio().equals("2")) {				sb.append("SELECT ");				if (filtro.getSituacaoOS().equals("8")						|| filtro.getSituacaoOS().equals("13")) {					sb.append("aux4.numeroOS, ");				}				sb.append("aux4.tipoServico AS tipoServico,  ");				sb.append("aux4.motivoEncerramento AS motivoEncerramento, ");				sb.append("aux4.retornoFiscalizacao AS retornoFiscalizacao, ");				sb.append("aux4.situacaoOS AS situacaoOS, ");				sb.append("aux4.quantidade AS quantidade ");				sb.append("FROM( ");				sb.append("SELECT aux3.numeroOS, ");				sb.append("aux3.tipoServico, ");				sb.append("aux3.motivoEncerramento, ");				sb.append("aux3.retornoFiscalizacao, ");				sb.append("min(aux3.situacaoOS) as situacaoOS, ");				sb.append("aux3.quantidade AS quantidade ");				sb.append("FROM( ");				sb.append(this.filtrarRelatorioOSSituacaoSelect(filtro,						boletimGerado, false, "1 AS situacaoOS, "));				sb.append("FROM atendimentopublico.ordem_servico orse ");				sb.append(this.filtrarRelatorioOSSituacaoFiscalizadas(filtro,						boletimGerado, joins, where));				sb.append(") temp ");				sb.append("GROUP BY numeroOS, tipoServico, motivoEncerramento, retornoFiscalizacao  ");				sb.append(" UNION ALL ");				sb.append(this.filtrarRelatorioOSSituacaoSelect(filtro,						boletimGerado, false, "2 AS situacaoOS, "));				sb.append("FROM atendimentopublico.ordem_servico orse ");				sb.append(this.filtrarRelatorioOSSituacaoDescontadas());				sb.append(joins);				String whereTratado = "";				if (!where.trim().equals("")) {					sb.append("WHERE ");					whereTratado = where.trim();					whereTratado = whereTratado.replaceFirst("AND", "");					whereTratado += " ";				}				sb.append(whereTratado);				sb.append(") temp ");				sb.append("GROUP BY numeroOS, tipoServico, motivoEncerramento, retornoFiscalizacao  ");				sb.append(" UNION ALL ");				sb.append(this.filtrarRelatorioOSSituacaoSelect(filtro,						boletimGerado, false, "3 AS situacaoOS, "));				sb.append("FROM atendimentopublico.ordem_servico orse ");				sb.append(this.filtrarRelatorioOSSituacaoExecutadas());				sb.append(joins);				whereTratado = "";				if (!where.trim().equals("")) {					sb.append("WHERE ");					whereTratado = where.trim();					whereTratado = whereTratado.replaceFirst("AND", "");					whereTratado += " ";				}				sb.append(whereTratado);				sb.append(") temp ");				sb.append("GROUP BY numeroOS, tipoServico, motivoEncerramento, retornoFiscalizacao  ");				sb.append(" UNION ALL ");				sb.append(this.filtrarRelatorioOSSituacaoSelect(filtro,						boletimGerado, false, "4 AS situacaoOS, "));				sb.append("FROM atendimentopublico.ordem_servico orse ");				sb.append(this.filtrarRelatorioOSSituacaoJustificadas());				sb.append(joins);				whereTratado = "";				if (!where.trim().equals("")) {					sb.append("WHERE ");					whereTratado = where.trim();					whereTratado = whereTratado.replaceFirst("AND", "");					whereTratado += " ";				}				sb.append(whereTratado);				sb.append(") temp ");				sb.append("GROUP BY numeroOS, tipoServico, motivoEncerramento, retornoFiscalizacao  ");				sb.append(" UNION ALL ");				sb.append(this.filtrarRelatorioOSSituacaoSelect(filtro,						boletimGerado, false, "5 AS situacaoOS, "));				sb.append("FROM atendimentopublico.ordem_servico orse ");				sb.append(this						.filtrarRelatorioOSSituacaoPenalizadaFiscalizacao());				sb.append(joins);				whereTratado = "";				if (!where.trim().equals("")) {					sb.append("WHERE ");					whereTratado = where.trim();					whereTratado = whereTratado.replaceFirst("AND", "");					whereTratado += " ";				}				sb.append(whereTratado);				sb.append(") temp ");				sb.append("GROUP BY numeroOS, tipoServico, motivoEncerramento, retornoFiscalizacao  ");				sb.append(" UNION ALL ");				sb.append(this.filtrarRelatorioOSSituacaoSelect(filtro,						boletimGerado, false, "6 AS situacaoOS, "));				sb.append("FROM atendimentopublico.ordem_servico orse ");				sb.append(this						.filtrarRelatorioOSSituacaoPenalizadaDecursoPrazo());				sb.append(joins);				whereTratado = "";				if (!where.trim().equals("")) {					sb.append("WHERE ");					whereTratado = where.trim();					whereTratado = whereTratado.replaceFirst("AND", "");					whereTratado += " ";				}				sb.append(whereTratado);				sb.append(") temp ");				sb.append("GROUP BY numeroOS, tipoServico, motivoEncerramento, retornoFiscalizacao  ");				sb.append(") aux3 ");				if (filtro.getSituacaoOS().equals("8")						|| filtro.getSituacaoOS().equals("13")) {					sb.append("GROUP BY 1, 2, 3, 4, 6 ");					sb.append("ORDER BY 1, 2 ");					sb.append(") aux4 ");					sb.append("ORDER BY 5, 2, 3, 4 ");				} else {					sb.append("GROUP BY 1, 2, 3, 5 ");					sb.append("ORDER BY 1, 2 ");					sb.append(") aux4 ");					sb.append("ORDER BY 4, 1, 2, 3, 5");				}			}		} else {			if (filtro.getOpcaoRelatorio().equals("1")) {				sb.append("SELECT aux4.numeroOS, ");				sb.append("aux4.matriculaImovel, ");				sb.append("aux4.tipoServico, ");				sb.append("aux4.dataEncerramento, ");				sb.append("aux4.naoCobrada, ");				sb.append("aux4.valorConsumoFraudado, ");				sb.append("aux4.valorMulta, ");				sb.append("aux4.motivoEncerramento, ");				sb.append("aux4.retornoFiscalizacao, ");				sb.append("aux4.parecerEncerramento, ");				sb.append("aux4.SITUACAO AS situacaoOS ");				sb.append("FROM (");				sb.append("SELECT ");				sb.append("aux3.numeroOS, ");				sb.append("aux3.matriculaImovel, ");				sb.append("aux3.tipoServico, ");				sb.append("aux3.dataEncerramento, ");				sb.append("aux3.naoCobrada, ");				sb.append("aux3.valorConsumoFraudado, ");				sb.append("aux3.valorMulta, ");				sb.append("aux3.motivoEncerramento, ");				sb.append("aux3.retornoFiscalizacao, ");				sb.append("aux3.parecerEncerramento, ");				sb.append("min(aux3.situacaoOS) as SITUACAO ");				sb.append("FROM (");				sb.append(this.filtrarRelatorioOSSituacaoSelect(filtro,						boletimGerado, false, null));				sb.append(", 7 AS situacaoOS ");				sb.append("FROM atendimentopublico.ordem_servico orse ");				sb.append(this.filtrarRelatorioOSSituacaoBoletimNaoGerado());				sb.append("INNER JOIN atendimentopublico.ordem_servico orseRef ON orseRef.orse_idreferencia = orse.orse_id ");				sb.append(joins);				String whereTratado = "";				if (!where.trim().equals("")) {					sb.append("WHERE ");					whereTratado = where.trim();					whereTratado = whereTratado.replaceFirst("AND", "");					whereTratado += " ";				}				sb.append(whereTratado);				sb.append(" UNION ALL ");				sb.append(this.filtrarRelatorioOSSituacaoSelect(filtro,						boletimGerado, false, null));				sb.append(", 8 AS situacaoOS ");				sb.append("FROM atendimentopublico.ordem_servico orse ");				sb.append(this.filtrarRelatorioOSSituacaoBoletimNaoGerado());				sb.append(joins);				sb.append("WHERE orse.orse_cdsituacao = 2 AND orse.amen_id != 32 AND encmt.amen_icexecucao = 1 ");				sb.append(where);				sb.append(" UNION ALL ");				sb.append(this.filtrarRelatorioOSSituacaoSelect(filtro,						boletimGerado, false, null));				sb.append(", 9 AS situacaoOS ");				sb.append("FROM atendimentopublico.ordem_servico orse ");				sb.append(this.filtrarRelatorioOSSituacaoBoletimNaoGerado());				sb.append(joins);				sb.append("WHERE orse.orse_cdsituacao = 1 ");				sb.append(where);				sb.append(" UNION ALL ");				sb.append(this.filtrarRelatorioOSSituacaoSelect(filtro,						boletimGerado, false, null));				sb.append(", 10 AS situacaoOS ");				sb.append("FROM atendimentopublico.ordem_servico orse ");				sb.append(this.filtrarRelatorioOSSituacaoBoletimNaoGerado());				sb.append(joins);				sb.append("WHERE orse.orse_cdsituacao = 2 AND orse.amen_id = 32 ");				sb.append(where);				sb.append(") aux3 ");				sb.append("GROUP BY 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 ");				sb.append("ORDER BY 1, 2 ");				sb.append(") aux4 ORDER	BY 11, 1 ");			} else if (filtro.getOpcaoRelatorio().equals("2")) {				sb.append("SELECT ");				if (filtro.getSituacaoOS().equals("8")						|| filtro.getSituacaoOS().equals("13")) {					sb.append("aux4.numeroOS, ");				}				sb.append("aux4.tipoServico, ");				sb.append("aux4.motivoEncerramento, ");				sb.append("aux4.retornoFiscalizacao, ");				sb.append("aux4.SITUACAO AS situacaoOS, ");				sb.append("aux4.quantidade AS quantidade ");				sb.append("FROM (");				sb.append("SELECT ");				sb.append("aux3.numeroOS, ");				sb.append("aux3.tipoServico, ");				sb.append("aux3.motivoEncerramento, ");				sb.append("aux3.retornoFiscalizacao, ");				sb.append("min(aux3.situacaoOS) AS SITUACAO, ");				sb.append("aux3.quantidade AS quantidade ");				sb.append("FROM (");				sb.append(this.filtrarRelatorioOSSituacaoSelect(filtro,						boletimGerado, true, " 7 AS situacaoOS, "));				sb.append("FROM atendimentopublico.ordem_servico orse ");				sb.append(this.filtrarRelatorioOSSituacaoBoletimNaoGerado());				sb.append("INNER JOIN atendimentopublico.ordem_servico orseRef ON orseRef.orse_idreferencia = orse.orse_id ");				sb.append(joins);				String whereTratado = "";				if (!where.trim().equals("")) {					whereTratado = where.trim();					whereTratado = whereTratado.replaceFirst("AND", "");					sb.append("WHERE ");					whereTratado += " ";				}				sb.append(whereTratado);				sb.append(" UNION ALL ");				sb.append(this.filtrarRelatorioOSSituacaoSelect(filtro,						boletimGerado, true, " 8 AS situacaoOS, "));				sb.append("FROM atendimentopublico.ordem_servico orse ");				sb.append(this.filtrarRelatorioOSSituacaoBoletimNaoGerado());				sb.append(joins);				sb.append("WHERE orse.orse_cdsituacao = 2 AND orse.amen_id != 32 AND encmt.amen_icexecucao = 1 ");				sb.append(where);				sb.append(" UNION ALL ");				sb.append(this.filtrarRelatorioOSSituacaoSelect(filtro,						boletimGerado, true, " 9 AS situacaoOS, "));				sb.append("FROM atendimentopublico.ordem_servico orse ");				sb.append(this.filtrarRelatorioOSSituacaoBoletimNaoGerado());				sb.append(joins);				sb.append("WHERE orse.orse_cdsituacao = 1 ");				sb.append(where);				sb.append(" UNION ALL ");				sb.append(this.filtrarRelatorioOSSituacaoSelect(filtro,						boletimGerado, true, " 10 AS situacaoOS, "));				sb.append("FROM atendimentopublico.ordem_servico orse ");				sb.append(this.filtrarRelatorioOSSituacaoBoletimNaoGerado());				sb.append(joins);				sb.append("WHERE orse.orse_cdsituacao = 2 AND orse.amen_id = 32 ");				sb.append(where);				if (filtro.getSituacaoOS().equals("8")						|| filtro.getSituacaoOS().equals("13")) {					sb.append(") aux3 GROUP BY 1, 2, 3, 4, 6 ");					sb.append(") aux4 ORDER BY 5, 2, 3, 4, 1 ");				} else {					sb.append(") aux3 GROUP BY 1, 2, 3 ");					sb.append(") aux4 ORDER BY 4, 1, 2, 3 ");				}			}		}		return sb.toString();	}	/**	 * [UC1177] Gerar Relatório de Ordens de Serviço por Situação	 * 	 * Método auxiliar para a geração do relatório de ordem de serviço por	 * situação.	 * 	 * @return String	 */	private String filtrarRelatorioOSSituacaoDescontadas() {		StringBuilder sb = new StringBuilder();		sb.append("INNER JOIN cobranca.cobr_boletim_desc desco ON desco.orse_id = orse.orse_id ");		sb.append("INNER JOIN cobranca.cobr_boletim_medicao medicao ON desco.cobm_id = medicao.cobm_id AND ");		sb.append("medicao.cbgr_id = :cobrancaGrupoID AND medicao.cobm_amreferencia = :amReferencia ");		sb.append("INNER JOIN cadastro.imovel imov ON orse.imov_id = imov.imov_id ");		sb.append("LEFT OUTER JOIN atendimentopublico.servico_tipo svtp ON svtp.svtp_id = orse.svtp_id ");		sb.append("LEFT OUTER JOIN atendimentopublico.atend_motivo_encmt encmt ON encmt.amen_id = orse.amen_id ");		sb.append("LEFT OUTER JOIN atendimentopublico.fiscalizacao_situacao fzst ON fzst.fzst_id = orse.fzst_id ");		return sb.toString();	}	/**	 * [UC1177] Gerar Relatório de Ordens de Serviço por Situação	 * 	 * Método auxiliar para a geração do relatório de ordem de serviço por	 * situação.	 * 	 * @return String	 */	private String filtrarRelatorioOSSituacaoExecutadas() {		StringBuilder sb = new StringBuilder();		sb.append("INNER JOIN cobranca.cobr_boletim_exec execu ON execu.orse_id = orse.orse_id ");		sb.append("INNER JOIN cobranca.cobr_boletim_medicao medicao ON execu.cobm_id = medicao.cobm_id AND ");		sb.append("medicao.cbgr_id = :cobrancaGrupoID AND medicao.cobm_amreferencia = :amReferencia ");		sb.append("INNER JOIN cadastro.imovel imov ON orse.imov_id = imov.imov_id ");		sb.append("LEFT OUTER JOIN atendimentopublico.servico_tipo svtp ON svtp.svtp_id = orse.svtp_id ");		sb.append("LEFT OUTER JOIN atendimentopublico.atend_motivo_encmt encmt ON encmt.amen_id = orse.amen_id ");		sb.append("LEFT OUTER JOIN atendimentopublico.fiscalizacao_situacao fzst ON fzst.fzst_id = orse.fzst_id ");		return sb.toString();	}	/**	 * [UC1177] Gerar Relatório de Ordens de Serviço por Situação	 * 	 * Método auxiliar para a geração do relatório de ordem de serviço por	 * situação.	 * 	 * @return String	 */	private String filtrarRelatorioOSSituacaoJustificadas() {		StringBuilder sb = new StringBuilder();		sb.append("INNER JOIN cobranca.cobranca_documento cbdo ON cbdo.cbdo_id = orse.cbdo_id AND orse.orse_cdsituacao = 2 ");		sb.append("INNER JOIN cobranca.cobranca_acao_ativ_crg caac ON caac.caac_id = cbdo.caac_id ");		sb.append("INNER JOIN cobranca.cobranca_acao_cronograma cbcr ON cbcr.cbcr_id = caac.cbcr_id ");		sb.append("INNER JOIN cobranca.cobranca_grupo_crg_mes cbcm ON cbcm.cbcm_id = cbcr.cbcm_id AND cbcm.cbgr_id = :cobrancaGrupoID ");		sb.append("AND cbcm.cbcm_amreferencia = :amReferencia ");		sb.append("INNER JOIN cadastro.imovel imov ON orse.imov_id = imov.imov_id ");		sb.append("LEFT OUTER JOIN atendimentopublico.servico_tipo svtp ON svtp.svtp_id = orse.svtp_id ");		sb.append("INNER JOIN atendimentopublico.atend_motivo_encmt encmt ON encmt.amen_id = orse.amen_id AND encmt.amen_icexecucao = 2 ");		sb.append("LEFT OUTER JOIN atendimentopublico.fiscalizacao_situacao fzst ON fzst.fzst_id = orse.fzst_id ");		return sb.toString();	}	/**	 * [UC1177] Gerar Relatório de Ordens de Serviço por Situação	 * 	 * Método auxiliar para a geração do relatório de ordem de serviço por	 * situação.	 * 	 * @return String	 */	private String filtrarRelatorioOSSituacaoBoletimNaoGerado() {		StringBuilder sb = new StringBuilder();		sb.append("INNER JOIN cobranca.cobranca_documento cbdo ON cbdo.cbdo_id = orse.cbdo_id ");		sb.append("INNER JOIN cobranca.cobranca_acao_ativ_crg caac ON caac.caac_id = cbdo.caac_id ");		sb.append("INNER JOIN cobranca.cobranca_acao_cronograma cbcr ON cbcr.cbcr_id = caac.cbcr_id ");		sb.append("INNER JOIN cobranca.cobranca_grupo_crg_mes cbcm ON cbcm.cbcm_id = cbcr.cbcm_id AND cbcm.cbgr_id = :cobrancaGrupoID ");		sb.append("AND cbcm.cbcm_amreferencia = :amReferencia ");		sb.append("INNER JOIN cadastro.imovel imov ON orse.imov_id = imov.imov_id ");		sb.append("LEFT OUTER JOIN atendimentopublico.servico_tipo svtp ON svtp.svtp_id = orse.svtp_id ");		sb.append("LEFT OUTER JOIN atendimentopublico.atend_motivo_encmt encmt ON encmt.amen_id = orse.amen_id ");		sb.append("LEFT OUTER JOIN atendimentopublico.fiscalizacao_situacao fzst ON fzst.fzst_id = orse.fzst_id ");		return sb.toString();	}	/**	 * [UC1177] Gerar Relatório de Ordens de Serviço por Situação	 * 	 * Método auxiliar para a geração do relatório de ordem de serviço por	 * situação.	 * 	 * @return String	 */	private String filtrarRelatorioOSSituacaoPenalizadaFiscalizacao() {		StringBuilder sb = new StringBuilder();		sb.append("INNER JOIN cobranca.cob_ac_os_nao_aceitas naoAc ON naoAc.orse_id = orse.orse_id AND naoAc.caon_icaceita = 2 ");		sb.append("INNER JOIN cobranca.cobr_boletim_desc desco ON desco.orse_id = naoAc.orse_id ");		sb.append("INNER JOIN cobranca.cobr_boletim_medicao medicao ON desco.cobm_id = medicao.cobm_id AND ");		sb.append("medicao.cbgr_id = :cobrancaGrupoID AND medicao.cobm_amreferencia = :amReferencia ");		sb.append("INNER JOIN cadastro.imovel imov ON orse.imov_id = imov.imov_id ");		sb.append("LEFT OUTER JOIN atendimentopublico.servico_tipo svtp ON svtp.svtp_id = orse.svtp_id ");		sb.append("LEFT OUTER JOIN atendimentopublico.atend_motivo_encmt encmt ON encmt.amen_id = orse.amen_id ");		sb.append("LEFT OUTER JOIN atendimentopublico.fiscalizacao_situacao fzst ON fzst.fzst_id = orse.fzst_id ");		return sb.toString();	}	/**	 * [UC1177] Gerar Relatório de Ordens de Serviço por Situação	 * 	 * Método auxiliar para a geração do relatório de ordem de serviço por	 * situação.	 * 	 * @return String	 */	private String filtrarRelatorioOSSituacaoPenalizadaDecursoPrazo() {		StringBuilder sb = new StringBuilder();		sb.append("INNER JOIN cobranca.cobr_boletim_desc desco ON desco.orse_id = orse.orse_id ");		sb.append("AND desco.orse_id NOT IN (SELECT orse_id FROM cobranca.cob_ac_os_nao_aceitas naoAc) ");		sb.append("INNER JOIN cobranca.cobr_boletim_medicao medicao ON desco.cobm_id = medicao.cobm_id AND ");		sb.append("medicao.cbgr_id = :cobrancaGrupoID AND medicao.cobm_amreferencia = :amReferencia ");		sb.append("INNER JOIN cadastro.imovel imov ON orse.imov_id = imov.imov_id ");		sb.append("LEFT OUTER JOIN atendimentopublico.servico_tipo svtp ON svtp.svtp_id = orse.svtp_id ");		sb.append("LEFT OUTER JOIN atendimentopublico.atend_motivo_encmt encmt ON encmt.amen_id = orse.amen_id ");		sb.append("LEFT OUTER JOIN atendimentopublico.fiscalizacao_situacao fzst ON fzst.fzst_id = orse.fzst_id ");		return sb.toString();	}	/**	 * [UC1177] Gerar Relatório de Ordens de Serviço por Situação	 * 	 * Método auxiliar para a geração do relatório de ordem de serviço por	 * situação.	 * 	 * @param filtro	 * @param boletimGerado	 * @return String	 */	private String filtrarRelatorioOSSituacaoFiscalizadas(			FiltrarRelatorioOSSituacaoHelper filtro, boolean boletimGerado,			String joins, String where) {		StringBuilder sb = new StringBuilder();		StringBuilder join = new StringBuilder();		String whereTratado = "";		sb.append("INNER JOIN atendimentopublico.ordem_servico orseRef ON orseRef.orse_idreferencia = orse.orse_id ");		sb.append("LEFT OUTER JOIN cobranca.cobr_boletim_exec execu ON execu.orse_id = orse.orse_id ");		sb.append("INNER JOIN cobranca.cobr_boletim_medicao medicao ON execu.cobm_id = medicao.cobm_id AND ");		sb.append("medicao.cbgr_id = :cobrancaGrupoID AND medicao.cobm_amreferencia = :amReferencia ");		sb.append("INNER JOIN cadastro.imovel imov ON orse.imov_id = imov.imov_id ");		sb.append("LEFT OUTER JOIN atendimentopublico.servico_tipo svtp ON svtp.svtp_id = orse.svtp_id ");		sb.append("LEFT OUTER JOIN atendimentopublico.atend_motivo_encmt encmt ON encmt.amen_id = orse.amen_id ");		sb.append("LEFT OUTER JOIN atendimentopublico.fiscalizacao_situacao fzst ON fzst.fzst_id = orse.fzst_id ");		sb.append(joins);		if (!where.trim().equals("")) {			sb.append("WHERE ");			whereTratado = where.replaceFirst("AND", "");			sb.append(whereTratado);		}		sb.append("UNION ");		join.append(this.filtrarRelatorioOSSituacaoSelect(filtro,				boletimGerado, true, null));		join.append("FROM atendimentopublico.ordem_servico orse ");		join.append("INNER JOIN atendimentopublico.ordem_servico orseRef ON orseRef.orse_idreferencia = orse.orse_id ");		join.append("LEFT OUTER JOIN cobranca.cobr_boletim_desc desco ON desco.orse_id = orse.orse_id ");		join.append("INNER JOIN cobranca.cobr_boletim_medicao medicao ON desco.cobm_id = medicao.cobm_id AND ");		join.append("medicao.cbgr_id = :cobrancaGrupoID AND medicao.cobm_amreferencia = :amReferencia ");		join.append("INNER JOIN cadastro.imovel imov ON orse.imov_id = imov.imov_id ");		join.append("LEFT OUTER JOIN atendimentopublico.servico_tipo svtp ON svtp.svtp_id = orse.svtp_id ");		join.append("LEFT OUTER JOIN atendimentopublico.atend_motivo_encmt encmt ON encmt.amen_id = orse.amen_id ");		join.append("LEFT OUTER JOIN atendimentopublico.fiscalizacao_situacao fzst ON fzst.fzst_id = orse.fzst_id ");		join.append(joins);		if (!where.trim().equals("")) {			join.append("WHERE ");			whereTratado = where.replaceFirst("AND", "");			join.append(whereTratado);		}		sb.append(join.toString());		return sb.toString();	}	/**	 * [UC1178] Gerar Relatório de Acompanhamento dos Boletins de Medição	 * 	 * O segundo parâmetro (relatorioDefinitivo) é um booleano que indica se o	 * relatório é definitivo ou não, pois o resultado da query é diferente para	 * os relatórios definitivos e os não-definitivos	 * 	 * @author Diogo Peixoto	 * @date 26/07/2011	 * 	 * @param FiltrarRelatorioAcompanhamentoBoletimMedicaoHelper	 * @param relatorioDefinitivo	 * @return Collection<Object[]>	 * @throws ErroRepositorioException	 */	public Collection<Object[]> filtrarRelatorioAcompanhamentoBoletimMedicao(			FiltrarRelatorioAcompanhamentoBoletimMedicaoHelper filtro,			boolean relatorioDefinitivo) throws ErroRepositorioException {		Collection<Object[]> relatorios = new ArrayList<Object[]>();		Session session = HibernateUtil.getSession();		StringBuilder sb = new StringBuilder();		try {			sb.append("SELECT itensServico.idItemServico, ");// 0 - ID Item																// Serviço			sb.append("itensServico.descricaoServico, ");// 1 - Descrição Item															// Serviço			sb.append("itensServico.quantidadeOrcada, ");// 2 - Quantidade															// Orçada			sb.append("itensServico.valorUnitario, ");// 3 - Valor Unitário			sb.append("sum(itensServico.quantidade) as quantidadeItem, ");// 4 -																			// Quantidade																			// do																			// Item			sb.append("(itensServico.valorUnitario * sum(itensServico.quantidade)) as valorItem, ");// 5																									// -																									// Valor																									// Item			sb.append("itensServico.unidadeItem, ");// 6 - Unidade do Item			sb.append("itensServico.valorOrcado, ");// 7 - Valor Orcado			sb.append("sum(itensServico.valorMedidoPeriodo) AS valorMedidoPeriodo, ");// 8																						// -																						// Valor																						// medido																						// no																						// período			sb.append("itensServico.cdItemServico ");// 9 - codigo item serviço			sb.append("FROM (SELECT ");			sb.append("itse.itse_id AS idItemServico, ");			sb.append("itse.itse_dsitemservico AS descricaoServico, ");			sb.append("itsc.itsc_qtorcadaitemservico AS quantidadeOrcada, ");			sb.append("1 AS quantidade, ");			sb.append("itsc.itsc_vlitemservcontr AS valorUnitario, ");			sb.append("(CASE WHEN itse.itse_cdconstantecalculo IN (3, 7, 9, 11, 13, 4, 8, 10, 12, 14) THEN 'UND' ");			sb.append("WHEN itse.itse_cdconstantecalculo IN (15, 16, 17) THEN 'M2' ");			sb.append("ELSE '' END) AS unidadeItem, ");			sb.append("itsc.itsc_vlorcadoitemservico AS valorOrcado, ");			sb.append("cbex.cbex_vlservico AS valorMedidoPeriodo, ");			sb.append("itse.itse_cdconstantecalculo AS cdItemServico ");			sb.append("FROM cobranca.cobr_boletim_exec cbex ");			sb.append("INNER JOIN cobranca.cobr_boletim_medicao cobm ON (cbex.cobm_id = cobm.cobm_id AND cobm.cobm_amreferencia = :amReferencia) ");			sb.append("INNER JOIN micromedicao.contrato_empresa_servico cese ON (cobm.cese_id = cese.cese_id AND cese.cese_id = :idContrato) ");			sb.append("INNER JOIN atendimentopublico.ordem_servico orse ON (cbex.orse_id = orse.orse_id) ");			sb.append("INNER JOIN micromedicao.item_servico_contrato itsc ON (cese.cese_id = itsc.cese_id AND orse.svtp_id = itsc.svtp_id) ");			sb.append("INNER JOIN micromedicao.item_servico itse ON (itsc.itse_id = itse.itse_id) ");			sb.append("LEFT OUTER JOIN atendimentopublico.ordem_servico_boletim orbo ON (cbex.orse_id = orbo.orse_id) ");			sb.append("WHERE (itse.itse_cdconstantecalculo IN (2,6) AND orbo.orbo_icpavimento = 3) ");			sb.append("OR (itse.itse_cdconstantecalculo IN (3,7,9,11,13) AND orbo.orbo_icpavimento = 2) ");			sb.append("OR (itse.itse_cdconstantecalculo IN (4,8,10,12,14) AND orbo.orbo_icpavimento = 1) ");			sb.append("OR (itse.itse_cdconstantecalculo IN (1,5) OR itse.itse_cdconstantecalculo > 14) ");			sb.append("ORDER BY idItemServico) itensServico ");			sb.append("GROUP BY idItemServico, cdItemServico, descricaoServico, quantidadeOrcada, valorUnitario, unidadeItem, valorOrcado ");			sb.append("ORDER BY idItemServico ");			SQLQuery sqlQuery = session.createSQLQuery(sb.toString());			sqlQuery = sqlQuery.addScalar("idItemServico", Hibernate.INTEGER)					.addScalar("descricaoServico", Hibernate.STRING)					.addScalar("quantidadeOrcada", Hibernate.BIG_DECIMAL)					.addScalar("valorUnitario", Hibernate.BIG_DECIMAL)					.addScalar("quantidadeItem", Hibernate.INTEGER)					.addScalar("valorItem", Hibernate.BIG_DECIMAL)					.addScalar("unidadeItem", Hibernate.STRING)					.addScalar("valorOrcado", Hibernate.BIG_DECIMAL)					.addScalar("valorMedidoPeriodo", Hibernate.BIG_DECIMAL)					.addScalar("cdItemServico", Hibernate.INTEGER);			sqlQuery.setInteger("idContrato",					filtro.getIdContratoEmpresaServico());			sqlQuery.setInteger("amReferencia", filtro.getMesAnoReferencia());			relatorios = sqlQuery.list();		} catch (HibernateException e) {			throw new ErroRepositorioException(e, "Erro no Hibernate");		} finally {			HibernateUtil.closeSession(session);		}		return relatorios;	}	/**	 * [UC1178] Gerar Relatório de Acompanhamento dos Boletins de Medição	 * 	 * Método que vai retornar as quantidades acumuladas e os valores acumulados	 * no período para geração do relatório de acompanhamento do boletim de	 * medição.	 * 	 * @author Diogo Peixoto	 * @date 01/08/2011	 * 	 * @param FiltrarRelatorioAcompanhamentoBoletimMedicaoHelper	 * @param relatorioDefinitivo	 * @return Collection<Object[]>	 * @throws ErroRepositorioException	 */	public Collection<Object[]> filtrarRelatorioAcompanhamentoBoletimMedicaoAcumuladas(			FiltrarRelatorioAcompanhamentoBoletimMedicaoHelper filtro)			throws ErroRepositorioException {		Collection<Object[]> relatorios = new ArrayList<Object[]>();		Session session = HibernateUtil.getSession();		StringBuilder sb = new StringBuilder();		try {			sb.append("SELECT itensServico.idItemServico, ");// 0 - ID Item																// Serviço			sb.append("itensServico.descricaoServico, ");// 1 - Descrição Item															// Serviço			sb.append("sum(itensServico.quantidade) as quantidadeAcumuladaPeriodo, ");// 2																						// -																						// Quantidade																						// Acumulada																						// Período			sb.append("sum(itensServico.valorMedidoPeriodo) AS valorAcumuladoPeriodo ");// 3																						// -																						// Valor																						// Acumulado																						// Período			sb.append("FROM (SELECT ");			sb.append("itse.itse_id AS idItemServico, ");			sb.append("itse.itse_dsitemservico AS descricaoServico, ");			sb.append("1 AS quantidade, ");			sb.append("cbex.cbex_vlservico AS valorMedidoPeriodo ");			sb.append("FROM cobranca.cobr_boletim_exec cbex ");			sb.append("INNER JOIN cobranca.cobr_boletim_medicao cobm ON (cbex.cobm_id = cobm.cobm_id) ");			sb.append("INNER JOIN micromedicao.contrato_empresa_servico cese ON (cobm.cese_id = cese.cese_id AND cese.cese_id = :idContrato) ");			sb.append("INNER JOIN atendimentopublico.ordem_servico orse ON (cbex.orse_id = orse.orse_id) ");			sb.append("INNER JOIN micromedicao.item_servico_contrato itsc ON (cese.cese_id = itsc.cese_id AND orse.svtp_id = itsc.svtp_id) ");			sb.append("INNER JOIN micromedicao.item_servico itse ON (itsc.itse_id = itse.itse_id) ");			sb.append("LEFT OUTER JOIN atendimentopublico.ordem_servico_boletim orbo ON (cbex.orse_id = orbo.orse_id) ");			sb.append("WHERE (itse.itse_cdconstantecalculo IN (2,6) AND orbo.orbo_icpavimento = 3) ");			sb.append("OR (itse.itse_cdconstantecalculo IN (3,7,9,11,13) AND orbo.orbo_icpavimento = 2) ");			sb.append("OR (itse.itse_cdconstantecalculo IN (4,8,10,12,14) AND orbo.orbo_icpavimento = 1) ");			sb.append("OR (itse.itse_cdconstantecalculo IN (1,5) OR itse.itse_cdconstantecalculo > 14) ");			sb.append("ORDER BY idItemServico) itensServico ");			sb.append("GROUP BY idItemServico, descricaoServico ");			sb.append("ORDER BY idItemServico ");			SQLQuery sqlQuery = session.createSQLQuery(sb.toString());			sqlQuery = sqlQuery.addScalar("idItemServico", Hibernate.INTEGER)					.addScalar("descricaoServico", Hibernate.STRING)					.addScalar("quantidadeAcumuladaPeriodo", Hibernate.INTEGER)					.addScalar("valorAcumuladoPeriodo", Hibernate.BIG_DECIMAL);			sqlQuery.setInteger("idContrato",					filtro.getIdContratoEmpresaServico());			relatorios = sqlQuery.list();		} catch (HibernateException e) {			throw new ErroRepositorioException(e, "Erro no Hibernate");		} finally {			HibernateUtil.closeSession(session);		}		return relatorios;	}	/**	 * [UC1178] Gerar Relatório de Acompanhamento dos Boletins de Medição	 * 	 * @author Diogo Peixoto	 * @date 01/08/2011	 * 	 * @param FiltrarRelatorioAcompanhamentoBoletimMedicaoHelper	 * 	 * @return Collection<BigDecimal>	 * @throws ErroRepositorioException	 */	public Collection<BigDecimal> filtrarRelatorioAcompanhamentoBoletimMedicaoPenalidades(			FiltrarRelatorioAcompanhamentoBoletimMedicaoHelper filtro,			boolean relatorioDefinitivo) throws ErroRepositorioException {		Collection<BigDecimal> relatorios = null;		try {			relatorios = this					.filtrarRelatorioAcompanhamentoBoletimMedicaoPenalidadesOSFiscalizacao(filtro);			if (relatorioDefinitivo) {				relatorios						.addAll(this								.filtrarRelatorioAcompanhamentoBoletimMedicaoPenalidadesCorteSupressaoNaoRealizacaoServico(filtro));			}		} catch (HibernateException e) {			throw new ErroRepositorioException(e, "Erro no Hibernate");		}		return relatorios;	}	/*	 * [UC1178] Gerar Relatório de Acompanhamento dos Boletins de Medição	 * 	 * Método auxiliar que vai retornar as penalidades de ordem de serviço e as	 * penalidades de fiscalização.	 * 	 * @author Diogo Peixoto	 * 	 * @date 01/08/2011	 * 	 * @param FiltrarRelatorioAcompanhamentoBoletimMedicaoHelper	 * 	 * @return Collection<BigDecimal>	 * 	 * @throws ErroRepositorioException	 */	private Collection<BigDecimal> filtrarRelatorioAcompanhamentoBoletimMedicaoPenalidadesOSFiscalizacao(			FiltrarRelatorioAcompanhamentoBoletimMedicaoHelper filtro)			throws ErroRepositorioException {		Collection<Object[]> relatorios = new ArrayList<Object[]>();		Collection<BigDecimal> retorno = new ArrayList<BigDecimal>();		Session session = HibernateUtil.getSession();		StringBuilder sb = new StringBuilder();		try {			sb.append("SELECT ");			sb.append("SUM((SELECT cbde.cbde_vldesconto ");			sb.append("FROM atendimentopublico.ordem_servico orse ");			sb.append("WHERE orse.orse_id = cbde.orse_id AND orse.amen_id = 32)) AS penalidadeOS, ");// 0																										// -																										// Penalidade																										// OS			sb.append("SUM((SELECT cbde.cbde_vldesconto ");			sb.append("FROM atendimentopublico.ordem_servico orse ");			sb.append("WHERE orse.orse_id = cbde.orse_id AND orse.amen_id != 32)) AS penalidadeFiscalizacao ");// 0																												// -																												// Penalidade																												// Fiscalização			sb.append("FROM cobranca.COBR_BOLETIM_DESC cbde ");			sb.append("INNER JOIN cobranca.cobr_boletim_medicao cobm on (cbde.cobm_id = cobm.cobm_id and cobm.cobm_amreferencia = :amReferencia) ");			sb.append("INNER JOIN micromedicao.CONTRATO_EMPRESA_SERVICO cese on (cobm.cese_id = cese.cese_id and cese.cese_id = :idContrato) ");			SQLQuery sqlQuery = session.createSQLQuery(sb.toString());			sqlQuery = sqlQuery					.addScalar("penalidadeOS", Hibernate.BIG_DECIMAL)					.addScalar("penalidadeFiscalizacao", Hibernate.BIG_DECIMAL);			sqlQuery.setInteger("idContrato",					filtro.getIdContratoEmpresaServico());			sqlQuery.setInteger("amReferencia", filtro.getMesAnoReferencia());			relatorios = sqlQuery.list();			Object[] penalidades = relatorios.iterator().next();			BigDecimal penalidadeOS = new BigDecimal("0.00");			if (penalidades[0] != null) {				penalidadeOS = (BigDecimal) penalidades[0];			}			BigDecimal penalidadeFiscalizacao = new BigDecimal("0.00");			if (penalidades[1] != null) {				penalidadeFiscalizacao = (BigDecimal) penalidades[1];			}			retorno.add(penalidadeOS);			retorno.add(penalidadeFiscalizacao);		} catch (HibernateException e) {			throw new ErroRepositorioException(e, "Erro no Hibernate");		} finally {			HibernateUtil.closeSession(session);		}		return retorno;	}	/*	 * [UC1178] Gerar Relatório de Acompanhamento dos Boletins de Medição	 * 	 * Método auxiliar que vai retornar as penalidades de ordem de serviço e as	 * penalidades de fiscalização.	 * 	 * @author Diogo Peixoto	 * 	 * @date 01/08/2011	 * 	 * @param FiltrarRelatorioAcompanhamentoBoletimMedicaoHelper	 * 	 * @return Collection<BigDecimal>	 * 	 * @throws ErroRepositorioException	 */	private Collection<BigDecimal> filtrarRelatorioAcompanhamentoBoletimMedicaoPenalidadesCorteSupressaoNaoRealizacaoServico(			FiltrarRelatorioAcompanhamentoBoletimMedicaoHelper filtro)			throws ErroRepositorioException {		Collection<Object[]> relatorios = new ArrayList<Object[]>();		Collection<BigDecimal> retorno = new ArrayList<BigDecimal>();		Session session = HibernateUtil.getSession();		StringBuilder sb = new StringBuilder();		try {			sb.append("SELECT ");			sb.append("SUM((SELECT (cbex.cbex_vlservico) * 2 ");			sb.append("FROM cobranca.motivo_nao_aceit_enc_os mnac ");			sb.append("WHERE caon.mnac_id = mnac.mnac_id and mnac.mnac_nnmultdesccortesupindev IS NOT NULL)) AS penalidadeCorteSupressao, ");			sb.append("SUM((SELECT (cbex.cbex_vlservico) * 2 ");			sb.append("FROM cobranca.motivo_nao_aceit_enc_os mnac ");			sb.append("WHERE caon.mnac_id = mnac.mnac_id and mnac.mnac_nnmultdescservnaoexec IS NOT NULL)) AS penalidadeNaoRealizacaoServico ");			sb.append("FROM cobranca.cobr_boletim_exec cbex ");			sb.append("INNER JOIN cobranca.cobr_boletim_medicao cobm on (cbex.cobm_id = cobm.cobm_id and cobm.cobm_amreferencia = :amReferencia) ");			sb.append("INNER JOIN micromedicao.contrato_empresa_servico cese on (cobm.cese_id = cese.cese_id and cese.cese_id = :idContrato) ");			sb.append("INNER JOIN cobranca.cob_ac_os_nao_aceitas caon on (cbex.orse_id = caon.orse_id) ");			SQLQuery sqlQuery = session.createSQLQuery(sb.toString());			sqlQuery = sqlQuery.addScalar("penalidadeCorteSupressao",					Hibernate.BIG_DECIMAL).addScalar(					"penalidadeNaoRealizacaoServico", Hibernate.BIG_DECIMAL);			sqlQuery.setInteger("idContrato",					filtro.getIdContratoEmpresaServico());			sqlQuery.setInteger("amReferencia", filtro.getMesAnoReferencia());			relatorios = sqlQuery.list();			Object[] penalidades = relatorios.iterator().next();			BigDecimal penalidadeCorteSupressao = new BigDecimal("0.00");			if (penalidades[0] != null) {				penalidadeCorteSupressao = (BigDecimal) penalidades[0];			}			BigDecimal penalidadeNaoRealizacaoServicos = new BigDecimal("0.00");			if (penalidades[1] != null) {				penalidadeNaoRealizacaoServicos = (BigDecimal) penalidades[1];			}			retorno.add(penalidadeCorteSupressao);			retorno.add(penalidadeNaoRealizacaoServicos);		} catch (HibernateException e) {			throw new ErroRepositorioException(e, "Erro no Hibernate");		} finally {			HibernateUtil.closeSession(session);		}		return retorno;	}	/**	 * [UC1178] Gerar Relatório de Acompanhamento dos Boletins de Medição	 * 	 * @author Diogo Peixoto	 * @date 28/07/2011	 * 	 * @param FiltrarRelatorioAcompanhamentoBoletimMedicaoHelper	 * @param relatorioDefinitivo	 * @return Quantidade de OS Executadas para determinado boletim de medição	 * @throws ErroRepositorioException	 */	public Integer pesquisarQuantidadeOSExecutadas(			FiltrarRelatorioAcompanhamentoBoletimMedicaoHelper filtro)			throws ErroRepositorioException {		Session session = HibernateUtil.getSession();		StringBuilder sb = new StringBuilder();		Integer qtdeOSExecutadas = 0;		try {			sb.append("SELECT COUNT(execu.orse_id) AS quantidade ");			sb.append("FROM cobranca.cobr_boletim_exec execu ");			sb.append("INNER JOIN cobranca.cobr_boletim_medicao med ON execu.cobm_id = med.cobm_id AND med.cobm_amreferencia = :amReferencia ");			sb.append("AND med.cese_id = :idContrato ");			String consulta = sb.toString();			SQLQuery sqlQuery = session.createSQLQuery(consulta);			sqlQuery = sqlQuery.addScalar("quantidade", Hibernate.INTEGER);			sqlQuery.setInteger("idContrato",					filtro.getIdContratoEmpresaServico());			sqlQuery.setInteger("amReferencia", filtro.getMesAnoReferencia());			qtdeOSExecutadas = (Integer) sqlQuery.uniqueResult();		} catch (HibernateException e) {			throw new ErroRepositorioException(e, "Erro no Hibernate");		} finally {			HibernateUtil.closeSession(session);		}		return qtdeOSExecutadas;	}	/**	 * [UC1178] Gerar Relatório de Acompanhamento dos Boletins de Medição	 * 	 * @author Diogo Peixoto	 * @date 28/07/2011	 * 	 * @param FiltrarRelatorioAcompanhamentoBoletimMedicaoHelper	 * @param relatorioDefinitivo	 * @return Quantidade de OS Penalizadas para determinado boletim de medição	 * @throws ErroRepositorioException	 */	public Integer pesquisarQuantidadeOSPenalizadas(			FiltrarRelatorioAcompanhamentoBoletimMedicaoHelper filtro)			throws ErroRepositorioException {		Session session = HibernateUtil.getSession();		StringBuilder sb = new StringBuilder();		Integer qtdeOSPenalizadas = 0;		try {			sb.append("SELECT COUNT(desco.orse_id) AS quantidade ");			sb.append("FROM cobranca.cobr_boletim_desc desco ");			sb.append("INNER JOIN cobranca.cobr_boletim_medicao med ON med.cobm_id = desco.cobm_id AND med.cobm_amreferencia = :amReferencia ");			sb.append("AND med.cese_id = :idContrato ");			String consulta = sb.toString();			SQLQuery sqlQuery = session.createSQLQuery(consulta);			sqlQuery = sqlQuery.addScalar("quantidade", Hibernate.INTEGER);			sqlQuery.setInteger("idContrato",					filtro.getIdContratoEmpresaServico());			sqlQuery.setInteger("amReferencia", filtro.getMesAnoReferencia());			qtdeOSPenalizadas = (Integer) sqlQuery.uniqueResult();		} catch (HibernateException e) {			throw new ErroRepositorioException(e, "Erro no Hibernate");		} finally {			HibernateUtil.closeSession(session);		}		return qtdeOSPenalizadas;	}	/**	 * [UC1178] Gerar Relatório de Acompanhamento dos Boletins de Medição	 * 	 * @author Diogo Peixoto	 * @date 01/08/2011	 * 	 * @param FiltrarRelatorioAcompanhamentoBoletimMedicaoHelper	 * @return Taxa de Sucesso do Boletim de Medição	 * 	 * @throws ErroRepositorioException	 */	public BigDecimal pesquisarTaxaSucessoBoletimMedicao(			FiltrarRelatorioAcompanhamentoBoletimMedicaoHelper filtro)			throws ErroRepositorioException {		Session session = HibernateUtil.getSession();		StringBuilder sb = new StringBuilder();		BigDecimal taxaSucesso = new BigDecimal("0.00");		try {			sb.append("SELECT sum(cbsu.CBSU_VLTXSUCESSO) AS taxaSucesso ");			sb.append("FROM cobranca.COBR_BOLETIM_SUCESSO cbsu ");			sb.append("INNER JOIN cobranca.cobr_boletim_medicao cobm on (cbsu.cobm_id = cobm.cobm_id and cobm.cobm_amreferencia = :amReferencia) ");			sb.append("INNER JOIN micromedicao.contrato_empresa_servico cese on (cobm.cese_id = cese.cese_id and cese.cese_id = :idContrato) ");			String consulta = sb.toString();			SQLQuery sqlQuery = session.createSQLQuery(consulta);			sqlQuery = sqlQuery.addScalar("taxaSucesso", Hibernate.BIG_DECIMAL);			sqlQuery.setInteger("amReferencia", filtro.getMesAnoReferencia());			sqlQuery.setInteger("idContrato",					filtro.getIdContratoEmpresaServico());			taxaSucesso = (BigDecimal) sqlQuery.uniqueResult();		} catch (HibernateException e) {			throw new ErroRepositorioException(e, "Erro no Hibernate");		} finally {			HibernateUtil.closeSession(session);		}		return taxaSucesso;	}	public boolean gruposIniciaodsJaForamEncerrados(			FiltrarRelatorioAcompanhamentoBoletimMedicaoHelper filtro)			throws ErroRepositorioException {		Session sessao = HibernateUtil.getSession();		boolean encerrado = true;		StringBuilder sb = new StringBuilder();		sb.append("SELECT acao.caac_tmrealizacao AS dataRealizacao ");		sb.append("FROM cobranca.cobranca_acao_ativ_crg acao ");		sb.append("INNER JOIN cobranca.cobranca_acao_cronograma cron ON cron.cbcr_id = acao.cbcr_id ");		sb.append("INNER JOIN cobranca.cobranca_grupo_crg_mes mes ON mes.cbcm_id = cron.cbcm_id AND mes.cbcm_amreferencia = :amReferencia ");		sb.append("INNER JOIN cobranca.cobranca_grupo grupo ON grupo.cbgr_id = mes.cbgr_id ");		sb.append("INNER JOIN micromedicao.contrato_empresa_servico cont ON cont.cese_id = grupo.cese_id AND grupo.cese_id = :numeroContrato");		SQLQuery query = sessao.createSQLQuery(sb.toString());		query.setInteger("amReferencia", filtro.getMesAnoReferencia());		query.setInteger("numeroContrato", filtro.getIdContratoEmpresaServico());		query.addScalar("dataRealizacao", Hibernate.DATE);		List<Date> retorno = (List<Date>) query.list();		/*		 * Verifica se existe alguma data igual a NULL, se existe é porque os		 * grupos iniciados não foram executados.		 */		for (Date date : retorno) {			if (date == null) {				encerrado = false;				break;			}		}		return encerrado;	}	/**	 * [UC1186] Gerar Relatório Ordem de Serviço Cobrança p/Resultado	 * 	 * Pesquisar as Ordens de serviços a partir de seu imóvel e tipo de serviço	 * 	 * @author Hugo Azevedo	 * @data 02/07/2011	 */	public Collection obterOSImovelTipoServico(Integer id, Integer tipoServico)			throws ErroRepositorioException {		Session session = HibernateUtil.getSession();		Collection<OrdemServico> retorno = new ArrayList();		try {			Criteria crit = session.createCriteria(OrdemServico.class);			crit.setFetchMode("imovel", FetchMode.JOIN);			crit.setFetchMode("servicoTipo", FetchMode.JOIN);			crit.setFetchMode("atendimentoMotivoEncerramento", FetchMode.JOIN);			crit.add(Restrictions.eq("imovel.id", id));			if (tipoServico != null && tipoServico.intValue() != -1) {				crit.add(Restrictions.eq("servicoTipo.id",						tipoServico.intValue()));			}			retorno = (Collection<OrdemServico>) crit.list();		} catch (HibernateException e) {			throw new ErroRepositorioException(e, "Erro no Hibernate");		} finally {			HibernateUtil.closeSession(session);		}		return retorno;	}	/**	 * 	 * [UC1186] Gerar Relatório Ordem de Serviço Cobrança p/Resultado	 * 	 * Obtém a quantida de OS a partir dos parâmetros passados pela	 * funcionalidade de Acompanhamento de Cobrança por Resultado.	 * 	 * @author Hugo Azevedo	 * @date 27/06/2011	 * 	 * @throws ErroRepositorioException	 */	public Collection obterTotalOSColecaoImovelTipoServico(			Collection colecaoImovel, Integer tipoServico)			throws ErroRepositorioException {		Session sessao = HibernateUtil.getSession();		String consulta = "";		Collection retorno = null;		consulta = "select count(os.id) " + "from OrdemServico os "				+ "inner join os.imovel imo " + "inner join os.servicoTipo st "				+ "where imo.id in ( :colecaoImovel ) ";		if (tipoServico != null && tipoServico.intValue() != -1)			consulta += "and st.id = :tipoServico";		try {			Query query = sessao.createQuery(consulta);			query.setParameterList("colecaoImovel", colecaoImovel);			if (tipoServico != null && tipoServico.intValue() != -1)				query.setInteger("tipoServico", tipoServico);			retorno = query.list();		} catch (HibernateException e) {			throw new ErroRepositorioException(e, "Erro no Hibernate");		} finally {			HibernateUtil.closeSession(sessao);		}		return retorno;	}	/**	 * [UC1189] Inserir Registro de Atendimento Loja Virtual	 * 	 * @author Magno Gouveia	 * @date 12/07/2011	 * 	 * @return	 * @throws ErroRepositorioException	 */	public Collection<Object[]> pesquisarSolicitacaoTipoLojaVirtual()			throws ErroRepositorioException {		Session sessao = HibernateUtil.getSession();		Collection<Object[]> retorno = null;		String consulta = "SELECT "				+ " DISTINCT(sotp.sotp_id) AS idSolicitacao, sotp.sotp_dssolicitacaotipo AS descricao, sotp.sotp_icralojavirtsemmatricula as indicadorRA "				+ " FROM atendimentopublico.solicitacao_tipo sotp "				+ " INNER JOIN atendimentopublico.solicitacao_tipo_espec step ON step.sotp_id = sotp.sotp_id "				+ " WHERE step.step_icuso = 1 "				+ " 	AND step.step_iclojavirtual = 1 "				+ " ORDER BY sotp.sotp_dssolicitacaotipo";		try {			retorno = sessao.createSQLQuery(consulta)					.addScalar("idSolicitacao", Hibernate.SHORT)					.addScalar("descricao", Hibernate.STRING)					.addScalar("indicadorRA", Hibernate.SHORT).list();		} catch (HibernateException e) {			throw new ErroRepositorioException(e, "Erro no Hibernate");		} finally {			HibernateUtil.closeSession(sessao);		}		return retorno;	}	/**	 * [UC1196] Exibir Lojas de Atendimento na Loja Virtual [SB0001] Selecionar	 * Municípios da Região	 * 	 * @author Magno Gouveia	 * @date 14/07/2011	 * 	 * @return colecaoDeMunicipios	 * @throws ErroRepositorioException	 */	public Collection<Object[]> pesquisarMunicipiosLojaVirtualCompesa()			throws ErroRepositorioException {		Session sessao = HibernateUtil.getSession();		Collection<Object[]> retorno = null;		String consulta = "SELECT DISTINCT "				+ " m.mreg_id     	  AS microrregiao, "				+ " m.muni_id          AS idMunicipio, "				+ " m.muni_nmmunicipio AS municipio "				+ "	FROM cadastro.municipio m "				+ "	INNER JOIN cadastro.bairro b ON b.muni_id = m.muni_id "				+ "	INNER JOIN cadastro.loja_atendimento la ON la.bair_id = b.bair_id "				+ "	WHERE m.muni_icuso = 1 " + " ORDER BY m.muni_nmmunicipio";		try {			retorno = sessao.createSQLQuery(consulta)					.addScalar("microrregiao", Hibernate.INTEGER)					.addScalar("idMunicipio", Hibernate.INTEGER)					.addScalar("municipio", Hibernate.STRING).list();		} catch (HibernateException e) {			throw new ErroRepositorioException(e, "Erro no Hibernate");		} finally {			HibernateUtil.closeSession(sessao);		}		return retorno;	}	/**	 * [UC1196] Exibir Lojas de Atendimento na Loja Virtual [SB0002] Exibir	 * Dados da Loja	 * 	 * @author Magno Gouveia	 * @date 14/07/2011	 * 	 * @param id	 *            do município	 * @return colecaoDeLojasDeAtendimento	 * @throws ErroRepositorioException	 */	public Collection<Object[]> pesquisarLojasDeAtendimentoLojaVirtualCompesa(			Integer idMunicipio) throws ErroRepositorioException {		Session sessao = HibernateUtil.getSession();		Collection<Object[]> retorno = null;		String consulta = "SELECT la.loja_nmloja 	      AS nomeLoja, "				+ " l.logr_nmlogradouro         AS logradouro, "				+ " la.loja_nnimovel            AS numero, "				+ " m.muni_nmmunicipio          AS municipio, "				+ " b.bair_nmbairro             AS bairro, "				+ " la.loja_dspontorefencia     AS pontoReferencia, "				+ " la.loja_cdddd            	  AS ddd, "				+ " la.loja_nnfone           	  AS fone, "				+ " la.loja_nnfonefax        	  AS fax, "				+ " la.loja_dsemail          	  AS email, "				+ " la.loja_imloja           	  AS imagem, "				+ " lt.lgtp_dslogradourotipo	  AS logradouroTipo, "				+ " ltl.lgtt_dslogradourotitulo AS logradouroTitulo "				+ " FROM cadastro.loja_atendimento la "				+ " INNER JOIN cadastro.bairro b ON b.bair_id      		      = la.bair_id "				+ " INNER JOIN cadastro.logradouro l ON l.logr_id  		  	  = la.logr_id "				+ " INNER JOIN cadastro.logradouro_tipo lt ON lt.lgtp_id  	  = l.lgtp_id "				+ " LEFT JOIN cadastro.logradouro_titulo ltl ON ltl.lgtt_id  = l.lgtt_id "				+ " INNER JOIN cadastro.municipio m ON m.muni_id   		  	  = b.muni_id "				+ " WHERE m.muni_icuso = 1 " + " AND b.bair_icuso = 1 "				+ " AND l.logr_icuso = 1 "				+ " AND m.muni_id    = :idMunicipio "				+ " ORDER BY la.loja_nmloja";		try {			retorno = sessao.createSQLQuery(consulta)					.addScalar("nomeLoja", Hibernate.STRING)					.addScalar("logradouro", Hibernate.STRING)					.addScalar("numero", Hibernate.STRING)					.addScalar("municipio", Hibernate.STRING)					.addScalar("bairro", Hibernate.STRING)					.addScalar("pontoReferencia", Hibernate.STRING)					.addScalar("ddd", Hibernate.STRING)					.addScalar("fone", Hibernate.STRING)					.addScalar("fax", Hibernate.STRING)					.addScalar("email", Hibernate.STRING)					.addScalar("imagem", Hibernate.BLOB)					.addScalar("logradouroTipo", Hibernate.STRING)					.addScalar("logradouroTitulo", Hibernate.STRING)					.setInteger("idMunicipio", idMunicipio).list();		} catch (HibernateException e) {			throw new ErroRepositorioException(e, "Erro no Hibernate");		} finally {			HibernateUtil.closeSession(sessao);		}		return retorno;	}	public Collection obterColecaoOSFiscalizacaoNaoExecutadas()			throws ErroRepositorioException {		Session sessao = HibernateUtil.getSession();		String consulta = "";		Collection retorno = new ArrayList();		try {			consulta = " select os.orse_id,"					+ " os.orse_tmgeracao "					+ " from atendimentopublico.ordem_servico os"					+ " inner join atendimentopublico.servico_tipo st on os.svtp_id = st.svtp_id"					+ " inner join atendimentopublico.servico_tipo_referencia str on st.strf_id = str.strf_id"					+ " where os.orse_tmencerramento is null"					+ " and os.orse_idreferencia is not null"					+ " and str.strf_icfiscalizacao = :idFiscalizacao";			Query query = sessao					.createSQLQuery(consulta)					.addScalar("orse_id", Hibernate.INTEGER)					.addScalar("orse_tmgeracao", Hibernate.DATE)					.setInteger("idFiscalizacao",							ConstantesSistema.INDICADOR_USO_ATIVO);			retorno = query.list();		} catch (HibernateException e) {			throw new ErroRepositorioException(e, "Erro no Hibernate");		} finally {			HibernateUtil.closeSession(sessao);		}		return retorno;	}	/**	 * [UC1199]  Acompanhar Arquivos de Roteiro [SB0003]  Pesquisar Fotos da	 * OS	 * 	 * Método que vai retornar as fotos de uma determinada ordem de serviço	 * passada no parâmetro.	 * 	 * @author Diogo Peixoto	 * @date 12/08/2011	 * 	 * @param Integer	 *            - ID da Ordem de Serviço	 * 	 * @return Collection<Object[]> - Coleção das Fotos da OS	 * @throws ErroRepositorioException	 */	public Collection<Object[]> pesquisarFotosOrdemServico(Integer idOS)			throws ErroRepositorioException {		Session sessao = HibernateUtil.getSession();		Collection<Object[]> retorno = null;		StringBuilder sb = new StringBuilder();		sb.append("SELECT ");		sb.append("osFoto.osft_id AS id, ");// 0 - ID Ordem Serviço Foto		sb.append("osFoto.orse_id AS idOS, ");// 1 - ID Ordem Serviço		sb.append("osFoto.osft_dsfoto AS descricaoFoto, ");// 2 - Descrição Foto		sb.append("osFoto.osft_imfoto AS foto ");// 3 - Foto		sb.append("FROM ");		sb.append("atendimentopublico.ordem_servico_foto osFoto ");		sb.append("INNER JOIN atendimentopublico.ordem_servico orse ON orse.orse_id = osFoto.orse_id AND orse.orse_id = :idOS ");		sb.append("ORDER BY idOS,osFoto.fsos_id  ");		try {			Query query = sessao.createSQLQuery(sb.toString())					.addScalar("id", Hibernate.INTEGER)					.addScalar("idOS", Hibernate.INTEGER)					.addScalar("descricaoFoto", Hibernate.STRING)					.addScalar("foto", Hibernate.BINARY)					.setInteger("idOS", idOS);			retorno = query.list();		} catch (HibernateException e) {			throw new ErroRepositorioException(e, "Erro no Hibernate");		} finally {			HibernateUtil.closeSession(sessao);		}		return retorno;	}	/**	 * [UC1199]  Acompanhar Arquivos de Roteiro [SB0003]  Pesquisar Fotos da	 * OS	 * 	 * Método que vai retornar as fotos de uma determinada ordem de serviço	 * passada no parâmetro.	 * 	 * @author Diogo Peixoto	 * @date 12/08/2011	 * 	 * @param Integer	 *            - ID da Foto da Ordem de Serviço	 * 	 * @return Collection<Object[]> - Foto da Ordem de Serviço	 * @throws ErroRepositorioException	 */	public Collection<Object[]> pesquisarFotosOrdemServicoPorIdFoto(			Integer idFoto) throws ErroRepositorioException {		Session sessao = HibernateUtil.getSession();		Collection<Object[]> retorno = null;		StringBuilder sb = new StringBuilder();		sb.append("SELECT ");		sb.append("osFoto.osft_id AS id, ");// 0 - ID Ordem Serviço Foto		sb.append("osFoto.orse_id AS idOS, ");// 1 - ID Ordem Serviço		sb.append("osFoto.osft_dsfoto AS descricaoFoto, ");// 2 - Descrição Foto		sb.append("osFoto.osft_imfoto AS foto ");// 3 - Foto		sb.append("FROM ");		sb.append("atendimentopublico.ordem_servico_foto osFoto ");		sb.append("INNER JOIN atendimentopublico.ordem_servico orse ON orse.orse_id = osFoto.orse_id ");		sb.append("WHERE osFoto.osft_id = :idFoto ");		try {			Query query = sessao.createSQLQuery(sb.toString())					.addScalar("id", Hibernate.INTEGER)					.addScalar("idOS", Hibernate.INTEGER)					.addScalar("descricaoFoto", Hibernate.STRING)					.addScalar("foto", Hibernate.BINARY)					.setInteger("idFoto", idFoto);			retorno = query.list();		} catch (HibernateException e) {			throw new ErroRepositorioException(e, "Erro no Hibernate");		} finally {			HibernateUtil.closeSession(sessao);		}		return retorno;	}	/**	 * Método que pesquisa as ordens seletivas para um determinado comando	 * 	 * [UC 1220] Gerar Arquivo Texto para as Os de Visita [SB 0001] Consultar	 * Ordem de Serviço Seletiva	 * 	 * @author Raimundo Martins	 * @date 15/09/2011	 * 	 * @return coleção das ordens de serviços selecionadas	 */	public Collection<Object[]> consultarOrdemServicoSeletiva(			String comOrdemSeletiva, String local, String setorInicial,			String setorFinal, String quadraIni, String quadraFin)			throws ErroRepositorioException {		Session session = HibernateUtil.getSession();		Collection<Object[]> retorno = null;		String hql = "SELECT orse.orse_id AS osId, "				+ "orse.coss_id AS comandoId, "				+ "  imov.loca_id               AS localidade, "				+ "  stcm.stcm_cdsetorcomercial AS setorComercial, "				+ "  qdra.qdra_nnquadra         AS quadra, "				+ "  imov.imov_nnlote           AS lote, "				+ "  imov.imov_nnsublote        AS sublote "				+ "FROM ATENDIMENTOPUBLICO.ordem_servico orse "				+ "INNER JOIN CADASTRO.imovel imov "				+ "ON orse.imov_id = imov.imov_id "				+ "INNER JOIN CADASTRO.setor_comercial stcm "				+ "ON imov.stcm_id = stcm.stcm_id "				+ "INNER JOIN CADASTRO.quadra qdra "				+ "ON qdra.qdra_id     = imov.qdra_id "				+ "WHERE orse.coss_id IS NOT NULL "				+ "AND orse.coss_id    = :comandoCod "				+ "AND orse.orse_cdsituacao = :situacao "				+ "AND orse.svtp_id = :servicoTipo "				+ "AND  not exists (select orse_id "				+ "from ATENDIMENTOPUBLICO.arq_txt_ret_visita_campo arq "				+ "where orse.orse_id = arq.orse_id)";		if (local != null && !local.trim().equals("")) {			hql += " AND imov.loca_id    = :localidadeCod ";		}		if ((setorInicial != null && !setorInicial.trim().equals(""))				&& setorInicial.equals(setorFinal)) {			hql += " AND stcm.stcm_cdsetorcomercial = :setorComercialCod ";		}		else if (setorInicial != null && setorFinal != null				&& !setorInicial.trim().equals("")				&& !setorFinal.trim().equals("")) {			hql += " AND stcm.stcm_cdsetorcomercial BETWEEN :setorComercialInicial AND :setorComercialFinal ";		}		if (quadraIni != null && quadraFin != null				&& !quadraIni.trim().equals("") && !quadraFin.trim().equals("")) {			hql += " AND qdra.qdra_nnquadra BETWEEN :quadraInicial AND :quadraFinal ";		}		hql += " ORDER BY localidade, setorComercial, quadra, lote, sublote ";		try {			Query query = session.createSQLQuery(hql)					.addScalar("osId", Hibernate.INTEGER)					.addScalar("comandoId", Hibernate.INTEGER)					.addScalar("localidade", Hibernate.INTEGER)					.addScalar("setorComercial", Hibernate.INTEGER)					.addScalar("quadra", Hibernate.INTEGER)					.addScalar("lote", Hibernate.INTEGER)					.addScalar("sublote", Hibernate.INTEGER);			query.setInteger("comandoCod", Integer.parseInt(comOrdemSeletiva))					.setShort("situacao", OrdemServico.SITUACAO_PENDENTE)					.setInteger("servicoTipo",							ServicoTipo.TIPO_INSPECAO_ANORMALIDADE);			if (local != null && !local.trim().equals("")) {				query.setInteger("localidadeCod", Integer.parseInt(local));			}			if ((setorInicial != null && !setorInicial.trim().equals(""))					&& setorInicial.equals(setorFinal)) {				query.setInteger("setorComercialCod",						Integer.parseInt(setorInicial));			} else if (setorInicial != null && setorFinal != null					&& !setorInicial.trim().equals("")					&& !setorFinal.trim().equals("")) {				query.setInteger("setorComercialInicial",						Integer.parseInt(setorInicial));				query.setInteger("setorComercialFinal",						Integer.parseInt(setorFinal));			}			if (quadraIni != null && quadraFin != null					&& !quadraIni.trim().equals("")					&& !quadraFin.trim().equals("")) {				query.setInteger("quadraInicial", Integer.parseInt(quadraIni));				query.setInteger("quadraFinal", Integer.parseInt(quadraFin));			}			retorno = query.list();			return retorno;		} catch (HibernateException e) {			throw new ErroRepositorioException(e, "Erro no Hibernate");		} finally {			HibernateUtil.closeSession(session);		}	}	/**	 * Método que verifica a existência do arquivo texto para aquele comando,	 * localidade, setor comercial inicial, setor comercial final quadra inicial	 * e quadra final *	 * 	 * [UC 1220] Gerar Arquivo Texto para as Os de Visita [FS 0005] Geração do	 * Arquivo Texto	 * 	 * @author Raimundo Martins	 * @date 22/09/2011	 * 	 * @return true se tiver o arquivo, false senão	 */	public Boolean verificarExistenciaArquivoTextoVisitaCampo(			String comOrdemSeletiva, String local, String setorInicial,			String setorFinal, String quadraIni, String quadraFin)			throws ErroRepositorioException {		Session session = HibernateUtil.getSession();		Collection<Object[]> retorno = null;		String hql = " SELECT txvc.coss_id                 AS comando, "				+ "  txvc.loca_id                      AS localidade, "				+ "  txvc.txvc_cdsetorcomercialinicial AS setorInicial, "				+ "  txvc.txvc_cdsetorcomercialfinal   AS setorFinal, "				+ "  txvc.txvc_nnquqdrainicial         AS quadraInicial, "				+ "  txvc.txvc_nnquqdrafinal           AS quadraFinal "				+ "FROM ATENDIMENTOPUBLICO.arq_txt_visita_campo txvc "				+ "INNER JOIN MICROMEDICAO.situacao_transm_leitura sitl "				+ "ON sitl.sitl_id                       = txvc.sitl_id "				+ "WHERE txvc.coss_id                    = :comandoId "				+ "AND txvc.sitl_id                     != :situacaoLeitura ";		/*		 * "AND txvc.loca_id                      = :localidadeCod " +		 * "AND txvc.txvc_cdsetorcomercialinicial = :setorInicialCod " +		 * "AND txvc.txvc_cdsetorcomercialfinal   = :setorFinalCod " + ";		 */		/*		 * if(quadraIni !=null && quadraFin !=null &&		 * !quadraIni.trim().equals("") && !quadraFin.trim().equals("")){ hql		 * +=" AND txvc.txvc_nnquqdrainicial         = :quadraInicialCod "; hql		 * +=" AND txvc.txvc_nnquqdrafinal           = :quadraFinalCod "; }		 */		try {			Query query = session.createSQLQuery(hql)			.addScalar("comando", Hibernate.INTEGER)					.addScalar("localidade", Hibernate.INTEGER)					.addScalar("setorInicial", Hibernate.INTEGER)					.addScalar("setorFinal", Hibernate.INTEGER)					.addScalar("quadraInicial", Hibernate.INTEGER)					.addScalar("quadraFinal", Hibernate.INTEGER);			query.setInteger("comandoId", Integer.parseInt(comOrdemSeletiva));			query.setInteger("situacaoLeitura",					SituacaoTransmissaoLeitura.TRANSMITIDO);			/*			 * query.setInteger("localidadeCod", Integer.parseInt(local));			 * query.setInteger("setorInicialCod",			 * Integer.parseInt(setorInicial));			 * query.setInteger("setorFinalCod", Integer.parseInt(setorFinal));			 */			/*			 * if(quadraIni !=null && quadraFin !=null &&			 * !quadraIni.trim().equals("") && !quadraFin.trim().equals("")){			 * query.setInteger("quadraInicialCod",			 * Integer.parseInt(quadraIni)); query.setInteger("quadraFinalCod",			 * Integer.parseInt(quadraFin)); }			 */			retorno = query.list();			if (retorno != null && !retorno.isEmpty()) {				for (Object[] ob : retorno) {					/*					 * Valores retornados da consulta ao banco					 */					String localidade = ob[1].toString();					String setorIni = ob[2].toString();					String setorFin = ob[3].toString();					String qdrIni = null;					if (ob[4] != null) {						qdrIni = ob[4].toString();					}					String qdrFin = null;					if (ob[5] != null) {						qdrFin = ob[5].toString();					}					/*					 * Verifica se os valores informados são iguais aos valores					 * consultados					 */					if (localidade.equals(local)							&& setorIni.equals(setorInicial)							&& setorFin.equals(setorFinal)							&& qdrIni.equals(quadraIni)) {						return true;					}					/*					 * Caso os setores sejam iguais, verifica se as quadras					 * informadas estão contidas nas quadras consultadas					 */					else if (localidade.equals(local)							&& setorIni.equals(setorInicial)							&& setorFin.equals(setorFinal)) {						if (qdrIni != null && qdrFin != null								&& !qdrIni.trim().equals("")								&& !qdrFin.trim().equals("")) {							if (quadraIni != null && quadraFin != null									&& !quadraIni.trim().equals("")									&& !quadraFin.trim().equals("")) {								for (Integer i = Integer.parseInt(qdrIni); i <= Integer										.parseInt(qdrFin); i++) {									if (i.compareTo(Integer.parseInt(quadraIni)) >= 0											&& i.compareTo(Integer													.parseInt(quadraFin)) <= 0) {										return true;									}								}							}						}					}					/*					 * Caso os setores sejam diferentes, verifica se os setores					 * informados estão contidos nos setores consultados					 */					else {						if (localidade.equals(local)) {							for (Integer i = Integer.parseInt(setorIni); i <= Integer									.parseInt(setorFin); i++) {								if (i.compareTo(Integer.parseInt(setorInicial)) >= 0										&& i.compareTo(Integer												.parseInt(setorFinal)) <= 0) {									return true;								}							}						}					}				}				return false;			}			return false;		} catch (HibernateException e) {			throw new ErroRepositorioException(e, "Erro no Hibernate");		} finally {			HibernateUtil.closeSession(session);		}	}	/**	 * [UC1228] Consultar Ordens de Serviço do Arquivo Texto 1. O sistema exibe	 * as informações do arquivo texto;	 * 	 * @author Mariana Victor	 * @date 22/09/2011	 * 	 * @param Integer	 * 	 * @return Object[]	 * @throws ErroRepositorioException	 */	public Object[] pesquisarDadosArquivoTextoOSVisita(Integer idArquivoTexto)			throws ErroRepositorioException {		Session sessao = HibernateUtil.getSession();		Object[] retorno = null;		try {			String consulta = "SELECT "					+ "coss.coss_dscomando AS comando, " // 0					+ "loca.loca_id AS idLocalidade, " // 1					+ "loca.loca_nmlocalidade AS nomeLocalidade, " // 2					+ "txvc.txvc_cdsetorcomercialinicial AS codigoSetorInicial, " // 3					+ "txvc.txvc_cdsetorcomercialfinal AS codigoSetorFinal, " // 4					+ "txvc.txvc_nnquqdrainicial AS codigoQuadraInicial, " // 5					+ "txvc.txvc_nnquqdrafinal AS codigoQuadraFinal, " // 6					+ "CASE WHEN (leit.func_id is not null) THEN "					+ "  func.func_nmfuncionario "					+ "ELSE "					+ "clie.clie_nmcliente "					+ "END AS agenteComercial " // 7					+ "FROM atendimentopublico.arq_txt_visita_campo txvc "					+ "INNER JOIN atendimentopublico.comando_ordem_seletiva coss on coss.coss_id = txvc.coss_id "					+ "INNER JOIN cadastro.localidade loca ON txvc.loca_id = loca.loca_id "					+ "INNER JOIN micromedicao.leiturista leit ON leit.leit_id = txvc.leit_id "					+ "LEFT JOIN cadastro.funcionario func ON leit.func_id = func.func_id "					+ "LEFT JOIN cadastro.cliente clie ON leit.clie_id = clie.clie_id "					+ "WHERE txvc.txvc_id = :idArquivoTexto ";			retorno = (Object[]) sessao.createSQLQuery(consulta)					.addScalar("comando", Hibernate.STRING)					.addScalar("idLocalidade", Hibernate.INTEGER)					.addScalar("nomeLocalidade", Hibernate.STRING)					.addScalar("codigoSetorInicial", Hibernate.INTEGER)					.addScalar("codigoSetorFinal", Hibernate.INTEGER)					.addScalar("codigoQuadraInicial", Hibernate.INTEGER)					.addScalar("codigoQuadraFinal", Hibernate.INTEGER)					.addScalar("agenteComercial", Hibernate.STRING)					.setInteger("idArquivoTexto", idArquivoTexto)					.setMaxResults(1).uniqueResult();		} catch (HibernateException e) {			throw new ErroRepositorioException(e, "Erro no Hibernate");		} finally {			HibernateUtil.closeSession(sessao);		}		return retorno;	}	/**	 * [UC1228] Consultar Ordens de Serviço do Arquivo Texto	 * 	 * 2. O sistema deverá exibir a lista das ordens de serviço associadas ao	 * arquivo texto	 * 	 * @author Mariana Victor	 * @date 22/09/2011	 * 	 * @param Integer	 * 	 * @return Collection<Object[]>	 * @throws ErroRepositorioException	 */	public Collection<Object[]> pesquisarDadosOrdensServicoArquivoTextoVisitaCampo(			Integer idArquivoTexto) throws ErroRepositorioException {		Session sessao = HibernateUtil.getSession();		Collection<Object[]> retorno = null;		try {			String consulta = "SELECT "					+ "atrv.orse_id AS idOrdemServico, " // 0					+ "orse.imov_id AS idImovel, " // 1					+ "orse.orse_cdsituacao AS situacaoOS, " // 2					+ "atrv.atrv_tmrecebimento AS dataRecebimento, " // 3					+ "atrv.atrv_icconferida AS indicadorConferida, " // 4					+ "rota.ftgr_id AS grupoFaturamento, " // 5					+ "last.last_dsligacaoaguasituacao AS ligAguaSituacao, " // 6					+ "lest.lest_dsligacaoesgotosituacao AS ligEsgSituacao, " // 7					+ "lesg.lesg_nnconsumominimoesgoto AS consumoFixoEsgoto, " // 8					+ "imov.imov_tmultimaalteracao AS ultimaAlteracao " // 9					+ "FROM atendimentopublico.arq_txt_ret_visita_campo atrv "					+ "INNER JOIN atendimentopublico.ordem_servico orse ON atrv.orse_id = orse.orse_id "					+ "INNER JOIN atendimentopublico.arq_txt_visita_campo atvc ON atvc.txvc_id = atrv.txvc_id "					+ "INNER JOIN cadastro.imovel imov ON imov.imov_id = orse.imov_id "					+ "INNER JOIN cadastro.quadra qdra ON qdra.qdra_id = imov.qdra_id "					+ "INNER JOIN micromedicao.rota rota ON qdra.rota_id = rota.rota_id "					+ "LEFT JOIN atendimentopublico.ligacao_agua_situacao last ON last.last_id = imov.last_id "					+ "LEFT JOIN atendimentopublico.ligacao_esgoto_situacao lest ON lest.lest_id = imov.lest_id "					+ "LEFT JOIN atendimentopublico.ligacao_esgoto lesg ON lesg.lesg_id = orse.imov_id "					+ "WHERE atrv.txvc_id = :idArquivoTexto "					+ "ORDER BY atrv.orse_id ";			retorno = sessao.createSQLQuery(consulta)					.addScalar("idOrdemServico", Hibernate.INTEGER)					.addScalar("idImovel", Hibernate.INTEGER)					.addScalar("situacaoOS", Hibernate.SHORT)					.addScalar("dataRecebimento", Hibernate.TIMESTAMP)					.addScalar("indicadorConferida", Hibernate.INTEGER)					.addScalar("grupoFaturamento", Hibernate.INTEGER)					.addScalar("ligAguaSituacao", Hibernate.STRING)					.addScalar("ligEsgSituacao", Hibernate.STRING)					.addScalar("consumoFixoEsgoto", Hibernate.INTEGER)					.addScalar("ultimaAlteracao", Hibernate.TIMESTAMP)					.setInteger("idArquivoTexto", idArquivoTexto).list();		} catch (HibernateException e) {			throw new ErroRepositorioException(e, "Erro no Hibernate");		} finally {			HibernateUtil.closeSession(sessao);		}		return retorno;	}	/**	 * [UC1228] Consultar Ordens de Serviço do Arquivo Texto	 * 	 * Pesquisa o id do imóvel associado à ordem de serviço	 * 	 * @author Mariana Victor	 * @date 23/09/2011	 * 	 * @param Integer	 * 	 * @return Integer	 * @throws ErroRepositorioException	 */	public Integer pesquisarIdImovelAssociadoAOrdemVisitaCampo(			Integer idOrdemServico) throws ErroRepositorioException {		Session sessao = HibernateUtil.getSession();		Integer retorno = null;		try {			String consulta = "SELECT "					+ "orse.imov_id AS idImovel " // 1					+ "FROM atendimentopublico.ordem_servico orse "					+ "WHERE orse.orse_id = :idOrdemServico ";			retorno = (Integer) sessao.createSQLQuery(consulta)					.addScalar("idImovel", Hibernate.INTEGER)					.setInteger("idOrdemServico", idOrdemServico)					.setMaxResults(1).uniqueResult();		} catch (HibernateException e) {			throw new ErroRepositorioException(e, "Erro no Hibernate");		} finally {			HibernateUtil.closeSession(sessao);		}		return retorno;	}	/**	 * [UC1228] Consultar Ordens de Serviço do Arquivo Texto	 * 	 * SB0001 - Consultar/Atualizar Dados da Ordem de Serviço 3. Anormalidade	 * Registrada 4. Anormalidade Encontrada 5. Tipo de Pavimento de Calçada 6.	 * Tipo de Pavimento de Rua	 * 	 * @author Mariana Victor	 * @date 26/09/2011	 * 	 * @param Integer	 * 	 * @return Object[]	 * @throws ErroRepositorioException	 */	public Object[] pesquisarDadosAnormalidadePavimentoOSVisitaCampo(			Integer idOrdemServico) throws ErroRepositorioException {		Session sessao = HibernateUtil.getSession();		Object[] retorno = null;		try {			String consulta = "SELECT "					+ "osvc.osvc_dsanormalidaderegistrada AS anormalidadeRegistrada, " // 0					+ "ltan.ltan_dsleituraanormalidade AS anormalidadeEncontrada, " // 1					+ "pcal.pcal_dspavimentocalcada AS pavimentoCalcada, " // 2					+ "prua.prua_dspavimentorua AS pavimentoRua, " // 3					+ "atrv.atrv_id AS idArqTxtRetVisiCampo, " // 4					+ "atrv.atrv_icnenhuma AS indicadorAcoesRetornadas, " // 5					+ "orse.orse_cdsituacao AS situacaoOS, " // 6					+ "ltan.ltan_id AS idAnormalidadeEncontrada " // 7					+ "FROM atendimentopublico.os_seletiva_visita_campo osvc "					+ "INNER JOIN atendimentopublico.arq_txt_ret_visita_campo atrv ON atrv.orse_id = osvc.orse_id "					+ "INNER JOIN atendimentopublico.ordem_servico orse ON atrv.orse_id = orse.orse_id "					+ "LEFT JOIN micromedicao.leitura_anormalidade ltan ON atrv.ltan_id = ltan.ltan_id "					+ "LEFT JOIN cadastro.pavimento_calcada pcal ON atrv.pcal_id = pcal.pcal_id "					+ "LEFT JOIN cadastro.pavimento_rua prua ON atrv.prua_id = prua.prua_id "					+ "WHERE osvc.orse_id = :idOrdemServico ";			retorno = (Object[]) sessao.createSQLQuery(consulta)					.addScalar("anormalidadeRegistrada", Hibernate.STRING)					.addScalar("anormalidadeEncontrada", Hibernate.STRING)					.addScalar("pavimentoCalcada", Hibernate.STRING)					.addScalar("pavimentoRua", Hibernate.STRING)					.addScalar("idArqTxtRetVisiCampo", Hibernate.INTEGER)					.addScalar("indicadorAcoesRetornadas", Hibernate.SHORT)					.addScalar("situacaoOS", Hibernate.SHORT)					.addScalar("idAnormalidadeEncontrada", Hibernate.INTEGER)					.setInteger("idOrdemServico", idOrdemServico)					.setMaxResults(1).uniqueResult();		} catch (HibernateException e) {			throw new ErroRepositorioException(e, "Erro no Hibernate");		} finally {			HibernateUtil.closeSession(sessao);		}		return retorno;	}	/**	 * [UC1228] Consultar Ordens de Serviço do Arquivo Texto	 * 	 * SB0001 - Consultar/Atualizar Dados da Ordem de Serviço 7.1.1. O sistema	 * deverá exibir todas as ações para correção das anormalidades encontradas	 * 	 * @author Mariana Victor	 * @date 26/09/2011	 * 	 * @param Integer	 * 	 * @return Collection<Object[]>	 * @throws ErroRepositorioException	 */	public Collection<Object[]> pesquisarAcoesParaCorrecaoAnormalidadesEncontradas(			Integer idArquivoTextoRetornoVisitaCampo)			throws ErroRepositorioException {		Session sessao = HibernateUtil.getSession();		Collection<Object[]> retorno = null;		try {			String consulta = "SELECT "					+ "svtp.svtp_id AS idServicoTipo, "					+ "svtp.svtp_dsservicotipo AS servicoTipo "					+ "FROM atendimentopublico.arq_txt_ret_acao_viscam atra "					+ "INNER JOIN atendimentopublico.servico_tipo svtp ON svtp.svtp_id = atra.svtp_id "					+ "WHERE atra.atrv_id = :idArquivoTextoRetornoVisitaCampo ";			retorno = sessao					.createSQLQuery(consulta)					.addScalar("idServicoTipo", Hibernate.INTEGER)					.addScalar("servicoTipo", Hibernate.STRING)					.setInteger("idArquivoTextoRetornoVisitaCampo",							idArquivoTextoRetornoVisitaCampo).list();		} catch (HibernateException e) {			throw new ErroRepositorioException(e, "Erro no Hibernate");		} finally {			HibernateUtil.closeSession(sessao);		}		return retorno;	}	/**	 * [UC1228] Consultar Ordens de Serviço do Arquivo Texto	 * 	 * SB0001 - Consultar/Atualizar Dados da Ordem de Serviço 8.2. Para as ações	 * selecionadas e com ordem de serviço gerada, o sistema deverá atualizar a	 * tabela de retorno 8.3. Para as ações não selecionadas, o sistema deverá	 * atualizar a tabela de retorno	 * 	 * @author Mariana Victor	 * @date 26/09/2011	 * 	 * @param	 * @return void	 */	public void atualizarArquivoTextoRetornoAcaoVisitaCampo(			Integer idArquivoTexto, Integer idServicoTipo, Short indicadorGerada)			throws ErroRepositorioException {		String consulta;		Session session = HibernateUtil.getSession();		try {			consulta = "update gcom.atendimentopublico.ordemservico.ArquivoTextoRetornoAcaoVisitaCampo "					+ " set atra_icgerada = :indicadorGerada, atra_tmultimaalteracao = :ultimaAlteracao "					+ " where atrv_id = :idArquivoTexto and svtp_id = :idServicoTipo ";			session.createQuery(consulta)					.setTimestamp("ultimaAlteracao", new Date())					.setInteger("idArquivoTexto", idArquivoTexto)					.setInteger("idServicoTipo", idServicoTipo)					.setShort("indicadorGerada", indicadorGerada)					.executeUpdate();		} catch (HibernateException e) {			throw new ErroRepositorioException(e, "Erro no Hibernate");		} finally {			HibernateUtil.closeSession(session);		}	}	/**	 * [UC1228] Consultar Ordens de Serviço do Arquivo Texto	 * 	 * SB0001 - Consultar/Atualizar Dados da Ordem de Serviço 9. Caso o usuário	 * não selecione ações da tabela e selecione a opção de atualizar a ordem de	 * serviço de visita em campo, o sistema deverá atualizar a ordem de serviço	 * de visita de campo como conferida	 * 	 * @author Mariana Victor	 * @date 26/09/2011	 * 	 * @param	 * @return void	 */	public void atualizarOSVisitaCampoConferida(Integer idOrdemServico)			throws ErroRepositorioException {		String consulta;		Session session = HibernateUtil.getSession();		try {			consulta = "update gcom.atendimentopublico.ordemservico.ArquivoTextoRetornoVisitaCampo "					+ " set atrv_icconferida = :indicadorConferida, atrv_tmultimaalteracao = :ultimaAlteracao "					+ " where orse_id = :idOrdemServico ";			session.createQuery(consulta)					.setInteger("indicadorConferida", ConstantesSistema.SIM)					.setTimestamp("ultimaAlteracao", new Date())					.setInteger("idOrdemServico", idOrdemServico)					.executeUpdate();		} catch (HibernateException e) {			throw new ErroRepositorioException(e, "Erro no Hibernate");		} finally {			HibernateUtil.closeSession(session);		}	}	/**	 * [UC1228] Consultar Ordens de Serviço do Arquivo Texto	 * 	 * @author Mariana Victor	 * @date 26/09/2011	 * 	 * @param Integer	 * 	 * @return Integer	 * @throws ErroRepositorioException	 */	public Integer pesquisarIdComandoOSVisita(Integer idArquivoTexto)			throws ErroRepositorioException {		Session sessao = HibernateUtil.getSession();		Integer retorno = null;		try {			String consulta = "SELECT "					+ "txvc.coss_id AS comando " // 0					+ "FROM atendimentopublico.arq_txt_visita_campo txvc "					+ "  INNER JOIN atendimentopublico.arq_txt_ret_visita_campo atrv ON atrv.txvc_id = txvc.txvc_id "					+ "WHERE atrv.atrv_id = :idArquivoTexto ";			retorno = (Integer) sessao.createSQLQuery(consulta)					.addScalar("comando", Hibernate.INTEGER)					.setInteger("idArquivoTexto", idArquivoTexto)					.setMaxResults(1).uniqueResult();		} catch (HibernateException e) {			throw new ErroRepositorioException(e, "Erro no Hibernate");		} finally {			HibernateUtil.closeSession(sessao);		}		return retorno;	}	/**	 * [UC1222] Atualizar Cliente a Partir do Dispositivo Móvel	 * 	 * 2. O sistema recupera os dados do cliente inicialmente enviados para as	 * equipes de campo para atendimento da ordem de serviço informada	 * 	 * @author Mariana Victor	 * @data 27/09/2011	 */	public ClieOsSeletivaVisitaCampo pesquisarClieOsSeletivaVisitaCampo(			Integer idOrdemServico) throws ErroRepositorioException {		ClieOsSeletivaVisitaCampo retorno = null;		Session session = HibernateUtil.getSession();		String consulta;		Object[] dadosClieOs = null;		try {			consulta = " SELECT covc.covc_id AS idClieOs, " // 0					+ "    covc.covc_nmcliente AS nomeCliente, " // 1					+ "    covc.covc_nncpf AS cpf, " // 2					+ "    covc.covc_nncnpj AS cnpj, " // 3					+ "    covc.covc_nmrg AS rg, " // 4					+ "    covc.clie_id AS idCliente, " // 5					+ "    covc.oerg_idrg AS orgaoExpedidorRg, " // 6					+ "    covc.unfe_idrg AS unidadeFederacaoRg " // 7					+ " FROM atendimentopublico.clie_os_visita_campo covc "					+ "    INNER JOIN atendimentopublico.os_seletiva_visita_campo osvc ON osvc.osvc_id = covc.osvc_id "					+ " WHERE osvc.orse_id = :idOrdemServico ";			dadosClieOs = (Object[]) session.createSQLQuery(consulta)					.addScalar("idClieOs", Hibernate.INTEGER)					// 0					.addScalar("nomeCliente", Hibernate.STRING)					// 1					.addScalar("cpf", Hibernate.STRING)					// 2					.addScalar("cnpj", Hibernate.STRING)					// 3					.addScalar("rg", Hibernate.STRING)					// 4					.addScalar("idCliente", Hibernate.INTEGER)					// 5					.addScalar("orgaoExpedidorRg", Hibernate.INTEGER)					// 6					.addScalar("unidadeFederacaoRg", Hibernate.INTEGER)					// 7					.setInteger("idOrdemServico", idOrdemServico)					.setMaxResults(1).uniqueResult();			if (dadosClieOs != null) {				retorno = new ClieOsSeletivaVisitaCampo();				if (dadosClieOs[0] != null) {					retorno.setId((Integer) dadosClieOs[0]);				}				if (dadosClieOs[1] != null) {					retorno.setNomeCliente((String) dadosClieOs[1]);				}				if (dadosClieOs[2] != null) {					retorno.setCpf((String) dadosClieOs[2]);				}				if (dadosClieOs[3] != null) {					retorno.setCnpj((String) dadosClieOs[3]);				}				if (dadosClieOs[4] != null) {					retorno.setRg((String) dadosClieOs[4]);				}				if (dadosClieOs[5] != null) {					Cliente cliente = new Cliente();					cliente.setId((Integer) dadosClieOs[5]);					retorno.setCliente(cliente);				}				if (dadosClieOs[6] != null) {					OrgaoExpedidorRg orgaoExpedidorRg = new OrgaoExpedidorRg();					orgaoExpedidorRg.setId((Integer) dadosClieOs[6]);					retorno.setOrgaoExpedidorRg(orgaoExpedidorRg);				}				if (dadosClieOs[7] != null) {					UnidadeFederacao unidadeFederacaoRg = new UnidadeFederacao();					unidadeFederacaoRg.setId((Integer) dadosClieOs[7]);					retorno.setUnidadeFederacaoRg(unidadeFederacaoRg);				}			}		} catch (HibernateException e) {			throw new ErroRepositorioException(e, "Erro no Hibernate");		} finally {			HibernateUtil.closeSession(session);		}		return retorno;	}	/**	 * [UC1222] Atualizar Cliente a Partir do Dispositivo Móvel	 * 	 * 3. O sistema recupera os dados de retorno da visita de campo transmitidos	 * pelo dispositivo móvel para atualização do cliente associado ao imóvel da	 * ordem de serviço informada	 * 	 * @author Mariana Victor	 * @data 27/09/2011	 */	public ArquivoTextoRetornoClienteVisitaCampo pesquisarArquivoTextoRetornoClienteVisitaCampo(			Integer idOrdemServico) throws ErroRepositorioException {		ArquivoTextoRetornoClienteVisitaCampo retorno = null;		Session session = HibernateUtil.getSession();		String consulta;		Object[] dadosArqTxtClie = null;		try {			consulta = " SELECT atcv.atcv_id AS idArqTxtClie, " // 0					+ "    atcv.atcv_nmcliente AS nomeCliente, " // 1					+ "    atcv.atcv_nncpf AS cpf, " // 2					+ "    atcv.atcv_nncnpj AS cnpj, " // 3					+ "    atcv.atcv_nnrg AS rg, " // 4					+ "    atcv.oerg_idrg AS orgaoExpedidorRg, " // 5					+ "    atcv.unfe_idrg AS unidadeFederacaoRg, " // 6					+ "    atcv.atrv_id AS idArquivoTexto " // 7					+ " FROM atendimentopublico.arq_txt_ret_clie_viscamp atcv "					+ "    INNER JOIN atendimentopublico.arq_txt_ret_visita_campo atrv ON atrv.atrv_id = atcv.atrv_id "					+ " WHERE atrv.orse_id = :idOrdemServico ";			dadosArqTxtClie = (Object[]) session.createSQLQuery(consulta)					.addScalar("idArqTxtClie", Hibernate.INTEGER)					// 0					.addScalar("nomeCliente", Hibernate.STRING)					// 1					.addScalar("cpf", Hibernate.STRING)					// 2					.addScalar("cnpj", Hibernate.STRING)					// 3					.addScalar("rg", Hibernate.STRING)					// 4					.addScalar("orgaoExpedidorRg", Hibernate.INTEGER)					// 5					.addScalar("unidadeFederacaoRg", Hibernate.INTEGER)					// 6					.addScalar("idArquivoTexto", Hibernate.INTEGER)					// 7					.setInteger("idOrdemServico", idOrdemServico)					.setMaxResults(1).uniqueResult();			if (dadosArqTxtClie != null) {				retorno = new ArquivoTextoRetornoClienteVisitaCampo();				if (dadosArqTxtClie[0] != null) {					retorno.setId((Integer) dadosArqTxtClie[0]);				}				if (dadosArqTxtClie[1] != null) {					retorno.setNomeCliente((String) dadosArqTxtClie[1]);				}				if (dadosArqTxtClie[2] != null) {					retorno.setCpf((String) dadosArqTxtClie[2]);				}				if (dadosArqTxtClie[3] != null) {					retorno.setCnpj((String) dadosArqTxtClie[3]);				}				if (dadosArqTxtClie[4] != null) {					retorno.setRg((String) dadosArqTxtClie[4]);				}				if (dadosArqTxtClie[5] != null) {					OrgaoExpedidorRg orgaoExpedidorRg = new OrgaoExpedidorRg();					orgaoExpedidorRg.setId((Integer) dadosArqTxtClie[5]);					retorno.setOrgaoExpedidorRg(orgaoExpedidorRg);				}				if (dadosArqTxtClie[6] != null) {					UnidadeFederacao unidadeFederacao = new UnidadeFederacao();					unidadeFederacao.setId((Integer) dadosArqTxtClie[6]);					retorno.setUnidadeFederacaoRg(unidadeFederacao);				}				if (dadosArqTxtClie[7] != null) {					ArquivoTextoRetornoVisitaCampo arquivoTextoRetornoVisitaCampo = new ArquivoTextoRetornoVisitaCampo();					arquivoTextoRetornoVisitaCampo							.setId((Integer) dadosArqTxtClie[7]);					retorno.setArquivoTextoRetornoVisitaCampo(arquivoTextoRetornoVisitaCampo);				}			}		} catch (HibernateException e) {			throw new ErroRepositorioException(e, "Erro no Hibernate");		} finally {			HibernateUtil.closeSession(session);		}		return retorno;	}	/**	 * [UC1222] Atualizar Cliente a Partir do Dispositivo Móvel	 * 	 * [SB0002] - Inserir Novo Cliente	 * 	 * @author Mariana Victor	 * @data 27/09/2011	 */	public ArquivoTextoRetornoClienteFoneVisitaCampo pesquisarArquivoTextoRetornoClienteFoneVisitaCampo(			Integer idArqTxtClie) throws ErroRepositorioException {		ArquivoTextoRetornoClienteFoneVisitaCampo retorno = null;		Session session = HibernateUtil.getSession();		String consulta;		Object[] dadosClieOs = null;		try {			consulta = " SELECT atrf.atrf_id AS idArqFone, " // 0					+ "    atrf.atrf_cdddd AS codigoDdd, " // 1					+ "    atrf.atrf_nnfone AS numeroFone, " // 2					+ "    atrf.atrf_nnfoneramal AS numeroRamal " // 3					+ " FROM atendimentopublico.arq_txt_ret_fone_viscamp atrf "					+ " WHERE atrf.atcv_id = :idArqTxtClie ";			dadosClieOs = (Object[]) session.createSQLQuery(consulta)					.addScalar("idArqFone", Hibernate.INTEGER)					// 0					.addScalar("codigoDdd", Hibernate.STRING)					// 1					.addScalar("numeroFone", Hibernate.STRING)					// 2					.addScalar("numeroRamal", Hibernate.STRING)					// 3					.setInteger("idArqTxtClie", idArqTxtClie).setMaxResults(1)					.uniqueResult();			if (dadosClieOs != null) {				retorno = new ArquivoTextoRetornoClienteFoneVisitaCampo();				if (dadosClieOs[0] != null) {					retorno.setId((Integer) dadosClieOs[0]);				}				if (dadosClieOs[1] != null) {					retorno.setDddFone((String) dadosClieOs[1]);				}				if (dadosClieOs[2] != null) {					retorno.setNumeroFone((String) dadosClieOs[2]);				}				if (dadosClieOs[3] != null) {					retorno.setRamalFone((String) dadosClieOs[3]);				}			}		} catch (HibernateException e) {			throw new ErroRepositorioException(e, "Erro no Hibernate");		} finally {			HibernateUtil.closeSession(session);		}		return retorno;	}	/**	 * [UC1228] Consultar Ordens de Serviço do Arquivo Texto	 * 	 * [SB0006] - Atualizar Movimento do Cliente 1. O sistema atualiza a tabela	 * de movimento do cliente transmitida do dispositivo móvel	 * 	 * @author Mariana Victor	 * @date 28/09/2011	 * 	 * @param	 * @return void	 */	public void atualizarMovimentoCliente(Integer idArquivoTexto,			Short indicadorAtualizado, String descricaoMensagem)			throws ErroRepositorioException {		String consulta;		Session session = HibernateUtil.getSession();		try {			consulta = "update gcom.atendimentopublico.ordemservico.ArquivoTextoRetornoClienteVisitaCampo "					+ " set atcv_icatualizado = :indicadorAtualizado, atcv_tmultimaalteracao = :ultimaAlteracao ";			if (descricaoMensagem != null					&& !descricaoMensagem.trim().equals("")) {				consulta = consulta						+ ", atcv_dsmensatualizacao = :descricaoMensagem ";			}			consulta = consulta + " where atrv_id = :idArquivoTexto ";			Query query = session.createQuery(consulta)					.setInteger("indicadorAtualizado", indicadorAtualizado)					.setTimestamp("ultimaAlteracao", new Date());			if (descricaoMensagem != null					&& !descricaoMensagem.trim().equals("")) {				query.setString("descricaoMensagem", descricaoMensagem);			}			query.setInteger("idArquivoTexto", idArquivoTexto).executeUpdate();		} catch (HibernateException e) {			throw new ErroRepositorioException(e, "Erro no Hibernate");		} finally {			HibernateUtil.closeSession(session);		}	}	/**	 * [UC1228] Consultar Ordens de Serviço do Arquivo Texto	 * 	 * [SB0007] - Atualizar Movimento do Fone do Cliente 1. O sistema atualiza a	 * tabela de movimento de fone do cliente transmitida do dispositivo móvel	 * 	 * @author Mariana Victor	 * @date 28/09/2011	 * 	 * @param	 * @return void	 */	public void atualizarMovimentoFoneCliente(Integer idArquivoTextoFoneCliente)			throws ErroRepositorioException {		String consulta;		Session session = HibernateUtil.getSession();		try {			consulta = "update gcom.atendimentopublico.ordemservico.ArquivoTextoRetornoClienteFoneVisitaCampo "					+ " set atrf_icatualizado = :indicadorAtualizado, atrf_tmultimaalteracao = :ultimaAlteracao "					+ " where atrf_id = :idArquivoTextoFoneCliente ";			session.createQuery(consulta)					.setShort("indicadorAtualizado", ConstantesSistema.SIM)					.setTimestamp("ultimaAlteracao", new Date())					.setInteger("idArquivoTextoFoneCliente",							idArquivoTextoFoneCliente).executeUpdate();		} catch (HibernateException e) {			throw new ErroRepositorioException(e, "Erro no Hibernate");		} finally {			HibernateUtil.closeSession(session);		}	}	/**	 * [UC1222] Atualizar Cliente a Partir do Dispositivo Móvel	 * 	 * @author Mariana Victor	 * @data 29/09/2011	 */	public ClieFoneSeletivaVisitaCampo pesquisarClieFoneSeletivaVisitaCampo(			Integer idClieOSVisitaCampo) throws ErroRepositorioException {		ClieFoneSeletivaVisitaCampo retorno = null;		Session session = HibernateUtil.getSession();		String consulta;		Object[] dadosClieOs = null;		try {			consulta = " SELECT cfvc.cfvc_id AS idClieFoneOs, " // 0					+ "    cfvc.cfvc_cdddd AS dddFone, " // 1					+ "    cfvc.cfvc_nnfone AS numeroFone, " // 2					+ "    cfvc.cfvc_nnfoneramal AS ramalFone " // 3					+ " FROM atendimentopublico.clie_fone_visita_camp cfvc "					+ " WHERE cfvc.covc_id = :idClieOSVisitaCampo ";			dadosClieOs = (Object[]) session.createSQLQuery(consulta)					.addScalar("idClieFoneOs", Hibernate.INTEGER)					// 0					.addScalar("dddFone", Hibernate.STRING)					// 1					.addScalar("numeroFone", Hibernate.STRING)					// 2					.addScalar("ramalFone", Hibernate.STRING)					// 3					.setInteger("idClieOSVisitaCampo", idClieOSVisitaCampo)					.setMaxResults(1).uniqueResult();			if (dadosClieOs != null) {				retorno = new ClieFoneSeletivaVisitaCampo();				if (dadosClieOs[0] != null) {					retorno.setId((Integer) dadosClieOs[0]);				}				if (dadosClieOs[1] != null) {					retorno.setDddFone((String) dadosClieOs[1]);				}				if (dadosClieOs[2] != null) {					retorno.setNumeroFone((String) dadosClieOs[2]);				}				if (dadosClieOs[3] != null) {					retorno.setRamalFone((String) dadosClieOs[3]);				}			}		} catch (HibernateException e) {			throw new ErroRepositorioException(e, "Erro no Hibernate");		} finally {			HibernateUtil.closeSession(session);		}		return retorno;	}	/**	 * [UC1228] Consultar Ordens de Serviço do Arquivo Texto	 * 	 * [SB0004] - Atualizar Dados do RG do Cliente Atual	 * 	 * @author Mariana Victor	 * @date 29/09/2011	 * 	 * @param	 * @return void	 */	public void atualizarDadosRGCliente(Integer idCliente, String rg,			Integer orgaoExpedidorRg, Integer unidadeFederacaoRg)			throws ErroRepositorioException {		String consulta;		Session session = HibernateUtil.getSession();		try {			consulta = "update gcom.cadastro.cliente.Cliente "					+ " set clie_nnrg = :rg, oerg_id = :orgaoExpedidorRg, unfe_id = :unidadeFederacaoRg, clie_tmultimaalteracao = :ultimaAlteracao "					+ " where clie_id = :idCliente ";			session.createQuery(consulta)					.setTimestamp("ultimaAlteracao", new Date())					.setInteger("idCliente", idCliente).setString("rg", rg)					.setInteger("orgaoExpedidorRg", orgaoExpedidorRg)					.setInteger("unidadeFederacaoRg", unidadeFederacaoRg)					.executeUpdate();		} catch (HibernateException e) {			throw new ErroRepositorioException(e, "Erro no Hibernate");		} finally {			HibernateUtil.closeSession(session);		}	}	/**	 * [UC1228] Consultar Ordens de Serviço do Arquivo Texto	 * 	 * [SB0005] - Atualizar Dados do Fone do Cliente Atual	 * 	 * @author Mariana Victor	 * @date 29/09/2011	 * 	 * @param	 * @return void	 */	public void atualizarDadosFoneCliente(Integer idClienteFone,			String dddFone, String numeroFone, String ramalFone)			throws ErroRepositorioException {		String consulta;		Session session = HibernateUtil.getSession();		try {			consulta = "update gcom.cadastro.cliente.ClienteFone "					+ " set cfon_cdddd = :dddFone, cfon_nnfone = :numeroFone, "					+ "   cfon_nnfoneramal = :ramalFone, cfon_tmultimaalteracao = :ultimaAlteracao "					+ " where cfon_id = :idClienteFone ";			session.createQuery(consulta)					.setTimestamp("ultimaAlteracao", new Date())					.setInteger("idClienteFone", idClienteFone)					.setString("dddFone", dddFone)					.setString("numeroFone", numeroFone)					.setString("ramalFone", ramalFone).executeUpdate();		} catch (HibernateException e) {			throw new ErroRepositorioException(e, "Erro no Hibernate");		} finally {			HibernateUtil.closeSession(session);		}	}	/**	 * [UC1228] Consultar Ordens de Serviço do Arquivo Texto	 * 	 * @author Mariana Victor	 * @date 04/10/2011	 * 	 * @param Integer	 * 	 * @return Object[]	 * @throws ErroRepositorioException	 */	public Object[] pesquisarDadosOSVisitaCampo(Integer idOrdemServico)			throws ErroRepositorioException {		Session sessao = HibernateUtil.getSession();		Object[] retorno = null;		try {			String consulta = "SELECT atrv.atrv_id AS idArqTexto, " // 0					+ " osvc.imov_id AS idImovel, " // 1					+ " atrv.atrv_icnenhuma AS indicadorAcoesRetornadas, " // 2					+ " atrv.ltan_id AS anormalidadeEncontrada " // 3					+ " FROM atendimentopublico.os_seletiva_visita_campo osvc "					+ " INNER JOIN atendimentopublico.arq_txt_ret_visita_campo atrv ON atrv.orse_id = osvc.orse_id "					+ " WHERE osvc.orse_id = :idOrdemServico ";			retorno = (Object[]) sessao.createSQLQuery(consulta)					.addScalar("idArqTexto", Hibernate.INTEGER)					.addScalar("idImovel", Hibernate.INTEGER)					.addScalar("indicadorAcoesRetornadas", Hibernate.SHORT)					.addScalar("anormalidadeEncontrada", Hibernate.INTEGER)					.setInteger("idOrdemServico", idOrdemServico)					.setMaxResults(1).uniqueResult();		} catch (HibernateException e) {			throw new ErroRepositorioException(e, "Erro no Hibernate");		} finally {			HibernateUtil.closeSession(sessao);		}		return retorno;	}	/**	 * [UC1254] Relatório Ordem de Serviço com valores de cobrança	 * 	 * @author Amélia Pessoa	 * @date 28/11/2010	 * 	 * @param FiltrarRelatorioDebitosCobrancaImovelHelper	 * @return Collection<RelatorioDebitosCobradosImovelBean>	 * @throws ErroRepositorioException	 */	public Collection filtrarRelatorioDebitosCobradosImovel(			FiltrarRelatorioDebitosCobrancaImovelHelper filtro)			throws ErroRepositorioException {		Session session = HibernateUtil.getSession();		Collection retorno = null;		String consulta = null;		try {			consulta = "SELECT distinct deb.anoMesReferenciaDebito, debTip.descricao, deb.valorDebito, "					+ "(select sum(debValorPrestacao.valorPrestacao)  "					+ "from DebitoCobrado debValorPrestacao where debValorPrestacao.debitoACobrarGeral= deb.id "					+ ") as valorPrestacao, "					+ "deb.anoMesReferenciaPrestacao ,"					+ "(select max(dac.numeroPrestacaoDebito) from DebitoACobrar dac "					+ "where dac.id = deb.id)  "					+					"FROM DebitoCobrado dc "					+ "inner join dc.debitoACobrarGeral dcg "					+ "inner join dcg.debitoACobrar deb "					+ "left join deb.ordemServico os "					+ "left join os.servicoTipo "					+ "left join deb.debitoTipo debTip "					+ "where deb.imovel = :idImovel ";			if ((filtro.getDataInicial() != null && !filtro.getDataInicial()					.equals(""))					&& (filtro.getDataFinal() != null && !filtro.getDataFinal()							.equals(""))) {				consulta += "and deb.anoMesReferenciaDebito between :dataInicial and :dataFinal \n";			}			if (filtro.getTipoServico() != null					&& !filtro.getTipoServico().equals("")) {				consulta += "and os.servicoTipo.id = :servicoTipo \n";			}			Query query = session.createQuery(consulta).setString("idImovel",					filtro.getIdImovel());			if ((filtro.getDataInicial() != null && !filtro.getDataInicial()					.equals(""))					&& (filtro.getDataFinal() != null && !filtro.getDataFinal()							.equals(""))) {				query.setInteger("dataInicial", Util						.formatarMesAnoComBarraParaAnoMes(filtro								.getDataInicial()));				query.setInteger("dataFinal",						Util.formatarMesAnoComBarraParaAnoMes(filtro								.getDataFinal()));			}			if (filtro.getTipoServico() != null					&& !filtro.getTipoServico().equals("")) {				query.setInteger("servicoTipo",						Integer.parseInt(filtro.getTipoServico()));			}			retorno = query.list();		} catch (HibernateException e) {			throw new ErroRepositorioException(e, "Erro no Hibernate");		} finally {			HibernateUtil.closeSession(session);		}		return retorno;	}	/**	 * [UC1254] Relatório Ordem de Serviço com valores de cobrança	 * 	 * @author Amélia Pessoa	 * @date 28/11/2010	 * 	 * @param FiltrarRelatorioTiposServicoHelper	 * @return Collection<RelatorioTiposServicoBean>	 * @throws ErroRepositorioException	 */	public Collection filtrarRelatorioTiposServico(			FiltrarRelatorioTiposServicoHelper filtro)			throws ErroRepositorioException {		Session session = HibernateUtil.getSession();		Collection retorno = null;		String consulta = null;		try {			consulta = "select distinct \n"					+ "st.id as codigo, \n"					+ // 0					"st.descricao as tipoServico, \n"					+ // 1					"ip.descricao as perfilImovel, \n"					+ // 2					"(cat.descricao || \n"					+ // 3					"case when ( sc.descricao <> null ) \n"					+ "then concat( ' / ',  sc.descricao) else '' end) as categoriaSubcategoria, \n"					+ " hc.descricao as capacidade, \n"					+ // 4					"scv.quantidadeEconomiasInicial as economiasInicial, \n"					+ // 5					" scv.quantidadeEconomiasFinal as economiasFinal, \n"					+ // 6					" scv.valor as valor, \n"					+ // 7					" scv.dataVigenciaInicial as dataVigenciaInicial, "					+ // 8					" scv.dataVigenciaFinal as dataVigenciaFinal "					+ // 9					"from ServicoCobrancaValor as scv \n"					+ " left join scv.servicoTipo as st \n"					+ "left join scv.imovelPerfil as ip \n"					+ "left join scv.subCategoria  sc \n"					+ " left join scv.categoria as cat \n"					+ " left join scv.hidrometroCapacidade as hc \n"					+ " ORDER BY scv.dataVigenciaInicial desc, st.descricao, ip.descricao, \n"					+ "(cat.descricao ||  case when ( sc.descricao <> null ) then concat \n"					+ "( ' / ',  sc.descricao) else '' end ), \n"					+ "hc.descricao";			retorno = session.createQuery(consulta).list();		} catch (HibernateException e) {			throw new ErroRepositorioException(e, "Erro no Hibernate");		} finally {			HibernateUtil.closeSession(session);		}		return retorno;	}	/**	 * [UC1249] Filtro OS Encerradas por Acompanhamento de Serviço [SB0010] 	 * Pesquisar Fotos do RA	 * 	 * Método que vai retornar as fotos de um determinado registro de	 * atendimento passada no parâmetro.	 * 	 * @author Fernanda Almeida	 * @date 17/11/2011	 * 	 * @param Integer	 *            - ID do Registro Atendimento	 * 	 * @return Collection<Object[]> - Coleção das Fotos da OS	 * @throws ErroRepositorioException	 */	public Collection<Object[]> pesquisarFotosRA(Integer idRA)			throws ErroRepositorioException {		Session sessao = HibernateUtil.getSession();		Collection<Object[]> retorno = null;		StringBuilder sb = new StringBuilder();		sb.append("SELECT ");		sb.append("osFoto.osft_id AS id, ");// 0 - ID Ordem Serviço Foto		sb.append("osFoto.orse_id AS idOS, ");// 1 - ID Ordem Serviço		// sb.append("osFoto.orse_id AS idRA, ");//1 - ID Ordem Serviço		sb.append("osFoto.osft_dsfoto AS descricaoFoto, ");// 2 - Descrição Foto		sb.append("osFoto.osft_imfoto AS foto ");// 3 - Foto		sb.append("FROM ");		sb.append("atendimentopublico.ordem_servico_foto osFoto ");		sb.append("INNER JOIN atendimentopublico.ordem_servico orse ON orse.orse_id = osFoto.orse_id ");		sb.append("INNER JOIN atendimentopublico.registro_atendimento rgat ON rgat.rgat_id = orse.rgat_id AND rgat.rgat_id = :idRA ");		sb.append("ORDER BY osFoto.fsos_id  ");		try {			Query query = sessao.createSQLQuery(sb.toString())					.addScalar("id", Hibernate.INTEGER)					.addScalar("idOS", Hibernate.INTEGER)					.addScalar("descricaoFoto", Hibernate.STRING)					.addScalar("foto", Hibernate.BINARY)					.setInteger("idRA", idRA);			retorno = query.list();		} catch (HibernateException e) {			throw new ErroRepositorioException(e, "Erro no Hibernate");		} finally {			HibernateUtil.closeSession(sessao);		}		return retorno;	}	/**	 * Verifica se o Registro de Atendimento pode cancelar débitos	 * 	 * @author Amélia Pessoa	 * @date 06/12/2011	 * @param idRegistroAtendimento	 * @return boolean RM 5759	 */	public boolean verificarPermissaoRACancelamentoDebito(			int idRegistroAtendimento) throws ErroRepositorioException {		Session sessao = HibernateUtil.getSession();		int icCancelaDebitoACobrar = 2;		String consulta = "select distinct ste.indicadorPermiteCancelarDebito as ic \n"				+ "from SolicitacaoTipoEspecificacao AS ste, RegistroAtendimento AS ra \n"				+ "left join ste.solicitacaoTipo AS st \n"				+ "where ra.id= :idRegistroAtendimento and ra.solicitacaoTipoEspecificacao = ste.id \n";		try {			icCancelaDebitoACobrar = ((Short) sessao.createQuery(consulta)					.setInteger("idRegistroAtendimento", idRegistroAtendimento)					.uniqueResult()).intValue();		} catch (HibernateException e) {			throw new ErroRepositorioException(e, "Erro no Hibernate");		} finally {			HibernateUtil.closeSession(sessao);		}		if (icCancelaDebitoACobrar == 1) {			return true;		} else {			return false;		}	}	/**	 * RM1165 - Registrar em tabela os parâmetros que foram utilizados para	 * calcular o valor do débito a cobrar gerado decorrente da situação de	 * fiscalização informada UC0210 - Consultar débito a cobrar Analista:	 * Cláudio Lira	 * 	 * SB0001- Exibir Parâmetros de Cálculo	 * 	 * Pesquisar na tabela atendimentopublico.fiscaliz_param_calc_deb com	 * dbac_id = dbac_id recebido	 * 	 * @autor Thúlio Araújo	 * @since 13/12/2011	 * 	 * @throws ErroRepositorioException	 */	public FiscalizarParametroCalculoDebito pesquisarParametroCalculoDebito(			Integer idDebitoACobrar) throws ErroRepositorioException {		Session sessao = HibernateUtil.getSession();		FiscalizarParametroCalculoDebito fiscalizarParametroCalculoDebito = null;		String consulta = "select fisc \n"				+ "from FiscalizarParametroCalculoDebito fisc "				+ "inner join fetch fisc.categoria \n "				+ "inner join fetch fisc.subcategoria \n"				+ "where fisc.id = :idDebitoACobrar";		try {			fiscalizarParametroCalculoDebito = (FiscalizarParametroCalculoDebito) sessao					.createQuery(consulta)					.setInteger("idDebitoACobrar", idDebitoACobrar)					.setMaxResults(1).uniqueResult();		} catch (HibernateException e) {			throw new ErroRepositorioException(e, "Erro no Hibernate");		} finally {			HibernateUtil.closeSession(sessao);		}		return fiscalizarParametroCalculoDebito;	}	/**	 * Metodo responsavel por pesquisar quantidade de acessos realizados no	 * portal por um intervalo de tempo.	 * 	 * @author Arthur Carvalho	 * @date 16/12/2011	 * 	 * @throws ErroRepositorioException	 */	public Integer pesquisarQuantidadeAcessoLojaVirtual(Date periodoInicial,			Date periodoFinal, String tipoAtendimento)			throws ErroRepositorioException {		// Cria uma sessão com ohibernate		Session session = HibernateUtil.getSession();		// Cria a variável que vai armazenar o cliente responsável		Integer quantidade = null;		String consulta = null;		try {			// Monta o HQL			consulta = "select count(distinct(aclj_nncodigoatendimento)) qtd from atendimentopublico.acesso_loja_virtual  where"					+ " aclj_tmultimaalteracao >= :periodoInicial  and "					+ " aclj_tmultimaalteracao <= :periodoFinal  and ";			if (periodoInicial == null || periodoInicial.equals("")) {				periodoInicial = Util.criarData(1, 1, 2011);			}			if (periodoFinal == null || periodoFinal.equals("")) {				periodoFinal = new Date();			}			if (tipoAtendimento != null && !tipoAtendimento.equals("-1")) {				consulta = consulta + " aclj_nncodigoatendimento =  '"						+ tipoAtendimento + "' and ";			}			consulta = consulta.substring(0, consulta.length() - 4);			// Executa o HQL			quantidade = (Integer) session					.createSQLQuery(consulta)					.addScalar("qtd", Hibernate.INTEGER)					.setTimestamp("periodoInicial",							Util.formatarDataInicial(periodoInicial))					.setTimestamp("periodoFinal",							Util.formatarDataFinal(periodoFinal))					.uniqueResult();			// Erro no hibernate		} catch (HibernateException e) {			// Levanta a exceção para a próxima camada			throw new ErroRepositorioException(e, "Erro no Hibernate");		} finally {			// Fecha a sessão			HibernateUtil.closeSession(session);		}		return quantidade;	}	/**	 * Metodo responsavel por pesquisar quantidade de acessos realizados no	 * portal por um intervalo de tempo.	 * 	 * @author Arthur Carvalho	 * @date 16/12/2011	 * 	 * @throws ErroRepositorioException	 */	public Integer pesquisarQuantidadeAcessoLojaVirtualTipoAtendimento(			Date periodoInicial, Date periodoFinal, String tipoAtendimento,String indicadorServicoExecutado)			throws ErroRepositorioException {		// Cria uma sessão com ohibernate		Session session = HibernateUtil.getSession();		// Cria a variável que vai armazenar o cliente responsável		Integer quantidade = null;		String consulta = null;		try {			// Monta o HQL			consulta = "select count(aclj_nncodigoatendimento) qtd from atendimentopublico.acesso_loja_virtual  where"					+ " aclj_tmultimaalteracao >= :periodoInicial  and "					+ " aclj_tmultimaalteracao <= :periodoFinal ";						if (periodoInicial == null || periodoInicial.equals("")) {				periodoInicial = Util.criarData(1, 1, 2011);			}			if (periodoFinal == null || periodoFinal.equals("")) {				periodoFinal = new Date();			}			if (tipoAtendimento != null && !tipoAtendimento.equals("-1")) {				consulta = consulta + " and aclj_nncodigoatendimento =  '"+ tipoAtendimento + "' ";			}						if (indicadorServicoExecutado != null && !indicadorServicoExecutado.equals("3")) {				consulta = consulta + " AND ACLJ_ICSERVICOEXECUTADO =  "+ indicadorServicoExecutado;			}			// Executa o HQL			quantidade = (Integer) session.				createSQLQuery(consulta).				addScalar("qtd", Hibernate.INTEGER).				setTimestamp("periodoInicial",Util.formatarDataInicial(periodoInicial)).				setTimestamp("periodoFinal",Util.formatarDataFinal(periodoFinal)).				uniqueResult();			// Erro no hibernate		} catch (HibernateException e) {			// Levanta a exceção para a próxima camada			throw new ErroRepositorioException(e, "Erro no Hibernate");		} finally {			// Fecha a sessão			HibernateUtil.closeSession(session);		}		return quantidade;	}	/**	 * @author Arthur Carvalho	 * @date 16/12/2011	 * 	 * @throws ErroRepositorioException	 */	public Collection<Object[]> pesquisarAcessoLojaVirtual(Date periodoInicial,			Date periodoFinal, String tipoAtendimento,String indicadorServicoExecutado)			throws ErroRepositorioException {		// Cria uma sessão com ohibernate		Session session = HibernateUtil.getSession();		// Cria a variável		Collection<Object[]> colecaoAcessoLojaVirtual = null;		String consulta = null;		try {			// Monta o HQL			consulta = "select aclj.numeroCodigoAtendimento AS codigo, count(aclj.id) AS quantidade, " 				    + "sum(case aclj.indicadorServicoExecutado when 1 then 1 else 0 end) as quantidadeExecutadas "  					+ " from AcessoLojaVirtual aclj where"					+ " aclj.ultimaAlteracao >= :periodoInicial  and "					+ " aclj.ultimaAlteracao <= :periodoFinal ";						if (periodoInicial == null || periodoInicial.equals("")) {				periodoInicial = Util.criarData(1, 1, 2011);			}			if (periodoFinal == null || periodoFinal.equals("")) {				periodoFinal = new Date();			}			if (tipoAtendimento != null && !tipoAtendimento.equals("-1")) {				consulta = consulta + " AND aclj.numeroCodigoAtendimento =  '"+ tipoAtendimento + "' ";			}			if (indicadorServicoExecutado != null && !indicadorServicoExecutado.equals("3")) {				consulta = consulta + " AND aclj.indicadorServicoExecutado =  "+ indicadorServicoExecutado;			}			consulta = consulta + " group by aclj.numeroCodigoAtendimento  ";			consulta = consulta + " order by count(aclj.id) DESC  ";			// Executa o HQL			colecaoAcessoLojaVirtual = (Collection<Object[]>) session.				createQuery(consulta).				setTimestamp("periodoInicial",Util.formatarDataInicial(periodoInicial)).				setTimestamp("periodoFinal",Util.formatarDataFinal(periodoFinal)).				list();			// Erro no hibernate		} catch (HibernateException e) {			// Levanta a exceção para a próxima camada			throw new ErroRepositorioException(e, "Erro no Hibernate");		} finally {			// Fecha a sessão			HibernateUtil.closeSession(session);		}		return colecaoAcessoLojaVirtual;	}	/**	 * @author Arthur Carvalho	 * @date 16/12/2011	 * 	 * @throws ErroRepositorioException	 */	public Collection<Object[]> pesquisarAcessoLojaVirtualTipoAtendimento(			Date periodoInicial, Date periodoFinal, String tipoAtendimento,			int numeroPagina,String indicadorServicoExecutado) throws ErroRepositorioException {		// Cria uma sessão com ohibernate		Session session = HibernateUtil.getSession();		// Cria a variável		Collection<Object[]> colecaoAcessoLojaVirtual = null;		String consulta = null;		try {			// Monta o HQL			consulta = "select aclj.ultimaAlteracao , aclj.ipAcesso, aclj.indicadorServicoExecutado from AcessoLojaVirtual aclj where"					+ " aclj.ultimaAlteracao >= :periodoInicial  and "					+ " aclj.ultimaAlteracao <= :periodoFinal ";						if (periodoInicial == null || periodoInicial.equals("")) {				periodoInicial = Util.criarData(1, 1, 2011);			}			if (periodoFinal == null || periodoFinal.equals("")) {				periodoFinal = new Date();			}			if (tipoAtendimento != null && !tipoAtendimento.equals("-1")) {				consulta = consulta + " and aclj.numeroCodigoAtendimento =  '"+ tipoAtendimento + "' ";			}						if (indicadorServicoExecutado != null && !indicadorServicoExecutado.equals("3")) {				consulta = consulta + " AND aclj.indicadorServicoExecutado =  "+ indicadorServicoExecutado;			}			consulta = consulta + " order by aclj.ultimaAlteracao";			// Executa o HQL			colecaoAcessoLojaVirtual = (Collection<Object[]>) session.				createQuery(consulta).				setTimestamp("periodoInicial",Util.formatarDataInicial(periodoInicial)).				setTimestamp("periodoFinal",Util.formatarDataFinal(periodoFinal)).				setFirstResult(10 * numeroPagina).				setMaxResults(10).				list();			// Erro no hibernate		} catch (HibernateException e) {			// Levanta a exceção para a próxima camada			throw new ErroRepositorioException(e, "Erro no Hibernate");		} finally {			// Fecha a sessão			HibernateUtil.closeSession(session);		}		return colecaoAcessoLojaVirtual;	}	/**	 * 	 * Método que que retorna a tabela SOLICITACAO_TIPO_GRUPO	 * 	 * @author Hugo Azevedo	 * @date 06/02/2012	 * 	 * */	public Collection<SolicitacaoTipoGrupo> obterSolicitacaoTipoGrupo()			throws ErroRepositorioException {		Session session = HibernateUtil.getSession();		String sql = "";		Collection<SolicitacaoTipoGrupo> retorno = null;		try {			sql = " select stg " + " from SolicitacaoTipoGrupo stg "					+ " order by stg.id ";			retorno = session.createQuery(sql).list();			// Erro no hibernate		} catch (HibernateException e) {			// Levanta a exceção para a próxima camada			throw new ErroRepositorioException(e, "Erro no Hibernate");		} finally {			// Fecha a sessão			HibernateUtil.closeSession(session);		}		return retorno;	}	public Collection pesquisarPesquisaSatisfacao(			PesquisaSatisfacaoHelper helper) throws ErroRepositorioException {		Session session = HibernateUtil.getSession();		String sql = "";		Map parameters = new HashMap();		SQLQuery sqlQuery = null;		Date dataInicio = Util.criarData(Integer.parseInt(helper				.getDataPeriodoInicial().substring(0, 2)), Integer				.parseInt(helper.getDataPeriodoInicial().substring(3, 5)),				Integer.parseInt(helper.getDataPeriodoInicial()						.substring(6, 10)));		Date dataFinal = Util				.criarData(Integer.parseInt(helper.getDataPeriodoFinal()						.substring(0, 2)), Integer.parseInt(helper						.getDataPeriodoFinal().substring(3, 5)),						Integer.parseInt(helper.getDataPeriodoFinal()								.substring(6, 10)));		dataInicio = Util.formatarDataInicial(dataInicio);		dataFinal = Util.formatarDataFinal(dataFinal);		Collection retorno = null;		try {			sql = "Select unid_id, "; // 0			if (helper.getCriterio().equals("1")) {				sql += "SUM(case when PQSL_CDAVALIACAOATENDENTE = 5 then 1 ELSE 0 END) soma1, "						+ // 1						"SUM(case when PQSL_CDAVALIACAOATENDENTE = 4 then 1 ELSE 0 END) soma2, "						+ // 2						"SUM(case when PQSL_CDAVALIACAOATENDENTE = 3 then 1 ELSE 0 END) soma3, "						+ // 3						"SUM(case when PQSL_CDAVALIACAOATENDENTE = 2 then 1 ELSE 0 END) soma4, "						+ // 4						"SUM(case when PQSL_CDAVALIACAOATENDENTE = 1 then 1 ELSE 0 END) soma5 "; // 5			} else if (helper.getCriterio().equals("2")) {				sql += "SUM(case when PQSL_CDAGILIDADEATENDIMENTO = 5 then 1 ELSE 0 END) soma1, "						+ // 1						"SUM(case when PQSL_CDAGILIDADEATENDIMENTO = 4 then 1 ELSE 0 END) soma2, "						+ // 2						"SUM(case when PQSL_CDAGILIDADEATENDIMENTO = 3 then 1 ELSE 0 END) soma3, "						+ // 3						"SUM(case when PQSL_CDAGILIDADEATENDIMENTO = 2 then 1 ELSE 0 END) soma4, "						+ // 4						"SUM(case when PQSL_CDAGILIDADEATENDIMENTO = 1 then 1 ELSE 0 END) soma5  "; // 5			} else if (helper.getCriterio().equals("3")) {				sql += "SUM(case when PQSL_CDTEMPOESPERA = 5 then 1 ELSE 0 END) soma1, "						+ // 1						"SUM(case when PQSL_CDTEMPOESPERA = 4 then 1 ELSE 0 END) soma2, "						+ // 2						"SUM(case when PQSL_CDTEMPOESPERA = 3 then 1 ELSE 0 END) soma3, "						+ // 3						"SUM(case when PQSL_CDTEMPOESPERA = 2 then 1 ELSE 0 END) soma4, "						+ // 4						"SUM(case when PQSL_CDTEMPOESPERA = 1 then 1 ELSE 0 END) soma5  "; // 5			} else if (helper.getCriterio().equals("4")) {				sql += "SUM(case when PQSL_CDCONFORTOLIMPEZA = 5 then 1 ELSE 0 END) soma1, "						+ // 1						"SUM(case when PQSL_CDCONFORTOLIMPEZA = 4 then 1 ELSE 0 END) soma2, "						+ // 2						"SUM(case when PQSL_CDCONFORTOLIMPEZA = 3 then 1 ELSE 0 END) soma3, "						+ // 3						"SUM(case when PQSL_CDCONFORTOLIMPEZA = 2 then 1 ELSE 0 END) soma4, "						+ // 4						"SUM(case when PQSL_CDCONFORTOLIMPEZA = 1 then 1 ELSE 0 END) soma5  "; // 5			} else if (helper.getCriterio().equals("5")) {				sql += "SUM(case when PQSL_CDLOCALIZACAO = 5 then 1 ELSE 0 END) soma1, "						+ // 1						"SUM(case when PQSL_CDLOCALIZACAO = 4 then 1 ELSE 0 END) soma2, "						+ // 2						"SUM(case when PQSL_CDLOCALIZACAO = 3 then 1 ELSE 0 END) soma3, "						+ // 3						"SUM(case when PQSL_CDLOCALIZACAO = 2 then 1 ELSE 0 END) soma4, "						+ // 4						"SUM(case when PQSL_CDLOCALIZACAO = 1 then 1 ELSE 0 END) soma5  "; // 5			} else if (helper.getCriterio().equals("6")) {				sql += "SUM(case when PQSL_CDSEGURANCA = 5 then 1 ELSE 0 END) soma1, "						+ // 1						"SUM(case when PQSL_CDSEGURANCA = 4 then 1 ELSE 0 END) soma2, "						+ // 2						"SUM(case when PQSL_CDSEGURANCA = 3 then 1 ELSE 0 END) soma3, "						+ // 3						"SUM(case when PQSL_CDSEGURANCA = 2 then 1 ELSE 0 END) soma4, "						+ // 4						"SUM(case when PQSL_CDSEGURANCA = 1 then 1 ELSE 0 END) soma5  "; // 5			} else if (helper.getCriterio().equals("7")) {				sql += "SUM(case when PQSL_CDESTACIONAMENTO = 5 then 1 ELSE 0 END) soma1, "						+ // 1						"SUM(case when PQSL_CDESTACIONAMENTO = 4 then 1 ELSE 0 END) soma2, "						+ // 2						"SUM(case when PQSL_CDESTACIONAMENTO = 3 then 1 ELSE 0 END) soma3, "						+ // 3						"SUM(case when PQSL_CDESTACIONAMENTO = 2 then 1 ELSE 0 END) soma4, "						+ // 4						"SUM(case when PQSL_CDESTACIONAMENTO = 1 then 1 ELSE 0 END) soma5  "; // 5			} else {				sql += "SUM(case when PQSL_CDAVALIACAOATENDENTE = 5 then 1 ELSE 0 END) soma1, "						+ // 1						"SUM(case when PQSL_CDAVALIACAOATENDENTE = 4 then 1 ELSE 0 END) soma2, "						+ // 2						"SUM(case when PQSL_CDAVALIACAOATENDENTE = 3 then 1 ELSE 0 END) soma3, "						+ // 3						"SUM(case when PQSL_CDAVALIACAOATENDENTE = 2 then 1 ELSE 0 END) soma4, "						+ // 4						"SUM(case when PQSL_CDAVALIACAOATENDENTE = 1 then 1 ELSE 0 END) soma5, "						+ // 5						"SUM(case when PQSL_CDAGILIDADEATENDIMENTO = 5 then 1 ELSE 0 END) soma6, "						+ // 6						"SUM(case when PQSL_CDAGILIDADEATENDIMENTO = 4 then 1 ELSE 0 END) soma7, "						+ // 7						"SUM(case when PQSL_CDAGILIDADEATENDIMENTO = 3 then 1 ELSE 0 END) soma8, "						+ // 8						"SUM(case when PQSL_CDAGILIDADEATENDIMENTO = 2 then 1 ELSE 0 END) soma9, "						+ // 9						"SUM(case when PQSL_CDAGILIDADEATENDIMENTO = 1 then 1 ELSE 0 END) soma10, "						+ // 10						"SUM(case when PQSL_CDTEMPOESPERA = 5 then 1 ELSE 0 END) soma11, "						+ // 11						"SUM(case when PQSL_CDTEMPOESPERA = 4 then 1 ELSE 0 END) soma12, "						+ // 12						"SUM(case when PQSL_CDTEMPOESPERA = 3 then 1 ELSE 0 END) soma13, "						+ // 13						"SUM(case when PQSL_CDTEMPOESPERA = 2 then 1 ELSE 0 END) soma14, "						+ // 14						"SUM(case when PQSL_CDTEMPOESPERA = 1 then 1 ELSE 0 END) soma15, "						+ // 15						"SUM(case when PQSL_CDCONFORTOLIMPEZA = 5 then 1 ELSE 0 END) soma16, "						+ // 16						"SUM(case when PQSL_CDCONFORTOLIMPEZA = 4 then 1 ELSE 0 END) soma17, "						+ // 17						"SUM(case when PQSL_CDCONFORTOLIMPEZA = 3 then 1 ELSE 0 END) soma18, "						+ // 18						"SUM(case when PQSL_CDCONFORTOLIMPEZA = 2 then 1 ELSE 0 END) soma19, "						+ // 19						"SUM(case when PQSL_CDCONFORTOLIMPEZA = 1 then 1 ELSE 0 END) soma20, "						+ // 20						"SUM(case when PQSL_CDLOCALIZACAO = 5 then 1 ELSE 0 END) soma21, "						+ // 21						"SUM(case when PQSL_CDLOCALIZACAO = 4 then 1 ELSE 0 END) soma22, "						+ // 22						"SUM(case when PQSL_CDLOCALIZACAO = 3 then 1 ELSE 0 END) soma23, "						+ // 23						"SUM(case when PQSL_CDLOCALIZACAO = 2 then 1 ELSE 0 END) soma24, "						+ // 24						"SUM(case when PQSL_CDLOCALIZACAO = 1 then 1 ELSE 0 END) soma25, "						+ // 25						"SUM(case when PQSL_CDSEGURANCA = 5 then 1 ELSE 0 END) soma26, "						+ // 26						"SUM(case when PQSL_CDSEGURANCA = 4 then 1 ELSE 0 END) soma27, "						+ // 27						"SUM(case when PQSL_CDSEGURANCA = 3 then 1 ELSE 0 END) soma28, "						+ // 28						"SUM(case when PQSL_CDSEGURANCA = 2 then 1 ELSE 0 END) soma29, "						+ // 29						"SUM(case when PQSL_CDSEGURANCA = 1 then 1 ELSE 0 END) soma30, "						+ // 30						"SUM(case when PQSL_CDESTACIONAMENTO = 5 then 1 ELSE 0 END) soma31, "						+ // 31						"SUM(case when PQSL_CDESTACIONAMENTO = 4 then 1 ELSE 0 END) soma32, "						+ // 32						"SUM(case when PQSL_CDESTACIONAMENTO = 3 then 1 ELSE 0 END) soma33, "						+ // 33						"SUM(case when PQSL_CDESTACIONAMENTO = 2 then 1 ELSE 0 END) soma34, "						+ // 34						"SUM(case when PQSL_CDESTACIONAMENTO = 1 then 1 ELSE 0 END) soma35  "; // 35			}			sql += "FROM atendimentopublico.pesquisa_satisfacao_loja "					+ "WHERE pqsl_tmatendimento between :dataInicial and :dataFinal ";			parameters.put("dataInicial", dataInicio);			parameters.put("dataFinal", dataFinal);			if (helper.getIdUnidade() != null					&& !helper.getIdUnidade().equals("")) {				sql += "AND unid_id = :idUnidade ";				parameters.put("idUnidade", helper.getIdUnidade());			}			if (helper.getIdImovel() != null					&& !helper.getIdImovel().equals("")) {				sql += "AND imov_id = :idImovel ";				parameters.put("idImovel", helper.getIdImovel());			}			sql += "GROUP BY unid_id";			sqlQuery = session.createSQLQuery(sql);			if (!helper.getCriterio().equals("0")) {				sqlQuery = sqlQuery.addScalar("unid_id", Hibernate.STRING)						.addScalar("soma1", Hibernate.STRING)						.addScalar("soma2", Hibernate.STRING)						.addScalar("soma3", Hibernate.STRING)						.addScalar("soma4", Hibernate.STRING)						.addScalar("soma5", Hibernate.STRING);			} else {				sqlQuery = sqlQuery.addScalar("unid_id", Hibernate.STRING)						.addScalar("soma1", Hibernate.STRING)						.addScalar("soma2", Hibernate.STRING)						.addScalar("soma3", Hibernate.STRING)						.addScalar("soma4", Hibernate.STRING)						.addScalar("soma5", Hibernate.STRING)						.addScalar("soma6", Hibernate.STRING)						.addScalar("soma7", Hibernate.STRING)						.addScalar("soma8", Hibernate.STRING)						.addScalar("soma9", Hibernate.STRING)						.addScalar("soma10", Hibernate.STRING)						.addScalar("soma11", Hibernate.STRING)						.addScalar("soma12", Hibernate.STRING)						.addScalar("soma13", Hibernate.STRING)						.addScalar("soma14", Hibernate.STRING)						.addScalar("soma15", Hibernate.STRING)						.addScalar("soma16", Hibernate.STRING)						.addScalar("soma17", Hibernate.STRING)						.addScalar("soma18", Hibernate.STRING)						.addScalar("soma19", Hibernate.STRING)						.addScalar("soma20", Hibernate.STRING)						.addScalar("soma21", Hibernate.STRING)						.addScalar("soma22", Hibernate.STRING)						.addScalar("soma23", Hibernate.STRING)						.addScalar("soma24", Hibernate.STRING)						.addScalar("soma25", Hibernate.STRING)						.addScalar("soma26", Hibernate.STRING)						.addScalar("soma27", Hibernate.STRING)						.addScalar("soma28", Hibernate.STRING)						.addScalar("soma29", Hibernate.STRING)						.addScalar("soma30", Hibernate.STRING)						.addScalar("soma31", Hibernate.STRING)						.addScalar("soma32", Hibernate.STRING)						.addScalar("soma33", Hibernate.STRING)						.addScalar("soma34", Hibernate.STRING)						.addScalar("soma35", Hibernate.STRING);			}			Set set = parameters.keySet();			Iterator iterMap = set.iterator();			while (iterMap.hasNext()) {				String key = (String) iterMap.next();				if (parameters.get(key) instanceof Set) {					Set setList = (HashSet) parameters.get(key);					sqlQuery.setParameterList(key, setList);				} else if (parameters.get(key) instanceof Collection) {					Collection collection = (ArrayList) parameters.get(key);					sqlQuery.setParameterList(key, collection);				} else {					sqlQuery.setParameter(key, parameters.get(key));				}			}			retorno = sqlQuery.list();			// Erro no hibernate		} catch (HibernateException e) {			// Levanta exceção para próxima camada			throw new ErroRepositorioException(e, "Erro no Hibernate");		} finally {			// Fecha a sessao			HibernateUtil.closeSession(session);		}		return retorno;	}	public Collection<Object[]> pesquisarPesquisaSatisfacaoRelatorioAnalitico(			PesquisaSatisfacaoHelper helper) throws ErroRepositorioException {		Session session = HibernateUtil.getSession();		String sql = "";		Map parameters = new HashMap();		SQLQuery sqlQuery = null;		Date dataInicio = Util.criarData(Integer.parseInt(helper				.getDataPeriodoInicial().substring(0, 2)), Integer				.parseInt(helper.getDataPeriodoInicial().substring(3, 5)),				Integer.parseInt(helper.getDataPeriodoInicial()						.substring(6, 10)));		Date dataFinal = Util				.criarData(Integer.parseInt(helper.getDataPeriodoFinal()						.substring(0, 2)), Integer.parseInt(helper						.getDataPeriodoFinal().substring(3, 5)),						Integer.parseInt(helper.getDataPeriodoFinal()								.substring(6, 10)));		dataInicio = Util.formatarDataInicial(dataInicio);		dataFinal = Util.formatarDataFinal(dataFinal);		Collection retorno = null;		try {			sql = "Select unid_id, " + // 0					"imov_id, " + // 1					"pqsl_nmcliente, " + // 2					"pqsl_cdddd, " + // 3					"pqsl_nnfone, " + // 4					"pqsl_dsemail, " + // 5					"pqsl_tmatendimento, " + // 6					"pqsl_dscomentarios, "; // 7			if (helper.getCriterio().equals("1")) {				sql += "pqsl_cdavaliacaoatendente "; // 8			} else if (helper.getCriterio().equals("2")) {				sql += "pqsl_cdagilidadeatendimento "; // 8			} else if (helper.getCriterio().equals("3")) {				sql += "pqsl_cdtempoespera "; // 8			} else if (helper.getCriterio().equals("4")) {				sql += "pqsl_cdconfortolimpeza "; // 8			} else if (helper.getCriterio().equals("5")) {				sql += "pqsl_cdlocalizacao "; // 8			} else if (helper.getCriterio().equals("6")) {				sql += "pqsl_cdseguranca "; // 8			} else if (helper.getCriterio().equals("7")) {				sql += "pqsl_cdestacionamento "; // 8			} else {				sql += "pqsl_cdavaliacaoatendente, " + // 8						"pqsl_cdagilidadeatendimento, " + // 9						"pqsl_cdtempoespera, " + // 10						"pqsl_cdconfortolimpeza, " + // 11						"pqsl_cdlocalizacao, " + // 12						"pqsl_cdseguranca, " + // 13						"pqsl_cdestacionamento "; // 14			}			sql += "FROM atendimentopublico.pesquisa_satisfacao_loja "					+ "WHERE pqsl_tmatendimento between :dataInicial and :dataFinal ";			parameters.put("dataInicial", dataInicio);			parameters.put("dataFinal", dataFinal);			if (helper.getIdImovel() != null					&& !helper.getIdImovel().equals("")) {				sql += "AND imov_id = :idImovel ";				parameters.put("idImovel", helper.getIdImovel());			}			if (helper.getIdUnidade() != null					&& !helper.getIdUnidade().equals("")) {				sql += "AND unid_id = :idUnidade ";				parameters.put("idUnidade", helper.getIdUnidade());			}			sql += "ORDER BY unid_id";			sqlQuery = session.createSQLQuery(sql);			sqlQuery.addScalar("unid_id", Hibernate.STRING) // 0					.addScalar("imov_id", Hibernate.STRING) // 1					.addScalar("pqsl_nmcliente", Hibernate.STRING) // 2					.addScalar("pqsl_cdddd", Hibernate.STRING) // 3					.addScalar("pqsl_nnfone", Hibernate.STRING) // 4					.addScalar("pqsl_dsemail", Hibernate.STRING) // 5					.addScalar("pqsl_tmatendimento", Hibernate.STRING) // 6					.addScalar("pqsl_dscomentarios", Hibernate.STRING); // 7			if (helper.getCriterio().equals("1")) {				sqlQuery.addScalar("pqsl_cdavaliacaoatendente",						Hibernate.STRING); // 8			} else if (helper.getCriterio().equals("2")) {				sqlQuery.addScalar("pqsl_cdagilidadeatendimento",						Hibernate.STRING); // 8			} else if (helper.getCriterio().equals("3")) {				sqlQuery.addScalar("pqsl_cdtempoespera", Hibernate.STRING); // 8			} else if (helper.getCriterio().equals("4")) {				sqlQuery.addScalar("pqsl_cdconfortolimpeza", Hibernate.STRING); // 8			} else if (helper.getCriterio().equals("5")) {				sqlQuery.addScalar("pqsl_cdlocalizacao", Hibernate.STRING); // 8			} else if (helper.getCriterio().equals("6")) {				sqlQuery.addScalar("pqsl_cdseguranca", Hibernate.STRING); // 8			} else if (helper.getCriterio().equals("7")) {				sqlQuery.addScalar("pqsl_cdestacionamento", Hibernate.STRING); // 8			} else {				sqlQuery.addScalar("pqsl_cdavaliacaoatendente",						Hibernate.STRING) // 8						.addScalar("pqsl_cdagilidadeatendimento",								Hibernate.STRING) // 9						.addScalar("pqsl_cdtempoespera", Hibernate.STRING) // 10						.addScalar("pqsl_cdconfortolimpeza", Hibernate.STRING) // 11						.addScalar("pqsl_cdlocalizacao", Hibernate.STRING) // 12						.addScalar("pqsl_cdseguranca", Hibernate.STRING) // 13						.addScalar("pqsl_cdestacionamento", Hibernate.STRING); // 14			}			Set set = parameters.keySet();			Iterator iterMap = set.iterator();			while (iterMap.hasNext()) {				String key = (String) iterMap.next();				if (parameters.get(key) instanceof Set) {					Set setList = (HashSet) parameters.get(key);					sqlQuery.setParameterList(key, setList);				} else if (parameters.get(key) instanceof Collection) {					Collection collection = (ArrayList) parameters.get(key);					sqlQuery.setParameterList(key, collection);				} else {					sqlQuery.setParameter(key, parameters.get(key));				}			}			retorno = sqlQuery.list();		} catch (HibernateException e) {			// Levanta a exceção para próxima camada			throw new ErroRepositorioException(e, "Erro no Hibernate");		} finally {			// Fecha a sessao			HibernateUtil.closeSession(session);		}		return retorno;	}	/**	 * [UC1289] Gerar Base de Cliente para Sorteio 2. O sistema deverá	 * selecionar os imóveis residenciais com apenas de uma economia e que o	 * cliente usuário não tenham CNPJ como documento principal	 * 	 * [UC1295] Efetuar Sorteio de Prêmios [SB0001] - Verificar Critérios	 * Cadastrais.	 * 	 * @author Mariana Victor	 * @date 02/03/2012	 * 	 * @param idLocalidade	 *            , idImovel	 * @return Collection<Integer>	 * @throws ErroRepositorioException	 */	public Collection<Object[]> pesquisarImoveisSorteio(Integer idLocalidade,			Integer idImovel) throws ErroRepositorioException {		Collection<Object[]> retorno = null;		Session session = HibernateUtil.getSession();		try {			String consulta = "select imov.imov_id AS imovel, "					+ "   clie.clie_nncpf AS cpf "					+ " from cadastro.imovel imov "					+ "   inner join cadastro.cliente_imovel clim on (clim.imov_id = imov.imov_id "					+ "                                           and clim.crtp_id = :clienteUsuario "					+ "                                           and clim.clim_dtrelacaofim is null) "					+ "   inner join cadastro.cliente clie on (clie.clie_id = clim.clie_id) "					+ " where imov.imov_qteconomia = 1 "					+ "   and imov.imov_idcategoriaprincipal = :categoriaResidencial ";			if (idLocalidade != null) {				consulta = consulta + "   and imov.loca_id = :idLocalidade ";			} else {				consulta = consulta + "   and imov.imov_id = :idImovel ";			}			consulta = consulta + "   and imov.imov_icexclusao = 2 "					+ "   and clie.clie_nncnpj is null "					+ "   and clie.clie_nmcliente is not null "					+ "	  and LENGTH(trim(clie.clie_nmcliente)) >= 10 ";			consulta = this.adicionaCondicionaisNomesClientes(consulta);			consulta = consulta + " group by imov.imov_id, clie.clie_nncpf ";			Query query = session.createSQLQuery(consulta)					.addScalar("imovel", Hibernate.INTEGER)					.addScalar("cpf", Hibernate.STRING)					.setInteger("clienteUsuario", ClienteRelacaoTipo.USUARIO)					.setInteger("categoriaResidencial", Categoria.RESIDENCIAL);			if (idLocalidade != null) {				query = query.setInteger("idLocalidade", idLocalidade);			} else {				query = query.setInteger("idImovel", idImovel);			}			retorno = (Collection<Object[]>) query.list();		} catch (HibernateException e) {			throw new ErroRepositorioException(e, "Erro no Hibernate");		} finally {			HibernateUtil.closeSession(session);		}		return retorno;	}	private String adicionaCondicionaisNomesClientes(String consulta) {		consulta = consulta				+ "   and not REGEXP_LIKE(lower(clie.clie_nmcliente) , "				+ "         '(^[0-9]|" // inicia com números				+ "^ [0-9]|" // inicia com números				+ "[iíìîï]nf[oóòôõö]rm|" // contém 'inform'				+ "[uúùûü]s[uúùûü][aáãàâä]r[iíìîï][oóòôõö]|" // contém 'usuario'				+ "pr[oóòôõö]pr[iíìîï][eéèêë]t[aáãàâä]ri[oóòôõö]|" // contém																	// 'proprietario'				+ "[iíìîï]gn[oóòôõö]r[aáãàâä]d[oóòôõö]|" // contém 'ignorado'				+ "[iíìîï]g[uúùûü][iíìîï]n[iíìîï]r[aáãàâä]d[oóòôõö]|" // contém																		// 'iguinirado'				+ "[iíìîï]g[uúùûü][iíìîï]n[oóòôõö]r[aáãàâä]d[oóòôõö]|" // contém																		// 'iguinorado'				+ "n[oóòôõö]m[eéèêë]|" // contém 'nome'				+ "c[oóòôõö]mp[eéèêë]s[aáãàâä]|" // contém 'compesa'				+ "cl[iíìîï][eéèêë]nt[eéèêë]|" // contém 'cliente'				+ "[iíìîï]gr[eéèêë]j[aáãàâä]|" // contém 'Igreja'				+ "p[aáãàâä]r[oóòôõö]q[uúùûü][iíìîï][aáãàâä]|" // contém																// 'Paróquia'				+ "c[aáãàâä]s[aáãàâä]|" // contém 'Casa'				+ "c[aáãàâä][iíìîï]x[aáãàâä]|" // contém 'Caixa'				+ "c[oóòôõö]m[eéèêë]rc[iíìîï][oóòôõö]|" // contém 'Comércio'				+ "b[aáãàâä]nc[oóòôõö]" // contém 'Banco'				+ ")','i') " // sem diferenciação de caracteres maiúsculos e								// minúsculos				+ "   and not REGEXP_LIKE(lower(clie.clie_nmcliente) , "				+ "         '(br[aáãàâä]s[iíìîï]l g[aáãàâä]s|" // contém 'Brasil																// Gás'				+ "l[oóòôõö]j[aáãàâä]|" // contém 'Loja'				+ "[aáãàâä]ss[eéèêë]mbl[eéèêë][iíìîï][aáãàâä]|" // contém																// 'Assembléia'				+ "pr[iíìîï]v[eéèêë]|" // contém 'Privê'				+ "c[oóòôõö]nd[oóòôõö]m[iíìîï]n[iíìîï][oóòôõö]|" // contém																	// 'Condomínio'				+ "^r[eéèêë]st|" // inicia com 'Rest'				+ " r[eéèêë]st |" // contém 'Rest'				+ "$ r[eéèêë]st|" // termina com 'Rest'				+ "r[eéèêë]st[aáãàâä][uúùûü]r[aáãàâä]nt[eéèêë]|" // contém																	// 'Restaurante'				+ "h[oóòôõö]t[eéèêë]l|" // contém 'Hotel'				+ "p[oóòôõö][uúùûü]s[aáãàâä]d[aáãàâä]|" // contém 'Pousada'				+ "[eéèêë]ng[eéèêë]nh[eéèêë][iíìîï]r[oóòôõö]|" // contém																// 'Engenheiro'				+ "^[eéèêë]ng |" // inicia com 'Eng'				+ " [eéèêë]ng |" // contém 'Eng'				+ "$ [eéèêë]ng|" // termina com 'Eng'				+ "^s[aáãàâä] |" // inicia com 'SA '				+ "^s [aáãàâä] |" // inicia com 'S A '				+ "^s.[aáãàâä]. |" // inicia com 'S.A. '				+ "^s. [aáãàâä]. " // inicia com 'S. A. '				+ ")','i') " // sem diferenciação de caracteres maiúsculos e								// minúsculos				+ "   and not REGEXP_LIKE(lower(clie.clie_nmcliente) , "				+ "         '(s[aáãàâä] |" // contém com ' SA'				+ " s [aáãàâä] |" // contém com ' S A'				+ " s.[aáãàâä]. |" // contém com ' S.A.'				+ " s. [aáãàâä]. " // contém com ' S. A.'				+ "$ s[aáãàâä]|" // termina com ' SA'				+ "$ s [aáãàâä]|" // termina com ' S A'				+ "$ s.[aáãàâä].|" // termina com ' S.A.'				+ "$ s. [aáãàâä].|" // termina com ' S. A.'				+ "ltd[aáãàâä]|" // contém 'LTDA'				+ "l t d [aáãàâä]|" // contém 'LTDA'				+ "l.t.d.[aáãàâä]|" // contém 'LTDA'				+ "l. t. d. [aáãàâä]|" // contém 'LTDA'				+ "c[oóòôõö]m|" // contém 'COM'				+ "^[eéèêë]xp |" // inicia com 'EXP'				+ " [eéèêë]xp |" // contém 'EXP'				+ "$ [eéèêë]xp|" // termina com 'EXP'				+ "[eéèêë]df" // contém 'EDF' (Edifício)				+ ")','i') " // sem diferenciação de caracteres maiúsculos e								// minúsculos				+ "   and not REGEXP_LIKE(lower(clie.clie_nmcliente) , "				+ "         '([eéèêë]d[iíìîï]f[iíìîï]c[iíìîï][oóòôõö]|" // contém																		// 'Edifício'				+ "[aáãàâä]p[aáãàâä]rt[aáãàâä]m[eéèêë]nt[oóòôõö]|" // contém																	// 'Apartamento'				+ "^[aáãàâä]pt |" // inicia com 'Apt'				+ " [aáãàâä]pt |" // cotém 'Apt'				+ "$ [aáãàâä]pt|" // termina com 'Apt'				+ "[aáãàâä]pt[oóòôõö]|" // contém 'apto'				+ "pr[eéèêë]d[iíìîï][oóòôõö]|" // contém 'Prédio'				+ "m[eéèêë]rc[aáãàâä]d[oóòôõö]|" // contém 'Mercado'				+ "m[eéèêë]rc[aáãàâä]d[iíìîï]nh[oóòôõö]|" // contém 'Mercadinho'				+ "m[eéèêë]rc[eéèêë][aáãàâä]r[iíìîï][aáãàâä]|" // contém																// 'Mercearia'				+ "f[aáãàâä]br[iíìîï]c[aáãàâä]|" // contém 'Fabrica'				+ "^c[iíìîï][aáãàâä] |" // inicia com 'CIA'				+ " c[iíìîï][aáãàâä] |" // contém 'CIA'				+ "$ c[iíìîï][aáãàâä]|" // termina com 'CIA'				+ "[iíìîï]nd[uúùûü]str[iíìîï][aáãàâä]|" // contém 'Industria'				+ "[eéèêë]sc[oóòôõö]l[aáãàâä]|" // contém 'Escola'				+ "c[oóòôõö]l[eéèêë]g[iíìîï][oóòôõö]" // contém 'Colegio'				+ ")','i') " // sem diferenciação de caracteres maiúsculos e								// minúsculos				+ "   and not REGEXP_LIKE(lower(clie.clie_nmcliente) , "				+ "         '(c[uúùûü]rs[oóòôõö]|" // contém 'Curso'				+ "c[uúùûü]rs[iíìîï]nh[oóòôõö]|" // contém 'Cursinho'				+ "f[aáãàâä]c[uúùûü]ld[aáãàâä]d[eéèêë]|" // contém 'Faculdade'				+ "[uúùûü]n[iíìîï]v[eéèêë]rs[iíìîï]d[aáãàâä]d[eéèêë]|" // contém																		// 'Universidade'				+ "^[uúùûü]n[iíìîï]v |" // inicia com 'UNIV'				+ "[aáãàâä]c[aáãàâä]d[eéèêë]m[iíìîï][aáãàâä]|" // contém																// 'Academia'				+ "b[oóòôõö]mb[oóòôõö]n[iíìîï][eéèêë]r[eéèêë]|" // contém																// 'Bomboniere'				+ "[eéèêë]mpr[eéèêë]s[aáãàâä]|" // contém 'Empresa'				+ "p[aáãàâä]d[aáãàâä]r[iíìîï][aáãàâä]|" // contém 'Padaria'				+ "f[aáãàâä]rm[aáãàâä]c[iíìîï][aáãàâä]|" // contém 'Farmacia'				+ "l[aáãàâä]nch[oóòôõö]n[eéèêë]t[eéèêë]|" // contém 'Lanchonete'				+ "l[aáãàâä]nch[eéèêë]|" // contém 'lanche'				+ "d[eéèêë]l[iíìîï]c[aáãàâä]t[eéèêë]ss[eéèêë]n" // contém																// 'Delicatessen'				+ ")','i') " // sem diferenciação de caracteres maiúsculos e								// minúsculos				+ "   and not REGEXP_LIKE(lower(clie.clie_nmcliente) , "				+ "         '(p[oóòôõö]st[oóòôõö]|" // contém 'posto'				+ "caáãàâä]rt[oóòôõö]r[iíìîï][oóòôõö]|" // contém 'Cartorio'				+ "c[oóòôõö]nv[eéèêë]nt[oóòôõö]|" // contém 'Convento'				+ "p[aáãàâä]p[eéèêë]l[aáãàâä]r[iíìîï][aáãàâä]|" // contém																// 'Papelaria'				+ "s[eéèêë]cr[eéèêë]t[aáãàâä]r[iíìîï][aáãàâä]|" // contém																// 'Secretaria'				+ "[eéèêë]scr[iíìîï]t[oóòôõö]r[iíìîï][oóòôõö]|" // contém																// 'Escritório'				+ "pr[oóòôõö]d[uúùûü]t[oóòôõö]|" // contém 'Produto'				+ "h[oóòôõö]sp[iíìîï]t[aáãàâä]l|" // contém 'Hospital'				+ "c[oóòôõö]ns[uúùûü]lt[oóòôõö]r[iíìîï][oóòôõö]|" // contém																	// 'Consultorio'				+ "m[eéèêë]d[iíìîï]c[oóòôõö]|" // contém 'Medico'				+ "d[iíìîï]str[iíìîï]b[uúùûü][iíìîï]d[oóòôõö]r" // contém																// 'Distribuidor'				+ ")','i') "; // sem diferenciação de caracteres maiúsculos e								// minúsculos		return consulta;	}	/**	 * [UC1289] Gerar Base de Cliente para Sorteio	 * 	 * 3.1. O Sistema deverá obter todas as contas da fatura 07/2011 até a	 * fatura 12/2011	 * 	 * @author Mariana Victor	 * @date 02/03/2012	 * 	 * @param idImovel	 * @return Collection<Object[]>	 * @throws ErroRepositorioException	 */	public Collection<Object[]> pesquisarDadosContasImovelSorteio(			Integer idImovel) throws ErroRepositorioException {		Collection<Object[]> retorno = null;		Session session = HibernateUtil.getSession();		try {			String consulta = " select cnhi.cnhi_dtvencimentoconta AS vencimentoConta, "					+ "   cnhi.cnhi_iccobrancamulta AS indicadorCobrancaMulta, "					+ "   pghi.pghi_dtpagamento AS dataPagamento "					+ " from faturamento.conta_historico cnhi "					+ "   inner join arrecadacao.pagamento_historico pghi on (pghi.cnta_id = cnhi.cnta_id) "					+ " where cnhi.imov_id = :idImovel "					+ "     and cnhi.cnhi_amreferenciaconta between 201107 and 201112 " // 201104																						// and																						// 201109					+ "     and pghi.pghi_amreferenciapagamento = cnhi.cnhi_amreferenciaconta "					+ "     and pghi.dotp_id = :documentoTipoConta "					+ "     and cnhi.cnhi_dtvencimentooriginal = cnhi.cnhi_dtvencimentoconta "					+ "     and cnhi.cnhi_dtvencimentooriginal between to_date('2011-08-01','yyyy-mm-dd') " // 2011-05-01					+ "                                           and to_date('2012-01-31','yyyy-mm-dd') " // 2011-10-30					+ "		and cnhi.dcst_idatual = 0 ";			retorno = (Collection<Object[]>) session.createSQLQuery(consulta)					.addScalar("vencimentoConta", Hibernate.DATE)					.addScalar("indicadorCobrancaMulta", Hibernate.SHORT)					.addScalar("dataPagamento", Hibernate.DATE)					.setInteger("documentoTipoConta", DocumentoTipo.CONTA)					.setInteger("idImovel", idImovel).list();		} catch (HibernateException e) {			throw new ErroRepositorioException(e, "Erro no Hibernate");		} finally {			HibernateUtil.closeSession(session);		}		return retorno;	}	/**	 * [UC1289] Gerar Base de Cliente para Sorteio	 * 	 * 3.4.1. Imóvel com conta vencida anterior a 01/07/2011 e pagamento	 * posterior a 02/07/2011	 * 	 * @author Mariana Victor	 * @date 27/03/2012	 * 	 * @param idImovel	 * @return boolean	 * @throws ErroRepositorioException	 */	public boolean verificarImovelSorteioContaVencidaAnterior(Integer idImovel)			throws ErroRepositorioException {		boolean retorno = false;		Session session = HibernateUtil.getSession();		try {			String consulta = " select count(*) AS quantidade "					+ " from faturamento.conta_historico cnhi "					+ "   inner join arrecadacao.pagamento_historico pghi on (pghi.cnta_id = cnhi.cnta_id) "					+ " where cnhi.imov_id = :idImovel "					+ "     and cnhi.cnhi_dtvencimentooriginal < to_date('2011-07-01','yyyy-mm-dd') " // 2011-04-01					+ "     and pghi.pghi_dtpagamento >= to_date('2011-07-01','yyyy-mm-dd') "; // 2011-04-01			Integer quantidade = (Integer) session.createSQLQuery(consulta)					.addScalar("quantidade", Hibernate.INTEGER)					.setInteger("idImovel", idImovel).setMaxResults(1)					.uniqueResult();			if (quantidade != null && quantidade > 0) {				retorno = true;			}		} catch (HibernateException e) {			throw new ErroRepositorioException(e, "Erro no Hibernate");		} finally {			HibernateUtil.closeSession(session);		}		return retorno;	}	/**	 * [UC1289] Gerar Base de Cliente para Sorteio	 * 	 * 3.4.2. Imóvel com parcelamento efetuado após 01/07/2011	 * 	 * @author Mariana Victor	 * @date 27/03/2012	 * 	 * @param idImovel	 * @return boolean	 * @throws ErroRepositorioException	 */	public boolean verificarImovelSorteioParcelamentoEfetuado(Integer idImovel)			throws ErroRepositorioException {		boolean retorno = false;		Session session = HibernateUtil.getSession();		try {			String consulta = " select count(*) AS quantidade "					+ " from cobranca.parcelamento parc "					+ " where parc.imov_id = :idImovel "					+ "     and parc.pcst_id in (1,5) "					+ "     and parc.parc_tmparcelamento >= to_date('2011-07-01','yyyy-mm-dd') "; // 2011-04-01			Integer quantidade = (Integer) session.createSQLQuery(consulta)					.addScalar("quantidade", Hibernate.INTEGER)					.setInteger("idImovel", idImovel).setMaxResults(1)					.uniqueResult();			if (quantidade != null && quantidade > 0) {				retorno = true;			}		} catch (HibernateException e) {			throw new ErroRepositorioException(e, "Erro no Hibernate");		} finally {			HibernateUtil.closeSession(session);		}		return retorno;	}	/**	 * [UC1289] Gerar Base de Cliente para Sorteio	 * 	 * 3.4.3. Imóvel com a conta da fatura 01/2012 não quitada	 * 	 * @author Mariana Victor	 * @date 27/03/2012	 * 	 * @param idImovel	 * @return boolean	 * @throws ErroRepositorioException	 */	public boolean verificarImovelSorteioFaturaNaoQuitada(Integer idImovel)			throws ErroRepositorioException {		boolean retorno = false;		Session session = HibernateUtil.getSession();		try {			String consulta = " select count(*) AS quantidade "					+ " from faturamento.conta_historico cnhi "					+ "   left join arrecadacao.pagamento_historico pghi on (pghi.cnta_id = cnhi.cnta_id) "					+ " where cnhi.imov_id = :idImovel "					+ "     and cnhi.cnhi_amreferenciaconta = 201201 " // 201110					+ "     and pghi.pghi_id is null ";			Integer quantidade = (Integer) session.createSQLQuery(consulta)					.addScalar("quantidade", Hibernate.INTEGER)					.setInteger("idImovel", idImovel).setMaxResults(1)					.uniqueResult();			if (quantidade != null && quantidade > 0) {				retorno = true;			}		} catch (HibernateException e) {			throw new ErroRepositorioException(e, "Erro no Hibernate");		} finally {			HibernateUtil.closeSession(session);		}		return retorno;	}	/**	 * RM6655 - criação de etapa no programa de acompanhamento de OS no	 * smartphone [UC1325] Substituir Hidrômetro Acompanhamento Serviço [SB0003]	 * - Atualizar Imóvel/Ligação de Água.	 * 	 * @autor Fernanda Almeida	 * @date 24/04/2012	 * @throws ErroRepositorioException	 */	public LigacaoAgua pesquisarLigacaoAgua(Integer idImovel)			throws ErroRepositorioException {		LigacaoAgua retorno = null;		Session session = HibernateUtil.getSession();		String consulta = null;		try {			consulta = "SELECT lagu FROM LigacaoAgua lagu "					+ "WHERE lagu.id = :idImovel";			retorno = (LigacaoAgua) session.createQuery(consulta)					.setInteger("idImovel", idImovel).setMaxResults(1)					.uniqueResult();		} catch (HibernateException e) {			throw new ErroRepositorioException(e, "Erro no Hibernate");		} finally {			HibernateUtil.closeSession(session);		}		return retorno;	}	/**	 * 	 * @autor Rodrigo Cabral	 * @date 06/06/2012	 * @throws ErroRepositorioException	 */	public Short pesquisarIndicadorTipoCalcArea(Integer servicoTipoId)			throws ErroRepositorioException {		Short retorno = null;		Session session = HibernateUtil.getSession();		try {			String consulta = " select svtp_tpcalcarea as indicadorTipoCalcArea "					+ " from atendimentopublico.servico_tipo "					+ " where svtp_id = :servicoTipoId ";			retorno = (Short) session.createSQLQuery(consulta)					.addScalar("indicadorTipoCalcArea", Hibernate.SHORT)					.setInteger("servicoTipoId", servicoTipoId).uniqueResult();		} catch (HibernateException e) {			throw new ErroRepositorioException(e, "Erro no Hibernate");		} finally {			HibernateUtil.closeSession(session);		}		return retorno;	}	/**	 * [UC1295] Efetuar Sorteio de Prêmios	 * 	 * [SB008] - Verificar Critérios Cadastrais Sorteio Mensal.	 * 	 * @author Mariana Victor	 * @date 26/10/2012	 * 	 * @param idImovel	 * @return boolean	 * @throws ErroRepositorioException	 */	public boolean verificarImovelAptoSorteioMensal(Integer idImovel)			throws ErroRepositorioException {		boolean retorno = false;		Session session = HibernateUtil.getSession();		try {			String consulta = "select count(imov.imov_id) AS quantidade "					+ " from cadastro.imovel imov "					+ "   inner join cadastro.cliente_imovel clim on (clim.imov_id = imov.imov_id "					+ "                                           and clim.crtp_id = :clienteUsuario "					+ "                                           and clim.clim_dtrelacaofim is null) "					+ "   inner join cadastro.cliente clie on (clie.clie_id = clim.clie_id) "					+ " where imov.imov_qteconomia = 1 "					+ "   and imov.imov_idcategoriaprincipal = :categoriaResidencial "					+ "   and imov.imov_id = :idImovel ";			consulta = this.adicionaCondicionaisNomesClientes(consulta);			consulta = consulta + "   and imov.imov_icexclusao = 2 "					+ "   and clie.clie_nncpf is not null "					+ "   and clie.clie_nmcliente is not null "					+ "	  and LENGTH(trim(clie.clie_nmcliente)) >= 10 ";			consulta = consulta + " group by imov.imov_id, clie.clie_nncpf ";			Integer quantidade = (Integer) session.createSQLQuery(consulta)					.addScalar("quantidade", Hibernate.INTEGER)					.setInteger("clienteUsuario", ClienteRelacaoTipo.USUARIO)					.setInteger("categoriaResidencial", Categoria.RESIDENCIAL)					.setInteger("idImovel", idImovel).setMaxResults(1)					.uniqueResult();			if (quantidade != null					&& quantidade.compareTo(new Integer("0")) > 0) {				retorno = true;			}		} catch (HibernateException e) {			throw new ErroRepositorioException(e, "Erro no Hibernate");		} finally {			HibernateUtil.closeSession(session);		}		return retorno;	}	/**	 * [UC0250] Consultar Devolução	 * 	 * @author Ana Maria	 * @date 28/11/2012	 * 	 */	public Collection<RegistroAtendimentoDevolucaoValores> pesquisarDevolucaoValoresRA(String idImovel)			 throws ErroRepositorioException{				Session session = HibernateUtil.getSession();		String sql = "";		Collection<RegistroAtendimentoDevolucaoValores>  retorno = null;				try{					sql = " select radv " +				  " from RegistroAtendimentoDevolucaoValores radv " +				  " where imov_id =:idImovel";						retorno = session.createQuery(sql).					setString("idImovel", idImovel).list();					// Erro no hibernate		} catch (HibernateException e) {			// Levanta a exceção para a próxima camada			throw new ErroRepositorioException(e, "Erro no Hibernate");		} finally {			// Fecha a sessão			HibernateUtil.closeSession(session);		}				return retorno;	}	/**	 * [UC1398] - Definir Equipes a Serem Acompanhadas [IT0003] - Pesquisar	 * Unidades Organizacionais	 * 	 * @return Collection<UnidadeOrganizacional>	 * @throws ErroRepositorioException	 */	public Collection<UnidadeOrganizacional> obterUnidadesOrganizacionaisAssociadasEquipe()			throws ErroRepositorioException {		Collection<UnidadeOrganizacional> retorno = null;		Session session = HibernateUtil.getSession();		String consulta = null;		try {			consulta = "select distinct uo \n"					+ " from gcom.atendimentopublico.ordemservico.Equipe e \n "					+ " inner join e.unidadeOrganizacional uo \n"					+ " inner join fetch uo.empresa empr \n"						+ " where e.indicadorProgramacaoAutomatica=1 \n"					+ " order by uo.descricao ";			retorno = session.createQuery(consulta).list();		} catch (HibernateException e) {			throw new ErroRepositorioException(e, "Erro no Hibernate");		} finally {			HibernateUtil.closeSession(session);		}		return retorno;	}	/**	 * [UC1398] - Definir Equipes a Serem Acompanhadas	 * 	 * @return ArrayList<UnidadeOrganizacional>	 * @throws ErroRepositorioException	 */	public void excluirUnidadesOrganizacionaisAssociadasUsuario(			Integer idUsuario) throws ErroRepositorioException {		Session session = HibernateUtil.getSession();		PreparedStatement st = null;		try {			Connection jdbcCon = session.connection();			String delete = "delete from atendimentopublico.usuario_unid_acomp_equip where usur_id = ?";			st = jdbcCon.prepareStatement(delete);			st.setInt(1, idUsuario.intValue());			st.executeUpdate();		} catch (SQLException e) {			// e.printStackTrace();			throw new ErroRepositorioException(e, "Erro no Hibernate");		} finally {			if (null != st)				try {					st.close();				} catch (SQLException e) {					throw new ErroRepositorioException(e, "Erro no Hibernate");				}			HibernateUtil.closeSession(session);		}	}	/**	 * [UC1388] - Consultar Mensagens Enviadas Via SMS	 * 	 * @author Ricardo Germinio	 * @date 05/11/2012	 * 	 * @throws ErroRepositorioException	 */	public Collection<MensagemSms> consultarMensagensEnviadasViaSms(			MensagemSmsHelper helper) throws ErroRepositorioException {		Collection<MensagemSms> retorno = null;		Session session = HibernateUtil.getSession();		Query query = null;		String consulta = null;		try {			consulta = "SELECT  msms"					+ " FROM MensagemSms msms"					+ " LEFT JOIN FETCH msms.smsTipo smsTipo"					+ " WHERE msms.dataHoraEnvio between :dtInicial and :dtFinal";						if (helper.getTipoSms() != null					&& !helper.getTipoSms().equals("-1")) {				consulta = consulta + " AND msms.smsTipo.id = :tipoSms";			}			if (helper.getSituacaoMensagem() != null					&& !helper.getSituacaoMensagem().equals(							ConstantesSistema.TODOS)) {				consulta = consulta						+ " AND msms.indicadorEnvio = :indicadorEnvio";			}			consulta = consulta + " order by msms.dataHoraEnvio";						query = session					.createQuery(consulta)					.setTimestamp("dtInicial",							Util.formatarDataInicial(helper.getDataInicial()))					.setTimestamp("dtFinal",							Util.formatarDataFinal(helper.getDataFinal()));			if (helper.getTipoSms() != null					&& !helper.getTipoSms().equals("-1")) {				query.setParameter("tipoSms", helper.getTipoSms());			}			if (helper.getSituacaoMensagem() != null					&& !helper.getSituacaoMensagem().equals(							ConstantesSistema.TODOS)) {				query.setParameter("indicadorEnvio",						helper.getSituacaoMensagem());			}			retorno = query.list();		} catch (HibernateException e) {			throw new ErroRepositorioException(e, "Erro no Hibernate");		} finally {			HibernateUtil.closeSession(session);		}		return retorno;	}	/**	 * Retorna o único registro do ParametrosSms.	 * 	 * @author Carlos Chaves	 * @date 14/13/2012	 * @return Descrição do retorno	 * @exception ErroRepositorioException	 *                Descrição da exceção	 */	public ParametrosSms pesquisarParametrosSms()			throws ErroRepositorioException {		Session session = HibernateUtil.getSession();		try {			return (ParametrosSms) session.createCriteria(ParametrosSms.class)					.uniqueResult();		} catch (HibernateException e) {			throw new ErroRepositorioException(e, "Erro no Hibernate");		} finally {			HibernateUtil.closeSession(session);		}	}		/**	 * [UC0424] Consultar Registro de Atendimento	 * 	 * @author Ana Maria	 * @date 05/12/2012	 * 	 */	public Collection<RegistroAtendimentoDevolucaoValores> pesquisarDevolucaoValoresRegistroAtendimento(String idRA)			 throws ErroRepositorioException{				Session session = HibernateUtil.getSession();		String sql = "";		Collection<RegistroAtendimentoDevolucaoValores>  retorno = null;				try{					sql = " select radv " +				  " from RegistroAtendimentoDevolucaoValores radv " +				  " left join fetch radv.contaGeral cg " +				  " left join fetch radv.debitoACobrarGeral dbacg " +				  " left join fetch radv.guiaPagamentoGeral gpagg " +				  " where rgat_id =:idRA";						retorno = session.createQuery(sql).					setString("idRA", idRA).list();					// Erro no hibernate		} catch (HibernateException e) {			// Levanta a exceção para a próxima camada			throw new ErroRepositorioException(e, "Erro no Hibernate");		} finally {			// Fecha a sessão			HibernateUtil.closeSession(session);		}				return retorno;	}		/**	 * [UC1469] - Retirar Esgoto de Factível Faturável	 * [SB0001 - Excluir Ligação de Esgoto para Situação Factível Faturável].	 * @author Arthur Carvalho	 * @date 24/05/2013	 * 	 * @param idsLigacaoEsgoto	 * @throws ErroRepositorioException	 */	public void removerLigacaoEsgoto(Collection<Integer> idsLigacaoEsgoto) throws ErroRepositorioException {		String remocao = null;		Session session = HibernateUtil.getSession();		try {			remocao = "delete LigacaoEsgoto "					+ "where lesg_id IN (:ids)";			session.createQuery(remocao)					.setParameterList("ids", idsLigacaoEsgoto)					.executeUpdate();		} catch (HibernateException e) {			// levanta a exceção para a próxima camada			throw new ErroRepositorioException(e, "Erro no Hibernate");		} finally {			// fecha a sessão			HibernateUtil.closeSession(session);		}	}	/**	 * [UC1477] - Atualizar Contas Valores Esgoto PPP	 * 	 * @author Mariana Victor,  Ana Maria	 * @date 14/06/2013	 * 	 */	public boolean verificarIndicadorFaturamentoSituacao(Integer idLigacaoEsgotoSituacao)			 throws ErroRepositorioException{				Session session = HibernateUtil.getSession();		String sql = "";		boolean  retorno = false;				try{					sql = " select lest_icfaturamento as indicadorFaturamentoSituacao " +				  " from atendimentopublico.ligacao_esgoto_situacao " +				  " where lest_id =:idLigacaoEsgotoSituacao";						Short indicadorFaturamentoSituacao = (Short) session.createSQLQuery(sql)					.addScalar("indicadorFaturamentoSituacao", Hibernate.SHORT)					.setInteger("idLigacaoEsgotoSituacao", idLigacaoEsgotoSituacao)					.setMaxResults(1)					.uniqueResult();						if (indicadorFaturamentoSituacao != null 					&& indicadorFaturamentoSituacao.compareTo((ConstantesSistema.INDICADOR_USO_ATIVO)) == 0) {				retorno = true; 			}					// Erro no hibernate		} catch (HibernateException e) {			// Levanta a exceção para a próxima camada			throw new ErroRepositorioException(e, "Erro no Hibernate");		} finally {			// Fecha a sessão			HibernateUtil.closeSession(session);		}				return retorno;	}		/**	 * @author Anderson Cabral	 * @date 17/06/2013	 * 	 * @throws ErroRepositorioException	 */	public Integer pesquisarQTDServicoExecutadoLojaVirtual(Date periodoInicial,			Date periodoFinal, String tipoAtendimento)			throws ErroRepositorioException {		Session session = HibernateUtil.getSession();		Integer qtdServicoExecutado = null;		String consulta = null;		try {			consulta = "select count(aclj.id) from AcessoLojaVirtual aclj where"					+ " aclj.ultimaAlteracao >= :periodoInicial  and "					+ " aclj.ultimaAlteracao <= :periodoFinal  and "					+ " aclj.numeroCodigoAtendimento   = " + tipoAtendimento + " AND "					+ " aclj.indicadorServicoExecutado = " + ConstantesSistema.SIM;						if (periodoInicial == null || periodoInicial.equals("")) {				periodoInicial = Util.criarData(1, 1, 2011);			}			if (periodoFinal == null || periodoFinal.equals("")) {				periodoFinal = new Date();			}			consulta = consulta + " group by aclj.numeroCodigoAtendimento  ";			qtdServicoExecutado = (Integer) session					.createQuery(consulta)					.setTimestamp("periodoInicial",							Util.formatarDataInicial(periodoInicial))					.setTimestamp("periodoFinal",							Util.formatarDataFinal(periodoFinal)).uniqueResult();		} catch (HibernateException e) {			throw new ErroRepositorioException(e, "Erro no Hibernate");		} finally {			HibernateUtil.closeSession(session);		}		return qtdServicoExecutado;	}			/**	 * [UC1499] Consultar Dados Arquivo Texto OS Cobrança para Smartphone	 * 	 * Retorna as informações das ordens de serviço 	 * 	 * @author Bruno Barros	 * @date 27/06/2013	 * 	 * @param Integer	 * 	 * @return Collection<Object[]> 	 * @throws ControladorException	 */	public Collection<Object[]> 		pesquisarDadosOrdensServicoCobrancaSmartphone(Integer idArquivoTexto)				throws ErroRepositorioException {		Session sessao = HibernateUtil.getSession();		Collection<Object[]> retorno = null;		try {						String consulta = 					" SELECT \n" +  					"   EOOS.ORSE_ID idOrdemServico, \n" + // 0					"   orse.IMOV_ID idImovel, \n" + // 1					"   EOOS_CDSITUACAO situacaoOS, \n" + // 2					"   EOOS_TMRECEBIMENTO dataRecebimento, \n" + // 3					"   EOOS_ICCONFERIDA indicadorConferida, \n" + // 4					"   rota.ftgr_id AS grupoFaturamento, \n" + // 5					"   last.last_dsligacaoaguasituacao AS ligAguaSituacao, \n" + //6					"   lest.lest_dsligacaoesgotosituacao AS ligEsgSituacao, \n" + // 7 					"   lesg.lesg_nnconsumominimoesgoto AS consumoFixoEsgoto, \n" +  // 8					"   imov.imov_tmultimaalteracao AS ultimaAlteracao, \n" + // 9					"   svtp.svtp_dsservicotipo AS descServivoTipo, \n" + // 10					"   svtp.svtp_icfiscalizacaoinfracao as indicadorFiscalizacaoInfracao \n" + //11					" FROM \n" + 					"   MOBILE.EXE_OS_ORDEM_SERVICO EOOS \n" +					"   INNER JOIN atendimentopublico.ordem_servico orse ON EOOS.orse_id = orse.orse_id \n" +					"   INNER JOIN atendimentopublico.servico_tipo svtp on svtp.svtp_id = orse.svtp_id " +					"   INNER JOIN cadastro.imovel imov ON imov.imov_id = orse.imov_id \n" +					"   INNER JOIN cadastro.quadra qdra ON qdra.qdra_id = imov.qdra_id \n" +					"   INNER JOIN micromedicao.rota rota ON qdra.rota_id = rota.rota_id \n" +					"   LEFT JOIN atendimentopublico.ligacao_agua_situacao last ON last.last_id = imov.last_id \n" +					"   LEFT JOIN atendimentopublico.ligacao_esgoto_situacao lest ON lest.lest_id = imov.lest_id \n" +					"   LEFT JOIN atendimentopublico.ligacao_esgoto lesg ON lesg.lesg_id = orse.imov_id \n" +					" WHERE \n" + 					"   EOOS.AOSC_ID = :idArquivoTexto \n" +					" ORDER BY \n" + 					"   EOOS.orse_id";						retorno = sessao.createSQLQuery(consulta)					.addScalar("idOrdemServico", Hibernate.INTEGER)					.addScalar("idImovel", Hibernate.INTEGER)					.addScalar("situacaoOS", Hibernate.SHORT)					.addScalar("dataRecebimento", Hibernate.TIMESTAMP)					.addScalar("indicadorConferida", Hibernate.INTEGER)					.addScalar("grupoFaturamento", Hibernate.INTEGER)					.addScalar("ligAguaSituacao", Hibernate.STRING)					.addScalar("ligEsgSituacao", Hibernate.STRING)					.addScalar("consumoFixoEsgoto", Hibernate.INTEGER)					.addScalar("ultimaAlteracao", Hibernate.TIMESTAMP)					.addScalar("descServivoTipo", Hibernate.STRING)					.addScalar("indicadorFiscalizacaoInfracao", Hibernate.INTEGER)					.setInteger("idArquivoTexto", idArquivoTexto).list();		} catch (HibernateException e) {			throw new ErroRepositorioException(e, "Erro no Hibernate");		} finally {			HibernateUtil.closeSession(sessao);		}		return retorno;	}			/**	 * [UC1477] - Atualizar Contas Valores Esgoto PPP	 * 	 * @author Mariana Victor,  Ana Maria	 * @date 18/06/2013	 * 	 */	public Object[] pesquisarDadosImovelCaucularPPP(Integer idImovel)			throws ErroRepositorioException {		Session sessao = HibernateUtil.getSession();		Object[] retorno = null;		try {			String consulta = "SELECT imov.imov_id as idImovel, "  //0					        + "	ftgr.ftgr_amreferencia as anomesreferenciafat," //1					        + " ftgr.ftgr_id as idFatGrupo," //2					        + " lasts.last_icfaturamento as indicadorfatLigAgua, " //3							+ " lest.lest_icfaturamento as indicadorfatLigEsgoto, " //4							+ " cstf.cstf_id as idConsumoTarifa " //5							+ " from cadastro.imovel imov "							+ " inner join FATURAMENTO.consumo_tarifa cstf on(imov.cstf_id = cstf.cstf_id) "							+ " inner join CADASTRO.quadra qdra on(qdra.qdra_id = imov.qdra_id) "							+ " inner join ATENDIMENTOPUBLICO.ligacao_agua_situacao lasts on(lasts.last_id = imov.last_id) "							+ " inner join ATENDIMENTOPUBLICO.ligacao_esgoto_situacao lest on(lest.lest_id = imov.lest_id) "							+ " inner join MICROMEDICAO.rota rota on(rota.rota_id = qdra.rota_id) "							+ " inner join FATURAMENTO.faturamento_grupo ftgr on(ftgr.ftgr_id = rota.ftgr_id) "							+ " WHERE imov.imov_id = :idImovel ";			retorno = (Object[]) sessao.createSQLQuery(consulta)					.addScalar("idImovel", Hibernate.INTEGER)					.addScalar("anomesreferenciafat", Hibernate.INTEGER)					.addScalar("idFatGrupo", Hibernate.INTEGER)					.addScalar("indicadorfatLigAgua", Hibernate.SHORT)					.addScalar("indicadorfatLigEsgoto", Hibernate.SHORT)					.addScalar("idConsumoTarifa", Hibernate.INTEGER)					.setInteger("idImovel", idImovel)					.setMaxResults(1).uniqueResult();		} catch (HibernateException e) {			throw new ErroRepositorioException(e, "Erro no Hibernate");		} finally {			HibernateUtil.closeSession(sessao);		}		return retorno;	}		public Integer pesquisarIdImovelAssociadoAOrdemCobrancaSmartphone(			Integer idOrdemServico) throws ErroRepositorioException {		Session sessao = HibernateUtil.getSession();		Integer retorno = null;		try {			String consulta = "SELECT "					+ "orse.imov_id AS idImovel " // 1					+ "FROM atendimentopublico.ordem_servico orse "					+ "WHERE orse.orse_id = :idOrdemServico ";			retorno = (Integer) sessao.createSQLQuery(consulta)					.addScalar("idImovel", Hibernate.INTEGER)					.setInteger("idOrdemServico", idOrdemServico)					.setMaxResults(1).uniqueResult();		} catch (HibernateException e) {			throw new ErroRepositorioException(e, "Erro no Hibernate");		} finally {			HibernateUtil.closeSession(sessao);		}		return retorno;	}		/**[UC1534] Gerar Ordem de Servico Conexao Esgoto	 * @author: Jonathan Marcos	 * @date:12/08/2013	 */	public Collection<Object[]> pesquisarImoveisComandoOsConexaoEsgoto(		ComandoOSConexaoEsgoto comandoOSConexaoEsgoto) throws ErroRepositorioException{		Session sessao = HibernateUtil.getSession();		Collection retorno = null;		String scriptSql = "";		try {			// Se o objeto filtro for por imovel			if(comandoOSConexaoEsgoto.getImovel()!=null){				scriptSql = "SELECT" +				 		   " cno.unid_id AS idUnidadeOrganizacional,"+				 		   " ci.imov_id AS idImovel," +				 		   " cm.muni_nmmunicipio as nomeMunicipio"+				 		   " FROM cadastro.imovel ci" +				 		   " INNER JOIN cadastro.unidade_organizacional cno ON (cno.loca_id=ci.loca_id)"+				 		   " INNER JOIN cadastro.imovel_perfil cip on (ci.iper_id=cip.iper_id)" +				 		   " INNER JOIN cadastro.localidade cl on (cl.loca_id=ci.loca_id)" +						   " INNER JOIN cadastro.municipio cm on (cm.muni_id=cl.muni_idprincipal)"+						   " WHERE" +				 		   " NOT EXISTS"+						   " (SELECT"+						   " * FROM"+ 						   " cadastro.imovel imov"+						   " INNER JOIN atendimentopublico.ordem_servico os ON (imov.imov_id=os.imov_id)"+						   " WHERE os.orse_tmencerramento IS NULL and imov.imov_id = ci.imov_id"  +						   " and os.svtp_id = :idServicoTipo )" +						   " AND ci.lest_id in (1,2)" +						   " AND ci.imov_icexclusao=2" +				 		   " AND ci.imov_id= :idImovel";								scriptSql += " GROUP BY" +							 " cno.unid_id,"+							 "ci.imov_id," +							 "cm.muni_nmmunicipio";				retorno = (Collection)sessao.createSQLQuery(scriptSql)						.addScalar("idUnidadeOrganizacional", Hibernate.INTEGER)						.addScalar("idImovel", Hibernate.INTEGER)						.addScalar("nomeMunicipio", Hibernate.STRING)						.setInteger("idServicoTipo", comandoOSConexaoEsgoto.getServicoTipo().getId())						.setInteger("idImovel", comandoOSConexaoEsgoto.getImovel().getId())						.list();			}else{				scriptSql += "SELECT" +							" cno.unid_id as idUnidadeOrganizacional,"+							" ci.imov_id as idImovel," +							" cm.muni_nmmunicipio as nomeMunicipio"+							" FROM cadastro.imovel ci" +							" INNER JOIN cadastro.unidade_organizacional cno on (cno.loca_id=ci.loca_id)"+							" INNER JOIN cadastro.imovel_perfil cip on (ci.iper_id=cip.iper_id)" +							" INNER JOIN cadastro.localidade cl on (cl.loca_id=ci.loca_id)"+							" INNER JOIN cadastro.municipio cm on (cm.muni_id=cl.muni_idprincipal)";				if(comandoOSConexaoEsgoto.getLogradouro()!=null){					scriptSql += " INNER JOIN cadastro.logradouro_bairro clb on (clb.lgbr_id=ci.lgbr_id)";				}				if(comandoOSConexaoEsgoto.getSetorComercialInicial()!=null && comandoOSConexaoEsgoto.getSetorComercialFinal()!=null){					scriptSql +=" INNER JOIN cadastro.setor_comercial csc on (csc.stcm_id=ci.stcm_id)";				}				if(comandoOSConexaoEsgoto.getQuadraInicial()!=null && comandoOSConexaoEsgoto.getQuadraFinal()!=null){					scriptSql +=" INNER JOIN cadastro.quadra cq ON (ci.qdra_id=cq.qdra_id)";				}				if(comandoOSConexaoEsgoto.getRotaInicial()!=null && comandoOSConexaoEsgoto.getRotaFinal()!=null){					scriptSql +=" INNER JOIN micromedicao.rota cr ON (cq.rota_id=cr.rota_id)";				}														scriptSql+=" WHERE" +						   " NOT EXISTS"+						   " (SELECT"+						   " * FROM"+ 						   " cadastro.imovel imov"+						   " INNER JOIN atendimentopublico.ordem_servico os ON (imov.imov_id=os.imov_id)"+						   " WHERE os.orse_tmencerramento IS NULL and imov.imov_id = ci.imov_id" +						   " and os.svtp_id = :idServicoTipo )" +						   " AND ci.lest_id in (1,2)"+						   " AND ci.imov_icexclusao=2";								if(comandoOSConexaoEsgoto.getMunicipio()!=null){					scriptSql += " AND cl.muni_idprincipal="+comandoOSConexaoEsgoto.getMunicipio().getId()+"";					if(comandoOSConexaoEsgoto.getLogradouro()!=null){						scriptSql +=" AND clb.logr_id="+comandoOSConexaoEsgoto.getLogradouro().getId()+"";					}				}else{					if(comandoOSConexaoEsgoto.getLocalidadeInicial()!=null && comandoOSConexaoEsgoto.getLocalidadeFinal()!=null){						scriptSql +=" AND ci.loca_id BETWEEN "+comandoOSConexaoEsgoto.getLocalidadeInicial().getId()+" AND "+comandoOSConexaoEsgoto.getLocalidadeFinal().getId()+"";						if(comandoOSConexaoEsgoto.getSetorComercialInicial()!=null && comandoOSConexaoEsgoto.getSetorComercialFinal()!=null){							scriptSql +=" AND csc.stcm_cdsetorcomercial BETWEEN "+comandoOSConexaoEsgoto.getSetorComercialInicial().getCodigo()+" AND "+comandoOSConexaoEsgoto.getSetorComercialFinal().getCodigo()+"";							if(comandoOSConexaoEsgoto.getQuadraInicial()!=null && comandoOSConexaoEsgoto.getQuadraFinal()!=null){								scriptSql +=" AND cq.qdra_nnquadra BETWEEN "+comandoOSConexaoEsgoto.getQuadraInicial().getNumeroQuadra()+" AND "+comandoOSConexaoEsgoto.getQuadraFinal().getNumeroQuadra()+"";								if(comandoOSConexaoEsgoto.getRotaInicial()!=null && comandoOSConexaoEsgoto.getRotaFinal()!=null){									scriptSql +=" AND cr.rota_cdrota BETWEEN "+comandoOSConexaoEsgoto.getRotaInicial().getCodigo()+" AND "+comandoOSConexaoEsgoto.getRotaFinal().getCodigo()+"";									if(comandoOSConexaoEsgoto.getRotaInicial().getNumeroSequenciaLeitura()!=null && comandoOSConexaoEsgoto.getRotaFinal().getNumeroSequenciaLeitura()!=null){										scriptSql +=" AND ci.imov_nnsequencialrota BETWEEN "+comandoOSConexaoEsgoto.getNumeroSequencialRotaInicial()+" AND "+comandoOSConexaoEsgoto.getNumeroSequencialRotaFinal()+"";									}								}							}						}					}				}								scriptSql +=" GROUP BY" +							" cno.unid_id,"+							"ci.imov_id," +							"cm.muni_nmmunicipio";				retorno = (Collection)sessao.createSQLQuery(scriptSql)						.addScalar("idUnidadeOrganizacional", Hibernate.INTEGER)						.addScalar("idImovel", Hibernate.INTEGER)						.addScalar("nomeMunicipio", Hibernate.STRING)						.setInteger("idServicoTipo", comandoOSConexaoEsgoto.getServicoTipo().getId())						.list();			}		} catch (HibernateException e) {			throw new ErroRepositorioException(e, "Erro no Hibernate");		} finally {			HibernateUtil.closeSession(sessao);		}		return retorno;	}	/** [UC1536] Gerar relatorio de Acompanhamento das O.S. de Cobrança para Smartphone 	 * 	 * @author Anderson Cabral	 * @since 19/08/2013	 */	public ArrayList<Object[]> pesquisarOSCobrancaSmartphoneAnalitico(RelatorioAcompanhamentoOSCobrancaSmartphoneHelper helper) 			throws ErroRepositorioException{				Session sessao = HibernateUtil.getSession();		ArrayList<Object[]> retorno = null;		SQLQuery sqlQuery = null;		Map parameters = new HashMap();				try {			String consulta = ""					+ "SELECT arqoscobitem.orse_id           AS numeroOS, "					+ "       os.imov_id                     AS matriculaImovel, "					+ "       servicotipo.svtp_dsservicotipo AS servicoTipo, "					+ "       CASE os.orse_cdsituacao WHEN 1 THEN 'PENDENTES' WHEN 2 THEN atMoEn.amen_dsmotivoencerramento END AS motivo, "					+ "       os.orse_tmgeracao              AS dataGeracao, "					+ "       os.orse_tmencerramento         AS dataEncerramento, "					+ "       usuario.usur_nmlogin           AS loginUsuario, "					+ "       os.orse_dsparecerencerramento  AS parecerEncerramento, "					+ "       CASE WHEN os.rgat_id IS NOT NULL THEN 'R' ELSE CASE WHEN docCobranca.caac_id IS NOT NULL THEN 'C' ELSE "					+ "            CASE WHEN docCobranca.cacm_id IS NOT NULL THEN 'E' ELSE '0' END END END AS indicadorOrigem, "					+ "       SUM(COALESCE(doccobranca.cbdo_vldocumento, 0))   AS valorDocumentoCobranca, "					+ "       SUM(COALESCE(debitoCobrar.dbac_vldebito, 0))     AS valorAtualDebito "					+ "FROM   mobile.par_arq_txt_os_cobranca parOsCob "					+ "       INNER JOIN mobile.arq_txt_os_cobranca arqOsCob ON parOsCob.posc_id = arqOsCob.posc_id "					+ "       INNER JOIN mobile.arq_txt_os_cobranca_item arqOsCobItem ON arqOsCobItem.aosc_id = arqOsCob.aosc_id "					+ "       INNER JOIN atendimentopublico.ordem_servico os ON os.orse_id = arqOsCobItem.orse_id "					+ "       INNER JOIN atendimentopublico.servico_tipo servicoTipo ON servicotipo.svtp_id = os.svtp_id "					+ "       LEFT JOIN atendimentopublico.ordem_servico_unidade osUnidade ON osUnidade.orse_id = os.orse_id AND osUnidade.attp_id = 3 "					+ "       LEFT JOIN seguranca.usuario usuario ON usuario.usur_id = osUnidade.usur_id "					+ "       LEFT JOIN atendimentopublico.atend_motivo_encmt atMoEn ON atMoEn.amen_id = os.amen_id "					+ "       LEFT JOIN cobranca.cobranca_documento docCobranca ON docCobranca.cbdo_id = os.cbdo_id "					+ "       LEFT JOIN faturamento.debito_a_cobrar debitoCobrar ON os.imov_id = debitoCobrar.imov_id "					+ "       INNER JOIN cadastro.imovel imovel ON imovel.imov_id = os.imov_id "					+ "       INNER JOIN cadastro.localidade localidade ON localidade.loca_id = imovel.loca_id "					+ "WHERE  parOsCob.empr_id = :idEmpresa "					+ "       AND To_char(arqoscob.aosc_tmenvioarquivo, 'YYYYMM') = :anoMesReferencia ";			parameters.put("idEmpresa", helper.getEmpresa().getId());			parameters.put("anoMesReferencia", helper.getAnoMesReferencia());						//Gerencia Regional			if (helper.getGerenciaRegional() != null && helper.getGerenciaRegional().getId() != null) {				consulta += "AND localidade.greg_id = :idGerenciaRegional ";				parameters.put("idGerenciaRegional", helper.getGerenciaRegional().getId());			}						//Unidade de Negocio			if (helper.getUnidadeNegocio() != null && helper.getUnidadeNegocio().getId() != null) {				consulta += "AND localidade.uneg_id = :idUnidadeNegocio ";				parameters.put("idUnidadeNegocio", helper.getUnidadeNegocio().getId());			}						//Localidade			if (helper.getLocalidade() != null && helper.getLocalidade().getId() != null) {				consulta += "AND parOsCob.loca_id = :idLocalidade ";				parameters.put("idLocalidade", helper.getLocalidade().getId());			}						//Tipo de Servico			if (helper.getIdsTipoServico() != null && !helper.getIdsTipoServico().isEmpty()) {				consulta += "AND os.svtp_id in (:idsTipoServico) ";				parameters.put("idsTipoServico", helper.getIdsTipoServico());			}						//Periodo			if (helper.getPeriodoGeracaoInicial() != null && helper.getPeriodoGeracaoFinal() != null) {				consulta += "AND os.orse_tmgeracao BETWEEN :periodoInicial AND :periodoFinal ";				parameters.put("periodoInicial", Util.formatarDataInicial(helper.getPeriodoGeracaoInicial()));				parameters.put("periodoFinal", Util.formatarDataFinal(helper.getPeriodoGeracaoFinal()));			}						consulta += "GROUP BY arqoscobitem.orse_id, " +								"os.imov_id, " +								"servicotipo.svtp_dsservicotipo, " +								"CASE os.orse_cdsituacao WHEN 1 THEN 'PENDENTES' WHEN 2 THEN atMoEn.amen_dsmotivoencerramento END, " +								"os.orse_tmgeracao, " +								"os.orse_tmencerramento, " +								"usuario.usur_nmlogin, " +								"os.orse_dsparecerencerramento, " +								"CASE WHEN os.rgat_id IS NOT NULL THEN 'R' ELSE CASE WHEN docCobranca.caac_id IS NOT NULL THEN 'C' ELSE CASE WHEN docCobranca.cacm_id IS NOT NULL THEN 'E' ELSE '0' END END END " +						"ORDER BY arqoscobitem.orse_id, " +							 	" os.imov_id  ";						sqlQuery = sessao.createSQLQuery(consulta);						// ITERA OS PARAMETROS E COLOCA			// OS MESMOS NA QUERY			Set set = parameters.keySet();			Iterator iterMap = set.iterator();			while (iterMap.hasNext()) {				String key = (String) iterMap.next();				if (parameters.get(key) instanceof Set) {					Set setList = (HashSet) parameters.get(key);					sqlQuery.setParameterList(key, setList);				} else if (parameters.get(key) instanceof Collection) {					Collection collection = (ArrayList) parameters.get(key);					sqlQuery.setParameterList(key, collection);				} else if (parameters.get(key) instanceof Date) {					Date data = (Date) parameters.get(key);					sqlQuery.setTimestamp(key, data);				} else {					sqlQuery.setParameter(key, parameters.get(key));				}			}			retorno = (ArrayList<Object[]>) sqlQuery					.addScalar("numeroOS", Hibernate.STRING)					.addScalar("matriculaImovel", Hibernate.STRING)					.addScalar("servicoTipo", Hibernate.STRING)					.addScalar("motivo", Hibernate.STRING)					.addScalar("dataGeracao", Hibernate.DATE)					.addScalar("dataEncerramento", Hibernate.DATE)					.addScalar("loginUsuario", Hibernate.STRING)					.addScalar("parecerEncerramento", Hibernate.STRING)						.addScalar("indicadorOrigem", Hibernate.STRING)					.addScalar("valorDocumentoCobranca", Hibernate.BIG_DECIMAL)					.addScalar("valorAtualDebito", Hibernate.BIG_DECIMAL).list();		} catch (HibernateException e) {			throw new ErroRepositorioException(e, "Erro no Hibernate");		} finally {			HibernateUtil.closeSession(sessao);		}		return retorno;			}		/** [UC1536] Gerar relatorio de Acompanhamento das O.S. de Cobrança para Smartphone 	 * 	 * @author Anderson Cabral	 * @since 19/08/2013	 */	public ArrayList<Object[]> pesquisarOSCobrancaSmartphoneSintetico(RelatorioAcompanhamentoOSCobrancaSmartphoneHelper helper) 			throws ErroRepositorioException{				Session sessao = HibernateUtil.getSession();		ArrayList<Object[]> retorno = null;		SQLQuery sqlQuery = null;		Map parameters = new HashMap();		try {			String consulta = ""					+ "SELECT servicotipo.svtp_dsservicotipo AS servicoTipo, "					+ "       CASE os.orse_cdsituacao WHEN 1 THEN 'PENDENTES' WHEN 2 THEN atMoEn.amen_dsmotivoencerramento END AS motivo, "					+ "       Count(CASE WHEN docCobranca.caac_id IS NOT NULL THEN os.orse_id END) AS quantidadeOSCronograma, "					+ "       SUM(Coalesce(CASE WHEN docCobranca.caac_id IS NOT NULL THEN doccobranca.cbdo_vldocumento END, 0)) AS valorDocumentoCronograma, "					+ "       Count(CASE WHEN docCobranca.cacm_id IS NOT NULL THEN os.orse_id END) AS quantidadeOSEventual, "					+ "       SUM(Coalesce(CASE WHEN docCobranca.cacm_id IS NOT NULL THEN doccobranca.cbdo_vldocumento END, 0)) AS valorDocumentoEventual, "					+ "       COUNT(CASE WHEN (os.cbdo_id IS NULL AND os.rgat_id IS NULL) OR (os.cbdo_id IS NOT NULL AND docCobranca.caac_id IS NULL AND docCobranca.cacm_id IS NULL) THEN os.orse_id END) AS quantidadeOSOnline, "					+ "		  SUM(COALESCE(CASE WHEN docCobranca.caac_id IS NULL AND docCobranca.cacm_id IS NULL THEN doccobranca.cbdo_vldocumento END,0)) AS valorDocumentoOnline, "						+ "       Count(CASE WHEN os.rgat_id IS NOT NULL THEN os.orse_id END) AS quantidadeOSRA, "					+ "       Count(os.orse_id) AS quantidadeTotal, "					+ "       SUM(docCobranca.cbdo_vldocumento) AS valorTotal, " 					+ " 	  servicotipo.svtp_id AS idServicoTipo "					+ "FROM   mobile.par_arq_txt_os_cobranca parOsCob "					+ "       inner join mobile.arq_txt_os_cobranca arqOsCob ON parOsCob.posc_id = arqOsCob.posc_id "					+ "       inner join mobile.arq_txt_os_cobranca_item arqOsCobItem ON arqOsCobItem.aosc_id = arqOsCob.aosc_id "					+ "       inner join atendimentopublico.ordem_servico os ON os.orse_id = arqOsCobItem.orse_id "					+ "       inner join atendimentopublico.servico_tipo servicoTipo ON servicotipo.svtp_id = os.svtp_id "					+ "       left join atendimentopublico.atend_motivo_encmt atMoEn ON atMoEn.amen_id = os.amen_id "					+ "       left join cobranca.cobranca_documento docCobranca ON docCobranca.cbdo_id = os.cbdo_id "					+ "       INNER JOIN CADASTRO.imovel imovel ON imovel.imov_id = os.imov_id "					+ "       INNER JOIN CADASTRO.localidade localidade ON localidade.loca_id = imovel.loca_id "					+ "WHERE  parOsCob.empr_id = :idEmpresa "					+ "       AND TO_CHAR(arqoscob.aosc_tmenvioarquivo, 'YYYYMM') = :anoMesReferencia ";			parameters.put("idEmpresa", helper.getEmpresa().getId());			parameters.put("anoMesReferencia", helper.getAnoMesReferencia());						//Gerencia Regional			if (helper.getGerenciaRegional() != null && helper.getGerenciaRegional().getId() != null) {				consulta += "AND localidade.greg_id = :idGerenciaRegional ";				parameters.put("idGerenciaRegional", helper.getGerenciaRegional().getId());			}						//Unidade de Negocio			if (helper.getUnidadeNegocio() != null && helper.getUnidadeNegocio().getId() != null) {				consulta += "AND localidade.uneg_id = :idUnidadeNegocio ";				parameters.put("idUnidadeNegocio", helper.getUnidadeNegocio().getId());			}						//Localidade			if (helper.getLocalidade() != null && helper.getLocalidade().getId() != null) {				consulta += "AND parOsCob.loca_id = :idLocalidade ";				parameters.put("idLocalidade", helper.getLocalidade().getId());			}						//Tipo de Servico			if (helper.getIdsTipoServico() != null && !helper.getIdsTipoServico().isEmpty()) {				consulta += "AND os.svtp_id in (:idsTipoServico) ";				parameters.put("idsTipoServico", helper.getIdsTipoServico());			}						//Periodo			if (helper.getPeriodoGeracaoInicial() != null && helper.getPeriodoGeracaoFinal() != null) {				consulta += "AND os.orse_tmgeracao BETWEEN :periodoInicial AND :periodoFinal ";				parameters.put("periodoInicial", Util.formatarDataInicial(helper.getPeriodoGeracaoInicial()));				parameters.put("periodoFinal", Util.formatarDataFinal(helper.getPeriodoGeracaoFinal()));			}						consulta += "GROUP  BY servicotipo.svtp_id, "					+ "			   servicotipo.svtp_dsservicotipo, "					+ "            CASE os.orse_cdsituacao WHEN 1 THEN 'PENDENTES' WHEN 2 THEN atMoEn.amen_dsmotivoencerramento END "					+ "ORDER BY servicotipo.svtp_dsservicotipo, "					+ "			CASE os.orse_cdsituacao WHEN 1 THEN 'PENDENTES' WHEN 2 THEN atMoEn.amen_dsmotivoencerramento END ";						sqlQuery = sessao.createSQLQuery(consulta);						// ITERA OS PARAMETROS E COLOCA			// OS MESMOS NA QUERY			Set set = parameters.keySet();			Iterator iterMap = set.iterator();			while (iterMap.hasNext()) {				String key = (String) iterMap.next();				if (parameters.get(key) instanceof Set) {					Set setList = (HashSet) parameters.get(key);					sqlQuery.setParameterList(key, setList);				} else if (parameters.get(key) instanceof Collection) {					Collection collection = (ArrayList) parameters.get(key);					sqlQuery.setParameterList(key, collection);				} else if (parameters.get(key) instanceof Date) {					Date data = (Date) parameters.get(key);					sqlQuery.setTimestamp(key, data);				} else {					sqlQuery.setParameter(key, parameters.get(key));				}			}			retorno = (ArrayList<Object[]>) sqlQuery					.addScalar("servicoTipo", Hibernate.STRING)					.addScalar("motivo", Hibernate.STRING)					.addScalar("quantidadeOSCronograma", Hibernate.INTEGER)					.addScalar("valorDocumentoCronograma", Hibernate.BIG_DECIMAL)					.addScalar("quantidadeOSEventual", Hibernate.INTEGER)					.addScalar("valorDocumentoEventual", Hibernate.BIG_DECIMAL)					.addScalar("quantidadeOSOnline", Hibernate.INTEGER)					.addScalar("valorDocumentoOnline", Hibernate.BIG_DECIMAL)						.addScalar("quantidadeOSRA", Hibernate.INTEGER)					.addScalar("quantidadeTotal", Hibernate.INTEGER)					.addScalar("valorTotal", Hibernate.BIG_DECIMAL)					.addScalar("idServicoTipo", Hibernate.INTEGER).list();		} catch (HibernateException e) {			throw new ErroRepositorioException(e, "Erro no Hibernate");		} finally {			HibernateUtil.closeSession(sessao);		}		return retorno;	}		/**	 * [UC1535] Gerar Ordens de Serviço Factível Faturável	 * [FB0003] Verificar Existência de Comando para execução	 * 	 * @author Hugo Azevedo		 * @date 15/08/2013	 * 	 */	public Collection<Integer> obterComandoOSConexaoEsgotoExecucao(Integer idFaturamentoGrupo) throws ErroRepositorioException{				Session sessao = HibernateUtil.getSession();		Collection<Integer> retorno = null;		try{						String sql = " select coce.coce_id as id " +						 " from atendimentopublico.com_os_conexao_esgoto coce " +						 " where coce.coce_tmrealizacao is null " +						 " and coce.ftgr_id = :idFaturamentoGrupo";						retorno = (Collection<Integer>)sessao.createSQLQuery(sql)												 .addScalar("id", Hibernate.INTEGER)												 .setInteger("idFaturamentoGrupo", idFaturamentoGrupo)												 .list();					} catch (HibernateException e) {			throw new ErroRepositorioException(e, "Erro no Hibernate");		} finally {			HibernateUtil.closeSession(sessao);		}		return retorno;	}			/**	 * [UC1535] Gerar Ordens de Serviço Factível Faturável	 * [FB0001] Selecionar Imóveis	 * 	 * @author Hugo Azevedo		 * @date 16/08/2013	 * 	 */	public Collection<Object[]> obterImoveisOSFactivelFaturavel(Integer idFaturamentoGrupo, Integer idComando, Object[] objComando) throws ErroRepositorioException{				Session sessao = HibernateUtil.getSession();		Collection<Object[]> retorno = null;		try{						String sql = 					" SELECT unid.unid_id as idUnidadeOrganizacional, "+					" imov.imov_id as idImovel"+					" FROM cadastro.imovel imov "+					" INNER JOIN CADASTRO.logradouro_bairro lgbr "+					" ON imov.lgbr_id = lgbr.lgbr_id "+					" INNER JOIN cadastro.localidade loca "+					" ON loca.loca_id = imov.loca_id "+					" INNER JOIN cadastro.setor_comercial stcm " +					" ON imov.stcm_id = stcm.stcm_id "+					" INNER JOIN cadastro.unidade_organizacional unid "+					" ON unid.loca_id = imov.loca_id "+					" INNER JOIN cadastro.imovel_perfil iper "+					" ON iper.iper_id = imov.iper_id "+					" INNER JOIN cadastro.quadra qdra "+					" ON imov.qdra_id = qdra.qdra_id "+					" INNER JOIN micromedicao.rota rota "+					" ON rota.rota_id                   = qdra.rota_id " +					" INNER JOIN faturamento.faturamento_grupo ftgr "+					" ON ftgr.ftgr_id = rota.ftgr_id, "+					"  atendimentopublico.com_os_conexao_esgoto coce "+					" WHERE imov.lest_id               IN (1,2) "+					" AND imov.imov_icexclusao          = 2 "+					" AND iper.iper_icgerardadosleitura = 1 "+					" AND imov.rota_idalternativa      IS NULL " +					" AND rota.ftgr_id = :idFaturamentoGrupo "+					" AND coce.coce_id                      = :idConexaoEsgoto "+					" AND coce.coce_amreferenciafaturamento = ftgr.ftgr_amreferencia "+					" AND imov.imov_id NOT             IN "+					"  (SELECT orse.imov_id "+					"  FROM atendimentopublico.ordem_servico orse, "+					"     cadastro.sistema_parametros sisp "+					"  WHERE orse.orse_tmencerramento IS NULL "+					"   AND sisp.svtp_idservselfacfat   = orse.svtp_id "+					"   ) ";										//Município					if(objComando[0] != null){						sql += " AND loca.muni_idprincipal = :idMunicipio";					}										//Logradouro					if(objComando[1] != null){						sql += " AND lgbr.logr_id = :idLogradouro";					}										//Localidade Inicial e Final					if(objComando[2] != null && objComando[3] != null){						sql += " AND imov.loca_id BETWEEN :idLocalidadeInicial AND :idLocalidadeFinal ";					}										//Setor Comercial Inicial e Final					if(objComando[4] != null && objComando[5] != null){						sql += " AND stcm.stcm_cdsetorcomercial BETWEEN :codSetorComercialInicial AND :codSetorComercialFinal ";					}										//Quadra Inicial e Final					if(objComando[6] != null && objComando[7] != null){						sql += " AND qdra.qdra_nnquadra BETWEEN :nnQuadraInicial AND :nnQuadraFinal ";					}										//Rota Inicial e Final					if(objComando[8] != null && objComando[9] != null){						sql += " AND rota.rota_cdrota BETWEEN :codRotaInicial AND :codRotaFinal ";					}										//Num. sequencial rota Inicial e Final					if(objComando[10] != null && objComando[11] != null){						sql += " AND imov.imov_nnsequencialrota  BETWEEN :seqRotaInicial AND :seqRotaFinal ";					}										// Imovel					if(objComando[12] != null){						sql += " AND imov.imov_id = :idImovel ";					}										sql += " UNION "+					" SELECT unid.unid_id as idUnidadeOrganizacional, "+					"   imov.imov_id as idImovel "+					" FROM cadastro.imovel imov "+					" INNER JOIN cadastro.unidade_organizacional unid "+					" ON unid.loca_id = imov.loca_id "+					" INNER JOIN cadastro.localidade loca "+					" ON loca.loca_id = imov.loca_id "+					" INNER JOIN cadastro.municipio muni "+					" ON muni.muni_id = loca.muni_idprincipal "+					" INNER JOIN CADASTRO.logradouro_bairro lgbr "+					" ON imov.lgbr_id = lgbr.lgbr_id "+					" INNER JOIN cadastro.setor_comercial stcm "+					" ON imov.stcm_id = stcm.stcm_id "+					" INNER JOIN cadastro.imovel_perfil iper "+					" ON iper.iper_id = imov.iper_id "+					" INNER JOIN micromedicao.rota rota "+					" ON rota.rota_id                   = imov.rota_idalternativa "+					" INNER JOIN faturamento.faturamento_grupo ftgr "+					" ON ftgr.ftgr_id = rota.ftgr_id, "+					"  atendimentopublico.com_os_conexao_esgoto coce "+					" WHERE imov.lest_id               IN (1,2) "+					" AND imov.imov_icexclusao          = 2 "+					" AND iper.iper_icgerardadosleitura = 1 "+					" AND rota.ftgr_id = :idFaturamentoGrupo "+					" AND coce.coce_id                      = :idConexaoEsgoto "+					" AND coce.coce_amreferenciafaturamento = ftgr.ftgr_amreferencia "+					" AND imov.imov_id NOT             IN "+					"  (SELECT orse.imov_id "+					"   FROM atendimentopublico.ordem_servico orse, "+					"    cadastro.sistema_parametros sisp "+					"   WHERE orse.orse_tmencerramento IS NULL "+					"   AND sisp.svtp_idservselfacfat   = orse.svtp_id "+					"  ) ";															//Município					if(objComando[0] != null){						sql += " AND loca.muni_idprincipal = :idMunicipio";					}										//Logradouro					if(objComando[1] != null){						sql += " AND lgbr.logr_id = :idLogradouro";					}										//Localidade Inicial e Final					if(objComando[2] != null && objComando[3] != null){						sql += " AND imov.loca_id BETWEEN :idLocalidadeInicial AND :idLocalidadeFinal ";					}										//Setor Comercial Inicial e Final					if(objComando[4] != null && objComando[5] != null){						sql += " AND stcm.stcm_cdsetorcomercial BETWEEN :codSetorComercialInicial AND :codSetorComercialFinal ";					}										// Imovel					if(objComando[12] != null){						sql += " AND imov.imov_id = :idImovel ";					}													Query q = sessao.createSQLQuery(sql)												 .addScalar("idUnidadeOrganizacional", Hibernate.INTEGER)												 .addScalar("idImovel", Hibernate.INTEGER)												 .setInteger("idFaturamentoGrupo", idFaturamentoGrupo)												 .setInteger("idConexaoEsgoto", idComando);										//Município					if(objComando[0] != null){						q.setInteger("idMunicipio", (Integer)objComando[0]);					}										//Logradouro					if(objComando[1] != null){						q.setInteger("idLogradouro", (Integer)objComando[1]);					}										//Localidade Inicial e Final					if(objComando[2] != null && objComando[3] != null){						q.setInteger("idLocalidadeInicial", (Integer)objComando[2]);						q.setInteger("idLocalidadeFinal", (Integer)objComando[3]);					}										//Setor Comercial Inicial e Final					if(objComando[4] != null && objComando[5] != null){						q.setInteger("codSetorComercialInicial", (Integer)objComando[4]);						q.setInteger("codSetorComercialFinal", (Integer)objComando[5]);					}										//Quadra Inicial e Final					if(objComando[6] != null && objComando[7] != null){						q.setInteger("nnQuadraInicial", (Integer)objComando[6]);						q.setInteger("nnQuadraFinal", (Integer)objComando[7]);					}										//Rota Inicial e Final					if(objComando[8] != null && objComando[9] != null){						q.setInteger("codRotaInicial", (Integer)objComando[8]);						q.setInteger("codRotaFinal", (Integer)objComando[9]);					}										//Num. sequencial rota Inicial e Final					if(objComando[10] != null && objComando[11] != null){						q.setInteger("seqRotaInicial", (Integer)objComando[10]);						q.setInteger("seqRotaFinal", (Integer)objComando[11]);					}					// Imovel					if(objComando[12] != null){						q.setInteger("idImovel", (Integer)objComando[12]);					}												 					retorno = q.list();										} catch (HibernateException e) {			throw new ErroRepositorioException(e, "Erro no Hibernate");		} finally {			HibernateUtil.closeSession(sessao);		}		return retorno;	}			/**	 * [UC1535] Gerar Ordens de Serviço Factível Faturável	 * 	 * @author Hugo Azevedo		 * @date 16/08/2013	 * 	 */	public ComandoOSConexaoEsgoto obterComandoOSConexaoEsgoto(Integer idComando) throws ErroRepositorioException{				Session sessao = HibernateUtil.getSession();		ComandoOSConexaoEsgoto retorno = null;		try{						String sql = "select coce" +						 " from ComandoOSConexaoEsgoto coce " +						 "left join fetch coce.setorComercialInicial "	+						 "left join fetch coce.setorComercialFinal "	+						 "left join fetch coce.quadraInicial "	+						 "left join fetch coce.quadraFinal "	+						 "left join fetch coce.rotaInicial " + 						 "left join fetch coce.rotaFinal " +						 " where coce.id = :idComando ";						 			retorno = (ComandoOSConexaoEsgoto)sessao.createQuery(sql)												 .setInteger("idComando", idComando).setMaxResults(1).uniqueResult();					} catch (HibernateException e) {			throw new ErroRepositorioException(e, "Erro no Hibernate");		} finally {			HibernateUtil.closeSession(sessao);		}				return retorno;			}	/**	 * [UC0354] - Efetuar Ligação de Esgoto	 * RM9021 - Obter dados do comando de conexão de esgoto.	 * 	 * @author Ana Maria	 * @date 20/08/2013	 * 	 * @return	 * @throws ErroRepositorioException	 */	public ComandoOSConexaoEsgoto obterDadosComandoOSConexaoEsgoto(			Integer idComandoOSConexaoEsgoto) throws ErroRepositorioException {		ComandoOSConexaoEsgoto retorno;		Session session = HibernateUtil.getSession();		String consulta = "";		try {			consulta = "SELECT comandoOSConexaoEsgoto "					 + "FROM ComandoOSConexaoEsgoto comandoOSConexaoEsgoto "					 + "WHERE comandoOSConexaoEsgoto.id = :idComandoOSConexaoEsgoto";			retorno = (ComandoOSConexaoEsgoto) session.createQuery(consulta)					.setInteger("idComandoOSConexaoEsgoto", idComandoOSConexaoEsgoto)					.setMaxResults(1).uniqueResult();		} catch (HibernateException e) {			throw new ErroRepositorioException(	e,"Erro no Hibernate");		} finally {			HibernateUtil.closeSession(session);		}		return retorno;	}		/**	 * [UC1539] Encerrar Ordem de Serviço Por Não Execução	 * [FB0003] Verificar Existência de Comando para execução	 * 	 * @author Hugo Azevedo		 * @date 21/08/2013	 * 	 */	public Collection<Integer> obterComandoOSConexaoEsgotoExecucaoEncerramentoNaoExecucao(Integer idFaturamentoGrupo) throws ErroRepositorioException{				Session sessao = HibernateUtil.getSession();		Collection<Integer> retorno = null;		try{						String sql = " SELECT coce.coce_id AS id "+						 " FROM atendimentopublico.com_os_conexao_esgoto coce "+						 " INNER JOIN faturamento.faturamento_grupo ftgr "+						 " ON ftgr.ftgr_id = coce.ftgr_id "+						 " WHERE coce.coce_tmrealizacao IS NOT NULL "+						 " AND ftgr.ftgr_id              = :idFaturamentoGrupo "+						 " AND ftgr.ftgr_amreferencia = coce.coce_amreferenciafaturamento ";						retorno = (Collection<Integer>)sessao.createSQLQuery(sql)												 .addScalar("id", Hibernate.INTEGER)												 .setInteger("idFaturamentoGrupo", idFaturamentoGrupo)												 .list();					} catch (HibernateException e) {			throw new ErroRepositorioException(e, "Erro no Hibernate");		} finally {			HibernateUtil.closeSession(sessao);		}		return retorno;	}			/**	 * [UC1539] Encerrar Ordem de Serviço Por Não Execução	 * [IT0002] Selecionar Imóveis	 * 	 * @author Hugo Azevedo		 * @date 21/08/2013	 * 	 */	public Collection<Object[]> obterImoveisOSNaoExecucao(Integer idFaturamentoGrupo, Integer quantidadeInicio, Integer quantidadeMaxima, Integer idComando,Integer ref) throws ErroRepositorioException{				Session sessao = HibernateUtil.getSession();		Collection<Object[]> retorno = null;		try{						String sql = 					" SELECT orse.orse_id as idOs, " +					"   orse.imov_id as idImov, " +					"   1 as tipo " + // foi pra campo					" FROM atendimentopublico.ordem_servico orse " +					" INNER JOIN ATENDIMENTOPUBLICO.com_os_conexao_esgoto coce ON coce.coce_id = orse.coce_id " +					" INNER JOIN FATURAMENTO.mov_conta_prefaturada mcpf ON mcpf.imov_id = orse.imov_id " +					" WHERE orse.orse_tmencerramento IS NULL " +					" AND coce.ftgr_id =:idGrupo " + 					" and mcpf.ftgr_id = coce.ftgr_id " +					" AND mcpf.mcpf_ammovimento             = coce.coce_amreferenciafaturamento " +					" AND mcpf.mcpf_icemissaoconta          = 2" +					" and orse.svtp_id = coce.svtp_id " +					" and coce.coce_id =  :idComando " +										" UNION " + 										" SELECT orse.orse_id as idOs, " + 					"  orse.imov_id as idImov, " +					"   3 as tipo " + // roteiro finalizado incompleto					" FROM atendimentopublico.ordem_servico orse " +					" INNER JOIN ATENDIMENTOPUBLICO.com_os_conexao_esgoto coce  ON coce.coce_id = orse.coce_id " +					" INNER JOIN cadastro.imovel imov ON imov.imov_id = orse.imov_id " +					/*					" INNER JOIN MICROMEDICAO.movimento_roteiro_empr mrem on mrem.imov_id = imov.imov_id " +					"  and mrem.mrem_ammovimento = coce.coce_amreferenciafaturamento " + 					"  and mrem.medt_id = 1 " +*/					" INNER JOIN (select mrem.imov_id, mrem.mrem_ammovimento from MICROMEDICAO.movimento_roteiro_empr mrem where mrem.mrem_ammovimento = :ref " +                     " group by mrem.imov_id, mrem.mrem_ammovimento) b on b.imov_id = imov.imov_id and b.mrem_ammovimento = coce.coce_amreferenciafaturamento" +										" LEFT JOIN FATURAMENTO.mov_conta_prefaturada mcpf ON mcpf.imov_id = orse.imov_id and mcpf.ftgr_id = coce.ftgr_id  AND mcpf.mcpf_ammovimento = coce.coce_amreferenciafaturamento " +					" WHERE coce.ftgr_id = :idGrupo and orse.svtp_id = coce.svtp_id " +					" and mcpf.mcpf_id is null and  orse.orse_tmencerramento IS NULL " +					" and coce.coce_id =  :idComando " +										" UNION " +										" SELECT orse.orse_id as idOs, " + 					"  orse.imov_id as idImov, " +					"   2 as tipo " + // IMOVEL SEM FATURAMENTO 					" FROM atendimentopublico.ordem_servico orse " +					" INNER JOIN ATENDIMENTOPUBLICO.com_os_conexao_esgoto coce  ON coce.coce_id = orse.coce_id " +					" INNER JOIN cadastro.imovel imov ON imov.imov_id = orse.imov_id " +					/*" Left JOIN MICROMEDICAO.movimento_roteiro_empr mrem on mrem.imov_id = imov.imov_id " +					"  and mrem.mrem_ammovimento = coce.coce_amreferenciafaturamento " + 					"  and mrem.medt_id = 1 " +*/					" LEFT JOIN (select mrem.imov_id, mrem.mrem_ammovimento " +                    " from MICROMEDICAO.movimento_roteiro_empr mrem " +                    " where mrem.mrem_ammovimento = :ref " +                     " group by mrem.imov_id, mrem.mrem_ammovimento) b on b.imov_id = imov.imov_id and b.mrem_ammovimento = coce.coce_amreferenciafaturamento " +					" WHERE coce.ftgr_id = :idGrupo and orse.svtp_id = coce.svtp_id " +					" and b.imov_id is null and orse.orse_tmencerramento IS NULL"+					" and coce.coce_id =  :idComando " ;																						retorno = (Collection<Object[]>)sessao.createSQLQuery(sql)												 .addScalar("idOs", Hibernate.INTEGER)												 .addScalar("idImov", Hibernate.INTEGER)												 .addScalar("tipo", Hibernate.INTEGER)												 .setInteger("idGrupo", idFaturamentoGrupo)												 .setInteger("idComando", idComando)												 .setInteger("ref", ref)												 .setFirstResult(quantidadeInicio)												 .setMaxResults(quantidadeMaxima)												 .list();					} catch (HibernateException e) {			throw new ErroRepositorioException(e, "Erro no Hibernate");		} finally {			HibernateUtil.closeSession(sessao);		}		return retorno;	}			/**	 * [UC1535] Gerar Ordens de Serviço Factível Faturável	 * [FB0001] Selecionar Imóveis	 * 	 * @author Hugo Azevedo		 * @date 16/08/2013	 * 	 */	public Object[] obterValoresComandoOSConexaoEsgoto(Integer idComando) throws ErroRepositorioException{				Session sessao = HibernateUtil.getSession();		Object[] retorno = null;		try{						String sql = 					" SELECT coce.muni_id                 AS munId, "+        //0 - Município					"   coce.logr_id                      AS logrId, "+       //1 - Logradouro					"   coce.loca_idinicial               AS locaIniId, "+    //2 - Localidade Inicial					"   coce.loca_idfinal                 AS locaFinId, "+    //3 - Localidade Final					"   stcmInicial.stcm_cdsetorcomercial AS stcmIniCod, "+   //4 - Setor Comercial Inicial					"   stcmFinal.stcm_cdsetorcomercial   AS stcmFinCod, "+   //5 - Setor Comercial Final 					"   qdraInicial.qdra_nnquadra         AS qdraIniNum, "+   //6 - Quadra Inicial					"   qdraFinal.qdra_nnquadra           AS qdraFinNum, "+   //7 - Quadra Final 					"   rotaInicial.rota_cdrota           AS rotaIniCod, "+   //8 - Rota Inicial 					"   rotaFinal.rota_cdrota             AS rotaFinCod, "+   //9 - Rota Final					"   coce.coce_nnsequencialrotainicial AS seqIni, "+       //10 - Sequencial Inicial					"   coce.coce_nnsequencialrotafinal   AS seqFin, "+        //11 - Sequencial Final					"   coce.imov_id as idImovel " +                           // 12 - idImovel					" FROM ATENDIMENTOPUBLICO.com_os_conexao_esgoto coce " +					" LEFT JOIN CADASTRO.setor_comercial stcmInicial " +					" ON stcmInicial.stcm_id = coce.stcm_idinicial " +					" LEFT JOIN CADASTRO.setor_comercial stcmFinal " +					" ON stcmFinal.stcm_id = coce.stcm_idfinal " +					" LEFT JOIN cadastro.quadra qdraInicial " +					" ON qdraInicial.qdra_id = coce.qdra_idinicial " +					" LEFT JOIN cadastro.quadra qdraFinal " +					" ON qdraFinal.qdra_id = coce.qdra_idfinal " +					" LEFT JOIN micromedicao.rota rotaInicial " +					" ON qdraInicial.rota_id = rotaInicial.rota_id " +					" LEFT JOIN micromedicao.rota rotaFinal " +					" ON rotaFinal.rota_id = qdraFinal.rota_id " +					" WHERE coce.coce_id = :idComando	";						 			retorno = (Object[])sessao.createSQLQuery(sql)												 .addScalar("munId", Hibernate.INTEGER)												 .addScalar("logrId", Hibernate.INTEGER)												 .addScalar("locaIniId", Hibernate.INTEGER)												 .addScalar("locaFinId", Hibernate.INTEGER)												 .addScalar("stcmIniCod", Hibernate.INTEGER)												 .addScalar("stcmFinCod", Hibernate.INTEGER)												 .addScalar("qdraIniNum", Hibernate.INTEGER)												 .addScalar("qdraFinNum", Hibernate.INTEGER)												 .addScalar("rotaIniCod", Hibernate.INTEGER)												 .addScalar("rotaFinCod", Hibernate.INTEGER)												 .addScalar("seqIni", Hibernate.INTEGER)												 .addScalar("seqFin", Hibernate.INTEGER)												 .addScalar("idImovel", Hibernate.INTEGER)												 .setInteger("idComando", idComando).setMaxResults(1).uniqueResult();					} catch (HibernateException e) {			throw new ErroRepositorioException(e, "Erro no Hibernate");		} finally {			HibernateUtil.closeSession(sessao);		}				return retorno;			}		/**	 * [UC1535] Gerar Ordens de Serviço Factível Faturável	 * [FB0002] Inserir Motivos de Geração da Carta	 * 	 * @author Hugo Azevedo		 * @date 16/08/2013	 * 	 */	public Collection<Integer> obterAnormalidadesNaoImpressaoImovel(Integer idImovel,Integer idComando) throws ErroRepositorioException{				Session sessao = HibernateUtil.getSession();		Collection<Integer> retorno = null;		try{						String sql = 					" SELECT mcop.mcpf_id as id "+					" FROM faturamento.mov_conta_prefaturada mcop "+					" INNER JOIN micromedicao.leitura_anormalidade ltan "+					" ON ltan.ltan_id = mcop.ltan_id, "+					"   atendimentopublico.com_os_conexao_esgoto coce "+					" WHERE mcop.medt_id               = 1 "+					" AND ltan.ltan_icnaoimprimirconta = 1 "+					" AND mcop.mcpf_ammovimento        = coce.coce_amreferenciafaturamento "+					" AND mcop.imov_id = :idImovel " +					" AND coce.coce_id = :idComando";						 			retorno = (Collection<Integer>)sessao.createSQLQuery(sql)												 .addScalar("id", Hibernate.INTEGER)												 .setInteger("idImovel", idImovel)												 .setInteger("idComando", idComando).list();					} catch (HibernateException e) {			throw new ErroRepositorioException(e, "Erro no Hibernate");		} finally {			HibernateUtil.closeSession(sessao);		}				return retorno;			}			/**	 * [UC1535] Gerar Ordens de Serviço Factível Faturável	 * [FB0002] Inserir Motivos de Geração da Carta	 * 	 * @author Hugo Azevedo		 * @date 16/08/2013	 * 	 */	public BigDecimal obterValorContaPreFaturadaImovel(Integer idImovel,Integer idComando) throws ErroRepositorioException{				Session sessao = HibernateUtil.getSession();		BigDecimal retorno = null;		try{						String sql = 					" SELECT (mcop.MCPF_VLAGUA + mcop.MCPF_VLESGOTO + mcop.MCPF_VLDEBITO - mcop.MCPF_VLCREDITO - mcop.MCPF_VLIMPOSTO) AS total "+					" FROM faturamento.mov_conta_prefaturada mcop, "+					"   atendimentopublico.com_os_conexao_esgoto coce "+					" WHERE mcop.medt_id        = 1 "+					" AND mcop.mcpf_ammovimento = coce.coce_amreferenciafaturamento "+					" AND mcop.imov_id          = :idImovel "+					" AND coce.coce_id = :idComando ";						 			retorno = (BigDecimal)sessao.createSQLQuery(sql)												 .addScalar("total", Hibernate.BIG_DECIMAL)												 .setInteger("idImovel", idImovel)												 .setInteger("idComando", idComando).uniqueResult();					} catch (HibernateException e) {			throw new ErroRepositorioException(e, "Erro no Hibernate");		} finally {			HibernateUtil.closeSession(sessao);		}				return retorno;			}			/**	 * [UC1535] Gerar Ordens de Serviço Factível Faturável	 * [FB0002] Inserir Motivos de Geração da Carta	 * 	 * @author Hugo Azevedo		 * @date 16/08/2013	 * 	 */	public Collection<Object[]> selecionarOSMotivoEntregaOutroEndereco(Integer idComando) throws ErroRepositorioException{				Session sessao = HibernateUtil.getSession();		Collection<Object[]> retorno = null;		try{						String sql = 					" SELECT orse.orse_id as idOs, orse.imov_id as idImov "+					" FROM atendimentopublico.os_nao_emissao_carta_esg oece "+					" inner join atendimentopublico.ordem_servico orse on orse.orse_id = oece.orse_id "+					" inner join atendimentopublico.mtvo_nao_emiss_carta_esg mtvo on mtvo.mnec_id = oece.mnec_id "+					" INNER JOIN ATENDIMENTOPUBLICO.com_os_conexao_esgoto coce on coce.coce_id = orse.coce_id "+					" INNER JOIN faturamento.faturamento_grupo ftgr on ftgr.ftgr_id = coce.ftgr_id "+					" WHERE orse.orse_tmencerramento is NULL  "+					" and coce.coce_id = :idComando "+					" and coce.coce_amreferenciafaturamento = ftgr.ftgr_amreferencia "+					" and mtvo.mnec_id = :idMotivo ";											retorno = (Collection<Object[]>)sessao.createSQLQuery(sql)												 .addScalar("idOs", Hibernate.INTEGER)												 .addScalar("idImov", Hibernate.INTEGER)												 .setInteger("idComando", idComando)												 .setInteger("idMotivo", MotivoNaoEmissaoCartaEsgoto.CONTA_ENTREGUE_OUTRO_ENDERECO)												 .list();					} catch (HibernateException e) {			throw new ErroRepositorioException(e, "Erro no Hibernate");		} finally {			HibernateUtil.closeSession(sessao);		}		return retorno;	}			/**	 * [UC1535] Gerar Ordens de Serviço Factível Faturável	 * [FB0004] Gerar Relatório de Imóveis com Cartas não Impressas	 * 	 * @param idGrupo - Id do grupo de faturamento	 * 	 * @author Hugo Azevedo		 * @date 26/08/2013	 * 	 */	public Collection<Object[]> obterDadosRelatorioImoveisCartasNaoImpressas(Integer idFaturamentoGrupo) throws ErroRepositorioException{				Session sessao = HibernateUtil.getSession();		Collection<Object[]> retorno = null;		try{						String sql = 					" SELECT orse.orse_id       AS idOs, "+                //0					"  orse.imov_id             AS idImov, "+              //1					"  mtvo.mnec_dsmotivo       AS descMotivo, "+          //2					"  orse.orse_tmgeracao      AS tmGeracao, "+           //3					"  orse.orse_tmencerramento AS tmEncerramento, "+      //4  					"  loca.muni_idprincipal as muniId, "+                 //5 					"  ftgr.ftgr_id as ftGrId, "+                          //6  					"  ftgr.ftgr_amreferencia as amReferenciaFat, "+       //7					"  muni.muni_nmmunicipio as nomeMunicipio, "+          //8  					"  ftgr.ftgr_dsfaturamentogrupo as grupoFaturamento "+ //9					" FROM atendimentopublico.os_nao_emissao_carta_esg oece "+					" INNER JOIN atendimentopublico.ordem_servico orse "+					" ON orse.orse_id = oece.orse_id "+					" INNER JOIN cadastro.imovel imov "+					" ON orse.imov_id = imov.imov_id "+					" INNER JOIN cadastro.localidade loca "+					" ON imov.loca_id = loca.loca_id "+					" INNER JOIN cadastro.municipio muni "+					" ON muni.muni_id = loca.muni_idprincipal "+					" INNER JOIN atendimentopublico.mtvo_nao_emiss_carta_esg mtvo "+					" ON mtvo.mnec_id = oece.mnec_id "+					" INNER JOIN ATENDIMENTOPUBLICO.com_os_conexao_esgoto coce "+					" ON coce.coce_id = orse.coce_id "+					" INNER JOIN faturamento.faturamento_grupo ftgr "+					" ON ftgr.ftgr_id                       = coce.ftgr_id "+					" WHERE coce.ftgr_id                    = :idGrupo "+					" AND coce.coce_amreferenciafaturamento = ftgr.ftgr_amreferencia "+					" ORDER BY loca.muni_idprincipal, "+					"   ftgr.ftgr_id, "+					"   ftgr.ftgr_amreferencia ";											retorno = (Collection<Object[]>)sessao.createSQLQuery(sql)												 .addScalar("idOs", Hibernate.INTEGER)												 .addScalar("idImov", Hibernate.INTEGER)												 .addScalar("descMotivo", Hibernate.STRING)												 .addScalar("tmGeracao", Hibernate.DATE)												 .addScalar("tmEncerramento", Hibernate.DATE)												 .addScalar("muniId", Hibernate.INTEGER)												 .addScalar("ftGrId", Hibernate.INTEGER)												 .addScalar("amReferenciaFat", Hibernate.INTEGER)												 .addScalar("nomeMunicipio", Hibernate.STRING)												 .addScalar("grupoFaturamento", Hibernate.STRING)												 .setInteger("idGrupo", idFaturamentoGrupo)												 .list();					} catch (HibernateException e) {			throw new ErroRepositorioException(e, "Erro no Hibernate");		} finally {			HibernateUtil.closeSession(sessao);		}		return retorno;	}				/**	 * [UC1538] Gerar Relatórios dos Comandos de Ordem de Serviço Conexão de Esgoto	 * 	 * [IT0003] Pesquisar OS de Conexão de Esgoto	 * [IT0005] Obter Dados Analíticos das OS's	 * 	 * @author Mariana Victor		 * @date 21/08/2013	 */	public Collection<Object[]> pesquisarDadosRelatorioComandosConexaoEsgotoAnalitico(		FiltrarRelatorioComandosConexaoEsgotoHelper helperFiltro) 			throws ErroRepositorioException {				Session sessao = HibernateUtil.getSession();		Collection<Object[]> retorno = null;				try{			String sql = 					" SELECT " +					"   muni.muni_id AS idMunicipio, " +					"   muni.muni_nmmunicipio AS descMunicipio, " +					"   loca.loca_id AS idLocalidade, " +					"   loca.loca_nmlocalidade AS descLocalidade, " +					"   stcm.stcm_id AS idSetor, " +					"   stcm.stcm_nmsetorcomercial AS descSetor, " +					"   orse.orse_id AS numeroOS, " +					"   imov.imov_id AS matricula, " +					"   orse.orse_tmencerramento AS dataEncerramento, " +					"   CASE WHEN (orse.amen_id is null) THEN " +					"     'EM ABERTO' " +					"   WHEN (orse.amen_id = :conclusaoServico) THEN " +					"     'ENCERRADA POR EXECUÇÃO' " +					"   ELSE " +					"     mnec.mnec_dsmotivo " +					"   END AS situacaoEncerramento, " +					"   lest.lest_dsligacaoesgotosituacao AS situacaoLigEsgoto " +					" FROM atendimentopublico.ordem_servico orse " +					"   INNER JOIN atendimentopublico.com_os_conexao_esgoto coce ON coce.coce_id = orse.coce_id " +					"   INNER JOIN cadastro.imovel imov ON imov.imov_id = orse.imov_id " +					"   INNER JOIN atendimentopublico.ligacao_esgoto_situacao lest ON lest.lest_id = imov.lest_id " +					"   INNER JOIN cadastro.localidade loca ON loca.loca_id = imov.loca_id " +					"   INNER JOIN cadastro.municipio muni ON muni.muni_id = loca.muni_idprincipal " +					"   INNER JOIN cadastro.setor_comercial stcm ON stcm.stcm_id = imov.stcm_id " +					"   LEFT JOIN atendimentopublico.os_nao_emissao_carta_esg onec ON onec.orse_id = orse.orse_id " +					"   LEFT JOIN atendimentopublico.mtvo_nao_emiss_carta_esg mnec ON mnec.mnec_id = onec.mnec_id " +					" WHERE coce.coce_icexecutor = :indicadorExecucao ";			if (helperFiltro.getDescricaoComando() != null					&& !helperFiltro.getDescricaoComando().trim().equals("")) {				sql = sql + " and coce.coce_dscomando like concat(concat('%',:descricaoComando),'%') ";			}			if (helperFiltro.getIdImovel() != null) {				sql = sql + " and coce.imov_id = :idImovel ";			}			if (helperFiltro.getIdMunicipio() != null) {				sql = sql + " and coce.muni_id = :idMunicipio ";			}			if (helperFiltro.getIdLogradouro() != null) {				sql = sql + " and coce.logr_id = :idLogradouro ";			}						//Inscrição Inicial			if (helperFiltro.getIdLocalidadeInicial() != null) {				sql = sql + " and coce.loca_idinicial = :idLocalidadeInicial ";			}			if (helperFiltro.getIdSetorComercialInicial() != null) {				sql = sql + " and coce.stcm_idinicial = :idSetorComercInicial ";			}			if (helperFiltro.getIdQuadraInicial() != null) {				sql = sql + " and coce.qdra_idinicial = :idQuadraInicial ";			}			if (helperFiltro.getIdRotaInicial() != null) {				sql = sql + " and coce.rota_idinicial = :idRotaInicial ";			}			if (helperFiltro.getSequencialRotaInicial() != null) {				sql = sql + " and coce.coce_nnsequencialrotainicial = :sequencialInicial ";			}			//Inscrição Final			if (helperFiltro.getIdLocalidadeFinal() != null) {				sql = sql + " and coce.loca_idfinal = :idLocalidadeFinal ";			}			if (helperFiltro.getIdSetorComercialFinal() != null) {				sql = sql + " and coce.stcm_idfinal = :idSetorComercFinal ";			}			if (helperFiltro.getIdQuadraFinal() != null) {				sql = sql + " and coce.qdra_idfinal = :idQuadraFinal ";			}			if (helperFiltro.getIdRotaFinal() != null) {				sql = sql + " and coce.rota_idfinal = :idRotaFinal ";			}			if (helperFiltro.getSequencialRotaFinal() != null) {				sql = sql + " and coce.coce_nnsequencialrotafinal = :sequencialFinal ";			}			if (helperFiltro.getIdFaturamentoGrupo() != null) {				sql = sql + " and coce.ftgr_id = :idFaturamentoGrupo ";			}			if (helperFiltro.getIdSituacaoOrdemServico() != null) {				sql = sql + " and orse.orse_cdsituacao = :idSituacaoOS ";			}			if (helperFiltro.getDataGeracaoInicial() != null					&& helperFiltro.getDataGeracaoFinal() != null) {				sql = sql + " and to_date(to_char(orse.orse_tmgeracao, 'dd/MM/yyyy'), 'dd/MM/yyyy') between :dataInicial and :dataFinal ";			}						sql = sql  +					" GROUP BY muni.muni_id, muni.muni_nmmunicipio, loca.loca_id, loca.loca_nmlocalidade, " +					"   stcm.stcm_id, stcm.stcm_nmsetorcomercial, orse.orse_id, imov.imov_id, " +					"   orse.orse_tmencerramento, orse.amen_id, mnec.mnec_dsmotivo, lest.lest_dsligacaoesgotosituacao " +					" ORDER BY muni.muni_id, muni.muni_nmmunicipio, loca.loca_id, loca.loca_nmlocalidade, " +					"   stcm.stcm_id, stcm.stcm_nmsetorcomercial, orse.orse_id, imov.imov_id, " +					"   orse.orse_tmencerramento, orse.amen_id, mnec.mnec_dsmotivo, lest.lest_dsligacaoesgotosituacao ";						Query query = sessao.createSQLQuery(sql)					 .addScalar("idMunicipio", Hibernate.INTEGER) //0					 .addScalar("descMunicipio", Hibernate.STRING) //1					 .addScalar("idLocalidade", Hibernate.INTEGER) //2					 .addScalar("descLocalidade", Hibernate.STRING) //3					 .addScalar("idSetor", Hibernate.INTEGER) //4					 .addScalar("descSetor", Hibernate.STRING) //5					 .addScalar("numeroOS", Hibernate.INTEGER) //6					 .addScalar("matricula", Hibernate.INTEGER) //7					 .addScalar("dataEncerramento", Hibernate.DATE) //8					 .addScalar("situacaoEncerramento", Hibernate.STRING) //9					 .addScalar("situacaoLigEsgoto", Hibernate.STRING) //10					 .setInteger("conclusaoServico", AtendimentoMotivoEncerramento.CONCLUSAO_SERVICO)					 .setInteger("indicadorExecucao", helperFiltro.getIndicadorExecucao());						if (helperFiltro.getDescricaoComando() != null					&& !helperFiltro.getDescricaoComando().trim().equals("")) {				query.setString("descricaoComando", helperFiltro.getDescricaoComando().toUpperCase());			}			if (helperFiltro.getIdImovel() != null) {				query.setInteger("idImovel", helperFiltro.getIdImovel());			}			if (helperFiltro.getIdMunicipio() != null) {				query.setInteger("idMunicipio", helperFiltro.getIdMunicipio());			}			if (helperFiltro.getIdLogradouro() != null) {				query.setInteger("idLogradouro", helperFiltro.getIdLogradouro());			}						//Inscrição Inicial			if (helperFiltro.getIdLocalidadeInicial() != null) {				query.setInteger("idLocalidadeInicial", helperFiltro.getIdLocalidadeInicial());			}			if (helperFiltro.getIdSetorComercialInicial() != null) {				query.setInteger("idSetorComercInicial", helperFiltro.getIdSetorComercialInicial());			}			if (helperFiltro.getIdQuadraInicial() != null) {				query.setInteger("idQuadraInicial", helperFiltro.getIdQuadraInicial());			}			if (helperFiltro.getIdRotaInicial() != null) {				query.setInteger("idRotaInicial", helperFiltro.getIdRotaInicial());			}			if (helperFiltro.getSequencialRotaInicial() != null) {				query.setInteger("sequencialInicial", helperFiltro.getSequencialRotaInicial());			}			//Inscrição Final			if (helperFiltro.getIdLocalidadeFinal() != null) {				query.setInteger("idLocalidadeFinal", helperFiltro.getIdLocalidadeFinal());			}			if (helperFiltro.getIdSetorComercialFinal() != null) {				query.setInteger("idSetorComercFinal", helperFiltro.getIdSetorComercialFinal());			}			if (helperFiltro.getIdQuadraFinal() != null) {				query.setInteger("idQuadraFinal", helperFiltro.getIdQuadraFinal());			}			if (helperFiltro.getIdRotaFinal() != null) {				query.setInteger("idRotaFinal", helperFiltro.getIdRotaFinal());			}			if (helperFiltro.getSequencialRotaFinal() != null) {				query.setInteger("sequencialFinal", helperFiltro.getSequencialRotaFinal());			}			if (helperFiltro.getIdFaturamentoGrupo() != null) {				query.setInteger("idFaturamentoGrupo", helperFiltro.getIdFaturamentoGrupo());			}			if (helperFiltro.getIdSituacaoOrdemServico() != null) {				query.setInteger("idSituacaoOS", helperFiltro.getIdSituacaoOrdemServico());			}			if (helperFiltro.getDataGeracaoInicial() != null					&& helperFiltro.getDataGeracaoFinal() != null) {				query.setDate("dataInicial", helperFiltro.getDataGeracaoInicial());				query.setDate("dataFinal", helperFiltro.getDataGeracaoFinal());			}						retorno = (Collection<Object[]>)					query.list();					} catch (HibernateException e) {			throw new ErroRepositorioException(e, "Erro no Hibernate");		} finally {			HibernateUtil.closeSession(sessao);		}		return retorno;	}			/**	 * [UC1538] Gerar Relatórios dos Comandos de Ordem de Serviço Conexão de Esgoto	 * 	 * [IT0003] Pesquisar OS de Conexão de Esgoto	 * [IT0004] Obter Dados Sintéticos das OS's	 * 	 * @author Mariana Victor		 * @date 22/08/2013	 */	public Collection<Object[]> pesquisarDadosRelatorioComandosConexaoEsgotoSintetico(		FiltrarRelatorioComandosConexaoEsgotoHelper helperFiltro) 			throws ErroRepositorioException {				Session sessao = HibernateUtil.getSession();		Collection<Object[]> retorno = null;				try{			String sql = 					" SELECT " +					"   muni.muni_id AS idMunicipio, " +					"   muni.muni_nmmunicipio AS descMunicipio, " +					"   loca.loca_id AS idLocalidade, " +					"   loca.loca_nmlocalidade AS descLocalidade, " +					"   stcm.stcm_id AS idSetor, " +					"   stcm.stcm_nmsetorcomercial AS descSetor, " +					"   CASE WHEN (orse.amen_id is null) THEN " +					"     'EM ABERTO' " +					"   WHEN (orse.amen_id = :conclusaoServico) THEN " +					"     'ENCERRADA POR EXECUÇÃO' " +					"   ELSE " +					"     mnec.mnec_dsmotivo " +					"   END AS situacaoEncerramento, " +					"   count(distinct orse.orse_id) AS quantidade, " +					"   orse.amen_id AS idMotivoEncerramento " +					" FROM atendimentopublico.ordem_servico orse " +					"   INNER JOIN atendimentopublico.com_os_conexao_esgoto coce ON coce.coce_id = orse.coce_id " +					"   INNER JOIN cadastro.imovel imov ON imov.imov_id = orse.imov_id " +					"   INNER JOIN cadastro.localidade loca ON loca.loca_id = imov.loca_id " +					"   INNER JOIN cadastro.municipio muni ON muni.muni_id = loca.muni_idprincipal " +					"   INNER JOIN cadastro.setor_comercial stcm ON stcm.stcm_id = imov.stcm_id " +					"   LEFT JOIN atendimentopublico.os_nao_emissao_carta_esg onec ON onec.orse_id = orse.orse_id " +					"   LEFT JOIN atendimentopublico.mtvo_nao_emiss_carta_esg mnec ON mnec.mnec_id = onec.mnec_id " +					" WHERE coce.coce_icexecutor = :indicadorExecucao ";			if (helperFiltro.getDescricaoComando() != null					&& !helperFiltro.getDescricaoComando().trim().equals("")) {				sql = sql + " and coce.coce_dscomando like concat(concat('%',:descricaoComando),'%') ";			}			if (helperFiltro.getIdImovel() != null) {				sql = sql + " and coce.imov_id = :idImovel ";			}			if (helperFiltro.getIdMunicipio() != null) {				sql = sql + " and coce.muni_id = :idMunicipio ";			}			if (helperFiltro.getIdLogradouro() != null) {				sql = sql + " and coce.logr_id = :idLogradouro ";			}						//Inscrição Inicial			if (helperFiltro.getIdLocalidadeInicial() != null) {				sql = sql + " and coce.loca_idinicial = :idLocalidadeInicial ";			}			if (helperFiltro.getIdSetorComercialInicial() != null) {				sql = sql + " and coce.stcm_idinicial = :idSetorComercInicial ";			}			if (helperFiltro.getIdQuadraInicial() != null) {				sql = sql + " and coce.qdra_idinicial = :idQuadraInicial ";			}			if (helperFiltro.getIdRotaInicial() != null) {				sql = sql + " and coce.rota_idinicial = :idRotaInicial ";			}			if (helperFiltro.getSequencialRotaInicial() != null) {				sql = sql + " and coce.coce_nnsequencialrotainicial = :sequencialInicial ";			}			//Inscrição Final			if (helperFiltro.getIdLocalidadeFinal() != null) {				sql = sql + " and coce.loca_idfinal = :idLocalidadeFinal ";			}			if (helperFiltro.getIdSetorComercialFinal() != null) {				sql = sql + " and coce.stcm_idfinal = :idSetorComercFinal ";			}			if (helperFiltro.getIdQuadraFinal() != null) {				sql = sql + " and coce.qdra_idfinal = :idQuadraFinal ";			}			if (helperFiltro.getIdRotaFinal() != null) {				sql = sql + " and coce.rota_idfinal = :idRotaFinal ";			}			if (helperFiltro.getSequencialRotaFinal() != null) {				sql = sql + " and coce.coce_nnsequencialrotafinal = :sequencialFinal ";			}			if (helperFiltro.getIdFaturamentoGrupo() != null) {				sql = sql + " and coce.ftgr_id = :idFaturamentoGrupo ";			}			if (helperFiltro.getIdSituacaoOrdemServico() != null) {				sql = sql + " and orse.orse_cdsituacao = :idSituacaoOS ";			}			if (helperFiltro.getDataGeracaoInicial() != null					&& helperFiltro.getDataGeracaoFinal() != null) {				sql = sql + " and to_date(to_char(orse.orse_tmgeracao, 'dd/MM/yyyy'), 'dd/MM/yyyy') between :dataInicial and :dataFinal ";			}						sql = sql  +					" GROUP BY muni.muni_id, muni.muni_nmmunicipio, loca.loca_id, loca.loca_nmlocalidade, " +					"   stcm.stcm_id, stcm.stcm_nmsetorcomercial, orse.amen_id, mnec.mnec_dsmotivo " +					" ORDER BY muni.muni_id, muni.muni_nmmunicipio, loca.loca_id, loca.loca_nmlocalidade, " +					"   stcm.stcm_id, stcm.stcm_nmsetorcomercial, orse.amen_id, mnec.mnec_dsmotivo ";						Query query = sessao.createSQLQuery(sql)					 .addScalar("idMunicipio", Hibernate.INTEGER) //0					 .addScalar("descMunicipio", Hibernate.STRING) //1					 .addScalar("idLocalidade", Hibernate.INTEGER) //2					 .addScalar("descLocalidade", Hibernate.STRING) //3					 .addScalar("idSetor", Hibernate.INTEGER) //4					 .addScalar("descSetor", Hibernate.STRING) //5					 .addScalar("situacaoEncerramento", Hibernate.STRING) //6					 .addScalar("quantidade", Hibernate.INTEGER) //7					 .addScalar("idMotivoEncerramento", Hibernate.INTEGER) //8					 .setInteger("conclusaoServico", AtendimentoMotivoEncerramento.CONCLUSAO_SERVICO)					 .setInteger("indicadorExecucao", helperFiltro.getIndicadorExecucao());						if (helperFiltro.getDescricaoComando() != null					&& !helperFiltro.getDescricaoComando().trim().equals("")) {				query.setString("descricaoComando", helperFiltro.getDescricaoComando().toUpperCase());			}			if (helperFiltro.getIdImovel() != null) {				query.setInteger("idImovel", helperFiltro.getIdImovel());			}			if (helperFiltro.getIdMunicipio() != null) {				query.setInteger("idMunicipio", helperFiltro.getIdMunicipio());			}			if (helperFiltro.getIdLogradouro() != null) {				query.setInteger("idLogradouro", helperFiltro.getIdLogradouro());			}						//Inscrição Inicial			if (helperFiltro.getIdLocalidadeInicial() != null) {				query.setInteger("idLocalidadeInicial", helperFiltro.getIdLocalidadeInicial());			}			if (helperFiltro.getIdSetorComercialInicial() != null) {				query.setInteger("idSetorComercInicial", helperFiltro.getIdSetorComercialInicial());			}			if (helperFiltro.getIdQuadraInicial() != null) {				query.setInteger("idQuadraInicial", helperFiltro.getIdQuadraInicial());			}			if (helperFiltro.getIdRotaInicial() != null) {				query.setInteger("idRotaInicial", helperFiltro.getIdRotaInicial());			}			if (helperFiltro.getSequencialRotaInicial() != null) {				query.setInteger("sequencialInicial", helperFiltro.getSequencialRotaInicial());			}			//Inscrição Final			if (helperFiltro.getIdLocalidadeFinal() != null) {				query.setInteger("idLocalidadeFinal", helperFiltro.getIdLocalidadeFinal());			}			if (helperFiltro.getIdSetorComercialFinal() != null) {				query.setInteger("idSetorComercFinal", helperFiltro.getIdSetorComercialFinal());			}			if (helperFiltro.getIdQuadraFinal() != null) {				query.setInteger("idQuadraFinal", helperFiltro.getIdQuadraFinal());			}			if (helperFiltro.getIdRotaFinal() != null) {				query.setInteger("idRotaFinal", helperFiltro.getIdRotaFinal());			}			if (helperFiltro.getSequencialRotaFinal() != null) {				query.setInteger("sequencialFinal", helperFiltro.getSequencialRotaFinal());			}			if (helperFiltro.getIdFaturamentoGrupo() != null) {				query.setInteger("idFaturamentoGrupo", helperFiltro.getIdFaturamentoGrupo());			}			if (helperFiltro.getIdSituacaoOrdemServico() != null) {				query.setInteger("idSituacaoOS", helperFiltro.getIdSituacaoOrdemServico());			}			if (helperFiltro.getDataGeracaoInicial() != null					&& helperFiltro.getDataGeracaoFinal() != null) {				query.setDate("dataInicial", helperFiltro.getDataGeracaoInicial());				query.setDate("dataFinal", helperFiltro.getDataGeracaoFinal());			}						retorno = (Collection<Object[]>)					query.list();					} catch (HibernateException e) {			throw new ErroRepositorioException(e, "Erro no Hibernate");		} finally {			HibernateUtil.closeSession(sessao);		}		return retorno;	}			/** 	 * O sistema seleciona as ordens de serviço contas que tenham o ano mês referência de 	 * encerramento nulo ou igual ao ano mês da arrecadação.	 * 	 * [UC1557] Gerar Resumo Ações Ordem de Serviço	 * 	 * @author Diogo Luiz	 * @date 18/09/2013 	 * 	 * @throws ControladorException	 */		public Collection<Object[]> pesquisarContaOrdemServico(SistemaParametro sistemaParametros,int numeroPaginas, int quantidadeRegistros)			throws ErroRepositorioException {				Session sessao = HibernateUtil.getSession();								Collection<Object[]> retorno = null;		String consulta = null;		try{						consulta = "select distinct " 					+ "os.orse_id as idOS, " 					+ "im.imov_id as idImovel, " 					+ "os.orse_cdsituacao as cdSituacao, " 					+ "os.amen_id as idAmen, " 					+ "amen.amen_icexecucao as indicadorExec, " 					+ "os.fzst_id as idFiscalizacao "					+ "from atendimentopublico.ordem_servico os "					+ "inner join cadastro.imovel im on im.imov_id = os.imov_id "					+ "inner join atendimentopublico.ordem_servico_contas osc on osc.orse_id = os.orse_id and (osc.osct_amreferenciaencerramento = :anoMesreferencia " 					+ "              or osc.osct_amreferenciaencerramento is null) "					+ "left join atendimentopublico.atend_motivo_encmt amen on amen.amen_id = os.amen_id "					+ "where os.orse_cdsituacao <> :situacaoPendente or (os.orse_cdsituacao = :situacaoPendente and os.orse_tmgeracao between :dataInicio and :dataFim) "					+ "order by os.orse_id";										retorno = (Collection<Object[]>) sessao.createSQLQuery(consulta)							.addScalar("idOS", Hibernate.INTEGER)							.addScalar("idImovel", Hibernate.INTEGER)							.addScalar("cdSituacao", Hibernate.SHORT)							.addScalar("idAmen", Hibernate.INTEGER)							.addScalar("indicadorExec", Hibernate.SHORT)							.addScalar("idFiscalizacao", Hibernate.INTEGER)							.setInteger("anoMesreferencia", sistemaParametros.getAnoMesArrecadacao())							.setShort("situacaoPendente", OrdemServico.SITUACAO_PENDENTE)							.setTimestamp("dataInicio", Util.gerarDataInicialApartirAnoMesRefencia(sistemaParametros.getAnoMesArrecadacao()))							.setTimestamp("dataFim", Util.gerarDataApartirAnoMesRefencia(sistemaParametros.getAnoMesArrecadacao()))							.setMaxResults(quantidadeRegistros)							.setFirstResult(numeroPaginas)							.list();					} catch (HibernateException e) {				throw new ErroRepositorioException(e, "Erro no Hibernate");			} finally {				HibernateUtil.closeSession(sessao);			}				return retorno;	}	 /**	  * exclui o resumo das ordens de serviço da referência igual a referência de sistema parâmetros	 * [UC1557] Gerar Resumo Ações Ordem de Serviço	 * 	 * @author Diogo Luiz	 * @date 18/09/2013 	 * 	 * @throws ControladorException	 */	public void excluirResumoOrdemDeServico() throws ErroRepositorioException {				Session session = HibernateUtil.getSession();		Connection jdbcCon = session.connection();		PreparedStatement st = null;		String delete = null;					try {			delete = "DELETE FROM ATENDIMENTOPUBLICO.resumo_ordem_servico " 					+ " where rsos_amreferencia = " 					+ " (select parm_amreferenciaarrecadacao " 					+ " from cadastro.sistema_parametros)";						st = jdbcCon.prepareStatement(delete);						st.executeUpdate();						} catch (SQLException e) {			e.printStackTrace();		}finally {			if (null != st)				try {					st.close();				} catch (SQLException e) {					throw new ErroRepositorioException(e, "Erro no Hibernate");				}			HibernateUtil.closeSession(session);		}					}		/**	 * [UC 1757] - Gerar Resumo das Acoes de Ordem de Servico	 * [SB 0002] - Determinar Situação Predominante do Débito da Ordem de Serviço	 * 	 * @author Sávio Luiz	 * @date 19/09/2013	 * 	 * @param ordemServico	 * @throws ControladorException	 */		public Collection<Object[]> recuperarDadosContasOS(Integer idOrdemServico)			throws ErroRepositorioException {				Session session = HibernateUtil.getSession();		Collection<Object[]> retorno = null;		String consulta = "";				try{			consulta = 	"select ct.cnta_id as idConta,  "//0					 +  "ct.dcst_idatual as situacaoConta, "//1					 +  "pg.pgmt_id as idPagamento, "//2					 +  "oscont.osct_vlconta as valorConta "//3					 +	"from atendimentopublico.ordem_servico_contas oscont "					 +  "inner join faturamento.conta ct on ct.cnta_id = oscont.cnta_id "					 +  "left join arrecadacao.pagamento pg on pg.cnta_id = ct.cnta_id "					 +	"where orse_id = :idOrdemServico ";							retorno = (Collection<Object[]>)session.createSQLQuery(consulta)								.addScalar("idConta", Hibernate.INTEGER)								.addScalar("situacaoConta", Hibernate.INTEGER)								.addScalar("idPagamento", Hibernate.INTEGER)								.addScalar("valorConta", Hibernate.BIG_DECIMAL)								.setInteger("idOrdemServico", idOrdemServico)								.list();					}catch (HibernateException e) {			throw new ErroRepositorioException(e, "Erro no Hibernate");		} finally {			HibernateUtil.closeSession(session);		}				return retorno;	}		/**	 * [UC 1757] - Gerar Resumo das Acoes de Ordem de Servico	 * [SB 0002] - Determinar Situação Predominante do Débito da Ordem de Serviço	 * 	 * @author Sávio Luiz	 * @date 19/09/2013	 * 	 * @param ordemServico	 * @throws ControladorException	 */		public void atualizarOSResumo(Collection<OrdemServicoContaHelper> collOSContaHelperParaAtualizar) throws ErroRepositorioException{		Session session = HibernateUtil.getSession();		String update;		try {				for(OrdemServicoContaHelper ordemServicoContaHelper : collOSContaHelperParaAtualizar){										// Atualizar os campos LAST_ID, LAGU_DTCORTE, LAGU_NNSELOCORTE e					// LAGU_ TMULTIMAALTERACAO					update = "update gcom.atendimentopublico.ordemservico.OrdemServico set "							+ "CDST_IDRESUMO = :idSituacaoDebitoResumo, "							+ "OSST_IDRESUMO = :idOSSituacao, "							+ "orse_tmultimaalteracao = :datahoracorrente "							+ "where ORSE_ID = :idOS";					session.createQuery(update)							.setInteger("idSituacaoDebitoResumo",								ordemServicoContaHelper.getIdSituacaoDebito())							.setInteger("idOSSituacao", ordemServicoContaHelper.getIdSituacaoOS())							.setInteger("idOS", ordemServicoContaHelper.getIdOrdemServico())							.setTimestamp("datahoracorrente", new Date()).executeUpdate();				}		} catch (HibernateException e) {			e.printStackTrace();			throw new ErroRepositorioException("Erro no Hibernate");		} finally {			HibernateUtil.closeSession(session);			// session.close();		}	}		/**	 * [UC 1757] - Gerar Resumo das Acoes de Ordem de Servico	 * [SB 0001] - Gerar Resumo Ordem de Serviço	 * 	 * @author Sávio Luiz	 * @date 19/09/2013	 * 	 * @param ordemServico	 * @throws ControladorException	 */		public void gerarResumoOrdemServico() throws ErroRepositorioException{		Session session = HibernateUtil.getSession();		Connection con = null;		Statement stmt = null;		con = session.connection();				try {						stmt = con.createStatement();							String insert = "INSERT INTO atendimentopublico.resumo_ordem_servico "					+"(RSOS_ID, "					+"RSOS_AMREFERENCIA, "					+"GREG_ID, "					+"LOCA_ID, "					+"STCM_ID, "					+"RSOS_CDSETORCOMERCIAL, "					+"IPER_ID, "					+"LAST_ID, "					+"LEST_ID, "					+"CATG_ID, "					+"EPOD_ID, "					+"FZST_ID, "					+"AMEN_ID, "					+"UNEG_ID, "					+"EMPR_ID, "					+"SVTP_ID, "					+"OSST_ID, "					+"CDST_ID, "					+"RSOS_QTCONTAS, "					+"RSOS_VLCONTAS, "					+"RSOS_QTORDEMSERVICO, " 					+"RSOS_TMULTIMAALTERACAO) "					+"select "					+"atendimentopublico.seq_resumo_ordem_servico.nextval, "					+"PARM_AMREFERENCIAARRECADACAO, "					+"GREG_ID, "					+"LOCA_ID, "					+"STCM_ID, "					+"STCM_CDSETORCOMERCIAL, "					+"IPER_ID, "					+"LAST_ID,  "					+"LEST_ID, "					+"IMOV_IDCATEGORIAPRINCIPAL, "					+"EPOD_ID, "					+"FZST_ID, "					+"AMEN_ID, "					+"UNEG_ID, "					+"EMPR_ID, "					+"SVTP_ID, "					+"OSST_IDRESUMO, "					+"CDST_IDRESUMO, "					+"RSOS_QTCONTAS, "					+"RSOS_VLCONTAS, "					+"RSOS_QTORDEMSERVICO, "					+"SYSDATE "					+"from ( "					+"select "					+"PARM_AMREFERENCIAARRECADACAO, "					+"loc.GREG_ID, "					+"loc.LOCA_ID, "					+"im.STCM_ID, "					+"STCM_CDSETORCOMERCIAL, "					+"im.IPER_ID, "					+"im.LAST_ID, "					+"im.LEST_ID, "					+"IMOV_IDCATEGORIAPRINCIPAL, "					+"EPOD_ID, "					+"os.FZST_ID, "					+"AMEN_ID, "					+"loc.UNEG_ID, "					+"EMPR_ID, "					+"os.SVTP_ID, "					+"os.OSST_IDRESUMO, "					+"os.CDST_IDRESUMO, "					+"count(cnta_id)    as RSOS_QTCONTAS, "					+"sum(osct_vlconta) as RSOS_VLCONTAS, "					+"count(distinct os.ORSE_ID)    as RSOS_QTORDEMSERVICO "					+"from atendimentopublico.ordem_servico_contas osc "					+"inner join atendimentopublico.ordem_servico os on os.orse_id = osc.orse_id "					+"inner join cadastro.imovel im          on im.imov_id = os.imov_id "					+"inner join cadastro.localidade loc     on loc.loca_id = im.loca_id "					+"inner join cadastro.setor_comercial sc on sc.stcm_id = im.stcm_id "					+"inner join cadastro.sistema_parametros sp on 1 = 1 "					+"inner join cadastro.unidade_organizacional uo on uo.unid_id = os.unid_idatual "					+"left join cadastro.cliente_imovel ci  on ci.imov_id = im.imov_id and crtp_id = 2 and clim_dtrelacaofim is null "					+"left join cadastro.cliente        cl  on cl.clie_id = ci.clie_id "					+"left join cadastro.cliente_tipo   ctp on ctp.cltp_id = cl.cltp_id "					+"where (osc.osct_amreferenciaencerramento is null or osc.osct_amreferenciaencerramento = sp.PARM_AMREFERENCIAARRECADACAO) and os.OSST_IDRESUMO is not null "					+"GROUP BY PARM_AMREFERENCIAARRECADACAO, loc.GREG_ID, loc.LOCA_ID, im.STCM_ID, STCM_CDSETORCOMERCIAL, im.IPER_ID, "					+"im.LAST_ID, im.LEST_ID, IMOV_IDCATEGORIAPRINCIPAL, EPOD_ID, os.FZST_ID, "					+"AMEN_ID, loc.UNEG_ID, EMPR_ID, "					+"os.SVTP_ID, OSST_IDRESUMO, CDST_IDRESUMO "					+") temp";						stmt.executeUpdate(insert);						} catch (HibernateException e) {			throw new ErroRepositorioException(e, "Erro no Hibernate");		} catch (SQLException e) {			throw new ErroRepositorioException(e, "Erro no Hibernate");		} finally {			if (null != stmt)				try {					stmt.close();				} catch (SQLException e) {					throw new ErroRepositorioException(e, "Erro no Hibernate");				}			HibernateUtil.closeSession(session);		}	}		/**	 * [UC 1757] - Gerar Resumo das Acoes de Ordem de Servico	 * [SB 0002] - Determinar Situação Predominante do Débito da Ordem de Serviço	 * 	 * @author Sávio Luiz	 * @date 19/09/2013	 * 	 * @param ordemServico	 * @throws ControladorException	 */		public void atualizarOSContas(SistemaParametro sistemaParametro) throws ErroRepositorioException{		Session session = HibernateUtil.getSession();		String update;		PreparedStatement st = null;		try {			// declara o tipo de conexao			Connection jdbcCon = session.connection();							// Atualizar os campos LAST_ID, LAGU_DTCORTE, LAGU_NNSELOCORTE e				// LAGU_ TMULTIMAALTERACAO				update = "update atendimentopublico.ordem_servico_contas set "						+ "osct_amreferenciaencerramento = ?, "						+ "osct_tmultimaalteracao = ? "						+ "where osct_amreferenciaencerramento is null and ORSE_ID IN ("						+ "SELECT os.ORSE_ID "						+ "from atendimentopublico.ordem_servico_contas osc "						+ "inner join  atendimentopublico.ordem_servico os  on os.orse_id = osc.orse_id "						+ "where osc.osct_amreferenciaencerramento is null and "						+ "os.orse_cdsituacao  = ?)";								// abre a conexao				st = jdbcCon.prepareStatement(update);				st.setInt(1, sistemaParametro.getAnoMesArrecadacao());				st.setTimestamp(2, Util.getSQLTimesTemp(new Date()));				st.setShort(3, OrdemServico.SITUACAO_ENCERRADO);				// executa o update				st.executeUpdate();			} catch (SQLException e) {				// e.printStackTrace();				throw new ErroRepositorioException(e, "Erro no Hibernate");			} finally {				if (null != st)					try {						st.close();					} catch (SQLException e) {						throw new ErroRepositorioException(e, "Erro no Hibernate");					}				HibernateUtil.closeSession(session);			}	}		/**	 * [UC 1757] - Gerar Resumo das Acoes de Ordem de Servico	 * [SB 0002] - Determinar Situação Predominante do Débito da Ordem de Serviço	 * 	 * @author Sávio Luiz	 * @date 19/09/2013	 * 	 * @param ordemServico	 * @throws ControladorException	 */		public Date dataSituacaoParcelamento(Integer idConta) throws ErroRepositorioException {		Date retorno = null;		Session session = HibernateUtil.getSession();		BigDecimal valor = null;		try {			String consulta = "SELECT parc.parc_tmparcelamento as dataPagamento " + 		                      "FROM cobranca.parcelamento_item pcit " +					          "inner join cobranca.parcelamento parc on parc.parc_id = pcit.parc_id and parc.pcst_id = :situacaoNormal " +					          "where pcit.cnta_id = :idConta ";			retorno = (Date) session.createSQLQuery(consulta)					.addScalar("dataPagamento", Hibernate.DATE)					.setInteger("idConta", idConta)					.setInteger("situacaoNormal", ParcelamentoSituacao.NORMAL)					.setMaxResults(1).uniqueResult();					} catch (HibernateException e) {			throw new ErroRepositorioException(	e,												"Erro no Hibernate");		} finally {			HibernateUtil.closeSession(session);		}		return retorno;	}		/**	 * [UC1398] - Definir Equipes a Serem Acompanhadas	 * [SB0004] - Excluir Empresa	 * 	 * @author Davi Menezes	 * @date 10/10/2013	 *  	 * @throws ErroRepositorioException	 */	public void excluirEmpresasAssociadasUsuario(Integer idUsuario) throws ErroRepositorioException{		Session session = HibernateUtil.getSession();		PreparedStatement st = null;		try {			Connection jdbcCon = session.connection();			String delete = "delete from atendimentopublico.usuario_emp_acomp_equipe where usur_id = ?";			st = jdbcCon.prepareStatement(delete);			st.setInt(1, idUsuario.intValue());			st.executeUpdate();		} catch (SQLException e) {			throw new ErroRepositorioException(e, "Erro no Hibernate");		} finally {			if (null != st)				try {					st.close();				} catch (SQLException e) {					throw new ErroRepositorioException(e, "Erro no Hibernate");				}			HibernateUtil.closeSession(session);		}	}		/**	 * [UC1398] - Definir Equipes a Serem Acompanhadas	 * [SB0006] - Excluir Natureza de Equipe	 * 	 * @author Davi Menezes	 * @date 10/10/2013	 *  	 * @throws ErroRepositorioException	 */	public void excluirNaturezaEquipeAssociadasUsuario(Integer idUsuario) throws ErroRepositorioException {		Session session = HibernateUtil.getSession();		PreparedStatement st = null;		try {			Connection jdbcCon = session.connection();			String delete = "delete from atendimentopublico.usuario_nat_acomp_equipe where usur_id = ?";			st = jdbcCon.prepareStatement(delete);			st.setInt(1, idUsuario.intValue());			st.executeUpdate();		} catch (SQLException e) {			throw new ErroRepositorioException(e, "Erro no Hibernate");		} finally {			if (null != st)				try {					st.close();				} catch (SQLException e) {					throw new ErroRepositorioException(e, "Erro no Hibernate");				}			HibernateUtil.closeSession(session);		}	}			/**	 * [UC0366] - Inserir Registro de Atendimento	 * [SB0053] - Remover Registro de Integração com o CompGis	 * 	 * @author Anderson Cabral	 * @date 14/01/2013	 *  	 * @throws ErroRepositorioException	 */	public void excluirRegistroCompGis(Integer idUsuario) throws ErroRepositorioException{		Session session = HibernateUtil.getSession();		PreparedStatement st = null;		try {			Connection jdbcCon = session.connection();			String delete = "DELETE FROM atendimentopublico.coordenadas_compgis WHERE usur_id = ?";			st = jdbcCon.prepareStatement(delete);			st.setInt(1, idUsuario.intValue());			st.executeUpdate();		} catch (SQLException e) {			throw new ErroRepositorioException(e, "Erro no Hibernate");		} finally {			if (null != st)				try {					st.close();				} catch (SQLException e) {					throw new ErroRepositorioException(e, "Erro no Hibernate");				}			HibernateUtil.closeSession(session);		}	}			/**	 * [UC1203] Incluir Ordem de Serviço na Programação	 * [FS0011] Validar Bairro da Ordem de Serviço	 * 	 * @author Hugo Azevedo	 * @date 13/05/2014	 */	public boolean validarBairroOrdemServico(Date dataRoteiro, Equipe equipe,			OrdemServico os) throws ErroRepositorioException{				Integer qtd = new Integer(0);		Session session = HibernateUtil.getSession();		boolean retorno = false;				try {			String consulta =						" SELECT COUNT( "+			" 		  CASE "+			" 		    WHEN (SELECT bair_id "+			" 		      FROM cadastro.logradouro_bairro lb "+			" 		      WHERE lb.lgbr_id = ra.lgbr_id) = bairro "+			" 		    THEN 1 "+			" 		    WHEN (SELECT bair_id "+			" 		      FROM cadastro.logradouro_bairro lb "+			" 		      WHERE lb.lgbr_id = im.lgbr_id) = bairro "+			" 		    THEN 1 "+			" 		  END) AS contador "+			" 		FROM "+			" 		  (SELECT "+			" 		    CASE "+			" 		      WHEN ra.lgbr_id IS NOT NULL "+			" 		      THEN "+			" 		        (SELECT bair_id "+			" 		        FROM cadastro.logradouro_bairro lb "+			" 		        WHERE lb.lgbr_id = ra.lgbr_id "+			" 		        ) "+			" 		      WHEN im.lgbr_id IS NOT NULL "+			" 		      THEN "+			" 		        (SELECT bair_id "+			" 		        FROM cadastro.logradouro_bairro lb "+			" 		        WHERE lb.lgbr_id = im.lgbr_id "+			" 		        ) "+			" 		    END AS bairro "+			" 		  FROM atendimentopublico.ordem_servico os "+			" 		  LEFT JOIN cadastro.imovel im "+			" 		  ON im.imov_id = os.imov_id "+			" 		  LEFT JOIN atendimentopublico.registro_atendimento ra "+			" 		  ON ra.rgat_id = os.rgat_id "+			" 		  WHERE orse_id = :ordem_servico_inserida "+			" 		  ) temp "+			" 		INNER JOIN atendimentopublico.os_prg_acomp_servico pas "+			" 		ON OSAS_DTPROGRAMACAO = :dataprogramacao "+			" 		AND eqpe_id           = :equipe "+			" 		INNER JOIN atendimentopublico.ordem_servico os "+			" 		ON os.orse_id = pas.orse_id "+			" 		LEFT JOIN cadastro.imovel im "+			" 		ON im.imov_id = os.imov_id "+			" 		LEFT JOIN atendimentopublico.registro_atendimento ra "+			" 		ON ra.rgat_id = os.rgat_id ";				qtd = (Integer) session.createSQLQuery(consulta)					.addScalar("contador", Hibernate.INTEGER)					.setDate("dataprogramacao", dataRoteiro)					.setInteger("equipe", equipe.getId())					.setInteger("ordem_servico_inserida", os.getId())					.setMaxResults(1).uniqueResult();						if(qtd != null && qtd.intValue() > 0){				retorno = true;			}					} catch (HibernateException e) {			throw new ErroRepositorioException(	e,												"Erro no Hibernate");		} finally {			HibernateUtil.closeSession(session);		}		return retorno;			}	}