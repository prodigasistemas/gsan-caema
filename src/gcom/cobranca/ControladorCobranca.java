/*
 * Copyright (C) 2007-2007 the GSAN - Sistema Integrado de Gestão de Serviços de Saneamento
 *
 * This file is part of GSAN, an integrated service management system for Sanitation
 *
 * GSAN is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License.
 *
 * GSAN is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA
 */

/*
 * GSAN - Sistema Integrado de Gestão de Serviços de Saneamento
 * Copyright (C) <2007> 
 * Adriano Britto Siqueira
 * Alexandre Santos Cabral
 * Ana Carolina Alves Breda
 * Ana Maria Andrade Cavalcante
 * Aryed Lins de Araújo
 * Bruno Leonardo Rodrigues Barros
 * Carlos Elmano Rodrigues Ferreira
 * Cláudio de Andrade Lira
 * Denys Guimarães Guenes Tavares
 * Eduardo Breckenfeld da Rosa Borges
 * Fabíola Gomes de Araújo
 * Flávio Leonardo Cavalcanti Cordeiro
 * Francisco do Nascimento Júnior
 * Homero Sampaio Cavalcanti
 * Ivan Sérgio da Silva Júnior
 * José Edmar de Siqueira
 * José Thiago Tenório Lopes
 * Kássia Regina Silvestre de Albuquerque
 * Leonardo Luiz Vieira da Silva
 * Márcio Roberto Batista da Silva
 * Maria de Fátima Sampaio Leite
 * Micaela Maria Coelho de Araújo
 * Nelson Mendonça de Carvalho
 * Newton Morais e Silva
 * Pedro Alexandre Santos da Silva Filho
 * Rafael Corrêa Lima e Silva
 * Rafael Francisco Pinto
 * Rafael Koury Monteiro
 * Rafael Palermo de Araújo
 * Raphael Veras Rossiter
 * Roberto Sobreira Barbalho
 * Rodrigo Avellar Silveira
 * Rosana Carvalho Barbosa
 * Sávio Luiz de Andrade Cavalcante
 * Tai Mu Shih
 * Thiago Augusto Souza do Nascimento
 * Tiago Moreno Rodrigues
 * Vivianne Barbosa Sousa
 * Anderson Italo Felinto de Lima
 *
 * Este programa é software livre; você pode redistribuí-lo e/ou
 * modificá-lo sob os termos de Licença Pública Geral GNU, conforme
 * publicada pela Free Software Foundation; versão 2 da
 * Licença.
 * Este programa é distribuído na expectativa de ser útil, mas SEM
 * QUALQUER GARANTIA; sem mesmo a garantia implícita de
 * COMERCIALIZAÇÃO ou de ADEQUAÇÃO A QUALQUER PROPÓSITO EM
 * PARTICULAR. Consulte a Licença Pública Geral GNU para obter mais
 * detalhes.
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU
 * junto com este programa; se não, escreva para Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA
 * 02111-1307, USA.
 */
package gcom.cobranca;

import gcom.arrecadacao.ArrecadacaoForma;
import gcom.arrecadacao.Arrecadador;
import gcom.arrecadacao.ArrecadadorContratoTarifa;
import gcom.arrecadacao.ControladorArrecadacaoLocal;
import gcom.arrecadacao.ControladorArrecadacaoLocalHome;
import gcom.arrecadacao.DeducaoTipo;
import gcom.arrecadacao.Devolucao;
import gcom.arrecadacao.FiltroArrecadador;
import gcom.arrecadacao.FiltroDevolucao;
import gcom.arrecadacao.IRepositorioArrecadacao;
import gcom.arrecadacao.RepositorioArrecadacaoHBM;
import gcom.arrecadacao.aviso.AvisoBancario;
import gcom.arrecadacao.aviso.AvisoDeducoes;
import gcom.arrecadacao.aviso.AvisoDeducoesPK;
import gcom.arrecadacao.banco.Agencia;
import gcom.arrecadacao.banco.ContaBancaria;
import gcom.arrecadacao.debitoautomatico.DebitoAutomatico;
import gcom.arrecadacao.pagamento.FiltroGuiaPagamento;
import gcom.arrecadacao.pagamento.FiltroGuiaPagamentoCategoria;
import gcom.arrecadacao.pagamento.FiltroPagamento;
import gcom.arrecadacao.pagamento.GuiaPagamento;
import gcom.arrecadacao.pagamento.GuiaPagamentoCategoria;
import gcom.arrecadacao.pagamento.GuiaPagamentoCategoriaPK;
import gcom.arrecadacao.pagamento.GuiaPagamentoItem;
import gcom.arrecadacao.pagamento.GuiaPagamentoParcelamentoCartao;
import gcom.arrecadacao.pagamento.GuiaPagamentoParcelamentoCartaoPK;
import gcom.arrecadacao.pagamento.Pagamento;
import gcom.arrecadacao.pagamento.PagamentoCartaoDebito;
import gcom.arrecadacao.pagamento.PagamentoCartaoDebitoItem;
import gcom.arrecadacao.pagamento.PagamentoHistorico;
import gcom.arrecadacao.pagamento.PagamentoNaoGeracaoCobrancaResultado;
import gcom.arrecadacao.pagamento.PagamentoSituacao;
import gcom.atendimentopublico.ControladorAtendimentoPublicoLocal;
import gcom.atendimentopublico.ControladorAtendimentoPublicoLocalHome;
import gcom.atendimentopublico.IRepositorioAtendimentoPublico;
import gcom.atendimentopublico.RepositorioAtendimentoPublicoHBM;
import gcom.atendimentopublico.ligacaoagua.CorteTipo;
import gcom.atendimentopublico.ligacaoagua.FiltroLigacaoAgua;
import gcom.atendimentopublico.ligacaoagua.FiltroLigacaoAguaSituacao;
import gcom.atendimentopublico.ligacaoagua.LigacaoAgua;
import gcom.atendimentopublico.ligacaoagua.LigacaoAguaSituacao;
import gcom.atendimentopublico.ligacaoesgoto.ControladorLigacaoEsgotoLocal;
import gcom.atendimentopublico.ligacaoesgoto.ControladorLigacaoEsgotoLocalHome;
import gcom.atendimentopublico.ligacaoesgoto.FiltroLigacaoEsgotoSituacao;
import gcom.atendimentopublico.ligacaoesgoto.LigacaoEsgotoSituacao;
import gcom.atendimentopublico.ordemservico.ControladorOrdemServicoLocal;
import gcom.atendimentopublico.ordemservico.ControladorOrdemServicoLocalHome;
import gcom.atendimentopublico.ordemservico.FiltroOrdemServico;
import gcom.atendimentopublico.ordemservico.FiltroServicoTipo;
import gcom.atendimentopublico.ordemservico.FiscalizacaoSituacao;
import gcom.atendimentopublico.ordemservico.IRepositorioOrdemServico;
import gcom.atendimentopublico.ordemservico.OrdemServico;
import gcom.atendimentopublico.ordemservico.OrdemServicoFiscSit;
import gcom.atendimentopublico.ordemservico.OrdemServicoSituacao;
import gcom.atendimentopublico.ordemservico.OrdemServicoUnidade;
import gcom.atendimentopublico.ordemservico.RepositorioOrdemServicoHBM;
import gcom.atendimentopublico.ordemservico.ServicoTipo;
import gcom.atendimentopublico.registroatendimento.AtendimentoMotivoEncerramento;
import gcom.atendimentopublico.registroatendimento.AtendimentoRelacaoTipo;
import gcom.atendimentopublico.registroatendimento.EspecificacaoTipoValidacao;
import gcom.atendimentopublico.registroatendimento.FiltroAtendimentoMotivoEncerramento;
import gcom.atendimentopublico.registroatendimento.RegistroAtendimento;
import gcom.autoatendimento.ContaConsultarHelper;
import gcom.autoatendimento.ContaPagamentoAVistaHelper;
import gcom.autoatendimento.ContaParcelamentoDebitoHelper;
import gcom.autoatendimento.ContaValorHelper;
import gcom.autoatendimento.DebitoCreditoPagamentoAVistaHelper;
import gcom.autoatendimento.EconomiaHelper;
import gcom.autoatendimento.OpcaoParcelamentoAutoAtendimentoHelper;
import gcom.autoatendimento.PagamentoAVistaParcelamentoDebitoHelper;
import gcom.autoatendimento.ParcelamentoDebitoEfetuadoHelper;
import gcom.autoatendimento.ParcelamentoDebitoHelper;
import gcom.batch.ControladorBatchLocal;
import gcom.batch.ControladorBatchLocalHome;
import gcom.batch.IRepositorioBatch;
import gcom.batch.RepositorioBatchHBM;
import gcom.batch.UnidadeProcessamento;
import gcom.batch.auxiliarbatch.CobrancaDocumentoControleGeracao;
import gcom.cadastro.ControladorCadastroLocal;
import gcom.cadastro.ControladorCadastroLocalHome;
import gcom.cadastro.EnvioEmail;
import gcom.cadastro.IRepositorioCadastro;
import gcom.cadastro.MotivoRetiradaCobranca;
import gcom.cadastro.RepositorioCadastroHBM;
import gcom.cadastro.cliente.Cliente;
import gcom.cadastro.cliente.ClienteFone;
import gcom.cadastro.cliente.ClienteGuiaPagamento;
import gcom.cadastro.cliente.ClienteImovel;
import gcom.cadastro.cliente.ClienteRelacaoTipo;
import gcom.cadastro.cliente.ClienteTipo;
import gcom.cadastro.cliente.ControladorClienteLocal;
import gcom.cadastro.cliente.ControladorClienteLocalHome;
import gcom.cadastro.cliente.EsferaPoder;
import gcom.cadastro.cliente.FiltroCliente;
import gcom.cadastro.cliente.FiltroClienteImovel;
import gcom.cadastro.cliente.FiltroClienteRelacaoTipo;
import gcom.cadastro.cliente.FiltroEsferaPoder;
import gcom.cadastro.cliente.FoneTipo;
import gcom.cadastro.cliente.IRepositorioCliente;
import gcom.cadastro.cliente.IRepositorioClienteImovel;
import gcom.cadastro.cliente.RepositorioClienteHBM;
import gcom.cadastro.cliente.RepositorioClienteImovelHBM;
import gcom.cadastro.empresa.Empresa;
import gcom.cadastro.empresa.EmpresaCobrancaFaixa;
import gcom.cadastro.empresa.FiltroEmpresa;
import gcom.cadastro.empresa.FiltroEmpresaCobrancaFaixa;
import gcom.cadastro.endereco.ControladorEnderecoLocal;
import gcom.cadastro.endereco.ControladorEnderecoLocalHome;
import gcom.cadastro.endereco.FiltroLogradouroTipo;
import gcom.cadastro.endereco.Logradouro;
import gcom.cadastro.endereco.LogradouroTipo;
import gcom.cadastro.geografico.Microrregiao;
import gcom.cadastro.geografico.Municipio;
import gcom.cadastro.geografico.Regiao;
import gcom.cadastro.imovel.Categoria;
import gcom.cadastro.imovel.ControladorImovelLocal;
import gcom.cadastro.imovel.ControladorImovelLocalHome;
import gcom.cadastro.imovel.FiltroCategoria;
import gcom.cadastro.imovel.FiltroImovel;
import gcom.cadastro.imovel.FiltroImovelCobrancaSituacao;
import gcom.cadastro.imovel.FiltroImovelPerfil;
import gcom.cadastro.imovel.FiltroSubCategoria;
import gcom.cadastro.imovel.IRepositorioImovel;
import gcom.cadastro.imovel.Imovel;
import gcom.cadastro.imovel.ImovelCobrancaSituacao;
import gcom.cadastro.imovel.ImovelPerfil;
import gcom.cadastro.imovel.ImovelSituacao;
import gcom.cadastro.imovel.ImovelSituacaoTipo;
import gcom.cadastro.imovel.ImovelSubcategoria;
import gcom.cadastro.imovel.PocoTipo;
import gcom.cadastro.imovel.RepositorioImovelHBM;
import gcom.cadastro.imovel.Subcategoria;
import gcom.cadastro.imovel.bean.ContasCobrancaHelper;
import gcom.cadastro.imovel.bean.GerarRelacaoDebitosHelper;
import gcom.cadastro.imovel.bean.GerarRelacaoDebitosImovelHelper;
import gcom.cadastro.imovel.bean.ImovelCobrancaSituacaoHelper;
import gcom.cadastro.localidade.ControladorLocalidadeLocal;
import gcom.cadastro.localidade.ControladorLocalidadeLocalHome;
import gcom.cadastro.localidade.FiltroGerenciaRegional;
import gcom.cadastro.localidade.FiltroLocalidade;
import gcom.cadastro.localidade.FiltroQuadra;
import gcom.cadastro.localidade.FiltroSetorComercial;
import gcom.cadastro.localidade.FiltroUnidadeNegocio;
import gcom.cadastro.localidade.GerenciaRegional;
import gcom.cadastro.localidade.Localidade;
import gcom.cadastro.localidade.Quadra;
import gcom.cadastro.localidade.SetorComercial;
import gcom.cadastro.localidade.UnidadeNegocio;
import gcom.cadastro.sistemaparametro.FiltroSistemaParametro;
import gcom.cadastro.sistemaparametro.NacionalFeriado;
import gcom.cadastro.sistemaparametro.SistemaParametro;
import gcom.cadastro.unidade.ControladorUnidadeLocal;
import gcom.cadastro.unidade.ControladorUnidadeLocalHome;
import gcom.cadastro.unidade.UnidadeOrganizacional;
import gcom.cobranca.bean.CalcularAcrescimoPorImpontualidadeHelper;
import gcom.cobranca.bean.CalcularValorDataVencimentoAnteriorHelper;
import gcom.cobranca.bean.CalcularValorDescontoAntiguidadeDebitoHelper;
import gcom.cobranca.bean.CancelarDocumentosCobrancaHelper;
import gcom.cobranca.bean.CobrancaAcaoAtividadeHelper;
import gcom.cobranca.bean.CobrancaAcaoHelper;
import gcom.cobranca.bean.CobrancaCronogramaHelper;
import gcom.cobranca.bean.CobrancaDocumentoHelper;
import gcom.cobranca.bean.ConcluirParcelamentoDebitosHelper;
import gcom.cobranca.bean.ConsultarTransferenciasDebitoHelper;
import gcom.cobranca.bean.ContaValoresHelper;
import gcom.cobranca.bean.DadosCobrancaDocumentoHelper;
import gcom.cobranca.bean.DadosConsultaNegativacaoHelper;
import gcom.cobranca.bean.DadosPesquisaCobrancaDocumentoHelper;
import gcom.cobranca.bean.DebitoCreditoParcelamentoHelper;
import gcom.cobranca.bean.DeterminarValorDescontoAcrescimosImpontualidadeHelper;
import gcom.cobranca.bean.DeterminarValorDescontoPagamentoAVistaHelper;
import gcom.cobranca.bean.EmissaoDocumentoCobrancaHelper;
import gcom.cobranca.bean.EmitirDocumentoCobrancaHelper;
import gcom.cobranca.bean.FiltrarComandosAcaoCobrancaEventualHelper;
import gcom.cobranca.bean.FiltrarDocumentoCobrancaHelper;
import gcom.cobranca.bean.FiltrarRelacaoParcelamentoHelper;
import gcom.cobranca.bean.FiltroSupressoesReligacoesReestabelecimentoHelper;
import gcom.cobranca.bean.GerarAtividadeAcaoCobrancaHelper;
import gcom.cobranca.bean.GerarResumoAcoesCobrancaCronogramaHelper;
import gcom.cobranca.bean.GuiaPagamentoValoresHelper;
import gcom.cobranca.bean.IncluirConfirmacaoParcelamentoHelper;
import gcom.cobranca.bean.IndicadoresParcelamentoHelper;
import gcom.cobranca.bean.NegociacaoOpcoesParcelamentoHelper;
import gcom.cobranca.bean.ObterDadosConfirmarCartaoCreditoDebitoHelper;
import gcom.cobranca.bean.ObterDebitoImovelOuClienteHelper;
import gcom.cobranca.bean.ObterOpcoesDeParcelamentoHelper;
import gcom.cobranca.bean.OpcoesParcelamentoHelper;
import gcom.cobranca.bean.ParcelamentoCartaoCreditoHelper;
import gcom.cobranca.bean.ParcelamentoRelatorioHelper;
import gcom.cobranca.bean.PesquisarQtdeRotasSemCriteriosParaAcoesCobranca;
import gcom.cobranca.bean.RelatorioBoletimMedicaoAcompanhamentoHelper;
import gcom.cobranca.bean.RelatorioCobrancaPorResultadoPorComandoMesHelper;
import gcom.cobranca.bean.SituacaoEspecialCobrancaHelper;
import gcom.cobranca.bean.TransferenciasDebitoHelper;
import gcom.cobranca.bean.VerificarCriterioCobrancaParaImovelHelper;
import gcom.cobranca.cobrancaporresultado.ConsultarComandosContasCobrancaEmpresaHelper;
import gcom.cobranca.cobrancaporresultado.IncluirContaEmCobrancaHelper;
import gcom.cobranca.cobrancaporresultado.QuantidadeImoveisSetorCobrancaResultadoHelper;
import gcom.cobranca.cobrancaporresultado.RegistrarArquivoTxtEncerramentoOSCobrancaHelper;
import gcom.cobranca.contratoparcelamento.ContratoParcelamento;
import gcom.cobranca.contratoparcelamento.ContratoParcelamentoItem;
import gcom.cobranca.contratoparcelamento.ControladorContratoParcelamentoLocal;
import gcom.cobranca.contratoparcelamento.ControladorContratoParcelamentoLocalHome;
import gcom.cobranca.parcelamento.DescontoValorDebitoPeriodo;
import gcom.cobranca.parcelamento.FiltroDescontoValorDebitoPeriodo;
import gcom.cobranca.parcelamento.FiltroParcDesctoInativVista;
import gcom.cobranca.parcelamento.FiltroParcelaEntradaDesconto;
import gcom.cobranca.parcelamento.FiltroParcelamento;
import gcom.cobranca.parcelamento.FiltroParcelamentoDescontoAntiguidade;
import gcom.cobranca.parcelamento.FiltroParcelamentoDescontoInatividade;
import gcom.cobranca.parcelamento.FiltroParcelamentoFaixaValor;
import gcom.cobranca.parcelamento.FiltroParcelamentoItem;
import gcom.cobranca.parcelamento.FiltroParcelamentoPagamentoCartaoCredito;
import gcom.cobranca.parcelamento.FiltroParcelamentoPerfil;
import gcom.cobranca.parcelamento.FiltroParcelamentoQuantidadePrestacao;
import gcom.cobranca.parcelamento.FiltroParcelamentoQuantidadePrestacaoSituacaoLigacaoAgua;
import gcom.cobranca.parcelamento.FiltroParcelamentoQuantidadeReparcelamento;
import gcom.cobranca.parcelamento.ParcDesctoInativVista;
import gcom.cobranca.parcelamento.ParcelaEntradaDesconto;
import gcom.cobranca.parcelamento.Parcelamento;
import gcom.cobranca.parcelamento.ParcelamentoDescontoAntiguidade;
import gcom.cobranca.parcelamento.ParcelamentoDescontoInatividade;
import gcom.cobranca.parcelamento.ParcelamentoFaixaValor;
import gcom.cobranca.parcelamento.ParcelamentoItem;
import gcom.cobranca.parcelamento.ParcelamentoMotivoDesfazer;
import gcom.cobranca.parcelamento.ParcelamentoPagamentoCartaoCredito;
import gcom.cobranca.parcelamento.ParcelamentoPerfil;
import gcom.cobranca.parcelamento.ParcelamentoQuantidadePrestacao;
import gcom.cobranca.parcelamento.ParcelamentoQuantidadePrestacaoHelper;
import gcom.cobranca.parcelamento.ParcelamentoQuantidadePrestacaoSituacaoLigacaoAgua;
import gcom.cobranca.parcelamento.ParcelamentoQuantidadeReparcelamento;
import gcom.cobranca.parcelamento.ParcelamentoQuantidadeReparcelamentoHelper;
import gcom.cobranca.parcelamento.ParcelamentoQuantidadeReparcelamentoRelatorioHelper;
import gcom.cobranca.parcelamento.ParcelamentoSituacao;
import gcom.cobranca.parcelamento.ParcelamentoTipo;
import gcom.cobranca.parcelamentojudicial.CancelarGuiaAtrasoObterListaParcelamentoJudicialHelper;
import gcom.cobranca.parcelamentojudicial.CancelarGuiaAtrasoParcelamentoJudicialHelper;
import gcom.cobranca.parcelamentojudicial.EmitirGuiasParcelamentoJudicialHelper;
import gcom.cobranca.parcelamentojudicial.FiltrarManterParcelamentoJudicial;
import gcom.cobranca.parcelamentojudicial.ManterParcelamentoJudicialConsultarParcelamentoJudicialHelper;
import gcom.cobranca.parcelamentojudicial.ManterParcelamentoJudicialObterListaParcelamentoJudicialHelper;
import gcom.cobranca.parcelamentojudicial.ParcelamentoJudicial;
import gcom.cobranca.parcelamentojudicial.ParcelamentoJudicialImovel;
import gcom.cobranca.parcelamentojudicial.ParcelamentoJudicialItem;
import gcom.fachada.Fachada;
import gcom.faturamento.ControladorFaturamentoLocal;
import gcom.faturamento.ControladorFaturamentoLocalHome;
import gcom.faturamento.FaturamentoAtividade;
import gcom.faturamento.FaturamentoGrupo;
import gcom.faturamento.FaturamentoSituacaoTipo;
import gcom.faturamento.FiltroGuiaPagamentoItem;
import gcom.faturamento.GuiaPagamentoGeral;
import gcom.faturamento.IRepositorioFaturamento;
import gcom.faturamento.QualidadeAgua;
import gcom.faturamento.RepositorioFaturamentoHBM;
import gcom.faturamento.bean.CalcularValoresAguaEsgotoHelper;
import gcom.faturamento.bean.EmitirContaHelper;
import gcom.faturamento.consumotarifa.ConsumoTarifa;
import gcom.faturamento.conta.Conta;
import gcom.faturamento.conta.ContaCategoria;
import gcom.faturamento.conta.ContaCategoriaConsumoFaixa;
import gcom.faturamento.conta.ContaGeral;
import gcom.faturamento.conta.ContaImpostosDeduzidos;
import gcom.faturamento.conta.ContaMotivoCancelamento;
import gcom.faturamento.conta.ContaMotivoInclusao;
import gcom.faturamento.conta.ContaMotivoRevisao;
import gcom.faturamento.conta.FiltroConta;
import gcom.faturamento.conta.FiltroContaCategoria;
import gcom.faturamento.conta.FiltroContaCategoriaConsumoFaixa;
import gcom.faturamento.conta.FiltroContaGeral;
import gcom.faturamento.conta.FiltroContaImpostosDeduzidos;
import gcom.faturamento.conta.ImpostoDeduzidoHelper;
import gcom.faturamento.credito.CreditoARealizar;
import gcom.faturamento.credito.CreditoARealizarCategoria;
import gcom.faturamento.credito.CreditoARealizarCategoriaPK;
import gcom.faturamento.credito.CreditoARealizarGeral;
import gcom.faturamento.credito.CreditoOrigem;
import gcom.faturamento.credito.CreditoRealizado;
import gcom.faturamento.credito.CreditoRealizadoCategoria;
import gcom.faturamento.credito.CreditoRealizadoCategoriaPK;
import gcom.faturamento.credito.CreditoTipo;
import gcom.faturamento.credito.FiltroCreditoARealizar;
import gcom.faturamento.credito.FiltroCreditoRealizado;
import gcom.faturamento.credito.FiltroCreditoRealizadoCategoria;
import gcom.faturamento.credito.FiltroCreditoTipo;
import gcom.faturamento.debito.DebitoACobrar;
import gcom.faturamento.debito.DebitoACobrarCategoria;
import gcom.faturamento.debito.DebitoACobrarCategoriaPK;
import gcom.faturamento.debito.DebitoACobrarGeral;
import gcom.faturamento.debito.DebitoCobrado;
import gcom.faturamento.debito.DebitoCobradoCategoria;
import gcom.faturamento.debito.DebitoCobradoCategoriaPK;
import gcom.faturamento.debito.DebitoCreditoSituacao;
import gcom.faturamento.debito.DebitoTipo;
import gcom.faturamento.debito.FiltroDebitoACobrar;
import gcom.faturamento.debito.FiltroDebitoCobrado;
import gcom.faturamento.debito.FiltroDebitoCobradoCategoria;
import gcom.faturamento.debito.FiltroDebitoCreditoSituacao;
import gcom.faturamento.debito.FiltroDebitoTipo;
import gcom.financeiro.FinanciamentoTipo;
import gcom.financeiro.lancamento.LancamentoItemContabil;
import gcom.gerencial.bean.InformarDadosGeracaoResumoAcaoConsultaEventualHelper;
import gcom.gerencial.bean.InformarDadosGeracaoResumoAcaoConsultaHelper;
import gcom.gerencial.bean.InformarDadosGeracaoResumoAcaoConsultaPeriodoHelper;
import gcom.gui.ActionServletException;
import gcom.gui.cobranca.cobrancaporresultado.ConsultarNaoGeracaoImoveisContasComandosHelper;
import gcom.gui.cobranca.cobrancaporresultado.MovimentarOrdemServicoEncerrarOSHelper;
import gcom.gui.cobranca.cobrancaporresultado.MovimentarOrdemServicoGerarOSHelper;
import gcom.gui.cobranca.cobrancaporresultado.RetirarImoveisContasEmpresaCobrancaHelper;
import gcom.gui.cobranca.parcelamentojudicial.bean.ContaParcelamentoJudicialHelper;
import gcom.gui.cobranca.parcelamentojudicial.bean.ParcelaJudicialHelper;
import gcom.gui.cobranca.parcelamentojudicial.bean.RegistroImovelHelper;
import gcom.gui.portal.RelatorioDocumentosParcelamentoPortal;
import gcom.gui.relatorio.atendimentopublico.FiltrarRelatorioAcompanhamentoBoletimMedicaoHelper;
import gcom.gui.relatorio.cobranca.FaixaHelper;
import gcom.gui.relatorio.cobranca.FiltroRelatorioDocumentosAReceberHelper;
import gcom.interceptor.Interceptador;
import gcom.interceptor.RegistradorOperacao;
import gcom.micromedicao.ContratoEmpresaServico;
import gcom.micromedicao.ControladorMicromedicaoLocal;
import gcom.micromedicao.ControladorMicromedicaoLocalHome;
import gcom.micromedicao.FiltroRota;
import gcom.micromedicao.IRepositorioMicromedicao;
import gcom.micromedicao.ItemServico;
import gcom.micromedicao.RateioTipo;
import gcom.micromedicao.RepositorioMicromedicaoHBM;
import gcom.micromedicao.Rota;
import gcom.micromedicao.bean.ConsultarHistoricoMedicaoIndividualizadaHelper;
import gcom.micromedicao.consumo.ConsumoAnormalidade;
import gcom.micromedicao.consumo.ConsumoHistorico;
import gcom.micromedicao.consumo.ConsumoTipo;
import gcom.micromedicao.consumo.LigacaoTipo;
import gcom.micromedicao.hidrometro.FiltroHidrometroInstalacaoHistorico;
import gcom.micromedicao.hidrometro.HidrometroCapacidade;
import gcom.micromedicao.hidrometro.HidrometroInstalacaoHistorico;
import gcom.micromedicao.leitura.LeituraAnormalidade;
import gcom.micromedicao.medicao.MedicaoHistorico;
import gcom.relatorio.RelatorioDataSource;
import gcom.relatorio.arrecadacao.pagamento.GuiaPagamentoRelatorioHelper;
import gcom.relatorio.arrecadacao.pagamento.RelatorioEmitirGuiaPagamentoDetailBean;
import gcom.relatorio.cobranca.AcoesPenalidadeGrupoHelper;
import gcom.relatorio.cobranca.BoletimMedicaoContratoDadosHelper;
import gcom.relatorio.cobranca.BoletimMedicaoContratoHelper;
import gcom.relatorio.cobranca.CurvaAbcDebitosHelper;
import gcom.relatorio.cobranca.FiltrarRelatorioBoletimMedicaoCobrancaHelper;
import gcom.relatorio.cobranca.FiltrarRelatorioParcelasEmAtrasoParcelamentoJudicialHelper;
import gcom.relatorio.cobranca.RelatorioAcompanhamentoAcoesCobrancaHelper;
import gcom.relatorio.cobranca.RelatorioAcompanhamentoBoletimMedicaoContratoBean;
import gcom.relatorio.cobranca.RelatorioAcompanhamentoBoletimMedicaoContratoHelper;
import gcom.relatorio.cobranca.RelatorioAnalisePerdasCreditosBean;
import gcom.relatorio.cobranca.RelatorioBoletimMedicaoCobrancaHelper;
import gcom.relatorio.cobranca.RelatorioDocumentoCobrancaMotivosEncerramentoBean;
import gcom.relatorio.cobranca.RelatorioDocumentoCobrancaOrdemCorteBean;
import gcom.relatorio.cobranca.RelatorioDocumentoCobrancaOrdemFiscalizacaoBean;
import gcom.relatorio.cobranca.RelatorioDocumentoCobrancaOrdemFiscalizacaoSubBean;
import gcom.relatorio.cobranca.RelatorioDocumentosAReceberBean;
import gcom.relatorio.cobranca.RelatorioEmitirDeclaracaoTransferenciaDebitoBean;
import gcom.relatorio.cobranca.RelatorioEmitirResumoParcelamentoJudicialHelper;
import gcom.relatorio.cobranca.RelatorioGerarRelacaoDebitosBean;
import gcom.relatorio.cobranca.RelatorioGerarRelacaoDebitosContasBean;
import gcom.relatorio.cobranca.RelatorioGerarRelacaoDebitosContasTotalBean;
import gcom.relatorio.cobranca.RelatorioGerarRelacaoDebitosGuiasPagamentoBean;
import gcom.relatorio.cobranca.RelatorioGerarRelacaoDebitosGuiasPagamentoTotalBean;
import gcom.relatorio.cobranca.RelatorioGerarRelacaoDebitosTipoDebitoCreditoBean;
import gcom.relatorio.cobranca.RelatorioGerarRelacaoDebitosTotaisImovelBean;
import gcom.relatorio.cobranca.RelatorioImoveisComAcordoBean;
import gcom.relatorio.cobranca.RelatorioListaContasParceladasHelper;
import gcom.relatorio.cobranca.RelatorioNotificacaoDebitoBean;
import gcom.relatorio.cobranca.RelatorioPagamentosContasCobrancaEmpresaBean;
import gcom.relatorio.cobranca.RelatorioRetornoOrdemServicoFiscalizacaoBean;
import gcom.relatorio.cobranca.RelatorioVisitaCobrancaBean;
import gcom.relatorio.cobranca.RelatorioVisitaCobrancaSubBean;
import gcom.relatorio.cobranca.RetornosInformadosRelatorioRetornoOSFiscalizacaoHelper;
import gcom.relatorio.cobranca.cobrancaporresultado.RelatorioAcompanhamentoComandosCobrancaBean;
import gcom.relatorio.cobranca.cobrancaporresultado.RelatorioAcompanhamentoComandosCobrancaSubBean;
import gcom.relatorio.cobranca.cobrancaporresultado.RelatorioConsultarOSBean;
import gcom.relatorio.cobranca.cobrancaporresultado.RelatorioImoveisContasRetiradosEmpresasCobrancaBean;
import gcom.relatorio.cobranca.cobrancaporresultado.RelatorioImoveisContasRetiradosEmpresasCobrancaSubBean;
import gcom.relatorio.cobranca.cobrancaporresultado.RelatorioPenalidadesIndiceAtuacaoSucessoFinanceiroBean;
import gcom.relatorio.cobranca.parcelamento.ExtratoDebitoRelatorioHelper;
import gcom.relatorio.cobranca.parcelamento.RelacaoParcelamentoRelatorioHelper;
import gcom.relatorio.cobranca.parcelamento.RelatorioParcelamento;
import gcom.relatorio.cobranca.parcelamento.RelatorioParcelamentoDetalhamentoBean;
import gcom.relatorio.cobranca.parcelamento.RelatorioRelacaoParcelamentoAnaliticoBean;
import gcom.relatorio.cobranca.parcelamento.RelatorioRelacaoParcelamentoCartaoCreditoBean;
import gcom.relatorio.faturamento.conta.RelatorioContaBean;
import gcom.relatorio.faturamento.conta.RelatorioContaConsumosAnterioresBean;
import gcom.relatorio.faturamento.conta.RelatorioContaDetailBean;
import gcom.seguranca.ControladorPermissaoEspecialLocal;
import gcom.seguranca.ControladorPermissaoEspecialLocalHome;
import gcom.seguranca.acesso.Abrangencia;
import gcom.seguranca.acesso.ControladorAcessoLocal;
import gcom.seguranca.acesso.ControladorAcessoLocalHome;
import gcom.seguranca.acesso.Operacao;
import gcom.seguranca.acesso.OperacaoEfetuada;
import gcom.seguranca.acesso.PermissaoEspecial;
import gcom.seguranca.acesso.usuario.ControladorUsuarioLocal;
import gcom.seguranca.acesso.usuario.ControladorUsuarioLocalHome;
import gcom.seguranca.acesso.usuario.FiltroUsuario;
import gcom.seguranca.acesso.usuario.Usuario;
import gcom.seguranca.acesso.usuario.UsuarioAcao;
import gcom.seguranca.acesso.usuario.UsuarioAcaoUsuarioHelper;
import gcom.seguranca.transacao.AlteracaoTipo;
import gcom.seguranca.transacao.ControladorTransacaoLocal;
import gcom.seguranca.transacao.ControladorTransacaoLocalHome;
import gcom.spcserasa.ControladorSpcSerasaLocal;
import gcom.spcserasa.ControladorSpcSerasaLocalHome;
import gcom.util.ConstantesJNDI;
import gcom.util.ConstantesSistema;
import gcom.util.ControladorException;
import gcom.util.ControladorUtilLocal;
import gcom.util.ControladorUtilLocalHome;
import gcom.util.ErroRepositorioException;
import gcom.util.IRepositorioUtil;
import gcom.util.IoUtil;
import gcom.util.RepositorioUtilHBM;
import gcom.util.ServiceLocator;
import gcom.util.ServiceLocatorException;
import gcom.util.SistemaException;
import gcom.util.Util;
import gcom.util.ZipUtil;
import gcom.util.email.ErroEmailException;
import gcom.util.email.ServicosEmail;
import gcom.util.filtro.ComparacaoTexto;
import gcom.util.filtro.ConectorOr;
import gcom.util.filtro.Filtro;
import gcom.util.filtro.FiltroParametro;
import gcom.util.filtro.Intervalo;
import gcom.util.filtro.MaiorQue;
import gcom.util.filtro.MenorQue;
import gcom.util.filtro.MenorQueComparacaoColuna;
import gcom.util.filtro.ParametroNaoNulo;
import gcom.util.filtro.ParametroNulo;
import gcom.util.filtro.ParametroSimples;
import gcom.util.filtro.ParametroSimplesDiferenteDe;
import gcom.util.filtro.ParametroSimplesIn;

import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.OutputStreamWriter;
import java.io.PrintWriter;
import java.math.BigDecimal;
import java.sql.Timestamp;
import java.text.DateFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Calendar;
import java.util.Collection;
import java.util.Collections;
import java.util.Comparator;
import java.util.Date;
import java.util.GregorianCalendar;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Iterator;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.StringTokenizer;
import java.util.TreeMap;
import java.util.zip.ZipOutputStream;

import javax.ejb.CreateException;
import javax.ejb.EJBException;
import javax.ejb.SessionBean;
import javax.ejb.SessionContext;
import javax.mail.MessagingException;
import javax.mail.SendFailedException;

import net.sf.jasperreports.engine.data.JRBeanCollectionDataSource;

import org.apache.commons.fileupload.FileItem;
import org.hibernate.cache.HashtableCache;

import br.com.danhil.BarCode.Interleaved2of5;
/** @author Raphael Rossiter
 * @date 26/06/2007
 */
public class ControladorCobranca implements SessionBean {

	protected static final long serialVersionUID = 1L;

	SessionContext sessionContext;

	protected IRepositorioImovel repositorioImovel = null;

	protected IRepositorioCobranca repositorioCobranca = null;

	protected IRepositorioArrecadacao repositorioarrecadacao = null;

	protected IRepositorioMicromedicao repositorioMicromedicao = null;

	protected IRepositorioUtil repositorioUtil = null;

	protected IRepositorioClienteImovel repositorioClienteImovel = null;

	protected IRepositorioBatch repositorioBatch = null;

	protected IRepositorioFaturamento repositorioFaturamento = null;

	protected IRepositorioAtendimentoPublico repositorioAtendimentoPublico = null;

	protected IRepositorioCadastro repositorioCadastro = null;

	protected IRepositorioCliente repositorioCliente = null;
	
	protected IRepositorioOrdemServico repositorioOrdemServico = null;
	
	/**
	 * < <Descrição do método>>
	 * 
	 * @exception CreateException
	 *                Descrição da exceção
	 */
	public void ejbCreate() throws CreateException {

		repositorioImovel = RepositorioImovelHBM.getInstancia();

		repositorioCobranca = RepositorioCobrancaHBM.getInstancia();

		repositorioarrecadacao = RepositorioArrecadacaoHBM.getInstancia();

		repositorioMicromedicao = RepositorioMicromedicaoHBM.getInstancia();

		repositorioUtil = RepositorioUtilHBM.getInstancia();

		repositorioClienteImovel = RepositorioClienteImovelHBM.getInstancia();

		repositorioBatch = RepositorioBatchHBM.getInstancia();

		repositorioFaturamento = RepositorioFaturamentoHBM.getInstancia();

		repositorioAtendimentoPublico = RepositorioAtendimentoPublicoHBM.getInstancia();

		repositorioCadastro = RepositorioCadastroHBM.getInstancia();

		repositorioCliente = RepositorioClienteHBM.getInstancia();
		
		repositorioOrdemServico = RepositorioOrdemServicoHBM.getInstancia();
		
	}
	
	/**
	 * < <Descrição do método>>
	 */
	public void ejbRemove() {
	}

	/**
	 * < <Descrição do método>>
	 */
	public void ejbActivate() {
	}

	/**
	 * < <Descrição do método>>
	 */
	public void ejbPassivate() {
	}

	/**
	 * Seta o valor de sessionContext
	 * 
	 * @param sessionContext
	 *            O novo valor de sessionContext
	 */
	public void setSessionContext(SessionContext sessionContext) {
		this.sessionContext = sessionContext;
	}
	
	/**
	 * [UC1546] - Consultar 2 Via de Conta
	 * Consulta a lista de contas do imovel
	 * 
	 * @author Anderson Cabral
	 * @date 27/08/2013
	 * @param matricula
	 */
	public ContaConsultarHelper consultar2ViaContaAutoAtendimento(String matricula)throws ControladorException{
		
		String ano;
		String mes;
		
		Date dataCorrente = new Date();
		String dataCorrenteTexto = Util.formatarData(dataCorrente);
		ano = dataCorrenteTexto.substring(6, 10);
		mes = dataCorrenteTexto.substring(3, 5);

		String anoMesInicialReferenciaDebito = "198501";
		String anoMesFinalReferenciaDebito = ano + mes;

		Date aux1 = Util.converteStringParaDate("01/01/1985");
		Date aux2 = Util.converteStringParaDate("31/12/9999");

		String tipoRelacao = "-1";

		ObterDebitoImovelOuClienteHelper obterDebitoImovelOuClienteHelper = (ObterDebitoImovelOuClienteHelper) this
				.obterDebitoImovelOuCliente(1,
						matricula, null,
						new Short(tipoRelacao),
						anoMesInicialReferenciaDebito,
						anoMesFinalReferenciaDebito, aux1, aux2, 1, 1,
						1, 1, 1, 1, 1, null);
		
		ArrayList<ContaValoresHelper> colecaoContaValoresHelper = (ArrayList<ContaValoresHelper>) obterDebitoImovelOuClienteHelper.getColecaoContasValores();
		
		
		ArrayList<ContaValorHelper>  colecaoContaValorBean = new ArrayList<ContaValorHelper>();
		
		//Monta bean
		for(ContaValoresHelper contaValoresHelper : colecaoContaValoresHelper){
			ContaValorHelper contaValorBean  =  new ContaValorHelper();
			
			contaValorBean.setIdConta(contaValoresHelper.getConta().getId());
			contaValorBean.setPeriodo(contaValoresHelper.getFormatarAnoMesParaMesAno());
			contaValorBean.setValor(contaValoresHelper.getValorTotalConta());
			
			colecaoContaValorBean.add(contaValorBean);
		}
		ContaConsultarHelper contaHelper = new ContaConsultarHelper();
		contaHelper.setConta(colecaoContaValorBean);
		return contaHelper;
	}
	
	
	/**
	 * PE2013089438 - Incluir Código de Barras no Documento Ordem de Corte
	 * [UC1054] - Gerar Ordem de Corte
	 * 
	 * @author Diogo Luiz
	 * @date 02/12/2013
	 * 
	 * @param ordemServico
	 * @param fachada
	 * @param usuario
	 */
	public CobrancaDocumento gerarDocumentoDeCobranca(OrdemServico ordemServico, Fachada fachada, 
			Usuario usuario) throws ControladorException{
		
		CobrancaDocumento cobrancaDocumento = null;
		
		try {
			
			Date dataCorrente = new Date();
			
			Date dataEmissaoValidacaoAcaoPrecente = Util.subtrairNumeroMesesDeUmaData(dataCorrente, 12);
						
			// Formata a data para a última hora, minutos e segundos
			Calendar dataCalendar = new GregorianCalendar();
			dataCalendar.setTime(dataEmissaoValidacaoAcaoPrecente);
			dataCalendar.set(Calendar.HOUR, 00);
			dataCalendar.set(Calendar.MINUTE, 00);
			dataCalendar.set(Calendar.SECOND, 00);
			dataCalendar.set(Calendar.MILLISECOND, 000);
			dataEmissaoValidacaoAcaoPrecente = dataCalendar.getTime();
			
			Collection colecaoConta = repositorioCobranca.gerarDocumentoCobranca(ordemServico, dataEmissaoValidacaoAcaoPrecente);
			
			if(!Util.isVazioOrNulo(colecaoConta)){	
				
				Iterator it = colecaoConta.iterator();
				
				while(it.hasNext()){
					
					Object[] array = (Object[]) it.next();			
		
					cobrancaDocumento = new CobrancaDocumento();					
					
					//Matrícula do Imóvel informado
					Imovel imovel = new Imovel();
					imovel = ordemServico.getImovel();
					FiltroImovel filtroImovel = new FiltroImovel();
					filtroImovel.adicionarParametro(new ParametroSimples(FiltroImovel.ID, 
						imovel.getId()));
					Collection colecaoImovel = fachada.pesquisar(filtroImovel, Imovel.class.getName());

					if(!Util.isVazioOrNulo(colecaoImovel)){
						imovel = (Imovel) Util.retonarObjetoDeColecao(colecaoImovel);
						cobrancaDocumento.setImovel(imovel);
					}					
					
					//Documento Tipo com valor Correspondente a Corte Físico
					DocumentoTipo documentoTipo = new DocumentoTipo();
					documentoTipo.setId(new Integer(13));
					cobrancaDocumento.setDocumentoTipo(documentoTipo);
					
					//Inclui qualquer valor, pois o sequencial é o id do documento de cobranca
					//inserir e depois atualizar o sequencia correto
					cobrancaDocumento.setNumeroSequenciaDocumento(1);					
				
					//Cobrança Ação Atividade Comando com valor Nulo
					CobrancaAcaoAtividadeComando cobrancaAcaoAtividadeComando = 
							new CobrancaAcaoAtividadeComando();
					cobrancaAcaoAtividadeComando.setId(null);
					cobrancaDocumento.setCobrancaAcaoAtividadeComando(
						cobrancaAcaoAtividadeComando);
					
					//Cobrança Ação Atividade Cronograma com valor nulo
					CobrancaAcaoAtividadeCronograma cobrancaAcaoAtividadeCronograma = 
							new CobrancaAcaoAtividadeCronograma();
					cobrancaAcaoAtividadeCronograma.setId(null);
					cobrancaDocumento.setCobrancaAcaoAtividadeCronograma(
						cobrancaAcaoAtividadeCronograma);
					
					//Localidade do Imóvel Informado
					Localidade localidade = new Localidade();
					FiltroLocalidade filtroLocalidade = new FiltroLocalidade();
					if((Integer) array[0] != null){
						filtroLocalidade.adicionarParametro(new ParametroSimples(
							FiltroLocalidade.ID, (Integer) array[0]));
					}else{
						localidade = imovel.getLocalidade();
						filtroLocalidade.adicionarParametro(new ParametroSimples(
							FiltroLocalidade.ID, localidade.getId()));
					}
					Collection colecaoLocalidade = fachada.pesquisar(filtroLocalidade, 
						Localidade.class.getName());
					
					if(!Util.isVazioOrNulo(colecaoLocalidade)){
						localidade = (Localidade) Util.retonarObjetoDeColecao(colecaoLocalidade);
						cobrancaDocumento.setLocalidade(localidade);
					}					
					
					//Quadra do Imóvel informado
					Quadra quadra = new Quadra();
					FiltroQuadra filtroQuadra = new FiltroQuadra();
					if((Integer) array[1] != null){
						filtroQuadra.adicionarParametro(new ParametroSimples(FiltroQuadra.ID, 
							(Integer) array[1]));
					}else{
						quadra = imovel.getQuadra();
						filtroQuadra.adicionarParametro(new ParametroSimples(FiltroQuadra.ID, 
							quadra.getId()));
					}
					Collection colecaoQuadra = fachada.pesquisar(filtroQuadra, Quadra.class.getName());
					
					if(!Util.isVazioOrNulo(colecaoQuadra)){
						quadra = (Quadra) Util.retonarObjetoDeColecao(colecaoQuadra);
						cobrancaDocumento.setQuadra(quadra);
					}
					
					//Código do Setor Comercial com o id do Setor Comercial igual ao id do Imóvel
					SetorComercial setorComercial = new SetorComercial();					
					FiltroSetorComercial filtroSetorComercial = new FiltroSetorComercial();
					if((Integer) array[2] != null){
						filtroSetorComercial.adicionarParametro(new ParametroSimples(
							FiltroSetorComercial.CODIGO_SETOR_COMERCIAL, (Integer) array[2]));
					}else{
						setorComercial = imovel.getSetorComercial();
						filtroSetorComercial.adicionarParametro(new ParametroSimples(
							FiltroSetorComercial.ID, setorComercial.getId()));
					}
					Collection colecaoSetorComercial = fachada.pesquisar(filtroSetorComercial, 
						SetorComercial.class.getName());
					
					if(!Util.isVazioOrNulo(colecaoSetorComercial)){
						setorComercial = (SetorComercial) Util.retonarObjetoDeColecao(
							colecaoSetorComercial);
						cobrancaDocumento.setCodigoSetorComercial(setorComercial.getCodigo());
					}					
				
					//Número da Quadra com o id da quadra igual a quadra do imóvel
					cobrancaDocumento.setNumeroQuadra(quadra.getNumeroQuadra());
					//data Corrente
					cobrancaDocumento.setEmissao(new Date());
					cobrancaDocumento.setValorTaxa(new BigDecimal(0));	
					
					if((BigDecimal) array[4] != null){
						cobrancaDocumento.setValorImpostos((BigDecimal) array[4]);
					}else{
						cobrancaDocumento.setValorImpostos(new BigDecimal(0));
					}
					
					//Somatório dos Valores das contas selecionada
					//(cnta_vlagua + cnta_vlesgoto + cnta_vldebitos - cnta_vlcreditos - cnta_vlimpostos)
					if((BigDecimal) array[5] != null){
						cobrancaDocumento.setValorDocumento((BigDecimal) array[5]);
					}else{
						cobrancaDocumento.setValorDocumento(new BigDecimal(0));
					}
					
					cobrancaDocumento.setValorDesconto(new BigDecimal(0));
					cobrancaDocumento.setValorAcrescimos(new BigDecimal(0));
					
					//Valor Correspondente a individual
					DocumentoEmissaoForma documentoEmissaoForma = new DocumentoEmissaoForma();
					FiltroDocumentoEmissaoForma filtroDocumentoEmissaoForma = new FiltroDocumentoEmissaoForma();
					filtroDocumentoEmissaoForma.adicionarParametro(new ParametroSimples(
						FiltroDocumentoEmissaoForma.ID, new Integer(ConstantesSistema.TODOS)));
					Collection colecaoDocumentoEmissaoForma = fachada.pesquisar(filtroDocumentoEmissaoForma, 
							DocumentoEmissaoForma.class.getName());
					
					if(!Util.isVazioOrNulo(colecaoDocumentoEmissaoForma)){
						documentoEmissaoForma = (DocumentoEmissaoForma) 
								Util.retonarObjetoDeColecao(colecaoDocumentoEmissaoForma);
						cobrancaDocumento.setDocumentoEmissaoForma(documentoEmissaoForma);
					}					
					
					cobrancaDocumento.setMotivoNaoEntregaDocumento(null);
					
					if((Integer) array[6] != null){
						ImovelPerfil imovelPerfil = new ImovelPerfil();
						FiltroImovelPerfil filtroImovelPerfil = new FiltroImovelPerfil();
						filtroImovelPerfil.adicionarParametro(new ParametroSimples(
							FiltroImovelPerfil.ID, (Integer) array[6]));
						Collection colecaoImovelPerfil = fachada.pesquisar(filtroImovelPerfil, 
							ImovelPerfil.class.getName());
						
						if(!Util.isVazioOrNulo(colecaoImovelPerfil)){
							imovelPerfil = (ImovelPerfil) Util.retonarObjetoDeColecao(colecaoImovelPerfil);
							cobrancaDocumento.setImovelPerfil(imovelPerfil);
						}
					}
					
					cobrancaDocumento.setEmpresa(null);
					cobrancaDocumento.setUltimaAlteracao(new Date());
					cobrancaDocumento.setCobrancaCriterio(null);
					cobrancaDocumento.setCobrancaAcao(null);					
					cobrancaDocumento.setUsuario(usuario);
					cobrancaDocumento.setIndicadorClienteImovel(ConstantesSistema.SIM);							
				}
				
				Integer idCobrancaDocumento = (Integer) repositorioUtil.inserir(cobrancaDocumento);
				
				cobrancaDocumento.setId(idCobrancaDocumento);
				cobrancaDocumento.setNumeroSequenciaDocumento(idCobrancaDocumento);
				
				repositorioUtil.atualizar(cobrancaDocumento);
				
				//Para cada conta selecionada o sistema gera os itens do documento de cobranca na tabela
				//cobranca.cobranca_documento_item, com os seguintes valores
				Collection colecaoDocumentoItem = repositorioCobranca.gerarItemDocumentoCobranca(ordemServico, dataEmissaoValidacaoAcaoPrecente);
				
				CobrancaDocumentoItem cobrancaDocumentoItem = null;

				if(!Util.isVazioOrNulo(colecaoDocumentoItem)){
					Iterator iter = colecaoDocumentoItem.iterator();
					
					while(iter.hasNext()){
						Object[] array = (Object[]) iter.next();
						
						cobrancaDocumentoItem = new CobrancaDocumentoItem();						
						cobrancaDocumentoItem.setCobrancaDocumento(cobrancaDocumento);
						DocumentoTipo documentoTipo = new DocumentoTipo();
						FiltroDocumentoTipo filtroDocumentoTipo = new FiltroDocumentoTipo();
						filtroDocumentoTipo.adicionarParametro(new ParametroSimples(FiltroDocumentoTipo.ID, 
							new Integer(ConstantesSistema.SIM)));
						Collection colecaoDocumentoTipo = fachada.pesquisar(filtroDocumentoTipo, 
							DocumentoTipo.class.getName());
						
						if(!Util.isVazioOrNulo(colecaoDocumentoTipo)){
							documentoTipo = (DocumentoTipo) Util.retonarObjetoDeColecao(
								colecaoDocumentoTipo);
							cobrancaDocumentoItem.setDocumentoTipo(documentoTipo);
						}
						
						if((Integer) array[0] != null){
							ContaGeral contaGeral = new ContaGeral();
							FiltroContaGeral filtroContaGeral = new FiltroContaGeral();
							filtroContaGeral.adicionarParametro(new ParametroSimples(FiltroContaGeral.ID, 
								(Integer) array[0]));
							Collection colecaoContaGeral = fachada.pesquisar(filtroContaGeral, ContaGeral.class.getName());
							
							if(!Util.isVazioOrNulo(colecaoContaGeral)){
								contaGeral = (ContaGeral) Util.retonarObjetoDeColecao(colecaoContaGeral);
								cobrancaDocumentoItem.setContaGeral(contaGeral);
							}							
						}
						
						cobrancaDocumentoItem.setDebitoACobrarGeral(null);
						cobrancaDocumentoItem.setGuiaPagamentoGeral(null);
						
						if((BigDecimal) array[1] != null){
							cobrancaDocumentoItem.setValorItemCobrado((BigDecimal) array[1]);
						}else{
							cobrancaDocumentoItem.setValorItemCobrado(new BigDecimal(0));
						}
						
						cobrancaDocumentoItem.setNumeroParcelasAntecipadas(null);
						cobrancaDocumentoItem.setCreditoARealizarGeral(null);
						cobrancaDocumentoItem.setUltimaAlteracao(new Date());
						
						repositorioUtil.inserir(cobrancaDocumentoItem);							
					}					
				}				
			}
			
			return cobrancaDocumento;
			
		} catch (ErroRepositorioException ex) {
			ex.printStackTrace();
			throw new ControladorException("erro.sistema", ex);
		}		
	}
	
	
	
	
	/**
	 * [UC1556] - Consultar Parcelar Parcelamento de Débitos Webservice
	 * 
	 * Esse metodo efetua o parcelamento e retorna a guia e o termo
	 * 
	 * @author Anderson Cabral
	 * @date 10/09/2013
	 * @param matricula
	 * @param cpfCliente
	 * @param valorEntrada
	 * @param numeroParcelas
	 * @return ParcelamentoDebitoEfetuadoHelper
	 */
	public ParcelamentoDebitoEfetuadoHelper efetuarParcelamentoDebitoAutoAtendimento(String matricula, String cpfCliente, String valorEntrada, String numeroParcelas)throws ControladorException{
		
		//Pega os dados necessarios para efetuar o parcelamento
		BigDecimal vlrEntrada = Util.formatarMoedaRealparaBigDecimal(valorEntrada);
		 ArrayList<Object> dadosParcelamento = this.consultarNegociacaoDebitoAutoAtendimento(matricula, cpfCliente, vlrEntrada, numeroParcelas, true);
		 ParcelamentoDebitoHelper parcelamentoDebitoHelper = (ParcelamentoDebitoHelper) dadosParcelamento.get(0);
		 ConcluirParcelamentoDebitosHelper concluirParcelamentoHelper = (ConcluirParcelamentoDebitosHelper) dadosParcelamento.get(1);		

		//Usuário responsável por fazer o parcelamneto.
		FiltroUsuario filtroUsuario = new FiltroUsuario();
		filtroUsuario.adicionarParametro(new ParametroSimples(FiltroUsuario.LOGIN, "INTERNET"));
		Usuario usuarioLogado = (Usuario) Util.retonarObjetoDeColecao(getControladorUtil().pesquisar(filtroUsuario, Usuario.class.getName()));
		
		/******************Efetua o Parcelamento********************/
		Integer idParcelamento = this.concluirParcelamentoDebitos(concluirParcelamentoHelper, usuarioLogado);
		
		/************Pesquisa o Parcelamento *****************/
		ParcelamentoDebitoEfetuadoHelper parcelamentoDebitoEfetuadoHelper = this.consultarParcelamentoEfetuado(matricula);
		
		
        return parcelamentoDebitoEfetuadoHelper;
	}
	
	/**
	 *  [UC1557] - Consultar Parcelamento em Aberto
	 * 
	 * @author Anderson Cabral
	 * @date 11/09/2013
	 * @param idParcelamento
	 * @return ParcelamentoDebitoEfetuadoHelper
	 */
	public ParcelamentoDebitoEfetuadoHelper consultarParcelamentoEfetuado(String imovelId) throws ControladorException{
		ParcelamentoDebitoEfetuadoHelper parcelamentoDebitoEfetuadoHelper =  null;
		FiltroParcelamento filtroParcelamento = new FiltroParcelamento();
		filtroParcelamento.adicionarParametro(new ParametroSimples(FiltroParcelamento.IMOVEL_ID, Integer.parseInt(imovelId)));
		filtroParcelamento.adicionarParametro(new ParametroSimples(FiltroParcelamento.PARCELAMENTO_SITUACAO, ParcelamentoSituacao.NORMAL));
		filtroParcelamento.setCampoOrderBy(FiltroParcelamento.ID);
		ArrayList<Parcelamento> colecaoParcelamento = (ArrayList<Parcelamento>) getControladorUtil().pesquisar(filtroParcelamento, Parcelamento.class.getName());
		
		if(!Util.isVazioOrNulo(colecaoParcelamento)){
			Parcelamento parcelamento = colecaoParcelamento.get(colecaoParcelamento.size()-1);
			Integer idParcelamento = parcelamento.getId();
			ParcelamentoRelatorioHelper parcelamentoRelatorioHelper = this.pesquisarParcelamentoRelatorio(idParcelamento);
			
			String nomeCliente = "";
			if (Util.verificarNaoVazio(parcelamentoRelatorioHelper.getNomeClienteParcelamento())){
				nomeCliente = parcelamentoRelatorioHelper.getNomeClienteParcelamento();
			}else{
				nomeCliente = parcelamentoRelatorioHelper.getNomeCliente();
			}
			
			String cpfCnpjCliente = "";
			if (Util.verificarNaoVazio(parcelamentoRelatorioHelper.getCpfClienteParcelamento())){
				cpfCnpjCliente = parcelamentoRelatorioHelper.getCpfClienteParcelamento();
			}else{
				cpfCnpjCliente = parcelamentoRelatorioHelper.getCpfCnpj();
			}
			
			String municipioData = parcelamentoRelatorioHelper.getLocalidade();
			Locale loc = new Locale("pt");
			DateFormat df = DateFormat.getDateInstance(DateFormat.LONG, loc);
			municipioData += " - " + df.format(new Date());
			
			//Usuário responsável por fazer o parcelamneto.
			FiltroUsuario filtroUsuario = new FiltroUsuario();
			filtroUsuario.adicionarParametro(new ParametroSimples(FiltroUsuario.LOGIN, "INTERNET"));
			Usuario usuarioLogado = (Usuario) Util.retonarObjetoDeColecao(Fachada.getInstancia().pesquisar(filtroUsuario, Usuario.class.getName()));
			String nomeUsuario = "";
			if ( usuarioLogado != null ) {
				nomeUsuario = usuarioLogado.getNomeUsuario();
			}
			
			String idFuncionario = "";
			if (parcelamentoRelatorioHelper.getIdFuncionario() != null){
				idFuncionario = parcelamentoRelatorioHelper.getIdFuncionario().toString();
			}
			
			SistemaParametro sistemaParametro = getControladorUtil().pesquisarParametrosDoSistema();
			
			String cnpjEmpresa = "";
			if (sistemaParametro.getCnpjEmpresa() != null) {
				cnpjEmpresa = Util.formatarCnpj(sistemaParametro.getCnpjEmpresa());
			}
			
			Integer anoAtual = Util.getAno(new Date());
			
			ArrayList<RelatorioParcelamentoDetalhamentoBean> colecaoDetalhamentoCreditoDebito = this.pesquisarDetalhamentoCreditoDebito(parcelamentoRelatorioHelper.getIdImovel().toString(), nomeCliente, idParcelamento);
			
			/****************GUIA DE PAGAMENTO************************/		
			String valorTotal = "";
			String idGuiaPagamento = "";
			String dataVencimento = "";
			String inscricao = "";
			String enderecoImovel= "";
			String enderecoClienteResponsavel = "";
			String representacaoNumericaCodBarraFormatada = "";
			String representacaoNumericaCodBarraSemDigito = "";
			String observacao = "";
			String dataValidade = "";
			String nossoNumero 	 = "";
			String nomeSacador = "";
			String enderecoImovelSacador = "";
			ArrayList<RelatorioEmitirGuiaPagamentoDetailBean> taxasDeServicos = null;
			
			FiltroGuiaPagamento filtroGuiaPagamento = new FiltroGuiaPagamento();
			filtroGuiaPagamento.adicionarParametro(new ParametroSimples(FiltroGuiaPagamento.PARCELAMENTO_ID,new Integer(idParcelamento)));
			
			Collection<GuiaPagamento> colecaoGuiaPagamento = getControladorUtil().pesquisar(filtroGuiaPagamento, GuiaPagamento.class.getName());
			
			if(!Util.isVazioOrNulo(colecaoGuiaPagamento)){
				GuiaPagamento guiaPagamento = (GuiaPagamento)Util.retonarObjetoDeColecao(colecaoGuiaPagamento);
				String idsGuiaPagamento = guiaPagamento .getId().toString();
				String[] ids = {idsGuiaPagamento};
				Collection<GuiaPagamentoRelatorioHelper> dadosRelatorio = getControladorArrecadacao().pesquisarGuiaPagamentoRelatorio(ids);
				
				taxasDeServicos = new ArrayList<RelatorioEmitirGuiaPagamentoDetailBean>();
				Iterator<GuiaPagamentoRelatorioHelper> iterator = dadosRelatorio.iterator();
				taxasDeServicos.clear();
	
				while (iterator.hasNext()) {
	
					GuiaPagamentoRelatorioHelper guiaPagamentoRelatorioHelper = iterator.next();
	
					//nov parte de guia pagamento item
					//Flávio Leonardo
					//07/11/2008
					String descricaoServicosTarifas = "";
					String valor = "";
					RelatorioEmitirGuiaPagamentoDetailBean relatorioEmitirGuiaPagamentoDetailBean = null;
	
					FiltroGuiaPagamentoItem filtroGuiaPagamentoItem = new FiltroGuiaPagamentoItem();
					filtroGuiaPagamentoItem.adicionarCaminhoParaCarregamentoEntidade("debitoTipo");
					filtroGuiaPagamentoItem.adicionarParametro(new ParametroSimples(FiltroGuiaPagamentoItem.GUIA_PAGAMENTO_GERAL_ID, 
							guiaPagamentoRelatorioHelper.getIdGuiaPagamento()));
	
					filtroGuiaPagamentoItem.setCampoOrderBy(new String[]{"guiaPagamentoGeral","debitoTipo"});
	
					Collection<GuiaPagamentoItem> colecaoGuiaPagamentoItem = getControladorUtil().pesquisar(filtroGuiaPagamentoItem, GuiaPagamentoItem.class.getName());
					Iterator<GuiaPagamentoItem> iteratorGuiaPagamentoitem = colecaoGuiaPagamentoItem.iterator();
	
					if(!colecaoGuiaPagamentoItem.isEmpty()){
						while(iteratorGuiaPagamentoitem.hasNext()){
							GuiaPagamentoItem guiaPagamentoItem = (GuiaPagamentoItem)iteratorGuiaPagamentoitem.next();
							descricaoServicosTarifas = guiaPagamentoItem
							.getDebitoTipo().getDescricao() + "     " +  guiaPagamentoRelatorioHelper.getPrestacaoFormatada();
	
							valor = Util.formatarMoedaReal(guiaPagamentoItem
									.getValorDebito());
	
							relatorioEmitirGuiaPagamentoDetailBean = new RelatorioEmitirGuiaPagamentoDetailBean(
									descricaoServicosTarifas, valor);
	
							taxasDeServicos.add(relatorioEmitirGuiaPagamentoDetailBean);
						}
					}else{
						descricaoServicosTarifas = guiaPagamentoRelatorioHelper
						.getDescTipoDebito() + "     " +  guiaPagamentoRelatorioHelper.getPrestacaoFormatada();
						valor = Util.formatarMoedaReal(guiaPagamentoRelatorioHelper.getValorDebito());
						relatorioEmitirGuiaPagamentoDetailBean = new RelatorioEmitirGuiaPagamentoDetailBean(descricaoServicosTarifas, valor);
						taxasDeServicos.add(relatorioEmitirGuiaPagamentoDetailBean);
					}
	
					valorTotal = Util.formatarMoedaReal(guiaPagamentoRelatorioHelper.getValorDebito());
					dataVencimento = Util.formatarData(guiaPagamentoRelatorioHelper.getDataVencimento());
					inscricao = guiaPagamentoRelatorioHelper.getInscricao();
					enderecoImovel = guiaPagamentoRelatorioHelper.getEnderecoImovel();
					enderecoClienteResponsavel = guiaPagamentoRelatorioHelper.getEnderecoClienteResponsavel();
					representacaoNumericaCodBarraFormatada = guiaPagamentoRelatorioHelper.getRepresentacaoNumericaCodBarraFormatada();
					representacaoNumericaCodBarraSemDigito = guiaPagamentoRelatorioHelper.getRepresentacaoNumericaCodBarraSemDigito();
					dataValidade = guiaPagamentoRelatorioHelper.getDataValidade();
					idGuiaPagamento = guiaPagamentoRelatorioHelper.getIdGuiaPagamento();
	
					Short indicadorEmitirObservacao = guiaPagamentoRelatorioHelper.getIndicadorEmitirObservacao();
					if (indicadorEmitirObservacao != null && indicadorEmitirObservacao.equals(ConstantesSistema.SIM)) {
						observacao = guiaPagamentoRelatorioHelper.getObservacao();
					}
					
					nossoNumero = guiaPagamentoRelatorioHelper.getNossoNumero();
					nomeSacador = guiaPagamentoRelatorioHelper.getSacadoParte01() +" "+guiaPagamentoRelatorioHelper.getSacadoParte02();
				}
			}
			/**************************************************/
		
			parcelamentoDebitoEfetuadoHelper = 
	
			new ParcelamentoDebitoEfetuadoHelper(
					// Matrícula do Imóvel
					parcelamentoRelatorioHelper.getIdImovel().toString(),
					//Data Atual
					Util.formatarData(new Date()),
					//Valor Debito
					valorTotal,
					//Nome Empresa
					sistemaParametro.getNomeAbreviadoEmpresa(),
					//CNPJ Empresa
					cnpjEmpresa,
					//anoGuiaPagamento
					String.valueOf(anoAtual),
					//Id Guia Pagamento
					idGuiaPagamento,
					// Nome Cliente
					nomeCliente,
					//Data Vencimento
					dataVencimento,
					// CPF/CNPJ
					cpfCnpjCliente,
					//Inscricao
					inscricao,
					// Endereço
					enderecoImovel,
					//Endereco Entrega
					enderecoClienteResponsavel,
					//Observacao
					observacao,
					//Taxas de Servicos
					taxasDeServicos,
					//representacaoNumericaCodBarraFormatada
					representacaoNumericaCodBarraFormatada,
					//representacaoNumericaCodBarraSemDigito
					representacaoNumericaCodBarraSemDigito,
					// emitidoPor
					nomeUsuario,
					//Data Validade
					dataValidade,
					// Id do Funcionário
					idFuncionario,
					// localPagamento
					"PAGÁVEL EM QUALQUER BANCO ATÉ O VENCIMENTO",
					// cedente
					"COMPESA - Companhia Pernambucana de Saneamento",
					// vencimentoFicha
					"Contra-apresentação",
					// especieDocumento
					"EXT",
					// aceite
					"N",
					// agenciaCodigoCedente
					"3234-4/2868-1",
					// carteira
					"18",
					// especieMoeda
					"R$",
					//Nosso Numero
					nossoNumero,
					// mensagem
					"Instruções(Todas informações deste bloqueto são de exclusiva responsabilidade do cedente)",
					//Nome Sacador
					nomeSacador,
					//Endereco Sacados
					enderecoImovelSacador,
					// Telefone
					parcelamentoRelatorioHelper.getTelefone(),
					// Data Parcelamento
					Util.formatarData(parcelamentoRelatorioHelper.getDataParcelamento()),
					// Faturas em Aberto
					Util.formatarMoedaReal(parcelamentoRelatorioHelper.getValorFaturasEmAberto()),
					// Serviços a Cobrar
					Util.formatarMoedaReal(parcelamentoRelatorioHelper.getValorServicosACobrar()),
					// Atualização Monetária
					Util.formatarMoedaReal(parcelamentoRelatorioHelper.getValorAtualizacaoMonetaria()),
					// Juros/Mora
					Util.formatarMoedaReal(parcelamentoRelatorioHelper.getValorJurosMora()),
					// Multa
					Util.formatarMoedaReal(parcelamentoRelatorioHelper.getValorMultas()),
					// Guia Pagamento
					Util.formatarMoedaReal(parcelamentoRelatorioHelper.getValorGuiaPagamento()),
					// Parcelamento a Cobrar
					Util.formatarMoedaReal(parcelamentoRelatorioHelper.getValorParcelamentoACobrar()),
					// Total Débitos
					Util.formatarMoedaReal(parcelamentoRelatorioHelper.getValorTotalDebitos()),
					// Desconto de Acréscimos
					Util.formatarMoedaReal(parcelamentoRelatorioHelper.getValorDescontoAcrescimo()),
					// Descontos de Antiguidade
					Util.formatarMoedaReal(parcelamentoRelatorioHelper.getValorDescontoAntiguidade()),
					// Desconto de Inatividade
					Util.formatarMoedaReal(parcelamentoRelatorioHelper.getValorDescontoInatividade()),
					// Desconto de Sanções Regulamentares
					Util.formatarMoedaReal(parcelamentoRelatorioHelper.getValorDescontoSancoesRegulamentares()),
					// Desconto Tarifa Social
					Util.formatarMoedaReal(parcelamentoRelatorioHelper.getValorDescontoTarifaSocial()),
					// Desconto Debito Total
					Util.formatarMoedaReal(parcelamentoRelatorioHelper.getValorDescontoDebitoTotal()),
					// Créditos a Realizar
					Util.formatarMoedaReal(parcelamentoRelatorioHelper.getValorCreditosRealizar()),
					// Total Descontos
					Util.formatarMoedaReal(parcelamentoRelatorioHelper.getValorTotalDescontos()),
					// Valor a Ser Negociado
					Util.formatarMoedaReal(parcelamentoRelatorioHelper.getValorASerNegociado()),
					// Valor da Entrada
					Util.formatarMoedaReal(parcelamentoRelatorioHelper.getValorEntrada()),
					// Número de Parcelas
					parcelamentoRelatorioHelper.getNumeroParcelas().toString(),
					// Valor da Parcela
					Util.formatarMoedaReal(parcelamentoRelatorioHelper.getValorParcela()),
					// Valor a Ser Parcelado
					Util.formatarMoedaReal(parcelamentoRelatorioHelper.getValorASerParcelado()),
					// TaxaJuros
					parcelamentoRelatorioHelper.getTaxaJuros(),
					// Solicitação de Restabelecimento
					parcelamentoRelatorioHelper.getSolicitacaoRestabelecimento(),
					// Município DAT
					municipioData,
					// Id do Parcelamento /Sequencial
					idParcelamento.toString(),
					// Detalhamento Credito/Debito
					colecaoDetalhamentoCreditoDebito);
		}
		
		return parcelamentoDebitoEfetuadoHelper;		
	}
	
	/**
	 *  [UC1557] - Consultar Parcelamento em Aberto
	 *  
	 *  retorna os detalhamentos de credito e debito do Parcelamento
	 * 
	 * @author Anderson Cabral
	 * @date 12/09/2013
	 * @param matricula
	 * @param valorEntrada
	 * @param idParcelamento
	 * @return ArrayList<RelatorioParcelamentoDetalhamentoBean>
	 */
	private ArrayList<RelatorioParcelamentoDetalhamentoBean> pesquisarDetalhamentoCreditoDebito(String idImovel, String nomeCliente, Integer idParcelamento) throws NumberFormatException, ControladorException{
		Collection<ParcelamentoItem> colecaoRelatorioParcelamentoItens = this.pesquisarParcelamentoItemPorIdParcelamentoRelatorio(idParcelamento);
		ArrayList<RelatorioParcelamentoDetalhamentoBean> colecaoDetalhamentoCreditoDebito = new ArrayList<RelatorioParcelamentoDetalhamentoBean>();

		// Guardaremos o maior e menor ano mes de referencia do documento processado
		Integer maiorAnoMesReferenciaDocumento = null;
		Integer menorAnoMesReferenciaDocumento = null;
		
		if (colecaoRelatorioParcelamentoItens != null && !colecaoRelatorioParcelamentoItens.isEmpty()) {
			Iterator<ParcelamentoItem> colecaoRelatorioParcelamentoItensIterator = colecaoRelatorioParcelamentoItens.iterator();

			RelatorioParcelamentoDetalhamentoBean relatorioParcelamentoDetalhamentoBean = null;

			BigDecimal totalFaturas = new BigDecimal("0.00");
			BigDecimal totalServicos = new BigDecimal("0.00");
			BigDecimal totalGuias = new BigDecimal("0.00");
			BigDecimal totalCreditos = new BigDecimal("0.00");

			ParcelamentoItem parcelamentoItem = null;
			ParcelamentoItem parcelamentoItem2 = null;

			Object tipoAnterior = null;
			Object tipoAtual = null;

			while (colecaoRelatorioParcelamentoItensIterator.hasNext()) {
				if (tipoAnterior == null) {
					tipoAnterior = new Conta();
				} else {
					if (parcelamentoItem.getContaGeral().getConta().getReferencia() != 0) {
						tipoAnterior = parcelamentoItem.getContaGeral().getConta();
					} else if (parcelamentoItem.getDebitoACobrarGeral().getDebitoACobrar().getDebitoTipo().getId() != null) {
						tipoAnterior = parcelamentoItem.getDebitoACobrarGeral().getDebitoACobrar();
					} else if (parcelamentoItem.getGuiaPagamentoGeral().getGuiaPagamento().getId() != null) {
						tipoAnterior = parcelamentoItem.getGuiaPagamentoGeral().getGuiaPagamento();
					} else {
						tipoAnterior = parcelamentoItem.getCreditoARealizarGeral().getCreditoARealizar();
					}
				}

				if (parcelamentoItem2 != null && parcelamentoItem.getContaGeral().getConta().getReferencia() != 0) {
					parcelamentoItem = parcelamentoItem2;
					parcelamentoItem2 = null;
				} else {

					parcelamentoItem = (ParcelamentoItem) colecaoRelatorioParcelamentoItensIterator.next();
				}

				if (parcelamentoItem.getContaGeral().getConta().getReferencia() != 0) {
					tipoAtual = parcelamentoItem.getContaGeral().getConta();
				} else if (parcelamentoItem.getDebitoACobrarGeral().getDebitoACobrar().getDebitoTipo().getId() != null) {
					tipoAtual = parcelamentoItem.getDebitoACobrarGeral().getDebitoACobrar();
				} else if (parcelamentoItem.getGuiaPagamentoGeral().getGuiaPagamento().getId() != null) {
					tipoAtual = parcelamentoItem.getGuiaPagamentoGeral().getGuiaPagamento();
				} else {
					tipoAtual = parcelamentoItem.getCreditoARealizarGeral().getCreditoARealizar().getCreditoTipo();
				}

				if (tipoAnterior instanceof Conta) {
					if (!(tipoAtual instanceof Conta)) {
						relatorioParcelamentoDetalhamentoBean = new RelatorioParcelamentoDetalhamentoBean(

								// Matrícula do Imóvel
								idImovel,
								// Nome do Cliente
								nomeCliente,
								// Faturas em Aberto Referência 1
								"TOTAL",
								// Valor Fatura 1
								"",
								// Referência 2
								"",
								// Valor Fatura 2
								Util.formatarMoedaReal(totalFaturas),
								// Serviços a Cobrar
								// Código
								"",
								// Descrição
								"",
								// Valor
								"",
								// Guias de Pagamento
								// Número
								"",
								// Descrição
								"",
								// Valor
								"",
								// Créditos a Realizar
								// Código
								"",
								// Descrição
								"FATURA EM ABERTO",
								// Valor
								""
						);

						// adiciona o bean a coleção
						colecaoDetalhamentoCreditoDebito.add(relatorioParcelamentoDetalhamentoBean);
					}
				} else if (tipoAnterior instanceof DebitoACobrar) {
					if (!(tipoAtual instanceof DebitoACobrar)) {
						relatorioParcelamentoDetalhamentoBean = new RelatorioParcelamentoDetalhamentoBean(

								// Matrícula do Imóvel
								idImovel,
								// Nome do Cliente
								nomeCliente,
								// Faturas em Aberto
								// Referência 1
								"",
								// Valor Fatura 1
								"",
								// Referência 2
								"",
								// Valor Fatura 2
								"",
								// Serviços a Cobrar
								// Código
								"TOTAL",
								// Descrição
								"",
								// Valor
								Util.formatarMoedaReal(totalServicos),
								// Guias de Pagamento
								// Número
								"",
								// Descrição
								"",
								// Valor
								"",
								// Créditos a Realizar
								// Código
								"",
								// Descrição
								"SERVICO A COBRAR",
								// Valor
								""
						);

						// adiciona o bean a coleção
						colecaoDetalhamentoCreditoDebito.add(relatorioParcelamentoDetalhamentoBean);
					}
				} else if (tipoAnterior instanceof GuiaPagamento) {
					if (!(tipoAtual instanceof GuiaPagamento)) {
						relatorioParcelamentoDetalhamentoBean = new RelatorioParcelamentoDetalhamentoBean(

								// Matrícula do Imóvel
								idImovel,
								// Nome do Cliente
								nomeCliente,
								// Faturas em Aberto
								// Referência 1
								"",
								// Valor Fatura 1
								"",
								// Referência 2
								"",
								// Valor Fatura 2
								"",
								// Serviços a Cobrar
								// Código
								"",
								// Descrição
								"",
								// Valor
								"",
								// Guias de Pagamento
								// Número
								"TOTAL",
								// Descrição
								"",
								// Valor
								Util.formatarMoedaReal(totalGuias),
								// Créditos a Realizar
								// Código
								"",
								// Descrição
								"GUIA DE PAGAMENTO",
								// Valor
								""
						);

						// adiciona o bean a coleção
						colecaoDetalhamentoCreditoDebito.add(relatorioParcelamentoDetalhamentoBean);
					}
				}

				if (parcelamentoItem.getContaGeral().getConta().getReferencia() != 0) {                     
					Conta conta = parcelamentoItem.getContaGeral().getConta();

					// Verificamos o maior ano mes de ferencia para o tipo conta
					if ( maiorAnoMesReferenciaDocumento == null || maiorAnoMesReferenciaDocumento < conta.getReferencia() ){
						maiorAnoMesReferenciaDocumento = conta.getReferencia() ;
					}

					// Verificamos o menor ano mes de ferencia para o tipo conta
					if ( menorAnoMesReferenciaDocumento == null || menorAnoMesReferenciaDocumento > conta.getReferencia() ){
						menorAnoMesReferenciaDocumento = conta.getReferencia() ;
					}                               


					totalFaturas = totalFaturas.add(conta.getValorTotal());

					if (colecaoRelatorioParcelamentoItensIterator.hasNext()) {

						parcelamentoItem2 = (ParcelamentoItem) colecaoRelatorioParcelamentoItensIterator.next();

						if (parcelamentoItem2.getContaGeral().getConta().getReferencia() != 0) {

							Conta conta2 = parcelamentoItem2.getContaGeral().getConta();

							// Verificamos o maior ano mes de ferencia para o tipo conta
							if ( maiorAnoMesReferenciaDocumento == null || maiorAnoMesReferenciaDocumento < conta2.getReferencia() ){
								maiorAnoMesReferenciaDocumento = conta2.getReferencia() ;
							}

							// Verificamos o menor ano mes de ferencia para o tipo conta
							if ( menorAnoMesReferenciaDocumento == null || menorAnoMesReferenciaDocumento > conta2.getReferencia() ){
								menorAnoMesReferenciaDocumento = conta2.getReferencia() ;
							}                               

							parcelamentoItem2 = null;

							totalFaturas = totalFaturas.add(conta2.getValorTotal());

							relatorioParcelamentoDetalhamentoBean = new RelatorioParcelamentoDetalhamentoBean(

									// Matrícula do Imóvel
									idImovel,
									// Nome do Cliente
									nomeCliente,
									// Faturas em Aberto
									// Referência 1
									conta.getFormatarAnoMesParaMesAno(),
									// Valor Fatura 1
									Util.formatarMoedaReal(conta.getValorTotal()),
									// Referência 2
									conta2.getFormatarAnoMesParaMesAno(),
									// Valor Fatura 2
									Util.formatarMoedaReal(conta2.getValorTotal()),
									// Serviços a Cobrar
									// Código
									"",
									// Descrição
									"",
									// Valor
									"",
									// Guias de Pagamento
									// Número
									"",
									// Descrição
									"",
									// Valor
									"",
									// Créditos a Realizar
									// Código
									"",
									// Descrição
									"FATURA EM ABERTO",
									// Valor
									""
							);

							// adiciona o bean a coleção
							colecaoDetalhamentoCreditoDebito.add(relatorioParcelamentoDetalhamentoBean);

						} else {
							relatorioParcelamentoDetalhamentoBean = new RelatorioParcelamentoDetalhamentoBean(

									// Matrícula do Imóvel
									idImovel,
									// Nome do Cliente
									nomeCliente,
									// Faturas em Aberto
									// Referência 1
									conta.getFormatarAnoMesParaMesAno(),
									// Valor Fatura 1
									Util.formatarMoedaReal(conta.getValorTotal()),
									// Referência 2
									"",
									// Valor Fatura 2
									"",
									// Serviços a Cobrar
									// Código
									"",
									// Descrição
									"",
									// Valor
									"",
									// Guias de Pagamento
									// Número
									"",
									// Descrição
									"",
									// Valor
									"",
									// Créditos a Realizar
									// Código
									"",
									// Descrição
									"FATURA EM ABERTO",
									// Valor
									""
							);

							// adiciona o bean a coleção
							colecaoDetalhamentoCreditoDebito.add(relatorioParcelamentoDetalhamentoBean);

						}
					} else {
						relatorioParcelamentoDetalhamentoBean = new RelatorioParcelamentoDetalhamentoBean(

								// Matrícula do Imóvel
								idImovel,
								// Nome do Cliente
								nomeCliente,
								// Faturas em Aberto
								// Referência 1
								conta.getFormatarAnoMesParaMesAno(),
								// Valor Fatura 1
								Util.formatarMoedaReal(conta.getValorTotal()),
								// Referência 2
								"",
								// Valor Fatura 2
								"",
								// Serviços a Cobrar
								// Código
								"",
								// Descrição
								"",
								// Valor
								"",
								// Guias de Pagamento
								// Número
								"",
								// Descrição
								"",
								// Valor
								"",
								// Créditos a Realizar
								// Código
								"",
								// Descrição
								"FATURA EM ABERTO",
								// Valor
								""
						);

						// adiciona o bean a coleção
						colecaoDetalhamentoCreditoDebito.add(relatorioParcelamentoDetalhamentoBean);
					}

				} else if (parcelamentoItem.getDebitoACobrarGeral().getDebitoACobrar().getDebitoTipo().getId() != null) {
					DebitoACobrar debitoACobrar = (DebitoACobrar) parcelamentoItem.getDebitoACobrarGeral().getDebitoACobrar();
					totalServicos = totalServicos.add(debitoACobrar.getValorTotalComBonus());

					relatorioParcelamentoDetalhamentoBean = new RelatorioParcelamentoDetalhamentoBean(

							// Matrícula do Imóvel
							idImovel,
							// Nome do Cliente
							nomeCliente,
							// Faturas em Aberto
							// Referência 1
							"",
							// Valor Fatura 1
							"",
							// Referência 2
							"",
							// Valor Fatura 2
							"",
							// Serviços a Cobrar
							// Código
							debitoACobrar.getDebitoTipo().getId().toString(),
							// Descrição
							debitoACobrar.getDebitoTipo().getDescricao(),
							// Valor
							Util.formatarMoedaReal(debitoACobrar.getValorTotalComBonus()),
							// Guias de Pagamento
							// Número
							"",
							// Descrição
							"",
							// Valor
							"",
							// Créditos a Realizar
							// Código
							"",
							// Descrição
							"SERVICO A COBRAR",
							// Valor
							""
					);

					// adiciona o bean a coleção
					colecaoDetalhamentoCreditoDebito.add(relatorioParcelamentoDetalhamentoBean);

				} else if (parcelamentoItem.getGuiaPagamentoGeral().getGuiaPagamento().getId() != null) {
					GuiaPagamento guiaPagamento = (GuiaPagamento) parcelamentoItem
					.getGuiaPagamentoGeral().getGuiaPagamento();

					totalGuias = totalGuias.add(guiaPagamento.getValorDebito());

					relatorioParcelamentoDetalhamentoBean = new RelatorioParcelamentoDetalhamentoBean(

							// Matrícula do Imóvel
							idImovel,
							// Nome do Cliente
							nomeCliente,
							// Faturas em Aberto
							// Referência 1
							"",
							// Valor Fatura 1
							"",
							// Referência 2
							"",
							// Valor Fatura 2
							"",
							// Serviços a Cobrar
							// Código
							"",
							// Descrição
							"",
							// Valor
							"",
							// Guias de Pagamento
							// Número
							guiaPagamento.getId().toString(),
							// Descrição
							guiaPagamento.getDebitoTipo().getDescricao(),
							// Valor
							Util.formatarMoedaReal(guiaPagamento.getValorDebito()),
							// Créditos a Realizar
							// Código
							"",
							// Descrição
							"GUIA DE PAGAMENTO",
							// Valor
							""
					);

					// adiciona o bean a coleção
					colecaoDetalhamentoCreditoDebito.add(relatorioParcelamentoDetalhamentoBean);
				} else if (parcelamentoItem.getCreditoARealizarGeral()
						.getCreditoARealizar().getCreditoTipo().getId() != null) {
					CreditoARealizar creditoARealizar = (CreditoARealizar) parcelamentoItem
					.getCreditoARealizarGeral().getCreditoARealizar();

					totalCreditos = totalCreditos.add(creditoARealizar.getValorTotalComBonus());

					relatorioParcelamentoDetalhamentoBean = new RelatorioParcelamentoDetalhamentoBean(

							// Matrícula do Imóvel
							idImovel,
							// Nome do Cliente
							nomeCliente,
							// Faturas em Aberto
							// Referência 1
							"",
							// Valor Fatura 1
							"",
							// Referência 2
							"",
							// Valor Fatura 2
							"",
							// Serviços a Cobrar
							// Código
							"",
							// Descrição
							"",
							// Valor
							"",
							// Guias de Pagamento
							// Número
							"",
							// Descrição
							"CREDITO A REALIZAR",
							// Valor
							"",
							// Créditos a Realizar
							// Código
							creditoARealizar.getCreditoTipo().getId().toString(),
							// Descrição
							creditoARealizar.getCreditoTipo().getDescricao(),
							// Valor
							Util.formatarMoedaReal(creditoARealizar.getValorTotalComBonus())
					);

					// adiciona o bean a coleção
					colecaoDetalhamentoCreditoDebito.add(relatorioParcelamentoDetalhamentoBean);

				}

			}

			if (tipoAtual instanceof Conta) {
				relatorioParcelamentoDetalhamentoBean = new RelatorioParcelamentoDetalhamentoBean(

						// Matrícula do Imóvel
						idImovel,
						// Nome do Cliente
						nomeCliente,
						// Faturas em Aberto
						// Referência 1
						"TOTAL",
						// Valor Fatura 1
						"",
						// Referência 2
						"",
						// Valor Fatura 2
						Util.formatarMoedaReal(totalFaturas),
						// Serviços a Cobrar
						// Código
						"",
						// Descrição
						"",
						// Valor
						"",
						// Guias de Pagamento
						// Número
						"",
						// Descrição
						"",
						// Valor
						"",
						// Créditos a Realizar
						// Código
						"",
						// Descrição
						"FATURA EM ABERTO",
						// Valor
						""
				);

				// adiciona o bean a coleção
				colecaoDetalhamentoCreditoDebito.add(relatorioParcelamentoDetalhamentoBean);
			} else if (tipoAtual instanceof DebitoACobrar) {
				relatorioParcelamentoDetalhamentoBean = new RelatorioParcelamentoDetalhamentoBean(

						// Matrícula do Imóvel
						idImovel,
						// Nome do Cliente
						nomeCliente,
						// Faturas em Aberto
						// Referência 1
						"",
						// Valor Fatura 1
						"",
						// Referência 2
						"",
						// Valor Fatura 2
						"",
						// Serviços a Cobrar
						// Código
						"TOTAL",
						// Descrição
						"",
						// Valor
						Util.formatarMoedaReal(totalServicos),
						// Guias de Pagamento
						// Número
						"",
						// Descrição
						"SERVICO A COBRAR",
						// Valor
						"",
						// Créditos a Realizar
						// Código
						"",
						// Descrição
						"",
						// Valor
						""
				);

				// adiciona o bean a coleção
				colecaoDetalhamentoCreditoDebito.add(relatorioParcelamentoDetalhamentoBean);

			} else if (tipoAtual instanceof GuiaPagamento) {
				relatorioParcelamentoDetalhamentoBean = new RelatorioParcelamentoDetalhamentoBean(

						// Matrícula do Imóvel
						idImovel,
						// Nome do Cliente
						nomeCliente,
						// Faturas em Aberto
						// Referência 1
						"",
						// Valor Fatura 1
						"",
						// Referência 2
						"",
						// Valor Fatura 2
						"",
						// Serviços a Cobrar
						// Código
						"",
						// Descrição
						"",
						// Valor
						"",
						// Guias de Pagamento
						// Número
						"TOTAL",
						// Descrição
						"GUIA DE PAGAMENTO",
						// Valor
						Util.formatarMoedaReal(totalGuias),
						// Créditos a Realizar
						// Código
						"",
						// Descrição
						"",
						// Valor
						""
				);

				// adiciona o bean a coleção
				colecaoDetalhamentoCreditoDebito.add(relatorioParcelamentoDetalhamentoBean);

			} else if (tipoAtual instanceof CreditoARealizar) {

				relatorioParcelamentoDetalhamentoBean = new RelatorioParcelamentoDetalhamentoBean(

						// Matrícula do Imóvel
						idImovel,
						// Nome do Cliente
						nomeCliente,
						// Faturas em Aberto
						// Referência 1
						"",
						// Valor Fatura 1
						"",
						// Referência 2
						"",
						// Valor Fatura 2
						"",
						// Serviços a Cobrar
						// Código
						"",
						// Descrição
						"",
						// Valor
						"",
						// Guias de Pagamento
						// Número
						"",
						// Descrição
						"CREDITO A REALIZAR",
						// Valor
						"",
						// Créditos a Realizar
						// Código
						"TOTAL",
						// Descrição
						"",
						// Valor
						Util.formatarMoedaReal(totalCreditos)
				);

				// adiciona o bean a coleção
				colecaoDetalhamentoCreditoDebito.add(relatorioParcelamentoDetalhamentoBean);
			}

		}
		
		return colecaoDetalhamentoCreditoDebito;
	}
	
	/**
	 * [UC1554] - Consultar Calculo Parcelamento de Débitos Webservice
	 * 
	 * @author Anderson Cabral
	 * @date 09/09/2013
	 * @param matricula
	 * @param cpfCliente
	 * @param valorEntrada
	 * @return ArrayList<OpcaoParcelamentoAutoAtendimentoHelper>
	 */
	public ArrayList<OpcaoParcelamentoAutoAtendimentoHelper> calcularParcelamentoDebitoAutoAtendimento(String matricula, String cpfCliente, String valorEntrada)throws ControladorException{
		BigDecimal vlrEntrada = Util.formatarMoedaRealparaBigDecimal(valorEntrada);
		ArrayList<OpcaoParcelamentoAutoAtendimentoHelper> opcoes = null;
		
		ArrayList<Object> dadosParcelamento = this.consultarNegociacaoDebitoAutoAtendimento(matricula, cpfCliente, vlrEntrada, "", false);
		ParcelamentoDebitoHelper parcelamentoDebitoHelper = (ParcelamentoDebitoHelper) dadosParcelamento.get(0);
		
		if(parcelamentoDebitoHelper != null){
			opcoes = parcelamentoDebitoHelper.getOpcoesParcelamento();
			
			if(Util.isVazioOrNulo(opcoes)){
				throw new ControladorException("atencao.parcelar.valor.entrada");
			}
		}
		
		return opcoes;
	}
	
	/**
	 * [UC1553] - Consultar Parcelamento de Débitos Webservice
	 * 
	 * @author Anderson Cabral
	 * @date 05/09/2013
	 * @param matricula
	 * @param cpfCliente
	 * @param valorEntrada
	 * @param numeroParcelas
	 * @param efetuarParcelamento
	 * @return parcelamentoDebitoHelper e ConcluirParcelamentoDebitosHelper
	 */
	public ArrayList<Object> consultarNegociacaoDebitoAutoAtendimento(String matricula, String cpfCliente, 
												BigDecimal valorEntrada, String numeroParcelas, boolean efetuarParcelamento)throws ControladorException{
		ObterDebitoImovelOuClienteHelper colecaoDebitoImovel = null;
		ArrayList<Object> dadosParcelamento = null;
		
		if(getControladorCliente().validarCliente(cpfCliente, Integer.parseInt(matricula)) != null){		
			
			//[FS0003]  Verificar existência de parcelamento ativo
			Collection<Parcelamento> parcelamentos = this.pesquisarParcelamentosSituacaoNormal(Integer.parseInt(matricula));		
			if(Util.isVazioOrNulo(parcelamentos)){
				
				// [FS0012] Verificar existência de parcelamento no mês
				parcelamentos = this.verificarParcelamentoMesImovel(Integer.parseInt(matricula));
				if(Util.isVazioOrNulo(parcelamentos)){
					
					//[UC0067] Obter Débito do Imóvel ou Cliente 
					colecaoDebitoImovel	= this.obterDebitoImovelOuCliente(
											1,// Indicador débito imóvel 
											matricula.toString(), // Matrícula do imóvel
											null, // Código do cliente
											null, // Tipo de relação do cliento com o imóvel
											"000101", // Referência inicial do débito
											"999912", // Referência final do débito
											Util.converteStringParaDate("01/01/0001"), // Inicio Vencimento
											Util.converteStringParaDate("31/12/9999"), // Final Vencimento
											1, // Indicador pagamento
											2, // Indicador conta em revisão
											1, // Indicador débito a cobrar
											1, // Indicador crédito a realizar
											1, // Indicador notas promissórias
											1, // Indicador guias de pagamento
											1, // Indicador acréscimos por impontualidade
											null); // Indicador Contas
					
					//[FS0014] Verificar existência de débitos para o imóvel
					if(!Util.isVazioOrNulo(colecaoDebitoImovel.getColecaoContasValoresImovel()) 
							|| !Util.isVazioOrNulo(colecaoDebitoImovel.getColecaoGuiasPagamentoValores())
							|| !Util.isVazioOrNulo(colecaoDebitoImovel.getColecaoDebitoACobrar())){
						
						Imovel imovel = getControladorImovel().pesquisarImovel(Integer.parseInt(matricula));
						
						//Validações relativas ao cpf/cliente.
						ParcelamentoPerfil parcelamentoPerfil = this.obterPerfilParcelamentoImovel(imovel);
						
						//Verifica se o imóvel possui perfil de parcelamento
						if(parcelamentoPerfil != null){
							
							Short numeroReparcelamento = 0;
							if (imovel.getNumeroReparcelamento() != null) {
								numeroReparcelamento = imovel.getNumeroReparcelamento();
							}
							
							boolean perfilValido = validarPerfilParcelamento(Integer.parseInt(matricula), parcelamentoPerfil, numeroReparcelamento.toString());
							if(perfilValido){
								
								dadosParcelamento = this.calcularDebitos(colecaoDebitoImovel, imovel, parcelamentoPerfil, valorEntrada, numeroParcelas, cpfCliente, efetuarParcelamento);					
								ParcelamentoDebitoHelper parcelamentoDebitoHelper = (ParcelamentoDebitoHelper) dadosParcelamento.get(0);
								
								if(parcelamentoDebitoHelper.getParcelamentoPossivel() == null || 
										parcelamentoDebitoHelper.getParcelamentoPossivel().equals("")){
									parcelamentoDebitoHelper.setParcelamentoPossivel("S");
								}
							}
							
						}else{
							throw new ControladorException("atencao.nao.existe.perfil.parcelamento.correspondente.situacao.imovel");
						}
						
					}else{
						throw new ControladorException("atencao.imovel_sem_debitos");
					}
					
				}else{				
					throw new ControladorException("atencao.debito.ja.parcelado.mes.faturamento.corrente.auto.atendimento");
				}
				
			}else{		
				throw new ControladorException("atencao.imovel.possui.parcelamento.nao.quitado.auto.atendimento");
			}
		}else{
			throw new ControladorException("atencao.cliente_informado_nao_corresponde_imovel");
		}
		
		return dadosParcelamento;
	}
	
	/**
	 * [UC1553] - Consultar Parcelamento de Débitos Webservice
	 * Método auxiliar que vai retornar o perfil do parcelamento
	 * 
	 * @author Anderson Cabral
	 * @date 05/09/2013
	 * @param imovel
	 * @return parcelamentoPerfil
	 */
	private ParcelamentoPerfil obterPerfilParcelamentoImovel(Imovel imovel) throws ControladorException{
		ParcelamentoPerfil parcelamentoPerfil;

		//[FS004] Verificar existência da situação do imóvel.
		ImovelSituacao imovelSituacao = null;
		Integer situacaoAguaId = imovel.getLigacaoAguaSituacao().getId();
		Integer situacaoEsgotoId = imovel.getLigacaoEsgotoSituacao().getId();
		// Condição 1
		if (situacaoAguaId != null && situacaoEsgotoId != null) {
			imovelSituacao = getControladorImovel().obterSituacaoImovel(situacaoAguaId, situacaoEsgotoId);
			// Condição 2
			if (imovelSituacao == null) {
				imovelSituacao = getControladorImovel().obterSituacaoImovel(situacaoAguaId, null);
			}
		}

		//Obtém o perfil do parcelamento para o imóvel
		parcelamentoPerfil = null;
		
		FiltroResolucaoDiretoria filtro = new FiltroResolucaoDiretoria();
		filtro.adicionarParametro(new ParametroSimples(FiltroResolucaoDiretoria.INDICADOR_PARCELAMENTO_LOJA_VIRTUAL, ConstantesSistema.INDICADOR_USO_ATIVO));
		Collection<ResolucaoDiretoria> colecaoResolucaoDiretoria = getControladorUtil().pesquisar(filtro, ResolucaoDiretoria.class.getName());
		if(!Util.isVazioOrNulo(colecaoResolucaoDiretoria)){
			ResolucaoDiretoria resolucaoDiretoria = (ResolucaoDiretoria)Util.retonarObjetoDeColecao(colecaoResolucaoDiretoria);
			Integer idResolucao = resolucaoDiretoria.getId();
			if (imovelSituacao != null) {
				// Pega a subcategoria do imóvel
				Collection<ImovelSubcategoria> colecaoImovelSubCategoria = getControladorImovel().obterColecaoImovelSubcategorias(imovel, 1);
				Subcategoria subcategoria = null;
				Categoria categoria = null;

				if (colecaoImovelSubCategoria != null && !colecaoImovelSubCategoria.isEmpty()) {
					Iterator<ImovelSubcategoria> iteretorImovelSubCategoria = colecaoImovelSubCategoria.iterator();
					int quantidadeEconomisas = 0;
					int maiorQuantidadeEconomisas = 0;

					while (iteretorImovelSubCategoria.hasNext()) {
						ImovelSubcategoria imovelSubCategoria = (ImovelSubcategoria) iteretorImovelSubCategoria	.next();
						quantidadeEconomisas = imovelSubCategoria.getQuantidadeEconomias();
						if (quantidadeEconomisas > maiorQuantidadeEconomisas) {
							maiorQuantidadeEconomisas = quantidadeEconomisas;
							subcategoria = imovelSubCategoria.getComp_id().getSubcategoria();
							categoria = subcategoria.getCategoria();

						}
					}
				}
				parcelamentoPerfil = this.obterPerfilParcelamento(imovel.getId(), imovelSituacao.getImovelSituacaoTipo().getId(),
						imovel.getImovelPerfil().getId(), subcategoria.getId(), idResolucao, categoria.getId());

				if(parcelamentoPerfil == null){
					//Condição 1 - iper_id = iper_id do imovel e scat_id = scat_id do imovel
					parcelamentoPerfil = this.obterPerfilParcelamento(imovel.getId(),imovelSituacao.getImovelSituacaoTipo().getId(),
							imovel.getImovelPerfil().getId(), subcategoria.getId(), idResolucao, null);

					if (parcelamentoPerfil == null) {
						parcelamentoPerfil = this.obterPerfilParcelamento(imovel.getId(),imovelSituacao.getImovelSituacaoTipo().getId(),
								imovel.getImovelPerfil().getId(), null, idResolucao, categoria.getId());

						//Condição 2 - iper_id = iper_id do imovel e scat_id = null do imovel
						if (parcelamentoPerfil == null) {
							parcelamentoPerfil = this.obterPerfilParcelamento(imovel.getId(),imovelSituacao.getImovelSituacaoTipo().getId(),
									imovel.getImovelPerfil().getId(), null, idResolucao, null);

							if (parcelamentoPerfil == null) {
								parcelamentoPerfil = this.obterPerfilParcelamento(imovel.getId(),imovelSituacao.getImovelSituacaoTipo().getId(),
										null, subcategoria.getId(), idResolucao,categoria.getId());

								//Condição 3 - iper_id = null do imovel e scat_id = scat_id do imovel
								if (parcelamentoPerfil == null) {
									parcelamentoPerfil = this.obterPerfilParcelamento(imovel.getId(),imovelSituacao.getImovelSituacaoTipo().getId(),
											null, subcategoria.getId(), idResolucao,null);

									if(parcelamentoPerfil == null){
										parcelamentoPerfil = this.obterPerfilParcelamento(imovel.getId(),imovelSituacao.getImovelSituacaoTipo().getId(), 
												null, null, idResolucao, categoria.getId());

										//Condição 4 - iper_id = null do imovel e scat_id = null
										if (parcelamentoPerfil == null) {
											parcelamentoPerfil = this.obterPerfilParcelamento(imovel.getId(),imovelSituacao.getImovelSituacaoTipo().getId(), 
													null, null, idResolucao, null);
										}
									}
								}
							}
						}
					}
				}
			}
		}
		
		return parcelamentoPerfil;
	}
	
	/**
	 * [UC1553] - Consultar Parcelamento de Débitos Webservice
	 * 
	 * @author Anderson Cabral
	 * @date 05/09/2013
	 * @param idImovel
	 * @param parcelamentoPerfil
	 * @param numeroReparcelamento
	 * @return boolean
	 */
	private boolean validarPerfilParcelamento(Integer idImovel, ParcelamentoPerfil parcelamentoPerfil, String numeroReparcelamento) throws ControladorException{
		
		boolean retorno = true;
		
		//[FS0025] Verificar quantidade máxima de reparcelamento
		if (parcelamentoPerfil.getQuantidadeMaximaReparcelamento() != null && 
			parcelamentoPerfil.getQuantidadeMaximaReparcelamento().compareTo(new Integer(numeroReparcelamento)) == -1){
			
			throw new ControladorException("atencao.quantidade.reparcel.nao.permite.parcel.auto.atendimento");
		}
		
        Imovel imovel = new Imovel();
        imovel.setId(idImovel);
		if(parcelamentoPerfil.getCategoria() != null){
            Collection colecaoCategoria = getControladorImovel().pesquisarCategoriasImovel(imovel);
            boolean existePerfilParaCategoria = false;
            Iterator iter = colecaoCategoria.iterator();
            while (iter.hasNext()) {
                Categoria categoria = (Categoria) iter.next();
                
                if(categoria.getId().equals(parcelamentoPerfil.getCategoria().getId())){ 
                	 existePerfilParaCategoria = true;
                }
            }
            if(!existePerfilParaCategoria){
            	//categoria principal do imovel != categoria do perfl do parcelamento        	
            	throw new ControladorException("atencao.nao.existe.perfil.parcelamento.correspondente.situacao.imovel.auto.atendimento");
            }
		}
		
		int qtdeEconomiasImovel = getControladorImovel().obterQuantidadeEconomias(imovel);
		
		if(parcelamentoPerfil.getNumeroConsumoEconomia() != null){
			
			Integer idLigacaoTipo = LigacaoTipo.LIGACAO_AGUA;
			
			ImovelSituacao imovelSituacao = null;
			Integer situacaoAguaId = imovel.getLigacaoAguaSituacao().getId();
			Integer situacaoEsgotoId = imovel.getLigacaoEsgotoSituacao().getId();
			// Condição 1
			if (situacaoAguaId != null && situacaoEsgotoId != null) {
				imovelSituacao = getControladorImovel().obterSituacaoImovel(situacaoAguaId, situacaoEsgotoId);
				// Condição 2
				if (imovelSituacao == null) {
					imovelSituacao = getControladorImovel().obterSituacaoImovel(situacaoAguaId, null);
				}
			}
			
			if(imovelSituacao.getImovelSituacaoTipo().getId().equals(ImovelSituacaoTipo.LIGADO_SO_ESGOTO)){
				idLigacaoTipo = LigacaoTipo.LIGACAO_ESGOTO;
			}
			
			Integer consumoMedio = getControladorMicromedicao().obterConsumoMedioEmConsumoHistorico(idImovel,idLigacaoTipo);
			
			Integer consumoMedioPorEconomia = 0;
			if(consumoMedio != null && consumoMedio.intValue() != 0){
				consumoMedioPorEconomia =  Util.dividirArredondarResultado(consumoMedio,qtdeEconomiasImovel);
			}
			
			if(consumoMedioPorEconomia.compareTo(parcelamentoPerfil.getNumeroConsumoEconomia()) > 0){
				throw new ControladorException("atencao.nao.existe.perfil.parcelamento.correspondente.situacao.imovel.auto.atendimento");
			}
			
		}
		
		if(parcelamentoPerfil.getQuantidadeEconomias() != null){
			
			if(qtdeEconomiasImovel > parcelamentoPerfil.getQuantidadeEconomias().intValue()){
				throw new ControladorException("atencao.nao.existe.perfil.parcelamento.correspondente.situacao.imovel.auto.atendimento");
			}
		}
		
		if(parcelamentoPerfil.getCapacidadeHidrometro() != null &&
				parcelamentoPerfil.getCapacidadeHidrometro().equals(ConstantesSistema.SIM)){
			
			HidrometroCapacidade hidrometroCapacidade = null;
			hidrometroCapacidade = getControladorAtendimentoPublico().obterHidrometroCapacidadeEmLigacaoAgua(idImovel);
			
			if (hidrometroCapacidade != null){
				if (!hidrometroCapacidade.getId().equals(1) &&
					!hidrometroCapacidade.getId().equals(2) &&
					!hidrometroCapacidade.getId().equals(8)){
					throw new ControladorException("atencao.nao.existe.perfil.parcelamento.correspondente.situacao.imovel.auto.atendimento");
				}
			}
		}
		
		//[FS0021] - Verificar situação de cobrança
		if (parcelamentoPerfil.getIndicadorChequeDevolvido().equals(ConstantesSistema.SIM)){
			
			//CRC3323 - adicionado por Vivianne Sousa - analista:Fatima Sampaio - 05/05/2010 
			 Collection colecaoImovelCobrancaSituacao = this.pesquisarImovelCobrancaSituacaoPorImovel(idImovel);
             if(colecaoImovelCobrancaSituacao != null && !colecaoImovelCobrancaSituacao.isEmpty()){
            	 
            	 Iterator iterImovelCobrancaSituacao  = colecaoImovelCobrancaSituacao.iterator();
            	 String descricao = "";
            	 while (iterImovelCobrancaSituacao.hasNext()) {
					ImovelCobrancaSituacao imovelCobrancaSituacao = 
						(ImovelCobrancaSituacao) iterImovelCobrancaSituacao.next();
					
					if(imovelCobrancaSituacao.getCobrancaSituacao().getIndicadorBloqueioParcelamento().equals(ConstantesSistema.SIM)){
						
						descricao = descricao + imovelCobrancaSituacao.getCobrancaSituacao().getDescricao() + ", ";
					}
				}
            	 
            	if(!descricao.equalsIgnoreCase("")){
            		throw new ControladorException("atencao.imovel.com.situacao.cobranca.auto.atendimento");
            	}

             }			
		}
		return retorno;		
	}
	
	/**
	 * [UC1553] - Consultar Parcelamento de Débitos Webservice
	 * 
	 * @author Anderson Cabral
	 * @date 05/09/2013
	 * @param debitos
	 * @param imovel
	 * @param parcelamentoPerfil
	 * @return parcelamentoDebitoHelper e ConcluirParcelamentoDebitosHelper
	 */
	private ArrayList<Object> calcularDebitos(ObterDebitoImovelOuClienteHelper debitos, Imovel imovel, 
			ParcelamentoPerfil parcelamentoPerfil, BigDecimal valorEntrada, String numeroParcela, String cpfCnpj, boolean efetuarParcelamentoDebito) throws ControladorException{

		ParcelamentoDebitoHelper parcelamentoDebitoHelper = new ParcelamentoDebitoHelper();
		
		Collection<ContaValoresHelper> colecaoContaValores =  new ArrayList<ContaValoresHelper>();
		
		BigDecimal valorAtualizacaoMonetaria = new BigDecimal("0.00");
		BigDecimal valorJurosMora = new BigDecimal("0.00");
		BigDecimal valorMulta = new BigDecimal("0.00");
		
		/*
		 * Verifica se o usuário digitou um novo valor de entrada para o calculo do parcelamento. Caso
		 * tenha digitado, não será necessário calcular os débitos novamente, apenas o novo valor do
		 * parcelamento.
		 */
//		if(!recalcularOpcaoParcelamento){

			// Para o cálculo do Débito Total Atualizado
			BigDecimal valorTotalContas = new BigDecimal("0.00");
			BigDecimal valorTotalAcrescimoImpontualidade = new BigDecimal("0.00");
			BigDecimal valorTotalRestanteServicosACobrar = new BigDecimal("0.00");
			BigDecimal valorTotalRestanteServicosACobrarCurtoPrazo = new BigDecimal("0.00");
			BigDecimal valorTotalRestanteServicosACobrarLongoPrazo = new BigDecimal("0.00");
			BigDecimal valorTotalRestanteParcelamentosACobrar = new BigDecimal("0.00");
			BigDecimal valorTotalRestanteParcelamentosACobrarCurtoPrazo = new BigDecimal("0.00");
			BigDecimal valorTotalRestanteParcelamentosACobrarLongoPrazo = new BigDecimal("0.00");
			BigDecimal valorTotalGuiasPagamento = new BigDecimal("0.00");
			BigDecimal valorTotalAcrescimoImpontualidadeContas = new BigDecimal("0.00");
			BigDecimal valorTotalAcrescimoImpontualidadeGuias = new BigDecimal("0.00");
			BigDecimal valorCreditoARealizar = new BigDecimal("0.00");
			BigDecimal valorRestanteACobrar = new BigDecimal("0.00");


			// Dados do Débito do Imóvel - Contas
			colecaoContaValores = debitos.getColecaoContasValores();
			//[SB0011] Verificar Unica Fatura
			this.verificarUnicaFatura(colecaoContaValores,parcelamentoPerfil);

			if (!Util.isVazioOrNulo(colecaoContaValores)) {

				int quantidadeMinimaMesesAntiguidade = 0;
				int maiorQuantidadeMinimaMesesAntiguidade = 0;
				Iterator<ContaValoresHelper> contaValores = colecaoContaValores.iterator();			
				ArrayList<ContaParcelamentoDebitoHelper> contas = new ArrayList<ContaParcelamentoDebitoHelper>();

				while (contaValores.hasNext()){
					ContaValoresHelper contaValoresHelper = (ContaValoresHelper) contaValores.next();

					//Colocado por Raphael Rossiter em 04/12/2008
					//=============================================================================================
					Collection<ParcelamentoDescontoAntiguidade> colecaoParcelamentoDescontoAntiguidade = 
						this.obterParcelamentoDescontoAntiguidadeParaConta(parcelamentoPerfil, contaValoresHelper.getConta());

					ParcelamentoDescontoAntiguidade parcelamentoDescontoAntiguidadeMaior = new ParcelamentoDescontoAntiguidade();

					// Caso nenhuma ocorrência tenha sido selecionada passar para a próxima conta
					if (!Util.isVazioOrNulo(colecaoParcelamentoDescontoAntiguidade)) {

						Iterator<ParcelamentoDescontoAntiguidade> parcelamentoDescontoAntiguidadeValores = colecaoParcelamentoDescontoAntiguidade.iterator();
						quantidadeMinimaMesesAntiguidade = 0;
						maiorQuantidadeMinimaMesesAntiguidade = 0;

						//Determina o percentual de desconto por antiguidade do débito
						while (parcelamentoDescontoAntiguidadeValores.hasNext()) {
							ParcelamentoDescontoAntiguidade descoAnt = (ParcelamentoDescontoAntiguidade) parcelamentoDescontoAntiguidadeValores.next();
							quantidadeMinimaMesesAntiguidade = descoAnt.getQuantidadeMinimaMesesDebito();
							if (quantidadeMinimaMesesAntiguidade > maiorQuantidadeMinimaMesesAntiguidade) {
								maiorQuantidadeMinimaMesesAntiguidade = quantidadeMinimaMesesAntiguidade;
								parcelamentoDescontoAntiguidadeMaior = descoAnt;
							}
						}

						/*
						 * Colocado por Raphael Rossiter em 03/12/2008
						 * As contas onde o perfil de parcelamento para desconto de antiguidade estiver com
						 * o motivo de revisão informado NAO entrarão no parcelamento.
						 */
						valorTotalContas.setScale(Parcelamento.CASAS_DECIMAIS, Parcelamento.TIPO_ARREDONDAMENTO);
						valorTotalContas = valorTotalContas.add(contaValoresHelper.getValorTotalConta());

						if (contaValoresHelper.getValorAtualizacaoMonetaria() != null && !contaValoresHelper.getValorAtualizacaoMonetaria().equals("")) {
							valorAtualizacaoMonetaria.setScale(Parcelamento.CASAS_DECIMAIS,Parcelamento.TIPO_ARREDONDAMENTO);
							valorAtualizacaoMonetaria = valorAtualizacaoMonetaria.add(contaValoresHelper.getValorAtualizacaoMonetaria().setScale(Parcelamento.CASAS_DECIMAIS,Parcelamento.TIPO_ARREDONDAMENTO));
						}
						if (contaValoresHelper.getValorJurosMora() != null	&& !contaValoresHelper.getValorJurosMora().equals("")) {
							valorJurosMora.setScale(Parcelamento.CASAS_DECIMAIS,Parcelamento.TIPO_ARREDONDAMENTO);
							valorJurosMora = valorJurosMora.add(contaValoresHelper.getValorJurosMora().setScale(Parcelamento.CASAS_DECIMAIS,Parcelamento.TIPO_ARREDONDAMENTO));
						}
						if (contaValoresHelper.getValorMulta() != null && !contaValoresHelper.getValorMulta().equals("")) {
							valorMulta.setScale(Parcelamento.CASAS_DECIMAIS,Parcelamento.TIPO_ARREDONDAMENTO);
							valorMulta = valorMulta.add(contaValoresHelper.getValorMulta().setScale(Parcelamento.CASAS_DECIMAIS,Parcelamento.TIPO_ARREDONDAMENTO));
						}

						// Para cálculo do Acrescimo de Impontualidade
						valorTotalAcrescimoImpontualidadeContas.setScale(Parcelamento.CASAS_DECIMAIS, Parcelamento.TIPO_ARREDONDAMENTO);
						valorTotalAcrescimoImpontualidadeContas = valorTotalAcrescimoImpontualidadeContas.add(contaValoresHelper.getValorTotalContaValoresParcelamento());

						if (parcelamentoDescontoAntiguidadeMaior.getContaMotivoRevisao() != null){
							//CONTA ENTRARAO EM REVISAO
							contaValoresHelper.setRevisao(1);
						}
					}else{

						valorTotalContas.setScale(Parcelamento.CASAS_DECIMAIS, Parcelamento.TIPO_ARREDONDAMENTO);
						valorTotalContas = valorTotalContas.add(contaValoresHelper.getValorTotalConta());

						if (contaValoresHelper.getValorAtualizacaoMonetaria() != null && !contaValoresHelper.getValorAtualizacaoMonetaria().equals("")) {
							valorAtualizacaoMonetaria.setScale(Parcelamento.CASAS_DECIMAIS,Parcelamento.TIPO_ARREDONDAMENTO);
							valorAtualizacaoMonetaria = valorAtualizacaoMonetaria.add(contaValoresHelper.getValorAtualizacaoMonetaria().setScale(Parcelamento.CASAS_DECIMAIS,Parcelamento.TIPO_ARREDONDAMENTO));
						}
						if (contaValoresHelper.getValorJurosMora() != null	&& !contaValoresHelper.getValorJurosMora().equals("")) {
							valorJurosMora.setScale(Parcelamento.CASAS_DECIMAIS,Parcelamento.TIPO_ARREDONDAMENTO);
							valorJurosMora = valorJurosMora.add(contaValoresHelper.getValorJurosMora().setScale(Parcelamento.CASAS_DECIMAIS,Parcelamento.TIPO_ARREDONDAMENTO));
						}
						if (contaValoresHelper.getValorMulta() != null && !contaValoresHelper.getValorMulta().equals("")) {
							valorMulta.setScale(Parcelamento.CASAS_DECIMAIS,Parcelamento.TIPO_ARREDONDAMENTO);
							valorMulta = valorMulta.add(contaValoresHelper.getValorMulta().setScale(Parcelamento.CASAS_DECIMAIS,Parcelamento.TIPO_ARREDONDAMENTO));
						}

						// Para cálculo do Acrescimo de Impontualidade
						valorTotalAcrescimoImpontualidadeContas.setScale(Parcelamento.CASAS_DECIMAIS, Parcelamento.TIPO_ARREDONDAMENTO);
						valorTotalAcrescimoImpontualidadeContas = valorTotalAcrescimoImpontualidadeContas.add(contaValoresHelper.getValorTotalContaValoresParcelamento());
					}
					//=============================================================================================
					
					Conta conta = contaValoresHelper.getConta();
					
					ContaParcelamentoDebitoHelper contaParcelamentoDebitoHelper = new ContaParcelamentoDebitoHelper();
					contaParcelamentoDebitoHelper.setPeriodo(conta.getFormatarAnoMesParaMesAno());
					contaParcelamentoDebitoHelper.setVencimento(Util.formatarData(conta.getDataVencimentoConta()));
					contaParcelamentoDebitoHelper.setValor(Util.formatarMoedaReal(conta.getValorTotal()));
					contaParcelamentoDebitoHelper.setValorImpontualidade(Util.formatarMoedaReal(contaValoresHelper.getValorTotalContaValores()));
				
					contas.add(contaParcelamentoDebitoHelper);
				}
				
				parcelamentoDebitoHelper.setValorTotalConta(Util.formatarMoedaReal(valorTotalContas));
				parcelamentoDebitoHelper.setContas(contas);
			}

			//----------------------------- Guia Pagamento -----------------------------//

			Collection<GuiaPagamentoValoresHelper> guiasPagamentoValores = debitos.getColecaoGuiasPagamentoValores();
			if (!Util.isVazioOrNulo(guiasPagamentoValores)){
				Iterator<GuiaPagamentoValoresHelper> guiaPagamentoValores = guiasPagamentoValores.iterator();
				while (guiaPagamentoValores.hasNext()) {
					GuiaPagamentoValoresHelper guiaPagamentoValoresHelper = (GuiaPagamentoValoresHelper) guiaPagamentoValores.next();
					valorTotalGuiasPagamento.setScale(Parcelamento.CASAS_DECIMAIS, Parcelamento.TIPO_ARREDONDAMENTO);
					valorTotalGuiasPagamento = valorTotalGuiasPagamento.add(guiaPagamentoValoresHelper.getGuiaPagamento().getValorDebito());

					if (guiaPagamentoValoresHelper.getValorAtualizacaoMonetaria() != null && !guiaPagamentoValoresHelper.getValorAtualizacaoMonetaria().equals("")) {
						valorAtualizacaoMonetaria.setScale(Parcelamento.CASAS_DECIMAIS,Parcelamento.TIPO_ARREDONDAMENTO);
						valorAtualizacaoMonetaria = valorAtualizacaoMonetaria.add(guiaPagamentoValoresHelper.getValorAtualizacaoMonetaria().setScale(Parcelamento.CASAS_DECIMAIS,Parcelamento.TIPO_ARREDONDAMENTO));
					}
					if (guiaPagamentoValoresHelper.getValorJurosMora() != null && !guiaPagamentoValoresHelper.getValorJurosMora().equals("")) {
						valorJurosMora.setScale(Parcelamento.CASAS_DECIMAIS,Parcelamento.TIPO_ARREDONDAMENTO);
						valorJurosMora = valorJurosMora.add(guiaPagamentoValoresHelper.getValorJurosMora().setScale(Parcelamento.CASAS_DECIMAIS,Parcelamento.TIPO_ARREDONDAMENTO));
					}
					if (guiaPagamentoValoresHelper.getValorMulta() != null	&& !guiaPagamentoValoresHelper.getValorMulta().equals("")) {
						valorMulta.setScale(Parcelamento.CASAS_DECIMAIS,Parcelamento.TIPO_ARREDONDAMENTO);
						valorMulta = valorMulta.add(guiaPagamentoValoresHelper.getValorMulta().setScale(Parcelamento.CASAS_DECIMAIS,Parcelamento.TIPO_ARREDONDAMENTO));
					}

					// Para cálculo do Acrescimo de Impontualidade
					valorTotalAcrescimoImpontualidadeGuias.setScale(Parcelamento.CASAS_DECIMAIS, Parcelamento.TIPO_ARREDONDAMENTO);
					valorTotalAcrescimoImpontualidadeGuias = valorTotalAcrescimoImpontualidadeGuias.add(guiaPagamentoValoresHelper.getValorAcrescimosImpontualidade());
				}
				
				parcelamentoDebitoHelper.setValorGuiaPagamento(Util.formatarMoedaReal(valorTotalGuiasPagamento));
			} else {
				parcelamentoDebitoHelper.setValorGuiaPagamento("0.00");
			}

			//----------------------------- Acrescimos por Impontualidade -----------------------------//
			BigDecimal retornoSoma = new BigDecimal("0.00");
			retornoSoma.setScale(Parcelamento.CASAS_DECIMAIS, Parcelamento.TIPO_ARREDONDAMENTO);
			retornoSoma = retornoSoma.add(valorTotalAcrescimoImpontualidadeContas);
			retornoSoma = retornoSoma.add(valorTotalAcrescimoImpontualidadeGuias);

			parcelamentoDebitoHelper.setValorAcrescimoImpotualidade(Util.formatarMoedaReal(retornoSoma));

			valorTotalAcrescimoImpontualidade = retornoSoma;


			//----------------------------- Débitos a cobrar -----------------------------//
			//[FS0022]-Verificar existência de juros sobre imóvel
			Collection<DebitoACobrar> colecaoDebitoACobrar = debitos.getColecaoDebitoACobrar();

			BigDecimal valorAcrescimosServicosCurtoPrazo = new BigDecimal(0);
			BigDecimal valorAcrescimosServicosLongoPrazo = new BigDecimal(0);
			BigDecimal valorAcrescimosParcelamentosCurtoPrazo = new BigDecimal(0);
			BigDecimal valorAcrescimosParcelamentosLongoPrazo = new BigDecimal(0);

			if (!Util.isVazioOrNulo(colecaoDebitoACobrar)) {
				Iterator<DebitoACobrar> debitoACobrarValores = colecaoDebitoACobrar.iterator();

				final int indiceCurtoPrazo = 0;
				final int indiceLongoPrazo = 1;

				while (debitoACobrarValores.hasNext()) {
					DebitoACobrar debitoACobrar = debitoACobrarValores.next();

					//[FS0022]-Verificar existência de juros sobre imóvel
					if(debitoACobrar.getDebitoTipo().getId() != null && !debitoACobrar.getDebitoTipo().getId().equals(DebitoTipo.JUROS_SOBRE_PARCELAMENTO)){

						// Debitos A Cobrar - Serviço
						if (debitoACobrar.getFinanciamentoTipo().getId().equals(FinanciamentoTipo.SERVICO_NORMAL)) {
							// [SB0001] Obter Valores de Curto e Longo Prazo
							valorRestanteACobrar = debitoACobrar.getValorTotalComBonus();
							
							if (debitoACobrar.getLancamentoItemContabil().getId().equals(LancamentoItemContabil.ACRESCIMOS_POR_IMPONTUALIDADE) && (debitoACobrar.getAnoMesRefContabilizacao() == null || debitoACobrar.getAnoMesRefContabilizacao() >= 201203)) {
								BigDecimal[] valoresAcrescimosDeCurtoELongoPrazo = getControladorFaturamento().obterValorACobrarDeCurtoELongoPrazo(
										debitoACobrar.getNumeroPrestacaoDebito(),debitoACobrar.getNumeroPrestacaoCobradasMaisBonus(),valorRestanteACobrar);
								
								valorAcrescimosServicosCurtoPrazo.setScale(Parcelamento.CASAS_DECIMAIS, Parcelamento.TIPO_ARREDONDAMENTO);
								valorAcrescimosServicosCurtoPrazo = valorAcrescimosServicosCurtoPrazo.add(valoresAcrescimosDeCurtoELongoPrazo[indiceCurtoPrazo]);
								
								valorAcrescimosServicosLongoPrazo.setScale(Parcelamento.CASAS_DECIMAIS, Parcelamento.TIPO_ARREDONDAMENTO);
								valorAcrescimosServicosLongoPrazo = valorAcrescimosServicosCurtoPrazo.add(valoresAcrescimosDeCurtoELongoPrazo[indiceLongoPrazo]);
							}

							BigDecimal[] valoresDeCurtoELongoPrazo = getControladorFaturamento().obterValorACobrarDeCurtoELongoPrazo(
									debitoACobrar.getNumeroPrestacaoDebito(), debitoACobrar.getNumeroPrestacaoCobradasMaisBonus(),
									valorRestanteACobrar);
							valorTotalRestanteServicosACobrarCurtoPrazo.setScale(Parcelamento.CASAS_DECIMAIS, Parcelamento.TIPO_ARREDONDAMENTO);
							valorTotalRestanteServicosACobrarCurtoPrazo = valorTotalRestanteServicosACobrarCurtoPrazo.add(
									valoresDeCurtoELongoPrazo[indiceCurtoPrazo]);
//							form.setValorDebitoACobrarServicoCurtoPrazo(Util.formatarMoedaReal(valorTotalRestanteServicosACobrarCurtoPrazo));
							
							valorTotalRestanteServicosACobrarLongoPrazo.setScale(Parcelamento.CASAS_DECIMAIS, Parcelamento.TIPO_ARREDONDAMENTO);
							valorTotalRestanteServicosACobrarLongoPrazo = valorTotalRestanteServicosACobrarLongoPrazo.add(
									valoresDeCurtoELongoPrazo[indiceLongoPrazo]);
//							form.setValorDebitoACobrarServicoLongoPrazo(Util.formatarMoedaReal(valorTotalRestanteServicosACobrarLongoPrazo));
						}

						// Debitos A Cobrar - Parcelamento
						if (debitoACobrar.getFinanciamentoTipo().getId().equals(FinanciamentoTipo.PARCELAMENTO_AGUA)
								|| debitoACobrar.getFinanciamentoTipo().getId().equals(FinanciamentoTipo.PARCELAMENTO_ESGOTO)
								|| debitoACobrar.getFinanciamentoTipo().getId().equals(FinanciamentoTipo.PARCELAMENTO_SERVICO)) {
							// [SB0001] Obter Valores de Curto e Longo Prazo
							valorRestanteACobrar = debitoACobrar.getValorTotalComBonus();
							
							if (debitoACobrar.getLancamentoItemContabil().getId().equals(LancamentoItemContabil.ACRESCIMOS_POR_IMPONTUALIDADE) && (debitoACobrar.getAnoMesRefContabilizacao() == null || debitoACobrar.getAnoMesRefContabilizacao() >= 201203)) {
								BigDecimal[] valoresAcrescimosDeCurtoELongoPrazo = getControladorFaturamento().obterValorACobrarDeCurtoELongoPrazo(
										debitoACobrar.getNumeroPrestacaoDebito(),debitoACobrar.getNumeroPrestacaoCobradasMaisBonus(),valorRestanteACobrar);
								
								valorAcrescimosParcelamentosCurtoPrazo.setScale(Parcelamento.CASAS_DECIMAIS, Parcelamento.TIPO_ARREDONDAMENTO);
								valorAcrescimosParcelamentosCurtoPrazo = valorAcrescimosParcelamentosCurtoPrazo.add(valoresAcrescimosDeCurtoELongoPrazo[indiceCurtoPrazo]);
								
								valorAcrescimosParcelamentosLongoPrazo.setScale(Parcelamento.CASAS_DECIMAIS, Parcelamento.TIPO_ARREDONDAMENTO);
								valorAcrescimosParcelamentosLongoPrazo = valorAcrescimosParcelamentosLongoPrazo.add(valoresAcrescimosDeCurtoELongoPrazo[indiceLongoPrazo]);
							}

							BigDecimal[] valoresDeCurtoELongoPrazo = getControladorFaturamento().obterValorACobrarDeCurtoELongoPrazo(
									debitoACobrar.getNumeroPrestacaoDebito(),
									debitoACobrar.getNumeroPrestacaoCobradasMaisBonus(), valorRestanteACobrar);
							valorTotalRestanteParcelamentosACobrarCurtoPrazo.setScale(Parcelamento.CASAS_DECIMAIS, Parcelamento.TIPO_ARREDONDAMENTO);
							valorTotalRestanteParcelamentosACobrarCurtoPrazo = valorTotalRestanteParcelamentosACobrarCurtoPrazo.add(
									valoresDeCurtoELongoPrazo[indiceCurtoPrazo]);
							valorTotalRestanteParcelamentosACobrarLongoPrazo.setScale(Parcelamento.CASAS_DECIMAIS, Parcelamento.TIPO_ARREDONDAMENTO);
							valorTotalRestanteParcelamentosACobrarLongoPrazo = valorTotalRestanteParcelamentosACobrarLongoPrazo.add(
									valoresDeCurtoELongoPrazo[indiceLongoPrazo]);
						}
					}
				}
				
				// Serviços
				valorTotalRestanteServicosACobrar.setScale(Parcelamento.CASAS_DECIMAIS, Parcelamento.TIPO_ARREDONDAMENTO);
				valorTotalRestanteServicosACobrar = valorTotalRestanteServicosACobrarCurtoPrazo.add(valorTotalRestanteServicosACobrarLongoPrazo);
				parcelamentoDebitoHelper.setDebitoCobrarServico(Util.formatarMoedaReal(valorTotalRestanteServicosACobrar));
				// Parcelamentos
				valorTotalRestanteParcelamentosACobrar.setScale(Parcelamento.CASAS_DECIMAIS, Parcelamento.TIPO_ARREDONDAMENTO);
				valorTotalRestanteParcelamentosACobrar = valorTotalRestanteParcelamentosACobrarCurtoPrazo
					.add(valorTotalRestanteParcelamentosACobrarLongoPrazo);
				parcelamentoDebitoHelper.setDebitoCobrarParcelamento(Util.formatarMoedaReal(valorTotalRestanteParcelamentosACobrar));
			}else{
				parcelamentoDebitoHelper.setDebitoCobrarServico("0,00");
				parcelamentoDebitoHelper.setDebitoCobrarParcelamento("0,00");
			}

			//----------------------------- Créditos a realizar -----------------------------//
			Collection<CreditoARealizar> colecaoCreditoARealizar = debitos.getColecaoCreditoARealizar();
			if (!Util.isVazioOrNulo(colecaoCreditoARealizar)) {
				Iterator<CreditoARealizar> creditoARealizarValores = colecaoCreditoARealizar.iterator();
				while (creditoARealizarValores.hasNext()) {
					CreditoARealizar creditoARealizar = creditoARealizarValores.next();
					valorCreditoARealizar.setScale(Parcelamento.CASAS_DECIMAIS, Parcelamento.TIPO_ARREDONDAMENTO);
					valorCreditoARealizar = valorCreditoARealizar.add(creditoARealizar.getValorTotalComBonus());
				}
				parcelamentoDebitoHelper.setCreditoRealizar(Util.formatarMoedaReal(valorCreditoARealizar));
			}else{
				parcelamentoDebitoHelper.setCreditoRealizar("0,00");				
			}

			//----------------------------- Débito total atualizado -----------------------------//
			BigDecimal debitoTotalAtualizado = new BigDecimal("0.00");

			debitoTotalAtualizado.setScale(Parcelamento.CASAS_DECIMAIS, Parcelamento.TIPO_ARREDONDAMENTO);

			debitoTotalAtualizado = debitoTotalAtualizado.add(valorTotalContas);
			debitoTotalAtualizado = debitoTotalAtualizado.add(valorTotalGuiasPagamento);
			debitoTotalAtualizado = debitoTotalAtualizado.add(valorTotalAcrescimoImpontualidade);
			debitoTotalAtualizado = debitoTotalAtualizado.add(valorTotalRestanteServicosACobrar);
			debitoTotalAtualizado = debitoTotalAtualizado.add(valorTotalRestanteParcelamentosACobrar);
			debitoTotalAtualizado = debitoTotalAtualizado.subtract(valorCreditoARealizar);

			parcelamentoDebitoHelper.setDebitoTotal(Util.formatarMoedaReal(debitoTotalAtualizado));
//		}
			
		/*
		 * Caso o usuário tenha digitado um novo valor ou seja a primeira vez que esteja calculando os débitos do imóvel,
		 * será necessário obter as opções de parcelamento. A coleção de conta valores será setada na sessao dentro do
		 * calcular débitos. Logo acima.
		 */
		parcelamentoDebitoHelper = this.obterOpcaoParcelamento(colecaoContaValores, debitos.getColecaoGuiasPagamentoValores(), imovel, parcelamentoDebitoHelper,
				valorAtualizacaoMonetaria, valorJurosMora, valorMulta, valorEntrada, efetuarParcelamentoDebito);
		
		ArrayList<Object> dadosParcelamento = new ArrayList<Object>();
		
		dadosParcelamento.add(parcelamentoDebitoHelper);
		
		if(efetuarParcelamentoDebito){
		
			/*****************CONCLUIR PARCELAMENTO*******************************/
	        //Variáveis que irão armazenar os valores de acordo com a opção de parcelamento selecionada.
	        Short numeroPrestacoes = new Short("0");
			BigDecimal valorPrestacao = new BigDecimal("0.00");
			BigDecimal valorEntradaMinima = new BigDecimal("0.00");
			BigDecimal taxaJuros = new BigDecimal("0.00");
			//Variáveis para o valor a ser parcelado
			BigDecimal valorASerParcelado = new BigDecimal("0.00");
			
			NegociacaoOpcoesParcelamentoHelper opcoesParcelamento = montaNegociacaoOpcoesParcelamentoHelper(colecaoContaValores, debitos.getColecaoGuiasPagamentoValores(), imovel, 
					parcelamentoDebitoHelper, valorEntrada, valorAtualizacaoMonetaria, valorJurosMora, valorMulta);
			
			Collection<OpcoesParcelamentoHelper> colecaoOpcoesParcelamento = opcoesParcelamento.getOpcoesParcelamento();
			boolean existeQuantidadeEscolhida = false;
			if(!Util.isVazioOrNulo(colecaoOpcoesParcelamento) ){
				loopOpcaoParcelamento:
					for(OpcoesParcelamentoHelper opcao : colecaoOpcoesParcelamento){
						/*
						 * Verifica se o usuário escolheu uma opção de parcelamento, caso tenha escolhido configura
						 * os valores do parcelamento e sai do loop.
						 */
						if((numeroParcela).equals(opcao.getQuantidadePrestacao().toString()) ){
							//valorJurosParcelamento = opcoesParcelamentoHelper.getTaxaJuros(); 
							numeroPrestacoes = opcao.getQuantidadePrestacao();
							valorPrestacao = opcao.getValorPrestacao();
							valorEntradaMinima = opcao.getValorEntradaMinima();
							taxaJuros = opcao.getTaxaJuros();
							valorASerParcelado = opcao.getValorPrestacao().multiply(new BigDecimal(opcao.getQuantidadePrestacao()));
							existeQuantidadeEscolhida = true;
							break loopOpcaoParcelamento;
						}
					}
			}
			
			//Verifica se o numero de parcelas informado existe para o valor de entrada.
			if(!existeQuantidadeEscolhida){
				throw new ControladorException("atencao.numero.parcelas.nao.permitido");
			}
			
			//Usuário responsável por fazer o parcelamneto.
			FiltroUsuario filtroUsuario = new FiltroUsuario();
			filtroUsuario.adicionarParametro(new ParametroSimples(FiltroUsuario.LOGIN, "INTERNET"));
			Usuario usuarioLogado = (Usuario) Util.retonarObjetoDeColecao(Fachada.getInstancia().pesquisar(filtroUsuario, Usuario.class.getName()));
			
			/*Configura o cliente responsável pelo parcelamento que 
			 * será o cliente cujo CPF foi digitado na tela de 
			 * parcelamentos_debitos_portal_efetuar.jsp
			 */
			Cliente cliente = null;
			FiltroCliente filtroCliente = new FiltroCliente();
			filtroCliente.adicionarParametro(new ParametroSimples(FiltroCliente.CPF, cpfCnpj));
			Collection<Cliente> clients = getControladorUtil().pesquisar(filtroCliente, Cliente.class.getName());
			if(!Util.isVazioOrNulo(clients)){
				cliente = (Cliente) Util.retonarObjetoDeColecao(clients);
			}
			
	        String codigoImovel = imovel.getId().toString();
	        Date dataParcelamento = new Date();
	        String indicadorRestabelecimento = "2";
	        String cpfClienteParcelamentoDigitado = usuarioLogado.getCpf();       
			String indicadorAcrescimosImpotualidade ="1";
			String indicadorContasRevisao = "2";
			String indicadorCreditoARealizar = "1";
			String indicadorDebitosACobrar = "1";
			String indicadorDividaAtiva  = "3";
			String indicadorGuiasPagamento = "1";
			
			Integer idParcelamentoPerfil = parcelamentoPerfil.getId();
	
			
			BigDecimal valorDebitoACobrarParcelamentoLongoPrazo = new BigDecimal("0.00");
			BigDecimal valorDebitoACobrarParcelamentoCurtoPrazo = new BigDecimal("0.00");	
			
			/*
			 * Colocado por Raphael Rossiter em 25/08/2008 - Analista: Rosana Carvalho
			 * 
			 * O sistema verifica se o parcelamento é para ser incluído obrigatoriamente já confirmado
			 */
			SistemaParametro sistemaParametro = getControladorUtil().pesquisarParametrosDoSistema();
			String indicadorConfirmacaoParcelamento = null;
			if (sistemaParametro.getIndicadorParcelamentoConfirmado() == ConstantesSistema.SIM.shortValue()){
				indicadorConfirmacaoParcelamento = ConstantesSistema.SIM.toString();
			}else{
				indicadorConfirmacaoParcelamento = ConstantesSistema.NAO.toString();
			}
					
			BigDecimal descontoAcrescimosImpontualidade = opcoesParcelamento.getValorDescontoAcrecismosImpotualidade();
			BigDecimal descontoAntiguidadeDebito = opcoesParcelamento.getValorDescontoAntiguidade();
			BigDecimal descontoInatividadeLigacaoAgua = opcoesParcelamento.getValorDescontoInatividade();
			BigDecimal percentualDescontoAcrescimosImpontualidade = opcoesParcelamento.getPercentualDescontoAcrescimosImpontualidade();
			BigDecimal percentualDescontoAntiguidadeDebito = opcoesParcelamento.getPercentualDescontoAntiguidadeDebito();
			BigDecimal percentualDescontoInatividadeLigacaoAgua = opcoesParcelamento.getPercentualDescontoInatividadeLigacaoAgua();
			BigDecimal descontoSancoesRDEspecial = opcoesParcelamento.getValorDescontoSancoesRDEspecial();
			BigDecimal descontoTarifaSocialRDEspecial = opcoesParcelamento.getValorDescontoTarifaSocialRDEspecial();
			Collection colecaoContasEmAntiguidade = opcoesParcelamento.getColecaoContasEmAntiguidade();
			BigDecimal descontoSobreDebitoTotal = opcoesParcelamento.getValorDescontoSobreDebitoTotal();
			
			// Valor a ser Negociado
			BigDecimal valorASerNegociado = new BigDecimal("0.00");
			BigDecimal valorDesconto = new BigDecimal("0.00");
			valorDesconto = valorDesconto.add(descontoAcrescimosImpontualidade);
			valorDesconto = valorDesconto.add(descontoAntiguidadeDebito);
			valorDesconto = valorDesconto.add(descontoInatividadeLigacaoAgua);
			valorASerNegociado = debitoTotalAtualizado.subtract(valorDesconto);
			
			ConcluirParcelamentoDebitosHelper concluirParcelamentoDebitosHelper = new ConcluirParcelamentoDebitosHelper(
					colecaoContaValores, 
					guiasPagamentoValores,
					colecaoDebitoACobrar, 
					colecaoCreditoARealizar, 
					indicadorRestabelecimento,
					indicadorContasRevisao, 
					indicadorGuiasPagamento, 
					indicadorAcrescimosImpotualidade,
					indicadorDebitosACobrar, 
					indicadorCreditoARealizar, 
					indicadorDividaAtiva,
					imovel, 
					valorEntrada,
					valorASerNegociado, 
					valorASerParcelado, 
					dataParcelamento, 
					valorTotalContas,
					valorTotalGuiasPagamento, 
					valorTotalRestanteServicosACobrar, 
					valorTotalRestanteParcelamentosACobrar,
					valorCreditoARealizar, 
					valorAtualizacaoMonetaria,
					valorAcrescimosServicosCurtoPrazo,
					valorAcrescimosServicosLongoPrazo,
					valorAcrescimosParcelamentosCurtoPrazo,
					valorAcrescimosParcelamentosLongoPrazo,
					valorJurosMora, 
					valorMulta,
					debitoTotalAtualizado, 
					descontoAcrescimosImpontualidade, 
					descontoAntiguidadeDebito,
					descontoInatividadeLigacaoAgua, 
					percentualDescontoAcrescimosImpontualidade, 
					percentualDescontoAntiguidadeDebito, 
					percentualDescontoInatividadeLigacaoAgua, 
					idParcelamentoPerfil, 
					retornoSoma, 
					valorTotalRestanteServicosACobrarLongoPrazo,
					valorTotalRestanteServicosACobrarCurtoPrazo, 
					valorDebitoACobrarParcelamentoLongoPrazo,
					valorDebitoACobrarParcelamentoCurtoPrazo, 
					numeroPrestacoes, 
					valorPrestacao,
					valorEntradaMinima,
					taxaJuros,
					indicadorConfirmacaoParcelamento,
					cliente,
					usuarioLogado,
					cpfClienteParcelamentoDigitado,
					descontoSancoesRDEspecial,
					descontoTarifaSocialRDEspecial,
					colecaoContasEmAntiguidade,
					descontoSobreDebitoTotal);
			
			dadosParcelamento.add(concluirParcelamentoDebitosHelper);
		}
		
		return dadosParcelamento;
	}
	
	/**
	 * [UC1553] - Consultar Parcelamento de Débitos Webservice
	 * 
	 * Metodo auxiliar que retorna as opcoes de parcelamento
	 * 
	 * @author Anderson Cabral
	 * @date 05/09/2013
	 * @param debitos
	 * @param imovel
	 * @param parcelamentoPerfil
	 * @return parcelamentoDebitoHelper
	 */
	private NegociacaoOpcoesParcelamentoHelper montaNegociacaoOpcoesParcelamentoHelper(Collection<ContaValoresHelper> colecaoContaValores, 
			Collection<GuiaPagamentoValoresHelper> colecaoGuiaPagamento, Imovel imovel, 
			ParcelamentoDebitoHelper parcelamentoDebitoHelper, BigDecimal valorEntradaInformado,
			BigDecimal valorTotalAtualizacoesMonetarias, BigDecimal valorTotalJurosMora, BigDecimal valorTotalMultas) throws ControladorException{
		
		//Configurando o helper dos indicadores de parcelamento
		IndicadoresParcelamentoHelper indicadoresParcelamentoHelper = new IndicadoresParcelamentoHelper();
		indicadoresParcelamentoHelper.setIndicadorContasRevisao(new Integer(2));
		indicadoresParcelamentoHelper.setIndicadorDebitosACobrar(new Integer(1));
		indicadoresParcelamentoHelper.setIndicadorCreditoARealizar(new Integer(1));
		indicadoresParcelamentoHelper.setIndicadorGuiasPagamento(new Integer(1));
		indicadoresParcelamentoHelper.setIndicadorAcrescimosImpotualidade(new Integer(1));
		indicadoresParcelamentoHelper.setIndicadorDividaAtiva(new Integer(3));
		
		///Configurando os parametros para obter opções de parcelamento
		ResolucaoDiretoria resolucaoDiretoria = this.pesquisarResolucaoDiretoriaPortal();
//		Integer resolucaoDiretoria = 14;
		Integer codigoImovel = imovel.getId();
		
		Integer situacaoAguaId = imovel.getLigacaoAguaSituacao().getId();
		Integer situacaoEsgotoId = imovel.getLigacaoEsgotoSituacao().getId();
		Integer perfilImovel = imovel.getImovelPerfil().getId();		
		Integer indicadorRestabelecimento = 2;
		
		BigDecimal valorDebitoTotalAtualizado = Util.formatarMoedaRealparaBigDecimal(parcelamentoDebitoHelper.getDebitoTotal());
		Integer numeroReparcelamentoConsecutivos = (imovel.getNumeroReparcelamentoConsecutivos() == null) ? 0 :imovel.getNumeroReparcelamentoConsecutivos().intValue();
		
		//Usuário
		FiltroUsuario filtroUsuario = new FiltroUsuario();
		filtroUsuario.adicionarParametro(
			new ParametroSimples(FiltroUsuario.INDICADOR_USUARIO_INTERNET, ConstantesSistema.SIM));
		Usuario usuario = 
			(Usuario) Util.retonarObjetoDeColecao(getControladorUtil().pesquisar(filtroUsuario, Usuario.class.getName()));
		//Fim Usuario
		
		BigDecimal valorDebitoACobrarParcelamentoImovelBigDecimal = Util.formatarMoedaRealparaBigDecimal(parcelamentoDebitoHelper.getDebitoCobrarParcelamento());
		String inicioIntervaloParcelamento = "01/0001";
		Integer inicioIntervaloParcelamentoFormatado = 101;
		Integer fimIntervaloParcelamentoFormatado = 999912;
		BigDecimal valorCreditoARealizar = Util.formatarMoedaRealparaBigDecimal(parcelamentoDebitoHelper.getCreditoRealizar());
		
		/*
		 * [SB0002] - Obter Opções de Parcelamento de acordo com a entrada informada
		 * CARREGANDO O HELPER COM AS INFORMACOES DO PARCELAMENTO
		 */
		ObterOpcoesDeParcelamentoHelper helper = new ObterOpcoesDeParcelamentoHelper(
				resolucaoDiretoria.getId(), new Integer(codigoImovel), valorEntradaInformado, situacaoAguaId, 
				situacaoEsgotoId, perfilImovel, inicioIntervaloParcelamento, indicadorRestabelecimento, 
				colecaoContaValores, valorDebitoTotalAtualizado, valorTotalMultas, valorTotalJurosMora, 
				valorTotalAtualizacoesMonetarias, numeroReparcelamentoConsecutivos, colecaoGuiaPagamento, usuario, 
				valorDebitoACobrarParcelamentoImovelBigDecimal, inicioIntervaloParcelamentoFormatado,
				fimIntervaloParcelamentoFormatado, indicadoresParcelamentoHelper,valorCreditoARealizar);

		NegociacaoOpcoesParcelamentoHelper opcoesParcelamento = this.obterOpcoesDeParcelamento(helper);
	
		return opcoesParcelamento;
	}
	
	/**
	 * [UC1553] - Consultar Parcelamento de Débitos Webservice
	 * 
	 * @author Anderson Cabral
	 * @date 05/09/2013
	 * @param colecaoContaValores
	 * @param colecaoGuiaPagamento
	 * @param imovel
	 * @param parcelamentoDebitoHelper
	 * @param valorTotalAtualizacoesMonetarias
	 * @param valorTotalJurosMora
	 * @param valorTotalMultas
	 * @return parcelamentoDebitoHelper
	 */
	private ParcelamentoDebitoHelper obterOpcaoParcelamento(Collection<ContaValoresHelper> colecaoContaValores, 
			Collection<GuiaPagamentoValoresHelper> colecaoGuiaPagamento, Imovel imovel, ParcelamentoDebitoHelper parcelamentoDebitoHelper,
			BigDecimal valorTotalAtualizacoesMonetarias, BigDecimal valorTotalJurosMora, BigDecimal valorTotalMultas, BigDecimal valorEntradaInformado, boolean efetuarParcelamento) throws ControladorException{
		
		BigDecimal valorDebitoTotalAtualizado = Util.formatarMoedaRealparaBigDecimal(parcelamentoDebitoHelper.getDebitoTotal());
		Integer numeroReparcelamentoConsecutivos = (imovel.getNumeroReparcelamentoConsecutivos() == null) ? 0 :imovel.getNumeroReparcelamentoConsecutivos().intValue();		
		
		NegociacaoOpcoesParcelamentoHelper opcoesParcelamento = montaNegociacaoOpcoesParcelamentoHelper(colecaoContaValores, colecaoGuiaPagamento, imovel, 
				parcelamentoDebitoHelper, valorEntradaInformado, valorTotalAtualizacoesMonetarias, valorTotalJurosMora, valorTotalMultas);


		BigDecimal valorPagamentoAVista = new BigDecimal("0.00");
		ParcelamentoPerfil parcelamentoPerfil = opcoesParcelamento.getParcelamentoPerfil();
		BigDecimal valorTotalImpostosConta = new BigDecimal("0.00");
		BigDecimal descontoTotalPagamentoAVista = opcoesParcelamento.getValorTotalDescontoPagamentoAVista();
		BigDecimal valorEntradaMinima = opcoesParcelamento.getValorEntradaMinima();
		
		parcelamentoDebitoHelper.setValorMinimoEntrada(valorEntradaMinima.toString());
		
		Collection<OpcoesParcelamentoHelper> colecaoOpcoesParcelamento = opcoesParcelamento.getOpcoesParcelamento();
		
		if (valorEntradaInformado != null && valorEntradaInformado.compareTo(valorEntradaMinima.setScale(
				Parcelamento.CASAS_DECIMAIS, Parcelamento.TIPO_ARREDONDAMENTO)) == -1) {
			throw new ControladorException("atencao.valor.entrada.menor.entrada.minima", null, valorEntradaMinima.toString());
		}else{
			
			// Limpa os EP da Coleção de Contas
			if(colecaoContaValores != null && !colecaoContaValores.isEmpty()){
				Iterator<ContaValoresHelper> contaValores = colecaoContaValores.iterator();
				while(contaValores.hasNext()) {
					ContaValoresHelper contaValoresHelper = (ContaValoresHelper) contaValores.next();
					if (contaValoresHelper.getIndicadorContasDebito() != null && !contaValoresHelper.getIndicadorContasDebito().equals(new Integer("2"))){
						contaValoresHelper.setIndicadorContasDebito(null);
					}
				}
			}
			
			ArrayList<OpcaoParcelamentoAutoAtendimentoHelper> colecaoOpcoesParcelamentoAutoAtdHelper = null;
			
			// Limpando a opção de parcelamento
			if(!Util.isVazioOrNulo(colecaoOpcoesParcelamento)){
				colecaoOpcoesParcelamentoAutoAtdHelper = new ArrayList<OpcaoParcelamentoAutoAtendimentoHelper>();
				Iterator<OpcoesParcelamentoHelper> opcoesParcelamentoValores = colecaoOpcoesParcelamento.iterator();
				while(opcoesParcelamentoValores.hasNext()) {
					OpcaoParcelamentoAutoAtendimentoHelper opcoesParcelamentoAutoAtdHelper = new OpcaoParcelamentoAutoAtendimentoHelper();
					OpcoesParcelamentoHelper opcoesParcelamentoHelper = (OpcoesParcelamentoHelper) opcoesParcelamentoValores.next();
					opcoesParcelamentoHelper.setIndicadorQuantidadeParcelas(null);
					
					opcoesParcelamentoAutoAtdHelper.setNumeroParcela(opcoesParcelamentoHelper.getQuantidadePrestacao().toString());
					opcoesParcelamentoAutoAtdHelper.setTaxaJuros(opcoesParcelamentoHelper.getTaxaJuros().toString());
					opcoesParcelamentoAutoAtdHelper.setValorPrestacao(opcoesParcelamentoHelper.getValorPrestacao().toString());				
					colecaoOpcoesParcelamentoAutoAtdHelper.add(opcoesParcelamentoAutoAtdHelper);
				}
				parcelamentoDebitoHelper.setQuantidadeDeParcelasPermitidas(String.valueOf(colecaoOpcoesParcelamento.size()));
			}else{
				
				String mensagemErro =  "Não é permitido efetuar o parcelamento com o valor da entrada, tente pagar à vista ou vá a um dos postos de atendimento da Compesa.";
				parcelamentoDebitoHelper.setMensagemErro(mensagemErro);
				parcelamentoDebitoHelper.setParcelamentoPossivel("N");
				
				if(efetuarParcelamento){
					throw new ControladorException("atencao.parcelar.valor.entrada");
				}
			}
			
			parcelamentoDebitoHelper.setOpcoesParcelamento(colecaoOpcoesParcelamentoAutoAtdHelper);
			
			if (!this.verificarQtdeReparcelamentoPerfil(parcelamentoPerfil.getId(),new Short(numeroReparcelamentoConsecutivos.shortValue()))){
				throw new ControladorException("atencao.nao.existe.condicao.por.quantidade.reparcelamentos.perfil");
			}else{
				
				valorTotalImpostosConta = obterValorImpostosDasContasDoParcelamento(colecaoContaValores);
				
				valorPagamentoAVista.setScale(Parcelamento.CASAS_DECIMAIS, Parcelamento.TIPO_ARREDONDAMENTO);
				valorPagamentoAVista = valorDebitoTotalAtualizado.subtract(descontoTotalPagamentoAVista);
				
				valorPagamentoAVista = valorPagamentoAVista.subtract(valorTotalImpostosConta);
				
				//SETA DADOS NO HELPER
				parcelamentoDebitoHelper.setaVistaImpostos(Util.formatarMoedaReal(valorTotalImpostosConta));
				parcelamentoDebitoHelper.setaVistaDescontos(Util.formatarMoedaReal(descontoTotalPagamentoAVista));
				parcelamentoDebitoHelper.setaVistaPagamento(Util.formatarMoedaReal(valorPagamentoAVista));
			}
		}
		return parcelamentoDebitoHelper;
	}
	
	/**
	 * [UC1553] - Consultar Parcelamento de Débitos Webservice
	 * 
	 * @author Anderson Cabral
	 * @date 05/09/2013
	 * @param colecaoContas
	 * @return valorImpostosDasContasDoParcelamento
	 */
	private BigDecimal obterValorImpostosDasContasDoParcelamento(Collection<ContaValoresHelper> colecaoContas){
		BigDecimal valorTotalImpostos = BigDecimal.ZERO;
		if (colecaoContas != null && !colecaoContas.isEmpty()) {
			Iterator<ContaValoresHelper> contas = colecaoContas.iterator();
			while (contas.hasNext()) {
				ContaValoresHelper contaValoresHelper = (ContaValoresHelper) contas.next();

				if (contaValoresHelper.getConta().getValorImposto() != null) {
					valorTotalImpostos = valorTotalImpostos.add(contaValoresHelper.getConta().getValorImposto());
				}
			}
		}
		return valorTotalImpostos;
	}
	
	
	/**
	 * 
	 * [UC1441] Efetuar Parcelamento Judicial
	 * [FE0004] Verificar informações 4ª Aba
	 * 
	 * @author Hugo Azevedo
	 * @date 05/04/2013
	 */
	public void validarEfetuarParcelamentoJudicialConclusao(
			String indicadorPerdeDesconto, String indicadorValorCustas,
			String indicadorValorHonorarios,
			String indicadorParcelamentoComJuros,
			String indicadorInformarValorParcela,
			String indicadorEntradaParcelamento,
			String dataVencimentoEntrada,
			String valorEntrada,
			String dataVencimentoPrimeiraParcela,
			String qtdDiasEntreParcelas,
			String qtdParcelas,
			String taxaJuros,
			Collection<ParcelaJudicialHelper> listaParcelaJudicial) throws ControladorException{
		
		//1. Caso não tenha sido informado algum dos campos obrigatórios referentes a 3ª Aba
		//-----------------------------------------------------------------------------------
		
		//Perde Desconto na Parcela Paga em Atraso
		if(!Util.verificarNaoVazio(indicadorPerdeDesconto)){
			throw new ControladorException("atencao.campo_selecionado.obrigatorio",null,"Perde Desconto na Parcela Paga em Atraso");
		}
		
		//Valor das Custas serão parcelados
		if(!Util.verificarNaoVazio(indicadorValorCustas)){
			throw new ControladorException("atencao.campo_selecionado.obrigatorio",null,"Valor das Custas serão parcelados");
		}
		
		//Valor dos Honorários serão parcelados
		if(!Util.verificarNaoVazio(indicadorValorHonorarios)){
			throw new ControladorException("atencao.campo_selecionado.obrigatorio",null,"Valor dos Honorários serão parcelados");
		}
		
		//Parcelamento com Juros
		if(!Util.verificarNaoVazio(indicadorParcelamentoComJuros)){
			throw new ControladorException("atencao.campo_selecionado.obrigatorio",null,"Parcelamento com Juros");
		}
		
		//Permite Informar o Valor da Parcela
		if(!Util.verificarNaoVazio(indicadorInformarValorParcela)){
			throw new ControladorException("atencao.campo_selecionado.obrigatorio",null,"Permite Informar o Valor da Parcela");
		}
		
		//Data de Vencimento 1ª Parcela
		if(!Util.verificarNaoVazio(dataVencimentoPrimeiraParcela)){
			throw new ControladorException("atencao.campo_selecionado.obrigatorio",null,"Data de Vencimento 1ª Parcela");
		}
		
		//Quantidade de Parcelas
		if(!Util.verificarNaoVazio(qtdParcelas)){
			throw new ControladorException("atencao.campo_selecionado.obrigatorio",null,"Quantidade de Parcelas");
		}		
		//-----------------------------------------------------------------------------------
		
		//2. Caso não tenha sido informada a Lista de Parcelas
		if(listaParcelaJudicial == null || listaParcelaJudicial.size() == 0){
			throw new ControladorException("atencao.campo_selecionado.obrigatorio",null,"as parcelas que irão compor o parcelamento judicial");
		}
		
		//3. Caso a Quantidade de Parcelas possua valor igual a zero ("0")
		if(Util.converterStringParaInteger(qtdParcelas).intValue() == 0){
			throw new ControladorException("atencao.invalido.matricula",null,"Quantidade de Parcelas");
		}
		
		//4. Caso o Indicador Entrada Parcelamento possua valor igual a "Sim"
		if(indicadorEntradaParcelamento.compareTo(ConstantesSistema.SIM.toString()) == 0){
			
			//4. e a Data de Vencimento da EntraFE0018da não tenha sido informada
			if(!Util.verificarNaoVazio(dataVencimentoEntrada)){
				throw new ControladorException("atencao.campo_selecionado.obrigatorio",null,"a Data de Vencimento da Entrada");
			}
			
			//5. e o Valor da entrada não tenha sido informado ou possua valor igual a zero ("0,00")
			BigDecimal valorEntradaBigDecimal = Util.formatarMoedaRealparaBigDecimalComErro(valorEntrada);
			if(valorEntradaBigDecimal == null || valorEntradaBigDecimal.compareTo(new BigDecimal("0")) == 0){
				throw new ControladorException("atencao.campo_selecionado.obrigatorio",null,"o Valor da Entrada");
			}
			
			//[FE0018] Verificar Data informada
			//-----------------------------------------------------------------------------------------
				//1. Caso a data informada seja inválida
				if(!Util.verificaSeDataValida(dataVencimentoEntrada,"dd/MM/yyyy")){
					throw new ControladorException("atencao.date",null,"Data de Vencimento da Entrada");
				}
				
				//2. Caso a data informada seja menor do que a data atual
				if(Util.compararData(Util.converteStringParaDate(dataVencimentoEntrada), new Date()) < 0){
					throw new ControladorException("atencao.campo_menor_data_atual",null,"Data de Vencimento da Entrada");
				}
			//-----------------------------------------------------------------------------------------
		}
		
		//[FE0009] Verificar Percentual dos Juros
		if(indicadorParcelamentoComJuros.compareTo(ConstantesSistema.SIM.toString()) == 0){
			
			BigDecimal percentualJuros = Util.formatarMoedaRealparaBigDecimalComErro(taxaJuros);
			
			//1. Caso o Indicador Parcelamento com Juros possua valor igual a "Sim" 
			//   e Percentual de Juros não tenha sido informado ou possua valor igual a zero ("0,00")
			if(percentualJuros == null || percentualJuros.compareTo(new BigDecimal("0")) == 0){	
				//1. o sistema deverá exibir a mensagem "Informe o Percentual de Juros."
				throw new ActionServletException("atencao.campo_selecionado.obrigatorio",null,"o Percentual de Juros");
			}
			
			//[FE0009] Verificar Percentual dos Juros.
			//-------------------------------------------------------------------------------------------------------
			//1. Caso o Percentual dos Juros informado seja maior do que "100%"
			if(percentualJuros.compareTo(new BigDecimal("100")) > 0){
				throw new ActionServletException("atencao.elemento_invalido",null,"Percentual de Juros");
			}
			//-------------------------------------------------------------------------------------------------------
			
		}
	}
	
	/**
	 * [UC1461] Emitir Resumo do Parcelamento Judicial
	 * 
	 * IT0001 - Obter Dados do Parcelamento Judicial
	 * 
	 * @author Maxwell Moreira
	 * @throws ErroRepositorioException
	 * @date 12/04/2013
	 */
	public Collection obterParcelamentoJudicial(String idParcelamentoJudicial) throws ControladorException{
		
		try{	
		
			Collection retorno = new ArrayList();
			Collection colecaoParcelamentoJudicial = this.repositorioCobranca.obterParcelamentoJudicial(idParcelamentoJudicial);
			Iterator iterator = colecaoParcelamentoJudicial.iterator();
			
			while(iterator.hasNext()){
				
				RelatorioEmitirResumoParcelamentoJudicialHelper helper = new RelatorioEmitirResumoParcelamentoJudicialHelper(); 
				Object[] objeto = (Object[]) iterator.next();
				
				if(objeto[0] != null){	
					helper.setNumeroProcessoJudicial((String) objeto[0].toString());
				} else {
					helper.setNumeroProcessoJudicial("");
				}
				
				if(objeto[1] != null){	
					helper.setImovelPrincipal((String) objeto[1].toString());
				} else {
					helper.setImovelPrincipal("");
				}
				
				if(objeto[2] != null){	
					helper.setClienteResponsavel((String) objeto[2].toString());
				} else {
					helper.setClienteResponsavel("");
				}
			
				if(objeto[3] != null){	
					helper.setFuncionario((String) objeto[3].toString());
				} else {
					helper.setFuncionario("");
				}
				
				if(objeto[4] != null){	
					helper.setAdvogadoResponsavel((String) objeto[4].toString());
				} else {
					helper.setAdvogadoResponsavel("");
				}
				
				if(objeto[5] != null){	
					helper.setNumeroOAB((String) objeto[5].toString());
				} else {
					helper.setNumeroOAB("");
				}
				
				if(objeto[6] != null){	
					helper.setSituacao((String) objeto[6].toString());
				} else {
					helper.setSituacao("");
				}
				
				if(objeto[7] != null){	
					helper.setDataParcelamento((String) objeto[7].toString());
				} else {
					helper.setDataParcelamento("");
				}
				
				if(objeto[8] != null){	
					helper.setValorDebito((String) objeto[8].toString());
				} else {
					helper.setValorDebito("");
				}
				
				if(objeto[9] != null){	
					helper.setValorAcordo((String) objeto[9].toString());
				} else {
					helper.setValorAcordo("");
				}
				
				if(objeto[10] != null){	
					helper.setValorEntrada((String) objeto[10].toString());
				} else {
					helper.setValorEntrada("");
				}
				
				if(objeto[11] != null){	
					helper.setValorCustas((String) objeto[11].toString());
				} else {
					helper.setValorCustas("");
				}
				
				if(objeto[12] != null){	
					helper.setValorHonorarios((String) objeto[12].toString());
				} else {
					helper.setValorHonorarios("");
				}
				
				if(objeto[13] != null){	
					helper.setValorParcelado((String) objeto[13].toString());
				} else {
					helper.setValorParcelado("");
				}
				
				if(objeto[14] != null){	
					helper.setPercentualDesconto((String) objeto[14].toString());
				} else {
					helper.setPercentualDesconto("");
				}
				
				if(objeto[15] != null){	
					helper.setPercentualCustas((String) objeto[15].toString());
				} else {
					helper.setPercentualCustas("");
				}
				
				if(objeto[16] != null){	
					helper.setPercentualHonorarios((String) objeto[16].toString());
				} else {
					helper.setPercentualHonorarios("");
				}
				
				if(objeto[17] != null){	
					helper.setTaxaJuros((String) objeto[17].toString());
				} else {
					helper.setTaxaJuros("");
				}
				
				if(objeto[18] != null){	
					helper.setQuantidadeParcelas((String) objeto[18].toString());
				} else {
					helper.setQuantidadeParcelas("");
				}
				
				if(objeto[19] != null){	
					helper.setIndicadorDesconto((String) objeto[19].toString());
				} else {
					helper.setIndicadorDesconto("");
				}
				
				if(objeto[20] != null){	
					helper.setIndicadorCustas((String) objeto[20].toString());
				} else {
					helper.setIndicadorCustas("");
				}
				
				if(objeto[21] != null){	
					helper.setIndicadorHonorarios((String) objeto[21].toString());
				} else {
					helper.setIndicadorHonorarios("");
				}
				
				if(objeto[22] != null){	
					helper.setIndicadorJuros((String) objeto[22].toString());
				} else {
					helper.setIndicadorJuros("");
				}
				
				if(objeto[23] != null){	
					helper.setIndicadorInformarValorParcela((String) objeto[23].toString());
				} else {
					helper.setIndicadorInformarValorParcela("");
				}
				
				if(objeto[24] != null){	
					helper.setIndicadorEntrada((String) objeto[24].toString());
				} else {
					helper.setIndicadorEntrada("");
				}
				
				retorno.add(helper);
			
			}
			
			return retorno;	
			
		} catch (ErroRepositorioException erx) {
			erx.printStackTrace();
			throw new ControladorException("erro.sistema", erx);
		}
	}
	
	/**
	 * [UC1461] Emitir Resumo do Parcelamento Judicial
	 * 
	 * IT0002 - Obter Lista de Contas Parceladas
	 * 
	 * @author Maxwell Moreira
	 * @throws ErroRepositorioException
	 * @date 16/04/2013
	 */
	public Collection obterListaDeContasParceladas(String idParcelamentoJudicial) throws ControladorException{
		
		try{	
			
			Collection retorno = new ArrayList();
			Collection colecaoParcelamentoJudicial = this.repositorioCobranca.obterListaDeContasParceladas(idParcelamentoJudicial);
			Iterator iterator = colecaoParcelamentoJudicial.iterator();
			
			while(iterator.hasNext()){
					
				RelatorioListaContasParceladasHelper helper = new RelatorioListaContasParceladasHelper(); 
				Object[] objeto = (Object[]) iterator.next();
				
				if(objeto[0] != null){	
					helper.setImovel((String) objeto[0].toString());
				} else {
					helper.setImovel("");
				}
				
				if(objeto[1] != null){	
					helper.setAnoMesConta((String) objeto[1].toString());
				} else {
					helper.setAnoMesConta("");
				}
				
				if(objeto[2] != null){	
					helper.setDataVencimentoConta((String) objeto[2].toString());
				} else {
					helper.setDataVencimentoConta("");
				}
				
				if(objeto[3] != null){	
					helper.setValorConta((String) objeto[3].toString());
				} else {
					helper.setValorConta("");
				}
				
				if(objeto[4] != null){	
					helper.setAcrescimoImpontualidade((String) objeto[4].toString());
				} else {
					helper.setAcrescimoImpontualidade("");
				}
				
				retorno.add(helper);

			}
			
			return retorno;
			
		} catch (ErroRepositorioException erx) {
			erx.printStackTrace();
			throw new ControladorException("erro.sistema", erx);
		}
	}	
	
	/**
	 * 
	 * [UC1463] Cancelar Parcelamento Judicial
	 * [FE0001] Verificar situação do parcelamento judicial
	 * 
	 * @author Hugo Azevedo
	 * @date 16/03/2013
	 */
	public void verificarSituacaoParcelamentoJudicial(ParcelamentoJudicial parcelamentoJudicial) throws ControladorException{
		try{
			
			//1. Caso o parcelamento judicial esteja concluído
			if(parcelamentoJudicial.getParcelamentoSituacao().getId().compareTo(ParcelamentoSituacao.CONCLUIDO) == 0){
				throw new ControladorException("atencao.parc_judicial_concluido");
			}
			
			//2. Caso o parcelamento judicial esteja encerrado
			if(parcelamentoJudicial.getParcelamentoSituacao().getId().compareTo(ParcelamentoSituacao.CANCELADO) == 0){
				throw new ControladorException("atencao.parc_judicial_cancelado");
			}
			
			//3. Caso exista pagamento para o parcelamento judicial
			Collection<Pagamento> pagamentoJud = this.repositorioarrecadacao.obterPagamentoParcelamentoJudicial(parcelamentoJudicial.getId());
			Collection<PagamentoHistorico> pagamentoJudHist = this.repositorioarrecadacao.obterPagamentoHistoricoParcelamentoJudicial(parcelamentoJudicial.getId());
			if((pagamentoJud != null && pagamentoJud.size() > 0) || 
					(pagamentoJudHist != null && pagamentoJudHist.size() > 0)){
				throw new ControladorException("atencao.parc_judicial_possui_pgmt");
			}
		}
		catch(ErroRepositorioException ex){
			ex.printStackTrace();
			throw new ControladorException("erro.sistema", ex);
		}
	}
	
	/**
	 * 
	 * [UC1463] Cancelar Parcelamento Judicial
	 * [IT0003] Cancelar Parcelamento Judicial
	 * 
	 * @author Hugo Azevedo
	 * @date 17/04/2013
	 */
	public void cancelarParcelamentoJudicial(Integer idParcelamentoJudicial, Integer idMotivo, Usuario usuario) throws ControladorException{
		try{
			
			Collection<ParcelamentoJudicialItem> contasParceladas = this.repositorioFaturamento.obterContasParcelamentoJudicial(idParcelamentoJudicial);			
			Iterator<ParcelamentoJudicialItem> it = contasParceladas.iterator();
			
			//1. O sistema atualiza os registros de cada conta parcelada com CNTA_ID = CNTA_ID da tabela 
			//   COBRANCA.PARCEL_JUDICIAL_ITEM com PJUD_ID = Identificador do parcelamento recebido
			while(it.hasNext()){
				Conta cnta = it.next().getContaGeral().getConta();
				
				//DCST_IDATUAL
				if(cnta.getDebitoCreditoSituacaoAnterior() == null){
					DebitoCreditoSituacao novaSit = new DebitoCreditoSituacao();
					novaSit.setId(DebitoCreditoSituacao.NORMAL);
					cnta.setDebitoCreditoSituacaoAtual(novaSit);
				}
				else{
					cnta.setDebitoCreditoSituacaoAtual(cnta.getDebitoCreditoSituacaoAnterior());
				}
				
				//DCST_IDANTERIOR
				cnta.setDebitoCreditoSituacaoAnterior(null);
				
				//CNTA_AMREFERENCIACONTABIL
				Conta contaCanceladaRet = this.repositorioFaturamento.pesquisarContaCanceladaRetificacao(cnta.getImovel().getId(),cnta.getReferencia());
				if(contaCanceladaRet != null){
					cnta.setReferenciaContabil(contaCanceladaRet.getReferenciaContabil());
				}
				else{
					cnta.setReferenciaContabil(cnta.getReferencia());
				}
				
				//CNTA_TMULTIMAALTERACAO
				cnta.setUltimaAlteracao(new Date());
				
				this.getControladorUtil().atualizar(cnta);
				
			}
			
			//1. O sistema remove os registros da tabela CADASTRO.CLIENTE_GUIA_PAGAMENTO
			this.repositorioarrecadacao.removerClienteGuiaPagamentoParcelamentoJudicial(idParcelamentoJudicial);
			
			//2. O sistema remove os registros da tabela FATURAMENTO.GUIA_PAGAMENTO_CATEGORIA
			this.repositorioarrecadacao.removerGuiaPagamentoCategoriaParcelamentoJudicial(idParcelamentoJudicial);
			
			//3. O sistema remove os registros da tabela FATURAMENTO.GUIA_PAGAMENTO_ITEM_CATG
			this.repositorioarrecadacao.removerGuiaPagamentoItemCategoriaParcelamentoJudicial(idParcelamentoJudicial);
			
			//4. O sistema remove os registros da tabela FATURAMENTO.GUIA_PAGAMENTO_ITEM
			this.repositorioarrecadacao.removerGuiaPagamentoItemParcelamentoJudicial(idParcelamentoJudicial);
			
			//5. O sistema seleciona as guias de pagamento a serem removidas e para cada registro encontrado
			Collection<GuiaPagamentoGeral> colecaoGuiaPagamento =  this.repositorioarrecadacao.pesquisarGuiaPagamentoParcelamentoJudicial(idParcelamentoJudicial);
			Iterator<GuiaPagamentoGeral> it2 = colecaoGuiaPagamento.iterator();
			while(it2.hasNext()){
				GuiaPagamentoGeral guiaGeral = it2.next();
				
				//5.1. O sistema remove os registros da tabela FATURAMENTO.GUIA_PAGAMENTO
				this.repositorioUtil.remover(guiaGeral.getGuiaPagamento());
				
				//5.2. O sistema remove os registros da tabela FATURAMENTO.GUIA_PAGAMENTO_GERAL
				this.repositorioUtil.remover(guiaGeral);
			}
			
			//6. O sistema atualiza o parcelamento na tabela COBRANCA.PARCELAMENTO_JUDICIAL
			ParcelamentoJudicialImovel parcelamentoJudImov = this.repositorioCobranca.obterParcelamentoJudicialImovel(idParcelamentoJudicial);
			ParcelamentoJudicial parcJud = parcelamentoJudImov.getParcelamentoJudicial();
			
			//PCST_ID
			ParcelamentoSituacao parcSit = new ParcelamentoSituacao();
			parcSit.setId(ParcelamentoSituacao.CANCELADO);
			parcJud.setParcelamentoSituacao(parcSit);
			
			//PMDZ_ID
			ParcelamentoMotivoDesfazer motivoDesfazer = new ParcelamentoMotivoDesfazer();
			motivoDesfazer.setId(idMotivo);
			parcJud.setMotivoDesfazer(motivoDesfazer);
			
			//USUR_IDCANCELAMENTO
			parcJud.setUsuarioCancelamento(usuario);
			
			//PJUD_TMCANCELAMENTO
			parcJud.setDataCancelamento(new Date());
			
			//PJUD_TMULTIMAALTERACAO
			parcJud.setUltimaAlteracao(new Date());
			
			this.getControladorUtil().atualizar(parcJud);	
			
		}
		catch(ErroRepositorioException ex){
			ex.printStackTrace();
			throw new ControladorException("erro.sistema", ex);
		}
	}
	
	/**
	 * 
	 * [UC1441] Efetuar Parcelamento Judicial
	 * [FE0001] Verificar informações 1ª Aba
	 * 
	 * @author Hugo Azevedo
	 * @date 20/03/2013
	 */
	public void validarEfetuarParcelamentoJudicialImovel(
			Collection<RegistroImovelHelper> listaImoveis,
			String idRegistroPrincipal, String periodoInicial,
			String periodoFinal, boolean debitosImoveisInformados) throws ControladorException{
			
		//1. Caso o não tenha sido informado nenhum imóvel na Lista de Imóveis
		if(listaImoveis == null || listaImoveis.size() == 0){
			
			//1. o sistema deverá exibir a mensagem "Informe pelo menos um imóvel." 
			//   e retornar para o passo correspondente do fluxo principal
			throw new ControladorException("atencao.filtro.nenhum_imovel_informado");
		}
		
		//2. Caso o Radio Button de Imóvel Principal na Lista de Imóveis não tenha sido selecionado
		if(idRegistroPrincipal == null || idRegistroPrincipal.equals("")){
			
			//2. o sistema deverá exibir a mensagem "Selecione o imóvel principal." 
			//   e retornar para o passo correspondente do fluxo principal
			throw new ControladorException("atencao.selecione_imovel_principal");
		}
		
		//3. Caso o Período Final tenha sido informado e o Período Inicial não tenha sido informado
		if(periodoFinal != null && !periodoFinal.equals("") && 
				(periodoInicial == null || periodoInicial.equals(""))){
					
			//3. o sistema deverá exibir a mensagem "Informe o Período Inicial de Referência do Débito." 
			//   e retornar para o passo correspondente do fluxo principal
			throw new ControladorException("atencao.informe_periodo_inicial_ref");
		}
		
		//4. Caso o Período Inicial tenha sido informado e o Período Final não tenha sido informado
		if(periodoInicial != null && !periodoInicial.equals("") && 
				(periodoFinal == null || periodoFinal.equals(""))){
			
			//4. o sistema deverá exibir a mensagem "Informe o Período Final de Referência do Débito." 
			//   e retornar para o passo correspondente do fluxo principal
			throw new ControladorException("atencao.informe_periodo_final_ref");
		}
		
		if(periodoInicial != null && !periodoInicial.equals("") 
				&& periodoFinal != null && !periodoFinal.equals("")){
		
			//5. Caso o Período de Referência do Débito tenha sido informado 
			//   e o Período Inicial for inválido (não seguir o formato "MM/AAAA")
			if(!Util.validarMesReferenciaComBarra(periodoInicial)){
				
				//5. o sistema deverá exibir a mensagem "Período Inicial Inválido."
				//   e retornar para o passo correspondente do fluxo principal
				throw new ControladorException("atencao.periodo_inicial_invalido");
			}
			
			//6. Caso o Período de Referência do Débito tenha sido informado 
			//   e o Período Final for inválido (não seguir o formato "MM/AAAA")
			if(!Util.validarMesReferenciaComBarra(periodoFinal)){
				
				//6. o sistema deverá exibir a mensagem "Período Final Inválido." 
				//   e retornar para o passo correspondente do fluxo principal
				throw new ControladorException("atencao.periodo_final_invalido");
			}
			
			Integer periodoInicialInt = Util.formatarMesAnoComBarraParaAnoMes(periodoInicial);
			Integer periodoFinalInt = Util.formatarMesAnoComBarraParaAnoMes(periodoFinal);
			
			//7. Caso o Período de Referência do Débito tenha sido informado 
			//   e o Período Final for menor do que o Período Inicial
			if(periodoFinalInt.intValue() < periodoInicialInt.intValue()){
				
				//7. o sistema deverá exibir a mensagem "Período Final deve ser maior ou igual ao Período Inicial." 
				//   e retornar para o passo correspondente do fluxo principal 
				throw new ControladorException("atencao.periodo_final_menor_inicial");
			}
			
			//8. O sistema deverá verificar se existem débitos para o período informado
			//[FE0019] Verificar Débitos dos Imóveis Informados
			if(!debitosImoveisInformados){
				throw new ControladorException("atencao.nao_existe_deb_periodo");
			}
		}
	}
	
	/**
	 * 
	 * [UC1441] Efetuar Parcelamento Judicial
	 * [FE0002] Verificar informações 2ª Aba
	 * 
	 * @author Hugo Azevedo
	 * @date 21/03/2013
	 */
	public void validarEfetuarParcelamentoJudicialDebitos(String[] idsContasSelecionadas,
														  RegistroImovelHelper registroImovelHelper) throws ControladorException{
		
		boolean achou = false;
		if(idsContasSelecionadas != null && registroImovelHelper != null){
			for (String s : idsContasSelecionadas){
			    for(Iterator<ContaValoresHelper> it = registroImovelHelper.getColecaoContaValoresHelper().iterator();it.hasNext();){
			    	ContaValoresHelper helper = it.next();	    	
			    	if(helper.getConta().getId().toString().equals(s)){		    	
				        achou = true;
				        break;
			    	}
			    }
			}
		}
		
		//1. Caso não tenha sido selecionada nenhuma conta na Lista de Débitos
		//   associada ao Imóvel Principal informado na 1ª Aba
		if(!achou){
			//1. o sistema deverá exibir a mensagem "Selecione pelo menos uma conta." 
			//   e retornar para o passo correspondente do fluxo principal
			throw new ControladorException("atencao.selecione_conta_ref_imovel_principal");
		}
	}
	
	/**
	 * 
	 * [UC1441] Efetuar Parcelamento Judicial
	 * [FE0003] Verificar informações 3ª Aba
	 * 
	 * @author Hugo Azevedo
	 * @date 25/03/2013
	 */
	public void validarEfetuarParcelamentoJudicialNegociacao(String valorDebito,
			String valorAcordo, String percentualDesconto, String valorCustas,
			String percentualCustas, String valorHonorarios,
			String percentualHonorarios, String numeroProcesspJudicial,
			String idClienteresponsavel, 
			String advogado, String numeroOAB, byte[] conteudoArquivo,
			String nomeArquivo) throws ControladorException{
		
		
		BigDecimal valorAcordoBigDecimal = Util.formatarMoedaRealparaBigDecimal(valorAcordo);
		BigDecimal valorDebitoBigDecimal = Util.formatarMoedaRealparaBigDecimal(valorDebito);
		
		//[FE0016] Verificar Valor do Acordo
		//------------------------------------------------------------------
		//1. Caso o Valor do Acordo informado seja maior do que o Valor do Débito
		if(valorAcordoBigDecimal.compareTo(valorDebitoBigDecimal) > 0){
			//1. o sistema deverá exibir a mensagem 
			//   "Valor do Acordo deve ser menor ou igual que o Valor do Débito selecionado."
			throw new ControladorException("atencao.valor_acordo_maior_valor_debito");
		}
		
		//Caso o valor do acordo informado seja igual a zero
		if(valorAcordoBigDecimal.compareTo(new BigDecimal("0")) == 0){
			throw new ControladorException("atencao.valor_acordo_maior_0");
		}
		//------------------------------------------------------------------
		//Validando Custas e Honorários
		if(!Util.verificarNaoVazio(valorCustas))
			throw new ControladorException("atencao.campo_selecionado.obrigatorio",null,"Valor das Custas");
		if(!Util.verificarNaoVazio(percentualCustas))
			throw new ControladorException("atencao.campo_selecionado.obrigatorio",null,"Percentual das Custas");
		if(!Util.verificarNaoVazio(valorHonorarios))
			throw new ControladorException("atencao.campo_selecionado.obrigatorio",null,"Valor dos Honorários");
		if(!Util.verificarNaoVazio(percentualCustas))
			throw new ControladorException("atencao.campo_selecionado.obrigatorio",null,"Percentual dos Honorários");
		
		//Campos obrigatórios
		if(!Util.verificarNaoVazio(advogado)){
			throw new ControladorException("atencao.campo_selecionado.obrigatorio",null,"Advogado Responsável");
		}
		if(!Util.verificarNaoVazio(numeroOAB)){
			throw new ControladorException("atencao.campo_selecionado.obrigatorio",null,"Número da OAB");
		}
		
		//1. O sistema deverá verificar as informações de Custas e Honorários
		//[FE0005] Verificar Valor das Custas
		//1. Caso o Valor das Custas informado seja maior do que o Valor do Acordo
		if(Util.formatarMoedaRealparaBigDecimal(valorCustas).compareTo(Util.formatarMoedaRealparaBigDecimal(valorAcordo)) > 0){
			
			//1. o sistema deverá exibir a mensagem "Valor das Custas deve ser menor ou igual que o Valor do Acordo."
			throw new ControladorException("atencao.valor_custas_menor_igual_acordo");
		}
		
		//[FE0006] Verificar Valor dos Honorários
		//1. Caso o Valor dos Honorários informado seja maior do que o Valor do Acordo
		if(Util.formatarMoedaRealparaBigDecimal(valorHonorarios).compareTo(Util.formatarMoedaRealparaBigDecimal(valorAcordo)) > 0){
			
			//1. o sistema deverá exibir a mensagem "Valor dos Honorários deve ser menor ou igual que o Valor do Acordo."
			throw new ControladorException("atencao.valor_honorarios_menor_igual_acordo");
		}
		
		//[FE0007] Verificar Percentual das Custas
		//1. Caso o Percentual das Custas informado seja maior do que "100%"
		if(Util.formatarMoedaRealparaBigDecimal(percentualCustas).compareTo(new BigDecimal("100")) > 0){
			
			//o sistema deverá exibir a mensagem "Percentual das Custas inválido."
			throw new ControladorException("atencao.elemento_invalido",null,"Percentual das Custas");
			
		}
		
		//[FE0008] Verificar Percentual dos Honorários
		//1. Caso o Percentual dos Honorários informado seja maior do que "100%"
		if(Util.formatarMoedaRealparaBigDecimal(percentualHonorarios).compareTo(new BigDecimal("100")) > 0){
			
			//o sistema deverá exibir a mensagem "Percentual dos Honorários inválido."
			throw new ControladorException("atencao.elemento_invalido",null,"Percentual dos Honorários");
		}
		
		//2. O sistema deverá verificar o arquivo informado
		//[FE0010] Validar Arquivo
		//1. Caso não exista o arquivo informado
	
			//Caso o arquivo tenha sido informado
			if(nomeArquivo != null && !nomeArquivo.equals("")){
				if(conteudoArquivo.length == 0){
					
					//1. o sistema deverá exibir a mensagem "Arquivo <<nome do arquivo>> não existe."
					throw new ControladorException("atencao.arquivo.nao_existe",null,nomeArquivo);
					
				}
				
				//2. Caso a extensão do arquivo não corresponda a ".pdf"
				String[] nomeArquivoPartido = nomeArquivo.split("\\.");
				String extensao  = nomeArquivoPartido[1];
				if (!extensao.equalsIgnoreCase("PDF")){
					
					//2. o sistema deverá exibir a mensagem "Formato do arquivo <<nome do arquivo>>  inválido."
					throw new ControladorException("atencao.formato_arquivo_invalido",null,nomeArquivo);
				}
			}
				
		
		//3. Caso não tenha sido informado algum dos campos obrigatórios referentes a 3ª Aba
		//   o sistema deverá exibir a mensagem "Informe <<nome do campo obrigatório que não foi informado>>"
			
		//Número do Processo judicial
		if(!Util.verificarNaoVazio(numeroProcesspJudicial))
			throw new ControladorException("atencao.campo_selecionado.obrigatorio",null,"Número do Processo Judicial");
		
		//[FE0015] Verificar Número do Processo Judicial
		this.validarNumeroProcessoJudicial(numeroProcesspJudicial);
		
		//Cliente responsável
		if(idClienteresponsavel != null && !idClienteresponsavel.equals("")){
			Cliente cliente = this.obterCliente(idClienteresponsavel);
			if(cliente == null){
				throw new ControladorException("atencao.pesquisa_inexistente",null,"Cliente Responsável");
			}
		}
		else{
			throw new ControladorException("atencao.campo_selecionado.obrigatorio",null,"Cliente Responsável");
		}
		
		//4. Caso o número do processo judicial já esteja associado a um parcelamento válido
		try {
			if(this.repositorioCobranca.pesquisarParcelamentoJudicialPorNumeroProcesso(numeroProcesspJudicial) != null){
				throw new ControladorException("atencao.num_proc_judicial_informado");
			}
		} catch (ErroRepositorioException e) {
			e.printStackTrace();
			throw new ControladorException("erro.sistema", e);
		}
		
	}
	
	/**
	 * 
	 * [UC1441] Efetuar Parcelamento Judicial
	 * [SB0031] Incluir Parcelamento Judicial
	 * 
	 * @author Hugo Azevedo
	 * @date 02/04/2013
	 */
	public Integer incluirParcelamentoJudicial(
			Integer clienteResponsavel,
			String advogado,
			Integer clienteUsuario, Integer amRefFaturamento,
			String numeroProcessoJudicial, String numeroOAB,
			String observacao, byte[] arquivo, Short indicadorValorCustas,
			Short indicadorValorHonorarios, Short indicadorInformarValorParcela,
			Short indicadorParcelamentoComJuros, Short indicadorPerdeDesconto,
			Short indicadorEntradaParcelamento,
			Integer numeroDiasEntreParcelas,
			Integer numeroParcelas,
			BigDecimal taxaJuros,
			BigDecimal percentualCustas,
			BigDecimal percentualHonorarios,
			BigDecimal percentualDescontos, BigDecimal valorConta,
			BigDecimal valorAcrescimoImp,
			BigDecimal valorAcordo,
			BigDecimal valorCustas,
			BigDecimal valorHonorarios,
			BigDecimal valorParcelado,
			BigDecimal valorEntrada,
			Usuario usuarioLogado) throws ControladorException{
		
		//1. O sistema deverá incluir o parcelamento judicial
		ParcelamentoJudicial parcelamentoJudicial = new ParcelamentoJudicial();
		
		//Cliente Responsável informado na 3ª aba
		Cliente cliResponsavel = new Cliente();
		cliResponsavel.setId(clienteResponsavel);
		parcelamentoJudicial.setClienteResponsavel(cliResponsavel);
		

		//Advogado Responsável
		parcelamentoJudicial.setNomeAdvogado(advogado);
	
		//Caso tenha sido informado o Cliente Usuário na 1ª aba, 
		//preencher com o Cliente Usuário informado
		if(clienteUsuario != null){
			Cliente cliUsuario = new Cliente();
			cliUsuario.setId(clienteUsuario);
			parcelamentoJudicial.setClienteUsuario(cliUsuario);
		}
		
		//Código do usuário logado no sistema
		parcelamentoJudicial.setUsuarioResponsavel(usuarioLogado);
		
		parcelamentoJudicial.setUsuarioCancelamento(null);
		
		//Parcelamento Situação NORMAL
		ParcelamentoSituacao parcSit = new ParcelamentoSituacao();
		parcSit.setId(ParcelamentoSituacao.NORMAL);
		parcelamentoJudicial.setParcelamentoSituacao(parcSit);
		
		//Parcelamento Tipo POR IMOVEL
		ParcelamentoTipo porImovel = new ParcelamentoTipo();
		porImovel.setId(ParcelamentoTipo.POR_IMOVEL);
		parcelamentoJudicial.setParcelamentoTipo(porImovel);
		
		//Motivo Desfazer
		parcelamentoJudicial.setMotivoDesfazer(null);
		
		//Ano/Mês Referência
		parcelamentoJudicial.setAnoMesReferenciafaturamento(amRefFaturamento);
		
		//Data Parcelamento
		parcelamentoJudicial.setDataParcelamento(new Date());
		
		//Data Cancelamento
		parcelamentoJudicial.setDataCancelamento(null);
		
		//Número do Processo Judicial
		parcelamentoJudicial.setNumeroProcesso(numeroProcessoJudicial);
		
		//Número da OAB
		parcelamentoJudicial.setNumeroOAB(numeroOAB);
		
		//Observação
		if(Util.verificarNaoVazio(observacao))
			parcelamentoJudicial.setObservacao(observacao);
		
		//Arquivo
		if(arquivo != null && arquivo.length > 0)
			parcelamentoJudicial.setArquivoPDF(arquivo);
		
		//IC Valor Custas
		parcelamentoJudicial.setIndicadorValorCusta(indicadorValorCustas);
		
		//IC Valor honorário
		parcelamentoJudicial.setIndicadorValorHonorario(indicadorValorHonorarios);
		
		//IC informar valor parc
		parcelamentoJudicial.setIndicadorValorInformaValorParc(indicadorInformarValorParcela);
		
		//IC parcelamento com juros
		parcelamentoJudicial.setIndicadorParcelamentoComJuros(indicadorParcelamentoComJuros);
		
		//IC Perde Desconto
		parcelamentoJudicial.setIndicadorPerderDesconto(indicadorPerdeDesconto);
		
		//IC Entrada Parcelamento
		parcelamentoJudicial.setIndicadorParcelamentoEntrada(indicadorEntradaParcelamento);
		
		//Quantidade de Dias entre Parcelas
		parcelamentoJudicial.setNumeroDiasVencimentoParcelas(numeroDiasEntreParcelas);
		
		//Quantidade de Parcelas 
		parcelamentoJudicial.setNumeroPrestacoes(numeroParcelas);
		
		//Taxa de juros
		if(taxaJuros != null)
			parcelamentoJudicial.setTaxaJuros(taxaJuros);
		
		//Percentual de Custas
		parcelamentoJudicial.setPercentualCustas(percentualCustas);
		
		//Percentual de Honorários
		parcelamentoJudicial.setPercentualHonorario(percentualHonorarios);
		
		//Percentual de desconto
		if(percentualDescontos != null)
			parcelamentoJudicial.setPercentualDesconto(percentualDescontos);
			
		//Valor Conta
		parcelamentoJudicial.setValorConta(valorConta);
		
		//Valor dos Acréscimos por Impontualidade
		parcelamentoJudicial.setValorAcrescimos(valorAcrescimoImp);
		
		//Valor do Acordo
		parcelamentoJudicial.setValorAcordo(valorAcordo);
		
		//Valor das Custas
		parcelamentoJudicial.setValorCustas(valorCustas);
		//Valor dos Honorários
		parcelamentoJudicial.setValorHonorario(valorHonorarios);
		//Valor Parcelado
		parcelamentoJudicial.setValorParcelado(valorParcelado);
		//Valor Entrada
		parcelamentoJudicial.setValorEntrada(valorEntrada);
		//Data e hora correntes
		parcelamentoJudicial.setUltimaAlteracao(new Date());
		
		return (Integer) this.getControladorUtil().inserir(parcelamentoJudicial);
	}
	
	/**
	 * 
	 * [UC1441] Efetuar Parcelamento Judicial
	 * [SB0035] Atualizar Imóveis do Parcelamento
	 * 
	 * @author Hugo Azevedo
	 * @date 02/04/2013
	 */
	public void atualizarImoveisParcelamento(
			Collection<RegistroImovelHelper> listaRegistroImovelHelper,
			Integer idParcelamentoInserido, String idRegistroPrincipal)  throws ControladorException{
		
		//1. Para cada imóvel informado na Lista de Imóveis na 1ª aba, o sistema deverá 
		//   incluir um novo registro na tabela COBRANCA.PARCEL_JUDICIAL_IMOV
		for(Iterator<RegistroImovelHelper> it = listaRegistroImovelHelper.iterator();it.hasNext();){
			RegistroImovelHelper helper = it.next();
			
			ParcelamentoJudicialImovel pji = new ParcelamentoJudicialImovel();
			
			ParcelamentoJudicial pj = new ParcelamentoJudicial();
			pj.setId(idParcelamentoInserido);
			pji.setParcelamentoJudicial(pj);
			
			pji.setImovel(helper.getImovel());
			
			if(helper.getIdColecao().equals(idRegistroPrincipal.toString())){
				pji.setIndicadorImovelPrincipal(ConstantesSistema.SIM);
			}
			else{
				pji.setIndicadorImovelPrincipal(ConstantesSistema.NAO);
			}
			
			pji.setUltimaAlteracao(new Date());
			
			this.getControladorUtil().inserir(pji);			
		}
	}
	
	
	/**
	 * 
	 * [UC1441] Efetuar Parcelamento Judicial
	 * [SB0036] Atualizar Contas Parceladas
	 * 
	 * @author Hugo Azevedo
	 * @date 02/04/2013
	 */
	public void atualizarContasParceladas(
			Collection<ContaParcelamentoJudicialHelper> contasSelecionadas,
			Integer idParcelamentoInserido, Integer amRefFaturamento,
			BigDecimal valorConta, BigDecimal valorAcrescimo) throws ControladorException{
		
		Date dataAtual = new Date();
		
		//1. Para cada conta selecionada na Lista dos Débitos na 2ª aba, o sistema deverá
		for(Iterator<ContaParcelamentoJudicialHelper> it = contasSelecionadas.iterator();it.hasNext();){
			ContaParcelamentoJudicialHelper helper = it.next();
			
			//1.1. Incluir um novo registro na tabela COBRANCA.PARCEL_JUDICIAL_ITEM
			//--------------------------------------------------------------------
			ParcelamentoJudicialItem pji = new ParcelamentoJudicialItem();
			
			ParcelamentoJudicial pj = new ParcelamentoJudicial();
			pj.setId(idParcelamentoInserido);
			pji.setParcelamentoJudicial(pj);
			
			ContaGeral contaGeral = new ContaGeral();
			contaGeral.setId(Integer.parseInt(helper.getIdConta()));
			pji.setContaGeral(contaGeral);
			
			pji.setValorConta(helper.getValorConta());
			pji.setValorAcrescimosImpontualidade(helper.getAcrescimoImpontualidade());
			
			pji.setUltimaAlteracao(dataAtual);	
			this.getControladorUtil().inserir(pji);
			//--------------------------------------------------------------------
			
			//1.2. Atualizar o registro da tabela FATURAMENTO.CONTA
			//--------------------------------------------------------------------
			FiltroConta filtro = new FiltroConta();
			filtro.adicionarCaminhoParaCarregamentoEntidade(FiltroConta.DEBITO_CREDITO_SITUACAO_ATUAL);
			filtro.adicionarCaminhoParaCarregamentoEntidade(FiltroConta.DEBITO_CREDITO_SITUACAO_ANTERIOR);
			filtro.adicionarParametro(new ParametroSimples(FiltroConta.ID,contaGeral.getId()));
			Conta conta = (Conta)Util.retonarObjetoDeColecao(this.getControladorUtil().pesquisar(filtro,Conta.class.getName()));
			
			if(conta.getReferencia() > amRefFaturamento.intValue() && (
				conta.getDebitoCreditoSituacaoAtual().getId().intValue() == DebitoCreditoSituacao.NORMAL || 
						conta.getDebitoCreditoSituacaoAtual().getId().intValue() == DebitoCreditoSituacao.INCLUIDA ||
						conta.getDebitoCreditoSituacaoAtual().getId().intValue() == DebitoCreditoSituacao.RETIFICADA)){
				
				conta.setDebitoCreditoSituacaoAnterior(conta.getDebitoCreditoSituacaoAtual());
			}
			else{
				conta.setDebitoCreditoSituacaoAnterior(null);
			}
			
			DebitoCreditoSituacao dcs = new DebitoCreditoSituacao();
			dcs.setId(DebitoCreditoSituacao.PARCELADA);
			conta.setDebitoCreditoSituacaoAtual(dcs);
			
			
			if(Util.getAnoMesComoInt(dataAtual) > amRefFaturamento.intValue() && Util.getAnoMesComoInt(dataAtual) > conta.getReferencia()){
				conta.setReferenciaContabil(Util.getAnoMesComoInt(dataAtual));
			}
			else if(amRefFaturamento.intValue() > Util.getAnoMesComoInt(dataAtual) && amRefFaturamento.intValue() > conta.getReferencia()){
				conta.setReferenciaContabil(amRefFaturamento.intValue());
			}
			else{
				conta.setReferenciaContabil(conta.getReferencia());
			}
			
			conta.setUltimaAlteracao(dataAtual);
			this.getControladorUtil().atualizar(conta);
			//--------------------------------------------------------------------			
		}
	}
	
	
	
	/**
	 * [UC1321] Gerar Motivos Não Geração de Contas e Imóveis em Cobrança por Empresa
	 * 
	 * @author Hugo Azevedo
	 * @date 20/04/2012
	 */
	public Collection obterComandosPendentesContasImoveisNaoGerados()  throws ControladorException{
		try{
			
			//1. O sistema deverá selecionar os comandos de cobrança que 
			//   estão pendentes para inclusão de contas e imóveis não gerados
			return this.repositorioCobranca.obterComandosPendentesContasImoveisNaoGerados();
			
		}catch (ErroRepositorioException e) {
			throw new ControladorException("erro.sistema", e);
		}
	}
	
	
	/**
	 * [UC1321] Gerar Motivos Não Geração de Contas e Imóveis em Cobrança por Empresa
	 * 
	 * @author Hugo Azevedo
	 * @date 20/04/2012
	 */
	public void gerarMotivosNaoGeracaoContasImoveisCobEmpresa(Usuario usuario,
			Integer idFuncionalidade, Integer idLocalidade, Collection<Object[]> colecaoComando)  throws ControladorException{
		
			int idUnidadeIniciada = 0;
			System.out.println("*********************************************************************");
			System.out.println("INÍCIO DO PROCESSAMENTO PARA A LOCALIDADE: " + idLocalidade);
			System.out.println("*********************************************************************");
			
			try{
			
				idUnidadeIniciada = getControladorBatch()
						.iniciarUnidadeProcessamentoBatch(idFuncionalidade,UnidadeProcessamento.COMANDO_EMPRESA_COBRANCA_CONTA, idLocalidade);
				
				if (colecaoComando != null && !colecaoComando.isEmpty()) {
					
					Iterator<Object[]> iterator = colecaoComando.iterator();
					
					while(iterator.hasNext()) {
						Object[] objComando = (Object[]) iterator.next();
						int idComando = ((Integer) objComando[0]).intValue();
						System.out.println("*********************************************************************");
						System.out.println("INÍCIO DO PROCESSAMENTO PARA O COMANDO: " + idComando + " - LOCALIDADE: " + idLocalidade);
						System.out.println("*********************************************************************");
						
						//1.1.2. O sistema deverá incluir os motivos de não geração dos imóveis para o comando de cobrança
						//1.1.2. [SB0002 - Gerar Motivos de Não Geração para os Imóveis].
						incluirMotivosNaoGeracaoImoveisComando(objComando, idLocalidade);
						
						//1.1.3. O sistema deverá incluir os motivos de não geração das contas para o comando de cobrança
						//1.1.3. [SB0003 - Gerar Motivos de Não Geração para as Contas].
						incluirMotivosNaoGeracaoContasComando(objComando, idLocalidade);
						
						System.out.println("**************************************************");
						System.out.println("FINAL DO PROCESSAMENTO PARA O COMANDO: " + idComando + " - LOCALIDADE: " + idLocalidade);
						System.out.println("**************************************************");
					}
				}
				
				getControladorBatch().encerrarUnidadeProcessamentoBatch(null, idUnidadeIniciada, false);
			
		} catch (Exception e) {
			e.printStackTrace();
			getControladorBatch().encerrarUnidadeProcessamentoBatch(e, idUnidadeIniciada, true);
            throw new EJBException(e);
		}
		
	}
	
	/**
	 * [UC1384] Reabrir Comando de Atividade de Ação de Cobrança
	 * [IT0003] Reabrir Comandos Cronograma
	 * 
	 * @author Hugo Azevedo
	 * @date 06/11/2012
	 * 
	 */
	public void reabrirComandoAtividadeAcaoCobrancaCronograma(String[] idsSelecionados, Date novaDataEncerramento) throws ControladorException {
		Collection colecaoIds = new ArrayList();
		Collections.addAll(colecaoIds,idsSelecionados);
		
		try{
			
			//1. O sistema reabre os comandos de acordo com as seguintes regras, para cada comando selecionado
			
			
			Collection<Object[]> colecaoIdsSelecionadosEmitir = this.repositorioCobranca.obterComandosAcaoCobrancaCronogramaReabrir(colecaoIds);
			            
            Iterator itEmitir = colecaoIdsSelecionadosEmitir.iterator();
            while(itEmitir.hasNext()){
                Object[] obj = (Object[])itEmitir.next();
                
                if(((Integer)obj[6]).compareTo(new Integer(0)) > 0){
					//1.1.1. Excluir as unidades de encerramento das ordens de serviço, encerradas por decurso de prazo:
					this.repositorioCobranca.excluirUnidadesEncerramentoOSDecursoPrazoCronograma((Integer)obj[0]);
					
					//1.1.2. Reabrir essas ordens de serviços:
					this.repositorioCobranca.reabrirOrdensServiçoDecursoPrazoCronograma((Integer)obj[0]);
					
					//1.1.3. Reabrir os documentos de cobrança associados a essas ordens de serviço:
					this.repositorioCobranca.reabrirDocumentosCobrancaOrdensServicoDecursoPrazoCronograma((Integer)obj[0]);
					
					Collection<Integer> colecaoIdsSelecionados = this.repositorioCobranca.obterComandosAcaoCobrancaCronogramaReabrirEncerrados((Integer)obj[0]);
					
					Iterator it = colecaoIdsSelecionados.iterator();
					while(it.hasNext()){
						
						Integer id = (Integer)it.next();	
							
							//1.1.4. E reabrir o comando de cobrança:
							this.repositorioCobranca.reabrirComandoCobrancaDecursoPrazoCronograma(id, novaDataEncerramento);
					}
                }
			 }
			
		}catch(ErroRepositorioException ex){
			ex.printStackTrace();
			throw new ControladorException("erro.sistema", ex);
		}
	}
	
	
	/**
	 * [UC1321] Gerar Motivos Não Geração de Contas e Imóveis em Cobrança por Empresa
	 * [SB0001] Verificar Motivos de Não Geração
	 * 
	 * @author Hugo Azevedo, Mariana Victor
	 * @date 27/04/2012, 13/09/2013
	 */
	public void verificarMotivosNaoGeracaoComando(Collection<Object[]> colecaoComandos) throws ControladorException {
		
		try{
			if (colecaoComandos != null && !colecaoComandos.isEmpty()) {
				Iterator<Object[]> iterator = colecaoComandos.iterator();
				
				while(iterator.hasNext()) {
					Object[] objComando = (Object[]) iterator.next();
					
					//1. Caso o comando possua motivos de não geração já incluídos
					//1.1. O sistema deverá remover os motivos de não geração do comando
					this.repositorioCobranca.removerMotivosNaoGeracao((Integer)objComando[0]);
				}
			}
			
		}catch(ErroRepositorioException ex){
			ex.printStackTrace();
			throw new ControladorException("erro.sistema", ex);
		}
	}
	
	
	/**
	 * [UC1321] Gerar Motivos Não Geração de Contas e Imóveis em Cobrança por Empresa
	 * [SB0002] Gerar Motivos de Não Geração para os Imóveis
	 * [SB0004] Selecionar Imóveis Não Gerados
	 * [SB0005] Incluir o Motivo de Não Geração do Imóvel
	 * [SB0009] Obter Id do Motivo de Não Geração
	 * 
	 * @author Hugo Azevedo, Mariana Victor
	 * @date 27/04/2012, 13/09/2013
	 */
	public void incluirMotivosNaoGeracaoImoveisComando(Object[] objComando, Integer idLocalidade) throws ControladorException{
		
		try{
			
			//1. O sistema deverá selecionar os imóveis que não foram gerados para o comando de cobrança
			//1. [SB0004 - Selecionar Imóveis Não Gerados]
			Collection<Integer> colecaoImoveis = this.repositorioCobranca.obterImoveisNaoGeradosComando(objComando, idLocalidade);
			
			System.out.println("QTD DE IMÓVEIS - "+colecaoImoveis.size());
			if (((Integer)objComando[0]).compareTo(new Integer("568")) == 0
					|| ((Integer)objComando[0]).compareTo(new Integer("569")) == 0) {
				System.out.println("teste " + (Integer)objComando[0]);
			}
			
			//2. Para cada imóvel selecionado:
			Iterator<Integer> itImoveis = colecaoImoveis.iterator();
			while(itImoveis.hasNext()){
				Integer idImovel = (Integer)itImoveis.next();
				
				//Buscar o imóvel
				Object[] dadosImovel = this.repositorioCadastro.pesquisarIndicadorExclusaoCategoriaImovel(idImovel);
				
				Short indicadorExclusao = null;
				Integer idCategoriaPrincipal = null;
				
				if (dadosImovel != null) {
					
					if (dadosImovel[0] != null) {
						indicadorExclusao = (Short) dadosImovel[0];
					}
					
					if (dadosImovel[1] != null) {
						idCategoriaPrincipal = (Integer) dadosImovel[1];
					}
				}
				

				//2.1. Caso contrário, caso exista percentual de proporcionalidade informado para o comando
				//      e o imóvel exista na tabela de proporcionalidade
				if(this.repositorioCobranca.verificarPercentualProporcionalidadeInformado((Integer)objComando[0],idImovel)){
								
					//2.1.1. O sistema deverá incluir o motivo de não geração do imóvel, passando 
					//        o id do imóvel selecionado e id do motivo de não geração correspondente à "Imóvel não incluído devido à proporcionalidade do comando"
					incluirMotivonaoGeracaoImovel(idImovel,(Integer)objComando[0], MotivoNaoGeracaoCobrancaResultado.IMOVEL_NAO_INCLUIDO_PROP_COMANDO);
				}
				
				//2.2. Caso o imóvel esteja excluído
				else if(indicadorExclusao.compareTo(ConstantesSistema.INDICADOR_USO_ATIVO) == 0){
					//2.2.1. O sistema deverá incluir o motivo de não geração do imóvel, passando 
					//       o id do imóvel selecionado e id do motivo de não geração correspondente à "Imóvel Excluído"
					
					incluirMotivonaoGeracaoImovel(idImovel,(Integer)objComando[0], MotivoNaoGeracaoCobrancaResultado.MOTIVO_IMOVEL_EXCLUIDO);					
				}
				
				//2.3. Caso contrário, caso o imóvel já esteja em cobrança
				else if(this.repositorioCobranca.verificarImovelEmCobranca(idImovel)){
					//2.3.1. O sistema deverá incluir o motivo de não geração do imóvel, passando 
					//       o id do imóvel selecionado e id do motivo de não geração correspondente à "Imóvel já está em Cobrança"
					
					incluirMotivonaoGeracaoImovel(idImovel,(Integer)objComando[0], MotivoNaoGeracaoCobrancaResultado.MOTIVO_IMOVEL_EM_COBRANCA);
				}
				
				//2.4. Caso contrário, caso o imóvel não esteja em cobrança para as situações selecionadas
				else if(this.repositorioCobranca.verificarImovelSituacaoCobrancaSelecionada(idImovel, (Integer)objComando[0])){
					
					//2.4.1.  O sistema deverá incluir o motivo de não geração do imóvel, passando 
					//        o id do imóvel selecionado e id do motivo de não geração correspondente à 
					//        "Imóvel não possui a situação de cobrança selecionada"
					incluirMotivonaoGeracaoImovel(idImovel,(Integer)objComando[0], MotivoNaoGeracaoCobrancaResultado.IMOVEL_NAO_POSSUI_SITUACAO_COBRANCA_SELECIONADA);
				}
				
				//2.5. Caso contrário, caso o imóvel esteja em cobrança (Diferente do 2.3)
				else if(this.repositorioCobranca.verificarImovelSituacaoCobranca(idImovel, (Integer)objComando[0])){
					
					//2.5.1.  O sistema deverá incluir o motivo de não geração do imóvel, passando 
					//        o id do imóvel selecionado e id do motivo de não geração correspondente à 
					//        "Imóvel já está ligado a uma Situação de Cobrança inválida para Empresa de Cobrança"
					incluirMotivonaoGeracaoImovel(idImovel,(Integer)objComando[0], MotivoNaoGeracaoCobrancaResultado.IMOVEL_JA_LIGADO_SIT_COBRANCA_INVALIDA_EMP_COBRANCA);
				}
				
				//2.6. Caso contrário, caso o imóvel esteja em situação especial de cobrança
				else if(this.repositorioCobranca.verificarImovelSituacaoEspecialCobranca(idImovel)){
					
					//2.6.1. O sistema deverá incluir o motivo de não geração do imóvel, passando 
					//       o id do imóvel selecionado e id do motivo de não geração correspondente à 
					//       "Imóvel está em Situação Especial de Cobrança"
					incluirMotivonaoGeracaoImovel(idImovel,(Integer)objComando[0], MotivoNaoGeracaoCobrancaResultado.IMOVEL_SIT_ESPECIAL_COBRANCA);
					
				}
				
				//2.7. Caso contrário, caso alguma categoria tenha sido informada
				else if(
						(
							(((Integer)objComando[3]).compareTo(new Integer(1)) == 0) ||
							(((Integer)objComando[4]).compareTo(new Integer(1)) == 0) ||
							(((Integer)objComando[5]).compareTo(new Integer(1)) == 0) ||
							(((Integer)objComando[6]).compareTo(new Integer(1)) == 0)
						)
						&&
						//e a categoria principal do imóvel seja diferente das categorias informadas
						
							(
								(((Integer)objComando[3]).compareTo(new Integer(2)) == 0) ||
								(idCategoriaPrincipal.compareTo(new Integer(1)) != 0)
							) &&
							
							(
								(((Integer)objComando[4]).compareTo(new Integer(2)) == 0) ||
								(idCategoriaPrincipal.compareTo(new Integer(2)) != 0)
							) &&
								
							(
								(((Integer)objComando[5]).compareTo(new Integer(2)) == 0) ||
								(idCategoriaPrincipal.compareTo(new Integer(3)) != 0)
							) &&
									
							(
								(((Integer)objComando[6]).compareTo(new Integer(2)) == 0) ||
								(idCategoriaPrincipal.compareTo(new Integer(4)) != 0)
							)
						){
					
					//2.7.1. O sistema deverá incluir o motivo de não geração do imóvel, passando 
					//       o id do imóvel selecionado e id do motivo de não geração correspondente à "Categoria diferente do filtro"
					
					incluirMotivonaoGeracaoImovel(idImovel,(Integer)objComando[0], MotivoNaoGeracaoCobrancaResultado.MOTIVO_CATEGORIA_DIFERENTE_FILTRO);
					
				}
				
				//2.8. Caso contrário, caso alguma ação de cobrança tenha sido informada
				//     e o imóvel possua algum documento de cobrança para alguma das ações de cobrança selecionadas
				else if(this.repositorioCobranca.verificarDocumentoAcaoCobranca(idImovel,(Integer)objComando[0])){
					
					//2.8.1. O sistema deverá incluir o motivo de não geração do imóvel, 2.6.1. passando
					//       o id do imóvel selecionado e id do motivo de não geração correspondente à "Imóvel possui documento de cobrança para a ação de cobrança selecionada."
					incluirMotivonaoGeracaoImovel(idImovel,(Integer)objComando[0], MotivoNaoGeracaoCobrancaResultado.IMOVEL_POSSUI_DOC_COB_ACAO_COBRANCA);
				}
				
				//2.9. Caso contrário, caso algum perfil do imóvel tenha sido informado
				//     e o perfil do imóvel seja diferente de todos os perfis informados
				else if(this.repositorioCobranca.verificarPerfilImovelDiferenteInformados(idImovel,(Integer)objComando[0])){
					
					//2.9.1. O sistema deverá incluir o motivo de não geração do imóvel, passando 
					//       o id do imóvel selecionado e id do motivo de não geração correspondente à "Perfil diferente do filtro"	
					incluirMotivonaoGeracaoImovel(idImovel,(Integer)objComando[0], MotivoNaoGeracaoCobrancaResultado.MOTIVO_PERFIL_DIFERENTE_FILTRO);
				}
				
				//2.10. Caso contrário, caso alguma situação de ligação de água tenha sido informada
				//     e a situação de ligação de água do imóvel seja diferente de todas as situações informadas
				else if(this.repositorioCobranca.verificarSitLigacaoAguaImovelDiferenteInformados(idImovel,(Integer)objComando[0])){
					
					//2.10.1. O sistema deverá incluir o motivo de não geração do imóvel, passando 
					//       o id do imóvel selecionado e id do motivo de não geração correspondente à "Sit. de Lig. de Água diferente do filtro"
					incluirMotivonaoGeracaoImovel(idImovel,(Integer)objComando[0], MotivoNaoGeracaoCobrancaResultado.MOTIVO_SIT_LIG_AGUA_DIFERENTE_FILTRO);
				}
				
				//2.11. Caso contrário, caso o imóvel não possua débitos
				else if(!this.repositorioCobranca.verificarContasImovel(idImovel,false,false)){
					
					//2.11.1. O sistema deverá incluir o motivo de não geração do imóvel, passando 
					//       o id do imóvel selecionado e id do motivo de não geração correspondente à "Imóvel sem Débitos"
					incluirMotivonaoGeracaoImovel(idImovel,(Integer)objComando[0], MotivoNaoGeracaoCobrancaResultado.MOTIVO_IMOVEL_SEM_DEBITOS);
				}
				
				//2.12. Caso contrário, caso o imóvel possua apenas contas em revisão
				else if(!this.repositorioCobranca.verificarContasImovel(idImovel,true,false)){
					
					//2.12.1. O sistema deverá incluir o motivo de não geração do imóvel, passando 
					//       o id do imóvel selecionado e id do motivo de não geração correspondente à "Contas em Revisão"
					incluirMotivonaoGeracaoImovel(idImovel,(Integer)objComando[0], MotivoNaoGeracaoCobrancaResultado.MOTIVO_CONTAS_EM_REVISAO_TIPO_IMOVEL);
				}
				
				//2.13. Caso contrário, caso o imóvel possua apenas contas com situação diferente de Normal, Incluída e Retificada
				else if(!this.repositorioCobranca.verificarContasImovel(idImovel,false,true)){
					
					//2.13.1. O sistema deverá incluir o motivo de não geração do imóvel, passando 
					//       o id do imóvel selecionado e id do motivo de não geração correspondente à "Contas com Sit. diferente de Normal, Incluída e Retificada"
					incluirMotivonaoGeracaoImovel(idImovel,(Integer)objComando[0], MotivoNaoGeracaoCobrancaResultado.MOTIVO_CONTAS_DIF_NORMAL_INC_RET_TIPO_IMOVEL);
				}
				
				//2.14. Caso contrário, caso o imóvel possua apenas contas com referência menor do que o ano/mês da arrecadação
				else if(!this.repositorioCobranca.verificarRefMenorAnoMesArrecadacaoImovel(idImovel)){
					
					//2.14.1. O sistema deverá incluir o motivo de não geração do imóvel, passando 
					//        o id do imóvel selecionado e id do motivo de não geração correspondente à "Contas com Referência maior ou igual a Referência da Arrecadação"
					incluirMotivonaoGeracaoImovel(idImovel,(Integer)objComando[0], MotivoNaoGeracaoCobrancaResultado.CONTAS_REF_MAIOR_MAIOR_IGUAL_REF_ARRECADACAO_TIPO_IMOVEL);
				}
				
				
				//2.15. Caso contrário, caso o período de referência tenha sido informado 
				//     e o imóvel possua apenas contas com referência fora da faixa informada
				else if(
						(Integer)objComando[17] != null &&
						!this.repositorioCobranca.verificarContasRefForaFaixaInformada(idImovel,(Integer)objComando[17],(Integer)objComando[18])
						){
					
					//2.15.1. O sistema deverá incluir o motivo de não geração do imóvel, passando 
					//       o id do imóvel selecionado e id do motivo de não geração correspondente à "Contas fora do Período de Referência"
					incluirMotivonaoGeracaoImovel(idImovel,(Integer)objComando[0], MotivoNaoGeracaoCobrancaResultado.MOTIVO_CONTAS_FORA_PERIODO_REFERENCIA_TIPO_IMOVEL);
					
				}
				
				//2.16. Caso contrário, caso o período de vencimento tenha sido informado
				//      e o imóvel possua apenas contas com vencimento fora da faixa informada
				else if(
						(Date)objComando[19] != null &&
						!this.repositorioCobranca.verificarContasVencForaFaixaInformada(idImovel, (Date)objComando[19], (Date)objComando[20])
						){
					
					//2.16.1. O sistema deverá incluir o motivo de não geração do imóvel, passando
					//        o id do imóvel selecionado e id do motivo de não geração correspondente à "Contas fora do Período de Vencimento"
					incluirMotivonaoGeracaoImovel(idImovel,(Integer)objComando[0], MotivoNaoGeracaoCobrancaResultado.MOTIVO_CONTAS_FORA_PERIODO_VENCIMENTO_TIPO_IMOVEL);
				}
				
				//2.17. Caso contrário, caso tenha sido informada a quantidade de dias de vencimento
				//      e o imóvel possua apenas contas fora da quantidade de dias de vencimento
				else if(
						(Integer)objComando[21] != null &&
						!this.repositorioCobranca.verificarContasForaQtdDiasVencimento(idImovel, (Integer)objComando[21])
						){
					
					//2.17.1. O sistema deverá incluir o motivo de não geração do imóvel, passando 
					//        o id do imóvel selecionado e id do motivo de não geração correspondente à "Contas sem  a Quantidade de Dias de Vencimento"
					incluirMotivonaoGeracaoImovel(idImovel,(Integer)objComando[0], MotivoNaoGeracaoCobrancaResultado.MOTIVO_CONTAS_SEM_QTD_DIAS_VENCIMENTO_TIPO_IMOVEL);
				}
				
				
				//2.18. Caso contrário, caso a faixa de valor das contas tenha sido informado
				//      e o imóvel possua apenas contas com valor fora da faixa informada
				else if(
						(BigDecimal)objComando[22] != null &&
						!this.repositorioCobranca.verificarContasValorForaFaixaInformada(idImovel, (BigDecimal)objComando[22],(BigDecimal)objComando[23])
						){
					
					//2.18.1. O sistema deverá incluir o motivo de não geração do imóvel, passando 
					//        o id do imóvel selecionado e id do motivo de não geração correspondente à "Contas com valor fora da Faixa de Vl. da Conta" 
					incluirMotivonaoGeracaoImovel(idImovel,(Integer)objComando[0], MotivoNaoGeracaoCobrancaResultado.MOTIVO_CONTAS_VALOR_FORA_FAIXA_VL_CONTA_TIPO_IMOVEL);
					
				} else {
					//[SB0008 - Selecionar Contas do Imóvel]
					Object[] totalContasImovel = this.repositorioCobranca.obterTotalContasImovel(idImovel,objComando);
					
					//2.19. Caso contrário, caso a quantidade de contas do imóvel dentro do critério informado seja zero 
					if((Integer)totalContasImovel[0] != null && ((Integer)totalContasImovel[0]).intValue() == 0){
						
						//2.19.1. O sistema deverá incluir o motivo de não geração do imóvel, passando
						//        o id do imóvel selecionado e id do motivo de não geração correspondente à "Contas fora do critério"
						incluirMotivonaoGeracaoImovel(idImovel,(Integer)objComando[0], MotivoNaoGeracaoCobrancaResultado.MOTIVO_CONTAS_FORA_CRITERIO);
						
					}
					
					
					//2.20. Caso contrário, caso a quantidade de contas tenha sido informada 
					//      e a quantidade de contas seja menor do que a faixa inicial ou maior do que a faixa final
					else if((Integer)objComando[25] != null &&
						(
							((Integer)totalContasImovel[0]).intValue() < ((Integer)objComando[25]).intValue() || 
							((Integer)totalContasImovel[0]).intValue() > ((Integer)objComando[26]).intValue()
						)
					){
						
						//2.20.1. O sistema deverá incluir o motivo de não geração do imóvel, passando 
						//        o id do imóvel selecionado e id do motivo de não geração correspondente à "Qtde. de Contas fora da Faixa de Qtde. de Contas"
						incluirMotivonaoGeracaoImovel(idImovel,(Integer)objComando[0], MotivoNaoGeracaoCobrancaResultado.MOTIVO_QTD_CONTAS_FORA_FAIXA);
						
					} else {
						Integer qtdContasMenorFaixa = this.repositorioCobranca.obterQtdContasMenorFaixa((Integer)objComando[24]);
						
						//2.21. Caso contrário, caso tenha sido informada a quantidade de contas da menor faixa
						//      e a quantidade de contas seja menor do que a quantidade de contas da menor faixa
						if(qtdContasMenorFaixa != null && 
								((Integer)totalContasImovel[0]).intValue() < qtdContasMenorFaixa.intValue()){
								
							//2.21.1. O sistema deverá incluir o motivo de não geração do imóvel, passando 
							//            o id do imóvel selecionado e id do motivo de não geração correspondente à "Qtde. de Contas menor do que a Qtde. da menor Faixa da Empresa"
							incluirMotivonaoGeracaoImovel(idImovel,(Integer)objComando[0], MotivoNaoGeracaoCobrancaResultado.MOTIVO_QTD_CONTAS_MENOR_QTD_MENOR_FAIXA_EMPR);
							
						}
							
						//2.22. Caso contrário, caso a faixa de valor total do débito tenha sido informada
						//      e valor total do débito do imóvel for menor do que o valor inicial ou maior do que o valor final
						else if((BigDecimal)objComando[27] != null && 
									(
											((BigDecimal)totalContasImovel[1]).compareTo((BigDecimal)objComando[27]) < 0 ||
											((BigDecimal)totalContasImovel[1]).compareTo((BigDecimal)objComando[28]) > 0
									)
								){
							
							//2.22.1. O sistema deverá incluir o motivo de não geração do imóvel, passando 
							//        o id do imóvel selecionado e id do motivo de não geração correspondente à "Vl. Total do Débito fora da Faixa de Vl. de Débitos"
							incluirMotivonaoGeracaoImovel(idImovel,(Integer)objComando[0], MotivoNaoGeracaoCobrancaResultado.MOTIVO_VL_TOTAL_DEBITO_FORA_FAIXA);
							
						}
						
						//2.23. Caso contrário 
						else{
							
							//2.23.1. O sistema deverá incluir o motivo de não geração do imóvel, passando 
							//        o id do imóvel selecionado e id do motivo de não geração correspondente à "Motivo não previsto (Imóvel)"
							incluirMotivonaoGeracaoImovel(idImovel,(Integer)objComando[0], MotivoNaoGeracaoCobrancaResultado.MOTIVO_NAO_PREVISTO_IMOVEL);
						}
					}
				}

			}
			
		}catch(ErroRepositorioException ex){
			ex.printStackTrace();
			throw new ControladorException("erro.sistema", ex);
		}
	}
	
	public ExtratoDebitoRelatorioHelper gerarDebitosImovel(Imovel imovel, Usuario usuario) throws ControladorException{


		String idImovelDebitos = String.valueOf(imovel.getId()); 
		
		//[SB0001]-Verificar se o imóvel possue débitos que satisfaça
		ObterDebitoImovelOuClienteHelper colecaoDebitoImovel = obterDebitoImovelOuCliente(
					1, // Indicador de débito do imóvel
					imovel.getId().toString(), // Matrícula do imóvel
					null, // Código do cliente
					null, // Tipo de relação cliente imóvel
					"000101", // Referência inicial do débito
					"999912", // Referência final do débito
					Util.converteStringParaDate("01/01/0001"), // Inicio Vencimento
					Util.converteStringParaDate("31/12/9999"), // Final Vencimento
					1, // Indicador de pagamento
					ConstantesSistema.SIM, // conta em revisão
					ConstantesSistema.SIM, // Débito a cobrar
					ConstantesSistema.SIM, // crédito a realizar
					ConstantesSistema.SIM, // Indicador de notas promissórias
					ConstantesSistema.SIM, // guias pagamento
					ConstantesSistema.SIM, // acréscimos impontualidade
					true);
		
		Collection<DebitoCreditoParcelamentoHelper> colecaoAntecipacaoDebitosDeParcelamento = colecaoDebitoImovel.getColecaoDebitoCreditoParcelamentoHelper();
		Collection<DebitoCreditoParcelamentoHelper> colecaoAntecipacaoCreditosDeParcelamento = colecaoDebitoImovel.getColecaoDebitoCreditoParcelamentoHelper();

		Collection<ContaValoresHelper> colecaoContaValores = colecaoDebitoImovel.getColecaoContasValores();
		ContaValoresHelper dadosConta = null;

		BigDecimal valorConta = new BigDecimal("0.00");
		BigDecimal valorAcrescimo = new BigDecimal("0.00");
//		BigDecimal valorImposto = new BigDecimal("0.00");
		BigDecimal valorAtualizacaoMonetaria = new BigDecimal("0.00");
		BigDecimal valorJurosMora = new BigDecimal("0.00");
		BigDecimal valorMulta = new BigDecimal("0.00");
		
		if (colecaoContaValores != null	&& !colecaoContaValores.isEmpty()) {
			java.util.Iterator<ContaValoresHelper> colecaoContaValoresIterator = colecaoContaValores.iterator();
			// percorre a colecao de conta somando o valor para obter um valor total
			while (colecaoContaValoresIterator.hasNext()) {

				dadosConta = (ContaValoresHelper) colecaoContaValoresIterator.next();
				valorConta = valorConta.add(dadosConta.getConta().getValorTotal());
				valorAcrescimo = valorAcrescimo.add(dadosConta.getValorTotalContaValores());
//				valorImposto = valorImposto.add(dadosConta.getConta().getValorImposto());
				
				if (dadosConta.getValorAtualizacaoMonetaria() != null && !dadosConta.getValorAtualizacaoMonetaria().equals("")) {
					valorAtualizacaoMonetaria.setScale(Parcelamento.CASAS_DECIMAIS,Parcelamento.TIPO_ARREDONDAMENTO);
					valorAtualizacaoMonetaria = valorAtualizacaoMonetaria.add(dadosConta.getValorAtualizacaoMonetaria().setScale(Parcelamento.CASAS_DECIMAIS,Parcelamento.TIPO_ARREDONDAMENTO));
				}
				if (dadosConta.getValorJurosMora() != null	&& !dadosConta.getValorJurosMora().equals("")) {
					valorJurosMora.setScale(Parcelamento.CASAS_DECIMAIS,Parcelamento.TIPO_ARREDONDAMENTO);
					valorJurosMora = valorJurosMora.add(dadosConta.getValorJurosMora().setScale(Parcelamento.CASAS_DECIMAIS,Parcelamento.TIPO_ARREDONDAMENTO));
				}
				if (dadosConta.getValorMulta() != null && !dadosConta.getValorMulta().equals("")) {
					valorMulta.setScale(Parcelamento.CASAS_DECIMAIS,Parcelamento.TIPO_ARREDONDAMENTO);
					valorMulta = valorMulta.add(dadosConta.getValorMulta().setScale(Parcelamento.CASAS_DECIMAIS,Parcelamento.TIPO_ARREDONDAMENTO));
				}
			}
		}

		Collection<DebitoACobrar> colecaoDebitoACobrar = colecaoDebitoImovel.getColecaoDebitoACobrar();

		BigDecimal valorDebitoACobrar = new BigDecimal("0.00");
		BigDecimal valorDebitoACobrarSemJurosParcelamento = new BigDecimal("0.00");
		DebitoACobrar dadosDebito = null;
		BigDecimal valorRestanteACobrar = new BigDecimal("0.00");
		BigDecimal valorTotalRestanteParcelamentosACobrarCurtoPrazo = new BigDecimal("0.00");
		BigDecimal valorTotalRestanteParcelamentosACobrarLongoPrazo = new BigDecimal("0.00");
		BigDecimal valorTotalRestanteParcelamentosACobrar = new BigDecimal("0.00");
		int indiceCurtoPrazo = 0;
		int indiceLongoPrazo = 1;

		if (colecaoDebitoACobrar != null && !colecaoDebitoACobrar.isEmpty()) {
			Iterator<DebitoACobrar> colecaoDebitoACobrarIterator = colecaoDebitoACobrar.iterator();
			
			// percorre a colecao de debito a cobrar somando o valor para obter um valor total
			while (colecaoDebitoACobrarIterator.hasNext()) {

				dadosDebito = (DebitoACobrar) colecaoDebitoACobrarIterator.next();
				valorDebitoACobrar = valorDebitoACobrar.add(dadosDebito.getValorTotalComBonus());
				
				if (dadosDebito.getDebitoTipo() != null &&
						!dadosDebito.getDebitoTipo().getId().equals(DebitoTipo.JUROS_SOBRE_PARCELAMENTO)){
					valorDebitoACobrarSemJurosParcelamento = valorDebitoACobrarSemJurosParcelamento.add(dadosDebito.getValorTotalComBonus());
				}
				
				//Debitos A Cobrar - Parcelamento
				if (dadosDebito.getFinanciamentoTipo().getId().equals(FinanciamentoTipo.PARCELAMENTO_AGUA)
					|| dadosDebito.getFinanciamentoTipo().getId().equals(FinanciamentoTipo.PARCELAMENTO_ESGOTO)
					|| dadosDebito.getFinanciamentoTipo().getId().equals(FinanciamentoTipo.PARCELAMENTO_SERVICO)) {
					
					// [SB0001] Obter Valores de Curto e Longo Prazo
					valorRestanteACobrar = dadosDebito.getValorTotalComBonus();

					BigDecimal[] valoresDeCurtoELongoPrazo = getControladorFaturamento().obterValorACobrarDeCurtoELongoPrazo(
							dadosDebito.getNumeroPrestacaoDebito(),	
							dadosDebito.getNumeroPrestacaoCobradasMaisBonus(),
							valorRestanteACobrar);
					valorTotalRestanteParcelamentosACobrarCurtoPrazo.setScale(Parcelamento.CASAS_DECIMAIS,Parcelamento.TIPO_ARREDONDAMENTO);
					valorTotalRestanteParcelamentosACobrarCurtoPrazo = valorTotalRestanteParcelamentosACobrarCurtoPrazo.add(valoresDeCurtoELongoPrazo[indiceCurtoPrazo]);
					valorTotalRestanteParcelamentosACobrarLongoPrazo.setScale(Parcelamento.CASAS_DECIMAIS,Parcelamento.TIPO_ARREDONDAMENTO);
					valorTotalRestanteParcelamentosACobrarLongoPrazo = valorTotalRestanteParcelamentosACobrarLongoPrazo.add(valoresDeCurtoELongoPrazo[indiceLongoPrazo]);
				}
				
			}
			valorTotalRestanteParcelamentosACobrar = valorTotalRestanteParcelamentosACobrarCurtoPrazo.add(valorTotalRestanteParcelamentosACobrarLongoPrazo);
		}

		Collection<CreditoARealizar> colecaoCreditoARealizar = colecaoDebitoImovel.getColecaoCreditoARealizar();

		BigDecimal valorCreditoARealizar = new BigDecimal("0.00");
//		BigDecimal valorCreditoARealizarSemDescontosParcelamento = new BigDecimal("0.00");
		CreditoARealizar dadosCredito = null;

		if (colecaoCreditoARealizar != null && !colecaoCreditoARealizar.isEmpty()) {
			Iterator<CreditoARealizar> colecaoCreditoARealizarIterator = colecaoCreditoARealizar.iterator();
			
			// percorre a colecao de credito a realizar somando o valor para obter um valor total
			while (colecaoCreditoARealizarIterator.hasNext()) {

				dadosCredito = (CreditoARealizar) colecaoCreditoARealizarIterator.next();
				valorCreditoARealizar = valorCreditoARealizar.add(dadosCredito.getValorTotalComBonus());
//				
//				if (dadosCredito.getCreditoOrigem() != null && 
//						!dadosCredito.getCreditoOrigem().getId().equals(CreditoOrigem.DESCONTOS_CONCEDIDOS_NO_PARCELAMENTO)){
//					valorCreditoARealizarSemDescontosParcelamento = valorCreditoARealizarSemDescontosParcelamento.add(dadosCredito.getValorTotalComBonus());
//				}
			}
		}

		Collection<GuiaPagamentoValoresHelper> colecaoGuiaPagamentoValores = colecaoDebitoImovel.getColecaoGuiasPagamentoValores();

		BigDecimal valorGuiaPagamento = new BigDecimal("0.00");
		GuiaPagamentoValoresHelper dadosGuiaPagamentoValoresHelper = null;

		if (colecaoGuiaPagamentoValores != null	&& !colecaoGuiaPagamentoValores.isEmpty()) {
			Iterator<GuiaPagamentoValoresHelper> colecaoGuiaPagamentoValoresHelperIterator = colecaoGuiaPagamentoValores.iterator();
			
			// percorre a colecao de guia de pagamento somando o valor para obter um valor total
			while (colecaoGuiaPagamentoValoresHelperIterator.hasNext()) {

				dadosGuiaPagamentoValoresHelper = (GuiaPagamentoValoresHelper) colecaoGuiaPagamentoValoresHelperIterator.next();
				valorGuiaPagamento = valorGuiaPagamento.add(dadosGuiaPagamentoValoresHelper.getGuiaPagamento().getValorDebito());
				
				if (dadosGuiaPagamentoValoresHelper.getValorAtualizacaoMonetaria() != null && !dadosGuiaPagamentoValoresHelper.getValorAtualizacaoMonetaria().equals("")) {
					valorAtualizacaoMonetaria.setScale(Parcelamento.CASAS_DECIMAIS,Parcelamento.TIPO_ARREDONDAMENTO);
					valorAtualizacaoMonetaria = valorAtualizacaoMonetaria.add(dadosGuiaPagamentoValoresHelper.getValorAtualizacaoMonetaria().setScale(Parcelamento.CASAS_DECIMAIS,Parcelamento.TIPO_ARREDONDAMENTO));
				}
				if (dadosGuiaPagamentoValoresHelper.getValorJurosMora() != null && !dadosGuiaPagamentoValoresHelper.getValorJurosMora().equals("")) {
					valorJurosMora.setScale(Parcelamento.CASAS_DECIMAIS,Parcelamento.TIPO_ARREDONDAMENTO);
					valorJurosMora = valorJurosMora.add(dadosGuiaPagamentoValoresHelper.getValorJurosMora().setScale(Parcelamento.CASAS_DECIMAIS,Parcelamento.TIPO_ARREDONDAMENTO));
				}
				if (dadosGuiaPagamentoValoresHelper.getValorMulta() != null	&& !dadosGuiaPagamentoValoresHelper.getValorMulta().equals("")) {
					valorMulta.setScale(Parcelamento.CASAS_DECIMAIS,Parcelamento.TIPO_ARREDONDAMENTO);
					valorMulta = valorMulta.add(dadosGuiaPagamentoValoresHelper.getValorMulta().setScale(Parcelamento.CASAS_DECIMAIS,Parcelamento.TIPO_ARREDONDAMENTO));
				}
			}
		}
		
		// Soma o valor total dos debitos e subtrai dos creditos
		BigDecimal valorTotalSemAcrescimo = valorConta.add(valorDebitoACobrar);
		valorTotalSemAcrescimo = valorTotalSemAcrescimo.add(valorGuiaPagamento);
		valorTotalSemAcrescimo = valorTotalSemAcrescimo.subtract(valorCreditoARealizar);

		BigDecimal valorTotalComAcrescimo = valorTotalSemAcrescimo.add(valorAcrescimo);
		
		BigDecimal valorToralSemAcrescimoESemJurosParcelamento = 
			valorConta.add(valorDebitoACobrarSemJurosParcelamento);
		
		valorToralSemAcrescimoESemJurosParcelamento = 
			valorToralSemAcrescimoESemJurosParcelamento.add(valorGuiaPagamento);
		
		BigDecimal valorTotalDescontoPagamentoAVista = null;
		BigDecimal valorPagamentoAVista = null;
			
		///////////////////////////////////////////////////////////////////////
		
		BigDecimal valorDocumento = new BigDecimal("0.00");
		BigDecimal valorAcrescDocumento = new BigDecimal("0.00");
		BigDecimal valorDescontoDocumento = new BigDecimal("0.00");
		
		SistemaParametro sistemaParametro = getControladorUtil().pesquisarParametrosDoSistema();
		if(sistemaParametro.getResolucaoDiretoria() != null){
			
			ImovelPerfil imovelPerfil = getControladorImovel().obterImovelPerfil(new Integer(idImovelDebitos.trim())); 
			Short numeroReparcelamentoConsecutivos = getControladorImovel().consultarNumeroReparcelamentoConsecutivosImovel(new Integer(idImovelDebitos.trim()));
			
			if(numeroReparcelamentoConsecutivos == null){
				numeroReparcelamentoConsecutivos = new Short("0");
			}
			
			IndicadoresParcelamentoHelper indicadoresParcelamentoHelper = 
				new IndicadoresParcelamentoHelper();
			
			indicadoresParcelamentoHelper.setIndicadorDebitosACobrar(new Integer("1"));
			indicadoresParcelamentoHelper.setIndicadorCreditoARealizar(new Integer("1"));
			indicadoresParcelamentoHelper.setIndicadorGuiasPagamento(new Integer("1"));
			indicadoresParcelamentoHelper.setIndicadorAcrescimosImpotualidade(new Integer("1"));
			indicadoresParcelamentoHelper.setIndicadorContasRevisao(new Integer("1"));
			indicadoresParcelamentoHelper.setIndicadorDividaAtiva(new Integer("3"));
			
			
			Integer situacaoLigacaoAgua = imovel.getLigacaoAguaSituacao().getId();
			// O indicador só será usado caso a situação de Água do Imóvel seja
			// SUPRIMIDO, SUPRIMIDO PARCIAL, SUPRIMIDO PARCIAL A PEDIDO
			Integer indicadorRestabelecimento = new Integer("0");
			if (situacaoLigacaoAgua.equals(LigacaoAguaSituacao.SUPRIMIDO) ||
					situacaoLigacaoAgua.equals(LigacaoAguaSituacao.SUPR_PARC) ||
					situacaoLigacaoAgua.equals(LigacaoAguaSituacao.SUPR_PARC_PEDIDO)) {
				indicadorRestabelecimento = new Integer("2");
			}
			
			//CARREGANDO O HELPER COM AS INFORMAÇÕES DO PARCELAMENTO
			ObterOpcoesDeParcelamentoHelper helper = new ObterOpcoesDeParcelamentoHelper(
					sistemaParametro.getResolucaoDiretoria().getId(), 
					new Integer(idImovelDebitos.trim()), 
					new BigDecimal("0.00"), 
					imovel.getLigacaoAguaSituacao().getId(), 
					imovel.getLigacaoEsgotoSituacao().getId(), 
					imovelPerfil.getId(), 
					"01/0001", 
					indicadorRestabelecimento,//indicador de restabelecimento 
					colecaoContaValores, 
					valorTotalComAcrescimo, 
					valorMulta, 
					valorJurosMora, 
					valorAtualizacaoMonetaria, 
					new Integer(numeroReparcelamentoConsecutivos.toString()), 
					colecaoGuiaPagamentoValores, 
					usuario, 
					valorTotalRestanteParcelamentosACobrar, 
					Util.formatarMesAnoComBarraParaAnoMes("01/0001"),
					Util.formatarMesAnoComBarraParaAnoMes("12/9999"), 
					indicadoresParcelamentoHelper,
					valorCreditoARealizar);
			
			NegociacaoOpcoesParcelamentoHelper negociacaoOpcoesParcelamentoHelper = 
				this.calcularValorDosDescontosPagamentoAVista(helper);
			
			valorTotalDescontoPagamentoAVista = negociacaoOpcoesParcelamentoHelper.getValorTotalDescontoPagamentoAVista();
			valorPagamentoAVista = valorTotalComAcrescimo.subtract(valorTotalDescontoPagamentoAVista);
			
			valorDocumento = valorPagamentoAVista;
			valorAcrescDocumento = valorAcrescimo;
			valorDescontoDocumento = valorTotalDescontoPagamentoAVista;
			
		}else{
			
			valorDocumento = valorToralSemAcrescimoESemJurosParcelamento.subtract(valorCreditoARealizar);
		}
		
		// [SB0001] - Gerar Documento de Cobrança
		DocumentoEmissaoForma documentoEmissaoForma = new DocumentoEmissaoForma();
		documentoEmissaoForma.setId(DocumentoEmissaoForma.INDIVIDUAL);

		DocumentoTipo documentoTipo = new DocumentoTipo();
		documentoTipo.setId(DocumentoTipo.EXTRATO_DE_DEBITO);
		Short indicadorGeracaoTaxaCobranca = new Short("2") ;  // no caso do parcelamento sempre 2
		
		ExtratoDebitoRelatorioHelper extratoDebitoRelatorioHelper = this.gerarDocumentoCobranca(
				imovel, indicadorGeracaoTaxaCobranca, colecaoContaValores, colecaoGuiaPagamentoValores, colecaoDebitoACobrar, 
				valorAcrescDocumento, valorDescontoDocumento, null, documentoEmissaoForma, documentoTipo, 
				null, null, null, null, null, 
				valorDocumento, new Date(), colecaoCreditoARealizar, null, null, 
				null, colecaoAntecipacaoDebitosDeParcelamento, colecaoAntecipacaoCreditosDeParcelamento, usuario, new Short("1"));
		
		return extratoDebitoRelatorioHelper;
	}
	
	/**
	 * [UC1321] Gerar Motivos Não Geração de Contas e Imóveis em Cobrança por Empresa
	 * [SB0006] Selecionar Contas Não Geradas
	 * 
	 * @author Hugo Azevedo
	 * @date 02/05/2012
	 */
	public void incluirMotivosNaoGeracaoContasComando(Object[] objComando, Integer idLocalidade) throws ControladorException{
		try{
			
			//1. O sistema deverá selecionar as contas que não foram geradas para o comando de cobrança
			//1. [SB0006 - Selecionar Contas Não Geradas].
			Collection<Object[]> colecaoContas = this.repositorioCobranca.obterContasNaoGeradasComando((Integer)objComando[0], idLocalidade);
			
			Iterator<Object[]> itContas = colecaoContas.iterator();
			
			SistemaParametro sistemaParametro = getControladorUtil().pesquisarParametrosDoSistema();
			
			System.out.println("QTD DE CONTAS - "+colecaoContas.size());
			
			//2. Para cada conta selecionada
			while(itContas.hasNext()){
				
				Object[] objConta = (Object[])itContas.next();
				
				//2.1. Caso a conta esteja em revisão 
				if((Integer)objConta[1] != null){
					
					//2.1.1. O sistema deverá incluir o motivo de não geração da conta, passando 
					//       o id da conta selecionada e id do motivo de não geração correspondente à "Conta em Revisão"
					incluirMotivonaoGeracaoConta((Integer)objConta[5],(Integer)objComando[0],
														(Integer)objConta[0],MotivoNaoGeracaoCobrancaResultado.MOTIVO_CONTAS_EM_REVISAO_TIPO_CONTA);
					
				}
				
				//2.2. Caso contrário, caso a conta esteja com situação diferente de Normal, Incluída e Retificada
				else if((Integer)objConta[2] != null &&
						((Integer)objConta[2]).intValue() != 0 &&
						((Integer)objConta[2]).intValue() != 1 &&
						((Integer)objConta[2]).intValue() != 2
					){
					
					//2.2.1. O sistema deverá incluir o motivo de não geração da conta, passando 
					//       o id da conta selecionada e id do motivo de não geração correspondente à "Conta com Sit. diferente de Normal, Incluída e Retificada"
					incluirMotivonaoGeracaoConta((Integer)objConta[5],(Integer)objComando[0],
							(Integer)objConta[0],MotivoNaoGeracaoCobrancaResultado.MOTIVO_CONTAS_DIF_NORMAL_INC_RET_TIPO_CONTA);
					
				}
				
				//2.3. Caso contrário, caso a conta possua referência superior ou igual ao ano/mês da arrecadação
				else if (((Integer)objConta[3]).compareTo(sistemaParametro.getAnoMesArrecadacao()) >= 0) {
					
					//2.3.1. O sistema deverá incluir o motivo de não geração do imóvel, passando 
					//       o id do imóvel selecionado e id do motivo de não geração correspondente à "Conta com Referência maior ou igual a Referência da Arrecadação"
					incluirMotivonaoGeracaoConta((Integer)objConta[5],(Integer)objComando[0],
							(Integer)objConta[0],MotivoNaoGeracaoCobrancaResultado.CONTAS_REF_MAIOR_MAIOR_IGUAL_REF_ARRECADACAO_TIPO_CONTA);
				}
				
				//2.4. Caso contrário, caso o período de referência tenha sido informado
				//     e o ano/mês referência da conta esteja fora do período de referência informado
				else if((Integer)objComando[17] != null && 
								(
									((Integer)objConta[3]).intValue() < ((Integer)objComando[17]).intValue() ||
									((Integer)objConta[3]).intValue() > ((Integer)objComando[18]).intValue()
								)
						){
					
					//2.4.1. O sistema deverá incluir o motivo de não geração da conta, passando 
					//       o id da conta selecionada e id do motivo de não geração correspondente à "Conta fora do Período de Referência"
					incluirMotivonaoGeracaoConta((Integer)objConta[5],(Integer)objComando[0],
							(Integer)objConta[0],MotivoNaoGeracaoCobrancaResultado.MOTIVO_CONTAS_FORA_PERIODO_REFERENCIA_TIPO_CONTA);
					
					
				}
				
				//2.5. Caso contrário, caso o período de vencimento tenha sido informado
				//     e a data de vencimento da conta esteja fora do período de vencimento informado
				else if((Date)objComando[19] != null && 
							(
								Util.compararData((Date)objConta[4], (Date)objComando[19]) == -1 ||
								Util.compararData((Date)objConta[4], (Date)objComando[20]) == 1
							)
						){
					
					//2.5.1. O sistema deverá incluir o motivo de não geração da conta, passando 
					//       o id da conta selecionada e id do motivo de não geração correspondente à "Conta fora do Período de Vencimento"
					incluirMotivonaoGeracaoConta((Integer)objConta[5],(Integer)objComando[0],
							(Integer)objConta[0],MotivoNaoGeracaoCobrancaResultado.MOTIVO_CONTAS_FORA_PERIODO_VENCIMENTO_TIPO_CONTA);
				}
				
				//2.6. Caso contrário, caso tenha sido informada a quantidade de dias de vencimento
				//     e a conta esteja fora da quantidade de dias de vencimento
				else if((Integer)objComando[21] != null && 
					Util.compararData((Date)objConta[4], Util.subtrairNumeroDiasDeUmaData(new Date(), ((Integer)objComando[21]).intValue())) > 0){
					
					//2.6.1. O sistema deverá incluir o motivo de não geração do imóvel, 
					//       passando o id do imóvel selecionado e id do motivo de não geração correspondente à "Conta sem a Quantidade de Dias de Vencimento"
					incluirMotivonaoGeracaoConta((Integer)objConta[5],(Integer)objComando[0],
							(Integer)objConta[0],MotivoNaoGeracaoCobrancaResultado.MOTIVO_CONTAS_SEM_QTD_DIAS_VENCIMENTO_TIPO_CONTA);
					
				}
				
				
				//2.7. Caso contrário, caso o indicador para incluir contas fora do vencimento para cobrança corresponda a NÃO,
				//     tenha sido informada a quantidade de dias de vencimento
				//     e a conta não possua a quantidade de dias de vencimento informada
				else if(
						sistemaParametro.getIndicadorIncluirContaEmCobranca().compareTo(ConstantesSistema.NAO) == 0 &&
						(Integer)objComando[17] != null &&
						Util.compararData((Date)objConta[4], Util.subtrairNumeroDiasDeUmaData(new Date(),((Integer)objComando[17]).intValue())) == 1
						)
				{
					
					//2.7.1. O sistema deverá incluir o motivo de não geração da conta, passando 
					//       o id da conta selecionada e id do motivo de não geração correspondente à "Conta sem a Qtde. de Dias de Vencimento"
					incluirMotivonaoGeracaoConta((Integer)objConta[5],(Integer)objComando[0],
							(Integer)objConta[0],MotivoNaoGeracaoCobrancaResultado.MOTIVO_CONTAS_SEM_QTD_DIAS_VENCIMENTO_TIPO_CONTA);
					
				}
				
				//2.8. Caso contrário, caso a faixa de valor da conta tenha sido informada
				//     e o valor da conta esteja fora da faixa informada
				else if(
						(BigDecimal)objComando[22] != null && 
							(
									((BigDecimal)objConta[6]).compareTo((BigDecimal)objComando[22]) < 0 ||
									((BigDecimal)objConta[6]).compareTo((BigDecimal)objComando[23]) > 0
							)
						){
					
					//2.8.1. O sistema deverá incluir o motivo de não geração da conta, passando 
					//       o id da conta selecionada e id do motivo de não geração correspondente à "Conta com valor fora da Faixa de Vl. de Conta"
					incluirMotivonaoGeracaoConta((Integer)objConta[5],(Integer)objComando[0],
							(Integer)objConta[0],MotivoNaoGeracaoCobrancaResultado.MOTIVO_CONTAS_VALOR_FORA_FAIXA_VL_CONTA_TIPO_CONTA);
				}
				
				//2.9. Caso contrário:
				else{
					
					//2.9.1. O sistema deverá incluir o motivo de não geração da conta, passando 
					//       o id da conta selecionada e id do motivo de não geração correspondente à "Motivo não previsto (Conta)"
					incluirMotivonaoGeracaoConta((Integer)objConta[5],(Integer)objComando[0],
							(Integer)objConta[0],MotivoNaoGeracaoCobrancaResultado.MOTIVO_NAO_PREVISTO_CONTA);
					
				}
			}
			
		}catch(ErroRepositorioException ex){
			ex.printStackTrace();
			throw new ControladorException("erro.sistema", ex);
		}
	}
	
	/////////////////////////////////////////////////////////////////////
	
		/**
		 * [UC1237] Gerar Relatório de Boletim de Medição e Acompanhamento
		 * [SB0011] Gerar TXT de Acompanhamento dos Créditos Pagos à Vista
		 * [SB0012] Gerar TXT de Acompanhamento dos Parcelamentos - Recuperação de Créditos
		 * [SB0013] Gerar TXT de Acompanhamento dos Parcelamentos em Atraso - Recuperação de Créditos
		 * 
		 * @author Vivianne Sousa
		 * @date 12/11/2013
		 * @exception ControladorException
		 */
		public StringBuilder gerarArquivoTxt(String encerramentoArrecadacao,
				Collection<RelatorioBoletimMedicaoAcompanhamentoHelper> colecaoBoletins,
				short indicadorLocalidade,short indicadorOperacao,short indicadorRelatorio4) 
				throws ControladorException {
	
			StringBuilder arquivoTexto = new StringBuilder();
			
			if(indicadorOperacao == 4){
				//Parcelamento
				if (indicadorLocalidade == ConstantesSistema.INDICADOR_USO_ATIVO){
					arquivoTexto = this.gerarTxtAcompanhamentoParcelamentoQuebraPorLocalidade(
							encerramentoArrecadacao, colecaoBoletins, indicadorRelatorio4);
				}else{
					arquivoTexto = this.gerarTxtAcompanhamentoParcelamentoQuebraPorMunicipio(
							encerramentoArrecadacao, colecaoBoletins, indicadorRelatorio4);
				}
			}else{
				//Geral
				arquivoTexto = this.gerarArquivoTextoAcompanhamentoCreditosPagosAVista(
						colecaoBoletins,indicadorLocalidade,encerramentoArrecadacao);
			}
	
			return arquivoTexto;
		}
		
		/**
		 * [UC1237] Gerar Relatório de Boletim de Medição e Acompanhamento
		 * [SB0011] Gerar TXT de Acompanhamento dos Créditos Pagos à Vista
		 * 
		 * @author Vivianne Sousa
		 * @date 12/11/2013
		 * 
		 * @throws ControladorException
		 */
		public StringBuilder gerarArquivoTextoAcompanhamentoCreditosPagosAVista(
				Collection<RelatorioBoletimMedicaoAcompanhamentoHelper> colecaoBoletins,
				short indicadorLocalidade,String encerramentoArrecadacao)throws ControladorException {
			
			StringBuilder arquivoTexto = new StringBuilder();
			
			if (indicadorLocalidade == ConstantesSistema.INDICADOR_USO_ATIVO){
				arquivoTexto = gerarTxtGeralQuebraPorLocalidade(encerramentoArrecadacao,colecaoBoletins);
			}else{
				arquivoTexto = gerarTxtGeralQuebraPorMunicipio(encerramentoArrecadacao, colecaoBoletins);
			}
			
			return arquivoTexto;
		}
		/**
		 * [UC1237] Gerar Relatório de Boletim de Medição e Acompanhamento
		 * [SB0011] Gerar TXT de Acompanhamento dos Créditos Pagos à Vista
		 * 
		 * @author Vivianne Sousa
		 * @date 12/11/2013
		 * 
		 * @throws ControladorException
		 */
		private StringBuilder gerarTxtGeralQuebraPorLocalidade(
				String encerramentoArrecadacao,
				Collection<RelatorioBoletimMedicaoAcompanhamentoHelper> colecaoBoletins) throws ControladorException {
			
			StringBuilder arquivoTexto = new StringBuilder();
			Iterator it = colecaoBoletins.iterator();
			String tituloRelatorio = "RELATÓRIO DE ACOMPANHAMENTO DOS CRÉDITOS PAGOS À VISTA";
			
			RelatorioBoletimMedicaoAcompanhamentoHelper relatorioHelper = 
					(RelatorioBoletimMedicaoAcompanhamentoHelper)Util.retonarObjetoDeColecao(colecaoBoletins);
			
			// Registro Tipo 01 - Cabeçalho Geral
			arquivoTexto.append(this.gerarArquivoTextoRegistroTipo01(relatorioHelper,encerramentoArrecadacao,tituloRelatorio));
	
			Integer idGerenciaAnterior = 0;
			Integer idGerenciaAtual = 0;
			Integer idLocalidadeAnterior = 0;
			Integer idLocalidadeAtual = 0;
					
			HashMap<Integer, Object[]> gerencia = new HashMap<Integer, Object[]>();
			HashMap<Integer, Object[]> localidade = new HashMap<Integer, Object[]>();
			HashMap<Integer, Object[]> geral = new HashMap<Integer, Object[]>();
	
			while (it.hasNext()) {
	
				RelatorioBoletimMedicaoAcompanhamentoHelper helper = 
						(RelatorioBoletimMedicaoAcompanhamentoHelper)it.next();
				
				idLocalidadeAtual = helper.getIdLocalidade();
				idGerenciaAtual = helper.getGerenciaRegional();
				
				if(idLocalidadeAnterior.compareTo(idLocalidadeAtual) != 0){
					if(idLocalidadeAnterior.compareTo(0) != 0){
						//Registro Tipo 04 - Total por Localidade
						arquivoTexto.append(this.gerarArquivoTextoRegistroTipoTotalCreditosPagosAVista(localidade,"04","Total Localidade"));
						localidade = new HashMap<Integer, Object[]>();
					}
					if(idGerenciaAnterior.compareTo(0) != 0 &&
							idGerenciaAnterior.compareTo(idGerenciaAtual) != 0){
						//Registro Tipo 05 - Total por Gerencia
						arquivoTexto.append(this.gerarArquivoTextoRegistroTipoTotalCreditosPagosAVista(gerencia,"05","Total Gerencia"));
						gerencia = new HashMap<Integer, Object[]>();
					}
					//Registro Tipo 02 - Cabeçalho de Total
					arquivoTexto.append(this.gerarArquivoTextoRegistroTipo02(ConstantesSistema.SIM, helper));
				}
				//Registro Tipo 03 - Detalhe
				arquivoTexto.append(this.gerarArquivoTextoRegistroTipo03CreditosPagosAVista(helper));
				
				idLocalidadeAnterior = idLocalidadeAtual;
				idGerenciaAnterior = idGerenciaAtual;
				
				atualizarValoresAgrupamentoCreditosPagosAVista(gerencia, localidade, geral, helper);
				
			}
			arquivoTexto.append(this.gerarArquivoTextoRegistroTipoTotalCreditosPagosAVista(localidade,"04","Total Localidade"));
			arquivoTexto.append(this.gerarArquivoTextoRegistroTipoTotalCreditosPagosAVista(gerencia,"05","Total Gerencia"));
			arquivoTexto.append(this.gerarArquivoTextoRegistroTipoTotalCreditosPagosAVista(geral,"06","Total Geral"));
			
			return arquivoTexto;
		}
		/**
		 * [UC1237] Gerar Relatório de Boletim de Medição e Acompanhamento
		 * [SB0011] Gerar TXT de Acompanhamento dos Créditos Pagos à Vista
		 * 
		 * @author Vivianne Sousa
		 * @date 12/11/2013
		 * 
		 * @throws ControladorException
		 */
		private StringBuilder gerarTxtGeralQuebraPorMunicipio(String encerramentoArrecadacao,
				Collection<RelatorioBoletimMedicaoAcompanhamentoHelper> colecaoBoletins) throws ControladorException {
			
			StringBuilder arquivoTexto = new StringBuilder();
			Iterator it = colecaoBoletins.iterator();
			String tituloRelatorio = "RELATÓRIO DE ACOMPANHAMENTO DOS CRÉDITOS PAGOS À VISTA";
			
			RelatorioBoletimMedicaoAcompanhamentoHelper relatorioHelper = 
					(RelatorioBoletimMedicaoAcompanhamentoHelper)Util.retonarObjetoDeColecao(colecaoBoletins);
			
			// Registro Tipo 01 - Cabeçalho Geral
			arquivoTexto.append(this.gerarArquivoTextoRegistroTipo01(relatorioHelper,encerramentoArrecadacao,tituloRelatorio));
	
			Integer idRegiaoAnterior = 0;
			Integer idRegiaoAtual = 0;
			Integer idMunicipioAnterior = 0;
			Integer idMunicipioAtual = 0;
					
			HashMap<Integer, Object[]> regiao = new HashMap<Integer, Object[]>();
			HashMap<Integer, Object[]> municipio = new HashMap<Integer, Object[]>();
			HashMap<Integer, Object[]> geral = new HashMap<Integer, Object[]>();
	
			while (it.hasNext()) {
	
				RelatorioBoletimMedicaoAcompanhamentoHelper helper = 
						(RelatorioBoletimMedicaoAcompanhamentoHelper)it.next();
				
				idMunicipioAtual = helper.getIdMunicipio();
				idRegiaoAtual = helper.getRegiao();
	
				if(idMunicipioAnterior.compareTo(idMunicipioAtual) != 0){
					if(idMunicipioAnterior.compareTo(0) != 0){
						//Registro Tipo 04 - Total por Município
						arquivoTexto.append(this.gerarArquivoTextoRegistroTipoTotalCreditosPagosAVista(municipio,"04","Total Município"));
						municipio = new HashMap<Integer, Object[]>();
					}
					if(idRegiaoAnterior.compareTo(0) != 0 &&
							idRegiaoAnterior.compareTo(idRegiaoAtual) != 0){
						//Registro Tipo 05 - Total por Região
						arquivoTexto.append(this.gerarArquivoTextoRegistroTipoTotalCreditosPagosAVista(regiao,"05","Total Região"));
						regiao = new HashMap<Integer, Object[]>();
					}
					//Registro Tipo 02 - Cabeçalho de Total
					arquivoTexto.append(this.gerarArquivoTextoRegistroTipo02(ConstantesSistema.NAO, helper));
				}
				//Registro Tipo 03 - Detalhe
				arquivoTexto.append(this.gerarArquivoTextoRegistroTipo03CreditosPagosAVista(helper));
				
				idMunicipioAnterior = idMunicipioAtual;
				idRegiaoAnterior = idRegiaoAtual;
				
				atualizarValoresAgrupamentoCreditosPagosAVista(regiao, municipio, geral, helper);
				
			}
			arquivoTexto.append(this.gerarArquivoTextoRegistroTipoTotalCreditosPagosAVista(municipio,"04","Total Município"));
			arquivoTexto.append(this.gerarArquivoTextoRegistroTipoTotalCreditosPagosAVista(regiao,"05","Total Região"));
			arquivoTexto.append(this.gerarArquivoTextoRegistroTipoTotalCreditosPagosAVista(geral,"06","Total Geral"));
			
			return arquivoTexto;
		}
		/**
		 * [UC1237] Gerar Relatório de Boletim de Medição e Acompanhamento
		 * [SB0011] Gerar TXT de Acompanhamento dos Créditos Pagos à Vista
		 * 
		 * @author Vivianne Sousa
		 * @date 12/11/2013
		 * 
		 * @throws ControladorException
		 */
		private void atualizarValoresAgrupamentoCreditosPagosAVista(
				HashMap<Integer, Object[]> gerencia,
				HashMap<Integer, Object[]> localidade,
				HashMap<Integer, Object[]> geral,
				RelatorioBoletimMedicaoAcompanhamentoHelper helper) {
			
			Integer qtdFaturasEnviadas = helper.getQtdFaturasNegociadas();
			if(qtdFaturasEnviadas == null){
				qtdFaturasEnviadas =0;
			}
			BigDecimal valorEnviado = helper.getValorNegociado();
			BigDecimal pagoOriginal = helper.getValorPagamentoAVista();
			BigDecimal valorDesconto = new BigDecimal("0");
			if(helper.getValorDesconto() != null){
				valorDesconto = helper.getValorDesconto();
			}
			BigDecimal valorAVistaMenosDesconto = Util.subtrairBigDecimal(helper.getValorPagamentoAVista(), valorDesconto);
			BigDecimal percPagoPrestadora = (valorAVistaMenosDesconto.multiply(helper.getPercentualFaixa())).divide(new BigDecimal("100"),2,BigDecimal.ROUND_HALF_EVEN);
			
			//Atualizar Map de Localidade
			atualizarValoresMap(helper.getDescricaoFaixaContas(), helper.getIdFaixaContas(), localidade, qtdFaturasEnviadas, 
					valorEnviado, pagoOriginal, valorDesconto, valorAVistaMenosDesconto,percPagoPrestadora);
			
			//Atualizar Map de Gerencia
			atualizarValoresMap(helper.getDescricaoFaixaContas(), helper.getIdFaixaContas(), gerencia, qtdFaturasEnviadas, 
					valorEnviado, pagoOriginal, valorDesconto, valorAVistaMenosDesconto, percPagoPrestadora);
			
			//Atualizar Map de total geral
			atualizarValoresMap(helper.getDescricaoFaixaContas(), helper.getIdFaixaContas(), geral, qtdFaturasEnviadas, 
					valorEnviado, pagoOriginal, valorDesconto, valorAVistaMenosDesconto, percPagoPrestadora);
		}
		/**
		 * [UC1237] Gerar Relatório de Boletim de Medição e Acompanhamento
		 * 
		 * @author Vivianne Sousa
		 * @date 12/11/2013
		 * 
		 * @throws ControladorException
		 */
		private void atualizarValoresMap(String descFaixa,Integer faixaAtual,
				HashMap<Integer, Object[]> map, Integer qtdFaturasEnviadas,
				BigDecimal valorEnviado, BigDecimal pagoOriginal,
				BigDecimal valorDesconto, BigDecimal valorAVistaMenosDesconto,
				BigDecimal percPagoPrestadora) {
			
			Object[] valores = null;
			
			if (map != null && !map.isEmpty() && map.get(faixaAtual) != null) {
				valores = (Object[])map.get(faixaAtual);
				
				if(valores[1] == null || qtdFaturasEnviadas == null){
					System.out.println("Erro");
				}
				//Faturas Enviadas
				valores[1] = (Integer) valores[1] + qtdFaturasEnviadas;
				//Valor Enviado
				valores[2] = ((BigDecimal) valores[2]).add(valorEnviado);
				//Pago Original
				valores[3] = ((BigDecimal) valores[3]).add(pagoOriginal);
				//Valor Desconto
				valores[4] = ((BigDecimal) valores[4]).add(valorDesconto);
				//Pago à Vista
				valores[5] = ((BigDecimal) valores[5]).add(valorAVistaMenosDesconto);
				//PAgo a prestadora
				valores[6] = ((BigDecimal) valores[6]).add(percPagoPrestadora);
							
			} else {
				valores = new Object[7];
				valores[0] = descFaixa;
				//Faturas Enviadas
				valores[1] = qtdFaturasEnviadas;
				//Valor Enviado
				valores[2] = valorEnviado;
				//Pago Original
				valores[3] = pagoOriginal;
				//Valor Desconto
				valores[4] = valorDesconto;
				//Pago à Vista
				valores[5] = valorAVistaMenosDesconto;
				//PAgo a prestadora
				valores[6] = percPagoPrestadora;
			}
			
			map.put(faixaAtual, valores);
		}
		
		/**
		 * [UC1237] Gerar Relatório de Boletim de Medição e Acompanhamento
		 * 
		 * Registro Tipo 01 - Cabeçalho Geral
		 * 
		 * @author Vivianne Sousa
		 * @date 12/11/2013
		 * 
		 * @throws ControladorException
		 */
		public StringBuilder gerarArquivoTextoRegistroTipo01(
				RelatorioBoletimMedicaoAcompanhamentoHelper helper,
				String encerramentoArrecadacao,
				String tituloRelatorio) throws ControladorException {
	
			StringBuilder arquivoTextoRegistroTipo01 = new StringBuilder();
	
			
			// TIPO DO REGISTRO
			arquivoTextoRegistroTipo01.append("01"+";");
	
			arquivoTextoRegistroTipo01.append(Util.completaString(tituloRelatorio, 50)+";");
			
			arquivoTextoRegistroTipo01.append(Util.completaString(helper.getEmpresa(), 50)+";");
	
			arquivoTextoRegistroTipo01.append(Util.completaString(encerramentoArrecadacao,8)+";");
			
			arquivoTextoRegistroTipo01.append(Util.completaString(helper.getContrato(),50)+";");
	
			arquivoTextoRegistroTipo01.append(Util.completaString(Util.formatarAnoMesParaMesAno(helper.getMesAnoReferencia()),7)+";");
	
			arquivoTextoRegistroTipo01.append(System.getProperty("line.separator"));
	
			return arquivoTextoRegistroTipo01;
		}
		
		/**
		 * [UC1237] Gerar Relatório de Boletim de Medição e Acompanhamento
		 * 
		 * Registro Tipo 02 - Cabeçalho de Total
		 * 
		 * @author Vivianne Sousa
		 * @date 12/11/2013
		 * 
		 * @throws ControladorException
		 */
		public StringBuilder gerarArquivoTextoRegistroTipo02(Short filtroLocalidade,
				RelatorioBoletimMedicaoAcompanhamentoHelper helper) throws ControladorException {
	
			StringBuilder arquivoTextoRegistroTipo02 = new StringBuilder();
	
			// TIPO DO REGISTRO
			arquivoTextoRegistroTipo02.append("02"+";");
	
			if(filtroLocalidade == ConstantesSistema.SIM){
				arquivoTextoRegistroTipo02.append(Util.completaString(helper.getNomeGerenciaRegional(),50)+";");
				arquivoTextoRegistroTipo02.append(Util.completaString(helper.getDescricaoLocalidade(),50)+";");
			}else{
				arquivoTextoRegistroTipo02.append(Util.completaString(helper.getDescricaoMunicipio(),50)+";");
				arquivoTextoRegistroTipo02.append(Util.completaString(helper.getNomeRegiao(),50)+";");
			}
			
			arquivoTextoRegistroTipo02.append(System.getProperty("line.separator"));
	
			return arquivoTextoRegistroTipo02;
		}
	
		
		/**
		 * [UC1237] Gerar Relatório de Boletim de Medição e Acompanhamento
		 * [SB0011] Gerar TXT de Acompanhamento dos Créditos Pagos à Vista
		 * 
		 * Registro Tipo 03 - Detalhe
		 * 
		 * @author Vivianne Sousa
		 * @date 12/11/2013
		 * 
		 * @throws ControladorException
		 */
		public StringBuilder gerarArquivoTextoRegistroTipo03CreditosPagosAVista(
				RelatorioBoletimMedicaoAcompanhamentoHelper helper) throws ControladorException {
	
			StringBuilder arquivoTextoRegistroTipo03 = new StringBuilder();
	
			// TIPO DO REGISTRO
			arquivoTextoRegistroTipo03.append("03"+";");
	
			//Matrícula do Imóvel
			arquivoTextoRegistroTipo03.append(Util.completaString(helper.getIdImovel().toString(),10)+";");
			//Nome do Cliente Usuário
			arquivoTextoRegistroTipo03.append(Util.completaString(helper.getNomeCLiente(),50)+";");
			//Faturas Enviadas
			arquivoTextoRegistroTipo03.append(Util.completaString(Util.agruparNumeroEmMilhares(helper.getQtdFaturasNegociadas()),10)+";");
			//Valor Enviado
			arquivoTextoRegistroTipo03.append(Util.completaString(Util.formatarMoedaReal(helper.getValorNegociado()),15)+";");
			//Pago Original
			arquivoTextoRegistroTipo03.append(Util.completaString(Util.formatarMoedaReal(helper.getValorPagamentoAVista()),15)+";");
			//Valor Desconto
			BigDecimal valorDesconto = new BigDecimal("0");
			if(helper.getValorDesconto() != null){
				valorDesconto = helper.getValorDesconto();
			}
			arquivoTextoRegistroTipo03.append(Util.completaString(Util.formatarMoedaReal(valorDesconto),15)+";");
			//Pago à Vista
			BigDecimal valorAVistaMenosDesconto = Util.subtrairBigDecimal(helper.getValorPagamentoAVista(), valorDesconto);
			arquivoTextoRegistroTipo03.append(Util.completaString(Util.formatarMoedaReal(valorAVistaMenosDesconto),15)+";");
			//Percentual Pago a Prestadora
			BigDecimal percPagoPrestadora = (valorAVistaMenosDesconto.multiply(helper.getPercentualFaixa())).divide(new BigDecimal("100"),2,BigDecimal.ROUND_HALF_EVEN);
			
			arquivoTextoRegistroTipo03.append(Util.completaString(Util.formatarMoedaReal(percPagoPrestadora),7)+";");
	
			arquivoTextoRegistroTipo03.append(System.getProperty("line.separator"));
	
			return arquivoTextoRegistroTipo03;
		}
	
		
		/**
		 * [UC1237] Gerar Relatório de Boletim de Medição e Acompanhamento
		 * [SB0011] Gerar TXT de Acompanhamento dos Créditos Pagos à Vista
		 * 
		 * Registro Tipo 04 - Total da Localidade 
		 * 
		 * @author Vivianne Sousa
		 * @date 13/11/2013
		 * 
		 * @throws ControladorException
		 */
		public StringBuilder gerarArquivoTextoRegistroTipoTotalCreditosPagosAVista(
				HashMap<Integer, Object[]> map, String tipoRegistro, String descTotal) throws ControladorException {
			
			StringBuilder arquivoTextoRegistroTipoTotal = new StringBuilder();
			
			if (map != null && !map.isEmpty()) {
				
				Collection colecaoValores = map.values();
				Iterator iter = colecaoValores.iterator();
				
				Integer totalFaturasEnviadas = 0;
				BigDecimal totalValorEnviado = new BigDecimal("0");
				BigDecimal totalPagoOriginal = new BigDecimal("0");
				BigDecimal totalValorDesconto = new BigDecimal("0");
				BigDecimal totalPagoAVista = new BigDecimal("0");
				BigDecimal totalPagoAPrestadora = new BigDecimal("0");
				
				while (iter.hasNext()) {
					Object[] valores = (Object[]) iter.next();
	
					// TIPO DO REGISTRO
					arquivoTextoRegistroTipoTotal.append(tipoRegistro +";");
					//Descrição 
					arquivoTextoRegistroTipoTotal.append(Util.completaString(descTotal,40)+";");
					//Descrição Faixa
					arquivoTextoRegistroTipoTotal.append(Util.completaString(((String) valores[0]).toString(),20)+";");
					//Faturas Enviadas
					arquivoTextoRegistroTipoTotal.append(Util.completaString((Util.agruparNumeroEmMilhares((Integer) valores[1])),10)+";");
					totalFaturasEnviadas = Util.somaInteiros(totalFaturasEnviadas ,(Integer) valores[1]);
					//Valor Enviado
					arquivoTextoRegistroTipoTotal.append(Util.completaString(Util.formatarMoedaReal((BigDecimal) valores[2]),15)+";");
					totalValorEnviado = totalValorEnviado.add((BigDecimal) valores[2]);
					//Pago Original
					arquivoTextoRegistroTipoTotal.append(Util.completaString(Util.formatarMoedaReal((BigDecimal) valores[3]),15)+";");
					totalPagoOriginal = totalPagoOriginal.add((BigDecimal) valores[3]);
					//Valor Desconto
					BigDecimal valorDesconto = (BigDecimal) valores[4];
					arquivoTextoRegistroTipoTotal.append(Util.completaString(Util.formatarMoedaReal(valorDesconto),15)+";");
					totalValorDesconto = totalValorDesconto.add(valorDesconto);
					//Pago à Vista
					BigDecimal valorAVistaMenosDesconto = Util.subtrairBigDecimal((BigDecimal) valores[3], valorDesconto);
					arquivoTextoRegistroTipoTotal.append(Util.completaString(Util.formatarMoedaReal(valorAVistaMenosDesconto),15)+";");
					totalPagoAVista = totalPagoAVista.add(valorAVistaMenosDesconto);
					//Percentual Pago a Prestadora
					BigDecimal percPagoPrestadora = (BigDecimal) valores[6]; 
					arquivoTextoRegistroTipoTotal.append(Util.completaString(Util.formatarMoedaReal(percPagoPrestadora),7)+";");
					totalPagoAPrestadora = totalPagoAPrestadora.add(percPagoPrestadora);
					
					arquivoTextoRegistroTipoTotal.append(System.getProperty("line.separator"));
					
				}
				
				// TIPO DO REGISTRO
				arquivoTextoRegistroTipoTotal.append(tipoRegistro +";");
				//Descrição 
				arquivoTextoRegistroTipoTotal.append(Util.completaString("Total",40)+";");
				//Descrição Faixa
				arquivoTextoRegistroTipoTotal.append(Util.completaString("",20)+";");
				//Faturas Enviadas
				arquivoTextoRegistroTipoTotal.append(Util.completaString(Util.agruparNumeroEmMilhares(totalFaturasEnviadas),10)+";");
				//Valor Enviado
				arquivoTextoRegistroTipoTotal.append(Util.completaString(Util.formatarMoedaReal(totalValorEnviado),15)+";");
				//Pago Original
				arquivoTextoRegistroTipoTotal.append(Util.completaString(Util.formatarMoedaReal(totalPagoOriginal),15)+";");
				//Valor Desconto
				arquivoTextoRegistroTipoTotal.append(Util.completaString(Util.formatarMoedaReal(totalValorDesconto),15)+";");
				//Pago à Vista
				arquivoTextoRegistroTipoTotal.append(Util.completaString(Util.formatarMoedaReal(totalPagoAVista),15)+";");
				//Percentual Pago a Prestadora
				arquivoTextoRegistroTipoTotal.append(Util.completaString(Util.formatarMoedaReal(totalPagoAPrestadora),7)+";");
				
				arquivoTextoRegistroTipoTotal.append(System.getProperty("line.separator"));
				
			}
			
	
			return arquivoTextoRegistroTipoTotal;
		}
		
		/**
		 * [UC1237] Gerar Relatório de Boletim de Medição e Acompanhamento
		 * [SB0012] Gerar TXT de Acompanhamento dos Parcelamentos - Recuperação de Créditos
		 * [SB0013] Gerar TXT de Acompanhamento dos Parcelamentos em Atraso - Recuperação de Créditos
		 * 
		 * @author Vivianne Sousa
		 * @date 14/11/2013
		 * 
		 * @throws ControladorException
		 */
		private StringBuilder gerarTxtAcompanhamentoParcelamentoQuebraPorLocalidade(
				String encerramentoArrecadacao,
				Collection<RelatorioBoletimMedicaoAcompanhamentoHelper> colecaoBoletins,
				short indicadorRelatorio4) throws ControladorException {
			
			StringBuilder arquivoTexto = new StringBuilder();
			Iterator it = colecaoBoletins.iterator();
			String tituloRelatorio = "";
			
			if(indicadorRelatorio4 == 1 ){
				tituloRelatorio = "Acompanhamento dos Parcelamentos - Recuperação de Créditos";
			}else{
				tituloRelatorio = "Acompanhamento dos Parcelamentos em Atraso - Recuperação de Créditos";
			}
			
			RelatorioBoletimMedicaoAcompanhamentoHelper relatorioHelper = 
					(RelatorioBoletimMedicaoAcompanhamentoHelper)Util.retonarObjetoDeColecao(colecaoBoletins);
			
			// Registro Tipo 01 - Cabeçalho Geral
			arquivoTexto.append(this.gerarArquivoTextoRegistroTipo01(relatorioHelper,encerramentoArrecadacao,tituloRelatorio));
	
			Integer idGerenciaAnterior = 0;
			Integer idGerenciaAtual = 0;
			Integer idLocalidadeAnterior = 0;
			Integer idLocalidadeAtual = 0;
					
			HashMap<Integer, Object[]> gerencia = new HashMap<Integer, Object[]>();
			HashMap<Integer, Object[]> localidade = new HashMap<Integer, Object[]>();
			HashMap<Integer, Object[]> geral = new HashMap<Integer, Object[]>();
	
			while (it.hasNext()) {
	
				RelatorioBoletimMedicaoAcompanhamentoHelper helper = 
						(RelatorioBoletimMedicaoAcompanhamentoHelper)it.next();
				
				idLocalidadeAtual = helper.getIdLocalidade();
				idGerenciaAtual = helper.getGerenciaRegional();
				
				if(idLocalidadeAnterior.compareTo(idLocalidadeAtual) != 0){
					if(idLocalidadeAnterior.compareTo(0) != 0){
						//Registro Tipo 04 - Total por Localidade
						arquivoTexto.append(this.gerarArquivoTextoRegistroTipoTotalParcelamento(localidade,"04","Total Localidade", indicadorRelatorio4));
						localidade = new HashMap<Integer, Object[]>();
					}
					if(idGerenciaAnterior.compareTo(0) != 0 &&
							idGerenciaAnterior.compareTo(idGerenciaAtual) != 0){
						//Registro Tipo 05 - Total por Gerencia
						arquivoTexto.append(this.gerarArquivoTextoRegistroTipoTotalParcelamento(gerencia,"05","Total Gerencia", indicadorRelatorio4));
						gerencia = new HashMap<Integer, Object[]>();
					}
					//Registro Tipo 02 - Cabeçalho de Total
					arquivoTexto.append(this.gerarArquivoTextoRegistroTipo02(ConstantesSistema.SIM, helper));
				}
				//Registro Tipo 03 - Detalhe
				arquivoTexto.append(this.gerarArquivoTextoRegistroTipo03Parcelamentos(helper, indicadorRelatorio4));
				
				idLocalidadeAnterior = idLocalidadeAtual;
				idGerenciaAnterior = idGerenciaAtual;
				
				atualizarValoresAgrupamentoParcelamento(gerencia, localidade, geral, helper, indicadorRelatorio4);
				
			}
			arquivoTexto.append(this.gerarArquivoTextoRegistroTipoTotalParcelamento(localidade,"04","Total Localidade", indicadorRelatorio4));
			arquivoTexto.append(this.gerarArquivoTextoRegistroTipoTotalParcelamento(gerencia,"05","Total Gerencia", indicadorRelatorio4));
			arquivoTexto.append(this.gerarArquivoTextoRegistroTipoTotalParcelamento(geral,"06","Total Geral", indicadorRelatorio4));
			
			return arquivoTexto;
		}
		
		/**
		 * [UC1237] Gerar Relatório de Boletim de Medição e Acompanhamento
		 * [SB0012] Gerar TXT de Acompanhamento dos Parcelamentos - Recuperação de Créditos
		 * [SB0013] Gerar TXT de Acompanhamento dos Parcelamentos em Atraso - Recuperação de Créditos
		 * 
		 * @author Vivianne Sousa
		 * @date 14/11/2013
		 * 
		 * @throws ControladorException
		 */
		private StringBuilder gerarTxtAcompanhamentoParcelamentoQuebraPorMunicipio(
				String encerramentoArrecadacao,
				Collection<RelatorioBoletimMedicaoAcompanhamentoHelper> colecaoBoletins,
				short indicadorRelatorio4) throws ControladorException {
			
			StringBuilder arquivoTexto = new StringBuilder();
			Iterator it = colecaoBoletins.iterator();
			String tituloRelatorio = "";
			
			if(indicadorRelatorio4 == 1 ){
				tituloRelatorio = "Acompanhamento dos Parcelamentos - Recuperação de Créditos";
			}else{
				tituloRelatorio = "Acompanhamento dos Parcelamentos em Atraso - Recuperação de Créditos";
			}
			
			RelatorioBoletimMedicaoAcompanhamentoHelper relatorioHelper = 
					(RelatorioBoletimMedicaoAcompanhamentoHelper)Util.retonarObjetoDeColecao(colecaoBoletins);
			
			// Registro Tipo 01 - Cabeçalho Geral
			arquivoTexto.append(this.gerarArquivoTextoRegistroTipo01(relatorioHelper,encerramentoArrecadacao,tituloRelatorio));
	
			Integer idRegiaoAnterior = 0;
			Integer idRegiaoAtual = 0;
			Integer idMunicipioAnterior = 0;
			Integer idMunicipioAtual = 0;
					
			HashMap<Integer, Object[]> regiao = new HashMap<Integer, Object[]>();
			HashMap<Integer, Object[]> municipio = new HashMap<Integer, Object[]>();
			HashMap<Integer, Object[]> geral = new HashMap<Integer, Object[]>();
	
			while (it.hasNext()) {
	
				RelatorioBoletimMedicaoAcompanhamentoHelper helper = 
						(RelatorioBoletimMedicaoAcompanhamentoHelper)it.next();
				
				idMunicipioAtual = helper.getIdMunicipio();
				idRegiaoAtual = helper.getRegiao();
				
				if(idMunicipioAnterior.compareTo(idMunicipioAtual) != 0){
					if(idMunicipioAnterior.compareTo(0) != 0){
						//Registro Tipo 04 - Total por Municipio
						arquivoTexto.append(this.gerarArquivoTextoRegistroTipoTotalParcelamento(municipio,"04","Total Município", indicadorRelatorio4));
						municipio = new HashMap<Integer, Object[]>();
					}
					if(idRegiaoAnterior.compareTo(0) != 0 &&
							idRegiaoAnterior.compareTo(idRegiaoAtual) != 0){
						//Registro Tipo 05 - Total por Regiao
						arquivoTexto.append(this.gerarArquivoTextoRegistroTipoTotalParcelamento(regiao,"05","Total Região", indicadorRelatorio4));
						regiao = new HashMap<Integer, Object[]>();
					}
					//Registro Tipo 02 - Cabeçalho de Total
					arquivoTexto.append(this.gerarArquivoTextoRegistroTipo02(ConstantesSistema.NAO, helper));
				}
				//Registro Tipo 03 - Detalhe
				arquivoTexto.append(this.gerarArquivoTextoRegistroTipo03Parcelamentos(helper, indicadorRelatorio4));
				
				idMunicipioAnterior = idMunicipioAtual;
				idRegiaoAnterior = idRegiaoAtual;
				
				atualizarValoresAgrupamentoParcelamento(regiao, municipio, geral, helper, indicadorRelatorio4);
				
			}
			arquivoTexto.append(this.gerarArquivoTextoRegistroTipoTotalParcelamento(municipio,"04","Total Município", indicadorRelatorio4));
			arquivoTexto.append(this.gerarArquivoTextoRegistroTipoTotalParcelamento(regiao,"05","Total Região", indicadorRelatorio4));
			arquivoTexto.append(this.gerarArquivoTextoRegistroTipoTotalParcelamento(geral,"06","Total Geral", indicadorRelatorio4));
			
			return arquivoTexto;
		}
		/**
		 * [UC1237] Gerar Relatório de Boletim de Medição e Acompanhamento
		 * [SB0012] Gerar TXT de Acompanhamento dos Parcelamentos - Recuperação de Créditos
		 * [SB0013] Gerar TXT de Acompanhamento dos Parcelamentos em Atraso - Recuperação de Créditos
		 * 
		 * @author Vivianne Sousa
		 * @date 14/11/2013
		 * 
		 * @throws ControladorException
		 */
		private void atualizarValoresAgrupamentoParcelamento(
				HashMap<Integer, Object[]> gerencia,
				HashMap<Integer, Object[]> localidade,
				HashMap<Integer, Object[]> geral,
				RelatorioBoletimMedicaoAcompanhamentoHelper helper,
				short indicadorRelatorio4) {
			
			Integer qtdFaturasEnviadas = helper.getQtdFaturasNegociadas();
			BigDecimal valorEnviado = helper.getValorNegociado();
			BigDecimal valorPago = helper.getValorPago();
			Integer qtdParcelasPagas = helper.getParcelasPaga();
			
			BigDecimal valorSaldoEmAberto = helper.getSaldoEmAberto();
			BigDecimal valorSaldoEmAbertoHist = helper.getSaldoEmAbertoHist();
			
			Integer qtdParcelasEmAberto = helper.getQuantidadeParcelasEmAberto();
			Integer qtdParcelasEmAbertoHist = helper.getQuantidadeParcelasEmAbertoHist();
			
			Integer qtdParcelaAtraso = helper.getParcelaAtraso();
			BigDecimal valorEmAtraso = helper.getValorEmAtraso();
			
			if(qtdParcelasPagas == null){
				qtdParcelasPagas = new Integer(0);
			}	
			if(qtdParcelasEmAberto == null){
				qtdParcelasEmAberto = new Integer(0);
			}
			if(qtdParcelasEmAbertoHist == null){
				qtdParcelasEmAbertoHist = new Integer(0);
			}
	
			if(valorSaldoEmAberto == null){
				valorSaldoEmAberto = new BigDecimal(0);
			}	
			if(valorSaldoEmAbertoHist == null){
				valorSaldoEmAbertoHist = new BigDecimal(0);
			}
			if(valorPago == null){
				valorPago = new BigDecimal(0);
			}
			if(qtdParcelaAtraso == null){
				qtdParcelaAtraso  = new Integer(0);
			}
			if(valorEmAtraso == null){
				valorEmAtraso = new BigDecimal(0);
			}
			
			Integer qtdeTotalParcelasEmAberto = new Integer(helper.getQuantidadeParcelasEmAberto().intValue()
					+ helper.getQuantidadeParcelasEmAbertoHist().intValue());
			
			
			if(indicadorRelatorio4 == 1 ){
				//TXT de Acompanhamento dos Parcelamentos - Recuperação de Créditos
				BigDecimal valorSaldoEmAbertoTotal = valorSaldoEmAberto.add(valorSaldoEmAbertoHist);
				
				//Atualizar Map de Localidade
				atualizarValoresMap(helper.getDescricaoFaixaContas(), helper.getIdFaixaContas(), localidade, qtdFaturasEnviadas, 
						valorEnviado, qtdParcelasPagas,valorPago, qtdeTotalParcelasEmAberto, valorSaldoEmAbertoTotal);
				
				//Atualizar Map de Gerencia
				atualizarValoresMap(helper.getDescricaoFaixaContas(), helper.getIdFaixaContas(), gerencia, qtdFaturasEnviadas, 
						valorEnviado, qtdParcelasPagas,valorPago, qtdeTotalParcelasEmAberto, valorSaldoEmAbertoTotal);
				
				//Atualizar Map de total geral
				atualizarValoresMap(helper.getDescricaoFaixaContas(), helper.getIdFaixaContas(), geral, qtdFaturasEnviadas, 
						valorEnviado, qtdParcelasPagas,valorPago, qtdeTotalParcelasEmAberto, valorSaldoEmAbertoTotal);
				
			}else{
				//TXT de Acompanhamento dos Parcelamentos em Atraso - Recuperação de Créditos
				
				//Atualizar Map de Localidade
				atualizarValoresMap(helper.getDescricaoFaixaContas(), helper.getIdFaixaContas(), localidade, qtdFaturasEnviadas, 
						valorEnviado, valorPago, qtdParcelaAtraso, valorEmAtraso, valorSaldoEmAberto);
				
				//Atualizar Map de Gerencia
				atualizarValoresMap(helper.getDescricaoFaixaContas(), helper.getIdFaixaContas(), gerencia, qtdFaturasEnviadas, 
						valorEnviado, valorPago,qtdParcelaAtraso, valorEmAtraso, valorSaldoEmAberto);
				
				//Atualizar Map de total geral
				atualizarValoresMap(helper.getDescricaoFaixaContas(), helper.getIdFaixaContas(), geral, qtdFaturasEnviadas, 
						valorEnviado, valorPago, qtdParcelaAtraso, valorEmAtraso, valorSaldoEmAberto);
			}
		
		}
		
		/**
		 * [UC1237] Gerar Relatório de Boletim de Medição e Acompanhamento
		 * [SB0012] Gerar TXT de Acompanhamento dos Parcelamentos - Recuperação de Créditos
		 * 
		 * @author Vivianne Sousa
		 * @date 14/11/2013
		 * 
		 * @throws ControladorException
		 */
		private void atualizarValoresMap(String descFaixa,
				Integer faixaAtual,
				HashMap<Integer, Object[]> map, 
				Integer qtdFaturasEnviadas,
				BigDecimal valorEnviado, 
				Integer qtdParcelasPagas,
				BigDecimal valorPago,
				Integer qtdeParcelasEmAberto,
				BigDecimal valorSaldoEmAberto) {
			
			Object[] valores = null;
			
			if (map != null && !map.isEmpty() && map.get(faixaAtual) != null) {
				valores = (Object[])map.get(faixaAtual);
				
				//Faturas Enviadas
				valores[1] = (Integer) valores[1] + qtdFaturasEnviadas;
				//Valor Enviado
				valores[2] = ((BigDecimal) valores[2]).add(valorEnviado);
				//Qtde Parcelas Pagas
				valores[3] = (Integer) valores[3] + qtdParcelasPagas;
				//Valor Pago
				valores[4] = ((BigDecimal) valores[4]).add(valorPago);
				//Qtde Parcelas em aberto
				valores[5] = (Integer) valores[5] + qtdeParcelasEmAberto;
				//Valor Saldo em Aberto
				valores[6] = ((BigDecimal) valores[6]).add(valorSaldoEmAberto);
							
			} else {
				valores = new Object[7];
				valores[0] = descFaixa;
				//Faturas Enviadas
				valores[1] =  qtdFaturasEnviadas;
				//Valor Enviado
				valores[2] = valorEnviado;
				//Qtde Parcelas Pagas
				valores[3] = qtdParcelasPagas;
				//Valor Pago
				valores[4] = valorPago;
				//Qtde Parcelas em aberto
				valores[5] =  qtdeParcelasEmAberto;
				//Valor Saldo em Aberto
				valores[6] = valorSaldoEmAberto;
			}
			
			map.put(faixaAtual, valores);
		}
		
		/**
		 * [UC1237] Gerar Relatório de Boletim de Medição e Acompanhamento
		 * [SB0013] Gerar TXT de Acompanhamento dos Parcelamentos em Atraso - Recuperação de Créditos
		 * 
		 * @author Vivianne Sousa
		 * @date 14/11/2013
		 * 
		 * @throws ControladorException
		 */
		private void atualizarValoresMap(String descFaixa,
				Integer faixaAtual,
				HashMap<Integer, Object[]> map, 
				Integer qtdFaturasEnviadas,
				BigDecimal valorEnviado, 
				BigDecimal valorPago,
				Integer qtdParcelaAtraso,
				BigDecimal valorEmAtraso,
				BigDecimal valorSaldoEmAberto) {
			
			Object[] valores = null;
			
			if (map != null && !map.isEmpty() && map.get(faixaAtual) != null) {
				valores = (Object[])map.get(faixaAtual);
				
				//Faturas Enviadas
				valores[1] = (Integer) valores[1] + qtdFaturasEnviadas;
				//Valor Enviado
				valores[2] = ((BigDecimal) valores[2]).add(valorEnviado);
				//Valor Pago
				valores[3] = ((BigDecimal) valores[3]).add(valorPago);
				//Qtde Parcelas em atraso
				valores[4] = (Integer) valores[4] + qtdParcelaAtraso;
				//Valor em atraso
				valores[5] = ((BigDecimal) valores[5]).add(valorEmAtraso);
				//Valor Saldo em Aberto
				valores[6] = ((BigDecimal) valores[6]).add(valorSaldoEmAberto);
							
			} else {
				valores = new Object[7];
				valores[0] = descFaixa;
				//Faturas Enviadas
				valores[1] = qtdFaturasEnviadas;
				//Valor Enviado
				valores[2] = valorEnviado;
				//Valor Pago
				valores[3] = valorPago;
				//Qtde Parcelas em atraso
				valores[4] =  qtdParcelaAtraso;
				//Valor em atraso
				valores[5] = valorEmAtraso;
				//Valor Saldo em Aberto
				valores[6] = valorSaldoEmAberto;
			}
			
			map.put(faixaAtual, valores);
		}
		
		/**
		 * [UC1237] Gerar Relatório de Boletim de Medição e Acompanhamento
		 * [SB0012] Gerar TXT de Acompanhamento dos Parcelamentos - Recuperação de Créditos
		 * [SB0013] Gerar TXT de Acompanhamento dos Parcelamentos em Atraso - Recuperação de Créditos
		 * 
		 * Registro Tipo 03 - Detalhe
		 * 
		 * @author Vivianne Sousa
		 * @date 14/11/2013
		 * 
		 * @throws ControladorException
		 */
		public StringBuilder gerarArquivoTextoRegistroTipo03Parcelamentos(
				RelatorioBoletimMedicaoAcompanhamentoHelper helper, short indicadorRelatorio4) throws ControladorException {
	
			StringBuilder arquivoTextoRegistroTipo03 = new StringBuilder();
			
			if(indicadorRelatorio4 == 1 ){
				//TXT de Acompanhamento dos Parcelamentos - Recuperação de Créditos
				arquivoTextoRegistroTipo03 = this.gerarArquivoTextoRegistroTipo03Parcelamentos(helper);
				
			}else{
				//TXT de Acompanhamento dos Parcelamentos em Atraso - Recuperação de Créditos
				arquivoTextoRegistroTipo03 = this.gerarArquivoTextoRegistroTipo03ParcelamentosEmAtraso(helper);
			}
	
			return arquivoTextoRegistroTipo03;
		}
	
		/**
		 * [UC1237] Gerar Relatório de Boletim de Medição e Acompanhamento
		 * [SB0012] Gerar TXT de Acompanhamento dos Parcelamentos - Recuperação de Créditos
		 * 
		 * Registro Tipo 03 - Detalhe
		 * 
		 * @author Vivianne Sousa
		 * @date 14/11/2013
		 * 
		 * @throws ControladorException
		 */
		public StringBuilder gerarArquivoTextoRegistroTipo03Parcelamentos(
				RelatorioBoletimMedicaoAcompanhamentoHelper helper) throws ControladorException {
	
			StringBuilder arquivoTextoRegistroTipo03 = new StringBuilder();
			
			if(helper.getParcelasPaga() == null)
				helper.setParcelasPaga(new Integer(0));
			if(helper.getQuantidadeParcelasEmAberto() == null)
				helper.setQuantidadeParcelasEmAberto(new Integer(0));
			if(helper.getQuantidadeParcelasEmAbertoHist() == null)
				helper.setQuantidadeParcelasEmAbertoHist(new Integer(0));
			if(helper.getSaldoEmAberto() == null)
				helper.setSaldoEmAberto(new BigDecimal(0));
			if(helper.getSaldoEmAbertoHist() == null)
				helper.setSaldoEmAbertoHist(new BigDecimal(0));
			if(helper.getValorPago() == null)
				helper.setValorPago(new BigDecimal(0));
			if(helper.getQtdFaturasNegociadas() == null)
				helper.setQtdFaturasNegociadas(new Integer(0));
	
			// TIPO DO REGISTRO
			arquivoTextoRegistroTipo03.append("03"+";");
	
			//Matrícula do Imóvel
			arquivoTextoRegistroTipo03.append(Util.completaString(helper.getIdImovel().toString(),10)+";");
			//Nome do Cliente Usuário
			arquivoTextoRegistroTipo03.append(Util.completaString(helper.getNomeCLiente(),50)+";");
			//Faturas Enviadas
			arquivoTextoRegistroTipo03.append(Util.completaString(Util.agruparNumeroEmMilhares(helper.getQtdFaturasNegociadas()),10)+";");
			//Valor Enviado
			arquivoTextoRegistroTipo03.append(Util.completaString(Util.formatarMoedaReal(helper.getValorNegociado()),15)+";");
			//Quantidade de Parcelas Pagas
			arquivoTextoRegistroTipo03.append(Util.completaString(Util.agruparNumeroEmMilhares(helper.getParcelasPaga()),10)+";");
			//Valor Pago
			arquivoTextoRegistroTipo03.append(Util.completaString(Util.formatarMoedaReal(helper.getValorPago()),15)+";");
			//Quantidade de Parcelas em Aberto
			Integer qtdeParcelasEmAberto = new Integer(helper.getQuantidadeParcelasEmAberto().intValue()
					+ helper.getQuantidadeParcelasEmAbertoHist().intValue());
			arquivoTextoRegistroTipo03.append(Util.completaString(Util.agruparNumeroEmMilhares(qtdeParcelasEmAberto),10)+";");
			//Saldo em Aberto
			BigDecimal saldoEmAberto = helper.getSaldoEmAberto().add(helper.getSaldoEmAbertoHist());
			
			arquivoTextoRegistroTipo03.append(Util.completaString(Util.formatarMoedaReal(saldoEmAberto),15)+";");
	
			arquivoTextoRegistroTipo03.append(System.getProperty("line.separator"));
	
			return arquivoTextoRegistroTipo03;
		}
	
		/**
		 * [UC1237] Gerar Relatório de Boletim de Medição e Acompanhamento
		 * [SB0013] Gerar TXT de Acompanhamento dos Parcelamentos em Atraso - Recuperação de Créditos
		 * 
		 * Registro Tipo 03 - Detalhe
		 * 
		 * @author Vivianne Sousa
		 * @date 14/11/2013
		 * 
		 * @throws ControladorException
		 */
		public StringBuilder gerarArquivoTextoRegistroTipo03ParcelamentosEmAtraso(
				RelatorioBoletimMedicaoAcompanhamentoHelper helper) throws ControladorException {
	
			StringBuilder arquivoTextoRegistroTipo03 = new StringBuilder();
			
			if(helper.getParcelasPaga() == null)
				helper.setParcelasPaga(new Integer(0));
			if(helper.getQuantidadeParcelasEmAberto() == null)
				helper.setQuantidadeParcelasEmAberto(new Integer(0));
			if(helper.getQuantidadeParcelasEmAbertoHist() == null)
				helper.setQuantidadeParcelasEmAbertoHist(new Integer(0));
			if(helper.getSaldoEmAberto() == null)
				helper.setSaldoEmAberto(new BigDecimal(0));
			if(helper.getSaldoEmAbertoHist() == null)
				helper.setSaldoEmAbertoHist(new BigDecimal(0));
			if(helper.getValorPago() == null)
				helper.setValorPago(new BigDecimal(0));
			if(helper.getQtdFaturasNegociadas() == null)
				helper.setQtdFaturasNegociadas(new Integer(0));
	
			// TIPO DO REGISTRO
			arquivoTextoRegistroTipo03.append("03"+";");
	
			//Matrícula do Imóvel
			arquivoTextoRegistroTipo03.append(Util.completaString(helper.getIdImovel().toString(),10)+";");
			//Nome do Cliente Usuário
			arquivoTextoRegistroTipo03.append(Util.completaString(helper.getNomeCLiente(),50)+";");
			//Faturas Enviadas
			arquivoTextoRegistroTipo03.append(Util.completaString(Util.agruparNumeroEmMilhares(helper.getQtdFaturasNegociadas()),10)+";");
			//Valor Enviado
			arquivoTextoRegistroTipo03.append(Util.completaString(Util.formatarMoedaReal(helper.getValorNegociado()),15)+";");
			//Valor Pago
			arquivoTextoRegistroTipo03.append(Util.completaString(Util.formatarMoedaReal(helper.getValorPago()),15)+";");
			//Quantidade de Parcelas em Atraso
			arquivoTextoRegistroTipo03.append(Util.completaString(Util.agruparNumeroEmMilhares(helper.getParcelaAtraso()),10)+";");
			//Valor em Atraso
			arquivoTextoRegistroTipo03.append(Util.completaString(Util.formatarMoedaReal(helper.getValorEmAtraso()),15)+";");
			//Saldo em Aberto
			arquivoTextoRegistroTipo03.append(Util.completaString(Util.formatarMoedaReal(helper.getSaldoEmAberto()),15)+";");
	
			arquivoTextoRegistroTipo03.append(System.getProperty("line.separator"));
			
	
			return arquivoTextoRegistroTipo03;
		}
		
		
		/**
		 * [UC1237] Gerar Relatório de Boletim de Medição e Acompanhamento
		 * [SB0012] Gerar TXT de Acompanhamento dos Parcelamentos - Recuperação de Créditos
		 * 
		 * Registro Tipo 04 - Total da Localidade 
		 * 
		 * @author Vivianne Sousa
		 * @date 13/11/2013
		 * 
		 * @throws ControladorException
		 */
		public StringBuilder gerarArquivoTextoRegistroTipoTotalParcelamento(
				HashMap<Integer, Object[]> map, String tipoRegistro, String descTotal, 
				short indicadorRelatorio4) throws ControladorException {
			
			StringBuilder arquivoTextoRegistroTipoTotal = new StringBuilder();
			
			if(indicadorRelatorio4 == 1 ){
				//TXT de Acompanhamento dos Parcelamentos - Recuperação de Créditos
				arquivoTextoRegistroTipoTotal = this.
						gerarArquivoTextoRegistroTipoTotalParcelamento(map, tipoRegistro, descTotal);
				
			}else{
				//TXT de Acompanhamento dos Parcelamentos em Atraso - Recuperação de Créditos
				arquivoTextoRegistroTipoTotal = this.
						gerarArquivoTextoRegistroTipoTotalParcelamentoEmAtraso(map, tipoRegistro, descTotal);
			}
			
			return arquivoTextoRegistroTipoTotal;
		}	
		
		/**
		 * [UC1237] Gerar Relatório de Boletim de Medição e Acompanhamento
		 * [SB0012] Gerar TXT de Acompanhamento dos Parcelamentos - Recuperação de Créditos
		 * 
		 * Registro Tipo 04 - Total da Localidade 
		 * 
		 * @author Vivianne Sousa
		 * @date 13/11/2013
		 * 
		 * @throws ControladorException
		 */
		public StringBuilder gerarArquivoTextoRegistroTipoTotalParcelamento(
				HashMap<Integer, Object[]> map, String tipoRegistro, String descTotal) throws ControladorException {
			
			StringBuilder arquivoTextoRegistroTipoTotal = new StringBuilder();
			
			if (map != null && !map.isEmpty()) {
				
				Collection colecaoValores = map.values();
				Iterator iter = colecaoValores.iterator();
				
				Integer totalFaturasEnviadas = 0;
				BigDecimal totalValorEnviado = new BigDecimal("0");
				Integer totalQtdeParcelasPagas = 0;
				BigDecimal totalValorPago = new BigDecimal("0");
				Integer totalQtdeParcelasEmAberto = 0;
				BigDecimal totalSaldoEmAberto = new BigDecimal("0");
				
				while (iter.hasNext()) {
					Object[] valores = (Object[]) iter.next();
	
					// TIPO DO REGISTRO
					arquivoTextoRegistroTipoTotal.append(tipoRegistro +";");
					//Descrição 
					arquivoTextoRegistroTipoTotal.append(Util.completaString(descTotal,40)+";");
					//Descrição Faixa
					arquivoTextoRegistroTipoTotal.append(Util.completaString(((String) valores[0]).toString(),20)+";");
					//Faturas Enviadas
					arquivoTextoRegistroTipoTotal.append(Util.completaString((Util.agruparNumeroEmMilhares((Integer) valores[1])),10)+";");
					totalFaturasEnviadas = Util.somaInteiros(totalFaturasEnviadas ,(Integer) valores[1]);
					//Valor Enviado
					arquivoTextoRegistroTipoTotal.append(Util.completaString(Util.formatarMoedaReal((BigDecimal) valores[2]),15)+";");
					totalValorEnviado = totalValorEnviado.add((BigDecimal) valores[2]);
					//Quantidade de Parcelas Pagas
					arquivoTextoRegistroTipoTotal.append(Util.completaString((Util.agruparNumeroEmMilhares((Integer) valores[3])),10)+";");
					totalQtdeParcelasPagas =  Util.somaInteiros(totalQtdeParcelasPagas ,(Integer) valores[3]);
					//Valor Pago
					arquivoTextoRegistroTipoTotal.append(Util.completaString(Util.formatarMoedaReal((BigDecimal) valores[4]),15)+";");
					totalValorPago = totalValorPago.add((BigDecimal) valores[4]);
					//Quantidade de Parcelas em Aberto
					arquivoTextoRegistroTipoTotal.append(Util.completaString((Util.agruparNumeroEmMilhares((Integer) valores[5])),10)+";");
					totalQtdeParcelasEmAberto =  Util.somaInteiros(totalQtdeParcelasEmAberto ,(Integer) valores[5]);
					//Saldo em Aberto
					arquivoTextoRegistroTipoTotal.append(Util.completaString(Util.formatarMoedaReal((BigDecimal) valores[6]),15)+";");
					totalSaldoEmAberto = totalSaldoEmAberto.add((BigDecimal) valores[6]);
					
					arquivoTextoRegistroTipoTotal.append(System.getProperty("line.separator"));
					
				}
				
				// TIPO DO REGISTRO
				arquivoTextoRegistroTipoTotal.append(tipoRegistro +";");
				//Descrição 
				arquivoTextoRegistroTipoTotal.append(Util.completaString("Total",40)+";");
				//Descrição Faixa
				arquivoTextoRegistroTipoTotal.append(Util.completaString("",20)+";");
				//Faturas Enviadas
				arquivoTextoRegistroTipoTotal.append(Util.completaString(Util.agruparNumeroEmMilhares(totalFaturasEnviadas),10)+";");
				//Valor Enviado
				arquivoTextoRegistroTipoTotal.append(Util.completaString(Util.formatarMoedaReal(totalValorEnviado),15)+";");
				//Quantidade de Parcelas Pagas
				arquivoTextoRegistroTipoTotal.append(Util.completaString(Util.agruparNumeroEmMilhares(totalQtdeParcelasPagas),10)+";");
				//Valor Pago
				arquivoTextoRegistroTipoTotal.append(Util.completaString(Util.formatarMoedaReal(totalValorPago),15)+";");
				//Quantidade de Parcelas em Aberto
				arquivoTextoRegistroTipoTotal.append(Util.completaString(Util.agruparNumeroEmMilhares(totalQtdeParcelasEmAberto),10)+";");
				//Saldo em Aberto
				arquivoTextoRegistroTipoTotal.append(Util.completaString(Util.formatarMoedaReal(totalSaldoEmAberto),15)+";");
				
				arquivoTextoRegistroTipoTotal.append(System.getProperty("line.separator"));
				
			}
	
			return arquivoTextoRegistroTipoTotal;
		}
	
		
		/**
		 * [UC1237] Gerar Relatório de Boletim de Medição e Acompanhamento
		 * [SB0013] Gerar TXT de Acompanhamento dos Parcelamentos em Atraso - Recuperação de Créditos
		 * 
		 * Registro Tipo 04 - Total da Localidade 
		 * 
		 * @author Vivianne Sousa
		 * @date 13/11/2013
		 * 
		 * @throws ControladorException
		 */
		public StringBuilder gerarArquivoTextoRegistroTipoTotalParcelamentoEmAtraso(
				HashMap<Integer, Object[]> map, String tipoRegistro, String descTotal) throws ControladorException {
			
			StringBuilder arquivoTextoRegistroTipoTotal = new StringBuilder();
	
			if (map != null && !map.isEmpty()) {
				
				Collection colecaoValores = map.values();
				Iterator iter = colecaoValores.iterator();
				
				Integer totalFaturasEnviadas = 0;
				BigDecimal totalValorEnviado = new BigDecimal("0");
				BigDecimal totalValorPago = new BigDecimal("0");
				Integer totalQtdeParcelasEmAtraso = 0;
				BigDecimal totalValorEmAtraso = new BigDecimal("0");
				BigDecimal totalSaldoEmAberto = new BigDecimal("0");
				
				while (iter.hasNext()) {
					Object[] valores = (Object[]) iter.next();
	
					// TIPO DO REGISTRO
					arquivoTextoRegistroTipoTotal.append(tipoRegistro +";");
					//Descrição 
					arquivoTextoRegistroTipoTotal.append(Util.completaString(descTotal,40)+";");
					//Descrição Faixa
					arquivoTextoRegistroTipoTotal.append(Util.completaString(((String) valores[0]).toString(),20)+";");
					//Faturas Enviadas
					arquivoTextoRegistroTipoTotal.append(Util.completaString((Util.agruparNumeroEmMilhares((Integer) valores[1])),10)+";");
					totalFaturasEnviadas = Util.somaInteiros(totalFaturasEnviadas ,(Integer) valores[1]);
					//Valor Enviado
					arquivoTextoRegistroTipoTotal.append(Util.completaString(Util.formatarMoedaReal((BigDecimal) valores[2]),15)+";");
					totalValorEnviado = totalValorEnviado.add((BigDecimal) valores[2]);
					//Valor Pago
					arquivoTextoRegistroTipoTotal.append(Util.completaString(Util.formatarMoedaReal((BigDecimal) valores[3]),15)+";");
					totalValorPago = totalValorPago.add((BigDecimal) valores[3]);
					//Quantidade de Parcelas em Atraso
					arquivoTextoRegistroTipoTotal.append(Util.completaString((Util.agruparNumeroEmMilhares((Integer) valores[4])),10)+";");
					totalQtdeParcelasEmAtraso =  Util.somaInteiros(totalQtdeParcelasEmAtraso ,(Integer) valores[4]);
					//Valor em Atraso
					arquivoTextoRegistroTipoTotal.append(Util.completaString(Util.formatarMoedaReal((BigDecimal) valores[5]),15)+";");
					totalValorEmAtraso = totalValorEmAtraso.add((BigDecimal) valores[5]);
					//Saldo em Aberto
					arquivoTextoRegistroTipoTotal.append(Util.completaString(Util.formatarMoedaReal((BigDecimal) valores[6]),15)+";");
					totalSaldoEmAberto = totalSaldoEmAberto.add((BigDecimal) valores[6]);
					
					arquivoTextoRegistroTipoTotal.append(System.getProperty("line.separator"));
					
				}
				
				// TIPO DO REGISTRO
				arquivoTextoRegistroTipoTotal.append(tipoRegistro +";");
				//Descrição 
				arquivoTextoRegistroTipoTotal.append(Util.completaString("Total",40)+";");
				//Descrição Faixa
				arquivoTextoRegistroTipoTotal.append(Util.completaString("",20)+";");
				//Faturas Enviadas
				arquivoTextoRegistroTipoTotal.append(Util.completaString(Util.agruparNumeroEmMilhares(totalFaturasEnviadas),10)+";");
				//Valor Enviado
				arquivoTextoRegistroTipoTotal.append(Util.completaString(Util.formatarMoedaReal(totalValorEnviado),15)+";");
				//Valor Pago
				arquivoTextoRegistroTipoTotal.append(Util.completaString(Util.formatarMoedaReal(totalValorPago),15)+";");
				//Quantidade de Parcelas em Atraso
				arquivoTextoRegistroTipoTotal.append(Util.completaString(Util.agruparNumeroEmMilhares(totalQtdeParcelasEmAtraso),10)+";");
				//Valor em Atraso
				arquivoTextoRegistroTipoTotal.append(Util.completaString(Util.formatarMoedaReal(totalValorEmAtraso),15)+";");
				//Saldo em Aberto
				arquivoTextoRegistroTipoTotal.append(Util.completaString(Util.formatarMoedaReal(totalSaldoEmAberto),15)+";");
				
				arquivoTextoRegistroTipoTotal.append(System.getProperty("line.separator"));
				
			}
	
			return arquivoTextoRegistroTipoTotal;
		}
	/////////////////////////////////////////////////////////////////////
	
	/**
	 * [UC1321] Gerar Motivos Não Geração de Contas e Imóveis em Cobrança por Empresa
	 * [SB0007] Incluir o Motivo de Não Geração da Conta
	 * [SB0009] Obter Id do Motivo de Não Geração
	 * 
	 * @author Hugo Azevedo
	 * @date 02/05/2012
	 */
	public void incluirMotivonaoGeracaoConta(Integer idImovel, Integer idComando, Integer idConta, Integer idConstanteMotivo)  throws ControladorException{
		
		try{
			//[SB0009] Obter Id do Motivo de Não Geração
			MotivoNaoGeracaoCobrancaResultado motivo = this.repositorioCobranca
					.obterMotivoNaoGeracaoCobrancaResultadoConstanteMotivo(
							idConstanteMotivo);
			
			//[SB0007] Incluir o Motivo de Não Geração da Conta
			this.repositorioCobranca.inserirImovelContaNaoGeracaoCobrancaResultado(
				idComando, motivo.getId(), idImovel, idConta);
			
		}catch(ErroRepositorioException ex){
			ex.printStackTrace();
			throw new ControladorException("erro.sistema", ex);
		}
		
	}
	
	/**
	 * [UC1321] Gerar Motivos Não Geração de Contas e Imóveis em Cobrança por Empresa
	 * [SB0005] Incluir o Motivo de Não Geração do Imóvel
	 * [SB0009] Obter Id do Motivo de Não Geração
	 * 
	 * @author Hugo Azevedo
	 * @date 30/04/2012
	 */
	public void incluirMotivonaoGeracaoImovel(Integer idImovel, Integer idComando, Integer idConstanteMotivo) throws ControladorException{
		
		try{
			
			//System.out.println("Entrou MOTIVO - "+idConstanteMotivo.intValue());
			//[SB0009] Obter Id do Motivo de Não Geração
			MotivoNaoGeracaoCobrancaResultado motivo = this.repositorioCobranca
					.obterMotivoNaoGeracaoCobrancaResultadoConstanteMotivo(
							idConstanteMotivo);
			
			//[SB0005] Incluir o Motivo de Não Geração do Imóvel
			this.repositorioCobranca.inserirImovelContaNaoGeracaoCobrancaResultado(
				idComando, motivo.getId(), idImovel, null);
			
		}catch(ErroRepositorioException ex){
			ex.printStackTrace();
			throw new ControladorException("erro.sistema", ex);
		}
		
	}
	
	/**
	 * [UC 1375] Gerar Arquivo Texto Código Barras Documento de Cobrança
	 * 
	 * @author Davi Menezes
	 * @date 28/08/2012
	 */
	public void gerarArquivoTextoCodigoBarrasDocumentoCobranca(String emailEmpresa, Collection<?> idsImoveis, 
			int idFuncionalidadeIniciada) throws ControladorException{
		
		int idUnidadeIniciada = 0;

		// ---------------------------------------------------
		// Registrar o inicio do processamento da Unidade de
		// Processamento do Batch
		// ---------------------------------------------------
		idUnidadeIniciada = getControladorBatch()
				.iniciarUnidadeProcessamentoBatch(idFuncionalidadeIniciada,
						UnidadeProcessamento.FUNCIONALIDADE, 0);
		
		Imovel imovel = null;
		Integer idImovel = null;
		String nomeClienteUsuario = "";
		String enderecoImovel = "";
		
		int cont = 1;
		
		StringBuilder nossoNumero = null;
		String nossoNumeroSemDV = "";
		Date dataVencimentoMais75 = null;
		String fatorVencimento = "";
		String especificacaoCodigoBarra = "";
		String representacaoNumericaCodigoBarraFichaCompensacao = "";
		String representacaoNumericaCodBarra = "";
		
		StringBuilder cobrancaDocumentoTxt = new StringBuilder();
		
		ExtratoDebitoRelatorioHelper extratoDebitoRelatorioHelper = null;
		CobrancaDocumento documentoCobranca = null;
		
		BigDecimal valorDocumentoCobranca = new BigDecimal("0.00");
		String dataValidade = null;
		
		Usuario usuarioBatch = this.getControladorUsuario().pesquisarUsuarioRotinaBatch();
		
		SistemaParametro sistemaParametro = getControladorUtil().pesquisarParametrosDoSistema();
		
		try{
			Iterator<?> itImoveis = idsImoveis.iterator();
			
			System.out.println("***************************************");
			System.out.println("ENTROU NO GERAR ARQUIVO TEXTO DE CÓDIGO DE BARRAS DO DOCUMENTO DE COBRANÇA");
			System.out.println("***************************************");
			
			while(itImoveis.hasNext()){
				idImovel = (Integer) itImoveis.next();
				
				imovel = getControladorImovel().pesquisarImovel(idImovel);
				
				System.out.println("***************************************");
				System.out.println("INICIO DO GERAR DOCUMENTO DE COBRANÇA PARA O IMÓVEL DE ID: " + idImovel);
				System.out.println("Imóvel " + cont + " de " + idsImoveis.size() + " .");
				System.out.println("***************************************");
				
				extratoDebitoRelatorioHelper = this.gerarDebitosImovel(imovel, usuarioBatch);
				
				nomeClienteUsuario = this.getControladorCliente().pesquisarNomeClientePorImovel(idImovel);
				
				enderecoImovel = this.getControladorEndereco().pesquisarEndereco(idImovel);
				
				documentoCobranca = extratoDebitoRelatorioHelper.getDocumentoCobranca();
				
				if(documentoCobranca != null){
					valorDocumentoCobranca = documentoCobranca.getValorDocumento();
				}
				
				cobrancaDocumentoTxt.append(Util.adicionarZerosEsquedaNumero(9, String.valueOf(idImovel)));
				cobrancaDocumentoTxt.append("#");
				cobrancaDocumentoTxt.append(Util.completaString(nomeClienteUsuario, 50));
				cobrancaDocumentoTxt.append("#");
				cobrancaDocumentoTxt.append(enderecoImovel);
				cobrancaDocumentoTxt.append("#");
				cobrancaDocumentoTxt.append(String.valueOf(valorDocumentoCobranca));
				cobrancaDocumentoTxt.append("#");
				
				if(valorDocumentoCobranca != null 
						&& sistemaParametro.getValorExtratoFichaComp() != null
						&& !sistemaParametro.getValorExtratoFichaComp().equals(new BigDecimal("0.00"))
						&& valorDocumentoCobranca.compareTo(sistemaParametro.getValorExtratoFichaComp()) >= 0){
					
					//representação numérica do código de barras
					//[SB0010] Obter Representação numérica do Nosso Número da Ficha de Compensação
					nossoNumero = getControladorFaturamento().obterNossoNumeroFichaCompensacao(
							DocumentoTipo.EXTRATO_DE_DEBITO.toString(),documentoCobranca.getId().toString()) ;
					nossoNumeroSemDV = nossoNumero.toString().substring(0,17);
					
					dataVencimentoMais75 = Util.adicionarNumeroDiasDeUmaData(new Date(),75);
					fatorVencimento = getControladorFaturamento().obterFatorVencimento(dataVencimentoMais75);
					
					especificacaoCodigoBarra = getControladorArrecadacao().
						obterEspecificacaoCodigoBarraFichaCompensacao(
					    ConstantesSistema.CODIGO_BANCO_FICHA_COMPENSACAO, 
					    ConstantesSistema.CODIGO_MOEDA_FICHA_COMPENSACAO, 
					    documentoCobranca.getValorDocumento(), nossoNumeroSemDV.toString(),
						ConstantesSistema.CARTEIRA_FICHA_COMPENSACAO, fatorVencimento);
					                                
					representacaoNumericaCodigoBarraFichaCompensacao = 
							getControladorArrecadacao().obterRepresentacaoNumericaCodigoBarraFichaCompensacao(especificacaoCodigoBarra);
					
					cobrancaDocumentoTxt.append(representacaoNumericaCodigoBarraFichaCompensacao);
					//cobrancaDocumentoTxt.append(" ");
					
					// Cria o objeto para gerar o código de
					// barras
					// no
					// padrão
					// intercalado 2 de 5
					Interleaved2of5 codigoBarraIntercalado2de5 = new Interleaved2of5();
					
					// Recupera a representação númerica do
					// código
					// de
					// barras
					// sem
					// os dígitos verificadores
					 if(especificacaoCodigoBarra != null && !especificacaoCodigoBarra.equals("")){
						 cobrancaDocumentoTxt.append("#");
						 cobrancaDocumentoTxt
								.append(Util.completaString(codigoBarraIntercalado2de5
										.encodeValue(especificacaoCodigoBarra) , 112));
						 cobrancaDocumentoTxt.append("#");
					 }
					
				}else{
					representacaoNumericaCodBarra = "";
					
					//[UC0229] Obtém a representação numérica do código de barra
					representacaoNumericaCodBarra = getControladorArrecadacao()
							.obterRepresentacaoNumericaCodigoBarra(
									5,
		                            valorDocumentoCobranca,
									documentoCobranca.getLocalidade().getId(),
									idImovel,
									null,
									null,
									null,
									null,
									String.valueOf(documentoCobranca.getNumeroSequenciaDocumento()),
									documentoCobranca.getDocumentoTipo().getId(),
									null, null,null);
					
					cobrancaDocumentoTxt.append(String.valueOf(representacaoNumericaCodBarra));
					
					// Cria o objeto para gerar o código de
					// barras
					// no
					// padrão
					// intercalado 2 de 5
					Interleaved2of5 codigoBarraIntercalado2de5 = new Interleaved2of5();
					
					// Recupera a representação númerica do
					// código
					// de
					// barras
					// sem
					// os dígitos verificadores
					String representacaoCodigoBarrasSemDigitoVerificador = representacaoNumericaCodBarra
							.substring(0, 11)
							+ representacaoNumericaCodBarra
									.substring(12, 23)
							+ representacaoNumericaCodBarra
									.substring(24, 35)
							+ representacaoNumericaCodBarra
									.substring(36, 47);
					
					cobrancaDocumentoTxt.append("#");
					cobrancaDocumentoTxt.append(Util
							.completaString("", 21));

					cobrancaDocumentoTxt
							.append(codigoBarraIntercalado2de5
									.encodeValue(representacaoCodigoBarrasSemDigitoVerificador));

					cobrancaDocumentoTxt.append(Util
							.completaString("", 17));
					cobrancaDocumentoTxt.append("#");
					
				}
				
				dataValidade = Util.formatarData(this.obterDataValidadeDocumentoCobranca(documentoCobranca, null, null));
				
				cobrancaDocumentoTxt.append(dataValidade);
				cobrancaDocumentoTxt.append("#");
				
				cobrancaDocumentoTxt.append(System
						.getProperty("line.separator"));
				
				System.out.println("***************************************");
				System.out.println("FINAL DO GERAR DOCUMENTO DE COBRANÇA PARA O IMÓVEL DE ID: " + idImovel);
				System.out.println("***************************************");
				
				cont++;
			}
			
			Date dataAtual = new Date();
			String nomeZip = "ARQUIVO_DOCUMENTO_COBRANCA_" + Util.formatarDataComHora(dataAtual);
			nomeZip = nomeZip.replace("/", "_");
			nomeZip = nomeZip.replace(":", "_");
			nomeZip = nomeZip.replace(" ", "_");
			
			// pegar o arquivo, zipar pasta e arquivo e escrever no stream
			try {

				System.out.println("***************************************");
				System.out.println("INICO DA CRIACAO DO ARQUIVO");
				System.out.println("***************************************");

				if (cobrancaDocumentoTxt != null
						&& cobrancaDocumentoTxt.length() != 0) {

					cobrancaDocumentoTxt.append("\u0004");

					// criar o arquivo zip
					File compactado = new File(nomeZip + ".zip"); // nomeZip
					ZipOutputStream zos = new ZipOutputStream(new FileOutputStream(
							compactado));

					File leitura = new File(nomeZip + ".txt");
					BufferedWriter out = new BufferedWriter(new OutputStreamWriter(
							new FileOutputStream(leitura.getAbsolutePath())));
					out.write(cobrancaDocumentoTxt.toString());
					out.flush();
					out.close();
					ZipUtil.adicionarArquivo(zos, leitura);

					// close the stream
					zos.close();
					//leitura.delete();
					
					//Enviar e-mail para a empresa
					EnvioEmail envioEmail = getControladorCadastro().pesquisarEnvioEmail(EnvioEmail.GERAR_TXT_CODIGO_BARRAS_DOCUMENTO_COBRANCA);
					
					String emailRemetente = envioEmail.getEmailRemetente();					
					String emailDestinatario = emailEmpresa + ", " + envioEmail.getEmailReceptor();					
					String tituloMensagem = envioEmail.getTituloMensagem();
					
					ServicosEmail.enviarMensagemArquivoAnexado(emailDestinatario, emailRemetente, tituloMensagem, "Arquivo Gerado em anexo", leitura);
					
				}
				System.out.println("***************************************");
				System.out.println("FIM DA CRIACAO DO ARQUIVO");
				System.out.println("***************************************");

			} catch (MessagingException e) {
				e.printStackTrace();
			} catch (IOException e) {
				e.printStackTrace();
				throw new ControladorException("erro.sistema", e);
			} catch (Exception e) {
				e.printStackTrace();
				throw new ControladorException("erro.sistema", e);
			}
			
			System.out.println("***************************************");
			System.out.println("FINAL DO GERAR ARQUIVO TEXTO DE CÓDIGO DE BARRAS DO DOCUMENTO DE COBRANÇA");
			System.out.println("***************************************");
			
			getControladorBatch().encerrarUnidadeProcessamentoBatch(null, idUnidadeIniciada, false);
			
		}catch (ControladorException e){
			e.printStackTrace();
			getControladorBatch().encerrarUnidadeProcessamentoBatch(e, idUnidadeIniciada, true);
            throw new EJBException(e);
		}catch (Exception e){
			e.printStackTrace();
			getControladorBatch().encerrarUnidadeProcessamentoBatch(e, idUnidadeIniciada, true);
            throw new EJBException(e);
		}
	}

	/**
	 * [UC1352] Gerar Arquivo TXT Parcelamentos Negociados Empresas de Cobranca
	 *
	 * @author Raimundo Martins
	 * @date 23/07/2012
	 *
	 * @throws ControladorException
	 */
	public void gerarArquivoTxtParcelamentosNegociadosEmpresaCobranca(int idFuncionalidadeIniciada)
			throws ControladorException{
		int idUnidadeIniciada = 0;		        
		
		// ------------------------- // Registrar o início do processamento da Unidade de Processamento do Batch // ------------------------- //		
		
		idUnidadeIniciada = getControladorBatch().iniciarUnidadeProcessamentoBatch(idFuncionalidadeIniciada,UnidadeProcessamento.FUNCIONALIDADE, 0);
		try {			
			Collection<Object[]> dadosEmpresas = this.repositorioCobranca.pesquisarEmpresasParcelamentosNegociados();			
			String nomeArquivo;
			String valorTotalNegociado;
			String valorEntrada;
			String numeroParcelas;
			String valorPrestacao;
			String valorDesconto;
			String diaVencimentoImovel;
			String referenciaConta;
			String valorConta;
			String valorDebito;
			String valorCredito;
			String valorGuia;
			int cont = 0;
			int contPart = 1;
			boolean atulizaParc = false;
			Collection<Integer> idsParcAtualizar = new ArrayList<Integer>();			
									
			String data = Util.formatarDataSemBarraDDMMAAAA(new Date());
			StringBuilder arquivo = new StringBuilder("");	
			if (dadosEmpresas != null && !dadosEmpresas.isEmpty()) {
				for(Object[] dadoEmpresa: dadosEmpresas){
					Integer idEmpresa = (Integer) dadoEmpresa[0];
					String emailEmpresa = (String) dadoEmpresa[1];
					// 2. O sistema deverá verificar todos os comandos de cobrança por resultados executados					
					Collection<Object[]> dadosComandos =this.repositorioCobranca.pesquisarComandosCobrancaExecutados(idEmpresa);	
							
					if (dadosComandos != null && !dadosComandos.isEmpty()) {
						for(Object[] dadoComando : dadosComandos){
							Collection<Integer> imoveis = this.repositorioCobranca.pesquisarImoveisPorComando((Integer) dadoComando[0]);
							if(imoveis !=null && !imoveis.isEmpty()){
								for(Integer idImovel : imoveis){
									Collection<Object[]> parcelamentos = this.repositorioCobranca
											.pesquisarParcelamentosPorImovel(idImovel,(Integer) dadoComando[0]);									
									if(parcelamentos !=null && !parcelamentos.isEmpty()){
										for(Object[] parcelamento : parcelamentos){
											Integer idGuia = this.repositorioCobranca.entradaParcelamentoPaga((Integer)parcelamento[0], null, null);
											if(idGuia !=null && idGuia.compareTo(0) > 0){
												valorEntrada = Util.adicionarZerosEsquedaNumero(16, Util
														.formataBigDecimal((BigDecimal)parcelamento[2],2,false));
												Collection<Object[]> contas = this.repositorioCobranca
														  .pesquisarContasPorParcelamento((Integer)parcelamento[0]);
												for(Object[] conta : contas){									
														valorTotalNegociado = Util.adicionarZerosEsquedaNumero(16, Util
																		.formataBigDecimal((BigDecimal)parcelamento[1],2,false));
														
														numeroParcelas = parcelamento[3].toString();
														if(numeroParcelas.length() == 1)
															numeroParcelas = "00"+numeroParcelas;
														if(numeroParcelas.length() == 2)
															numeroParcelas = "0"+numeroParcelas;
															
														valorPrestacao = Util.adicionarZerosEsquedaNumero(16, Util
																.formataBigDecimal((BigDecimal)parcelamento[4],2,false));
														
														valorDesconto = Util.adicionarZerosEsquedaNumero(16, Util
																.formataBigDecimal((BigDecimal)parcelamento[5],2,false));
														
														diaVencimentoImovel = Util.adicionarZerosEsquedaNumero(2,this.repositorioCobranca
																.pesquisarProvavelDiaVencimentoImovel(idImovel));
														referenciaConta = Util.formatarAnoMesParaMesAno(conta[0].toString());
														valorConta = Util.adicionarZerosEsquedaNumero(16, Util.formataBigDecimal((BigDecimal)conta[1],2,false));
														valorDebito = Util.adicionarZerosEsquedaNumero(16,"0,00");
														valorCredito = Util.adicionarZerosEsquedaNumero(16,"0,00");
														valorGuia = Util.adicionarZerosEsquedaNumero(16,"0,00");
														
														arquivo.append(
																Util.adicionarZerosEsquedaNumero(10,idEmpresa.toString())+"#"+
																Util.adicionarZerosEsquedaNumero(10,dadoComando[0].toString())+"#"+
																Util.adicionarZerosEsquedaNumero(10,idImovel.toString())+"#"+
																Util.adicionarZerosEsquedaNumero(10,parcelamento[0].toString())+"#"+
																valorTotalNegociado+"#"+
																valorEntrada+"#"+
																numeroParcelas+"#"+
																valorPrestacao+"#"+
																valorDesconto+"#"+														
																diaVencimentoImovel+"#"+
																referenciaConta+"#"+
																valorConta+"#"+
																valorDebito+"#"+
																valorCredito+"#"+
																valorGuia);
														arquivo.append(System.getProperty("line.separator"));
														cont++;
														if(!idsParcAtualizar.contains((Integer) parcelamento[0]))
															idsParcAtualizar.add((Integer) parcelamento[0]);
														//Envia o arquivo a cada 10.000 linhas
														if (arquivo != null && !arquivo.toString().trim().equals("") && cont == 10000) {													
															atulizaParc = true;
															nomeArquivo = "parcelamentos_negociados_" + idEmpresa + "_" + data + "_parte"+contPart+".txt";
															this.enviarArquivoTxtParcelamentoNegociados(nomeArquivo, arquivo, idsParcAtualizar ,emailEmpresa);											
															cont = 0;
															contPart++;
															arquivo = new StringBuilder("");															
														}
													
												}
												
												BigDecimal debitos = this.repositorioCobranca
																					 .pesquisarValoresDebitoACobrarParcelamento((Integer)parcelamento[0]);
												BigDecimal creditos = this.repositorioCobranca
														 							 .pesquisarValoresCreditoARealizarParcelamento((Integer)parcelamento[0]);										
												BigDecimal guias = this.repositorioCobranca
														 						   .pesquisarValoresGuiaPagamentoParcelamento((Integer)parcelamento[0]);
												
												
												if(debitos !=null && debitos.compareTo(new BigDecimal(0)) > 0){													
													valorTotalNegociado = Util.adicionarZerosEsquedaNumero(16, Util
															.formataBigDecimal((BigDecimal)parcelamento[1],2,false));
													
													numeroParcelas = parcelamento[3].toString();
													if(numeroParcelas.length() == 1)
														numeroParcelas = "00"+numeroParcelas;
													if(numeroParcelas.length() == 2)
														numeroParcelas = "0"+numeroParcelas;
														
													valorPrestacao = Util.adicionarZerosEsquedaNumero(16, Util
															.formataBigDecimal((BigDecimal)parcelamento[4],2,false));
													
													valorDesconto = Util.adicionarZerosEsquedaNumero(16, Util
															.formataBigDecimal((BigDecimal)parcelamento[5],2,false));
													
													diaVencimentoImovel = Util.adicionarZerosEsquedaNumero(2,this.repositorioCobranca
															.pesquisarProvavelDiaVencimentoImovel(idImovel));
													referenciaConta = "00/0000";
													valorConta = Util.adicionarZerosEsquedaNumero(16, "0,00");
													valorDebito = Util.adicionarZerosEsquedaNumero(16,Util.formataBigDecimal(debitos,2,false));
													valorCredito = Util.adicionarZerosEsquedaNumero(16,"0,00");
													valorGuia = Util.adicionarZerosEsquedaNumero(16,"0,00");
													
													arquivo.append(
															Util.adicionarZerosEsquedaNumero(10,idEmpresa.toString())+"#"+
															Util.adicionarZerosEsquedaNumero(10,dadoComando[0].toString())+"#"+
															Util.adicionarZerosEsquedaNumero(10,idImovel.toString())+"#"+
															Util.adicionarZerosEsquedaNumero(10,parcelamento[0].toString())+"#"+
															valorTotalNegociado+"#"+
															valorEntrada+"#"+
															numeroParcelas+"#"+
															valorPrestacao+"#"+
															valorDesconto+"#"+														
															diaVencimentoImovel+"#"+
															referenciaConta+"#"+
															valorConta+"#"+
															valorDebito+"#"+
															valorCredito+"#"+
															valorGuia);
													arquivo.append(System.getProperty("line.separator"));
													cont++;
													if(!idsParcAtualizar.contains((Integer) parcelamento[0]))
														idsParcAtualizar.add((Integer) parcelamento[0]);
													//Envia o arquivo a cada 10.000 linhas
													if (arquivo != null && !arquivo.toString().trim().equals("") && cont == 10000) {													
														atulizaParc = true;
														nomeArquivo = "parcelamentos_negociados_" + idEmpresa + "_" + data + "_parte"+contPart+".txt";
														this.enviarArquivoTxtParcelamentoNegociados(nomeArquivo, arquivo, idsParcAtualizar ,emailEmpresa);											
														cont = 0;
														contPart++;
														arquivo = new StringBuilder("");														
													}
												}
												
												if(creditos !=null && creditos.compareTo(new BigDecimal(0)) > 0){													
													valorTotalNegociado = Util.adicionarZerosEsquedaNumero(16, Util
															.formataBigDecimal((BigDecimal)parcelamento[1],2,false));
													
													numeroParcelas = parcelamento[3].toString();
													if(numeroParcelas.length() == 1)
														numeroParcelas = "00"+numeroParcelas;
													if(numeroParcelas.length() == 2)
														numeroParcelas = "0"+numeroParcelas;
														
													valorPrestacao = Util.adicionarZerosEsquedaNumero(16, Util
															.formataBigDecimal((BigDecimal)parcelamento[4],2,false));
													
													valorDesconto = Util.adicionarZerosEsquedaNumero(16, Util
															.formataBigDecimal((BigDecimal)parcelamento[5],2,false));
													
													diaVencimentoImovel = Util.adicionarZerosEsquedaNumero(2,this.repositorioCobranca
															.pesquisarProvavelDiaVencimentoImovel(idImovel));
													referenciaConta = "00/0000";
													valorConta = Util.adicionarZerosEsquedaNumero(16, "0,00");
													valorDebito = Util.adicionarZerosEsquedaNumero(16,"0,00");
													valorCredito = Util.adicionarZerosEsquedaNumero(16,Util.formataBigDecimal(creditos,2,false));
													valorGuia = Util.adicionarZerosEsquedaNumero(16,"0,00");
													
													arquivo.append(
															Util.adicionarZerosEsquedaNumero(10,idEmpresa.toString())+"#"+
															Util.adicionarZerosEsquedaNumero(10,dadoComando[0].toString())+"#"+
															Util.adicionarZerosEsquedaNumero(10,idImovel.toString())+"#"+
															Util.adicionarZerosEsquedaNumero(10,parcelamento[0].toString())+"#"+
															valorTotalNegociado+"#"+
															valorEntrada+"#"+
															numeroParcelas+"#"+
															valorPrestacao+"#"+
															valorDesconto+"#"+														
															diaVencimentoImovel+"#"+
															referenciaConta+"#"+
															valorConta+"#"+
															valorDebito+"#"+
															valorCredito+"#"+
															valorGuia);
													arquivo.append(System.getProperty("line.separator"));
													cont++;
													if(!idsParcAtualizar.contains((Integer) parcelamento[0]))
														idsParcAtualizar.add((Integer) parcelamento[0]);
													//Envia o arquivo a cada 10.000 linhas
													if (arquivo != null && !arquivo.toString().trim().equals("") && cont == 10000) {													
														atulizaParc = true;
														nomeArquivo = "parcelamentos_negociados_" + idEmpresa + "_" + data + "_parte"+contPart+".txt";
														this.enviarArquivoTxtParcelamentoNegociados(nomeArquivo, arquivo, idsParcAtualizar ,emailEmpresa);											
														cont = 0;
														contPart++;
														arquivo = new StringBuilder("");														
													}
												}
												
												if(guias !=null && guias.compareTo(new BigDecimal(0)) > 0){													
													valorTotalNegociado = Util.adicionarZerosEsquedaNumero(16, Util
															.formataBigDecimal((BigDecimal)parcelamento[1],2,false));
													
													numeroParcelas = parcelamento[3].toString();
													if(numeroParcelas.length() == 1)
														numeroParcelas = "00"+numeroParcelas;
													if(numeroParcelas.length() == 2)
														numeroParcelas = "0"+numeroParcelas;
														
													valorPrestacao = Util.adicionarZerosEsquedaNumero(16, Util
															.formataBigDecimal((BigDecimal)parcelamento[4],2,false));
													
													valorDesconto = Util.adicionarZerosEsquedaNumero(16, Util
															.formataBigDecimal((BigDecimal)parcelamento[5],2,false));
													
													diaVencimentoImovel = Util.adicionarZerosEsquedaNumero(2,this.repositorioCobranca
															.pesquisarProvavelDiaVencimentoImovel(idImovel));
													referenciaConta = "00/0000";
													valorConta = Util.adicionarZerosEsquedaNumero(16, "0,00");
													valorDebito = Util.adicionarZerosEsquedaNumero(16,"0,00");
													valorCredito = Util.adicionarZerosEsquedaNumero(16,"0,00");
													valorGuia = Util.adicionarZerosEsquedaNumero(16,Util.formataBigDecimal(guias,2,false));
													
													arquivo.append(
															Util.adicionarZerosEsquedaNumero(10,idEmpresa.toString())+"#"+
															Util.adicionarZerosEsquedaNumero(10,dadoComando[0].toString())+"#"+
															Util.adicionarZerosEsquedaNumero(10,idImovel.toString())+"#"+
															Util.adicionarZerosEsquedaNumero(10,parcelamento[0].toString())+"#"+
															valorTotalNegociado+"#"+
															valorEntrada+"#"+
															numeroParcelas+"#"+
															valorPrestacao+"#"+
															valorDesconto+"#"+														
															diaVencimentoImovel+"#"+
															referenciaConta+"#"+
															valorConta+"#"+
															valorDebito+"#"+
															valorCredito+"#"+
															valorGuia);
													arquivo.append(System.getProperty("line.separator"));
													cont++;
													if(!idsParcAtualizar.contains((Integer) parcelamento[0]))
														idsParcAtualizar.add((Integer) parcelamento[0]);
													//Envia o arquivo a cada 10.000 linhas
													if (arquivo != null && !arquivo.toString().trim().equals("") && cont == 10000) {													
														atulizaParc = true;
														nomeArquivo = "parcelamentos_negociados_" + idEmpresa + "_" + data + "_parte"+contPart+".txt";
														this.enviarArquivoTxtParcelamentoNegociados(nomeArquivo, arquivo, idsParcAtualizar ,emailEmpresa);											
														cont = 0;
														contPart++;
														arquivo = new StringBuilder("");														
													}
												}
												
											}
											else if(this.repositorioCobranca.existeEntradaParcelamento((Integer)parcelamento[0]) == false){												
												valorEntrada = Util.adicionarZerosEsquedaNumero(16,"0,00");
												
												Collection<Object[]> contas = this.repositorioCobranca
														  .pesquisarContasPorParcelamento((Integer)parcelamento[0]);
												for(Object[] conta : contas){									
														valorTotalNegociado = Util.adicionarZerosEsquedaNumero(16, Util
																		.formataBigDecimal((BigDecimal)parcelamento[1],2,false));
														
														numeroParcelas = parcelamento[3].toString();
														if(numeroParcelas.length() == 1)
															numeroParcelas = "00"+numeroParcelas;
														if(numeroParcelas.length() == 2)
															numeroParcelas = "0"+numeroParcelas;
															
														valorPrestacao = Util.adicionarZerosEsquedaNumero(16, Util
																.formataBigDecimal((BigDecimal)parcelamento[4],2,false));
														
														valorDesconto = Util.adicionarZerosEsquedaNumero(16, Util
																.formataBigDecimal((BigDecimal)parcelamento[5],2,false));
														
														diaVencimentoImovel = Util.adicionarZerosEsquedaNumero(2,this.repositorioCobranca
																.pesquisarProvavelDiaVencimentoImovel(idImovel));
														referenciaConta = Util.formatarAnoMesParaMesAno(conta[0].toString());
														valorConta = Util.adicionarZerosEsquedaNumero(16, Util.formataBigDecimal((BigDecimal)conta[1],2,false));
														valorDebito = Util.adicionarZerosEsquedaNumero(16,"0,00");
														valorCredito = Util.adicionarZerosEsquedaNumero(16,"0,00");
														valorGuia = Util.adicionarZerosEsquedaNumero(16,"0,00");
														
														arquivo.append(
																Util.adicionarZerosEsquedaNumero(10,idEmpresa.toString())+"#"+
																Util.adicionarZerosEsquedaNumero(10,dadoComando[0].toString())+"#"+
																Util.adicionarZerosEsquedaNumero(10,idImovel.toString())+"#"+
																Util.adicionarZerosEsquedaNumero(10,parcelamento[0].toString())+"#"+
																valorTotalNegociado+"#"+
																valorEntrada+"#"+
																numeroParcelas+"#"+
																valorPrestacao+"#"+
																valorDesconto+"#"+														
																diaVencimentoImovel+"#"+
																referenciaConta+"#"+
																valorConta+"#"+
																valorDebito+"#"+
																valorCredito+"#"+
																valorGuia);
														arquivo.append(System.getProperty("line.separator"));
														cont++;
														if(!idsParcAtualizar.contains((Integer) parcelamento[0]))
															idsParcAtualizar.add((Integer) parcelamento[0]);
														//Envia o arquivo a cada 10.000 linhas
														if (arquivo != null && !arquivo.toString().trim().equals("") && cont == 10000) {													
															atulizaParc = true;
															nomeArquivo = "parcelamentos_negociados_" + idEmpresa + "_" + data + "_parte"+contPart+".txt";
															this.enviarArquivoTxtParcelamentoNegociados(nomeArquivo, arquivo, idsParcAtualizar ,emailEmpresa);											
															cont = 0;
															contPart++;
															arquivo = new StringBuilder("");															
														}
													
												}
												
												BigDecimal debitos = this.repositorioCobranca
																					 .pesquisarValoresDebitoACobrarParcelamento((Integer)parcelamento[0]);
												BigDecimal creditos = this.repositorioCobranca
														 							 .pesquisarValoresCreditoARealizarParcelamento((Integer)parcelamento[0]);										
												BigDecimal guias = this.repositorioCobranca
														 						   .pesquisarValoresGuiaPagamentoParcelamento((Integer)parcelamento[0]);
												
												
												if(debitos !=null && debitos.compareTo(new BigDecimal(0)) > 0){													
													valorTotalNegociado = Util.adicionarZerosEsquedaNumero(16, Util
															.formataBigDecimal((BigDecimal)parcelamento[1],2,false));
													
													numeroParcelas = parcelamento[3].toString();
													if(numeroParcelas.length() == 1)
														numeroParcelas = "00"+numeroParcelas;
													if(numeroParcelas.length() == 2)
														numeroParcelas = "0"+numeroParcelas;
														
													valorPrestacao = Util.adicionarZerosEsquedaNumero(16, Util
															.formataBigDecimal((BigDecimal)parcelamento[4],2,false));
													
													valorDesconto = Util.adicionarZerosEsquedaNumero(16, Util
															.formataBigDecimal((BigDecimal)parcelamento[5],2,false));
													
													diaVencimentoImovel = Util.adicionarZerosEsquedaNumero(2,this.repositorioCobranca
															.pesquisarProvavelDiaVencimentoImovel(idImovel));
													referenciaConta = "00/0000";
													valorConta = Util.adicionarZerosEsquedaNumero(16, "0,00");
													valorDebito = Util.adicionarZerosEsquedaNumero(16,Util.formataBigDecimal(debitos,2,false));
													valorCredito = Util.adicionarZerosEsquedaNumero(16,"0,00");
													valorGuia = Util.adicionarZerosEsquedaNumero(16,"0,00");
													
													arquivo.append(
															Util.adicionarZerosEsquedaNumero(10,idEmpresa.toString())+"#"+
															Util.adicionarZerosEsquedaNumero(10,dadoComando[0].toString())+"#"+
															Util.adicionarZerosEsquedaNumero(10,idImovel.toString())+"#"+
															Util.adicionarZerosEsquedaNumero(10,parcelamento[0].toString())+"#"+
															valorTotalNegociado+"#"+
															valorEntrada+"#"+
															numeroParcelas+"#"+
															valorPrestacao+"#"+
															valorDesconto+"#"+														
															diaVencimentoImovel+"#"+
															referenciaConta+"#"+
															valorConta+"#"+
															valorDebito+"#"+
															valorCredito+"#"+
															valorGuia);
													arquivo.append(System.getProperty("line.separator"));
													cont++;
													if(!idsParcAtualizar.contains((Integer) parcelamento[0]))
														idsParcAtualizar.add((Integer) parcelamento[0]);
													//Envia o arquivo a cada 10.000 linhas
													if (arquivo != null && !arquivo.toString().trim().equals("") && cont == 10000) {													
														atulizaParc = true;
														nomeArquivo = "parcelamentos_negociados_" + idEmpresa + "_" + data + "_parte"+contPart+".txt";
														this.enviarArquivoTxtParcelamentoNegociados(nomeArquivo, arquivo, idsParcAtualizar ,emailEmpresa);											
														cont = 0;
														contPart++;
														arquivo = new StringBuilder("");														
													}
												}
												
												if(creditos !=null && creditos.compareTo(new BigDecimal(0)) > 0){													
													valorTotalNegociado = Util.adicionarZerosEsquedaNumero(16, Util
															.formataBigDecimal((BigDecimal)parcelamento[1],2,false));
													
													numeroParcelas = parcelamento[3].toString();
													if(numeroParcelas.length() == 1)
														numeroParcelas = "00"+numeroParcelas;
													if(numeroParcelas.length() == 2)
														numeroParcelas = "0"+numeroParcelas;
														
													valorPrestacao = Util.adicionarZerosEsquedaNumero(16, Util
															.formataBigDecimal((BigDecimal)parcelamento[4],2,false));
													
													valorDesconto = Util.adicionarZerosEsquedaNumero(16, Util
															.formataBigDecimal((BigDecimal)parcelamento[5],2,false));
													
													diaVencimentoImovel = Util.adicionarZerosEsquedaNumero(2,this.repositorioCobranca
															.pesquisarProvavelDiaVencimentoImovel(idImovel));
													referenciaConta = "00/0000";
													valorConta = Util.adicionarZerosEsquedaNumero(16, "0,00");
													valorDebito = Util.adicionarZerosEsquedaNumero(16,"0,00");
													valorCredito = Util.adicionarZerosEsquedaNumero(16,Util.formataBigDecimal(creditos,2,false));
													valorGuia = Util.adicionarZerosEsquedaNumero(16,"0,00");
													
													arquivo.append(
															Util.adicionarZerosEsquedaNumero(10,idEmpresa.toString())+"#"+
															Util.adicionarZerosEsquedaNumero(10,dadoComando[0].toString())+"#"+
															Util.adicionarZerosEsquedaNumero(10,idImovel.toString())+"#"+
															Util.adicionarZerosEsquedaNumero(10,parcelamento[0].toString())+"#"+
															valorTotalNegociado+"#"+
															valorEntrada+"#"+
															numeroParcelas+"#"+
															valorPrestacao+"#"+
															valorDesconto+"#"+														
															diaVencimentoImovel+"#"+
															referenciaConta+"#"+
															valorConta+"#"+
															valorDebito+"#"+
															valorCredito+"#"+
															valorGuia);
													arquivo.append(System.getProperty("line.separator"));
													cont++;
													if(!idsParcAtualizar.contains((Integer) parcelamento[0]))
														idsParcAtualizar.add((Integer) parcelamento[0]);
													//Envia o arquivo a cada 10.000 linhas
													if (arquivo != null && !arquivo.toString().trim().equals("") && cont == 10000) {													
														atulizaParc = true;
														nomeArquivo = "parcelamentos_negociados_" + idEmpresa + "_" + data + "_parte"+contPart+".txt";
														this.enviarArquivoTxtParcelamentoNegociados(nomeArquivo, arquivo, idsParcAtualizar ,emailEmpresa);											
														cont = 0;
														contPart++;
														arquivo = new StringBuilder("");														
													}
												}
												
												if(guias !=null && guias.compareTo(new BigDecimal(0)) > 0){													
													valorTotalNegociado = Util.adicionarZerosEsquedaNumero(16, Util
															.formataBigDecimal((BigDecimal)parcelamento[1],2,false));
													
													numeroParcelas = parcelamento[3].toString();
													if(numeroParcelas.length() == 1)
														numeroParcelas = "00"+numeroParcelas;
													if(numeroParcelas.length() == 2)
														numeroParcelas = "0"+numeroParcelas;
														
													valorPrestacao = Util.adicionarZerosEsquedaNumero(16, Util
															.formataBigDecimal((BigDecimal)parcelamento[4],2,false));
													
													valorDesconto = Util.adicionarZerosEsquedaNumero(16, Util
															.formataBigDecimal((BigDecimal)parcelamento[5],2,false));
													
													diaVencimentoImovel = Util.adicionarZerosEsquedaNumero(2,this.repositorioCobranca
															.pesquisarProvavelDiaVencimentoImovel(idImovel));
													referenciaConta = "00/0000";
													valorConta = Util.adicionarZerosEsquedaNumero(16, "0,00");
													valorDebito = Util.adicionarZerosEsquedaNumero(16,"0,00");
													valorCredito = Util.adicionarZerosEsquedaNumero(16,"0,00");
													valorGuia = Util.adicionarZerosEsquedaNumero(16,Util.formataBigDecimal(guias,2,false));
													
													arquivo.append(
															Util.adicionarZerosEsquedaNumero(10,idEmpresa.toString())+"#"+
															Util.adicionarZerosEsquedaNumero(10,dadoComando[0].toString())+"#"+
															Util.adicionarZerosEsquedaNumero(10,idImovel.toString())+"#"+
															Util.adicionarZerosEsquedaNumero(10,parcelamento[0].toString())+"#"+
															valorTotalNegociado+"#"+
															valorEntrada+"#"+
															numeroParcelas+"#"+
															valorPrestacao+"#"+
															valorDesconto+"#"+														
															diaVencimentoImovel+"#"+
															referenciaConta+"#"+
															valorConta+"#"+
															valorDebito+"#"+
															valorCredito+"#"+
															valorGuia);
													arquivo.append(System.getProperty("line.separator"));
													cont++;
													if(!idsParcAtualizar.contains((Integer) parcelamento[0]))
														idsParcAtualizar.add((Integer) parcelamento[0]);
													//Envia o arquivo a cada 10.000 linhas
													if (arquivo != null && !arquivo.toString().trim().equals("") && cont == 10000) {													
														atulizaParc = true;
														nomeArquivo = "parcelamentos_negociados_" + idEmpresa + "_" + data + "_parte"+contPart+".txt";
														this.enviarArquivoTxtParcelamentoNegociados(nomeArquivo, arquivo, idsParcAtualizar ,emailEmpresa);
														cont = 0;
														contPart++;
														arquivo = new StringBuilder("");														
													}
												}
											}											
										}
										if(atulizaParc == true){											
											for(Integer id : idsParcAtualizar){
												this.repositorioCobranca.atualizarParcelmentoNegociadoEnviado(id);
											}											
											idsParcAtualizar.clear();
											atulizaParc = false;
										}
									}								
								}
							}
						}
					}
					if (arquivo != null && !arquivo.toString().trim().equals("")) {
						nomeArquivo = "parcelamentos_negociados_" + idEmpresa + "_" + data + "_parte"+contPart+".txt";
						this.enviarArquivoTxtParcelamentoNegociados(nomeArquivo, arquivo, idsParcAtualizar ,emailEmpresa);											
						cont = 0;					
						arquivo = new StringBuilder("");
						if(idsParcAtualizar !=null && !idsParcAtualizar.isEmpty()){
							for(Integer id : idsParcAtualizar){
								this.repositorioCobranca.atualizarParcelmentoNegociadoEnviado(id);
							}
							idsParcAtualizar.clear();
						}
						
					}
					else{
						if(contPart == 1){
							EnvioEmail envioEmail = getControladorCadastro().pesquisarEnvioEmail(
									EnvioEmail.GERAR_TXT_PARCELAMENTOS_NEGOCIADOS_EMPRESAS_COBRANCA_SEM_DADOS);		
						
							String emailRemetente = envioEmail.getEmailRemetente();					
							String emailDestinatario = emailEmpresa + ", " + envioEmail.getEmailReceptor();					
							String tituloMensagem = envioEmail.getTituloMensagem();					
							String mensagem = envioEmail.getCorpoMensagem();
						
							try {
								ServicosEmail.enviarMensagem(emailRemetente, emailDestinatario, tituloMensagem, 
									mensagem);
							} catch (Exception e) {
								System.out.println("Erro no envio do email! Não existia dados para criação do arquivo..");
								e.printStackTrace();
								getControladorBatch().encerrarUnidadeProcessamentoBatch(e, idUnidadeIniciada, true);
								
							}
						}
					}
				}
			}
			getControladorBatch().encerrarUnidadeProcessamentoBatch(null, idUnidadeIniciada, false);
						
		} catch (Exception e) {
			System.out.println("Erro! Verificar Arquivo criado no BIN.");
			e.printStackTrace();
			//sessionContext.setRollbackOnly();
			getControladorBatch().encerrarUnidadeProcessamentoBatch(e,                    
					idUnidadeIniciada, true);
			
			throw new EJBException(e);        
		}
	}
	private void enviarArquivoTxtParcelamentoNegociados(String nomeArquivo, StringBuilder arquivo, 
			Collection<Integer> idsParcAtualizar, String emailEmpresa) throws ControladorException {	
		try{
			File leitura = null;
			BufferedWriter out = null;
			
			leitura = new File(nomeArquivo);
			out = new BufferedWriter(new OutputStreamWriter( new FileOutputStream(leitura.getAbsolutePath())));
			out.write(arquivo.toString());
			out.flush();
			out.close();			
			EnvioEmail envioEmail = getControladorCadastro().pesquisarEnvioEmail(EnvioEmail.GERAR_TXT_PARCELAMENTOS_NEGOCIADOS_EMPRESAS_COBRANCA);
			
			String emailRemetente = envioEmail.getEmailRemetente();					
			String emailDestinatario = emailEmpresa + ", " + envioEmail.getEmailReceptor();					
			String tituloMensagem = envioEmail.getTituloMensagem();
			
			ServicosEmail.enviarMensagemArquivoAnexado(emailDestinatario, emailRemetente, tituloMensagem, "Arquivo Gerado em anexo", leitura);	
			
			
			
			//leitura.delete();
			
			
			
		} catch (Exception ex) {
			ex.printStackTrace();
			System.out.println("Erro! Verificar Arquivo criado no BIN.");
			throw new ControladorException("erro.sistema", ex);
		}
	}
	/**	 
	 * [UC 1353] Relatório de Retorno das Ordens de Fiscalização	
	 * Método que pesquisa os dados necessário para 	 
	 * gerar o relatório RelatorioRetornoOSFiscalizacao	 
	 * @date 09/07/2012	 
	 * @author Raimundo Martins	 
	 **/	
	public List<RelatorioRetornoOrdemServicoFiscalizacaoBean> obterDadosRelatorioRetornoOSFiscalizacao(
			 InformarDadosGeracaoResumoAcaoConsultaEventualHelper helper, Integer cobrancaAcaoId, Integer idCobrancaAcaoSituacao, 
			 Map<String, Object> parametros, Integer mesAno, String[] situacoes) 
					 throws ControladorException{
		 try{
			 Collection <Object[]> dados = this.repositorioCobranca
					 .obterDadosRelatorioRetornoOSFiscalizacao(helper, cobrancaAcaoId, idCobrancaAcaoSituacao, mesAno, situacoes);
			 List<RelatorioRetornoOrdemServicoFiscalizacaoBean> retorno = new ArrayList<RelatorioRetornoOrdemServicoFiscalizacaoBean>();
			
			 if(dados !=null && !dados.isEmpty()){
				 for(Object[] ob : dados){
					 
					 boolean entrou = false;
					 boolean criarBean = true;
					 Categoria categoria = getControladorImovel().obterPrincipalCategoriaImovel((Integer)ob[9]);
					 String inscricaoImovel = getControladorImovel().pesquisarInscricaoImovel((Integer)ob[9]);
					 
					 Collection<Object[]> dadosDebitosGerados = this.repositorioCobranca.obterDebitosGerados((Integer) ob[8]);
					 if(dadosDebitosGerados !=null && !dadosDebitosGerados.isEmpty()){
						 criarBean = false;
						 for(Object[] debito : dadosDebitosGerados){
							 RelatorioRetornoOrdemServicoFiscalizacaoBean bean = new RelatorioRetornoOrdemServicoFiscalizacaoBean();
							 bean.setGerenciaRegional(ob[1].toString());
							 bean.setUnidadeNegocio(ob[3].toString());
							 bean.setLocalidade(ob[5].toString());
							 bean.setSituacao(ob[7].toString());
							 bean.setNumeroOS((Integer)ob[8]);
							 bean.setMatriculaImovel((Integer)ob[9]);
							 bean.setCliente(ob[12].toString());
							 bean.setPerfilImovel(ob[10].toString());	
							 bean.setDataRetorno((Date) ob[11]);
							 bean.setInscricaoImovel(inscricaoImovel);
							 bean.setCategoria(categoria.getDescricao());
							 
							 List<RetornosInformadosRelatorioRetornoOSFiscalizacaoHelper>
							 	retornosInformados = new ArrayList<RetornosInformadosRelatorioRetornoOSFiscalizacaoHelper>();
							 
							 Collection<String> dadosRetornosInformados = this.repositorioCobranca.obterRetornosInformados((Integer) ob[8]);
							 if(dadosRetornosInformados !=null && !dadosRetornosInformados.isEmpty()){
								 for(String str : dadosRetornosInformados){
									 if(!str.equalsIgnoreCase(bean.getSituacao())){
										 RetornosInformadosRelatorioRetornoOSFiscalizacaoHelper
										 retornoInformado =  new RetornosInformadosRelatorioRetornoOSFiscalizacaoHelper();
										 retornoInformado.setDescricaoRetorno(str);
									 
										 retornosInformados.add(retornoInformado);
									 }
								 }
							 }
							 bean.setRetornosInfomados(new JRBeanCollectionDataSource(retornosInformados));
							 
							 bean.setDescricaoDebito("Débitos Gerados:");
							 bean.setTipoDebito(debito[2].toString());
							 bean.setValorDebito((BigDecimal) debito[3]);
							 if(new Integer(debito[1].toString()).compareTo(DebitoCreditoSituacao.CANCELADA) == 0){
								 bean.setSituacaoDebito("CANCELADO");								 
							 }								 	
							 else{	
								 if(this.repositorioCobranca.isDebitoGeradoPago(new Integer(debito[0].toString()))){
									 bean.setSituacaoDebito("PAGO");								 
								 }
								 else if(this.repositorioCobranca.isDebitoGeradoPagoEmConta(new Integer(debito[0].toString()))){
									 bean.setSituacaoDebito("PAGO");								 
								 }
								 else if(this.repositorioCobranca.isDebitoGeradoParcelado(new Integer(debito[0].toString()))){
									 bean.setSituacaoDebito("PARCELADO");								 
								 }
								 else if(this.repositorioCobranca.isDebitoGeradoParceladoEmConta(new Integer(debito[0].toString()))){
									 bean.setSituacaoDebito("PARCELADO");									 
								 }
								 else{
									 bean.setSituacaoDebito("PENDENTE");							 
								 }
							}
							 retorno.add(bean);
						}
					 }
					Collection<Object[]> dadosItensDocumentosCobrado = this.pesquisarItensDocumentoCobranca((Integer) ob[13], (BigDecimal)ob[14]);
					 if(dadosItensDocumentosCobrado !=null && !dadosItensDocumentosCobrado.isEmpty()){
						 criarBean = false;
						 for(Object[] itensDocumentoCobrado : dadosItensDocumentosCobrado){
							 RelatorioRetornoOrdemServicoFiscalizacaoBean bean = new RelatorioRetornoOrdemServicoFiscalizacaoBean();
							 bean.setGerenciaRegional(ob[1].toString());
							 bean.setUnidadeNegocio(ob[3].toString());
							 bean.setLocalidade(ob[5].toString());
							 bean.setSituacao(ob[7].toString());
							 bean.setNumeroOS((Integer)ob[8]);
							 bean.setMatriculaImovel((Integer)ob[9]);
							 bean.setCliente(ob[12].toString());
							 bean.setPerfilImovel(ob[10].toString());	
							 bean.setDataRetorno((Date) ob[11]);
							 bean.setInscricaoImovel(inscricaoImovel);
							 bean.setCategoria(categoria.getDescricao());
							 
							 List<RetornosInformadosRelatorioRetornoOSFiscalizacaoHelper>
							 	retornosInformados = new ArrayList<RetornosInformadosRelatorioRetornoOSFiscalizacaoHelper>();
							 
							 Collection<String> dadosRetornosInformados = this.repositorioCobranca.obterRetornosInformados((Integer) ob[8]);
							 if(dadosRetornosInformados !=null && !dadosRetornosInformados.isEmpty()){
								 for(String str : dadosRetornosInformados){
									 if(!str.equalsIgnoreCase(bean.getSituacao())){
										 RetornosInformadosRelatorioRetornoOSFiscalizacaoHelper
										 retornoInformado =  new RetornosInformadosRelatorioRetornoOSFiscalizacaoHelper();
										 retornoInformado.setDescricaoRetorno(str);
									 
										 retornosInformados.add(retornoInformado);
									 }
								 }
							 }
							 bean.setRetornosInfomados(new JRBeanCollectionDataSource(retornosInformados));
							 
							 bean.setDescricaoDebito("Débito Cobrado na OS:");
							 if(!entrou){
								 bean.setTipoDebito("Valor: " +Util.formatarMoedaReal((BigDecimal) ob[14]));
								 entrou = true;
							 }else{
								 bean.setTipoDebito(" "); 
							 }
							 bean.setSituacaoDebito(itensDocumentoCobrado[0].toString()); 
							 bean.setValorDebito((BigDecimal)itensDocumentoCobrado[1]);
							 						 
							 retorno.add(bean);
						}
					 }					 
					 if(criarBean){
						 RelatorioRetornoOrdemServicoFiscalizacaoBean bean = new RelatorioRetornoOrdemServicoFiscalizacaoBean();
						 bean.setGerenciaRegional(ob[1].toString());
						 bean.setUnidadeNegocio(ob[3].toString());
						 bean.setLocalidade(ob[5].toString());
						 bean.setSituacao(ob[7].toString());
						 bean.setNumeroOS((Integer)ob[8]);
						 bean.setMatriculaImovel((Integer)ob[9]);
						 bean.setCliente(ob[12].toString());
						 bean.setPerfilImovel(ob[10].toString());	
						 bean.setDataRetorno((Date) ob[11]);
						 bean.setInscricaoImovel(inscricaoImovel);
						 bean.setCategoria(categoria.getDescricao());
						 
						 List<RetornosInformadosRelatorioRetornoOSFiscalizacaoHelper>
						 	retornosInformados = new ArrayList<RetornosInformadosRelatorioRetornoOSFiscalizacaoHelper>();
						 
						 Collection<String> dadosRetornosInformados = this.repositorioCobranca.obterRetornosInformados((Integer) ob[8]);
						 if(dadosRetornosInformados !=null && !dadosRetornosInformados.isEmpty()){
							 for(String str : dadosRetornosInformados){
								 if(!str.equalsIgnoreCase(bean.getSituacao())){
									 RetornosInformadosRelatorioRetornoOSFiscalizacaoHelper
									 retornoInformado =  new RetornosInformadosRelatorioRetornoOSFiscalizacaoHelper();
									 retornoInformado.setDescricaoRetorno(str);
								 
									 retornosInformados.add(retornoInformado);
								 }
							 }
						 }
						 bean.setRetornosInfomados(new JRBeanCollectionDataSource(retornosInformados)); 
						 
						 retorno.add(bean);
					 }
				}
			}
			return retorno;
		}catch (ErroRepositorioException ex) {
			ex.printStackTrace();
			throw new ControladorException("erro.sistema", ex);
		}
	}
	
	
	private Collection<Object[]> pesquisarItensDocumentoCobranca(Integer idDocumentoCobranca, BigDecimal valorTotal)
			throws ControladorException{
		Collection<Object[]> retorno =  new ArrayList<Object[]>();;
		try{
			double valorRestante = 0.00 ;
			
			 Object[] itensCnceladosouParcelados = this.repositorioCobranca.somatorioItensCancParcDocumentoCobranca(idDocumentoCobranca);
			 if(itensCnceladosouParcelados !=null){
				 if(itensCnceladosouParcelados[0] != null && !itensCnceladosouParcelados[0].equals("")){
					 Object[] itensCancelados = new Object[2];
					 itensCancelados[0] = ("CANCELADO");
					 itensCancelados[1] = (BigDecimal)itensCnceladosouParcelados[0]; 
					 valorRestante = (valorRestante + ((BigDecimal)itensCnceladosouParcelados[0]).doubleValue()); 
					 retorno.add(itensCancelados);
				 }
				 
				 if(itensCnceladosouParcelados[1] != null && !itensCnceladosouParcelados[1].equals("")){
					 Object[] itensParcelados = new Object[2];
					 itensParcelados[0] = ("PARCELADO");
					 itensParcelados[1] = (BigDecimal)itensCnceladosouParcelados[1]; 
					 valorRestante = (valorRestante + ((BigDecimal)itensCnceladosouParcelados[1]).doubleValue()); 
					 retorno.add(itensParcelados);
				 }				 
			 }
			 
			 BigDecimal itensPagosDocumentoCobranca = this.repositorioCobranca.somatorioItensPagosDocumentoCobranca(idDocumentoCobranca);
			 if(itensPagosDocumentoCobranca !=null && !itensPagosDocumentoCobranca.equals("")){
				 Object[] itensPagos = new Object[2];
				 itensPagos[0] = ("PAGO");
				 itensPagos[1] = itensPagosDocumentoCobranca;
				 valorRestante = (valorRestante + itensPagosDocumentoCobranca.doubleValue()); 
				 retorno.add(itensPagos);
			 }
			 
				
			 if(valorTotal.doubleValue() != 0.00 && valorRestante < valorTotal.doubleValue()){
				 Object[] itensPendentes = new Object[2];
				 itensPendentes[0] = ("PENDENTE");
				 itensPendentes[1] = (BigDecimal.valueOf(valorTotal.doubleValue() - valorRestante).setScale(2, BigDecimal.ROUND_HALF_UP));
				 retorno.add(itensPendentes); 
			 }			 
								
			return retorno;
		}catch (ErroRepositorioException ex) {
			ex.printStackTrace();
			throw new ControladorException("erro.sistema", ex);
		}
	}

	/**
	 * [UC 1320] Consultar Motivo Nao Geracao Cobranca Por Resultado
	 * 
	 * Metodo que pesquisa os motivos de não geração de contas
	 * de cobrança por resultado por imovel
	 * 
	 * @author: Raimundo Martins
	 * @date: 19/04/2012
	 * */
	public Collection<ImovelContaNaoGeracaoCobrancaResultadoHelper> pesquisarImoveisContasNaoGeradasCobrancaPorResultadoImovel(Integer idComando) 
			throws ControladorException{
		Collection<ImovelContaNaoGeracaoCobrancaResultadoHelper> retorno = null;		
		Collection<Object[]> temp = null;
		String inscricao = null;
		String hint = null;
		String zeros = "";
		String zeroUm = "0";
		String zeroDois = "00";
		String zeroTres = "000";

		String localidade, setorComercial, quadra, lote, subLote;
		try {		
			temp = repositorioCobranca.pesquisarImoveisContasNaoGeradasCobrancaPorResultadoImovel(idComando);
			if(temp !=null && !temp.isEmpty()){
				retorno = new ArrayList<ImovelContaNaoGeracaoCobrancaResultadoHelper>();				
				
				for(Object[] ob : temp){
					ImovelContaNaoGeracaoCobrancaResultadoHelper helper = new ImovelContaNaoGeracaoCobrancaResultadoHelper();					
					
					helper.setDescricaoMotivo(ob[0].toString());
					helper.setIdImovel((Integer) ob[1]);
					
					localidade = ob[8].toString();
					setorComercial = ob[9].toString();
					quadra = ob[10].toString();
					lote = ob[11].toString();
					subLote = ob[12].toString();

					if (localidade.length() < 3	&& localidade.length() > 1) {
						localidade = zeroUm + localidade;
					} else if (localidade.length() < 3) {
						localidade = zeroDois + localidade;
					}

					if (setorComercial.length() < 3 && setorComercial.length() > 1) {
						setorComercial = zeroUm + setorComercial;
					} else if (setorComercial.length() < 3) {
						setorComercial = zeroDois + setorComercial;
					}
					
					if (quadra.length() < 3 && quadra.length() > 1) {
						quadra = zeroUm + quadra;
					} else if (quadra.length() < 3) {
						quadra = zeroDois + quadra;
					}

					if (lote.length() < 4 && lote.length() > 2) {
						lote = zeroUm + lote;
					} else if (lote.length() < 3 && lote.length() > 1) {
						lote = zeroDois + lote;
					} else if (lote.length() < 2) {
						lote = zeroTres + lote;
					}

					if (subLote.length() < 3 && subLote.length() > 1) {
						subLote = zeroUm + subLote;
					} else if (subLote.length() < 3) {
						subLote = zeroDois + subLote;
					}
					
					inscricao = localidade + "." + setorComercial + "." + quadra + "."
							+ lote + "." + subLote;				
					
					hint = "Inscrição: "+inscricao+"<br /> ";										
					if(ob[2] !=null && !ob[2].toString().trim().equals("")){
						hint +="Cliente Usuário: "+ob[2].toString()+"<br /> "+"CPF/CNPJ: ";
						if(ob[3] !=null && !ob[3].toString().trim().equals("") && ob[3].toString().length() == 11){
							ob[3] = ob[3].toString().substring(0, 3) + "."
									+ ob[3].toString().substring(3, 6) + "."
									+ ob[3].toString().substring(6, 9) + "-"
									+ ob[3].toString().substring(9, 11);
							hint += ob[3].toString()+"<br /> ";
						}
						else if(ob[4] !=null && !ob[4].toString().trim().equals("")){	
							for (int a = 0; a < (14 - ob[4].toString().length()); a++) {
								zeros = zeros.concat("0");
							}
							// concatena os zeros ao numero
							// caso o numero seja diferente de nulo
							ob[4] = zeros.concat(ob[4].toString());
							
							ob[4] = ob[4].toString().substring(0, 2) + "."
									+ ob[4].toString().substring(2, 5) + "."
									+ ob[4].toString().substring(5, 8) + "/"
									+ ob[4].toString().substring(8, 12) + "-"
									+ ob[4].toString().substring(12, 14);
							
							hint += ob[4].toString()+"<br /> ";
						}
						else
							hint+=" <br /> ";
					}
					else{
						hint +="Cliente Usuário: <br />";
						hint +="CPF/CNPJ: <br />";
					}
					if(ob[5] !=null && !ob[5].toString().trim().equals(""))
						hint+="Perfil: "+ob[5].toString()+"<br />";
					else
						hint+="Perfil: <br />";
					if(ob[6] !=null && !ob[6].toString().trim().equals(""))
						hint+="Situação Ligação Água: "+ob[6].toString()+"<br />";
					else
						hint+="Situação Ligação Água: <br />";
					if(ob[7] !=null && !ob[7].toString().trim().equals(""))
						hint+="Situação Ligação de Esgoto: "+ob[7].toString();
					else
						hint+="Situação Ligação de Esgoto: ";				
					
					
					helper.setHint(hint);					
					retorno.add(helper);					
				}
			}
			
		}catch (ErroRepositorioException e) {
			throw new ControladorException("erro.sistema", e);
		}
		return retorno;	
	}
	
	
	/**
	 * Metodo resposável por gerar o extrado de débito, documento de cobranca para o pagamento a vista no terminal de autoatendimento 
	 * 
	 * @author Arthur Carvalho
	 * @param matricula
	 * @return
	 */
	public PagamentoAVistaParcelamentoDebitoHelper consultarPagamentoAVistaDebitosWebserver(String matricula, String cpfCliente) throws ControladorException {
		
		PagamentoAVistaParcelamentoDebitoHelper helper = new PagamentoAVistaParcelamentoDebitoHelper();
		
			
			//Pesquisa o imóvel
			Imovel imovel = getControladorImovel().pesquisarImovel(Integer.valueOf(matricula));
		
			if ( imovel != null && imovel.getId() != null ) {
			
				String nomeCliente = getControladorCliente().validarCliente(cpfCliente, Integer.valueOf(matricula));
				
				if(!Util.verificarNaoVazio(nomeCliente)){
					throw new ControladorException("atencao.cliente_informado_nao_corresponde_imovel");
				}
				
				
				//No caso de parcelamento sempre 2
				Short indicadorGeracaoTaxaCobranca = new Short("2");
	
				//Indicador Cliente Imovel
				Short indicadorClienteImovel = new Short("1");
				
				//Pesquisa os débitos do imóvel
				ObterDebitoImovelOuClienteHelper colecaoDebitoImovel = 
						this.obterDebitoImovelOuCliente(1,// Indicador débito imóvel 
														matricula.toString(), // Matrícula do imóvel
														null, // Código do cliente
														null, // Tipo de relação do cliento com o imóvel
														"000101", // Referência inicial do débito
														"999912", // Referência final do débito
														Util.converteStringParaDate("01/01/0001"), // Inicio Vencimento
														Util.converteStringParaDate("31/12/9999"), // Final Vencimento
														1, // Indicador pagamento
														2, // Indicador conta em revisão
														1, // Indicador débito a cobrar
														1, // Indicador crédito a realizar
														1, // Indicador notas promissórias
														1, // Indicador guias de pagamento
														1, // Indicador acréscimos por impontualidade
														null); // Indicador Contas
				
				
				
				//Coleção de contas em aberto do imóvel;
				Collection<ContaValoresHelper> colecaoContas = colecaoDebitoImovel.getColecaoContasValores();
				Collection<GuiaPagamentoValoresHelper> colecaoGuiasPagamento = colecaoDebitoImovel.getColecaoGuiasPagamentoValores();
				Collection<DebitoACobrar> colecaoDebitosACobrar = colecaoDebitoImovel.getColecaoDebitoACobrar();
				Collection<CreditoARealizar> colecaoCreditoARealizar = colecaoDebitoImovel.getColecaoCreditoARealizar();
				Collection<DebitoCreditoParcelamentoHelper> colecaoAntecipacaoDebitosDeParcelamento = null;
				Collection<DebitoCreditoParcelamentoHelper> colecaoAntecipacaoCreditosDeParcelamento = null;
				
				//
				ParcelamentoPerfil parcelamentoPerfil = this.obterPerfilParcelamentoImovel(imovel);
				ArrayList<Object> dadosParcelamento = calcularDebitos(colecaoDebitoImovel, imovel, parcelamentoPerfil, null, "", cpfCliente, false);
				ParcelamentoDebitoHelper parcelamentoDebitoHelper = (ParcelamentoDebitoHelper) dadosParcelamento.get(0);
				
				Usuario usuario = null;
				ResolucaoDiretoria resolucaoDiretoria = this.pesquisarResolucaoDiretoriaPortal();
				ExtratoDebitoRelatorioHelper extratoDebitoRelatorioHelper = this.gerarEmitirExtratoDebito(
						imovel,indicadorGeracaoTaxaCobranca,colecaoContas,colecaoGuiasPagamento,colecaoDebitosACobrar,
						Util.formatarMoedaRealparaBigDecimal(parcelamentoDebitoHelper.getValorAcrescimoImpotualidade()), 
						//valorDesconto,
						Util.formatarMoedaRealparaBigDecimal(parcelamentoDebitoHelper.getaVistaDescontos()),
						//valorDocumento,
						Util.formatarMoedaRealparaBigDecimal(parcelamentoDebitoHelper.getaVistaPagamento()),
						colecaoCreditoARealizar, null, 
						resolucaoDiretoria,
						colecaoAntecipacaoDebitosDeParcelamento,
						colecaoAntecipacaoCreditosDeParcelamento, 
		//				usuario,
						usuario,
						indicadorClienteImovel);
				
				CobrancaDocumento documentoCobranca = extratoDebitoRelatorioHelper.getDocumentoCobranca();
				
				SistemaParametro sistemaParametro = getControladorUtil().pesquisarParametrosDoSistema();
				
				//CNPJ
				helper.setCnpj(Util.formatarCnpj(sistemaParametro.getCnpjEmpresa()));
				
				//ESCRITORIO
				helper.setEscritorio(documentoCobranca.getLocalidade().getDescricao());
				
				//ROTA
				helper.setRota(getControladorMicromedicao().obterRotaESequencialRotaDoImovel(imovel.getId()));
				
				//INSCRICAO
				helper.setInscricao(imovel.getInscricaoFormatada());
				
				//CPF CNPJ DO USUARIO
				helper.setCpfcnpjUsuario(cpfCliente);

				//NOME DO USUARIO
				helper.setNomeUsuario(nomeCliente);
				
				//MATRICULA
				helper.setMatricula(matricula);

				//ENDERECO
				String endereco = getControladorEndereco().pesquisarEndereco(Integer.valueOf(matricula));
				helper.setEndereco(endereco);
				
				//SEQUENCIAL
				helper.setSequencial(String.valueOf(documentoCobranca.getNumeroSequenciaDocumento()));
				
				//Obter Quantidade de economias por categoria
				EconomiaHelper economiaHelper = new EconomiaHelper();
				ArrayList<EconomiaHelper> arrayEconomiaHelper = new ArrayList<EconomiaHelper>();
				Collection colecaoCategorias = getControladorImovel().obterQuantidadeEconomiasCategoria(imovel);	
				if (colecaoCategorias != null && !colecaoCategorias.isEmpty()) {
					Iterator iteratorColecaoCategorias = colecaoCategorias.iterator();
					Categoria categoria = null;

					while (iteratorColecaoCategorias.hasNext()) {
						categoria = (Categoria) iteratorColecaoCategorias.next();
						economiaHelper.setDescricao(categoria.getDescricao());
						economiaHelper.setQuantidade(String.valueOf(categoria.getQuantidadeEconomiasCategoria()));
						
						arrayEconomiaHelper.add(economiaHelper);
					}
				}
				helper.setEconomias(arrayEconomiaHelper);
				
				//TIPO CONSUMO
				helper.setTipoConsumo(documentoCobranca.getImovelPerfil().getDescricao());
				
				//DATA EMISSAO
				helper.setDataEmissao(Util.formatarData(documentoCobranca.getEmissao()));
				
				//DATA VALIDADE
				Date maiorDataVencimentoContas = obterMaiorDataVencimentoContas(colecaoContas);
				helper.setNaoReceberApos(Util.formatarData(this.obterDataValidadeDocumentoCobranca(documentoCobranca, usuario, maiorDataVencimentoContas)));

				//CONTAS
				ArrayList<ContaPagamentoAVistaHelper> arrayContaPagamentoAVistaHelper  = new ArrayList<ContaPagamentoAVistaHelper>();
				/*
				 * Selecionar os itens do documento de cobrança
				 * correspondentes a conta e ordenar por ano/mês de referência da conta
				 */
				if (extratoDebitoRelatorioHelper.getColecaoCobrancaDocumentoItemContas() != null 
						&& !extratoDebitoRelatorioHelper.getColecaoCobrancaDocumentoItemContas().isEmpty()){
				
					CobrancaDocumentoItem cobrancaDocumentoItem = null;
					Collection<CobrancaDocumentoItem>  colecaoCobrancaDocumentoItemContas = extratoDebitoRelatorioHelper.getColecaoCobrancaDocumentoItemContas();	
					
					//Ordena a coleção de CobrancaDocumentoItem por ano/mês de referencia da conta
					Collections.sort((List) colecaoCobrancaDocumentoItemContas, new Comparator() {
						public int compare(Object a, Object b) {
							Integer anoMesReferencia1 = new Integer(((CobrancaDocumentoItem) a).getContaGeral().getConta().getReferencia() );
							Integer anoMesReferencia2 = new Integer(((CobrancaDocumentoItem) b).getContaGeral().getConta().getReferencia()) ;
					
							return anoMesReferencia1.compareTo(anoMesReferencia2);

						}
					});
			
					
					Object[] cobrancaDocumentoItemContasArray =  colecaoCobrancaDocumentoItemContas.toArray();
					
					for (int j = 0; j < cobrancaDocumentoItemContasArray.length; j = j + 1) {
						
							cobrancaDocumentoItem = new CobrancaDocumentoItem();
							cobrancaDocumentoItem = (CobrancaDocumentoItem)cobrancaDocumentoItemContasArray[j];
							ContaPagamentoAVistaHelper contaPagamentoAVistaHelper = new ContaPagamentoAVistaHelper();
							
							//Mês/Ano de referência da conta
							contaPagamentoAVistaHelper.setMesAno(Util.formatarAnoMesParaMesAno(cobrancaDocumentoItem.getContaGeral().getConta().getReferencia()));
							// Data de vencimento da conta
							contaPagamentoAVistaHelper.setVencimento(Util.formatarData(cobrancaDocumentoItem.getContaGeral().getConta().getDataVencimentoConta()));
							// Valor do item
							contaPagamentoAVistaHelper.setValor(Util.formatarMoedaReal(cobrancaDocumentoItem.getValorItemCobrado()));
							 
							arrayContaPagamentoAVistaHelper.add(contaPagamentoAVistaHelper);
					}
				}
				
				helper.setContas(arrayContaPagamentoAVistaHelper);
				//FIM CONTAS
				
				//DEBITOS CREDITOS
				ArrayList<DebitoCreditoPagamentoAVistaHelper> arrayDebitoCreditoPagamentoAVistaHelper = new ArrayList<DebitoCreditoPagamentoAVistaHelper>();
				
				DebitoCreditoPagamentoAVistaHelper debitoCreditoPagamentoAVistaHelper = new DebitoCreditoPagamentoAVistaHelper();
				
				//Ordenar os itens da lista de serviços, pela natureza do lançamento 
				//(DÉBITOS A COBRAR, GUIAS DE PAGAMENTO e CRÉDITOS A REALIZAR, nesta ordem),
				//tipo de serviço e ano/mês de referência.
				
				//os debitos e credito relacionados a parcelamento serão 
				//acumulados e exibidos no final dos serviços
				String descricaoServicoParcelamento = "";
				String referenciaServicoParcelamento = "";
				String parcelasServicoParcelamento = "";
				BigDecimal valorServicoParcelamento = new BigDecimal("0.00");
				
				if(extratoDebitoRelatorioHelper.getColecaoCobrancaDocumentoItemDebitosACobrar() != null && !extratoDebitoRelatorioHelper.getColecaoCobrancaDocumentoItemDebitosACobrar().isEmpty()){
					
					String descricaoServico = "";
					String referenciaServico = "";
					String parcelasServico = "";
					String valorServico = "";
					
					Collection colecaoCobrancaDocumentoItemDebitosACobrar = 
						extratoDebitoRelatorioHelper.getColecaoCobrancaDocumentoItemDebitosACobrar();
					
					//ordenação da coleção de debito a cobrar por tipo de serviço e ano/mês de referência
					Collections.sort((List) colecaoCobrancaDocumentoItemDebitosACobrar, new Comparator() {
						public int compare(Object a, Object b) {
							Integer tipoServico1 = new Integer(((CobrancaDocumentoItem) a).getDebitoACobrarGeral().getDebitoACobrar().getDebitoTipo().getId() );
							Integer tipoServico2 = new Integer(((CobrancaDocumentoItem) b).getDebitoACobrarGeral().getDebitoACobrar().getDebitoTipo().getId() );
			
							if (!tipoServico1.equals(tipoServico2)) {
							
								return tipoServico1.compareTo(tipoServico2);
							} else if ( ((CobrancaDocumentoItem) a).getDebitoACobrarGeral().getDebitoACobrar() != null &&
										((CobrancaDocumentoItem) a).getDebitoACobrarGeral().getDebitoACobrar().getAnoMesReferenciaDebito() != null && 
										((CobrancaDocumentoItem) b).getDebitoACobrarGeral().getDebitoACobrar() != null &&
										((CobrancaDocumentoItem) b).getDebitoACobrarGeral().getDebitoACobrar().getAnoMesReferenciaDebito() != null) {
										
									 Integer referencia1 = new Integer(((CobrancaDocumentoItem) a).getDebitoACobrarGeral().getDebitoACobrar().getAnoMesReferenciaDebito());
					 				 Integer referencia2 = new Integer(((CobrancaDocumentoItem) b).getDebitoACobrarGeral().getDebitoACobrar().getAnoMesReferenciaDebito());
					
									 return referencia1.compareTo(referencia2);
							 } else {
								 
								 return 0;
							 }
							
						}
					});
			
					
					Iterator iteratorDebitoACobrar = colecaoCobrancaDocumentoItemDebitosACobrar.iterator();
					
					while (iteratorDebitoACobrar.hasNext()) {
						CobrancaDocumentoItem cobrancaDocumentoItemDebitoACobrar = (CobrancaDocumentoItem) iteratorDebitoACobrar.next();
						
						DebitoACobrar debitoACobrar = cobrancaDocumentoItemDebitoACobrar.getDebitoACobrarGeral().getDebitoACobrar();
						
						
						if(debitoACobrar.getParcelamento() != null){
							
							descricaoServicoParcelamento = "PARCELAMENTO";
							
							if(debitoACobrar.getAnoMesReferenciaDebito() != null){
								referenciaServicoParcelamento = debitoACobrar.getFormatarAnoMesReferenciaDebito();
							}else{
								referenciaServicoParcelamento = "";
							}
							
							//descomentar quando entrar alteração da antecipação do parcelamento
							if(cobrancaDocumentoItemDebitoACobrar.getNumeroParcelasAntecipadas() != null){
								
								parcelasServicoParcelamento = "" + cobrancaDocumentoItemDebitoACobrar.getNumeroParcelasAntecipadas();
								
								valorServicoParcelamento = valorServicoParcelamento.add(cobrancaDocumentoItemDebitoACobrar.getValorItemCobrado());
								
							}else{
								parcelasServicoParcelamento = "" + debitoACobrar.getParcelasRestanteComBonus();
								//debitoACobrar.getNumeroPrestacaoCobradasMaisBonus()+ "/" + debitoACobrar.getNumeroPrestacaoDebito();

								valorServicoParcelamento = valorServicoParcelamento.add(debitoACobrar.getValorTotalComBonus());
								
							}
							
						
						}else{
							
							if(debitoACobrar.getDebitoTipo() != null){
								descricaoServico = debitoACobrar.getDebitoTipo().getDescricao();
							}else{
								descricaoServico = "";
							}
							
							if(debitoACobrar.getAnoMesReferenciaDebito() != null){
								referenciaServico = debitoACobrar.getFormatarAnoMesReferenciaDebito();
							}else{
								referenciaServico = "";
							}
							
							parcelasServico = "" + debitoACobrar.getParcelasRestanteComBonus(); 
								//debitoACobrar.getNumeroPrestacaoCobradasMaisBonus()+ "/" + debitoACobrar.getNumeroPrestacaoDebito();
							valorServico = Util.formatarMoedaReal(debitoACobrar.getValorTotalComBonus()) ;
						}
						debitoCreditoPagamentoAVistaHelper.setDescricao(descricaoServico);
						debitoCreditoPagamentoAVistaHelper.setValor(valorServico);
						debitoCreditoPagamentoAVistaHelper.setParcelas(parcelasServico);
						debitoCreditoPagamentoAVistaHelper.setVencimento("");
						debitoCreditoPagamentoAVistaHelper.setReferencia(referenciaServico);
						arrayDebitoCreditoPagamentoAVistaHelper.add(debitoCreditoPagamentoAVistaHelper);
					}
				}
				
				
				if(extratoDebitoRelatorioHelper.getColecaoCobrancaDocumentoItemGuiasPagamento() != null &&
				   !extratoDebitoRelatorioHelper.getColecaoCobrancaDocumentoItemGuiasPagamento().isEmpty()){
					
					String descricaoServico = "";
					String referenciaServico = "";
					String parcelasServico = "";
					String valorServico = "";
					String vencimentoServico = "";
					
					Collection colecaoCobrancaDocumentoItemGuiasPagamento = 
						extratoDebitoRelatorioHelper.getColecaoCobrancaDocumentoItemGuiasPagamento();
					
					//ordenação da coleção de guia de pagamento por tipo de serviço e ano/mês de referência
					Collections.sort((List) colecaoCobrancaDocumentoItemGuiasPagamento, new Comparator() {
						public int compare(Object a, Object b) {
							Integer tipoServico1 = new Integer(((CobrancaDocumentoItem) a).getGuiaPagamentoGeral().getGuiaPagamento().getDebitoTipo().getId() );
							Integer tipoServico2 = new Integer(((CobrancaDocumentoItem) b).getGuiaPagamentoGeral().getGuiaPagamento().getDebitoTipo().getId() );
			
							if (!tipoServico1.equals(tipoServico2)) {
								return tipoServico1.compareTo(tipoServico2);
							} else if ( ((CobrancaDocumentoItem) a).getGuiaPagamentoGeral().getGuiaPagamento() != null &&
										((CobrancaDocumentoItem) a).getGuiaPagamentoGeral().getGuiaPagamento().getAnoGuia() != null &&
										((CobrancaDocumentoItem) b).getGuiaPagamentoGeral().getGuiaPagamento() != null &&
										((CobrancaDocumentoItem) b).getGuiaPagamentoGeral().getGuiaPagamento().getAnoGuia() != null) {
								
									Integer referencia1 = new Integer(((CobrancaDocumentoItem) a).getGuiaPagamentoGeral().getGuiaPagamento().getAnoGuia());
									Integer referencia2 = new Integer(((CobrancaDocumentoItem) b).getGuiaPagamentoGeral().getGuiaPagamento().getAnoGuia());
				
									return referencia1.compareTo(referencia2);
				
								
							} else {
								return 0;
							}
								
							
						}
					});
			
					
					Iterator iteratorGuiaPagamento = colecaoCobrancaDocumentoItemGuiasPagamento.iterator();
					
					while (iteratorGuiaPagamento.hasNext()) {
						CobrancaDocumentoItem cobrancaDocumentoItemGuiaPagamento = (CobrancaDocumentoItem) iteratorGuiaPagamento.next();
						
						GuiaPagamento guiaPagamento = cobrancaDocumentoItemGuiaPagamento.getGuiaPagamentoGeral().getGuiaPagamento();
						
						if(guiaPagamento.getDebitoTipo() != null){
							descricaoServico = guiaPagamento.getDebitoTipo().getDescricao();
						}else{
							descricaoServico = "";
						}
						
						if(guiaPagamento.getAnoGuia() != null){
							referenciaServico = guiaPagamento.getFormatarAnoMesReferenciaGuia();
						}else{
							referenciaServico = "";
						}
						
						parcelasServico = guiaPagamento.getPrestacaoFormatada();
						valorServico = Util.formatarMoedaReal(guiaPagamento.getValorDebito()) ;
						vencimentoServico = Util.formatarData(guiaPagamento.getDataVencimento());
						
						debitoCreditoPagamentoAVistaHelper.setDescricao(descricaoServico);
						debitoCreditoPagamentoAVistaHelper.setValor(valorServico);
						debitoCreditoPagamentoAVistaHelper.setParcelas(parcelasServico);
						debitoCreditoPagamentoAVistaHelper.setVencimento(vencimentoServico);
						debitoCreditoPagamentoAVistaHelper.setReferencia(referenciaServico);
						arrayDebitoCreditoPagamentoAVistaHelper.add(debitoCreditoPagamentoAVistaHelper);
						
					}
				}
				
				if(extratoDebitoRelatorioHelper.getColecaoCobrancaDocumentoItemCreditoARealizar() != null &&
				   !extratoDebitoRelatorioHelper.getColecaoCobrancaDocumentoItemCreditoARealizar().isEmpty()){
					
					String descricaoServico = "";
					String referenciaServico = "";
					String parcelasServico = "";
					String valorServico = "";
					
					Collection colecaoCobrancaDocumentoItemCreditoARealizar = 
						extratoDebitoRelatorioHelper.getColecaoCobrancaDocumentoItemCreditoARealizar();
					
					//ordenação da coleção de debito a cobrar por tipo de serviço e ano/mês de referência
					Collections.sort((List) colecaoCobrancaDocumentoItemCreditoARealizar, new Comparator() {
						public int compare(Object a, Object b) {
							Integer tipoServico1 = new Integer(((CobrancaDocumentoItem) a).getCreditoARealizarGeral().getCreditoARealizar().getCreditoTipo().getId());
							Integer tipoServico2 = new Integer(((CobrancaDocumentoItem) b).getCreditoARealizarGeral().getCreditoARealizar().getCreditoTipo().getId());
			
							if (!tipoServico1.equals(tipoServico2)) {
								return tipoServico1.compareTo(tipoServico2);
							} else if ( ((CobrancaDocumentoItem) a).getCreditoARealizarGeral().getCreditoARealizar() != null && 
									((CobrancaDocumentoItem) a).getCreditoARealizarGeral().getCreditoARealizar().getAnoMesReferenciaCredito() != null &&
									((CobrancaDocumentoItem) b).getCreditoARealizarGeral().getCreditoARealizar() != null &&
									((CobrancaDocumentoItem) b).getCreditoARealizarGeral().getCreditoARealizar().getAnoMesReferenciaCredito() != null){
			
								Integer referencia1 = new Integer(((CobrancaDocumentoItem) a).getCreditoARealizarGeral().getCreditoARealizar().getAnoMesReferenciaCredito());
								Integer referencia2 = new Integer(((CobrancaDocumentoItem) b).getCreditoARealizarGeral().getCreditoARealizar().getAnoMesReferenciaCredito());
			
								return referencia1.compareTo(referencia2);
			
							}else {
								return 0;
							}
						}
					});
			
					
					Iterator iteratorCreditoARealizar = colecaoCobrancaDocumentoItemCreditoARealizar.iterator();
					
					while (iteratorCreditoARealizar.hasNext()) {
						CobrancaDocumentoItem cobrancaDocumentoItemDebitoACobrar = (CobrancaDocumentoItem) iteratorCreditoARealizar.next();
						
						CreditoARealizar creditoARealizar = cobrancaDocumentoItemDebitoACobrar.getCreditoARealizarGeral().getCreditoARealizar();
						
						
						if(creditoARealizar.getParcelamento() != null){
							
							System.out.println("parc " + creditoARealizar.getParcelamento().getId());
							
							if(referenciaServicoParcelamento.equalsIgnoreCase("") && 
									creditoARealizar.getAnoMesReferenciaCredito() != null){
								referenciaServicoParcelamento = creditoARealizar.getFormatarAnoMesCobrancaCredito();
							}else{
								referenciaServicoParcelamento = "";
							}
							
							
							//descomentar quando entrar alteração da antecipação do parcelamento
							if(cobrancaDocumentoItemDebitoACobrar.getNumeroParcelasAntecipadas() != null){
								
								parcelasServicoParcelamento = "" + cobrancaDocumentoItemDebitoACobrar.getNumeroParcelasAntecipadas();
								
								valorServicoParcelamento = valorServicoParcelamento.subtract(cobrancaDocumentoItemDebitoACobrar.getValorItemCobrado());
								
							}else{
								
								if (parcelasServicoParcelamento.equalsIgnoreCase("")){
									parcelasServicoParcelamento = "" + creditoARealizar.getParcelasRestanteComBonus(); 
								}
								
								valorServicoParcelamento = valorServicoParcelamento.subtract(creditoARealizar.getValorTotalComBonus());
								
							}
							
						}else{
							
							if(creditoARealizar.getCreditoTipo() != null){
								descricaoServico = creditoARealizar.getCreditoTipo().getDescricao();
							}else{
								descricaoServico = "";
							}
							
							if(creditoARealizar.getAnoMesReferenciaCredito() != null){
								referenciaServico = creditoARealizar.getFormatarAnoMesReferenciaCredito();
							}else{
								referenciaServico = "";
							}
							
							parcelasServico =  "" + creditoARealizar.getParcelasRestanteComBonus();  
							valorServico = Util.formatarMoedaReal(creditoARealizar.getValorTotalComBonus()) ;
							
							debitoCreditoPagamentoAVistaHelper.setDescricao(descricaoServico);
							debitoCreditoPagamentoAVistaHelper.setValor(valorServico);
							debitoCreditoPagamentoAVistaHelper.setParcelas(parcelasServico);
							debitoCreditoPagamentoAVistaHelper.setVencimento("");
							debitoCreditoPagamentoAVistaHelper.setReferencia(referenciaServico);
							arrayDebitoCreditoPagamentoAVistaHelper.add(debitoCreditoPagamentoAVistaHelper);
							
							
						}
						
					}
				}
				
				helper.setDebitosCreditos(arrayDebitoCreditoPagamentoAVistaHelper);
				//FIM DEBITOS CREDITOS
				
				//DEBITO ORIGINAL
				BigDecimal valorTotalContas = new BigDecimal("0.00") ;
				String valorTotalContasString = "" ;
				valorTotalContas = extratoDebitoRelatorioHelper.getValorTotalConta();
				valorTotalContas.setScale(Parcelamento.CASAS_DECIMAIS, Parcelamento.TIPO_ARREDONDAMENTO);
				valorTotalContasString = Util.formatarMoedaReal(valorTotalContas);
				
				helper.setDebitoOriginal(valorTotalContasString);
				
				//SERVICO ATUALIZACAO
				helper.setServicosAtualizacao(parcelamentoDebitoHelper.getValorAcrescimoImpotualidade());
				
				//DESCONTOS CREDITOS
				helper.setDescontosCreditos(parcelamentoDebitoHelper.getaVistaDescontos());
				
				//VALOR A PAGAR
				helper.setValorAPagar(parcelamentoDebitoHelper.getaVistaPagamento());
				
				//USUARIO TERMINAL
				helper.setEmitidoPor("");
				
				if(extratoDebitoRelatorioHelper.getDocumentoCobranca().getValorDocumento()!= null 
						&& sistemaParametro.getValorExtratoFichaComp() != null
						&& !sistemaParametro.getValorExtratoFichaComp().equals(new BigDecimal("0.00"))
						&& extratoDebitoRelatorioHelper.getDocumentoCobranca().getValorDocumento().
							compareTo(sistemaParametro.getValorExtratoFichaComp()) >= 0){
						 
						 	//representação numérica do código de barras
							//[SB0010] Obter Representação numérica do Nosso Número da Ficha de Compensação
							StringBuilder nossoNumero = getControladorFaturamento().obterNossoNumeroFichaCompensacao(
									DocumentoTipo.EXTRATO_DE_DEBITO.toString(),documentoCobranca.getId().toString()) ;
							String nossoNumeroSemDV = nossoNumero.toString().substring(0,17);
							
							Date dataVencimentoMais75 = Util.adicionarNumeroDiasDeUmaData(new Date(),75);
							String fatorVencimento = getControladorFaturamento().obterFatorVencimento(dataVencimentoMais75);
							
							String especificacaoCodigoBarra = getControladorArrecadacao().
								obterEspecificacaoCodigoBarraFichaCompensacao(
							    ConstantesSistema.CODIGO_BANCO_FICHA_COMPENSACAO, 
							    ConstantesSistema.CODIGO_MOEDA_FICHA_COMPENSACAO, 
							    documentoCobranca.getValorDocumento(), nossoNumeroSemDV.toString(),
								ConstantesSistema.CARTEIRA_FICHA_COMPENSACAO, fatorVencimento);
							                                
							String representacaoNumericaCodigoBarraFichaCompensacao = 
									getControladorArrecadacao().obterRepresentacaoNumericaCodigoBarraFichaCompensacao(especificacaoCodigoBarra);
							
							helper.setCodigoBarras(representacaoNumericaCodigoBarraFichaCompensacao);
							
					 }else{
						 
						 
							String representacaoNumericaCodBarra = "";
							//[UC0229] Obtém a representação numérica do código de barra
							
							representacaoNumericaCodBarra = getControladorArrecadacao()
										.obterRepresentacaoNumericaCodigoBarra(
												5,
												Util.formatarMoedaRealparaBigDecimal(parcelamentoDebitoHelper.getaVistaPagamento()),
												documentoCobranca.getLocalidade().getId(),
												imovel.getId(),
												null,
												null,
												null,
												null,
												String.valueOf(documentoCobranca.getNumeroSequenciaDocumento()),
												documentoCobranca.getDocumentoTipo().getId(),
												null, null,null);
							
							
							//Formata a representação númerica do código de barras
							String representacaoNumericaCodBarraFormatada = representacaoNumericaCodBarra
									.substring(0, 11)
									+ "-"
									+ representacaoNumericaCodBarra.substring(11, 12)
									+ " "
									+ representacaoNumericaCodBarra.substring(12, 23)
									+ "-"
									+ representacaoNumericaCodBarra.substring(23, 24)
									+ " "
									+ representacaoNumericaCodBarra.substring(24, 35)
									+ "-"
									+ representacaoNumericaCodBarra.substring(35, 36)
									+ " "
									+ representacaoNumericaCodBarra.substring(36, 47)
									+ "-"
									+ representacaoNumericaCodBarra.substring(47, 48);
							
							
							
							String representacaoNumericaCodBarraSemDigito = 
								representacaoNumericaCodBarra.substring(0, 11)
								+ representacaoNumericaCodBarra.substring(12, 23)
								+ representacaoNumericaCodBarra.substring(24, 35)
								+ representacaoNumericaCodBarra.substring(36, 47);
							
							
							helper.setCodigoBarras(representacaoNumericaCodBarraFormatada);
					 }
				
			} else {
				throw new ControladorException("atencao.parametros_autoatendimento_invalidos");
			}
		
		
		return helper;
	}
	
	
	
	
	private Date obterMaiorDataVencimentoContas(Collection<ContaValoresHelper> colecaoContas){
		
		Date maiorDataVencimentoContas = Util.converteStringParaDate("01/01/0001");
		
		if (colecaoContas != null && !colecaoContas.isEmpty()) {
			Iterator iter = colecaoContas.iterator();

			while (iter.hasNext()) {
				ContaValoresHelper contaValoresHelper = (ContaValoresHelper) iter.next();
				Conta conta = contaValoresHelper.getConta();
				
				if(Util.compararData(conta.getDataVencimentoConta(),maiorDataVencimentoContas) == 1){
					maiorDataVencimentoContas = conta.getDataVencimentoConta();
				}
			}	
		}

		return maiorDataVencimentoContas;
		
	}
	
	/**
	 * [UC 1320] Consultar Motivo Nao Geracao Cobranca Por Resultado
	 * 
	 * Metodo que pesquisa os motivos de não geração de contas
	 * de cobrança por resultado por imovel
	 * 
	 * @author: Raimundo Martins
	 * @date: 19/04/2012
	 * */
	public Collection<ImovelContaNaoGeracaoCobrancaResultadoHelper> pesquisarImoveisContasNaoGeradasCobrancaPorResultadoContas(Integer idComando) 
			throws ControladorException{
		List<ImovelContaNaoGeracaoCobrancaResultadoHelper> retorno = null;		
		Collection<Object[]> temp = null;
		String inscricao = null;
		String hint = null;
		String zeros = "";
		String zeroUm = "0";
		String zeroDois = "00";
		String zeroTres = "000";

		String localidade, setorComercial, quadra, lote, subLote;
		try {		
			temp = repositorioCobranca.pesquisarImoveisContasNaoGeradasCobrancaPorResultadoContas(idComando);
			if(temp !=null && !temp.isEmpty()){
				retorno = new ArrayList<ImovelContaNaoGeracaoCobrancaResultadoHelper>();				
				
				for(Object[] ob : temp){
					ImovelContaNaoGeracaoCobrancaResultadoHelper helper = new ImovelContaNaoGeracaoCobrancaResultadoHelper();
					
					helper.setDescricaoMotivo(ob[0].toString());
					helper.setIdImovel((Integer) ob[1]);
					helper.setMesAnoConta(Util.formatarAnoMesParaMesAno((Integer) ob[2]));
					helper.setValorConta(Util.formataBigDecimal((BigDecimal) ob[3], 2, false));
					
					localidade = ob[10].toString();
					setorComercial = ob[11].toString();
					quadra = ob[12].toString();
					lote = ob[13].toString();
					subLote = ob[14].toString();

					if (localidade.length() < 3	&& localidade.length() > 1) {
						localidade = zeroUm + localidade;
					} else if (localidade.length() < 3) {
						localidade = zeroDois + localidade;
					}

					if (setorComercial.length() < 3 && setorComercial.length() > 1) {
						setorComercial = zeroUm + setorComercial;
					} else if (setorComercial.length() < 3) {
						setorComercial = zeroDois + setorComercial;
					}
					
					if (quadra.length() < 3 && quadra.length() > 1) {
						quadra = zeroUm + quadra;
					} else if (quadra.length() < 3) {
						quadra = zeroDois + quadra;
					}

					if (lote.length() < 4 && lote.length() > 2) {
						lote = zeroUm + lote;
					} else if (lote.length() < 3 && lote.length() > 1) {
						lote = zeroDois + lote;
					} else if (lote.length() < 2) {
						lote = zeroTres + lote;
					}

					if (subLote.length() < 3 && subLote.length() > 1) {
						subLote = zeroUm + subLote;
					} else if (subLote.length() < 3) {
						subLote = zeroDois + subLote;
					}

					inscricao = localidade + "." + setorComercial + "." + quadra + "."
							+ lote + "." + subLote;					
					
					hint = "Inscrição: "+inscricao+"<br /> ";										
					if(ob[4] !=null && !ob[4].toString().trim().equals("")){
						hint +="Cliente Usuário: "+ob[4].toString()+"<br /> "+"CPF/CNPJ: ";
						if(ob[5] !=null && !ob[5].toString().trim().equals("") && ob[5].toString().length() == 11){
							ob[5] = ob[5].toString().substring(0, 3) + "."
									+ ob[5].toString().substring(3, 6) + "."
									+ ob[5].toString().substring(6, 9) + "-"
									+ ob[5].toString().substring(9, 11);
							hint += ob[5].toString()+"<br /> ";
						}
						else if(ob[6] !=null && !ob[6].toString().trim().equals("")){
							for (int a = 0; a < (14 - ob[6].toString().length()); a++) {
								zeros = zeros.concat("0");
							}
							// concatena os zeros ao numero
							// caso o numero seja diferente de nulo
							ob[6] = zeros.concat(ob[6].toString());
							
							ob[6] = ob[6].toString().substring(0, 2) + "."
									+ ob[6].toString().substring(2, 5) + "."
									+ ob[6].toString().substring(5, 8) + "/"
									+ ob[6].toString().substring(8, 12) + "-"
									+ ob[6].toString().substring(12, 14);
							
							hint += ob[6].toString()+"<br /> ";
						}
						else
							hint+=" <br /> ";
					}
					else{
						hint +="Cliente Usuário: <br />";
						hint +="CPF/CNPJ: <br />";
					}
					if(ob[7] !=null && !ob[7].toString().trim().equals(""))
						hint+="Perfil: "+ob[7].toString()+"<br />";
					else
						hint+="Perfil: <br />";
					if(ob[8] !=null && !ob[8].toString().trim().equals(""))
						hint+="Situação Ligação Água: "+ob[8].toString()+"<br />";
					else
						hint+="Situação Ligação Água: <br />";
					if(ob[9] !=null && !ob[9].toString().trim().equals(""))
						hint+="Situação Ligação de Esgoto: "+ob[9].toString();
					else
						hint+="Situação Ligação de Esgoto: ";				
					
					
					helper.setHint(hint);
					
					retorno.add(helper);					
				}
				Collections.sort(retorno);
			}
			
		}catch (ErroRepositorioException e) {
			throw new ControladorException("erro.sistema", e);
		}
		return retorno;	
	}

	/**
	 * [UC1250] Solicitar Geração/Emissão Boletim de Medição de Contratos
	 * 
	 * [SB0002] - Emitir Boletim de Contrato
	 * 
	 * @author Mariana Victor
	 * @date 22/11/2011
	 * 
	 * @param FiltrarRelatorioAcompanhamentoBoletimMedicaoHelper
	 * @return RelatorioAcompanhamentoBoletimMedicaoHelper
	 */
	public RelatorioAcompanhamentoBoletimMedicaoContratoHelper pesquisarRelatorioAcompanhamentoBoletimMedicaoContrato(
			FiltrarRelatorioAcompanhamentoBoletimMedicaoHelper filtro) throws ControladorException {
		
		Collection<Object[]> colecaoBoletinsMedicao = new ArrayList();
		Collection<Object[]> colecaoBoletinsMedicaoAcumulado = new ArrayList();
		
		Collection<RelatorioAcompanhamentoBoletimMedicaoContratoBean> beans = new ArrayList();
		RelatorioAcompanhamentoBoletimMedicaoContratoBean bean = null;
		RelatorioAcompanhamentoBoletimMedicaoContratoHelper helper = null;
		
		BigDecimal valorMedidoPeriodoTotal = new BigDecimal("0.00");
		
		try {
			colecaoBoletinsMedicao = this.repositorioCobranca.filtrarRelatorioAcompanhamentoBoletimMedicaoContrato(filtro);
			colecaoBoletinsMedicaoAcumulado = this.repositorioCobranca.filtrarRelatorioAcompanhamentoBoletimMedicaoContratoAcumuladas(filtro);
			
			if (!Util.isVazioOrNulo(colecaoBoletinsMedicao)){
				Iterator iteBoletinsMedicao = colecaoBoletinsMedicao.iterator();
				Iterator iteBoletinsMedicaoAcumulado = colecaoBoletinsMedicaoAcumulado.iterator();
				
				Object[] linha = null;
				Integer idItemServico;
				String descricaoServico;
				BigDecimal quantidadeOrcada;
				BigDecimal valorUnitario;
				Integer quantidadeItem;
				BigDecimal valorItem;
				String unidadeItem;
				BigDecimal valorOrcado;
				BigDecimal valorMedidoPeriodo = new BigDecimal("0.00");
				
				Object[] linhaAcumulado = null;
				Integer quantidadeItemAcumulada = 0;
				BigDecimal valorAcumuladoPeriodo = new BigDecimal("0.00");
				
				while (iteBoletinsMedicao.hasNext() ){
					linhaAcumulado = null;
					if(iteBoletinsMedicaoAcumulado.hasNext()){
						linhaAcumulado = (Object[]) iteBoletinsMedicaoAcumulado.next();
						if(linhaAcumulado[2] != null){
							quantidadeItemAcumulada = (Integer) linhaAcumulado[2]; 
						}
						if(linhaAcumulado[3] != null){
							valorAcumuladoPeriodo = (BigDecimal) linhaAcumulado[3];
						}
					}
					linha = (Object[]) iteBoletinsMedicao.next();

					idItemServico = null;
					if(linha[0] != null){
						idItemServico = (Integer) linha[0];
					}

					descricaoServico = null;
					if(linha[1] != null){
						descricaoServico = (String) linha[1];
					}

					quantidadeOrcada = new BigDecimal("0.00");;
					if(linha[2] != null){
						quantidadeOrcada = (BigDecimal) linha[2];
					}

					valorUnitario = new BigDecimal("0.00");;
					if(linha[3] != null){
						valorUnitario = (BigDecimal) linha[3];
					}

					quantidadeItem = 0;
					if(linha[4] != null){
						quantidadeItem = (Integer) linha[4];
					}

					valorItem = new BigDecimal("0.00");
					if(linha[5] != null){
						valorItem = (BigDecimal) linha[5];
					}

					unidadeItem = null;
					if(linha[6] != null){
						unidadeItem = (String) linha[6];
					}

					valorOrcado = new BigDecimal("0.00");
					if(linha[7] != null){
						valorOrcado = (BigDecimal) linha[7];
					}

					if(linha[8] != null){
						valorMedidoPeriodo = (BigDecimal) linha[8];
					}
					
					//Acumular para fazer o cálculo da penalidade de contrato de não execução.
					valorMedidoPeriodoTotal = valorMedidoPeriodoTotal.add(valorMedidoPeriodo);
					
					bean = new RelatorioAcompanhamentoBoletimMedicaoContratoBean(idItemServico, descricaoServico, quantidadeOrcada, 
							valorUnitario, quantidadeItem, valorItem, unidadeItem, valorOrcado, valorMedidoPeriodo, quantidadeItemAcumulada,
							valorAcumuladoPeriodo);
					beans.add(bean);
				}
				
				BigDecimal taxaSucesso = this.repositorioCobranca.pesquisarTaxaSucessoBoletimMedicaoContrato(filtro);
				
				if (taxaSucesso == null) {
					taxaSucesso = BigDecimal.ZERO;
				}
				
				String tipoRelatorio = null;
				BigDecimal penalidadeOS = new BigDecimal("0.00");
				BigDecimal penalidadeFiscalizacao = new BigDecimal("0.00");
				
				Collection<BigDecimal> penalidades = this.repositorioCobranca
						.filtrarRelatorioAcompanhamentoBoletimMedicaoContratoPenalidades(filtro);
				Iterator<BigDecimal> iterator = penalidades.iterator();
				/*
				 * Calculas as penalidades de ordem de serviço e de fiscalização
				 * O método do repositório sempre irá retornar no mínimo dois valores.
				 */
				if(iterator.hasNext()){
					penalidadeOS = iterator.next();
					penalidadeFiscalizacao = iterator.next();
				}
				
				BigDecimal penalidadeNaoRealizacao = iterator.next();
				BigDecimal penalidadeCorteSupressao = iterator.next();
				BigDecimal penalidadeContratoNaoExecucao = new BigDecimal("0.00");
				
				double quantidadeOSExecutadas = this.repositorioAtendimentoPublico.pesquisarQuantidadeOSExecutadas(filtro);
				double quantidadeOSPenalizadas = this.repositorioAtendimentoPublico.pesquisarQuantidadeOSPenalizadas(filtro);
				double denominador = quantidadeOSExecutadas + quantidadeOSPenalizadas;
				
				if(denominador != 0){
					BigDecimal percentual = new BigDecimal(((100 * quantidadeOSPenalizadas) / denominador));
					percentual = percentual.setScale(2, BigDecimal.ROUND_HALF_UP);
					if(percentual.doubleValue() > 5.00){
						double penalidadeNaoExecucao = 0.02 * ((valorMedidoPeriodoTotal.doubleValue() + taxaSucesso.doubleValue()) - 
								(penalidadeOS.doubleValue() + penalidadeFiscalizacao.doubleValue()));
						penalidadeContratoNaoExecucao = new BigDecimal(penalidadeNaoExecucao);
						penalidadeContratoNaoExecucao = penalidadeContratoNaoExecucao.abs().setScale(2, BigDecimal.ROUND_HALF_UP);
					}
				}

				double penalidadeNaoRealizacaoServico = 0.02 * ((valorMedidoPeriodoTotal.doubleValue() + taxaSucesso.doubleValue()) - 
						(penalidadeCorteSupressao.doubleValue() + penalidadeNaoRealizacao.doubleValue()));
				
				BigDecimal penalidadeContratoNaoRealizacaoServico = 
					BigDecimal.valueOf(penalidadeNaoRealizacaoServico).setScale(2, BigDecimal.ROUND_HALF_UP);
				
				helper = new RelatorioAcompanhamentoBoletimMedicaoContratoHelper(beans, taxaSucesso, penalidadeOS, penalidadeFiscalizacao, 
						penalidadeContratoNaoExecucao, penalidadeCorteSupressao, penalidadeNaoRealizacao, penalidadeContratoNaoRealizacaoServico);
			}
		}catch (ErroRepositorioException ex) {
			sessionContext.setRollbackOnly();
			ex.printStackTrace();
			throw new ControladorException("erro.sistema", ex);
		}
		return helper;
	}
	
	/**
	 * [UC1169] Movimentar Ordens de Serviço de Cobrança por Resultado
	 * 
	 * @author Hugo Azevedo
	 * @date 11/06/2012
	 */
	public List<RelatorioConsultarOSBean> obterDadosConsultarOSSComandosCobrancaAnalitico(
			String idComando, String[] idsUnidadeNegocio,
			String[] idsGerenciaRegional, String[] idsLocalidade,
			String situacaoOS, String dataGeracaoInicialOS, 
			String dataGeracaoFinalOS, String dataEncerramentoInicialOS, 
			String dataEncerramentoFinalOS) throws ControladorException{
		
		try{
			
			//Variável de retorno
			List<RelatorioConsultarOSBean> retorno = new ArrayList<RelatorioConsultarOSBean>();
			
			
			//4.5.1. Identificar as ordens de serviço do comando selecionado que atendam o filtro informado pelo usuário 
			//       e as ordens de serviço enviadas ou geradas pela empresa
			Collection retornoQuery = this.repositorioCobranca.obterDadosConsultarOSSComandosCobranca(idComando,
																								    idsUnidadeNegocio,
																								    idsGerenciaRegional,
																								    idsLocalidade,
																								    situacaoOS,
																								    dataGeracaoInicialOS,
																								    dataGeracaoFinalOS,
																								    dataEncerramentoInicialOS,
																								    dataEncerramentoFinalOS);
			
			
			Iterator itOS = retornoQuery.iterator();
			while(itOS.hasNext()){
				
				Integer idOS = (Integer)itOS.next();
				
				//Recuperando a Ordem de Serviço
				OrdemServico os = this.getControladorOrdemServico().pesquisarOrdemServicoMovimentarOS(idOS);
				
				//Bean do formulário
				RelatorioConsultarOSBean bean = new RelatorioConsultarOSBean();
				
				bean.setIdGerenciaRegional(os.getImovel().getLocalidade().getGerenciaRegional().getId().toString());
				bean.setDescricaoGerenciaRegional(os.getImovel().getLocalidade().getGerenciaRegional().getNome());
				bean.setIdUnidadeNegocio(os.getImovel().getLocalidade().getUnidadeNegocio().getId().toString());
				bean.setDescricaoUnidadeNegocio(os.getImovel().getLocalidade().getUnidadeNegocio().getNome());
				bean.setIdLocalidade(os.getImovel().getLocalidade().getId().toString());
				bean.setDescricaoLocalidade(os.getImovel().getLocalidade().getDescricao());
				
				bean.setMatriculaImovel(os.getImovel().getId().toString());
				bean.setNumeroOS(idOS.toString());
				bean.setIdTipoServico(Util.converterObjetoParaString(os.getServicoTipo().getId()));
				bean.setIdTipoServico(os.getServicoTipo().getDescricao());
				bean.setDataGeracaoOS(Util.formatarData(os.getDataGeracao()));
				bean.setDataEncerramentoOS(Util.formatarData(os.getDataEncerramento()));
				if(os.getAtendimentoMotivoEncerramento() != null) {
					bean.setMotivoEncerramentoOS(os.getAtendimentoMotivoEncerramento().getDescricao());
				}
				
				retorno.add(bean);
				
			}
			
			return retorno;
			
		}catch (ErroRepositorioException ex) {	
			ex.printStackTrace();
			throw new ControladorException("erro.sistema", ex);
		}
	}

	/**
	 * [UC1169] Movimentar Ordens de Serviço de Cobrança por Resultado
	 * 
	 * @author Hugo Azevedo
	 * @date 11/06/2012
	 */
	public List<RelatorioConsultarOSBean> obterDadosConsultarOSSComandosCobrancaSintetico(
			String idComando, String[] idsUnidadeNegocio,
			String[] idsGerenciaRegional, String[] idsLocalidade,
			String situacaoOS, String dataGeracaoInicialOS, 
			String dataGeracaoFinalOS, String dataEncerramentoInicialOS, 
			String dataEncerramentoFinalOS) throws ControladorException{
		
		try{
			
			//Variável de retorno
			List<RelatorioConsultarOSBean> retorno = new ArrayList<RelatorioConsultarOSBean>();
			
			HashMap<HashSet<String>, RelatorioConsultarOSBean> unidadeNegocio = new HashMap<HashSet<String>, RelatorioConsultarOSBean>();
			HashMap<HashSet<String>, RelatorioConsultarOSBean> gerenciaRegional = new HashMap<HashSet<String>, RelatorioConsultarOSBean>();
			HashMap<HashSet<String>, RelatorioConsultarOSBean> estado = new HashMap<HashSet<String>, RelatorioConsultarOSBean>();
			
			List<RelatorioConsultarOSBean> colecaoUnidNeg = new ArrayList<RelatorioConsultarOSBean>();
			List<RelatorioConsultarOSBean> colecaoGerReg = new ArrayList<RelatorioConsultarOSBean>();
			List<RelatorioConsultarOSBean> colecaoTotal = new ArrayList<RelatorioConsultarOSBean>();
			
			//Consultando as OSs e retornando os agrupamentos por situação da ordem de serviço
			Collection retornoQuery = this.repositorioCobranca.obterDadosConsultarOSSinteticoComandosCobranca(idComando,
																								    idsUnidadeNegocio,
																								    idsGerenciaRegional,
																								    idsLocalidade,
																								    situacaoOS,
																								    dataGeracaoInicialOS,
																								    dataGeracaoFinalOS,
																								    dataEncerramentoInicialOS,
																								    dataEncerramentoFinalOS);
		
			
			int contador = 0;
			Iterator it = retornoQuery.iterator();
			while(it.hasNext()){
				
				Object[] objTotalizacao = (Object[])it.next();
				Object[] objNext = null;
				
				if(contador != retornoQuery.size() - 1){
					objNext = (Object[])retornoQuery.toArray()[contador + 1];
				}
				
				HashSet<String> chavesUnidadeNegocio = new HashSet<String>();
				HashSet<String> chavesGerenciaRegional = new HashSet<String>();
				HashSet<String> chavesEstado = new HashSet<String>();
				
				//Bean do formulário
				RelatorioConsultarOSBean bean = new RelatorioConsultarOSBean();
				
				bean.setDescricaoGerenciaRegional((String)objTotalizacao[0]);
				bean.setDescricaoUnidadeNegocio((String)objTotalizacao[1]);
				bean.setDescricaoLocalidade((String)objTotalizacao[2]);
				bean.setDescricaoEstado((String)objTotalizacao[3]);
				bean.setDescricaoSituacaoOS((String)objTotalizacao[4]);
				
				//4.6.1.5. Totalizar para cada Ordem de Serviço do filtro por tipo de serviço 
				//         (SVTP_ID da tabela ORDEM_SERVICO com ORSE_ID = ORSE_ID contido nas coleções definidas acima) 
				//         e por situação da ordem de serviço (AMEN_ID da tabela ORDEM_SERVICO com ORSE_ID = ORSE_ID contido nas coleções definidas acima).
				
				//4.6.1.6. Totalizar por situação da ordem de serviço:
				//==================================================================
				//======== 4.6.1.6.1. Gerada: Gerada e não executada (ORSE_ID da tabela ORDEM_SERVICO com AMEN_ID = nulo 
				//========            e ORSE_ID contido nas coleções definidas acima).
				bean.setIndicadorOSGerada((Integer)objTotalizacao[5]);
				
				
				//======== 4.6.1.6.2. Executada: Gerada e encerrada por execução 
				//========            (ORSE_ID da tabela ORDEM_SERVICO com AMEN_ID = AMEN_ID da tabela ATEND_MOTIVO_ENCMT com AMEN_ICEXECUCAO = 1).
				bean.setIndicadorOSExecutada((Integer)objTotalizacao[6]);
				
				
				//========  4.6.1.6.3. Cancelada: Gerada e encerrada por execução
				//========             (ORSE_ID da tabela ORDEM_SERVICO com AMEN_ID = AMEN_ID da tabela ATEND_MOTIVO_ENCMT com AMEN_ICEXECUCAO = 2).
				bean.setIndicadorOSCancelada((Integer)objTotalizacao[7]);
				
				//======= 4.6.1.8.1. Valores enviados para os imóveis com ordem de serviço de corte
				bean.setEnviadosCorte((BigDecimal)objTotalizacao[8]);
				
				//======= 4.6.1.8.2. Valores enviados para os imóveis com ordem de serviço de supressão
				bean.setEnviadosSupressao((BigDecimal)objTotalizacao[9]);
				
				//======= 4.6.1.8.3. Valores pagos para os imóveis com ordem de serviço de corte
				bean.setPagosCorte((BigDecimal)objTotalizacao[10]);
				
				//======= 4.6.1.8.4. Valores pagos para os imóveis com ordem de serviço de supressão
				bean.setPagosSupressao((BigDecimal)objTotalizacao[11]);

				// Tipo de Serviço
				chavesEstado.add((String)objTotalizacao[4]);
				
				// Gerência Regional
				chavesGerenciaRegional.add((String)objTotalizacao[0]);
				// Tipo de Serviço
				chavesGerenciaRegional.add((String)objTotalizacao[4]);
				
				// Unidade de Negócio
				chavesUnidadeNegocio.add((String)objTotalizacao[1]);
				// Tipo de Serviço
				chavesUnidadeNegocio.add((String)objTotalizacao[4]);
				
				//Totalização da Gerência Regional
				
				
				//Total do Estado
				
				//Unidade de Negócio
				RelatorioConsultarOSBean subBeanUnidadeNegocio = new RelatorioConsultarOSBean();
				
				if(unidadeNegocio.containsKey(chavesUnidadeNegocio)){
					subBeanUnidadeNegocio = unidadeNegocio.get(chavesUnidadeNegocio);
					
					subBeanUnidadeNegocio.setIndicadorOSGerada(Util.somaInteiros((Integer)objTotalizacao[5],subBeanUnidadeNegocio.getIndicadorOSGerada()));
					subBeanUnidadeNegocio.setIndicadorOSExecutada(Util.somaInteiros((Integer)objTotalizacao[6],subBeanUnidadeNegocio.getIndicadorOSExecutada()));
					subBeanUnidadeNegocio.setIndicadorOSCancelada(Util.somaInteiros((Integer)objTotalizacao[7],subBeanUnidadeNegocio.getIndicadorOSCancelada()));
					subBeanUnidadeNegocio.setEnviadosCorte(Util.somaBigDecimal((BigDecimal)objTotalizacao[8], subBeanUnidadeNegocio.getEnviadosCorte()));
					subBeanUnidadeNegocio.setEnviadosSupressao(Util.somaBigDecimal((BigDecimal)objTotalizacao[9], subBeanUnidadeNegocio.getEnviadosSupressao()));
					subBeanUnidadeNegocio.setPagosCorte(Util.somaBigDecimal((BigDecimal)objTotalizacao[10], subBeanUnidadeNegocio.getPagosCorte()));
					subBeanUnidadeNegocio.setPagosSupressao(Util.somaBigDecimal((BigDecimal)objTotalizacao[11], subBeanUnidadeNegocio.getPagosSupressao()));
					
				} else {
					subBeanUnidadeNegocio.setDescricaoGerenciaRegional((String)objTotalizacao[0]);
					subBeanUnidadeNegocio.setDescricaoUnidadeNegocio((String)objTotalizacao[1]);
					subBeanUnidadeNegocio.setDescricaoLocalidade((String)objTotalizacao[2]);
					subBeanUnidadeNegocio.setDescricaoEstado((String)objTotalizacao[3]);
					subBeanUnidadeNegocio.setDescricaoSituacaoOS((String)objTotalizacao[4]);
					subBeanUnidadeNegocio.setIndicadorOSGerada(Util.somaInteiros((Integer)objTotalizacao[5],subBeanUnidadeNegocio.getIndicadorOSGerada()));
					subBeanUnidadeNegocio.setIndicadorOSExecutada(Util.somaInteiros((Integer)objTotalizacao[6],subBeanUnidadeNegocio.getIndicadorOSExecutada()));
					subBeanUnidadeNegocio.setIndicadorOSCancelada(Util.somaInteiros((Integer)objTotalizacao[7],subBeanUnidadeNegocio.getIndicadorOSCancelada()));
					subBeanUnidadeNegocio.setEnviadosCorte(Util.somaBigDecimal((BigDecimal)objTotalizacao[8], subBeanUnidadeNegocio.getEnviadosCorte()));
					subBeanUnidadeNegocio.setEnviadosSupressao(Util.somaBigDecimal((BigDecimal)objTotalizacao[9], subBeanUnidadeNegocio.getEnviadosSupressao()));
					subBeanUnidadeNegocio.setPagosCorte(Util.somaBigDecimal((BigDecimal)objTotalizacao[10], subBeanUnidadeNegocio.getPagosCorte()));
					subBeanUnidadeNegocio.setPagosSupressao(Util.somaBigDecimal((BigDecimal)objTotalizacao[11], subBeanUnidadeNegocio.getPagosSupressao()));
				}
				
				unidadeNegocio.put(chavesUnidadeNegocio, subBeanUnidadeNegocio);
				
				if(objNext == null || !((String)objTotalizacao[1]).equals((String)objNext[1])){
					Collection<HashSet<String>> chaves = unidadeNegocio.keySet();
					for (HashSet<String> hashSet : chaves) {
						colecaoUnidNeg.add(unidadeNegocio.get(hashSet));
					}
					
					bean.setArrayJRTotalUnidadeNegocio(colecaoUnidNeg);
					
					colecaoUnidNeg = new ArrayList<RelatorioConsultarOSBean>();
					unidadeNegocio.clear();
				}
				
				// Gerência Regional
				RelatorioConsultarOSBean subBeanGerenciaRegional = new RelatorioConsultarOSBean();
				
				if(gerenciaRegional.containsKey(chavesGerenciaRegional)){
					subBeanGerenciaRegional = gerenciaRegional.get(chavesGerenciaRegional);
					
					subBeanGerenciaRegional.setIndicadorOSGerada(Util.somaInteiros((Integer)objTotalizacao[5],subBeanGerenciaRegional.getIndicadorOSGerada()));
					subBeanGerenciaRegional.setIndicadorOSExecutada(Util.somaInteiros((Integer)objTotalizacao[6],subBeanGerenciaRegional.getIndicadorOSExecutada()));
					subBeanGerenciaRegional.setIndicadorOSCancelada(Util.somaInteiros((Integer)objTotalizacao[7],subBeanGerenciaRegional.getIndicadorOSCancelada()));
					subBeanGerenciaRegional.setEnviadosCorte(Util.somaBigDecimal((BigDecimal)objTotalizacao[8], subBeanGerenciaRegional.getEnviadosCorte()));
					subBeanGerenciaRegional.setEnviadosSupressao(Util.somaBigDecimal((BigDecimal)objTotalizacao[9], subBeanGerenciaRegional.getEnviadosSupressao()));
					subBeanGerenciaRegional.setPagosCorte(Util.somaBigDecimal((BigDecimal)objTotalizacao[10], subBeanGerenciaRegional.getPagosCorte()));
					subBeanGerenciaRegional.setPagosSupressao(Util.somaBigDecimal((BigDecimal)objTotalizacao[11], subBeanGerenciaRegional.getPagosSupressao()));
					
				} else {
					subBeanGerenciaRegional.setDescricaoGerenciaRegional((String)objTotalizacao[0]);
					subBeanGerenciaRegional.setDescricaoUnidadeNegocio((String)objTotalizacao[1]);
					subBeanGerenciaRegional.setDescricaoLocalidade((String)objTotalizacao[2]);
					subBeanGerenciaRegional.setDescricaoEstado((String)objTotalizacao[3]);
					subBeanGerenciaRegional.setDescricaoSituacaoOS((String)objTotalizacao[4]);
					subBeanGerenciaRegional.setIndicadorOSGerada(Util.somaInteiros((Integer)objTotalizacao[5],subBeanGerenciaRegional.getIndicadorOSGerada()));
					subBeanGerenciaRegional.setIndicadorOSExecutada(Util.somaInteiros((Integer)objTotalizacao[6],subBeanGerenciaRegional.getIndicadorOSExecutada()));
					subBeanGerenciaRegional.setIndicadorOSCancelada(Util.somaInteiros((Integer)objTotalizacao[7],subBeanGerenciaRegional.getIndicadorOSCancelada()));
					subBeanGerenciaRegional.setEnviadosCorte(Util.somaBigDecimal((BigDecimal)objTotalizacao[8], subBeanGerenciaRegional.getEnviadosCorte()));
					subBeanGerenciaRegional.setEnviadosSupressao(Util.somaBigDecimal((BigDecimal)objTotalizacao[9], subBeanGerenciaRegional.getEnviadosSupressao()));
					subBeanGerenciaRegional.setPagosCorte(Util.somaBigDecimal((BigDecimal)objTotalizacao[10], subBeanGerenciaRegional.getPagosCorte()));
					subBeanGerenciaRegional.setPagosSupressao(Util.somaBigDecimal((BigDecimal)objTotalizacao[11], subBeanGerenciaRegional.getPagosSupressao()));
				}
				
				gerenciaRegional.put(chavesGerenciaRegional, subBeanGerenciaRegional);
				
				if(objNext == null || !((String)objTotalizacao[0]).equals((String)objNext[0])){
					Collection<HashSet<String>> chaves = gerenciaRegional.keySet();
					for (HashSet<String> hashSet : chaves) {
						colecaoGerReg.add(gerenciaRegional.get(hashSet));
					}
					
					Collections.sort(colecaoGerReg);
					bean.setArrayJRTotalGerenciaRegional(colecaoGerReg);
					
					colecaoGerReg = new ArrayList<RelatorioConsultarOSBean>();
					gerenciaRegional.clear();
				}
				
				// Estado
				RelatorioConsultarOSBean subBeanTotalEstado = new RelatorioConsultarOSBean();
				
				if(estado.containsKey(chavesEstado)){
					subBeanTotalEstado = estado.get(chavesEstado);
					
					subBeanTotalEstado.setIndicadorOSGerada(Util.somaInteiros((Integer)objTotalizacao[5],subBeanTotalEstado.getIndicadorOSGerada()));
					subBeanTotalEstado.setIndicadorOSExecutada(Util.somaInteiros((Integer)objTotalizacao[6],subBeanTotalEstado.getIndicadorOSExecutada()));
					subBeanTotalEstado.setIndicadorOSCancelada(Util.somaInteiros((Integer)objTotalizacao[7],subBeanTotalEstado.getIndicadorOSCancelada()));
					subBeanTotalEstado.setEnviadosCorte(Util.somaBigDecimal((BigDecimal)objTotalizacao[8], subBeanTotalEstado.getEnviadosCorte()));
					subBeanTotalEstado.setEnviadosSupressao(Util.somaBigDecimal((BigDecimal)objTotalizacao[9], subBeanTotalEstado.getEnviadosSupressao()));
					subBeanTotalEstado.setPagosCorte(Util.somaBigDecimal((BigDecimal)objTotalizacao[10], subBeanTotalEstado.getPagosCorte()));
					subBeanTotalEstado.setPagosSupressao(Util.somaBigDecimal((BigDecimal)objTotalizacao[11], subBeanTotalEstado.getPagosSupressao()));
					
				} else {
					subBeanTotalEstado.setDescricaoGerenciaRegional((String)objTotalizacao[0]);
					subBeanTotalEstado.setDescricaoUnidadeNegocio((String)objTotalizacao[1]);
					subBeanTotalEstado.setDescricaoLocalidade((String)objTotalizacao[2]);
					subBeanTotalEstado.setDescricaoEstado((String)objTotalizacao[3]);
					subBeanTotalEstado.setDescricaoSituacaoOS((String)objTotalizacao[4]);
					subBeanTotalEstado.setIndicadorOSGerada(Util.somaInteiros((Integer)objTotalizacao[5],subBeanTotalEstado.getIndicadorOSGerada()));
					subBeanTotalEstado.setIndicadorOSExecutada(Util.somaInteiros((Integer)objTotalizacao[6],subBeanTotalEstado.getIndicadorOSExecutada()));
					subBeanTotalEstado.setIndicadorOSCancelada(Util.somaInteiros((Integer)objTotalizacao[7],subBeanTotalEstado.getIndicadorOSCancelada()));
					subBeanTotalEstado.setEnviadosCorte(Util.somaBigDecimal((BigDecimal)objTotalizacao[8], subBeanTotalEstado.getEnviadosCorte()));
					subBeanTotalEstado.setEnviadosSupressao(Util.somaBigDecimal((BigDecimal)objTotalizacao[9], subBeanTotalEstado.getEnviadosSupressao()));
					subBeanTotalEstado.setPagosCorte(Util.somaBigDecimal((BigDecimal)objTotalizacao[10], subBeanTotalEstado.getPagosCorte()));
					subBeanTotalEstado.setPagosSupressao(Util.somaBigDecimal((BigDecimal)objTotalizacao[11], subBeanTotalEstado.getPagosSupressao()));
				}
				
				estado.put(chavesEstado, subBeanTotalEstado);
				
				if(objNext == null){
					Collection<HashSet<String>> chaves = estado.keySet();
					for (HashSet<String> hashSet : chaves) {
						colecaoTotal.add(estado.get(hashSet));
					}
					Collections.sort(colecaoTotal);
					bean.setArrayJRTotalEstado(colecaoTotal);
					
					colecaoTotal = new ArrayList<RelatorioConsultarOSBean>();
					estado.clear();
				}
				
				contador++;
				retorno.add(bean);
				
			}
			
			

			
			
			return retorno;
			
		}catch (ErroRepositorioException ex) {	
			ex.printStackTrace();
			throw new ControladorException("erro.sistema", ex);
		}
	}
	
	/**
	 * [UC 1256] Retirar Imoveis e COntas das Empresas de Cobrança
	 * 
	 * Metodo que pesquisa os comandos que podem ser retirados
	 * imoveis e cobrança
	 * 
	 * @author Raimundo Martins
	 * @date 13/12/2011
	 * */
	public Collection<RetirarImoveisContasEmpresaCobrancaHelper> pesquisarDadosRetirarImoveisContasEmpresaCobranca(Integer idEmpresa, 
		Date periodoIni, Date periodoFin,Integer numPaginas, Integer quantidadeRegistros) throws ControladorException{
		try{
			Collection<RetirarImoveisContasEmpresaCobrancaHelper> retorno = new ArrayList<RetirarImoveisContasEmpresaCobrancaHelper>();
			Collection<ComandoEmpresaCobrancaConta> dados =  this.repositorioCobranca
					.pesquisarDadosRetirarImoveisContasEmpresaCobranca(idEmpresa, periodoIni, periodoFin, numPaginas, quantidadeRegistros);
			if(dados !=null && !dados.isEmpty()){
				for(ComandoEmpresaCobrancaConta c : dados){
					Integer contasCobranca = this.repositorioCobranca.pesquisarqtdContasPorComandoDtRetiradaComandoNulo(c.getId());
					Integer imoveisCobranca = this.repositorioCobranca.pesquisarqtdImoveisPorComandoDtRetiradaComandoNulo(c.getId());
					if(contasCobranca > 0){
						RetirarImoveisContasEmpresaCobrancaHelper helper = new RetirarImoveisContasEmpresaCobrancaHelper();
						helper.setIdComando(c.getId().toString());
						helper.setDescricaoComando(c.getId().toString());
						helper.setDataExecucao(c.getDataExecucao());
						helper.setContasCobranca(contasCobranca.toString());
						helper.setImoveisCobranca(imoveisCobranca.toString());
						retorno.add(helper);
					}
				}
			}
			return retorno;
		}
		catch(ErroRepositorioException ex){
			ex.printStackTrace();
			throw new ControladorException("erro.sistema", ex);
		}
	}
	
	/**
	 * [UC 1256] Retirar Imoveis e COntas das Empresas de Cobrança
	 * [SB 0002] Processar Retirar Imóveis e Contas das Empresas de Cobrança
	 * Metodo que retira os imoveis e contas de cobrança
	 * 
	 * @author Raimundo Martins
	 * @date 15/12/2011
	 * */
	public void retirarImoveisContasEmpresaCobranca(Integer idFuncionalidade, Usuario u, Integer idComando)throws ControladorException{
		int idUnidadeIniciada = 0;
		System.out.println("*******************************************");
		System.out.println("RETIRAR IMÓVEIS CONTAS EMPRESAS DE COBRANCA");
		System.out.println("*******************************************");
		
		idUnidadeIniciada = getControladorBatch()
				.iniciarUnidadeProcessamentoBatch(idFuncionalidade,UnidadeProcessamento.COMANDO_EMPRESA_COBRANCA_CONTA, idComando);
		
		try{
			
			//for(Integer reg : idRegistros){
				
				/*1.1. O sistema seleciona os imóveis que estão em cobrança e que estão ligados ao comando
				(IMOV_ID da tabela COBRANCA.EMPRESA_COBRANCA_CONTA com CECC_ID
				= id do comando selecionado e com pelo menos uma conta em cobrança (CNTA_ID
				da tabela COBRANCA.EMPRESA_COBRANCA_CONTA com CECC_ID = id
				do comando selecionado e com ECCO_DTRETIRADACONTA igual a nulo e com
				ECCO_CDCONCLUIDO igual a nulo);*/				
				Collection<Imovel> imoveis = repositorioCobranca.pesquisarImoveisRetirarComandoEmpresaCobrancaConta(idComando);
				
				if(imoveis !=null && !imoveis.isEmpty()){
					//Collection<Integer> idContas;
					Integer qtdContas;
					Collection<Integer> idContasNaoVencidas;
					Collection<Integer> contasNaoVencidas;
					Collection<Integer> idContasPagasOuParceladas;
					Collection<Integer> contasPagas;
					Collection<Integer> contasParceladas;
					SistemaParametro sist = this.getControladorUtil().pesquisarParametrosDoSistema();
					Date dataEnvio;
					Date hoje = new Date();				
					for(Imovel imov : imoveis){
						/*1.2.1. Caso o vencimento de todas as contas do imóvel seja maior do que a
						quantidade de dias de vencimento para cobrança (CNTA_ID da tabela COBRANCA.EMPRESA_COBRANCA_CONTA
						com IMOV_ID = id do imóvel selecionado e CECC_ID = id do comando selecionado e
						ECCO_DTRETIRADACONTA igual a nulo e ECCO_CDCONCLUIDO igual a nulo e 
						CNTA_ID = CNTA_ID da tabela FATURAMENTO.CONTA_GERAL com data de vencimento maior do 
						que o número de dias de validade do comando */
						//[SB0005 - Verificar vencimento da conta]						
						//idContas = repositorioCobranca.pesquisarContasEmpresaCobrancaContaPorImovelComando(idComando, imov.getId());						
						qtdContas = repositorioCobranca.quantidadeContasPorImovelEComando(idComando, imov.getId());						
						Collection<Integer> idContasNaoVencidasTemp = repositorioCobranca.pesquisarContasNaoVencidas(idComando, imov.getId());
						contasNaoVencidas = new ArrayList<Integer>();
						contasPagas = new ArrayList<Integer>();
						contasParceladas = new ArrayList<Integer>();
						idContasNaoVencidas = new ArrayList<Integer>();
						if(idContasNaoVencidasTemp !=null && !idContasNaoVencidasTemp.isEmpty()){
							for(Integer idConta : idContasNaoVencidasTemp){
								if(!idContasNaoVencidas.contains(idConta)){
									idContasNaoVencidas.add(idConta);
								}
							}
						}
						int qtdContasNaoVencidas = 0;
						if(idContasNaoVencidas !=null && !idContasNaoVencidas.isEmpty()){
							qtdContasNaoVencidas = idContasNaoVencidas.size();
						}
						if(idContasNaoVencidas !=null && !idContasNaoVencidas.isEmpty() && qtdContas.compareTo(qtdContasNaoVencidas) == 0){							
							for(Integer idConta : idContasNaoVencidas){
								
								/*1.2.1.1.1. Retira a conta de cobrança, passando o id da conta (CNTA_ID da tabela
								 COBRANCA.EMPRESA_COBRANCA_CONTA da conta selecionada) e o id motivo de retirada 
								 correspondente à conta com vencimento maior do que o número de dias de validade do 
								 comando (MRCB_ID da tabela CADASTRO.MOTIVO_RETIRADA_COBRANCA com 
								 MRCB_DSMOTIVORETIRADA igual a "Conta(s) com vencimento 
								 maior do que o número de dias de validade do comando")*/								  
								//[SB0004 - Retirar Conta de Cobrança]								
								repositorioCobranca.retirarContasDeCobranca(idComando, idConta, 
									MotivoRetiradaCobranca.CONTA_VENCIMENTO_MAIOR_NUMERO_DIAS_VALIDADE_COMANDO);								
							}
							/*1.2.1.2. Retira o imóvel de cobrança, passando o id do imóvel selecionado
							(IMOV_ID da tabela COBRANCA.EMPRESA_COBRANCA_CONTA do imóvel selecionado), 
							id do comando selecionado (CECC_ID da tabela COBRANCA.COMANDO_EMPRESA_COBRANCA_CONTA 
							do comando selecionado) e o id motivo de retirada correspondente à contas
							com vencimento maior do que o número de dias de validade do comando (MRCB_ID da tabela 
							CADASTRO.MOTIVO_RETIRADA_COBRANCA com MRCB_DSMOTIVORETIRADA igual a "Conta(s) com vencimento maior do
							que o número de dias de validade do comando")*/
							//[SB0003 - Retirar Imovel de Cobrança]
							
							this.retirarImoveisDeCobranca(idComando, imov.getId(), MotivoRetiradaCobranca.CONTA_VENCIMENTO_MAIOR_NUMERO_DIAS_VALIDADE_COMANDO);
							
						}
						/*1.2.2. Caso contrário, o sistema verifica se existe pagamento ou parcelamento para as
						contas do imóvel (CNTA_ID da tabela COBRANCA.EMPRESA_COBRANCA_CONTA com IMOV_ID = id do imóvel
						selecionado e CECC_ID = id do comando selecionado e ECCO_DTRETIRADACONTA igual a nulo e 
						ECCO_CDCONCLUIDO igual a nulo e exista pagamento ou parcelamento para a conta ((CNTA_ID = CNTA_ID da tabela
						ARRECADACAO.PAGAMENTO) ou (CNTA_ID = CNTA_ID da tabela ARRECADACAO.PAGAMENTO_HISTORICO) ou (CNTA_ID = CNTA_ID da
						tabela COBRANCA.PARCELAMENTO_ITEM com CPAR_ID = CPAR_ID da tabela COBRANCA.PARCELAMENTO
						com PCST_ID da tabela COBRANCA.PARCELAMENTO_SITUACAO com PCST_DSPARCELAMENTOSITUACAO
						= "NORMAL" ou PCST_DSPARCELAMENTOSITUACAO = "CONCLUIDO")))*/
						else{
							Collection<Integer> idContasPagasOuParceladasTemp = repositorioCobranca
									.pesquisarContasPagasOuParceladas(idComando, imov.getId());
							idContasPagasOuParceladas = new ArrayList<Integer>();
							if(idContasPagasOuParceladasTemp !=null && !idContasPagasOuParceladasTemp.isEmpty()){
								for(Integer idConta : idContasPagasOuParceladasTemp){
									if(!idContasPagasOuParceladas.contains(idConta)){
										idContasPagasOuParceladas.add(idConta);
									}
								}
							}
							int qtdContasPagasOuParceladas = 0;
							if(idContasPagasOuParceladas !=null && !idContasPagasOuParceladas.isEmpty()){
								qtdContasPagasOuParceladas = idContasPagasOuParceladas.size(); 
							}
							
							if(idContasPagasOuParceladas !=null && !idContasPagasOuParceladas.isEmpty() && 
									qtdContas.compareTo(qtdContasPagasOuParceladas) == 0){
								
								for(Integer idConta : idContasPagasOuParceladas){
									/*1.2.2.1.1.1. Caso a conta esteja paga (id da conta selecionada = CNTA_ID da
									tabela ARRECADACAO.PAGAMENTO ou id da conta selecionada = CNTA_ID da tabela ARRECADACAO.PAGAMENTO_HISTORICO)*/
									if(repositorioCobranca.contaPaga(idConta)){
										/*1.2.2.1.1.1.1. Retira a conta de cobrança, passando o id da conta (CNTA_ID
										da tabela COBRANCA.EMPRESA_COBRANCA_CONTA da conta selecionada) e o id motivo de retirada
										correspondente à conta paga (MRCB_ID da tabela CADASTRO.MOTIVO_RETIRADA_COBRANCA
										com MRCB_DSMOTIVORETIRADA igual a "Conta paga")*/
										//[SB0004 - Retirar Conta de Cobrança]										
										repositorioCobranca.retirarContasDeCobranca(idComando, idConta, 
											MotivoRetiradaCobranca.CONTA_PAGA);	
										
									}
									else{
										/*1.2.2.1.1.2. Caso contrário, caso a conta esteja parcelada e tenha
										vencimento maior do que a quantidade de dias de vencimento
										para cobrança (id da conta selecionada = CNTA_ID da tabela
										FATURAMENTO.CONTA_GERAL e com data de vencimento
										maior do que o número de dias de validade do comando [SB0005
										- Verificar vencimento da conta] e CNTA_ID = CNTA_ID da
										tabela COBRANCA.PARCELAMENTO_ITEM com CPAR_ID
										= CPAR_ID da tabela COBRANCA.PARCELAMENTO com
										PCST_ID da tabela COBRANCA.PARCELAMENTO_SITUACAO
										com PCST_DSPARCELAMENTOSITUACAO = "NORMAL" ou
										PCST_DSPARCELAMENTOSITUACAO = "CONCLUIDO"):*/
										if(idContasNaoVencidas!=null && !idContasNaoVencidas.isEmpty() && idContasNaoVencidas.contains(idConta)){
											/*1.2.2.1.1.2.1. Retira a conta de cobrança, passando o id da conta (CNTA_ID
											da tabela COBRANCA.EMPRESA_COBRANCA_CONTA da conta selecionada) e o id motivo de retirada correspondente
											à conta parcelada e com vencimento maior do que o número de dias de validade do comando 
											(MRCB_ID da tabela CADASTRO.MOTIVO_RETIRADA_COBRANCA com MRCB_DSMOTIVORETIRADA igual a 
											"Conta parcelada e com vencimento maior do que o número de dias de validade do comando") */
											//[SB0004 - Retirar Conta de Cobrança]											
											repositorioCobranca.retirarContasDeCobranca(idComando, idConta, 
												MotivoRetiradaCobranca.CONTA_PARCELADA_VENCIMENTO_MAIOR_NUMERO_DIAS_VALIDADE_COMANDO);
											
										}
									}
									
								}
								/*1.2.2.1.2. Retira o imóvel de cobrança, passando o id do imóvel selecionado
								(IMOV_ID da tabela COBRANCA.EMPRESA_COBRANCA_CONTA do imóvel selecionado), 
								id do comando selecionado (CECC_ID da tabela COBRANCA.COMANDO_EMPRESA_COBRANCA_CONTA
								do comando selecionado) e o id motivo de retirada correspondente à contas pagas e/ou parceladas (MRCB_ID da
								tabela	CADASTRO.MOTIVO_RETIRADA_COBRANCA com MRCB_DSMOTIVORETIRADA igual a "Contas pagas e/ou parceladas")*/								
								//[SB0003 - Retirar Imovel de Cobrança]
								
								this.retirarImoveisDeCobranca(idComando, imov.getId(), MotivoRetiradaCobranca.CONTAS_PAGAS_E_OU_PARCELADAS);									
								
								
							}
							else if(idContasPagasOuParceladas !=null && !idContasPagasOuParceladas.isEmpty()){
								
								if(idContasPagasOuParceladas !=null && !idContasPagasOuParceladas.isEmpty()){
									for(Integer idConta : idContasPagasOuParceladas){
										//Verifica se a conta foi paga
										if(repositorioCobranca.contaPaga(idConta)){
											contasPagas.add(idConta);				
										}
										else{
											if(idContasNaoVencidas!=null && !idContasNaoVencidas.isEmpty() && idContasNaoVencidas.contains(idConta)){
												
												/*1.2.2.2.1.1.2.1. Retira a conta de cobrança, passando o id da conta (CNTA_ID da tabela 
												 COBRANCA.EMPRESA_COBRANCA_CONTA da conta selecionada) e o id motivo de retirada 
												 correspondente à conta parcelada e com vencimento maior do que o número de dias de validade 
												 do comando (MRCB_ID da tabela CADASTRO.MOTIVO_RETIRADA_COBRANCA com 
												 MRCB_DSMOTIVORETIRADA igual a "Conta parcelada e com vencimento maior do que o número de 
												 dias de validade do comando")*/
													
												contasParceladas.add(idConta);	
											}
										}
									}
								}
								/*1.2.2.2.1.1.3.Caso contrário, caso a conta tenha vencimento maior do que a quantidade de 
								 dias de vencimento para cobrança (id da conta selecionada = CNTA_ID da tabela
								FATURAMENTO.CONTA_GERAL e com data de vencimento maior do que o número de dias de validade do comando */
								
								if(idContasNaoVencidas !=null && !idContasNaoVencidas.isEmpty()){
									for(Integer idConta : idContasNaoVencidas){
										/*1.2.2.2.1.1.3.1. Retira a conta de cobrança, passando o id da conta (CNTA_ID
										da tabela COBRANCA.EMPRESA_COBRANCA_CONTA da conta selecionada) e o id 
										motivo de retirada correspondente à conta com vencimento maior do que o número de 
										dias de validade do comando (MRCB_ID da tabela CADASTRO.MOTIVO_RETIRADA_COBRANCA com
										MRCB_DSMOTIVORETIRADA igual a "Conta(s) com vencimento maior do que o número de 
										dias de validade do comando") */
										if(!contasParceladas.contains(idConta) && !contasPagas.contains(idConta)){
											contasNaoVencidas.add(idConta);
										}
										
									}
								}
								int contasRetirar = 0;
								if(!contasNaoVencidas.isEmpty()){
									contasRetirar =  (contasNaoVencidas.size() + idContasPagasOuParceladas.size());	
								}
								else{
									contasRetirar = idContasPagasOuParceladas.size();
								}
								
								if(qtdContas.compareTo(contasRetirar) == 0){
									if(!contasPagas.isEmpty()){
										for(Integer idConta : contasPagas){
											repositorioCobranca.retirarContasDeCobranca(idComando, idConta, MotivoRetiradaCobranca.CONTA_PAGA);										
										}
									}
									if(!contasParceladas.isEmpty()){
										for(Integer idConta : contasParceladas){
											repositorioCobranca.retirarContasDeCobranca(idComando, idConta, 
												MotivoRetiradaCobranca.CONTA_PARCELADA_VENCIMENTO_MAIOR_NUMERO_DIAS_VALIDADE_COMANDO);									
										}
									}
									if(!contasNaoVencidas.isEmpty()){
										for(Integer idConta : contasNaoVencidas){
											repositorioCobranca.retirarContasDeCobranca(idComando, idConta, 
												MotivoRetiradaCobranca.CONTA_VENCIMENTO_MAIOR_NUMERO_DIAS_VALIDADE_COMANDO);
										}										
									}
									/*1.2.2.2.1.2. Retira o imóvel de cobrança, passando o id do imóvel selecionado (IMOV_ID da tabela 
									COBRANCA.EMPRESA_COBRANCA_CONTA do imóvel selecionado), id do comando selecionado (CECC_ID da tabela 
									COBRANCA.COMANDO_EMPRESA_COBRANCA_CONTA	do comando selecionado) e o id motivo de retirada correspondente à 
									contas pagas e/ou parceladas (MRCB_ID da tabela CADASTRO.MOTIVO_RETIRADA_COBRANCA com	MRCB_DSMOTIVORETIRADA 
									igual a "Contas pagas e/ou parceladas")*/ 
									//[SB0003 - Retirar Imóvel de Cobrança];
									
									this.retirarImoveisDeCobranca(idComando, imov.getId(), MotivoRetiradaCobranca.CONTAS_PAGAS_E_OU_PARCELADAS);									
									
								}
								else{
									/*1.2.2.3.1. O sistema guarda a data de envio do imóvel para cobrança
									(menor ECCO_DTENVIOCONTA da tabela COBRANCA.EMPRESA_COBRANCA_CONTA com IMOV_ID = id do
									imóvel selecionado e CECC_ID = id do comando selecionado);*/
									dataEnvio = repositorioCobranca.pesquisarDataEnvioImovelCobranca(idComando, imov.getId());
									
									/*1.2.2.3.2. Caso a data de envio do imóvel para cobrança mais a quantidade de dias
									para retirada de cobrança seja menor ou igual à data atual (data de envio do
									imóvel para cobrança mais PARM_NNDIASRETIRARCNTAEMPCOB
									da tabela CADASTRO.SISTEMA_PARAMETROS maior ou igual do que a
									Data Atual):*/
									if(dataEnvio !=null && sist.getNumeroDiaRetiradaContaEmpresaCobraca() !=null &&
									  (dataEnvio.getTime() + sist.getNumeroDiaRetiradaContaEmpresaCobraca().longValue()) <= hoje.getTime()){
										
										/*1.2.2.3.2.1.1. Retira a conta de cobrança, passando o id da conta (CNTA_ID
										da tabela COBRANCA.EMPRESA_COBRANCA_CONTA da conta selecionada) e o id motivo de retirada correspondente
										à conta excedeu o prazo de cobrança (MRCB_ID da tabela CADASTRO.MOTIVO_RETIRADA_COBRANCA
										com MRCB_DSMOTIVORETIRADA igual a "Conta excedeu o
										prazo de cobrança")*/										
										repositorioCobranca.retirarContasDeCobrancaPorImovel(idComando, imov.getId(),
											MotivoRetiradaCobranca.CONTA_EXCEDEU_PRAZO_COBRANCA);
										
											/*1.2.2.3.2.2. Retira o imóvel de cobrança, passando o
											id do imóvel selecionado (IMOV_ID da tabela COBRANCA.EMPRESA_COBRANCA_CONTA do
											imóvel selecionado), id do comando selecionado (CECC_ID da tabela
											COBRANCA.COMANDO_EMPRESA_COBRANCA_CONTA do comando selecionado) e o id motivo de retirada correspondente
											à contas excederam o prazo de cobrança (MRCB_ID da tabela CADASTRO.MOTIVO_RETIRADA_COBRANCA
											com MRCB_DSMOTIVORETIRADA igual a "Contas excederam o prazo
											de cobrança")*/
											
											this.retirarImoveisDeCobranca(idComando, imov.getId(), 
												MotivoRetiradaCobranca.CONTAS_EXCEDERAM_PRAZO_COBRANCA);
											
											
										
									}
								}
							}
							//else{
								/*1.2.2.3.1. O sistema guarda a data de envio do imóvel para cobrança
								(menor ECCO_DTENVIOCONTA da tabela COBRANCA.EMPRESA_COBRANCA_CONTA com IMOV_ID = id do
								imóvel selecionado e CECC_ID = id do comando selecionado);*/
								dataEnvio = repositorioCobranca.pesquisarDataEnvioImovelCobranca(idComando, imov.getId());								
																
								/*1.2.2.3.2. Caso a data de envio do imóvel para cobrança mais a quantidade de dias
								para retirada de cobrança seja menor ou igual à data atual (data de envio do
								imóvel para cobrança mais PARM_NNDIASRETIRARCNTAEMPCOB
								da tabela CADASTRO.SISTEMA_PARAMETROS maior ou igual do que a
								Data Atual):*/
								if(dataEnvio !=null && sist.getNumeroDiaRetiradaContaEmpresaCobraca() !=null &&
								  (dataEnvio.getTime() + sist.getNumeroDiaRetiradaContaEmpresaCobraca().longValue()) <= hoje.getTime()){
									
									/*1.2.2.3.2.1.1. Retira a conta de cobrança, passando o id da conta (CNTA_ID
									da tabela COBRANCA.EMPRESA_COBRANCA_CONTA da conta selecionada) e o id motivo de retirada correspondente
									à conta excedeu o prazo de cobrança (MRCB_ID da tabela CADASTRO.MOTIVO_RETIRADA_COBRANCA
									com MRCB_DSMOTIVORETIRADA igual a "Conta excedeu o
									prazo de cobrança")*/										
									repositorioCobranca.retirarContasDeCobrancaPorImovel(idComando, imov.getId(),
										MotivoRetiradaCobranca.CONTA_EXCEDEU_PRAZO_COBRANCA);
									
										/*1.2.2.3.2.2. Retira o imóvel de cobrança, passando o
										id do imóvel selecionado (IMOV_ID da tabela COBRANCA.EMPRESA_COBRANCA_CONTA do
										imóvel selecionado), id do comando selecionado (CECC_ID da tabela
										COBRANCA.COMANDO_EMPRESA_COBRANCA_CONTA do comando selecionado) e o id motivo de retirada correspondente
										à contas excederam o prazo de cobrança (MRCB_ID da tabela CADASTRO.MOTIVO_RETIRADA_COBRANCA
										com MRCB_DSMOTIVORETIRADA igual a "Contas excederam o prazo
										de cobrança")*/	
										
										this.retirarImoveisDeCobranca(idComando, imov.getId(), 
											MotivoRetiradaCobranca.CONTAS_EXCEDERAM_PRAZO_COBRANCA);	
								}
							//}
						}
						
					}
				}
				System.out.println("*******************************************");
				System.out.println("FINAL DO PROCESSAMENTO PARA O COMANDO: "+idComando);
				System.out.println("*******************************************");				
				
			//}
			getControladorBatch().encerrarUnidadeProcessamentoBatch(null, idUnidadeIniciada, false);
		}catch (Throwable e) {
			e.printStackTrace();
			sessionContext.setRollbackOnly();
			getControladorBatch().encerrarUnidadeProcessamentoBatch(e, idUnidadeIniciada, true);
			throw new ControladorException("erro.sistema",e);
		}
	}
	
	/**
	 * [UC 1256] Retirar Imóveis e Contas das Empresas de Cobrança
	 * [SB0003 - Retirar Conta de Cobrança]
	 * 
	 * Metodo que retira os imóveis de cobrança
	 * 
	 * @author Raimundo Martins
	 * @date 16/12/2011
	 * */
	private void retirarImoveisDeCobranca(Integer idComando, Integer idImovel, Integer motivoRetirada)throws ControladorException{
		try{
			if(!repositorioCobranca.isImovelRetirado(idImovel, idComando)){				
				repositorioCadastro.atualizarImovelCobrancaSituacao(idImovel, repositorioCobranca
					.pesquisarCobrancaSituacao(CobrancaSituacao.COBRANCA_EMPRESA_TERCEIRIZADA));
				repositorioCadastro.atualizarImovelSituacao(idImovel);
				
				ImovelRetiradaComandoPK pk = new ImovelRetiradaComandoPK();
				pk.setIdComando(idComando);
				pk.setIdImovel(idImovel);
				
				MotivoRetiradaCobranca motivo = new MotivoRetiradaCobranca();
				motivo.setId(motivoRetirada);
				
				ImovelRetiradaComando imovelRetirada = new ImovelRetiradaComando();
				imovelRetirada.setPk(pk);
				imovelRetirada.setMotivoRetirada(motivo);
				imovelRetirada.setDataRetirada(new Date());
				imovelRetirada.setUltimaAlteracao(new Date());
				
				repositorioUtil.inserir(imovelRetirada);
			}
			
		}catch (ErroRepositorioException ex) {
			ex.printStackTrace();
			throw new ControladorException("erro.sistema", ex);
		}
	}
	
	/**
	 * [UC1151] Gerar Boletim de Medição
	 * 
	 * [SB0001] ? Gerar Atualização do Banco de Dados
	 * 
	 * 
	 * @author Sávio Luiz
	 * @throws ControladorException 
	 * @data 22/03/2011
	 * 
	 * @throws ControladorException 
	 * */
	private void atualizarDadosBoletimMedicao (Integer idContratoEmpresaServico,Collection<CobrancaBoletimExecutado> collCobrancaBoletimExecutado,
			Collection<CobrancaBoletimDesconto> collCobrancaBoletimDescontado,BigDecimal valorTotalExecutado,BigDecimal valorTotalDescontado,
			BigDecimal valorTotalTaxaSucesso,Collection<Integer> collIdsOS,Collection<Integer> collIdsOSNaoAceitas,Integer idGrupo,Integer referencia,
			Collection<CobrancaBoletimSucesso> collCobrancaBoletimSucesso) throws ControladorException{
		try{
			//1. Inclui o boletim de medição na tabela COBR_BOLETIM_MEDICAO
			BigDecimal valorTotal = valorTotalTaxaSucesso.add(valorTotalExecutado);
			valorTotal = valorTotal.subtract(valorTotalDescontado);
			CobrancaBoletimMedicao cobrancaBoletimMedicao = new CobrancaBoletimMedicao();
			cobrancaBoletimMedicao.setAnoMesReferencia(referencia);
			CobrancaGrupo cobrancaGrupo = new CobrancaGrupo();
			cobrancaGrupo.setId(idGrupo);
			cobrancaBoletimMedicao.setCobrancaGrupo(cobrancaGrupo);
			cobrancaBoletimMedicao.setDataGeracaoBoletim(new Date());
			cobrancaBoletimMedicao.setValorDescontos(valorTotalDescontado);
			cobrancaBoletimMedicao.setValorTaxaSucesso(valorTotalTaxaSucesso);
			cobrancaBoletimMedicao.setValorServicosExecutados(valorTotalExecutado);
			ContratoEmpresaServico contratoEmpresaServico = new ContratoEmpresaServico();
			contratoEmpresaServico.setId(idContratoEmpresaServico);
			cobrancaBoletimMedicao.setContratoEmpresaServico(contratoEmpresaServico);
			cobrancaBoletimMedicao.setValorTotal(valorTotal);
			cobrancaBoletimMedicao.setUltimaAlteracao(new Date());
			Integer idCobrancaBoletimMedicao = (Integer)getControladorUtil().inserir(cobrancaBoletimMedicao);
			cobrancaBoletimMedicao.setId(idCobrancaBoletimMedicao);
			
			//1.1.1 Inclui a Ordem de Serviço na tabela COBR_BOLETIM_EXEC com os seguintes valores
			Collection collCobrancaBoletimExecutadoInserir = new ArrayList();
			for(CobrancaBoletimExecutado cobrancaBoletimExecutado : collCobrancaBoletimExecutado){
				if(cobrancaBoletimExecutado != null){
					if(cobrancaBoletimExecutado.getOrdemServico().getId().equals(1957681)){
						System.out.println("");
					}
					cobrancaBoletimExecutado.setCobrancaBoletimMedicao(cobrancaBoletimMedicao);
					cobrancaBoletimExecutado.setUltimaAlteracao(new Date());
					CobrancaBoletimExecutadoPK executadoPK = new CobrancaBoletimExecutadoPK();
					executadoPK.setCobrancaBoletimMedicaoId(cobrancaBoletimMedicao.getId());
					executadoPK.setOrdemServicoId(cobrancaBoletimExecutado.getOrdemServico().getId());
					cobrancaBoletimExecutado.setComp_id(executadoPK);
					collCobrancaBoletimExecutadoInserir.add(cobrancaBoletimExecutado);
				}
			}
			if(collCobrancaBoletimExecutadoInserir != null && !collCobrancaBoletimExecutadoInserir.isEmpty()){
				getControladorBatch().inserirColecaoObjetoParaBatch(collCobrancaBoletimExecutadoInserir);
			}
			
			//1.1.1 Inclui a Ordem de Serviço na tabela COBR_BOLETIM_DESC com os seguintes valores
			Collection collCobrancaBoletimDescontadoInserir = new ArrayList();
			for(CobrancaBoletimDesconto cobrancaBoletimDesconto : collCobrancaBoletimDescontado){
				if(cobrancaBoletimDesconto != null){
					cobrancaBoletimDesconto.setCobrancaBoletimMedicao(cobrancaBoletimMedicao);
					cobrancaBoletimDesconto.setUltimaAlteracao(new Date());
					CobrancaBoletimDescontoPK descontadoPK = new CobrancaBoletimDescontoPK();
					descontadoPK.setCobrancaBoletimMedicaoId(cobrancaBoletimMedicao.getId());
					descontadoPK.setOrdemServicoId(cobrancaBoletimDesconto.getOrdemServico().getId());
					cobrancaBoletimDesconto.setComp_id(descontadoPK);
					collCobrancaBoletimDescontadoInserir.add(cobrancaBoletimDesconto);
				}
			}
			if(collCobrancaBoletimDescontadoInserir != null && !collCobrancaBoletimDescontadoInserir.isEmpty()){
				getControladorBatch().inserirColecaoObjetoParaBatch(collCobrancaBoletimDescontadoInserir);
			}
			
			//1.1.1 Atualiza a Ordem de Serviço na tabela ORDEM_SERVICO com o indicativo que a mesma já foi incluída no boletim
			if(collIdsOS != null && !collIdsOS.isEmpty()){
			  this.repositorioCobranca.atualizaIndicadorBoletimOS(collIdsOS);
			}
			
			//1.1.1 Atualiza o indicador de desconto da Ordem de Serviço na tabela COB_AC_OS_NAO_ACEITAS 
			//com o indicativo que a mesma já foi descontada no boletim
			if(collIdsOSNaoAceitas != null && !collIdsOSNaoAceitas.isEmpty()){
			  this.repositorioCobranca.atualizaIndicadorCobrancaAcaoOSNaoAceitas(collIdsOSNaoAceitas);
			}
			
			//1.1.1 Inclui a Ordem de Serviço na tabela COBR_BOLETIM_SUCESSO
			Collection collCobrancaBoletimSucessoInserir = new ArrayList();
			for(CobrancaBoletimSucesso cobrancaBoletimSucesso : collCobrancaBoletimSucesso){
				if(cobrancaBoletimSucesso != null){
					cobrancaBoletimSucesso.setCobrancaBoletimMedicao(cobrancaBoletimMedicao);
					cobrancaBoletimSucesso.setUltimaAlteracao(new Date());
					CobrancaBoletimSucessoPK sucessoPK = new CobrancaBoletimSucessoPK();
					sucessoPK.setCobrancaBoletimMedicaoId(cobrancaBoletimMedicao.getId());
					sucessoPK.setImovelId(cobrancaBoletimSucesso.getImovel().getId());
					cobrancaBoletimSucesso.setComp_id(sucessoPK);
					collCobrancaBoletimSucessoInserir.add(cobrancaBoletimSucesso);
				}
			}
			/*
			 * Adicionado por Raimundo Martins em 18/11/2011
			 * 
			 * 2. Caso exista justificativas  de não geração de penalidades 
			 * informadas para o grupo de cobrança de cobrança do boletim, 
			 * o sistema deverá atualizar a tabela de justificativa com 
			 * o ID do boletim gerado na tabela BOL_MED_AC_PEN_JUST
			*/
			Collection<Integer> penalidadesNaoGeradas = this.pesquisarNaoPenalidades(idGrupo, referencia);
			if(penalidadesNaoGeradas !=null && !penalidadesNaoGeradas.isEmpty()){
				for(Integer idPenalidadeNaogerada : penalidadesNaoGeradas){
					//Integer idPenalidadeNaogerada = Integer.parseInt(ob[0].toString());
					repositorioCobranca.atualizarBoletimGeradoEmBolMedAcPenJust(idPenalidadeNaogerada, cobrancaBoletimMedicao.getId());
				}
			}
			if(collCobrancaBoletimSucessoInserir != null && !collCobrancaBoletimSucessoInserir.isEmpty()){
				getControladorBatch().inserirColecaoObjetoParaBatch(collCobrancaBoletimSucessoInserir);
			}
		} catch (ErroRepositorioException ex) {
			ex.printStackTrace();
			throw new ControladorException("erro.sistema", ex);
		}
		
	}
	/**
	 * [UC1238] Gerar Relatório de Acompanhamento dos Comandos de Cobrança
	 * 
	 * @author Mariana Victor
	 * @date 08/11/2011
	 */
	public List<RelatorioAcompanhamentoComandosCobrancaBean> obterDadosAcompanhamentoComandosCobranca(
		Integer idEmpresa, Date dataInicial, Date dataFinal) throws ControladorException {
		
		List<RelatorioAcompanhamentoComandosCobrancaBean> retorno = 
				new ArrayList<RelatorioAcompanhamentoComandosCobrancaBean>();
		try{

			FiltroEmpresaCobrancaFaixa filtroEmpresaCobrancaFaixa = new FiltroEmpresaCobrancaFaixa();
			filtroEmpresaCobrancaFaixa.adicionarParametro(new ParametroSimples(
					FiltroEmpresaCobrancaFaixa.EMPRESA_ID, idEmpresa));
			filtroEmpresaCobrancaFaixa.setCampoOrderBy(FiltroEmpresaCobrancaFaixa.NUMERO_MAXIMO_CONTAS_FAIXA);
			
			List<EmpresaCobrancaFaixa> colecaoEmpresaCobrancaFaixa = (List<EmpresaCobrancaFaixa>)
					this.getControladorUtil().pesquisar(filtroEmpresaCobrancaFaixa,
						EmpresaCobrancaFaixa.class.getName());
			
			Map<Integer, RelatorioAcompanhamentoComandosCobrancaSubBean> totalizacaoFaixas = 
					new HashMap<Integer, RelatorioAcompanhamentoComandosCobrancaSubBean>();
			
			Collection<Object[]> colecaoTotaisComandos = this.repositorioCobranca.pesquisarTotalizacaoComandoContasCobrancaEmpresa(
				colecaoEmpresaCobrancaFaixa, idEmpresa,dataInicial,dataFinal);
			
			if (colecaoTotaisComandos != null && !colecaoTotaisComandos.isEmpty()) {
				Iterator<Object[]> iteratorComandos = colecaoTotaisComandos.iterator();
				
				while(iteratorComandos.hasNext()) {
					Object[] totaisComando = (Object[]) iteratorComandos.next();
					
					RelatorioAcompanhamentoComandosCobrancaBean bean = new RelatorioAcompanhamentoComandosCobrancaBean();
					RelatorioAcompanhamentoComandosCobrancaSubBean subBean = null;
					
					Integer quantidadeContas = new Integer(0);
					Integer quantidadeClientes = new Integer(0);
					BigDecimal valorTotal = BigDecimal.ZERO;
					Integer idComando = null;
					Date dataExecucao = null;
					Date dataInicio = null;
					Date dataFim = null;
					Integer faixa = null;
					String descricaoFaixa = null;
					
					if (totaisComando != null) {
						if (totaisComando[0] != null) {
							quantidadeContas = (Integer) totaisComando[0];
						}
						if (totaisComando[1] != null) {
							quantidadeClientes = (Integer) totaisComando[1];
						}
						if (totaisComando[2] != null) {
							valorTotal = (BigDecimal) totaisComando[2];
						}
						if (totaisComando[3] != null) {
							idComando = (Integer) totaisComando[3];
						}
						if (totaisComando[4] != null) {
							dataExecucao = (Date) totaisComando[4];
						}
						if (totaisComando[5] != null) {
							dataInicio = (Date) totaisComando[5];
						}
						if (totaisComando[6] != null) {
							dataFim = (Date) totaisComando[6];
						}
						if (totaisComando[7] != null) {
							faixa = (Integer) totaisComando[7];
						}
						if (totaisComando[8] != null) {
							descricaoFaixa = (String) totaisComando[8];
						}
					}

					if (totalizacaoFaixas != null && !totalizacaoFaixas.isEmpty() && totalizacaoFaixas.get(faixa) != null) {
						subBean = totalizacaoFaixas.get(faixa);
					} else {
						subBean = new RelatorioAcompanhamentoComandosCobrancaSubBean(
							descricaoFaixa, new Integer(0), new Integer(0), BigDecimal.ZERO);
					}
					
					subBean.setQuantidadeContas(subBean.getQuantidadeContas() + quantidadeContas);
					subBean.setQuantidadeClientes(subBean.getQuantidadeClientes() + quantidadeClientes);
					subBean.setValorTotal(subBean.getValorTotal().add(valorTotal));
					
					if (totalizacaoFaixas != null && !totalizacaoFaixas.isEmpty() && totalizacaoFaixas.get(faixa) != null) {
						totalizacaoFaixas.remove(faixa);
					}
					totalizacaoFaixas.put(faixa, subBean);
					
					bean.setComando(idComando.toString());
					bean.setDataExecucao(dataExecucao);
					bean.setDataInicio(dataInicio);
					bean.setDataFinal(dataFim);
					bean.setFaixa(descricaoFaixa);
					bean.setQuantidadeContas(quantidadeContas);
					bean.setQuantidadeClientes(quantidadeClientes);
					bean.setValorTotal(valorTotal);
					bean.setRelatorioAcompanhamentoComandosCobrancaSubBean(totalizacaoFaixas.values());
					
					retorno.add(bean);
				}
			}
			
		} catch (ErroRepositorioException ex) {
			ex.printStackTrace();
			new ControladorException("erro.sistema", ex);
		}
		
		return retorno;
	}

	/**
	 * [UC120] Gerar Boletim de Cobrança por Resultado
	 * 
	 * Método que gera os dados
	 * do boletim de cobrança por resultado
	 * 
	 * @author Raimundo Martins
	 * @date 24/10/2011
	 * */	
	public void gerarBoletimCobrancaResultado(Usuario usuario, Integer idFuncionalidade) throws ControladorException{
		int idUnidadeIniciada = 0;
		try{
			SistemaParametro sistemaParametro = this.getControladorUtil().pesquisarParametrosDoSistema();
			idUnidadeIniciada = getControladorBatch().iniciarUnidadeProcessamentoBatch(idFuncionalidade, UnidadeProcessamento.FUNCIONALIDADE, 0);
			
			/*remove para atualizar a informação*/
			repositorioCobranca.removerDadosBoletimCobrancaResultado(sistemaParametro.getAnoMesArrecadacao());
			
			Collection<Object[]> dadosBoletim = repositorioCobranca.pesquisarDadosBoletimCobrancaResultado();			
			
			if(dadosBoletim !=null && !dadosBoletim.isEmpty()){							
				for(Object[] ob : dadosBoletim){					
					
					Imovel imov = new Imovel();
					imov.setId((Integer) ob[3]);									
					ComandoEmpresaCobrancaConta comand = new ComandoEmpresaCobrancaConta();
					comand.setId((Integer) ob[0]);
					EmpresaCobrancaFaixa empresaFaixa = new EmpresaCobrancaFaixa(); 
					empresaFaixa.setId(repositorioCobranca.pesquisarEmpresaCobrancaFaixa(comand.getId(), imov.getId(), (Integer)ob[11]));					
					Localidade local = new Localidade();
					local.setId((Integer) ob[2]);
					
					EmpresaCobrancaContaBoletimMedicao empresaCobrancaContaBoletimMedicao = new EmpresaCobrancaContaBoletimMedicao();
					empresaCobrancaContaBoletimMedicao.setAnoMesReferenciaConta((Integer) ob[1]);					
					empresaCobrancaContaBoletimMedicao.setComandoEmpresaCobrancaConta(comand);					
					empresaCobrancaContaBoletimMedicao.setEmpresaCobrancaFaixa(empresaFaixa);				
					empresaCobrancaContaBoletimMedicao.setImovel(imov);					
					empresaCobrancaContaBoletimMedicao.setLocalidade(local);					
					empresaCobrancaContaBoletimMedicao.setQtdContasCanceladas((Integer) ob[4]);
					empresaCobrancaContaBoletimMedicao.setQtdContasPagasAVista((Integer) ob[6]);
					empresaCobrancaContaBoletimMedicao.setQtdContasParcelado((Integer) ob[7]);
					empresaCobrancaContaBoletimMedicao.setUltimaAlteracao(new Date());
					empresaCobrancaContaBoletimMedicao.setValorTotalContasCanceladas((BigDecimal) ob[5]);
					empresaCobrancaContaBoletimMedicao.setValorTotalContasPagasAVista((BigDecimal) ob[8]);
					empresaCobrancaContaBoletimMedicao.setValorTotalContasParcelado((BigDecimal) ob[9]);
					empresaCobrancaContaBoletimMedicao.setValorDesconto((BigDecimal) ob[10]);
					
					repositorioUtil.inserir(empresaCobrancaContaBoletimMedicao);
				
				}		
			}
			else{
				throw new ControladorException("atencao.nenhum_dado_ou_periodo_inválido.pagamento.atualizado");
			}
			
			getControladorBatch().encerrarUnidadeProcessamentoBatch(null,
				idUnidadeIniciada, false);
			
		} catch (Exception ex) {
			ex.printStackTrace();
			getControladorBatch().encerrarUnidadeProcessamentoBatch(ex,
					idUnidadeIniciada, true);
			throw new EJBException(ex);
		}
	}

    /**
     * [UC1156] Emitir Documentos de Cobrança Em Lote
     * 
     * @author Mariana Vcitor
     * @date 13/07/2011
     */
	public Date obterDataVencimentoDocumentoCobranca(CobrancaDocumento cobrancaDocumento)throws ControladorException {
			
		Date dataValidade = cobrancaDocumento.getEmissao();
		
		try {
			
			if (dataValidade != null && cobrancaDocumento.getCobrancaAcao() != null && 
					cobrancaDocumento.getCobrancaAcao().getNumeroDiasVencimento() != null){
				
				Calendar dataCalendar = Calendar.getInstance();
				dataCalendar.setTime(dataValidade);
				dataCalendar.add(Calendar.DAY_OF_MONTH, cobrancaDocumento.getCobrancaAcao().getNumeroDiasVencimento().intValue());
			
				dataValidade = dataCalendar.getTime();
				
			}else{
				
				Short numeroDiasValidadeExtrato = 0;
				SistemaParametro sistemaParametro = getControladorUtil().pesquisarParametrosDoSistema();
				
				//se o numero de validade do extrato para permissão especial não for nulo
				if (sistemaParametro.getNumeroDiasValidadeExtratoPermissaoEspecial() != null){
	
					numeroDiasValidadeExtrato = sistemaParametro.getNumeroDiasValidadeExtratoPermissaoEspecial();

				}else{
				
					numeroDiasValidadeExtrato = sistemaParametro.getNumeroDiasValidadeExtrato();
				}
				
				dataValidade = Util.adicionarNumeroDiasDeUmaData(dataValidade, numeroDiasValidadeExtrato.intValue());

			}
			
			
		} catch (ControladorException e) {
			e.printStackTrace();
			throw new ControladorException("erro.sistema", e);
		}
		
		return dataValidade;
		
	}

	
	
	/**
	 * [UC0869] Gerar Arquivo Texto de Contas em Cobrança por Empresa
	 * 
	 * Pesquisa a quantidade de contas
	 * 
	 * @author: Rômulo Aurélio, Mariana Victor
	 * @date: 29/10/2008, 26/04/2011
	 */
	public void gerarArquivoTextoContasEmCobrancaEmpresa(Collection ids,
			Integer idEmpresa, Integer idUnidadeProcessamento, int idFuncionalidadeIniciada)
			throws ControladorException {
		
		SistemaParametro sistemaParametro = this.getControladorUtil().pesquisarParametrosDoSistema();
		
		// 4.	Caso o layout selecionado seja 1 (um):
		if (!sistemaParametro.getNomeAbreviadoEmpresa().equalsIgnoreCase(
				SistemaParametro.EMPRESA_COMPESA)) {
			this.gerarArquivoTextoContasEmCobrancaEmpresaLayout01(
				ids, idEmpresa, idUnidadeProcessamento, idFuncionalidadeIniciada);
		} else {
			// 5.	Caso contrário o layout selecionado seja 2 (dois):
			this.gerarArquivoTextoContasEmCobrancaEmpresaLayout02(
				ids, idEmpresa, idUnidadeProcessamento, idFuncionalidadeIniciada);
		}

	}
	
	
	
	/**
	 * [UC0869] Gerar Arquivo Texto de Contas em Cobrança por Empresa
	 * 
	 * Pesquisa a quantidade de contas
	 * 
	 * @author: Rômulo Aurélio, Mariana Victor
	 * @date: 29/10/2008, 26/04/2011
	 */
	
	public void gerarArquivoTextoContasEmCobrancaEmpresaLayout01(Collection ids,
			Integer idEmpresa, Integer idUnidadeNegocio, int idFuncionalidadeIniciada)
			throws ControladorException {
		
		int idUnidadeIniciada = 0;
		ZipOutputStream zos = null;
		BufferedWriter out =  null;

		try {
			SistemaParametro sistemaParametro = this.getControladorUtil().pesquisarParametrosDoSistema();
			
			// -------------------------
			// Registrar o início do processamento da Unidade de
			// Processamento do Batch
			// -------------------------
			
			idUnidadeIniciada = getControladorBatch()
					.iniciarUnidadeProcessamentoBatch(idFuncionalidadeIniciada,
							UnidadeProcessamento.UNIDADE_NEGOCIO, idUnidadeNegocio);

			// Variáveis para a paginação da pesquisa
			// ========================================================================
			boolean flagTerminou = false;
			final int quantidadeRegistros = 50000;
			int numeroIndice = 0;
			// ========================================================================
			
			Integer idPerfilProgramaEspecial = null;
			
			if(sistemaParametro.getPerfilProgramaEspecial()!=null){
				idPerfilProgramaEspecial = sistemaParametro.getPerfilProgramaEspecial().getId();
			}

			
			if (ids != null && ids.size() > 0) {
				
				Collection colecaoDadosTxt = null;
				
				
				String nomeArquivo = null;
				
				// criar o arquivo zip
				File compactado = null; // nomeZip
				zos = null;

				File leitura = null;

				out = null;
				
				while (!flagTerminou) {

					System.out.println("Inicio pesquisarDadosArquivoTextoContasCobrancaEmpresa ");
					
					colecaoDadosTxt = repositorioCobranca
							.pesquisarDadosArquivoTextoContasCobrancaEmpresa(
									ids, 
									idUnidadeNegocio,
									numeroIndice, 
									quantidadeRegistros,
									idPerfilProgramaEspecial);
					
					System.out.println("Voltou pesquisarDadosArquivoTextoContasCobrancaEmpresa ");

					if (colecaoDadosTxt != null && !colecaoDadosTxt.isEmpty()) {

						boolean aux = true;
						Iterator colecaoDadosTxtIterator = colecaoDadosTxt.iterator();
						
						while (colecaoDadosTxtIterator.hasNext()) {
							
							GerarArquivoTextoContasCobrancaEmpresaHelper helper = 
								new GerarArquivoTextoContasCobrancaEmpresaHelper();
							
							StringBuilder arquivoTxt = new StringBuilder();
							
							// cria um array de objetos para pegar os parametros
							// de retorno da pesquisa
							Object[] arraydadosTxt = 
								(Object[]) colecaoDadosTxtIterator.next();
							
							if (aux){
								nomeArquivo = "contas_cobranca_empresa_"+idEmpresa+"_"+idUnidadeNegocio+
									"_"+ Util.formatarDataComTracoAAAAMMDD(new Date()) +
									"_" + Util.formatarDataHHMM(new Date())+ "";
							
								// criar o arquivo zip
								compactado = new File(nomeArquivo + ".zip"); // nomeZip
								zos = new ZipOutputStream(new FileOutputStream(compactado));

								leitura = new File(nomeArquivo + ".txt");

								out = new BufferedWriter(
									new OutputStreamWriter(
										new FileOutputStream(
											leitura.getAbsolutePath())));
							}
							
							this.montarDadosGerarArquivoTextoContasEmCobrancaEmpresa(arraydadosTxt, helper, ids);									
							this.montarArquivoTextoContasEmCobrancaEmpresa(arquivoTxt, helper);
							
							arquivoTxt.append(System.getProperty("line.separator"));

							if (arquivoTxt != null && arquivoTxt.length() != 0) {

								out.write(arquivoTxt.toString());
								out.flush();

							}
							aux = false;
						
							helper = null;
						}
						
					}

					
					// Incrementa o nº do indice da páginação
					numeroIndice = numeroIndice + quantidadeRegistros;

					/**
					 * Caso a coleção de dados retornados for menor que a
					 * quantidade de registros seta a flag indicando que a
					 * paginação terminou.
					 */
					if (colecaoDadosTxt == null || 
						colecaoDadosTxt.size() < quantidadeRegistros) {

						flagTerminou = true;
					}

					if (colecaoDadosTxt != null) {
						colecaoDadosTxt.clear();
						colecaoDadosTxt = null;
					}
					
					ZipUtil.adicionarArquivo(zos, leitura);
					out.close();
					leitura.delete();

					IoUtil.fecharStream(out);
					IoUtil.fecharStream(zos);
					
				}
				
			}
			
			this.repositorioCobranca.atualizarIndicadorGeracaoTxt(ids);
			
			getControladorBatch().encerrarUnidadeProcessamentoBatch(null,idUnidadeIniciada, false);
			
		} catch (Exception e) {
			IoUtil.fecharStream(out);
			IoUtil.fecharStream(zos);
			
			e.printStackTrace();
			getControladorBatch().encerrarUnidadeProcessamentoBatch(e,idUnidadeIniciada, true);
			throw new EJBException(e);
		} 

		

	}
	
	
	/**
	 * [UC0869] Gerar Arquivo Texto de Contas em Cobrança por Empresa
	 * 
	 * Pesquisa a quantidade de contas
	 * 
	 * @author: Rômulo Aurélio, Mariana Victor
	 * @date: 29/10/2008, 26/04/2011
	 */
	public void gerarArquivoTextoContasEmCobrancaEmpresaLayout02(Collection ids,
			Integer idEmpresa, Integer idComando, int idFuncionalidadeIniciada)
			throws ControladorException {
		
		int idUnidadeIniciada = 0;
		ZipOutputStream zos = null;
		BufferedWriter out =  null;

		try {
			SistemaParametro sistemaParametro = this.getControladorUtil().pesquisarParametrosDoSistema();
			
			// -------------------------
			// Registrar o início do processamento da Unidade de
			// Processamento do Batch
			// -------------------------
			
			idUnidadeIniciada = getControladorBatch()
					.iniciarUnidadeProcessamentoBatch(idFuncionalidadeIniciada,
							UnidadeProcessamento.COMANDO_EMPRESA_COBRANCA_CONTA, idComando);
			
			// Variáveis para a paginação da pesquisa
			// ========================================================================
			boolean flagTerminou = false;
			final int quantidadeRegistros = 1000;
			int numeroIndice = 0;
			int numeroIteracoes = 0;
			// ========================================================================
			
			Integer idPerfilProgramaEspecial = null;
			
			if(sistemaParametro.getPerfilProgramaEspecial()!=null){
				idPerfilProgramaEspecial = sistemaParametro.getPerfilProgramaEspecial().getId();
			}

			
			if (ids != null && ids.size() > 0) {
				
				Collection<Object[]> colecaoDadosImoveis = null;
				Collection<Object[]> colecaoDadosContas = null;
				
				
					while (!flagTerminou) {
						
						Map<Integer, GerarArquivoTextoContasCobrancaEmpresaHelper> mapHelper = new HashMap<Integer, GerarArquivoTextoContasCobrancaEmpresaHelper>();

						String nomeArquivo = null;
						
						// criar o arquivo zip
						File compactado = null; // nomeZip
						zos = null;

						File leitura = null;

						out = null;
						
						numeroIteracoes++;
	
						System.out.println("Inicio pesquisarDadosArquivoTextoContasCobrancaEmpresa ");
						
						colecaoDadosImoveis = repositorioCobranca
								.pesquisarDadosImoveisArquivoTextoContasCobrancaEmpresa(
										ids, 
										null,
										numeroIndice, 
										quantidadeRegistros,
										idPerfilProgramaEspecial);
						
						System.out.println("Voltou pesquisarDadosArquivoTextoContasCobrancaEmpresa ");
	
						if (colecaoDadosImoveis != null && !colecaoDadosImoveis.isEmpty()) {
	
							Iterator<Object[]> colecaoDadosImoveisIterator = colecaoDadosImoveis.iterator();
							
							while (colecaoDadosImoveisIterator.hasNext()) {
								// cria um array de objetos para pegar os parametros
								// de retorno da pesquisa
								Object[] arraydadosTxtImovel = 
									(Object[]) colecaoDadosImoveisIterator.next();
								
								Integer idImovel = (Integer) arraydadosTxtImovel[7];
								
								colecaoDadosContas = this.repositorioCobranca
										.pesquisarDadosContasArquivoTextoContasCobrancaEmpresa(idImovel, idComando);
								
								if (colecaoDadosContas != null && !colecaoDadosContas.isEmpty()) {
									Iterator<Object[]> iteratorContas = colecaoDadosContas.iterator();
									while(iteratorContas.hasNext()) {
										GerarArquivoTextoContasCobrancaEmpresaHelper helper = 
											new GerarArquivoTextoContasCobrancaEmpresaHelper();
										
										Object[] arrayDadosContas = (Object[]) iteratorContas.next();
										
										this.montarDadosGerarArquivoTextoContasEmCobrancaEmpresaLayoutTipo02(arraydadosTxtImovel, arrayDadosContas, mapHelper, helper, ids);
									
										helper = null;
									}
								}
							}
							
							nomeArquivo = "cobranca_por_resultado_Com_" + idComando
									+ "_Empr_" + idEmpresa
									+ "_" + Util.formatarDataComTracoAAAAMMDD(new Date()) 
									+ "_" + Util.formatarDataHHMM(new Date())
									+ "_Parte_" + numeroIteracoes;
						
							// criar o arquivo zip
							compactado = new File(nomeArquivo + ".zip"); // nomeZip
							zos = new ZipOutputStream(new FileOutputStream(compactado));

							leitura = new File(nomeArquivo + ".txt");

							out = new BufferedWriter(
								new OutputStreamWriter(
									new FileOutputStream(
										leitura.getAbsolutePath())));
							
							if (mapHelper != null 
									&& !mapHelper.isEmpty() 
									&& !mapHelper.values().isEmpty()) {
								
								Collection<GerarArquivoTextoContasCobrancaEmpresaHelper> colecaoHelper = mapHelper.values();
								
								Iterator iterator = colecaoHelper.iterator();
								
								while (iterator.hasNext()) {
									StringBuilder arquivoTxt = new StringBuilder();
									
									GerarArquivoTextoContasCobrancaEmpresaHelper helper = (GerarArquivoTextoContasCobrancaEmpresaHelper)
										iterator.next();
									
									this.montarArquivoTextoContasEmCobrancaEmpresaLayoutTipo02(arquivoTxt, helper);
									
									arquivoTxt.append(System.getProperty("line.separator"));

									if (arquivoTxt != null && arquivoTxt.length() != 0) {

										out.write(arquivoTxt.toString());
										out.flush();

									}
									
								}
							}
							
						}

						
						// Incrementa o nº do indice da páginação
						numeroIndice = numeroIndice + quantidadeRegistros;

						/**
						 * Caso a coleção de dados retornados for menor que a
						 * quantidade de registros seta a flag indicando que a
						 * paginação terminou.
						 */
						if (colecaoDadosImoveis == null || 
							colecaoDadosImoveis.size() < quantidadeRegistros) {
	
							flagTerminou = true;
						}

						if (colecaoDadosImoveis != null) {
							colecaoDadosImoveis.clear();
							colecaoDadosImoveis = null;
						}
						
						ZipUtil.adicionarArquivo(zos, leitura);
						out.close();
						leitura.delete();

						IoUtil.fecharStream(out);
						IoUtil.fecharStream(zos);
						
					}
				
			}
			
			this.repositorioCobranca.atualizarIndicadorGeracaoTxt(ids);
			
			getControladorBatch().encerrarUnidadeProcessamentoBatch(null,idUnidadeIniciada, false);
			
		} catch (Exception e) {
			IoUtil.fecharStream(out);
			IoUtil.fecharStream(zos);
			
			e.printStackTrace();
			getControladorBatch().encerrarUnidadeProcessamentoBatch(e,idUnidadeIniciada, true);
			throw new EJBException(e);
			
		} 

	}
	
	

	/**
	 * [UC1151] Gerar Boletim de Medição
	 * 
	 * 
	 * @author Sávio Luiz
	 * @throws ControladorException 
	 * @data 22/03/2011
	 * 
	 * @throws ControladorException 
	 * */
	public void gerarBoletimMedicao(Integer idGrupoCobranca, Integer referencia,Usuario usuarioLogado) throws ControladorException{
		
		String mensagemEmail = null;
		String emailResponsavel = null;
		String assuntoEmail = "GERAR BOLETIM DE MEDIÇÃO";
		
		try {
			// Seleciona os itens do serviço de contrato
			Collection<Object[]> dadosItensContrato = this.repositorioCobranca.pesquisarItemServicoContrato(idGrupoCobranca);
			
			Collection collCobrancaBoletimExecutado = new ArrayList();
			Collection collCobrancaBoletimDescontado = new ArrayList();
			Collection collCobrancaBoletimSucesso = new ArrayList();
			BigDecimal valorTotalExecutado = BigDecimal.ZERO;
			BigDecimal valorTotalDescontado = BigDecimal.ZERO;
			BigDecimal valorTotalTaxaSucesso = BigDecimal.ZERO;
			Collection<Integer> collIdsOS = new ArrayList();
			Collection<Integer> collIdsOSNaoAceitas = new ArrayList();
			Integer idContratoEmpresaServico = null;
			
			if(dadosItensContrato != null && !dadosItensContrato.isEmpty()){
				for(Object[] dadoItemContrato : dadosItensContrato){
					
					if(dadoItemContrato != null){

						//recupera os dados da query
						Integer codigoConstanteCalculo = (Integer)dadoItemContrato[0];
						Integer idItemServicoContrato = (Integer)dadoItemContrato[1];
						BigDecimal vlItemServicoContrato = (BigDecimal)dadoItemContrato[2];
						idContratoEmpresaServico = (Integer)dadoItemContrato[3];
						if(dadoItemContrato[4] != null){
							emailResponsavel = (String)dadoItemContrato[4];
						}
						
						// OS EXECUTADAS
						//1.1 o código da constante do item seja de 01 e 05 
						if(codigoConstanteCalculo.equals(ItemServico.CODIGO_CONSTANTE_1) || codigoConstanteCalculo.equals(ItemServico.CODIGO_CONSTANTE_5)){
							//1.1.1 O sistema deverá selecionar as ordens de serviço encerradas por execução dos imóveis relacionados 
							//ao grupo de cobrança que ainda não tenham sido incluídas em boletim, que tenham o tipo de serviço relacionado ao item do contrato
							Collection<Object[]> dadosOS = this.repositorioCobranca.pesquisarOSEncerradasPorBoletim(idGrupoCobranca,idItemServicoContrato,referencia);
							//dados OS de rotas alternativas
							Collection<Object[]> dadosOSRotasAlternativas = this.repositorioCobranca.pesquisarOSEncerradasPorBoletimRotaAlternativa(idGrupoCobranca,idItemServicoContrato,referencia);
							if(dadosOSRotasAlternativas != null && !dadosOSRotasAlternativas.isEmpty()){
								dadosOS.addAll(dadosOSRotasAlternativas);
							}
							for(Object[] dadoOS : dadosOS){
								if(dadoOS != null){
									Integer idOs = (Integer)dadoOS[0];
									Integer idLocalidade = (Integer)dadoOS[1];
									
									if(!collIdsOS.contains(idOs)){
										Localidade localidade = new Localidade();
										localidade.setId(idLocalidade);
										
										OrdemServico ordemServico = new OrdemServico();
										ordemServico.setId(idOs);
										
										//cria o objeto de cobrança boletim executado
										CobrancaBoletimExecutado cobrancaBoletimExecutado = new CobrancaBoletimExecutado();
										cobrancaBoletimExecutado.setLocalidade(localidade);
										cobrancaBoletimExecutado.setOrdemServico(ordemServico);
										cobrancaBoletimExecutado.setValorServico(vlItemServicoContrato);
										collCobrancaBoletimExecutado.add(cobrancaBoletimExecutado);
										
										valorTotalExecutado = valorTotalExecutado.add(vlItemServicoContrato);
										collIdsOS.add(idOs);
									}
								}
							}
						}
						
						//1.2 o código da constante do item seja 02 e 06 
						if(codigoConstanteCalculo.equals(ItemServico.CODIGO_CONSTANTE_2) || codigoConstanteCalculo.equals(ItemServico.CODIGO_CONSTANTE_6)){
							//1.2.1 O sistema deverá selecionar as ordens de serviço encerradas por execução dos imóveis 
							//relacionados ao grupo de cobrança que ainda não tenham sido incluídas em boletim, 
							//que tenham o tipo de serviço relacionado ao item do contrato e tenha sido executada no nicho
							Collection<Object[]> dadosOS = this.repositorioCobranca.pesquisarOSEncerradasPorBoletimComIndicadorPavimento(idGrupoCobranca,idItemServicoContrato,new Short("3"),referencia);
							//dados OS de rotas alternativas
							Collection<Object[]> dadosOSRotasAlternativas = this.repositorioCobranca.pesquisarOSEncerradasPorBoletimComIndicadorPavimentoRotaAlternativa(idGrupoCobranca,idItemServicoContrato,new Short("3"),referencia);
							if(dadosOSRotasAlternativas != null && !dadosOSRotasAlternativas.isEmpty()){
								dadosOS.addAll(dadosOSRotasAlternativas);
							}
							for(Object[] dadoOS : dadosOS){
								if(dadoOS != null){
									Integer idOs = (Integer)dadoOS[0];
									Integer idLocalidade = (Integer)dadoOS[1];
									
									if(!collIdsOS.contains(idOs)){
										Localidade localidade = new Localidade();
										localidade.setId(idLocalidade);
										
										OrdemServico ordemServico = new OrdemServico();
										ordemServico.setId(idOs);
										
										//cria o objeto de cobrança boletim executado
										CobrancaBoletimExecutado cobrancaBoletimExecutado = new CobrancaBoletimExecutado();
										cobrancaBoletimExecutado.setLocalidade(localidade);
										cobrancaBoletimExecutado.setOrdemServico(ordemServico);
										cobrancaBoletimExecutado.setValorServico(vlItemServicoContrato);
										collCobrancaBoletimExecutado.add(cobrancaBoletimExecutado);
										valorTotalExecutado = valorTotalExecutado.add(vlItemServicoContrato);
										collIdsOS.add(idOs);
									}
								}
							}
						}
						
						//1.3 o código da constante do item seja 03, 07, 09, 11 e 12 
						if(codigoConstanteCalculo.equals(ItemServico.CODIGO_CONSTANTE_3) || codigoConstanteCalculo.equals(ItemServico.CODIGO_CONSTANTE_7) ||
						   codigoConstanteCalculo.equals(ItemServico.CODIGO_CONSTANTE_9) || codigoConstanteCalculo.equals(ItemServico.CODIGO_CONSTANTE_11) ||
						   codigoConstanteCalculo.equals(ItemServico.CODIGO_CONSTANTE_13)){
							//1.3.1 O sistema deverá selecionar as ordens de serviço encerradas por execução dos imóveis relacionados 
							//ao grupo de cobrança que ainda não tenham sido incluídas em boletim, que tenham o tipo de 
							//serviço relacionado ao item do contrato e tenha sido executada sem pavimento
							Collection<Object[]> dadosOS = this.repositorioCobranca.pesquisarOSEncerradasPorBoletimComIndicadorPavimento(idGrupoCobranca,idItemServicoContrato,new Short("2"),referencia);
							//dados OS de rotas alternativas
							Collection<Object[]> dadosOSRotasAlternativas = this.repositorioCobranca.pesquisarOSEncerradasPorBoletimComIndicadorPavimentoRotaAlternativa(idGrupoCobranca,idItemServicoContrato,new Short("2"),referencia);
							if(dadosOSRotasAlternativas != null && !dadosOSRotasAlternativas.isEmpty()){
								dadosOS.addAll(dadosOSRotasAlternativas);
							}
							for(Object[] dadoOS : dadosOS){
								if(dadoOS != null){
									Integer idOs = (Integer)dadoOS[0];
									Integer idLocalidade = (Integer)dadoOS[1];
									
									if(!collIdsOS.contains(idOs)){
										Localidade localidade = new Localidade();
										localidade.setId(idLocalidade);
										
										OrdemServico ordemServico = new OrdemServico();
										ordemServico.setId(idOs);
										
										//cria o objeto de cobrança boletim executado
										CobrancaBoletimExecutado cobrancaBoletimExecutado = new CobrancaBoletimExecutado();
										cobrancaBoletimExecutado.setLocalidade(localidade);
										cobrancaBoletimExecutado.setOrdemServico(ordemServico);
										cobrancaBoletimExecutado.setValorServico(vlItemServicoContrato);
										collCobrancaBoletimExecutado.add(cobrancaBoletimExecutado);
										valorTotalExecutado = valorTotalExecutado.add(vlItemServicoContrato);
										collIdsOS.add(idOs);
									}
								}
							}
						}
						
						//1.4 o código da constante do item seja 04, 08, 10, 13 e 14 
						if(codigoConstanteCalculo.equals(ItemServico.CODIGO_CONSTANTE_4) || codigoConstanteCalculo.equals(ItemServico.CODIGO_CONSTANTE_8) ||
						   codigoConstanteCalculo.equals(ItemServico.CODIGO_CONSTANTE_10) || codigoConstanteCalculo.equals(ItemServico.CODIGO_CONSTANTE_12) ||
						   codigoConstanteCalculo.equals(ItemServico.CODIGO_CONSTANTE_14)){
							//1.4.1 O sistema deverá selecionar as ordens de serviço encerradas por execução dos 
							//imóveis relacionados ao grupo de cobrança que ainda não tenham sido incluídas em boletim, 
							//que tenham o tipo de serviço relacionado ao item do contrato e tenha sido executada sem pavimento 
							Collection<Object[]> dadosOS = this.repositorioCobranca.pesquisarOSEncerradasPorBoletimComIndicadorPavimento(idGrupoCobranca,idItemServicoContrato,new Short("1"),referencia);
							//dados OS de rotas alternativas
							Collection<Object[]> dadosOSRotasAlternativas = this.repositorioCobranca.pesquisarOSEncerradasPorBoletimComIndicadorPavimentoRotaAlternativa(idGrupoCobranca,idItemServicoContrato,new Short("1"),referencia);
							if(dadosOSRotasAlternativas != null && !dadosOSRotasAlternativas.isEmpty()){
								dadosOS.addAll(dadosOSRotasAlternativas);
							}
							for(Object[] dadoOS : dadosOS){
								if(dadoOS != null){
									Integer idOs = (Integer)dadoOS[0];
									Integer idLocalidade = (Integer)dadoOS[1];
									
									if(!collIdsOS.contains(idOs)){
										Localidade localidade = new Localidade();
										localidade.setId(idLocalidade);
										OrdemServico ordemServico = new OrdemServico();
										ordemServico.setId(idOs);
											
											//cria o objeto de cobrança boletim executado
										CobrancaBoletimExecutado cobrancaBoletimExecutado = new CobrancaBoletimExecutado();
										cobrancaBoletimExecutado.setLocalidade(localidade);
										cobrancaBoletimExecutado.setOrdemServico(ordemServico);
										cobrancaBoletimExecutado.setValorServico(vlItemServicoContrato);
										collCobrancaBoletimExecutado.add(cobrancaBoletimExecutado);
										valorTotalExecutado = valorTotalExecutado.add(vlItemServicoContrato);
										collIdsOS.add(idOs);
										
									}
								}
							}
						}
						//1.5 o código da constante do item seja 15 
						if(codigoConstanteCalculo.equals(ItemServico.CODIGO_CONSTANTE_15)){
							//1.5.1 O sistema deverá selecionar as ordens de serviço encerradas por execução dos imóveis 
							//relacionados ao grupo de cobrança que ainda não tenham sido incluídas em boletim, 
							//que tenham o tipo de serviço relacionado ao item do contrato e tenha sido executada com reposição de asfalto
							Collection<Object[]> dadosOS = this.repositorioCobranca.pesquisarOSEncerradasPorBoletimRepAsfalto(idGrupoCobranca,idItemServicoContrato,referencia);
							//dados OS de rotas alternativas
							Collection<Object[]> dadosOSRotasAlternativas = this.repositorioCobranca.pesquisarOSEncerradasPorBoletimRepAsfaltoRotaAlternativa(idGrupoCobranca,idItemServicoContrato,referencia);
							if(dadosOSRotasAlternativas != null && !dadosOSRotasAlternativas.isEmpty()){
								dadosOS.addAll(dadosOSRotasAlternativas);
							}
							for(Object[] dadoOS : dadosOS){
								if(dadoOS != null){
									Integer idOs = (Integer)dadoOS[0];
									Integer idLocalidade = (Integer)dadoOS[1];
									BigDecimal numeroRepAsfalto = (BigDecimal)dadoOS[2];
									
									BigDecimal vlItemServicoContratoMult = vlItemServicoContrato.multiply(numeroRepAsfalto);
									
									if(!collIdsOS.contains(idOs)){
										
										
										Localidade localidade = new Localidade();
										localidade.setId(idLocalidade);
										
										OrdemServico ordemServico = new OrdemServico();
										ordemServico.setId(idOs);
										
										//cria o objeto de cobrança boletim executado
										CobrancaBoletimExecutado cobrancaBoletimExecutado = new CobrancaBoletimExecutado();
										cobrancaBoletimExecutado.setLocalidade(localidade);
										cobrancaBoletimExecutado.setOrdemServico(ordemServico);
										cobrancaBoletimExecutado.setValorServico(vlItemServicoContratoMult);
										collCobrancaBoletimExecutado.add(cobrancaBoletimExecutado);
										
										collIdsOS.add(idOs);
									}
									
									valorTotalExecutado = valorTotalExecutado.add(vlItemServicoContratoMult);
								}
							}
						}
						
						//1.6 o código da constante do item seja 16
						if(codigoConstanteCalculo.equals(ItemServico.CODIGO_CONSTANTE_16)){
							//1.6.1 O sistema deverá selecionar as ordens de serviço encerradas por execução dos imóveis 
							//relacionados ao grupo de cobrança que ainda não tenham sido incluídas em boletim, que tenham o 
							//tipo de serviço relacionado ao item do contrato e tenha sido executada com reposição de paralelepípedo
							Collection<Object[]> dadosOS = this.repositorioCobranca.pesquisarOSEncerradasPorBoletimRepParalalo(idGrupoCobranca,idItemServicoContrato,referencia);
							
							//dados OS de rotas alternativas
							Collection<Object[]> dadosOSRotasAlternativas = this.repositorioCobranca.pesquisarOSEncerradasPorBoletimRepParalaloRotaAlternativa(idGrupoCobranca,idItemServicoContrato,referencia);
							if(dadosOSRotasAlternativas != null && !dadosOSRotasAlternativas.isEmpty()){
								dadosOS.addAll(dadosOSRotasAlternativas);
							}
							for(Object[] dadoOS : dadosOS){
								if(dadoOS != null){
									Integer idOs = (Integer)dadoOS[0];
									Integer idLocalidade = (Integer)dadoOS[1];
									BigDecimal numeroRepParalelo = (BigDecimal)dadoOS[2];
									
									BigDecimal vlItemServicoContratoMult = vlItemServicoContrato.multiply(numeroRepParalelo);
									
									if(!collIdsOS.contains(idOs)){
										
										
										Localidade localidade = new Localidade();
										localidade.setId(idLocalidade);
										
										OrdemServico ordemServico = new OrdemServico();
										ordemServico.setId(idOs);
										
										//cria o objeto de cobrança boletim executado
										CobrancaBoletimExecutado cobrancaBoletimExecutado = new CobrancaBoletimExecutado();
										cobrancaBoletimExecutado.setLocalidade(localidade);
										cobrancaBoletimExecutado.setOrdemServico(ordemServico);
										cobrancaBoletimExecutado.setValorServico(vlItemServicoContratoMult);
										collCobrancaBoletimExecutado.add(cobrancaBoletimExecutado);
										
										collIdsOS.add(idOs);
									}
									
									valorTotalExecutado = valorTotalExecutado.add(vlItemServicoContratoMult);
									
								}
							}
						}
						
						//1.7 o código da constante do item seja 17
						if(codigoConstanteCalculo.equals(ItemServico.CODIGO_CONSTANTE_17)){
							//1.7.1 O sistema deverá selecionar as ordens de serviço encerradas por execução dos imóveis 
							//relacionados ao grupo de cobrança que ainda não tenham sido incluídas em boletim, que tenham o tipo 
							//de serviço relacionado ao item do contrato e tenha sido executada com reposição de calçada
							Collection<Object[]> dadosOS = this.repositorioCobranca.pesquisarOSEncerradasPorBoletimRepCalcada(idGrupoCobranca,idItemServicoContrato,referencia);
							
							//dados OS de rotas alternativas
							Collection<Object[]> dadosOSRotasAlternativas = this.repositorioCobranca.pesquisarOSEncerradasPorBoletimRepCalcadaRotaAlternativa(idGrupoCobranca,idItemServicoContrato,referencia);
							if(dadosOSRotasAlternativas != null && !dadosOSRotasAlternativas.isEmpty()){
								dadosOS.addAll(dadosOSRotasAlternativas);
							}
							for(Object[] dadoOS : dadosOS){
								if(dadoOS != null){
									Integer idOs = (Integer)dadoOS[0];
									Integer idLocalidade = (Integer)dadoOS[1];
									BigDecimal numeroRepCalcada = (BigDecimal)dadoOS[2];
									
									BigDecimal vlItemServicoContratoMult = vlItemServicoContrato.multiply(numeroRepCalcada);
									
									if(!collIdsOS.contains(idOs)){
										
										
										Localidade localidade = new Localidade();
										localidade.setId(idLocalidade);
										
										OrdemServico ordemServico = new OrdemServico();
										ordemServico.setId(idOs);
										
										//cria o objeto de cobrança boletim executado
										CobrancaBoletimExecutado cobrancaBoletimExecutado = new CobrancaBoletimExecutado();
										cobrancaBoletimExecutado.setLocalidade(localidade);
										cobrancaBoletimExecutado.setOrdemServico(ordemServico);
										cobrancaBoletimExecutado.setValorServico(vlItemServicoContratoMult);
										collCobrancaBoletimExecutado.add(cobrancaBoletimExecutado);
										
										collIdsOS.add(idOs);
									}
									
									valorTotalExecutado = valorTotalExecutado.add(vlItemServicoContratoMult);
								}
							}
						}
						
						//2. OS CANCELADAS QUE DEVEM SER DESCONTADAS
						//2.1 o código da constante do item seja de 01, 02 e 05
						if(codigoConstanteCalculo.equals(ItemServico.CODIGO_CONSTANTE_1) || codigoConstanteCalculo.equals(ItemServico.CODIGO_CONSTANTE_2)  ||
								codigoConstanteCalculo.equals(ItemServico.CODIGO_CONSTANTE_5)){
							//2.1.1 O sistema deverá selecionar as ordens de serviço encerradas por decurso de prazo dos imóveis 
							//relacionados ao grupo de cobrança que ainda não tenham sido incluídas em boletim, que tenham o 
							//tipo de serviço relacionado ao item do contrato
							Collection<Object[]> dadosOS = this.repositorioCobranca.pesquisarOSEncerradasPorBoletimPorDesconto(idGrupoCobranca,idItemServicoContrato,referencia);
							
							//dados OS de rotas alternativas
							Collection<Object[]> dadosOSRotasAlternativas = this.repositorioCobranca.pesquisarOSEncerradasPorBoletimPorDescontoRotaAlternativa(idGrupoCobranca,idItemServicoContrato,referencia);
							if(dadosOSRotasAlternativas != null && !dadosOSRotasAlternativas.isEmpty()){
								dadosOS.addAll(dadosOSRotasAlternativas);
							}
							for(Object[] dadoOS : dadosOS){
								if(dadoOS != null){
									Integer idOs = (Integer)dadoOS[0];
									Integer idLocalidade = (Integer)dadoOS[1];
									
									Localidade localidade = new Localidade();
									localidade.setId(idLocalidade);
									
									OrdemServico ordemServico = new OrdemServico();
									ordemServico.setId(idOs);
									
									//cria o objeto de cobrança boletim executado
									CobrancaBoletimDesconto cobrancaBoletimDesconto = new CobrancaBoletimDesconto();
									cobrancaBoletimDesconto.setLocalidade(localidade);
									cobrancaBoletimDesconto.setOrdemServico(ordemServico);
									cobrancaBoletimDesconto.setValorDesconto(vlItemServicoContrato);
									collCobrancaBoletimDescontado.add(cobrancaBoletimDesconto);
									valorTotalDescontado = valorTotalDescontado.add(vlItemServicoContrato);
									collIdsOS.add(idOs);
								}
							}
						
					    }
						
						//3.O sistema deverá selecionar os itens do contrato de cobrança relacionado ao grupo de cobrança para calcular 
						//os valores dos descontos do boletim das ordens de serviço com justificativa não aceita
						//3.1 o código da constante do item seja de 01, 02 e 05
						if(codigoConstanteCalculo.equals(ItemServico.CODIGO_CONSTANTE_1) || codigoConstanteCalculo.equals(ItemServico.CODIGO_CONSTANTE_2)  ||
								codigoConstanteCalculo.equals(ItemServico.CODIGO_CONSTANTE_5)){
							//3.1.1 O sistema deverá selecionar as ordens de serviço encerradas sem execução, 
							//menos decurso de prazo, dos imóveis relacionados ao grupo de cobrança que ainda não tenham sido incluídas em boletim, 
							//que tenham o tipo de serviço relacionado ao item do contrato
							Collection<Object[]> dadosOS = this.repositorioCobranca.pesquisarOSEncerradasPorBoletimPorDescontoSemDecursoPrazo(idGrupoCobranca,idItemServicoContrato,referencia);
							
							//dados OS de rotas alternativas
							Collection<Object[]> dadosOSRotasAlternativas = this.repositorioCobranca.pesquisarOSEncerradasPorBoletimPorDescontoSemDecursoPrazoRotaAlternativa(idGrupoCobranca,idItemServicoContrato,referencia);
							if(dadosOSRotasAlternativas != null && !dadosOSRotasAlternativas.isEmpty()){
								dadosOS.addAll(dadosOSRotasAlternativas);
							}
							for(Object[] dadoOS : dadosOS){
								if(dadoOS != null){
									Integer idOs = (Integer)dadoOS[0];
									Integer idLocalidade = (Integer)dadoOS[1];
									
									Localidade localidade = new Localidade();
									localidade.setId(idLocalidade);
									
									OrdemServico ordemServico = new OrdemServico();
									ordemServico.setId(idOs);
									
									//cria o objeto de cobrança boletim executado
									CobrancaBoletimDesconto cobrancaBoletimDesconto = new CobrancaBoletimDesconto();
									cobrancaBoletimDesconto.setLocalidade(localidade);
									cobrancaBoletimDesconto.setOrdemServico(ordemServico);
									cobrancaBoletimDesconto.setValorDesconto(vlItemServicoContrato);
									collCobrancaBoletimDescontado.add(cobrancaBoletimDesconto);
									valorTotalDescontado = valorTotalDescontado.add(vlItemServicoContrato);
									collIdsOS.add(idOs);
									collIdsOSNaoAceitas.add(idOs);
								}
							}
						}
					
				   }

			    }
			}
			//4. O sistema deverá selecionar os imóveis que tiveram seus débitos quitados e/ou parcelados no período do ciclo da cobrança 
			//e a ordem de serviço referente à visita de cobrança tenha sido executada no ciclo
			Collection<Object[]> dadosConta = this.repositorioCobranca.pesquisarSituacaoAtualContaPeloCronogramaCobranca(idGrupoCobranca,referencia);
			if(dadosConta != null && !dadosConta.equals("")){
				boolean contaApta = true;
				Integer idImovelAnterior = 0;
				Integer idImovel = null;
				Integer idLocalidade = null;
				int tamanhoColecao = dadosConta.size();
				BigDecimal valorObtidoAcumulado = BigDecimal.ZERO;
				for(Object[] dadoConta : dadosConta){
					if(dadoConta != null){
						idImovel = (Integer)dadoConta[0];
						idLocalidade = (Integer)dadoConta[1];
						Integer idSituacaoAtualConta = (Integer)dadoConta[2];
						BigDecimal valorPagamento = null;
						if(dadoConta[3] != null){
							valorPagamento = (BigDecimal) dadoConta[3];
						}
						BigDecimal percentualTaxaSucesso = (BigDecimal)dadoConta[4];
						Integer referenciaConta = (Integer)dadoConta[5];
						BigDecimal valorConta = (BigDecimal)dadoConta[6];
						//caso seja a primeira vez
						if(idImovelAnterior.equals(0)){
							idImovelAnterior = idImovel;
						}
						
						if(idImovelAnterior.equals(idImovel)){
							//4.1.1.1.1 O sistema deverá verificar se a conta está parcelada ou O sistema deverá verificar se a conta está paga
							// ou o sistema deverá verificar se a conta foi cancelada
							if(!idSituacaoAtualConta.equals(DebitoCreditoSituacao.PARCELADA) && 
									!idSituacaoAtualConta.equals(DebitoCreditoSituacao.CANCELADA) &&
									!idSituacaoAtualConta.equals(DebitoCreditoSituacao.CANCELADA_POR_RETIFICACAO) &&
									(valorPagamento == null || valorPagamento.equals(""))){
								contaApta = false;
							}else{
								//caso exista valor de pagamento, então acumula esse valor do pagamento
								if(valorPagamento != null && !valorPagamento.equals("")){
									  valorObtidoAcumulado = valorObtidoAcumulado.add(valorPagamento);
								}else{
									//caso contrário, se a conta for parcelada, então acumula o valor da conta
									if(idSituacaoAtualConta.equals(DebitoCreditoSituacao.PARCELADA)){
										valorObtidoAcumulado = valorObtidoAcumulado.add(valorConta);
									}else{
										//caso contrário, se a conta for parcelada por retificação então verifica se 
										//a conta retificada foi paga. Caso tenha sido paga ela está apta e o valor do 
										//pagamento é acumulado, caso contrário, o imóvel deixa de ser apta para a cobrança
										if(idSituacaoAtualConta.equals(DebitoCreditoSituacao.CANCELADA_POR_RETIFICACAO)){
											Collection valorPagamentos = repositorioCobranca.pesquisarValorContaouContaHistorico(idImovel,referenciaConta);
											BigDecimal valorPagamentoRetificada = null;
											if(valorPagamentos != null && !valorPagamentos.isEmpty()){
												valorPagamentoRetificada = (BigDecimal)Util.retonarObjetoDeColecao(valorPagamentos);
											}
											
											if(valorPagamentoRetificada != null && !valorPagamentoRetificada.equals("")){
												valorObtidoAcumulado = valorObtidoAcumulado.add(valorPagamentoRetificada);
											}else{
												contaApta = false;
											}
										}	
									}
								}
							}
							
						}else{
							//se a conta anterior está apta, então 
							if(contaApta){
								Imovel imovel = new Imovel();
								imovel.setId(idImovelAnterior);
								Localidade localidade = new Localidade();
								localidade.setId(idLocalidade);
								CobrancaBoletimSucesso cobrancaBoletimSucesso = new CobrancaBoletimSucesso();
								cobrancaBoletimSucesso.setImovel(imovel);
								cobrancaBoletimSucesso.setLocalidade(localidade);
								BigDecimal valorTaxaSucesso = valorObtidoAcumulado.multiply(percentualTaxaSucesso);
								valorTaxaSucesso = valorTaxaSucesso.divide(new BigDecimal("100"));
								cobrancaBoletimSucesso.setValorTaxaSucesso(valorTaxaSucesso);
								cobrancaBoletimSucesso.setValorRecuperado(valorObtidoAcumulado);
								valorTotalTaxaSucesso = valorTotalTaxaSucesso.add(valorTaxaSucesso);
								collCobrancaBoletimSucesso.add(cobrancaBoletimSucesso);
								valorObtidoAcumulado = BigDecimal.ZERO;
							}
							
							//mudança de imóvel
							contaApta = true;
							idImovelAnterior = idImovel;
							valorObtidoAcumulado = BigDecimal.ZERO;
							//4.1.1.1.1 O sistema deverá verificar se a conta está parcelada ou O sistema deverá verificar se a conta está paga
							// ou o sistema deverá verificar se a conta foi cancelada
							if(!idSituacaoAtualConta.equals(DebitoCreditoSituacao.PARCELADA) && 
									!idSituacaoAtualConta.equals(DebitoCreditoSituacao.CANCELADA) &&
									!idSituacaoAtualConta.equals(DebitoCreditoSituacao.CANCELADA_POR_RETIFICACAO) &&
									(valorPagamento == null || valorPagamento.equals(""))){
								contaApta = false;
							}else{
								//caso exista valor de pagamento, então acumula esse valor do pagamento
								if(valorPagamento != null && !valorPagamento.equals("")){
									  valorObtidoAcumulado = valorObtidoAcumulado.add(valorPagamento);
								}else{
									//caso contrário, se a conta for parcelada, então acumula o valor da conta
									if(idSituacaoAtualConta.equals(DebitoCreditoSituacao.PARCELADA)){
										valorObtidoAcumulado = valorObtidoAcumulado.add(valorConta);
									}else{
										//caso contrário, se a conta for parcelada por retificação então verifica se 
										//a conta retificada foi paga. Caso tenha sido paga ela está apta e o valor do 
										//pagamento é acumulado, caso contrário, o imóvel deixa de ser apta para a cobrança
										if(idSituacaoAtualConta.equals(DebitoCreditoSituacao.CANCELADA_POR_RETIFICACAO)){
											Collection valorPagamentos = repositorioCobranca.pesquisarValorContaouContaHistorico(idImovel,referenciaConta);
											BigDecimal valorPagamentoRetificada = null;
											if(valorPagamentos != null && !valorPagamentos.isEmpty()){
												valorPagamentoRetificada = (BigDecimal)Util.retonarObjetoDeColecao(valorPagamentos);
											}
											
											if(valorPagamentoRetificada != null && !valorPagamentoRetificada.equals("")){
												valorObtidoAcumulado = valorObtidoAcumulado.add(valorPagamentoRetificada);
											}else{
												contaApta = false;
											}
										}	
									}
								}
							}
					    }
					
						tamanhoColecao = tamanhoColecao -1;
						if(tamanhoColecao == 0){
							//se a conta anterior está apta, então 
							if(contaApta){
								Imovel imovel = new Imovel();
								imovel.setId(idImovel);
								Localidade localidade = new Localidade();
								localidade.setId(idLocalidade);
								CobrancaBoletimSucesso cobrancaBoletimSucesso = new CobrancaBoletimSucesso();
								cobrancaBoletimSucesso.setImovel(imovel);
								cobrancaBoletimSucesso.setLocalidade(localidade);
								BigDecimal valorTaxaSucesso = valorObtidoAcumulado.multiply(percentualTaxaSucesso);
								valorTaxaSucesso = valorTaxaSucesso.divide(new BigDecimal("100"));
								cobrancaBoletimSucesso.setValorTaxaSucesso(valorTaxaSucesso);
								cobrancaBoletimSucesso.setValorRecuperado(valorObtidoAcumulado);
								valorTotalTaxaSucesso = valorTotalTaxaSucesso.add(valorTaxaSucesso);
								collCobrancaBoletimSucesso.add(cobrancaBoletimSucesso);
								valorObtidoAcumulado = BigDecimal.ZERO;
							}
						}
				    }	
			    }
			}
			
			//[SB0001] Gerar Atualização do Banco de Dados
			atualizarDadosBoletimMedicao(idContratoEmpresaServico,collCobrancaBoletimExecutado,
					collCobrancaBoletimDescontado,valorTotalExecutado,valorTotalDescontado,
					valorTotalTaxaSucesso,collIdsOS,collIdsOSNaoAceitas,idGrupoCobranca,referencia,collCobrancaBoletimSucesso);
			
			mensagemEmail = "ALTERADO COM SUCESSO.";

		} catch (Exception ex) {
			ex.printStackTrace();
			sessionContext.setRollbackOnly();
			mensagemEmail = "ALTERAÇÃO NÃO FOI REALIZADA COM SUCESSO.";
			throw new ControladorException("erro.sistema", ex);
			
		}finally {
			String emailReceptor = null;
			if(emailResponsavel != null){
				emailReceptor = emailResponsavel;
			}else{
				emailReceptor = usuarioLogado.getDescricaoEmail();	
			}
			
			if(emailReceptor != null){
				try {
					ServicosEmail.enviarMensagem("gcom@caern.rn.gov.br", emailReceptor, assuntoEmail, mensagemEmail);
				} catch (ErroEmailException e) {
					//throw new ControladorException("erro.envio.mensagem");
				}
			}									
		}
	}
	
	/**
	 * 
	 * [UC1182] Recepcionar Arquivo TXT Encerramento OS Cobrança
	 * 
	 * @author Mariana Victor
	 * @date 17/06/2011
	 * 
	 * @param FileItem
	 * @throws ControladorException
	 */
	public StringBuilder validarArquivoTxtEncerramentoOSCobranca(FileItem arquivoAnexo) throws ControladorException{

		// cria uma string builder que recupera o txt e retorna para o processamento
		StringBuilder stringBuilderTxt = new StringBuilder();
		
		final int TAMANHO_REGISTRO = 46;
		
		if (arquivoAnexo == null || arquivoAnexo.get().length == 0){
			
			sessionContext.setRollbackOnly();
			throw new ControladorException("atencao.campo.informado", null, "Arquivo");
		}
		
		//Só poderão ser informados arquivos com a extensão TXT
		String arquivoExtensao = Util.obterExtensaoDoArquivo(arquivoAnexo);
		
		if (!arquivoExtensao.equalsIgnoreCase("TXT")){
			
			sessionContext.setRollbackOnly();
			throw new ControladorException("atencao.arquivo_invalido");
		}
		
		//O tamanho máximo para o arquivo será de 2mb
		if (arquivoAnexo.getSize() > 2097152){
			
			sessionContext.setRollbackOnly();
			throw new ControladorException("atencao.imagem_tamanho_maximo");
		}

		// cria um contador para saber quantas linhas terá o txt
		int quantidadeRegistros = 0;
		
		String nomeItem = "";	

		try {
			// verifica se não é diretorio
			if (!arquivoAnexo.isFormField()) {
				//  abre, lê e escreve o arquivo
				InputStreamReader reader = new InputStreamReader(arquivoAnexo
						.getInputStream());
				BufferedReader buffer = new BufferedReader(reader);
		
				nomeItem = arquivoAnexo.getName();
				
				File file = new File(arquivoAnexo.getName());
				FileOutputStream fout = new FileOutputStream(file);
				PrintWriter pw = new PrintWriter(fout);
		
				// cria uma variavel do tipo boolean
				boolean eof = false;
				// enquanto a variavel for false
				while (!eof) {
					// pega a linha do arquivo
					String linhaLida = buffer.readLine();
	
					if (linhaLida != null && linhaLida.length() > 0) {
						if (linhaLida.trim().length() != TAMANHO_REGISTRO
								|| !this.registroFormatoValido(linhaLida)) {
							
							throw new ControladorException("atencao.formato.registros.invalido");
							
						}
						
						pw.println(linhaLida);
						
						stringBuilderTxt.append(linhaLida);
						stringBuilderTxt.append("\n");
						quantidadeRegistros = quantidadeRegistros + 1;
					} else {
						break;
					}
				}
				
				// fecha o arquivo
				buffer.close();
				reader.close();
				arquivoAnexo.getInputStream().close();
				pw.flush();
				pw.close();
			}
			
			// [FS0004] ? Verificar a existência do arquivo da empresa de cobrança
			if ("".equals(nomeItem)) {
				throw new ActionServletException("atencao.arquivo.nao_existe",
						null, nomeItem);
			}
			
			// [FS0003] - Verificar existência de dados no arquivo
			if (quantidadeRegistros == 0) {
				throw new ControladorException("atencao.arquivo_sem_dados",
						null, nomeItem);
			}
			
			
		} catch (IOException ex) {
			throw new ControladorException("erro.importacao.nao_foi_concluida");
		} 
		
		return stringBuilderTxt;
		
	}
	
	private boolean registroFormatoValido(String linhaLida){
		boolean registroValido = true;
		
		char[] registro = linhaLida.toCharArray();
		
		String codigoComando = this.getConteudo(1, 10, linhaLida.toCharArray());
		String idOS = this.getConteudo(12, 10, linhaLida.toCharArray());
		String motivoEncerramento = this.getConteudo(23, 4, linhaLida.toCharArray());
		String dataEncerramento = this.getConteudo(28, 8, linhaLida.toCharArray());
		String idUsuario = this.getConteudo(37, 10, linhaLida.toCharArray());
		
		if (!Util.validarStringNumerica(codigoComando)
				|| !Util.validarStringNumerica(idOS)
				|| !Util.validarStringNumerica(motivoEncerramento)
				|| !Util.validarStringNumerica(dataEncerramento)
				|| !Util.validarStringNumerica(idUsuario)) {
			return false;
		}
		
		if (!(registro[10] + "").equalsIgnoreCase("#")
				|| !(registro[21] + "").equalsIgnoreCase("#")
				|| !(registro[26] + "").equalsIgnoreCase("#")
				|| !(registro[35] + "").equalsIgnoreCase("#")) {

			return false;
		}
		
		return registroValido;
	}
	
	/**
	 * 
	 * [UC1182] Recepcionar Arquivo TXT Encerramento OS Cobrança
	 * 
	 * [SB0001] - Validar Registro.
	 * 
	 * @author Mariana Victor
	 * @date 20/06/2011
	 * 
	 * @param stringBuilderTxt
	 * @throws ControladorException
	 */
	private Object[] validarConteudoArquivoTxtEncerramentoOSCobranca(StringBuilder stringBuilderTxt,
			Empresa empresa)
			throws ControladorException {

		Object[] retorno = new Object[2];
	
		int countRegistro = 0;	
		Collection<String> collRetornoRegistro = new ArrayList();

		Boolean mensagemErro = false; 
		
		StringTokenizer stk = new StringTokenizer(stringBuilderTxt.toString(),"\n");

		try{
		
			while (stk.hasMoreTokens()) {
				
				countRegistro = countRegistro + 1;
				
				String registro = stk.nextToken();			
				
				RegistrarArquivoTxtEncerramentoOSCobrancaHelper helper = new RegistrarArquivoTxtEncerramentoOSCobrancaHelper();
				
				// 01. Código do Comando - posição 01 até 10
				String codigoComando = this.getConteudo(1, 10, registro.toCharArray());
				
				// [FS0006] ? Validar comando.
				ComandoEmpresaCobrancaConta comando = this.repositorioCobranca.pesquisarComandoEmpresaCobrancaConta(new Integer (codigoComando));
				
				/*
				// Caso o comando não exista 
				if (comando == null) {
					String msg = "#Comando informado não existe.";
					registro = registro.concat(msg);
					collRetornoRegistro.add(registro);
					mensagemErro = true;
					continue;
				} 
				
				// Caso o comando não seja da empresa selecionada
				if (comando.getEmpresa() == null
						|| comando.getEmpresa().getId() == null
						|| comando.getEmpresa().getId().compareTo(empresa.getId()) != 0) { 
					String msg = "#Empresa do comando difere da empresa selecionada.";
					registro = registro.concat(msg);
					collRetornoRegistro.add(registro);
					mensagemErro = true;
					continue;
				} 
				
				// Caso o comando esteja encerrado 
				if (comando.getDataEncerramento() != null) {
					String msg = "#Comando Encerrado.";
					registro = registro.concat(msg);
					collRetornoRegistro.add(registro);
					mensagemErro = true;
					continue;
				} 
				
				// Caso o comando não tenha sido gerado o TXT 
				if (comando.getIndicadorGeracaoTxt() == null
						|| comando.getIndicadorGeracaoTxt().compareTo(new Integer(2)) == 0) {
					String msg = "#Arquivo TXT não gerado.";
					registro = registro.concat(msg);
					collRetornoRegistro.add(registro);
					mensagemErro = true;
					continue;
				}
				
				helper.setComandoEmpresaCobrancaConta(comando);
				*/
				
				// 02. Número da Ordem de Serviço  - posição 11 até 20
				String numeroOS = this.getConteudo(12, 10, registro.toCharArray());
				
				// [FS0007] ? Validar OS.
				// Caso a ordem de serviço informada  não exista 
				Short codigoSituacaoOS = this.repositorioCobranca.pesquisarSituacaoOrdemServico(new Integer(numeroOS));
				if (codigoSituacaoOS == null) {
					String msg = "#Ordem de Serviço informada não existe.";
					registro = registro.concat(msg);
					collRetornoRegistro.add(registro);
					mensagemErro = true;
					continue;
				}
				
				// Caso a ordem de serviço informada não seja do comando informado 
				if (!this.repositorioCobranca.verificarOrdemServicoComando(new Integer(numeroOS), comando.getId())) {
					String msg = "#Ordem de Serviço não é do comando informado.";
					registro = registro.concat(msg);
					collRetornoRegistro.add(registro);
					mensagemErro = true;
					continue;
				}
				
				// Caso a ordem de serviço informada esteja encerrada 
				if (codigoSituacaoOS.compareTo(ConstantesSistema.NAO) == 0) {
					String msg = "#Ordem de Serviço informada já encerrada.";
					registro = registro.concat(msg);
					collRetornoRegistro.add(registro);
					mensagemErro = true;
					continue;
				}
				
				OrdemServico ordemServico = new OrdemServico();
				ordemServico.setId(new Integer(numeroOS));
				helper.setOrdemServico(ordemServico);
	
				
				// 03. Motivo do Encerramento - posição 21 até 24
				String idMotivoEncerramento = this.getConteudo(23, 4, registro.toCharArray());
				
				// [FS0008] ? Validar Motivo de Encerramento.
				if(!this.repositorioAtendimentoPublico.verificarAtendimentoMotivoEncerramento(new Integer(idMotivoEncerramento))){
					String msg = "#Motivo do Encerramento inválido.";
					registro = registro.concat(msg);
					collRetornoRegistro.add(registro);
					mensagemErro = true;
					continue;
				}
				
				helper.setMotivoEncerramento(new Integer(idMotivoEncerramento));
				
				
				// 04. Data Encerramento  - posição 25 até 35
				String dataEncerramento = this.getConteudo(28, 8, registro.toCharArray());

				// [FS0009] ? Validar Data do Encerramento.
				// Caso a data do encerramento esteja inválida.
				if (!Util.validarDiaMesAnoSemBarraNovo(dataEncerramento)) {
					String msg = "#Data do encerramento inválida.";
					registro = registro.concat(msg);
					collRetornoRegistro.add(registro);
					mensagemErro = true;
					continue;
				} 
				
				// Caso a data do encerramento esteja maior que a data corrente.
				Date dataEnc = Util.converteStringSemBarraParaDate(dataEncerramento);
				if (dataEnc.compareTo(new Date()) > 0) {
					String msg = "#Data do encerramento maior que a data corrente.";
					registro = registro.concat(msg);
					collRetornoRegistro.add(registro);
					mensagemErro = true;
					continue;
				}
				
				helper.setDataEncerramento(dataEnc);
				
				
				// 05. Identificação do Usuário  - posição 36 até 46
				String idUsuario = this.getConteudo(37, 10, registro.toCharArray());
				
				// [FS0010] ? Validar Identificação do Usuário.
				// Caso a identificação do usuário não exista
				if (!this.repositorioCadastro.verificarIdentificacaoUsuario(new Integer(idUsuario))) {
					String msg = "#Usuário não existe.";
					registro = registro.concat(msg);
					collRetornoRegistro.add(registro);
					mensagemErro = true;
					continue;
				}
				
				// Caso a empresa do usuário não seja a empresa do comando informado 
				if (!this.repositorioCadastro.verificarUsuarioEmpresaComandoCobranca(new Integer(idUsuario), comando.getId())) {
					String msg = "#Empresa do usuário não é a do comando.";
					registro = registro.concat(msg);
					collRetornoRegistro.add(registro);
					mensagemErro = true;
					continue;
				}

				helper.setIdUsuario(new Integer(idUsuario));
				
				collRetornoRegistro.add(registro);
			}
			
		} catch (ErroRepositorioException e) {
			sessionContext.setRollbackOnly();
			throw new ControladorException("erro.sistema", e);
		}
		
		
		retorno[0] = collRetornoRegistro;
		retorno[1] = mensagemErro;
		
		return retorno;

		// --------------------------------------------------------------------------------------------

	}

	private String getConteudo(int posicaoInicial, int tamanho, char[] registro) {
		String retorno = "";
		while (retorno.length() != tamanho) {
			retorno = retorno + registro[(retorno.length() + posicaoInicial) -1];
		}
		return retorno;
	}
	
	/**
	 * [UC1182] Recepcionar Arquivo TXT Encerramento OS Cobrança
	 * 
	 * Processamento do batch
	 * 
	 * @author Mariana Victor
	 * @date 21/06/2011
	 */
	public void processarArquivoTxtEncerramentoOSCobranca(int idFuncionalidadeIniciada,
			String idEmpresa, Usuario usuario, StringBuilder stringBuilder, String nomeArquivo)
			throws ControladorException {

		int idUnidadeIniciada = 0;
		System.out.println("*********************************");
		System.out.println("INICIO DO RECEPCIONAR ARQUIVO TXT ENCERRAMENTO OS COBRANÇA");
		System.out.println("*********************************");

		idUnidadeIniciada = getControladorBatch().iniciarUnidadeProcessamentoBatch(
				idFuncionalidadeIniciada,UnidadeProcessamento.FUNCIONALIDADE, 0);
		
		try {
			Empresa empresa = new Empresa();
			empresa.setId(new Integer(idEmpresa));
		
			Object[] dadosArquivo = this.validarConteudoArquivoTxtEncerramentoOSCobranca(stringBuilder, empresa);
			
			Collection<String> collRetornoRegistro = (Collection<String>) dadosArquivo[0];
			
			Boolean mensagemErro = (Boolean) dadosArquivo[1];
			
			String emailDestinatario = this.repositorioCadastro.pesquisarEmailEmpresa(empresa.getId());
			
			if (mensagemErro) {
				
				// 5. O sistema deverá enviar um e-mail com as ocorrências relacionadas a cada um dos registros informados
				//   no arquivo para o endereço informado na tela de registro do arquivo.
				this.enviarEmailErroEncerramentoOSCobranca(nomeArquivo, collRetornoRegistro, emailDestinatario);
				
			} else {

				// 4. Para cada ordem de serviço identificada sem críticas no arquivo, 
				//   o sistema deverá efetuar o encerramento da ordem de serviço liberando o sistema para usuário.
				// [SB0002 ? Encerrar Ordens de Serviço].
				StringBuilder log = this.efetuarEncerramentoOSCobranca(collRetornoRegistro);


				// 5. O sistema deverá enviar um e-mail com as ocorrências relacionadas a cada um dos registros informados
				//   no arquivo para o endereço informado na tela de registro do arquivo.
				this.enviarEmailConfirmacaoEncerramentoOSCobranca(nomeArquivo, log, emailDestinatario);
				
			}

			// --------------------------------------------------------
			// Registrar o fim da execução da Unidade de Processamento
			// --------------------------------------------------------
			getControladorBatch().encerrarUnidadeProcessamentoBatch(null, idUnidadeIniciada, false);

		} catch (Throwable e) {
			// Este catch serve para interceptar qualquer exceção que o processo
			// batch venha a lançar e garantir que a unidade de processamento do
			// batch será atualizada com o erro ocorrido

			e.printStackTrace();
			getControladorBatch().encerrarUnidadeProcessamentoBatch(e, idUnidadeIniciada, true);
			throw new ControladorException("erro.sistema",e);
		}

	}
	
	/**
	 * [UC1182] Recepcionar Arquivo TXT Encerramento OS Cobrança
	 * 
	 * Envia email com as informações de erro da validação do arquivo Txt
	 * 
	 * @author Mariana Victor
	 * @throws SendFailedException 
	 * @date 21/06/2011
	 */
	private void enviarEmailErroEncerramentoOSCobranca(String nomeArquivo, 
			Collection<String> collRetornoRegistro,
			String emailDestinatario)
			throws ControladorException, SendFailedException {
		

		StringBuilder log = new StringBuilder("");
		
		Iterator iterator = collRetornoRegistro.iterator();
		
		while(iterator.hasNext()) {
		
			String registro = (String) iterator.next();
			log.append(registro);
			log.append(System.getProperty("line.separator"));
			
		}
		
		EnvioEmail envioEmail = getControladorCadastro()
		.pesquisarEnvioEmail(
				EnvioEmail.PROCESSAR_ARQUIVO_TXT_ENCERRAMENTO_OS_COBRANCA_ERRO);

		String emailRemetente = envioEmail.getEmailReceptor();
		
		String tituloMensagem = envioEmail.getTituloMensagem();
		
		String corpoMensagem = envioEmail.getCorpoMensagem();
		
		try {

			Date data = new Date();
			String AAAAMMDD = Util.formatarDataAAAAMMDD(data);
			String HHMM = Util.formatarDataHHMM(data);
			String formatodatahora = AAAAMMDD + "_" + HHMM;
			
			File leitura = new File(nomeArquivo + "_" + formatodatahora + ".txt");
			
			BufferedWriter out = new BufferedWriter(
				new OutputStreamWriter(
					new FileOutputStream(
						leitura.getAbsolutePath())));
			
			out.write(log.toString());
			out.close();

			// 5. O sistema deverá enviar um e-mail com as ocorrências relacionadas a cada um dos registros informados
			//   no arquivo para o endereço informado na tela de registro do arquivo.
			ServicosEmail.enviarMensagemArquivoAnexado(emailDestinatario,
					emailRemetente, tituloMensagem, corpoMensagem, leitura);
		
		} catch (SendFailedException e) {
			throw e;
		} catch (IOException e) {
			throw new ControladorException("erro.sistema", e);
		} catch (Exception e) {
			throw new ControladorException("erro.sistema", e);
		} 
	}
	
	/**
	 * [UC1182] Recepcionar Arquivo TXT Encerramento OS Cobrança
	 * 
	 * [SB0002] ? Encerrar Ordens de Serviço.
	 * 
	 * Efetua o encerramento das ordens de serviço
	 * 
	 * @author Mariana Victor
	 * @date 21/06/2011
	 */
	private StringBuilder efetuarEncerramentoOSCobranca(Collection<String> collRetornoRegistro)
			throws ControladorException {
		
		StringBuilder log = new StringBuilder("");
		
		Iterator iterator = collRetornoRegistro.iterator();
		
		// 4. Para cada ordem de serviço identificada sem críticas no arquivo, 
		while(iterator.hasNext()) {
		
			String registro = (String) iterator.next();
			
			// 02. Número da Ordem de Serviço  - posição 11 até 20
			Integer idOrdemServico = new Integer(this.getConteudo(12, 10, registro.toCharArray()));
			
			// 03. Motivo do Encerramento - posição 21 até 24
			Short idMotivoEncerramento = new Short(this.getConteudo(23, 4, registro.toCharArray()));
			
			// 04. Data Encerramento  - posição 25 até 35
			String dataEncerramento = this.getConteudo(28, 8, registro.toCharArray());
			Date dataEnc = Util.converteStringSemBarraParaDate(dataEncerramento);
			
			// 05. Identificação do Usuário  - posição 36 até 46
			String idUsuario = this.getConteudo(37, 10, registro.toCharArray());
			
			FiltroUsuario filtroUsuario = new FiltroUsuario();
			filtroUsuario.adicionarParametro(
					new ParametroSimples(FiltroUsuario.ID, idUsuario));
			filtroUsuario.adicionarCaminhoParaCarregamentoEntidade(
					FiltroUsuario.UNIDADE_ORGANIZACIONAL);
			
			Collection colecaoUsuario = Fachada.getInstancia().pesquisar(filtroUsuario, Usuario.class.getName());
			
			Usuario usuarioLogado = (Usuario) Util.retonarObjetoDeColecao(colecaoUsuario);

			// O sistema deverá efetuar o encerramento da ordem de serviço liberando o sistema para usuário.
			// [UC0457] - Encerrar Ordem de Serviço
			this.getControladorOrdemServico()
				.encerrarOSSemExecucao(
						idOrdemServico,
						dataEnc,
						usuarioLogado,
						idMotivoEncerramento.toString(),
						new Date(), null, null, null,
						null,null,null, null);
			
			// 2. Atualizar o retorno como 
			String msg = "#Ordem de Serviço Encerrada.";
			registro = registro.concat(msg);
			
			log.append(registro);
			log.append(System.getProperty("line.separator"));
			
		}
		
		return log;
		
	}
	
	/**
	 * [UC1182] Recepcionar Arquivo TXT Encerramento OS Cobrança
	 * 
	 * Envia email com confirmação após processamento do arquivo Txt
	 * 
	 * @author Mariana Victor
	 * @throws SendFailedException 
	 * @date 21/06/2011
	 */
	private void enviarEmailConfirmacaoEncerramentoOSCobranca(String nomeArquivo, 
			StringBuilder log, String emailDestinatario)
			throws ControladorException, SendFailedException {
		
		EnvioEmail envioEmail = getControladorCadastro()
		.pesquisarEnvioEmail(
				EnvioEmail.PROCESSAR_ARQUIVO_TXT_ENCERRAMENTO_OS_COBRANCA);

		String emailRemetente = envioEmail.getEmailReceptor();
		
		String tituloMensagem = envioEmail.getTituloMensagem();
		
		String corpoMensagem = envioEmail.getCorpoMensagem();
		
		try {
			Date data = new Date();
			String AAAAMMDD = Util.formatarDataAAAAMMDD(data);
			String HHMM = Util.formatarDataHHMM(data);
			String formatodatahora = AAAAMMDD + "_" + HHMM;
			
			File leitura = new File(nomeArquivo + "_" + formatodatahora + ".txt");
			
			BufferedWriter out = new BufferedWriter(
				new OutputStreamWriter(
					new FileOutputStream(
						leitura.getAbsolutePath())));
			
			out.write(log.toString());
			out.close();

			// 5. O sistema deverá enviar um e-mail com as ocorrências relacionadas a cada um dos registros informados
			//   no arquivo para o endereço informado na tela de registro do arquivo.
			ServicosEmail.enviarMensagemArquivoAnexado(emailDestinatario,
					emailRemetente, tituloMensagem, corpoMensagem, leitura);
			
		} catch (SendFailedException e) {
			throw e;
		} catch (IOException e) {
			throw new ControladorException("erro.sistema", e);
		} catch (Exception e) {
			throw new ControladorException("erro.sistema", e);
		} 
	}
	
	/**
	 * [UC1140] Cancelar Contrato de Parcelamento por Cliente [SB0001] ?
	 * Cancelar Contrato de Parcelamento Por Cliente
	 * 
	 * @author Rômulo Aurélio
	 * @throws ControladorException
	 * @date 12/05/2011
	 */
	public void cancelarContratoParcelamentoCliente(
			ContratoParcelamento contratoParcelamento, Usuario usuarioLogado)
			throws ControladorException {

		// 1.1
		ParcelamentoSituacao parcelamentoSituacao = new ParcelamentoSituacao();
		parcelamentoSituacao.setId(ParcelamentoSituacao.CANCELADO);
		contratoParcelamento.setParcelamentoSituacao(parcelamentoSituacao);
		contratoParcelamento.setUltimaAlteracao(new Date());
		
		
		try {
			getControladorTransacao().registrarTransacao(contratoParcelamento);
			
			getControladorUtil().atualizar(contratoParcelamento);
			
			// 1.2
			
			// 1.2.1 TIPO DE DOCUMENTO: CONTA
			
			Collection colecaoContasContratoParcelamentoItem = repositorioCobranca
					.pesquisarDebitoContratoParcelamentoPorTipoDocumento(
							contratoParcelamento, DocumentoTipo.CONTA);

			if (colecaoContasContratoParcelamentoItem != null
					&& !colecaoContasContratoParcelamentoItem.isEmpty()) {

				Iterator iteratorConta = colecaoContasContratoParcelamentoItem
						.iterator();

				ContratoParcelamentoItem contratoParcelamentoItem = new ContratoParcelamentoItem();

				Collection colecaoContasContratoParcelamento = new ArrayList<Conta>();

				while (iteratorConta.hasNext()) {

					contratoParcelamentoItem = (ContratoParcelamentoItem) iteratorConta
							.next();

					ContaMotivoRevisao contaMotivoRevisao = repositorioFaturamento
							.pesquisarContaMotivoRevisao(contratoParcelamentoItem
									.getContaGeral().getId());

					if (contaMotivoRevisao != null 
							&& contaMotivoRevisao.getId().intValue() == ContaMotivoRevisao.CONTA_EM_CONTRATO_PARCELAMENTO.intValue()) {
						colecaoContasContratoParcelamento
								.add(contratoParcelamentoItem.getContaGeral()
										.getConta());

					}

					// 1.2.2.2
					contratoParcelamentoItem
							.setIndicadorItemCancelado((new Integer(1))
									.shortValue());
					contratoParcelamentoItem.setUltimaAlteracao(new Date());

					contratoParcelamentoItem.getContrato()
						.setParcelamentoSituacao(parcelamentoSituacao);
					
					// ------------ REGISTRAR TRANSAÇÃO ----------------
			         RegistradorOperacao registradorOperacao = new RegistradorOperacao(
			 		    Operacao.OPERACAO_CANCELAR_CONTRATO_PARCELAMENTO_CLIENTE,contratoParcelamentoItem.getId(),
			 		   contratoParcelamentoItem.getId(),
			 		    new UsuarioAcaoUsuarioHelper(usuarioLogado,
			 		    UsuarioAcao.USUARIO_ACAO_EFETUOU_OPERACAO));

			 		registradorOperacao.registrarOperacao(contratoParcelamentoItem);
			 		
			 		// ------------ REGISTRAR TRANSAÇÃO ----------------

					getControladorUtil().atualizar(contratoParcelamentoItem);

				}
				
				// 1.2.2.1
				if(colecaoContasContratoParcelamento!=null && !colecaoContasContratoParcelamento.isEmpty()){
					getControladorFaturamento().retirarRevisaoConta(
							colecaoContasContratoParcelamento, null, usuarioLogado,
							false, null);

				}
			}
			
			// 1.2.3 TIPO DE DOCUMENTO: DEBITO A COBRAR
			// 1.2.3. Seleciona os itens de débito do contrato, atuais e sem pagamento, do tipo débito a cobrar
			// 
			Collection colecaoDebitosACobrarContratoParcelamentoItem = repositorioCobranca
			.pesquisarDebitoContratoParcelamentoPorTipoDocumento(
					contratoParcelamento, DocumentoTipo.DEBITO_A_COBRAR);
			
			if (colecaoDebitosACobrarContratoParcelamentoItem != null && !colecaoDebitosACobrarContratoParcelamentoItem.isEmpty()) {
				Iterator iteratorDebitosACobrar = colecaoDebitosACobrarContratoParcelamentoItem.iterator();
				
				// 1.2.4. Para cada item de débito do tipo débito a cobrar selecionado
				while(iteratorDebitosACobrar.hasNext()) {
					ContratoParcelamentoItem item = (ContratoParcelamentoItem) iteratorDebitosACobrar.next();
					DebitoACobrar debitoACobrar = (item)
					.getDebitoACobrarGeral().getDebitoACobrar();
					
					// 1.2.4.1.	Caso o débito a cobrar esteja em revisão pelo motivo "DEBITO A COBRAR EM CONTRATO DE PARCELAMENTO"
					if (debitoACobrar.getContaMotivoRevisao() != null 
							&& debitoACobrar.getContaMotivoRevisao().getId().compareTo(
									ContaMotivoRevisao.DEBITO_A_COBRAR_EM_CONTRATO_PARCELAMENTO) == 0) {
						
						Collection colecaoDebitoACobrar = new ArrayList();
						colecaoDebitoACobrar.add(debitoACobrar);
						
						this.getControladorFaturamento()
						.retirarRevisaoDebitoACobrar(colecaoDebitoACobrar, usuarioLogado);
						
						// 1.2.4.2.	Desvincula o débito a cobrar do contrato de parcelamento 
						item
						.setIndicadorItemCancelado((new Integer(1))
								.shortValue());
						item.setUltimaAlteracao(new Date());
						
						// ------------ REGISTRAR TRANSAÇÃO ----------------
						RegistradorOperacao registradorOperacao = new RegistradorOperacao(
								Operacao.OPERACAO_CANCELAR_CONTRATO_PARCELAMENTO_CLIENTE,item.getId(),
								item.getId(),
								new UsuarioAcaoUsuarioHelper(usuarioLogado,
										UsuarioAcao.USUARIO_ACAO_EFETUOU_OPERACAO));
						
						registradorOperacao.registrarOperacao(item);
						
						// ------------ REGISTRAR TRANSAÇÃO ----------------
						
						getControladorUtil().atualizar(item);
					}
					
				}
				
			}
			
			// 1.2.5 TIPO DE DOCUMENTO: GUIA DE PAGAMENTO
			Collection colecaoGuiaPagamentoContratoParcelamentoItem = repositorioCobranca
			.pesquisarDebitoContratoParcelamentoPorTipoDocumento(
					contratoParcelamento,
					DocumentoTipo.GUIA_PAGAMENTO);
			
			if (colecaoGuiaPagamentoContratoParcelamentoItem != null
					&& !colecaoGuiaPagamentoContratoParcelamentoItem
					.isEmpty()) {
				
				Iterator iteratorGuiaPagamento = colecaoGuiaPagamentoContratoParcelamentoItem
				.iterator();
				
				Collection colecaoGuiaPagamentoContratoParcelamento = new ArrayList<GuiaPagamento>();
				GuiaPagamento guiaPagamento = new GuiaPagamento();
				String[] registrosRemocao = null;
				
				registrosRemocao = new String[colecaoGuiaPagamentoContratoParcelamentoItem.size()];
				int posicao = 0;
				
				while(iteratorGuiaPagamento.hasNext()) {
					GuiaPagamento guia = ((ContratoParcelamentoItem) iteratorGuiaPagamento.next())
					.getGuiaPagamentoGeral().getGuiaPagamento();
					
					colecaoGuiaPagamentoContratoParcelamento.add(guia);
					registrosRemocao[posicao] = guia.getId().toString();
					
					if (posicao == 0) {
						if (guia.getCliente() != null) {
							guiaPagamento.setCliente(guia.getCliente());
						} else {
							guiaPagamento.setCliente(new Cliente());
						}
						if (guia.getImovel() != null) {
							guiaPagamento.setImovel(guia.getImovel());
						} else {
							guiaPagamento.setImovel(new Imovel());
						}
					}
					
					posicao++;
				}
				
				//1.2.6.1.1
				//[UC0188] Manter Guia de Pagamento
				//[SB0001] Cancelar Guia de Pagamento
				this.getControladorFaturamento()
				.manterGuiaPagamento(guiaPagamento, colecaoGuiaPagamentoContratoParcelamento, registrosRemocao, null, usuarioLogado);
				
			}

		} catch (ErroRepositorioException e) {
			sessionContext.setRollbackOnly();
			throw new ControladorException("erro.sistema", e);
		}

	}
	/**
	 * [UC0630] Solicitar Emissão do Extrato de Débitos
	 * 
	 * [SB0001] ? Calcular valor dos descontos pagamento à vista.
	 * 
	 * @author Vivianne Sousa, Raphael Rossiter
	 * @date 21/10/2010, 12/01/2011
	 */
	public NegociacaoOpcoesParcelamentoHelper calcularValorDosDescontosPagamentoAVista(
			ObterOpcoesDeParcelamentoHelper helper) throws ControladorException {

		NegociacaoOpcoesParcelamentoHelper negociacaoOpcoesParcelamentoHelper = new NegociacaoOpcoesParcelamentoHelper();

		// [SB0004] - Verificar Situação do Imóvel e Perfil Parcelamento
		Object[] situacaoImovelPerfilParcelamento = this.verificarSituacaoImovelPerfilParcelamento(
		helper.getIdLigacaoAguaSituacao(), helper.getIdLigacaoEsgotoSituacao(), helper.getIdImovel(), 
		helper.getIdImovelPerfil(), helper.getIdResolucaoDiretoria(), 
		helper.getNumeroReparcelamentoConsecutivos(), helper.getValorDebitoACobrarParcelamentoImovel());

		ParcelamentoPerfil parcelamentoPerfil = (ParcelamentoPerfil) situacaoImovelPerfilParcelamento[0];
		ImovelSituacao imovelSituacao = (ImovelSituacao) situacaoImovelPerfilParcelamento[1];
		
		negociacaoOpcoesParcelamentoHelper.setParcelamentoPerfil(parcelamentoPerfil);

		// 2. O sistema deverá calcular o valor dos descontos por antiguidade
		BigDecimal valorDescontoAntiguidade = new BigDecimal("0.00");
		BigDecimal valorTotalAcrescimosImpontualidadePorAntiguidade = new BigDecimal("0.00");
//		int quantidadeMinimaMesesAntiguidade = 0;

		CalcularValorDescontoAntiguidadeDebitoHelper descontoAntiguidadeDebito = calcularValorDescontoAntiguidadeDebito(
		helper.getIdResolucaoDiretoria(), helper.getIdImovel(), helper.getValorEntradaInformado(),
		helper.getIdLigacaoAguaSituacao(), helper.getIdLigacaoEsgotoSituacao(), 
		helper.getColecaoContaValores(), parcelamentoPerfil, helper.getIndicadorRestabelecimento(),
		helper.getValorTotalMultas(), helper.getValorTotalJurosMora(),
		helper.getValorTotalAtualizacoesMonetarias(),negociacaoOpcoesParcelamentoHelper);
		
		valorDescontoAntiguidade = descontoAntiguidadeDebito.getValorDescontoAntiguidade();
		valorTotalAcrescimosImpontualidadePorAntiguidade = descontoAntiguidadeDebito.getValorTotalAcrescimosImpontualidade();
//		quantidadeMinimaMesesAntiguidade = descontoAntiguidadeDebito.getMaiorQuantidadeMinimaMesesAntiguidade().intValue();
		
		negociacaoOpcoesParcelamentoHelper.setColecaoContasEmAntiguidade(
		descontoAntiguidadeDebito.getColecaoContasEmAntiguidade());
		
		negociacaoOpcoesParcelamentoHelper.setColecaoContasParaParcelamento(
		descontoAntiguidadeDebito.getColecaoContasParaParcelamento());
		
		// 3. O sistema deverá calcular o valor dos descontos nos acréscimos por impontualidade:

		// GUIA PAGAMENTO
		Collection<GuiaPagamentoValoresHelper> colecaoGuiaPagamentoValores = null;
		
		BigDecimal valorAcrescimosImpontualidadeGuiaPagamento = new BigDecimal("0.00");
		valorAcrescimosImpontualidadeGuiaPagamento.setScale(Parcelamento.CASAS_DECIMAIS, Parcelamento.TIPO_ARREDONDAMENTO);

		if (!parcelamentoPerfil.getPercentualDescontoAcrescimo().setScale(2).equals(new BigDecimal("0.00"))) {
			// Pega os acréscimos de Guias de Pagamento
			if (helper.getColecaoGuiaPagamento() != null && !helper.getColecaoGuiaPagamento().isEmpty()) {
				
				colecaoGuiaPagamentoValores = new ArrayList();
				Iterator guiaPagamentoValores = helper.getColecaoGuiaPagamento().iterator();

				BigDecimal valorAtualizacaoMonetaria = new BigDecimal("0.00");
				BigDecimal valorJurosMora = new BigDecimal("0.00");
				BigDecimal valorMulta = new BigDecimal("0.00");

				while (guiaPagamentoValores.hasNext()) {
					GuiaPagamentoValoresHelper guiaPagamentoValoresHelper = (GuiaPagamentoValoresHelper) guiaPagamentoValores.next();

					valorAtualizacaoMonetaria = new BigDecimal("0.00");
					if (guiaPagamentoValoresHelper.getValorAtualizacaoMonetaria() != null
							&& !guiaPagamentoValoresHelper.getValorAtualizacaoMonetaria().equals("")) {
						valorAtualizacaoMonetaria.setScale(Parcelamento.CASAS_DECIMAIS,	Parcelamento.TIPO_ARREDONDAMENTO);
						valorAtualizacaoMonetaria = valorAtualizacaoMonetaria.add(guiaPagamentoValoresHelper
							.getValorAtualizacaoMonetaria().setScale(Parcelamento.CASAS_DECIMAIS, Parcelamento.TIPO_ARREDONDAMENTO));
						valorAcrescimosImpontualidadeGuiaPagamento = valorAcrescimosImpontualidadeGuiaPagamento
							.add(valorAtualizacaoMonetaria.setScale(Parcelamento.CASAS_DECIMAIS,Parcelamento.TIPO_ARREDONDAMENTO));
					}

					valorJurosMora = new BigDecimal("0.00");
					if (guiaPagamentoValoresHelper.getValorJurosMora() != null
							&& !guiaPagamentoValoresHelper.getValorJurosMora().equals("")) {
						valorJurosMora.setScale(Parcelamento.CASAS_DECIMAIS, Parcelamento.TIPO_ARREDONDAMENTO);
						valorJurosMora = valorJurosMora.add(guiaPagamentoValoresHelper
								.getValorJurosMora().setScale(Parcelamento.CASAS_DECIMAIS,Parcelamento.TIPO_ARREDONDAMENTO));
						valorAcrescimosImpontualidadeGuiaPagamento = valorAcrescimosImpontualidadeGuiaPagamento
								.add(valorJurosMora.setScale(Parcelamento.CASAS_DECIMAIS, Parcelamento.TIPO_ARREDONDAMENTO));
					}

					valorMulta = new BigDecimal("0.00");
					if (guiaPagamentoValoresHelper.getValorMulta() != null
							&& !guiaPagamentoValoresHelper.getValorMulta().equals("")) {
						valorMulta.setScale(Parcelamento.CASAS_DECIMAIS, Parcelamento.TIPO_ARREDONDAMENTO);
						valorMulta = valorMulta.add(guiaPagamentoValoresHelper
								.getValorMulta().setScale(Parcelamento.CASAS_DECIMAIS, Parcelamento.TIPO_ARREDONDAMENTO));
						valorAcrescimosImpontualidadeGuiaPagamento = valorAcrescimosImpontualidadeGuiaPagamento
								.add(valorMulta.setScale(Parcelamento.CASAS_DECIMAIS,Parcelamento.TIPO_ARREDONDAMENTO));
					}
					
					colecaoGuiaPagamentoValores.add(guiaPagamentoValoresHelper);
				}
			}
		}

		//=============================================================================================================
		
		//CALCULANDO O VALOR DO DESCONTO DOS ACRÉSCIMOS POR IMPONTUALIDADE 
		DeterminarValorDescontoAcrescimosImpontualidadeHelper valorDescontoAcrescimosImpontualidadeHelper = 
		new DeterminarValorDescontoAcrescimosImpontualidadeHelper(parcelamentoPerfil, 
		valorTotalAcrescimosImpontualidadePorAntiguidade, valorAcrescimosImpontualidadeGuiaPagamento, 
		new BigDecimal("0.00"));
		
		BigDecimal valorDescontoAcrescimosImpontualidade = 
		this.determinarValorDescontoAcrescimosImpontualidade(valorDescontoAcrescimosImpontualidadeHelper);
		
		//=============================================================================================================

		
		// Caso o tipo da situação do imovel seja INATIVO (com situação da
		// LIGACAO_AGUA igual a Suprimido, Suprimido Parcial a Pedido ou Suprimido Parcial
		BigDecimal valorDescontoInatividade = new BigDecimal("0.00");
		BigDecimal valorDescontoInatividadePagamentoAVista = new BigDecimal("0.00");

		// Valor do Débito Total menos os descontos de Acrescimo e Antiguidade
		BigDecimal valorDebitoDescontoInatividade = new BigDecimal("0.00");

		valorDebitoDescontoInatividade = helper.getValorDebitoAtualizado().setScale(Parcelamento.CASAS_DECIMAIS, Parcelamento.TIPO_ARREDONDAMENTO)
				.subtract(valorDescontoAcrescimosImpontualidade.setScale(Parcelamento.CASAS_DECIMAIS, Parcelamento.TIPO_ARREDONDAMENTO));
		valorDebitoDescontoInatividade = valorDebitoDescontoInatividade.setScale(Parcelamento.CASAS_DECIMAIS, Parcelamento.TIPO_ARREDONDAMENTO)
				.subtract(valorDescontoAntiguidade.setScale(Parcelamento.CASAS_DECIMAIS, Parcelamento.TIPO_ARREDONDAMENTO));
//		valorDebitoDescontoInatividade = valorDebitoDescontoInatividade.setScale(Parcelamento.CASAS_DECIMAIS, Parcelamento.TIPO_ARREDONDAMENTO)
//				.subtract(valorDescontoSancoesRDEspecial.setScale(Parcelamento.CASAS_DECIMAIS, Parcelamento.TIPO_ARREDONDAMENTO));
//		valorDebitoDescontoInatividade = valorDebitoDescontoInatividade.setScale(Parcelamento.CASAS_DECIMAIS, Parcelamento.TIPO_ARREDONDAMENTO)
//				.subtract(valorDescontoTarifaSocialRDEspecial.setScale(Parcelamento.CASAS_DECIMAIS, Parcelamento.TIPO_ARREDONDAMENTO));

		if (imovelSituacao.getImovelSituacaoTipo().getId().equals(ImovelSituacaoTipo.INATIVO)
				|| imovelSituacao.getImovelSituacaoTipo().getId().equals(ImovelSituacaoTipo.LIGADO_SO_ESGOTO)) {

			// 3.1 Calcula a qtd de meses de inatividade de ligação de água
			FiltroLigacaoAgua filtroLigacaoAgua = new FiltroLigacaoAgua();
			filtroLigacaoAgua.adicionarParametro(new ParametroSimples(FiltroLigacaoAgua.ID, helper.getIdImovel()));

			Collection<LigacaoAgua> colecaoLigacaoAgua = getControladorUtil()
					.pesquisar(filtroLigacaoAgua, LigacaoAgua.class.getName());

			Calendar dataAnoMesReferencia = new GregorianCalendar();
			dataAnoMesReferencia.set(Calendar.YEAR, new Integer(
					helper.getInicioIntervaloParcelamento().substring(3, 4)).intValue());
			
			dataAnoMesReferencia.set(Calendar.MONTH, new Integer(
					helper.getInicioIntervaloParcelamento().substring(0, 2)).intValue());
			
			dataAnoMesReferencia.set(Calendar.DATE, 01);

			Date dataCorrente = new Date();

			int quantidadeMeses = 0;

			if (Util.isVazioOrNulo(colecaoLigacaoAgua)) {
				// [FS0008] - Verificar a existência da data de supressão da ligação de água
				quantidadeMeses = Util.dataDiff(dataAnoMesReferencia.getTime(),	dataCorrente);
			} else {
				// Pega a primeira ocorrência da coleção
				LigacaoAgua ligacaoAgua = (LigacaoAgua) Util.retonarObjetoDeColecao(colecaoLigacaoAgua);

				Date dataSupressao = null;
				if (ligacaoAgua != null) {
					dataSupressao = ligacaoAgua.getDataSupressao();
				}

				if (dataSupressao != null && !dataSupressao.equals("")) {
					quantidadeMeses = Util.dataDiff(dataSupressao, dataCorrente);
				} else {
					// [FS0008] - Verificar a existência da data de supressão da ligação de água
					quantidadeMeses = Util.dataDiff(dataAnoMesReferencia.getTime(), dataCorrente);
				}
			}

			// 3.2 Obtem os percentuais de desconto por tempo de inatividade
			ParcelamentoDescontoInatividade parcelamentoDescontoInatividadeMenor = null;
			try {
				parcelamentoDescontoInatividadeMenor = repositorioCobranca
						.obterPercentualDescontoInatividade(parcelamentoPerfil.getId(), quantidadeMeses);
			} catch (ErroRepositorioException e) {
				e.printStackTrace();
			}

			if (parcelamentoDescontoInatividadeMenor != null) {

				BigDecimal percentualDescontoInatividade = null;
				
				if (helper.getIndicadorRestabelecimento().equals(2)) {
					// 3.3.1 Com restabelecimento
					percentualDescontoInatividade = parcelamentoDescontoInatividadeMenor
							.getPercentualDescontoSemRestabelecimento();
					valorDescontoInatividade = Util.dividirArredondando(percentualDescontoInatividade.setScale(
							Parcelamento.CASAS_DECIMAIS, Parcelamento.TIPO_ARREDONDAMENTO),	new BigDecimal("100.00"));
					valorDescontoInatividade = valorDescontoInatividade.setScale(Parcelamento.CASAS_DECIMAIS,
							Parcelamento.TIPO_ARREDONDAMENTO).multiply(valorDebitoDescontoInatividade.setScale(
									Parcelamento.CASAS_DECIMAIS, Parcelamento.TIPO_ARREDONDAMENTO));
				} 
				else if (helper.getIndicadorRestabelecimento().equals(1)) {
					// 3.3.2 Sem restabelecimento
					percentualDescontoInatividade = parcelamentoDescontoInatividadeMenor.getPercentualDescontoComRestabelecimento()
							.setScale(Parcelamento.CASAS_DECIMAIS, Parcelamento.TIPO_ARREDONDAMENTO);
					valorDescontoInatividade = Util.dividirArredondando(percentualDescontoInatividade.setScale(
							Parcelamento.CASAS_DECIMAIS, Parcelamento.TIPO_ARREDONDAMENTO),	new BigDecimal("100.00"));
					valorDescontoInatividade = valorDescontoInatividade.setScale(Parcelamento.CASAS_DECIMAIS,
							Parcelamento.TIPO_ARREDONDAMENTO).multiply(valorDebitoDescontoInatividade.setScale(
									Parcelamento.CASAS_DECIMAIS, Parcelamento.TIPO_ARREDONDAMENTO));
				} else {
					valorDescontoInatividade = new BigDecimal("0.00");
				}
				negociacaoOpcoesParcelamentoHelper.setPercentualDescontoInatividadeLigacaoAgua(percentualDescontoInatividade);
			} else {
				// 3.3 Caso nenhuma ocorrência tenha sido selecionada
				valorDescontoInatividade = new BigDecimal("0.00");
			}
			
			
			// Obtem os percentuais de desconto por tempo de inatividade
			ParcDesctoInativVista parcelamentoDescontoInatividadeAVistaMenor = null;
			try {
				parcelamentoDescontoInatividadeAVistaMenor = repositorioCobranca
						.obterPercentualDescontoInatividadeAVista(parcelamentoPerfil.getId(), quantidadeMeses);
			} catch (ErroRepositorioException e) {
				e.printStackTrace();
			}

			if (parcelamentoDescontoInatividadeAVistaMenor != null) {

				BigDecimal percentualDescontoInatividadeAVista = null;
				
				if (helper.getIndicadorRestabelecimento().equals(2)) {
					// Com restabelecimento
					percentualDescontoInatividadeAVista = parcelamentoDescontoInatividadeAVistaMenor
							.getPercentualDescontoSemRestabelecimento();
					valorDescontoInatividadePagamentoAVista = Util.dividirArredondando(percentualDescontoInatividadeAVista.setScale(
							Parcelamento.CASAS_DECIMAIS, Parcelamento.TIPO_ARREDONDAMENTO),	new BigDecimal("100.00"));
					valorDescontoInatividadePagamentoAVista = valorDescontoInatividadePagamentoAVista.setScale(Parcelamento.CASAS_DECIMAIS,
							Parcelamento.TIPO_ARREDONDAMENTO).multiply(valorDebitoDescontoInatividade.setScale(
									Parcelamento.CASAS_DECIMAIS, Parcelamento.TIPO_ARREDONDAMENTO));
				} 
				else if (helper.getIndicadorRestabelecimento().equals(1)) {
					// Sem restabelecimento
					percentualDescontoInatividadeAVista = parcelamentoDescontoInatividadeAVistaMenor.getPercentualDescontoComRestabelecimento()
							.setScale(Parcelamento.CASAS_DECIMAIS, Parcelamento.TIPO_ARREDONDAMENTO);
					valorDescontoInatividadePagamentoAVista = Util.dividirArredondando(percentualDescontoInatividadeAVista.setScale(
							Parcelamento.CASAS_DECIMAIS, Parcelamento.TIPO_ARREDONDAMENTO),	new BigDecimal("100.00"));
					valorDescontoInatividadePagamentoAVista = valorDescontoInatividadePagamentoAVista.setScale(Parcelamento.CASAS_DECIMAIS,
							Parcelamento.TIPO_ARREDONDAMENTO).multiply(valorDebitoDescontoInatividade.setScale(
									Parcelamento.CASAS_DECIMAIS, Parcelamento.TIPO_ARREDONDAMENTO));
				} else {
					valorDescontoInatividadePagamentoAVista = new BigDecimal("0.00");
				}
				negociacaoOpcoesParcelamentoHelper.setPercentualDescontoInatividadeAvistaLigacaoAgua(percentualDescontoInatividadeAVista);
			} else {
				//  Caso nenhuma ocorrência tenha sido selecionada
				valorDescontoInatividadePagamentoAVista = new BigDecimal("0.00");
			}
			
			
		} else {
			// Caso Ativo atribui zero
			valorDescontoInatividade = new BigDecimal("0.00");
			valorDescontoInatividadePagamentoAVista =  new BigDecimal("0.00");
		}

		BigDecimal valorDebitoDesconto = new BigDecimal("0.00");

		valorDebitoDesconto = helper.getValorDebitoAtualizado().setScale(Parcelamento.CASAS_DECIMAIS, Parcelamento.TIPO_ARREDONDAMENTO)
				.subtract(valorDescontoAcrescimosImpontualidade.setScale(Parcelamento.CASAS_DECIMAIS, Parcelamento.TIPO_ARREDONDAMENTO));
		valorDebitoDesconto = valorDebitoDesconto.setScale(Parcelamento.CASAS_DECIMAIS, Parcelamento.TIPO_ARREDONDAMENTO)
				.subtract(valorDescontoInatividade.setScale(Parcelamento.CASAS_DECIMAIS, Parcelamento.TIPO_ARREDONDAMENTO));
		valorDebitoDesconto = valorDebitoDesconto.subtract(valorDescontoAntiguidade.setScale(Parcelamento.CASAS_DECIMAIS, Parcelamento.TIPO_ARREDONDAMENTO));
//		valorDebitoDesconto = valorDebitoDesconto.setScale(Parcelamento.CASAS_DECIMAIS, Parcelamento.TIPO_ARREDONDAMENTO)
//				.subtract(valorDescontoSancoesRDEspecial.setScale(Parcelamento.CASAS_DECIMAIS, Parcelamento.TIPO_ARREDONDAMENTO));
//		valorDebitoDesconto = valorDebitoDesconto.setScale(Parcelamento.CASAS_DECIMAIS, Parcelamento.TIPO_ARREDONDAMENTO)
//				.subtract(valorDescontoTarifaSocialRDEspecial.setScale(Parcelamento.CASAS_DECIMAIS, Parcelamento.TIPO_ARREDONDAMENTO));
		
		// ============================================================================================================
		
		//CALCULANDO O VALOR TOTAL DOS DESCONTOS PARA PAGAMENTO À VISTA
//		DeterminarValorDescontoPagamentoAVistaHelper valorDescontoPagamentoAVistaHelper =
//            new DeterminarValorDescontoPagamentoAVistaHelper(helper,parcelamentoPerfil,
//                valorDescontoAcrescimosImpontualidade, valorDescontoInatividade, valorDescontoAntiguidade,
//                valorDescontoSancoesRDEspecial, valorDescontoTarifaSocialRDEspecial, anoMesLimiteMaximo,
//                rd,helper.getValorCreditoARealizarParcelamentoImovel(),valorDescontoInatividadePagamentoAVista);
		
		FiltroResolucaoDiretoria filtroResolucaoDiretoria = new FiltroResolucaoDiretoria();
		filtroResolucaoDiretoria.adicionarParametro(new ParametroSimples(
		FiltroResolucaoDiretoria.CODIGO, helper.getIdResolucaoDiretoria()));

		Collection colecaoRD = getControladorUtil().pesquisar(filtroResolucaoDiretoria, ResolucaoDiretoria.class.getName());
		ResolucaoDiretoria rd = (ResolucaoDiretoria) Util.retonarObjetoDeColecao(colecaoRD);
		
		helper.setColecaoGuiaPagamentoValores(colecaoGuiaPagamentoValores);
		
		DeterminarValorDescontoPagamentoAVistaHelper valorDescontoPagamentoAVistaHelper =
            new DeterminarValorDescontoPagamentoAVistaHelper(helper,parcelamentoPerfil,
                valorDescontoAcrescimosImpontualidade, valorDescontoInatividade, valorDescontoAntiguidade,
                new BigDecimal("0.00"), new BigDecimal("0.00"), helper.getAnoMesFinalReferenciaDebito(),
                rd,helper.getValorCreditoARealizarParcelamentoImovel(),valorDescontoInatividadePagamentoAVista,
                negociacaoOpcoesParcelamentoHelper.getColecaoContasParaParcelamento(),null,
                helper.getColecaoContaValores());
		
		BigDecimal valorDescontoPagamentoAVista = this.determinarValorDescontoPagamentoAVista(
		valorDescontoPagamentoAVistaHelper,	valorDescontoAcrescimosImpontualidadeHelper, false);
		
		// ============================================================================================================
		
		// Coloca os valores dos descontos no objeto helper
		negociacaoOpcoesParcelamentoHelper.setValorDescontoAcrecismosImpotualidade(valorDescontoAcrescimosImpontualidade);
		negociacaoOpcoesParcelamentoHelper.setValorDescontoInatividade(valorDescontoInatividade);
		negociacaoOpcoesParcelamentoHelper.setValorDescontoAntiguidade(valorDescontoAntiguidade);
//		negociacaoOpcoesParcelamentoHelper.setValorDescontoSancoesRDEspecial(valorDescontoSancoesRDEspecial);
//		negociacaoOpcoesParcelamentoHelper.setValorDescontoTarifaSocialRDEspecial(valorDescontoTarifaSocialRDEspecial);
		negociacaoOpcoesParcelamentoHelper.setValorTotalDescontoPagamentoAVista(valorDescontoPagamentoAVista);


		return negociacaoOpcoesParcelamentoHelper;
	}
	
	

	/**
	 * Retorna o valor de controladorPermissaoEspecial
	 * 
	 * @return O valor de controladorPermissaoEspecial
	 */
	protected ControladorPermissaoEspecialLocal getControladorPermissaoEspecial() {

		ControladorPermissaoEspecialLocalHome localHome = null;
		ControladorPermissaoEspecialLocal local = null;

		// pega a instância do ServiceLocator.

		ServiceLocator locator = null;

		try {
			locator = ServiceLocator.getInstancia();

			localHome = (ControladorPermissaoEspecialLocalHome) locator
					.getLocalHome(ConstantesJNDI.CONTROLADOR_PERMISSAO_ESPECIAL_SEJB);
			// guarda a referencia de um objeto capaz de fazer chamadas à
			// objetos remotamente
			local = localHome.create();

			return local;
		} catch (CreateException e) {
			throw new SistemaException(e);
		} catch (ServiceLocatorException e) {
			throw new SistemaException(e);
		}

	}

	protected ControladorSpcSerasaLocal getControladorSpcSerasa() {
		ControladorSpcSerasaLocalHome localHome = null;
		ControladorSpcSerasaLocal local = null;

		// pega a instância do ServiceLocator.

		ServiceLocator locator = null;

		try {
			locator = ServiceLocator.getInstancia();

			localHome = (ControladorSpcSerasaLocalHome) locator
					.getLocalHome(ConstantesJNDI.CONTROLADOR_SPC_SERASA_SEJB);
			// guarda a referencia de um objeto capaz de fazer chamadas à
			// objetos remotamente
			local = localHome.create();

			return local;
		} catch (CreateException e) {
			throw new SistemaException(e);
		} catch (ServiceLocatorException e) {
			throw new SistemaException(e);
		}
	}

	
	private ControladorCadastroLocal getControladorCadastro() {
		ControladorCadastroLocalHome localHome = null;
		ControladorCadastroLocal local = null;

		ServiceLocator locator = null;
		try {
			locator = ServiceLocator.getInstancia();
			localHome = (ControladorCadastroLocalHome) locator
					.getLocalHomePorEmpresa(ConstantesJNDI.CONTROLADOR_CADASTRO_SEJB);

			local = localHome.create();

			return local;
		} catch (CreateException e) {
			throw new SistemaException(e);
		} catch (ServiceLocatorException e) {
			throw new SistemaException(e);
		}
	}

	/**
	 * Retorna a interface remota de ControladorUnidade
	 * 
	 * @return A interface remota do controlador unidade
	 */
	protected ControladorUnidadeLocal getControladorUnidade() {
		ControladorUnidadeLocalHome localHome = null;
		ControladorUnidadeLocal local = null;

		ServiceLocator locator = null;

		try {
			locator = ServiceLocator.getInstancia();

			localHome = (ControladorUnidadeLocalHome) locator
					.getLocalHome(ConstantesJNDI.CONTROLADOR_UNIDADE_SEJB);

			local = localHome.create();

			return local;
		} catch (CreateException e) {
			throw new SistemaException(e);
		} catch (ServiceLocatorException e) {
			throw new SistemaException(e);
		}

	}

	/**
	 * Retorna o controladorLigacaoEsgoto
	 * 
	 * @author Sávio Luiz
	 * @date 21/12/2006
	 * 
	 */
	protected ControladorLigacaoEsgotoLocal getControladorLigacaoEsgoto() {
		ControladorLigacaoEsgotoLocalHome localHome = null;
		ControladorLigacaoEsgotoLocal local = null;

		ServiceLocator locator = null;
		try {
			locator = ServiceLocator.getInstancia();
			localHome = (ControladorLigacaoEsgotoLocalHome) locator
					.getLocalHome(ConstantesJNDI.CONTROLADOR_LIGACAO_ESGOTO_SEJB);
			local = localHome.create();
			return local;
		} catch (CreateException e) {
			throw new SistemaException(e);
		} catch (ServiceLocatorException e) {
			throw new SistemaException(e);
		}
	}

	/**
	 * Retorna o valor de controladorUtil
	 * 
	 * @return O valor de controladorUtil
	 */
	protected ControladorUtilLocal getControladorUtil() {

		ControladorUtilLocalHome localHome = null;
		ControladorUtilLocal local = null;

		// pega a instância do ServiceLocator.

		ServiceLocator locator = null;

		try {
			locator = ServiceLocator.getInstancia();

			localHome = (ControladorUtilLocalHome) locator
					.getLocalHome(ConstantesJNDI.CONTROLADOR_UTIL_SEJB);
			// guarda a referencia de um objeto capaz de fazer chamadas à
			// objetos remotamente
			local = localHome.create();

			return local;
		} catch (CreateException e) {
			throw new SistemaException(e);
		} catch (ServiceLocatorException e) {
			throw new SistemaException(e);
		}

	}

	/**
	 * Retorna o valor de controladorImovel
	 * 
	 * @return O valor de controladorImovel
	 */
	protected ControladorImovelLocal getControladorImovel() {
		ControladorImovelLocalHome localHome = null;
		ControladorImovelLocal local = null;

		// pega a instância do ServiceLocator.

		ServiceLocator locator = null;

		try {
			locator = ServiceLocator.getInstancia();

			localHome = (ControladorImovelLocalHome) locator
					.getLocalHome(ConstantesJNDI.CONTROLADOR_IMOVEL_SEJB);
			// guarda a referencia de um objeto capaz de fazer chamadas à
			// objetos remotamente
			local = localHome.create();

			return local;
		} catch (CreateException e) {
			throw new SistemaException(e);
		} catch (ServiceLocatorException e) {
			throw new SistemaException(e);
		}
	}

	/**
	 * Retorna o valor de controladorFaturamento
	 * 
	 * @return O valor de controladorFaturamento
	 */
	protected ControladorFaturamentoLocal getControladorFaturamento() {
		ControladorFaturamentoLocalHome localHome = null;
		ControladorFaturamentoLocal local = null;

		// pega a instância do ServiceLocator.

		ServiceLocator locator = null;

		try {
			locator = ServiceLocator.getInstancia();

			localHome = (ControladorFaturamentoLocalHome) locator
					.getLocalHomePorEmpresa(ConstantesJNDI.CONTROLADOR_FATURAMENTO_SEJB);
			// guarda a referencia de um objeto capaz de fazer chamadas à
			// objetos remotamente
			local = localHome.create();

			return local;
		} catch (CreateException e) {
			throw new SistemaException(e);
		} catch (ServiceLocatorException e) {
			throw new SistemaException(e);
		}
	}
	
	
	/**
	 * Retorna o valor de ControladorContratoParcelamentoLocal
	 * 
	 * @return O valor de ControladorContratoParcelamentoLocal
	 */
	protected ControladorContratoParcelamentoLocal getControladorContratoParcelamento() {
		ControladorContratoParcelamentoLocalHome localHome = null;
		ControladorContratoParcelamentoLocal local = null;

		// pega a inst?ncia do ServiceLocator.

		ServiceLocator locator = null;

		try {
			locator = ServiceLocator.getInstancia();

			localHome = (ControladorContratoParcelamentoLocalHome) locator
					.getLocalHome(ConstantesJNDI.CONTROLADOR_CONTRATO_PARCELAMENTO_SEJB);
			// guarda a referencia de um objeto capaz de fazer chamadas ?
			// objetos remotamente
			local = localHome.create();

			return local;
		} catch (CreateException e) {
			throw new SistemaException(e);
		} catch (ServiceLocatorException e) {
			throw new SistemaException(e);
		}

	}
	

	/**
	 * Retorna o valor de controladorFaturamento
	 * 
	 * @return O valor de controladorFaturamento
	 */
	protected ControladorAtendimentoPublicoLocal getControladorAtendimentoPublico() {
		ControladorAtendimentoPublicoLocalHome localHome = null;
		ControladorAtendimentoPublicoLocal local = null;

		// pega a instância do ServiceLocator.

		ServiceLocator locator = null;

		try {
			locator = ServiceLocator.getInstancia();

			localHome = (ControladorAtendimentoPublicoLocalHome) locator
					.getLocalHome(ConstantesJNDI.CONTROLADOR_ATENDIMENTO_PUBLICO_SEJB);
			// guarda a referencia de um objeto capaz de fazer chamadas à
			// objetos remotamente
			local = localHome.create();

			return local;
		} catch (CreateException e) {
			throw new SistemaException(e);
		} catch (ServiceLocatorException e) {
			throw new SistemaException(e);
		}
	}

	/**
	 * Retorna o valor de controladorFaturamento
	 * 
	 * @return O valor de controladorFaturamento
	 */
	protected ControladorClienteLocal getControladorCliente() {
		ControladorClienteLocalHome localHome = null;
		ControladorClienteLocal local = null;

		// pega a instância do ServiceLocator.

		ServiceLocator locator = null;

		try {
			locator = ServiceLocator.getInstancia();

			localHome = (ControladorClienteLocalHome) locator
					.getLocalHome(ConstantesJNDI.CONTROLADOR_CLIENTE_SEJB);
			// guarda a referencia de um objeto capaz de fazer chamadas à
			// objetos remotamente
			local = localHome.create();

			return local;
		} catch (CreateException e) {
			throw new SistemaException(e);
		} catch (ServiceLocatorException e) {
			throw new SistemaException(e);
		}
	}

	/**
	 * Retorna o valor de controladorMicromedicao
	 * 
	 * @return O valor de controladorMicromedicao
	 */
	protected ControladorMicromedicaoLocal getControladorMicromedicao() {
		ControladorMicromedicaoLocalHome localHome = null;
		ControladorMicromedicaoLocal local = null;

		// pega a instância do ServiceLocator.

		ServiceLocator locator = null;

		try {
			locator = ServiceLocator.getInstancia();

			localHome = (ControladorMicromedicaoLocalHome) locator
					.getLocalHomePorEmpresa(ConstantesJNDI.CONTROLADOR_MICROMEDICAO_SEJB);
			// guarda a referencia de um objeto capaz de fazer chamadas à
			// objetos remotamente
			local = localHome.create();

			return local;
		} catch (CreateException e) {
			throw new SistemaException(e);
		} catch (ServiceLocatorException e) {
			throw new SistemaException(e);
		}
	}

	/**
	 * Retorna o valor de controladorAcesso
	 * 
	 * @return O valor de controladorAcesso
	 */
	protected ControladorAcessoLocal getControladorAcesso() {
		ControladorAcessoLocalHome localHome = null;
		ControladorAcessoLocal local = null;

		// pega a instância do ServiceLocator.

		ServiceLocator locator = null;

		try {
			locator = ServiceLocator.getInstancia();

			localHome = (ControladorAcessoLocalHome) locator
					.getLocalHome(ConstantesJNDI.CONTROLADOR_ACESSO_SEJB);
			// guarda a referencia de um objeto capaz de fazer chamadas à
			// objetos remotamente
			local = localHome.create();

			return local;
		} catch (CreateException e) {
			throw new SistemaException(e);
		} catch (ServiceLocatorException e) {
			throw new SistemaException(e);
		}
	}
	
	protected ControladorTransacaoLocal getControladorTransacao() {
		ControladorTransacaoLocalHome localHome = null;
		ControladorTransacaoLocal local = null;

		// pega a instância do ServiceLocator.

		ServiceLocator locator = null;

		try {
			locator = ServiceLocator.getInstancia();

			localHome = (ControladorTransacaoLocalHome) locator
					.getLocalHome(ConstantesJNDI.CONTROLADOR_TRANSACAO_SEJB);
			// guarda a referencia de um objeto capaz de fazer chamadas à
			// objetos remotamente
			local = localHome.create();

			return local;
		} catch (CreateException e) {
			throw new SistemaException(e);
		} catch (ServiceLocatorException e) {
			throw new SistemaException(e);
		}
	}

	/**
	 * Retorna o valor de controladorAcesso
	 * 
	 * @return O valor de controladorAcesso
	 */
	protected ControladorArrecadacaoLocal getControladorArrecadacao() {
		ControladorArrecadacaoLocalHome localHome = null;
		ControladorArrecadacaoLocal local = null;

		// pega a instância do ServiceLocator.

		ServiceLocator locator = null;

		try {
			locator = ServiceLocator.getInstancia();

			localHome = (ControladorArrecadacaoLocalHome) locator
					.getLocalHomePorEmpresa(ConstantesJNDI.CONTROLADOR_ARRECADACAO_SEJB);
			// guarda a referencia de um objeto capaz de fazer chamadas à
			// objetos remotamente
			local = localHome.create();

			return local;
		} catch (CreateException e) {
			throw new SistemaException(e);
		} catch (ServiceLocatorException e) {
			throw new SistemaException(e);
		}
	}
	
	/**
	 * Retorna o controladorLocalidade
	 * 
	 * @author Ivan Sergio
	 * @date 21/05/2009
	 * 
	 */
	protected ControladorLocalidadeLocal getControladorLocalidade() {
		ControladorLocalidadeLocalHome localHome = null;
		ControladorLocalidadeLocal local = null;

		ServiceLocator locator = null;
		try {
			locator = ServiceLocator.getInstancia();
			localHome = (ControladorLocalidadeLocalHome) locator
					.getLocalHome(ConstantesJNDI.CONTROLADOR_LOCALIDADE_SEJB);
			local = localHome.create();
			return local;
		} catch (CreateException e) {
			throw new SistemaException(e);
		} catch (ServiceLocatorException e) {
			throw new SistemaException(e);
		}
	}
	
	/**
	 * Retorna a interface remota de ControladorParametro
	 * 
	 * @return A interface remota do controlador de parâmetro
	 */
	private ControladorUsuarioLocal getControladorUsuario() {
		ControladorUsuarioLocalHome localHome = null;
		ControladorUsuarioLocal local = null;

		// pega a instância do ServiceLocator.

		ServiceLocator locator = null;

		try {
			locator = ServiceLocator.getInstancia();

			localHome = (ControladorUsuarioLocalHome) locator
					.getLocalHome(ConstantesJNDI.CONTROLADOR_USUARIO_SEJB);
			// guarda a referencia de um objeto capaz de fazer chamadas à
			// objetos remotamente
			local = localHome.create();

			return local;
		} catch (CreateException e) {
			throw new SistemaException(e);
		} catch (ServiceLocatorException e) {
			throw new SistemaException(e);
		}
	}


	
	
	/**
	 * 
	 * [UC1038] Prescrever Débitos de Imóveis
	 * 
	 * @author Hugo Leonardo
	 * @date 07/07/2010
	 * 
	 */
	public void gerarPrescreverDebitosDeImoveis( Integer idFuncionalidadeIniciada, 
			Integer anoMesFaturamento, Integer anoMesPrescricao, Integer usuario, String idsCobrancaSituacao) 
		throws ControladorException {
		
		int idUnidadeIniciada = 0;
		
		// ---------------------------------------------------
		// Registrar o início do processamento da Unidade de
		// Processamento do Batch
		// ---------------------------------------------------
		idUnidadeIniciada = getControladorBatch()
				.iniciarUnidadeProcessamentoBatch(idFuncionalidadeIniciada, 
						UnidadeProcessamento.FUNCIONALIDADE, 0);
		
		try {		
			
			this.repositorioCobranca.prescreverDebitosDeImoveis(anoMesFaturamento, anoMesPrescricao, 
					usuario, idsCobrancaSituacao);

			getControladorBatch().encerrarUnidadeProcessamentoBatch(null,
					idUnidadeIniciada, false);

		} catch (ErroRepositorioException e) {
			e.printStackTrace();
			
			getControladorBatch().encerrarUnidadeProcessamentoBatch(e,
					idUnidadeIniciada, true);
			throw new EJBException(e);
		}
	}	
	
	/**
	 * [UC0998] Gerar Relação de Parcelamento - Visão Cartão de Crédito
	 * 
	 * Bean que preencherá o relatorio
	 * 
	 * @author Hugo Amorim
	 * @date 11/06/2010
	 *
	 */
	public Collection<RelatorioRelacaoParcelamentoCartaoCreditoBean> filtrarRelacaoParcelamentoCartaoCredito(
			FiltrarRelacaoParcelamentoHelper filtrarRelacaoParcelamento) throws ControladorException{

		Collection<Object[]> colecaoRelacaoParcelamento = new ArrayList();
		Collection<RelatorioRelacaoParcelamentoCartaoCreditoBean> beans = new ArrayList();

		try {

			colecaoRelacaoParcelamento = repositorioCobranca
					.filtrarRelacaoParcelamentoCartaoCredito(filtrarRelacaoParcelamento);
			
			if ( colecaoRelacaoParcelamento != null && colecaoRelacaoParcelamento.size() > 0 ){
				
				Iterator iteRelacaoParcelamento = colecaoRelacaoParcelamento.iterator();
				
				while ( iteRelacaoParcelamento.hasNext() ){
					
					Object[] linha = (Object[]) iteRelacaoParcelamento.next();
					
					RelatorioRelacaoParcelamentoCartaoCreditoBean bean = 
						new RelatorioRelacaoParcelamentoCartaoCreditoBean();

					bean.setIdLocalidade((String) linha[1]);
					bean.setDescricaoLocalidade((String) linha[2]);
					bean.setIdGerencia((String) linha[3]);
					bean.setDescricaoGerencia((String) linha[4]);
					bean.setNome((String) linha[5]);
					bean.setMatricula(Util.retornaMatriculaImovelFormatada((Integer) linha[6]));
					
					if( linha[13]!=null ){
						
						Date dataConfirmacaoParcelamento = (Date) linha[13];	
						
						Short nnDiasFloat = repositorioCobranca
							.pesquisarNumeroDiasFloatCartao((Integer) linha[11], 
									ArrecadacaoForma.CARTAO_CREDITO);		
						
						dataConfirmacaoParcelamento = 
							Util.adicionarNumeroDiasDeUmaData(dataConfirmacaoParcelamento, nnDiasFloat);
						
						bean.setDataPrimeiroVencimento(Util.formatarData(dataConfirmacaoParcelamento));
					
					}
					bean.setValorDebito((BigDecimal) linha[7]);	
					bean.setValorParcela((BigDecimal) linha[8]);
					bean.setDataParcelamento(Util.formatarData((Date) linha[9]));
					bean.setQuantidadeParcelas((String) linha[10]);
					bean.setUsuarioConfirmacaoCartaoCredito((String) linha[12]);
					bean.setDataConfirmacaoCartaoCredito(Util.formatarData((Date) linha[13]));
					bean.setDataConfirmacaoCartaoCreditoOperadora(Util.formatarData((Date) linha[14]));
					bean.setValorConfirmado((BigDecimal) linha[15]);
					if(!Util.isVazioOrNulo(filtrarRelacaoParcelamento.getColecaoMunicipiosAssociados())){
						bean.setIdMunicipio((String) linha[16]);
						bean.setDescricaoMunicipio((String) linha [17]);
					}
					beans.add(bean);

				}				
			}
		} catch (ErroRepositorioException ex) {
			sessionContext.setRollbackOnly();
			ex.printStackTrace();
			throw new ControladorException("erro.sistema", ex);
		}
		
		return beans;
	}
	
	
	/**
	 * [UC0252] ? Consultar Parcelamentos de Débitos
	 *
	 * @author Raphael Rossiter
	 * @date 20/05/2010
	 *
	 * @param colecaoParcelamentoPagamentoCartaoCredito
	 * @param usuarioLogado
	 * @throws ControladorException
	 */
	public void atualizarParcelamentoPagamentoCartaoCredito(Collection colecaoParcelamentoPagamentoCartaoCredito, Usuario usuarioLogado) 
		throws ControladorException {
		
		
		if (colecaoParcelamentoPagamentoCartaoCredito != null && !colecaoParcelamentoPagamentoCartaoCredito.isEmpty()){
			
			Iterator iterator = colecaoParcelamentoPagamentoCartaoCredito.iterator();
			BigDecimal valorTotalTransacao = BigDecimal.ZERO;
			ParcelamentoPagamentoCartaoCredito parcelamentoPagamentoCartaoCredito = null;
			
			while(iterator.hasNext()){
				
				parcelamentoPagamentoCartaoCredito = (ParcelamentoPagamentoCartaoCredito) iterator.next();
				
				valorTotalTransacao = valorTotalTransacao.add(parcelamentoPagamentoCartaoCredito.getValorParcelado());
			}
			
			BigDecimal valorParcelado = parcelamentoPagamentoCartaoCredito.getParcelamento().getValorParcelado();
			
			/*
			 * [FS0005] ? Somatório Inválido.
			 * 
			 * Caso o somatório dos cartões esteja maior ou menor que o valor total dos débitos selecionados, 
			 * exibir a mensagem ?Valor informado para os cartões está inválido? + menor  ou maior ?que o 
			 * valor dos débitos selecionados?.
			 */
			if((valorTotalTransacao.compareTo(valorParcelado)!=0)){
	        	
				if(valorTotalTransacao.compareTo(valorParcelado)< 0){
	        		throw new ControladorException("atencao.somatorio_invalido",null,"menor");
	        	}
				else{
	        		throw new ControladorException("atencao.somatorio_invalido",null,"maior");
	        	}
	        }
			
			
			iterator = colecaoParcelamentoPagamentoCartaoCredito.iterator();
			
			while(iterator.hasNext()){
				
				parcelamentoPagamentoCartaoCredito = (ParcelamentoPagamentoCartaoCredito) iterator.next();
				
				//ULTIMA ALTERACAO
				parcelamentoPagamentoCartaoCredito.setUltimaAlteracao(new Date());
				
				//------------ REGISTRAR TRANSAÇÃO ----------------
				RegistradorOperacao registradorOperacao = new RegistradorOperacao(
						Operacao.OPERACAO_ATUALIZAR_PARCELAMENTO_PAGAMENTO_CARTAO_CREDITO,
						parcelamentoPagamentoCartaoCredito.getParcelamento().getId(),
						parcelamentoPagamentoCartaoCredito.getId(),
						new UsuarioAcaoUsuarioHelper(usuarioLogado, UsuarioAcao.USUARIO_ACAO_EFETUOU_OPERACAO));

				registradorOperacao.registrarOperacao(parcelamentoPagamentoCartaoCredito);
				// ------------ REGISTRAR TRANSAÇÃO ----------------		
				
				getControladorUtil().atualizar(parcelamentoPagamentoCartaoCredito);
			}
		}
	}
	
	/**
	 * [UC0252] ? Consultar Parcelamentos de Débitos 
	 *
	 * @author Raphael Rossiter
	 * @date 25/05/2010
	 *
	 * @param idParcelamento
	 * @return boolean
	 * @throws ControladorException
	 */
	public boolean parcelamentoPagamentoCartaoCreditoJaConfirmado(Integer idParcelamento) throws ControladorException{
		
		boolean retorno = false;
		
		FiltroParcelamentoPagamentoCartaoCredito filtroParcelamentoPagamentoCartaoCredito = new FiltroParcelamentoPagamentoCartaoCredito();
		
		filtroParcelamentoPagamentoCartaoCredito.adicionarParametro(new ParametroSimples(
		FiltroParcelamentoPagamentoCartaoCredito.ID_PARCELAMENTO, idParcelamento));
		
		Collection colecaoParcelamentoPagamentoCartaoCredito = this.getControladorUtil().pesquisar(filtroParcelamentoPagamentoCartaoCredito,
		ParcelamentoPagamentoCartaoCredito.class.getName());
		
		if (colecaoParcelamentoPagamentoCartaoCredito != null && !colecaoParcelamentoPagamentoCartaoCredito.isEmpty()){
			
			Iterator iterator = colecaoParcelamentoPagamentoCartaoCredito.iterator();
			
			while(iterator.hasNext()){
				
				ParcelamentoPagamentoCartaoCredito parcelamentoPagamentoCartaoCredito = (ParcelamentoPagamentoCartaoCredito) iterator.next();
				
				if (parcelamentoPagamentoCartaoCredito.getIndicadorConfirmadoOperadora().equals(ConstantesSistema.SIM)){
					
					retorno = true;
					break;
				}
			}
		}
		
		
		return retorno;
	}

	/**
	 * [UC0178] Religar Automaticamente Imóvel Cortado BATCH - Permite a
	 * Religação automática de imóveis cortados Author: Rafael Santos Data:
	 * 02/01/2006
	 * 
	 * @throws ControladorException
	 */
	public void religarAutomaticamenteImovelCortado()
			throws ControladorException {

		Collection colecaoMatriculasImoveis = null;

		String anoMesReferencia = getControladorUtil()
				.pesquisarParametrosDoSistema().getAnoMesFaturamento()
				+ "";

		Calendar data = new GregorianCalendar();
		data.set(Calendar.YEAR, new Integer(anoMesReferencia.substring(0, 4))
				.intValue());
		data.set(Calendar.MONTH, new Integer(anoMesReferencia.substring(4, 6))
				.intValue() - 1);
		data.set(Calendar.DATE, 31);
		data.add(Calendar.DATE, -60);

		try {
			colecaoMatriculasImoveis = repositorioCobranca
					.pesquisarImoveisCortados(LigacaoEsgotoSituacao.LIGADO
							.toString(),
							LigacaoAguaSituacao.CORTADO.toString(), data
									.getTime());
		} catch (ErroRepositorioException ex) {
			sessionContext.setRollbackOnly();
			throw new ControladorException("erro.sistema", ex);
		}

		if (colecaoMatriculasImoveis != null
				&& !colecaoMatriculasImoveis.isEmpty()) {

			Iterator icolecaoMatriculasImoveis = colecaoMatriculasImoveis
					.iterator();

			// itera as matriculas dos imoveis, verificando cada um
			String idConsumoHistorico = null;
			while (icolecaoMatriculasImoveis.hasNext()) {

				String id = ((Integer) icolecaoMatriculasImoveis.next())
						.toString();
				try { // pesquisa do consumo historico
					idConsumoHistorico = repositorioCobranca
							.pesquisarImoveisHidrometroAguaConsumoFaturadoReal(
									id, anoMesReferencia, ConsumoTipo.REAL
											.toString(),
									LigacaoTipo.LIGACAO_AGUA.toString());
				} catch (ErroRepositorioException ex) {
					sessionContext.setRollbackOnly();
					throw new ControladorException("erro.sistema", ex);
				}

				if (idConsumoHistorico != null) {

					data.setTime(new Date());

					this.religarImovelCortado(id, LigacaoAguaSituacao.LIGADO
							.toString(), data.getTime());

				} else {// pesquisa agora o consumo historico com a data de
					// referencia de faturamento menos 1 mês
					data = new GregorianCalendar();
					data.set(Calendar.YEAR, new Integer(anoMesReferencia
							.substring(0, 4)).intValue());
					data.set(Calendar.MONTH, new Integer(anoMesReferencia
							.substring(4, 6)).intValue());
					data.add(Calendar.MONTH, -1);

					if ((data.get(Calendar.MONTH) + 1) < 10) {
						anoMesReferencia = data.get(Calendar.YEAR) + "0"
								+ (data.get(Calendar.MONTH) + 1);
					} else {
						anoMesReferencia = data.get(Calendar.YEAR) + ""
								+ (data.get(Calendar.MONTH) + 1);
					}
					try {
						idConsumoHistorico = repositorioCobranca
								.pesquisarImoveisHidrometroAguaConsumoFaturadoReal(
										id, anoMesReferencia, ConsumoTipo.REAL
												.toString(),
										LigacaoTipo.LIGACAO_AGUA.toString());
					} catch (ErroRepositorioException ex) {
						sessionContext.setRollbackOnly();
						throw new ControladorException("erro.sistema", ex);
					}

					if (idConsumoHistorico != null) {

						data.setTime(new Date());

						this.religarImovelCortado(id,
								LigacaoAguaSituacao.LIGADO.toString(), data
										.getTime());
					}
				}

				if (idConsumoHistorico == null) {

					// obter debito do imovel ou cliente
					String anoMesArrecadacao = getControladorUtil()
							.pesquisarParametrosDoSistema()
							.getAnoMesArrecadacao()
							+ "";

					Calendar dataArrecadacao = new GregorianCalendar();
					dataArrecadacao.set(Calendar.YEAR, new Integer(
							anoMesArrecadacao.substring(0, 4)).intValue());
					dataArrecadacao.set(Calendar.MONTH, new Integer(
							anoMesArrecadacao.substring(4, 6)).intValue() - 1);
					dataArrecadacao.set(Calendar.DATE, 30);
					dataArrecadacao.add(Calendar.MONTH, -1);

					Calendar dataInicioVencimentoDebito = new GregorianCalendar();
					dataInicioVencimentoDebito.set(Calendar.YEAR, 1);
					dataInicioVencimentoDebito.set(Calendar.MONTH, 0);
					dataInicioVencimentoDebito.set(Calendar.DATE, 1);

					StringBuffer dataFinalReferenciaDebito = new StringBuffer()
							.append(dataArrecadacao.get(Calendar.YEAR)).append(
									Calendar.MONTH);

					ObterDebitoImovelOuClienteHelper obterDebitoImovelOuClienteHelper = this
							.obterDebitoImovelOuCliente(1, id, null, null,
									"000101", dataFinalReferenciaDebito
											.toString(),
									dataInicioVencimentoDebito.getTime(),
									dataArrecadacao.getTime(), 1, 2, 2, 2, 1,
									1, 2, null);

					if (obterDebitoImovelOuClienteHelper == null) {

						data.setTime(new Date());

						this.religarImovelCortado(id,
								LigacaoAguaSituacao.LIGADO.toString(), data
										.getTime());
					}

				}
			}
		}
	}


	/**
	 * [UC0178] Religar Automaticamente Imóvel Cortado Auhtor: Rafael Santos
	 * Data: 03/01/2006
	 * 
	 * @param id
	 *            Matricula do Imovel
	 * @param situacaoAguaLigado
	 *            Situação Agua
	 * @param dataReligacaoAgua
	 *            Data Religacao Agua
	 * @throws ControladorException
	 *             Controlador Exception
	 */
	public void religarImovelCortado(String id, String situacaoAguaLigado,
			Date dataReligacaoAgua) throws ControladorException {

		try {
			repositorioCobranca.religarImovelCortado(id, situacaoAguaLigado,
					dataReligacaoAgua);
		} catch (ErroRepositorioException ex) {
			sessionContext.setRollbackOnly();
			throw new ControladorException("erro.sistema", ex);
		}

	}
	
	/**
	 * Permite a obtenção dos débitos de um imóvel ou de um cliente
	 * 
	 * [UC0067] Obter Débito do Imóvel ou Cliente
	 * 
	 * @author Rafael Santos ,Rafael Santos, Pedro Alexandre
	 * @date 04/01/2006,22/03/2006,13/03/2007
	 * 
	 * @param indicadorDebito
	 * @param idImovel
	 * @param codigoCliente
	 * @param clienteRelacaoTipo
	 * @param anoMesInicialReferenciaDebito
	 * @param anoMesFinalReferenciaDebito
	 * @param anoMesInicialVencimentoDebito
	 * @param anoMesFinalVencimentoDebito
	 * @param indicadorPagamento
	 * @param indicadorConta
	 * @param indicadorDebitoACobrar
	 * @param indicadorCreditoARealizar
	 * @param indicadorNotasPromissorias
	 * @param indicadorGuiasPagamento
	 * @param indicadorCalcularAcrescimoImpontualidade
	 * @param indicadorContas
	 * @return
	 * @throws ControladorException
	 */
	public ObterDebitoImovelOuClienteHelper obterDebitoImovelOuCliente(
			int indicadorDebito, String idImovel, String codigoCliente,
			Short clienteRelacaoTipo, String anoMesInicialReferenciaDebito,
			String anoMesFinalReferenciaDebito,
			Date anoMesInicialVencimentoDebito,
			Date anoMesFinalVencimentoDebito, int indicadorPagamento,
			int indicadorConta, int indicadorDebitoACobrar,
			int indicadorCreditoARealizar, int indicadorNotasPromissorias,
			int indicadorGuiasPagamento,
			int indicadorCalcularAcrescimoImpontualidade,
			Boolean indicadorContas) throws ControladorException {
		
		return this.obterDebitoImovelOuCliente(indicadorDebito, idImovel, codigoCliente,
			clienteRelacaoTipo, anoMesInicialReferenciaDebito,
			anoMesFinalReferenciaDebito,
			anoMesInicialVencimentoDebito,
			anoMesFinalVencimentoDebito, indicadorPagamento,
			indicadorConta, indicadorDebitoACobrar,
			indicadorCreditoARealizar, indicadorNotasPromissorias,
			indicadorGuiasPagamento,
			indicadorCalcularAcrescimoImpontualidade,
			indicadorContas, 3);
	}

	// ///
	/**
	 * Permite a obtenção dos débitos de um imóvel ou de um cliente
	 * 
	 * [UC0067] Obter Débito do Imóvel ou Cliente
	 * 
	 * @author Rafael Santos ,Rafael Santos, Pedro Alexandre
	 * @date 04/01/2006,22/03/2006,13/03/2007
	 * 
	 * @param indicadorDebito
	 * @param idImovel
	 * @param codigoCliente
	 * @param clienteRelacaoTipo
	 * @param anoMesInicialReferenciaDebito
	 * @param anoMesFinalReferenciaDebito
	 * @param anoMesInicialVencimentoDebito
	 * @param anoMesFinalVencimentoDebito
	 * @param indicadorPagamento
	 * @param indicadorConta
	 * @param indicadorDebitoACobrar
	 * @param indicadorCreditoARealizar
	 * @param indicadorNotasPromissorias
	 * @param indicadorGuiasPagamento
	 * @param indicadorCalcularAcrescimoImpontualidade
	 * @param indicadorContas
	 * @param indicadorDividaAtiva
	 * @return
	 * @throws ControladorException
	 */
	public ObterDebitoImovelOuClienteHelper obterDebitoImovelOuCliente(
			int indicadorDebito, String idImovel, String codigoCliente,
			Short clienteRelacaoTipo, String anoMesInicialReferenciaDebito,
			String anoMesFinalReferenciaDebito,
			Date anoMesInicialVencimentoDebito,
			Date anoMesFinalVencimentoDebito, int indicadorPagamento,
			int indicadorConta, int indicadorDebitoACobrar,
			int indicadorCreditoARealizar, int indicadorNotasPromissorias,
			int indicadorGuiasPagamento,
			int indicadorCalcularAcrescimoImpontualidade,
			Boolean indicadorContas, int indicadorDividaAtiva) throws ControladorException {
		
		SistemaParametro sistemaParametro = getControladorUtil().pesquisarParametrosDoSistema();
		String anoMesArrecadacao = getControladorUtil()
				.pesquisarParametrosDoSistema().getAnoMesArrecadacao()
				+ "";

		ObterDebitoImovelOuClienteHelper obterDebitoImovelOuClienteHelper = new ObterDebitoImovelOuClienteHelper();

		Collection idImoveis = null;
		Collection idImoveisAtuais = null;
		
		Integer idCliente = null;
		
		if (codigoCliente != null && !codigoCliente.trim().equals("")) {
			idCliente = new Integer(codigoCliente);
		}
		
		Integer idImovelFormatado = null;
		
		if (idImovel != null && !idImovel.trim().equals("")) {
			idImovelFormatado = new Integer(idImovel);
		}

		try {
			if (indicadorDebito == 2) { // caso cliente

				// Verifica se é pesquisa por cliente superior (o código 99 é
				// apenas um identificador)
				if (clienteRelacaoTipo != null
						&& clienteRelacaoTipo.equals(new Short("99"))) {

					clienteRelacaoTipo = null;

					idImoveis = repositorioCobranca
							.pesquisarIdImoveisClienteSuperiorSemRelacaoFim(codigoCliente);
				} else {
					idImoveis = repositorioCobranca
							.pesquisarIDImoveisClienteImovel(codigoCliente,
									clienteRelacaoTipo);
				}
				
				

			} else if (indicadorDebito == 3) {

				// Verifica se é pesquisa por cliente superior (o código 99 é
				// apenas um identificador)
				if (clienteRelacaoTipo != null
						&& clienteRelacaoTipo.equals(new Short("99"))) {

					clienteRelacaoTipo = null;

					idImoveis = repositorioCobranca
							.pesquisarIdImoveisClienteSuperiorSemRelacaoFim(codigoCliente);
				} else {
					idImoveis = repositorioCobranca
							.pesquisarIdImoveisClienteSemRelacaoFim(
									codigoCliente, clienteRelacaoTipo);
				}
			} else if (indicadorDebito == 4) {
				// Verifica se é pesquisa por cliente superior (o código 99 é
				// apenas um identificador)
				if (clienteRelacaoTipo != null
						&& clienteRelacaoTipo.equals(new Short("99"))) {

					clienteRelacaoTipo = null;

					idImoveisAtuais = repositorioCobranca
							.pesquisarIdImoveisClienteSuperiorSemRelacaoFim(codigoCliente);
				} else {
					idImoveisAtuais = repositorioCobranca
							.pesquisarIdImoveisClienteSemRelacaoFim(
									codigoCliente, clienteRelacaoTipo);
				}
				
				idImoveis = repositorioCobranca
					.pesquisarIDImoveisClienteImovel(codigoCliente,
						clienteRelacaoTipo);
			}
		} catch (ErroRepositorioException ex) {
			sessionContext.setRollbackOnly();
			throw new ControladorException("erro.sistema", ex);
		}
		if (indicadorContas == null || indicadorContas) {
			
			Collection<ContaValoresHelper> colecaoContasValores = this
					.pesquisarContasDebito(idCliente, clienteRelacaoTipo,
							idImovelFormatado, idImoveis, idImoveisAtuais,
							indicadorDebito, indicadorPagamento, indicadorConta,
							indicadorCalcularAcrescimoImpontualidade,
							anoMesInicialReferenciaDebito,
							anoMesFinalReferenciaDebito,
							anoMesInicialVencimentoDebito,
							anoMesFinalVencimentoDebito, anoMesArrecadacao, indicadorDividaAtiva);
			
			// adcionando a colecao de contas de valores
			if (colecaoContasValores != null) {
				
				Collection<ContaValoresHelper> colecaoContasValoresFinal = new ArrayList<ContaValoresHelper>();

				// Retira as contas em revisão vinculadas a um contrato parcelamento por cliente
				if(sistemaParametro.getIndicadorBloqueioContasContratoParcelDebitos().intValue() == 1){
					for (ContaValoresHelper contaValoresHelper : colecaoContasValores) {
						try {
							if(repositorioCobranca.verificaContaVinculadaAContratoParcelAtivo(contaValoresHelper.getConta().getId().intValue()) == false){
								colecaoContasValoresFinal.add(contaValoresHelper);
							}
						} catch (ErroRepositorioException e) {
							sessionContext.setRollbackOnly();
							throw new ControladorException("erro.sistema", e);
						}
					}
				} else {
					colecaoContasValoresFinal = colecaoContasValores;
				}
				
				obterDebitoImovelOuClienteHelper
						.setColecaoContasValores(colecaoContasValoresFinal);
				obterDebitoImovelOuClienteHelper
						.setColecaoContasValoresImovel(colecaoContasValoresFinal);
			}
		}// fim de if(contas != null && !contas.isEmpty()){


		// //////////////////////////////////////////////////////////////////////
		if (indicadorDividaAtiva != 1) {
			// Indicador de Debito A Cobrar
			if (indicadorDebitoACobrar == 1) {
				Collection<DebitoACobrar> debitosACobrar = this.pesquisarDebitosACobrarDebito(idImovel, idImoveis, indicadorDebito);
				
				// adcionando a colecao de débitos a cobrar
				if (debitosACobrar != null) {
					
					Collection<DebitoACobrar> colecaoDebitosACobrarFinal = new ArrayList<DebitoACobrar>();
					
					// 3.4.	E caso o indicador de bloqueio de débitos a cobrar vinculados ao contrato de parcelamento
					//  na composição do débito do imóvel ou cliente esteja ativo, Retirar da lista de 
					//  débitos a cobrar selecionadas os débitos a cobrar vinculados a algum contrato de parcelamento ativo 
					if(sistemaParametro.getIndicadorBloqueioDebitoACobrarContratoParcelDebito().intValue() == 1){
						for (DebitoACobrar debitoACobrar : debitosACobrar) {
							try {
								if(repositorioCobranca.verificaDebitoACobrarVinculadoAContratoParcelAtivo(
										debitoACobrar.getId().intValue()) == false){
									colecaoDebitosACobrarFinal.add(debitoACobrar);
								}
							} catch (ErroRepositorioException e) {
								sessionContext.setRollbackOnly();
								throw new ControladorException("erro.sistema", e);
							}
						}
					} else {
						colecaoDebitosACobrarFinal = debitosACobrar;
					}
										
					obterDebitoImovelOuClienteHelper.setColecaoDebitoACobrar(colecaoDebitosACobrarFinal);
					
				}
				
			}
	
			// Indicador de Credito a Realizar
			if (indicadorCreditoARealizar == 1) {
				Collection creditosARealizar = this.pesquisarCreditosARealizarDebito(idImovel, idImoveis, indicadorDebito);
				obterDebitoImovelOuClienteHelper.setColecaoCreditoARealizar(creditosARealizar);
			}
	
			// Indicador de Notas Promissorias
			if (indicadorNotasPromissorias == 1) {
	
				if (indicadorDebito == 1) { // caso imovel
				} else if (indicadorDebito == 2) { // caso cliente
				}
	
			}
	
			// Indicador de Guias de Pagamentos
			if (indicadorGuiasPagamento == 1) {
	
				Collection<GuiaPagamentoValoresHelper> colecaoGuiasPagamentoValores = this
				.pesquisarGuiasPagamentoDebito(idCliente, clienteRelacaoTipo,
						idImovelFormatado, idImoveis, idImoveisAtuais,
						indicadorDebito, indicadorPagamento, 
						indicadorCalcularAcrescimoImpontualidade,
						anoMesInicialVencimentoDebito,
						anoMesFinalVencimentoDebito, anoMesArrecadacao);
		
				// adcionando a colecao de guias de pagamento de valores
				if (colecaoGuiasPagamentoValores != null) {
					
					Collection<GuiaPagamentoValoresHelper> colecaoGuiasPagamentoValoresFinal = new ArrayList<GuiaPagamentoValoresHelper>();
					//Retira as contas em revisão vinculadas a um contrato parcelamento por cliente
					if(sistemaParametro.getIndicadorBloqueioGuiasOuAcresContratoParcelDebito().intValue() == 1){
						for (GuiaPagamentoValoresHelper guiaPagamentoValoresHelper : colecaoGuiasPagamentoValores) {
							try {
								if(repositorioCobranca.verificaGuiaVinculadaAContratoParcelAtivo(guiaPagamentoValoresHelper.getGuiaPagamento().getId().intValue()) == false){
									colecaoGuiasPagamentoValoresFinal.add(guiaPagamentoValoresHelper);
								}
							} catch (ErroRepositorioException e) {
								sessionContext.setRollbackOnly();
								throw new ControladorException("erro.sistema", e);
							}
						}
					} else {
						colecaoGuiasPagamentoValoresFinal = colecaoGuiasPagamentoValores;
					}
					
					obterDebitoImovelOuClienteHelper
							.setColecaoGuiasPagamentoValores(colecaoGuiasPagamentoValoresFinal);
				}
			}
		}
		
		return obterDebitoImovelOuClienteHelper;

	}
	
	/**
	 * Permite a obtenção dos débitos de um imóvel ou de um cliente
	 * 
	 * [UC0067] Obter Débito do Imóvel ou Cliente
	 * 
	 * @author Rafael Santos ,Rafael Santos, Pedro Alexandre
	 * @date 04/01/2006,22/03/2006,13/03/2007
	 * 
	 * @param idCliente
	 * @param relacaoTipo
	 * @param idImovel
	 * @param idImoveis
	 * @param idImoveisAtuais
	 * @param indicadorDebito
	 * @param indicadorPagamento
	 * @param indicadorConta
	 * @param indicadorCalcularAcrescimoImpontualidade
	 * @param anoMesInicialReferenciaDebito
	 * @param anoMesFinalReferenciaDebito
	 * @param anoMesInicialVencimentoDebito
	 * @param anoMesFinalVencimentoDebito
	 * @param anoMesArrecadacao
	 * @param indicadorDividaAtiva
	 * @return
	 * @throws ControladorException
	 */
	public Collection<ContaValoresHelper> pesquisarContasDebito(
			Integer idCliente, Short relacaoTipo, Integer idImovel,
			Collection idImoveis, Collection idImoveisAtuais,
			int indicadorDebito, int indicadorPagamento, int indicadorConta,
			int indicadorCalcularAcrescimoImpontualidade,
			String anoMesInicialReferenciaDebito,
			String anoMesFinalReferenciaDebito,
			Date anoMesInicialVencimentoDebito,
			Date anoMesFinalVencimentoDebito, String anoMesArrecadacao, int indicadorDividaAtiva)
			throws ControladorException {
		
		Collection<ContaValoresHelper> retorno = new ArrayList<ContaValoresHelper>();
		
		Collection contas = null;
		Short indicadorAcrescimosCliente = null;
		
		if (indicadorDebito == 1) {
			// contas do imovel

			try {
				contas = repositorioCobranca.pesquisarContasImovel(
						idImovel, indicadorPagamento, indicadorConta, DebitoCreditoSituacao.NORMAL.toString(),
						DebitoCreditoSituacao.RETIFICADA.toString(),
						DebitoCreditoSituacao.INCLUIDA.toString(),
						DebitoCreditoSituacao.PARCELADA.toString(),
						anoMesInicialReferenciaDebito,
						anoMesFinalReferenciaDebito,
						anoMesInicialVencimentoDebito,
						anoMesFinalVencimentoDebito, indicadorDividaAtiva);
				
				indicadorAcrescimosCliente = this.obterIndicadorAcrescimosClienteResponsavel(idImovel);
				
			} catch (ErroRepositorioException ex) {
				sessionContext.setRollbackOnly();
				throw new ControladorException("erro.sistema", ex);
			}

		} else if (indicadorDebito == 2) {
			// contas do cliente
			try {
					contas = repositorioCobranca.pesquisarContasCliente(idCliente,
						relacaoTipo, indicadorPagamento, indicadorConta,
						DebitoCreditoSituacao.NORMAL.toString(),
						DebitoCreditoSituacao.RETIFICADA.toString(),
						DebitoCreditoSituacao.INCLUIDA.toString(),
						DebitoCreditoSituacao.PARCELADA.toString(),
						anoMesInicialReferenciaDebito,
						anoMesFinalReferenciaDebito,
						anoMesInicialVencimentoDebito,
						anoMesFinalVencimentoDebito, indicadorDividaAtiva);
					
					indicadorAcrescimosCliente = this.obterIndicadorAcrescimosCliente(idCliente);
					
					
			} catch (ErroRepositorioException ex) {
				// sessionContext.setRollbackOnly();
				throw new ControladorException("erro.sistema", ex);
			}
		} else if (indicadorDebito == 3) {
			// contas do cliente responsável
			try {
				// idImoveis = repositorioCobranca
				// .pesquisarIDImoveisClienteImovel(codigoCliente,
				// clienteRelacaoTipo);

				if (idImoveis != null && !idImoveis.isEmpty()) {
					contas = repositorioCobranca.pesquisarContasImoveis(
							idImoveis, indicadorPagamento, indicadorConta,
							DebitoCreditoSituacao.NORMAL.toString(),
							DebitoCreditoSituacao.RETIFICADA.toString(),
							DebitoCreditoSituacao.INCLUIDA.toString(),
							DebitoCreditoSituacao.PARCELADA.toString(),
							anoMesInicialReferenciaDebito,
							anoMesFinalReferenciaDebito,
							anoMesInicialVencimentoDebito,
							anoMesFinalVencimentoDebito, indicadorDividaAtiva);
					
					if (idCliente != null){
						
						indicadorAcrescimosCliente = this.obterIndicadorAcrescimosCliente(idCliente);
					}
				}
			} catch (ErroRepositorioException ex) {
				sessionContext.setRollbackOnly();
				throw new ControladorException("erro.sistema", ex);
			}

		} else if (indicadorDebito == 4) {
			try {

				if (idImoveisAtuais != null && !idImoveisAtuais.isEmpty()) {
					contas = repositorioCobranca.pesquisarDebitosCliente(
							idCliente, relacaoTipo, idImoveisAtuais,
							indicadorPagamento, indicadorConta, 
							DebitoCreditoSituacao.NORMAL.toString(),
							DebitoCreditoSituacao.RETIFICADA.toString(),
							DebitoCreditoSituacao.INCLUIDA.toString(),
							DebitoCreditoSituacao.PARCELADA.toString(),
							anoMesInicialReferenciaDebito,
							anoMesFinalReferenciaDebito,
							anoMesInicialVencimentoDebito,
							anoMesFinalVencimentoDebito, indicadorDividaAtiva);
					
					indicadorAcrescimosCliente = this.obterIndicadorAcrescimosCliente(idCliente);
				}
			} catch (ErroRepositorioException ex) {
				sessionContext.setRollbackOnly();
				throw new ControladorException("erro.sistema", ex);
			}

		}
		
		if (contas != null && !contas.isEmpty()) {

			Iterator icolecaoContas = contas.iterator();
			Collection colecaoIdImoveisContas = new HashSet();
			boolean temContaParcelada = false;
			boolean verificaParcelamentoConfirmado = false;

			// dados da conta
			while (icolecaoContas.hasNext()) {

				Conta conta = new Conta();
				ContaValoresHelper contaValores = new ContaValoresHelper();
				temContaParcelada = false;

				Object[] dadosConta = (Object[]) icolecaoContas.next();

				if (dadosConta[0] != null) {// 0
					// Id de contas
					conta.setId(new Integer(dadosConta[0].toString()));
				}

				if (dadosConta[1] != null) {// 1
					// Valor Agua
					conta.setValorAgua((BigDecimal) dadosConta[1]);
				}

				if (dadosConta[2] != null) {// 2
					// Valor Esgoto
					conta.setValorEsgoto((BigDecimal) dadosConta[2]);
				}

				if (dadosConta[3] != null) {// 3
					// Valor Debitos
					conta.setDebitos((BigDecimal) dadosConta[3]);
				}

				if (dadosConta[4] != null) {// 4
					// Valor Creditos
					conta.setValorCreditos((BigDecimal) dadosConta[4]);
				} else {
					conta.setValorCreditos(new BigDecimal("0.00"));
				}

				if (dadosConta[5] != null) {// 5
					// Data Revisao
					conta.setDataRevisao((Date) dadosConta[5]);
				}

				if (dadosConta[6] != null) {// 6
					// Referencia
					conta.setReferencia(((Integer) dadosConta[6]).intValue());
				}

				if (dadosConta[7] != null) {// 7
					// Data Vencimento Conta
					conta.setDataVencimentoConta((Date) dadosConta[7]);
				}

				if (dadosConta[8] != null) {// 8
					// Indicador de Cobranca de Multa
					conta.setIndicadorCobrancaMulta(((Short) dadosConta[8]).shortValue());
				}

				if (dadosConta[9] != null) {// 9
					Integer idDebitoCreditoSituacaoAtual = (Integer) dadosConta[9];

					FiltroDebitoCreditoSituacao filtroDebitoCreditoSituacao = new FiltroDebitoCreditoSituacao();
					filtroDebitoCreditoSituacao
							.adicionarParametro(new ParametroSimples(
									FiltroDebitoCreditoSituacao.ID,
									idDebitoCreditoSituacaoAtual));

					Collection<DebitoCreditoSituacao> colecaoDebitoCreditoSituacao = this
							.getControladorUtil().pesquisar(
									filtroDebitoCreditoSituacao,
									DebitoCreditoSituacao.class.getName());

					if (colecaoDebitoCreditoSituacao != null
							&& !colecaoDebitoCreditoSituacao.isEmpty()) {

						DebitoCreditoSituacao debitoCreditoSituacao = (DebitoCreditoSituacao) Util
								.retonarObjetoDeColecao(colecaoDebitoCreditoSituacao);
						conta.setDebitoCreditoSituacaoAtual(debitoCreditoSituacao);

						if (debitoCreditoSituacao.getId().intValue() == DebitoCreditoSituacao.PARCELADA
								.intValue()) {
							temContaParcelada = true;
							verificaParcelamentoConfirmado = true;
						}

					}
				}

				if (dadosConta[10] != null) {// 10
					// Digito Verificador
					conta.setDigitoVerificadorConta(((Short) dadosConta[10])
							.shortValue());
				}

				if (dadosConta[11] != null) {// 11
					// Conta Motivo Revisao
					ContaMotivoRevisao contaMotivoRevisao = new ContaMotivoRevisao();
					contaMotivoRevisao.setId((Integer) dadosConta[11]);
					conta.setContaMotivoRevisao(contaMotivoRevisao);
				} else {
					conta.setContaMotivoRevisao(null);
				}

				if (dadosConta[12] != null) {// 12
					// Última Alteração
					conta.setUltimaAlteracao((Date) dadosConta[12]);
				}

				if (dadosConta[13] != null) {// 13
					// Imovel
					Imovel imovel = new Imovel();
					imovel.setId((Integer) dadosConta[13]);
					conta.setImovel(imovel);
				}

				if (dadosConta[14] != null) {
					conta.setConsumoAgua((Integer) dadosConta[14]);
				}

				if (dadosConta[15] != null) {// 15
					// Valor impostos
					conta.setValorImposto((BigDecimal) (dadosConta[15]));
				} else {
					conta.setValorImposto(new BigDecimal("0.00"));
				}

				if (dadosConta[16] != null) {
					conta.setConsumoEsgoto((Integer) dadosConta[16]);
				}
				
				//adicionado por Vivianne Sousa - 21/06/2010
				//Parcelamento
				if (dadosConta[19] != null) {
					Parcelamento parcelamento = new Parcelamento();
					parcelamento.setId((Integer) dadosConta[19]);
					conta.setParcelamento(parcelamento);
				}
				
				contaValores.setConta(conta);
				
				Date dataPagamento = null;
				
				if (dadosConta[17] != null) {
					BigDecimal valor = (BigDecimal) dadosConta[17];
					if (valor.floatValue() != 0.0){
						contaValores.setValorPago(valor);	
					}					
				}
				
				if (dadosConta[18] != null) {
					dataPagamento = (Date) dadosConta[18];
				}
				
				
				boolean indicadorCobrancaAcrescimos = true;
				
				/**
				 * Colocado por Raphael Rossiter em 19/09/2011
				 * Analista: Eduardo Borges
				 * 
				 * Caso a principal categoria do imóvel esteja
				 * indicando que somente deve ser gerado acréscimos por
				 * impontualidade para a categoria
				 * (catg_icgeracaoacrescimos=NAO) da principal categoria do
				 * imóvel, passa para o próximo imóvel.
				 */
				Categoria categoriaPrincipal = this.getControladorImovel().obterPrincipalCategoriaImovel(conta.getImovel().getId());
				
				if (categoriaPrincipal.getIndicadorCobrancaAcrescimos().equals(ConstantesSistema.NAO)) {
					
					indicadorCobrancaAcrescimos = false;
				}
				
				/**
				 * Colocado por Raphael Rossiter em 19/09/2011
				 * Analista: Eduardo Borges
				 * 
				 * Caso esteja indicado que não de ve ser gerado
				 * acrécimos por impontualidade para o cliente
				 * (CLIE_ICCOBRANCAACRESCIMOS=NAO) , passar para o próximo
				 * imóvel
				 */
				Short indicadorAcrescimosClienteResponsavel = null;
				
				if (indicadorAcrescimosCliente == null){
					
					indicadorAcrescimosClienteResponsavel = this.obterIndicadorAcrescimosClienteResponsavel(conta.getImovel().getId());
				}
				else{
					
					indicadorAcrescimosClienteResponsavel = indicadorAcrescimosCliente; 
				}
				
				if (indicadorAcrescimosClienteResponsavel != null && 
					indicadorAcrescimosClienteResponsavel.equals(ConstantesSistema.NAO)) {
					
					indicadorCobrancaAcrescimos = false;
				}
				
				// Calcular o Acrescimo por Impontualidade
				if (indicadorCalcularAcrescimoImpontualidade == 1 && indicadorCobrancaAcrescimos) {

					/** alteração por pedro alexandre dia 21/05/2007 */
					BigDecimal valorConta = conta.getValorTotal();
					
					// Calcula o valor das multas cobradas para a conta
					BigDecimal valorMultasCobradas = null;
					valorMultasCobradas = getControladorFaturamento()
							.pesquisarValorMultasCobradas(conta.getId());

					CalcularAcrescimoPorImpontualidadeHelper calcularAcrescimoPorImpontualidade = null;

					calcularAcrescimoPorImpontualidade = this
							.calcularAcrescimoPorImpontualidade(conta
									.getReferencia(), conta
									.getDataVencimentoConta(), dataPagamento,
									valorConta, valorMultasCobradas, conta
											.getIndicadorCobrancaMulta(),
									anoMesArrecadacao, conta.getId(), 
									ConstantesSistema.INDICADOR_ARRECADACAO_DESATIVO);

					// set os Valores
					if (calcularAcrescimoPorImpontualidade != null) {

						// seta valor de multa
						contaValores
								.setValorMulta(calcularAcrescimoPorImpontualidade
										.getValorMulta());

						// seta valor de juros mora
						contaValores
								.setValorJurosMora(calcularAcrescimoPorImpontualidade
										.getValorJurosMora());

						// seta valor de atualizacao monetaria
						contaValores
								.setValorAtualizacaoMonetaria(calcularAcrescimoPorImpontualidade
										.getValorAtualizacaoMonetaria());

					}
				}


				if (temContaParcelada) {

					if (indicadorDebito == 2) {
						colecaoIdImoveisContas.add(conta.getImovel()
								.getId());
					}
				}

				retorno.add(contaValores);

			}// fim do loop
			
			// Caso na lista de contas existam contas com situação atual
			// correspondente a parcelada,
			// o sitema verifica se o parcelamento está confirmado
			if (verificaParcelamentoConfirmado) {

				// Caso tenha sido recebido o cliente,sistema obtém os imóveis da
				// lista das contas que possuem
				// conta com a situacao atual com o valor correspondente a parcelada

				// Caso contrário,considerar apenas o imóvel recebido
				if (indicadorDebito == 1) {

					colecaoIdImoveisContas = new HashSet();
					colecaoIdImoveisContas.add(new Integer(idImovel));
				}

				retorno = this.verificarParcelamentoConfirmado(
						colecaoIdImoveisContas, retorno);
			}

		}
		
		return retorno;
	}
	
	private Collection pesquisarDebitosACobrarDebito(String idImovel, Collection idImoveis, int indicadorDebito) throws ControladorException {

		Collection retorno = null;
		
		Collection colecaoDadosDebitosACobrar = null;
		
		// caso imovel
		if (indicadorDebito == 1) {
			try {

				colecaoDadosDebitosACobrar = repositorioCobranca
						.pesquisarDebitosACobrarImovel(idImovel,
								DebitoCreditoSituacao.NORMAL.toString());

			} catch (ErroRepositorioException ex) {
				sessionContext.setRollbackOnly();
				throw new ControladorException("erro.sistema", ex);
			}
			// caso cliente
		} else if (indicadorDebito == 2 || indicadorDebito == 3
				|| indicadorDebito == 4) {
			try {
				// idImoveis = repositorioCobranca
				// .pesquisarIDImoveisClienteImovel(codigoCliente,clienteRelacaoTipo);

				if (idImoveis != null && !idImoveis.isEmpty()) {
					colecaoDadosDebitosACobrar = repositorioCobranca
							.pesquisarDebitosACobrarCliente(idImoveis,
									DebitoCreditoSituacao.NORMAL.toString());
				}
			} catch (ErroRepositorioException ex) {
				sessionContext.setRollbackOnly();
				throw new ControladorException("erro.sistema", ex);
			}

		}

	
		// adicionar os debitos a cobrar
		if (colecaoDadosDebitosACobrar != null) {
	
			retorno = new ArrayList();
	
			if (colecaoDadosDebitosACobrar != null
					&& !colecaoDadosDebitosACobrar.isEmpty()) {
	
				Iterator iteratorColecaoDadosDebitosACobrar = colecaoDadosDebitosACobrar
						.iterator();
	
				while (iteratorColecaoDadosDebitosACobrar.hasNext()) {
	
					Object[] dadosDebitoACobrar = (Object[]) iteratorColecaoDadosDebitosACobrar
							.next();
	
					DebitoACobrar debitoACobrar = null;
	
					if (dadosDebitoACobrar[0] != null) {
						debitoACobrar = (DebitoACobrar) dadosDebitoACobrar[0];
					}
	
					if (dadosDebitoACobrar[2] != null) {
						DebitoTipo debitoTipo = new DebitoTipo();
						debitoTipo
								.setDescricao((String) dadosDebitoACobrar[1]);
						debitoTipo
								.setId((Integer) dadosDebitoACobrar[2]);
						debitoACobrar.setDebitoTipo(debitoTipo);
					}
	
					retorno.add(debitoACobrar);
				}
			}
		}
		return retorno;
	}
	
	private Collection pesquisarCreditosARealizarDebito(String idImovel, Collection idImoveis, int indicadorDebito) throws ControladorException {

		Collection retorno = null;
		
		Collection colecaoDadosCreditosARealizar = null;
		
		// caso imovel
		if (indicadorDebito == 1) {
			try {
				colecaoDadosCreditosARealizar = repositorioCobranca
						.pesquisarCreditosARealizarImovel(idImovel,
								DebitoCreditoSituacao.NORMAL.toString());
			} catch (ErroRepositorioException ex) {
				sessionContext.setRollbackOnly();
				throw new ControladorException("erro.sistema", ex);
			}

			// caso cliente
		} else if (indicadorDebito == 2 || indicadorDebito == 3
				|| indicadorDebito == 4) {
			try {

				// idImoveis = repositorioCobranca
				// .pesquisarIDImoveisClienteImovel(codigoCliente,clienteRelacaoTipo);

				if (idImoveis != null && !idImoveis.isEmpty()) {
					colecaoDadosCreditosARealizar = repositorioCobranca
							.pesquisarCreditosARealizarCliente(idImoveis,
									DebitoCreditoSituacao.NORMAL.toString());
				}
			} catch (ErroRepositorioException ex) {
				sessionContext.setRollbackOnly();
				throw new ControladorException("erro.sistema", ex);
			}
		}

		// Adciona os credtios a reliazar
		if (colecaoDadosCreditosARealizar != null) {
	
			retorno = new ArrayList();
	
			if (colecaoDadosCreditosARealizar != null
					&& !colecaoDadosCreditosARealizar.isEmpty()) {
	
				Iterator iteratorColecaoDadosCreditosARealizar = colecaoDadosCreditosARealizar
						.iterator();
	
				while (iteratorColecaoDadosCreditosARealizar.hasNext()) {
	
					Object[] dadosCreditoARealizar = (Object[]) iteratorColecaoDadosCreditosARealizar
							.next();
	
					CreditoARealizar creditoARealizar = null;
	
					if (dadosCreditoARealizar[0] != null) {
						creditoARealizar = (CreditoARealizar) dadosCreditoARealizar[0];
					}
	
					if (dadosCreditoARealizar[1] != null) {
						CreditoTipo creditoTipo = new CreditoTipo();
						creditoTipo
								.setId((Integer) dadosCreditoARealizar[2]);
						creditoTipo
								.setDescricao((String) dadosCreditoARealizar[1]);
						creditoARealizar.setCreditoTipo(creditoTipo);
	
					}
	
					/*
					 * Colocado por Raphael Rossiter em 07/11/2007 - Analista:
					 * Aryed e Rosana OBJ: Retornar os créditos que não sejam de
					 * devolução.
					 */
					try {
	
						if (!repositorioCobranca
								.existeDevolucao(creditoARealizar)) {
							retorno.add(creditoARealizar);
						}
	
					} catch (ErroRepositorioException ex) {
						sessionContext.setRollbackOnly();
						throw new ControladorException("erro.sistema", ex);
					}
				}
	
			}
		}
		return retorno;
	}
	
	private Collection<GuiaPagamentoValoresHelper> pesquisarGuiasPagamentoDebito(
			Integer idCliente, Short relacaoTipo, Integer idImovel,
			Collection idImoveis, Collection idImoveisAtuais,
			int indicadorDebito, int indicadorPagamento,
			int indicadorCalcularAcrescimoImpontualidade,
			Date anoMesInicialVencimentoDebito,
			Date anoMesFinalVencimentoDebito, String anoMesArrecadacao)
			throws ControladorException {
		
		Collection<GuiaPagamentoValoresHelper> retorno = new ArrayList<GuiaPagamentoValoresHelper>();
		
		Collection guiasPagamentos = null;
		
		if (indicadorDebito == 1) {

			try {
				guiasPagamentos = repositorioCobranca
						.pesquisarGuiasPagamentoImovel(idImovel, indicadorPagamento,
								DebitoCreditoSituacao.NORMAL.toString(),
								anoMesInicialVencimentoDebito,
								anoMesFinalVencimentoDebito);
			} catch (ErroRepositorioException ex) {
				sessionContext.setRollbackOnly();
				throw new ControladorException("erro.sistema", ex);
			}

		} else if (indicadorDebito == 2) {

			try {
				guiasPagamentos = repositorioCobranca
						.pesquisarGuiasPagamentoCliente(idCliente, indicadorPagamento,
								DebitoCreditoSituacao.NORMAL.toString(),
								relacaoTipo,
								anoMesInicialVencimentoDebito,
								anoMesFinalVencimentoDebito);
			} catch (ErroRepositorioException ex) {
				sessionContext.setRollbackOnly();
				throw new ControladorException("erro.sistema", ex);
			}
		} else if (indicadorDebito == 3) {
			try {
				guiasPagamentos = repositorioCobranca
							.pesquisarGuiasPagamentoIdsImoveis(idCliente,
									idImoveis, indicadorPagamento,
									DebitoCreditoSituacao.NORMAL.toString(),
									anoMesInicialVencimentoDebito,
									anoMesFinalVencimentoDebito);
			} catch (ErroRepositorioException ex) {
				sessionContext.setRollbackOnly();
				throw new ControladorException("erro.sistema", ex);
			}
		} else if (indicadorDebito == 4) {
			try {
				guiasPagamentos = repositorioCobranca
									.pesquisarGuiasPagamentoIdsImoveis(idCliente,
											idImoveisAtuais, indicadorPagamento,
											DebitoCreditoSituacao.NORMAL.toString(),
											relacaoTipo,
											anoMesInicialVencimentoDebito,
											anoMesFinalVencimentoDebito);
			} catch (ErroRepositorioException ex) {
				sessionContext.setRollbackOnly();
				throw new ControladorException("erro.sistema", ex);
			}
		}
		
		if (guiasPagamentos != null && !guiasPagamentos.isEmpty()) {

			Iterator icolecaoGuiasPagamentos = guiasPagamentos.iterator();

			// dados da conta
			while (icolecaoGuiasPagamentos.hasNext()) {

				GuiaPagamento guiaPagamento = new GuiaPagamento();
				GuiaPagamentoValoresHelper guiaPagamentoValores = new GuiaPagamentoValoresHelper();

				Object[] dadosGuiaPagamento = (Object[]) icolecaoGuiasPagamentos.next();

				// Id da Guia de Pagamento
				// 0
				if (dadosGuiaPagamento[0] != null) {
					guiaPagamento.setId((Integer) dadosGuiaPagamento[0]);
				}

				// Valor de Debito
				// 1
				if (dadosGuiaPagamento[1] != null) {
					guiaPagamento
							.setValorDebito((BigDecimal) dadosGuiaPagamento[1]);
				}

				// Ano Mes Referencia Contabil
				// 2
				if (dadosGuiaPagamento[2] != null) {
					guiaPagamento
							.setAnoMesReferenciaContabil((Integer) dadosGuiaPagamento[2]);
				}

				// Data Vencimento
				// 3
				if (dadosGuiaPagamento[3] != null) {
					guiaPagamento
							.setDataVencimento((Date) dadosGuiaPagamento[3]);
				}

				// Indicador Cobranca Multa
				// 4
				if (dadosGuiaPagamento[4] != null) {
					guiaPagamento
							.setIndicadoCobrancaMulta((Short) dadosGuiaPagamento[4]);
				}

				// Descricao de Debito Tipo
				// 5
				if (dadosGuiaPagamento[5] != null) {
					DebitoTipo debitoTipo = new DebitoTipo();
					debitoTipo.setId((Integer) dadosGuiaPagamento[7]);
					debitoTipo.setDescricao((String) dadosGuiaPagamento[5]);
					guiaPagamento.setDebitoTipo(debitoTipo);
				}
				// Data Emissão
				// 6
				if (dadosGuiaPagamento[6] != null) {
					guiaPagamento.setDataEmissao((Date) dadosGuiaPagamento[6]);
				}

				// Numero de Prestação do Débto
				// 8
				if (dadosGuiaPagamento[8] != null) {
					guiaPagamento
							.setNumeroPrestacaoDebito((Short) dadosGuiaPagamento[8]);
				}

				// Numero de Prestação Total
				// 9
				if (dadosGuiaPagamento[9] != null) {
					guiaPagamento
							.setNumeroPrestacaoTotal((Short) dadosGuiaPagamento[9]);
				}
				
				guiaPagamentoValores.setGuiaPagamento(guiaPagamento);

				Date dataPagamento = null;
				
				if (dadosGuiaPagamento[10] != null) {
					guiaPagamentoValores.setValorPago((BigDecimal) dadosGuiaPagamento[10]);
				}
				
				if (dadosGuiaPagamento[11] != null) {
					dataPagamento = (Date) dadosGuiaPagamento[11];
				}
				
				// calcular acrescimo por impontualidade
				if (indicadorCalcularAcrescimoImpontualidade == 1) {

					CalcularAcrescimoPorImpontualidadeHelper calcularAcrescimoPorImpontualidade = null;

					calcularAcrescimoPorImpontualidade = this
							.calcularAcrescimoPorImpontualidade(guiaPagamento
									.getAnoMesReferenciaContabil(),
									guiaPagamento.getDataVencimento(),
									dataPagamento, guiaPagamento
											.getValorDebito(), BigDecimal.ZERO,
									guiaPagamento.getIndicadoCobrancaMulta()
											.shortValue(), anoMesArrecadacao,
									null,
									ConstantesSistema.INDICADOR_ARRECADACAO_DESATIVO);

					// set os Valores
					if (calcularAcrescimoPorImpontualidade != null) {

						// seta valor de multa
						guiaPagamentoValores
								.setValorMulta(calcularAcrescimoPorImpontualidade
										.getValorMulta());

						// seta valor de juros mora
						guiaPagamentoValores
								.setValorJurosMora(calcularAcrescimoPorImpontualidade
										.getValorJurosMora());

						// seta valor de atualizacao monetaria
						guiaPagamentoValores
								.setValorAtualizacaoMonetaria(calcularAcrescimoPorImpontualidade
										.getValorAtualizacaoMonetaria());

					}
				}

				retorno.add(guiaPagamentoValores);

			}// fim do loop
			
		}
		
		return retorno;
	}

	/**
	 * [UC0067] Obter Débito do Imóvel ou Cliente
	 * 
	 * [SB0001] - Verificar parcelamento confirmado
	 * 
	 * Author: Rafael Pinto
	 * 
	 * @param colecaoImoveis
	 *            Coleção de Imoveis
	 * 
	 * @return estahConfirmado Parcelamento esta confirmado
	 * @throws ControladorException
	 * 
	 * @exception ControladorException
	 */
	protected Collection verificarParcelamentoConfirmado(
			Collection colecaoImoveis, Collection colecaoContasValores)
			throws ControladorException {

		boolean estahConfirmado = false;

		if (colecaoImoveis != null && !colecaoImoveis.isEmpty()) {

			Iterator itera = colecaoImoveis.iterator();

			// Retorna o único objeto da tabela sistemaParametro
			SistemaParametro sistemaParametro = this.getControladorUtil()
					.pesquisarParametrosDoSistema();

			// Para cada imovel obtido,o sistema:
			while (itera.hasNext()) {

				Integer idImovel = (Integer) itera.next();

				// Seleciona o parcelamento ativo para o imóvel
				FiltroParcelamento filtroParcelamento = new FiltroParcelamento();

				filtroParcelamento.adicionarParametro(new ParametroSimples(
						FiltroParcelamento.IMOVEL_ID, idImovel));

				filtroParcelamento.adicionarParametro(new ParametroSimples(
						FiltroParcelamento.PARCELAMENTO_SITUACAO,
						ParcelamentoSituacao.NORMAL));

				filtroParcelamento.adicionarParametro(new ParametroSimples(
						FiltroParcelamento.ANO_MES_REFERENCIA_FATURAMENTO,
						sistemaParametro.getAnoMesArrecadacao()));

				Collection<Parcelamento> colecaoParcelamento = this
						.getControladorUtil().pesquisar(filtroParcelamento,
								Parcelamento.class.getName());

				if (colecaoParcelamento != null
						&& !colecaoParcelamento.isEmpty()) {

					Parcelamento parcelamento = (Parcelamento) Util
							.retonarObjetoDeColecao(colecaoParcelamento);

					// Caso o parcelamento tenha sido efetuado sem entrada,
					// indicar que o parcelamento está confirmado
					if (parcelamento.getValorEntrada() == null
							|| parcelamento.getValorEntrada().equals(
									BigDecimal.ZERO)
							|| parcelamento
									.getIndicadorConfirmacaoParcelamento()
									.shortValue() == ConstantesSistema.SIM
									.shortValue()) {

						estahConfirmado = true;

						// Caso contrario,o sistema verifica se a entrada de
						// parcelamento ainda está pendente
					} else {

						FiltroGuiaPagamento filtroGuiaPagamento = new FiltroGuiaPagamento();

						filtroGuiaPagamento
								.adicionarParametro(new ParametroSimples(
										FiltroGuiaPagamento.PARCELAMENTO_ID,
										parcelamento.getId()));

						Collection<GuiaPagamento> colecaoGuiaPagamento = this
								.getControladorUtil().pesquisar(
										filtroGuiaPagamento,
										GuiaPagamento.class.getName());

						// Caso exista a guia de pagamento referente a entrada
						// do parcelamento
						if (colecaoGuiaPagamento != null
								&& !colecaoGuiaPagamento.isEmpty()) {

							GuiaPagamento guiaPagamento = (GuiaPagamento) Util
									.retonarObjetoDeColecao(colecaoGuiaPagamento);

							FiltroPagamento filtroPagamento = new FiltroPagamento();

							filtroPagamento
									.adicionarParametro(new ParametroSimples(
											FiltroPagamento.GUIA_PAGAMENTO_ID,
											guiaPagamento.getId()));

							Collection<Pagamento> colecaoPagamento = this
									.getControladorUtil().pesquisar(
											filtroPagamento,
											Pagamento.class.getName());

							// Caso exista pagamento para a guia de pagamento
							// indicar
							// que o parcelamento esta confirmado
							if (colecaoPagamento != null
									&& !colecaoPagamento.isEmpty()) {
								estahConfirmado = true;
							} else {
								estahConfirmado = false;
							}

							// Caso contrario,e caso exista uma ou mais contas
							// referente a entrada
							// do parcelamento
						} else {

							FiltroConta filtroConta = new FiltroConta();

							filtroConta
									.adicionarParametro(new ParametroSimples(
											FiltroConta.PARCELAMENTO_ID,
											parcelamento.getId()));

							// filtroConta
							// .adicionarCaminhoParaCarregamentoEntidade("cobrancaForma");

							Collection<Conta> colecaoConta = this
									.getControladorUtil().pesquisar(
											filtroConta, Conta.class.getName());

							if (colecaoConta != null && !colecaoConta.isEmpty()) {

								Iterator iteraConta = colecaoConta.iterator();

								int quantidadeContasComPagamento = 0;

								while (iteraConta.hasNext()) {

									Conta conta = (Conta) iteraConta.next();

									FiltroPagamento filtroPagamento = new FiltroPagamento();

									filtroPagamento
											.adicionarParametro(new ParametroSimples(
													FiltroPagamento.CONTA_ID,
													conta.getId()));

									Collection<Pagamento> colecaoPagamento = this
											.getControladorUtil().pesquisar(
													filtroPagamento,
													Pagamento.class.getName());

									if (colecaoPagamento != null
											&& !colecaoPagamento.isEmpty()) {
										quantidadeContasComPagamento++;
									}
								}

								// Caso existam pagamentos para todos as contas
								// referentes a entrada do parcelamento
								// indicar que o parcelamento estah confirmado
								if (quantidadeContasComPagamento == colecaoConta
										.size()) {
									estahConfirmado = true;
								} else {
									estahConfirmado = false;
								}

								// [FS0002} - Verificar exitencia de guia de
								// pagamento ou conta associada ao parcelamento
								// com entrada indicar que o parcelamento estah
								// confirmado
							} else {
								estahConfirmado = true;
							}
						}
					}

					// Caso não exista parcelamento ativo para o imóvel
					// indicar que o parcelamento está confirmado
				} else {
					estahConfirmado = true;
				}

				// Caso esteja indicado que o parcelamento para o imóvel esta
				// confirmado
				// o sistema retira da lista de contas,as contas do imóvel com
				// situação correpondente a
				// parcelada
				if (estahConfirmado) {

					if (colecaoContasValores != null
							&& !colecaoContasValores.isEmpty()) {

						Iterator iteraConta = colecaoContasValores.iterator();

						while (iteraConta.hasNext()) {

							ContaValoresHelper contaValoresHelper = (ContaValoresHelper) iteraConta
									.next();

							Conta conta = contaValoresHelper.getConta();

							if (conta.getImovel().getId().intValue() == idImovel
									.intValue()) {

								DebitoCreditoSituacao debito = conta
										.getDebitoCreditoSituacaoAtual();

								if (debito.getId().intValue() == DebitoCreditoSituacao.PARCELADA
										.intValue()) {
									iteraConta.remove();
								}

							}
						}
					}
				}
			}// fim do while de imoveis
		}

		return colecaoContasValores;
	}

	/**
	 * [UC0216] Calcular Acrescimo por Impontualidade 
	 * 
	 * @Author: Rafael Santos, Raphael Rossiter, Pedro Alexandre, Raphael Rossiter
	 * @date 22/03/2006, 12/02/2008, 21/05/2008 
	 * 
	 * Calcula os acrescimmos por Impontualidade(multa,juros de mora e atualização monetaria)
	 * 
	 * @param anoMesReferenciaDebito
	 * @param dataVencimento
	 * @param dataPagamento
	 * @param valorDebito
	 * @param indicadorMulta
	 * @param anoMesArrecadacao
	 * @param idConta
	 * 
	 * @return CalcularAcrescimoPorImpontualidadeHelper
	 * @throws ControladorException
	 */
	public CalcularAcrescimoPorImpontualidadeHelper calcularAcrescimoPorImpontualidade(
			int anoMesReferenciaDebito, 
			Date dataVencimento,
			Date dataPagamento, 
			BigDecimal valorDebito,
			BigDecimal valorMultasCobradas, 
			short indicadorMulta,
			String anoMesArrecadacao, 
			Integer idConta, 
			Short indicadorArrecadacao)
			throws ControladorException {

		CalcularAcrescimoPorImpontualidadeHelper calcularAcrescimoPorImpontualidade = new CalcularAcrescimoPorImpontualidadeHelper();
		
		BigDecimal valorMulta = BigDecimal.ZERO;
		BigDecimal valorJurosMora = BigDecimal.ZERO;
		BigDecimal valorAtualizacao = BigDecimal.ZERO;

		boolean calcular = true;
		
		/*
		 * Caso a conta venha nula retorna os valores de multa, juros de mora e atualizacao iguais a zero
		 * Analista: Aryed Lins - 19/02/2008
		 */ 
		if (idConta != null){
		
			SistemaParametro sistemaParametros = getControladorUtil().pesquisarParametrosDoSistema();
			
			//PESQUISANDO OS DADOS DO IMÓVEL QUE ESTÁ RELACIONADO A CONTA INFORMADA
			Object[] parmsConta = null;
			try {
				
				parmsConta = repositorioFaturamento.pesquisarContaParaAcrescimoPorImpontualidade(idConta);
							
				if (parmsConta != null){
					
					Integer idMunicipio = (Integer) parmsConta[1];
					
					Municipio municipio = new Municipio();
					municipio.setId(idMunicipio);
					
					/*
					 * Caso o imóvel tenha débito automático e o recebimento, mesmo em atraso, tenha sido através
					 * de débito automático, o sistema não calcula os acréscimos de impontualidade
					 * 
					 * (ARMV_DSIDENTIFICACAOSERVICO da tabela ARRECADADOR_MOVIMENTO com valor igual a "DEBITO 
					 * AUTOMATICO" com ARMV_ID = ARMV_ID da tabela ARRECADADOR_MOVIMENTO_ITEM com AMIT_ID = 
					 * AMIT_ID da tabela PAGAMENTO com CNTA_ID = CNTA_ID recebido)
					 */
					Integer pagamentoPorDebitoAutomatico = null;
					
					try {

						pagamentoPorDebitoAutomatico = this.repositorioCobranca
						.pesquisarPagamentoDeContaPorDebitoAutomatico(idConta);

					} catch (ErroRepositorioException ex) {
						sessionContext.setRollbackOnly();
						throw new ControladorException("erro.sistema", ex);
					}
					
					if (pagamentoPorDebitoAutomatico != null && 
						pagamentoPorDebitoAutomatico.intValue() > 0){
						
						calcular = false;
					}
					else{
						
						/*
						 * Caso a data de pagamento não seja nula, passar a data de pagamento, caso contrário,
						 * passar a data corrente menos a quantidade mínima de dias para início da cobrança da conta
						 * parm_nndiasvenctocobranca.
						 */
						if (dataPagamento == null){
							dataPagamento = new Date();
							
							Util.subtrairNumeroDiasDeUmaData(dataPagamento, 
							sistemaParametros.getNumeroDiasVencimentoCobranca());
						}
						
						//[UC0747] - Calcular diferença de dias úteis entre duas datas
						Integer qtdDiasUteis = getControladorUtil().calcularDiferencaDiasUteisEntreDuasDatas(dataVencimento,dataPagamento, municipio);
						
						/*
						 * Caso a diferença retornada seja igual ou menor que o valor da coluna parm_nndiascalculoacrescimos
						 * da tabela SISTEMA_PARAMETROS não calcular acréscimos
						 */
						if (qtdDiasUteis.intValue() <= sistemaParametros.getNumeroDiasCalculoAcrescimos()){
							
							calcular = false;
						}
					}
					
				}
				else{
					calcular = false;
				}
				
				
				if (calcular) {
					
					BigDecimal indiceMulta = null;
					BigDecimal indiceJurosMora = null;
					BigDecimal fatorAtualizacaMonetaria = null;
					
					Short indicadorMultaMensal = null;
					BigDecimal percentualLimiteMulta = null;
					
					Short indicadorJurosMensal = null;
					BigDecimal percentualLimiteJuros = null;
	
					IndicesAcrescimosImpontualidade indicesAcrescimosImpontualidade = null;
					
					Integer mesAnoDataReferenciaConta = Util.recuperaAnoMesDaData(dataVencimento);
					
					indicesAcrescimosImpontualidade = repositorioCobranca.pesquisarIndiceAcrescimoImpontualidade(mesAnoDataReferenciaConta);

					if (indicesAcrescimosImpontualidade != null) {
						indiceMulta = indicesAcrescimosImpontualidade.getPercentualMulta();
						indiceJurosMora = indicesAcrescimosImpontualidade.getPercentualJurosMora();
						fatorAtualizacaMonetaria = indicesAcrescimosImpontualidade.getFatorAtualizacaoMonetaria();
					
						indicadorMultaMensal = indicesAcrescimosImpontualidade.getIndicadorMultaMensal();
						percentualLimiteMulta = indicesAcrescimosImpontualidade.getPercentualLimiteMulta();
						
						indicadorJurosMensal = indicesAcrescimosImpontualidade.getIndicadorJurosMensal();
						percentualLimiteJuros = indicesAcrescimosImpontualidade.getPercentualLimiteJuros();
					}
	

					// [FS001] - Verificar Existencia dos Indices para Acrescimos por Impontualidade
					if (indicesAcrescimosImpontualidade == null) {
						
						indicesAcrescimosImpontualidade = repositorioCobranca.pesquisarMenorIndiceAcrescimoImpontualidade(anoMesReferenciaDebito);

						if (indicesAcrescimosImpontualidade != null) {
							indiceMulta = indicesAcrescimosImpontualidade.getPercentualMulta();
							indiceJurosMora = indicesAcrescimosImpontualidade.getPercentualJurosMora();
							fatorAtualizacaMonetaria = indicesAcrescimosImpontualidade.getFatorAtualizacaoMonetaria();
							
							indicadorMultaMensal = indicesAcrescimosImpontualidade.getIndicadorMultaMensal();
							percentualLimiteMulta = indicesAcrescimosImpontualidade.getPercentualLimiteMulta();
							
							indicadorJurosMensal = indicesAcrescimosImpontualidade.getIndicadorJurosMensal();
							percentualLimiteJuros = indicesAcrescimosImpontualidade.getPercentualLimiteJuros();
						}
	
					}
	
					/*
					 * Colocado por Raphael Rossiter em 04/10/2007 
					 * [FS001] - Verificar Existencia dos Indices para Acrescimos por Impontualidade
					 */
					if (indicesAcrescimosImpontualidade == null) {
						
						indicesAcrescimosImpontualidade = repositorioCobranca.pesquisarMenorIndiceAcrescimoImpontualidade();

						if (indicesAcrescimosImpontualidade != null) {
							indiceMulta = indicesAcrescimosImpontualidade.getPercentualMulta();
							indiceJurosMora = indicesAcrescimosImpontualidade.getPercentualJurosMora();
							fatorAtualizacaMonetaria = indicesAcrescimosImpontualidade.getFatorAtualizacaoMonetaria();
							
							indicadorMultaMensal = indicesAcrescimosImpontualidade.getIndicadorMultaMensal();
							percentualLimiteMulta = indicesAcrescimosImpontualidade.getPercentualLimiteMulta();
							
							indicadorJurosMensal = indicesAcrescimosImpontualidade.getIndicadorJurosMensal();
							percentualLimiteJuros = indicesAcrescimosImpontualidade.getPercentualLimiteJuros();
						}
	
					}
	
					if (indicesAcrescimosImpontualidade == null) {
						indiceMulta = new BigDecimal(0);
						indiceJurosMora = new BigDecimal(0);
						fatorAtualizacaMonetaria = new BigDecimal(0);
						
						indicadorMultaMensal = ConstantesSistema.SIM;
						percentualLimiteMulta = BigDecimal.ZERO;
						
						indicadorJurosMensal = ConstantesSistema.SIM;
						percentualLimiteJuros = BigDecimal.ZERO;
					}
	
					
					//Diferença de dias em atraso (Úteis e Feriados)
					Integer qtdDias = Util.obterQuantidadeDiasEntreDuasDatas(dataVencimento,dataPagamento);
					
					// CALCULAR VALOR DA MULTA
					//========================================================================================================
					if (indicadorMulta == ConstantesSistema.INDICADOR_USO_DESATIVO.shortValue()) {
	
						if (valorMultasCobradas == null) {
							valorMultasCobradas = BigDecimal.ZERO;
						}
	
						//MULTA DIÁRIA - Determinando o percentual da multa
						if (indicadorMultaMensal.equals(ConstantesSistema.NAO)){
							
							/*
							 * O sistema calcula o valor do percentual de multa = IACI_PCMULTA * diferença
							 * de dias em atraso.
							 */ 
							indiceMulta = indiceMulta.multiply(new BigDecimal(qtdDias.toString()));
							
							//O sistema verifica se o percentual calculado é maior que o limite de multa informado
							if (indiceMulta.compareTo(percentualLimiteMulta) > 0){
								indiceMulta = percentualLimiteMulta;
							}
						}
						
						//Calculando o valor da multa de acordo com o percentual determinado (MENSAL ou DIÁRIO)
						valorMulta = valorDebito.subtract(valorMultasCobradas)
						.multiply(Util.dividirArredondando(indiceMulta, new BigDecimal(100)));
					}
					//========================================================================================================
					
					
					/*
					 * O sistema deverá verificar se o MMAAAA do vencimento da conta é maior que o MMAAAA da
					 * arrecadação.Caso esta situação ocorra os valores de juros de mora e atualização tarifária
					 * ou monetária serão iguais a zero.
					 */
					if (indicadorArrecadacao.equals(ConstantesSistema.INDICADOR_ARRECADACAO_ATIVO)){
					
						Integer anoMesDataVencimento = Util.getAnoMesComoInteger(dataVencimento);
						
						if (anoMesDataVencimento.intValue() > (new Integer(anoMesArrecadacao)).intValue()) {
	
							calcular = false;
						}
					}
					
					if (calcular){
						
						//CALCULAR VALOR DE JUROS DE MORA
						//=====================================================================================================
						
						//JUROS MENSAL
						if (indicadorJurosMensal.equals(ConstantesSistema.SIM)){
						
							int mesesEmAtraso = Util.dataDiff(dataPagamento, dataVencimento);
							
							if (mesesEmAtraso <= 0) {
								
								valorJurosMora = BigDecimal.ZERO;
							} 
							else {
								
								valorJurosMora = valorDebito.multiply(new BigDecimal(mesesEmAtraso)
								.multiply(Util.dividirArredondando(indiceJurosMora, new BigDecimal(100))));
							}
						}
						
						//JUROS DIÁRIO
						else{
						
							/*
							 * O sistema calcula o valor do percentual de juros = IACI_PCJUROS * diferença
							 * de dias em atraso.
							 */ 
							indiceJurosMora = indiceJurosMora.multiply(new BigDecimal(qtdDias.toString()));
							
							//O sistema verifica se o percentual calculado é maior que o limite de juros informado
							if (indiceJurosMora.compareTo(percentualLimiteJuros) > 0){
								indiceJurosMora = percentualLimiteJuros;
							}
							
							valorJurosMora = valorDebito.multiply(Util.dividirArredondando(indiceJurosMora, 
							new BigDecimal(100)));
						}
						
						//=======================================================================================================
					
						/*
						 * CALCULAR ATUALIZAÇÃO TARIFÁRIA OU MONETÁRIA
						 * 
						 * Alterado por Raphael Rossiter em 27/08/2007 
						 * OBJ: Calcular atualização tarifária
						 */
						if (sistemaParametros.getIndicadorAtualizacaoTarifaria() == ConstantesSistema.NAO) {
							
	
							// Calcular Valor de Atualização Monetária
							valorAtualizacao = this.calcularValorAtualizacaoMonetaria(
											dataVencimento,
											dataPagamento, 
											fatorAtualizacaMonetaria,
											indicesAcrescimosImpontualidade, 
											valorDebito,
											indiceMulta, 
											indiceJurosMora);
	
						} else {
							// Calcular Valor de Atualização Tarifária
							valorAtualizacao = this.calcularValorAtualizacaoTarifaria(sistemaParametros,idConta);
						}
					}
				}
			} catch (ErroRepositorioException ex) {
				throw new ControladorException("erro.sistema", ex);
			}
		}
		

		calcularAcrescimoPorImpontualidade.setValorMulta(valorMulta.setScale(2, BigDecimal.ROUND_DOWN));
		calcularAcrescimoPorImpontualidade.setValorJurosMora(valorJurosMora.setScale(2, BigDecimal.ROUND_DOWN));
		calcularAcrescimoPorImpontualidade.setValorAtualizacaoMonetaria(valorAtualizacao.setScale(2, BigDecimal.ROUND_DOWN));

		return calcularAcrescimoPorImpontualidade;
	}

	/**
	 * [UC0216] Calcular Acrescimo por Impontualidade
	 * 
	 * Author: Raphael Rossiter
	 * 
	 * @param dataVencimento
	 * @param dataPagamento
	 * @param fatorAtualizacaMonetaria
	 * @param indicesAcrescimosImpontualidade
	 * @param valorDebito
	 * @param indiceMulta
	 * @param indiceJurosMora
	 * 
	 * @return BigDecimal valorAtualizacaoMonetaria
	 * @throws ControladorException
	 */
	public BigDecimal calcularValorAtualizacaoMonetaria(
			Date dataVencimento,
			Date dataPagamento, 
			BigDecimal fatorAtualizacaMonetaria,
			IndicesAcrescimosImpontualidade indicesAcrescimosImpontualidade,
			BigDecimal valorDebito, 
			BigDecimal indiceMulta,
			BigDecimal indiceJurosMora)
			throws ControladorException {

		BigDecimal valorAtualizacaoMonetaria = new BigDecimal("0.00");
		
		/*
		 * Caso o número de meses de cálculo de correção esteja diferente de nulo (parm_nnmesescalculocorrecao)
		 * da tabela SISTEMA_PARAMETROS: O sistema deverá verificar a diferença de meses entre MMAA da Data de
		 * Vencimento e MMAA da Data de Pagamento caso não seja nula, caso contrário o MMAA da Data Corrente
		 * menos a quantidade mínima de dias para início da cobrança da conta (parm_nndiascalculoacrescimos)
		 * 
		 * OBS - A data de pagamento já está sendo manipulada no método [UC0216] Calcular Acrescimo por 
		 * Impontualidadede.
		 */
		SistemaParametro sistemaParametros = getControladorUtil().pesquisarParametrosDoSistema();
		
		Integer diferencaMeses = Util.dataDiff(dataVencimento, dataPagamento);
		
		if (sistemaParametros.getNumeroMesesCalculoCorrecao() == null || (sistemaParametros.getNumeroMesesCalculoCorrecao() != null && diferencaMeses.intValue() > sistemaParametros.getNumeroMesesCalculoCorrecao().intValue())){
			
			BigDecimal fatorAtualizacaoMonetariaInicial = fatorAtualizacaMonetaria;

			String anoMesReferenciaFatorAtualizacaoMonetariaFinal = "";

			if (dataPagamento != null) {

				Calendar data = new GregorianCalendar();
				data.setTime(dataPagamento);

				anoMesReferenciaFatorAtualizacaoMonetariaFinal = data.get(Calendar.YEAR) + "";
				if (data.get(Calendar.MONTH) < 10) {
					anoMesReferenciaFatorAtualizacaoMonetariaFinal = anoMesReferenciaFatorAtualizacaoMonetariaFinal	+ "0" + (data.get(Calendar.MONTH) + 1);
				} else {
					anoMesReferenciaFatorAtualizacaoMonetariaFinal = anoMesReferenciaFatorAtualizacaoMonetariaFinal + "" + (data.get(Calendar.MONTH) + 1);
				}

			} else {

				// alterado por Vivianne Sousa
				anoMesReferenciaFatorAtualizacaoMonetariaFinal = Util.getAnoMesComoString(new Date());
			}

			// pesquisar o fator atualizacao monetaria final
			try {
				indicesAcrescimosImpontualidade = repositorioCobranca.pesquisarIndiceAcrescimoImpontualidade(new Integer(anoMesReferenciaFatorAtualizacaoMonetariaFinal).intValue());

				if (indicesAcrescimosImpontualidade != null) {
					indiceMulta = indicesAcrescimosImpontualidade.getPercentualMulta();
					indiceJurosMora = indicesAcrescimosImpontualidade.getPercentualJurosMora();
					fatorAtualizacaMonetaria = indicesAcrescimosImpontualidade.getFatorAtualizacaoMonetaria();
				}

			} catch (ErroRepositorioException ex) {
				sessionContext.setRollbackOnly();
				throw new ControladorException("erro.sistema", ex);
			}

			if (indicesAcrescimosImpontualidade == null) {
				try {
					indicesAcrescimosImpontualidade = repositorioCobranca.pesquisarMenorIndiceAcrescimoImpontualidade(new Integer(anoMesReferenciaFatorAtualizacaoMonetariaFinal).intValue());

					if (indicesAcrescimosImpontualidade != null) {
						indiceMulta = indicesAcrescimosImpontualidade.getPercentualMulta();
						indiceJurosMora = indicesAcrescimosImpontualidade.getPercentualJurosMora();
						fatorAtualizacaMonetaria = indicesAcrescimosImpontualidade.getFatorAtualizacaoMonetaria();
					}

				} catch (ErroRepositorioException ex) {
					sessionContext.setRollbackOnly();
					throw new ControladorException("erro.sistema", ex);
				}
			}
			
			if (indicesAcrescimosImpontualidade == null) {
				indiceMulta = new BigDecimal(0);
				indiceJurosMora = new BigDecimal(0);
				fatorAtualizacaMonetaria = new BigDecimal(0);
			}

			BigDecimal fatorAtualizacaoMonetariaFinal = fatorAtualizacaMonetaria;

			BigDecimal percentualAtualizacaoMonetaria = null;

			if (((fatorAtualizacaoMonetariaInicial.compareTo(new BigDecimal(0))) != 0) && ((fatorAtualizacaoMonetariaFinal.compareTo(new BigDecimal(0))) != 0)) {

				percentualAtualizacaoMonetaria = Util.dividirArredondando(fatorAtualizacaoMonetariaFinal,fatorAtualizacaoMonetariaInicial);

				valorAtualizacaoMonetaria = (valorDebito.multiply(percentualAtualizacaoMonetaria)).subtract(valorDebito);
			}
		
		}
		
		
		return valorAtualizacaoMonetaria;
	}

	/**
	 * [UC0216] Calcular Acrescimo por Impontualidade
	 * 
	 * Author: Raphael Rossiter
	 * 
	 * @param dataVencimento
	 * @param dataPagamento
	 * @param dataArrecadacao
	 * @param fatorAtualizacaoMonetariaInicial
	 * @param fatorAtualizacaMonetaria
	 * @param indicesAcrescimosImpontualidade
	 * @param valorDebito
	 * @param indiceMulta
	 * @param indiceJurosMora
	 * @param dataVencimentoInteger
	 * 
	 * @return BigDecimal valorAtualizacaoMonetaria
	 * @throws ControladorException
	 */
	public BigDecimal calcularValorAtualizacaoTarifaria(
			SistemaParametro sistemaParametro, 
			Integer idConta)
			throws ControladorException {

		BigDecimal valorAtualizacaoMonetaria = new BigDecimal("0.00");

		if (idConta != null) {

			Conta conta = this.getControladorFaturamento().pesquisarContaAtualizacaoTarifaria(idConta);

			/*
			 * Alterado por Raphael Rossiter em 11/09/2007 (Analista: Rosana
			 * Carvalho) OBJ: Não calcular a atualização tarifaria caso o
			 * CNTA_AMREFERENCIACONTA seja maior ou igual que
			 * PARM_AMATUALIZACAOTARIFARIA
			 */
			if (sistemaParametro.getAnoMesAtualizacaoTarifaria() != null && conta.getReferencia() < sistemaParametro.getAnoMesAtualizacaoTarifaria().intValue()) {

				/*
				 * Para simular o cálculo a partir dos dados que estão na conta,
				 * será preciso substituir o ConsumoTarifa do imóvel pelo
				 * ConsumoTarifa que está na conta.
				 */
				Imovel imovel = conta.getImovel();
				imovel.setConsumoTarifa(conta.getConsumoTarifa());

				// [UC0105] - Obter Consumo Mínimo da Ligação
				Integer consumoMinimoLigacao = getControladorMicromedicao().obterConsumoMinimoLigacao(imovel, null);

				// [UC0108] - Obter Quantidade de Economias por Categoria
				Collection colecaoCategorias = getControladorImovel().obterQuantidadeEconomiasContaCategoria(conta);

				Integer anoMesReferencia = sistemaParametro.getAnoMesFaturamento();

				// Data de Leitura Anterior
				Integer anoMesReferenciaAnterior = Util.subtrairMesDoAnoMes(anoMesReferencia, 1);

				Date dataLeituraAnterior = null;
				try {

					dataLeituraAnterior = (Date) this.repositorioFaturamento
							.pesquisarFaturamentoAtividadeCronogramaDataRealizacao(
									imovel.getQuadra().getRota().getFaturamentoGrupo().getId(),
									FaturamentoAtividade.EFETUAR_LEITURA,
									anoMesReferenciaAnterior);

				} catch (ErroRepositorioException ex) {
					sessionContext.setRollbackOnly();
					throw new ControladorException("erro.sistema", ex);
				}

				// Data de Leitura Atual
				Date dataLeituraAtual = null;
				try {

					dataLeituraAtual = (Date) this.repositorioFaturamento
							.pesquisarFaturamentoAtividadeCronogramaDataRealizacao(
									imovel.getQuadra().getRota().getFaturamentoGrupo().getId(),
									FaturamentoAtividade.EFETUAR_LEITURA,
									anoMesReferencia);

				} catch (ErroRepositorioException ex) {
					sessionContext.setRollbackOnly();
					throw new ControladorException("erro.sistema", ex);
				}

				/*
				 * Caso NÃO existe cronograma para o anoMes informado
				 */

				if (dataLeituraAnterior == null || dataLeituraAtual == null) {

					int mesConta = Util.obterMes(anoMesReferencia);
					int anoConta = Util.obterAno(anoMesReferencia);

					int ultimoDiaMes = new Integer(Util.obterUltimoDiaMes(mesConta, anoConta));

					dataLeituraAtual = Util.criarData(ultimoDiaMes, mesConta,anoConta);

					dataLeituraAnterior = Util.criarData(1, mesConta, anoConta);
				}

				BigDecimal percentualEsgoto = new BigDecimal(0);
				if (conta.getLigacaoEsgotoSituacao().getId().equals(LigacaoEsgotoSituacao.LIGADO)) {
					percentualEsgoto = conta.getPercentualEsgoto();
				}

				// Valores de água e esgoto que estão na conta (VALOR ANTIGO)
				BigDecimal valorAguaEsgotoAnterior = new BigDecimal(0);

				if (conta.getValorAgua() != null) {
					valorAguaEsgotoAnterior = valorAguaEsgotoAnterior.add(conta.getValorAgua());
				}

				if (conta.getValorEsgoto() != null) {
					valorAguaEsgotoAnterior = valorAguaEsgotoAnterior.add(conta.getValorEsgoto());
				}

				// Valores de água e esgoto (VALOR ATUAL)
				BigDecimal valorAguaEsgotoAtual = new BigDecimal(0);

				// [UC0120] - Calcular Valores de Água e/ou Esgoto
				Collection<CalcularValoresAguaEsgotoHelper> colecaoCalcularValoresAguaEsgotoHelper = this
						.getControladorFaturamento().calcularValoresAguaEsgoto(
								anoMesReferencia,
								conta.getLigacaoAguaSituacao().getId(),
								conta.getLigacaoEsgotoSituacao().getId(),
								new Short("1"), 
								new Short("1"),
								colecaoCategorias, 
								conta.getConsumoAgua(),
								conta.getConsumoEsgoto(), 
								consumoMinimoLigacao,
								dataLeituraAnterior, 
								dataLeituraAtual,
								percentualEsgoto,
								conta.getConsumoTarifa().getId(), null, null, getControladorFaturamento().pesquisarDataLigacaoEsgoto(imovel));

				if (colecaoCalcularValoresAguaEsgotoHelper != null && !colecaoCalcularValoresAguaEsgotoHelper.isEmpty()) {

					CalcularValoresAguaEsgotoHelper valoresAguaEsgoto = null;

					if (colecaoCalcularValoresAguaEsgotoHelper.size() > 1) {

						Iterator itAguaEsgoto = colecaoCalcularValoresAguaEsgotoHelper.iterator();

						while (itAguaEsgoto.hasNext()) {

							valoresAguaEsgoto = (CalcularValoresAguaEsgotoHelper) itAguaEsgoto.next();

							if (valoresAguaEsgoto.getValorFaturadoAguaCategoria() != null) {
								valorAguaEsgotoAtual = valorAguaEsgotoAtual.add(valoresAguaEsgoto.getValorFaturadoAguaCategoria());
							}

							if (valoresAguaEsgoto.getValorFaturadoEsgotoCategoria() != null) {
								valorAguaEsgotoAtual = valorAguaEsgotoAtual.add(valoresAguaEsgoto.getValorFaturadoEsgotoCategoria());
							}
						}
					} else {

						valoresAguaEsgoto = (CalcularValoresAguaEsgotoHelper) Util.retonarObjetoDeColecao(colecaoCalcularValoresAguaEsgotoHelper);

						if (valoresAguaEsgoto.getValorFaturadoAguaCategoria() != null) {
							valorAguaEsgotoAtual = valorAguaEsgotoAtual.add(valoresAguaEsgoto.getValorFaturadoAguaCategoria());
						}

						if (valoresAguaEsgoto.getValorFaturadoEsgotoCategoria() != null) {
							valorAguaEsgotoAtual = valorAguaEsgotoAtual.add(valoresAguaEsgoto.getValorFaturadoEsgotoCategoria());
						}
					}

					valorAtualizacaoMonetaria = valorAguaEsgotoAtual.subtract(valorAguaEsgotoAnterior);

					if (valorAtualizacaoMonetaria.compareTo(BigDecimal.ZERO) == -1) {
						valorAtualizacaoMonetaria = BigDecimal.ZERO;
					}
				}
			}
		}

		return valorAtualizacaoMonetaria;
	}

	/**
	 * [UC0200] Inserir Débito Automático
	 * 
	 * @author Roberta Costa
	 * @created 04/01/2006
	 * 
	 * @param matriculaImovel
	 *            Matrícula do Imovel
	 * @param codigoBanco
	 *            Código do Banco
	 * @param codigoAgencia
	 *            Código da Agência
	 * @param identificacaoCliente
	 *            Identificação do Cliente no Banco
	 * @param dataOpcao
	 *            Data da Opção
	 * @throws ControladorException
	 *             Controlador Exception
	 */
	public String inserirDebitoAutomatico(String matriculaImovel,
			String codigoBanco, String codigoAgencia,
			String identificacaoCliente, Date dataOpcao)
			throws ControladorException {

		// Variável de mensagem de retorno
		String descricaoOcorrencia = "OK";

		try {
			Calendar dataAtual = Calendar.getInstance();
			dataAtual.set(Calendar.HOUR, 0);
			dataAtual.set(Calendar.MINUTE, 0);
			dataAtual.set(Calendar.SECOND, 0);
			dataAtual.set(Calendar.MILLISECOND, 0);

			if (dataOpcao.after(dataAtual.getTime())) {
				descricaoOcorrencia = "DATA OPÇÃO MAIOR QUE A DATA ATUAL";
			} else {
				// [FS0001] - Verificar existência da matrícula do imóvel
				Integer existeImovel = null;
				try {

					existeImovel = repositorioImovel
							.verificarExistenciaImovel(new Integer(
									matriculaImovel));
				} catch (NumberFormatException e) {
					existeImovel = null;
				}

				if (existeImovel == null || existeImovel == 0) {
					descricaoOcorrencia = "IDENTIFICAÇÃO DO IMÓVEL NÃO CADASTRADA";
				} else {
					// [FS0002] - Verificar existência do Banco
					Integer existeBanco = null;
					try {
						existeBanco = repositorioarrecadacao
								.verificarExistenciaBanco(new Integer(
										codigoBanco));
					} catch (NumberFormatException e) {
						existeBanco = null;
					}

					if (existeBanco == null) {
						descricaoOcorrencia = "BANCO NÃO CADASTRADO";
					} else {
						// [FS0003] - Verificar existência do Agência

						Integer existeAgencia = repositorioarrecadacao
								.verificarExistenciaAgencia(codigoAgencia,
										new Integer(codigoBanco));

						if (existeAgencia == null) {
							descricaoOcorrencia = "AGÊNCIA NÃO CADASTRADA";
						} else {
							// [FS0004] - Verifica a data de Opção posterior já
							// informanda
							String resultadoDataOpcao = repositorioCobranca
									.verificarDataOpcao(matriculaImovel,
											dataOpcao, identificacaoCliente,
											codigoAgencia);
							
							// [FS0006] - Verificar data de opção já excluída
							String resultadoDataOpcaoJaExcluida = repositorioCobranca
							.verificarDataOpcaoJaExcluida(matriculaImovel,
									dataOpcao);
							
							if (resultadoDataOpcao != null) {
								descricaoOcorrencia = "IMÓVEL JÁ É DÉBITO AUTOMÁTICO";
								
							} else if (resultadoDataOpcaoJaExcluida != null){
								descricaoOcorrencia = "IMÓVEL JÁ FOI EXCLUÍDO DO DÉBITO AUTOMÁTICO";
								
							} else {
								// Verifica se o Imóvel já é Débito Automático
								String resultadoDebitoAutomatico = repositorioCobranca
										.verificarDebitoAutomatico(matriculaImovel);
								if (resultadoDebitoAutomatico != null) {
									// Atualiza a data da exclusão com a data
									// corrente em Débio Automático
									repositorioCobranca
											.atualizarDataExclusao(matriculaImovel);
								}

								Agencia agencia = new Agencia();
								agencia.setId(existeAgencia);

								Imovel imovel = new Imovel();
								imovel.setId(new Integer(matriculaImovel));

								DebitoAutomatico debitoAutomatico = new DebitoAutomatico(
										identificacaoCliente, dataOpcao,
										new Date(), null, new Date(), agencia,
										imovel);

								// Insere o Imóvel em Débito Automático
								repositorioCobranca
										.inserirDebitoAutomatico(debitoAutomatico);

								// Atualiza o indicador de débio automático em
								// Imóvel
								Integer indicadorDebito = 1;
								repositorioCobranca
										.atualizarIndicadorDebitoAutomatico(
												matriculaImovel,
												indicadorDebito);
							}
						}
					}
				}
			}
		} catch (ErroRepositorioException ex) {
			sessionContext.setRollbackOnly();
			throw new ControladorException("erro.sistema", ex);
		}

		return descricaoOcorrencia;
	}
	
	/**
	 * [UC0201] Remover Débito Automático
	 * 
	 * @author Bruno Barros
	 * @created 11/06/2008
	 * 
	 * @param matriculaImovel
	 *            Matrícula do Imovel
	 */
	public void removerDebitoAutomatico( String[] ids )
			throws ControladorException {
		try {
			
			for ( int i = 0; i < ids.length; i++ ){			
				// Atualiza a data da exclusão com a data
				// corrente em Débio Automático
				repositorioCobranca
						.atualizarDataExclusaoDebitoAutomatico(ids[i]);
	
				String idImovel = repositorioCobranca.pesquisarImovelDebitoAutomatico(ids[i]);
				// Atualiza o indicador de débio automático
				// em Imóvel
				Integer indicadorDebito = 2;
				repositorioCobranca
						.atualizarIndicadorDebitoAutomatico(
							idImovel,
								indicadorDebito);
			}
		} catch (ErroRepositorioException ex) {
			sessionContext.setRollbackOnly();
			throw new ControladorException("erro.sistema", ex);
		}
	}	

	/**
	 * [UC0201] Remover Débito Automático
	 * 
	 * @author
	 * @created 09/01/2006
	 * 
	 * @param matriculaImovel
	 *            Matrícula do Imovel
	 * @param codigoBanco
	 *            Código do Banco
	 * @param codigoAgencia
	 *            Código da Agência
	 * @param identificacaoCliente
	 *            Identificação do Cliente no Banco
	 * @param dataOpcao
	 *            Data da Opção
	 * @throws ControladorException
	 *             Controlador Exception
	 */
	public String removerDebitoAutomatico(String matriculaImovel,
			String codigoBanco, String codigoAgencia,
			String identificacaoCliente, Date dataOpcao)
			throws ControladorException {

		// Variável de mensagem de retorno
		String descricaoOcorrencia = "OK";

		try {
			// [FS0001] - Verificar existência da matrícula do imóvel
			Integer existeImovel = null;
			try {

				existeImovel = repositorioImovel
						.verificarExistenciaImovel(new Integer(matriculaImovel));
			} catch (NumberFormatException e) {
				existeImovel = null;
			}

			if (existeImovel == null) {
				descricaoOcorrencia = "IDENTIFICAÇÃO DO IMÓVEL NÃO CADASTRADA";
			} else {
				// [FS0002] - Verificar existência do Banco
				Integer existeBanco = null;
				try {
					existeBanco = repositorioarrecadacao
							.verificarExistenciaBanco(new Integer(codigoBanco));
				} catch (NumberFormatException e) {
					existeBanco = null;
				}

				if (existeBanco == null) {
					descricaoOcorrencia = "BANCO NÃO CADASTRADO";
				} else {
					// [FS0003] - Verificar existência do Agência
					Integer existeAgencia = null;

					existeAgencia = repositorioarrecadacao
							.verificarExistenciaAgencia(codigoAgencia,
									new Integer(codigoBanco));

					if (existeAgencia == null) {
						descricaoOcorrencia = "AGÊNCIA NÃO CADASTRADA";
					} else {
						// Verifica se o Imóvel já é Débito Automático
						String idAgenciaDebitoAutomatico = repositorioCobranca
								.verificarDebitoAutomatico(matriculaImovel);

						if (idAgenciaDebitoAutomatico == null) {
							descricaoOcorrencia = "IMÓVEL NÃO É DÉBITO AUTOMÁTICO";
						} else {

							// Insere o Imóvel em Débito Automático
							String idAgencia = repositorioCobranca
									.verificarDebitoAutomaticoBancoAgencia(
											codigoBanco, codigoAgencia);
							if (!idAgenciaDebitoAutomatico.equals(idAgencia)) {
								descricaoOcorrencia = "IMÓVEL É DÉBITO AUTOMÁTICO DE OUTRO BANCO/AGÊNCIA";
							} else {
								// Verifica a data de Opção posterior já
								// informanda
								String resultadoDataOpcao = repositorioCobranca
										.verificarDataOpcaoExclusao(
												matriculaImovel, dataOpcao,
												identificacaoCliente);
								if (resultadoDataOpcao != null) {
									descricaoOcorrencia = "DATA OPÇÃO DO DEB. AUT. MAIOR QUE DATA INFORMADA";
								} else {
									// Atualiza a data da exclusão com a data
									// corrente em Débio Automático
									repositorioCobranca
											.atualizarDataExclusao(matriculaImovel);

									// Atualiza o indicador de débio automático
									// em Imóvel
									Integer indicadorDebito = 2;
									repositorioCobranca
											.atualizarIndicadorDebitoAutomatico(
													matriculaImovel,
													indicadorDebito);
								}
							}
						}
					}
				}
			}
		} catch (ErroRepositorioException ex) {
			sessionContext.setRollbackOnly();
			throw new ControladorException("erro.sistema", ex);
		}
		return descricaoOcorrencia;
	}

	/**
	 * [UC0251] Gerar Atividade de Ação de Cobrança
	 * 
	 * @author Pedro Alexandre
	 * @created 01/02/2006
	 * 
	 * @param grupoCobranca
	 *            Grupo de Cobrança
	 * @param anoMesReferencia
	 *            Ano/Mês de referência do ciclo de cobrança
	 * @param idCronogramaAtividadeAcaoCobranca
	 *            Código do cronograma da atividade da ação de cobrança
	 * @param idComandoAtividadeAcaoCobranca
	 *            Código do comando da atividade da ação de cobrança
	 * @param rotas
	 *            Coleção de rotas
	 * @param acaoCobranca
	 *            Ação de cobrança
	 * @param atividadeCobranca
	 *            Atividade de cobrança
	 * @param indicadorCriterio
	 *            Indicador do critério a ser utilizado
	 * @param criterioCobranca
	 *            Critério de cobrança
	 * @param cliente
	 *            Cliente
	 * @param relacaoClienteImovel
	 *            Tipo de relação entre cliente e imóvel
	 * @param anoMesReferenciaInicial
	 *            Ano/Mês de referência inicial
	 * @param anoMesReferenciaFinal
	 *            Ano/Mês de referência final
	 * @param dataVencimentoInicial
	 *            Data de vencimento inicial
	 * @param dataVencimentoFinal
	 *            Data de vencimento final
	 * @throws ControladorException
	 *             Controlador Exception
	 */
	/*
	 * public void gerarAtividadeAcaoCobranca(CobrancaGrupo grupoCobranca, int
	 * anoMesReferencia, Integer idCronogramaAtividadeAcaoCobranca, Integer
	 * idComandoAtividadeAcaoCobranca, Collection<Rota> rotas, CobrancaAcao
	 * acaoCobranca, CobrancaAtividade atividadeCobranca, Integer
	 * indicadorCriterio, CobrancaCriterio criterioCobranca, Cliente cliente,
	 * Integer relacaoClienteImovel, int anoMesReferenciaInicial, int
	 * anoMesReferenciaFinal, Date dataVencimentoInicial, Date
	 * dataVencimentoFinal) throws ControladorException{
	 * 
	 * //IMPLEMENTAR QUANDO O MAPEAMENTO DA QUINTA ITERACAO ESTIVER PRONTO }
	 */

	/**
	 * Consultar Dados do Cliente Imovel Vinculado Auhtor: Rafael Santos Data:
	 * 23/01/2006
	 * 
	 * @param imovel
	 *            Imovel
	 * @return Dados do Imovel Vinculado
	 * @throws ControladorException
	 */
	public Cliente consultarDadosClienteImovelUsuario(Imovel imovel)
			throws ControladorException {

		Cliente cliente = null;

		Object[] colecaoClienteArray = null;

		try {
			colecaoClienteArray = repositorioMicromedicao
					.consultarDadosClienteImovelUsuario(imovel);
		} catch (ErroRepositorioException ex) {
			sessionContext.setRollbackOnly();
			throw new ControladorException("erro.sistema", ex);
		}

		if (colecaoClienteArray != null && !(colecaoClienteArray.length < 0)) {

			cliente = new Cliente();

			// Seta o id do cliente
			if (colecaoClienteArray[0] != null) {
				cliente.setId((Integer) colecaoClienteArray[0]);
			}
			// Seta o nome do cliente
			if (colecaoClienteArray[1] != null) {
				cliente.setNome((String) colecaoClienteArray[1]);
			}
		}

		return cliente;
	}

	/**
	 * Consultar Dados do Cliente Imovel Vinculado Auhtor: Rafael Santos Data:
	 * 23/01/2006
	 * 
	 * @param consumoHistorico
	 *            Consumo Historico
	 * @return Consumo Tipo
	 * @throws ControladorException
	 */
	public ConsumoTipo consultarDadosConsumoTipoConsumoHistorico(
			ConsumoHistorico consumoHistorico) throws ControladorException {

		ConsumoTipo consumoTipo = null;

		Object[] colecaoConsumoTipoArray = null;

		try {
			colecaoConsumoTipoArray = repositorioMicromedicao
					.consultarDadosConsumoTipoConsumoHistorico(consumoHistorico);
		} catch (ErroRepositorioException ex) {
			sessionContext.setRollbackOnly();
			throw new ControladorException("erro.sistema", ex);
		}

		if (colecaoConsumoTipoArray != null
				&& !(colecaoConsumoTipoArray.length < 0)) {

			consumoTipo = new ConsumoTipo();

			// Descricao Abreviada
			if (colecaoConsumoTipoArray[0] != null) {
				consumoTipo
						.setDescricaoAbreviada((String) colecaoConsumoTipoArray[0]);
			}

			// Id
			if (colecaoConsumoTipoArray[1] != null) {
				consumoTipo.setId((Integer) colecaoConsumoTipoArray[1]);
			}

		}

		return consumoTipo;
	}

	/**
	 * Consultar Historico Medição Individualizada Auhtor: Rafael Santos Data:
	 * 23/01/2006 [UC001779] Consultar Histórico Medição Individualizada
	 * 
	 * @param imovelCondominio
	 *            Imovel Condominio
	 * @param anoMesFaturamento
	 *            Ano Mês Fauramento
	 * @return Dados do Historico Medição Individualizada
	 * @throws ControladorException
	 */
	public Collection consultarHistoricoMedicaoIndividualizada(
			Imovel imovelCondominio, String anoMesFaturamento)
			throws ControladorException {
		Collection colecaoHistoricosMedicaoIndividualizada = null;
		MedicaoHistorico medicaoHistorico = null;
		ConsumoHistorico consumoHistorico = null;
		ConsumoHistorico consumoHistoricoAgua = null;
		LigacaoTipo ligacaoTipo = null;
		Cliente cliente = null;
		ConsumoTipo consumoTipo = null;

		/*
		 * Matricula Nome do Cliente Tipo de Consumo Consumo de Água Medido
		 * Consumo de Água Faturado Consumo Esgoto Faturado Consumo do Rateio
		 */
		ConsultarHistoricoMedicaoIndividualizadaHelper consultarHistoricoMedicaoIndividualizadaHelper = null;

		if (imovelCondominio != null) {

			colecaoHistoricosMedicaoIndividualizada = new ArrayList();

			// imovel condominio
			consultarHistoricoMedicaoIndividualizadaHelper = new ConsultarHistoricoMedicaoIndividualizadaHelper();

			ligacaoTipo = new LigacaoTipo();
			ligacaoTipo.setId(LigacaoTipo.LIGACAO_AGUA);

			// consultar consumo Historico imovel condominio Ligacao Agua
			consumoHistoricoAgua = this
					.obterConsumoHistoricoMedicaoIndividualizada(
							imovelCondominio, ligacaoTipo, new Integer(
									anoMesFaturamento).intValue());

			// inscrição do imovel condominio
			consultarHistoricoMedicaoIndividualizadaHelper
					.setMatriculaImovel(imovelCondominio.getId().toString());

			cliente = this.consultarDadosClienteImovelUsuario(imovelCondominio);
			// nome do cliente do imovel condominio
			// consultarHistoricoMedicaoIndividualizadaHelper.setNomeClienteUsuario(cliente.getNome());
			if (cliente != null) {
				consultarHistoricoMedicaoIndividualizadaHelper
						.setNomeClienteUsuario(cliente.getNome());
			} else {
				consultarHistoricoMedicaoIndividualizadaHelper
						.setNomeClienteUsuario("");
			}

			consumoTipo = consultarDadosConsumoTipoConsumoHistorico(consumoHistoricoAgua);
			if (consumoTipo != null) {
				// tipo de consumo do imovel condominio
				consultarHistoricoMedicaoIndividualizadaHelper
						.setTipoConsumo(consumoTipo.getDescricaoAbreviada());

			} else {
				// tipo de consumo do imovel condominio
				consultarHistoricoMedicaoIndividualizadaHelper
						.setTipoConsumo("");

			}

			try {
				medicaoHistorico = repositorioMicromedicao
						.pesquisarMedicaoHistoricoTipoAgua(imovelCondominio
								.getId(), new Integer(anoMesFaturamento));
			} catch (ErroRepositorioException e) {
				sessionContext.setRollbackOnly();
				throw new ControladorException("erro.sistema", e);
			}
			if (medicaoHistorico != null) {
				// consumo agua medido do imovel condominio
				consultarHistoricoMedicaoIndividualizadaHelper
						.setConsumoAguaMedido(medicaoHistorico
								.getNumeroConsumoMes().toString());
			} else {
				consultarHistoricoMedicaoIndividualizadaHelper
						.setConsumoAguaMedido("");
			}
			// consumo agua faturado do imovel condominio
			consultarHistoricoMedicaoIndividualizadaHelper
					.setConsumoAguaFaturado(consumoHistoricoAgua
							.getNumeroConsumoFaturadoMes().toString());
			// consumo rateio do imovel condominio
			consultarHistoricoMedicaoIndividualizadaHelper
					.setConsumoRateio(consumoHistoricoAgua.getConsumoRateio()
							.toString());

			ligacaoTipo.setId(LigacaoTipo.LIGACAO_ESGOTO);

			// consultar consumo Historico imovel condominio Ligacao Esgoto
			consumoHistorico = this.obterConsumoHistorico(imovelCondominio,
					ligacaoTipo, new Integer(anoMesFaturamento).intValue());

			// consumo esgoto do imovel condominio
			if (consumoHistorico != null) {
				consultarHistoricoMedicaoIndividualizadaHelper
						.setConsumoEsgoto(consumoHistorico
								.getNumeroConsumoFaturadoMes().toString());
			} else {
				consultarHistoricoMedicaoIndividualizadaHelper
						.setConsumoEsgoto("");
			}

			// adicionando dados do imovel condominio
			colecaoHistoricosMedicaoIndividualizada
					.add(consultarHistoricoMedicaoIndividualizadaHelper);

			Collection colecaoConsumoHistoricoImoveisVinculados = this
					.consultarConsumoHistoricoImoveisVinculados(consumoHistoricoAgua);

			// obter os dados para os imoveis vinculados
			// coleção de ids dos imoveis vinculados ao condominio
			if (colecaoConsumoHistoricoImoveisVinculados != null
					&& !colecaoConsumoHistoricoImoveisVinculados.isEmpty()) {

				Iterator iColecaoConsumoHistoricoImoveisVinculados = colecaoConsumoHistoricoImoveisVinculados
						.iterator();

				while (iColecaoConsumoHistoricoImoveisVinculados.hasNext()) {
					String idImovelVinculados = ((Integer) iColecaoConsumoHistoricoImoveisVinculados
							.next()).toString();

					// imovel vinculado
					consultarHistoricoMedicaoIndividualizadaHelper = new ConsultarHistoricoMedicaoIndividualizadaHelper();

					ligacaoTipo = new LigacaoTipo();
					ligacaoTipo.setId(LigacaoTipo.LIGACAO_AGUA);

					Imovel imovelVinculado = new Imovel();
					imovelVinculado.setId(new Integer(idImovelVinculados));

					// consultar consumo Historico imovel vinculado Ligacao Agua
					consumoHistorico = this
							.obterConsumoHistoricoMedicaoIndividualizada(
									imovelVinculado, ligacaoTipo, new Integer(
											anoMesFaturamento).intValue());

					// inscrição do imovel vinculado
					consultarHistoricoMedicaoIndividualizadaHelper
							.setMatriculaImovel(imovelVinculado.getId()
									.toString());

					cliente = this
							.consultarDadosClienteImovelUsuario(imovelVinculado);
					// nome do cliente do imovel vinculado
					if (cliente != null) {
						consultarHistoricoMedicaoIndividualizadaHelper
								.setNomeClienteUsuario(cliente.getNome());
					} else {
						consultarHistoricoMedicaoIndividualizadaHelper
								.setNomeClienteUsuario("");
					}

					consumoTipo = consultarDadosConsumoTipoConsumoHistorico(consumoHistorico);
					if (consumoTipo != null) {
						// tipo de consumo do imovel vinculado
						consultarHistoricoMedicaoIndividualizadaHelper
								.setTipoConsumo(consumoTipo
										.getDescricaoAbreviada());

					} else {
						// tipo de consumo do imovel vinculado
						consultarHistoricoMedicaoIndividualizadaHelper
								.setTipoConsumo("");

					}

					try {
						medicaoHistorico = repositorioMicromedicao
								.pesquisarMedicaoHistoricoTipoAgua(
										imovelVinculado.getId(), new Integer(
												anoMesFaturamento));
					} catch (ErroRepositorioException e) {
						sessionContext.setRollbackOnly();
						throw new ControladorException("erro.sistema", e);
					}
					if (medicaoHistorico != null) {
						// consumo agua medido do imovel vinculado
						consultarHistoricoMedicaoIndividualizadaHelper
								.setConsumoAguaMedido(medicaoHistorico
										.getNumeroConsumoMes().toString());
					} else {
						consultarHistoricoMedicaoIndividualizadaHelper
								.setConsumoAguaMedido("");
					}
					// consumo agua faturado do imovel vinculado
					consultarHistoricoMedicaoIndividualizadaHelper
							.setConsumoAguaFaturado(consumoHistorico
									.getNumeroConsumoFaturadoMes().toString());
					// consumo rateio do imovel vinculado
					consultarHistoricoMedicaoIndividualizadaHelper
							.setConsumoRateio(consumoHistorico
									.getConsumoRateio().toString());

					ligacaoTipo.setId(LigacaoTipo.LIGACAO_ESGOTO);

					// consultar consumo Historico imovel vinculado Ligacao
					// Esgoto
					consumoHistorico = this.obterConsumoHistorico(
							imovelVinculado, ligacaoTipo, new Integer(
									anoMesFaturamento).intValue());

					// consumo esgoto do imovel vinculado
					if (consumoHistorico != null) {
						consultarHistoricoMedicaoIndividualizadaHelper
								.setConsumoEsgoto(consumoHistorico
										.getNumeroConsumoFaturadoMes()
										.toString());
					} else {
						consultarHistoricoMedicaoIndividualizadaHelper
								.setConsumoEsgoto("");
					}

					// adicionando dados do imovel vinculado
					colecaoHistoricosMedicaoIndividualizada
							.add(consultarHistoricoMedicaoIndividualizadaHelper);
				}
			}
		}

		return colecaoHistoricosMedicaoIndividualizada;
	}

	/**
	 * Consultar Matriculas dos Imoveis Vinculados do Imovel condominio Auhtor:
	 * Rafael Santos Data: 23/01/2006 [UC0179] Consultar Historico Medição
	 * Indiviualizada
	 * 
	 * @param consumoHistorico
	 *            Consumo Historico
	 * @return
	 * @throws ControladorException
	 */
	public Collection consultarConsumoHistoricoImoveisVinculados(
			ConsumoHistorico consumoHistorico) throws ControladorException {

		try {
			return repositorioMicromedicao
					.consultarConsumoHistoricoImoveisVinculados(consumoHistorico);
		} catch (ErroRepositorioException e) {
			sessionContext.setRollbackOnly();
			throw new ControladorException("erro.sistema", e);
		}

	}

	/**
	 * Consultar Matriculas dos Imoveis Vinculados do Imovel condominio Auhtor:
	 * Rafael Santos Data: 23/01/2006 [UC0179] Consultar Historico Medição
	 * Indiviualizada
	 * 
	 * @param imovel
	 *            Imovel
	 * @param ligcaoTipo
	 *            Tipo de Ligacação
	 * @param anoMesFaturamento
	 *            Ano Mes Faturamento
	 * @exception ControladorException
	 * @return Consumo Historico do Imovel
	 */
	public ConsumoHistorico obterConsumoHistoricoMedicaoIndividualizada(
			Imovel imovel, LigacaoTipo ligacaoTipo, int anoMesReferencia)
			throws ControladorException {

		ConsumoHistorico consumoHistorico = null;

		Object[] colecaoConsumoHistoricoArray = null;

		try {
			colecaoConsumoHistoricoArray = repositorioMicromedicao
					.obterConsumoHistoricoMedicaoIndividualizada(imovel,
							ligacaoTipo, anoMesReferencia);
		} catch (ErroRepositorioException ex) {
			sessionContext.setRollbackOnly();
			throw new ControladorException("erro.sistema", ex);
		}

		if (colecaoConsumoHistoricoArray != null
				&& !(colecaoConsumoHistoricoArray.length < 0)) {

			consumoHistorico = new ConsumoHistorico();

			// Seta o id do histórico
			if (colecaoConsumoHistoricoArray[0] != null) {
				consumoHistorico
						.setId((Integer) colecaoConsumoHistoricoArray[0]);
			}
			// Seta Consumo Rateio
			if (colecaoConsumoHistoricoArray[1] != null) {
				consumoHistorico
						.setConsumoRateio((Integer) colecaoConsumoHistoricoArray[1]);
			}
			// Seta o tipo de ligação
			if (colecaoConsumoHistoricoArray[2] != null) {
				consumoHistorico
						.setNumeroConsumoFaturadoMes((Integer) colecaoConsumoHistoricoArray[2]);
			}

			// Seta o tipo de ligação
			if (colecaoConsumoHistoricoArray[3] != null) {
				consumoHistorico
						.setConsumoTipo((ConsumoTipo) colecaoConsumoHistoricoArray[3]);
			}

		}

		return consumoHistorico;
	}

	/**
	 * [UC0213] Desfazer Parcelamento Debito
	 * 
	 * @author Fernanda Paiva
	 * @created 14/02/2006
	 * 
	 * @param DebitoCreditoSituacaoAnterior
	 *            DebitoCreditoSituacaoAtual idConta
	 * @exception controladorException
	 *                controlador Exception
	 */
	public void atualizarSituacaoConta(String codigoConta, int situacaoAtual,
			int anoMesReferenciaContabil) throws ControladorException {
		try {
			repositorioCobranca.atualizarSituacaoConta(codigoConta,
					situacaoAtual, anoMesReferenciaContabil);
		} catch (ErroRepositorioException ex) {
			ex.printStackTrace();
			sessionContext.setRollbackOnly();
			throw new ControladorException("erro.sistema", ex);
		}
	}

	/**
	 * [UC0213] Desfazer Parcelamento Debito
	 * 
	 * @author Fernanda Paiva
	 * @created 15/02/2006
	 * 
	 * @param DebitoCreditoSituacaoAtual
	 *            idGuiaPagamento
	 * @exception controladorException
	 *                controlador Exception
	 */
	public void atualizarSituacaoGuiaPagamento(String codigoGuiaPagamento,
			int situacaoAtualGuia, int anoMesReferenciaContabil)
			throws ControladorException {
		try {
			repositorioCobranca.atualizarSituacaoGuiaPagamento(
					codigoGuiaPagamento, situacaoAtualGuia,
					anoMesReferenciaContabil);
		} catch (ErroRepositorioException ex) {
			ex.printStackTrace();
			sessionContext.setRollbackOnly();
			throw new ControladorException("erro.sistema", ex);
		}
	}

	/**
	 * [UC0213] Desfazer Parcelamento Debito
	 * 
	 * @author Fernanda Paiva
	 * @created 15/02/2006
	 * 
	 * @param DebitoCreditoSituacaoAtual
	 *            idGuiaPagamento
	 * @exception controladorException
	 *                controlador Exception
	 */
	public void atualizarParcelamento(Integer codigoParcelamento,
			Integer parcelamentoSituacao, String motivo,Integer usuarioId)
			throws ControladorException {
		try {
			repositorioCobranca.atualizarParcelamento(codigoParcelamento,
					parcelamentoSituacao, motivo,usuarioId);
		} catch (ErroRepositorioException ex) {
			ex.printStackTrace();
			sessionContext.setRollbackOnly();
			throw new ControladorException("erro.sistema", ex);
		}
	}

	/**
	 * [UC0213] Desfazer Parcelamento Debito
	 * 
	 * @author Fernanda Paiva
	 * @created 16/02/2006
	 * 
	 * @param DebitoCreditoSituacaoAtual
	 *            idDebitoACobrar
	 * @exception controladorException
	 *                controlador Exception
	 */
	public void atualizarSituacaoDebitoACobrar(String codigoDebitoACobrar,
			int situacaoAtualDebito, int anoMesReferenciaContabil)
			throws ControladorException {
		try {
			repositorioCobranca.atualizarSituacaoDebitoACobrar(
					codigoDebitoACobrar, situacaoAtualDebito,
					anoMesReferenciaContabil);
		} catch (ErroRepositorioException ex) {
			ex.printStackTrace();
			sessionContext.setRollbackOnly();
			throw new ControladorException("erro.sistema", ex);
		}
	}

	/**
	 * [UC0213] Desfazer Parcelamento Debito
	 * 
	 * @author Fernanda Paiva
	 * @created 16/02/2006
	 * 
	 * @param DebitoCreditoSituacaoAtual
	 *            idCreditoARealizar
	 * @exception controladorException
	 *                controlador Exception
	 */
	public void atualizarSituacaoCreditoARealizar(
			String codigoCreditoARealizar, int situacaoAtualCredito,
			int anoMesReferenciaContabil) throws ControladorException {
		try {
			repositorioCobranca.atualizarSituacaoCreditoARealizar(
					codigoCreditoARealizar, situacaoAtualCredito,
					anoMesReferenciaContabil);
		} catch (ErroRepositorioException ex) {
			ex.printStackTrace();
			sessionContext.setRollbackOnly();
			throw new ControladorException("erro.sistema", ex);
		}
	}

	/**
	 * [UC0213] Desfazer Parcelamento Debito - remover debito a cobrar referente
	 * ao parcelamento
	 * 
	 * @author Fernanda Paiva
	 * @created 20/02/2006
	 * 
	 * @param idImovel
	 *            idParcelamento
	 * @exception controladorException
	 *                controlador Exception
	 */
	public void removerDebitoACobrarDoParcelamento(Integer codigoImovel,
			Integer codigoParcelamento) throws ControladorException {
		try {
			if (repositorioCobranca.pesquisarDebitoCobradoParcelamento(codigoParcelamento)) {
				throw new ControladorException("atencao.parcelamento_ja_cobrado_em_conta");
			}
			repositorioCobranca.removerDebitoACobrarDoParcelamento(
					codigoImovel, codigoParcelamento);
		} catch (ErroRepositorioException ex) {
			ex.printStackTrace();
			sessionContext.setRollbackOnly();
			throw new ControladorException("erro.sistema", ex);
		}
	}

	/**
	 * [UC0213] Desfazer Parcelamento Debito - remover debito a cobrar categoria
	 * referente ao parcelamento
	 * 
	 * @author Fernanda Paiva
	 * @created 20/02/2006
	 * 
	 * @param idImovel
	 *            idParcelamento
	 * @exception controladorException
	 *                controlador Exception
	 */
	public void removerDebitoACobrarCategoriaDoParcelamento(Integer codigoParcelamento, Integer idDebito)
			throws ControladorException {
		try {
			
			if (repositorioCobranca.pesquisarDebitoCobradoParcelamento(codigoParcelamento)) {
				throw new ControladorException("atencao.parcelamento_ja_cobrado_em_conta");
			}
			
			repositorioCobranca.removerDebitoACobrarCategoriaDoParcelamento(idDebito);
			
		} catch (ErroRepositorioException ex) {
			ex.printStackTrace();
			sessionContext.setRollbackOnly();
			throw new ControladorException("erro.sistema", ex);
		}
	}

	/**
	 * [UC0213] Desfazer Parcelamento Debito - remover credito a realizar
	 * referente ao parcelamento
	 * 
	 * @author Fernanda Paiva
	 * @created 20/02/2006
	 * 
	 * @param idImovel
	 *            idParcelamento
	 * @exception controladorException
	 *                controlador Exception
	 */
	public void removerCreditoARealizarDoParcelamento(Integer codigoImovel,
			Integer codigoParcelamento) throws ControladorException {
		try {
			repositorioCobranca.removerCreditoARealizarDoParcelamento(
					codigoImovel, codigoParcelamento);
		} catch (ErroRepositorioException ex) {
			ex.printStackTrace();
			sessionContext.setRollbackOnly();
			throw new ControladorException("erro.sistema", ex);
		}
	}

	/**
	 * [UC0213] Desfazer Parcelamento Debito - remover guia pagamento referente
	 * ao parcelamento
	 * 
	 * @author Fernanda Paiva
	 * @created 20/02/2006
	 * 
	 * @param idImovel
	 *            idParcelamento
	 * @exception controladorException
	 *                controlador Exception
	 */
	public void removerGuiaPagamentoDoParcelamento(Integer codigoImovel,
			Integer codigoParcelamento) throws ControladorException {
		try {
			FiltroGuiaPagamento filtroGuiaPagamento = new FiltroGuiaPagamento();
			filtroGuiaPagamento.adicionarParametro(new ParametroSimples(
					FiltroGuiaPagamento.IMOVEL_ID, codigoImovel));
			filtroGuiaPagamento.adicionarParametro(new ParametroSimples(
					FiltroGuiaPagamento.PARCELAMENTO_ID, codigoParcelamento));
			Collection colecaoGuiasPagamentos = repositorioUtil.pesquisar(
					filtroGuiaPagamento, GuiaPagamento.class.getName());
			GuiaPagamento guiaPagamento = (GuiaPagamento) Util
					.retonarObjetoDeColecao(colecaoGuiasPagamentos);
			if (guiaPagamento != null && !guiaPagamento.equals("")
					&& guiaPagamento.getId() != null
					&& !guiaPagamento.getId().equals("")) {

				FiltroPagamento filtroPagamento = new FiltroPagamento();
				filtroPagamento.adicionarParametro(new ParametroSimples(
						FiltroPagamento.GUIA_PAGAMENTO_ID, guiaPagamento
								.getId()));
				Collection colecaoPagamentos = repositorioUtil.pesquisar(
						filtroPagamento, Pagamento.class.getName());

				if (colecaoPagamentos != null && !colecaoPagamentos.isEmpty()) {

					Iterator iter = colecaoPagamentos.iterator();

					while (iter.hasNext()) {
						Pagamento pagamento = (Pagamento) iter.next();
						getControladorArrecadacao()
								.removerGuiaPagamentoPagamento(
										pagamento.getId());

					}
					// sessionContext.setRollbackOnly();
					// throw new ControladorException(
					// "atencao.parcelamento.nao.pode.ser.desfeito");

				}

				repositorioCobranca
						.removerClienteGuiaPagamentoDoParcelamento(guiaPagamento
								.getId());

				repositorioCobranca
						.removerGuiaPagamentoCobrancaDoParcelamento(guiaPagamento
								.getId());

				repositorioCobranca.removerGuiaPagamentoDoParcelamento(
						codigoImovel, codigoParcelamento);
			}
		} catch (ErroRepositorioException ex) {
			ex.printStackTrace();
			sessionContext.setRollbackOnly();
			throw new ControladorException("erro.sistema", ex);
		}
	}

	/**
	 * [UC0246] Executar Atividade de Ação de Cobrança
	 * 
	 * @author Pedro Alexandre
	 * @created 03/02/2006
	 * 
	 * @param idsAtividadesCobrancaCronograma
	 *            Array de id's de atividades de cobrança do cronograma
	 * @param idsAtividadesCobrancaEventuais
	 *            Array de id´s de atividades de cobrança eventuais
	 * @throws ControladorException
	 *             Controlador Exception
	 */
	@Deprecated
	public void executarAtividadeAcaoCobranca(
			String[] idsAtividadesCobrancaCronograma,
			String[] idsAtividadesCobrancaEventuais)
			throws ControladorException {

		// pesquisa os parametros do sistem na base
		SistemaParametro sistemaParametros = getControladorUtil()
				.pesquisarParametrosDoSistema();

		// recupera o nº de dias após vencimento para início de cobrança
		short numeroDiasVencimentoCobranca = sistemaParametros
				.getNumeroDiasVencimentoCobranca();

		// recupera o ano/mês corrente de faturamento
		Integer anoMesFaturamentoCorrente = sistemaParametros
				.getAnoMesFaturamento();

		// cria o filtro de rota
		FiltroRota filtroRota = new FiltroRota();

		// cria a variável que vai armazenar a coleção de rotas pesquisada
		Collection<Rota> colecaoRotas = null;

		// recupera a data corrente
		Date dataCorrente = new Date();

		// cria o indicador do critério de rota
		final int indicadorCriterioRota = 1;

		// cria o ano/mês de referência inicial
		String anoMesReferenciaInicial = "000101";

		// cria o ano/mês de referência final
		// o ano/mês final vai ser o ano/mês de faturamento corrente mais um mês
		String anoMesReferenciaFinal = (new Integer(Util
				.somarData(anoMesFaturamentoCorrente))).toString();

		// cria o formato da data
		SimpleDateFormat formato = new SimpleDateFormat("dd/MM/yyyy");

		// cria a variável que vai armazenar a data de vencimento inicial
		Date dataVencimentoInicial = null;

		// cria a variável que vai armazenar a data de vencimento final
		Date dataVencimentoFinal = null;

		try {
			// cria a data de vencimento inicial
			dataVencimentoInicial = formato.parse("01/01/0001");

			// erro na criação da data
		} catch (ParseException e) {
			// seta a data de vencimento inicial para nula
			dataVencimentoInicial = null;
		}

		// recupera a data de vencimento final
		dataVencimentoFinal = Util.subtrairNumeroDiasDeUmaData(dataCorrente,
				numeroDiasVencimentoCobranca);

		/*
		 * Executa as atividades de cobrança do cronograma que foram previamente
		 * comandas
		 * ===============================================================================
		 */
		// se o usuário selecionou alguma atividade de cobrança de cronograma
		if (idsAtividadesCobrancaCronograma != null) {
			// laço para executar as atividades de cobrança do cronograma
			for (int i = 0; idsAtividadesCobrancaCronograma.length > i; i++) {

				// cria o filtro de cobrança de ação da atividade do cronograma
				FiltroCobrancaAcaoAtividadeCronograma filtroCobrancaAcaoAtividadeCronograma = new FiltroCobrancaAcaoAtividadeCronograma();

				// seta o código no filtro
				filtroCobrancaAcaoAtividadeCronograma
						.adicionarParametro(new ParametroSimples(
								FiltroCobrancaAcaoAtividadeCronograma.ID,
								idsAtividadesCobrancaCronograma[i]));

				// carrega os objetos da pesquisa
				filtroCobrancaAcaoAtividadeCronograma
						.adicionarCaminhoParaCarregamentoEntidade("cobrancaAcaoCronograma.cobrancaAcao");

				// Carrega a ação precedente
				filtroCobrancaAcaoAtividadeCronograma
						.adicionarCaminhoParaCarregamentoEntidade("cobrancaAcaoCronograma.cobrancaAcao.cobrancaAcaoPredecessora.servicoTipo");

				filtroCobrancaAcaoAtividadeCronograma
						.adicionarCaminhoParaCarregamentoEntidade("cobrancaAcaoCronograma.cobrancaAcao.servicoTipo");

				filtroCobrancaAcaoAtividadeCronograma
						.adicionarCaminhoParaCarregamentoEntidade("cobrancaAcaoCronograma.cobrancaGrupoCronogramaMes.cobrancaGrupo");
				filtroCobrancaAcaoAtividadeCronograma
						.adicionarCaminhoParaCarregamentoEntidade("cobrancaAtividade");

				// pesquisa a atividade de ação do cronograma no sistema
				Collection atividadesCobrancaCronograma = getControladorUtil()
						.pesquisar(filtroCobrancaAcaoAtividadeCronograma,
								CobrancaAcaoAtividadeCronograma.class.getName());

				// recupera oobjeto CobrancaAcaoAtividadeCronograma da coleção
				CobrancaAcaoAtividadeCronograma cobrancaAcaoAtividadeCronograma = (CobrancaAcaoAtividadeCronograma) Util
						.retonarObjetoDeColecao(atividadesCobrancaCronograma);

				// repera o grupo de cobrança
				CobrancaGrupo grupoCobranca = cobrancaAcaoAtividadeCronograma
						.getCobrancaAcaoCronograma()
						.getCobrancaGrupoCronogramaMes().getCobrancaGrupo();

				// recupera o ano/mês de referência do ciclo de cobrança
				int anoMesReferenciaCicloCobranca = cobrancaAcaoAtividadeCronograma
						.getCobrancaAcaoCronograma()
						.getCobrancaGrupoCronogramaMes().getAnoMesReferencia();

				// recupera o código da atividade
				Integer atividade = cobrancaAcaoAtividadeCronograma
						.getCobrancaAtividade().getId();

				// seta o código do grupo de cobrança no filtro de rota
				filtroRota.adicionarParametro(new ParametroSimples(
						FiltroRota.COBRANCA_GRUPO_ID, grupoCobranca.getId()));

				// carrega os objetos necessários de rota
				// filtroRota.adicionarCaminhoParaCarregamentoEntidade("cobrancaCriterio");

				// pesqusia a coleção de rotas
				colecaoRotas = getControladorUtil().pesquisar(filtroRota,
						Rota.class.getName());

				// se a atividade for "simular" ou "emitir"
				if (atividade.intValue() == CobrancaAtividade.SIMULAR
						|| atividade.intValue() == CobrancaAtividade.EMITIR) {

					// chama o metódo de gerar atividade de ação de cobrança
					// o metódo vai retornar um objeto
					// GerarAtividadeAcaoCobrancaHelper contendo
					// a quantidade de documentos, a quantidade de itens
					// cobrados e o valor dos documentos
					GerarAtividadeAcaoCobrancaHelper gerarAtividadeAcaoCobrancaHelper = this
							.gerarAtividadeAcaoCobranca(grupoCobranca,
									anoMesReferenciaCicloCobranca,
									cobrancaAcaoAtividadeCronograma, null,
									colecaoRotas,
									cobrancaAcaoAtividadeCronograma
											.getCobrancaAcaoCronograma()
											.getCobrancaAcao(),
									cobrancaAcaoAtividadeCronograma
											.getCobrancaAtividade(),
									indicadorCriterioRota, null, null, null,
									anoMesReferenciaInicial,
									anoMesReferenciaFinal,
									dataVencimentoInicial, dataVencimentoFinal,
									new Date(), 1,null);

					// Soma os valores atuais mais os valores calculados
					Integer quantidadeDocumentosAtual = cobrancaAcaoAtividadeCronograma
							.getQuantidadeDocumentos();
					Integer quantidadeItensCobradosAtual = cobrancaAcaoAtividadeCronograma
							.getQuantidadeDocumentos();
					BigDecimal valorDocumentoAtual = cobrancaAcaoAtividadeCronograma
							.getValorDocumentos();

					if (quantidadeDocumentosAtual == null) {
						quantidadeDocumentosAtual = new Integer(0);
					}

					if (quantidadeItensCobradosAtual == null) {
						quantidadeItensCobradosAtual = new Integer(0);
					}

					if (valorDocumentoAtual == null) {
						valorDocumentoAtual = new BigDecimal("0.00");
					}

					cobrancaAcaoAtividadeCronograma
							.setQuantidadeDocumentos(quantidadeDocumentosAtual
									+ gerarAtividadeAcaoCobrancaHelper
											.getQuantidadeDocumentosCobranca());
					cobrancaAcaoAtividadeCronograma
							.setQuantidadeItensCobrados(quantidadeItensCobradosAtual
									+ gerarAtividadeAcaoCobrancaHelper
											.getQuantidadeItensCobradosDocumentos());
					cobrancaAcaoAtividadeCronograma
							.setValorDocumentos(valorDocumentoAtual
									.add(gerarAtividadeAcaoCobrancaHelper
											.getValorDocumentosCobranca()));
					cobrancaAcaoAtividadeCronograma.setRealizacao(dataCorrente);
					getControladorUtil().atualizar(
							cobrancaAcaoAtividadeCronograma);

					// se a atividade for encerrar atividade de ação de cobrança
				} else if (atividade == CobrancaAtividade.ENCERRAR) {
					// CHAMAR O [UC0000] Encerrar Atividade de Ação de Cobrança
					// O caso de uso ainda não foi especificado dia:06/02/2006
				}
			}
		}

		/*
		 * Executa as atividades de cobrança eventuais que foram previamente
		 * comandas
		 * =========================================================================
		 */
		// se o usuário selecionou alguma atividade de cobrança eventual
		if (idsAtividadesCobrancaEventuais != null) {
			// laço para executar as atividades de cobrança eventuais
			for (int i = 0; idsAtividadesCobrancaEventuais.length > i; i++) {

				// cria o filtro de cobrança ação atividade comando
				FiltroCobrancaAcaoAtividadeComando filtroCobrancaAcaoAtividadeComando = new FiltroCobrancaAcaoAtividadeComando();

				// adiciona o código da atividade de cobrança eventual no filtro
				filtroCobrancaAcaoAtividadeComando
						.adicionarParametro(new ParametroSimples(
								FiltroCobrancaAcaoAtividadeComando.ID,
								idsAtividadesCobrancaEventuais[i]));

				// carrega os objetos da pesquisa
				filtroCobrancaAcaoAtividadeComando
						.adicionarCaminhoParaCarregamentoEntidade("cobrancaGrupo");
				filtroCobrancaAcaoAtividadeComando
						.adicionarCaminhoParaCarregamentoEntidade("cobrancaAtividade");
				filtroCobrancaAcaoAtividadeComando
						.adicionarCaminhoParaCarregamentoEntidade("cobrancaAcao");

				// Carrega a ação precedente
				filtroCobrancaAcaoAtividadeComando
						.adicionarCaminhoParaCarregamentoEntidade("cobrancaAcao.cobrancaAcaoPredecessora.servicoTipo");

				filtroCobrancaAcaoAtividadeComando
						.adicionarCaminhoParaCarregamentoEntidade("cobrancaAcao.servicoTipo");

				filtroCobrancaAcaoAtividadeComando
						.adicionarCaminhoParaCarregamentoEntidade("cobrancaAcao.documentoTipo");

				filtroCobrancaAcaoAtividadeComando
						.adicionarCaminhoParaCarregamentoEntidade("cobrancaCriterio");
				
				filtroCobrancaAcaoAtividadeComando
					.adicionarCaminhoParaCarregamentoEntidade("cobrancaCriterio.criteriosSituacaoCobranca");

				filtroCobrancaAcaoAtividadeComando
					.adicionarCaminhoParaCarregamentoEntidade("cobrancaCriterio.criteriosSituacaoLigacaoAgua");
				
				filtroCobrancaAcaoAtividadeComando
					.adicionarCaminhoParaCarregamentoEntidade("cobrancaCriterio.criteriosSituacaoLigacaoEsgoto");
				
				// pesquisa a atividade de cobrança de comando no sistema
				Collection atividadesCobrancaComando = getControladorUtil()
						.pesquisar(filtroCobrancaAcaoAtividadeComando,
								CobrancaAcaoAtividadeComando.class.getName());

				// recupera o objeto CobrancaAcaoAtividadeComando da coleção
				CobrancaAcaoAtividadeComando cobrancaAcaoAtividadeComando = (CobrancaAcaoAtividadeComando) Util
						.retonarObjetoDeColecao(atividadesCobrancaComando);

				// recupera o grupo de cobrança
				CobrancaGrupo grupoCobranca = cobrancaAcaoAtividadeComando
						.getCobrancaGrupo();

				// recupera o código da atividade
				Integer atividade = cobrancaAcaoAtividadeComando
						.getCobrancaAtividade().getId();

				Integer indicadorCriterio = null;

				if (cobrancaAcaoAtividadeComando.getIndicadorCriterio() != null) {
					indicadorCriterio = cobrancaAcaoAtividadeComando
							.getIndicadorCriterio().intValue();
				}

				// pesquisa a coleção de rotas
				colecaoRotas = this.pesquisarListaRotasComando(grupoCobranca,
						cobrancaAcaoAtividadeComando);

				// se a atividade for "simular" ou "emitir"
				if (atividade.intValue() == CobrancaAtividade.SIMULAR
						|| atividade.intValue() == CobrancaAtividade.EMITIR) {

					// chama o metódo de gerar atividade de ação de cobrança
					// o metódo vai retornar um objeto
					// GerarAtividadeAcaoCobrancaHelper contendo
					// a quantidade de documentos, a quantidade de itens
					// cobrados e o valor dos documentos
					GerarAtividadeAcaoCobrancaHelper gerarAtividadeAcaoCobrancaHelper = this
							.gerarAtividadeAcaoCobranca(grupoCobranca,
									anoMesFaturamentoCorrente, null,
									cobrancaAcaoAtividadeComando, colecaoRotas,
									cobrancaAcaoAtividadeComando
											.getCobrancaAcao(),
									cobrancaAcaoAtividadeComando
											.getCobrancaAtividade(),
									indicadorCriterio,
									cobrancaAcaoAtividadeComando
											.getCobrancaCriterio(),
									cobrancaAcaoAtividadeComando.getCliente(),
									cobrancaAcaoAtividadeComando
											.getClienteRelacaoTipo(),
									cobrancaAcaoAtividadeComando
											.getAnoMesReferenciaContaInicial()
											.toString(),
									cobrancaAcaoAtividadeComando
											.getAnoMesReferenciaContaFinal()
											.toString(),
									cobrancaAcaoAtividadeComando
											.getDataVencimentoContaInicial(),
									cobrancaAcaoAtividadeComando
											.getDataVencimentoContaFinal(),
									new Date(), 1,null);

					// Soma os valores atuais mais os valores calculados

					// Recupera
					Integer quantidadeDocumentosAtual = cobrancaAcaoAtividadeComando
							.getQuantidadeDocumentos();
					Integer quantidadeItensCobradosAtual = cobrancaAcaoAtividadeComando
							.getQuantidadeDocumentos();
					BigDecimal valorDocumentoAtual = cobrancaAcaoAtividadeComando
							.getValorDocumentos();

					if (quantidadeDocumentosAtual == null) {
						quantidadeDocumentosAtual = new Integer(0);
					}

					if (quantidadeItensCobradosAtual == null) {
						quantidadeItensCobradosAtual = new Integer(0);
					}

					if (valorDocumentoAtual == null) {
						valorDocumentoAtual = new BigDecimal("0.00");
					}

					cobrancaAcaoAtividadeComando
							.setQuantidadeDocumentos(quantidadeDocumentosAtual
									+ gerarAtividadeAcaoCobrancaHelper
											.getQuantidadeDocumentosCobranca());
					cobrancaAcaoAtividadeComando
							.setQuantidadeItensCobrados(quantidadeItensCobradosAtual
									+ gerarAtividadeAcaoCobrancaHelper
											.getQuantidadeItensCobradosDocumentos());
					cobrancaAcaoAtividadeComando
							.setValorDocumentos(valorDocumentoAtual
									.add(gerarAtividadeAcaoCobrancaHelper
											.getValorDocumentosCobranca()));
					cobrancaAcaoAtividadeComando.setRealizacao(dataCorrente);
					getControladorUtil()
							.atualizar(cobrancaAcaoAtividadeComando);

					// se a atividade for encerrar atividade de ação de cobrança
				} else if (atividade == CobrancaAtividade.ENCERRAR) {
					// CHAMAR O [UC0000] Encerrar Atividade de Ação de Cobrança
					// O caso de uso ainda não foi especificado dia:06/02/2006
				}

			}
		}
	}

	/**
	 * [UC0251] Gerar Atividade de Ação de Cobrança
	 *
	 * @author Pedro Alexandre, Ivan Sergio, Raphael Rossiter
	 * @date 01/02/2006, 18/05/2009, 20/07/2009
	 *
	 * @param grupoCobranca
	 * @param anoMesReferenciaCicloCobranca
	 * @param cobrancaAcaoAtividadeCronograma
	 * @param cobrancaAcaoAtividadeComando
	 * @param rotas
	 * @param acaoCobranca
	 * @param atividadeCobranca
	 * @param indicadorCriterio
	 * @param criterioCobranca
	 * @param cliente
	 * @param relacaoClienteImovel
	 * @param anoMesReferenciaInicial
	 * @param anoMesReferenciaFinal
	 * @param dataVencimentoInicial
	 * @param dataVencimentoFinal
	 * @param dataAtual
	 * @param idFuncionalidadeIniciada
	 * @param clienteSuperior
	 * @return GerarAtividadeAcaoCobrancaHelper
	 * @throws ControladorException
	 */
	public GerarAtividadeAcaoCobrancaHelper gerarAtividadeAcaoCobranca(
			CobrancaGrupo grupoCobranca, int anoMesReferenciaCicloCobranca,
			CobrancaAcaoAtividadeCronograma cobrancaAcaoAtividadeCronograma,
			CobrancaAcaoAtividadeComando cobrancaAcaoAtividadeComando,
			Collection<Rota> rotas, CobrancaAcao acaoCobranca,
			CobrancaAtividade atividadeCobranca, Integer indicadorCriterio,
			CobrancaCriterio criterioCobranca, Cliente cliente,
			ClienteRelacaoTipo relacaoClienteImovel,
			String anoMesReferenciaInicial, String anoMesReferenciaFinal,
			Date dataVencimentoInicial, Date dataVencimentoFinal,
			Date dataAtual, int idFuncionalidadeIniciada,Cliente clienteSuperior)
			throws ControladorException {

		int idUnidadeIniciada = 0;
		System.out.println("*********************************");
		System.out.println("INICIO DO GERAR ACAO DE COBRANCA");
		System.out.println("*********************************");
		// -------------------------
		//
		// Registrar o início do processamento da Unidade de
		// Processamento
		// do Batch
		//
		// -------------------------

		if (cobrancaAcaoAtividadeComando != null) {
			idUnidadeIniciada = getControladorBatch()
					.iniciarUnidadeProcessamentoBatch(idFuncionalidadeIniciada,
							UnidadeProcessamento.COB_ACAO_ATIV_COMAND,
							cobrancaAcaoAtividadeComando.getId());
		} else {
			idUnidadeIniciada = getControladorBatch()
					.iniciarUnidadeProcessamentoBatch(idFuncionalidadeIniciada,
							UnidadeProcessamento.COB_ACAO_ATIV_CRONOG,
							cobrancaAcaoAtividadeCronograma.getId());
		}

		try {

			Date dataCorrente = new Date();

			// cria o objeto que vai armazenar o dados da atividade de ação de
			// cobrança
			GerarAtividadeAcaoCobrancaHelper gerarAtividadeAcaoCobrancaHelper = null;

			// cria uma variável que vai armazenar uma coleção de
			// CobrancaCriterioLinha
			// CobrancaCriterio cobrancaCriterioComando = null;

			Collection<CobrancaCriterioLinha> colecaoCobrancaCriterioLinhaComando = null;

			// se o indicador do critério for igual a 2(dois) - "usa o critério
			// do
			// comando"
			if (indicadorCriterio.intValue() == 2) {

				/*
				 * try { cobrancaCriterioComando = this.repositorioCobranca
				 * .pesquisarCobrancaCriterioIdCriterio(criterioCobranca
				 * .getId()); } catch (ErroRepositorioException ex) {
				 * ex.printStackTrace(); throw new
				 * ControladorException("erro.sistema", ex); }
				 */

				try {
					colecaoCobrancaCriterioLinhaComando = repositorioCobranca
							.pesquisarCobrancaCriterioLinhaCriterio(criterioCobranca
									.getId());
					
				} catch (ErroRepositorioException ex) {
					ex.printStackTrace();
					throw new ControladorException("erro.sistema", ex);
				}

			}
			if (colecaoCobrancaCriterioLinhaComando != null) {
				System.out.println("*********************************");
				System.out.println("QTD DE COBRANCA CRITERIO LINHA:"
						+ colecaoCobrancaCriterioLinhaComando.size());
				System.out.println("*********************************");
			}

			// se o cliente for informado
			if (cliente != null || clienteSuperior != null) {
				// [SB0001] - Gerar Atividade de Ação de Cobrança para os
				// Imóveis do
				// Cliente
				System.out.println("*********************************");
				System.out
						.println("INICIO gerarAtividadeAcaoCobrancaParaImoveisCliente:");
				System.out.println("*********************************");
				gerarAtividadeAcaoCobrancaHelper = this
						.gerarAtividadeAcaoCobrancaParaImoveisCliente(
								cobrancaAcaoAtividadeCronograma,
								cobrancaAcaoAtividadeComando, cliente,
								relacaoClienteImovel, indicadorCriterio,
								acaoCobranca, atividadeCobranca,
								colecaoCobrancaCriterioLinhaComando,
								criterioCobranca, anoMesReferenciaInicial,
								anoMesReferenciaFinal, dataVencimentoInicial,
								dataVencimentoFinal, dataAtual,clienteSuperior,null);
				System.out.println("*********************************");
				System.out
						.println("FIM gerarAtividadeAcaoCobrancaParaImoveisCliente:");
				System.out.println("*********************************");
			} else if(cobrancaAcaoAtividadeComando!=null &&
					cobrancaAcaoAtividadeComando.getLogradouro()!=null){
				// Gerar Atividade de Ação de Cobrança para os
				// Imóveis do
				// Logradouro
				System.out.println("*********************************");
				System.out
						.println("INICIO gerarAtividadeAcaoCobrancaParaImoveisLogradouro:");
				System.out.println("*********************************");
				gerarAtividadeAcaoCobrancaHelper = this
						.gerarAtividadeAcaoCobrancaParaImoveisLogradouro(
								cobrancaAcaoAtividadeCronograma,
								cobrancaAcaoAtividadeComando, cliente,
								relacaoClienteImovel, indicadorCriterio,
								acaoCobranca, atividadeCobranca,
								colecaoCobrancaCriterioLinhaComando,
								criterioCobranca, anoMesReferenciaInicial,
								anoMesReferenciaFinal, dataVencimentoInicial,
								dataVencimentoFinal, dataAtual,clienteSuperior,null);
				System.out.println("*********************************");
				System.out
						.println("FIM gerarAtividadeAcaoCobrancaParaImoveisLogradouro:");
				System.out.println("*********************************");
				
				
				
			} else {
				// [SB0002] - Gerar Atividade de Ação de Cobrança para os
				// imóveis da
				// Lista de Rotas
				System.out.println("*********************************");
				System.out
						.println("INICIO gerarAtividadeAcaoCobrancaParaImoveisListaRotas:");
				System.out.println("*********************************");
				gerarAtividadeAcaoCobrancaHelper = this
						.gerarAtividadeAcaoCobrancaParaImoveisListaRotasAntigo(
								cobrancaAcaoAtividadeCronograma,
								cobrancaAcaoAtividadeComando, rotas,
								indicadorCriterio, acaoCobranca,
								atividadeCobranca,
								colecaoCobrancaCriterioLinhaComando,
								criterioCobranca, anoMesReferenciaInicial,
								anoMesReferenciaFinal, dataVencimentoInicial,
								dataVencimentoFinal, dataAtual);
				System.out.println("*********************************");
				System.out
						.println("FIM gerarAtividadeAcaoCobrancaParaImoveisListaRotas:");
				System.out.println("*********************************");
			}

			//[SB0006] - Remover documentos de cobrança excedentes
			// Alterado por Francisco / Ana Breda em 14/04/09
			// Foi solicitada uma meta de quantidade de documentos a serem gerados
			// além dessa meta, só deverão permanecer documentos com valores acima 
			// do valor limite definido na tabela de ciclometa			
			boolean houveRemocaoDocumentos = removerDocumentosCobrancaExcedentes(grupoCobranca, anoMesReferenciaCicloCobranca, 
					cobrancaAcaoAtividadeCronograma, cobrancaAcaoAtividadeComando, acaoCobranca,null);				
			
			/**
			 * Item 6
			 * **********************************************************************************
			 */
			Integer quantidadeDocumentosAtual = null;
			Integer quantidadeItensCobradosAtual = null;
			BigDecimal valorDocumentoAtual = null;

			/**
			 * Item 6.1
			 * *******************************************************************************
			 */
			if (cobrancaAcaoAtividadeCronograma != null
					&& cobrancaAcaoAtividadeCronograma.getId() != null) {

				// Alterado por Francisco, em 30/07/09
				// Caso a acao de cobranca use metas, os documentos gerados podem ter sido reduzidos 
				// para contemplar as metas, dai, os totais de quantidade de documento, valor total realizado, e quantidade
				// de itens deverá ser calculados neste momento, apos a execucao do procedimento de removerDocumentosCobrancaExcedentes
				
				if (houveRemocaoDocumentos){
					Object[] totais = repositorioCobranca.calcularTotaisCronogramaAcaoCobranca(cobrancaAcaoAtividadeCronograma.getId());
					quantidadeItensCobradosAtual = (Integer) totais[0]; 
					valorDocumentoAtual = (BigDecimal) totais[1];
					quantidadeDocumentosAtual = (Integer) totais[2];
					
					cobrancaAcaoAtividadeCronograma.setQuantidadeDocumentos(quantidadeDocumentosAtual);
					cobrancaAcaoAtividadeCronograma.setQuantidadeItensCobrados(quantidadeItensCobradosAtual);
					cobrancaAcaoAtividadeCronograma.setValorDocumentos(valorDocumentoAtual);
					
				} else {
				
					quantidadeDocumentosAtual = cobrancaAcaoAtividadeCronograma
							.getQuantidadeDocumentos();
					quantidadeItensCobradosAtual = cobrancaAcaoAtividadeCronograma
							.getQuantidadeDocumentos();
					valorDocumentoAtual = cobrancaAcaoAtividadeCronograma
							.getValorDocumentos();
					if (quantidadeDocumentosAtual == null) {
						quantidadeDocumentosAtual = new Integer(0);
					}

					if (quantidadeItensCobradosAtual == null) {
						quantidadeItensCobradosAtual = new Integer(0);
					}

					if (valorDocumentoAtual == null) {
						valorDocumentoAtual = new BigDecimal("0.00");
					}

					cobrancaAcaoAtividadeCronograma
							.setQuantidadeDocumentos(quantidadeDocumentosAtual
									+ gerarAtividadeAcaoCobrancaHelper
											.getQuantidadeDocumentosCobranca());
					cobrancaAcaoAtividadeCronograma
							.setQuantidadeItensCobrados(quantidadeItensCobradosAtual
									+ gerarAtividadeAcaoCobrancaHelper
											.getQuantidadeItensCobradosDocumentos());
					cobrancaAcaoAtividadeCronograma
							.setValorDocumentos(valorDocumentoAtual
									.add(gerarAtividadeAcaoCobrancaHelper
											.getValorDocumentosCobranca()));
					
				}
				
				cobrancaAcaoAtividadeCronograma.setRealizacao(dataCorrente);
				cobrancaAcaoAtividadeCronograma
						.setUltimaAlteracao(dataCorrente);
				getControladorUtil().atualizar(cobrancaAcaoAtividadeCronograma);

				/**
				 * Item 6.2 - alterado por pedro alexandre dia 16/11/2006
				 * **********************************
				 */
			} else if (cobrancaAcaoAtividadeComando != null
					&& cobrancaAcaoAtividadeComando.getId() != null) {
				quantidadeDocumentosAtual = cobrancaAcaoAtividadeComando
						.getQuantidadeDocumentos();
				quantidadeItensCobradosAtual = cobrancaAcaoAtividadeComando
						.getQuantidadeDocumentos();
				valorDocumentoAtual = cobrancaAcaoAtividadeComando
						.getValorDocumentos();

				if (quantidadeDocumentosAtual == null) {
					quantidadeDocumentosAtual = new Integer(0);
				}

				if (quantidadeItensCobradosAtual == null) {
					quantidadeItensCobradosAtual = new Integer(0);
				}

				if (valorDocumentoAtual == null) {
					valorDocumentoAtual = new BigDecimal("0.00");
				}
				// caso a quantidade de dias de realização seja diferente de
				// nulo
				if (cobrancaAcaoAtividadeComando.getQuantidadeDiasRealizacao() != null) {
					// caso a atividade seja diferente de nulo
					if (cobrancaAcaoAtividadeComando.getCobrancaAtividade() != null) {
						// caso a atividade seja EMITIR, então a data de
						// encerramento prevista recebe soma a data de
						// realização com a quantidade de dias de realização
						if (cobrancaAcaoAtividadeComando.getCobrancaAtividade()
								.getId().equals(CobrancaAtividade.EMITIR)) {
							Date dataEncerramentoPrevista = Util
									.adicionarNumeroDiasDeUmaData(
											dataCorrente,
											cobrancaAcaoAtividadeComando
													.getQuantidadeDiasRealizacao());
							cobrancaAcaoAtividadeComando
									.setDataEncerramentoPrevista(dataEncerramentoPrevista);

						}
					}
				}

				if (cobrancaAcaoAtividadeComando.getCobrancaAtividade().getId()
						.equals(CobrancaAtividade.SIMULAR)) {
					cobrancaAcaoAtividadeComando
							.setDataEncerramentoPrevista(dataCorrente);

					cobrancaAcaoAtividadeComando
							.setDataEncerramentoRealizada(dataCorrente);
				}

				cobrancaAcaoAtividadeComando
						.setQuantidadeDocumentos(quantidadeDocumentosAtual
								+ gerarAtividadeAcaoCobrancaHelper
										.getQuantidadeDocumentosCobranca());
				cobrancaAcaoAtividadeComando
						.setQuantidadeItensCobrados(quantidadeItensCobradosAtual
								+ gerarAtividadeAcaoCobrancaHelper
										.getQuantidadeItensCobradosDocumentos());
				cobrancaAcaoAtividadeComando
						.setValorDocumentos(valorDocumentoAtual
								.add(gerarAtividadeAcaoCobrancaHelper
										.getValorDocumentosCobranca()));
				cobrancaAcaoAtividadeComando.setRealizacao(dataCorrente);
				cobrancaAcaoAtividadeComando.setUltimaAlteracao(dataCorrente);
				getControladorUtil().atualizar(cobrancaAcaoAtividadeComando);
				
				gerarAtividadeAcaoCobrancaHelper = null;
			}
								
			/**
			 * Fim Item 6
			 * **********************************************************************************
			 */
			System.out.println("**************************");
			System.out.println("FIM GERAR ACAO DE COBRANCA");
			System.out.println("**************************");
			
			// 7. O sistema emite os documento de cobrança gerados
			if (acaoCobranca.getId() != null) {
				
				EmissaoDocumentoCobrancaHelper helper = new EmissaoDocumentoCobrancaHelper();
				
				helper.setAcaoCobranca(acaoCobranca);
				helper.setCobrancaAcaoAtividadeCronograma(cobrancaAcaoAtividadeCronograma);
				helper.setCobrancaAcaoAtividadeComando(cobrancaAcaoAtividadeComando);
				helper.setDataAtual(dataAtual);
				helper.setGrupoCobranca(grupoCobranca);
				helper.setCriterioCobranca(criterioCobranca);
				
				this.gerarAtividadeAcaoCobrancaEmissaoDocumento(helper);

			}

			// retornar um objeto que vai conter a quantidade de documentos de
			// cobrança, a quantidade de itens cobradosnos documentos
			// de cobrança e o valor dos documentos de cobrança
			// --------------------------------------------------------
			//
			// Registrar o fim da execução da Unidade de Processamento
			//
			// --------------------------------------------------------
			getControladorBatch().encerrarUnidadeProcessamentoBatch(null,
					idUnidadeIniciada, false);

			// return gerarAtividadeAcaoCobrancaHelper;
			return null;

		} catch (Throwable e) {
			// Este catch serve para interceptar qualquer exceção que o processo
			// batch venha a lançar e garantir que a unidade de processamento do
			// batch será atualizada com o erro ocorrido

			e.printStackTrace();

			getControladorBatch().encerrarUnidadeProcessamentoBatch(e,
					idUnidadeIniciada, true);

			throw new ControladorException("erro.sistema",e);
		}

	}
	
	/**
	 * [UC0251] Gerar Atividade de Ação de Cobrança
	 * [SB0008] Gerar Atividade de Ação de Cobrança para a Relação de Imóveis do Arquivo
	 * 
	 * @author Hugo Azevedo
	 * @created 16/10/2012
	 * 
	 */ 
	public GerarAtividadeAcaoCobrancaHelper gerarAtividadeAcaoCobrancaParaRelacaoImoveisArquivo(
			CobrancaAcaoAtividadeCronograma cobrancaAcaoAtividadeCronograma,
			CobrancaAcaoAtividadeComando cobrancaAcaoAtividadeComando,
			Cliente cliente,
			ClienteRelacaoTipo relacaoClienteImovel,
			Integer indicadorCriterio,
			CobrancaAcao acaoCobranca,
			CobrancaAtividade atividadeCobranca,
			Collection<CobrancaCriterioLinha> colecaoCobrancaCriterioLinhaComando,
			CobrancaCriterio cobrancaCriterioComando,
			String anoMesReferenciaInicial, String anoMesReferenciaFinal,
			Date dataVencimentoInicial, Date dataVencimentoFinal,
			Date dataAtual, Cliente clienteSuperior,Integer idCobrancaDocumentoControleGeracao,
			Integer quantidadeDiasVencimento, 
			Integer ligacaoAlteradaDebito)
			throws ControladorException {
		
			
			// cria o objeto que vai armazenas os dados
			GerarAtividadeAcaoCobrancaHelper gerarAtividadeAcaoCobrancaHelper = new GerarAtividadeAcaoCobrancaHelper();

			// inicializa os valores de quantidade de documentos, quantidade de
			// itens cobrados e valor do documento de cobrança
			gerarAtividadeAcaoCobrancaHelper.setQuantidadeDocumentosCobranca(0);
			gerarAtividadeAcaoCobrancaHelper
					.setQuantidadeItensCobradosDocumentos(0);
			gerarAtividadeAcaoCobrancaHelper
					.setValorDocumentosCobranca(new BigDecimal("0.00"));

			// cria o objeto de critério de cobrança
			CobrancaCriterio cobrancaCriterio = null;

			// cria a coleção que vai armazenar as linhas do critério de cobrança de
			// cada imóvel
			Collection<CobrancaCriterioLinha> colecaoCobrancaCriterioLinha = new ArrayList();
			
			try {
			
				//1. O sistema seleciona os imóveis informados
				Collection colecaoIdsImovel = repositorioCobranca.obterImoveisComandoAtividadeImovel(null, cobrancaAcaoAtividadeComando.getId());
			
				if(colecaoIdsImovel != null && colecaoIdsImovel.size() > 0){
		
					Iterator it = colecaoIdsImovel.iterator();
					
					//2. Para cada imóvel selecionado
					labelRotasClientes: while(it.hasNext()){
						
						Integer idImovel = (Integer)it.next();
						
						Object[] arrayImovel = getControladorImovel().obterParametrosImovelRelacaoArquivo(idImovel);
						
						Imovel imovel = new Imovel();
						Rota rota = new Rota();
						LigacaoAguaSituacao ligacaoAguaSituacao = new LigacaoAguaSituacao();
						LigacaoEsgotoSituacao ligacaoEsgotoSituacao = new LigacaoEsgotoSituacao();
						ImovelPerfil imovelPerfil = new ImovelPerfil();
						Empresa empresa = new Empresa();
						Quadra quadra = new Quadra();
						Localidade localidade = new Localidade();
						SetorComercial setorComercial = new SetorComercial();
						CobrancaSituacaoTipo cobrancaSituacaoTipo = null;
	
						if (arrayImovel[0] != null) {
							imovel.setId((Integer) arrayImovel[0]);
						}
	
						if (arrayImovel[1] != null) {
							rota.setId((Integer) arrayImovel[1]);
						}
	
						if (arrayImovel[2] != null) {
							ligacaoAguaSituacao.setId((Integer) arrayImovel[2]);
						}
	
						if (arrayImovel[3] != null) {
							ligacaoEsgotoSituacao.setId((Integer) arrayImovel[3]);
						}
	
						if (arrayImovel[4] != null) {
							imovelPerfil.setId((Integer) arrayImovel[4]);
						}
						// caso a ação de cobrança gere a ordem de serviço
						if (acaoCobranca.getServicoTipo() != null
								&& acaoCobranca.getServicoTipo().getId() != null) {
							// seta a empresa cobranca
							if (arrayImovel[14] != null) {
								empresa.setId((Integer) arrayImovel[14]);
							}
						} else {
							// seta a empresa
							if (arrayImovel[5] != null) {
								empresa.setId((Integer) arrayImovel[5]);
							}
						}
	
						if (arrayImovel[6] != null) {
							localidade.setId((Integer) arrayImovel[6]);
						}
	
						if (arrayImovel[7] != null) {
							setorComercial.setCodigo(((Integer) arrayImovel[7])
									.intValue());
						}
	
						if (arrayImovel[8] != null) {
							quadra.setNumeroQuadra(((Integer) arrayImovel[8])
									.intValue());
						}
	
						if (arrayImovel[9] != null) {
							imovel.setLote(((Short) arrayImovel[9]).shortValue());
						}
	
						if (arrayImovel[10] != null) {
							imovel.setLote(((Short) arrayImovel[10]).shortValue());
						}
	
						if (arrayImovel[11] != null) {
							quadra.setId(((Integer) arrayImovel[11]).intValue());
						}
						if (arrayImovel[12] != null) {
							cobrancaSituacaoTipo = new CobrancaSituacaoTipo();
							cobrancaSituacaoTipo.setId(((Integer) arrayImovel[12])
									.intValue());
						}
						if (arrayImovel[13] != null) {
							imovel.setIndicadorDebitoConta((Short) arrayImovel[13]);
						}
	
						imovel.setLigacaoAguaSituacao(ligacaoAguaSituacao);
						imovel.setLigacaoEsgotoSituacao(ligacaoEsgotoSituacao);
						imovel.setImovelPerfil(imovelPerfil);
						rota.setEmpresa(empresa);
						quadra.setRota(rota);
						imovel.setQuadra(quadra);
						imovel.setLocalidade(localidade);
						imovel.setSetorComercial(setorComercial);
						imovel.setCobrancaSituacaoTipo(cobrancaSituacaoTipo);
						
						
						//2.1. Caso o indicador do critério a ser utilizado seja igual a (1) ("usa o critério da rota")
						if (indicadorCriterio.intValue() == 1) {
							
							//o sistema seleciona o critério de cobrança da rota do imóvel e as linhas associadas ao critério
							cobrancaCriterio = repositorioCobranca
									.pesquisarCriterioCobrancaRota(
											rota.getId(), acaoCobranca.getId());
							colecaoCobrancaCriterioLinha = repositorioCobranca
									.pesquisarCobrancaCriterioLinhaCriterio(cobrancaCriterio
											.getId());
						} else {
							// a coleção de linha de critério de cobrança vai ser a do
							// comando
							colecaoCobrancaCriterioLinha = colecaoCobrancaCriterioLinhaComando;

							// o critério de cobrança vai ser o do comando
							cobrancaCriterio = cobrancaCriterioComando;
						}
						
						// cria o objeto que vai armazenar temporariamente os dados
						// retornados
						// pelo [SB0003], para cada imóvel
						GerarAtividadeAcaoCobrancaHelper gerarAtividadeAcaoCobrancaHelperTemp = new GerarAtividadeAcaoCobrancaHelper();
	
						// [SB0003] - Gerar Atividade de Ação de Cobrança para o
						// imóvel
						gerarAtividadeAcaoCobrancaHelperTemp = gerarAtividadeAcaoCobrancaParaImovel(
								cobrancaAcaoAtividadeCronograma,
								cobrancaAcaoAtividadeComando, imovel,
								indicadorCriterio, acaoCobranca, atividadeCobranca,
								cobrancaCriterio, colecaoCobrancaCriterioLinha,
								anoMesReferenciaInicial, anoMesReferenciaFinal,
								dataVencimentoInicial, dataVencimentoFinal,
								dataAtual);
						
						
						// se o objeto retornado for diferente de nulo
						if (gerarAtividadeAcaoCobrancaHelperTemp != null) {
							// recupera a quantidade de documentos de cobrança,
							// quantidade
							// de itens cobrados e o valor do documento
							// do objeto retornado pelo [SB0003]
							gerarAtividadeAcaoCobrancaHelper
									.setQuantidadeDocumentosCobranca(gerarAtividadeAcaoCobrancaHelper
											.getQuantidadeDocumentosCobranca() + 1);
							gerarAtividadeAcaoCobrancaHelper
									.setQuantidadeItensCobradosDocumentos(gerarAtividadeAcaoCobrancaHelper
											.getQuantidadeItensCobradosDocumentos()
											+ gerarAtividadeAcaoCobrancaHelperTemp
													.getQuantidadeItensCobradosDocumentos());
							gerarAtividadeAcaoCobrancaHelper
									.setValorDocumentosCobranca(gerarAtividadeAcaoCobrancaHelper
											.getValorDocumentosCobranca()
											.add(
													gerarAtividadeAcaoCobrancaHelperTemp
															.getValorDocumentosCobranca()));
	
							/** alterado por pedro alexandre dia 16/11/2006 */
							gerarAtividadeAcaoCobrancaHelper
									.getColecaoDocumentosCobranca()
									.addAll(
											gerarAtividadeAcaoCobrancaHelperTemp
													.getColecaoDocumentosCobranca());
	
							// Caso seja um comando eventual e a quantidade de
							// documentos gerados seja igual a quantidade máxima
							// de documentos especificada no comando
							
							// Alterado por Chico, 06/06/08, analista: Ana Breda
							// caso seja um comando de cronograma, verificar é foi preenchida a quantidade
							// maxima de documentos a ser gerada
							if ((cobrancaAcaoAtividadeComando != null
									&& cobrancaAcaoAtividadeComando
											.getQuantidadeMaximaDocumentos() != null
									&& cobrancaAcaoAtividadeComando
											.getQuantidadeMaximaDocumentos()
											.equals(gerarAtividadeAcaoCobrancaHelper
												.getQuantidadeDocumentosCobranca())) ||
								(cobrancaAcaoAtividadeCronograma != null
									&& cobrancaAcaoAtividadeCronograma
											.getQuantidadeMaximaDocumentos() != null
									&& cobrancaAcaoAtividadeCronograma
											.getQuantidadeMaximaDocumentos()
											.equals(gerarAtividadeAcaoCobrancaHelper
												.getQuantidadeDocumentosCobranca()))) {							
								// não roda mais os imóveis das rotas
								// posteriores
								break labelRotasClientes;
							}	
						}
					}
				}
				
			//atualizar a quantidade de documentos cobrados, a quantidade de itens cobrados 
			//e o valor total dos documentos na tabela cobranca_documento_controle_geracao
			this.atualizarCobrancaDocumentoControleGeracao(
					idCobrancaDocumentoControleGeracao,
					gerarAtividadeAcaoCobrancaHelper.getQuantidadeDocumentosCobranca(),
					gerarAtividadeAcaoCobrancaHelper.getQuantidadeItensCobradosDocumentos(),
					gerarAtividadeAcaoCobrancaHelper.getValorDocumentosCobranca());	
			
		} catch (ErroRepositorioException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		
		// retorna o objeto contendo o total de quantidades de documentos de
		// cobrança, quantidade de itens cobrados e total do valor dos
		// documentos de cobrança
		return gerarAtividadeAcaoCobrancaHelper;
	}


	/**
	 * [UC0251] Gerar Atividade de Ação de Cobrança [SB0001] Gerar Atividade de
	 * Ação de Cobrança para os Imóveis do Cliente
	 * 
	 * @author Pedro Alexandre
	 * @created 07/02/2006
	 * 
	 * @param cobrancaAcaoAtividadeCronograma
	 *            Atividade de Ação de Cobrança de Cronograma
	 * @param cobrancaAcaoAtividadeComando
	 *            Atividade de Ação de Cobrança de Comando
	 * @param cliente
	 *            Cliente
	 * @param relacaoClienteImovel
	 *            Tipo de relação entre cliente e imóvel
	 * @param indicadorCriterio
	 *            Indicador do critério a ser utilizado
	 * @param acaoCobranca
	 *            Ação de Cobrança
	 * @param atividadeCobranca
	 *            Atividade de Cobrança
	 * @param colecaoCobrancaCriterioLinhaComando
	 *            Coleção de linha de critério de cobrança do comando
	 * @param cobrancaCriterioComando
	 *            Critério de Cobrança do Comando
	 * @param anoMesReferenciaInicial
	 *            Ano/Mês de referência inicial
	 * @param anoMesReferenciaFinal
	 *            Ano/Mês de referência final
	 * @param dataVencimentoInicial
	 *            Data de vencimento inicial
	 * @param dataVencimentoFinal
	 *            Data de vencimento final
	 * 
	 * @throws ControladorException
	 *             Controlador Exception
	 */
	public GerarAtividadeAcaoCobrancaHelper gerarAtividadeAcaoCobrancaParaImoveisCliente(
			CobrancaAcaoAtividadeCronograma cobrancaAcaoAtividadeCronograma,
			CobrancaAcaoAtividadeComando cobrancaAcaoAtividadeComando,
			Cliente cliente,
			ClienteRelacaoTipo relacaoClienteImovel,
			Integer indicadorCriterio,
			CobrancaAcao acaoCobranca,
			CobrancaAtividade atividadeCobranca,
			Collection<CobrancaCriterioLinha> colecaoCobrancaCriterioLinhaComando,
			CobrancaCriterio cobrancaCriterioComando,
			String anoMesReferenciaInicial, String anoMesReferenciaFinal,
			Date dataVencimentoInicial, Date dataVencimentoFinal,
			Date dataAtual, Cliente clienteSuperior,Integer idCobrancaDocumentoControleGeracao)
			throws ControladorException {

		// cria o objeto que vai armazenas os dados
		GerarAtividadeAcaoCobrancaHelper gerarAtividadeAcaoCobrancaHelper = new GerarAtividadeAcaoCobrancaHelper();

		// inicializa os valores de quantidade de documentos, quantidade de
		// itens cobrados e valor do documento de cobrança
		gerarAtividadeAcaoCobrancaHelper.setQuantidadeDocumentosCobranca(0);
		gerarAtividadeAcaoCobrancaHelper
				.setQuantidadeItensCobradosDocumentos(0);
		gerarAtividadeAcaoCobrancaHelper
				.setValorDocumentosCobranca(new BigDecimal("0.00"));

		// cria o objeto de critério de cobrança
		CobrancaCriterio cobrancaCriterio = null;

		// cria a coleção que vai armazenar as linhas do critério de cobrança de
		// cada imóvel
		Collection<CobrancaCriterioLinha> colecaoCobrancaCriterioLinha = new ArrayList();

		if (indicadorCriterio.intValue() != 1) {

			// a coleção de linha de critério de cobrança vai ser a do
			// comando
			colecaoCobrancaCriterioLinha = colecaoCobrancaCriterioLinhaComando;

			// o critério de cobrança vai ser o do comando
			cobrancaCriterio = cobrancaCriterioComando;
		}

		boolean flagTerminou = false;
		int numeroInicial = 0;
		
		while (!flagTerminou) {
			
			Object[] arrayImovel = null;
			Imovel imovel = null;
			Collection colecaoImoveis = null;
			Rota rota = null;

			// item 1
			// Alterado por Sávio Luiz data:26/11/2007
			if (clienteSuperior != null) {

				Collection<Integer> colecaoIdsClientes = getControladorCadastro()
						.pesquisarClientesSubordinados(clienteSuperior.getId());
				if (colecaoIdsClientes != null && !colecaoIdsClientes.isEmpty()) {
					colecaoIdsClientes.add(clienteSuperior.getId());
					colecaoImoveis = getControladorImovel()
							.pesquisarImoveisClientesRelacao(
									colecaoIdsClientes, numeroInicial);
				} else {
					colecaoIdsClientes = new ArrayList();
					colecaoIdsClientes.add(clienteSuperior.getId());
					colecaoImoveis = getControladorImovel()
							.pesquisarImoveisClientesRelacao(
									colecaoIdsClientes, numeroInicial);
				}

			} else {
				colecaoImoveis = getControladorImovel()
						.pesquisarImoveisClientesRelacao(cliente,
								relacaoClienteImovel, numeroInicial);
			}

			if (colecaoImoveis != null && !colecaoImoveis.isEmpty()) {

				if (colecaoImoveis.size() < 500) {
					flagTerminou = true;
				}

				Iterator iteratorColecaoImoveis = colecaoImoveis.iterator();

				LigacaoAguaSituacao ligacaoAguaSituacao = null;
				LigacaoEsgotoSituacao ligacaoEsgotoSituacao = null;
				ImovelPerfil imovelPerfil = null;
				Empresa empresa = null;
				Quadra quadra = null;
				// Rota rotaEmpresa = null;
				Localidade localidade = null;
				SetorComercial setorComercial = null;
				CobrancaSituacaoTipo cobrancaSituacaoTipo = null;

				labelRotasClientes: while (iteratorColecaoImoveis.hasNext()) {

					arrayImovel = (Object[]) iteratorColecaoImoveis.next();

					imovel = new Imovel();
					rota = new Rota();
					ligacaoAguaSituacao = new LigacaoAguaSituacao();
					ligacaoEsgotoSituacao = new LigacaoEsgotoSituacao();
					imovelPerfil = new ImovelPerfil();
					empresa = new Empresa();
					quadra = new Quadra();
					localidade = new Localidade();
					setorComercial = new SetorComercial();

					if (arrayImovel[0] != null) {
						imovel.setId((Integer) arrayImovel[0]);
					}

					if (arrayImovel[1] != null) {
						rota.setId((Integer) arrayImovel[1]);
					}

					if (arrayImovel[2] != null) {
						ligacaoAguaSituacao.setId((Integer) arrayImovel[2]);
					}

					if (arrayImovel[3] != null) {
						ligacaoEsgotoSituacao.setId((Integer) arrayImovel[3]);
					}

					if (arrayImovel[4] != null) {
						imovelPerfil.setId((Integer) arrayImovel[4]);
					}
					// caso a ação de cobrança gere a ordem de serviço
					if (acaoCobranca.getServicoTipo() != null
							&& acaoCobranca.getServicoTipo().getId() != null) {
						// seta a empresa cobranca
						if (arrayImovel[14] != null) {
							empresa.setId((Integer) arrayImovel[14]);
						}
					} else {
						// seta a empresa
						if (arrayImovel[5] != null) {
							empresa.setId((Integer) arrayImovel[5]);
						}
					}

					if (arrayImovel[6] != null) {
						localidade.setId((Integer) arrayImovel[6]);
					}

					if (arrayImovel[7] != null) {
						setorComercial.setCodigo(((Integer) arrayImovel[7])
								.intValue());
					}

					if (arrayImovel[8] != null) {
						quadra.setNumeroQuadra(((Integer) arrayImovel[8])
								.intValue());
					}

					if (arrayImovel[9] != null) {
						imovel.setLote(((Short) arrayImovel[9]).shortValue());
					}

					if (arrayImovel[10] != null) {
						imovel.setLote(((Short) arrayImovel[10]).shortValue());
					}

					if (arrayImovel[11] != null) {
						quadra.setId(((Integer) arrayImovel[11]).intValue());
					}
					if (arrayImovel[12] != null) {
						cobrancaSituacaoTipo = new CobrancaSituacaoTipo();
						cobrancaSituacaoTipo.setId(((Integer) arrayImovel[12])
								.intValue());
					}
					if (arrayImovel[13] != null) {
						imovel.setIndicadorDebitoConta((Short) arrayImovel[13]);
					}

					imovel.setLigacaoAguaSituacao(ligacaoAguaSituacao);
					imovel.setLigacaoEsgotoSituacao(ligacaoEsgotoSituacao);
					imovel.setImovelPerfil(imovelPerfil);
					rota.setEmpresa(empresa);
					quadra.setRota(rota);
					imovel.setQuadra(quadra);
					imovel.setLocalidade(localidade);
					imovel.setSetorComercial(setorComercial);
					imovel.setCobrancaSituacaoTipo(cobrancaSituacaoTipo);

					if (indicadorCriterio.intValue() == 1) {
						try {
							// O critério de cobrança a ser utilizado será o da
							// rota
							cobrancaCriterio = repositorioCobranca
									.pesquisarCriterioCobrancaRota(
											rota.getId(), acaoCobranca.getId());
							colecaoCobrancaCriterioLinha = repositorioCobranca
									.pesquisarCobrancaCriterioLinhaCriterio(cobrancaCriterio
											.getId());
							
						} catch (ErroRepositorioException ex) {
							// levanta a exceção para a próxima camada
							throw new ControladorException("erro.sistema", ex);
						}
					}

					// cria o objeto que vai armazenar temporariamente os dados
					// retornados
					// pelo [SB0003], para cada imóvel
					GerarAtividadeAcaoCobrancaHelper gerarAtividadeAcaoCobrancaHelperTemp = new GerarAtividadeAcaoCobrancaHelper();

					// [SB0003] - Gerar Atividade de Ação de Cobrança para o
					// imóvel
					gerarAtividadeAcaoCobrancaHelperTemp = gerarAtividadeAcaoCobrancaParaImovel(
							cobrancaAcaoAtividadeCronograma,
							cobrancaAcaoAtividadeComando, imovel,
							indicadorCriterio, acaoCobranca, atividadeCobranca,
							cobrancaCriterio, colecaoCobrancaCriterioLinha,
							anoMesReferenciaInicial, anoMesReferenciaFinal,
							dataVencimentoInicial, dataVencimentoFinal,
							dataAtual);

					// se o objeto retornado for diferente de nulo
					if (gerarAtividadeAcaoCobrancaHelperTemp != null) {
						// recupera a quantidade de documentos de cobrança,
						// quantidade
						// de itens cobrados e o valor do documento
						// do objeto retornado pelo [SB0003]
						gerarAtividadeAcaoCobrancaHelper
								.setQuantidadeDocumentosCobranca(gerarAtividadeAcaoCobrancaHelper
										.getQuantidadeDocumentosCobranca() + 1);
						gerarAtividadeAcaoCobrancaHelper
								.setQuantidadeItensCobradosDocumentos(gerarAtividadeAcaoCobrancaHelper
										.getQuantidadeItensCobradosDocumentos()
										+ gerarAtividadeAcaoCobrancaHelperTemp
												.getQuantidadeItensCobradosDocumentos());
						gerarAtividadeAcaoCobrancaHelper
								.setValorDocumentosCobranca(gerarAtividadeAcaoCobrancaHelper
										.getValorDocumentosCobranca()
										.add(
												gerarAtividadeAcaoCobrancaHelperTemp
														.getValorDocumentosCobranca()));

						/** alterado por pedro alexandre dia 16/11/2006 */
						gerarAtividadeAcaoCobrancaHelper
								.getColecaoDocumentosCobranca()
								.addAll(
										gerarAtividadeAcaoCobrancaHelperTemp
												.getColecaoDocumentosCobranca());

						// Caso seja um comando eventual e a quantidade de
						// documentos gerados seja igual a quantidade máxima
						// de documentos especificada no comando
						
						// Alterado por Chico, 06/06/08, analista: Ana Breda
						// caso seja um comando de cronograma, verificar é foi preenchida a quantidade
						// maxima de documentos a ser gerada
						if ((cobrancaAcaoAtividadeComando != null
								&& cobrancaAcaoAtividadeComando
										.getQuantidadeMaximaDocumentos() != null
								&& cobrancaAcaoAtividadeComando
										.getQuantidadeMaximaDocumentos()
										.equals(gerarAtividadeAcaoCobrancaHelper
											.getQuantidadeDocumentosCobranca())) ||
							(cobrancaAcaoAtividadeCronograma != null
								&& cobrancaAcaoAtividadeCronograma
										.getQuantidadeMaximaDocumentos() != null
								&& cobrancaAcaoAtividadeCronograma
										.getQuantidadeMaximaDocumentos()
										.equals(gerarAtividadeAcaoCobrancaHelper
											.getQuantidadeDocumentosCobranca()))) {							// não roda mais os imóveis das rotas
							// posteriores
							break labelRotasClientes;
						}
						
					}

					// se o indicador do critério for igual a 2(dois) - "usa o
					// critério do comando"
					ligacaoAguaSituacao = null;
					ligacaoEsgotoSituacao = null;
					imovelPerfil = null;
					empresa = null;
					quadra = null;
					// Rota rotaEmpresa = null;
					localidade = null;
					setorComercial = null;
					cobrancaSituacaoTipo = null;
					rota = null;
					imovel = null;
				}
			} else {
				flagTerminou = true;
			}
			numeroInicial = numeroInicial + 500;
			colecaoImoveis = null;
		}

		// fim item 2

		//atualizar a quantidade de documentos cobrados, a quantidade de itens cobrados 
		//e o valor total dos documentos na tabela cobranca_documento_controle_geracao
		this.atualizarCobrancaDocumentoControleGeracao(
				idCobrancaDocumentoControleGeracao,
				gerarAtividadeAcaoCobrancaHelper.getQuantidadeDocumentosCobranca(),
				gerarAtividadeAcaoCobrancaHelper.getQuantidadeItensCobradosDocumentos(),
				gerarAtividadeAcaoCobrancaHelper.getValorDocumentosCobranca());	
		
		
		// retorna o objeto contendo o total de quantidades de documentos de
		// cobrança, quantidade de itens cobrados e total do valor dos
		// documentos de cobrança
		return gerarAtividadeAcaoCobrancaHelper;
	}
	
	/**
	 * [UC0251] Gerar Atividade de Ação de Cobrança --- Gerar Atividade de
	 * Ação de Cobrança para os Imóveis do Logradouro
	 * 
	 * @author Hugo Amorim
	 * @created 11/11/2006
	 * 
	 * @param cobrancaAcaoAtividadeCronograma
	 *            Atividade de Ação de Cobrança de Cronograma
	 * @param cobrancaAcaoAtividadeComando
	 *            Atividade de Ação de Cobrança de Comando
	 * @param cliente
	 *            Cliente
	 * @param relacaoClienteImovel
	 *            Tipo de relação entre cliente e imóvel
	 * @param indicadorCriterio
	 *            Indicador do critério a ser utilizado
	 * @param acaoCobranca
	 *            Ação de Cobrança
	 * @param atividadeCobranca
	 *            Atividade de Cobrança
	 * @param colecaoCobrancaCriterioLinhaComando
	 *            Coleção de linha de critério de cobrança do comando
	 * @param cobrancaCriterioComando
	 *            Critério de Cobrança do Comando
	 * @param anoMesReferenciaInicial
	 *            Ano/Mês de referência inicial
	 * @param anoMesReferenciaFinal
	 *            Ano/Mês de referência final
	 * @param dataVencimentoInicial
	 *            Data de vencimento inicial
	 * @param dataVencimentoFinal
	 *            Data de vencimento final
	 * 
	 * @throws ControladorException
	 *             Controlador Exception
	 */
	public GerarAtividadeAcaoCobrancaHelper gerarAtividadeAcaoCobrancaParaImoveisLogradouro(
			CobrancaAcaoAtividadeCronograma cobrancaAcaoAtividadeCronograma,
			CobrancaAcaoAtividadeComando cobrancaAcaoAtividadeComando,
			Cliente cliente,
			ClienteRelacaoTipo relacaoClienteImovel,
			Integer indicadorCriterio,
			CobrancaAcao acaoCobranca,
			CobrancaAtividade atividadeCobranca,
			Collection<CobrancaCriterioLinha> colecaoCobrancaCriterioLinhaComando,
			CobrancaCriterio cobrancaCriterioComando,
			String anoMesReferenciaInicial, String anoMesReferenciaFinal,
			Date dataVencimentoInicial, Date dataVencimentoFinal,
			Date dataAtual, Cliente clienteSuperior, Integer idCobrancaDocumentoControleGeracao)
			throws ControladorException {

		// cria o objeto que vai armazenas os dados
		GerarAtividadeAcaoCobrancaHelper gerarAtividadeAcaoCobrancaHelper = new GerarAtividadeAcaoCobrancaHelper();

		// inicializa os valores de quantidade de documentos, quantidade de
		// itens cobrados e valor do documento de cobrança
		gerarAtividadeAcaoCobrancaHelper.setQuantidadeDocumentosCobranca(0);
		gerarAtividadeAcaoCobrancaHelper
				.setQuantidadeItensCobradosDocumentos(0);
		gerarAtividadeAcaoCobrancaHelper
				.setValorDocumentosCobranca(new BigDecimal("0.00"));

		// cria o objeto de critério de cobrança
		CobrancaCriterio cobrancaCriterio = null;

		// cria a coleção que vai armazenar as linhas do critério de cobrança de
		// cada imóvel
		Collection<CobrancaCriterioLinha> colecaoCobrancaCriterioLinha = new ArrayList();

		Imovel fluxoImovel = null;
		Collection colecaoImoveis = null;

		if (indicadorCriterio.intValue() != 1) {

			// a coleção de linha de critério de cobrança vai ser a do
			// comando
			colecaoCobrancaCriterioLinha = colecaoCobrancaCriterioLinhaComando;

			// o critério de cobrança vai ser o do comando
			cobrancaCriterio = cobrancaCriterioComando;
		}

			FiltroImovel filtroImovel = new FiltroImovel();
			
			filtroImovel.adicionarParametro(
					new ParametroSimples(FiltroImovel.LOGRADOURO_ID,
							cobrancaAcaoAtividadeComando.getId()));
			
			filtroImovel.adicionarCaminhoParaCarregamentoEntidade("localidade");			
			filtroImovel.adicionarCaminhoParaCarregamentoEntidade("ligacaoAguaSituacao");		
			filtroImovel.adicionarCaminhoParaCarregamentoEntidade("ligacaoEsgotoSituacao");		
			filtroImovel.adicionarCaminhoParaCarregamentoEntidade("imovelPerfil");				
			filtroImovel.adicionarCaminhoParaCarregamentoEntidade("quadra");
			filtroImovel.adicionarCaminhoParaCarregamentoEntidade("quadra.rota");
			filtroImovel.adicionarCaminhoParaCarregamentoEntidade("quadra.rota.empresa");
			filtroImovel.adicionarCaminhoParaCarregamentoEntidade("quadra.rota.empresaCobranca");
			filtroImovel.adicionarCaminhoParaCarregamentoEntidade("localidade");			
			filtroImovel.adicionarCaminhoParaCarregamentoEntidade("setorComercial");			
			filtroImovel.adicionarCaminhoParaCarregamentoEntidade("cobrancaSituacaoTipo");	
			
			colecaoImoveis = this.getControladorUtil().pesquisar(filtroImovel, Imovel.class.getName());			
			
			if (colecaoImoveis != null && !colecaoImoveis.isEmpty()) {

				Iterator iteratorColecaoImoveis = colecaoImoveis.iterator();



				labelRotasClientes: while (iteratorColecaoImoveis.hasNext()) {

					fluxoImovel =  (Imovel) iteratorColecaoImoveis.next();

					// caso a ação de cobrança gere a ordem de serviço
					if (acaoCobranca.getServicoTipo() != null
							&& acaoCobranca.getServicoTipo().getId() != null) {
						// seta a empresa cobranca
						fluxoImovel.getQuadra().getRota().setEmpresa(null);
						
					} else {
						// seta a empresa
						fluxoImovel.getQuadra().getRota().setEmpresaCobranca(null);
					}


					if (indicadorCriterio.intValue() == 1) {
						try {
							// O critério de cobrança a ser utilizado será o da
							// rota
							cobrancaCriterio = repositorioCobranca
									.pesquisarCriterioCobrancaRota(
											fluxoImovel.getQuadra().getRota().getId(), acaoCobranca.getId());
							colecaoCobrancaCriterioLinha = repositorioCobranca
									.pesquisarCobrancaCriterioLinhaCriterio(cobrancaCriterio
											.getId());
							
						} catch (ErroRepositorioException ex) {
							// levanta a exceção para a próxima camada
							throw new ControladorException("erro.sistema", ex);
						}
					}

					// cria o objeto que vai armazenar temporariamente os dados
					// retornados
					// pelo [SB0003], para cada imóvel
					GerarAtividadeAcaoCobrancaHelper gerarAtividadeAcaoCobrancaHelperTemp = new GerarAtividadeAcaoCobrancaHelper();

					// [SB0003] - Gerar Atividade de Ação de Cobrança para o
					// imóvel
					gerarAtividadeAcaoCobrancaHelperTemp = gerarAtividadeAcaoCobrancaParaImovel(
							cobrancaAcaoAtividadeCronograma,
							cobrancaAcaoAtividadeComando, fluxoImovel,
							indicadorCriterio, acaoCobranca, atividadeCobranca,
							cobrancaCriterio, colecaoCobrancaCriterioLinha,
							anoMesReferenciaInicial, anoMesReferenciaFinal,
							dataVencimentoInicial, dataVencimentoFinal,
							dataAtual);

					// se o objeto retornado for diferente de nulo
					if (gerarAtividadeAcaoCobrancaHelperTemp != null) {
						// recupera a quantidade de documentos de cobrança,
						// quantidade
						// de itens cobrados e o valor do documento
						// do objeto retornado pelo [SB0003]
						gerarAtividadeAcaoCobrancaHelper
								.setQuantidadeDocumentosCobranca(gerarAtividadeAcaoCobrancaHelper
										.getQuantidadeDocumentosCobranca() + 1);
						gerarAtividadeAcaoCobrancaHelper
								.setQuantidadeItensCobradosDocumentos(gerarAtividadeAcaoCobrancaHelper
										.getQuantidadeItensCobradosDocumentos()
										+ gerarAtividadeAcaoCobrancaHelperTemp
												.getQuantidadeItensCobradosDocumentos());
						gerarAtividadeAcaoCobrancaHelper
								.setValorDocumentosCobranca(gerarAtividadeAcaoCobrancaHelper
										.getValorDocumentosCobranca()
										.add(
												gerarAtividadeAcaoCobrancaHelperTemp
														.getValorDocumentosCobranca()));

						/** alterado por pedro alexandre dia 16/11/2006 */
						gerarAtividadeAcaoCobrancaHelper
								.getColecaoDocumentosCobranca()
								.addAll(
										gerarAtividadeAcaoCobrancaHelperTemp
												.getColecaoDocumentosCobranca());

						// Caso seja um comando eventual e a quantidade de
						// documentos gerados seja igual a quantidade máxima
						// de documentos especificada no comando
						
						// Alterado por Chico, 06/06/08, analista: Ana Breda
						// caso seja um comando de cronograma, verificar é foi preenchida a quantidade
						// maxima de documentos a ser gerada
						if ((cobrancaAcaoAtividadeComando != null
								&& cobrancaAcaoAtividadeComando
										.getQuantidadeMaximaDocumentos() != null
								&& cobrancaAcaoAtividadeComando
										.getQuantidadeMaximaDocumentos()
										.equals(gerarAtividadeAcaoCobrancaHelper
											.getQuantidadeDocumentosCobranca())) ||
							(cobrancaAcaoAtividadeCronograma != null
								&& cobrancaAcaoAtividadeCronograma
										.getQuantidadeMaximaDocumentos() != null
								&& cobrancaAcaoAtividadeCronograma
										.getQuantidadeMaximaDocumentos()
										.equals(gerarAtividadeAcaoCobrancaHelper
											.getQuantidadeDocumentosCobranca()))) {							
							// não roda mais os imóveis das rotas
							// posteriores
							break labelRotasClientes;
						}
						
					}


				}
			}
		

		// fim item 2

		//atualizar a quantidade de documentos cobrados, a quantidade de itens cobrados 
		//e o valor total dos documentos na tabela cobranca_documento_controle_geracao
		this.atualizarCobrancaDocumentoControleGeracao(
				idCobrancaDocumentoControleGeracao,
				gerarAtividadeAcaoCobrancaHelper.getQuantidadeDocumentosCobranca(),
				gerarAtividadeAcaoCobrancaHelper.getQuantidadeItensCobradosDocumentos(),
				gerarAtividadeAcaoCobrancaHelper.getValorDocumentosCobranca());	
			
		// retorna o objeto contendo o total de quantidades de documentos de
		// cobrança, quantidade de itens cobrados e total do valor dos
		// documentos de cobrança
		return gerarAtividadeAcaoCobrancaHelper;
	}

	/**
	 * [UC0251] Gerar Atividade de Ação de Cobrança [SB0002] Gerar Atividade de
	 * Ação de Cobrança para os Imóveis da Lista de Rotas
	 * 
	 * @author Pedro Alexandre
	 * @created 07/02/2006
	 * 
	 * @param cobrancaAcaoAtividadeCronograma
	 *            Atividade de Ação de Cobrança de Cronograma
	 * @param cobrancaAcaoAtividadeComando
	 *            Atividade de Ação de Cobrança de Comando
	 * @param colecaoRotas
	 *            Coleção de rotas
	 * @param indicadorCriterio
	 *            Indicador do critério a ser utilizado
	 * @param acaoCobranca
	 *            Ação de Cobrança
	 * @param atividadeCobranca
	 *            Atividade de Cobrança
	 * @param colecaoCobrancaCriterioLinhaComando
	 *            Coleção de linha de critério de cobrança do comando
	 * @param cobrancaCriterioComando
	 *            Critério de Cobrança do Comando
	 * @param anoMesReferenciaInicial
	 *            Ano/Mês de referência inicial
	 * @param anoMesReferenciaFinal
	 *            Ano/Mês de referência final
	 * @param dataVencimentoInicial
	 *            Data de vencimento inicial
	 * @param dataVencimentoFinal
	 *            Data de vencimento final
	 * 
	 * @throws ControladorException
	 *             Controlador Exception
	 */
	public GerarAtividadeAcaoCobrancaHelper gerarAtividadeAcaoCobrancaParaImoveisListaRotasAntigo(
			CobrancaAcaoAtividadeCronograma cobrancaAcaoAtividadeCronograma,
			CobrancaAcaoAtividadeComando cobrancaAcaoAtividadeComando,
			Collection<Rota> colecaoRotas,
			Integer indicadorCriterio,
			CobrancaAcao acaoCobranca,
			CobrancaAtividade atividadeCobranca,
			Collection<CobrancaCriterioLinha> colecaoCobrancaCriterioLinhaComando,
			CobrancaCriterio cobrancaCriterioComando,
			String anoMesReferenciaInicial, String anoMesReferenciaFinal,
			Date dataVencimentoInicial, Date dataVencimentoFinal, Date dataAtual)
			throws ControladorException {

		// cria o objeto que vai armazenas os dados
		GerarAtividadeAcaoCobrancaHelper gerarAtividadeAcaoCobrancaHelper = new GerarAtividadeAcaoCobrancaHelper();

		SistemaParametro sistemaParametro = getControladorUtil()
				.pesquisarParametrosDoSistema();

		// inicializa os valores de quantidade de documentos, quantidade de
		// itens cobrados e valor do documento de cobrança
		gerarAtividadeAcaoCobrancaHelper.setQuantidadeDocumentosCobranca(0);
		gerarAtividadeAcaoCobrancaHelper
				.setQuantidadeItensCobradosDocumentos(0);
		gerarAtividadeAcaoCobrancaHelper
				.setValorDocumentosCobranca(new BigDecimal("0.00"));

		// cria a variável que vai armazenar o critério de cobrança
		CobrancaCriterio cobrancaCriterio = null;

		// cria a variável que vai armazenar a coleção de linhas de critério de
		// cobrança
		Collection<CobrancaCriterioLinha> colecaoCobrancaCriterioLinha = new ArrayList();

		Object[] arrayImovel = null;

		// item 1
		// se a coleção de rotas for nula ou estiver vazia
		if (colecaoRotas == null || colecaoRotas.isEmpty()) {

			if (acaoCobranca.getId() != null
					&& acaoCobranca.getId().equals(
							CobrancaAcao.CORTE_ADMINISTRATIVO)
					&& sistemaParametro.getCodigoEmpresaFebraban() != null
					&& sistemaParametro.getCodigoEmpresaFebraban().equals(
							Empresa.EMPRESA_FEBRABAN_COMPESA)) {
				// Obtém a coleção de todas as rotas do sistema com
				// empresaCobranca igual a 1
				colecaoRotas = getControladorMicromedicao()
						.pesquisarListaRotasEspecificas();

			}
		}
		// fim item 1

		/*
         * Colocado por Raphael Rossiter em 25/10/2011
         * Motivo: Usuário estava comandando grupos de cobrança sem que o mesmo esteja associado a pelo menos 1 rota.
         */
		if (colecaoRotas != null && !colecaoRotas.isEmpty()){
			
			//item 2
			// cria o objeto que vai armazenar temporariamente os dados retornados
			// pelo [SB0003], para cada imóvel
			GerarAtividadeAcaoCobrancaHelper gerarAtividadeAcaoCobrancaHelperTemp = new GerarAtividadeAcaoCobrancaHelper();

			int quantidadeImoveis = 0;
			
	        int indiceRotas = 1;

	        // laço para verificar todas as rotas
	        labelRotas: for (Rota rota : colecaoRotas) {
	            System.out.println("*************************");
	            System.out.println("Gerar Documento Cobranca.ROTA:" + rota.getId() + " - " + indiceRotas++ + "/" + colecaoRotas.size());
	            System.out.println("*************************");
		
				// se o indicador do critério for igual a 1(um) - "usa critério da
				// rota"
				if (indicadorCriterio.intValue() == 1) {

					CobrancaCriterio cobrancaCriterioRota = null;

					try {
						cobrancaCriterioRota = repositorioCobranca
								.pesquisarCriterioCobrancaRota(rota.getId(),
										acaoCobranca.getId());
					} catch (ErroRepositorioException ex) {
						// levanta a exceção para a próxima camada
						throw new ControladorException("erro.sistema", ex);
					}

					try {
						// pesquisa a coleção de linhas de critério de cobrança
						colecaoCobrancaCriterioLinha = repositorioCobranca
								.pesquisarCobrancaCriterioLinhaCriterio(cobrancaCriterioRota
										.getId());
					} catch (ErroRepositorioException ex) {
						// levanta a exceção para a próxima camada
						throw new ControladorException("erro.sistema", ex);
					}

					// o critério de cobrança utilizado vai ser o da rota
					cobrancaCriterio = cobrancaCriterioRota;

					// se o indicador do critério for igual a 2(dois) - "usa o
					// critério do comando"
				} else {
					// a coleção de linha de critério de cobrança vai ser a do
					// comando
					colecaoCobrancaCriterioLinha = colecaoCobrancaCriterioLinhaComando;

					// o critério de cobrança utilizado vai ser o do comando
					cobrancaCriterio = cobrancaCriterioComando;
				}
				
				// Verificar as situacoes de ligacao de agua e esgoto validas para o criterio ou acao de cobranca
				Collection idsSituacaoLigacaoAgua = new ArrayList();
				Collection idsSituacaoLigacaoEsgoto = new ArrayList();
				try {
					Collection colecaoSituacoesLigacaoAgua = repositorioCobranca.pesquisarCobrancaCriterioSituacaoLigacaoAgua
						(cobrancaCriterio.getId());
					if (colecaoSituacoesLigacaoAgua != null && !colecaoSituacoesLigacaoAgua.isEmpty()){
						for (Iterator iter = colecaoSituacoesLigacaoAgua.iterator(); iter
								.hasNext();) {
							CriterioSituacaoLigacaoAgua critSitLigAgua = (CriterioSituacaoLigacaoAgua) iter.next();
							idsSituacaoLigacaoAgua.add(critSitLigAgua.getComp_id().getLigacaoAguaSituacao().getId());
						}
					} else {
						if (acaoCobranca.getLigacaoAguaSituacao() != null){
							idsSituacaoLigacaoAgua.add(acaoCobranca.getLigacaoAguaSituacao().getId());	
						}
					}
					Collection colecaoSituacoesLigacaoEsgoto = repositorioCobranca.pesquisarCobrancaCriterioSituacaoLigacaoEsgoto
						(cobrancaCriterio.getId());
					if (colecaoSituacoesLigacaoEsgoto != null && !colecaoSituacoesLigacaoEsgoto.isEmpty()){
						for (Iterator iter = colecaoSituacoesLigacaoEsgoto.iterator(); iter
								.hasNext();) {
							CriterioSituacaoLigacaoEsgoto critSitLigEsgoto = (CriterioSituacaoLigacaoEsgoto) iter.next();
							idsSituacaoLigacaoEsgoto.add(critSitLigEsgoto.getComp_id().getLigacaoEsgotoSituacao().getId());
						}
					} else {
						if (acaoCobranca.getLigacaoEsgotoSituacao() != null){
							idsSituacaoLigacaoEsgoto.add(acaoCobranca.getLigacaoEsgotoSituacao().getId());	
						}
					}
					
				} catch (ErroRepositorioException e) {
					throw new ControladorException(e.getMessage());
				}
				
				Imovel imovel = null;
				LigacaoAguaSituacao ligacaoAguaSituacao = null;
				LigacaoEsgotoSituacao ligacaoEsgotoSituacao = null;
				ImovelPerfil imovelPerfil = null;
				Empresa empresa = null;
				Quadra quadra = null;
				// Rota rotaEmpresa = null;
				Localidade localidade = null;
				SetorComercial setorComercial = null;
				CobrancaSituacaoTipo cobrancaSituacaoTipo = null;

				boolean flagTerminou = false;
				int numeroInicial = 0;
				while (!flagTerminou) {

					Collection colecaoImoveis = getControladorImovel()
							.pesquisarImoveisPorRotaComPaginacao(rota,
									idsSituacaoLigacaoAgua, idsSituacaoLigacaoEsgoto,
									numeroInicial,1000, cobrancaAcaoAtividadeComando);

					System.out.println(" Gerar Doc Cob - Qtd Imoveis iniciais: " + colecaoImoveis.size());
					if (colecaoImoveis != null && !colecaoImoveis.isEmpty()) {
						Iterator iteratorColecaoImoveis = colecaoImoveis.iterator();

						if (colecaoImoveis.size() < 1000) {
							flagTerminou = true;
						}

						while (iteratorColecaoImoveis.hasNext()) {

							arrayImovel = (Object[]) iteratorColecaoImoveis.next();

							quantidadeImoveis++;

							imovel = new Imovel();
							ligacaoAguaSituacao = new LigacaoAguaSituacao();
							ligacaoEsgotoSituacao = new LigacaoEsgotoSituacao();
							imovelPerfil = new ImovelPerfil();
							empresa = new Empresa();
							quadra = new Quadra();
							// rotaEmpresa = new Rota();
							localidade = new Localidade();
							setorComercial = new SetorComercial();

							if (arrayImovel[0] != null) {
								imovel.setId((Integer) arrayImovel[0]);
							}

							if (arrayImovel[1] != null) {
								ligacaoAguaSituacao.setId((Integer) arrayImovel[1]);
							}

							if (arrayImovel[2] != null) {
								ligacaoEsgotoSituacao
										.setId((Integer) arrayImovel[2]);
							}

							if (arrayImovel[3] != null) {
								imovelPerfil.setId((Integer) arrayImovel[3]);
							}
							// caso a ação de cobrança gere a ordem de serviço
							if (acaoCobranca.getServicoTipo() != null
									&& acaoCobranca.getServicoTipo().getId() != null) {
								// seta a empresa cobranca
								if (arrayImovel[13] != null) {
									empresa.setId((Integer) arrayImovel[13]);
								}
							} else {
								// seta a empresa
								if (arrayImovel[4] != null) {
									empresa.setId((Integer) arrayImovel[4]);
								}
							}

							if (arrayImovel[5] != null) {
								localidade.setId((Integer) arrayImovel[5]);
							}

							if (arrayImovel[6] != null) {
								setorComercial.setCodigo(((Integer) arrayImovel[6])
										.intValue());
							}

							if (arrayImovel[7] != null) {
								quadra.setNumeroQuadra(((Integer) arrayImovel[7])
										.intValue());
							}

							if (arrayImovel[8] != null) {
								imovel.setLote(((Short) arrayImovel[8])
										.shortValue());
							}

							if (arrayImovel[9] != null) {
								imovel.setLote(((Short) arrayImovel[9])
										.shortValue());
							}

							if (arrayImovel[10] != null) {
								quadra
										.setId(((Integer) arrayImovel[10])
												.intValue());
							}
							if (arrayImovel[11] != null) {
								cobrancaSituacaoTipo = new CobrancaSituacaoTipo();
								cobrancaSituacaoTipo
										.setId(((Integer) arrayImovel[11])
												.intValue());
							}
							if (arrayImovel[12] != null) {
								imovel
										.setIndicadorDebitoConta((Short) arrayImovel[12]);
							}

							imovel.setLigacaoAguaSituacao(ligacaoAguaSituacao);
							imovel.setLigacaoEsgotoSituacao(ligacaoEsgotoSituacao);
							imovel.setImovelPerfil(imovelPerfil);
							rota.setEmpresa(empresa);
							quadra.setRota(rota);
							imovel.setQuadra(quadra);
							imovel.setLocalidade(localidade);
							imovel.setSetorComercial(setorComercial);
							imovel.setCobrancaSituacaoTipo(cobrancaSituacaoTipo);

							// [SB0003] - Gerar Atividade de Ação de Cobrança para o
							// imóvel
							gerarAtividadeAcaoCobrancaHelperTemp = gerarAtividadeAcaoCobrancaParaImovel(
									cobrancaAcaoAtividadeCronograma,
									cobrancaAcaoAtividadeComando, imovel,
									indicadorCriterio, acaoCobranca,
									atividadeCobranca, cobrancaCriterio,
									colecaoCobrancaCriterioLinha,
									anoMesReferenciaInicial, anoMesReferenciaFinal,
									dataVencimentoInicial, dataVencimentoFinal,
									dataAtual);

							// se o objeto for diferente de nulo
							if (gerarAtividadeAcaoCobrancaHelperTemp != null) {
								// recupera a quantidade de documentos de cobrança,
								// quantidade de itens cobrados e o valor do
								// documento
								// do objeto retornado pelo [SB0003]
								gerarAtividadeAcaoCobrancaHelper
										.setQuantidadeDocumentosCobranca(gerarAtividadeAcaoCobrancaHelper
												.getQuantidadeDocumentosCobranca() + 1);
								gerarAtividadeAcaoCobrancaHelper
										.setQuantidadeItensCobradosDocumentos(gerarAtividadeAcaoCobrancaHelper
												.getQuantidadeItensCobradosDocumentos()
												+ gerarAtividadeAcaoCobrancaHelperTemp
														.getQuantidadeItensCobradosDocumentos());
								gerarAtividadeAcaoCobrancaHelper
										.setValorDocumentosCobranca(gerarAtividadeAcaoCobrancaHelper
												.getValorDocumentosCobranca()
												.add(
														gerarAtividadeAcaoCobrancaHelperTemp
																.getValorDocumentosCobranca()));

								/** alterado por pedro alexandre dia 16/11/2006 */
								gerarAtividadeAcaoCobrancaHelper
										.getColecaoDocumentosCobranca()
										.addAll(
												gerarAtividadeAcaoCobrancaHelperTemp
														.getColecaoDocumentosCobranca());

								// Caso seja um comando eventual e a quantidade de
								// documentos gerados seja igual a quantidade máxima
								// de documentos especificada no comando

								// Alterado por Chico, 06/06/08, analista: Ana Breda
								// caso seja um comando de cronograma, verificar se foi preenchida a quantidade
								// maxima de documentos a ser gerada
								
								/* Alteracao feita por Chico, em 21/05/09, analista: Ana Breda
								 * Caso o eventual tenha valor limite obrigatorio preenchido ou 
								 * a ação de cobrança tenha indicador de uso de ordenamento igual a 1 (SIM) 
								 * ENTAO: nao devera ser considerada a quantidade maxima de documentos 
								 * nesta fase, deixara ser gerado todos os documentos
								 * normalmente e no final, será analisado os que ficarão.
								 * 
								 */
								
								Integer quantidadeMaxima = null;
								boolean possuiValorLimiteEventual = false;
								boolean usaOrdenamento = false;
								if (cobrancaAcaoAtividadeComando != null) {
									quantidadeMaxima =  cobrancaAcaoAtividadeComando.getQuantidadeMaximaDocumentos();
									possuiValorLimiteEventual = (cobrancaAcaoAtividadeComando.getValorLimiteObrigatoria() != null);
									usaOrdenamento = acaoCobranca.getIndicadorOrdenamentoEventual() == null ? 
										acaoCobranca.getIndicadorOrdenamentoEventual().intValue() 
											== ConstantesSistema.SIM.intValue() : 
										acaoCobranca.getIndicadorOrdenamentoEventual().intValue() 
											== ConstantesSistema.SIM.intValue() ;
								} else if (cobrancaAcaoAtividadeCronograma != null){
									quantidadeMaxima =  cobrancaAcaoAtividadeCronograma.getQuantidadeMaximaDocumentos();
									usaOrdenamento = acaoCobranca.getIndicadorOrdenamentoCronograma() == null ? 
											acaoCobranca.getIndicadorOrdenamentoCronograma().intValue() 
												== ConstantesSistema.SIM.intValue() : 
											acaoCobranca.getIndicadorOrdenamentoCronograma().intValue() 
												== ConstantesSistema.SIM.intValue() ;
								}
								
								if (quantidadeMaxima != null){
									if (!possuiValorLimiteEventual && !usaOrdenamento 
										&& quantidadeMaxima.equals(gerarAtividadeAcaoCobrancaHelper.getQuantidadeDocumentosCobranca())){
								
										// não roda mais os imóveis das rotas
										// posteriores
										break labelRotas;
										
									}
								}
															
							}
							
							gerarAtividadeAcaoCobrancaHelperTemp = null;

							imovel = null;
							ligacaoAguaSituacao = null;
							ligacaoEsgotoSituacao = null;
							imovelPerfil = null;
							empresa = null;
							quadra = null;
							localidade = null;
							setorComercial = null;
							cobrancaSituacaoTipo = null;
						}
					} else {
						flagTerminou = true;
					}
					numeroInicial = numeroInicial + 1000;
					colecaoImoveis = null;
				}
			}
		}
		

		// retorna o objeto contendo o total de quantidades de documentos de
		// cobrança, quantidade de itens cobrados e total do valor dos
		// documentos de cobrança
		return gerarAtividadeAcaoCobrancaHelper;
	}

	/**
	 * [UC0251] Gerar Atividade de Ação de Cobrança [SB0003] Gerar Atividade de
	 * Ação de Cobrança para Imóvel
	 * 
	 * @author Pedro Alexandre
	 * @created 08/02/2006
	 * 
	 * @param cobrancaAcaoAtividadeCronograma
	 *            Atividade de Ação de Cobrança de Cronograma
	 * @param cobrancaAcaoAtividadeComando
	 *            Atividade de Ação de Cobrança de Comando
	 * @param imovel
	 *            Imóvel
	 * @param indicadorCriterio
	 *            Indicador do critério a ser utilizado
	 * @param acaoCobranca
	 *            Ação de Cobrança
	 * @param atividadeCobranca
	 *            Atividade de Cobrança
	 * @param criterioCobranca
	 *            Critériode cobrança para ser utilizado
	 * @param colecaoCobrancaCriterioLinha
	 *            Coleção de linha de critério de cobrança
	 * @param anoMesReferenciaInicial
	 *            Ano/Mês de referência inicial
	 * @param anoMesReferenciaFinal
	 *            Ano/Mês de referência final
	 * @param dataVencimentoInicial
	 *            Data de vencimento inicial
	 * @param dataVencimentoFinal
	 *            Data de vencimento final
	 * 
	 * @throws ControladorException
	 *             Controlador Exception
	 */
	public GerarAtividadeAcaoCobrancaHelper gerarAtividadeAcaoCobrancaParaImovel(
			CobrancaAcaoAtividadeCronograma cobrancaAcaoAtividadeCronograma,
			CobrancaAcaoAtividadeComando cobrancaAcaoAtividadeComando,
			Imovel imovel, Integer indicadorCriterio,
			CobrancaAcao acaoCobranca, CobrancaAtividade atividadeCobranca,
			CobrancaCriterio criterioCobranca,
			Collection<CobrancaCriterioLinha> colecaoCobrancaCriterioLinha,
			String anoMesReferenciaInicial, String anoMesReferenciaFinal,
			Date dataVencimentoInicial, Date dataVencimentoFinal, Date dataAtual)
			throws ControladorException {
		
		try{

			// cria o objeto que vai armazenar os dados de retorno do metódo
			GerarAtividadeAcaoCobrancaHelper gerarAtividadeAcaoCobrancaHelper = null;
	
			// cria a data corrente
			Date dataCorrente = new Date();
	
			// cria a variável que vai armazenar a coleção de débitos notificados
			Collection<CobrancaDocumentoItem> colecaoDebitosNotificados = new ArrayList();
	
			ImovelNaoGerado imovelNaoGerado = new ImovelNaoGerado();
			imovelNaoGerado.setCobrancaAcaoAtividadeCronograma(cobrancaAcaoAtividadeCronograma);
			imovelNaoGerado.setCobrancaAcaoAtividadeComando(cobrancaAcaoAtividadeComando);
			imovelNaoGerado.setImovel(imovel);
			imovelNaoGerado.setUltimaAlteracao(new Date());
			
			
			
			// situação especifica para o usuario Mario Gouveia
//		Integer idImovelMario = getControladorImovel()
//				.verificarExistenciaImovelParaCliente(imovel.getId());
//		if (idImovelMario != null) {
//			MotivoNaoGeracaoDocCobranca motivoNaoGeracao = 
//				new MotivoNaoGeracaoDocCobranca();
//			motivoNaoGeracao.setId(MotivoNaoGeracaoDocCobranca.IMOVEL_MARIO);
//			imovelNaoGerado.setMotivoNaoGeracaoDocCobranca(motivoNaoGeracao);
//			
//			getControladorUtil().inserir(imovelNaoGerado);
//			imovelNaoGerado = null;
//			// retorna o objeto vazio e passa para o próximo imóvel
//			return gerarAtividadeAcaoCobrancaHelper;
//		}
			
	
			// Caso o imovel esteja excluido, passar para o proximo imovel
			Integer idImovel = getControladorImovel().verificarExistenciaImovel(imovel.getId());				
			if (idImovel == null){
				
				MotivoNaoGeracaoDocCobranca motivoNaoGeracao = 
					new MotivoNaoGeracaoDocCobranca();
				motivoNaoGeracao.setId(MotivoNaoGeracaoDocCobranca.IMOVEL_EXCLUIDO);
				imovelNaoGerado.setMotivoNaoGeracaoDocCobranca(motivoNaoGeracao);
	
				getControladorUtil().inserir(imovelNaoGerado);
				imovelNaoGerado = null;			
				return gerarAtividadeAcaoCobrancaHelper;
			}
			
			// item 1
			// se a situação da ligação de água para a qual a ação de cobrança deve
			// ser gerada esteja preenchida
			// e seja diferente da situação da ligação de água do imóvel
	
			// Validacao da situacao da ligacao de agua foi para o criterio de cobranca
			// Francisco/Ana Breda, 10/06/08 
			
	//		if ((acaoCobranca.getLigacaoAguaSituacao() != null)
	//				&& (acaoCobranca.getLigacaoAguaSituacao().getId().intValue() != imovel
	//						.getLigacaoAguaSituacao().getId().intValue())) {
	//			// retorna o objeto vazio e passa para o próximo imóvel
	//			return gerarAtividadeAcaoCobrancaHelper;
	//		}
			// fim item 1
	
			// item 2
			// se a situação da ligação de esgoto para a qual a ação de cobrança
			// deve ser gerada esteja preenchida
			// e seja diferente da situação da ligação de esgoto do imóvel
			
			// Validacao da situacao da ligacao de agua foi para o criterio de cobranca
			// Francisco/Ana Breda, 10/06/08 
			
	//		if ((acaoCobranca.getLigacaoEsgotoSituacao() != null)
	//				&& (acaoCobranca.getLigacaoEsgotoSituacao().getId().intValue() != imovel
	//						.getLigacaoEsgotoSituacao().getId().intValue())) {
	//			// retorna o objeto vazio e passa para o próximo imóvel
	//			return gerarAtividadeAcaoCobrancaHelper;
	//		}
			// fim item 2
	
			// item 3
			// recupera a ação de cobrança precedente
			CobrancaAcao cobrancaAcaoPrecedente = acaoCobranca
					.getCobrancaAcaoPredecessora();
	
			CobrancaDocumento cobrancaDocumentoPredecessor = null;
			boolean validacaoPorItemCobrado = false;
			Integer idDocumentoCobrancaAcaoPrecedente = null;
			
			Collection colecaoIdsImovel = null;
			
			if (cobrancaAcaoAtividadeComando != null && cobrancaAcaoAtividadeComando.getId() != null) {
				colecaoIdsImovel = repositorioCobranca.obterImoveisComandoAtividadeImovel(null, cobrancaAcaoAtividadeComando.getId());
			}
			
			// se a ação de cobrança precedente for diferente de nulo
			// e não tenha validação por item cobrado (CBAC_ICVALITEMCOBRADO com valor igual a 2 (Não))
			// e (seja um comando de cronograma ou não existam imóveis relacionados)
			if ((cobrancaAcaoPrecedente != null && !cobrancaAcaoPrecedente.equals(""))
				&& (cobrancaAcaoAtividadeCronograma != null || colecaoIdsImovel == null || colecaoIdsImovel.size() == 0)) {

	
				// item 3.1
				// calcula a data mínima de emissão/realização da ação precedente
				Date dataMinimaEmissaoRealizacaoAcaoPrecente = Util
						.subtrairNumeroDiasDeUmaData(dataCorrente, acaoCobranca
								.getNumeroDiasMinimoAcaoPrecedente());
				// calcula a data minima de emissão/realização da ação precedente
				// diminuindo o numero de dias da validade
				Date dataEmissaoValidacaoAcaoPrecente = Util
						.subtrairNumeroDiasDeUmaData(dataCorrente,
								cobrancaAcaoPrecedente.getNumeroDiasValidade());
	
				// Formata adata para a última hora, minutos e segundos
				Calendar dataCalendar = new GregorianCalendar();
				dataCalendar.setTime(dataMinimaEmissaoRealizacaoAcaoPrecente);
				dataCalendar.set(Calendar.HOUR, 23);
				dataCalendar.set(Calendar.MINUTE, 59);
				dataCalendar.set(Calendar.SECOND, 59);
				dataCalendar.set(Calendar.MILLISECOND, 999);
				dataMinimaEmissaoRealizacaoAcaoPrecente = dataCalendar.getTime();
	
				// Formata a data para a última hora, minutos e segundos
				dataCalendar = new GregorianCalendar();
				dataCalendar.setTime(dataEmissaoValidacaoAcaoPrecente);
				dataCalendar.set(Calendar.HOUR, 00);
				dataCalendar.set(Calendar.MINUTE, 00);
				dataCalendar.set(Calendar.SECOND, 00);
				dataCalendar.set(Calendar.MILLISECOND, 000);
				dataEmissaoValidacaoAcaoPrecente = dataCalendar.getTime();
	
				// item 3.2
				
				idDocumentoCobrancaAcaoPrecedente = repositorioCobranca
					.pesquisarDocumentoCobrancaRelativoAcaoPrecedente(
					imovel.getId(), cobrancaAcaoPrecedente.getDocumentoTipo().getId(),
					dataMinimaEmissaoRealizacaoAcaoPrecente, dataEmissaoValidacaoAcaoPrecente);
				
				if (!acaoCobranca.getIndicadorValidarItem().equals(ConstantesSistema.NAO)){
					validacaoPorItemCobrado = true;
				}
				
				if(!validacaoPorItemCobrado){
					//item 3.3.1
					// se não existe documentos de ação de cobrança para o imóvel
					if (idDocumentoCobrancaAcaoPrecedente == null) {
					
						MotivoNaoGeracaoDocCobranca motivoNaoGeracao = new MotivoNaoGeracaoDocCobranca();
						motivoNaoGeracao.setId(MotivoNaoGeracaoDocCobranca.NAO_EXISTE_DOCUMENTO_PRECEDENTE_VALIDO);
						imovelNaoGerado.setMotivoNaoGeracaoDocCobranca(motivoNaoGeracao);
						
						getControladorUtil().inserir(imovelNaoGerado);
						
						imovelNaoGerado = null;
						
						// retorna o objeto vazio e passa para o próximo imóvel
						return gerarAtividadeAcaoCobrancaHelper;
		
						// item 3.3.2
						// se o imóvel possui documento de cobrança
					} 
				}
				
				
				// se a ação de cobrança precedente gerar ordem de serviço
				if (cobrancaAcaoPrecedente.getServicoTipo() != null) {
	
					// 2.3.1. Caso exista ação de cobrança para o motivo de encerramento
					if (this.repositorioCobranca.existeCobrancaAcaoMotivoEncerramento(
							cobrancaAcaoPrecedente.getId())) {
						
						idDocumentoCobrancaAcaoPrecedente = this.repositorioCobranca.documentoCobrancaOrdemServicoAcaoPrecedente(
							imovel.getId(),	cobrancaAcaoPrecedente.getServicoTipo().getId(),
							dataMinimaEmissaoRealizacaoAcaoPrecente, cobrancaAcaoPrecedente.getId());
						
						// 2.3.1.1.	Caso não exista ordem de serviço, relativa à ação precedente, 
						//  realizada até a data mínima de emissão/realização da ação precedente
						if (idDocumentoCobrancaAcaoPrecedente == null) {
							MotivoNaoGeracaoDocCobranca motivoNaoGeracao = new MotivoNaoGeracaoDocCobranca();
							motivoNaoGeracao.setId(MotivoNaoGeracaoDocCobranca.NAO_EXISTE_ORDEM_SERVICO_ACAO_PRECEDENTE_EXECUTADA_PRAZO);
							imovelNaoGerado.setMotivoNaoGeracaoDocCobranca(motivoNaoGeracao);
		
							getControladorUtil().inserir(imovelNaoGerado);
							
							imovelNaoGerado = null;
							return gerarAtividadeAcaoCobrancaHelper;
						}
						
					} else {
						// 2.3.2. Caso contrário, ou seja, não exista ação de cobrança para o motivo de encerramento:
						
						idDocumentoCobrancaAcaoPrecedente = repositorioCobranca
							.pesquisarDocumentoCobrancaAcaoPrecedente(
							imovel.getId(),	cobrancaAcaoPrecedente.getServicoTipo().getId(),
							AtendimentoMotivoEncerramento.INDICADOR_EXECUCAO_SIM,
							dataMinimaEmissaoRealizacaoAcaoPrecente);
		
			
						// Caso não exista ordem de serviço, relativa a ação precedente
						// passar para próximo imóvel
						if (idDocumentoCobrancaAcaoPrecedente == null) {
							
							MotivoNaoGeracaoDocCobranca motivoNaoGeracao = new MotivoNaoGeracaoDocCobranca();
							motivoNaoGeracao.setId(MotivoNaoGeracaoDocCobranca.NAO_EXISTE_ORDEM_SERVICO_ACAO_PRECEDENTE_EXECUTADA_PRAZO);
							imovelNaoGerado.setMotivoNaoGeracaoDocCobranca(motivoNaoGeracao);
		
							getControladorUtil().inserir(imovelNaoGerado);
							
							imovelNaoGerado = null;
							return gerarAtividadeAcaoCobrancaHelper;
						}
					}
				} 
	
				colecaoDebitosNotificados = repositorioCobranca
					.pesquisarCobrancaDocumentoItemContaGuiaPagamentoDebitoACobrar(
					idDocumentoCobrancaAcaoPrecedente);

				FiltroCobrancaDocumento filtroCobrancaDocumento = new FiltroCobrancaDocumento();
				filtroCobrancaDocumento.adicionarParametro(new ParametroSimples("id",idDocumentoCobrancaAcaoPrecedente));
				Collection<CobrancaDocumento> colecaoCobrancaDocumento = getControladorUtil().pesquisar(filtroCobrancaDocumento, CobrancaDocumento.class.getName());
				
				cobrancaDocumentoPredecessor = (CobrancaDocumento) Util.retonarObjetoDeColecao(colecaoCobrancaDocumento);
				
			}
			// parte nova alterada por Sávio Luiz data:28/02/2007
			// não tem no caso de uso.
			Collection colecaoParmsCobrancaAcao = null;
			
			// pesquisa as ações cobranças que tem a ação cobrança,que é
			// passada, como precedente
			colecaoParmsCobrancaAcao = repositorioCobranca
					.pesqsuisarAcaoCobrancaPelaPrecedente(acaoCobranca.getId());

			if (colecaoParmsCobrancaAcao != null && !colecaoParmsCobrancaAcao.isEmpty()) {
				Iterator iteParmsCobrancaAcao = colecaoParmsCobrancaAcao.iterator();
				while (iteParmsCobrancaAcao.hasNext()) {
					Object[] parmsCobrancaAcao = (Object[]) iteParmsCobrancaAcao.next();
					if (parmsCobrancaAcao != null) {
						Integer idDocumentoTipo = null;
						int numeroDiasValidade = 0;

						if (parmsCobrancaAcao[0] != null) {
							idDocumentoTipo = (Integer) parmsCobrancaAcao[0];
						}
						if (parmsCobrancaAcao[1] != null) {
							numeroDiasValidade = ((Short) parmsCobrancaAcao[1]).intValue();
						}
						// calcula a data minima de emissão/realização da ação
						// precedente diminuindo o numero de dias da validade
						Date dataEmissaoValidacao = Util.subtrairNumeroDiasDeUmaData(
								dataCorrente, numeroDiasValidade);
						Calendar dataCalendar = new GregorianCalendar();
						// Formata a data para a última hora, minutos e segundos
						dataCalendar = new GregorianCalendar();
						dataCalendar.setTime(dataEmissaoValidacao);
						dataCalendar.set(Calendar.HOUR, 00);
						dataCalendar.set(Calendar.MINUTE, 00);
						dataCalendar.set(Calendar.SECOND, 00);
						dataCalendar.set(Calendar.MILLISECOND, 000);
						dataEmissaoValidacao = dataCalendar.getTime();

						Object[] retorno = repositorioCobranca.pesquisarIdDocumentoCobranca(
								imovel.getId(), idDocumentoTipo, dataEmissaoValidacao);
						if (retorno != null) {

							MotivoNaoGeracaoDocCobranca motivoNaoGeracao = new MotivoNaoGeracaoDocCobranca();
							motivoNaoGeracao.setId(MotivoNaoGeracaoDocCobranca.EXISTE_DOCUMENTO_VALIDO_ACAO_SUCESSORA);
							imovelNaoGerado.setMotivoNaoGeracaoDocCobranca(motivoNaoGeracao);
							
							getControladorUtil().inserir(imovelNaoGerado);
							
							// retorna o objeto vazio e passa para o próximo imóvel
							
							imovelNaoGerado = null;
							
							return gerarAtividadeAcaoCobrancaHelper;
						}
					}
				}
			}
		
	
			// fim item 3
	
			// item 4
			CobrancaDocumento cobrancaDocumento = null;
	
			int idTipoDocumentoAGerar = acaoCobranca.getDocumentoTipo().getId();
			int[] idsTipoDocumentoAIgnorar = {};
			switch (idTipoDocumentoAGerar) {
			case DocumentoTipo.ORDEM_FISCALIZACAO_TOTAL:
				idsTipoDocumentoAIgnorar = new int[6];
				idsTipoDocumentoAIgnorar[0] = DocumentoTipo.ORDEM_FISCALIZACAO_CORTADO;
				idsTipoDocumentoAIgnorar[1] = DocumentoTipo.ORDEM_FISCALIZACAO_FACTIVEL;
				idsTipoDocumentoAIgnorar[2] = DocumentoTipo.ORDEM_FISCALIZACAO_LIGADO;
				idsTipoDocumentoAIgnorar[3] = DocumentoTipo.ORDEM_FISCALIZACAO_POTENCIAL;
				idsTipoDocumentoAIgnorar[4] = DocumentoTipo.ORDEM_FISCALIZACAO_SUPRIMIDO;
				idsTipoDocumentoAIgnorar[5] = DocumentoTipo.ORDEM_FISCALIZACAO_TOTAL;
				break;
			case DocumentoTipo.ORDEM_FISCALIZACAO_CORTADO:
			case DocumentoTipo.ORDEM_FISCALIZACAO_FACTIVEL:
			case DocumentoTipo.ORDEM_FISCALIZACAO_LIGADO:
			case DocumentoTipo.ORDEM_FISCALIZACAO_POTENCIAL:
			case DocumentoTipo.ORDEM_FISCALIZACAO_SUPRIMIDO:
				idsTipoDocumentoAIgnorar = new int[2];
				idsTipoDocumentoAIgnorar[0] = idTipoDocumentoAGerar;
				idsTipoDocumentoAIgnorar[1] = DocumentoTipo.ORDEM_FISCALIZACAO_TOTAL;
				break;
			default:
				idsTipoDocumentoAIgnorar = new int[1];
				idsTipoDocumentoAIgnorar[0] = idTipoDocumentoAGerar;
				break;
			}
					
			
			for (int i = 0; i < idsTipoDocumentoAIgnorar.length; i++) {
	
				cobrancaDocumento = repositorioCobranca.pesquisarCobrancaDocumento(
						imovel.getId(), idsTipoDocumentoAIgnorar[i]);
			
	
				// laço para verificar se existe documento de cobrança para o imóvel
				// ainda no periódo de validade
				if (cobrancaDocumento != null) {
	
					// calcula data de periodo de validade
					Date dataEmissaoValidade = Util.adicionarNumeroDiasDeUmaData(
						cobrancaDocumento.getEmissao(), acaoCobranca.getNumeroDiasValidade());
	
					// se a data do documento for maior ou igual a data corrente
					if (!(dataEmissaoValidade.compareTo(dataCorrente) < 0)){
						if (cobrancaDocumento.getCobrancaAcaoSituacao() == null){
							
							MotivoNaoGeracaoDocCobranca motivoNaoGeracao = new MotivoNaoGeracaoDocCobranca();
							motivoNaoGeracao.setId(MotivoNaoGeracaoDocCobranca.EXISTE_DOCUMENTO_VALIDO_MESMO_TIPO);
							imovelNaoGerado.setMotivoNaoGeracaoDocCobranca(motivoNaoGeracao);						
							
							getControladorUtil().inserir(imovelNaoGerado);
							
							imovelNaoGerado = null;
							
							// retorna o objeto vazio e passa para o próximo imóvel
							return gerarAtividadeAcaoCobrancaHelper;	
						} else {
							if (cobrancaDocumento.getCobrancaAcaoSituacao().getId() != null &&
									(!cobrancaDocumento.getCobrancaAcaoSituacao()
										.getId().equals(CobrancaAcaoSituacao.CANCELADA_PRAZO))) {
								
								MotivoNaoGeracaoDocCobranca motivoNaoGeracao = new MotivoNaoGeracaoDocCobranca();
								motivoNaoGeracao.setId(MotivoNaoGeracaoDocCobranca.EXISTE_DOCUMENTO_VALIDO_MESMO_TIPO);
								imovelNaoGerado.setMotivoNaoGeracaoDocCobranca(motivoNaoGeracao);
								
								getControladorUtil().inserir(imovelNaoGerado);
								
								imovelNaoGerado = null;
								
								// retorna o objeto vazio e passa para o próximo imóvel
								return gerarAtividadeAcaoCobrancaHelper;								
							}
						}
					}
				}
				
			}		
			// fim item 4
			
			// 5. Caso o indicador de CPF/CNPJ válidos da ação seja sim (CBAC_ICCPFCNPJVALIDO = 1):
			if (acaoCobranca.getIndicadorEfetuarAcaoCpfCnpjValido() != null
					&& acaoCobranca.getIndicadorEfetuarAcaoCpfCnpjValido().compareTo(ConstantesSistema.SIM) == 0) {
				// 5.1.	O sistema valida o CPF/CNPJ do cliente usuário do imóvel
				if (this.verificarCpfCnpjValido(imovel.getId())) {
					MotivoNaoGeracaoDocCobranca motivoNaoGeracao = new MotivoNaoGeracaoDocCobranca();
					motivoNaoGeracao.setId(MotivoNaoGeracaoDocCobranca.IMOVEL_CPF_CNPJ_VALIDO_PARA_NEGATIVACAO);
					imovelNaoGerado.setMotivoNaoGeracaoDocCobranca(motivoNaoGeracao);
					
					getControladorUtil().inserir(imovelNaoGerado);
					
					imovelNaoGerado = null;
					
					// e caso o documento seja válido, passar para o próximo imóvel.
					return gerarAtividadeAcaoCobrancaHelper;
				}
				
			}
	
			// item 5
			// Caso seja um comando eventual e o indicador de selecionar apenas
			// imóveis com débito for Não(2)
			VerificarCriterioCobrancaParaImovelHelper verificarCriterioCobrancaParaImovelHelper = null;
	
			SistemaParametro sistemaParametros = getControladorUtil().pesquisarParametrosDoSistema();
	
			// item 6
			// Caso Contrário verificar se o critério satisfaz o critério de
			// cobrança e alguma das linhas do critério
	
			// [SB0004] - Verificar Critério de Cobrança para o Imóvel
			verificarCriterioCobrancaParaImovelHelper = this
					.verificarCriterioCobrancaParaImovel(imovel, acaoCobranca,
							criterioCobranca, colecaoCobrancaCriterioLinha,
							anoMesReferenciaInicial, anoMesReferenciaFinal,
							dataVencimentoInicial, dataVencimentoFinal,
							colecaoDebitosNotificados, sistemaParametros,
							cobrancaAcaoAtividadeComando, imovelNaoGerado,
							idDocumentoCobrancaAcaoPrecedente,
							validacaoPorItemCobrado);
	
			// recupera a flag para saber se o imóvel satisfaz o critério de
			// cobrança
			boolean flagCriterioCobrancaImovel = verificarCriterioCobrancaParaImovelHelper
					.isFlagCriterioCobrancaImovel();
	
			// se o imóvel satisfaz o critério de cobrança
			if (flagCriterioCobrancaImovel) {
	
				gerarAtividadeAcaoCobrancaHelper = new GerarAtividadeAcaoCobrancaHelper();
	
				// se a atividade de cobrança for "EMITIR"
				if (atividadeCobranca.getId().intValue() == CobrancaAtividade.EMITIR) {
	
					// [SB0005] - Gerar Documento de Cobrança
					// Se for de cronograma
					DocumentoEmissaoForma documentoEmissaoForma = new DocumentoEmissaoForma();
					if (cobrancaAcaoAtividadeCronograma != null) {
						// Seta a forma de emissão de documento para "cronograma"
						documentoEmissaoForma.setId(DocumentoEmissaoForma.CRONOGRAMA);
	
						// Se for de comando(eventual)
					} else {
						// Seta a forma de emissão de documento para "eventual"
						documentoEmissaoForma.setId(DocumentoEmissaoForma.EVENTUAL);
					}
	
					BigDecimal somatorioAcrescimos = new BigDecimal("0.00");
	
					// alterado por Sávio Luiz data:23/05/2007
					if (acaoCobranca.getIndicadorCobrancaDebACobrar() != null
							&& acaoCobranca.getIndicadorCobrancaDebACobrar()
									.equals(ConstantesSistema.INDICADOR_USO_ATIVO)) {
	
						if (verificarCriterioCobrancaParaImovelHelper.getColecaoContasValores() != null
								&& !verificarCriterioCobrancaParaImovelHelper.getColecaoContasValores().isEmpty()) {
							// Cria os itens de cobrança de documento para contas
							for (ContaValoresHelper contaValorHelper : verificarCriterioCobrancaParaImovelHelper
									.getColecaoContasValores()) {
								if (contaValorHelper.getValorMulta() != null) {
									somatorioAcrescimos = somatorioAcrescimos.add(contaValorHelper.getValorMulta());
								}
								if (contaValorHelper.getValorJurosMora() != null) {
									somatorioAcrescimos = somatorioAcrescimos
											.add(contaValorHelper.getValorJurosMora());
								}
								if (contaValorHelper.getValorAtualizacaoMonetaria() != null) {
									somatorioAcrescimos = somatorioAcrescimos
											.add(contaValorHelper.getValorAtualizacaoMonetaria());
								}
							}
						}
	
						if (verificarCriterioCobrancaParaImovelHelper.getColecaoGuiasPagamentoValores() != null
								&& !verificarCriterioCobrancaParaImovelHelper.getColecaoGuiasPagamentoValores().isEmpty()) {
							// cria os itens de cobrança de documento para as guias de pagamento
							for (GuiaPagamentoValoresHelper guiaPagamentoValorHelper : verificarCriterioCobrancaParaImovelHelper
									.getColecaoGuiasPagamentoValores()) {
	
								if (guiaPagamentoValorHelper.getValorMulta() != null) {
									somatorioAcrescimos = somatorioAcrescimos
											.add(guiaPagamentoValorHelper.getValorMulta());
								}
								if (guiaPagamentoValorHelper.getValorJurosMora() != null) {
									somatorioAcrescimos = somatorioAcrescimos
											.add(guiaPagamentoValorHelper.getValorJurosMora());
								}
								if (guiaPagamentoValorHelper
										.getValorAtualizacaoMonetaria() != null) {
									somatorioAcrescimos = somatorioAcrescimos
											.add(guiaPagamentoValorHelper.getValorAtualizacaoMonetaria());
								}
							}
						}
	
					}
	
					Date dataEmissaoPredecessor = null;
					if(cobrancaDocumentoPredecessor != null){
						dataEmissaoPredecessor = cobrancaDocumentoPredecessor.getEmissao(); 
					}
					
					BigDecimal valorDescontoPagamentoAVista = 
							verificarCriterioCobrancaParaImovelHelper.getValorDesconto();
					
					ExtratoDebitoRelatorioHelper extratoDebitoRelatorioHelper = this
							.gerarDocumentoCobranca(imovel, acaoCobranca
									.getIndicadorGeracaoTaxa().shortValue(),
									verificarCriterioCobrancaParaImovelHelper.getColecaoContasValores(),
									verificarCriterioCobrancaParaImovelHelper.getColecaoGuiasPagamentoValores(),
									verificarCriterioCobrancaParaImovelHelper.getColecaoDebitoACobrar(),
									somatorioAcrescimos, valorDescontoPagamentoAVista,
									sistemaParametros.getAnoMesFaturamento(), // anoMesReferenciaDebito
									documentoEmissaoForma, acaoCobranca.getDocumentoTipo(),
									cobrancaAcaoAtividadeComando, // cobrancaAcaoAtividadeComando
									cobrancaAcaoAtividadeCronograma, // cobrancaAcaoAtividadeCronograma
									imovel.getQuadra().getRota().getEmpresa(), // Empresa
									criterioCobranca, // CobrancaCriterio
									acaoCobranca, // CobrancaAcao
									verificarCriterioCobrancaParaImovelHelper.getValorDebitoImovel(), 
									dataAtual,null, null,null, dataEmissaoPredecessor, null, null,null, new Short("1")); // valorDocumento
	
					if (extratoDebitoRelatorioHelper != null) {
						gerarAtividadeAcaoCobrancaHelper.getColecaoDocumentosCobranca().add(
										extratoDebitoRelatorioHelper.getDocumentoCobranca());
					}
					
					extratoDebitoRelatorioHelper = null;
	
				}

				// seta a quantidade de documentos pra 1(um)
				gerarAtividadeAcaoCobrancaHelper.setQuantidadeDocumentosCobranca(1);
	
				// seta a quantidade de itens cobrados de documentos
				gerarAtividadeAcaoCobrancaHelper.setQuantidadeItensCobradosDocumentos(
						verificarCriterioCobrancaParaImovelHelper.getQuantidadeItensEmDebito());
	
				// seta o valor de documentos de cobrança
				gerarAtividadeAcaoCobrancaHelper.setValorDocumentosCobranca(
						verificarCriterioCobrancaParaImovelHelper.getValorDebitoImovel());
	
				// se o imóvel não satisfaz o critério de cobrança
			} else {
				
				// retorna o objeto nulo e passa para o próximo imóvel
				return gerarAtividadeAcaoCobrancaHelper;
			}
			// fim item 5
			
			imovelNaoGerado = null;
			
			// retorna o objeto contendo todas as informações necessárias
			return gerarAtividadeAcaoCobrancaHelper;
		
		} catch (ErroRepositorioException ex) {
			
			// levanta a exceção para a próxima camada
			throw new ControladorException("erro.sistema", ex);
		}
	}
	

	/**
	 * [UC0251] Gerar Atividade de Ação de Cobrança [SB0004] Verificar Critério
	 * de Cobrança para Imóvel
	 * 
	 * @author Pedro Alexandre
	 * @created 08/02/2006
	 * 
	 * @param imovel
	 *            Imóvel
	 * @param acaoCobranca
	 *            Ação de Cobrança
	 * @param cobrancaCriterio
	 *            Critériode cobrança para ser utilizado
	 * @param colecaoCobrancaCriterioLinha
	 *            Coleção de linha de critério de cobrança
	 * @param anoMesReferenciaInicial
	 *            Ano/Mês de referência inicial
	 * @param anoMesReferenciaFinal
	 *            Ano/Mês de referência final
	 * @param dataVencimentoInicial
	 *            Data de vencimento inicial
	 * @param dataVencimentoFinal
	 *            Data de vencimento final
	 * @param colecaoDebitosNotificados
	 *            Coleção de Débitos Notificados
	 * @param sistemaParametros
	 *            Parâmetros do Sistema
	 * 
	 * @throws ControladorException
	 *             Controlador Exception
	 * 
	 * @return Retorna um objeto contendo todas as informações necessárias prara
	 *         identificar se um imóvel satisfaz os critérios de cobrança
	 */
	public VerificarCriterioCobrancaParaImovelHelper verificarCriterioCobrancaParaImovel(
			Imovel imovel, CobrancaAcao acaoCobranca,
			CobrancaCriterio cobrancaCriterio,
			Collection<CobrancaCriterioLinha> colecaoCobrancaCriterioLinha,
			String anoMesReferenciaInicial, String anoMesReferenciaFinal,
			Date dataVencimentoInicial, Date dataVencimentoFinal,
			Collection<CobrancaDocumentoItem> colecaoDebitosNotificados,
			SistemaParametro sistemaParametros,
			CobrancaAcaoAtividadeComando cobrancaAcaoAtividadeComando,
			ImovelNaoGerado imovelNaoGerado, Integer idDocumentoTipoCobrancaAcaoPrecedente,
			boolean validacaoPorItemCobrado)
			throws ControladorException {

		// cria o objeto de retorno do metódo
		VerificarCriterioCobrancaParaImovelHelper verificarCriterioCobrancaParaImovelHelper = new VerificarCriterioCobrancaParaImovelHelper();

		// seta a flag do critério de cobrança para false(o imóvel não satisfaz
		// o critério de cobrança)
		verificarCriterioCobrancaParaImovelHelper
				.setFlagCriterioCobrancaImovel(false);
		
		if (anoMesReferenciaInicial == null 
				|| anoMesReferenciaInicial.trim().equals("")) {
			anoMesReferenciaInicial = "000101"; 
			anoMesReferenciaFinal = sistemaParametros.getAnoMesArrecadacao().toString();
		}
		
		if (dataVencimentoInicial == null) {
			Calendar calendario = Calendar.getInstance();
	
			calendario.add(Calendar.MONTH, -1);
	
			String ultimoDiaMesAnterior = "";
			ultimoDiaMesAnterior = calendario.getActualMaximum(Calendar.DAY_OF_MONTH) + "";
	
			if (calendario.get(Calendar.MONTH) < 9) {
				ultimoDiaMesAnterior = ultimoDiaMesAnterior + "/0" + (calendario.get(Calendar.MONTH) + 1);
			} else {
				ultimoDiaMesAnterior = ultimoDiaMesAnterior + "/" + (calendario.get(Calendar.MONTH) + 1);
			}
			ultimoDiaMesAnterior = ultimoDiaMesAnterior + "/" + calendario.get(Calendar.YEAR);
	
			dataVencimentoInicial = Util.converteStringParaDate("01/01/0001");
			dataVencimentoFinal = Util.converteStringParaDate(ultimoDiaMesAnterior);
		}
		
		// item 1
		// se o indicador de emissão da ação de cobrança para imóvel,com
		// situação especial de cobrança
		// e o imóvel esteja com algum tipo de situação especial de cobrança
		if (cobrancaCriterio.getIndicadorEmissaoImovelParalisacao()
				.shortValue() == 2
				&& imovel.getCobrancaSituacaoTipo() != null) {

			MotivoNaoGeracaoDocCobranca motivoNaoGeracao = 
				new MotivoNaoGeracaoDocCobranca();
			motivoNaoGeracao.setId(MotivoNaoGeracaoDocCobranca.IMOVEL_EM_SITUACAO_ESPECIAL_COBRANCA);
			imovelNaoGerado.setMotivoNaoGeracaoDocCobranca(motivoNaoGeracao);						
			
			getControladorUtil().inserir(imovelNaoGerado);
			
			imovelNaoGerado = null;
			
			// indica que o imóvel não satisfaz o critério de cobrança
			return verificarCriterioCobrancaParaImovelHelper;
		}
		// fim item 1

		// item 2
		Collection colecaoImovelCobrancaSituacao = null;
		try {
			colecaoImovelCobrancaSituacao = repositorioCobranca
					.pesquisarImovelCobrancaSituacao(imovel.getId());

			// erro nohibernate
		} catch (ErroRepositorioException ex) {
			// levanta a exceção para a próxima camada
			throw new ControladorException("erro.sistema", ex);
		}
		
		if (colecaoImovelCobrancaSituacao != null && !colecaoImovelCobrancaSituacao.isEmpty()){

			// se o indicador de emissão da ação de cobrança para imóvel,com
			// situação de cobrança correspondente a " 2-NÃO"
			// e o imóvel esteja com algum tipo de situação de cobrança, 
			// passar o imovel, indicando q o imovel nao satisfaz o criterio de cobranca

			if (cobrancaCriterio.getIndicadorEmissaoImovelSituacaoCobranca()
					.shortValue() == 2) {

				MotivoNaoGeracaoDocCobranca motivoNaoGeracao = 
					new MotivoNaoGeracaoDocCobranca();
				motivoNaoGeracao.setId(MotivoNaoGeracaoDocCobranca.CRITERIO_NAO_PERMITE_SITUACAO_COBRANCA);
				imovelNaoGerado.setMotivoNaoGeracaoDocCobranca(motivoNaoGeracao);						
				
				getControladorUtil().inserir(imovelNaoGerado);
				
				imovelNaoGerado = null;
				
					// indica que o imóvel não satisfaz o critério de cobrança
					return verificarCriterioCobrancaParaImovelHelper;
			} else {
				// Item 4.2 
				// Verificar se alguma das situações de cobrança do 
				// imóvel não estejam contidas nas selecionadas para o critério
				
				boolean situacaoCobrancaImovelSelecionada = true;
				
				//RM7818 - alterado por Ana Maria - 05/10/2012 
				Collection colecaoSituacoesCobrancaNaoSelecionadas = this.pesquisarCobrancaSituacaoNaoIncluidaCriterio(cobrancaCriterio.getId()); 
				
				if (colecaoSituacoesCobrancaNaoSelecionadas != null && 
						!colecaoSituacoesCobrancaNaoSelecionadas.isEmpty()){
				
					for (Iterator iterSitImov = colecaoImovelCobrancaSituacao.iterator(); 
							iterSitImov.hasNext();) {
						Integer idSitCobImov = (Integer) iterSitImov.next();
						CobrancaSituacao cobrancaSituacaoImov = new CobrancaSituacao();
						cobrancaSituacaoImov.setId(idSitCobImov);
						
						if(colecaoSituacoesCobrancaNaoSelecionadas.contains(cobrancaSituacaoImov)){
							situacaoCobrancaImovelSelecionada = false;
							System.out.println(imovel.getId());
							break;
						}
					}
									
				}	

				if (!situacaoCobrancaImovelSelecionada){
					
					MotivoNaoGeracaoDocCobranca motivoNaoGeracao = 
						new MotivoNaoGeracaoDocCobranca();
					motivoNaoGeracao.setId(MotivoNaoGeracaoDocCobranca.IMOVEL_EM_SITUACAO_COBRANCA_NAO_PERMITIDA);
					imovelNaoGerado.setMotivoNaoGeracaoDocCobranca(motivoNaoGeracao);						

					getControladorUtil().inserir(imovelNaoGerado);
					
					imovelNaoGerado = null;
					
					return verificarCriterioCobrancaParaImovelHelper;		
				}
				
			}
				
		}		
		// fim item 2

		// item 3
		// cria a flag que vai indicar se o perfil do imóvel exista na coleção
		// de linhas de critério de cobrança
		boolean flagPerfilImovel = false;

		// laço para verificar todas as linhas
		labelLoop: for (CobrancaCriterioLinha cobrancaCriterioLinha : colecaoCobrancaCriterioLinha) {
			// se o perfil for igual
			if (cobrancaCriterioLinha.getImovelPerfil().getId().intValue() == imovel
					.getImovelPerfil().getId().intValue()) {
				// seta a flag par true
				flagPerfilImovel = true;

				// encerrar o laço
				break labelLoop;
			}
		}

		// se existe o perfil do imóvel em alguma linha de critério de cobrança
		if (!flagPerfilImovel) {
			
			MotivoNaoGeracaoDocCobranca motivoNaoGeracao = 
				new MotivoNaoGeracaoDocCobranca();
			motivoNaoGeracao.setId(MotivoNaoGeracaoDocCobranca.NAO_HA_CRITERIO_PARA_O_PERFIL);
			imovelNaoGerado.setMotivoNaoGeracaoDocCobranca(motivoNaoGeracao);						
			
			getControladorUtil().inserir(imovelNaoGerado);
			
			imovelNaoGerado = null;
			
			// indica que o imóvel não satisfaz o critério de cobrança
			return verificarCriterioCobrancaParaImovelHelper;
		}
		// fim item 3

		// item 4
		// cria as variáveis que vão ser utilizadas para obter o débito do
		// imóvel
		final int indicadorDebitoImovel = 1;
		String matriculaImovel = imovel.getId().toString();
		String codigoCliente = null;
		Short clienteRelacaoTipo = null;
		int indicadorPagamento = 1;
		int indicadorConta = cobrancaCriterio.getIndicadorEmissaoContaRevisao();
		int indicadorDebitoACobrar = acaoCobranca.getIndicadorCobrancaDebACobrar();
		int indicadorCreditoARalizar = acaoCobranca.getIndicadorCreditosARealizar().intValue();
		int indicadorNotasPromissorias = acaoCobranca.getIndicadorNotasPromissoria().intValue();
		int indicadorGuiaPagamento = 2;
		int indicadorCalcularAcrescimoImpontualidade = acaoCobranca
				.getIndicadorAcrescimoImpontualidade().intValue();
		
		if(acaoCobranca!=null 
				&& acaoCobranca.getId().compareTo(CobrancaAcao.CARTA_FINAL_DE_ANO)==0){	
			indicadorGuiaPagamento = 1;
			indicadorConta = 2;
		}

		// obtém o débito do imóvel
		ObterDebitoImovelOuClienteHelper debitoImovel = this
				.obterDebitoImovelOuCliente(indicadorDebitoImovel,
						matriculaImovel, codigoCliente, clienteRelacaoTipo,
						anoMesReferenciaInicial, anoMesReferenciaFinal,
						dataVencimentoInicial, dataVencimentoFinal,
						indicadorPagamento, indicadorConta,
						indicadorDebitoACobrar, indicadorCreditoARalizar,
						indicadorNotasPromissorias, indicadorGuiaPagamento,
						indicadorCalcularAcrescimoImpontualidade, null);
		// fim item 4

		// recupera as coleções de conta, guia de pagamento e débito a cobrar do
		// imóvel
		Collection<ContaValoresHelper> colecaoContasValores = debitoImovel
				.getColecaoContasValores();
		Collection<DebitoACobrar> colecaoDebitoACobrar = debitoImovel
				.getColecaoDebitoACobrar();
		Collection<GuiaPagamentoValoresHelper> colecaoGuiasPagamentoValores = debitoImovel
				.getColecaoGuiasPagamentoValores();

		// item 5
		// cria as coleções de contas, guia de pagamentoe débito a cobrar
		// que vão ser excluídas das coleções anteriores
		Collection<ContaValoresHelper> colecaoContasValoresParaRemocao = new ArrayList();
		Collection<DebitoACobrar> colecaoDebitoACobrarParaRemocao = new ArrayList();
		Collection<GuiaPagamentoValoresHelper> colecaoGuiasPagamentoValoresRemocao = new ArrayList();

		if (colecaoContasValores != null) {

			// laço para verificar quais contas não constam nos débitos
			// notificados
			for (ContaValoresHelper contaValorHelper : colecaoContasValores) {
				// cria a flag que vai indicar se a conta consta nos débitos
				// notificados

				if (contaValorHelper.getValorPago() != null
						&& contaValorHelper.getValorPago().compareTo(
								new BigDecimal(0)) == 1) {
					// adiciona a conta na coleção que vai ser removida
					colecaoContasValoresParaRemocao.add(contaValorHelper);
				} else {
					boolean flagAchouConta = false;
					// se a coleção de débitos notificados não estiver vazia
					if (colecaoDebitosNotificados != null
							&& !colecaoDebitosNotificados.isEmpty()) {
						// laço para verificar os items de documento de cobrança
						labelConta: for (CobrancaDocumentoItem cobrancaDocumentoItem : colecaoDebitosNotificados) {
							// se o item é uma conta
							if (cobrancaDocumentoItem.getContaGeral() != null) {
								// se a conta é a mesma do item
								if (cobrancaDocumentoItem.getContaGeral().getId().intValue() 
										== contaValorHelper.getConta().getId().intValue()) {
									// seta que a conta consta nos débitos
									// notificados
									flagAchouConta = true;

									// para o laço de item de documento de
									// cobrança
									// e passa para a próxima conta
									break labelConta;
								}
							}
						}
					}
					// se a conta não consta nos items
					if (!flagAchouConta 
							&& acaoCobranca.getCobrancaAcaoPredecessora() != null) {
						// adiciona a conta na coleção que vai ser removida
						colecaoContasValoresParaRemocao
								.add(contaValorHelper);
					}
					// Alterado por Sávio Luiz Analista:Adriano Brito
					// Data:11/10/2007
					else {
						if (contaValorHelper.getConta() != null) {
							if (contaValorHelper.getConta()
									.getDebitoCreditoSituacaoAtual() != null
									&& contaValorHelper
											.getConta()
											.getDebitoCreditoSituacaoAtual()
											.getId()
											.equals(
													DebitoCreditoSituacao.PARCELADA)) {
								// adiciona a conta na coleção que vai ser
								// removida
								colecaoContasValoresParaRemocao
										.add(contaValorHelper);
							}

						}
					}

				}

			}
		}

		// laço para verificar quais débitos a cobrar não constam nos
		// débitos notificados
		if (colecaoDebitoACobrar != null) {
			for (DebitoACobrar debitoACobrar : colecaoDebitoACobrar) {

				// cria a flag que vai indicar se o débito a cobrar consta
				// nos
				// débitos notificados
				boolean flagAchouDebitoACobrar = false;
				// se a coleção de débitos notificados não estiver vazia
				if (colecaoDebitosNotificados != null
						&& !colecaoDebitosNotificados.isEmpty()) {

					// laço para verificar os items de documento de cobrança
					labelDebitoACobrar: for (CobrancaDocumentoItem cobrancaDocumentoItem : colecaoDebitosNotificados) {

						// se o item é um débito a cobrar
						if (cobrancaDocumentoItem.getDebitoACobrarGeral() != null) {

							// se o débito a cobrar é o mesmo do item
							if (cobrancaDocumentoItem.getDebitoACobrarGeral().getId().intValue() 
									== debitoACobrar.getId().intValue()) {
								// seta que o débito a cobrar consta nos débitos
								// notificados
								flagAchouDebitoACobrar = true;

								// para o laço de item de documento de cobrança
								// e passa para o próximo débito a cobrar
								break labelDebitoACobrar;
							}
						}
					}
				} 
				// se o débito a cobrar não consta nos items
				if (!flagAchouDebitoACobrar) {
					// adiciona o débito a cobrar na coleção que vai ser
					// removida
					colecaoDebitoACobrarParaRemocao.add(debitoACobrar);
				}

			}
		}

		// laço para verificar quais guias de pagamento não constam nos
		// débitos notificados
		if (colecaoGuiasPagamentoValores != null) {
			for (GuiaPagamentoValoresHelper guiaPagamentoValoresHelper : colecaoGuiasPagamentoValores) {
				if (guiaPagamentoValoresHelper.getValorPago() != null
						&& guiaPagamentoValoresHelper.getValorPago().compareTo(
								new BigDecimal(0)) == 1) {
					// adiciona a conta na coleção que vai ser removida
					colecaoGuiasPagamentoValoresRemocao
							.add(guiaPagamentoValoresHelper);
				} else {
					// cria a flag que vai indicar se a guia de pagamento
					// consta
					// nos
					// débitos notificados
					boolean flagAchouGuiaPagamento = false;

					// se a coleção de débitos notificados não estiver vazia
					if (colecaoDebitosNotificados != null
							&& !colecaoDebitosNotificados.isEmpty()) {

						// laço para verificar os items de documento de
						// cobrança
						labelGuiaPagamento: for (CobrancaDocumentoItem cobrancaDocumentoItem : colecaoDebitosNotificados) {

							// se o item é uma guia de pagamento
							if (cobrancaDocumentoItem.getGuiaPagamentoGeral() != null) {

								// se a guia de pagamento é o mesmo do item
								if (cobrancaDocumentoItem.getGuiaPagamentoGeral().getId().intValue() 
									== guiaPagamentoValoresHelper.getGuiaPagamento().getId().intValue()) {
									// seta que a guia de pagamento consta
									// nos
									// débitos
									// notificados
									flagAchouGuiaPagamento = true;

									// para o laço de item de documento de
									// cobrança
									// e passa para a próxima guia de
									// pagamento
									break labelGuiaPagamento;
								}
							}
						}
						// se a guia de pagamento não consta nos items
						if (!flagAchouGuiaPagamento) {
							// adiciona a guia de pagamento na coleção que vai
							// ser
							// removida
							colecaoGuiasPagamentoValoresRemocao
									.add(guiaPagamentoValoresHelper);
						}
					}

				}
			}
		}

		// remove as contas, débitos a cobrar e guias de pagamento
		// que não constam nos itens de documentode cobrança
		if (colecaoContasValores != null) {
			colecaoContasValores.removeAll(colecaoContasValoresParaRemocao);
		}
		if (colecaoDebitoACobrar != null) {
			colecaoDebitoACobrar.removeAll(colecaoDebitoACobrarParaRemocao);
		}
		if (colecaoGuiasPagamentoValores != null) {
			colecaoGuiasPagamentoValores
					.removeAll(colecaoGuiasPagamentoValoresRemocao);
		}

		// fim item 5
		
		//RM93 - adicionado por Vivianne Sousa - 23/12/2010 - analista:Rosana Carvalho
		if(validacaoPorItemCobrado || acaoCobranca.getCobrancaAcaoPredecessoraAlternativa() != null){
			
			if (idDocumentoTipoCobrancaAcaoPrecedente == null) {
				if (acaoCobranca.getCobrancaAcaoPredecessoraAlternativa().getDocumentoTipo() != null &&
					acaoCobranca.getCobrancaAcaoPredecessoraAlternativa().getDocumentoTipo().getId() != null){
					
					idDocumentoTipoCobrancaAcaoPrecedente = 
						acaoCobranca.getCobrancaAcaoPredecessoraAlternativa().getDocumentoTipo().getId();
				}
			}
			
			
			if (idDocumentoTipoCobrancaAcaoPrecedente != null) {
				
				boolean verificaValidacaoPorItemCobrado = verificaValidacaoPorItemCobrado(
						imovel.getId(),idDocumentoTipoCobrancaAcaoPrecedente,
						colecaoContasValores, colecaoDebitoACobrar);
				
				//e qualquer um dos itens cobrados não tenha sido cobrado nas últimas
				//6(seis) ações relativa à ação precedente passar para o próximo imóvel
				if(!verificaValidacaoPorItemCobrado){
					
					MotivoNaoGeracaoDocCobranca motivoNaoGeracao = new MotivoNaoGeracaoDocCobranca();
					motivoNaoGeracao.setId(MotivoNaoGeracaoDocCobranca.NAO_EXISTE_DOCUMENTO_PRECEDENTE_VALIDO);
					imovelNaoGerado.setMotivoNaoGeracaoDocCobranca(motivoNaoGeracao);
					
					getControladorUtil().inserir(imovelNaoGerado);
					
					imovelNaoGerado = null;
					
					return verificarCriterioCobrancaParaImovelHelper;
				}
				
			} 
			
		}
		
		// inicio item 6
		
		// Desenvolvedor:Hugo Amorim Analista:Ana Cristina Data:30/06/2010
		// Verifica Consumo e Tipo de Medição,
		// Caso consumo medio inicial, final e tipo de consumo
		// tenham sido informados no comando eventual.
		if (cobrancaAcaoAtividadeComando != null
			&& cobrancaAcaoAtividadeComando.getConsumoMedioInicial()!=null
			&& !cobrancaAcaoAtividadeComando.getConsumoMedioInicial().toString().equals("")
			&& cobrancaAcaoAtividadeComando.getConsumoMedioFinal()!=null
			&& !cobrancaAcaoAtividadeComando.getConsumoMedioFinal().toString().equals("")
			&& cobrancaAcaoAtividadeComando.getTipoConsumo()!=null
			&& !cobrancaAcaoAtividadeComando.getTipoConsumo().toString().equals("")){
			
			Integer consumoMes = null;
			// Pesquisa consumo do imovel nos ultimos 6 meses,
			// se houver verifica se atende ao intervalo informado
			// no comando.
			labelPesquisaConsumoUltimos6Meses : for (int i = 0; i <= 6; i++) {
				
				Integer anoMes = 
					Util.subtrairMesDoAnoMes(sistemaParametros.getAnoMesFaturamento(), i);
				
				consumoMes = 
					getControladorMicromedicao()
						.pesquisarNumeroConsumoMedioImovel(imovel.getId(),anoMes);
				
				if(consumoMes!=null){
					break labelPesquisaConsumoUltimos6Meses;
				}
			}
			
			boolean naoAtendeAoCriterioDeConsumo = true;
			
			// Caso possua consumo verifica se o mesm o atende
			// ao intervalo informado.
			if(consumoMes!=null){
				
				// Verifica se consumo não esta no intervalo informado para criterio.
				if(consumoMes.compareTo(cobrancaAcaoAtividadeComando.getConsumoMedioInicial())>=0
						&& consumoMes.compareTo(cobrancaAcaoAtividadeComando.getConsumoMedioFinal())<=0){
					
					boolean existeHidrometro = 
						getControladorAtendimentoPublico()
							.verificarExistenciaHidrometroEmLigacaoAgua(imovel.getId());
					// MEDIDO
					if(cobrancaAcaoAtividadeComando.getTipoConsumo().compareTo(new Short("1"))==0
							&& existeHidrometro){
						naoAtendeAoCriterioDeConsumo = false;
					}
					// NAO MEDIDO
					if(cobrancaAcaoAtividadeComando.getTipoConsumo().compareTo(new Short("2"))==0
							&& !existeHidrometro){
						naoAtendeAoCriterioDeConsumo = false;
					}
					// AMBOS
					if(cobrancaAcaoAtividadeComando.getTipoConsumo().compareTo(new Short("3"))==0){
						naoAtendeAoCriterioDeConsumo = false;
					}
					
				}

			}
			// Caso não atenda ao criterio indica que o imóvel não satisfaz o critério de cobrança.
			if(naoAtendeAoCriterioDeConsumo){
						
				MotivoNaoGeracaoDocCobranca motivoNaoGeracao = new MotivoNaoGeracaoDocCobranca();
				
				motivoNaoGeracao.setId(MotivoNaoGeracaoDocCobranca.CONSUMO_MEDIO_FORA_INTERVALO_DEFINIDO_CRITERIO);
				
				imovelNaoGerado.setMotivoNaoGeracaoDocCobranca(motivoNaoGeracao);						
				
				getControladorUtil().inserir(imovelNaoGerado);
				
				imovelNaoGerado = null;
				
				return verificarCriterioCobrancaParaImovelHelper;
			}
		}
		// fim item 6
		
		// inicio item Período de Fiscalização do Imóvel
		
		// Desenvolvedor:Hugo Amorim Analista:Fatima Data:15/07/2010
		// Verifica Consumo e Tipo de Medição,
		// Caso consumo medio inicial, final e tipo de consumo
		// tenham sido informados no comando eventual.
		
		boolean existeSituacaoFiscalizacaoFiltro = false;
		Collection<CobrancaAcaoAtividadeComandoFiscalizacaoSituacao> colecaoCobrancaAcaoFisc = null;
		
		if (cobrancaAcaoAtividadeComando != null){
			
			FiltroCobrancaAcaoAtividadeComandoFiscalizacaoSituacao filtroCobrancaAcaoFisc
				= new FiltroCobrancaAcaoAtividadeComandoFiscalizacaoSituacao();
		
			filtroCobrancaAcaoFisc.adicionarParametro(
				new ParametroSimples(
					FiltroCobrancaAcaoAtividadeComandoFiscalizacaoSituacao.COBRANCA_ACAO_ATIVIDADE_COMANDO_ID,
					cobrancaAcaoAtividadeComando.getId()));
			
			filtroCobrancaAcaoFisc.adicionarCaminhoParaCarregamentoEntidade(
					FiltroCobrancaAcaoAtividadeComandoFiscalizacaoSituacao.FISCALIZACAO_SITUACAO);
				
			colecaoCobrancaAcaoFisc =
				getControladorUtil().pesquisar(filtroCobrancaAcaoFisc, 
					CobrancaAcaoAtividadeComandoFiscalizacaoSituacao.class.getName());
	
			if(!Util.isVazioOrNulo(colecaoCobrancaAcaoFisc)){
				existeSituacaoFiscalizacaoFiltro = true;
			}
				
		}
		
		if (cobrancaAcaoAtividadeComando != null &&
			((cobrancaAcaoAtividadeComando.getPeriodoInicialFiscalizacao()!=null &&
			!cobrancaAcaoAtividadeComando.getPeriodoInicialFiscalizacao().equals("")) ||
			(cobrancaAcaoAtividadeComando.getPeriodoFinalFiscalizacao()!=null &&
			!cobrancaAcaoAtividadeComando.getPeriodoFinalFiscalizacao().equals("")) ||
			existeSituacaoFiscalizacaoFiltro)){
			
			Collection<OrdemServico> colecaoOs = null;
			
			//	Caso o parâmetro Período de Fiscalização do Imóvel esteja informado.
			if((cobrancaAcaoAtividadeComando.getPeriodoInicialFiscalizacao()!=null &&
				!cobrancaAcaoAtividadeComando.getPeriodoInicialFiscalizacao().equals("")) ||
				(cobrancaAcaoAtividadeComando.getPeriodoFinalFiscalizacao()!=null &&
				!cobrancaAcaoAtividadeComando.getPeriodoFinalFiscalizacao().equals(""))){
				
				FiltroOrdemServico filtroOrdemServico = new FiltroOrdemServico();
				
				filtroOrdemServico.adicionarParametro(
						new ParametroSimples(FiltroOrdemServico.ID_IMOVEL, imovel.getId()));
				
				if((cobrancaAcaoAtividadeComando.getPeriodoInicialFiscalizacao()!=null &&
						!cobrancaAcaoAtividadeComando.getPeriodoInicialFiscalizacao().equals(""))){
					filtroOrdemServico.adicionarParametro(
							new MaiorQue(FiltroOrdemServico.DATA_FISCALIZACAO_SITUACAO, 
								Util.formatarDataInicial(cobrancaAcaoAtividadeComando.getPeriodoInicialFiscalizacao())));
				}
				if((cobrancaAcaoAtividadeComando.getPeriodoFinalFiscalizacao()!=null &&
						!cobrancaAcaoAtividadeComando.getPeriodoFinalFiscalizacao().equals(""))){
					filtroOrdemServico.adicionarParametro(
							new MenorQue(FiltroOrdemServico.DATA_FISCALIZACAO_SITUACAO, 
								Util.formatarDataFinal(cobrancaAcaoAtividadeComando.getPeriodoFinalFiscalizacao())));
				}
				
				colecaoOs = this.getControladorUtil()
					.pesquisar(filtroOrdemServico, OrdemServico.class.getName());
				
				// Caso não exista fiscalização para o imóvel no período indicado 
				if(Util.isVazioOrNulo(colecaoOs)){
					MotivoNaoGeracaoDocCobranca motivoNaoGeracao = 
						new MotivoNaoGeracaoDocCobranca();
					motivoNaoGeracao.setId(MotivoNaoGeracaoDocCobranca.SITUACAO_FISCALIZACAO_NAO_ATENDE_CRITERIO);
					imovelNaoGerado.setMotivoNaoGeracaoDocCobranca(motivoNaoGeracao);						
					
					getControladorUtil().inserir(imovelNaoGerado);
					
					imovelNaoGerado = null;

					// indica que o imóvel não satisfaz o critério de cobrança
					return verificarCriterioCobrancaParaImovelHelper;
				}
				// Caso exista fiscalização para o imóvel
				else{
					if(existeSituacaoFiscalizacaoFiltro){				
						//	Verifica se situações de fiscalização do imóvel estejam 
						// contidas nas situações selecionadas para o comando.
						situacoesFiscalizacaoComandoAcao : for (OrdemServico ordemServico : colecaoOs) {
							boolean atendeCriteiro = false;
							for (CobrancaAcaoAtividadeComandoFiscalizacaoSituacao cobAcaoFisc : colecaoCobrancaAcaoFisc) {
								if(cobAcaoFisc.getFiscalizacaoSituacao().getId().compareTo(
									ordemServico.getFiscalizacaoSituacao().getId())==0){
									atendeCriteiro = true;
								}
								if(atendeCriteiro){
									continue situacoesFiscalizacaoComandoAcao;
								}
								//	Caso as situações de fiscalização do imóvel não 
								// estejam contidas nas situações selecionadas para o comando.
								else{
									MotivoNaoGeracaoDocCobranca motivoNaoGeracao = 
										new MotivoNaoGeracaoDocCobranca();
									motivoNaoGeracao.setId(MotivoNaoGeracaoDocCobranca.SITUACAO_FISCALIZACAO_NAO_ATENDE_CRITERIO);
									imovelNaoGerado.setMotivoNaoGeracaoDocCobranca(motivoNaoGeracao);						
									
									getControladorUtil().inserir(imovelNaoGerado);
									
									imovelNaoGerado = null;

									// indica que o imóvel não satisfaz o critério de cobrança
									return verificarCriterioCobrancaParaImovelHelper;
								}						
							}		
						}
					}
				}	
			}
			//	Caso contrário (parâmetro Período de Fiscalização do Imóvel não informado) e
			// caso o parâmetro Situação da Fiscalização esteja informado
			else if(existeSituacaoFiscalizacaoFiltro){
				
				Collection<Integer> colecaoIdsSituacaoFiscalizacao = new ArrayList<Integer>();
				for (CobrancaAcaoAtividadeComandoFiscalizacaoSituacao helper : colecaoCobrancaAcaoFisc) {
					colecaoIdsSituacaoFiscalizacao.add(helper.getFiscalizacaoSituacao().getId());
				}
				
				FiltroOrdemServico filtroOrdemServico = new FiltroOrdemServico();
				
				filtroOrdemServico.adicionarParametro(
						new ParametroSimples(FiltroOrdemServico.ID_IMOVEL, imovel.getId()));
				
				filtroOrdemServico.adicionarParametro(
							new ParametroSimplesIn(FiltroOrdemServico.DATA_FISCALIZACAO_SITUACAO, 
									colecaoIdsSituacaoFiscalizacao));
				
				colecaoOs = this.getControladorUtil()
					.pesquisar(filtroOrdemServico, OrdemServico.class.getName());
				
				//	Caso não exista fiscalização para o imóvel com situação correspondente a alguma 
				// das situações selecionadas para o comando 
				if(Util.isVazioOrNulo(colecaoOs)){
					MotivoNaoGeracaoDocCobranca motivoNaoGeracao = 
						new MotivoNaoGeracaoDocCobranca();
					motivoNaoGeracao.setId(MotivoNaoGeracaoDocCobranca.SITUACAO_FISCALIZACAO_NAO_ATENDE_CRITERIO);
					imovelNaoGerado.setMotivoNaoGeracaoDocCobranca(motivoNaoGeracao);						
					
					getControladorUtil().inserir(imovelNaoGerado);
					
					imovelNaoGerado = null;

					// indica que o imóvel não satisfaz o critério de cobrança
					return verificarCriterioCobrancaParaImovelHelper;
				}
			}			
		}
		// fim item Período de Fiscalização do Imóvel
		
		//6.6. Caso o parâmetro "Código para que sejam selecionados os imóveis 
		//     com situação de ligação não alterada por débito" seja informado
		if(cobrancaAcaoAtividadeComando != null
				&& cobrancaAcaoAtividadeComando.getPeriodoInicialFiscalizacao() != null
				&& !cobrancaAcaoAtividadeComando.getPeriodoInicialFiscalizacao().equals("")
				&& cobrancaAcaoAtividadeComando.getPeriodoFinalFiscalizacao() != null
				&& !cobrancaAcaoAtividadeComando.getPeriodoFinalFiscalizacao().equals("")
				&& cobrancaAcaoAtividadeComando.getLigacaoAlteradaDebito() != null
				&& cobrancaAcaoAtividadeComando.getLigacaoAlteradaDebito().compareTo(new Integer(1)) != 0){
			
			Collection colecaoOSLigNaoAlteradaDebito = null;
			
			try {
				colecaoOSLigNaoAlteradaDebito = repositorioCobranca
						.obterImoveisSituacaoLigacaoNaoAlteradaDebito(imovel.getId(), cobrancaAcaoAtividadeComando.getPeriodoInicialFiscalizacao(), cobrancaAcaoAtividadeComando.getPeriodoFinalFiscalizacao());
			} catch (ErroRepositorioException e) {
				e.printStackTrace();
				throw new ControladorException("erro.sistema", e);
			}
			
			//6.6.1. Caso seja informado para selecionar apenas os imóveis com situação de ligação não alterada por débito
			if(cobrancaAcaoAtividadeComando.getLigacaoAlteradaDebito().compareTo(new Integer(2)) == 0){
				
				//6.6.1.1. Caso o imóvel não esteja com situação de ligação não alterada por débito
				if(colecaoOSLigNaoAlteradaDebito == null || colecaoOSLigNaoAlteradaDebito.size() == 0){
					
					//6.6.1.1. indicar que o imóvel não satisfaz o critério de cobrança
					
					MotivoNaoGeracaoDocCobranca motivoNaoGeracao = 
						new MotivoNaoGeracaoDocCobranca();
					motivoNaoGeracao.setId(MotivoNaoGeracaoDocCobranca.IMOVEL_NAO_ESTA_SIT_LIG_NAO_ALTERADA_DEBITO);
					imovelNaoGerado.setMotivoNaoGeracaoDocCobranca(motivoNaoGeracao);						
					
					getControladorUtil().inserir(imovelNaoGerado);
					
					imovelNaoGerado = null;

					//e retornar para o passo que chamou este subfluxo
					return verificarCriterioCobrancaParaImovelHelper;
					
				}
			}
			
			//6.6.2. Caso seja informado para não incluir os imóveis com situação de ligação não alterada por débito
			if(cobrancaAcaoAtividadeComando.getLigacaoAlteradaDebito().compareTo(new Integer(3)) == 0){
				
				//6.6.2.1. Caso o imóvel esteja com situação de ligação não alterada por débito
				if(colecaoOSLigNaoAlteradaDebito != null && colecaoOSLigNaoAlteradaDebito.size() > 0){
					
					//6.6.2.1. indicar que o imóvel não satisfaz o critério de cobrança
					MotivoNaoGeracaoDocCobranca motivoNaoGeracao = 
							new MotivoNaoGeracaoDocCobranca();
					motivoNaoGeracao.setId(MotivoNaoGeracaoDocCobranca.IMOVEL_SIT_LIG_NAO_ALTERADA_DEBITO);
					imovelNaoGerado.setMotivoNaoGeracaoDocCobranca(motivoNaoGeracao);						
					
					getControladorUtil().inserir(imovelNaoGerado);
					
					imovelNaoGerado = null;

					//e retornar para o passo que chamou este subfluxo
					return verificarCriterioCobrancaParaImovelHelper;
					
				}
				
			}
		}


		// item 7
		// se as coleções de contas, débitos a cobrar e guias de pagamento
		// estiverem vazia
		if ((colecaoContasValores == null || colecaoContasValores.isEmpty())
				&& (colecaoDebitoACobrar == null || colecaoDebitoACobrar
						.isEmpty())
				&& (colecaoGuiasPagamentoValores == null || colecaoGuiasPagamentoValores
						.isEmpty())) {

			// item 7.1
			// Caso seja comando eventual e o indicador de selecionar apenas
			// imóveis com débitos seja igual a sim(1) descarta o imóvel
			if (cobrancaAcaoAtividadeComando != null
					&& cobrancaAcaoAtividadeComando.getIndicadorBoletim() != null
					&& cobrancaAcaoAtividadeComando
							.getIndicadorDebito()
							.equals(
									CobrancaAcaoAtividadeComando.INDICADOR_DEBITO_SIM)) {

				MotivoNaoGeracaoDocCobranca motivoNaoGeracao = 
					new MotivoNaoGeracaoDocCobranca();
				motivoNaoGeracao.setId(MotivoNaoGeracaoDocCobranca.IMOVEL_SEM_DEBITOS);
				imovelNaoGerado.setMotivoNaoGeracaoDocCobranca(motivoNaoGeracao);						
				
				getControladorUtil().inserir(imovelNaoGerado);
				
				imovelNaoGerado = null;

				// indica que o imóvel não satisfaz o critério de cobrança
				return verificarCriterioCobrancaParaImovelHelper;
			} else {
				// caso não seja cmando, seja cronograma então descarta
				if (cobrancaAcaoAtividadeComando == null) {

					MotivoNaoGeracaoDocCobranca motivoNaoGeracao = 
						new MotivoNaoGeracaoDocCobranca();
					motivoNaoGeracao.setId(MotivoNaoGeracaoDocCobranca.IMOVEL_SEM_DEBITOS);
					imovelNaoGerado.setMotivoNaoGeracaoDocCobranca(motivoNaoGeracao);						

					getControladorUtil().inserir(imovelNaoGerado);
					
					imovelNaoGerado = null;
					
					// indica que o imóvel não satisfaz o critério de cobrança
					return verificarCriterioCobrancaParaImovelHelper;
				}
			}

		}
		// fim item 6
		
		//11. Caso seja um comando eventual e não exista nenhuma conta (da lista de contas retornada pelo [UC0067]) 
		//    com a quantidade mínima de dias de vencimento, ou seja, com a data de vencimento menor ou igual a quantidade 
		//    de dias informada (Data Atual - Quantidade de Dias de Vencido)):		
		if (cobrancaAcaoAtividadeComando != null
				&& cobrancaAcaoAtividadeComando.getIndicadorBoletim() != null
				&& colecaoContasValores != null
				&& cobrancaAcaoAtividadeComando.getQuantidadeDiasVencimento() != null
				&& cobrancaAcaoAtividadeComando.getQuantidadeDiasVencimento().compareTo(new Integer("0")) > 0) {
	
			boolean achouConta = false;
			
			for (ContaValoresHelper contaValorHelper : colecaoContasValores) {
				
				Date qtdDiasInformada = Util.subtrairNumeroDiasDeUmaData(new Date(), cobrancaAcaoAtividadeComando.getQuantidadeDiasVencimento());
				
				if(Util.compararData(contaValorHelper.getConta().getDataVencimentoConta(), qtdDiasInformada) <= 0){
					achouConta = true;
					break;
				}
			}
			
			if(!achouConta){
				//11.1. Indicar que o imóvel não satisfaz o critério de cobrança
				MotivoNaoGeracaoDocCobranca motivoNaoGeracao = 
						new MotivoNaoGeracaoDocCobranca();
				motivoNaoGeracao.setId(MotivoNaoGeracaoDocCobranca.CONTAS_QTD_MIN_DIAS_VENC);
				imovelNaoGerado.setMotivoNaoGeracaoDocCobranca(motivoNaoGeracao);						
				
				getControladorUtil().inserir(imovelNaoGerado);
				
				imovelNaoGerado = null;

				//e retornar para o passo que chamou este subfluxo
				return verificarCriterioCobrancaParaImovelHelper;
			}
			
		}


		// item 7

		// se o indicador de emissão de débito da conta do mês for igual a
		// 2(dois) - NÃO
		if (cobrancaCriterio.getIndicadorEmissaoDebitoContaMes().intValue() == 2) {

			if (colecaoContasValores != null) {
				// se existe somente uma conta
				if (colecaoContasValores.size() == 1) {

					// recupera a conta
					Conta conta = (colecaoContasValores.iterator().next())
							.getConta();

					// se a conta for a conta do mês
					if (conta.getReferencia() == Util
							.subtrairData(sistemaParametros
									.getAnoMesFaturamento())) {

						MotivoNaoGeracaoDocCobranca motivoNaoGeracao = 
							new MotivoNaoGeracaoDocCobranca();
						motivoNaoGeracao.setId(MotivoNaoGeracaoDocCobranca.CRITERIO_NAO_PERMITE_DEBITO_APENAS_CONTA_MES);
						imovelNaoGerado.setMotivoNaoGeracaoDocCobranca(motivoNaoGeracao);						

						getControladorUtil().inserir(imovelNaoGerado);
						
						imovelNaoGerado = null;
						
						// indica que o imóvel não satisfaz o critério de
						// cobrança
						return verificarCriterioCobrancaParaImovelHelper;
					}
				}
			}
		}
		// fim item 7

		// item 8
		// se o indicador de emissão de débito da conta antiga for igual a
		// 2(dois) - NÃO
		if (cobrancaCriterio.getIndicadorEmissaoDebitoContaAntiga().intValue() == 2) {

			if (colecaoContasValores != null) {
				// se existe somente uma conta
				if (colecaoContasValores.size() == 1) {

					// recupera a conta
					Conta conta = (colecaoContasValores.iterator().next())
							.getConta();

					// se a conta for uma conta antiga
					if (conta.getReferencia() <= (sistemaParametros
							.getAnoMesFaturamento() - (cobrancaCriterio
							.getNumeroContaAntiga() * 100))) {
						
						MotivoNaoGeracaoDocCobranca motivoNaoGeracao = 
							new MotivoNaoGeracaoDocCobranca();
						motivoNaoGeracao.setId(MotivoNaoGeracaoDocCobranca.CRITERIO_NAO_PERMITE_DEBITO_APENAS_CONTA_ANTIGA);
						imovelNaoGerado.setMotivoNaoGeracaoDocCobranca(motivoNaoGeracao);						
						
						getControladorUtil().inserir(imovelNaoGerado);
						
						imovelNaoGerado = null;
						
						// indica que o imóvel não satisfaz o critério de
						// cobrança
						return verificarCriterioCobrancaParaImovelHelper;
					}
				}
			}
		}
		// fim item 8

		// item 9
		// se o indicador de emissão de débito da conta do mês for igual a
		// 2(dois) - NÃO
		// e o indicador de emissão de débito da conta antiga for igual a
		// 2(dois) - NÃO
		if (cobrancaCriterio.getIndicadorEmissaoDebitoContaMes().intValue() == 2
				&& cobrancaCriterio.getIndicadorEmissaoDebitoContaAntiga()
						.intValue() == 2) {

			if (colecaoContasValores != null) {
				// se existe só duas contas
				if (colecaoContasValores.size() == 2) {

					// flag que indica que a conta é do mês
					boolean flagContaMes = false;

					// flag que indica que a conta é uma conta antiga
					boolean flagContaAntiga = false;

					// laço para verificar se as contas é uma do mês e outra
					// antiga
					for (ContaValoresHelper contaValorHelper : colecaoContasValores) {

						// recupera a conta
						Conta conta = contaValorHelper.getConta();

						// se a conta for a do mês
						if (conta.getReferencia() == Util
								.subtrairData(sistemaParametros
										.getAnoMesFaturamento())) {
							flagContaMes = true;
						}

						// se a conta não for antiga
						if (conta.getReferencia() <= (sistemaParametros
								.getAnoMesFaturamento() - (cobrancaCriterio
								.getNumeroContaAntiga() * 100))) {
							flagContaAntiga = true;
						}
					}

					// se as contas for uma antiga e a outra a do mês
					if (flagContaMes && flagContaAntiga) {

						MotivoNaoGeracaoDocCobranca motivoNaoGeracao = 
							new MotivoNaoGeracaoDocCobranca();
						motivoNaoGeracao.setId(MotivoNaoGeracaoDocCobranca.CRITERIO_NAO_PERMITE_DEBITO_APENAS_CONTA_MES_E_ANTIGA);
						imovelNaoGerado.setMotivoNaoGeracaoDocCobranca(motivoNaoGeracao);						

						getControladorUtil().inserir(imovelNaoGerado);
						
						imovelNaoGerado = null;

						// indica que o imóvel não satisfaz o critério de
						// cobrança
						return verificarCriterioCobrancaParaImovelHelper;
					}

				}

			}
		}
		// fim item 9

		// item 10
		// o sistema calcula a quantidade de contas com parcelamento do imóvel
		int quantidadeContasParcelamento = getControladorFaturamento()
				.pesquisarQuantidadeDebitosCobradosComParcelamento(
						colecaoContasValores);

		// item 11
		// cria a variável que vai armazenar o débito do imóvel
		BigDecimal valorDebitoImovel = new BigDecimal("0.00");

		// cria a variável que vai armazenar a quantidades de itens em débito
		Integer quantidadeItensEmDebito = new Integer("0");

		if (colecaoContasValores != null && !colecaoContasValores.isEmpty()) {

			// laço para somar os valores das contas no valor do débito do
			// imóvel
			for (ContaValoresHelper contaValorHelp : colecaoContasValores) {
				// recupera a conta
				Conta conta = contaValorHelp.getConta();

				// adiciona os valores da conta ao valor do débito do imóvel
				valorDebitoImovel = valorDebitoImovel.add(conta.getValorAgua());
				valorDebitoImovel = valorDebitoImovel.add(conta.getValorEsgoto());
				valorDebitoImovel = valorDebitoImovel.add(conta.getDebitos());
				valorDebitoImovel = valorDebitoImovel.subtract(conta.getValorCreditos());
				valorDebitoImovel = valorDebitoImovel.subtract(conta.getValorImposto());
			}

			// item 12
			// calcula a quantidade de itens em débito do imóvel
			quantidadeItensEmDebito = quantidadeItensEmDebito
					+ colecaoContasValores.size();
		}
		
		
		if(acaoCobranca ==null 
				|| acaoCobranca!=null && acaoCobranca.getId().compareTo(CobrancaAcao.CARTA_FINAL_DE_ANO)!=0){	
		
			// laço para somar os valores das guias de pagamento no valor do débito
			// do imóvel
			if (colecaoGuiasPagamentoValores != null
					&& !colecaoGuiasPagamentoValores.isEmpty()) {
	
				for (GuiaPagamentoValoresHelper guiaPagamentoValoresHelper : colecaoGuiasPagamentoValores) {
	
					// recupera a guia de pagamento
					GuiaPagamento guiaPagamento = guiaPagamentoValoresHelper
							.getGuiaPagamento();
	
					// adiciona o valor do débito da guia ao valor do débito do
					// imóvel
					valorDebitoImovel = valorDebitoImovel.add(guiaPagamento
							.getValorDebito());
				}
	
				// item 12
				// calcula a quantidade de itens em débito do imóvel
				quantidadeItensEmDebito = quantidadeItensEmDebito
						+ colecaoGuiasPagamentoValores.size();
	
			}
	
			// laço para somar os valores dos débitos a cobrar no valor do débito do
			// imóvel
			if (colecaoDebitoACobrar != null && !colecaoDebitoACobrar.isEmpty()) {
	
				for (DebitoACobrar debitoACobrar : colecaoDebitoACobrar) {
	
	                // adiciona o valor do débito ao valor do débito do imóvel
				    valorDebitoImovel = valorDebitoImovel.add(debitoACobrar.getValorTotalComBonus());
				}
	
				// item 12
				// calcula a quantidade de itens em débito do imóvel
				quantidadeItensEmDebito = quantidadeItensEmDebito
						+ colecaoDebitoACobrar.size();
			}
			// fim item 11
			
		}
		
		if(acaoCobranca!= null && acaoCobranca.getId().compareTo(CobrancaAcao.CARTA_FINAL_DE_ANO)==0){	
			
			ResolucaoDiretoria resolucaoDiretoria = new ResolucaoDiretoria();
			resolucaoDiretoria.setId(14);
			
			//4. caso de lista de conta não esteja vazia
			if(debitoImovel.getColecaoContasValores() != null && !debitoImovel.getColecaoContasValores().isEmpty()
					&& debitoImovel.getColecaoContasValores().size() >= 2){
				
				IndicadoresParcelamentoHelper indicadoresParcelamentoHelper = new IndicadoresParcelamentoHelper();
					
				indicadoresParcelamentoHelper.setIndicadorDebitosACobrar(indicadorDebitoACobrar);
				indicadoresParcelamentoHelper.setIndicadorCreditoARealizar(indicadorCreditoARalizar);
				indicadoresParcelamentoHelper.setIndicadorGuiasPagamento(indicadorGuiaPagamento);
				indicadoresParcelamentoHelper.setIndicadorAcrescimosImpotualidade(indicadorCalcularAcrescimoImpontualidade);
				indicadoresParcelamentoHelper.setIndicadorContasRevisao(indicadorConta);
				indicadoresParcelamentoHelper.setIndicadorDividaAtiva(new Integer("3"));
				
				BigDecimal[] valorDebitoTotalEDebitoComDesconto = this.obterValorDebitoTotalEDebitoComDesconto(
					imovel, cobrancaAcaoAtividadeComando, indicadoresParcelamentoHelper, debitoImovel,
					resolucaoDiretoria, new Integer("2"));
				valorDebitoImovel = valorDebitoTotalEDebitoComDesconto[1];
			}else{
				MotivoNaoGeracaoDocCobranca motivoNaoGeracao = new MotivoNaoGeracaoDocCobranca();
				motivoNaoGeracao.setId(MotivoNaoGeracaoDocCobranca.QTD_CONTAS_INVALIDA_PARA_PARCELAMENTO);
				imovelNaoGerado.setMotivoNaoGeracaoDocCobranca(motivoNaoGeracao);						

				getControladorUtil().inserir(imovelNaoGerado);
				
				imovelNaoGerado = null;

				// indica que o imóvel não satisfaz o critério de cobrança
				return verificarCriterioCobrancaParaImovelHelper;
			}
					
		}
		//RM5901 - PE2011085901 - adicionado por Vivianne Sousa - 10/10/2011
		//[SB0006] Obter Desconto do Documento de Cobrança
		BigDecimal valorDesconto =  new BigDecimal("0.00");
		if(acaoCobranca!= null && acaoCobranca.getIndicadorAceitaRDCriterio() != null 
			&& acaoCobranca.getIndicadorAceitaRDCriterio().equals(ConstantesSistema.SIM)
			&& cobrancaCriterio != null && cobrancaCriterio.getResolucaoDiretoria() != null
			&& cobrancaCriterio.getResolucaoDiretoria().getId() != null){
			
			ResolucaoDiretoria resolucaoDiretoria = cobrancaCriterio.getResolucaoDiretoria();
			IndicadoresParcelamentoHelper indicadoresParcelamentoHelper = new IndicadoresParcelamentoHelper();
			indicadoresParcelamentoHelper.setIndicadorDebitosACobrar(indicadorDebitoACobrar);
			indicadoresParcelamentoHelper.setIndicadorCreditoARealizar(indicadorCreditoARalizar);
			indicadoresParcelamentoHelper.setIndicadorGuiasPagamento(indicadorGuiaPagamento);
			indicadoresParcelamentoHelper.setIndicadorAcrescimosImpotualidade(indicadorCalcularAcrescimoImpontualidade);
			indicadoresParcelamentoHelper.setIndicadorContasRevisao(indicadorConta);
			indicadoresParcelamentoHelper.setIndicadorDividaAtiva(new Integer("3"));
			
			ImovelSituacao imovelSituacao = this.obterSituacaoImovel(imovel.getLigacaoAguaSituacao().getId(),
					imovel.getLigacaoEsgotoSituacao().getId());
			
			ParcelamentoPerfil parcelamentoPerfil = this.obterPerfilParcelamentoPorNivel(imovel, imovelSituacao, 
					resolucaoDiretoria.getId(), imovel.getImovelPerfil().getId());
			
			if (parcelamentoPerfil != null){
				
				BigDecimal[] valorDebitoTotalEDebitoComDesconto = this.obterValorDebitoTotalEDebitoComDesconto(
						imovel, cobrancaAcaoAtividadeComando, indicadoresParcelamentoHelper, debitoImovel, 
						resolucaoDiretoria,new Integer("1"));
				
				BigDecimal valorDebitoTotalSemDesconto = valorDebitoTotalEDebitoComDesconto[0];
				valorDebitoImovel = valorDebitoTotalEDebitoComDesconto[1];
				valorDesconto = valorDebitoTotalSemDesconto.subtract(valorDebitoImovel);
			}
		}
		
		// item 12
		// calcula a quantidade de itens em débito do imóvel
		/*
		 * comentado por pedro alexandre dia 01/04/2006 quantidadeItensEmDebito =
		 * colecaoContasValores.size(); quantidadeItensEmDebito =
		 * colecaoGuiasPagamentoValores.size(); quantidadeItensEmDebito =
		 * colecaoDebitoACobrar.size();
		 */
		// fim item 12
		// cria uma flag para o indicador de cobrança
		boolean flagIndicadorCriterioCobranca = false;

		// item 13
		// laço para verificar se alguma linha do critério de cobrança satisfaz
		// o critério de cobrança do imóvel
		labelLinha: for (CobrancaCriterioLinha cobrancaCriterioLinha : colecaoCobrancaCriterioLinha) {
			// item 13.1
			// se o perfil do imóvel for igual ao da linha
			if (!imovel.getImovelPerfil().getId().equals(
					(cobrancaCriterioLinha.getImovelPerfil().getId()))) {
				// passa para a próxima linha do critério de cobrança
				continue labelLinha;
			}
			// fim item 13.1

			Integer existenciaImovelSubCategoria = null;
			// item 13.2
			// cria o filtro de imóvel sub-categoria
			existenciaImovelSubCategoria = getControladorImovel()
					.pesquisarExistenciaImovelSubCategoria(imovel.getId(),
							cobrancaCriterioLinha.getCategoria().getId());

			// se não existir nenhuma subcategoria
			if (existenciaImovelSubCategoria == null) {
				// passa para a próxima linha do critério de cobrança
				continue labelLinha;
			}
			// fim item 13.2

			// item 13.3
			// se o valor do débito do imóvel for menor que o valor minimo do
			// débito da linha de critério de cobrança
			// ou se o valor do débito do imóvel for maior que o valor máximo do
			// débito da linha de critério de cobrança
			if (valorDebitoImovel.doubleValue() < cobrancaCriterioLinha
					.getValorMinimoDebito().doubleValue()
					|| valorDebitoImovel.doubleValue() > cobrancaCriterioLinha
							.getValorMaximoDebito().doubleValue()) {

				MotivoNaoGeracaoDocCobranca motivoNaoGeracao = 
					new MotivoNaoGeracaoDocCobranca();
				motivoNaoGeracao.setId(MotivoNaoGeracaoDocCobranca.VALOR_DEBITO_FORA_INTERVALO_DEFINIDO_CRITERIO);
				imovelNaoGerado.setMotivoNaoGeracaoDocCobranca(motivoNaoGeracao);						
								
				getControladorUtil().inserir(imovelNaoGerado);
								
				// passa para a próxima linha do critério de cobrança
				continue labelLinha;
			}
			// fim item 13.3

			// item 13.4
			// se a quantidade de itens em débito do imóvel for menor que a
			// quantidade minima de contas da linha de critério de cobrança
			// ou se a quantidade de itens em débito do imóvel for maior que a
			// quantidade máxima de contas da linha de critério de cobrança
			if (quantidadeItensEmDebito.intValue() < cobrancaCriterioLinha
					.getQuantidadeMinimaContas().intValue()
					|| quantidadeItensEmDebito.intValue() > cobrancaCriterioLinha
							.getQuantidadeMaximaContas().intValue()) {

				MotivoNaoGeracaoDocCobranca motivoNaoGeracao = 
					new MotivoNaoGeracaoDocCobranca();
				motivoNaoGeracao.setId(MotivoNaoGeracaoDocCobranca.QTD_ITENS_FORA_INTERVALO_DEFINIDO_CRITERIO);
				imovelNaoGerado.setMotivoNaoGeracaoDocCobranca(motivoNaoGeracao);						
				
				getControladorUtil().inserir(imovelNaoGerado);
				
				// passa para a próxima linha do critério de cobrança
				continue labelLinha;
			}
			// fim item 13.4

			// item 13.5
			// caso o imóvel esteja cadastrado como débito automático
			if (imovel.getIndicadorDebitoConta() != null
					&& imovel.getIndicadorDebitoConta().shortValue() == 1) {

				// item 13.5.1
				// se o valor do débito do imóvel seja menor que o valor minimo
				// para débito automático
				if (valorDebitoImovel.doubleValue() < cobrancaCriterioLinha
						.getValorMinimoDebitoDebitoAutomatico().doubleValue()) {
					
					MotivoNaoGeracaoDocCobranca motivoNaoGeracao = 
						new MotivoNaoGeracaoDocCobranca();
					motivoNaoGeracao.setId(MotivoNaoGeracaoDocCobranca.VALOR_DEBITO_AUTOMATICO_MENOR_QUE_MINIMO);
					imovelNaoGerado.setMotivoNaoGeracaoDocCobranca(motivoNaoGeracao);						
					
					getControladorUtil().inserir(imovelNaoGerado);

					// passa para a próxima linha do critério de cobrança
					continue labelLinha;
				}
				// fim item 13.5.1

				// item 13.5.2
				// se a quantidade de itens em débito do imóvel for menor que a
				// quantidade minima de itens para débito automático
				if (quantidadeItensEmDebito.intValue() < cobrancaCriterioLinha
						.getQuantidadeMinimaContasDebitoAutomatico()) {
					
					MotivoNaoGeracaoDocCobranca motivoNaoGeracao = 
						new MotivoNaoGeracaoDocCobranca();
					motivoNaoGeracao.setId(MotivoNaoGeracaoDocCobranca.QTD_ITENS_MENOR_MINIMA_PARA_DEBITO_AUTOMATICO);
					imovelNaoGerado.setMotivoNaoGeracaoDocCobranca(motivoNaoGeracao);						

					getControladorUtil().inserir(imovelNaoGerado);

					// passa para a próxima linha do critério de cobrança
					continue labelLinha;
				}
				// fim item 13.5.2
			}
			// fim item 13.5

			// item 13.6
			// caso o imóvel possua débito somente da conta do mês
			if (colecaoContasValores != null && !colecaoContasValores.isEmpty()) {

				// --ALTERADO POR LEONARDO VIEIRA

				boolean flagContaMes = false;
				Conta conta = null;

				for (ContaValoresHelper contaValorHelper : colecaoContasValores) {

					// recupera a conta
					conta = contaValorHelper.getConta();

					// se a conta for a do mês
					if (conta.getReferencia() == Util
							.subtrairData(sistemaParametros
									.getAnoMesFaturamento())) {
						flagContaMes = true;
					}

				}

				if (colecaoContasValores.size() == 1 && flagContaMes) {
					if (cobrancaCriterio
							.getIndicadorEmissaoInquilinoDebitoContaMes() == 1) {
						boolean usuarioNaoIquilino = getControladorCliente()
								.verificaUsuarioinquilino(
										Util
												.converterStringParaInteger(matriculaImovel));
						if (usuarioNaoIquilino) {
							// se o valor do débito do imóvel for menor que a
							// valor
							// mínimo
							// para a conta do mês
							if (valorDebitoImovel.doubleValue() < cobrancaCriterioLinha
									.getValorMinimoContaMes().doubleValue()) {
								
								MotivoNaoGeracaoDocCobranca motivoNaoGeracao = 
									new MotivoNaoGeracaoDocCobranca();
								motivoNaoGeracao.setId(MotivoNaoGeracaoDocCobranca.VALOR_DEBITO_MENOR_QUE_MINIMO_CASO_INQUILINO_CONTA_MES);
								imovelNaoGerado.setMotivoNaoGeracaoDocCobranca(motivoNaoGeracao);						

								getControladorUtil().inserir(imovelNaoGerado);
								
								// passa para a próxima linha do critério de
								// cobrança
								continue labelLinha;
							}
						}
					} else {
						// se o valor do débito do imóvel for menor que a
						// valor
						// mínimo
						// para a conta do mês
						if (valorDebitoImovel.doubleValue() < cobrancaCriterioLinha
								.getValorMinimoContaMes().doubleValue()) {
							
							MotivoNaoGeracaoDocCobranca motivoNaoGeracao = 
								new MotivoNaoGeracaoDocCobranca();
							motivoNaoGeracao.setId(MotivoNaoGeracaoDocCobranca.VALOR_DEBITO_MENOR_QUE_MINIMO_CASO_INQUILINO);
							imovelNaoGerado.setMotivoNaoGeracaoDocCobranca(motivoNaoGeracao);				
							
							getControladorUtil().inserir(imovelNaoGerado);
							
							// passa para a próxima linha do critério de
							// cobrança
							continue labelLinha;
						}
					}

				}
			}
			// fim item 13.6

			// item 13.7
			// Caso a quantidade de contas do imóvel com parcelamento seja maior
			// que a quantidade minima de contas com parcelamento para emissão
			// de ação de cobrança
			if (quantidadeContasParcelamento < cobrancaCriterioLinha
					.getQuantidadeMinimaContasParcelamento().intValue()) {
				
				MotivoNaoGeracaoDocCobranca motivoNaoGeracao = 
					new MotivoNaoGeracaoDocCobranca();
				motivoNaoGeracao.setId(MotivoNaoGeracaoDocCobranca.QTD_CONTAS_PARCELADAS_MENOR_QUE_MINIMA);
				imovelNaoGerado.setMotivoNaoGeracaoDocCobranca(motivoNaoGeracao);				

				getControladorUtil().inserir(imovelNaoGerado);

				// passa para a próxima linha do critério de
				// cobrança
				continue labelLinha;
			}

			// caso o imóvel satisfazer todos os critérios anteriores
			// seta a flag pra true (indica que o imóvel satisfaz o critério de
			// cobrança)
			flagIndicadorCriterioCobranca = true;

			// termina o laço das linhas de critério de cobrança
			break labelLinha;
		}
		// fim item 13

		// item 14
		// se o imóvel satisfaz o critério de cobrança
		if (flagIndicadorCriterioCobranca) {
			// seta os dados no objeto que vai ser retornado pelo metódo
			verificarCriterioCobrancaParaImovelHelper
					.setFlagCriterioCobrancaImovel(true);
			verificarCriterioCobrancaParaImovelHelper
					.setQuantidadeItensEmDebito(quantidadeItensEmDebito);
			verificarCriterioCobrancaParaImovelHelper
					.setValorDebitoImovel(valorDebitoImovel);
			verificarCriterioCobrancaParaImovelHelper
					.setColecaoContasValores(colecaoContasValores);
			verificarCriterioCobrancaParaImovelHelper
					.setColecaoDebitoACobrar(colecaoDebitoACobrar);
			verificarCriterioCobrancaParaImovelHelper
					.setColecaoGuiasPagamentoValores(colecaoGuiasPagamentoValores);
			verificarCriterioCobrancaParaImovelHelper.setValorDesconto(valorDesconto);
		}
		imovelNaoGerado = null;

		// retorna o objeto com todas as informações necessárias
		// para identificar se o imóvel satisfaz ou não o critério de cobrança
		return verificarCriterioCobrancaParaImovelHelper;
		// fim item 14
	}

	/**
	 * [UC0251] Gerar Atividade de Ação de Cobrança [SB0004] Verificar Critério
	 * de Cobrança para Imóvel
	 * 
	 * RM7818 - alterado por Ana Maria - 05/10/2012 
	 * */
	public Collection<CobrancaSituacao> pesquisarCobrancaSituacaoNaoIncluidaCriterio(Integer idCriterioCobranca) 
			throws ControladorException{
		
		Collection<CobrancaSituacao> retorno = new ArrayList<CobrancaSituacao>();
		Collection cobrancaSituacao;
		try {

			cobrancaSituacao = this.repositorioCobranca.pesquisarCobrancaSituacaoNaoIncluidaCriterio(idCriterioCobranca);
			CobrancaSituacao aux = null;
			
			for (Object obj: cobrancaSituacao){
				Object[] array = (Object[]) obj;

				
				aux = new CobrancaSituacao();
				aux.setId((Integer) array[0]);
				aux.setDescricao((String) array[1]);
				
				retorno.add(aux);
			}
						
			return retorno;
		
		} catch (ErroRepositorioException ex) {
			throw new ControladorException("erro.sistema", ex);
		}
	}
	
	/**
	 * [UC0246] Executar Atividade de Ação de Cobrança [SF0001] Selecionar Lista
	 * de Rotas
	 * 
	 * @author Pedro Alexandre
	 * @created 06/02/2006
	 * 
	 * @param cobrancaGrupo
	 *            Grupo de cobrança
	 * @param cobrancaAcaoAtividadeComando
	 *            Cobrança Ação Atividade Comando
	 * @throws ControladorException
	 *             Controlador Exception
	 */
	public Collection<Rota> pesquisarListaRotasComando(
			CobrancaGrupo cobrancaGrupo,
			CobrancaAcaoAtividadeComando cobrancaAcaoAtividadeComando)
			throws ControladorException {
		// cria a variável que vai armazenar a coleção de rotas pesquisadas
		Collection<Rota> colecaoRotas = null;

		// crio filtro de rota
		FiltroRota filtroRota = new FiltroRota();

		// se o grupo de cobrança não estiver nulo
		if (cobrancaGrupo != null) {
			// seta o código do grupo de cobrança no filtro de rota
			filtroRota.adicionarParametro(new ParametroSimples(
					FiltroRota.COBRANCA_GRUPO_ID, cobrancaGrupo.getId()));

			// carrega os objetos necessários de rota
			// filtroRota.adicionarCaminhoParaCarregamentoEntidade("cobrancaCriterio");

			// pesquisa a coleção de rotas
			colecaoRotas = getControladorUtil().pesquisar(filtroRota,
					Rota.class.getName());
		} else {
			// cria o objeto da coleção de rotas
			colecaoRotas = new ArrayList();

			// cria o filtro de cobrança de atividade do comando de rotas
			FiltroCobrancaAtividadeComandoRotas filtroCobrancaAtividadeComandoRotas = new FiltroCobrancaAtividadeComandoRotas();

			// seta o código da cobrança de ação de atividade do comando no
			// filtro
			filtroCobrancaAtividadeComandoRotas
					.adicionarParametro(new ParametroSimples(
							FiltroCobrancaAtividadeComandoRotas.COBRANCA_ACAO_ATIVIDADE_COMANDO_ID,
							cobrancaAcaoAtividadeComando.getId()));

			// carrega os objetos necessários para a pesquisa
			filtroCobrancaAtividadeComandoRotas
					.adicionarCaminhoParaCarregamentoEntidade("rota");
			// filtroCobrancaAtividadeComandoRotas.adicionarCaminhoParaCarregamentoEntidade("rota.cobrancaCriterio");

			// pesquisa a coleção de CobrancaAtividadeComandoRota
			Collection<CobrancaAtividadeComandoRota> colecaoCobrancaAtividadeRotas = getControladorUtil()
					.pesquisar(filtroCobrancaAtividadeComandoRotas,
							CobrancaAtividadeComandoRota.class.getName());

			// laço para recuperar todas as rotas
			for (CobrancaAtividadeComandoRota cobrancaAtividadeComandoRota : colecaoCobrancaAtividadeRotas) {
				// adiciona a rota na coleção
				colecaoRotas.add(cobrancaAtividadeComandoRota.getRota());
			}
		}

		// retorna a coleção de rotas pesquisadas
		return colecaoRotas;
	}

	/**
	 * [UC0246] Executar Atividade de Ação de Cobrança Pesquisa uma coleção de
	 * CobrancaAcaoAtividadeCronograma
	 * 
	 * @author Pedro Alexandre
	 * @created 01/02/2006
	 * 
	 * @throws ControladorException
	 *             Controlador Exception
	 */
	public Collection<CobrancaAcaoAtividadeCronograma> pesquisarCobrancaAcaoAtividadeCronograma()
			throws ControladorException {
		try {
			// chama o metódo de pesquisar do repositório
			return repositorioCobranca
					.pesquisarCobrancaAcaoAtividadeCronograma();

			// erro nohibernate
		} catch (ErroRepositorioException ex) {
			// seta o rollback
			sessionContext.setRollbackOnly();

			// levanta a exceção para a próxima camada
			throw new ControladorException("erro.sistema", ex);
		}
	}

	/**
	 * [UC0246] Executar Atividade de Ação de Cobrança Pesquisa uma coleção de
	 * CobrancaAcaoAtividadeComando
	 * 
	 * @author Pedro Alexandre
	 * @created 01/02/2006
	 * 
	 * @throws ControladorException
	 *             Controlador Exception
	 */
	public Collection<CobrancaAcaoAtividadeComando> pesquisarCobrancaAcaoAtividadeComando()
			throws ControladorException {
		try {
			// chama o metódo de pesquisar do repositório
			return repositorioCobranca.pesquisarCobrancaAcaoAtividadeComando();

			// erro no hibernate
		} catch (ErroRepositorioException ex) {
			// seta o rollback
			sessionContext.setRollbackOnly();

			// levanta a exceção para a próxima camada
			throw new ControladorException("erro.sistema", ex);
		}
	}

	/**
	 * Método utilizado obter o consumo histórico de um imóvel de acordo com o
	 * tipo de ligação e ano mês de referência
	 */

	public ConsumoHistorico obterConsumoHistorico(Imovel imovel,
			LigacaoTipo ligacaoTipo, int anoMesReferencia)
			throws ControladorException {

		ConsumoHistorico consumoHistorico = null;

		Collection colecaoConsumoHistoricoArray = null;

		try {

			colecaoConsumoHistoricoArray = repositorioMicromedicao
					.pesquisarConsumoHistorico(imovel, ligacaoTipo,

					anoMesReferencia);
		} catch (ErroRepositorioException ex) {
			sessionContext.setRollbackOnly();
			throw new ControladorException("erro.sistema", ex);
		}

		if (colecaoConsumoHistoricoArray != null
				&& !colecaoConsumoHistoricoArray.isEmpty()) {

			Object[] consumoHistoricoArray = (Object[]) Util
					.retonarObjetoDeColecaoArray(colecaoConsumoHistoricoArray);

			consumoHistorico = new ConsumoHistorico();

			// Seta o id do histórico
			if (consumoHistoricoArray[0] != null) {

				consumoHistorico.setId((Integer) consumoHistoricoArray[0]);
			}
			// Seta o id do imóvel
			if (consumoHistoricoArray[1] != null) {
				imovel.setId(imovel.getId());
			}
			// Seta o tipo de ligação
			if (consumoHistoricoArray[2] != null) {

				consumoHistorico.setLigacaoTipo(ligacaoTipo);
			}

			// Seta o ano mes de referência
			if (consumoHistoricoArray[3] != null) {

				consumoHistorico.setReferenciaFaturamento(anoMesReferencia);
			}
			// Seta o indicador de alteração dos últimos consumos
			if (consumoHistoricoArray[4] != null) {

				consumoHistorico

				.setIndicadorAlteracaoUltimosConsumos(new Short("2"));
			}

			// Seta o indicador de ajuste
			if (consumoHistoricoArray[5] != null) {

				consumoHistorico

				.setIndicadorAjuste((Short) consumoHistoricoArray[5]);
			}

			// Seta o consumo a ser cobrado no mês
			if (consumoHistoricoArray[6] != null) {

				consumoHistorico

						.setNumeroConsumoFaturadoMes((Integer) consumoHistoricoArray[6]);
			}

			// Seta o consumo rateio
			if (consumoHistoricoArray[7] != null) {

				consumoHistorico

				.setConsumoRateio((Integer) consumoHistoricoArray[7]);
			}

			// Seta o consumo histórico condomínio
			if (consumoHistoricoArray[8] != null) {

				ConsumoHistorico consumoHistoricoCondominio = new ConsumoHistorico();

				consumoHistoricoCondominio

				.setId((Integer) consumoHistoricoArray[8]);

				consumoHistorico

				.setConsumoHistoricoCondominio(consumoHistoricoCondominio);
			}

			// Seta o indicador imóvel condomínio
			if (consumoHistoricoArray[9] != null) {

				consumoHistorico

				.setIndicadorImovelCondominio((Short) consumoHistoricoArray[9]);
			}

			// Seta o consumo médio
			if (consumoHistoricoArray[10] != null) {

				consumoHistorico

				.setConsumoMedio((Integer) consumoHistoricoArray[10]);
			}

			// Seta o consumo mínimo de água
			if (consumoHistoricoArray[11] != null) {

				consumoHistorico

				.setConsumoMinimo((Integer) consumoHistoricoArray[11]);
			}

			// Seta o percentual de coleta
			if (consumoHistoricoArray[12] != null) {

				consumoHistorico

				.setPercentualColeta((BigDecimal) consumoHistoricoArray[12]);
			}

			// Seta a última alteração
			if (consumoHistoricoArray[13] != null) {

				consumoHistorico

				.setUltimaAlteracao((Date) consumoHistoricoArray[13]);
			}

			// Seta o rateio tipo
			if (consumoHistoricoArray[14] != null) {
				RateioTipo rateioTipo = new RateioTipo();

				rateioTipo.setId((Integer) consumoHistoricoArray[14]);

				consumoHistorico.setRateioTipo(rateioTipo);
			}

			// Seta o consumo tipo
			if (consumoHistoricoArray[15] != null) {
				ConsumoTipo consumoTipo = new ConsumoTipo();

				consumoTipo.setId((Integer) consumoHistoricoArray[15]);

				consumoHistorico.setConsumoTipo(consumoTipo);
			}

			// Seta a anormalidade de consumo
			if (consumoHistoricoArray[16] != null) {

				ConsumoAnormalidade consumoAnormalidade = new ConsumoAnormalidade();

				consumoAnormalidade.setId((Integer) consumoHistoricoArray[16]);

				consumoHistorico.setConsumoAnormalidade(consumoAnormalidade);
			}

			// Seta o poço tipo
			if (consumoHistoricoArray[17] != null) {
				PocoTipo pocoTipo = new PocoTipo();

				pocoTipo.setId((Integer) consumoHistoricoArray[17]);

				consumoHistorico.setPocoTipo(pocoTipo);
			}

			// Seta o faturamento situação tipo
			if (consumoHistoricoArray[18] != null) {

				FaturamentoSituacaoTipo faturamentoSituacaoTipo = new FaturamentoSituacaoTipo();

				faturamentoSituacaoTipo

				.setId((Integer) consumoHistoricoArray[18]);

				consumoHistorico

				.setFaturamentoSituacaoTipo(faturamentoSituacaoTipo);
			}

			// Seta o faturamento situação tipo
			if (consumoHistoricoArray[19] != null) {

				consumoHistorico

				.setIndicadorFaturamento((Short) consumoHistoricoArray[19]);
			}
		}

		return consumoHistorico;
	}

	/**
	 * Inseri a cobrança situação historico na base passando a coleção de
	 * cobrança situação historico
	 * 
	 * [UC0177] Informar Situacao Especial de Cobrança
	 * 
	 * @author Sávio Luiz
	 * @date 20/03/2006
	 * 
	 * @param collectionCobrancaSituacaoHistorico
	 * @return
	 */
	public void inserirCobrancaSituacaoHistorico(
			Collection collectionCobrancaSituacaoHistorico)
			throws ControladorException {
		
		try {
			Iterator iterator = collectionCobrancaSituacaoHistorico.iterator();
			//------------ REGISTRAR TRANSAÇÃO ----------------
			
			while(iterator.hasNext()){
			
			CobrancaSituacaoHistorico csh = (CobrancaSituacaoHistorico) iterator.next();

			RegistradorOperacao registradorOperacao = new RegistradorOperacao(
				Operacao.OPERACAO_INFORMAR_SITUACAO_ESPECIAL_COBRANCA,csh.getImovel().getId(),csh.getImovel().getId(),
			    new UsuarioAcaoUsuarioHelper(csh.getUsuario(),
			    UsuarioAcao.USUARIO_ACAO_EFETUOU_OPERACAO));

			registradorOperacao.registrarOperacao(csh);
			

			this.repositorioUtil.inserir(csh);
			}
			// ------------ REGISTRAR TRANSAÇÃO ----------------
			
			//this.repositorioCobranca.inserirCobrancaSituacaoHistorico(collectionCobrancaSituacaoHistorico);

		} catch (ErroRepositorioException ex) {
			sessionContext.setRollbackOnly();
			throw new ControladorException("erro.sistema", ex);
		}

	}

	/**
	 * Permite efetuar o parcelamento dos débitos de um imóvel
	 * 
	 * [UC0214] Efetuar Parcelamento de Débitos
	 * 
	 * Verifica a existência de parcelamento no mês
	 * 
	 * [FS0012] Verifica a existência de parcelamento no mês
	 * 
	 * @author Roberta Costa
	 * @date 21/03/2006
	 * 
	 * @param codigoImovel
	 * @return Collection<Parcelamento>
	 */
	public Collection<Parcelamento> verificarParcelamentoMesImovel(
			Integer codigoImovel) throws ControladorException {

		FiltroParcelamento filtroParcelamento = new FiltroParcelamento();
		filtroParcelamento.adicionarParametro(new ParametroSimples(
				FiltroParcelamento.IMOVEL_ID, codigoImovel));
		filtroParcelamento.adicionarParametro(new ParametroSimples(
				FiltroParcelamento.ANO_MES_REFERENCIA_FATURAMENTO, Util
						.getAnoMesComoInteger(new Date())));
		filtroParcelamento.adicionarParametro(new ParametroSimples(
				FiltroParcelamento.PARCELAMENTO_SITUACAO,
				ParcelamentoSituacao.NORMAL));

		Collection<Parcelamento> colecaoParcelamento = getControladorUtil()
				.pesquisar(filtroParcelamento, Parcelamento.class.getName());

		return colecaoParcelamento;
	}

	/**
	 * Permite efetuar o parcelamento dos débitos de um imóvel
	 * 
	 * [UC0214] Efetuar Parcelamento de Débitos
	 * 
	 * Atualiza a situação das Contas para Efetuar Parcelamento
	 * 
	 * atualizarContaEfetuarParcelamentoDebito
	 * 
	 * @author Roberta Costa
	 * @date 21/03/2006
	 * 
	 * @param efetuarParcelamentoDebitosActionForm
	 * @param colecaoContaValores
	 * @return Collection
	 */
	public void atualizarContaEfetuarParcelamentoDebito(Conta conta, boolean isContaEntradaParcelamento, Integer maiorAnoMesContas)
			throws ControladorException {

		SistemaParametro sistemaParametros = null;
		sistemaParametros = getControladorUtil().pesquisarParametrosDoSistema();

		Integer situacaoAnterior = null;
		if (conta.getDebitoCreditoSituacaoAtual().getId().equals(
				DebitoCreditoSituacao.NORMAL)
				&& (conta.getReferenciaContabil() >= sistemaParametros
						.getAnoMesFaturamento())
				|| (conta.getDebitoCreditoSituacaoAtual().getId().equals(
						DebitoCreditoSituacao.RETIFICADA) || conta
						.getDebitoCreditoSituacaoAtual().getId().equals(
								DebitoCreditoSituacao.INCLUIDA))
				&& (conta.getReferenciaContabil() >= sistemaParametros
						.getAnoMesFaturamento())) {

			situacaoAnterior = conta.getDebitoCreditoSituacaoAtual().getId();
		} else {
			situacaoAnterior = null;
		}

		// 6.1.1.2 Situação atual
		DebitoCreditoSituacao debitoCreditoSituacaoAtual = new DebitoCreditoSituacao();
		debitoCreditoSituacaoAtual.setId(DebitoCreditoSituacao.PARCELADA);
		conta.setDebitoCreditoSituacaoAtual(debitoCreditoSituacaoAtual);

		if (situacaoAnterior == null) {
			conta.setDebitoCreditoSituacaoAnterior(null);
		} else {
			DebitoCreditoSituacao debitoCreditoSituacaoAnterior = new DebitoCreditoSituacao();
			debitoCreditoSituacaoAnterior.setId(situacaoAnterior);
			conta
					.setDebitoCreditoSituacaoAnterior(debitoCreditoSituacaoAnterior);
		}

		conta.setUltimaAlteracao(new Date());

//		conta.setReferenciaContabil(Util.recuperaAnoMesDaData(new Date()));
	    //alterado por Vivianne Sousa 01/09/2008 
        //analista :Aryed 
        Integer referenciaContabil = obterReferenciaContabilParcelamentoOUConta(isContaEntradaParcelamento, 
        		null ,maiorAnoMesContas);
        conta.setReferenciaContabil(referenciaContabil);
		

		// Atualiza na Base de dados
		getControladorUtil().atualizar(conta);
		
		// Alterado por Francisco - 27/05/08, por conta do Resumo de Ações de cobrança
		// Analista: Ana Breda
		try {
			// Atualizar documento de cobranca da conta, se houver, para parcelado
			repositorioCobranca.atualizarSituacaoCobrancaDocumentoItem(CobrancaDebitoSituacao.PARCELADO,
					new Date(), conta.getId(), null, null);
		} catch (ErroRepositorioException ex) {
			sessionContext.setRollbackOnly();
			new ControladorException("erro.sistema", ex);
		}	
		
	}
	
	/**
	 * Permite efetuar o parcelamento dos débitos de um imóvel
	 * 
	 * [UC0214] Efetuar Parcelamento de Débitos
	 * 
	 * Obtém as Opções de Parcelamento do Débito do Imóvel
	 * 
	 * [SB0002] Obter Opções Parcelamento
	 * 
	 * @author Vivianne Sousa
	 * @date 31/07/2013
	 * 
	 * @param colecaoContaValores
     * @param qtdeMeses
     * @param indicadorAcrescImposntualidade
	 * @return valorTotal
	 */
	public BigDecimal calcularValorTotalContaDoCriterio(Collection colecaoContaValores, 
			Integer qtdeMeses, Short indicadorAcresImpontualidade)throws ControladorException{
		
		Date dataLimiteVencimento = Util.adcionarOuSubtrairMesesAData(new Date(),-qtdeMeses, 0);
		
		//Calcular o valor das contas com vencimento até o dia informado 
		BigDecimal valorTotalContas = new BigDecimal("0.00");
		BigDecimal valorTotalAcrescimoImpontualidadeContas = new BigDecimal("0.00");
		
		Iterator iterContas = colecaoContaValores.iterator();
		while (iterContas.hasNext()) {
			ContaValoresHelper contaValoresHelper = (ContaValoresHelper) iterContas.next();
			
			if (contaValoresHelper.getIndicadorContasDebito() == null || 
				!contaValoresHelper.getIndicadorContasDebito().equals(new Integer("2"))) {
				
				Date dataVencimentoConta = contaValoresHelper.getConta().getDataVencimentoConta();
				
				if(dataVencimentoConta.compareTo(dataLimiteVencimento)< 1){
					
					valorTotalContas = valorTotalContas.add(contaValoresHelper.getValorTotalConta());
					
					if(indicadorAcresImpontualidade.equals(ConstantesSistema.SIM)){
					
						// Para cálculo do Acrescimo de Impontualidade
						valorTotalAcrescimoImpontualidadeContas = contaValoresHelper.getValorTotalContaValoresParcelamento();
						
						valorTotalContas = valorTotalContas.add(valorTotalAcrescimoImpontualidadeContas);
					}
				}
			}
		}
		
		return valorTotalContas;
	}

	
	/**
	 * [UC0214] Efetuar Parcelamento de Débitos
	 * [SB0015] Calcular desconto para pagamento a vista considerando valor do débito no período.
	 * 
	 * @author Vivianne Sousa
	 * @date 31/07/2013
	 * 
	 * @param colecaoContaValores
     * @param qtdeMeses
     * @param indicadorAcrescImposntualidade
	 * @return valorTotal
	 */
	public BigDecimal calcularDescontoPagAVistaConsiderandoValorDebito(Collection colecaoContaValores, 
			ParcelamentoPerfil parcelamentoPerfil)throws ControladorException{
		
		BigDecimal valorDescontoPagAVista = new BigDecimal("0.00");
		
		//1.1.	Caso tenha sido informado que o percentual de desconto para pagamento a vista depende do valor do débito 
		if(parcelamentoPerfil.getIndicadorDescontoVistaValorDebito().equals(ConstantesSistema.SIM)){
			
			FiltroDescontoValorDebitoPeriodo filtroDescontoValorDebitoPeriodo = new FiltroDescontoValorDebitoPeriodo();
			filtroDescontoValorDebitoPeriodo.adicionarParametro(new ParametroSimples(
					FiltroDescontoValorDebitoPeriodo.PARCELAMENTO_PERFIL_ID, parcelamentoPerfil.getId()));
			filtroDescontoValorDebitoPeriodo.setCampoOrderBy(FiltroDescontoValorDebitoPeriodo.VALOR_MAXIMO_DEBITO);
		
			Collection colecaoDescontoValorDebitoPeriodo = this.getControladorUtil().pesquisar(
					filtroDescontoValorDebitoPeriodo,DescontoValorDebitoPeriodo.class.getName());
			
			if(colecaoDescontoValorDebitoPeriodo != null && !colecaoDescontoValorDebitoPeriodo.isEmpty()){
				
				Iterator iterDescontoValorDebitoPeriodo = colecaoDescontoValorDebitoPeriodo.iterator();
				boolean primeiraVez = true;
				BigDecimal valorContasDentroCriterio = new BigDecimal("0.00");
				BigDecimal valorDesconto = new BigDecimal("0.00");
				
				while (iterDescontoValorDebitoPeriodo.hasNext()) {
					DescontoValorDebitoPeriodo descontoValorDebitoPeriodo = (DescontoValorDebitoPeriodo)
							iterDescontoValorDebitoPeriodo.next();
					
					
					Integer qtdeMeses = descontoValorDebitoPeriodo.getQtdeMeses();
					BigDecimal valorMaximoDebito = descontoValorDebitoPeriodo.getValorMaximoDebito();
					BigDecimal percentualDesconto = descontoValorDebitoPeriodo.getPercentualDesconto();
					
					if(primeiraVez){
						valorContasDentroCriterio = this.calcularValorTotalContaDoCriterio(
								colecaoContaValores, qtdeMeses, ConstantesSistema.NAO);
						primeiraVez = false;
					}
					
					
					if(valorContasDentroCriterio != null && 
							valorContasDentroCriterio.compareTo(new BigDecimal("0.00")) == 1){
						
						if(valorContasDentroCriterio.compareTo(valorMaximoDebito) == 1){
							
							valorDesconto = valorMaximoDebito.multiply(percentualDesconto);
							valorDesconto.setScale(Parcelamento.CASAS_DECIMAIS, Parcelamento.TIPO_ARREDONDAMENTO);
							valorDesconto = valorDesconto.divide(new BigDecimal("100.00"), 
									Parcelamento.CASAS_DECIMAIS, Parcelamento.TIPO_ARREDONDAMENTO);
							valorDesconto.setScale(Parcelamento.CASAS_DECIMAIS, Parcelamento.TIPO_ARREDONDAMENTO);
							
							valorContasDentroCriterio = valorContasDentroCriterio.subtract(valorMaximoDebito);

						}else{
							
							valorDesconto = valorContasDentroCriterio.multiply(percentualDesconto);
							valorDesconto.setScale(Parcelamento.CASAS_DECIMAIS, Parcelamento.TIPO_ARREDONDAMENTO);
							valorDesconto = valorDesconto.divide(new BigDecimal("100.00"), 
									Parcelamento.CASAS_DECIMAIS, Parcelamento.TIPO_ARREDONDAMENTO);
							valorDesconto.setScale(Parcelamento.CASAS_DECIMAIS, Parcelamento.TIPO_ARREDONDAMENTO);
							valorContasDentroCriterio = new BigDecimal("0.00");
						}
						valorDescontoPagAVista = valorDescontoPagAVista.add(valorDesconto);
					}
					
				}
			}
		}
			
		return valorDescontoPagAVista;	
	}
	
	/**
	 * [UC0214] Efetuar Parcelamento de Débitos
	 * [SB0014] Verificar desconto para pagamento parcelado considerando o percentual da entrada.
	 * 
	 * @author Vivianne Sousa
	 * @date 01/08/2013
	 * 
	 * @param valorEntrada
	 * @param valorTotalDebito
	 * @param idParcelamentoQuantidadeReparcelamento
	 * @param colecaoContaValores
	 * @param parcelamentoPerfil
	 * @return valorDescontoPagParcelado
	 */
	public Object[] verificarDescontoPagParceladoPercentualEntrada(BigDecimal valorEntrada,
			BigDecimal valorTotalDebito, Integer idParcelamentoQuantidadeReparcelamento,
			Collection colecaoContaValores, ParcelamentoPerfil parcelamentoPerfil)throws ControladorException{
		
		try{
						
			BigDecimal valorDescontoPagParcelado = new BigDecimal("0.00");
			Integer qtdeMaxParcelas = null;
			
			//1.1.Caso tenha sido informado que o percentual de desconto para pagamento parcelado levará em consideração o percentual da entrada  
			if(parcelamentoPerfil.getIndicadorDescontoParcelaValorEntrada().equals(ConstantesSistema.SIM)){
				
				if(valorEntrada != null && valorEntrada.compareTo(new BigDecimal("0.00")) == 1){
					
					BigDecimal percentualEntrada = new BigDecimal("0.00");
					BigDecimal valorCem = new BigDecimal("100.00");
					
					//1.1.1.1.	Calcular o percentual da entrada em relação ao débito total:
					percentualEntrada = valorCem.multiply(valorEntrada);
					percentualEntrada.setScale(Parcelamento.CASAS_DECIMAIS, Parcelamento.TIPO_ARREDONDAMENTO);
					percentualEntrada = percentualEntrada.divide(valorTotalDebito, 
							Parcelamento.CASAS_DECIMAIS, Parcelamento.TIPO_ARREDONDAMENTO);
					percentualEntrada.setScale(Parcelamento.CASAS_DECIMAIS, Parcelamento.TIPO_ARREDONDAMENTO);
					
					ParcelaEntradaDesconto parcelaEntradaDesconto = repositorioCobranca.
						obterParcelaEntradaDesconto(idParcelamentoQuantidadeReparcelamento, percentualEntrada);  
					
					if(parcelaEntradaDesconto != null){
						
						Integer qtdeMeses = parcelaEntradaDesconto.getQuantidadeMeses();
						
						BigDecimal valorContasDentroCriterio = this.calcularValorTotalContaDoCriterio(
								colecaoContaValores, qtdeMeses, ConstantesSistema.SIM);
						
						BigDecimal percentualDesconto = parcelaEntradaDesconto.getPercentualDesconto();	
						
						qtdeMaxParcelas = parcelaEntradaDesconto.getQuantidadeParcelas();
						
						if(valorContasDentroCriterio != null && 
						   valorContasDentroCriterio.compareTo(new BigDecimal("0.00")) == 1){
						
							//1.1.1.2.6.1.	Valor desconto = 
							//(Valor contas dentro do critério * Percentual de desconto) / 100
							valorDescontoPagParcelado = valorContasDentroCriterio.multiply(percentualDesconto);
							valorDescontoPagParcelado.setScale(Parcelamento.CASAS_DECIMAIS, Parcelamento.TIPO_ARREDONDAMENTO);
							valorDescontoPagParcelado = valorDescontoPagParcelado.divide(valorCem, 
									Parcelamento.CASAS_DECIMAIS, Parcelamento.TIPO_ARREDONDAMENTO);
							valorDescontoPagParcelado.setScale(Parcelamento.CASAS_DECIMAIS, Parcelamento.TIPO_ARREDONDAMENTO);
							
						}
					}
				}
			}
				
			
			Object[] retorno = new Object[2];
			retorno[0] = (BigDecimal) valorDescontoPagParcelado;
			retorno[1] = (Integer) qtdeMaxParcelas;
			
			return retorno;	
			
		}catch(ErroRepositorioException ex){
			ex.printStackTrace();
			throw new ControladorException("erro.sistema", ex);
		}
	}

	/**
	 * [UC0214] Efetuar Parcelamento de Débitos
	 *
	 * Calcula o valor da entrada do parcelamento
	 *
	 * @author Raphael Rossiter
	 * @date 16/09/2008
	 *
	 * @param helper
	 * @param parcelamentoQuantidadePrestacao
	 * @param valorTarifaMinimaAguaImovel
	 * @param valorDebitoDesconto
	 * @param valorEntradaSugerida
	 * @param Collection
	 * @return BigDecimal
	 * @throws ControladorException
	 */
	public BigDecimal determinarValorEntradaParcelamento(ObterOpcoesDeParcelamentoHelper helper,
		ParcelamentoQuantidadePrestacao parcelamentoQuantidadePrestacao, BigDecimal valorTarifaMinimaAguaImovel, 
		BigDecimal valorDebitoDesconto, BigDecimal valorEntradaSugerida,
		Collection colecaoContasParaParcelamento,Short indicadorVerificarMaiorValor) throws ControladorException {
		
		BigDecimal percentualEntradaMinima = BigDecimal.ZERO;
		
		BigDecimal valorEntradaMinima = BigDecimal.ZERO;
		BigDecimal valorEntradaReparcelamento = BigDecimal.ZERO;
		
		/*
		 * 5.3. Caso haja informação de percentual para cálculo de valor reparcelado
		 * (PQTR_PCVLRREPARCELADO da tabela PARECLAMENTO_QUANTIDADE_PRESTACAO com valor diferente de nulo)
		 */
		BigDecimal percentualValorReparcelado = parcelamentoQuantidadePrestacao.getPercentualValorReparcelado();
		
		if (percentualValorReparcelado != null && !percentualValorReparcelado.equals(new BigDecimal("0.00")) && 
				!percentualValorReparcelado.equals(new BigDecimal("0"))) {
			
			percentualValorReparcelado = percentualValorReparcelado.setScale(Parcelamento.CASAS_DECIMAIS);

			// 5.3.1. O sistema deverá somar as parcelas vencidas e a vencer de parcelamento ATIVO
			BigDecimal totalParcelasVencidas = BigDecimal.ZERO;
			BigDecimal totalParcelasAVencer = BigDecimal.ZERO;

			FiltroDebitoACobrar filtroDebitoACobrar = new FiltroDebitoACobrar();
			
			filtroDebitoACobrar.adicionarParametro(new ParametroSimples(
			FiltroDebitoACobrar.IMOVEL_ID, helper.getIdImovel()));
			
			filtroDebitoACobrar.adicionarParametro(new ParametroSimples(
			FiltroDebitoACobrar.FINANCIAMENTO_TIPO, FinanciamentoTipo.PARCELAMENTO_AGUA,
			FiltroParametro.CONECTOR_OR, 3));
			
			filtroDebitoACobrar.adicionarParametro(new ParametroSimples(
			FiltroDebitoACobrar.FINANCIAMENTO_TIPO, FinanciamentoTipo.PARCELAMENTO_ESGOTO,
			FiltroParametro.CONECTOR_OR));
			
			filtroDebitoACobrar.adicionarParametro(new ParametroSimples(
			FiltroDebitoACobrar.FINANCIAMENTO_TIPO, FinanciamentoTipo.PARCELAMENTO_SERVICO));

			Collection colecaoDebitoACobrarParcelamento = getControladorUtil()
			.pesquisar(filtroDebitoACobrar, DebitoACobrar.class.getName());

			Iterator itDebitoACobrarParcelamento = colecaoDebitoACobrarParcelamento.iterator();

			while (itDebitoACobrarParcelamento.hasNext()) {
				
				DebitoACobrar debitoACobrar = (DebitoACobrar) itDebitoACobrarParcelamento.next();

				BigDecimal valorDebito = debitoACobrar.getValorTotalComBonus();

				totalParcelasAVencer.setScale(Parcelamento.CASAS_DECIMAIS,
				Parcelamento.TIPO_ARREDONDAMENTO);
				
				totalParcelasAVencer = totalParcelasAVencer.add(valorDebito);
			}

			Collection colecaoDebitoCobradoParcelamento = null;
			
			if (helper.getColecaoContaValores() != null && !helper.getColecaoContaValores().isEmpty()) {
				
				Iterator contaValores = helper.getColecaoContaValores().iterator();

				while (contaValores.hasNext()) {
					
					ContaValoresHelper contaValoresHelper = (ContaValoresHelper) contaValores.next();

					FiltroDebitoCobrado filtroDebitoCobrado = new FiltroDebitoCobrado();
					
					filtroDebitoCobrado.adicionarParametro(new ParametroSimples(
					FiltroDebitoCobrado.CONTA_ID, contaValoresHelper.getConta().getId()));
					
					filtroDebitoCobrado.adicionarParametro(new ParametroSimples(
					FiltroDebitoCobrado.FINANCIAMENTO_TIPO, FinanciamentoTipo.PARCELAMENTO_AGUA,
					FiltroParametro.CONECTOR_OR, 3));
					
					filtroDebitoCobrado.adicionarParametro(new ParametroSimples(
					FiltroDebitoCobrado.FINANCIAMENTO_TIPO, FinanciamentoTipo.PARCELAMENTO_ESGOTO,
					FiltroParametro.CONECTOR_OR));
					
					filtroDebitoCobrado.adicionarParametro(new ParametroSimples(
					FiltroDebitoCobrado.FINANCIAMENTO_TIPO, FinanciamentoTipo.PARCELAMENTO_SERVICO));

					colecaoDebitoCobradoParcelamento = getControladorUtil().pesquisar(
					filtroDebitoCobrado, DebitoCobrado.class.getName());
				}

			}
			
			if(colecaoDebitoCobradoParcelamento != null && !colecaoDebitoCobradoParcelamento.isEmpty()){
			
				Iterator itDebitoCobradoParcelamento = colecaoDebitoCobradoParcelamento.iterator();
	
				while (itDebitoCobradoParcelamento.hasNext()) {
					
					DebitoCobrado debitoCobrado = (DebitoCobrado) itDebitoCobradoParcelamento.next();
					
					BigDecimal vlPrestacao = debitoCobrado.getValorPrestacao();
					
					totalParcelasVencidas.setScale(Parcelamento.CASAS_DECIMAIS,
					Parcelamento.TIPO_ARREDONDAMENTO);
					
					totalParcelasVencidas = totalParcelasVencidas.add(vlPrestacao);
				}
			
			}

			BigDecimal valorTotalParcelas = totalParcelasAVencer
			.add(totalParcelasVencidas);

			/*
			 * 5.3.2. valor da entrada reparcelamento = (valor calculo debitoACobrar + debitoCobrado) *
			 * (PQTP_PCVLRREPARCELADO/100)
			 */
			 valorEntradaReparcelamento = valorTotalParcelas
			.multiply(percentualValorReparcelado.divide(ConstantesSistema.CEM));

		}

		// 5.4.1.1. Caso o valor de percentual mínimo esteja informado
		if (parcelamentoQuantidadePrestacao.getPercentualMinimoEntrada() != null && 
			!parcelamentoQuantidadePrestacao.getPercentualMinimoEntrada().setScale(Parcelamento.CASAS_DECIMAIS)
			.equals(new BigDecimal("0.00"))) {

			percentualEntradaMinima = parcelamentoQuantidadePrestacao
			.getPercentualMinimoEntrada().setScale(Parcelamento.CASAS_DECIMAIS,
			Parcelamento.TIPO_ARREDONDAMENTO);

			valorEntradaMinima = valorDebitoDesconto.multiply(percentualEntradaMinima
			.divide(ConstantesSistema.CEM));
		}
		
		
		// 5.4.1.2. Caso o valor de percentual tarifa mínima esteja informado
		if (parcelamentoQuantidadePrestacao.getPercentualTarifaMinimaImovel() != null && 
			!parcelamentoQuantidadePrestacao.getPercentualTarifaMinimaImovel().setScale(Parcelamento.CASAS_DECIMAIS)
			.equals(new BigDecimal("0.00"))) {

			percentualEntradaMinima = parcelamentoQuantidadePrestacao
			.getPercentualTarifaMinimaImovel().setScale(Parcelamento.CASAS_DECIMAIS,
			Parcelamento.TIPO_ARREDONDAMENTO);

			// valorEntradaMinima = valorDebitoDesconto.multiply(percentualEntradaMinima.divide(valorCem));
			valorEntradaMinima = valorTarifaMinimaAguaImovel.multiply(percentualEntradaMinima
			.divide(ConstantesSistema.CEM));

		}

		// 5.4.1.3.
		ParcelamentoFaixaValor parcelamentoFaixaValorMenor = null;
		try {
			
			parcelamentoFaixaValorMenor = repositorioCobranca.obterParcelamentoFaixaValor(
			parcelamentoQuantidadePrestacao.getId(), valorDebitoDesconto);
			
		} catch (ErroRepositorioException e) {
			e.printStackTrace();
		}

		if (parcelamentoFaixaValorMenor != null) {
			
			percentualEntradaMinima = parcelamentoFaixaValorMenor
			.getPercentualFaixa().setScale(Parcelamento.CASAS_DECIMAIS, Parcelamento.TIPO_ARREDONDAMENTO);

			valorEntradaMinima = valorDebitoDesconto.multiply(percentualEntradaMinima
			.divide(ConstantesSistema.CEM));
		}
		
		//Caso o indicador de média dos valores das contas esteja selecionado com SIM
		if (parcelamentoQuantidadePrestacao.getIndicadorMediaValorContas()
			== ConstantesSistema.SIM.shortValue()) {

			BigDecimal qtdContas = BigDecimal.ZERO;
			BigDecimal valorTotalConta = BigDecimal.ZERO;
			BigDecimal valorTotalAcrescimosImpontualidade = BigDecimal.ZERO;
			BigDecimal valorTotalContaMaisAcrescimosImpontualidade = BigDecimal.ZERO;
			
			if (colecaoContasParaParcelamento != null && !colecaoContasParaParcelamento.isEmpty()) {
				
				Iterator contaValores = colecaoContasParaParcelamento.iterator();
				
				while (contaValores.hasNext()) {
					
					ContaValoresHelper contaValoresHelper = (ContaValoresHelper) contaValores.next();
					
					if (contaValoresHelper.getIndicadorContasDebito() == null){
						
						//VALOR TOTAL CONTAS
						valorTotalConta = valorTotalConta.add(contaValoresHelper.getValorTotalConta());
						
						//VALOR TOTAL DOS ACRÉSCIMOS POR IMPONTUALIDADE
						valorTotalAcrescimosImpontualidade.setScale(Parcelamento.CASAS_DECIMAIS, 
						Parcelamento.TIPO_ARREDONDAMENTO);
						
						valorTotalAcrescimosImpontualidade = valorTotalAcrescimosImpontualidade
						.add(contaValoresHelper.getValorTotalContaValoresParcelamento());
					
						//QUANTIDADE DE CONTAS
						qtdContas = qtdContas.add(BigDecimal.ONE);
					}
				}
			}
			
			/*
			 * O valor da entrada será (o valor total das contas + o valor total dos acrescimos) 
			 * / quantidade de contas.
			 */  
			valorTotalContaMaisAcrescimosImpontualidade = valorTotalConta.add(valorTotalAcrescimosImpontualidade);
			if(qtdContas.compareTo(qtdContas) > 0){
				valorEntradaMinima = valorTotalContaMaisAcrescimosImpontualidade.divide(qtdContas, 
						Parcelamento.CASAS_DECIMAIS, Parcelamento.TIPO_ARREDONDAMENTO);
			}
		}
		
		BigDecimal valorEntradaUltimaConta= null;
		if (parcelamentoQuantidadePrestacao.getIndicadorValorUltimaContaEmAtraso() != null && 
			parcelamentoQuantidadePrestacao.getIndicadorValorUltimaContaEmAtraso().equals(ConstantesSistema.SIM)) {
			
			Conta ultimaConta = getControladorFaturamento().pesquisarUltimaContaDoImovel(helper.getIdImovel());
						
			/*
			 * Colocado por Raphael Rossiter em 10/09/2010 - CRC5075
			 */
			if (ultimaConta == null){
				
				throw new ControladorException("atencao.imovel_sem_conta");
			}else{
				//RM6315 e RM6316 - Vivianne Sousa - 23/11/2011
				//4.4.1.Caso tenha sido informado situação de ligação de água da ultima conta 
				//(LAST_ID da última conta = LAST_ID da tabela COBRANCA.PARCEL_QTDE_PREST_SITLIG para PQTP_ID = PQTP_ID utilizado)
				Integer idLigacaoAguaSituacaoConta = ultimaConta.getLigacaoAguaSituacao().getId();
		
				boolean existe  = this.existeParcelamentoQuantidadePrestacaoSituacaoLigacaoAgua(
					idLigacaoAguaSituacaoConta,parcelamentoQuantidadePrestacao.getId());
				
				if(existe){
					if(valorTarifaMinimaAguaImovel.compareTo(ultimaConta.getValorTotal()) == 1){
						valorEntradaUltimaConta = valorTarifaMinimaAguaImovel;
					}else{
						valorEntradaUltimaConta = ultimaConta.getValorTotal();
					}
				}else{
					valorEntradaUltimaConta = ultimaConta.getValorTotal();
				}
			}
			
		}

		// 5.4.1.4. Valor da Entrada
		return obterValorEntradaParcelamento(helper.getValorEntradaInformado(), valorEntradaMinima,
		valorEntradaReparcelamento, helper.getUsuario(), valorEntradaSugerida,valorEntradaUltimaConta,indicadorVerificarMaiorValor);
	}
	
	/**
	 * [UC0214] Efetuar Parcelamento de Débitos
	 *
	 * Calcula o valor total dos descontos para pagamento à vista
	 *
	 * @author Raphael Rossiter
	 * @date 23/09/2008, 12/01/2011
	 *
	 * @param DeterminarValorDescontoPagamentoAVistaHelper
	 * @param DeterminarValorDescontoAcrescimosImpontualidadeHelper
	 * @param isParcelamento
	 * @return BigDecimal
	 * @throws ControladorException
	 */
	public BigDecimal determinarValorDescontoPagamentoAVista(
			DeterminarValorDescontoPagamentoAVistaHelper valorDescontoPagamentoAVista,
			DeterminarValorDescontoAcrescimosImpontualidadeHelper valorDescontoAcrescimos,
			boolean isParcelamento) throws ControladorException {

		//RM7208 - Vivianne Sousa - 22/05/2012
		RdLimitacaoGeografica rdLimitacaoGeografica = valorDescontoPagamentoAVista.getRdLimitacaoGeografica();
		Date dataLimiteVencimentoContaAVista = null;
		if(rdLimitacaoGeografica != null && rdLimitacaoGeografica.getDataLimiteVencimentoContaVista() != null){
			dataLimiteVencimentoContaAVista = rdLimitacaoGeografica.getDataLimiteVencimentoContaVista();
		}else if(valorDescontoPagamentoAVista.getParcelamentoPerfil().getDataLimiteVencimentoContaAVista() != null){
			dataLimiteVencimentoContaAVista = valorDescontoPagamentoAVista.getParcelamentoPerfil().getDataLimiteVencimentoContaAVista();
		}
		
		BigDecimal retorno = BigDecimal.ZERO;
		BigDecimal valorTotalDescontos = BigDecimal.ZERO;
		
		//CRC4751 - Vivianne Sousa 20/07/2010 - analista:Rosana Carvalho
		//Calcula o valor de desconto por inatividade para pagamento a vista
		if(valorDescontoPagamentoAVista.getValorDescontoInatividadeAVista() != null &&
		 !valorDescontoPagamentoAVista.getValorDescontoInatividadeAVista().equals(new BigDecimal("0.00"))){
			
			//SOMANDO O VALOR DO DESCONTO DOS ACRESCIMOS + O VALOR DO DESCONTO POR INATIVIDADE
			valorTotalDescontos = valorDescontoPagamentoAVista.getValorDescontoAcrecismosImpotualidade().setScale(Parcelamento.CASAS_DECIMAIS, Parcelamento.TIPO_ARREDONDAMENTO)
			.add(valorDescontoPagamentoAVista.getValorDescontoInatividadeAVista().setScale(Parcelamento.CASAS_DECIMAIS,Parcelamento.TIPO_ARREDONDAMENTO));			
			
		}else{
			//RM6315 e RM6316 - Vivianne Sousa - 23/11/2011
			if(dataLimiteVencimentoContaAVista != null){
				valorTotalDescontos = valorDescontoPagamentoAVista.getValorDescontoInatividade().setScale(Parcelamento.CASAS_DECIMAIS,Parcelamento.TIPO_ARREDONDAMENTO);			
						
			}else{
				//SOMANDO O VALOR DO DESCONTO DOS ACRESCIMOS + O VALOR DO DESCONTO POR INATIVIDADE
				valorTotalDescontos = valorDescontoPagamentoAVista.getValorDescontoAcrecismosImpotualidade().setScale(Parcelamento.CASAS_DECIMAIS, Parcelamento.TIPO_ARREDONDAMENTO)
				.add(valorDescontoPagamentoAVista.getValorDescontoInatividade().setScale(Parcelamento.CASAS_DECIMAIS,Parcelamento.TIPO_ARREDONDAMENTO));			
				
			}
		}

		//RM6315 e RM6316 - Vivianne Sousa - 23/11/2011
		BigDecimal valorDescontoSobreDebitoTotalAVista  = obterDescontoSobreDebitoTotalAVista
				(valorDescontoPagamentoAVista.getObterOpcoesDeParcelamentoHelper(), 
					valorDescontoPagamentoAVista.getParcelamentoPerfil(),
					valorDescontoPagamentoAVista.getColecaoContasParaParcelamento(),
					dataLimiteVencimentoContaAVista);
		//SOMANDO O VALOR DO DESCONTO SOBRE O DÉBITO TOTAL 
		valorTotalDescontos = valorTotalDescontos.add(valorDescontoSobreDebitoTotalAVista.setScale(Parcelamento.CASAS_DECIMAIS, Parcelamento.TIPO_ARREDONDAMENTO));
		
		//SOMANDO O VALOR DO DESCONTO POR ANTIGUIDADE
		valorTotalDescontos = valorTotalDescontos.add(valorDescontoPagamentoAVista.getValorDescontoAntiguidade().setScale(Parcelamento.CASAS_DECIMAIS, Parcelamento.TIPO_ARREDONDAMENTO));
		
		//SOMANDO O VALOR DO DESCONTO DAS SANÇÕES
		valorTotalDescontos = valorTotalDescontos.add(valorDescontoPagamentoAVista.getValorDescontoSancoes().setScale(Parcelamento.CASAS_DECIMAIS, Parcelamento.TIPO_ARREDONDAMENTO));
		
		//SOMANDO O VALOR DO DESCONTO DA TARIFA SOCIAL
		valorTotalDescontos = valorTotalDescontos.add(valorDescontoPagamentoAVista.getValorDescontoTarifaSocial().setScale(Parcelamento.CASAS_DECIMAIS, Parcelamento.TIPO_ARREDONDAMENTO));
		
		if (valorDescontoPagamentoAVista.getParcelamentoPerfil().getPercentualDescontoAVista() != null && 
			!valorDescontoPagamentoAVista.getParcelamentoPerfil().getPercentualDescontoAVista().equals(BigDecimal.ZERO)) {
			
			
			//SOMANDO O VALOR TOTAL DOS DESCONTOS
			retorno = retorno.add(valorTotalDescontos);
			retorno.setScale(Parcelamento.CASAS_DECIMAIS, Parcelamento.TIPO_ARREDONDAMENTO);
			
			//OBTENDO O VALOR TOTAL DO DÉBITO ATUALIZADO
			
			Object[] valorDebitoTotalEAcrescimoImpontualidadeTotal = this.obterValorTotalDebitoAtualizadoParaParcelamento(
				valorDescontoPagamentoAVista.getObterOpcoesDeParcelamentoHelper().getIdImovel(), 
				valorDescontoPagamentoAVista.getObterOpcoesDeParcelamentoHelper().getAnoMesInicialReferenciaDebito(),
				valorDescontoPagamentoAVista.getAnoMesLimiteMaximo(),  
				valorDescontoPagamentoAVista.getObterOpcoesDeParcelamentoHelper().getIndicadoresParcelamentoHelper(),
				valorDescontoPagamentoAVista.getParcelamentoPerfil(),valorDescontoPagamentoAVista.getResolucaoDiretoria());
			
			BigDecimal valorDebitoTotalAtualizado = BigDecimal.ZERO;
			BigDecimal valorAcrescimosImpontualidadeTotal = BigDecimal.ZERO;
			
			if(valorDebitoTotalEAcrescimoImpontualidadeTotal != null){
				valorDebitoTotalAtualizado = (BigDecimal)valorDebitoTotalEAcrescimoImpontualidadeTotal[0];
				valorAcrescimosImpontualidadeTotal = (BigDecimal)valorDebitoTotalEAcrescimoImpontualidadeTotal[1];
			}
			
			if(valorDescontoPagamentoAVista.getResolucaoDiretoria().getIndicadorDescontoSoEmContaAVista().equals(ConstantesSistema.SIM)){
				//se IndicadorDescontoSoEmContaAVista == 1
				//adicionar ao valorDebitoTotalAtualizado 
				//o valor do somatorio dos valores dos debitos a cobrar 
				//correspondente a parcelamento de contas com referencia menor ou igual ao AnoMesLimiteMaximo 
				Object[] debitoACobrarParcelamentoImovel = this.pesquisaSomatorioValorDebitoACobrarParcelamentoImovel(
						 valorDescontoPagamentoAVista.getObterOpcoesDeParcelamentoHelper().getIdImovel(),
						 valorDescontoPagamentoAVista.getAnoMesLimiteMaximo());

				 BigDecimal somatorioValorDebitoACobrarParcelamento = (BigDecimal) debitoACobrarParcelamentoImovel[0];
				 
				 valorDebitoTotalAtualizado = valorDebitoTotalAtualizado.add(somatorioValorDebitoACobrarParcelamento);

				 if(valorDescontoPagamentoAVista.getValorCreditoARealizar() != null){
                     valorDebitoTotalAtualizado = valorDebitoTotalAtualizado.subtract(valorDescontoPagamentoAVista.getValorCreditoARealizar());     
                 }
        
			}
			
			if (valorDebitoTotalAtualizado.compareTo(BigDecimal.ZERO) == 1){
				
				BigDecimal descontoAVistaAcrescimoImpontualidade = BigDecimal.ZERO;
				
				if(valorDescontoPagamentoAVista.getParcelamentoPerfil().getPercentualDescontoPagamentoAVista() != null
						&& valorDescontoPagamentoAVista.getParcelamentoPerfil().
						getPercentualDescontoPagamentoAVista().compareTo(BigDecimal.ZERO) == 1){
					
					//CALCULANDO O PERCENTUAL DO DESCONTO DOS ACRESCIMOS IMPONTUALIDADE 
					BigDecimal percentualDescontoAcrescimoImpontualidade = Util.dividirArredondando(
						valorDescontoPagamentoAVista.getParcelamentoPerfil().getPercentualDescontoPagamentoAVista(), ConstantesSistema.CEM);
				
					descontoAVistaAcrescimoImpontualidade = 
						valorAcrescimosImpontualidadeTotal.multiply(percentualDescontoAcrescimoImpontualidade);
					
					valorTotalDescontos = valorTotalDescontos.add(descontoAVistaAcrescimoImpontualidade);
					
					
				}
				
				//se so entrar as contas para calcular o desconto a vista, não subtrair do valor das conta os 'descontos'
				//o PercentualDescontoAVista vai ser aplicado diretamente no valor total das contas
				if(valorDescontoPagamentoAVista.getResolucaoDiretoria().getIndicadorDescontoSoEmContaAVista().equals(ConstantesSistema.NAO)){
					valorDebitoTotalAtualizado = valorDebitoTotalAtualizado.subtract(valorTotalDescontos);
				}
				
				//CALCULANDO O PERCENTUAL DO DESCONTO
				BigDecimal percentualDesconto = Util.dividirArredondando(valorDescontoPagamentoAVista.getParcelamentoPerfil()
				.getPercentualDescontoAVista(), ConstantesSistema.CEM);
			
				BigDecimal descontoAVista = valorDebitoTotalAtualizado.multiply(percentualDesconto);
				
				descontoAVista = descontoAVista.add(descontoAVistaAcrescimoImpontualidade);
				
				retorno = retorno.add(descontoAVista);
				retorno.setScale(Parcelamento.CASAS_DECIMAIS, Parcelamento.TIPO_ARREDONDAMENTO);
	
			}

		}
		else{
			Collection colecaoContasParcel = valorDescontoPagamentoAVista.getColecaoContasParaParcelamento();
			
			BigDecimal valorTotalAcrescimosImpontualidade = this.obterValorTotalAcrescimosImpontualidadeParaParcelamento(
			valorDescontoPagamentoAVista.getObterOpcoesDeParcelamentoHelper(),
			valorDescontoPagamentoAVista.getAnoMesLimiteMaximo(), isParcelamento,
			colecaoContasParcel);
			
			if(dataLimiteVencimentoContaAVista != null){
				valorTotalAcrescimosImpontualidade = valorTotalAcrescimosImpontualidade.add(valorTotalDescontos);
			}
			
			if(valorTotalDescontos.compareTo(valorTotalAcrescimosImpontualidade) == 1){
				retorno = valorTotalDescontos;
			}
			else{
				retorno = valorTotalAcrescimosImpontualidade;
			}
		}
	
		//RM9243 - Vivianne Sousa - 01/08/2013
		//[SB0015] Calcular desconto para pagamento a vista considerando valor do débito no período.
		BigDecimal descontoPagAVistaConsiderandoValorDebito = 
				this.calcularDescontoPagAVistaConsiderandoValorDebito(
				valorDescontoPagamentoAVista.getColecaoContasParaParcelamento(), 
				valorDescontoPagamentoAVista.getParcelamentoPerfil());
		
		retorno = retorno.add(descontoPagAVistaConsiderandoValorDebito);
		
		return retorno;
	}
	
	/**
	 * Permite efetuar o parcelamento dos débitos de um imóvel
	 * 
	 * [UC0214] Efetuar Parcelamento de Débitos
	 * 
	 * Obtém as Opções de Parcelamento do Débito do Imóvel
	 * 
	 * [SB0002] Obter Opções Parcelamento
	 * 
	 * @author Roberta Costa, Vivianne Sousa, Raphael Rossiter
	 * @date 21/03/2006, 30/10/2006, 12/09/2008
	 * 
	 * @param efetuarParcelamentoDebitosActionForm
	 * @param colecaoContaValores
	 * @return Collection
	 */
	public NegociacaoOpcoesParcelamentoHelper obterOpcoesDeParcelamento(
			ObterOpcoesDeParcelamentoHelper helper) throws ControladorException {

		NegociacaoOpcoesParcelamentoHelper negociacaoOpcoesParcelamentoHelper = new NegociacaoOpcoesParcelamentoHelper();

		// [SB0004] - Verificar Situação do Imóvel e Perfil Parcelamento
		Object[] situacaoImovelPerfilParcelamento = this.verificarSituacaoImovelPerfilParcelamento(
		helper.getIdLigacaoAguaSituacao(), helper.getIdLigacaoEsgotoSituacao(), helper.getIdImovel(), 
		helper.getIdImovelPerfil(), helper.getIdResolucaoDiretoria(), 
		helper.getNumeroReparcelamentoConsecutivos(), helper.getValorDebitoACobrarParcelamentoImovel());

		ParcelamentoPerfil parcelamentoPerfil = (ParcelamentoPerfil) situacaoImovelPerfilParcelamento[0];
		ImovelSituacao imovelSituacao = (ImovelSituacao) situacaoImovelPerfilParcelamento[1];
		Collection colecaoParcelamentoQuantidadePrestacao = (Collection) situacaoImovelPerfilParcelamento[2];
		ParcelamentoQuantidadeReparcelamento parcelamentoQuantidadeReparcelamento = 
		(ParcelamentoQuantidadeReparcelamento)situacaoImovelPerfilParcelamento[3];
		
		negociacaoOpcoesParcelamentoHelper.setParcelamentoPerfil(parcelamentoPerfil);

		// 1. [SB0003]- Calcular valor do desconto por antiguidade do débito
		BigDecimal valorDescontoAntiguidade = new BigDecimal("0.00");
		BigDecimal valorTotalAcrescimosImpontualidadePorAntiguidade = new BigDecimal("0.00");
		int quantidadeMinimaMesesAntiguidade = 0;

		CalcularValorDescontoAntiguidadeDebitoHelper descontoAntiguidadeDebito = calcularValorDescontoAntiguidadeDebito(
		helper.getIdResolucaoDiretoria(), helper.getIdImovel(), helper.getValorEntradaInformado(),
		helper.getIdLigacaoAguaSituacao(), helper.getIdLigacaoEsgotoSituacao(), 
		helper.getColecaoContaValores(), parcelamentoPerfil, helper.getIndicadorRestabelecimento(),
		helper.getValorTotalMultas(), helper.getValorTotalJurosMora(),
		helper.getValorTotalAtualizacoesMonetarias(),negociacaoOpcoesParcelamentoHelper);
		

		valorDescontoAntiguidade = descontoAntiguidadeDebito.getValorDescontoAntiguidade();
		valorTotalAcrescimosImpontualidadePorAntiguidade = descontoAntiguidadeDebito.getValorTotalAcrescimosImpontualidade();
		quantidadeMinimaMesesAntiguidade = descontoAntiguidadeDebito.getMaiorQuantidadeMinimaMesesAntiguidade().intValue();
		
		negociacaoOpcoesParcelamentoHelper.setColecaoContasEmAntiguidade(
		descontoAntiguidadeDebito.getColecaoContasEmAntiguidade());
		
		negociacaoOpcoesParcelamentoHelper.setColecaoContasParaParcelamento(
		descontoAntiguidadeDebito.getColecaoContasParaParcelamento());
		
		// 2. O sistema calcula o valor do desconto nos acréscimos por
		// impontualidade

		// GUIA PAGAMENTO
		BigDecimal valorAcrescimosImpontualidadeGuiaPagamento = new BigDecimal("0.00");
		valorAcrescimosImpontualidadeGuiaPagamento.setScale(
				Parcelamento.CASAS_DECIMAIS, Parcelamento.TIPO_ARREDONDAMENTO);

		if (!parcelamentoPerfil.getPercentualDescontoAcrescimo().equals(new BigDecimal("0.00"))) {
			// Pega os acréscimos de Guias de Pagamento
			if (helper.getColecaoGuiaPagamento() != null && !helper.getColecaoGuiaPagamento().isEmpty()) {
				Iterator guiaPagamentoValores = helper.getColecaoGuiaPagamento().iterator();

				BigDecimal valorAtualizacaoMonetaria = new BigDecimal("0.00");
				BigDecimal valorJurosMora = new BigDecimal("0.00");
				BigDecimal valorMulta = new BigDecimal("0.00");

				while (guiaPagamentoValores.hasNext()) {
					GuiaPagamentoValoresHelper guiaPagamentoValoresHelper = (GuiaPagamentoValoresHelper) guiaPagamentoValores.next();

					valorAtualizacaoMonetaria = new BigDecimal("0.00");
					if (guiaPagamentoValoresHelper.getValorAtualizacaoMonetaria() != null
							&& !guiaPagamentoValoresHelper.getValorAtualizacaoMonetaria().equals("")) {
						valorAtualizacaoMonetaria.setScale(Parcelamento.CASAS_DECIMAIS,	Parcelamento.TIPO_ARREDONDAMENTO);
						valorAtualizacaoMonetaria = valorAtualizacaoMonetaria.add(guiaPagamentoValoresHelper
							.getValorAtualizacaoMonetaria().setScale(Parcelamento.CASAS_DECIMAIS, Parcelamento.TIPO_ARREDONDAMENTO));
						valorAcrescimosImpontualidadeGuiaPagamento = valorAcrescimosImpontualidadeGuiaPagamento
							.add(valorAtualizacaoMonetaria.setScale(Parcelamento.CASAS_DECIMAIS,Parcelamento.TIPO_ARREDONDAMENTO));
					}

					valorJurosMora = new BigDecimal("0.00");
					if (guiaPagamentoValoresHelper.getValorJurosMora() != null
							&& !guiaPagamentoValoresHelper.getValorJurosMora().equals("")) {
						valorJurosMora.setScale(Parcelamento.CASAS_DECIMAIS, Parcelamento.TIPO_ARREDONDAMENTO);
						valorJurosMora = valorJurosMora.add(guiaPagamentoValoresHelper
								.getValorJurosMora().setScale(Parcelamento.CASAS_DECIMAIS,Parcelamento.TIPO_ARREDONDAMENTO));
						valorAcrescimosImpontualidadeGuiaPagamento = valorAcrescimosImpontualidadeGuiaPagamento
								.add(valorJurosMora.setScale(Parcelamento.CASAS_DECIMAIS, Parcelamento.TIPO_ARREDONDAMENTO));
					}

					valorMulta = new BigDecimal("0.00");
					if (guiaPagamentoValoresHelper.getValorMulta() != null
							&& !guiaPagamentoValoresHelper.getValorMulta().equals("")) {
						valorMulta.setScale(Parcelamento.CASAS_DECIMAIS, Parcelamento.TIPO_ARREDONDAMENTO);
						valorMulta = valorMulta.add(guiaPagamentoValoresHelper
								.getValorMulta().setScale(Parcelamento.CASAS_DECIMAIS, Parcelamento.TIPO_ARREDONDAMENTO));
						valorAcrescimosImpontualidadeGuiaPagamento = valorAcrescimosImpontualidadeGuiaPagamento
								.add(valorMulta.setScale(Parcelamento.CASAS_DECIMAIS,Parcelamento.TIPO_ARREDONDAMENTO));
					}
				}
			}
		}

		FiltroResolucaoDiretoria filtroResolucaoDiretoria = new FiltroResolucaoDiretoria();
		filtroResolucaoDiretoria.adicionarParametro(new ParametroSimples(
		FiltroResolucaoDiretoria.CODIGO, helper.getIdResolucaoDiretoria()));

		Collection colecaoRD = getControladorUtil().pesquisar(
				filtroResolucaoDiretoria, ResolucaoDiretoria.class.getName());
		ResolucaoDiretoria rd = (ResolucaoDiretoria) Util
				.retonarObjetoDeColecao(colecaoRD);

		// ==================== RD especial =======================
		BigDecimal valorDescontoSancoesRDEspecial = BigDecimal.ZERO;
		BigDecimal valorDescontoAcrescimosImpontualidadeRDEspecial = BigDecimal.ZERO;
		BigDecimal valorDescontoTarifaSocialRDEspecial = BigDecimal.ZERO;

		Integer anoMesAtualMenosQuantMinimaMesesAntiguidade = 0;
		if (quantidadeMinimaMesesAntiguidade != 0) {
			Date data = Util.adcionarOuSubtrairMesesAData(new Date(),
					-quantidadeMinimaMesesAntiguidade, 0);
			anoMesAtualMenosQuantMinimaMesesAntiguidade = Util
					.getAnoMesComoInteger(data);
		}

		Integer anoMesLimiteMinimo = null;
		if (parcelamentoPerfil.getAnoMesReferenciaLimiteInferior() != null) {
			anoMesLimiteMinimo = parcelamentoPerfil
					.getAnoMesReferenciaLimiteInferior();
		}
		Integer anoMesLimiteMaximo = null; 
			
		if (parcelamentoPerfil.getAnoMesReferenciaLimiteSuperior() != null) {
			anoMesLimiteMaximo = parcelamentoPerfil
					.getAnoMesReferenciaLimiteSuperior();
		}
		if (anoMesLimiteMinimo == null
				|| helper.getAnoMesInicialReferenciaDebito().compareTo(anoMesLimiteMinimo) > 0) {
			anoMesLimiteMinimo = helper.getAnoMesInicialReferenciaDebito();
		}

		if (anoMesLimiteMinimo != null && anoMesLimiteMinimo
				.compareTo(anoMesAtualMenosQuantMinimaMesesAntiguidade) < 0) {
			anoMesLimiteMinimo = anoMesAtualMenosQuantMinimaMesesAntiguidade;
		}

		if (helper.getAnoMesInicialReferenciaDebito() !=null 
				&& helper.getAnoMesInicialReferenciaDebito()
				.compareTo(anoMesAtualMenosQuantMinimaMesesAntiguidade) == 1) {
			anoMesAtualMenosQuantMinimaMesesAntiguidade = helper.getAnoMesInicialReferenciaDebito();
		}

		if (anoMesLimiteMaximo == null && 
			helper.getAnoMesFinalReferenciaDebito() != null ) {
			
			anoMesLimiteMaximo = helper.getAnoMesFinalReferenciaDebito();
			
		}else if (anoMesLimiteMaximo != null && 
				helper.getAnoMesFinalReferenciaDebito() != null && 
				helper.getAnoMesFinalReferenciaDebito().compareTo(anoMesLimiteMaximo) < 0){
			
			anoMesLimiteMaximo = helper.getAnoMesFinalReferenciaDebito();
		}
		
		if (rd.getIndicadorDescontoSancoes().equals(ConstantesSistema.SIM)) {
			BigDecimal valorDescontoSancoesRDEspecialDebitoACobrar = BigDecimal.ZERO;
			BigDecimal valorDescontoSancoesRDEspecialDebitoCobrado = BigDecimal.ZERO;
			BigDecimal valorDescontoAcrescimosImpontualidadeRDEspecialDebitoACobrar = BigDecimal.ZERO;
			BigDecimal valorDescontoAcrescimosImpontualidadeRDEspecialDebitoCobrado = BigDecimal.ZERO;

			if (parcelamentoPerfil.getPercentualDescontoSancao() != null
					&& !parcelamentoPerfil.getPercentualDescontoSancao()
							.equals(BigDecimal.ZERO)) {
				
				valorDescontoSancoesRDEspecialDebitoACobrar = pesquisarValorDebitoACobrarSancoes(
				helper.getIdImovel(), helper.getAnoMesInicialReferenciaDebito(), anoMesLimiteMaximo);
				
				if (valorDescontoSancoesRDEspecialDebitoACobrar == null) {
					valorDescontoSancoesRDEspecialDebitoACobrar = BigDecimal.ZERO;
				}

				valorDescontoSancoesRDEspecialDebitoCobrado = pesquisarValorDebitoCobradoSancoes(
				helper.getIdImovel(), anoMesAtualMenosQuantMinimaMesesAntiguidade,
				anoMesLimiteMaximo, helper.getIndicadoresParcelamentoHelper().getIndicadorDividaAtiva());
				
				if (valorDescontoSancoesRDEspecialDebitoCobrado == null) {
					valorDescontoSancoesRDEspecialDebitoCobrado = BigDecimal.ZERO;
				}

				valorDescontoSancoesRDEspecial = valorDescontoSancoesRDEspecialDebitoACobrar
				.add(valorDescontoSancoesRDEspecialDebitoCobrado);

//				if (parcelamentoPerfil.getPercentualDescontoSancao() != null
//						&& !parcelamentoPerfil.getPercentualDescontoSancao()
//								.equals(BigDecimal.ZERO)) {
					valorDescontoSancoesRDEspecial = valorDescontoSancoesRDEspecial
							.multiply(parcelamentoPerfil
									.getPercentualDescontoSancao().divide(
											new BigDecimal("100.00")));
//				}
				
				
			}
			
			if (helper.getAnoMesInicialReferenciaDebito() != null
					&& anoMesLimiteMaximo != null) {

				valorDescontoAcrescimosImpontualidadeRDEspecialDebitoACobrar = pesquisarValorDebitoACobrar(
						helper.getIdImovel(), helper
								.getAnoMesInicialReferenciaDebito(),
						anoMesLimiteMaximo);
			}
			if (valorDescontoAcrescimosImpontualidadeRDEspecialDebitoACobrar == null) {
				valorDescontoAcrescimosImpontualidadeRDEspecialDebitoACobrar = BigDecimal.ZERO;
			}

			if (anoMesLimiteMaximo != null
					&& anoMesAtualMenosQuantMinimaMesesAntiguidade != null) {
				valorDescontoAcrescimosImpontualidadeRDEspecialDebitoCobrado = pesquisarValorDebitoCobradoContas(
						helper.getIdImovel(),
						anoMesAtualMenosQuantMinimaMesesAntiguidade,
						anoMesLimiteMaximo, helper
								.getIndicadoresParcelamentoHelper()
								.getIndicadorDividaAtiva());
			}
			if (valorDescontoAcrescimosImpontualidadeRDEspecialDebitoCobrado == null) {
				valorDescontoAcrescimosImpontualidadeRDEspecialDebitoCobrado = BigDecimal.ZERO;
			}

			valorDescontoAcrescimosImpontualidadeRDEspecial = valorDescontoAcrescimosImpontualidadeRDEspecialDebitoCobrado
					.add(valorDescontoAcrescimosImpontualidadeRDEspecialDebitoACobrar);

		}

		if (helper.getIdImovelPerfil().equals(ImovelPerfil.TARIFA_SOCIAL)
			&& parcelamentoPerfil.getIndicadorRetroativoTarifaSocial() != null
			&& parcelamentoPerfil.getIndicadorRetroativoTarifaSocial().equals(ConstantesSistema.SIM)) {

			valorDescontoTarifaSocialRDEspecial = obterDescontoTarifaSocial(
			helper.getIdImovel(), anoMesLimiteMinimo, anoMesLimiteMaximo, parcelamentoPerfil, 
			helper.getIndicadoresParcelamentoHelper().getIndicadorContasRevisao());

		}
		// =========================================================

		
		//=============================================================================================================
		
		
		//CALCULANDO O VALOR DO DESCONTO DOS ACRÉSCIMOS POR IMPONTUALIDADE 
		DeterminarValorDescontoAcrescimosImpontualidadeHelper valorDescontoAcrescimosImpontualidadeHelper = 
		new DeterminarValorDescontoAcrescimosImpontualidadeHelper(parcelamentoPerfil, 
		valorTotalAcrescimosImpontualidadePorAntiguidade, valorAcrescimosImpontualidadeGuiaPagamento, 
		valorDescontoAcrescimosImpontualidadeRDEspecial);
		
		BigDecimal valorDescontoAcrescimosImpontualidade = 
		this.determinarValorDescontoAcrescimosImpontualidade(valorDescontoAcrescimosImpontualidadeHelper);
		
		//=============================================================================================================

		
		// 3. Caso o tipo da situação do imovel seja INATIVO (com situação da
		// LIGACAO_AGUA igual a Suprimido, Suprimido Parcial a Pedido ou
		// Suprimido Parcial
		BigDecimal valorDescontoInatividade = new BigDecimal("0.00");
		BigDecimal valorDescontoInatividadePagamentoAVista = new BigDecimal("0.00");

		// Valor do Débito Total menos os descontos de Acrescimo e Antiguidade
		BigDecimal valorDebitoDescontoInatividade = new BigDecimal("0.00");

		valorDebitoDescontoInatividade = helper.getValorDebitoAtualizado().setScale(Parcelamento.CASAS_DECIMAIS, Parcelamento.TIPO_ARREDONDAMENTO)
				.subtract(valorDescontoAcrescimosImpontualidade.setScale(Parcelamento.CASAS_DECIMAIS, Parcelamento.TIPO_ARREDONDAMENTO));
		valorDebitoDescontoInatividade = valorDebitoDescontoInatividade.setScale(Parcelamento.CASAS_DECIMAIS, Parcelamento.TIPO_ARREDONDAMENTO)
				.subtract(valorDescontoAntiguidade.setScale(Parcelamento.CASAS_DECIMAIS, Parcelamento.TIPO_ARREDONDAMENTO));
		valorDebitoDescontoInatividade = valorDebitoDescontoInatividade.setScale(Parcelamento.CASAS_DECIMAIS, Parcelamento.TIPO_ARREDONDAMENTO)
				.subtract(valorDescontoSancoesRDEspecial.setScale(Parcelamento.CASAS_DECIMAIS, Parcelamento.TIPO_ARREDONDAMENTO));
		valorDebitoDescontoInatividade = valorDebitoDescontoInatividade.setScale(Parcelamento.CASAS_DECIMAIS, Parcelamento.TIPO_ARREDONDAMENTO)
				.subtract(valorDescontoTarifaSocialRDEspecial.setScale(Parcelamento.CASAS_DECIMAIS, Parcelamento.TIPO_ARREDONDAMENTO));

		if (imovelSituacao.getImovelSituacaoTipo().getId().equals(ImovelSituacaoTipo.INATIVO)
				|| imovelSituacao.getImovelSituacaoTipo().getId().equals(ImovelSituacaoTipo.LIGADO_SO_ESGOTO)) {

			// 3.1 Calcula a qtd de meses de inatividade de ligação de água
			FiltroLigacaoAgua filtroLigacaoAgua = new FiltroLigacaoAgua();
			filtroLigacaoAgua.adicionarParametro(new ParametroSimples(FiltroLigacaoAgua.ID, helper.getIdImovel()));

			Collection<LigacaoAgua> colecaoLigacaoAgua = getControladorUtil()
					.pesquisar(filtroLigacaoAgua, LigacaoAgua.class.getName());

			Calendar dataAnoMesReferencia = new GregorianCalendar();
			dataAnoMesReferencia.set(Calendar.YEAR, new Integer(
					helper.getInicioIntervaloParcelamento().substring(3, 4)).intValue());
			
			dataAnoMesReferencia.set(Calendar.MONTH, new Integer(
					helper.getInicioIntervaloParcelamento().substring(0, 2)).intValue());
			
			dataAnoMesReferencia.set(Calendar.DATE, 01);

			Date dataCorrente = new Date();

			int quantidadeMeses = 0;

			if (Util.isVazioOrNulo(colecaoLigacaoAgua)) {
				// [FS0008] - Verificar a existência da data de supressão da ligação de água
				quantidadeMeses = Util.dataDiff(dataAnoMesReferencia.getTime(),	dataCorrente);
			} else {
				// Pega a primeira ocorrência da coleção
				LigacaoAgua ligacaoAgua = (LigacaoAgua) Util.retonarObjetoDeColecao(colecaoLigacaoAgua);

				Date dataSupressao = null;
				if (ligacaoAgua != null) {
					dataSupressao = ligacaoAgua.getDataSupressao();
				}

				if (dataSupressao != null && !dataSupressao.equals("")) {
					quantidadeMeses = Util.dataDiff(dataSupressao, dataCorrente);
				} else {
					// [FS0008] - Verificar a existência da data de supressão da ligação de água
					quantidadeMeses = Util.dataDiff(dataAnoMesReferencia.getTime(), dataCorrente);
				}
			}

			// 3.2 Obtem os percentuais de desconto por tempo de inatividade
			ParcelamentoDescontoInatividade parcelamentoDescontoInatividadeMenor = null;
			try {
				parcelamentoDescontoInatividadeMenor = repositorioCobranca
						.obterPercentualDescontoInatividade(parcelamentoPerfil.getId(), quantidadeMeses);
			} catch (ErroRepositorioException e) {
				e.printStackTrace();
			}

			if (parcelamentoDescontoInatividadeMenor != null) {

				BigDecimal percentualDescontoInatividade = null;
				
				if (helper.getIndicadorRestabelecimento().equals(2)) {
					// 3.3.1 Com restabelecimento
					percentualDescontoInatividade = parcelamentoDescontoInatividadeMenor
							.getPercentualDescontoSemRestabelecimento();
					valorDescontoInatividade = Util.dividirArredondando(percentualDescontoInatividade.setScale(
							Parcelamento.CASAS_DECIMAIS, Parcelamento.TIPO_ARREDONDAMENTO),	new BigDecimal("100.00"));
					valorDescontoInatividade = valorDescontoInatividade.setScale(Parcelamento.CASAS_DECIMAIS,
							Parcelamento.TIPO_ARREDONDAMENTO).multiply(valorDebitoDescontoInatividade.setScale(
									Parcelamento.CASAS_DECIMAIS, Parcelamento.TIPO_ARREDONDAMENTO));
				} 
				else if (helper.getIndicadorRestabelecimento().equals(1)) {
					// 3.3.2 Sem restabelecimento
					percentualDescontoInatividade = parcelamentoDescontoInatividadeMenor.getPercentualDescontoComRestabelecimento()
							.setScale(Parcelamento.CASAS_DECIMAIS, Parcelamento.TIPO_ARREDONDAMENTO);
					valorDescontoInatividade = Util.dividirArredondando(percentualDescontoInatividade.setScale(
							Parcelamento.CASAS_DECIMAIS, Parcelamento.TIPO_ARREDONDAMENTO),	new BigDecimal("100.00"));
					valorDescontoInatividade = valorDescontoInatividade.setScale(Parcelamento.CASAS_DECIMAIS,
							Parcelamento.TIPO_ARREDONDAMENTO).multiply(valorDebitoDescontoInatividade.setScale(
									Parcelamento.CASAS_DECIMAIS, Parcelamento.TIPO_ARREDONDAMENTO));
				} else {
					valorDescontoInatividade = new BigDecimal("0.00");
				}
				negociacaoOpcoesParcelamentoHelper.setPercentualDescontoInatividadeLigacaoAgua(percentualDescontoInatividade);
			} else {
				// 3.3 Caso nenhuma ocorrência tenha sido selecionada
				valorDescontoInatividade = new BigDecimal("0.00");
			}
			
			
			// Obtem os percentuais de desconto por tempo de inatividade
			ParcDesctoInativVista parcelamentoDescontoInatividadeAVistaMenor = null;
			try {
				parcelamentoDescontoInatividadeAVistaMenor = repositorioCobranca
						.obterPercentualDescontoInatividadeAVista(parcelamentoPerfil.getId(), quantidadeMeses);
			} catch (ErroRepositorioException e) {
				e.printStackTrace();
			}

			if (parcelamentoDescontoInatividadeAVistaMenor != null) {

				BigDecimal percentualDescontoInatividadeAVista = null;
				
				if (helper.getIndicadorRestabelecimento().equals(2)) {
					// Com restabelecimento
					percentualDescontoInatividadeAVista = parcelamentoDescontoInatividadeAVistaMenor
							.getPercentualDescontoSemRestabelecimento();
					valorDescontoInatividadePagamentoAVista = Util.dividirArredondando(percentualDescontoInatividadeAVista.setScale(
							Parcelamento.CASAS_DECIMAIS, Parcelamento.TIPO_ARREDONDAMENTO),	new BigDecimal("100.00"));
					valorDescontoInatividadePagamentoAVista = valorDescontoInatividadePagamentoAVista.setScale(Parcelamento.CASAS_DECIMAIS,
							Parcelamento.TIPO_ARREDONDAMENTO).multiply(valorDebitoDescontoInatividade.setScale(
									Parcelamento.CASAS_DECIMAIS, Parcelamento.TIPO_ARREDONDAMENTO));
				} 
				else if (helper.getIndicadorRestabelecimento().equals(1)) {
					// Sem restabelecimento
					percentualDescontoInatividadeAVista = parcelamentoDescontoInatividadeAVistaMenor.getPercentualDescontoComRestabelecimento()
							.setScale(Parcelamento.CASAS_DECIMAIS, Parcelamento.TIPO_ARREDONDAMENTO);
					valorDescontoInatividadePagamentoAVista = Util.dividirArredondando(percentualDescontoInatividadeAVista.setScale(
							Parcelamento.CASAS_DECIMAIS, Parcelamento.TIPO_ARREDONDAMENTO),	new BigDecimal("100.00"));
					valorDescontoInatividadePagamentoAVista = valorDescontoInatividadePagamentoAVista.setScale(Parcelamento.CASAS_DECIMAIS,
							Parcelamento.TIPO_ARREDONDAMENTO).multiply(valorDebitoDescontoInatividade.setScale(
									Parcelamento.CASAS_DECIMAIS, Parcelamento.TIPO_ARREDONDAMENTO));
				} else {
					valorDescontoInatividadePagamentoAVista = new BigDecimal("0.00");
				}
				negociacaoOpcoesParcelamentoHelper.setPercentualDescontoInatividadeAvistaLigacaoAgua(percentualDescontoInatividadeAVista);
			} else {
				//  Caso nenhuma ocorrência tenha sido selecionada
				valorDescontoInatividadePagamentoAVista = new BigDecimal("0.00");
			}
			
			
		} else {
			// Caso Ativo atribui zero
			valorDescontoInatividade = new BigDecimal("0.00");
			valorDescontoInatividadePagamentoAVista =  new BigDecimal("0.00");
		}
		//RM7208 - Vivianne Sousa - 22/05/2012
		RdLimitacaoGeografica rdLimitacaoGeografica = this.
				pesquisarRdLimitacaoGeografica(helper.getIdImovel(), helper.getIdResolucaoDiretoria());
		
		
		//RM6315 e RM6316 - Vivianne Sousa - 22/11/2011
		BigDecimal valorDescontoSobreDebitoTotalParc = obterDescontoSobreDebitoTotalParc(helper, 
			parcelamentoPerfil,negociacaoOpcoesParcelamentoHelper,rdLimitacaoGeografica);
		negociacaoOpcoesParcelamentoHelper.setValorDescontoSobreDebitoTotal(valorDescontoSobreDebitoTotalParc);
		
		BigDecimal valorDebitoDesconto = new BigDecimal("0.00");

		valorDebitoDesconto = helper.getValorDebitoAtualizado().setScale(Parcelamento.CASAS_DECIMAIS, Parcelamento.TIPO_ARREDONDAMENTO)
				.subtract(valorDescontoAcrescimosImpontualidade.setScale(Parcelamento.CASAS_DECIMAIS, Parcelamento.TIPO_ARREDONDAMENTO));
		valorDebitoDesconto = valorDebitoDesconto.setScale(Parcelamento.CASAS_DECIMAIS, Parcelamento.TIPO_ARREDONDAMENTO)
				.subtract(valorDescontoInatividade.setScale(Parcelamento.CASAS_DECIMAIS, Parcelamento.TIPO_ARREDONDAMENTO));
		valorDebitoDesconto = valorDebitoDesconto.subtract(valorDescontoAntiguidade.setScale(Parcelamento.CASAS_DECIMAIS, Parcelamento.TIPO_ARREDONDAMENTO));
		valorDebitoDesconto = valorDebitoDesconto.setScale(Parcelamento.CASAS_DECIMAIS, Parcelamento.TIPO_ARREDONDAMENTO)
				.subtract(valorDescontoSancoesRDEspecial.setScale(Parcelamento.CASAS_DECIMAIS, Parcelamento.TIPO_ARREDONDAMENTO));
		valorDebitoDesconto = valorDebitoDesconto.setScale(Parcelamento.CASAS_DECIMAIS, Parcelamento.TIPO_ARREDONDAMENTO)
				.subtract(valorDescontoTarifaSocialRDEspecial.setScale(Parcelamento.CASAS_DECIMAIS, Parcelamento.TIPO_ARREDONDAMENTO));
		valorDebitoDesconto = valorDebitoDesconto.setScale(Parcelamento.CASAS_DECIMAIS, Parcelamento.TIPO_ARREDONDAMENTO)
				.subtract(valorDescontoSobreDebitoTotalParc.setScale(Parcelamento.CASAS_DECIMAIS, Parcelamento.TIPO_ARREDONDAMENTO));
//		valorDebitoDesconto = valorDebitoDesconto.setScale(Parcelamento.CASAS_DECIMAIS, Parcelamento.TIPO_ARREDONDAMENTO)
//		.subtract(descontoPagParceladoPercentualEntrada.setScale(Parcelamento.CASAS_DECIMAIS, Parcelamento.TIPO_ARREDONDAMENTO));
//
//		negociacaoOpcoesParcelamentoHelper.setValorDebitoDesconto(valorDebitoDesconto);
		
		// ============================================================================================================
		
		
		//CALCULANDO O VALOR TOTAL DOS DESCONTOS PARA PAGAMENTO À VISTA
		DeterminarValorDescontoPagamentoAVistaHelper valorDescontoPagamentoAVistaHelper =
            new DeterminarValorDescontoPagamentoAVistaHelper(helper,parcelamentoPerfil,
                valorDescontoAcrescimosImpontualidade, valorDescontoInatividade, valorDescontoAntiguidade,
                valorDescontoSancoesRDEspecial, valorDescontoTarifaSocialRDEspecial, anoMesLimiteMaximo,
                rd,helper.getValorCreditoARealizarParcelamentoImovel(),valorDescontoInatividadePagamentoAVista,
                negociacaoOpcoesParcelamentoHelper.getColecaoContasParaParcelamento(),rdLimitacaoGeografica,
                helper.getColecaoContaValores());
		
		BigDecimal valorDescontoPagamentoAVista = this.determinarValorDescontoPagamentoAVista(
		valorDescontoPagamentoAVistaHelper,	valorDescontoAcrescimosImpontualidadeHelper, true);
		
		BigDecimal valorTotalAcrescimosImpontualidadePagamentoAVista = this.obterValorTotalAcrescimosImpontualidadeParaParcelamento(
				helper,
				anoMesLimiteMaximo, true,
				negociacaoOpcoesParcelamentoHelper.getColecaoContasParaParcelamento());
		
		negociacaoOpcoesParcelamentoHelper.setValorTotalAcrescimosPagamentoAVista(valorTotalAcrescimosImpontualidadePagamentoAVista);
		// ============================================================================================================
		
		// Coloca os valores dos descontos no objeto helper
		negociacaoOpcoesParcelamentoHelper.setValorDescontoAcrecismosImpotualidade(valorDescontoAcrescimosImpontualidade);
		negociacaoOpcoesParcelamentoHelper.setValorDescontoInatividade(valorDescontoInatividade);
		negociacaoOpcoesParcelamentoHelper.setValorDescontoAntiguidade(valorDescontoAntiguidade);
		negociacaoOpcoesParcelamentoHelper.setValorDescontoSancoesRDEspecial(valorDescontoSancoesRDEspecial);
		negociacaoOpcoesParcelamentoHelper.setValorDescontoTarifaSocialRDEspecial(valorDescontoTarifaSocialRDEspecial);
		negociacaoOpcoesParcelamentoHelper.setValorTotalDescontoPagamentoAVista(valorDescontoPagamentoAVista);
		

		// 5. Gera a Lista de opções de parcelamento
		BigDecimal valorEntrada = new BigDecimal("0.00");
		BigDecimal valorEntradaSugerida = null;
		
		if (colecaoParcelamentoQuantidadePrestacao != null && !colecaoParcelamentoQuantidadePrestacao.isEmpty()) {
			// 5.1. Inicializa a quantidade de prestação com valor 1
			Short quantidadePrestacao = 1;

			// Pesquisa o imovel na base
			FiltroImovel filtroImovel = new FiltroImovel();
			filtroImovel.adicionarParametro(new ParametroSimples(FiltroImovel.ID, helper.getIdImovel()));
			filtroImovel.adicionarCaminhoParaCarregamentoEntidade(FiltroImovel.CONSUMO_TARIFA);

			Collection<Imovel> imovelPesquisado = getControladorUtil().pesquisar(filtroImovel, Imovel.class.getName());

			// Verificar existêncioa da matrícula do imóvel
			Imovel imovel = null;
			if (imovelPesquisado != null && !imovelPesquisado.isEmpty()) {
				imovel = (Imovel) Util.retonarObjetoDeColecao(imovelPesquisado);
			}

			// Calcula o valor minimo da tarifa de água do imóvel
			BigDecimal valorTarifaMinimaAguaImovel = getControladorFaturamento().obterTarifaMinimaAguaImovel(imovel)
					.setScale(Parcelamento.CASAS_DECIMAIS, Parcelamento.TIPO_ARREDONDAMENTO);

			//RM9243 - Vivianne Sousa - 16/01/2014
			//8.2.	Calcula o valor mínimo permitido para a prestação. 
			BigDecimal valorMinimoPrestacao = obterValorMinimoPrestacao(parcelamentoPerfil, valorTarifaMinimaAguaImovel);
			negociacaoOpcoesParcelamentoHelper.setValorMinimoPrestacao(valorMinimoPrestacao);
			
			// [FS0029]Verificar se existe parcelamento em andamento
			// Vivianne Sousa 11/02/2009 - analista:Adriano Britto
			//Se existir parcelamento em andamento, 
			//na aba de negociação aparece em branco as Opção de Pagamento Parcelado,
			//não permitindo parcelar o debito, permite so liquidar o debito com pagamento a vista 
			Boolean existeParcelamentoEmAndamento = verificaSeExisteParcelamentoEmAndamento(helper.getIdImovel(), rd);
			Short indicadorExisteParcelamentoEmAndamento = ConstantesSistema.SIM;
			
			if(!existeParcelamentoEmAndamento){
				
				indicadorExisteParcelamentoEmAndamento = ConstantesSistema.NAO;
				
				
				if(rd.getIndicadorNegociacaoSoAVista().equals(ConstantesSistema.NAO)){
					
					// 5.4. Para cada ocorrência selecionada da tabela
					// PARCELAMENTO_QUANTIDADE_PRESTACAO
					Iterator parcelamentoQuantidadePrestacaoValores = colecaoParcelamentoQuantidadePrestacao.iterator();
					
					//Vivianne Sousa 22/09/2009
					//variaveis para controlar as prestações(ex:taxa de juros)
					//qd o usuario tiver permissão especial para Nao Testar Qtde de Prestacao
					int qtdeMaxParcQtdePrestacao = colecaoParcelamentoQuantidadePrestacao.size();
					int qtdeAtualParcQtdePrestacao = 0;
					
					BigDecimal taxaJuros = new BigDecimal("0.00");
					BigDecimal valorAParcelar = new BigDecimal("0.00");
					BigDecimal fatorPrestacao = new BigDecimal("0.00");
					BigDecimal valorUm = new BigDecimal("1.00");
					BigDecimal valorZero = new BigDecimal("0.00");
					BigDecimal valorCem = new BigDecimal("100.00");
					BigDecimal valorPrestacao = new BigDecimal("0.00");
					boolean minimoPermitido = true;
					
					
					BigDecimal percentualEntradaSugerida = new BigDecimal("0.00");
					
					//caso o valor de percentual de entrada sugerida esteja informado
					if (parcelamentoQuantidadeReparcelamento.getPercentualEntradaSugerida() != null && 
						!parcelamentoQuantidadeReparcelamento.getPercentualEntradaSugerida()
						.setScale(Parcelamento.CASAS_DECIMAIS).equals(valorZero)) {
		
						percentualEntradaSugerida = parcelamentoQuantidadeReparcelamento.getPercentualEntradaSugerida()
							.setScale(Parcelamento.CASAS_DECIMAIS, Parcelamento.TIPO_ARREDONDAMENTO);
		
						valorEntradaSugerida = valorDebitoDesconto.multiply(percentualEntradaSugerida.divide(valorCem));
		
					}
		
					negociacaoOpcoesParcelamentoHelper.setOpcoesParcelamento(new ArrayList());
		
					// Verificar permissão especial
					boolean temPermissaoValMinimoPrestacao = getControladorPermissaoEspecial()
							.verificarPermissaoEspecial(PermissaoEspecial.TESTAR_VAL_MINIMO_PRESTACAO, helper.getUsuario());
					boolean temPermissaoNaoTestarQtdePrestacao = getControladorPermissaoEspecial()
							.verificarPermissaoNaoTestarQtdePrestacaoParcelamento(helper.getUsuario());
					
					boolean primeiraVez = true;
					Integer qtdeMaxPrestacaoPercentualEntrada = null;
					
					while (parcelamentoQuantidadePrestacaoValores.hasNext()) {
						
						qtdeAtualParcQtdePrestacao++ ;
						
						ParcelamentoQuantidadePrestacao parcelamentoQuantidadePrestacao = 
						(ParcelamentoQuantidadePrestacao) parcelamentoQuantidadePrestacaoValores.next();
		
						//====================================================================================================
						
						
						//CALCULANDO O VALOR DA ENTRADA DO PARCELAMENTO
						valorEntrada = this.determinarValorEntradaParcelamento(helper, parcelamentoQuantidadePrestacao, 
						valorTarifaMinimaAguaImovel, valorDebitoDesconto, valorEntradaSugerida,
						descontoAntiguidadeDebito.getColecaoContasParaParcelamento(), 
						parcelamentoQuantidadePrestacao.getIndicadorVerificarMaiorValor());
						
						
						//====================================================================================================
						if(primeiraVez && parcelamentoPerfil.getIndicadorDescontoParcelaValorEntrada().equals(ConstantesSistema.SIM)){
							//RM9243 - Vivianne Sousa - 02/08/2013
							Object[] dadosPagParceladoPercentualEntrada = verificarDescontoPagParceladoPercentualEntrada(
									valorEntrada,helper.getValorDebitoAtualizado(), 
									parcelamentoQuantidadeReparcelamento.getId(),
									helper.getColecaoContaValores(), parcelamentoPerfil);
							
							BigDecimal descontoPagParceladoPercentualEntrada = (BigDecimal)dadosPagParceladoPercentualEntrada[0];
							if(dadosPagParceladoPercentualEntrada[1] != null){
								qtdeMaxPrestacaoPercentualEntrada =  (Integer)dadosPagParceladoPercentualEntrada[1];
							}
							negociacaoOpcoesParcelamentoHelper.setValorDescontoSobreDebitoTotal(descontoPagParceladoPercentualEntrada);
							
							valorDebitoDesconto = valorDebitoDesconto.setScale(Parcelamento.CASAS_DECIMAIS, Parcelamento.TIPO_ARREDONDAMENTO)
									.subtract(descontoPagParceladoPercentualEntrada.setScale(Parcelamento.CASAS_DECIMAIS, Parcelamento.TIPO_ARREDONDAMENTO));
							
							negociacaoOpcoesParcelamentoHelper.setValorDebitoDesconto(valorDebitoDesconto);
							
							primeiraVez = false;
							
							valorEntrada = this.determinarValorEntradaParcelamento(helper, parcelamentoQuantidadePrestacao, 
									valorTarifaMinimaAguaImovel, valorDebitoDesconto, valorEntradaSugerida,
									descontoAntiguidadeDebito.getColecaoContasParaParcelamento(),
									parcelamentoQuantidadePrestacao.getIndicadorVerificarMaiorValor());
						}
						//====================================================================================================
						
						
						//CALCULANDO A QUANTIDADE MÁXIMA DE PRESTAÇÕES
						Short quantidadeMaxPrestacao = this.determinarQuantidadeMaximaPrestacoes(
						descontoAntiguidadeDebito.getColecaoContasParaParcelamento(), parcelamentoQuantidadePrestacao);
						
						
						//====================================================================================================
						
						Short quantidadeMaxPrestacaoEspecial = parcelamentoQuantidadePrestacao.getQuantidadeMaxPrestacaoEspecial();
						
						while ((quantidadePrestacao <= quantidadeMaxPrestacao && minimoPermitido 
								|| (qtdeAtualParcQtdePrestacao == qtdeMaxParcQtdePrestacao 
									&& quantidadeMaxPrestacaoEspecial != null
								&& quantidadePrestacao <= quantidadeMaxPrestacaoEspecial && temPermissaoNaoTestarQtdePrestacao))
								&& (qtdeMaxPrestacaoPercentualEntrada == null ||
								 qtdeMaxPrestacaoPercentualEntrada.intValue() >= quantidadePrestacao.intValue() )) {
								
							OpcoesParcelamentoHelper parcelamento = new OpcoesParcelamentoHelper();
							
							parcelamento.setValorEntradaMinima(valorEntrada.setScale(Parcelamento.CASAS_DECIMAIS, Parcelamento.TIPO_ARREDONDAMENTO));
		
							// 5.4.1. Para cada quantidade de prestações até que a quantidade de prestações
							// seja maior que a quantidade máxima de parcelamentoQuantidadePrestacao
							if (quantidadePrestacao <= quantidadeMaxPrestacao ||
									(quantidadeMaxPrestacaoEspecial != null && 
									 quantidadePrestacao <= quantidadeMaxPrestacaoEspecial && 
									 temPermissaoNaoTestarQtdePrestacao)) {
		
								parcelamento.setQuantidadePrestacao(quantidadePrestacao);
		
								// 5.4.1.5. Taxa de Juros
								taxaJuros = Util.dividirArredondando(parcelamentoQuantidadePrestacao.getTaxaJuros(), valorCem);
		
								// Multiplica por 100 para exibição na tela
								// parcelamento.setTaxaJuros(taxaJuros.multiply(valorCem));
		
								parcelamento.setTaxaJuros(parcelamentoQuantidadePrestacao.getTaxaJuros()
											.setScale(Parcelamento.CASAS_DECIMAIS, Parcelamento.TIPO_ARREDONDAMENTO));
		
								// if (!sistemaParametro.getCodigoEmpresaFebraban().equals(SistemaParametro.CODIGO_EMPRESA_FEBRABAN_CAERN))
								// {
								// 5.4.1.6. Valor da Prestação fórmula 01
								// 5.4.1.6.1. Calcula o valor a parcelar
								valorAParcelar = valorDebitoDesconto.setScale(Parcelamento.CASAS_DECIMAIS, Parcelamento.TIPO_ARREDONDAMENTO)
										.subtract(valorEntrada.setScale(Parcelamento.CASAS_DECIMAIS, Parcelamento.TIPO_ARREDONDAMENTO));
		
								// 5.4.1.6.2.Caso taxa de juros seja maior que zero
								if (taxaJuros.compareTo(valorZero) == 1) {
									// 5.4.1.6.2.1 Calcula o fator da prestação
									SistemaParametro sp = this.getControladorUtil().pesquisarParametrosDoSistema();									
									
									if ( sp.getIndicadorTabelaPrice() != null && sp.getIndicadorTabelaPrice().equals( ConstantesSistema.SIM ) ){
										valorPrestacao = getControladorFaturamento().calcularPrestacao( 
												taxaJuros.multiply( new BigDecimal( 100 ) ), 
												quantidadePrestacao.intValue(),
												valorDebitoDesconto,
												valorEntrada );										
									} else {
										fatorPrestacao = valorUm.add(taxaJuros.setScale(4, BigDecimal.ROUND_HALF_UP));
										
										fatorPrestacao = fatorPrestacao.setScale(4, BigDecimal.ROUND_HALF_UP).pow(quantidadePrestacao);
			
										BigDecimal valorFuturo = (valorAParcelar.multiply(fatorPrestacao)).setScale(4, BigDecimal.ROUND_HALF_UP);
										
										//5.4.1.6.2.2. Calcula o valor da prestação
										valorPrestacao = Util.dividirArredondando(valorFuturo.setScale(
										Parcelamento.CASAS_DECIMAIS, Parcelamento.TIPO_ARREDONDAMENTO),
										new BigDecimal(quantidadePrestacao));
									}
								} 
								else {
									// 5.4.1.6.3. Calcula o valor da prestação
									valorPrestacao = Util.dividirArredondando(
											valorAParcelar.setScale(
													Parcelamento.CASAS_DECIMAIS,
													Parcelamento.TIPO_ARREDONDAMENTO),
											new BigDecimal(quantidadePrestacao));
								}
		
								// } else {
								// // 5.4.1.7. Valor da Prestação fórmula 02 (CAERN)
								// BigDecimal percentualMediaIndice = sistemaParametro
								// .getPercentualMediaIndice().setScale(
								// Parcelamento.CASAS_DECIMAIS,
								// Parcelamento.TIPO_ARREDONDAMENTO);
								// // 5.4.1.7.1.
								// BigDecimal mediaINPC = percentualMediaIndice
								// .divide(valorCem);
								//
								// // 5.4.1.7.2. Calcula o valor a parcelar
								// valorAParcelar = valorDebitoDesconto.setScale(
								// Parcelamento.CASAS_DECIMAIS,
								// Parcelamento.TIPO_ARREDONDAMENTO).subtract(
								// valorEntrada.setScale(
								// Parcelamento.CASAS_DECIMAIS,
								// Parcelamento.TIPO_ARREDONDAMENTO));
								//
								// // 5.4.1.7.3.
								// valorAParcelar = valorAParcelar
								// .multiply(new BigDecimal("1.02"));
								//
								// // 5.4.1.7.4 Calcula o valor da prestação
								// BigDecimal quantidadePrestacaoBigDecimal = new
								// BigDecimal(
								// quantidadePrestacao.toString());
								//
								// // taxa de juros + media INPC
								// valorPrestacao = taxaJuros.setScale(
								// Parcelamento.CASAS_DECIMAIS,
								// Parcelamento.TIPO_ARREDONDAMENTO).add(
								// mediaINPC.setScale(
								// Parcelamento.CASAS_DECIMAIS,
								// Parcelamento.TIPO_ARREDONDAMENTO));
								//
								// // (taxa de juros + media INPC)* quantidade de
								// // prestações
								// valorPrestacao = valorPrestacao.setScale(
								// Parcelamento.CASAS_DECIMAIS,
								// Parcelamento.TIPO_ARREDONDAMENTO).multiply(
								// quantidadePrestacaoBigDecimal);
								//
								// // 1 + (taxa de juros + media INPC)* quantidade de
								// // prestações
								// valorPrestacao = valorPrestacao.add(valorUm);
								//
								// // valor a parcelar [1 + (taxa de juros + media
								// // INPC)* quantidade de prestações]
								// valorPrestacao = valorAParcelar
								// .multiply(valorPrestacao);
								//
								// // valor a parcelar [1 +
								// // (taxa de juros + media INPC)* quantidade de
								// // prestações]/quantidade de prestações
								// valorPrestacao = Util.dividirArredondando(
								// valorPrestacao.setScale(
								// Parcelamento.CASAS_DECIMAIS,
								// Parcelamento.TIPO_ARREDONDAMENTO),
								// quantidadePrestacaoBigDecimal.setScale(
								// Parcelamento.CASAS_DECIMAIS,
								// Parcelamento.TIPO_ARREDONDAMENTO));
								// }
		
								parcelamento.setValorPrestacao(valorPrestacao.setScale(
										Parcelamento.CASAS_DECIMAIS,
										Parcelamento.TIPO_ARREDONDAMENTO));
		
								// RD Especial
								if (parcelamentoPerfil
										.getIndicadorAlertaParcelaMinima() != null
										&& parcelamentoPerfil
												.getIndicadorAlertaParcelaMinima()
												.equals(ConstantesSistema.SIM)) {
		
									if (valorPrestacao
											.compareTo(valorTarifaMinimaAguaImovel) == 1) {
										parcelamento
												.setIndicadorValorPrestacaoMaiorValorLimite(ConstantesSistema.SIM);
									} else {
										parcelamento
												.setIndicadorValorPrestacaoMaiorValorLimite(ConstantesSistema.NAO);
									}
		
								} else {
									parcelamento
											.setIndicadorValorPrestacaoMaiorValorLimite(ConstantesSistema.NAO);
								}
		
								// 5.4.2. Caso o valor da prestação seja menor que o
								// valor minímo permitido
								if ((valorPrestacao.compareTo(valorMinimoPrestacao) == -1 && !temPermissaoValMinimoPrestacao)
										|| valorPrestacao.compareTo(valorZero) <= 0) {
									minimoPermitido = false;
								} else {
									negociacaoOpcoesParcelamentoHelper
											.getOpcoesParcelamento().add(parcelamento);
								}
		
								// 5.4.3. Adicionar 1 a quantidade de prestações
								quantidadePrestacao++;
							}
						}
					}
				}
			}
			
			negociacaoOpcoesParcelamentoHelper.
			setIndicadorExisteParcelamentoEmAndamento(indicadorExisteParcelamentoEmAndamento);
			
		}
		

		negociacaoOpcoesParcelamentoHelper.setValorEntradaMinima(valorEntrada
				.setScale(Parcelamento.CASAS_DECIMAIS,
						Parcelamento.TIPO_ARREDONDAMENTO));

		// 6. Retorna o valor da entrada miníma e a lista de opções do
		// parcelamento
		return negociacaoOpcoesParcelamentoHelper;
	}

	/**
	 * [UC0214] Efetuar Parcelamento de Débitos
	 * [SB0002] Obter Opções Parcelamento
	 * 
	 * @author Vivianne Sousa
	 * @date 22/11/2011
	 */
	public BigDecimal obterDescontoSobreDebitoTotalParc(ObterOpcoesDeParcelamentoHelper helper, 
			ParcelamentoPerfil parcelamentoPerfil,NegociacaoOpcoesParcelamentoHelper negociacaoOpcoesParcelamentoHelper,
			RdLimitacaoGeografica rdLimitacaoGeografica) throws ControladorException{
		try{
		
			//RM7208 - Vivianne Sousa - 22/05/2012
			Date dataLimiteVencimentoContaParcelado = null;
			if(rdLimitacaoGeografica != null && rdLimitacaoGeografica.getDataLimiteVencimentoContaParcelar() != null){
				dataLimiteVencimentoContaParcelado = rdLimitacaoGeografica.getDataLimiteVencimentoContaParcelar();
			}else if(parcelamentoPerfil.getDataLimiteVencimentoContaParcelado() != null){
				dataLimiteVencimentoContaParcelado = parcelamentoPerfil.getDataLimiteVencimentoContaParcelado();
			}
			
			BigDecimal valorDescontoSobreDebitoTotal = new BigDecimal("0.00");
			if(parcelamentoPerfil.getPercentualDescontoDebitoPagamentoParcelado() != null &&
			  !parcelamentoPerfil.getPercentualDescontoDebitoPagamentoParcelado().equals("")){
				//4.7.5.1.	Caso tenha sido informado que haverá desconto sobre o débito total 
				//(PCPF_PCDESCDEBPARC da tabela COBRANCA.PARCELAMENTO_PERFIL diferente de nulo)
	
				BigDecimal percentualDescontoDebitoPagamentoParcelado = parcelamentoPerfil.getPercentualDescontoDebitoPagamentoParcelado();
				
				//4.7.5.1.2.	Caso tenha sido informado quantidade de meses de faturas anteriores
				//à última fatura do mês/ano do grupo de faturamento para desconto parcelado 
				if(parcelamentoPerfil.getQtdFaturasAnterioresPagParcelado() != null && 
				  !parcelamentoPerfil.getQtdFaturasAnterioresPagParcelado().equals("")){
					//RM9243 - Vivianne Sousa - 16/01/2014
				
					//[FS0032] - Obter referência do grupo de faturamento do imóvel
					Integer referenciaGrupoFaturamentoImovel = this.repositorioImovel.obterReferenciaGrupoFaturamentoImovel(helper.getIdImovel());
					Integer qtdFaturasAnterioresPagParcelado = parcelamentoPerfil.getQtdFaturasAnterioresPagParcelado();
					
					
					System.out.println("----------- REFERENCIA GRUPO :" + referenciaGrupoFaturamentoImovel);
					
					Integer referenciaLimiteContaParcelado = Util.subtrairMesDoAnoMes(referenciaGrupoFaturamentoImovel.intValue(), qtdFaturasAnterioresPagParcelado.intValue());
					
					//4.7.5.1.2.3.	Calcular o valor das contas com referência até o mês/ano calculado acima;
					BigDecimal valorTotalContas = new BigDecimal("0.00");
					Iterator iterContas = negociacaoOpcoesParcelamentoHelper.getColecaoContasParaParcelamento().iterator();
					while (iterContas.hasNext()) {
						ContaValoresHelper contaValoresHelper = (ContaValoresHelper) iterContas.next();
						
						if (contaValoresHelper.getIndicadorContasDebito() == null || 
							!contaValoresHelper.getIndicadorContasDebito().equals(new Integer("2"))) {
							
							Integer referenciaConta = contaValoresHelper.getConta().getReferencia();
							if(referenciaConta.compareTo(referenciaLimiteContaParcelado)< 1){
								valorTotalContas = valorTotalContas.add(contaValoresHelper.getValorTotalConta());
							}
						}
					}
					
					if(valorTotalContas.compareTo(new BigDecimal("0.00")) == 1){
						//1.1.1.1.1.1.	Calcula o valor de desconto = valor das contas calculado acima * (PCPF_ PCDESCDEBPARC /100);
						valorDescontoSobreDebitoTotal = Util.dividirArredondando(percentualDescontoDebitoPagamentoParcelado,new BigDecimal("100.00"));
						valorDescontoSobreDebitoTotal = valorDescontoSobreDebitoTotal.setScale(Parcelamento.CASAS_DECIMAIS,
							Parcelamento.TIPO_ARREDONDAMENTO).multiply(valorTotalContas);
					}
				
				}else if(dataLimiteVencimentoContaParcelado != null &&
				  !dataLimiteVencimentoContaParcelado.equals("")){
					//4.7.5.1.1. Caso tenha sido informado à data limite de vencimento para desconto parcelado 
	
					//4.7.5.1.1.1.	Calcular o valor das contas com vencimento até o dia informado (PCPF_DTLIMVENCCONTAPARC);
					BigDecimal valorTotalContas = new BigDecimal("0.00");
					Iterator iterContas = negociacaoOpcoesParcelamentoHelper.getColecaoContasParaParcelamento().iterator();
					while (iterContas.hasNext()) {
						ContaValoresHelper contaValoresHelper = (ContaValoresHelper) iterContas.next();
						
						if (contaValoresHelper.getIndicadorContasDebito() == null || 
							!contaValoresHelper.getIndicadorContasDebito().equals(new Integer("2"))) {
							
							Date dataVencimentoConta = contaValoresHelper.getConta().getDataVencimentoConta();
							if(dataVencimentoConta.compareTo(dataLimiteVencimentoContaParcelado)< 1){
								valorTotalContas = valorTotalContas.add(contaValoresHelper.getValorTotalConta());
							}
						}
					}
					
					if(valorTotalContas.compareTo(new BigDecimal("0.00")) == 1){
						//4.7.5.1.1.2.	Calcula o valor de desconto = valor das contas calculado acima * (PCPF_PCDESCDEBPARC/100);
						valorDescontoSobreDebitoTotal = Util.dividirArredondando(percentualDescontoDebitoPagamentoParcelado,new BigDecimal("100.00"));
						valorDescontoSobreDebitoTotal = valorDescontoSobreDebitoTotal.setScale(Parcelamento.CASAS_DECIMAIS,
							Parcelamento.TIPO_ARREDONDAMENTO).multiply(valorTotalContas);
					}
		
				}else{
					//4.7.5.1.2.1.	Calcula o valor de desconto sobre o débito total = valor do débito atualizado * (PCPF_PCDESCDEBPARC / 100);
					valorDescontoSobreDebitoTotal = Util.dividirArredondando(percentualDescontoDebitoPagamentoParcelado,new BigDecimal("100.00"));
					valorDescontoSobreDebitoTotal = valorDescontoSobreDebitoTotal.setScale(Parcelamento.CASAS_DECIMAIS,
						Parcelamento.TIPO_ARREDONDAMENTO).multiply(helper.getValorDebitoAtualizado());
					
				}
				
			}
			return valorDescontoSobreDebitoTotal;
		
		} catch (ErroRepositorioException ex) {
			sessionContext.setRollbackOnly();
			throw new ControladorException("erro.sistema", ex);
		}
	}
	/**
	 * [UC0214] Efetuar Parcelamento de Débitos
	 * [SB0002] Obter Opções Parcelamento
	 * 
	 * @author Vivianne Sousa
	 * @date 22/11/2011
	 */
	public BigDecimal obterDescontoSobreDebitoTotalAVista(ObterOpcoesDeParcelamentoHelper helper, 
			ParcelamentoPerfil parcelamentoPerfil,Collection colecaoContasParaParcelamento,
			Date dataLimiteVencimentoContaAVista) throws ControladorException{
		
		try{
		
			BigDecimal valorDescontoSobreDebitoTotal = new BigDecimal("0.00");
			if(parcelamentoPerfil.getPercentualDescontoDebitoPagamentoAVista() != null &&
			  !parcelamentoPerfil.getPercentualDescontoDebitoPagamentoAVista().equals("")){
	
				//4.7.7.2.1.1.	Caso tenha sido informado que haverá desconto sobre o débito total 
				//(PCPF_PCDESCDEBVISTA da tabela COBRANCA.PARCELAMENTO_PERFIL diferente de nulo)
				BigDecimal percentualDescontoDebitoPagamentoAVista = parcelamentoPerfil.getPercentualDescontoDebitoPagamentoAVista();
				
				//4.7.7.2.1.1.2.	Caso tenha sido informado quantidade de meses de faturas anteriores 
				//à última fatura do mês/ano do grupo de faturamento para desconto a vista 
				if(parcelamentoPerfil.getQtdFaturasAnterioresPagVista() != null && 
				  !parcelamentoPerfil.getQtdFaturasAnterioresPagVista().equals("")){
					//RM9243 - Vivianne Sousa - 16/01/2014
					
					//[FS0032] - Obter referência do grupo de faturamento do imóvel
					Integer referenciaGrupoFaturamentoImovel = this.repositorioImovel.obterReferenciaGrupoFaturamentoImovel(helper.getIdImovel());
					Integer qtdFaturasAnterioresPagVista = parcelamentoPerfil.getQtdFaturasAnterioresPagVista();
					
					Integer referenciaLimiteContaAVista = Util.subtrairMesDoAnoMes(referenciaGrupoFaturamentoImovel.intValue(), qtdFaturasAnterioresPagVista.intValue());
					
					//4.7.7.2.1.1.2.3.	Calcular o valor das contas com referência até o mês/ano calculado acima
					BigDecimal valorTotalContas = new BigDecimal("0.00");
					Iterator iterContas = colecaoContasParaParcelamento.iterator();
					while (iterContas.hasNext()) {
						ContaValoresHelper contaValoresHelper = (ContaValoresHelper) iterContas.next();
						
						if (contaValoresHelper.getIndicadorContasDebito() == null || 
							!contaValoresHelper.getIndicadorContasDebito().equals(new Integer("2"))) {
							
							Integer referenciaConta = contaValoresHelper.getConta().getReferencia();
							if(referenciaConta.compareTo(referenciaLimiteContaAVista)< 1){
								valorTotalContas = valorTotalContas.add(contaValoresHelper.getValorTotalConta());
							}
						}
					}
					
					if(valorTotalContas.compareTo(new BigDecimal("0.00")) == 1){
						//4.7.7.2.1.1.2.4.	Calcula o valor de desconto = valor das contas calculado acima * (PCPF_PCDESCDEBVISTA/100);
						valorDescontoSobreDebitoTotal = Util.dividirArredondando(percentualDescontoDebitoPagamentoAVista,new BigDecimal("100.00"));
						valorDescontoSobreDebitoTotal = valorDescontoSobreDebitoTotal.setScale(Parcelamento.CASAS_DECIMAIS,
							Parcelamento.TIPO_ARREDONDAMENTO).multiply(valorTotalContas);
					}
					
					
				}else if(dataLimiteVencimentoContaAVista != null && !dataLimiteVencimentoContaAVista.equals("")){
					//Caso tenha sido informado à data limite de vencimento para desconto a vista 
	
					//4.7.7.2.1.1.1.1.	Calcular o valor das contas com vencimento até o dia informado 
					BigDecimal valorTotalContas = new BigDecimal("0.00");
					Iterator iterContas = colecaoContasParaParcelamento.iterator();
					while (iterContas.hasNext()) {
						ContaValoresHelper contaValoresHelper = (ContaValoresHelper) iterContas.next();
						
						if (contaValoresHelper.getIndicadorContasDebito() == null || 
							!contaValoresHelper.getIndicadorContasDebito().equals(new Integer("2"))) {
							
							Date dataVencimentoConta = contaValoresHelper.getConta().getDataVencimentoConta();
							if(dataVencimentoConta.compareTo(dataLimiteVencimentoContaAVista)< 1){
								valorTotalContas = valorTotalContas.add(contaValoresHelper.getValorTotalConta());
							}
						}
					}
					
					if(valorTotalContas.compareTo(new BigDecimal("0.00")) == 1){
						//4.7.7.2.1.1.1.2.	Calcula o valor de desconto = valor das contas calculado acima * (PCPF_PCDESCDEBVISTA/100);
						valorDescontoSobreDebitoTotal = Util.dividirArredondando(percentualDescontoDebitoPagamentoAVista,new BigDecimal("100.00"));
						valorDescontoSobreDebitoTotal = valorDescontoSobreDebitoTotal.setScale(Parcelamento.CASAS_DECIMAIS,
							Parcelamento.TIPO_ARREDONDAMENTO).multiply(valorTotalContas);
					}
		
				}else{
					//4.7.7.2.1.1.2.1.	  Calcula o valor de desconto sobre o débito total = valor do débito atualizado * (PCPF_PCDESCDEBVISTA / 100);
					valorDescontoSobreDebitoTotal = Util.dividirArredondando(percentualDescontoDebitoPagamentoAVista,new BigDecimal("100.00"));
					valorDescontoSobreDebitoTotal = valorDescontoSobreDebitoTotal.setScale(Parcelamento.CASAS_DECIMAIS,
						Parcelamento.TIPO_ARREDONDAMENTO).multiply(helper.getValorDebitoAtualizado());
					
				}
			
				//RM9243 - Vivianne Sousa - 16/01/2014
				//4.7.7.2.1.1.3. Caso o indicador de desconto à vista para débitos a cobrar referente a parcelamentos seja igual a SIM 
				if(parcelamentoPerfil.getIndicadorDescontoVistaDebParcelado().equals(ConstantesSistema.SIM) &&
						helper.getValorDebitoACobrarParcelamentoImovel() != null && 
						helper.getValorDebitoACobrarParcelamentoImovel().compareTo(new BigDecimal("0.00")) == 1){
					
					//4.7.7.2.1.1.3.1.	Calcula o valor de desconto à vista para débitos a cobrar referente a parcelamentos = 
					//Valor total restante de débitos a cobrar referente a parcelamentos calculado no 2.5.5.2 do fluxo principal * (PCPF_PCDESCDEBVISTA/100);
					BigDecimal valorDebitoACobrarParcelamento =  helper.getValorDebitoACobrarParcelamentoImovel();
					BigDecimal valorCreditoARealizar =  helper.getValorCreditoARealizarParcelamentoImovel();
					if(valorCreditoARealizar != null){
						valorDebitoACobrarParcelamento = valorDebitoACobrarParcelamento.subtract(valorCreditoARealizar);
					}
					BigDecimal valorDescontoSobreDebitoACobrarParcelamento = Util.dividirArredondando(percentualDescontoDebitoPagamentoAVista,new BigDecimal("100.00"));
					valorDescontoSobreDebitoACobrarParcelamento = valorDescontoSobreDebitoACobrarParcelamento.setScale(Parcelamento.CASAS_DECIMAIS,
						Parcelamento.TIPO_ARREDONDAMENTO).multiply(valorDebitoACobrarParcelamento);
					
					//4.7.7.2.1.1.3.2.	Calcula o valor de desconto = valor de desconto + o valor de desconto à vista para débitos a cobrar referente a parcelamentos;
					valorDescontoSobreDebitoTotal = valorDescontoSobreDebitoTotal.add(valorDescontoSobreDebitoACobrarParcelamento);
				}
	
			}
			return valorDescontoSobreDebitoTotal;
		
		} catch (ErroRepositorioException ex) {
			sessionContext.setRollbackOnly();
			throw new ControladorException("erro.sistema", ex);
		}
	}
	
	/**
	 * Calcula o valor mínimo permitido para a prestação
	 * 
	 * [UC0214] Efetuar Parcelamento de Débitos
	 * [SB0016] Calcular valor mínimo permitido para a prestação
	 * 
	 * @author Vivianne Sousa
	 * @date 16/01/2014
	 * 
	 * @return BigDecimal
	 */
	private BigDecimal obterValorMinimoPrestacao(ParcelamentoPerfil parcelamentoPerfil,
			BigDecimal valorTarifaMinimaAguaImovel) {
		
		BigDecimal valorMinimoPrestacao = new BigDecimal("0.00");
		
		//1.	Caso a coluna PCPF_PCTARIFAMINIMAPRESTACAO da tabela COBRANCA.PERFIL_PARCELAMENTO diferente de NULO:
		if(parcelamentoPerfil.getPercentualTarifaMinimaPrestacao() != null  && 
		   parcelamentoPerfil.getPercentualTarifaMinimaPrestacao().compareTo(new BigDecimal("0.00")) == 1){
			//1.1.	Valor mínimo permitido para a prestação = valor da tarifa mínima de água para o imóvel * (PCPF_PCTARIFAMINIMAPRESTACAO / 100);
			valorMinimoPrestacao = valorTarifaMinimaAguaImovel.multiply(parcelamentoPerfil
				.getPercentualTarifaMinimaPrestacao().divide(new BigDecimal("100.00")));
			
		//2.	Caso a coluna PCPF_VLFIXOPRESTACAOMINIMA  da tabela COBRANCA.PERFIL_PARCELAMENTO diferente de NULO:
		}else if(parcelamentoPerfil.getValorFixoParcelaMinima() != null  && 
				 parcelamentoPerfil.getValorFixoParcelaMinima().compareTo(new BigDecimal("0.00")) == 1){

			//2.1.	Valor mínimo permitido para a prestação = PCPF_VLFIXOPRESTACAOMINIMA ;
			valorMinimoPrestacao = parcelamentoPerfil.getValorFixoParcelaMinima();
		}

		valorMinimoPrestacao.setScale(Parcelamento.CASAS_DECIMAIS, Parcelamento.TIPO_ARREDONDAMENTO);
		
		return valorMinimoPrestacao;
	}

	/**
	 * Permite efetuar o parcelamento dos débitos de um imóvel
	 * 
	 * [UC0214] Efetuar Parcelamento de Débitos
	 * 
	 * Obtém as Opções de Parcelamento do Débito do Imóvel
	 * 
	 * [SB0002] Obter Opções Parcelamento
	 * 
	 * @author Roberta Costa, Vivianne Sousa
	 * @date 21/03/2006, 30/10/2006
	 * 
	 * @param efetuarParcelamentoDebitosActionForm
	 * @param colecaoContaValores
	 * @return Collection
	 */
	/*public NegociacaoOpcoesParcelamentoHelper obterOpcoesDeParcelamento(
			Integer resolucaoDiretoria, Integer codigoImovel,
			BigDecimal valorEntradaInformado, Integer situacaoAguaId,
			Integer situacaoEsgotoId, Integer perfilImovelId,
			String inicioIntervaloParcelamento,
			Integer indicadorRestabelecimento, Collection colecaoContaValores,
			BigDecimal valorDebitoAtualizado, BigDecimal valorTotalMultas,
			BigDecimal valorTotalJurosMora,
			BigDecimal valorTotalAtualizacoesMonetarias,
			Integer numeroReparcelamentoConsecutivos,
			Collection<GuiaPagamento> colecaoGuiaPagamento, Usuario usuario,
			BigDecimal valorDebitoACobrarParcelamentoImovel,
			Integer anoMesInicialReferenciaDebito,
			Integer anoMesFinalReferenciaDebito,
			IndicadoresParcelamentoHelper indicadoresParcelamentoHelper)
			throws ControladorException {

		// SistemaParametro sistemaParametro =
		// getControladorUtil().pesquisarParametrosDoSistema();

		NegociacaoOpcoesParcelamentoHelper negociacaoOpcoesParcelamentoHelper = new NegociacaoOpcoesParcelamentoHelper();

		// [SB0004] - Verificar Situação do Imóvel e Perfil Parcelamento
		Object[] situacaoImovelPerfilParcelamento = this
				.verificarSituacaoImovelPerfilParcelamento(situacaoAguaId,
						situacaoEsgotoId, codigoImovel, perfilImovelId,
						resolucaoDiretoria, numeroReparcelamentoConsecutivos,
						valorDebitoACobrarParcelamentoImovel);

		ParcelamentoPerfil parcelamentoPerfil = (ParcelamentoPerfil) situacaoImovelPerfilParcelamento[0];
		ImovelSituacao imovelSituacao = (ImovelSituacao) situacaoImovelPerfilParcelamento[1];
		Collection colecaoParcelamentoQuantidadePrestacao = (Collection) situacaoImovelPerfilParcelamento[2];
		ParcelamentoQuantidadeReparcelamento parcelamentoQuantidadeReparcelamento = 
			(ParcelamentoQuantidadeReparcelamento)situacaoImovelPerfilParcelamento[3];
		
		negociacaoOpcoesParcelamentoHelper.setParcelamentoPerfil(parcelamentoPerfil);

		// 1. [SB0003]- Calcular valor do desconto por antiguidade do débito
		BigDecimal valorDescontoAntiguidade = new BigDecimal("0.00");
		BigDecimal valorTotalAcrescimosImpontualidade = new BigDecimal("0.00");
		int quantidadeMinimaMesesAntiguidade = 0;

		BigDecimal[] valorDescontoAntiguidadeDebito = calcularValorDescontoAntiguidadeDebito(
				resolucaoDiretoria, codigoImovel, valorEntradaInformado,
				situacaoAguaId, situacaoEsgotoId, colecaoContaValores,
				parcelamentoPerfil, indicadorRestabelecimento,
				valorTotalMultas, valorTotalJurosMora,
				valorTotalAtualizacoesMonetarias,
				negociacaoOpcoesParcelamentoHelper);

		if (valorDescontoAntiguidadeDebito != null
				&& !valorDescontoAntiguidadeDebito.equals("")) {
			valorDescontoAntiguidade = valorDescontoAntiguidadeDebito[0];
			valorTotalAcrescimosImpontualidade = valorDescontoAntiguidadeDebito[1];
			quantidadeMinimaMesesAntiguidade = valorDescontoAntiguidadeDebito[2].intValue();
		}

		// 2. O sistema calcula o valor do desconto nos acréscimos por
		// impontualidade

		// GUIA PAGAMENTO
		BigDecimal valorAcrescimosImpontualidadeGuiaPagamento = new BigDecimal("0.00");
		valorAcrescimosImpontualidadeGuiaPagamento.setScale(
				Parcelamento.CASAS_DECIMAIS, Parcelamento.TIPO_ARREDONDAMENTO);

		if (!parcelamentoPerfil.getPercentualDescontoAcrescimo().equals(new BigDecimal("0.00"))) {
			// Pega os acréscimos de Guias de Pagamento
			if (colecaoGuiaPagamento != null && !colecaoGuiaPagamento.isEmpty()) {
				Iterator guiaPagamentoValores = colecaoGuiaPagamento.iterator();

				BigDecimal valorAtualizacaoMonetaria = new BigDecimal("0.00");
				BigDecimal valorJurosMora = new BigDecimal("0.00");
				BigDecimal valorMulta = new BigDecimal("0.00");

				while (guiaPagamentoValores.hasNext()) {
					GuiaPagamentoValoresHelper guiaPagamentoValoresHelper = (GuiaPagamentoValoresHelper) guiaPagamentoValores.next();

					valorAtualizacaoMonetaria = new BigDecimal("0.00");
					if (guiaPagamentoValoresHelper.getValorAtualizacaoMonetaria() != null
							&& !guiaPagamentoValoresHelper.getValorAtualizacaoMonetaria().equals("")) {
						valorAtualizacaoMonetaria.setScale(Parcelamento.CASAS_DECIMAIS,	Parcelamento.TIPO_ARREDONDAMENTO);
						valorAtualizacaoMonetaria = valorAtualizacaoMonetaria.add(guiaPagamentoValoresHelper
							.getValorAtualizacaoMonetaria().setScale(Parcelamento.CASAS_DECIMAIS, Parcelamento.TIPO_ARREDONDAMENTO));
						valorAcrescimosImpontualidadeGuiaPagamento = valorAcrescimosImpontualidadeGuiaPagamento
							.add(valorAtualizacaoMonetaria.setScale(Parcelamento.CASAS_DECIMAIS,Parcelamento.TIPO_ARREDONDAMENTO));
					}

					valorJurosMora = new BigDecimal("0.00");
					if (guiaPagamentoValoresHelper.getValorJurosMora() != null
							&& !guiaPagamentoValoresHelper.getValorJurosMora().equals("")) {
						valorJurosMora.setScale(Parcelamento.CASAS_DECIMAIS, Parcelamento.TIPO_ARREDONDAMENTO);
						valorJurosMora = valorJurosMora.add(guiaPagamentoValoresHelper
								.getValorJurosMora().setScale(Parcelamento.CASAS_DECIMAIS,Parcelamento.TIPO_ARREDONDAMENTO));
						valorAcrescimosImpontualidadeGuiaPagamento = valorAcrescimosImpontualidadeGuiaPagamento
								.add(valorJurosMora.setScale(Parcelamento.CASAS_DECIMAIS, Parcelamento.TIPO_ARREDONDAMENTO));
					}

					valorMulta = new BigDecimal("0.00");
					if (guiaPagamentoValoresHelper.getValorMulta() != null
							&& !guiaPagamentoValoresHelper.getValorMulta().equals("")) {
						valorMulta.setScale(Parcelamento.CASAS_DECIMAIS, Parcelamento.TIPO_ARREDONDAMENTO);
						valorMulta = valorMulta.add(guiaPagamentoValoresHelper
								.getValorMulta().setScale(Parcelamento.CASAS_DECIMAIS, Parcelamento.TIPO_ARREDONDAMENTO));
						valorAcrescimosImpontualidadeGuiaPagamento = valorAcrescimosImpontualidadeGuiaPagamento
								.add(valorMulta.setScale(Parcelamento.CASAS_DECIMAIS,Parcelamento.TIPO_ARREDONDAMENTO));
					}
				}
			}
		}

		FiltroResolucaoDiretoria filtroResolucaoDiretoria = new FiltroResolucaoDiretoria();
		filtroResolucaoDiretoria.adicionarParametro(new ParametroSimples(
				FiltroResolucaoDiretoria.CODIGO,
				new Integer(resolucaoDiretoria)));

		Collection colecaoRD = getControladorUtil().pesquisar(
				filtroResolucaoDiretoria, ResolucaoDiretoria.class.getName());
		ResolucaoDiretoria rd = (ResolucaoDiretoria) Util
				.retonarObjetoDeColecao(colecaoRD);

		// ==================== RD especial =======================
		BigDecimal valorDescontoSancoesRDEspecial = BigDecimal.ZERO;
		BigDecimal valorDescontoAcrescimosImpontualidadeRDEspecial = BigDecimal.ZERO;
		BigDecimal valorDescontoTarifaSocialRDEspecial = BigDecimal.ZERO;

		Integer anoMesAtualMenosQuantMinimaMesesAntiguidade = 0;
		if (quantidadeMinimaMesesAntiguidade != 0) {
			Date data = Util.adcionarOuSubtrairMesesAData(new Date(),
					-quantidadeMinimaMesesAntiguidade, 0);
			anoMesAtualMenosQuantMinimaMesesAntiguidade = Util
					.getAnoMesComoInteger(data);
		}

		Integer anoMesLimiteMinimo = parcelamentoPerfil
				.getAnoMesReferenciaLimiteInferior();
		Integer anoMesLimiteMaximo = parcelamentoPerfil
				.getAnoMesReferenciaLimiteSuperior();

		if (anoMesLimiteMinimo == null
				|| anoMesInicialReferenciaDebito.compareTo(anoMesLimiteMinimo) > 0) {
			anoMesLimiteMinimo = anoMesInicialReferenciaDebito;
		}

		if (anoMesLimiteMinimo
				.compareTo(anoMesAtualMenosQuantMinimaMesesAntiguidade) < 0) {
			anoMesLimiteMinimo = anoMesAtualMenosQuantMinimaMesesAntiguidade;
		}

		if (anoMesInicialReferenciaDebito
				.compareTo(anoMesAtualMenosQuantMinimaMesesAntiguidade) == 1) {
			anoMesAtualMenosQuantMinimaMesesAntiguidade = anoMesInicialReferenciaDebito;
		}

		if (anoMesLimiteMaximo == null
				|| anoMesFinalReferenciaDebito.compareTo(anoMesLimiteMaximo) < 0) {
			anoMesLimiteMaximo = anoMesFinalReferenciaDebito;
		}

		if (rd.getIndicadorDescontoSancoes().equals(ConstantesSistema.SIM)) {
			BigDecimal valorDescontoSancoesRDEspecialDebitoACobrar = BigDecimal.ZERO;
			BigDecimal valorDescontoSancoesRDEspecialDebitoCobrado = BigDecimal.ZERO;
			BigDecimal valorDescontoAcrescimosImpontualidadeRDEspecialDebitoACobrar = BigDecimal.ZERO;
			BigDecimal valorDescontoAcrescimosImpontualidadeRDEspecialDebitoCobrado = BigDecimal.ZERO;

			if (parcelamentoPerfil.getPercentualDescontoSancao() != null
					&& !parcelamentoPerfil.getPercentualDescontoSancao()
							.equals(BigDecimal.ZERO)) {
				
				valorDescontoSancoesRDEspecialDebitoACobrar = pesquisarValorDebitoACobrarSancoes(
						new Integer(codigoImovel), anoMesInicialReferenciaDebito, anoMesLimiteMaximo);
				if (valorDescontoSancoesRDEspecialDebitoACobrar == null) {
					valorDescontoSancoesRDEspecialDebitoACobrar = BigDecimal.ZERO;
				}

				valorDescontoSancoesRDEspecialDebitoCobrado = pesquisarValorDebitoCobradoSancoes(
						new Integer(codigoImovel),
						anoMesAtualMenosQuantMinimaMesesAntiguidade,
						anoMesLimiteMaximo);
				if (valorDescontoSancoesRDEspecialDebitoCobrado == null) {
					valorDescontoSancoesRDEspecialDebitoCobrado = BigDecimal.ZERO;
				}

				valorDescontoSancoesRDEspecial = valorDescontoSancoesRDEspecialDebitoACobrar
						.add(valorDescontoSancoesRDEspecialDebitoCobrado);

//				if (parcelamentoPerfil.getPercentualDescontoSancao() != null
//						&& !parcelamentoPerfil.getPercentualDescontoSancao()
//								.equals(BigDecimal.ZERO)) {
					valorDescontoSancoesRDEspecial = valorDescontoSancoesRDEspecial
							.multiply(parcelamentoPerfil
									.getPercentualDescontoSancao().divide(
											new BigDecimal("100.00")));
//				}
				
				
			}
			

			valorDescontoAcrescimosImpontualidadeRDEspecialDebitoACobrar = pesquisarValorDebitoACobrar(
					new Integer(codigoImovel), anoMesInicialReferenciaDebito,
					anoMesLimiteMaximo);
			if (valorDescontoAcrescimosImpontualidadeRDEspecialDebitoACobrar == null) {
				valorDescontoAcrescimosImpontualidadeRDEspecialDebitoACobrar = BigDecimal.ZERO;
			}

			valorDescontoAcrescimosImpontualidadeRDEspecialDebitoCobrado = pesquisarValorDebitoCobradoContas(
					new Integer(codigoImovel),
					anoMesAtualMenosQuantMinimaMesesAntiguidade,
					anoMesLimiteMaximo);
			if (valorDescontoAcrescimosImpontualidadeRDEspecialDebitoCobrado == null) {
				valorDescontoAcrescimosImpontualidadeRDEspecialDebitoCobrado = BigDecimal.ZERO;
			}

			valorDescontoAcrescimosImpontualidadeRDEspecial = valorDescontoAcrescimosImpontualidadeRDEspecialDebitoCobrado
					.add(valorDescontoAcrescimosImpontualidadeRDEspecialDebitoACobrar);

		}

		if (perfilImovelId.equals(ImovelPerfil.TARIFA_SOCIAL)
				&& parcelamentoPerfil.getIndicadorRetroativoTarifaSocial() != null
				&& parcelamentoPerfil.getIndicadorRetroativoTarifaSocial()
						.equals(ConstantesSistema.SIM)) {

			valorDescontoTarifaSocialRDEspecial = obterDescontoTarifaSocial(
					codigoImovel, anoMesLimiteMinimo, anoMesLimiteMaximo,
					parcelamentoPerfil);

		}
		// =========================================================

		// Calcula o valor do desconto nos acrescimos por impontualidade
		BigDecimal valorDescontoAcrecismosImpotualidade = new BigDecimal("0.00");
		BigDecimal percentualDesconto = new BigDecimal("0.00");
		BigDecimal valorDescontoAcrecismos = new BigDecimal("0.00");

		percentualDesconto = Util.dividirArredondando(parcelamentoPerfil
				.getPercentualDescontoAcrescimo().setScale(
						Parcelamento.CASAS_DECIMAIS,
						Parcelamento.TIPO_ARREDONDAMENTO), new BigDecimal(100));
		negociacaoOpcoesParcelamentoHelper
				.setPercentualDescontoAcrescimosImpontualidade(parcelamentoPerfil
						.getPercentualDescontoAcrescimo().setScale(
								Parcelamento.CASAS_DECIMAIS,
								Parcelamento.TIPO_ARREDONDAMENTO));

		valorDescontoAcrecismos = valorTotalAcrescimosImpontualidade.setScale(
				Parcelamento.CASAS_DECIMAIS, Parcelamento.TIPO_ARREDONDAMENTO)
				.add(
						valorAcrescimosImpontualidadeGuiaPagamento.setScale(
								Parcelamento.CASAS_DECIMAIS,
								Parcelamento.TIPO_ARREDONDAMENTO));
		valorDescontoAcrecismosImpotualidade = valorDescontoAcrecismos
				.setScale(Parcelamento.CASAS_DECIMAIS,
						Parcelamento.TIPO_ARREDONDAMENTO).multiply(
						percentualDesconto.setScale(
								Parcelamento.CASAS_DECIMAIS,
								Parcelamento.TIPO_ARREDONDAMENTO));

		valorDescontoAcrecismosImpotualidade = valorDescontoAcrecismosImpotualidade
				.add(valorDescontoAcrescimosImpontualidadeRDEspecial);

		// 3. Caso o tipo da situação do imovel seja INATIVO (com situação da
		// LIGACAO_AGUA igual a Suprimido, Suprimido Parcial a Pedido ou
		// Suprimido Parcial
		BigDecimal valorDescontoInatividade = new BigDecimal("0.00");

		// Valor do Débito Total menos os descontos de Acrescimo e Antiguidade
		BigDecimal valorDebitoDescontoInatividade = new BigDecimal("0.00");

		valorDebitoDescontoInatividade = valorDebitoAtualizado.setScale(
				Parcelamento.CASAS_DECIMAIS, Parcelamento.TIPO_ARREDONDAMENTO)
				.subtract(
						valorDescontoAcrecismosImpotualidade.setScale(
								Parcelamento.CASAS_DECIMAIS,
								Parcelamento.TIPO_ARREDONDAMENTO));
		valorDebitoDescontoInatividade = valorDebitoDescontoInatividade
				.setScale(Parcelamento.CASAS_DECIMAIS,
						Parcelamento.TIPO_ARREDONDAMENTO).subtract(
						valorDescontoAntiguidade.setScale(
								Parcelamento.CASAS_DECIMAIS,
								Parcelamento.TIPO_ARREDONDAMENTO));
		valorDebitoDescontoInatividade = valorDebitoDescontoInatividade
				.setScale(Parcelamento.CASAS_DECIMAIS,
						Parcelamento.TIPO_ARREDONDAMENTO).subtract(
						valorDescontoSancoesRDEspecial.setScale(
								Parcelamento.CASAS_DECIMAIS,
								Parcelamento.TIPO_ARREDONDAMENTO));
		valorDebitoDescontoInatividade = valorDebitoDescontoInatividade
				.setScale(Parcelamento.CASAS_DECIMAIS,
						Parcelamento.TIPO_ARREDONDAMENTO).subtract(
						valorDescontoTarifaSocialRDEspecial.setScale(
								Parcelamento.CASAS_DECIMAIS,
								Parcelamento.TIPO_ARREDONDAMENTO));

		if (imovelSituacao.getImovelSituacaoTipo().getId().equals(
				ImovelSituacaoTipo.INATIVO)
				|| imovelSituacao.getImovelSituacaoTipo().getId().equals(
						ImovelSituacaoTipo.LIGADO_SO_ESGOTO)) {

			// 3.1 Calcula a qtd de meses de inatividade de ligação de água
			FiltroLigacaoAgua filtroLigacaoAgua = new FiltroLigacaoAgua();
			filtroLigacaoAgua.adicionarParametro(new ParametroSimples(
					FiltroLigacaoAgua.ID, codigoImovel));

			Collection<LigacaoAgua> colecaoLigacaoAgua = getControladorUtil()
					.pesquisar(filtroLigacaoAgua, LigacaoAgua.class.getName());

			Calendar dataAnoMesReferencia = new GregorianCalendar();
			dataAnoMesReferencia.set(Calendar.YEAR, new Integer(
					inicioIntervaloParcelamento.substring(3, 4)).intValue());
			dataAnoMesReferencia.set(Calendar.MONTH, new Integer(
					inicioIntervaloParcelamento.substring(0, 2)).intValue());
			dataAnoMesReferencia.set(Calendar.DATE, 01);

			Date dataCorrente = new Date();

			int quantidadeMeses = 0;

			if (colecaoLigacaoAgua == null && colecaoLigacaoAgua.isEmpty()) {
				// [FS0008] - Verificar a existência da data de supressão da
				// ligação de água
				quantidadeMeses = Util.dataDiff(dataAnoMesReferencia.getTime(),
						dataCorrente);
			} else {
				// Pega a primeira ocorrência da coleção
				LigacaoAgua ligacaoAgua = (LigacaoAgua) Util
						.retonarObjetoDeColecao(colecaoLigacaoAgua);

				Date dataSupressao = null;
				if (ligacaoAgua != null) {
					dataSupressao = ligacaoAgua.getDataSupressao();
				}

				if (dataSupressao != null && !dataSupressao.equals("")) {
					quantidadeMeses = Util
							.dataDiff(dataSupressao, dataCorrente);
				} else {
					// [FS0008] - Verificar a existência da data de supressão da
					// ligação de água
					quantidadeMeses = Util.dataDiff(dataAnoMesReferencia
							.getTime(), dataCorrente);
				}
			}

			// 3.2 Obtem os percentuais de desconto por tempo de inatividade
			ParcelamentoDescontoInatividade parcelamentoDescontoInatividadeMenor = null;
			try {
				parcelamentoDescontoInatividadeMenor = repositorioCobranca
						.obterPercentualDescontoInatividade(parcelamentoPerfil
								.getId(), quantidadeMeses);
			} catch (ErroRepositorioException e) {
				e.printStackTrace();
			}

			if (parcelamentoDescontoInatividadeMenor != null) {

				BigDecimal percentualDescontoInatividade = null;
				if (indicadorRestabelecimento.equals(2)) {
					// 3.3.1 Com restabelecimento
					percentualDescontoInatividade = parcelamentoDescontoInatividadeMenor
							.getPercentualDescontoSemRestabelecimento();
					valorDescontoInatividade = Util.dividirArredondando(
							percentualDescontoInatividade.setScale(
									Parcelamento.CASAS_DECIMAIS,
									Parcelamento.TIPO_ARREDONDAMENTO),
							new BigDecimal("100.00"));
					valorDescontoInatividade = valorDescontoInatividade
							.setScale(Parcelamento.CASAS_DECIMAIS,
									Parcelamento.TIPO_ARREDONDAMENTO).multiply(
									valorDebitoDescontoInatividade.setScale(
											Parcelamento.CASAS_DECIMAIS,
											Parcelamento.TIPO_ARREDONDAMENTO));
				} else if (indicadorRestabelecimento.equals(1)) {
					// 3.3.2 Sem restabelecimento
					percentualDescontoInatividade = parcelamentoDescontoInatividadeMenor
							.getPercentualDescontoComRestabelecimento()
							.setScale(Parcelamento.CASAS_DECIMAIS,
									Parcelamento.TIPO_ARREDONDAMENTO);
					valorDescontoInatividade = Util.dividirArredondando(
							percentualDescontoInatividade.setScale(
									Parcelamento.CASAS_DECIMAIS,
									Parcelamento.TIPO_ARREDONDAMENTO),
							new BigDecimal("100.00"));
					valorDescontoInatividade = valorDescontoInatividade
							.setScale(Parcelamento.CASAS_DECIMAIS,
									Parcelamento.TIPO_ARREDONDAMENTO).multiply(
									valorDebitoDescontoInatividade.setScale(
											Parcelamento.CASAS_DECIMAIS,
											Parcelamento.TIPO_ARREDONDAMENTO));
				} else {
					valorDescontoInatividade = new BigDecimal("0.00");
				}
				negociacaoOpcoesParcelamentoHelper
						.setPercentualDescontoInatividadeLigacaoAgua(percentualDescontoInatividade);
			} else {
				// 3.3 Caso nenhuma ocorrência tenha sido selecionada
				valorDescontoInatividade = new BigDecimal("0.00");
			}
		} else {
			// Caso Ativo atribui zero
			valorDescontoInatividade = new BigDecimal("0.00");
		}

		BigDecimal valorDebitoDesconto = new BigDecimal("0.00");

		valorDebitoDesconto = valorDebitoAtualizado.setScale(
				Parcelamento.CASAS_DECIMAIS, Parcelamento.TIPO_ARREDONDAMENTO)
				.subtract(
						valorDescontoAcrecismosImpotualidade.setScale(
								Parcelamento.CASAS_DECIMAIS,
								Parcelamento.TIPO_ARREDONDAMENTO));
		valorDebitoDesconto = valorDebitoDesconto.setScale(
				Parcelamento.CASAS_DECIMAIS, Parcelamento.TIPO_ARREDONDAMENTO)
				.subtract(
						valorDescontoInatividade.setScale(
								Parcelamento.CASAS_DECIMAIS,
								Parcelamento.TIPO_ARREDONDAMENTO));
		valorDebitoDesconto = valorDebitoDesconto
				.subtract(valorDescontoAntiguidade.setScale(
						Parcelamento.CASAS_DECIMAIS,
						Parcelamento.TIPO_ARREDONDAMENTO));
		valorDebitoDesconto = valorDebitoDesconto.setScale(
				Parcelamento.CASAS_DECIMAIS, Parcelamento.TIPO_ARREDONDAMENTO)
				.subtract(
						valorDescontoSancoesRDEspecial.setScale(
								Parcelamento.CASAS_DECIMAIS,
								Parcelamento.TIPO_ARREDONDAMENTO));
		valorDebitoDesconto = valorDebitoDesconto.setScale(
				Parcelamento.CASAS_DECIMAIS, Parcelamento.TIPO_ARREDONDAMENTO)
				.subtract(
						valorDescontoTarifaSocialRDEspecial.setScale(
								Parcelamento.CASAS_DECIMAIS,
								Parcelamento.TIPO_ARREDONDAMENTO));

		// ========================= RD especial ===============================
		BigDecimal valorDescontoPagamentoAVistaRDEspecial = BigDecimal.ZERO;
		if (parcelamentoPerfil.getPercentualDescontoAVista() != null
				&& !parcelamentoPerfil.getPercentualDescontoAVista().equals(
						BigDecimal.ZERO)
				&& parcelamentoPerfil.getParcelaQuantidadeMinimaFatura() != null) {
			// obter desconto de pagamento a vista
			BigDecimal valorDescontos = BigDecimal.ZERO;

			valorDescontos = valorDescontoAcrecismosImpotualidade.setScale(
					Parcelamento.CASAS_DECIMAIS,
					Parcelamento.TIPO_ARREDONDAMENTO).add(
					valorDescontoInatividade.setScale(
							Parcelamento.CASAS_DECIMAIS,
							Parcelamento.TIPO_ARREDONDAMENTO));
			valorDescontos = valorDescontos.add(valorDescontoAntiguidade
					.setScale(Parcelamento.CASAS_DECIMAIS,
							Parcelamento.TIPO_ARREDONDAMENTO));
			valorDescontos = valorDescontos.add(valorDescontoSancoesRDEspecial
					.setScale(Parcelamento.CASAS_DECIMAIS,
							Parcelamento.TIPO_ARREDONDAMENTO));
			valorDescontos = valorDescontos
					.add(valorDescontoTarifaSocialRDEspecial.setScale(
							Parcelamento.CASAS_DECIMAIS,
							Parcelamento.TIPO_ARREDONDAMENTO));

			valorDescontoPagamentoAVistaRDEspecial = obterValorDescontoPagamentoAVista(
					codigoImovel, anoMesInicialReferenciaDebito,
					anoMesLimiteMaximo, indicadoresParcelamentoHelper,
					parcelamentoPerfil, valorDescontos);
			negociacaoOpcoesParcelamentoHelper
					.setValorDescontoPagamentoAVistaRDEspecial(valorDescontoPagamentoAVistaRDEspecial);

		}
		// =====================================================================

		// Coloca os valores dos descontos no objeto helper
		negociacaoOpcoesParcelamentoHelper
				.setValorDescontoAcrecismosImpotualidade(valorDescontoAcrecismosImpotualidade);
		negociacaoOpcoesParcelamentoHelper
				.setValorDescontoInatividade(valorDescontoInatividade);
		negociacaoOpcoesParcelamentoHelper
				.setValorDescontoAntiguidade(valorDescontoAntiguidade);
		negociacaoOpcoesParcelamentoHelper
				.setValorDescontoSancoesRDEspecial(valorDescontoSancoesRDEspecial);
		negociacaoOpcoesParcelamentoHelper
				.setValorDescontoTarifaSocialRDEspecial(valorDescontoTarifaSocialRDEspecial);
		negociacaoOpcoesParcelamentoHelper
				.setValorDescontoPagamentoAVistaRDEspecial(valorDescontoPagamentoAVistaRDEspecial);

		// 5. Gera a Lista de opções de parcelamento
		BigDecimal valorEntrada = new BigDecimal("0.00");
		BigDecimal valorEntradaMinima = new BigDecimal("0.00");
		BigDecimal valorEntradaSugerida = null;
		if (colecaoParcelamentoQuantidadePrestacao != null
				&& !colecaoParcelamentoQuantidadePrestacao.isEmpty()) {
			// 5.1. Inicializa a quantidade de prestação com valor 1
			Short quantidadePrestacao = 1;

			// 5.2. Calcula o valor mínimo permitido para a prestação = valor da
			// tarifa miníma de água para o imóvel *
			// (PCPF_PCTARIFAMINIMAPRESTACAO/100)
			// Alteração do caso de uso 09/08/2006 - Roberta Costa

			// Pesquisa o imovel na base
			FiltroImovel filtroImovel = new FiltroImovel();
			filtroImovel.adicionarParametro(new ParametroSimples(
					FiltroImovel.ID, codigoImovel));
			filtroImovel
					.adicionarCaminhoParaCarregamentoEntidade(FiltroImovel.CONSUMO_TARIFA);

			Collection<Imovel> imovelPesquisado = getControladorUtil()
					.pesquisar(filtroImovel, Imovel.class.getName());

			// Verificar existêncioa da matrícula do imóvel
			Imovel imovel = null;
			if (imovelPesquisado != null && !imovelPesquisado.isEmpty()) {
				imovel = (Imovel) Util.retonarObjetoDeColecao(imovelPesquisado);
			}

			// Calcula o valor minimo da tarifa de água do imóvel
			BigDecimal valorTarifaMinimaAguaImovel = getControladorFaturamento()
					.obterTarifaMinimaAguaImovel(imovel).setScale(
							Parcelamento.CASAS_DECIMAIS,
							Parcelamento.TIPO_ARREDONDAMENTO);

			// Valor minímo da prestação na opção de parcelamento aba de
			// negociação
			BigDecimal valorMinimoPrestacao = valorTarifaMinimaAguaImovel
					.multiply(parcelamentoPerfil
							.getPercentualTarifaMinimaPrestacao().divide(
									new BigDecimal("100.00")));

			valorMinimoPrestacao.setScale(Parcelamento.CASAS_DECIMAIS,
					Parcelamento.TIPO_ARREDONDAMENTO);

			negociacaoOpcoesParcelamentoHelper
					.setValorMinimoPrestacao(valorMinimoPrestacao);

			// 5.3.2. valor da entrada reparcelamento = valor do débito com
			// desconto * (PQTP_PCVLRREPARCELADO/100)
			BigDecimal valorEntradaReparcelamento = BigDecimal.ZERO;
			
			// 5.4. Para cada ocorrência selecionada da tabela
			// PARCELAMENTO_QUANTIDADE_PRESTACAO
			Iterator parcelamentoQuantidadePrestacaoValores = colecaoParcelamentoQuantidadePrestacao
					.iterator();

			BigDecimal taxaJuros = new BigDecimal("0.00");
			BigDecimal valorAParcelar = new BigDecimal("0.00");
			BigDecimal fatorPrestacao = new BigDecimal("0.00");
			BigDecimal valorUm = new BigDecimal("1.00");
			BigDecimal valorZero = new BigDecimal("0.00");
			BigDecimal valorCem = new BigDecimal("100.00");
			BigDecimal valorPrestacao = new BigDecimal("0.00");
			boolean minimoPermitido = true;
			
			
			BigDecimal percentualEntradaSugerida = new BigDecimal("0.00");
			
			//caso o valor de percentual de entrada sugerida esteja informado
			if (parcelamentoQuantidadeReparcelamento.getPercentualEntradaSugerida() != null
					&& !parcelamentoQuantidadeReparcelamento.getPercentualEntradaSugerida().equals(valorZero)) {

				percentualEntradaSugerida = parcelamentoQuantidadeReparcelamento
						.getPercentualEntradaSugerida().setScale(
								Parcelamento.CASAS_DECIMAIS,
								Parcelamento.TIPO_ARREDONDAMENTO);

				valorEntradaSugerida = valorDebitoAtualizado
						.multiply(percentualEntradaSugerida
								.divide(valorCem));

			}

			negociacaoOpcoesParcelamentoHelper
					.setOpcoesParcelamento(new ArrayList());

			// Verificar permissão especial
			boolean temPermissaoValMinimoPrestacao = getControladorPermissaoEspecial()
					.verificarPermissaoEspecial(
							PermissaoEspecial.TESTAR_VAL_MINIMO_PRESTACAO,
							usuario);
			boolean temPermissaoNaoTestarQtdePrestacao = getControladorPermissaoEspecial()
					.verificarPermissaoNaoTestarQtdePrestacaoParcelamento(
							usuario);

			while (parcelamentoQuantidadePrestacaoValores.hasNext()) {
				ParcelamentoQuantidadePrestacao parcelamentoQuantidadePrestacao = (ParcelamentoQuantidadePrestacao) parcelamentoQuantidadePrestacaoValores
						.next();

				Short quantidadeMaxPrestacaoEspecial = parcelamentoQuantidadePrestacao
						.getQuantidadeMaxPrestacaoEspecial();

				while ((quantidadePrestacao <= parcelamentoQuantidadePrestacao
						.getQuantidadeMaximaPrestacao()
						&& minimoPermitido || (quantidadeMaxPrestacaoEspecial != null
						&& quantidadePrestacao <= quantidadeMaxPrestacaoEspecial && temPermissaoNaoTestarQtdePrestacao))) {
					OpcoesParcelamentoHelper parcelamento = new OpcoesParcelamentoHelper();

					// 5.4.1. Para cada quantidade de prestações até que a
					// quantidade de prestações
					// seja maior que a quantidade máxima de
					// parcelamentoQuantidadePrestacao
					BigDecimal percentualEntradaMinima = new BigDecimal("0.00");
					
					if (quantidadePrestacao <= parcelamentoQuantidadePrestacao
							.getQuantidadeMaximaPrestacao()
							|| (quantidadeMaxPrestacaoEspecial != null
									&& quantidadePrestacao <= quantidadeMaxPrestacaoEspecial && temPermissaoNaoTestarQtdePrestacao)) {

						parcelamento
								.setQuantidadePrestacao(quantidadePrestacao);

						BigDecimal percentualValorReparcelado = parcelamentoQuantidadePrestacao
								.getPercentualValorReparcelado();
						// 5.3. Caso haja informação de percentual para cálculo
						// de valor reparcelado
						// (PQTR_PCVLRREPARCELADO da tabela
						// PARECLAMENTO_QUANTIDADE_PRESTACAO com valor diferente
						// de nulo)
						if (percentualValorReparcelado != null
								&& !percentualValorReparcelado
										.equals(valorZero)) {

							// 5.3.1. o sistema deverá somar as parcelas
							// vencidas e a vencer de parcelamento ativo
							BigDecimal totalParcelasVencidas = valorZero;
							BigDecimal totalParcelasAVencer = valorZero;

							FiltroDebitoACobrar filtroDebitoACobrar = new FiltroDebitoACobrar();
							filtroDebitoACobrar
									.adicionarParametro(new ParametroSimples(
											FiltroDebitoACobrar.IMOVEL_ID,
											imovel.getId()));
							filtroDebitoACobrar
									.adicionarParametro(new ParametroSimples(
											FiltroDebitoACobrar.FINANCIAMENTO_TIPO,
											FinanciamentoTipo.PARCELAMENTO_AGUA,
											FiltroParametro.CONECTOR_OR, 3));
							filtroDebitoACobrar
									.adicionarParametro(new ParametroSimples(
											FiltroDebitoACobrar.FINANCIAMENTO_TIPO,
											FinanciamentoTipo.PARCELAMENTO_ESGOTO,
											FiltroParametro.CONECTOR_OR));
							filtroDebitoACobrar
									.adicionarParametro(new ParametroSimples(
											FiltroDebitoACobrar.FINANCIAMENTO_TIPO,
											FinanciamentoTipo.PARCELAMENTO_SERVICO));

							Collection colecaoDebitoACobrarParcelamento = getControladorUtil()
									.pesquisar(filtroDebitoACobrar,
											DebitoACobrar.class.getName());

							Iterator itDebitoACobrarParcelamento = colecaoDebitoACobrarParcelamento
									.iterator();

							while (itDebitoACobrarParcelamento.hasNext()) {
								DebitoACobrar debitoACobrar = (DebitoACobrar) itDebitoACobrarParcelamento
										.next();

								BigDecimal valorDebito = debitoACobrar.getValorTotalComBonus();

								totalParcelasAVencer.setScale(
										Parcelamento.CASAS_DECIMAIS,
										Parcelamento.TIPO_ARREDONDAMENTO);
								totalParcelasAVencer = totalParcelasAVencer
										.add(valorDebito);
							}

							Collection colecaoDebitoCobradoParcelamento = null;
							if (colecaoContaValores != null
									&& !colecaoContaValores.isEmpty()) {
								Iterator contaValores = colecaoContaValores
										.iterator();

								while (contaValores.hasNext()) {
									ContaValoresHelper contaValoresHelper = (ContaValoresHelper) contaValores
											.next();

									FiltroDebitoCobrado filtroDebitoCobrado = new FiltroDebitoCobrado();
									filtroDebitoCobrado
											.adicionarParametro(new ParametroSimples(
													FiltroDebitoCobrado.CONTA_ID,
													contaValoresHelper
															.getConta().getId()));
									filtroDebitoCobrado
											.adicionarParametro(new ParametroSimples(
													FiltroDebitoCobrado.FINANCIAMENTO_TIPO,
													FinanciamentoTipo.PARCELAMENTO_AGUA,
													FiltroParametro.CONECTOR_OR,
													3));
									filtroDebitoCobrado
											.adicionarParametro(new ParametroSimples(
													FiltroDebitoCobrado.FINANCIAMENTO_TIPO,
													FinanciamentoTipo.PARCELAMENTO_ESGOTO,
													FiltroParametro.CONECTOR_OR));
									filtroDebitoCobrado
											.adicionarParametro(new ParametroSimples(
													FiltroDebitoCobrado.FINANCIAMENTO_TIPO,
													FinanciamentoTipo.PARCELAMENTO_SERVICO));

									colecaoDebitoCobradoParcelamento = getControladorUtil()
											.pesquisar(
													filtroDebitoCobrado,
													DebitoCobrado.class
															.getName());
								}

							}

							Iterator itDebitoCobradoParcelamento = colecaoDebitoCobradoParcelamento
									.iterator();

							while (itDebitoCobradoParcelamento.hasNext()) {
								DebitoCobrado debitoCobrado = (DebitoCobrado) itDebitoCobradoParcelamento
										.next();
								BigDecimal vlPrestacao = debitoCobrado
										.getValorPrestacao();
								totalParcelasVencidas.setScale(
										Parcelamento.CASAS_DECIMAIS,
										Parcelamento.TIPO_ARREDONDAMENTO);
								totalParcelasVencidas = totalParcelasVencidas
										.add(vlPrestacao);
							}

							BigDecimal valorTotalParcelas = totalParcelasAVencer
									.add(totalParcelasVencidas);

							// 5.3.2. valor da entrada reparcelamento =
							// (valor calculo debitoACobrar + debitoCobrado) *
							// (PQTP_PCVLRREPARCELADO/100)
							valorEntradaReparcelamento = valorTotalParcelas
							.multiply(percentualValorReparcelado
											.divide(valorCem));

						}

						// 5.4.1.1. caso o valor de percentual mínimo esteja
						// informado
						if (parcelamentoQuantidadePrestacao
								.getPercentualMinimoEntrada() != null
								&& !parcelamentoQuantidadePrestacao
										.getPercentualMinimoEntrada().equals(
												valorZero)) {

							percentualEntradaMinima = parcelamentoQuantidadePrestacao
									.getPercentualMinimoEntrada().setScale(
											Parcelamento.CASAS_DECIMAIS,
											Parcelamento.TIPO_ARREDONDAMENTO);

							valorEntradaMinima = valorDebitoDesconto
									.multiply(percentualEntradaMinima
											.divide(valorCem));
						}

						// 5.4.1.2. caso o valor de percentual tarifa mínima
						// esteja informado
						if (parcelamentoQuantidadePrestacao
								.getPercentualTarifaMinimaImovel() != null
								&& !parcelamentoQuantidadePrestacao
										.getPercentualTarifaMinimaImovel()
										.equals(valorZero)) {

							percentualEntradaMinima = parcelamentoQuantidadePrestacao
									.getPercentualTarifaMinimaImovel()
									.setScale(Parcelamento.CASAS_DECIMAIS,
											Parcelamento.TIPO_ARREDONDAMENTO);

							// valorEntradaMinima =
							// valorDebitoDesconto.multiply(percentualEntradaMinima.divide(valorCem));
							valorEntradaMinima = valorTarifaMinimaAguaImovel
									.multiply(percentualEntradaMinima
											.divide(valorCem));

						}

//						// caso o valor de percentual de entrada sugerida esteja
//						// informado
//						if (parcelamentoQuantidadePrestacao
//								.getPercentualEntradaSugerida() != null
//								&& !parcelamentoQuantidadePrestacao
//										.getPercentualEntradaSugerida().equals(
//												valorZero)) {
//
//							percentualEntradaSugerida = parcelamentoQuantidadePrestacao
//									.getPercentualEntradaSugerida().setScale(
//											Parcelamento.CASAS_DECIMAIS,
//											Parcelamento.TIPO_ARREDONDAMENTO);
//
//							valorEntradaSugerida = valorDebitoAtualizado
//									.multiply(percentualEntradaSugerida
//											.divide(valorCem));
//
//						}

						// 5.4.1.3.
						ParcelamentoFaixaValor parcelamentoFaixaValorMenor = null;
						try {
							parcelamentoFaixaValorMenor = repositorioCobranca
									.obterParcelamentoFaixaValor(
											parcelamentoQuantidadePrestacao
													.getId(),
											valorDebitoDesconto);
						} catch (ErroRepositorioException e) {
							e.printStackTrace();
						}

						if (parcelamentoFaixaValorMenor != null) {
							percentualEntradaMinima = parcelamentoFaixaValorMenor
									.getPercentualFaixa().setScale(
											Parcelamento.CASAS_DECIMAIS,
											Parcelamento.TIPO_ARREDONDAMENTO);

							valorEntradaMinima = valorDebitoDesconto
									.multiply(percentualEntradaMinima
											.divide(valorCem));
						}

						// 5.4.1.4. Valor da Entrada
						valorEntrada = obterValorEntradaParcelamento(
								valorEntradaInformado, valorEntradaMinima,
								valorEntradaReparcelamento, usuario,
								valorEntradaSugerida);

						parcelamento.setValorEntradaMinima(valorEntrada
								.setScale(Parcelamento.CASAS_DECIMAIS,
										Parcelamento.TIPO_ARREDONDAMENTO));

						// 5.4.1.5. Taxa de Juros
						taxaJuros = Util.dividirArredondando(
								parcelamentoQuantidadePrestacao.getTaxaJuros(),
								valorCem);

						// Multiplica por 100 para exibição na tela
						// parcelamento.setTaxaJuros(taxaJuros.multiply(valorCem));

						parcelamento
								.setTaxaJuros(parcelamentoQuantidadePrestacao
										.getTaxaJuros()
										.setScale(
												Parcelamento.CASAS_DECIMAIS,
												Parcelamento.TIPO_ARREDONDAMENTO));

						// if (!sistemaParametro
						// .getCodigoEmpresaFebraban().equals(SistemaParametro.CODIGO_EMPRESA_FEBRABAN_CAERN))
						// {
						// 5.4.1.6. Valor da Prestação fórmula 01
						// 5.4.1.6.1. Calcula o valor a parcelar
						valorAParcelar = valorDebitoDesconto.setScale(
								Parcelamento.CASAS_DECIMAIS,
								Parcelamento.TIPO_ARREDONDAMENTO).subtract(
								valorEntrada.setScale(
										Parcelamento.CASAS_DECIMAIS,
										Parcelamento.TIPO_ARREDONDAMENTO));

						// 5.4.1.6.2.Caso taxa de juros seja maior que zero
						if (taxaJuros.compareTo(valorZero) == 1) {
							// 5.4.1.6.2.1 Calcula o fator da prestação

							fatorPrestacao = valorUm.add(taxaJuros.setScale(4,
									BigDecimal.ROUND_HALF_UP));

							fatorPrestacao = fatorPrestacao.setScale(4,
									BigDecimal.ROUND_HALF_UP).pow(
									quantidadePrestacao);

							fatorPrestacao = valorUm.divide(fatorPrestacao, 4,
									BigDecimal.ROUND_HALF_UP);
							// Util.dividirArredondando(valorUm,
							// fatorPrestacao.setScale(4,
							// BigDecimal.ROUND_HALF_UP));

							fatorPrestacao = valorUm.subtract(fatorPrestacao
									.setScale(4, BigDecimal.ROUND_HALF_UP));

							fatorPrestacao = fatorPrestacao.setScale(4,
									BigDecimal.ROUND_HALF_UP).divide(
									taxaJuros.setScale(4,
											BigDecimal.ROUND_HALF_UP), 4,
									BigDecimal.ROUND_HALF_UP);
							// Util.dividirArredondando(fatorPrestacao.setScale(4,
							// BigDecimal.ROUND_HALF_UP),taxaJuros.setScale(4,BigDecimal.ROUND_HALF_UP));

							// 5.4.1.6.2.2. Calcula o valor da prestação
							valorPrestacao = Util.dividirArredondando(
									valorAParcelar.setScale(
											Parcelamento.CASAS_DECIMAIS,
											Parcelamento.TIPO_ARREDONDAMENTO),
									fatorPrestacao.setScale(7,
											Parcelamento.TIPO_ARREDONDAMENTO));
						} else {
							// 5.4.1.6.3. Calcula o valor da prestação
							valorPrestacao = Util.dividirArredondando(
									valorAParcelar.setScale(
											Parcelamento.CASAS_DECIMAIS,
											Parcelamento.TIPO_ARREDONDAMENTO),
									new BigDecimal(quantidadePrestacao));
						}

						// } else {
						// // 5.4.1.7. Valor da Prestação fórmula 02 (CAERN)
						// BigDecimal percentualMediaIndice = sistemaParametro
						// .getPercentualMediaIndice().setScale(
						// Parcelamento.CASAS_DECIMAIS,
						// Parcelamento.TIPO_ARREDONDAMENTO);
						// // 5.4.1.7.1.
						// BigDecimal mediaINPC = percentualMediaIndice
						// .divide(valorCem);
						//
						// // 5.4.1.7.2. Calcula o valor a parcelar
						// valorAParcelar = valorDebitoDesconto.setScale(
						// Parcelamento.CASAS_DECIMAIS,
						// Parcelamento.TIPO_ARREDONDAMENTO).subtract(
						// valorEntrada.setScale(
						// Parcelamento.CASAS_DECIMAIS,
						// Parcelamento.TIPO_ARREDONDAMENTO));
						//
						// // 5.4.1.7.3.
						// valorAParcelar = valorAParcelar
						// .multiply(new BigDecimal("1.02"));
						//
						// // 5.4.1.7.4 Calcula o valor da prestação
						// BigDecimal quantidadePrestacaoBigDecimal = new
						// BigDecimal(
						// quantidadePrestacao.toString());
						//
						// // taxa de juros + media INPC
						// valorPrestacao = taxaJuros.setScale(
						// Parcelamento.CASAS_DECIMAIS,
						// Parcelamento.TIPO_ARREDONDAMENTO).add(
						// mediaINPC.setScale(
						// Parcelamento.CASAS_DECIMAIS,
						// Parcelamento.TIPO_ARREDONDAMENTO));
						//
						// // (taxa de juros + media INPC)* quantidade de
						// // prestações
						// valorPrestacao = valorPrestacao.setScale(
						// Parcelamento.CASAS_DECIMAIS,
						// Parcelamento.TIPO_ARREDONDAMENTO).multiply(
						// quantidadePrestacaoBigDecimal);
						//
						// // 1 + (taxa de juros + media INPC)* quantidade de
						// // prestações
						// valorPrestacao = valorPrestacao.add(valorUm);
						//
						// // valor a parcelar [1 + (taxa de juros + media
						// // INPC)* quantidade de prestações]
						// valorPrestacao = valorAParcelar
						// .multiply(valorPrestacao);
						//
						// // valor a parcelar [1 +
						// // (taxa de juros + media INPC)* quantidade de
						// // prestações]/quantidade de prestações
						// valorPrestacao = Util.dividirArredondando(
						// valorPrestacao.setScale(
						// Parcelamento.CASAS_DECIMAIS,
						// Parcelamento.TIPO_ARREDONDAMENTO),
						// quantidadePrestacaoBigDecimal.setScale(
						// Parcelamento.CASAS_DECIMAIS,
						// Parcelamento.TIPO_ARREDONDAMENTO));
						// }

						parcelamento.setValorPrestacao(valorPrestacao.setScale(
								Parcelamento.CASAS_DECIMAIS,
								Parcelamento.TIPO_ARREDONDAMENTO));

						// RD Especial
						if (parcelamentoPerfil
								.getIndicadorAlertaParcelaMinima() != null
								&& parcelamentoPerfil
										.getIndicadorAlertaParcelaMinima()
										.equals(ConstantesSistema.SIM)) {

							if (valorPrestacao
									.compareTo(valorTarifaMinimaAguaImovel) == 1) {
								parcelamento
										.setIndicadorValorPrestacaoMaiorValorLimite(ConstantesSistema.SIM);
							} else {
								parcelamento
										.setIndicadorValorPrestacaoMaiorValorLimite(ConstantesSistema.NAO);
							}

						} else {
							parcelamento
									.setIndicadorValorPrestacaoMaiorValorLimite(ConstantesSistema.NAO);
						}

						// 5.4.2. Caso o valor da prestação seja menor que o
						// valor minímo permitido
						if ((valorPrestacao.compareTo(valorMinimoPrestacao) == -1 && !temPermissaoValMinimoPrestacao)
								|| valorPrestacao.compareTo(valorZero) <= 0) {
							minimoPermitido = false;
						} else {
							negociacaoOpcoesParcelamentoHelper
									.getOpcoesParcelamento().add(parcelamento);
						}

						// 5.4.3. Adicionar 1 a quantidade de prestações
						quantidadePrestacao++;
					}
				}
			}
		}

		negociacaoOpcoesParcelamentoHelper.setValorEntradaMinima(valorEntrada
				.setScale(Parcelamento.CASAS_DECIMAIS,
						Parcelamento.TIPO_ARREDONDAMENTO));

		// 6. Retorna o valor da entrada miníma e a lista de opções do
		// parcelamento
		return negociacaoOpcoesParcelamentoHelper;
	}*/


	
	
	/**
	 * Permite efetuar o parcelamento dos débitos de um imóvel
	 * 
	 * [UC0214] Efetuar Parcelamento de Débitos
	 * 
	 * Calcula o valor do desconto por antiguidade do débito
	 * 
	 * [SB0003] - Calcular valor do desconto por antiguidade do débito
	 * 
	 * @author Roberta Costa
	 * @date 21/03/2006
	 * 
	 * @param resolucaoDiretoria
	 * @param codigoImovel
	 * @param valorEntrada
	 * @param situacaoAgua
	 * @param situacaoEsgoto
	 * @return
	 */
	public CalcularValorDescontoAntiguidadeDebitoHelper calcularValorDescontoAntiguidadeDebito(
			Integer resolucaoDiretoria,
			Integer codigoImovel,
			BigDecimal valorEntrada,
			Integer situacaoAgua,
			Integer situacaoEsgoto,
			Collection colecaoContaValores,
			ParcelamentoPerfil parcelamentoPerfil,
			Integer indicadorRestabelecimento,
			BigDecimal valorTotalMultas,
			BigDecimal valorTotalJurosMora,
			BigDecimal valorTotalAtualizacoesMonetarias,
			NegociacaoOpcoesParcelamentoHelper negociacaoOpcoesParcelamentoHelper)
			throws ControladorException {
		
		CalcularValorDescontoAntiguidadeDebitoHelper retorno = null;
		
		// Campos Formulário
		BigDecimal valorDescontoAntiguidade = new BigDecimal("0.00");
		BigDecimal valorTotalAcrescimosImpontualidade = new BigDecimal("0.00");
		int quantidadeMinimaMesesAntiguidade = 0;
		int maiorQuantidadeMinimaMesesAntiguidade = 0;
		
		Collection colecaoContasEmAntiguidade = new ArrayList();
		Collection colecaoContasParaParcelamento = new ArrayList();

		// 2. Para cada conta da lista de conta de Débitos
		BigDecimal valorDescontoAntiguidadeConta = new BigDecimal("0.00");
		BigDecimal valorDescontoAntiguidadeMulta = new BigDecimal("0.00");
		BigDecimal valorDescontoAntiguidadeJurosMora = new BigDecimal("0.00");
		BigDecimal valorDescontoAntiguidadeAtualizacoesMonetarias = new BigDecimal("0.00");
		
		BigDecimal valorDescontoAntiguidadeMultaTotal = new BigDecimal("0.00");
		BigDecimal valorDescontoAntiguidadeJurosMoraTotal = new BigDecimal("0.00");
		BigDecimal valorDescontoAntiguidadeAtualizacoesMonetariasTotal = new BigDecimal("0.00");

		if (colecaoContaValores != null && !colecaoContaValores.equals("")) {
			Iterator contaValores = colecaoContaValores.iterator();

			while (contaValores.hasNext()) {
				
				ContaValoresHelper contaValoresHelper = (ContaValoresHelper) 
				contaValores.next();
				
				if (contaValoresHelper.getIndicadorContasDebito() == null || 
					!contaValoresHelper.getIndicadorContasDebito().equals(new Integer("2"))) {
					
					//Colocado por Raphael Rossiter em 29/08/2008
					Collection<ParcelamentoDescontoAntiguidade> colecaoParcelamentoDescontoAntiguidade = 
					this.obterParcelamentoDescontoAntiguidadeParaConta(parcelamentoPerfil,
					contaValoresHelper.getConta());

					ParcelamentoDescontoAntiguidade parcelamentoDescontoAntiguidadeMaior = new ParcelamentoDescontoAntiguidade();
					BigDecimal percentualDescontoAntiguidade = new BigDecimal("0.00");

					// 2.3 Caso nenhuma ocorrência tenha sido selecionada passar
					// para a próxima conta
					if (colecaoParcelamentoDescontoAntiguidade != null && 
						!colecaoParcelamentoDescontoAntiguidade.isEmpty()) {
						
						//CONTAS EM ANTIGUIDADE
						colecaoContasEmAntiguidade.add(contaValoresHelper);
						
						Iterator parcelamentoDescontoAntiguidadeValores = colecaoParcelamentoDescontoAntiguidade
						.iterator();

						quantidadeMinimaMesesAntiguidade = 0;
						maiorQuantidadeMinimaMesesAntiguidade = 0;

						// 2.4 Determina o percentual de desconto por antiguidade do débito
						while (parcelamentoDescontoAntiguidadeValores.hasNext()) {
							ParcelamentoDescontoAntiguidade parcelamentoDescontoAntiguidade = (ParcelamentoDescontoAntiguidade) parcelamentoDescontoAntiguidadeValores
									.next();
							quantidadeMinimaMesesAntiguidade = parcelamentoDescontoAntiguidade
									.getQuantidadeMinimaMesesDebito();
							if (quantidadeMinimaMesesAntiguidade > maiorQuantidadeMinimaMesesAntiguidade) {
								maiorQuantidadeMinimaMesesAntiguidade = quantidadeMinimaMesesAntiguidade;
								parcelamentoDescontoAntiguidadeMaior = parcelamentoDescontoAntiguidade;
							}
						}
						
						//2.4.1 Caso a situação da ligação de água do imóvel
						// corresponda suprimido, suprimido parcial ou
						// suprimido parcial a pedido
						if (situacaoAgua.equals(LigacaoAguaSituacao.SUPRIMIDO)
								|| situacaoAgua
										.equals(LigacaoAguaSituacao.SUPR_PARC)
								|| situacaoAgua
										.equals(LigacaoAguaSituacao.SUPR_PARC_PEDIDO)) {
							// 2.4.1.1 Caso tenha sido informado que haverá
							// restabelecimento
							if (indicadorRestabelecimento.equals(new Integer(
									"1"))) {
								percentualDescontoAntiguidade = parcelamentoDescontoAntiguidadeMaior
										.getPercentualDescontoComRestabelecimento();
							} else if (indicadorRestabelecimento
									.equals(new Integer("2"))) {
								percentualDescontoAntiguidade = parcelamentoDescontoAntiguidadeMaior
										.getPercentualDescontoSemRestabelecimento();
							}
						} else {
							// 2.4.2 Casoa a situação do imóvel seja diferente
							// de 2
							percentualDescontoAntiguidade = parcelamentoDescontoAntiguidadeMaior
									.getPercentualDescontoAtivo();
						}
						
						negociacaoOpcoesParcelamentoHelper
								.setPercentualDescontoAntiguidadeDebito(percentualDescontoAntiguidade
										.setScale(
												Parcelamento.CASAS_DECIMAIS,
												Parcelamento.TIPO_ARREDONDAMENTO));

						// 2.5 Calcula os valores
						BigDecimal percentual = Util.dividirArredondando(
								percentualDescontoAntiguidade, new BigDecimal(
										"100"));
						
						//2.5.1 Valor desconto por antiguidade da conta
						valorDescontoAntiguidadeConta = contaValoresHelper
								.getConta().getValorTotal().setScale(
										Parcelamento.CASAS_DECIMAIS,
										Parcelamento.TIPO_ARREDONDAMENTO)
								.multiply(percentual);
						
						//2.5.2 Valor desconto por antiguidade da multa
						if (contaValoresHelper.getValorMulta() != null) {
							valorDescontoAntiguidadeMulta = contaValoresHelper
									.getValorMulta().setScale(
											Parcelamento.CASAS_DECIMAIS,
											Parcelamento.TIPO_ARREDONDAMENTO)
									.multiply(percentual);
						}

						// 2.5.3 Valor desconto por antiguidade nos juros de
						// mora
						if (contaValoresHelper.getValorJurosMora() != null) {
							valorDescontoAntiguidadeJurosMora = contaValoresHelper
									.getValorJurosMora().setScale(
											Parcelamento.CASAS_DECIMAIS,
											Parcelamento.TIPO_ARREDONDAMENTO)
									.multiply(percentual);
						}

						// 2.5.4 Valor desconto por antiguidade nas atualizações
						// monetárias
						if (contaValoresHelper.getValorAtualizacaoMonetaria() != null) {
							valorDescontoAntiguidadeAtualizacoesMonetarias = contaValoresHelper
									.getValorAtualizacaoMonetaria().setScale(
											Parcelamento.CASAS_DECIMAIS,
											Parcelamento.TIPO_ARREDONDAMENTO)
									.multiply(percentual);
						}

						/*
						 * Colocado por Raphael Rossiter em 03/12/2008
						 * As contas onde o perfil de parcelamento para desconto de antiguidade estiver com
						 * o motivo de revisão informado NÃO entrarão no parcelamento.
						 */
						
						//2.6 Acumula o valor do desconto por antiguidade
						valorDescontoAntiguidade = valorDescontoAntiguidade
								.setScale(Parcelamento.CASAS_DECIMAIS,
										Parcelamento.TIPO_ARREDONDAMENTO)
								.add(
										valorDescontoAntiguidadeConta
												.setScale(
														Parcelamento.CASAS_DECIMAIS,
														Parcelamento.TIPO_ARREDONDAMENTO));
						
						valorDescontoAntiguidade = valorDescontoAntiguidade
						.setScale(Parcelamento.CASAS_DECIMAIS,
								Parcelamento.TIPO_ARREDONDAMENTO)
						.add(
								valorDescontoAntiguidadeMulta
										.setScale(
												Parcelamento.CASAS_DECIMAIS,
												Parcelamento.TIPO_ARREDONDAMENTO));
						
						valorDescontoAntiguidade = valorDescontoAntiguidade
								.setScale(Parcelamento.CASAS_DECIMAIS,
										Parcelamento.TIPO_ARREDONDAMENTO)
								.add(
										valorDescontoAntiguidadeJurosMora
												.setScale(
														Parcelamento.CASAS_DECIMAIS,
														Parcelamento.TIPO_ARREDONDAMENTO));
						
						valorDescontoAntiguidade = valorDescontoAntiguidade
								.setScale(Parcelamento.CASAS_DECIMAIS,
										Parcelamento.TIPO_ARREDONDAMENTO)
								.add(
										valorDescontoAntiguidadeAtualizacoesMonetarias
												.setScale(
														Parcelamento.CASAS_DECIMAIS,
														Parcelamento.TIPO_ARREDONDAMENTO));
						
						
						valorDescontoAntiguidadeMultaTotal = valorDescontoAntiguidadeMultaTotal
						.setScale(Parcelamento.CASAS_DECIMAIS,
								Parcelamento.TIPO_ARREDONDAMENTO)
						.add(
								valorDescontoAntiguidadeMulta
										.setScale(
												Parcelamento.CASAS_DECIMAIS,
												Parcelamento.TIPO_ARREDONDAMENTO));
						
						valorDescontoAntiguidadeJurosMoraTotal = valorDescontoAntiguidadeJurosMoraTotal
								.setScale(Parcelamento.CASAS_DECIMAIS,
										Parcelamento.TIPO_ARREDONDAMENTO)
								.add(
										valorDescontoAntiguidadeJurosMora
												.setScale(
														Parcelamento.CASAS_DECIMAIS,
														Parcelamento.TIPO_ARREDONDAMENTO));
						
						valorDescontoAntiguidadeAtualizacoesMonetariasTotal = 
						valorDescontoAntiguidadeAtualizacoesMonetariasTotal
								.setScale(Parcelamento.CASAS_DECIMAIS,
										Parcelamento.TIPO_ARREDONDAMENTO)
								.add(
										valorDescontoAntiguidadeAtualizacoesMonetarias
												.setScale(
														Parcelamento.CASAS_DECIMAIS,
														Parcelamento.TIPO_ARREDONDAMENTO));
					}
					else{
						
						//CONTAS PARA PARCELAMENTO
						colecaoContasParaParcelamento.add(contaValoresHelper);
					}
				}
			}
			
			//2.7 Subtrai o valor das multas
			if (valorTotalMultas != new BigDecimal("0.00")) {
				valorTotalMultas = valorTotalMultas.setScale(
						Parcelamento.CASAS_DECIMAIS,
						Parcelamento.TIPO_ARREDONDAMENTO).subtract(
								valorDescontoAntiguidadeMultaTotal.setScale(
								Parcelamento.CASAS_DECIMAIS,
								Parcelamento.TIPO_ARREDONDAMENTO));
			}

			// 2.8 Subtrai o valor total dos juros de mora
			if (valorTotalJurosMora != new BigDecimal("0.00")) {
				valorTotalJurosMora = valorTotalJurosMora.setScale(
						Parcelamento.CASAS_DECIMAIS,
						Parcelamento.TIPO_ARREDONDAMENTO).subtract(
						valorDescontoAntiguidadeJurosMoraTotal.setScale(
								Parcelamento.CASAS_DECIMAIS,
								Parcelamento.TIPO_ARREDONDAMENTO));
			}

			// 2.7 Subtrai o valor total das atualizações monetárias
			if (valorTotalAtualizacoesMonetarias != new BigDecimal(
					"0.00")) {
				valorTotalAtualizacoesMonetarias = valorTotalAtualizacoesMonetarias
						.setScale(Parcelamento.CASAS_DECIMAIS,
								Parcelamento.TIPO_ARREDONDAMENTO)
						.subtract(
								valorDescontoAntiguidadeAtualizacoesMonetariasTotal
										.setScale(
												Parcelamento.CASAS_DECIMAIS,
												Parcelamento.TIPO_ARREDONDAMENTO));
			}
		}

		// 3. Recalcula o valor total dos acrescimos por impontualidade
		valorTotalAcrescimosImpontualidade = valorTotalAcrescimosImpontualidade
				.setScale(Parcelamento.CASAS_DECIMAIS,
						Parcelamento.TIPO_ARREDONDAMENTO).add(
						valorTotalMultas.setScale(Parcelamento.CASAS_DECIMAIS,
								Parcelamento.TIPO_ARREDONDAMENTO));
		valorTotalAcrescimosImpontualidade = valorTotalAcrescimosImpontualidade
				.setScale(Parcelamento.CASAS_DECIMAIS,
						Parcelamento.TIPO_ARREDONDAMENTO).add(
						valorTotalJurosMora.setScale(
								Parcelamento.CASAS_DECIMAIS,
								Parcelamento.TIPO_ARREDONDAMENTO));
		valorTotalAcrescimosImpontualidade = valorTotalAcrescimosImpontualidade
				.setScale(Parcelamento.CASAS_DECIMAIS,
						Parcelamento.TIPO_ARREDONDAMENTO).add(
						valorTotalAtualizacoesMonetarias.setScale(
								Parcelamento.CASAS_DECIMAIS,
								Parcelamento.TIPO_ARREDONDAMENTO));

		// 4. Retorna o valor do desconto por antiguidade e o valor total dos
		// acrescimos por impontualidade
		BigDecimal[] valorDescontoAntiguidadeDebito = new BigDecimal[3];

		valorDescontoAntiguidadeDebito[0] = valorDescontoAntiguidade.setScale(
		Parcelamento.CASAS_DECIMAIS, Parcelamento.TIPO_ARREDONDAMENTO);
		
		valorDescontoAntiguidadeDebito[1] = valorTotalAcrescimosImpontualidade
		.setScale(Parcelamento.CASAS_DECIMAIS, Parcelamento.TIPO_ARREDONDAMENTO);
		
		valorDescontoAntiguidadeDebito[2] = new BigDecimal(maiorQuantidadeMinimaMesesAntiguidade);
		
		retorno = new CalcularValorDescontoAntiguidadeDebitoHelper(valorDescontoAntiguidade, 
		valorTotalAcrescimosImpontualidade, new BigDecimal(maiorQuantidadeMinimaMesesAntiguidade), 
		colecaoContasEmAntiguidade, colecaoContasParaParcelamento);

		return retorno;
	}

	/**
	 * Permite efetuar o parcelamento dos débitos de um imóvel
	 * 
	 * [UC0214] Efetuar Parcelamento de Débitos
	 * 
	 * Obtém o Perfil do parcelamento para o imóvel
	 * 
	 * @author Roberta Costa
	 * @date 21/03/2006
	 * 
	 * @param codigoImovel
	 * @param imovelSituacao
	 * @param subcategoria
	 * @param resolucaoDiretoria
	 * @return ParcelamentoPerfil
	 */
	public ParcelamentoPerfil obterPerfilParcelamento(Integer codigoImovel,
			Integer imovelSituacaoId, Integer perfilImovelId,
			Integer subcategoriaId, Integer resolucaoDiretoria,Integer categoriaId)
			throws ControladorException {

		FiltroParcelamentoPerfil filtroParcelamentoPerfil = new FiltroParcelamentoPerfil();
		filtroParcelamentoPerfil
				.adicionarCaminhoParaCarregamentoEntidade("categoria");

		if (perfilImovelId != null && !perfilImovelId.equals("")) {
			filtroParcelamentoPerfil.adicionarParametro(new ParametroSimples(
					FiltroParcelamentoPerfil.IMOVEL_PERFIL_ID, perfilImovelId));
		} else {
			filtroParcelamentoPerfil.adicionarParametro(new ParametroNulo(
					FiltroParcelamentoPerfil.IMOVEL_PERFIL_ID));
		}
		if(imovelSituacaoId != null && !imovelSituacaoId.equals("")){
			filtroParcelamentoPerfil.adicionarParametro(new ParametroSimples(
					FiltroParcelamentoPerfil.IMOVEL_SITUACAO_TIPO_ID,
					imovelSituacaoId));
		}

		if (subcategoriaId != null && !subcategoriaId.equals("")) {
			filtroParcelamentoPerfil.adicionarParametro(new ParametroSimples(
					FiltroParcelamentoPerfil.SUBCATEGORIA_ID, subcategoriaId));
		} else {
			filtroParcelamentoPerfil.adicionarParametro(new ParametroNulo(
					FiltroParcelamentoPerfil.SUBCATEGORIA_ID));
		}
		
		if (categoriaId != null && !categoriaId.equals("")) {
			filtroParcelamentoPerfil.adicionarParametro(new ParametroSimples(
					FiltroParcelamentoPerfil.CATEGORIA_ID, categoriaId));
		} else {
			filtroParcelamentoPerfil.adicionarParametro(new ParametroNulo(
					FiltroParcelamentoPerfil.CATEGORIA_ID));
		}

		filtroParcelamentoPerfil.adicionarParametro(new ParametroSimples(
				FiltroParcelamentoPerfil.RESOLUCAO_DIRETORIA_ID,
				resolucaoDiretoria));

		Collection<ParcelamentoPerfil> colecaoParcelamentoPerfil = getControladorUtil()
				.pesquisar(filtroParcelamentoPerfil,
						ParcelamentoPerfil.class.getName());

		// Verificar existência da situacao do imóvel
		ParcelamentoPerfil perfilParcelamento = null;

		if (colecaoParcelamentoPerfil != null
				&& !colecaoParcelamentoPerfil.isEmpty()) {
			// Pega a primeira ocorrência da coleção
			perfilParcelamento = (ParcelamentoPerfil) Util
					.retonarObjetoDeColecao(colecaoParcelamentoPerfil);
		}

		return perfilParcelamento;
	}

	/**
	 * Obtem a Lista de Rotas
	 * 
	 * [UC0244] Manter Comando Ação Cobrança
	 * 
	 * @author Rafael Santos
	 * @date 22/03/2006
	 * 
	 * @param codigoImovel
	 * @param idRotaInicial
	 * @param idRotaFinal
	 * @param idSetorComercialInicial
	 * @param idSetorComercialFinal
	 * @param idLocalidadeInicial
	 * @param idLocalidadeFinal
	 * @param idGerenciaRegional
	 * @return
	 * @throws ControladorException
	 */
	public Collection obterListasRotas(String idRotaInicial,
			String idRotaFinal, String codigoSetorComercialInicial,
			String codigoSetorComercialFinal, String idLocalidadeInicial,
			String idLocalidadeFinal, String idGerenciaRegional,
			String idUnidadeNegocio, 
			String codigoRotaInicial, 
			String codigoRotaFinal,
			String numeroQuadraInicial,
			String numeroQuadraFinal,
			String[] idsLocalidade,
			String[] idsSetorComercial,
			String idLocalidade) throws ControladorException {

		Collection colecaoRotas = new ArrayList();
		
		if ((idRotaInicial != null && !idRotaInicial.equals("")) && 
			(idRotaFinal != null && !idRotaFinal.equals(""))) {
			
			FiltroRota filtroRota = new FiltroRota();
			Intervalo intervalo = 
				new Intervalo(FiltroRota.ID_ROTA,
					idRotaInicial, idRotaFinal);
			
			filtroRota.adicionarParametro(intervalo);

			colecaoRotas = 
				this.getControladorUtil().pesquisar(filtroRota,Rota.class.getName());
			
		} else if ((numeroQuadraInicial != null && !numeroQuadraInicial.equals("")) && 
				(numeroQuadraFinal != null && !numeroQuadraFinal.equals(""))) {
			
			
			Collection<Integer> colecaoIdRotas = null;
			try {
				colecaoIdRotas = this.repositorioMicromedicao.obterIdRotaPorQuadra(
					new Integer(idLocalidadeInicial),
					new Integer(idLocalidadeFinal),
					new Integer(codigoSetorComercialInicial),
				    new Integer(codigoSetorComercialFinal),
					new Integer(numeroQuadraInicial),
					new Integer(numeroQuadraFinal));
			} catch (Exception e) {
				sessionContext.setRollbackOnly();
				throw new ControladorException("erro.sistema", e);
			}
			
			if(colecaoIdRotas != null && !colecaoIdRotas.isEmpty()){
				Iterator itera = colecaoIdRotas.iterator();
				while (itera.hasNext()) {
					Integer idRota = (Integer) itera.next();
					
					Rota rota = new Rota();
					rota.setId(idRota);
					
					colecaoRotas.add(rota);
				}
			}
			
			
		} else if ((idLocalidadeInicial != null && !idLocalidadeInicial.equals("")) && 
			(idLocalidadeFinal != null && !idLocalidadeFinal.equals(""))) {

			FiltroRota filtroRota = new FiltroRota();
			Intervalo intervalo = 
				new Intervalo(FiltroRota.LOCALIDADE_ID,
					idLocalidadeInicial, 
					idLocalidadeFinal);
			
			filtroRota.adicionarParametro(intervalo);

			if ((codigoSetorComercialInicial != null && !codigoSetorComercialInicial.equals("")) && 
				(codigoSetorComercialFinal != null && !codigoSetorComercialFinal.equals(""))) {

				Intervalo intervaloSetor = new Intervalo(
						FiltroRota.SETOR_COMERCIAL_CODIGO,
						codigoSetorComercialInicial, codigoSetorComercialFinal);
				filtroRota.adicionarParametro(intervaloSetor);
			}
			
			if(codigoRotaInicial != null && !codigoRotaInicial.equals("")){
				Intervalo intervaloCodigoRota = 
					new Intervalo(FiltroRota.CODIGO_ROTA, 
						new Integer(codigoRotaInicial),
						new Integer(codigoRotaFinal));
				
				filtroRota.adicionarParametro(intervaloCodigoRota);
			}

			colecaoRotas = 
				this.getControladorUtil().pesquisar(
					filtroRota,
					Rota.class.getName());

		} else if (idUnidadeNegocio != null && 
			!idUnidadeNegocio.equals("") && 
			!idUnidadeNegocio.equals(ConstantesSistema.NUMERO_NAO_INFORMADO + "")) {

			FiltroLocalidade filtroLocalidade = new FiltroLocalidade();
			filtroLocalidade.adicionarParametro(
				new ParametroSimples(
					FiltroLocalidade.ID_UNIDADE_NEGOCIO, 
					idUnidadeNegocio));

			Collection colecaoLocalidades = 
				this.getControladorUtil().pesquisar(
					filtroLocalidade, 
					Localidade.class.getName());

			if (colecaoLocalidades != null && !colecaoLocalidades.isEmpty()) {

				Iterator iteratorColecaoLocalidades = 
					colecaoLocalidades.iterator();
				
				while (iteratorColecaoLocalidades.hasNext()) {
					Localidade localidade = 
						(Localidade) iteratorColecaoLocalidades.next();

					FiltroSetorComercial filtroSetorComercial = new FiltroSetorComercial();
					filtroSetorComercial.adicionarParametro(
						new ParametroSimples(
							FiltroSetorComercial.ID_LOCALIDADE,
							localidade.getId()));

					Collection colecaoSetoresComerciais = 
						this.getControladorUtil().pesquisar(
							filtroSetorComercial,
							SetorComercial.class.getName());

					if (colecaoSetoresComerciais != null && 
						!colecaoSetoresComerciais.isEmpty()) {

						Iterator iteratorColecaoSetoresComerciais = 
							colecaoSetoresComerciais.iterator();

						while (iteratorColecaoSetoresComerciais.hasNext()) {
							SetorComercial setorComercial = (SetorComercial) iteratorColecaoSetoresComerciais
									.next();

							FiltroRota filtroRota = new FiltroRota();
							// filtroRota
							// .adicionarCaminhoParaCarregamentoEntidade(FiltroRota.COBRANCA_CRITERIO);
							filtroRota.adicionarParametro(new ParametroSimples(
									FiltroRota.SETOR_COMERCIAL_ID,
									setorComercial.getId()));

							Collection colecaoRotasSetorComercialLocalidadeGerencia = this
									.getControladorUtil().pesquisar(filtroRota,
											Rota.class.getName());
							if (colecaoRotasSetorComercialLocalidadeGerencia != null
									&& !colecaoRotasSetorComercialLocalidadeGerencia
											.isEmpty()) {
								Iterator iteratorColecaoRotasSetorComercialLocalidadeGerencia = colecaoRotasSetorComercialLocalidadeGerencia
										.iterator();

								while (iteratorColecaoRotasSetorComercialLocalidadeGerencia
										.hasNext()) {
									Rota rota = (Rota) iteratorColecaoRotasSetorComercialLocalidadeGerencia
											.next();

									colecaoRotas.add(rota);
								}
							}
						}
					}
				}
			}

		} else if (idGerenciaRegional != null
				&& !idGerenciaRegional.equals("")
				&& !idGerenciaRegional
						.equals(ConstantesSistema.NUMERO_NAO_INFORMADO + "")) {

			
			 if ( idsLocalidade != null && idsLocalidade.length > 0 ) {
				 FiltroLocalidade filtroLocalidade = new FiltroLocalidade();
					Collection<Integer> colecaoIdLocalidade = new ArrayList<Integer>();
					for (int i = 0; i < idsLocalidade.length; i++) {
						colecaoIdLocalidade.add(Integer.valueOf(idsLocalidade[i]));
					}
					
					filtroLocalidade.adicionarParametro(new ParametroSimplesIn(FiltroLocalidade.ID, colecaoIdLocalidade));
					
					Collection colecaoLocalidades = this.getControladorUtil().pesquisar(filtroLocalidade, Localidade.class.getName());

					if (colecaoLocalidades != null && !colecaoLocalidades.isEmpty()) {

						Iterator iteratorColecaoLocalidades = colecaoLocalidades.iterator();
						while (iteratorColecaoLocalidades.hasNext()) {
							Localidade localidade = (Localidade) iteratorColecaoLocalidades.next();

							FiltroSetorComercial filtroSetorComercial = new FiltroSetorComercial();
							filtroSetorComercial
									.adicionarParametro(new ParametroSimples(
											FiltroSetorComercial.ID_LOCALIDADE,
											localidade.getId()));

							Collection colecaoSetoresComerciais = this
									.getControladorUtil().pesquisar(
											filtroSetorComercial,
											SetorComercial.class.getName());

							if (colecaoSetoresComerciais != null && !colecaoSetoresComerciais.isEmpty()) {

								Iterator iteratorColecaoSetoresComerciais = colecaoSetoresComerciais
										.iterator();

								while (iteratorColecaoSetoresComerciais
										.hasNext()) {
									SetorComercial setorComercial = (SetorComercial) iteratorColecaoSetoresComerciais
											.next();

									FiltroRota filtroRota = new FiltroRota();
									// filtroRota
									// .adicionarCaminhoParaCarregamentoEntidade(FiltroRota.COBRANCA_CRITERIO);
									filtroRota
											.adicionarParametro(new ParametroSimples(
													FiltroRota.SETOR_COMERCIAL_ID,
													setorComercial.getId()));

									Collection colecaoRotasSetorComercialLocalidadeGerencia = this
											.getControladorUtil().pesquisar(
													filtroRota,
													Rota.class.getName());
									if (colecaoRotasSetorComercialLocalidadeGerencia != null
											&& !colecaoRotasSetorComercialLocalidadeGerencia
													.isEmpty()) {
										Iterator iteratorColecaoRotasSetorComercialLocalidadeGerencia = colecaoRotasSetorComercialLocalidadeGerencia
												.iterator();

										while (iteratorColecaoRotasSetorComercialLocalidadeGerencia
												.hasNext()) {
											Rota rota = (Rota) iteratorColecaoRotasSetorComercialLocalidadeGerencia
													.next();

											colecaoRotas.add(rota);
										}
									}
								}
							}
						}
					}
			} else {
			
				FiltroUnidadeNegocio filtroUnidadeNegocio = new FiltroUnidadeNegocio();
				filtroUnidadeNegocio.adicionarParametro(new ParametroSimples(
						FiltroUnidadeNegocio.ID_GERENCIA, idGerenciaRegional));
	
				Collection colecaoUnidadeNegocio = this.getControladorUtil()
						.pesquisar(filtroUnidadeNegocio,
								UnidadeNegocio.class.getName());
	
				if (colecaoUnidadeNegocio != null && !colecaoUnidadeNegocio.isEmpty()) {
	
					Iterator iteratorColecaoUnidadeNegocio = colecaoUnidadeNegocio
							.iterator();
					while (iteratorColecaoUnidadeNegocio.hasNext()) {
	
						UnidadeNegocio unidadeNegocio = (UnidadeNegocio) iteratorColecaoUnidadeNegocio.next();
	
						FiltroLocalidade filtroLocalidade = new FiltroLocalidade();
						filtroLocalidade.adicionarParametro(new ParametroSimples(FiltroLocalidade.ID_UNIDADE_NEGOCIO, unidadeNegocio.getId()));			
						
						 if ( idsLocalidade != null && idsLocalidade.length > 0 ) {
							
							Collection<Integer> colecaoIdLocalidade = new ArrayList<Integer>();
							for (int i = 0; i < idsLocalidade.length; i++) {
								colecaoIdLocalidade.add(Integer.valueOf(idsLocalidade[i]));
							}
							
							filtroLocalidade.adicionarParametro(new ParametroSimplesIn(FiltroLocalidade.ID, colecaoIdLocalidade));
						}
						
						Collection colecaoLocalidades = this.getControladorUtil().pesquisar(filtroLocalidade, Localidade.class.getName());
	
						if (colecaoLocalidades != null && !colecaoLocalidades.isEmpty()) {
	
							Iterator iteratorColecaoLocalidades = colecaoLocalidades.iterator();
							while (iteratorColecaoLocalidades.hasNext()) {
								Localidade localidade = (Localidade) iteratorColecaoLocalidades.next();
	
								FiltroSetorComercial filtroSetorComercial = new FiltroSetorComercial();
								filtroSetorComercial
										.adicionarParametro(new ParametroSimples(
												FiltroSetorComercial.ID_LOCALIDADE,
												localidade.getId()));
	
								Collection colecaoSetoresComerciais = this
										.getControladorUtil().pesquisar(
												filtroSetorComercial,
												SetorComercial.class.getName());
	
								if (colecaoSetoresComerciais != null && !colecaoSetoresComerciais.isEmpty()) {
	
									Iterator iteratorColecaoSetoresComerciais = colecaoSetoresComerciais
											.iterator();
	
									while (iteratorColecaoSetoresComerciais
											.hasNext()) {
										SetorComercial setorComercial = (SetorComercial) iteratorColecaoSetoresComerciais
												.next();
	
										FiltroRota filtroRota = new FiltroRota();
										// filtroRota
										// .adicionarCaminhoParaCarregamentoEntidade(FiltroRota.COBRANCA_CRITERIO);
										filtroRota
												.adicionarParametro(new ParametroSimples(
														FiltroRota.SETOR_COMERCIAL_ID,
														setorComercial.getId()));
	
										Collection colecaoRotasSetorComercialLocalidadeGerencia = this
												.getControladorUtil().pesquisar(
														filtroRota,
														Rota.class.getName());
										if (colecaoRotasSetorComercialLocalidadeGerencia != null
												&& !colecaoRotasSetorComercialLocalidadeGerencia
														.isEmpty()) {
											Iterator iteratorColecaoRotasSetorComercialLocalidadeGerencia = colecaoRotasSetorComercialLocalidadeGerencia
													.iterator();
	
											while (iteratorColecaoRotasSetorComercialLocalidadeGerencia
													.hasNext()) {
												Rota rota = (Rota) iteratorColecaoRotasSetorComercialLocalidadeGerencia
														.next();
	
												colecaoRotas.add(rota);
											}
										}
									}
								}
							}
						}
					}
				}
			}
			
		}  else if ( idLocalidade != null && !idLocalidade.equals("") ) { 
			
			FiltroRota filtroRota = new FiltroRota();
			filtroRota.adicionarParametro( new ParametroSimples(FiltroRota.LOCALIDADE_ID, idLocalidade));
			
			if (idsSetorComercial != null && idsSetorComercial.length > 0) {
			
				Collection<Integer> colecaoIdSetorComercial = new ArrayList<Integer>();
				for (int i = 0; i < idsSetorComercial.length; i++) {
					colecaoIdSetorComercial.add(Integer.valueOf(idsSetorComercial[i]));
				}
				
				filtroRota.adicionarParametro(new ParametroSimplesIn(FiltroRota.SETOR_COMERCIAL_ID,colecaoIdSetorComercial));
			}

			Collection colecaoRotasSetorComercialLocalidadeGerencia = this
					.getControladorUtil().pesquisar(filtroRota,
							Rota.class.getName());
			
			if (colecaoRotasSetorComercialLocalidadeGerencia != null
					&& !colecaoRotasSetorComercialLocalidadeGerencia
							.isEmpty()) {
				Iterator iteratorColecaoRotasSetorComercialLocalidadeGerencia = colecaoRotasSetorComercialLocalidadeGerencia
						.iterator();

				while (iteratorColecaoRotasSetorComercialLocalidadeGerencia
						.hasNext()) {
					Rota rota = (Rota) iteratorColecaoRotasSetorComercialLocalidadeGerencia.next();

					colecaoRotas.add(rota);
				}
			}
		}
		return colecaoRotas;

	}

	/**
	 * 
	 * Obter Lista de Rotas Comando
	 * 
	 * [UC0243] - Inserir Comando de Ação de Cobrança
	 * 
	 * Selecionar as Lsitas de Rotas do Comando
	 * 
	 * [SF0009] - Selecionar Lista de Rotas do Comando
	 * 
	 * @author Rafael Santos
	 * @date 22/03/2006
	 * 
	 * @param idCobrancaGrupo
	 * @return
	 */
	public Collection obterListaRotasComando(String idCobrancaGrupo,
			Collection colecaoIdCobrancaAtividadeComandoRota)
			throws ControladorException {

		Collection colecaoListaRotasComando = null;
		
		if (idCobrancaGrupo != null && !idCobrancaGrupo.equals("")) {
			FiltroRota filtroRota = new FiltroRota();
			filtroRota.adicionarParametro(new ParametroSimples(
					FiltroRota.COBRANCA_GRUPO_ID, idCobrancaGrupo));

			colecaoListaRotasComando = this.getControladorUtil().pesquisar(
					filtroRota, Rota.class.getName());
		} else {
			
			colecaoListaRotasComando = new ArrayList();

			if (colecaoIdCobrancaAtividadeComandoRota != null
					&& !colecaoIdCobrancaAtividadeComandoRota.isEmpty()) {

				Iterator iteratorColecaoIdCobrancaAtividadeComandoRota = colecaoIdCobrancaAtividadeComandoRota
						.iterator();

				while (iteratorColecaoIdCobrancaAtividadeComandoRota.hasNext()) {

					CobrancaAtividadeComandoRotaPK compIDCobrancaAtividadeComandoRotaPK = (CobrancaAtividadeComandoRotaPK) iteratorColecaoIdCobrancaAtividadeComandoRota
							.next();

					FiltroCobrancaAtividadeComandoRotas filtroCobrancaAtividadeComandoRotas = new FiltroCobrancaAtividadeComandoRotas();
					filtroCobrancaAtividadeComandoRotas
							.adicionarCaminhoParaCarregamentoEntidade("rota");
					filtroCobrancaAtividadeComandoRotas
							.adicionarParametro(new ParametroSimples(
									FiltroCobrancaAtividadeComandoRotas.COMP_ID_COBRANCA_ACAO_ATIVIDADE_COMANDO_ID,
									compIDCobrancaAtividadeComandoRotaPK
											.getCobrancaAcaoAtividadeComandoId()));
					filtroCobrancaAtividadeComandoRotas
							.adicionarParametro(new ParametroSimples(
									FiltroCobrancaAtividadeComandoRotas.COMP_ID_ROTA_ID,
									compIDCobrancaAtividadeComandoRotaPK
											.getRotaId()));

					Collection colecaoRotasCobrancaAtividadeComandoRota = this
							.getControladorUtil().pesquisar(
									filtroCobrancaAtividadeComandoRotas,
									CobrancaAtividadeComandoRota.class
											.getName());

					if (colecaoRotasCobrancaAtividadeComandoRota != null
							&& !colecaoRotasCobrancaAtividadeComandoRota
									.isEmpty()) {
						Iterator iteratorColecaoRotasCobrancaAtividadeComandoRota = colecaoRotasCobrancaAtividadeComandoRota
								.iterator();

						while (iteratorColecaoRotasCobrancaAtividadeComandoRota
								.hasNext()) {
							CobrancaAtividadeComandoRota cobrancaAtividadeComandoRota = (CobrancaAtividadeComandoRota) iteratorColecaoRotasCobrancaAtividadeComandoRota
									.next();

							colecaoListaRotasComando
									.add(cobrancaAtividadeComandoRota.getRota());
						}
					}
				}
			}
		}

		return colecaoListaRotasComando;

	}

	/**
	 * Permite efetuar o parcelamento dos débitos de um imóvel
	 * 
	 * [UC0214] Efetuar Parcelamento de Débitos
	 * 
	 * Gera os Débitos a Cobrar dos Acréscimos por Impontualidade
	 * 
	 * [SB0005] - Gerar Débitos a Cobrar dos Acréscimos por Impontualidade
	 * 
	 * @author Roberta Costa
	 * @date 29/03/2006
	 * 
	 * @param resolucaoDiretoria
	 * @param codigoImovel
	 * @param valorEntrada
	 * @param situacaoAgua
	 * @param situacaoEsgoto
	 * @return
	 */
	public void gerarDebitosACobrarAcrescimosImpontualidade(Imovel imovel,
			BigDecimal valorAtualizacaoMonetaria, 
			BigDecimal valorJurosMora,
			BigDecimal valorMulta, BigDecimal taxaJuros,
			Integer parcelamentoId, Collection<Categoria> colecaoCategoria, Usuario usuarioLogado,
			boolean isContaEntradaParcelamento,Integer anoMesGuiaEntrada, Integer maiorAnoMesConta)
			throws ControladorException {

		// Atualização Monetária
		if (valorAtualizacaoMonetaria != null
				&& !valorAtualizacaoMonetaria.equals(new BigDecimal("0.00"))) {
			DebitoTipo debitoTipoAtualizacaMonetaria = filtrarDebitoTipo(DebitoTipo.ATUALIZACAO_MONETARIA);

			// Inclui o débito a cobrar para Atualização Monetária
			inserirDebitoACobrarDebitoTipo(debitoTipoAtualizacaMonetaria,
					imovel, new Short("1"), valorAtualizacaoMonetaria,
					taxaJuros, parcelamentoId, colecaoCategoria, null,
					DebitoCreditoSituacao.PARCELADA,DebitoCreditoSituacao.NORMAL, usuarioLogado, 
					isContaEntradaParcelamento,anoMesGuiaEntrada, maiorAnoMesConta);
		}
		
		// Juros Mora
		if (valorJurosMora != null
				&& !valorJurosMora.equals(new BigDecimal("0.00"))) {
			DebitoTipo debitoTipoJurosMora = filtrarDebitoTipo(DebitoTipo.JUROS_MORA);

			// Inclui o débito a cobrar para Juros Mora
			inserirDebitoACobrarDebitoTipo(debitoTipoJurosMora, imovel,
					new Short("1"), valorJurosMora, taxaJuros, parcelamentoId,
					colecaoCategoria, null, DebitoCreditoSituacao.PARCELADA,DebitoCreditoSituacao.NORMAL, usuarioLogado, 
					isContaEntradaParcelamento, anoMesGuiaEntrada, maiorAnoMesConta);
		}

		// Multa por Impontualidade
		if (valorMulta != null && !valorMulta.equals(new BigDecimal("0.00"))) {
			DebitoTipo debitoTipoMultaImpontualidade = filtrarDebitoTipo(DebitoTipo.MULTA_IMPONTUALIDADE);

			// Inclui o débito a cobrar para Multa
			inserirDebitoACobrarDebitoTipo(debitoTipoMultaImpontualidade,
					imovel, new Short("1"), valorMulta, taxaJuros,
					parcelamentoId, colecaoCategoria, null,
					DebitoCreditoSituacao.PARCELADA,DebitoCreditoSituacao.NORMAL, usuarioLogado, 
					isContaEntradaParcelamento, anoMesGuiaEntrada, maiorAnoMesConta);
		}
	}

	/**
	 * Permite efetuar o parcelamento dos débitos de um imóvel
	 * 
	 * [UC0214] Efetuar Parcelamento de Débitos
	 * 
	 * Pega o Tipo do Débito de acordo com a constante informada
	 * 
	 * filtrarDebitoTipo
	 * 
	 * @author Roberta Costa
	 * @date 05/04/2006
	 * 
	 * @param debitoTipo
	 * @param imovel
	 * @param valorDebito
	 * @param taxaJuros
	 * @param parcelamentoId
	 */
	public DebitoTipo filtrarDebitoTipo(Integer tipoDebito)
			throws ControladorException {
		FiltroDebitoTipo filtroDebitoTipo = new FiltroDebitoTipo();

		filtroDebitoTipo.adicionarParametro(new ParametroSimples(
				FiltroDebitoTipo.ID, tipoDebito));

		Collection colecaoDebitoTipo = this.getControladorUtil().pesquisar(
				filtroDebitoTipo, DebitoTipo.class.getName());

		DebitoTipo debitoTipo = new DebitoTipo();
		if (colecaoDebitoTipo != null && !colecaoDebitoTipo.isEmpty()) {
			debitoTipo = (DebitoTipo) colecaoDebitoTipo.iterator().next();
		}
		return debitoTipo;
	}

	/**
	 * Permite efetuar o parcelamento dos débitos de um imóvel
	 * 
	 * [UC0214] Efetuar Parcelamento de Débitos
	 * 
	 * Insere Débito A Cobrar de acordo com Tipo do Débito do Imóvel
	 * 
	 * inserirDebitoACobrarDebitoTipo
	 * 
	 * @author Roberta Costa
	 * @date 05/04/2006
	 * 
	 * @param debitoTipo
	 * @param imovel
	 * @param valorDebito
	 * @param taxaJuros
	 * @param parcelamentoId
	 */
	public void inserirDebitoACobrarDebitoTipo(DebitoTipo debitoTipo,
			Imovel imovel, Short numeroPrestacao, BigDecimal valorDebito,
			BigDecimal taxaJuros, Integer parcelamentoId,
			Collection<Categoria> colecaoCategoria,
			Integer parcelamentoGrupoId, Integer debitoCreditoSituacaoId, 
			Integer debitoCreditoSituacaoAnteriorId, Usuario usuarioLogado,
			boolean isContaEntradaParcelamento, Integer anoMesGuiaEntrada, Integer maiorAnoMesConta)
			throws ControladorException {

		SistemaParametro sistemaParametros = getControladorUtil()
				.pesquisarParametrosDoSistema();

		// Insere o débito a cobrar na tabela DEBITO_A_COBRAR_GERAL
		DebitoACobrarGeral debitoACobrarGeral = new DebitoACobrarGeral();
		debitoACobrarGeral.setIndicadorHistorico(new Short("2"));
		debitoACobrarGeral.setUltimaAlteracao(new Date());
		// Recupera o código do débito a cobrar geral inserido Integer
		Integer debitoACobrarGeralIdBase = (Integer) getControladorUtil()
				.inserir(debitoACobrarGeral);
		debitoACobrarGeral.setId(debitoACobrarGeralIdBase);

		// Seta o objeto débito a cobrar com os parâmetros solicitados
		DebitoACobrar debitoACobrar = new DebitoACobrar();

		debitoACobrar.setId(debitoACobrarGeralIdBase);
		debitoACobrar.setDebitoACobrarGeral(debitoACobrarGeral);
		debitoACobrar.setImovel(imovel);
		debitoACobrar.setDebitoTipo(debitoTipo);
		debitoACobrar.setGeracaoDebito(new Date());
		debitoACobrar.setAnoMesReferenciaDebito(sistemaParametros
				.getAnoMesFaturamento());
		debitoACobrar.setAnoMesCobrancaDebito(sistemaParametros
				.getAnoMesArrecadacao());
//		debitoACobrar.setAnoMesReferenciaContabil(sistemaParametros.getAnoMesFaturamento());
	    //alterado por Vivianne Sousa 01/09/2008 
        //analista :Aryed 
        Integer referenciaContabil = obterReferenciaContabilParcelamentoOUConta(isContaEntradaParcelamento, anoMesGuiaEntrada, maiorAnoMesConta);
        debitoACobrar.setAnoMesReferenciaContabil(referenciaContabil);
		
		debitoACobrar.setValorDebito(valorDebito);
		debitoACobrar.setNumeroPrestacaoDebito(numeroPrestacao);
		debitoACobrar.setNumeroPrestacaoCobradas(new Short("0"));
		debitoACobrar.setLocalidade(imovel.getLocalidade());
		debitoACobrar.setQuadra(imovel.getQuadra());
		debitoACobrar.setCodigoSetorComercial(imovel.getSetorComercial()
				.getCodigo());
		debitoACobrar.setNumeroQuadra(imovel.getQuadra().getNumeroQuadra());
		debitoACobrar.setNumeroLote(imovel.getLote());
		debitoACobrar.setNumeroSubLote(imovel.getSubLote());
		debitoACobrar.setPercentualTaxaJurosFinanciamento(taxaJuros);

		RegistroAtendimento registroAtendimento = new RegistroAtendimento();
		registroAtendimento.setId(null);
		debitoACobrar.setRegistroAtendimento(registroAtendimento);
		debitoACobrar.setOrdemServico(null);

		debitoACobrar.setFinanciamentoTipo(debitoTipo.getFinanciamentoTipo());
		debitoACobrar.setLancamentoItemContabil(debitoTipo
				.getLancamentoItemContabil());
		debitoACobrar.setUsuario(usuarioLogado);

		/* RM7022 - Alteração na contabilização dos juros */
        debitoACobrar.setAnoMesRefContabilizacao(referenciaContabil);
        
		DebitoCreditoSituacao debitoCreditoSituacaoAtual = new DebitoCreditoSituacao();
		debitoCreditoSituacaoAtual.setId(debitoCreditoSituacaoId);
		debitoACobrar.setDebitoCreditoSituacaoAtual(debitoCreditoSituacaoAtual);

		//Alterado por Sávio Luiz Analista:Aryed
		//Data:17/01/2008
		DebitoCreditoSituacao debitoCreditoSituacaoAnterior = new DebitoCreditoSituacao();
		debitoCreditoSituacaoAnterior.setId(debitoCreditoSituacaoAnteriorId);
		debitoACobrar.setDebitoCreditoSituacaoAnterior(debitoCreditoSituacaoAnterior);

		ParcelamentoGrupo parcelamentoGrupo = new ParcelamentoGrupo();
		parcelamentoGrupo.setId(parcelamentoGrupoId);
		debitoACobrar.setParcelamentoGrupo(parcelamentoGrupo);

		CobrancaForma cobrancaForma = new CobrancaForma();
		cobrancaForma.setId(CobrancaForma.COBRANCA_EM_CONTA);
		debitoACobrar.setCobrancaForma(cobrancaForma);

		if (parcelamentoId != null && !parcelamentoId.equals("")) {
			Parcelamento parcelamento = new Parcelamento();
			parcelamento.setId(parcelamentoId);
			debitoACobrar.setParcelamento(parcelamento);
		} else {
			debitoACobrar.setParcelamento(null);
		}
		debitoACobrar.setUltimaAlteracao(new Date());

		// Recupera o código do débito a cobrar inserido Integer
		// Integer debitoACobrarIdBase = (Integer)
		getControladorUtil().inserir(debitoACobrar);

		// 2.1. [UC0185] Obter Valor por Categoria
		Collection<BigDecimal> colecaoValorCategoria = getControladorImovel()
				.obterValorPorCategoria(colecaoCategoria, valorDebito);

		// Cria as iterações de categoria e valor
		Iterator iteratorCategoria = colecaoCategoria.iterator();
		Iterator iteratorValorCategoria = colecaoValorCategoria.iterator();

		// Laço para criar os débitos a cobrar por categoria
		while (iteratorCategoria.hasNext()) {
			// Recupera a categoria
			Categoria categoria = (Categoria) iteratorCategoria.next();

			// Recupera o valor da categoria
			BigDecimal valorPorCategoria = (BigDecimal) iteratorValorCategoria
					.next();

			// Cria o débito a cobrar categoria
			DebitoACobrarCategoria debitoACobrarCategoria = new DebitoACobrarCategoria();

			DebitoACobrarCategoriaPK debitoACobrarCategoriaPK = new DebitoACobrarCategoriaPK(
					debitoACobrar, categoria);
			debitoACobrarCategoria.setComp_id(debitoACobrarCategoriaPK);

			/*
			 * DebitoACobrar debitoACobrarBase = new DebitoACobrar();
			 * debitoACobrarBase.setId(debitoACobrarGeralIdBase);
			 * debitoACobrarCategoria.setDebitoACobrar(debitoACobrarBase);
			 */
			debitoACobrarCategoria.setDebitoACobrar(debitoACobrar);

			debitoACobrarCategoria.setCategoria(categoria);
			debitoACobrarCategoria.setQuantidadeEconomia(categoria
					.getQuantidadeEconomiasCategoria());
			debitoACobrarCategoria.setValorCategoria(valorPorCategoria);
			debitoACobrarCategoria.setUltimaAlteracao(new Date());

			// 2.2. Inclui na tabela DEBITO_A_COBRAR_CATEGORIA
			getControladorUtil().inserir(debitoACobrarCategoria);
		}
	}

	/**
	 * Permite efetuar o parcelamento dos débitos de um imóvel
	 * 
	 * [UC0214] Efetuar Parcelamento de Débitos
	 * 
	 * Verifica a Situação do Imóvel e o Perfil Parcelamento
	 * 
	 * [SB0004] - Verificar Situação do Imóvel e Perfil Parcelamento
	 * 
	 * @author Roberta Costa
	 * @date 29/03/2006
	 * 
	 * @param resolucaoDiretoria
	 * @param codigoImovel
	 * @param valorEntrada
	 * @param situacaoAgua
	 * @param situacaoEsgoto
	 * @return
	 */
	public Object[] verificarSituacaoImovelPerfilParcelamento(
			Integer situacaoAguaId, Integer situacaoEsgotoId,
			Integer codigoImovel, Integer perfilImovelId,
			Integer resolucaoDiretoria,
			Integer numeroReparcelamentoConsecutivos,
			BigDecimal valorDebitoACobrarParcelamentoImovel)
			throws ControladorException {

		// 1. Obtem a situação do imovel
		ImovelSituacao imovelSituacao = this.obterSituacaoImovel(situacaoAguaId, situacaoEsgotoId);
		

		// 2. Obtém o perfil do parcelamento para o imóvel
		ParcelamentoPerfil parcelamentoPerfil = new ParcelamentoPerfil();

		if (imovelSituacao != null) {
			// Pega a subcategoria do imóvel
			Imovel imovel = new Imovel();
			imovel.setId(codigoImovel);

			//2. Obtém o perfil do parcelamento para o imóvel
			parcelamentoPerfil = this.obterPerfilParcelamentoPorNivel(imovel, imovelSituacao, 
					resolucaoDiretoria, perfilImovelId);
			
//			// Condição 1 - iper_id = iper_id do imovel e scat_id = scat_id do imovel
//			parcelamentoPerfil = obterPerfilParcelamento(codigoImovel,imovelSituacao.getImovelSituacaoTipo().getId(),
//					perfilImovelId, subcategoria.getId(), resolucaoDiretoria,null);
//
//			// Condição 2 - iper_id = iper_id do imovel e scat_id = null do imovel
//			if (parcelamentoPerfil == null) {
//				parcelamentoPerfil = obterPerfilParcelamento(codigoImovel,imovelSituacao.getImovelSituacaoTipo().getId(),
//						perfilImovelId, null, resolucaoDiretoria,null);
//				
//				// Condição 3 - iper_id = null do imovel e scat_id = scat_id do imovel
//				if (parcelamentoPerfil == null) {
//					parcelamentoPerfil = obterPerfilParcelamento(codigoImovel,imovelSituacao.getImovelSituacaoTipo().getId(),
//							null, subcategoria.getId(), resolucaoDiretoria,null);
//					
//					// Condição 4 - iper_id = null do imovel e scat_id = null
//					if (parcelamentoPerfil == null) {
//						parcelamentoPerfil = obterPerfilParcelamento(codigoImovel,imovelSituacao.getImovelSituacaoTipo().getId(), 
//								null, null, resolucaoDiretoria,null);
//					}
//				}
//			}
		}

		// [FS005] Verificar existência do perfil de parcelamento
		if (parcelamentoPerfil == null) {
			throw new ControladorException(
					"atencao.nao.existe.perfil.parcelamento.correspondente.situacao.imovel");
		}

		// 3. Obtem a condição referente a quantidade de reparcelamentos
		// consecutivos já realizados para perfil do parcelamento para o imóvel

		Integer numeroReparcelamentoConsecutivosMaisUm = numeroReparcelamentoConsecutivos;
		// se o valorDebitoACobrarParcelamentoImovel for diferente de 0
		// somar 1 ao numero de reparcelamento
		if (valorDebitoACobrarParcelamentoImovel.compareTo(new BigDecimal(
				"0.00")) != 0) {
			numeroReparcelamentoConsecutivosMaisUm++;
		}

		ParcelamentoQuantidadeReparcelamento parcelamentoQuantidadeReparcelamento = null;
		try {
			parcelamentoQuantidadeReparcelamento = repositorioCobranca
					.obterQtdeReparcelamentoPerfil(parcelamentoPerfil.getId(),
							new Short(numeroReparcelamentoConsecutivosMaisUm
									.shortValue()));
		} catch (ErroRepositorioException e) {
			e.printStackTrace();
		}

		if (parcelamentoQuantidadeReparcelamento == null) {
			// [FS0006] Verificar a esxistência da quantidade de reparcelamentos
			// para o perfil
			throw new ControladorException(
					"atencao.nao.existe.condicao.por.quantidade.reparcelamentos.perfil");
		}

		//        
		//        
		// if (parcelamentoQuantidadeReparcelamento == null){
		// // [FS0006] Verificar a existência da quantidade de reparcelamentos
		// // para o perfil
		// throw new
		// ControladorException("atencao.nao.existe.condicao.por.quantidade.reparcelamentos.perfil");
		// }

		// FiltroParcelamentoQuantidadeReparcelamento
		// filtroParcelamentoQuantidadeReparcelamento = new
		// FiltroParcelamentoQuantidadeReparcelamento();
		//
		// filtroParcelamentoQuantidadeReparcelamento.adicionarParametro(new
		// ParametroSimples(FiltroParcelamentoQuantidadeReparcelamento.PARCELAMENTO_PERFIL,
		// parcelamentoPerfil.getId()));
		// filtroParcelamentoQuantidadeReparcelamento.adicionarParametro(new
		// MenorQue(FiltroParcelamentoQuantidadeReparcelamento.QUANTIDADE_MAXIMA_REPARCELAMENTO,
		// numeroReparcelamentoConsecutivos));
		//
		// Collection<ParcelamentoQuantidadeReparcelamento>
		// colecaoParcelamentoQuantidadeReparcelamento =
		// getControladorUtil().pesquisar(filtroParcelamentoQuantidadeReparcelamento,
		// ParcelamentoQuantidadeReparcelamento.class.getName());

		// // Verificar existência da situacao do imóvel
		// Integer parcelamentoQuantidadeReparcelamentoId = null;
		//
		// if (colecaoParcelamentoQuantidadeReparcelamento != null &&
		// !colecaoParcelamentoQuantidadeReparcelamento.isEmpty()) {
		// Iterator parcelamentoQuantidadeReparcelamentoValores =
		// colecaoParcelamentoQuantidadeReparcelamento.iterator();
		//
		// int quantidadeMaximaReparcelamento = 0;
		// int menorQuantidadeMaximaReparcelamento = 999;
		//
		// while (parcelamentoQuantidadeReparcelamentoValores.hasNext()) {
		// ParcelamentoQuantidadeReparcelamento
		// parcelamentoQuantidadeReparcelamento =
		// (ParcelamentoQuantidadeReparcelamento)
		// parcelamentoQuantidadeReparcelamentoValores.next();
		// quantidadeMaximaReparcelamento =
		// parcelamentoQuantidadeReparcelamento.getQuantidadeMaximaReparcelamento();
		// if (quantidadeMaximaReparcelamento <
		// menorQuantidadeMaximaReparcelamento) {
		// menorQuantidadeMaximaReparcelamento = quantidadeMaximaReparcelamento;
		// parcelamentoQuantidadeReparcelamentoId =
		// parcelamentoQuantidadeReparcelamento.getId();
		// }
		// }
		// } else {
		// // [FS0006] Verificar a esxistência da quantidade de reparcelamentos
		// // para o perfil
		// throw new
		// ControladorException("atencao.nao.existe.condicao.por.quantidade.reparcelamentos.perfil");
		// }

		// 8. Obtem o percentual de entrada mínimo e taxa de juros por qtd de
		// prestações
		FiltroParcelamentoQuantidadePrestacao filtroParcelamentoQuantidadePrestacao = new FiltroParcelamentoQuantidadePrestacao(
				FiltroParcelamentoQuantidadePrestacao.TAXA_JUROS);

		filtroParcelamentoQuantidadePrestacao
				.adicionarParametro(new ParametroSimples(
						FiltroParcelamentoQuantidadePrestacao.PARCELAMENTO_QUANTIDADE_REPARCELAMENTO,
						parcelamentoQuantidadeReparcelamento.getId()));
		filtroParcelamentoQuantidadePrestacao
				.setCampoOrderBy(FiltroParcelamentoQuantidadePrestacao.QUANTIDADE_MAXIMA_PRESTACAO);

		Collection<ParcelamentoQuantidadePrestacao> colecaoParcelamentoQuantidadePrestacao = getControladorUtil()
				.pesquisar(filtroParcelamentoQuantidadePrestacao,
						ParcelamentoQuantidadePrestacao.class.getName());

		// [FS0007] Verificar a existência das condições do parcelamento por
		// quantidade de prestações
		if (colecaoParcelamentoQuantidadePrestacao == null
				|| colecaoParcelamentoQuantidadePrestacao.isEmpty()) {
			throw new ControladorException(
					"atencao.nao.existe.condicao.parcelamento.quantidade.prestacoes");
		}

		Object[] situacaoImovelPerfilParcelamento = new Object[4];
		situacaoImovelPerfilParcelamento[0] = (ParcelamentoPerfil) parcelamentoPerfil;
		situacaoImovelPerfilParcelamento[1] = (ImovelSituacao) imovelSituacao;
		situacaoImovelPerfilParcelamento[2] = (Collection) colecaoParcelamentoQuantidadePrestacao;
		situacaoImovelPerfilParcelamento[3] = (ParcelamentoQuantidadeReparcelamento) parcelamentoQuantidadeReparcelamento;

		return situacaoImovelPerfilParcelamento;
	}


	/**
	 * Permite efetuar o parcelamento dos débitos de um imóvel
	 * 
	 * [UC0214] Efetuar Parcelamento de Débitos
	 * 
	 * Gera os Débitos a Cobrar do Parcelamento
	 * 
	 * [SB0005] - Gerar Débitos a Cobrar do Parcelamento
	 * 
	 * @author Roberta Costa
	 * @date 29/03/2006
	 * 
	 * @param resolucaoDiretoria
	 * @param codigoImovel
	 * @param valorEntrada
	 * @param situacaoAgua
	 * @param situacaoEsgoto
	 * @return
	 */
	public void gerarDebitosACobrarParcelamento(Imovel imovel,
			Short numeroPrestacao, BigDecimal valorTotalContas,
			BigDecimal valorTotalGuiasPagamento,
			BigDecimal valorAcrescimosServicosCurtoPrazo,
			BigDecimal valorAcrescimosServicosLongoPrazo,
			BigDecimal valorAcrescimosParcelamentosCurtoPrazo,
			BigDecimal valorAcrescimosParcelamentosLongoPrazo,
			BigDecimal valorTotalAcrescimosImpontualidade,
			BigDecimal valorTotalServicosDebitosACobrarCurtoPrazo,
			BigDecimal valorTotalServicosDebitosACobrarLongoPrazo,
			BigDecimal valorTotalReparcelamentosCurtoPrazo,
			BigDecimal valorTotalReparcelamentosLongoPrazo,
			BigDecimal valorTotalJurosParcelamento, BigDecimal taxaJuros,
			Integer parcelamentoId, Collection<Categoria> colecaoCategoria,
			BigDecimal valorEntrada, Integer indicadorDividaAtiva, Usuario usuarioLogado,
			boolean isContaEntradaParcelamento, Integer anoMesGuiaEntrada, Integer maiorAnoMesConta) throws ControladorException {

		BigDecimal valorZero = new BigDecimal("0.00");

		// 1. Parcelamento de Contas
		if (valorTotalContas != null
				&& !valorTotalContas.equals(new BigDecimal("0.00"))) {
			
			DebitoTipo debitoTipoParcelamentoContas = null;
			
			if (indicadorDividaAtiva.intValue() == 1) {
				debitoTipoParcelamentoContas = filtrarDebitoTipo(DebitoTipo.PARCELAMENTO_CONTAS_DIVIDA_ATIVA);
			} else {
				debitoTipoParcelamentoContas = filtrarDebitoTipo(DebitoTipo.PARCELAMENTO_CONTAS);
			}

			if (valorEntrada.compareTo(valorZero) != 0
					&& valorEntrada.compareTo(valorTotalContas) < 0) {
				// valor entrada diferente de Zero e
				// menor q o valor total de contas

				valorTotalContas = valorTotalContas.subtract(valorEntrada);
				valorEntrada = valorZero;

			} else if (valorEntrada.compareTo(valorZero) != 0
					&& valorEntrada.compareTo(valorTotalContas) == 0) {
				// valor entrada diferente de Zero e
				// valor entrada igual a valor total de contas

				valorEntrada = valorZero;
				valorTotalContas = valorZero;

			} else if (valorEntrada.compareTo(valorZero) != 0
					&& valorEntrada.compareTo(valorTotalContas) > 0) {
				// valor entrada diferente de Zero e
				// valor entrada maior q o valor total de contas

				valorEntrada = valorEntrada.subtract(valorTotalContas);
				valorTotalContas = valorZero;

			}

			if (!valorTotalContas.equals(valorZero)) {
				// 1. Inclui o débito a cobrar para Parcelamento de Contas
				inserirDebitoACobrarDebitoTipo(debitoTipoParcelamentoContas,
						imovel, numeroPrestacao, valorTotalContas, taxaJuros,
						parcelamentoId, colecaoCategoria,
						ParcelamentoGrupo.DOCUMENTOS_EMITIDOS,
						DebitoCreditoSituacao.NORMAL,null, usuarioLogado,
						isContaEntradaParcelamento, anoMesGuiaEntrada, maiorAnoMesConta);
			}

		}

		// 2. Parcelamento de Guias de Pagamento
		if (valorTotalGuiasPagamento != null
				&& !valorTotalGuiasPagamento.equals(new BigDecimal("0.00"))) {
			DebitoTipo debitoTipoParcelamentoGuiasPagamento = filtrarDebitoTipo(DebitoTipo.PARCELAMENTO_GUIAS_PAGAMENTO);

			if (valorEntrada.compareTo(valorZero) != 0
					&& valorEntrada.compareTo(valorTotalGuiasPagamento) < 0) {
				// valor entrada diferente de Zero e
				// menor q o valor total de Guias de Pagamento

				valorTotalGuiasPagamento = valorTotalGuiasPagamento
						.subtract(valorEntrada);
				valorEntrada = valorZero;

			} else if (valorEntrada.compareTo(valorZero) != 0
					&& valorEntrada.compareTo(valorTotalGuiasPagamento) == 0) {
				// valor entrada diferente de Zero e
				// valor entrada igual a valor total de Guias de Pagamento

				valorEntrada = valorZero;
				valorTotalGuiasPagamento = valorZero;

			} else if (valorEntrada.compareTo(valorZero) != 0
					&& valorEntrada.compareTo(valorTotalGuiasPagamento) > 0) {
				// valor entrada diferente de Zero e
				// valor entrada maior q o valor total de Guias de Pagamento

				valorEntrada = valorEntrada.subtract(valorTotalGuiasPagamento);
				valorTotalGuiasPagamento = valorZero;

			}

			if (valorTotalGuiasPagamento.compareTo(valorZero) != 0) {
				// 2. Inclui o débito a cobrar para Parcelamento de Guias de
				// Pagamento
				inserirDebitoACobrarDebitoTipo(
						debitoTipoParcelamentoGuiasPagamento, imovel,
						numeroPrestacao, valorTotalGuiasPagamento, taxaJuros,
						parcelamentoId, colecaoCategoria,
						ParcelamentoGrupo.DOCUMENTOS_EMITIDOS,
						DebitoCreditoSituacao.NORMAL,null, usuarioLogado, 
						isContaEntradaParcelamento, anoMesGuiaEntrada, maiorAnoMesConta);
						
			}
		}

		// 3. Parcelamento de Acrescimos por Impontualidade
		if (valorTotalAcrescimosImpontualidade != null
				&& !valorTotalAcrescimosImpontualidade.equals(new BigDecimal(
						"0.00"))) {

			DebitoTipo debitoTipoParcelamentoAcrescimosImpontualidade = null;
			
			if (indicadorDividaAtiva.intValue() == 1) {
				debitoTipoParcelamentoAcrescimosImpontualidade = filtrarDebitoTipo(DebitoTipo.PARCELAMENTO_ACRESCIMOS_IMPONTUALIDADE_DIVIDA_ATIVA);
			} else {
				debitoTipoParcelamentoAcrescimosImpontualidade = filtrarDebitoTipo(DebitoTipo.PARCELAMENTO_ACRESCIMOS_IMPONTUALIDADE);
			}

			if (valorEntrada.compareTo(valorZero) != 0
					&& valorEntrada
							.compareTo(valorTotalAcrescimosImpontualidade) < 0) {
				// valor entrada diferente de Zero e
				// menor q o valor total de Acrescimos por Impontualidade

				valorTotalAcrescimosImpontualidade = valorTotalAcrescimosImpontualidade
						.subtract(valorEntrada);
				valorEntrada = valorZero;

			} else if (valorEntrada.compareTo(valorZero) != 0
					&& valorEntrada
							.compareTo(valorTotalAcrescimosImpontualidade) == 0) {
				// valor entrada diferente de Zero e
				// valor entrada igual a valor total de Acrescimos por
				// Impontualidade

				valorEntrada = valorZero;
				valorTotalAcrescimosImpontualidade = valorZero;

			} else if (valorEntrada.compareTo(valorZero) != 0
					&& valorEntrada
							.compareTo(valorTotalAcrescimosImpontualidade) > 0) {
				// valor entrada diferente de Zero e
				// valor entrada maior q o valor total de Acrescimos por
				// Impontualidade

				valorEntrada = valorEntrada
						.subtract(valorTotalAcrescimosImpontualidade);
				valorTotalAcrescimosImpontualidade = valorZero;

			}

			if (valorTotalAcrescimosImpontualidade.compareTo(valorZero) != 0) {
				// 3. Inclui o débito a cobrar para Parcelamento de Acrescimos
				// por
				// Impontualidade
				inserirDebitoACobrarDebitoTipo(
						debitoTipoParcelamentoAcrescimosImpontualidade, imovel,
						numeroPrestacao, valorTotalAcrescimosImpontualidade,
						taxaJuros, parcelamentoId, colecaoCategoria,
						ParcelamentoGrupo.ACRESCIMOS_POR_IMPONTUALIDADE,
						DebitoCreditoSituacao.NORMAL,null, usuarioLogado,
						isContaEntradaParcelamento, anoMesGuiaEntrada, maiorAnoMesConta);
			}
		}
		
		// Reparcelamento de acréscimos
		BigDecimal valorTotalAcrescimosDebitosACobrar = valorAcrescimosServicosCurtoPrazo.
				add(valorAcrescimosServicosLongoPrazo).
				add(valorAcrescimosParcelamentosCurtoPrazo).
				add(valorAcrescimosParcelamentosLongoPrazo);
		
		if (valorTotalAcrescimosDebitosACobrar.compareTo(BigDecimal.ZERO) > 0) {
			valorTotalServicosDebitosACobrarCurtoPrazo = valorTotalServicosDebitosACobrarCurtoPrazo.subtract(valorAcrescimosServicosCurtoPrazo);
			valorTotalServicosDebitosACobrarLongoPrazo = valorTotalServicosDebitosACobrarLongoPrazo.subtract(valorAcrescimosServicosLongoPrazo);
			valorTotalReparcelamentosCurtoPrazo = valorTotalReparcelamentosCurtoPrazo.subtract(valorAcrescimosParcelamentosCurtoPrazo);
			valorTotalReparcelamentosLongoPrazo = valorTotalReparcelamentosLongoPrazo.subtract(valorAcrescimosParcelamentosLongoPrazo);
			
			DebitoTipo debitoTipoReparcelamentoAcrescimos = filtrarDebitoTipo(DebitoTipo.REPARCELAMENTO_ACRESCIMOS);
			
			if (valorEntrada.compareTo(valorZero) != 0
					&& valorEntrada
							.compareTo(valorTotalAcrescimosDebitosACobrar) < 0) {
				// valor entrada diferente de Zero e
				// menor q o valor total de Debitos A Cobrar de Curto Prazo

				valorTotalAcrescimosDebitosACobrar = valorTotalAcrescimosDebitosACobrar
						.subtract(valorEntrada);
				valorEntrada = valorZero;

			} else if (valorEntrada.compareTo(valorZero) != 0
					&& valorEntrada
							.compareTo(valorTotalAcrescimosDebitosACobrar) == 0) {
				// valor entrada diferente de Zero e
				// valor entrada igual a valor total de Debitos A Cobrar de
				// Curto Prazo

				valorEntrada = valorZero;
				valorTotalAcrescimosDebitosACobrar = valorZero;

			} else if (valorEntrada.compareTo(valorZero) != 0
					&& valorEntrada
							.compareTo(valorTotalAcrescimosDebitosACobrar) > 0) {
				// valor entrada diferente de Zero e
				// valor entrada maior q o valor total de Debitos A Cobrar de
				// Curto Prazo

				valorEntrada = valorEntrada
						.subtract(valorTotalAcrescimosDebitosACobrar);
				valorTotalAcrescimosDebitosACobrar = valorZero;

			}

			if (valorTotalAcrescimosDebitosACobrar.compareTo(valorZero) != 0) {
				// 4. Inclui o débito a cobrar para Parcelamento de ADebitos A
				// Cobrar de
				// Curto Prazo
				inserirDebitoACobrarDebitoTipo(
						debitoTipoReparcelamentoAcrescimos, imovel,
						numeroPrestacao,
						valorTotalAcrescimosDebitosACobrar, taxaJuros,
						parcelamentoId, colecaoCategoria,
						ParcelamentoGrupo.ACRESCIMOS_POR_IMPONTUALIDADE,
						DebitoCreditoSituacao.NORMAL,null, usuarioLogado, 
						isContaEntradaParcelamento, anoMesGuiaEntrada, maiorAnoMesConta);
			}

		}
		
		// 4. Parcelamento de Debitos A Cobrar de Curto Prazo
		if (valorTotalServicosDebitosACobrarCurtoPrazo != null
				&& !valorTotalServicosDebitosACobrarCurtoPrazo
						.equals(new BigDecimal("0.00"))) {
			
			DebitoTipo debitoTipoParcelamentoDebitosACobrarCurtoPrazo = filtrarDebitoTipo(DebitoTipo.PARCELAMENTO_DEBITO_A_COBRAR_CURTO_PRAZO);

			if (valorEntrada.compareTo(valorZero) != 0
					&& valorEntrada
							.compareTo(valorTotalServicosDebitosACobrarCurtoPrazo) < 0) {
				// valor entrada diferente de Zero e
				// menor q o valor total de Debitos A Cobrar de Curto Prazo

				valorTotalServicosDebitosACobrarCurtoPrazo = valorTotalServicosDebitosACobrarCurtoPrazo
						.subtract(valorEntrada);
				valorEntrada = valorZero;

			} else if (valorEntrada.compareTo(valorZero) != 0
					&& valorEntrada
							.compareTo(valorTotalServicosDebitosACobrarCurtoPrazo) == 0) {
				// valor entrada diferente de Zero e
				// valor entrada igual a valor total de Debitos A Cobrar de
				// Curto Prazo

				valorEntrada = valorZero;
				valorTotalServicosDebitosACobrarCurtoPrazo = valorZero;

			} else if (valorEntrada.compareTo(valorZero) != 0
					&& valorEntrada
							.compareTo(valorTotalServicosDebitosACobrarCurtoPrazo) > 0) {
				// valor entrada diferente de Zero e
				// valor entrada maior q o valor total de Debitos A Cobrar de
				// Curto Prazo

				valorEntrada = valorEntrada
						.subtract(valorTotalServicosDebitosACobrarCurtoPrazo);
				valorTotalServicosDebitosACobrarCurtoPrazo = valorZero;

			}

			if (valorTotalServicosDebitosACobrarCurtoPrazo.compareTo(valorZero) != 0) {
				// 4. Inclui o débito a cobrar para Parcelamento de ADebitos A
				// Cobrar de
				// Curto Prazo
				inserirDebitoACobrarDebitoTipo(
						debitoTipoParcelamentoDebitosACobrarCurtoPrazo, imovel,
						numeroPrestacao,
						valorTotalServicosDebitosACobrarCurtoPrazo, taxaJuros,
						parcelamentoId, colecaoCategoria,
						ParcelamentoGrupo.FINANCIAMENTOS_A_COBRAR_CURTO_PRAZO,
						DebitoCreditoSituacao.NORMAL,null, usuarioLogado, 
						isContaEntradaParcelamento, anoMesGuiaEntrada, maiorAnoMesConta);
			}
		}
		
		// 5. Parcelamento de Debitos A Cobrar de Longo Prazo
		if (valorTotalServicosDebitosACobrarLongoPrazo != null
				&& !valorTotalServicosDebitosACobrarLongoPrazo
						.equals(new BigDecimal("0.00"))) {
			DebitoTipo debitoTipoParcelamentoDebitosACobrarLongoPrazo = filtrarDebitoTipo(DebitoTipo.PARCELAMENTO_DEBITO_A_COBRAR_LONGO_PRAZO);

			if (valorEntrada.compareTo(valorZero) != 0
					&& valorEntrada
							.compareTo(valorTotalServicosDebitosACobrarLongoPrazo) < 0) {
				// valor entrada diferente de Zero e
				// menor q o valor total de Debitos A Cobrar de Longo Prazo

				valorTotalServicosDebitosACobrarLongoPrazo = valorTotalServicosDebitosACobrarLongoPrazo
						.subtract(valorEntrada);
				valorEntrada = valorZero;

			} else if (valorEntrada.compareTo(valorZero) != 0
					&& valorEntrada
							.compareTo(valorTotalServicosDebitosACobrarLongoPrazo) == 0) {
				// valor entrada diferente de Zero e
				// valor entrada igual a valor total de Debitos A Cobrar de
				// Longo Prazo

				valorEntrada = valorZero;
				valorTotalServicosDebitosACobrarLongoPrazo = valorZero;

			} else if (valorEntrada.compareTo(valorZero) != 0
					&& valorEntrada
							.compareTo(valorTotalServicosDebitosACobrarLongoPrazo) > 0) {
				// valor entrada diferente de Zero e
				// valor entrada maior q o valor total de Debitos A Cobrar de
				// Longo Prazo

				valorEntrada = valorEntrada
						.subtract(valorTotalServicosDebitosACobrarLongoPrazo);
				valorTotalServicosDebitosACobrarLongoPrazo = valorZero;

			}

			if (valorTotalServicosDebitosACobrarLongoPrazo.compareTo(valorZero) != 0) {
				// 5. Inclui o débito a cobrar para Parcelamento de Debitos A
				// Cobrar
				// de
				// Longo Prazo
				inserirDebitoACobrarDebitoTipo(
						debitoTipoParcelamentoDebitosACobrarLongoPrazo, imovel,
						numeroPrestacao,
						valorTotalServicosDebitosACobrarLongoPrazo, taxaJuros,
						parcelamentoId, colecaoCategoria,
						ParcelamentoGrupo.FINANCIAMENTOS_A_COBRAR_LONGO_PRAZO,
						DebitoCreditoSituacao.NORMAL,null, usuarioLogado, 
						isContaEntradaParcelamento, anoMesGuiaEntrada, maiorAnoMesConta);
			}
		}

		// 6. Reparcelamentos Curto Prazo
		if (valorTotalReparcelamentosCurtoPrazo != null
				&& !valorTotalReparcelamentosCurtoPrazo.equals(new BigDecimal(
						"0.00"))) {
			DebitoTipo debitoTipoReparcelamentosCurtoPrazo = null;
			
			if (indicadorDividaAtiva.intValue() == 1) {
				debitoTipoReparcelamentosCurtoPrazo = filtrarDebitoTipo(DebitoTipo.REPARCELAMENTOS_CURTO_PRAZO_DIVIDA_ATIVA);
			} else {
				debitoTipoReparcelamentosCurtoPrazo = filtrarDebitoTipo(DebitoTipo.REPARCELAMENTOS_CURTO_PRAZO);
			}

			if (valorEntrada.compareTo(valorZero) != 0
					&& valorEntrada
							.compareTo(valorTotalReparcelamentosCurtoPrazo) < 0) {
				// valor entrada diferente de Zero e
				// menor q o valor total de Reparcelamentos Curto Prazo

				valorTotalReparcelamentosCurtoPrazo = valorTotalReparcelamentosCurtoPrazo
						.subtract(valorEntrada);
				valorEntrada = valorZero;

			} else if (valorEntrada.compareTo(valorZero) != 0
					&& valorEntrada
							.compareTo(valorTotalReparcelamentosCurtoPrazo) == 0) {
				// valor entrada diferente de Zero e
				// valor entrada igual a valor total de Reparcelamentos Curto
				// Prazo

				valorEntrada = valorZero;
				valorTotalReparcelamentosCurtoPrazo = valorZero;

			} else if (valorEntrada.compareTo(valorZero) != 0
					&& valorEntrada
							.compareTo(valorTotalReparcelamentosCurtoPrazo) > 0) {
				// valor entrada diferente de Zero e
				// valor entrada maior q o valor total de Reparcelamentos Curto
				// Prazo

				valorEntrada = valorEntrada
						.subtract(valorTotalReparcelamentosCurtoPrazo);
				valorTotalReparcelamentosCurtoPrazo = valorZero;

			}

			if (valorTotalReparcelamentosCurtoPrazo.compareTo(valorZero) != 0) {
				// 6. Inclui Reparcelamentos Longo Prazo
				inserirDebitoACobrarDebitoTipo(
						debitoTipoReparcelamentosCurtoPrazo, imovel,
						numeroPrestacao, valorTotalReparcelamentosCurtoPrazo,
						taxaJuros, parcelamentoId, colecaoCategoria,
						ParcelamentoGrupo.PARCELAMENTOS_A_COBRAR_CURTO_PRAZO,
						DebitoCreditoSituacao.NORMAL,null, usuarioLogado,
						isContaEntradaParcelamento, anoMesGuiaEntrada, maiorAnoMesConta);
			}
		}

		// 7. Reparcelamentos Longo Prazo
		if (valorTotalReparcelamentosLongoPrazo != null
				&& !valorTotalReparcelamentosLongoPrazo.equals(new BigDecimal(
						"0.00"))) {
			
			DebitoTipo debitoTipoReparcelamentosLongoPrazo = null;
			
			if (indicadorDividaAtiva.intValue() == 1) {
				debitoTipoReparcelamentosLongoPrazo = filtrarDebitoTipo(DebitoTipo.REPARCELAMENTOS_LONGO_PRAZO_DIVIDA_ATIVA);
			} else {
				debitoTipoReparcelamentosLongoPrazo = filtrarDebitoTipo(DebitoTipo.REPARCELAMENTOS_LONGO_PRAZO);
			}

			if (valorEntrada.compareTo(valorZero) != 0
					&& valorEntrada
							.compareTo(valorTotalReparcelamentosLongoPrazo) < 0) {
				// valor entrada diferente de Zero e
				// menor q o valor total de Reparcelamentos Longo Prazo

				valorTotalReparcelamentosLongoPrazo = valorTotalReparcelamentosLongoPrazo
						.subtract(valorEntrada);
				valorEntrada = valorZero;

			} else if (valorEntrada.compareTo(valorZero) != 0
					&& valorEntrada
							.compareTo(valorTotalReparcelamentosLongoPrazo) == 0) {
				// valor entrada diferente de Zero e
				// valor entrada igual a valor total de Reparcelamentos Longo
				// Prazo

				valorEntrada = valorZero;
				valorTotalReparcelamentosLongoPrazo = valorZero;

			} else if (valorEntrada.compareTo(valorZero) != 0
					&& valorEntrada
							.compareTo(valorTotalReparcelamentosLongoPrazo) > 0) {
				// valor entrada diferente de Zero e
				// valor entrada maior q o valor total de Reparcelamentos Longo
				// Prazo

				valorEntrada = valorEntrada
						.subtract(valorTotalReparcelamentosLongoPrazo);
				valorTotalReparcelamentosLongoPrazo = valorZero;

			}

			if (valorTotalReparcelamentosLongoPrazo.compareTo(valorZero) != 0) {

				// 7. Inclui Reparcelamentos Longo Prazo
				inserirDebitoACobrarDebitoTipo(
						debitoTipoReparcelamentosLongoPrazo, imovel,
						numeroPrestacao, valorTotalReparcelamentosLongoPrazo,
						taxaJuros, parcelamentoId, colecaoCategoria,
						ParcelamentoGrupo.PARCELAMENTOS_A_COBRAR_LONGO_PRAZO,
						DebitoCreditoSituacao.NORMAL,null, usuarioLogado, 
						isContaEntradaParcelamento, anoMesGuiaEntrada, maiorAnoMesConta);
			}
		}

		// 8. Juros sobre Parcelamento
		if (valorTotalJurosParcelamento != null
				&& !valorTotalJurosParcelamento.equals(new BigDecimal("0.00"))) {
			
			DebitoTipo debitoTipoJurosParcelamento = null;
			
			if (indicadorDividaAtiva.intValue() == 1) {
				debitoTipoJurosParcelamento = filtrarDebitoTipo(DebitoTipo.JUROS_SOBRE_PARCELAMENTO_DIVIDA_ATIVA);
			} else {
				debitoTipoJurosParcelamento = filtrarDebitoTipo(DebitoTipo.JUROS_SOBRE_PARCELAMENTO);
			}

			if (valorEntrada.compareTo(valorZero) != 0
					&& valorEntrada.compareTo(valorTotalJurosParcelamento) < 0) {
				// valor entrada diferente de Zero e
				// menor q o valor total de Reparcelamentos Longo Prazo

				valorTotalJurosParcelamento = valorTotalJurosParcelamento
						.subtract(valorEntrada);
				valorEntrada = valorZero;

			} else if (valorEntrada.compareTo(valorZero) != 0
					&& valorEntrada.compareTo(valorTotalJurosParcelamento) == 0) {
				// valor entrada diferente de Zero e
				// valor entrada igual a valor total de Reparcelamentos Longo
				// Prazo

				valorEntrada = valorZero;
				valorTotalJurosParcelamento = valorZero;

			} else if (valorEntrada.compareTo(valorZero) != 0
					&& valorEntrada.compareTo(valorTotalJurosParcelamento) > 0) {
				// valor entrada diferente de Zero e
				// valor entrada maior q o valor total de Reparcelamentos Longo
				// Prazo

				valorEntrada = valorEntrada
						.subtract(valorTotalJurosParcelamento);
				valorTotalJurosParcelamento = valorZero;

			}

			if (valorTotalJurosParcelamento.compareTo(valorZero) != 0) {
				// 8. Juros sobre Parcelamento
				inserirDebitoACobrarDebitoTipo(debitoTipoJurosParcelamento,
						imovel, numeroPrestacao, valorTotalJurosParcelamento,
						taxaJuros, parcelamentoId, colecaoCategoria,
						ParcelamentoGrupo.JUROS_COBRADOS,
						DebitoCreditoSituacao.NORMAL,null, usuarioLogado, 
						isContaEntradaParcelamento, anoMesGuiaEntrada, maiorAnoMesConta);
			}
		}
	}

	/**
	 * Permite efetuar o parcelamento dos débitos de um imóvel
	 * 
	 * [UC0214] Efetuar Parcelamento de Débitos
	 * 
	 * Gera os Crédito a Realizar do Parcelamento
	 * 
	 * [SB0006] - Gerar Crédito a Realizar do Parcelamento
	 * 
	 * @author Roberta Costa
	 * @date 29/03/2006
	 * 
	 * @param resolucaoDiretoria
	 * @param codigoImovel
	 * @param valorEntrada
	 * @param situacaoAgua
	 * @param situacaoEsgoto
	 * @return
	 */
	public void gerarCreditoARealizarParcelamento(Imovel imovel,
			Short numeroPrestacao, BigDecimal taxaJuros,
			Integer parcelamentoId,
			BigDecimal valorDescontoAcresimosImpontualidade,
			BigDecimal valorDescontoAntiguidadeDebito,
			BigDecimal valorDescontoInatividadeLigacaoAgua,
			BigDecimal valorCreditoAnteriores,
			Collection<Categoria> colecaoCategoria,
			BigDecimal valorDescontoSancoesRDEspecial,
			BigDecimal descontoTarifaSocialRDEspecial,
			boolean isContaEntradaParcelamento, Integer anoMesEntradaGuia, Integer maiorAnoMesConta, BigDecimal valorDescontoSobreDebitoTotal)
			throws ControladorException {

		// 1. Desconto por Acréscimo por Impontualidade
		if (valorDescontoAcresimosImpontualidade != null
				&& !valorDescontoAcresimosImpontualidade.equals(new BigDecimal(
						"0.00"))) {
			CreditoTipo creditoTipoDescontoAcrescimoImpotualidade = filtrarCreditoTipo(CreditoTipo.DESCONTO_ACRESCIMOS_IMPONTUALIDADE);

			// 1. Inclui o crédito a realizar para Desconto Acréscimo por
			// Impontualidade
			inserirCreditoARealizarCreditoTipo(
					creditoTipoDescontoAcrescimoImpotualidade, imovel,
					valorDescontoAcresimosImpontualidade, numeroPrestacao,
					parcelamentoId, colecaoCategoria, isContaEntradaParcelamento,anoMesEntradaGuia, maiorAnoMesConta);
		}

		// 2. Desconto por Antiguidade do Débito
		if (valorDescontoAntiguidadeDebito != null
				&& !valorDescontoAntiguidadeDebito
						.equals(new BigDecimal("0.00"))) {
			CreditoTipo creditoTipoAntiguidadeDebito = filtrarCreditoTipo(CreditoTipo.DESCONTO_ANTIGUIDADE_DEBITO);

			// 2. Inclui o crédito a realizar para Desconto por Antiguidade do
			// Débito
			inserirCreditoARealizarCreditoTipo(creditoTipoAntiguidadeDebito,
					imovel, valorDescontoAntiguidadeDebito, numeroPrestacao,
					parcelamentoId, colecaoCategoria, isContaEntradaParcelamento,anoMesEntradaGuia, maiorAnoMesConta);
		}

		// 3. Desconto por Inatividade dea Ligação da Água
		if (valorDescontoInatividadeLigacaoAgua != null
				&& !valorDescontoInatividadeLigacaoAgua.equals(new BigDecimal(
						"0.00"))) {
			CreditoTipo creditoTipoInatividadeLigacaoAgua = filtrarCreditoTipo(CreditoTipo.DESCONTO_INATIVIDADE_LIGACAO_AGUA);

			// 3. Inclui o crédito a realizar para Desconto por Inatividade dea
			// Ligação da Água
			inserirCreditoARealizarCreditoTipo(
					creditoTipoInatividadeLigacaoAgua, imovel,
					valorDescontoInatividadeLigacaoAgua, numeroPrestacao,
					parcelamentoId, colecaoCategoria, isContaEntradaParcelamento, anoMesEntradaGuia, maiorAnoMesConta);
		}

		// 4. Créditos Anteriores
		if (valorCreditoAnteriores != null
				&& !valorCreditoAnteriores.equals(new BigDecimal("0.00"))) {
			CreditoTipo creditoTipoCreditoAnteriores = filtrarCreditoTipo(CreditoTipo.CREDITOS_ANTERIORES);

			// 4. Inclui o crédito a realizar para Créditos Anteriores
			inserirCreditoARealizarCreditoTipo(creditoTipoCreditoAnteriores,
					imovel, valorCreditoAnteriores, numeroPrestacao,
					parcelamentoId, colecaoCategoria, isContaEntradaParcelamento, anoMesEntradaGuia, maiorAnoMesConta);
		}

		// 5. Desconto por Sanções
		if (valorDescontoSancoesRDEspecial != null
				&& !valorDescontoSancoesRDEspecial
						.equals(new BigDecimal("0.00"))) {
			CreditoTipo creditoTipoSancoes = filtrarCreditoTipo(CreditoTipo.DESCONTO_SANCOES);

			// 5. Inclui o crédito a realizar para Desconto por Sanções
			inserirCreditoARealizarCreditoTipo(creditoTipoSancoes, imovel,
					valorDescontoSancoesRDEspecial, numeroPrestacao,
					parcelamentoId, colecaoCategoria, isContaEntradaParcelamento, anoMesEntradaGuia, maiorAnoMesConta);
		}

		// 6. Desconto por Tarifa Social
		if (descontoTarifaSocialRDEspecial != null
				&& !descontoTarifaSocialRDEspecial
						.equals(new BigDecimal("0.00"))) {
			CreditoTipo creditoTipoTarifaSocial = filtrarCreditoTipo(CreditoTipo.DESCONTO_TARIFA_SOCIAL);

			// 5. Inclui o crédito a realizar para Desconto por Tarifa Social
			inserirCreditoARealizarCreditoTipo(creditoTipoTarifaSocial, imovel,
					descontoTarifaSocialRDEspecial, numeroPrestacao,
					parcelamentoId, colecaoCategoria, isContaEntradaParcelamento, anoMesEntradaGuia, maiorAnoMesConta);
		}
		
		if(valorDescontoSobreDebitoTotal != null
                && !valorDescontoSobreDebitoTotal.equals(new BigDecimal("0.00"))) {
		        
			CreditoTipo creditoTipoSobreDebitoTotal = filtrarCreditoTipo(CreditoTipo.DESCONTO_DEBITO_TOTAL);
		
		    // Inclui o crédito a realizar para Desconto sobre o debito total
		    inserirCreditoARealizarCreditoTipo(creditoTipoSobreDebitoTotal, imovel,
		    		valorDescontoSobreDebitoTotal, numeroPrestacao, parcelamentoId,
		    		colecaoCategoria,isContaEntradaParcelamento, anoMesEntradaGuia, maiorAnoMesConta);
		}

	}

	/**
	 * Permite efetuar o parcelamento dos débitos de um imóvel
	 * 
	 * [UC0214] Efetuar Parcelamento de Débitos
	 * 
	 * Insere Crédito A Realizar de acordo com Tipo do Crédito do Imóvel
	 * 
	 * inserirCreditoARealizarCreditoTipo
	 * 
	 * @author Roberta Costa - Vivianne Sousa
	 * @date 05/04/2006 - 27/09/2006
	 * 
	 * @param resolucaoDiretoria
	 * @param codigoImovel
	 * @param valorEntrada
	 * @param situacaoAgua
	 * @param situacaoEsgoto
	 * @return
	 */
	public void inserirCreditoARealizarCreditoTipo(CreditoTipo creditoTipo,
			Imovel imovel, BigDecimal valorCredito, Short numeroPrestacao,
			Integer parcelamentoId, Collection<Categoria> colecaoCategoria, 
			boolean isContaEntradaParcelamento, Integer anoMesEntradaGuia, Integer maiorAnoMesConta)
			throws ControladorException {

		SistemaParametro sistemaParametros = getControladorUtil()
				.pesquisarParametrosDoSistema();

		// Insere o crédito a realizar na tabela CREDITO_A_REALIZAR_GERAL
		CreditoARealizarGeral creditoARealizarGeral = new CreditoARealizarGeral();
		creditoARealizarGeral.setIndicadorHistorico(new Short("2"));
		creditoARealizarGeral.setUltimaAlteracao(new Date());
		// Recupera o código do crédito a realizar geral inserido Integer
		Integer creditoARealizarGeralIdBase = (Integer) getControladorUtil()
				.inserir(creditoARealizarGeral);
		creditoARealizarGeral.setId(creditoARealizarGeralIdBase);

		// Seta o objeto crédito a realizar com os parâmtros solicitados
		CreditoARealizar creditoARealizar = new CreditoARealizar();

		creditoARealizar.setId(creditoARealizarGeralIdBase);
		creditoARealizar.setCreditoARealizarGeral(creditoARealizarGeral);
		creditoARealizar.setImovel(imovel);
		creditoARealizar.setCreditoTipo(creditoTipo);
		creditoARealizar.setGeracaoCredito(new Date());
		creditoARealizar.setAnoMesReferenciaCredito(sistemaParametros
				.getAnoMesFaturamento());
		creditoARealizar.setAnoMesCobrancaCredito(sistemaParametros
				.getAnoMesArrecadacao());
//		creditoARealizar.setAnoMesReferenciaContabil(sistemaParametros.getAnoMesFaturamento());
	    //alterado por Vivianne Sousa 01/09/2008 
        //analista :Aryed 
        Integer referenciaContabil = obterReferenciaContabilParcelamentoOUConta(isContaEntradaParcelamento, anoMesEntradaGuia, maiorAnoMesConta);
        creditoARealizar.setAnoMesReferenciaContabil(referenciaContabil);
        
		creditoARealizar.setValorCredito(valorCredito);
		creditoARealizar.setValorResidualMesAnterior(new BigDecimal("0.00"));
		creditoARealizar.setNumeroPrestacaoCredito(numeroPrestacao);
		creditoARealizar.setNumeroPrestacaoRealizada(new Short("0"));
		creditoARealizar.setLocalidade(imovel.getLocalidade());
		creditoARealizar.setQuadra(imovel.getQuadra());
		creditoARealizar.setCodigoSetorComercial(imovel.getSetorComercial()
				.getCodigo());
		creditoARealizar.setNumeroQuadra(imovel.getQuadra().getNumeroQuadra());
		creditoARealizar.setNumeroLote(imovel.getLote());
		creditoARealizar.setNumeroSubLote(imovel.getSubLote());

		/*
		 * RegistroAtendimento registroAtendimento = new RegistroAtendimento();
		 * registroAtendimento.setId(new Integer("1"));
		 * creditoARealizar.setRegistroAtendimento(registroAtendimento);
		 */
		creditoARealizar.setRegistroAtendimento(null);
		creditoARealizar.setOrdemServico(null);

		creditoARealizar.setLancamentoItemContabil(creditoTipo
				.getLancamentoItemContabil());

		DebitoCreditoSituacao debitoCreditoSituacaoAtual = new DebitoCreditoSituacao();
		debitoCreditoSituacaoAtual.setId(DebitoCreditoSituacao.NORMAL);
		creditoARealizar
				.setDebitoCreditoSituacaoAtual(debitoCreditoSituacaoAtual);

		creditoARealizar.setDebitoCreditoSituacaoAnterior(null);

		CreditoOrigem creditoOrigem = new CreditoOrigem();
		creditoOrigem.setId(CreditoOrigem.DESCONTOS_CONCEDIDOS_NO_PARCELAMENTO);
		creditoARealizar.setCreditoOrigem(creditoOrigem);

		Parcelamento parcelamento = new Parcelamento();
		parcelamento.setId(parcelamentoId);
		creditoARealizar.setParcelamento(parcelamento);

		creditoARealizar.setUltimaAlteracao(new Date());

		// Insere o crédito a realizar na base
		// Integer creditoARealizarIdBase = (Integer)
		getControladorUtil().inserir(creditoARealizar);

		// 2.1. [UC0185] Obter Valor por Categoria
		Collection<BigDecimal> colecaoValorCategoria = getControladorImovel()
				.obterValorPorCategoria(colecaoCategoria, valorCredito);

		// Cria as iterações de categoria e valor
		Iterator iteratorCategoria = colecaoCategoria.iterator();
		Iterator iteratorValorCategoria = colecaoValorCategoria.iterator();

		// Laço para criar os débitos a cobrar por categoria
		while (iteratorCategoria.hasNext()) {
			// Recupera a categoria
			Categoria categoria = (Categoria) iteratorCategoria.next();

			// Recupera o valor da categoria
			BigDecimal valorPorCategoria = (BigDecimal) iteratorValorCategoria
					.next();

			// Cria o débito a cobrar categoria
			CreditoARealizarCategoria creditoARealizarCategoria = new CreditoARealizarCategoria();

			CreditoARealizarCategoriaPK creditoARealizarCategoriaPK = new CreditoARealizarCategoriaPK(
					creditoARealizar.getId(), categoria.getId());
			creditoARealizarCategoria.setComp_id(creditoARealizarCategoriaPK);

			/*
			 * CreditoARealizar creditoARealizarBase = new CreditoARealizar();
			 * creditoARealizarBase.setId(creditoARealizarIdBase);
			 * creditoARealizarCategoria.setCreditoARealizar(creditoARealizarBase);
			 */
			creditoARealizarCategoria.setCreditoARealizar(creditoARealizar);

			creditoARealizarCategoria.setCategoria(categoria);
			creditoARealizarCategoria.setQuantidadeEconomia(categoria
					.getQuantidadeEconomiasCategoria());
			creditoARealizarCategoria.setValorCategoria(valorPorCategoria);
			creditoARealizarCategoria.setUltimaAlteracao(new Date());

			// 2.2. Inclui na tabela DEBITO_A_COBRAR_CATEGORIA
			getControladorUtil().inserir(creditoARealizarCategoria);
		}
	}

	/**
	 * Permite efetuar o parcelamento dos débitos de um imóvel
	 * 
	 * [UC0214] Efetuar Parcelamento de Débitos
	 * 
	 * Pega o Tipo do Crédito de acordo com a constante informada
	 * 
	 * filtrarCreditoTipo
	 * 
	 * @author Roberta Costa
	 * @date 05/04/2006
	 * 
	 * @param tipoCredito
	 * @return
	 * @throws ControladorException
	 */
	public CreditoTipo filtrarCreditoTipo(Integer tipoCredito)
			throws ControladorException {
		FiltroCreditoTipo filtroCreditoTipo = new FiltroCreditoTipo();

		filtroCreditoTipo.adicionarParametro(new ParametroSimples(
				FiltroCreditoTipo.ID, tipoCredito));

		Collection colecaoCreditoTipo = this.getControladorUtil().pesquisar(
				filtroCreditoTipo, CreditoTipo.class.getName());

		CreditoTipo creditoTipo = new CreditoTipo();
		if (colecaoCreditoTipo != null && !colecaoCreditoTipo.isEmpty()) {
			creditoTipo = (CreditoTipo) colecaoCreditoTipo.iterator().next();
		}
		return creditoTipo;
	}

	/**
	 * Permite efetuar o parcelamento dos débitos de um imóvel
	 * 
	 * [UC0214] Efetuar Parcelamento de Débitos
	 * 
	 * Gera os a Entrada do Parcelamento
	 * 
	 * [SB0007] - Gerar a Entrada do Parcelamento
	 * 
	 * @author Roberta Costa
	 * @date 29/03/2006
	 * 
	 * @param resolucaoDiretoria
	 * @param codigoImovel
	 * @param valorEntrada
	 * @param situacaoAgua
	 * @param situacaoEsgoto
	 * @return
	 */
	public void gerarEntradaParcelamento(Imovel imovel,
			BigDecimal valorEntrada, BigDecimal taxaJuros,
			Integer parcelamentoId, Collection<Categoria> colecaoCategoria,
			Collection<ContaValoresHelper> colecaoContaValores,
			Usuario usuarioLogado, SistemaParametro sistemaParametro,
			boolean isContaEntradaParcelamento, Integer anoMesEntradaGuia, Integer maiorAnoMesConta) throws ControladorException {

		Collection<Conta> colecaoContaEP = new ArrayList<Conta>();
		boolean marcadaEP = false;

		if (colecaoContaValores != null && !colecaoContaValores.isEmpty()) {
			Iterator contaValores = colecaoContaValores.iterator();

			while (contaValores.hasNext()) {
				ContaValoresHelper contaValoresHelper = (ContaValoresHelper) contaValores
						.next();

				if (contaValoresHelper.getIndicadorContasDebito() != null
						&& contaValoresHelper.getIndicadorContasDebito()
								.equals(new Integer("1"))) {

					marcadaEP = true;
					colecaoContaEP.add(contaValoresHelper.getConta());
				}
			}
		}
		// 1. Caso existam contas marcadas como entrada de parcelamento(EP)
		if (marcadaEP) {

			// 1.1 Colocar as contas marcadas como EP em revisão
			// com o motivo correspondente a entrada de Parcelamento
			ContaMotivoRevisao contaMotivoRevisao = new ContaMotivoRevisao();
			contaMotivoRevisao
					.setId(ContaMotivoRevisao.REVISAO_ENTRADA_DE_PARCELAMENTO);
			getControladorFaturamento().colocarRevisaoConta(colecaoContaEP,
					null, contaMotivoRevisao, usuarioLogado, true);

			// 1.2 Alterar o vencimento das contas marcadas como EP para a data
			// corrente mais 3 dias
			Date novaDataVencimento = Util.adicionarNumeroDiasDeUmaData(
					new Date(), 3);
			getControladorFaturamento().alterarVencimentoConta(colecaoContaEP,
					null, novaDataVencimento,usuarioLogado);

			// 1.3 Associar as contas marcadas como EP ao parcelamento
			// atualiza PARC_ID da tabela CONTA com o id do parcelamento
			Parcelamento parcelamento = new Parcelamento();
			parcelamento.setId(parcelamentoId);
			Iterator iteratorConta = colecaoContaEP.iterator();
			while (iteratorConta.hasNext()) {
				Conta conta = (Conta) iteratorConta.next();
				conta.setParcelamento(parcelamento);
				try {
					repositorioCobranca.associarContaParcelamento(conta);
				} catch (ErroRepositorioException e) {
					e.printStackTrace();
				}
			}

		} else {
			// 2.
			if (!valorEntrada.equals(new BigDecimal("0.00"))) {

				// Insere a guia de pagamento na tabela GUIA_PAGAMENTO_GERAL
				GuiaPagamentoGeral guiaPagamentoGeral = new GuiaPagamentoGeral();
				guiaPagamentoGeral.setIndicadorHistorico(new Short("2"));
				guiaPagamentoGeral.setUltimaAlteracao(new Date());
				// Recupera o código da guia de pagamento geral inserido Integer
				Integer guiaPagamentoGeralIdBase = (Integer) getControladorUtil()
						.inserir(guiaPagamentoGeral);
				guiaPagamentoGeral.setId(guiaPagamentoGeralIdBase);

				// 1. Gera os dados relativos a entrada do parcelamento
				GuiaPagamento guiaPagamento = new GuiaPagamento();

				guiaPagamento.setId(guiaPagamentoGeralIdBase);
				guiaPagamento.setGuiaPagamentoGeral(guiaPagamentoGeral);
				guiaPagamento.setLocalidade(imovel.getLocalidade());
				guiaPagamento.setImovel(imovel);
				guiaPagamento.setCliente(null);
//				guiaPagamento.setAnoMesReferenciaContabil(sistemaParametros.getAnoMesFaturamento());
			    //alterado por Vivianne Sousa 01/09/2008 
		        //analista :Aryed 
		        Integer referenciaContabil = obterReferenciaContabilParcelamentoOUConta(isContaEntradaParcelamento, anoMesEntradaGuia, maiorAnoMesConta);
		        guiaPagamento.setAnoMesReferenciaContabil(referenciaContabil);
				
				guiaPagamento.setDataEmissao(new Date());
				
				// CRC_4379
				// alterado por Hugo Leonardo 11/05/2010
				// analista: Ana Cristina
				//guiaPagamento.setDataVencimento(Util.adicionarNumeroDiasDeUmaData(new Date(), 3));
				int numeroDiasVencimentoEntradaParcelamento = sistemaParametro.getNumeroDiasVencimentoEntradaParcelamento().intValue();
				guiaPagamento.setDataVencimento(Util.adicionarNumeroDiasDeUmaData(new Date(), numeroDiasVencimentoEntradaParcelamento));
				
				guiaPagamento.setValorDebito(valorEntrada);
				guiaPagamento.setUltimaAlteracao(new Date());

				RegistroAtendimento registroAtendimento = new RegistroAtendimento();
				registroAtendimento.setId(null);
				guiaPagamento.setRegistroAtendimento(registroAtendimento);
				guiaPagamento.setOrdemServico(null);

				DebitoTipo debitoTipo = filtrarDebitoTipo(DebitoTipo.ENTRADA_PARCELAMENTO);
				guiaPagamento.setLancamentoItemContabil(debitoTipo
						.getLancamentoItemContabil());
				guiaPagamento.setDebitoTipo(debitoTipo);
				guiaPagamento.setFinanciamentoTipo(debitoTipo
						.getFinanciamentoTipo());
				guiaPagamento.setDebitoCreditoSituacaoAnterior(null);

				DebitoCreditoSituacao debitoCreditoSituacaoAtual = new DebitoCreditoSituacao();
				debitoCreditoSituacaoAtual.setId(DebitoCreditoSituacao.NORMAL);
				guiaPagamento
						.setDebitoCreditoSituacaoAtual(debitoCreditoSituacaoAtual);

				Parcelamento parcelamento = new Parcelamento();
				parcelamento.setId(parcelamentoId);
				guiaPagamento.setParcelamento(parcelamento);
				guiaPagamento.setIndicadoCobrancaMulta(new Short("2"));

				DocumentoTipo documentoTipo = new DocumentoTipo();
				documentoTipo.setId(DocumentoTipo.ENTRADA_DE_PARCELAMENTO);
				guiaPagamento.setDocumentoTipo(documentoTipo);

				guiaPagamento.setNumeroPrestacaoDebito(new Short("1"));
				guiaPagamento.setNumeroPrestacaoTotal(new Short("1"));

				//Alterado por Sávio Luiz Data:17/12/2008
				guiaPagamento.setIndicadorEmitirObservacao(ConstantesSistema.NAO);
				// Insere Guia de Pagamento na base
				// Integer guiaPagamentoIdBase = (Integer)
				getControladorUtil().inserir(guiaPagamento);

				// 1.1. [UC0185] Obter Valor po Categoria
				Collection<BigDecimal> colecaoValorCategoria = getControladorImovel()
						.obterValorPorCategoria(colecaoCategoria, valorEntrada);

				// Cria as iterações de categoria e valor
				Iterator iteratorCategoria = colecaoCategoria.iterator();
				Iterator iteratorValorCategoria = colecaoValorCategoria
						.iterator();

				// Laço para criar os débitos a cobrar por categoria
				while (iteratorCategoria.hasNext()) {
					// Recupera a categoria
					Categoria categoria = (Categoria) iteratorCategoria.next();

					// Recupera o valor da categoria
					BigDecimal valorPorCategoria = (BigDecimal) iteratorValorCategoria
							.next();

					// Cria a guia de pagamento por categoria
					GuiaPagamentoCategoria guiaPagamentoCategoria = new GuiaPagamentoCategoria();

					GuiaPagamentoCategoriaPK guiaPagamentoCategoriaPK = new GuiaPagamentoCategoriaPK(
							categoria.getId(), guiaPagamentoGeralIdBase);
					guiaPagamentoCategoria.setComp_id(guiaPagamentoCategoriaPK);

					/*
					 * GuiaPagamento guiaPagamentoBase = new GuiaPagamento();
					 * guiaPagamentoBase.setId(guiaPagamentoIdBase);
					 * guiaPagamentoCategoria.setGuiaPagamento(guiaPagamentoBase);
					 */
					guiaPagamentoCategoria.setGuiaPagamento(guiaPagamento);

					guiaPagamentoCategoria.setCategoria(categoria);
					guiaPagamentoCategoria.setQuantidadeEconomia(categoria
							.getQuantidadeEconomiasCategoria());
					guiaPagamentoCategoria.setValorCategoria(valorPorCategoria);
					guiaPagamentoCategoria.setUltimaAlteracao(new Date());

					// 2.2. Inclui na tabela DEBITO_A_COBRAR_CATEGORIA
					getControladorUtil().inserir(guiaPagamentoCategoria);

				}

				FiltroClienteImovel filtroClienteImovel = new FiltroClienteImovel();
				filtroClienteImovel
						.adicionarCaminhoParaCarregamentoEntidade("cliente");
				filtroClienteImovel
						.adicionarCaminhoParaCarregamentoEntidade("clienteRelacaoTipo");
				filtroClienteImovel.adicionarParametro(new ParametroSimples(
						FiltroClienteImovel.IMOVEL_ID, imovel.getId()));
				filtroClienteImovel.adicionarParametro(new ParametroNulo(
						FiltroClienteImovel.DATA_FIM_RELACAO));

				Collection clientesImovel = getControladorUtil().pesquisar(
						filtroClienteImovel, ClienteImovel.class.getName());

				if (clientesImovel != null && !clientesImovel.isEmpty()) {

					Iterator clienteImovelIterator = clientesImovel.iterator();

					while (clienteImovelIterator.hasNext()) {

						ClienteImovel clienteImovel = (ClienteImovel) clienteImovelIterator
								.next();

						ClienteGuiaPagamento clienteGuiaPagamento = new ClienteGuiaPagamento();
						clienteGuiaPagamento.setGuiaPagamento(guiaPagamento);
						clienteGuiaPagamento.setCliente(clienteImovel
								.getCliente());
						clienteGuiaPagamento
								.setClienteRelacaoTipo(clienteImovel
										.getClienteRelacaoTipo());
						clienteGuiaPagamento.setUltimaAlteracao(new Date());

						getControladorUtil().inserir(clienteGuiaPagamento);
					}

				}

			}
		}
	}

	/**
	 * Permite efetuar o parcelamento dos débitos de um imóvel
	 * 
	 * [UC0214] Efetuar Parcelamento de Débitos
	 * 
	 * Gera os Dados do Parcelamento
	 * 
	 * [SB0009] - Gerar Dados do Parcelamento
	 * 
	 * @author Roberta Costa - Vivianne Sousa
	 * @date 29/03/2006 - 26/09/2006
	 * 
	 * @param dataParcelamento
	 * @param valorConta
	 * @param valorGuiaPapagamento
	 * @param valorServicosACobrar
	 * @param valorParcelamentosACobrar
	 * @param valorCreditoARealizar
	 * @param valorAtualizacaoMonetaria
	 * @param valorJurosMora
	 * @param valorMulta
	 * @param valorDebitoAtualizado
	 * @param valorDescontoAcrescimos
	 * @param valorDescontoAntiguidade
	 * @param valorDescontoInatividade
	 * @param valorEntrada
	 * @param valorJurosParcelamento
	 * @param numeroPrestacoes
	 * @param valorPrestacao
	 * @param indicadorRestabelecimento
	 * @param indicadorContasRevisao
	 * @param indicadorGuiasPagamento
	 * @param indicadorAcrescimosImpotualidade
	 * @param indicadorDebitosACobrar
	 * @param indicadorCreditoARealizar
	 * @param percentualDescontoAcrescimos
	 * @param percentualDescontoAntiguidade
	 * @param percentualDescontoInatividadeLigacaoAgua
	 * @param imovel
	 * @param usuario
	 * @param parcelamentoPerfilId
	 * @param colecaoContaValores
	 * @param colecaoGuiaPagamentoValores
	 * @param colecaoDebitoACobrar
	 * @param colecaoCreditoARealizar
	 * @param taxaJuros
	 * @param indicadorConfirmacaoParcelamento
	 * @param cliente
	 * @return
	 * @throws ControladorException
	 */
	public Integer gerarDadosParcelamento(Date dataParcelamento,
			BigDecimal valorConta, BigDecimal valorGuiaPapagamento,
			BigDecimal valorServicosACobrar,
			BigDecimal valorParcelamentosACobrar,
			BigDecimal valorCreditoARealizar,
			BigDecimal valorAtualizacaoMonetaria, BigDecimal valorJurosMora,
			BigDecimal valorMulta, BigDecimal valorDebitoAtualizado,
			BigDecimal valorDescontoAcrescimos,
			BigDecimal valorDescontoAntiguidade,
			BigDecimal valorDescontoInatividade, BigDecimal valorEntrada,
			BigDecimal valorJurosParcelamento, Short numeroPrestacoes,
			BigDecimal valorPrestacao, Short indicadorRestabelecimento,
			Short indicadorContasRevisao, Short indicadorGuiasPagamento,
			Short indicadorAcrescimosImpotualidade,
			Short indicadorDebitosACobrar, Short indicadorCreditoARealizar,
			BigDecimal percentualDescontoAcrescimos,
			BigDecimal percentualDescontoAntiguidade,
			BigDecimal percentualDescontoInatividadeLigacaoAgua, Imovel imovel,
			Usuario usuario, Integer parcelamentoPerfilId,
			Collection<ContaValoresHelper> colecaoContaValores,
			Collection<GuiaPagamentoValoresHelper> colecaoGuiaPagamentoValores,
			Collection<DebitoACobrar> colecaoDebitoACobrar,
			Collection<CreditoARealizar> colecaoCreditoARealizar,
			BigDecimal taxaJuros, Short indicadorConfirmacaoParcelamento,
			Cliente cliente, BigDecimal descontoSancoesRDEspecial,
			BigDecimal descontoTarifaSocialRDEspecial, Integer anoMesReferenciaContabil,
			BigDecimal descontoSobreDebitoTotal)
			throws ControladorException {


		try{
		
			// 1. Gera os dados relativos a parcelamento
			Parcelamento parcelamento = new Parcelamento();
	
			String dia = Util.formatarData(dataParcelamento).substring(0, 2);
			String mes = Util.formatarData(dataParcelamento).substring(3, 5);
			String ano = Util.formatarData(dataParcelamento).substring(6, 10);
	
			Calendar dataHoraParcelamento = GregorianCalendar.getInstance();
			dataHoraParcelamento.set(Calendar.DATE, new Integer(dia).intValue());
			dataHoraParcelamento.set(Calendar.MONTH,
					new Integer(mes).intValue() - 1);
			dataHoraParcelamento.set(Calendar.YEAR, new Integer(ano).intValue());
	
			parcelamento.setParcelamento(dataHoraParcelamento.getTime());
	
			ParcelamentoSituacao parcelamentoSituacao = new ParcelamentoSituacao();
			parcelamentoSituacao.setId(ParcelamentoSituacao.NORMAL);
			parcelamento.setParcelamentoSituacao(parcelamentoSituacao);
	
			parcelamento.setAnoMesReferenciaFaturamento(anoMesReferenciaContabil);
	
			// Valor Total das Contas
			parcelamento.setValorConta(valorConta);
			parcelamento.setValorGuiaPapagamento(valorGuiaPapagamento);
			parcelamento.setValorServicosACobrar(valorServicosACobrar);
			parcelamento.setValorParcelamentosACobrar(valorParcelamentosACobrar);
			parcelamento.setValorCreditoARealizar(valorCreditoARealizar);
			parcelamento.setValorAtualizacaoMonetaria(valorAtualizacaoMonetaria);
			parcelamento.setValorJurosMora(valorJurosMora);
			parcelamento.setValorMulta(valorMulta);
			parcelamento.setValorDebitoAtualizado(valorDebitoAtualizado);
			parcelamento.setValorDescontoAcrescimos(valorDescontoAcrescimos);
			parcelamento.setValorDescontoAntiguidade(valorDescontoAntiguidade);
			parcelamento.setValorDescontoInatividade(valorDescontoInatividade);
			parcelamento.setValorDescontoSancao(descontoSancoesRDEspecial);
			parcelamento
					.setValorDescontoTarifaSocial(descontoTarifaSocialRDEspecial);
			parcelamento.setValorDescontoDebitoTotal(descontoSobreDebitoTotal);
			parcelamento.setValorEntrada(valorEntrada);
			parcelamento.setValorJurosParcelamento(valorJurosParcelamento);
			parcelamento.setNumeroPrestacoes(numeroPrestacoes);
			parcelamento.setValorPrestacao(valorPrestacao);
			parcelamento.setIndicadorRestabelecimento(indicadorRestabelecimento);
			parcelamento.setIndicadorContasRevisao(indicadorContasRevisao);
			parcelamento.setIndicadorGuiasPagamento(indicadorGuiasPagamento);
			parcelamento
					.setIndicadorAcrescimosImpontualdade(indicadorAcrescimosImpotualidade);
			parcelamento.setIndicadorDebitoACobrar(indicadorDebitosACobrar);
			parcelamento.setIndicadorCreditoARealizar(indicadorCreditoARealizar);
			parcelamento
					.setPercentualDescontoAcrescimos(percentualDescontoAcrescimos);
			parcelamento
					.setPercentualDescontoAntiguidade(percentualDescontoAntiguidade);
			parcelamento
					.setPercentualDescontoInatividade(percentualDescontoInatividadeLigacaoAgua);
			parcelamento.setUltimaAlteracao(new Date());
	
			parcelamento.setImovel(imovel);
	
			ImovelPerfil imovelPerfil = new ImovelPerfil();
			imovelPerfil.setId(imovel.getImovelPerfil().getId());
			parcelamento.setImovelPerfil(imovelPerfil);
	
			parcelamento.setRegistroAtendimento(null);
	
			parcelamento.setUsuario(usuario);
			parcelamento.setFuncionario(null);
	
			LigacaoAguaSituacao ligacaoAguaSituacao = new LigacaoAguaSituacao();
			ligacaoAguaSituacao.setId(imovel.getLigacaoAguaSituacao().getId());
			parcelamento.setLigacaoAguaSituacao(ligacaoAguaSituacao);
	
			LigacaoEsgotoSituacao ligacaoEsgotoSituacao = new LigacaoEsgotoSituacao();
			ligacaoEsgotoSituacao.setId(imovel.getLigacaoEsgotoSituacao().getId());
			parcelamento.setLigacaoEsgotoSituacao(ligacaoEsgotoSituacao);
	
			Localidade localidade = new Localidade();
			localidade.setId(imovel.getLocalidade().getId());
			parcelamento.setLocalidade(localidade);
	
			Quadra quadra = new Quadra();
			quadra.setId(imovel.getQuadra().getId());
			parcelamento.setQuadra(quadra);
	
			parcelamento.setCodigoSetorComercial(imovel.getSetorComercial()
					.getCodigo());
			parcelamento.setNumeroQuadra(imovel.getQuadra().getNumeroQuadra());
	
			CobrancaForma cobrancaForma = new CobrancaForma();
			cobrancaForma.setId(CobrancaForma.COBRANCA_EM_CONTA);
			parcelamento.setCobrancaForma(cobrancaForma);
	
			FiltroParcelamentoPerfil filtroParcelamentoPerfil = new FiltroParcelamentoPerfil();
			filtroParcelamentoPerfil.adicionarParametro(new ParametroSimples(
					FiltroParcelamentoPerfil.ID, parcelamentoPerfilId));
	
			filtroParcelamentoPerfil
					.adicionarCaminhoParaCarregamentoEntidade("resolucaoDiretoria");
	
			Collection colecaoParcelamentoPerfil = getControladorUtil().pesquisar(
					filtroParcelamentoPerfil, ParcelamentoPerfil.class.getName());
	
			ParcelamentoPerfil parcelamentoPerfilCarregado = (ParcelamentoPerfil) Util
					.retonarObjetoDeColecao(colecaoParcelamentoPerfil);
	
			// ParcelamentoPerfil parcelamentoPerfil = new ParcelamentoPerfil();
			// parcelamentoPerfil.setId(parcelamentoPerfilId);
			parcelamento.setParcelamentoPerfil(parcelamentoPerfilCarregado);
			parcelamento.setResolucaoDiretoria(parcelamentoPerfilCarregado
					.getResolucaoDiretoria());
	
			ParcelamentoTipo parcelamentoTipo = new ParcelamentoTipo();
			parcelamentoTipo.setId(ParcelamentoTipo.POR_IMOVEL);
			parcelamento.setParcelamentoTipo(parcelamentoTipo);
	
			// Taxa de Juros do Parcelamento
			parcelamento.setTaxaJuros(taxaJuros);
	
			parcelamento
					.setIndicadorConfirmacaoParcelamento(indicadorConfirmacaoParcelamento);
	
			parcelamento.setCliente(cliente);
			
			parcelamento.setIndicadorCobrancaResultado(new Short("2"));
			if(this.repositorioCobranca.imovelParcelamentoAssociadoComandoCobrancaResultadoAtivo(imovel.getId()))
				parcelamento.setIndicadorCobrancaResultado(new Short("1"));
			
			
			// [FS0012] Verificar existência de parcelamento no mês
			Collection<Parcelamento> colecaoParcelamento = verificarParcelamentoMesImovel(imovel
					.getId());
	
			if (colecaoParcelamento != null && !colecaoParcelamento.isEmpty()) {
				sessionContext.setRollbackOnly();
				throw new ControladorException("atencao.parcelamento.processado");
			}
	
			// Inseri Parcelamento na Base
			Integer parcelamentoId = (Integer) getControladorUtil().inserir(
					parcelamento);
			parcelamento.setId(parcelamentoId);
			
			// 2. Gera Itens que foram parcelados
			ParcelamentoItem parcelamentoItem = new ParcelamentoItem();
			parcelamentoItem.setUltimaAlteracao(new Date());
	
			// Inserindo itens para as Contas
			if (colecaoContaValores != null && !colecaoContaValores.isEmpty()) {
				
				Iterator contaValores = colecaoContaValores.iterator();
				while (contaValores.hasNext()) {
					
					ContaValoresHelper contaValoresHelper = (ContaValoresHelper) 
					contaValores.next();
					
					/*
					 * Não inserir as contas com indicador de que a conta já foi paga , esteja (NB) marcado
					 * ou que o indicador entrada de parcelamento esteja (EP) marcado.
					 */
					if (contaValoresHelper.getIndicadorContasDebito() == null || 
						(!contaValoresHelper.getIndicadorContasDebito().equals(new Integer(ConstantesSistema.NAO)) && 
						!contaValoresHelper.getIndicadorContasDebito().equals(ConstantesSistema.SIM))) {
	
						// Conta Geral
						ContaGeral contaGeral = new ContaGeral();
						contaGeral.setId(contaValoresHelper.getConta().getId());
	
						Parcelamento parcelamentoBase = new Parcelamento();
						parcelamentoBase.setId(parcelamentoId);
						parcelamentoItem.setParcelamento(parcelamentoBase);
	
						DocumentoTipo documentoTipo = new DocumentoTipo();
						documentoTipo.setId(DocumentoTipo.CONTA);
						parcelamentoItem.setDocumentoTipo(documentoTipo);
	
						parcelamentoItem.setDebitoACobrarGeral(null);
						parcelamentoItem.setCreditoARealizarGeral(null);
						parcelamentoItem.setGuiaPagamentoGeral(null);
						parcelamentoItem.setContaGeral(contaGeral);
	
						// Inseri Parcelamento Item na Base
						getControladorUtil().inserir(parcelamentoItem);
					}

					//CRC2725 - alterado por Vivianne Sousa - 23/09/2009 analista:Fátima
					if (contaValoresHelper.getIndicadorContasDebito() == null || 
						contaValoresHelper.getIndicadorContasDebito().equals(new Integer(ConstantesSistema.SIM))) {
						//2.2.Caso o item de débito parcelado seja uma conta (CNTA_ID com o valor diferente de nulo), 
						//considerando também a conta se o indicador entrada de parcelamento esteja (EP) marcado
						getControladorSpcSerasa().verificarRelacaoDoParcelamentoComItensNegativacao(
								parcelamento, contaValoresHelper.getConta() , null);
						
					}
					
				}
			}
	
			// Inserindo itens para as Guias de Pagamento
			if (colecaoGuiaPagamentoValores != null
					&& !colecaoGuiaPagamentoValores.isEmpty()) {
				Iterator guiaPagamentoValores = colecaoGuiaPagamentoValores
						.iterator();
	
				while (guiaPagamentoValores.hasNext()) {
					GuiaPagamentoValoresHelper guiaPagamentoValoresHelper = (GuiaPagamentoValoresHelper) guiaPagamentoValores
							.next();
	
					// Guia de Pagamento Geral Geral
					GuiaPagamentoGeral guiaPagamentoGeral = new GuiaPagamentoGeral();
					guiaPagamentoGeral.setId(guiaPagamentoValoresHelper
							.getGuiaPagamento().getId());
	
					Parcelamento parcelamentoBase = new Parcelamento();
					parcelamentoBase.setId(parcelamentoId);
					parcelamentoItem.setParcelamento(parcelamentoBase);
	
					DocumentoTipo documentoTipo = new DocumentoTipo();
					documentoTipo.setId(DocumentoTipo.GUIA_PAGAMENTO);
					parcelamentoItem.setDocumentoTipo(documentoTipo);
	
					parcelamentoItem.setDebitoACobrarGeral(null);
					parcelamentoItem.setCreditoARealizarGeral(null);
					// parcelamentoItem.setNotaPromissoria(null);
					parcelamentoItem.setGuiaPagamentoGeral(guiaPagamentoGeral);
					parcelamentoItem.setContaGeral(null);
					// parcelamentoItem.setContaHistorico(null);
					// parcelamentoItem.setDebitoACobrarHistorico(null);
					// parcelamentoItem.setCreditoARealizarHistorico(null);
	
					// Inseri Parcelamento Item na Base
					getControladorUtil().inserir(parcelamentoItem);
					
					//CRC2725 - alterado por Vivianne Sousa - 23/09/2009 analista:Fátima
					//2.3. Caso o item de débito parcelado seja uma guia de pagamento 
					getControladorSpcSerasa().verificarRelacaoDoParcelamentoComItensNegativacao(
							parcelamento, null, guiaPagamentoValoresHelper.getGuiaPagamento());
					
				}
			}
	
			// Inserindo itens para Débitos a Cobrar
			if (colecaoDebitoACobrar != null && !colecaoDebitoACobrar.isEmpty()) {
				Iterator debitoACobrarValores = colecaoDebitoACobrar.iterator();
	
				while (debitoACobrarValores.hasNext()) {
					DebitoACobrar debitoACobrar = (DebitoACobrar) debitoACobrarValores
							.next();
	
					// Debito A Cobrar Geral
					DebitoACobrarGeral debitoACobrarGeral = new DebitoACobrarGeral();
					debitoACobrarGeral.setId(debitoACobrar.getId());
	
					Parcelamento parcelamentoBase = new Parcelamento();
					parcelamentoBase.setId(parcelamentoId);
					parcelamentoItem.setParcelamento(parcelamentoBase);
	
					DocumentoTipo documentoTipo = new DocumentoTipo();
					documentoTipo.setId(DocumentoTipo.DEBITO_A_COBRAR);
					parcelamentoItem.setDocumentoTipo(documentoTipo);
	
					parcelamentoItem.setDebitoACobrarGeral(debitoACobrarGeral);
					parcelamentoItem.setCreditoARealizarGeral(null);
					// parcelamentoItem.setNotaPromissoria(null);
					parcelamentoItem.setGuiaPagamentoGeral(null);
					parcelamentoItem.setContaGeral(null);
					// parcelamentoItem.setContaHistorico(null);
					// parcelamentoItem.setDebitoACobrarHistorico(null);
					// parcelamentoItem.setCreditoARealizarHistorico(null);
	
					// Inseri Parcelamento Item na Base
					getControladorUtil().inserir(parcelamentoItem);
				}
			}
	
			// Inserindo itens para Crédito a Realizar
			if (colecaoCreditoARealizar != null
					&& !colecaoCreditoARealizar.isEmpty()) {
				Iterator creditoARealizarValores = colecaoCreditoARealizar
						.iterator();
	
				while (creditoARealizarValores.hasNext()) {
					CreditoARealizar creditoARealizar = (CreditoARealizar) creditoARealizarValores
							.next();
	
					// Credito A Realizar Geral
					CreditoARealizarGeral creditoARealizarGeral = new CreditoARealizarGeral();
					creditoARealizarGeral.setId(creditoARealizar.getId());
	
					Parcelamento parcelamentoBase = new Parcelamento();
					parcelamentoBase.setId(parcelamentoId);
					parcelamentoItem.setParcelamento(parcelamentoBase);
	
					DocumentoTipo documentoTipo = new DocumentoTipo();
					documentoTipo.setId(DocumentoTipo.CREDITO_A_REALIZAR);
					parcelamentoItem.setDocumentoTipo(documentoTipo);
	
					parcelamentoItem.setDebitoACobrarGeral(null);
					parcelamentoItem.setCreditoARealizarGeral(creditoARealizar
							.getCreditoARealizarGeral());
					// parcelamentoItem.setNotaPromissoria(null);
					parcelamentoItem.setGuiaPagamentoGeral(null);
					// parcelamentoItem.setConta(null);
					// parcelamentoItem.setContaHistorico(null);
					// parcelamentoItem.setDebitoACobrarHistorico(null);
					// parcelamentoItem.setCreditoARealizarHistorico(null);
	
					// Inseri Parcelamento Item na Base
					getControladorUtil().inserir(parcelamentoItem);
				}
			}
	
			return parcelamentoId;
			
		}catch (ControladorException e) {
			sessionContext.setRollbackOnly();
			throw e;
		}catch (Exception e) {
			sessionContext.setRollbackOnly();
			throw new ControladorException("erro.sistema", e);
		}
	}

	/**
	 * Permite inserir uma ResolucaoDiretoria
	 * 
	 * [UC0217] Inserir Resolução de Diretoria
	 * 
	 * @author Rafael Corrêa
	 * @param usuarioLogado
	 * @date 30/03/2006
	 * 
	 */
	public Integer inserirResolucaoDiretoria(
			ResolucaoDiretoria resolucaoDiretoria, Usuario usuarioLogado)
			throws ControladorException {

		// [FS0001] - Validar Período de Vigência
		if (resolucaoDiretoria.getDataVigenciaFim() != null) {
			if (resolucaoDiretoria.getDataVigenciaInicio().compareTo(
					resolucaoDiretoria.getDataVigenciaFim()) >= 0) {
				throw new ControladorException(
						"atencao.termino_vigencia.anterior.inicio_vigencia");
			}
		}

		FiltroResolucaoDiretoria filtroResolucaoDiretoria = new FiltroResolucaoDiretoria();
		filtroResolucaoDiretoria.adicionarParametro(new ParametroSimples(
				FiltroResolucaoDiretoria.NUMERO, resolucaoDiretoria
						.getNumeroResolucaoDiretoria()));

		Collection colecaoResolucaoDiretoria = getControladorUtil().pesquisar(
				filtroResolucaoDiretoria, ResolucaoDiretoria.class.getName());

		if (colecaoResolucaoDiretoria != null
				&& !colecaoResolucaoDiretoria.isEmpty()) {
			throw new ControladorException(
					"atencao.numero_resolucao_ja_existente");
		}

		resolucaoDiretoria.setUltimaAlteracao(new Date());

		// ------------ REGISTRAR TRANSAÇÃO----------------------------
		RegistradorOperacao registradorOperacao = new RegistradorOperacao(
				Operacao.OPERACAO_RESOLUCAO_DIRETORIA_INSERIR,
				new UsuarioAcaoUsuarioHelper(usuarioLogado,
						UsuarioAcao.USUARIO_ACAO_EFETUOU_OPERACAO));

		Operacao operacao = new Operacao();
		operacao.setId(Operacao.OPERACAO_RESOLUCAO_DIRETORIA_INSERIR);

		OperacaoEfetuada operacaoEfetuada = new OperacaoEfetuada();
		operacaoEfetuada.setOperacao(operacao);

		resolucaoDiretoria.setOperacaoEfetuada(operacaoEfetuada);
		resolucaoDiretoria.adicionarUsuario(usuarioLogado,
				UsuarioAcao.USUARIO_ACAO_EFETUOU_OPERACAO);
		registradorOperacao.registrarOperacao(resolucaoDiretoria);
		// ------------ REGISTRAR TRANSAÇÃO----------------------------

		Integer id = (Integer) getControladorUtil().inserir(resolucaoDiretoria);

		return id;

	}
	
	/**
	 * Permite inserir um ComandoEmpresaCobrancaConta
	 * 
	 * [UC0866] Gerar Comando Contas em Cobrança por Empresa
	 * 
	 * @author Rafael Corrêa
	 * @param usuarioLogado
	 * @date 28/10/2008
	 * 
	 */
	public Integer inserirComandoEmpresaCobrancaConta(
			ComandoEmpresaCobrancaConta comandoEmpresaCobrancaConta, Usuario usuarioLogado)
			throws ControladorException {

		comandoEmpresaCobrancaConta.setUltimaAlteracao(new Date());

		// ------------ REGISTRAR TRANSAÇÃO----------------------------
		RegistradorOperacao registradorOperacao = new RegistradorOperacao(
				Operacao.OPERACAO_INFORMAR_CONTAS_EM_COBRANCA,
				new UsuarioAcaoUsuarioHelper(usuarioLogado,
						UsuarioAcao.USUARIO_ACAO_EFETUOU_OPERACAO));

		Operacao operacao = new Operacao();
		operacao.setId(Operacao.OPERACAO_INFORMAR_CONTAS_EM_COBRANCA);

		OperacaoEfetuada operacaoEfetuada = new OperacaoEfetuada();
		operacaoEfetuada.setOperacao(operacao);

		comandoEmpresaCobrancaConta.setOperacaoEfetuada(operacaoEfetuada);
		comandoEmpresaCobrancaConta.adicionarUsuario(usuarioLogado,
				UsuarioAcao.USUARIO_ACAO_EFETUOU_OPERACAO);
		registradorOperacao.registrarOperacao(comandoEmpresaCobrancaConta);
		// ------------ REGISTRAR TRANSAÇÃO----------------------------

		Integer id = (Integer) getControladorUtil().inserir(comandoEmpresaCobrancaConta);

		return id;

	}

	/**
	 * 
	 * Este caso de uso permite a consulta de documentos de cobrança
	 * 
	 * [UC0257] - Consultar Documentos de Cobrança
	 * 
	 * Apresenta os itens dos documentos de cobrança
	 * 
	 * [SB0001] - Apresenta Itens do Documento de Cobrança
	 * 
	 * @author Rafael Corrêa & Raphael Rossiter
	 * @date 05/04/2006
	 */

	public CobrancaDocumentoHelper apresentaItensDocumentoCobranca(
			CobrancaDocumento cobrancaDocumento) throws ControladorException {

		CobrancaDocumentoHelper retorno = new CobrancaDocumentoHelper();

		FiltroCobrancaDocumento filtroCobrancaDocumento = new FiltroCobrancaDocumento();

		filtroCobrancaDocumento.adicionarParametro(new ParametroSimples(
				FiltroCobrancaDocumento.ID, cobrancaDocumento.getId()));

		filtroCobrancaDocumento
				.adicionarCaminhoParaCarregamentoEntidade("imovel");
		filtroCobrancaDocumento
				.adicionarCaminhoParaCarregamentoEntidade("imovel.clienteImoveis");
		filtroCobrancaDocumento
				.adicionarCaminhoParaCarregamentoEntidade("imovel.localidade");
		filtroCobrancaDocumento
				.adicionarCaminhoParaCarregamentoEntidade("imovel.quadra");
		filtroCobrancaDocumento
				.adicionarCaminhoParaCarregamentoEntidade("imovel.setorComercial.municipio.unidadeFederacao");
		filtroCobrancaDocumento
				.adicionarCaminhoParaCarregamentoEntidade("imovel.logradouroBairro.bairro.municipio.unidadeFederacao");
		filtroCobrancaDocumento
				.adicionarCaminhoParaCarregamentoEntidade("imovel.ligacaoAguaSituacao");
		filtroCobrancaDocumento
				.adicionarCaminhoParaCarregamentoEntidade("imovel.ligacaoEsgotoSituacao");
		filtroCobrancaDocumento
				.adicionarCaminhoParaCarregamentoEntidade("imovel.logradouroCep.logradouro.logradouroTipo");
		filtroCobrancaDocumento
				.adicionarCaminhoParaCarregamentoEntidade("imovel.logradouroCep.logradouro.logradouroTitulo");
		filtroCobrancaDocumento
				.adicionarCaminhoParaCarregamentoEntidade("imovel.enderecoReferencia");
		filtroCobrancaDocumento
				.adicionarCaminhoParaCarregamentoEntidade("imovel.logradouroCep.cep");
		filtroCobrancaDocumento
				.adicionarCaminhoParaCarregamentoEntidade("documentoEmissaoForma");
		filtroCobrancaDocumento
				.adicionarCaminhoParaCarregamentoEntidade("motivoNaoEntregaDocumento");
		filtroCobrancaDocumento
				.adicionarCaminhoParaCarregamentoEntidade("imovel.perimetroInicial");
		filtroCobrancaDocumento
				.adicionarCaminhoParaCarregamentoEntidade("imovel.perimetroFinal");
		filtroCobrancaDocumento
				.adicionarCaminhoParaCarregamentoEntidade("imovel.perimetroInicial.logradouroTipo");
		filtroCobrancaDocumento
				.adicionarCaminhoParaCarregamentoEntidade("imovel.perimetroInicial.logradouroTitulo");
		filtroCobrancaDocumento
				.adicionarCaminhoParaCarregamentoEntidade("imovel.perimetroFinal.logradouroTipo");
		filtroCobrancaDocumento
				.adicionarCaminhoParaCarregamentoEntidade("imovel.perimetroFinal.logradouroTitulo");


		Collection colecaoCobrancaDocumento = getControladorUtil().pesquisar(
				filtroCobrancaDocumento, CobrancaDocumento.class.getName());

		CobrancaDocumento cobrancaDocumentoCarregado = (CobrancaDocumento) Util
				.retonarObjetoDeColecao(colecaoCobrancaDocumento);

		retorno.setCobrancaDocumento(cobrancaDocumentoCarregado);

		FiltroCobrancaDocumentoItem filtroCobrancaDocumentoItem = new FiltroCobrancaDocumentoItem();
		filtroCobrancaDocumentoItem.setConsultaSemLimites(true);

		filtroCobrancaDocumentoItem
				.adicionarCaminhoParaCarregamentoEntidade("contaGeral.conta.debitoCreditoSituacaoAtual");
		filtroCobrancaDocumentoItem
				.adicionarCaminhoParaCarregamentoEntidade("contaGeral.contaHistorico.debitoCreditoSituacaoAtual");
		filtroCobrancaDocumentoItem
				.adicionarCaminhoParaCarregamentoEntidade("debitoACobrarGeral.debitoACobrar.debitoTipo");
		filtroCobrancaDocumentoItem
				.adicionarCaminhoParaCarregamentoEntidade("debitoACobrarGeral.debitoACobrarHistorico.debitoTipo");
		filtroCobrancaDocumentoItem
				.adicionarCaminhoParaCarregamentoEntidade("creditoARealizarGeral.creditoARealizar.creditoTipo");
		filtroCobrancaDocumentoItem
				.adicionarCaminhoParaCarregamentoEntidade("creditoARealizarGeral.creditoARealizarHistorico.creditoTipo");
		filtroCobrancaDocumentoItem
				.adicionarCaminhoParaCarregamentoEntidade("guiaPagamentoGeral.guiaPagamento.debitoTipo");
		filtroCobrancaDocumentoItem
				.adicionarCaminhoParaCarregamentoEntidade("guiaPagamentoGeral.guiaPagamentoHistorico.debitoTipo");
		filtroCobrancaDocumentoItem
				.adicionarCaminhoParaCarregamentoEntidade("documentoTipo");

		filtroCobrancaDocumentoItem.adicionarParametro(new ParametroSimples(
				FiltroCobrancaDocumentoItem.COBRANCA_DOCUMENTO_ID,
				cobrancaDocumentoCarregado.getId()));

		Collection colecaoCobrancaDocumentoItem = getControladorUtil()
				.pesquisar(filtroCobrancaDocumentoItem,
						CobrancaDocumentoItem.class.getName());

		if (colecaoCobrancaDocumentoItem != null
				&& !colecaoCobrancaDocumentoItem.isEmpty()) {

			retorno
					.setQuantidadeItensCobrancaDocumento(colecaoCobrancaDocumentoItem
							.size());

			Iterator iteratorColecaoCobrancaDocumentoItem = colecaoCobrancaDocumentoItem
					.iterator();
			CobrancaDocumentoItem cobrancaDocumentoItem = null;

			Collection colecaoCobrancaDocumentoItemConta = new ArrayList();
			Collection colecaoCobrancaDocumentoItemDebitoACobrar = new ArrayList();
			Collection colecaoCobrancaDocumentoItemGuiaPagamento = new ArrayList();
			Collection colecaoCobrancaDocumentoItemCreditoARealizar = new ArrayList();

			while (iteratorColecaoCobrancaDocumentoItem.hasNext()) {

				cobrancaDocumentoItem = (CobrancaDocumentoItem) iteratorColecaoCobrancaDocumentoItem
						.next();

				// cobrancaDocumentoItem.getContaGeral().getConta();
				// cobrancaDocumentoItem.getContaGeral().getContaHistorico();
				if (cobrancaDocumentoItem.getDocumentoTipo().getId().equals(
						DocumentoTipo.CONTA)) {
					colecaoCobrancaDocumentoItemConta
							.add(cobrancaDocumentoItem);
				} else if (cobrancaDocumentoItem.getDocumentoTipo().getId()
						.equals(DocumentoTipo.DEBITO_A_COBRAR)) {
					colecaoCobrancaDocumentoItemDebitoACobrar
							.add(cobrancaDocumentoItem);
				} else if (cobrancaDocumentoItem.getDocumentoTipo().getId()
						.equals(DocumentoTipo.GUIA_PAGAMENTO)) {
					colecaoCobrancaDocumentoItemGuiaPagamento
							.add(cobrancaDocumentoItem);
				} else if (cobrancaDocumentoItem.getDocumentoTipo().getId()
						.equals(DocumentoTipo.CREDITO_A_REALIZAR)){
					colecaoCobrancaDocumentoItemCreditoARealizar
							.add(cobrancaDocumentoItem);
				}
			}

			retorno
					.setColecaoCobrancaDocumentoItemConta(colecaoCobrancaDocumentoItemConta);
			retorno
					.setColecaoCobrancaDocumentoItemDebitoACobrar(colecaoCobrancaDocumentoItemDebitoACobrar);
			retorno
					.setColecaoCobrancaDocumentoItemGuiaPagamento(colecaoCobrancaDocumentoItemGuiaPagamento);
			retorno
					.setColecaoCobrancaDocumentoItemCreditoARealizar(colecaoCobrancaDocumentoItemCreditoARealizar);
		} else {
			retorno.setQuantidadeItensCobrancaDocumento(0);
		}

		return retorno;

	}

	/**
	 * 
	 * Inserir um comando de atividade de cobrança eventual
	 * 
	 * [UC0243] - Inserir Comando Ação de Cobrança
	 * 
	 * Inserir cobranca acao atividade comando
	 * 
	 * [SB0007] - Inserir cobranca acao atividade comando
	 * 
	 * @author Rafael Santos
	 * @throws ControladorException
	 * @date 04/04/2006
	 */

	public void inserirComandoAcaoCobrancaEventual(String idCobrancaAcao,
			String idCobrancaAtividade, String idCobrancaGrupo,
			String idGerenciaRegional, String idLocalidadeInicial,
			String idLocalidadeFinal, String codigoSetorComercialInicial,
			String codigoSetorComercialFinal, String idSetorComercialInicial,
			String idSetorComercialFinal, String idCliente,
			String idClienteRelacaoTipo, String anoMesReferencialInicial,
			String anoMesReferencialFinal, String dataVencimentoContaInicial,
			String dataVencimentoContaFinal, String indicador,
			String idRotaInicial, String idRotaFinal, String idUnidadeNegocio,
			String codigoRotaInicial, String codigoRotaFinal,String numeroQuadraInicial,String numeroQuadraFinal, 
			String[] idsLocalidade, String[] idsSetorComercial, String idLocalidade)
			throws ControladorException {

		// executar comando
		CobrancaAcaoAtividadeComando cobrancaAcaoAtividadeComando = new CobrancaAcaoAtividadeComando();

		// id gerado pelo sistema
		CobrancaAcao cobrancaAcao = new CobrancaAcao();

		FiltroCobrancaAcao filtroCobrancaAcao = new FiltroCobrancaAcao();
		filtroCobrancaAcao.adicionarParametro(new ParametroSimples(
				FiltroCobrancaAcao.ID, idCobrancaAcao));
		filtroCobrancaAcao
				.adicionarCaminhoParaCarregamentoEntidade(FiltroCobrancaAcao.DOCUMENTO_TIPO);
		filtroCobrancaAcao
				.adicionarCaminhoParaCarregamentoEntidade(FiltroCobrancaAcao.SERVICO_TIPO);
		filtroCobrancaAcao
			.adicionarCaminhoParaCarregamentoEntidade(FiltroCobrancaAcao.SERVICO_TIPO_PREDECESSORA);		
		Collection colecaoCobrancaAcao = this.getControladorUtil().pesquisar(
				filtroCobrancaAcao, CobrancaAcao.class.getName());
		cobrancaAcao = (CobrancaAcao) colecaoCobrancaAcao.iterator().next();

		// id da ação de cobranca selecionada
		cobrancaAcaoAtividadeComando.setCobrancaAcao(cobrancaAcao);
		// id da atividade de cobranca

		FiltroCobrancaAtividade filtroCobrancaAtividade = new FiltroCobrancaAtividade();
		filtroCobrancaAtividade.adicionarParametro(new ParametroSimples(
				FiltroCobrancaAtividade.ID, idCobrancaAtividade));
		Collection colecaoCobrancaAtividade = this.getControladorUtil()
				.pesquisar(filtroCobrancaAtividade,
						CobrancaAtividade.class.getName());
		CobrancaAtividade cobrancaAtividade = (CobrancaAtividade) colecaoCobrancaAtividade
				.iterator().next();
		cobrancaAcaoAtividadeComando.setCobrancaAtividade(cobrancaAtividade);
		// comando
		cobrancaAcaoAtividadeComando.setComando(new Date());
		// realizacao
		cobrancaAcaoAtividadeComando.setRealizacao(null);
		// ultima alteracao
		cobrancaAcaoAtividadeComando.setUltimaAlteracao(new Date());
		// usuario
		Usuario usuario = new Usuario();
		usuario.setId(new Integer(1));
		cobrancaAcaoAtividadeComando.setUsuario(usuario);
		// empresa
		cobrancaAcaoAtividadeComando.setEmpresa(null);

		// id Cobranca Grupo
		if (idCobrancaGrupo != null
				&& !idCobrancaGrupo
						.equals(ConstantesSistema.NUMERO_NAO_INFORMADO + "")) {
			CobrancaGrupo cobrancaGrupo = new CobrancaGrupo();
			cobrancaGrupo.setId(new Integer(idCobrancaGrupo));
			cobrancaAcaoAtividadeComando.setCobrancaGrupo(cobrancaGrupo);
		} else {
			cobrancaAcaoAtividadeComando.setCobrancaGrupo(null);
		}

		// id Gerencia Regional
		if (idGerenciaRegional != null
				&& !idGerenciaRegional
						.equals(ConstantesSistema.NUMERO_NAO_INFORMADO + "")) {
			GerenciaRegional gerenciaRegional = new GerenciaRegional();
			gerenciaRegional.setId(new Integer(idGerenciaRegional));
			cobrancaAcaoAtividadeComando.setGerenciaRegional(gerenciaRegional);
		} else {
			cobrancaAcaoAtividadeComando.setGerenciaRegional(null);
		}

		// localidade inicial e final
		if ((idLocalidadeInicial != null && !idLocalidadeInicial.equals(""))
				&& (idLocalidadeFinal != null && !idLocalidadeFinal.equals(""))) {
			Localidade localidadeInicial = new Localidade();
			localidadeInicial.setId(new Integer(idLocalidadeInicial));
			cobrancaAcaoAtividadeComando
					.setLocalidadeInicial(localidadeInicial);

			Localidade localidadeFinal = new Localidade();
			localidadeFinal.setId(new Integer(idLocalidadeFinal));
			cobrancaAcaoAtividadeComando.setLocalidadeFinal(localidadeFinal);
		} else {
			cobrancaAcaoAtividadeComando.setLocalidadeInicial(null);
			cobrancaAcaoAtividadeComando.setLocalidadeFinal(null);
		}

		// codigo do setor comercial inicial e final
		if ((codigoSetorComercialInicial != null && !codigoSetorComercialInicial
				.equals(""))
				&& (codigoSetorComercialFinal != null && !codigoSetorComercialFinal
						.equals(""))) {
			cobrancaAcaoAtividadeComando
					.setCodigoSetorComercialInicial(new Integer(
							codigoSetorComercialInicial));
			cobrancaAcaoAtividadeComando
					.setCodigoSetorComercialFinal(new Integer(
							codigoSetorComercialFinal));
		} else {
			cobrancaAcaoAtividadeComando.setCodigoSetorComercialInicial(null);
			cobrancaAcaoAtividadeComando.setCodigoSetorComercialFinal(null);
		}//

		// rota inicial e final
		if ((idRotaInicial != null && !idRotaInicial
				.equals(ConstantesSistema.NUMERO_NAO_INFORMADO + ""))
				&& (idRotaFinal != null && !idRotaFinal
						.equals(ConstantesSistema.NUMERO_NAO_INFORMADO + ""))) {
			Rota rotaInicial = new Rota();
			rotaInicial.setId(new Integer(idRotaInicial));
			cobrancaAcaoAtividadeComando.setRotaInicial(rotaInicial);

			Rota rotaFinal = new Rota();
			rotaFinal.setId(new Integer(idRotaFinal));
			cobrancaAcaoAtividadeComando.setRotaFinal(rotaFinal);
		} else {
			cobrancaAcaoAtividadeComando.setRotaInicial(null);
			cobrancaAcaoAtividadeComando.setRotaFinal(null);
		}

		// id do cliente
		if (idCliente != null && !idCliente.equals("")) {
			Cliente cliente = new Cliente();
			cliente.setId(new Integer(idCliente));
			cobrancaAcaoAtividadeComando.setCliente(cliente);
		} else {
			cobrancaAcaoAtividadeComando.setCliente(null);
		}

		// id cliente relação tipo
		if (idClienteRelacaoTipo != null
				&& !idClienteRelacaoTipo
						.equals(ConstantesSistema.NUMERO_NAO_INFORMADO + "")) {
			ClienteRelacaoTipo clienteRelacaoTipo = new ClienteRelacaoTipo();
			clienteRelacaoTipo.setId(new Integer(idClienteRelacaoTipo));
			cobrancaAcaoAtividadeComando
					.setClienteRelacaoTipo(clienteRelacaoTipo);
		} else {
			cobrancaAcaoAtividadeComando.setClienteRelacaoTipo(null);
		}

		// inicial referencial
		if (anoMesReferencialInicial != null
				&& !anoMesReferencialInicial.equals("")) {
			String anoInicial = anoMesReferencialInicial.substring(3, 7);
			String mesInicial = anoMesReferencialInicial.substring(0, 2);
			String anoMes = anoInicial + mesInicial;

			cobrancaAcaoAtividadeComando
					.setAnoMesReferenciaContaInicial(new Integer(anoMes));
		} else {
			cobrancaAcaoAtividadeComando
					.setAnoMesReferenciaContaInicial(new Integer("198001"));
		}

		// final referencial
		if (anoMesReferencialFinal != null
				&& !anoMesReferencialFinal.equals("")) {
			String anoFinal = anoMesReferencialFinal.substring(3, 7);
			String mesFinal = anoMesReferencialFinal.substring(0, 2);
			String anoMes = anoFinal + mesFinal;
			cobrancaAcaoAtividadeComando
					.setAnoMesReferenciaContaFinal(new Integer(anoMes));
		} else {
			String periodoFinalConta = this.getControladorUtil()
					.pesquisarParametrosDoSistema().getAnoMesArrecadacao()
					+ "";
			String ano = periodoFinalConta.substring(0, 4);
			String mes = periodoFinalConta.substring(4, 6);
			cobrancaAcaoAtividadeComando
					.setAnoMesReferenciaContaFinal(new Integer(ano + mes));
		}

		// data inicial conta
		if (dataVencimentoContaInicial != null
				&& !dataVencimentoContaInicial.equals("")) {
			cobrancaAcaoAtividadeComando.setDataVencimentoContaInicial(Util
					.converteStringParaDate(dataVencimentoContaInicial));
		} else {
			cobrancaAcaoAtividadeComando.setDataVencimentoContaInicial(Util
					.converteStringParaDate("01/01/1980"));
		}

		// data final conta
		if (dataVencimentoContaFinal != null
				&& !dataVencimentoContaFinal.equals("")) {
			cobrancaAcaoAtividadeComando.setDataVencimentoContaFinal(Util
					.converteStringParaDate(dataVencimentoContaFinal));
		} else {

			Calendar calendarNova = Calendar.getInstance();

			calendarNova.add(Calendar.MONTH, -1);

			String dataNova = "";
			dataNova = calendarNova.getActualMaximum(Calendar.DAY_OF_MONTH)
					+ "";

			if (calendarNova.get(Calendar.MONTH) < 10) {
				dataNova = dataNova + "/0"
						+ (calendarNova.get(Calendar.MONTH) + 1);
			} else {
				dataNova = dataNova + "/"
						+ (calendarNova.get(Calendar.MONTH) + 1);
			}
			dataNova = dataNova + "/" + calendarNova.get(Calendar.YEAR);

			cobrancaAcaoAtividadeComando.setDataVencimentoContaFinal(Util
					.converteStringParaDate(dataNova));
		}

		// indicador de critério
		if (indicador != null && !indicador.equals("")) {
			if (indicador.equals("Rota")) {
				cobrancaAcaoAtividadeComando.setIndicadorCriterio(new Short(
						(short) 1));
			} else {
				cobrancaAcaoAtividadeComando.setIndicadorCriterio(new Short(
						(short) 2));
			}
			cobrancaAcaoAtividadeComando.setCobrancaCriterio(null);
		}

		cobrancaAcaoAtividadeComando.setQuantidadeDocumentos(null);
		cobrancaAcaoAtividadeComando.setValorDocumentos(null);
		cobrancaAcaoAtividadeComando.setQuantidadeItensCobrados(null);

		// inserir cobranca acao atividade comando
		Integer idCobrancaAcaoAtividadeComando = (Integer) this
				.getControladorUtil().inserir(cobrancaAcaoAtividadeComando);

		cobrancaAcaoAtividadeComando.setId(idCobrancaAcaoAtividadeComando);

		Collection colecaoIdCobrancaAtividadeComandoRota = new ArrayList();

		if ((idGerenciaRegional != null && !idGerenciaRegional.equals(""))
				&& (idLocalidadeInicial != null && !idLocalidadeInicial
						.equals(""))) {
			// [FS008] - Obter Lista de Rotas
			Collection colecaoRotas = this.obterListasRotas(null,
					null, idSetorComercialInicial,
					idSetorComercialFinal, idLocalidadeInicial,
					idLocalidadeFinal, idGerenciaRegional, idUnidadeNegocio, codigoRotaInicial,
					codigoRotaFinal,numeroQuadraInicial,numeroQuadraFinal, idsLocalidade, idsSetorComercial, idLocalidade);
			if (colecaoRotas != null && !colecaoRotas.isEmpty()) {

				CobrancaAtividadeComandoRota cobrancaAtividadeComandoRota = null;
				Iterator iteratorColecaoRotas = colecaoRotas.iterator();
				while (iteratorColecaoRotas.hasNext()) {
					Rota rota = (Rota) iteratorColecaoRotas.next();

					CobrancaAtividadeComandoRotaPK cobrancaAtividadeComandoRotaPK = new CobrancaAtividadeComandoRotaPK();
					cobrancaAtividadeComandoRotaPK
							.setCobrancaAcaoAtividadeComandoId(cobrancaAcaoAtividadeComando
									.getId());
					cobrancaAtividadeComandoRotaPK.setRotaId(rota.getId());

					cobrancaAtividadeComandoRota = new CobrancaAtividadeComandoRota();
					cobrancaAtividadeComandoRota
							.setComp_id(cobrancaAtividadeComandoRotaPK);
					cobrancaAtividadeComandoRota
							.setCobrancaAcaoAtividadeComando(cobrancaAcaoAtividadeComando);
					cobrancaAtividadeComandoRota.setRota(rota);
					cobrancaAtividadeComandoRota.setUltimaAlteracao(new Date());

					// inserir cobranca atividade comando rota
					CobrancaAtividadeComandoRotaPK compIDCobrancaAtividadeComandoRotaPK = (CobrancaAtividadeComandoRotaPK) this
							.getControladorUtil().inserir(
									cobrancaAtividadeComandoRota);

					colecaoIdCobrancaAtividadeComandoRota
							.add(compIDCobrancaAtividadeComandoRotaPK);
				}
			}
		}
	}

	/**
	 * 
	 * Inserir Comando de Ação de Cobrança
	 * 
	 * [UC0243] Inserir Comando Ação de Cobrança
	 * 
	 * Consultar Cobranca Ação
	 * 
	 * @author Rafael Santos
	 * @date 04/04/2006
	 * 
	 * @param idCobrancaAcaoAtividadeComando
	 * @return
	 * @throws ControladorException
	 */
	public CobrancaAcao consultarCobrancaAcao(String idCobrancaAcao)
			throws ControladorException {

		CobrancaAcao cobrancaAcao = null;

		FiltroCobrancaAcao filtroCobrancaAcao = new FiltroCobrancaAcao();
		filtroCobrancaAcao.adicionarParametro(new ParametroSimples(
				FiltroCobrancaAcao.ID, idCobrancaAcao));

		Collection colecaoCobrancaAcao = this.getControladorUtil().pesquisar(
				filtroCobrancaAcao, CobrancaAcao.class.getName());

		if (colecaoCobrancaAcao != null && !colecaoCobrancaAcao.isEmpty()) {
			cobrancaAcao = (CobrancaAcao) colecaoCobrancaAcao.iterator().next();
		}

		return cobrancaAcao;

	}

	/**
	 * 
	 * Obter Lista de Rotas Comando
	 * 
	 * [UC0243] - Inserir Comando de Ação de Cobrança
	 * 
	 * Selecionar as Lsitas de Rotas do Comando
	 * 
	 * [SF0009] - Selecionar Lista de Rotas do Comando
	 * 
	 * @author Rafael Santos
	 * @date 22/03/2006
	 * 
	 * @param idCobrancaGrupo
	 * @return
	 */
	public Collection obterListaRotasComando(String idCobrancaGrupo,
			String idCobrancaAcaoAtividadeComando) throws ControladorException {

		Collection colecaoListaRotasComando = null;
		if (idCobrancaGrupo != null && !idCobrancaGrupo.equals("")) {
			FiltroRota filtroRota = new FiltroRota();
			filtroRota.adicionarParametro(new ParametroSimples(
					FiltroRota.COBRANCA_GRUPO_ID, idCobrancaGrupo));
			// filtroRota
			// .adicionarCaminhoParaCarregamentoEntidade(FiltroRota.COBRANCA_CRITERIO);
			colecaoListaRotasComando = this.getControladorUtil().pesquisar(
					filtroRota, Rota.class.getName());
		} else {

			if (idCobrancaAcaoAtividadeComando != null
					&& !idCobrancaAcaoAtividadeComando.equals("")) {
				colecaoListaRotasComando = new ArrayList();
				FiltroCobrancaAtividadeComandoRotas filtroCobrancaAtividadeComandoRotas = new FiltroCobrancaAtividadeComandoRotas();
				filtroCobrancaAtividadeComandoRotas
						.adicionarCaminhoParaCarregamentoEntidade("rota");
				filtroCobrancaAtividadeComandoRotas
						.adicionarCaminhoParaCarregamentoEntidade("rota");

				filtroCobrancaAtividadeComandoRotas
						.adicionarParametro(new ParametroSimples(
								FiltroCobrancaAtividadeComandoRotas.COMP_ID_COBRANCA_ACAO_ATIVIDADE_COMANDO_ID,
								idCobrancaAcaoAtividadeComando));

				Collection colecaoRotasCobrancaAtividadeComandoRota = this
						.getControladorUtil().pesquisar(
								filtroCobrancaAtividadeComandoRotas,
								CobrancaAtividadeComandoRota.class.getName());

				if (colecaoRotasCobrancaAtividadeComandoRota != null
						&& !colecaoRotasCobrancaAtividadeComandoRota.isEmpty()) {
					Iterator iteratorColecaoRotasCobrancaAtividadeComandoRota = colecaoRotasCobrancaAtividadeComandoRota
							.iterator();

					while (iteratorColecaoRotasCobrancaAtividadeComandoRota
							.hasNext()) {
						CobrancaAtividadeComandoRota cobrancaAtividadeComandoRota = (CobrancaAtividadeComandoRota) iteratorColecaoRotasCobrancaAtividadeComandoRota
								.next();

						FiltroRota filtroRota = new FiltroRota();
						filtroRota
								.adicionarParametro(new ParametroSimples(
										FiltroRota.ID_ROTA,
										cobrancaAtividadeComandoRota.getRota()
												.getId()));
						// filtroRota
						// .adicionarCaminhoParaCarregamentoEntidade(FiltroRota.COBRANCA_CRITERIO);

						Collection colecaoRota = this.getControladorUtil()
								.pesquisar(filtroRota, Rota.class.getName());

						if (colecaoListaRotasComando != null
								&& !colecaoListaRotasComando.isEmpty()) {
							colecaoListaRotasComando.add((Rota) colecaoRota
									.iterator().next());
						}
					}
				}

			}

		}

		return colecaoListaRotasComando;

	}

	/**
	 * 
	 * Permite excluir um comando de atividade de cobrança do crongrama ou
	 * alterar/excluir um comando deatividade de cobrança eventual
	 * 
	 * [UC0244] Manter Comando Ação de Cobrança
	 * 
	 * Executa o Comando Eventual
	 * 
	 * [SF0009] Executar Comando Eventual
	 * 
	 * @author Rafael Santos
	 * @date 23/03/2006
	 * 
	 * @param cobrancaAtividade
	 * @param cobrancaAcaoAtividadeComando
	 * @param cobrancaAcao
	 * @param colecaoRotas
	 * @return
	 * @throws ControladorException
	 */
	public GerarAtividadeAcaoCobrancaHelper executarComandoEventual(
			CobrancaAtividade cobrancaAtividade,
			CobrancaAcaoAtividadeComando cobrancaAcaoAtividadeComando,
			CobrancaAcao cobrancaAcao, Collection colecaoRotas)
			throws ControladorException {

		GerarAtividadeAcaoCobrancaHelper gerarAtividadeAcaoCobrancaHelper = null;
		if (cobrancaAtividade.getId().intValue() == CobrancaAtividade.ENCERRAR
				.intValue()) {
			// [UC0000] - Encerrar Atividade de A ção de Cobrança
		} else {
			String[] idComandos = new String[1];
			idComandos[0] = cobrancaAcaoAtividadeComando.getId().toString();
			// [UC0251] - Gerar Atividade de Ação de Cobrança
			/* gerarAtividadeAcaoCobrancaHelper = */this
					.executarAtividadeAcaoCobranca(null, idComandos);
		}

		return gerarAtividadeAcaoCobrancaHelper;

	}

	/**
	 * 
	 * Permite excluir um comando de atividade de cobrança do crongrama ou
	 * alterar/excluir um comando deatividade de cobrança eventual
	 * 
	 * [UC0244] Manter Comando Ação de Cobrança
	 * 
	 * Verificar Seleção de pelo menos uma atividade de cobrança
	 * 
	 * [FS0002] - Verificar Seleção de pelo menos uma atividade de cobrança
	 * 
	 * @author Rafael Santos
	 * @date 23/03/2006
	 * 
	 * @return
	 * @throws ControladorException
	 */
	public Collection obterListaAtividadeCronogramaAcaoCobrancaComandadas()
			throws ControladorException {
		Collection colecaoAtividadeCronogramaAcaoCobrancaComandadas = null;

		FiltroCobrancaAcaoAtividadeCronograma filtroCobrancaAcaoAtividadeCronograma = new FiltroCobrancaAcaoAtividadeCronograma();
		filtroCobrancaAcaoAtividadeCronograma
				.adicionarParametro(new ParametroNaoNulo(
						FiltroCobrancaAcaoAtividadeCronograma.COMANDO));

		ConectorOr conectorOr = new ConectorOr(new ParametroNulo(
				FiltroCobrancaAcaoAtividadeCronograma.REALIZACAO),
				new MenorQue(FiltroCobrancaAcaoAtividadeCronograma.REALIZACAO,
						FiltroCobrancaAcaoAtividadeCronograma.COMANDO));

		filtroCobrancaAcaoAtividadeCronograma
				.adicionarCaminhoParaCarregamentoEntidade(FiltroCobrancaAcaoAtividadeCronograma.COBRANCA_ATIVIDADE);
		filtroCobrancaAcaoAtividadeCronograma
				.adicionarCaminhoParaCarregamentoEntidade(FiltroCobrancaAcaoAtividadeCronograma.COBRANCA_GRUPO);
		filtroCobrancaAcaoAtividadeCronograma
				.adicionarCaminhoParaCarregamentoEntidade(FiltroCobrancaAcaoAtividadeCronograma.COBRANCA_ACAO);

		filtroCobrancaAcaoAtividadeCronograma.setConsultaSemLimites(true);

		filtroCobrancaAcaoAtividadeCronograma.adicionarParametro(conectorOr);
		
		String orderBy[] = {FiltroCobrancaAcaoAtividadeCronograma.COBRANCA_GRUPO_CRONOGRAMA_MES_MES_ANO,
				FiltroCobrancaAcaoAtividadeCronograma.
				COBRANCA_GRUPO_CRONOGRAMA_MES_COBRANCA_GRUPO_DESCRICAO_ABREVIADA};
		filtroCobrancaAcaoAtividadeCronograma.setCampoOrderBy(orderBy);
				
		colecaoAtividadeCronogramaAcaoCobrancaComandadas = this
				.getControladorUtil().pesquisar(
						filtroCobrancaAcaoAtividadeCronograma,
						CobrancaAcaoAtividadeCronograma.class.getName());
		return colecaoAtividadeCronogramaAcaoCobrancaComandadas;
	}

	/**
	 * 
	 * Permite excluir um comando de atividade de cobrança do crongrama ou
	 * alterar/excluir um comando deatividade de cobrança eventual
	 * 
	 * [UC0244] Manter Comando Ação de Cobrança
	 * 
	 * Verificar Seleção de pelo menos uma atividade de cobrança
	 * 
	 * [FS0002] - Verificar Seleção de pelo menos uma atividade de cobrança
	 * 
	 * @author Rafael Santos
	 * @date 23/03/2006
	 * 
	 * @return
	 * @throws ControladorException
	 */
	public Collection obterListaAtividadesEventuaisAcaoCobrancaComandadas()
			throws ControladorException {
		Collection colecaoAtividadesEventuaisAcaoCobrancaComandadas = null;

		FiltroCobrancaAcaoAtividadeComando filtroCobrancaAcaoAtividadeComando = new FiltroCobrancaAcaoAtividadeComando();
		
		filtroCobrancaAcaoAtividadeComando
				.adicionarParametro(new ParametroNaoNulo(
						FiltroCobrancaAcaoAtividadeComando.COMANDO));

		filtroCobrancaAcaoAtividadeComando
				.adicionarParametro(new ParametroNulo(
						FiltroCobrancaAcaoAtividadeComando.DATA_ENCERRAMENTO_REALIZADA));

		filtroCobrancaAcaoAtividadeComando
				.adicionarCaminhoParaCarregamentoEntidade(FiltroCobrancaAcaoAtividadeComando.COBRANCA_ACAO);
		filtroCobrancaAcaoAtividadeComando
				.adicionarCaminhoParaCarregamentoEntidade(FiltroCobrancaAcaoAtividadeComando.COBRANCA_ATIVIDADE);
		filtroCobrancaAcaoAtividadeComando
				.adicionarCaminhoParaCarregamentoEntidade(FiltroCobrancaAcaoAtividadeComando.COBRANCA_CRITERIO);

		filtroCobrancaAcaoAtividadeComando.setConsultaSemLimites(true);
		
		filtroCobrancaAcaoAtividadeComando.setCampoOrderBy(FiltroCobrancaAcaoAtividadeComando.COMANDO);

		colecaoAtividadesEventuaisAcaoCobrancaComandadas = this
				.getControladorUtil().pesquisar(
						filtroCobrancaAcaoAtividadeComando,
						CobrancaAcaoAtividadeComando.class.getName());

		return colecaoAtividadesEventuaisAcaoCobrancaComandadas;
	}

	/**
	 * 
	 * Permite excluir um comando de atividade de cobrança do crongrama ou
	 * alterar/excluir um comando deatividade de cobrança eventual
	 * 
	 * [UC0244] Manter Comando Ação de Cobrança
	 * 
	 * Exclui Comando de Atividade do Cronograma de Ação de Cobrança
	 * 
	 * [SB0001] - Excluir Comando de Atividade de Ação de Cobrança
	 * 
	 * @author Rafael Santos
	 * @date 24/03/2006
	 * 
	 * @param idCobrancaAcaoAtividadeCrongrama
	 */
	public void excluirComandoAtividadeCronogramaAcaoCobranca(
			String[] idsCobrancaAcaoAtividadeCronograma)
			throws ControladorException {
		FiltroCobrancaAcaoAtividadeCronograma filtroCobrancaAcaoAtividadeCronograma = new FiltroCobrancaAcaoAtividadeCronograma();

		for (int i = 0; i < idsCobrancaAcaoAtividadeCronograma.length; i++) {
			String idCobrancaAcaoAtividadeCrongrama = idsCobrancaAcaoAtividadeCronograma[i];

			filtroCobrancaAcaoAtividadeCronograma.limparListaParametros();

			// Seta o filtro para buscar
			filtroCobrancaAcaoAtividadeCronograma
					.adicionarParametro(new ParametroSimples(
							FiltroCobrancaAcaoAtividadeCronograma.ID,
							idCobrancaAcaoAtividadeCrongrama));

			filtroCobrancaAcaoAtividadeCronograma
					.adicionarCaminhoParaCarregamentoEntidade(FiltroCobrancaAcaoAtividadeCronograma.COBRANCA_ACAO_CRONOGRAMA);
			filtroCobrancaAcaoAtividadeCronograma
					.adicionarCaminhoParaCarregamentoEntidade(FiltroCobrancaAcaoAtividadeCronograma.COBRANCA_ATIVIDADE);

			CobrancaAcaoAtividadeCronograma cobrancaAcaoAtividadeCronograma = (CobrancaAcaoAtividadeCronograma) ((List) (getControladorUtil()
					.pesquisar(filtroCobrancaAcaoAtividadeCronograma,
							CobrancaAcaoAtividadeCronograma.class.getName())))
					.get(0);

			filtroCobrancaAcaoAtividadeCronograma.limparListaParametros();

			// Seta o filtro para buscar
			filtroCobrancaAcaoAtividadeCronograma
					.adicionarParametro(new ParametroSimples(
							FiltroCobrancaAcaoAtividadeCronograma.ID,
							idCobrancaAcaoAtividadeCrongrama));

			filtroCobrancaAcaoAtividadeCronograma
					.adicionarCaminhoParaCarregamentoEntidade(FiltroCobrancaAcaoAtividadeCronograma.COBRANCA_ACAO_CRONOGRAMA);
			filtroCobrancaAcaoAtividadeCronograma
					.adicionarCaminhoParaCarregamentoEntidade(FiltroCobrancaAcaoAtividadeCronograma.COBRANCA_ATIVIDADE);

			// Procura na base
			CobrancaAcaoAtividadeCronograma cobrancaAcaoAtividadeCronogramaNaBase = (CobrancaAcaoAtividadeCronograma) ((List) (getControladorUtil()
					.pesquisar(filtroCobrancaAcaoAtividadeCronograma,
							CobrancaAcaoAtividadeCronograma.class.getName())))
					.get(0);

			// Verificar se o CobrancaAcaoAtividadeCronograma já foi atualizado
			// por outro usuário
			if (cobrancaAcaoAtividadeCronogramaNaBase
					.getUltimaAlteracao()
					.after(cobrancaAcaoAtividadeCronograma.getUltimaAlteracao())) {
				sessionContext.setRollbackOnly();
				throw new ControladorException("atencao.atualizacao.timestamp");
			}

			cobrancaAcaoAtividadeCronograma.setComando(null);
			cobrancaAcaoAtividadeCronograma.setUltimaAlteracao(new Date());
			// atualiza

			// ------------ REGISTRAR TRANSAÇÃO ----------------
			/*
			 * RegistradorOperacao registradorOperacao = new
			 * RegistradorOperacao(
			 * Operacao.OPERACAO_REMOVER_COMANDO_ACAO_COBRANCA_CRONOGRAMA, new
			 * UsuarioAcaoUsuarioHelper(usuarioLogado,
			 * UsuarioAcao.USUARIO_ACAO_EFETUOU_OPERACAO));
			 * 
			 * Operacao operacao = new Operacao();
			 * operacao.setId(Operacao.OPERACAO_REMOVER_COMANDO_ACAO_COBRANCA_CRONOGRAMA);
			 * 
			 * OperacaoEfetuada operacaoEfetuada = new OperacaoEfetuada();
			 * operacaoEfetuada.setOperacao(operacao);
			 * cobrancaAcaoAtividadeCronograma.setOperacaoEfetuada(operacaoEfetuada);
			 * cobrancaAcaoAtividadeCronograma.adicionarUsuario(usuarioLogado,
			 * UsuarioAcao.USUARIO_ACAO_EFETUOU_OPERACAO);
			 * registradorOperacao.registrarOperacao(cobrancaAcaoAtividadeCronograma);
			 * //------------ REGISTRAR TRANSAÇÃO ----------------
			 */

			getControladorUtil().atualizar(cobrancaAcaoAtividadeCronograma);
		}

	}

	/**
	 * 
	 * Permite excluir um comando de atividade de cobrança do crongrama ou
	 * alterar/excluir um comando deatividade de cobrança eventual
	 * 
	 * [UC0244] Manter Comando Ação de Cobrança
	 * 
	 * Exclui Comando de Atividade de Eventual de Ação de Cobrança
	 * 
	 * [SB0003] - Excluir Comando de Atividade Eventual de Ação de Cobrança
	 * 
	 * @author Rafael Santos
	 * @date 24/03/2006
	 * 
	 * @param idCobrancaAcaoAtividadeCrongrama
	 */
	public void excluirComandoAtividadeEventualAcaoCobranca(
			String[] idsCobrancaAcaoAtividadeEventual)
			throws ControladorException {
		FiltroCobrancaAcaoAtividadeComando filtroCobrancaAcaoAtividadeComando = new FiltroCobrancaAcaoAtividadeComando();

		for (int i = 0; i < idsCobrancaAcaoAtividadeEventual.length; i++) {
			String idCobrancaAcaoAtividadeEventual = idsCobrancaAcaoAtividadeEventual[i];

			filtroCobrancaAcaoAtividadeComando.limparListaParametros();

			// Seta o filtro para buscar
			filtroCobrancaAcaoAtividadeComando
					.adicionarParametro(new ParametroSimples(
							FiltroCobrancaAcaoAtividadeComando.ID,
							idCobrancaAcaoAtividadeEventual));

			filtroCobrancaAcaoAtividadeComando
					.adicionarCaminhoParaCarregamentoEntidade(FiltroCobrancaAcaoAtividadeComando.ROTA_INICIAL);
			filtroCobrancaAcaoAtividadeComando
			.adicionarCaminhoParaCarregamentoEntidade(FiltroCobrancaAcaoAtividadeComando.ROTA_FINAL);
			filtroCobrancaAcaoAtividadeComando
					.adicionarCaminhoParaCarregamentoEntidade(FiltroCobrancaAcaoAtividadeComando.COBRANCA_CRITERIO);
			filtroCobrancaAcaoAtividadeComando
					.adicionarCaminhoParaCarregamentoEntidade(FiltroCobrancaAcaoAtividadeComando.CLIENTE);
			filtroCobrancaAcaoAtividadeComando
					.adicionarCaminhoParaCarregamentoEntidade(FiltroCobrancaAcaoAtividadeComando.COBRANCA_ACAO);
			filtroCobrancaAcaoAtividadeComando
					.adicionarCaminhoParaCarregamentoEntidade(FiltroCobrancaAcaoAtividadeComando.USUARIO);
			filtroCobrancaAcaoAtividadeComando
					.adicionarCaminhoParaCarregamentoEntidade(FiltroCobrancaAcaoAtividadeComando.EMPRESA);
			filtroCobrancaAcaoAtividadeComando
					.adicionarCaminhoParaCarregamentoEntidade(FiltroCobrancaAcaoAtividadeComando.CLIENTE_RELACAO_TIPO);
			filtroCobrancaAcaoAtividadeComando
					.adicionarCaminhoParaCarregamentoEntidade(FiltroCobrancaAcaoAtividadeComando.COBRANCA_ATIVIDADE);
			filtroCobrancaAcaoAtividadeComando
					.adicionarCaminhoParaCarregamentoEntidade(FiltroCobrancaAcaoAtividadeComando.GERENCIAL_REGIONAL);
			filtroCobrancaAcaoAtividadeComando
					.adicionarCaminhoParaCarregamentoEntidade(FiltroCobrancaAcaoAtividadeComando.LOCALIDADE_INICIAL);
			filtroCobrancaAcaoAtividadeComando
					.adicionarCaminhoParaCarregamentoEntidade(FiltroCobrancaAcaoAtividadeComando.COBRANCA_GRUPO);

			CobrancaAcaoAtividadeComando cobrancaAcaoAtividadeComando = (CobrancaAcaoAtividadeComando) ((List) (getControladorUtil()
					.pesquisar(filtroCobrancaAcaoAtividadeComando,
							CobrancaAcaoAtividadeComando.class.getName())))
					.get(0);

			filtroCobrancaAcaoAtividadeComando.limparListaParametros();

			// Seta o filtro para buscar
			filtroCobrancaAcaoAtividadeComando
					.adicionarParametro(new ParametroSimples(
							FiltroCobrancaAcaoAtividadeComando.ID,
							idCobrancaAcaoAtividadeEventual));

			filtroCobrancaAcaoAtividadeComando
					.adicionarCaminhoParaCarregamentoEntidade(FiltroCobrancaAcaoAtividadeComando.ROTA_INICIAL);
			filtroCobrancaAcaoAtividadeComando
			.adicionarCaminhoParaCarregamentoEntidade(FiltroCobrancaAcaoAtividadeComando.ROTA_FINAL);
			filtroCobrancaAcaoAtividadeComando
					.adicionarCaminhoParaCarregamentoEntidade(FiltroCobrancaAcaoAtividadeComando.COBRANCA_CRITERIO);
			filtroCobrancaAcaoAtividadeComando
					.adicionarCaminhoParaCarregamentoEntidade(FiltroCobrancaAcaoAtividadeComando.CLIENTE);
			filtroCobrancaAcaoAtividadeComando
					.adicionarCaminhoParaCarregamentoEntidade(FiltroCobrancaAcaoAtividadeComando.COBRANCA_ACAO);
			filtroCobrancaAcaoAtividadeComando
					.adicionarCaminhoParaCarregamentoEntidade(FiltroCobrancaAcaoAtividadeComando.USUARIO);
			filtroCobrancaAcaoAtividadeComando
					.adicionarCaminhoParaCarregamentoEntidade(FiltroCobrancaAcaoAtividadeComando.EMPRESA);
			filtroCobrancaAcaoAtividadeComando
					.adicionarCaminhoParaCarregamentoEntidade(FiltroCobrancaAcaoAtividadeComando.CLIENTE_RELACAO_TIPO);
			filtroCobrancaAcaoAtividadeComando
					.adicionarCaminhoParaCarregamentoEntidade(FiltroCobrancaAcaoAtividadeComando.COBRANCA_ATIVIDADE);
			filtroCobrancaAcaoAtividadeComando
					.adicionarCaminhoParaCarregamentoEntidade(FiltroCobrancaAcaoAtividadeComando.GERENCIAL_REGIONAL);
			filtroCobrancaAcaoAtividadeComando
					.adicionarCaminhoParaCarregamentoEntidade(FiltroCobrancaAcaoAtividadeComando.LOCALIDADE_INICIAL);
			filtroCobrancaAcaoAtividadeComando
					.adicionarCaminhoParaCarregamentoEntidade(FiltroCobrancaAcaoAtividadeComando.COBRANCA_GRUPO);

			// Procura na base
			CobrancaAcaoAtividadeComando cobrancaAcaoAtividadeComandoNaBase = (CobrancaAcaoAtividadeComando) ((List) (getControladorUtil()
					.pesquisar(filtroCobrancaAcaoAtividadeComando,
							CobrancaAcaoAtividadeComando.class.getName())))
					.get(0);

			// Verificar se o CobrancaAcaoAtividadeComando já foi atualizado por
			// outro usuário
			if (cobrancaAcaoAtividadeComandoNaBase.getUltimaAlteracao().after(
					cobrancaAcaoAtividadeComando.getUltimaAlteracao())) {
				sessionContext.setRollbackOnly();
				throw new ControladorException("atencao.atualizacao.timestamp");
			}

			// filtrar as rotas dos comandos
			FiltroCobrancaAtividadeComandoRotas filtroCobrancaAtividadeComandoRotas = new FiltroCobrancaAtividadeComandoRotas();
			filtroCobrancaAtividadeComandoRotas
					.adicionarParametro(new ParametroSimples(
							FiltroCobrancaAtividadeComandoRotas.COMP_ID_COBRANCA_ACAO_ATIVIDADE_COMANDO_ID,
							idCobrancaAcaoAtividadeEventual));
			filtroCobrancaAtividadeComandoRotas
					.adicionarCaminhoParaCarregamentoEntidade(FiltroCobrancaAtividadeComandoRotas.COBRANCA_ACAO_ATIVIDADE_COMANDO);

			Collection colecaoCobrancaAtividadeComandoRotas = getControladorUtil()
					.pesquisar(filtroCobrancaAtividadeComandoRotas,
							CobrancaAtividadeComandoRota.class.getName());

			if (colecaoCobrancaAtividadeComandoRotas != null
					&& !colecaoCobrancaAtividadeComandoRotas.isEmpty()) {
				Iterator iteratorColecaoCobrancaAtividadeComandoRotas = colecaoCobrancaAtividadeComandoRotas
						.iterator();

				while (iteratorColecaoCobrancaAtividadeComandoRotas.hasNext()) {
					CobrancaAtividadeComandoRota cobrancaAtividadeComandoRota = (CobrancaAtividadeComandoRota) iteratorColecaoCobrancaAtividadeComandoRotas
							.next();
					// exclui cobrancaAtividadeComandoRota
					getControladorUtil().remover(cobrancaAtividadeComandoRota);
				}
			}
			
			try{
				//excluir os registros de Imóveis Não Gerados
				this.repositorioCobranca.removerImoveisNaoGerados(null, new Integer(idCobrancaAcaoAtividadeEventual));
				
				//3.1.1. Exclui a relação de imóveis do comando
				this.repositorioCobranca.removerImoveisComandoAtividadeImovel(new Integer(idCobrancaAcaoAtividadeEventual));
				
			} catch (ErroRepositorioException ex) {
				sessionContext.setRollbackOnly();
				throw new ControladorException("erro.sistema", ex);
			}
			
			//	Exclui as situações de fiscalização do comando (ocorrências da tabela COB_ACAO_ATV_CMD_FIS_SIT 
			// para CACM_ID=Id do Comando selecionado, caso existam).
			this.removerCobrancaAcaoAtividadeComandoFiscalizacaoSituacao(
					cobrancaAcaoAtividadeComandoNaBase.getId());

			// exclui cobrancaAcaoAtividadeComando
			// ------------ REGISTRAR TRANSAÇÃO ----------------
			/*
			 * RegistradorOperacao registradorOperacao = new
			 * RegistradorOperacao(
			 * Operacao.OPERACAO_REMOVER_COMANDO_ACAO_COBRANCA_EVENTUAL, new
			 * UsuarioAcaoUsuarioHelper(usuarioLogado,
			 * UsuarioAcao.USUARIO_ACAO_EFETUOU_OPERACAO));
			 * 
			 * Operacao operacao = new Operacao();
			 * operacao.setId(Operacao.OPERACAO_REMOVER_COMANDO_ACAO_COBRANCA_EVENTUAL);
			 * 
			 * OperacaoEfetuada operacaoEfetuada = new OperacaoEfetuada();
			 * operacaoEfetuada.setOperacao(operacao);
			 * cobrancaAcaoAtividadeComando.setOperacaoEfetuada(operacaoEfetuada);
			 * cobrancaAcaoAtividadeComando.adicionarUsuario(usuarioLogado,
			 * UsuarioAcao.USUARIO_ACAO_EFETUOU_OPERACAO);
			 * registradorOperacao.registrarOperacao(cobrancaAcaoAtividadeComando);
			 */
			// ------------ REGISTRAR TRANSAÇÃO ----------------
			getControladorUtil().remover(cobrancaAcaoAtividadeComando);
		}

	}

	/**
	 * Permite excluir um comando de atividade de cobrança do crongrama ou
	 * alterar/excluir um comando deatividade de cobrança eventual
	 * 
	 * [UC0244] Manter Comando Ação de Cobrança
	 * 
	 * Consultar Linhas do Criterios
	 * 
	 * [SB0005] - Consultar Linhas do Criterios
	 * 
	 * @author Rafael Santos
	 * @date 24/03/2006
	 * 
	 * @param idCriterioCobranca
	 * @return
	 * @throws ControladorException
	 */
	public Collection consultarLinhasCriterio(String idCriterioCobranca)
			throws ControladorException {

		FiltroCobrancaCriterioLinha filtroCobrancaCriterioLinha = new FiltroCobrancaCriterioLinha();
		filtroCobrancaCriterioLinha.adicionarParametro(new ParametroSimples(
				FiltroCobrancaCriterioLinha.COBRANCA_CRITERIO_ID,
				idCriterioCobranca));
		filtroCobrancaCriterioLinha
				.adicionarCaminhoParaCarregamentoEntidade(FiltroCobrancaCriterioLinha.CATEGORIA);
		filtroCobrancaCriterioLinha
				.adicionarCaminhoParaCarregamentoEntidade(FiltroCobrancaCriterioLinha.IMOVEL_PERFIL);
		filtroCobrancaCriterioLinha.setCampoOrderBy(
				FiltroCobrancaCriterioLinha.ID_IMOVEL_PERFIL,
				FiltroCobrancaCriterioLinha.ID_CATEGORIA);

		Collection colecaoCobrancaCriterioLinha = getControladorUtil()
				.pesquisar(filtroCobrancaCriterioLinha,
						CobrancaCriterioLinha.class.getName());

		if (colecaoCobrancaCriterioLinha == null
				|| colecaoCobrancaCriterioLinha.isEmpty()) {
			throw new ControladorException(
					"atencao.pesquisa.nenhum_registro_tabela", null,
					"Tabela Cobrança Critério Linha");
		}

		return colecaoCobrancaCriterioLinha;
	}

	/**
	 * 
	 * Permite excluir um comando de atividade de cobrança do crongrama ou
	 * alterar/excluir um comando deatividade de cobrança eventual
	 * 
	 * [UC0244] Manter Comando Ação de Cobrança
	 * 
	 * Selecionar Critérios do Comando
	 * 
	 * [SB0004] - Selecionar Critérios do Comando
	 * 
	 * @author Rafael Santos
	 * @date 24/03/2006
	 * 
	 * @param idCobrancaAcao
	 * @param idCobrancaAcaoAtividadeComando
	 * @param indicadorCriterioComandoMarcado
	 * @return
	 * @throws ControladorException
	 */
	public Collection consultarCriteriosComando(String idCobrancaAcao)
			throws ControladorException {

		FiltroCobrancaCriterio filtroCobrancaCriterio = new FiltroCobrancaCriterio();

		filtroCobrancaCriterio.adicionarParametro(new ParametroSimples(
				FiltroCobrancaCriterio.ID_COBRANCA_ACAO, idCobrancaAcao));
		// filtroCobrancaCriterio
		// .adicionarCaminhoParaCarregamentoEntidade(FiltroCobrancaCriterio.COBRANCA_ACAO);

		Collection colecaoCriterioCobranca = getControladorUtil().pesquisar(
				filtroCobrancaCriterio, CobrancaCriterio.class.getName());

		if (colecaoCriterioCobranca == null
				|| colecaoCriterioCobranca.isEmpty()) {
			throw new ControladorException(
					"atencao.pesquisa.nenhum_registro_tabela", null,
					"Tabela Cobrança Critério");
		}
		return colecaoCriterioCobranca;
	}

	/**
	 * 
	 * Permite excluir um comando de atividade de cobrança do crongrama ou
	 * alterar/excluir um comando deatividade de cobrança eventual
	 * 
	 * [UC0244] Manter Comando Ação de Cobrança
	 * 
	 * Consultar O Periodo Final da Conta para usar em Cobranca Ação Atividade
	 * Comando
	 * 
	 * @author Rafael Santos
	 * @date 25/03/2006
	 * 
	 * @return
	 * @throws ControladorException
	 */
	public String consultarPeriodoFinalContaCobrancaAcaoAtividadeComando()
			throws ControladorException {

		String periodoFinalContaCobrancaAcaoAtividadeComando = null;

		String periodoFinalConta = this.getControladorUtil()
				.pesquisarParametrosDoSistema().getAnoMesArrecadacao()
				+ "";
		if (periodoFinalConta != null && !periodoFinalConta.equals("")) {

			String ano = periodoFinalConta.substring(0, 4);
			String mes = periodoFinalConta.substring(4, 6);

			periodoFinalContaCobrancaAcaoAtividadeComando = mes + "/" + ano;
		}

		return periodoFinalContaCobrancaAcaoAtividadeComando;
	}

	/**
	 * 
	 * Permite excluir um comando de atividade de cobrança do crongrama ou
	 * alterar/excluir um comando deatividade de cobrança eventual
	 * 
	 * [UC0244] Manter Comando Ação de Cobrança
	 * 
	 * Consultar O Periodo Vencimento da Conta para usar em Cobranca Ação
	 * Atividade Comando
	 * 
	 * @author Rafael Santos
	 * @date 25/03/2006
	 * 
	 * @return
	 */
	public String consultarPeriodoVencimentoContaFinalCobrancaAcaoAtividadeComando()
			throws ControladorException {
		Calendar calendar = new GregorianCalendar();

		calendar.add(Calendar.MONTH, -1);

		String periodoVencimentoContaFinalCobrancaAcaoAtividadeComando = "";
		if (calendar.get(Calendar.DAY_OF_MONTH) < 10) {
			periodoVencimentoContaFinalCobrancaAcaoAtividadeComando = periodoVencimentoContaFinalCobrancaAcaoAtividadeComando
					+ "0" + calendar.get(Calendar.DAY_OF_MONTH);
		} else {
			periodoVencimentoContaFinalCobrancaAcaoAtividadeComando = calendar
					.get(Calendar.DAY_OF_MONTH)
					+ "";
		}
		if (calendar.get(Calendar.MONTH) < 10) {
			periodoVencimentoContaFinalCobrancaAcaoAtividadeComando = periodoVencimentoContaFinalCobrancaAcaoAtividadeComando
					+ "/0" + calendar.get(Calendar.MONTH);
		} else {
			periodoVencimentoContaFinalCobrancaAcaoAtividadeComando = periodoVencimentoContaFinalCobrancaAcaoAtividadeComando
					+ "/" + calendar.get(Calendar.MONTH);
		}
		periodoVencimentoContaFinalCobrancaAcaoAtividadeComando = periodoVencimentoContaFinalCobrancaAcaoAtividadeComando
				+ "/" + calendar.get(Calendar.YEAR);

		return periodoVencimentoContaFinalCobrancaAcaoAtividadeComando;
	}

	/**
	 * 
	 * Permite excluir um comando de atividade de cobrança do crongrama ou
	 * alterar/excluir um comando deatividade de cobrança eventual
	 * 
	 * [UC0244] Manter Comando Ação de Cobrança
	 * 
	 * Consultar as Cobranca Grupo
	 * 
	 * @author Rafael Santos
	 * @date 25/03/2006
	 * 
	 * @return
	 * @throws ControladorException
	 */
	public Collection obterColecaoCobrancaGrupo() throws ControladorException {

		FiltroCobrancaGrupo filtroCobrancaGrupo = new FiltroCobrancaGrupo();
		filtroCobrancaGrupo.setCampoOrderBy(FiltroCobrancaGrupo.DESCRICAO);
		filtroCobrancaGrupo.adicionarParametro(new ParametroSimples(
			FiltroCobrancaGrupo.INDICADOR_USO, ConstantesSistema.INDICADOR_USO_ATIVO));
		Collection colecaoCobrancaGrupo = this.getControladorUtil().pesquisar(
				filtroCobrancaGrupo, CobrancaGrupo.class.getName());

		if (colecaoCobrancaGrupo == null || colecaoCobrancaGrupo.isEmpty()) {
			throw new ControladorException(
					"atencao.pesquisa.nenhum_registro_tabela", null,
					"Tabela Cobrança Grupo");
		}

		return colecaoCobrancaGrupo;
	}

	/**
	 * 
	 * Permite excluir um comando de atividade de cobrança do crongrama ou
	 * alterar/excluir um comando deatividade de cobrança eventual
	 * 
	 * [UC0244] Manter Comando Ação de Cobrança
	 * 
	 * Consultar as Cobranca Atividade
	 * 
	 * @author Rafael Santos
	 * @date 25/03/2006
	 * 
	 * @return
	 * @throws ControladorException
	 */
	public Collection obterColecaoCobrancaAtividade()
			throws ControladorException {

		FiltroCobrancaAtividade filtroCobrancaAtividade = new FiltroCobrancaAtividade();
		filtroCobrancaAtividade
				.setCampoOrderBy(FiltroCobrancaAtividade.DESCRICAO);
		Collection colecaoCobrancaAtividade = this.getControladorUtil()
				.pesquisar(filtroCobrancaAtividade,
						CobrancaAtividade.class.getName());

		if (colecaoCobrancaAtividade == null
				|| colecaoCobrancaAtividade.isEmpty()) {
			throw new ControladorException(
					"atencao.pesquisa.nenhum_registro_tabela", null,
					"Tabela Cobrança Atividade");
		}
		return colecaoCobrancaAtividade;
	}

	/**
	 * 
	 * Permite excluir um comando de atividade de cobrança do crongrama ou
	 * alterar/excluir um comando deatividade de cobrança eventual
	 * 
	 * [UC0244] Manter Comando Ação de Cobrança
	 * 
	 * Consultar as Cobranca Acao
	 * 
	 * @author Rafael Santos
	 * @date 25/03/2006
	 * 
	 * @return
	 * @throws ControladorException
	 */
	public Collection obterColecaoCobrancaAcao() throws ControladorException {
		FiltroCobrancaAcao filtroCobrancaAcao = new FiltroCobrancaAcao();
		filtroCobrancaAcao.setCampoOrderBy(FiltroCobrancaAcao.DESCRICAO);
		filtroCobrancaAcao.adicionarParametro(new ParametroSimples(
			FiltroCobrancaAcao.INDICADOR_USO, ConstantesSistema.INDICADOR_USO_ATIVO));
		Collection colecaoCobrancaAcao = this.getControladorUtil().pesquisar(
				filtroCobrancaAcao, CobrancaAcao.class.getName());

		if (Util.isVazioOrNulo(colecaoCobrancaAcao)) {
			throw new ControladorException(
					"atencao.pesquisa.nenhum_registro_tabela", null,
					"Tabela Cobrança Ação");
		}

		return colecaoCobrancaAcao;
	}

	/**
	 * 
	 * Permite excluir um comando de atividade de cobrança do crongrama ou
	 * alterar/excluir um comando deatividade de cobrança eventual
	 * 
	 * [UC0244] Manter Comando Ação de Cobrança
	 * 
	 * Consultar as Gerencia Regionais
	 * 
	 * @author Rafael Santos
	 * @date 25/03/2006
	 * 
	 * @return
	 * @throws ControladorException
	 */
	public Collection obterColecaoGerenciaRegional()
			throws ControladorException {
		FiltroGerenciaRegional filtroGerenciaRegional = new FiltroGerenciaRegional();
		filtroGerenciaRegional
				.setCampoOrderBy(FiltroGerenciaRegional.NOME);
		filtroGerenciaRegional.adicionarParametro(new ParametroSimples(FiltroGerenciaRegional.INDICADOR_USO,ConstantesSistema.SIM));
		Collection colecaoGerenciaRegional = this.getControladorUtil()
				.pesquisar(filtroGerenciaRegional,
						GerenciaRegional.class.getName());

		if (colecaoGerenciaRegional == null
				|| colecaoGerenciaRegional.isEmpty()) {
			throw new ControladorException("atencao.pesquisa_inexistente",
					null, "Tabela Gerência Regional");
		}

		return colecaoGerenciaRegional;
	}

	/**
	 * 
	 * Permite excluir um comando de atividade de cobrança do crongrama ou
	 * alterar/excluir um comando deatividade de cobrança eventual
	 * 
	 * [UC0244] Manter Comando Ação de Cobrança
	 * 
	 * Consultar as Unidade de Negocio
	 * 
	 * @author Rafael Santos
	 * @date 11/10/2006
	 * 
	 * @return
	 * @throws ControladorException
	 */
	public Collection obterColecaoUnidadeNegocio() throws ControladorException {
		FiltroUnidadeNegocio filtroUnidadeNegocio = new FiltroUnidadeNegocio();
		filtroUnidadeNegocio
				.setCampoOrderBy(FiltroGerenciaRegional.NOME_ABREVIADO);
		Collection colecaoUnidadeNegocio = this.getControladorUtil().pesquisar(
				filtroUnidadeNegocio, UnidadeNegocio.class.getName());

		if (colecaoUnidadeNegocio == null || colecaoUnidadeNegocio.isEmpty()) {
			throw new ControladorException("atencao.pesquisa_inexistente",
					null, "Tabela Unidade Negocio");
		}

		return colecaoUnidadeNegocio;
	}

	/**
	 * 
	 * Permite excluir um comando de atividade de cobrança do crongrama ou
	 * alterar/excluir um comando deatividade de cobrança eventual
	 * 
	 * [UC0244] Manter Comando Ação de Cobrança
	 * 
	 * Consultar as Relações Cliente Tipo
	 * 
	 * @author Rafael Santos
	 * @date 25/03/2006
	 * 
	 * @return
	 * @throws ControladorException
	 */
	public Collection obterColecaoClienteRelacaoTipo()
			throws ControladorException {
		FiltroClienteRelacaoTipo filtroClienteRelacaoTipo = new FiltroClienteRelacaoTipo();
		filtroClienteRelacaoTipo
				.setCampoOrderBy(FiltroClienteRelacaoTipo.DESCRICAO);
		// carrega os cliente relação tipo
		Collection colecaoClienteRelacaoTipo = this.getControladorUtil()
				.pesquisar(filtroClienteRelacaoTipo,
						ClienteRelacaoTipo.class.getName());
		if (colecaoClienteRelacaoTipo == null
				|| colecaoClienteRelacaoTipo.isEmpty()) {
			throw new ControladorException("atencao.pesquisa_inexistente",
					null, "Tabela Cliente Relação Tipo");
		}
		return colecaoClienteRelacaoTipo;
	}

	/**
	 * 
	 * Permite excluir um comando de atividade de cobrança do crongrama ou
	 * alterar/excluir um comando deatividade de cobrança eventual
	 * 
	 * [UC0244] Manter Comando Ação de Cobrança
	 * 
	 * Consultar as Cobrança Atividade pela Atividade
	 * 
	 * @author Rafael Santos
	 * @date 25/03/2006
	 * 
	 * @return
	 * @throws ControladorException
	 */
	public CobrancaAtividade obterCobrancaAtividade(String idCobrancaAtividade)
			throws ControladorException {
		CobrancaAtividade cobrancaAtividade = null;

		FiltroCobrancaAtividade filtroCobrancaAtividade = new FiltroCobrancaAtividade();

		filtroCobrancaAtividade.adicionarParametro(new ParametroSimples(
				FiltroCobrancaAtividade.ID, idCobrancaAtividade));

		Collection colecaoCobrancaAtividade = this.getControladorUtil()
				.pesquisar(filtroCobrancaAtividade,
						CobrancaAtividade.class.getName());

		if (colecaoCobrancaAtividade != null
				&& !colecaoCobrancaAtividade.isEmpty()) {
			cobrancaAtividade = (CobrancaAtividade) colecaoCobrancaAtividade
					.iterator().next();
		}

		return cobrancaAtividade;
	}

	/**
	 * 
	 * Permite excluir um comando de atividade de cobrança do crongrama ou
	 * alterar/excluir um comando deatividade de cobrança eventual
	 * 
	 * [UC0244] Manter Comando Ação de Cobrança
	 * 
	 * Consultar as Coleção de Rotas do Setor Comercial
	 * 
	 * @author Rafael Santos
	 * @date 25/03/2006
	 * 
	 * @return
	 * @throws ControladorException
	 */
	public Collection obterColecaoRota(String idSetorComercial)
			throws ControladorException {
		FiltroRota filtroRota = new FiltroRota();
		filtroRota.adicionarCaminhoParaCarregamentoEntidade("setorComercial");
		filtroRota.adicionarParametro(new ParametroSimples(
				FiltroRota.SETOR_COMERCIAL_ID, idSetorComercial));

		Collection colecaoRota = this.getControladorUtil().pesquisar(
				filtroRota, Rota.class.getName());

		return colecaoRota;

	}

	/**
	 * 
	 * Inserir um comando de atividade de cobrança eventual
	 * 
	 * [UC0243] - Inserir Comando Ação de Cobrança
	 * 
	 * Verificar existência do comando eventual na base
	 * 
	 * [FS0016] - Verificar existência do comando eventual
	 * 
	 * @author Rafael Santos,Sávio Luiz
	 * @throws ControladorException
	 * @date 04/04/2006,05/07/2007
	 */
	public void verficarExistenciaComandoEventual(String[] idsCobrancaAcao,
			String idCobrancaAtividade, String idCobrancaGrupo,
			String idGerenciaRegional, String idLocalidadeInicial,
			String idLocalidadeFinal, String codigoSetorComercialInicial,
			String codigoSetorComercialFinal, String idCliente,
			String idClienteRelacaoTipo, String anoMesReferencialInicial,
			String anoMesReferencialFinal, String dataVencimentoContaInicial,
			String dataVencimentoContaFinal, String indicador,
			String rotaInicial, String rotaFinal, String idComando,
			String idUnidadeNegocio,String codigoClienteSuperior,
			String numeroQuadraInicial,
			String numeroQuadraFinal,
			String idLocalidade,
			String[] idsLocalidadeGerenciaRegional,
			String[] idsSetorComercialLocalidade) throws ControladorException {

		
//		FiltrarComandosAcaoCobrancaEventualHelper filtrarComandosAcaoCobrancaEventualHelper = 
//				construirFiltroComandosAcaoCobrancaEventualHelper(idCobrancaGrupo, idsCobrancaAcao, idCobrancaAtividade, anoMesReferencialInicial, anoMesReferencialFinal, 
//						null, null, null, null, dataVencimentoContaInicial, dataVencimentoContaFinal, null, null, null, null, null, null, null, 0,
//						idGerenciaRegional, idLocalidadeInicial, idLocalidadeFinal, codigoSetorComercialInicial, codigoSetorComercialFinal, rotaInicial, rotaFinal, idCliente,
//						idClienteRelacaoTipo, null, idUnidadeNegocio, null, null, null, null, 
//						null, null, null, null, null, numeroQuadraInicial, numeroQuadraFinal, 
//						null, null, idsLocalidadeGerenciaRegional, idLocalidade, idsSetorComercialLocalidade);
		
		FiltroCobrancaAcaoAtividadeComando filtroCobrancaAcaoAtividadeComando = new FiltroCobrancaAcaoAtividadeComando();
		for (int i = 0; i < idsCobrancaAcao.length; i++) {

			if (idsCobrancaAcao.length == 1) {
				filtroCobrancaAcaoAtividadeComando
						.adicionarParametro(new ParametroSimples(
								FiltroCobrancaAcaoAtividadeComando.ID_COBRANCA_ACAO,
								idsCobrancaAcao[i]));
			} else {
				// caso seja a primeira vez então inserino filtro, a mais, a
				// quantidade de vezes que terá o conector or
				// (idsCobrancaAcao.length)
				if (i == 0) {
					filtroCobrancaAcaoAtividadeComando
							.adicionarParametro(new ParametroSimples(
									FiltroCobrancaAcaoAtividadeComando.ID_COBRANCA_ACAO,
									idsCobrancaAcao[i],
									FiltroParametro.CONECTOR_OR,
									idsCobrancaAcao.length));
				} else {
					// senão se for o ultimo laço do for então inseri no filtro
					// sem
					// o conector or
					if (idsCobrancaAcao.length == i + 1) {
						filtroCobrancaAcaoAtividadeComando
								.adicionarParametro(new ParametroSimples(
										FiltroCobrancaAcaoAtividadeComando.ID_COBRANCA_ACAO,
										idsCobrancaAcao[i]));
					} else {
						// senão inseri no filtro o conector or
						filtroCobrancaAcaoAtividadeComando
								.adicionarParametro(new ParametroSimples(
										FiltroCobrancaAcaoAtividadeComando.ID_COBRANCA_ACAO,
										idsCobrancaAcao[i],
										FiltroParametro.CONECTOR_OR));
					}
				}
			}
		}
		
		
		if ( idLocalidade != null && !idLocalidade.equals("") ) {
			filtroCobrancaAcaoAtividadeComando.adicionarParametro( new ParametroSimples(FiltroCobrancaAcaoAtividadeComando.ID_LOCALIDADE, idLocalidade));
		}
		
		
		filtroCobrancaAcaoAtividadeComando
				.adicionarParametro(new ParametroSimples(
						FiltroCobrancaAcaoAtividadeComando.ID_COBRANCA_ATIVIDADE,
						idCobrancaAtividade));

		// //data de realização e comando
		// ParametroNulo parametro1 = new
		// ParametroNulo(FiltroCobrancaAcaoAtividadeComando.REALIZACAO);
		// MenorQueComparacaoColuna parametro2 =
		// ConectorOr conectorOr = new ConectorOr(parametro1,parametro2);
		//		
		filtroCobrancaAcaoAtividadeComando
				.adicionarParametro(new ParametroNulo(
						FiltroCobrancaAcaoAtividadeComando.REALIZACAO,
						FiltroParametro.CONECTOR_OR, 2));
		filtroCobrancaAcaoAtividadeComando
				.adicionarParametro(new MenorQueComparacaoColuna(
						FiltroCobrancaAcaoAtividadeComando.REALIZACAO,
						FiltroCobrancaAcaoAtividadeComando.COMANDO));

		// id Cobranca Grupo
		if (idCobrancaGrupo != null
				&& !idCobrancaGrupo.equals("")
				&& !idCobrancaGrupo
						.equals(ConstantesSistema.NUMERO_NAO_INFORMADO + "")) {
			filtroCobrancaAcaoAtividadeComando
					.adicionarParametro(new ParametroSimples(
							FiltroCobrancaAcaoAtividadeComando.ID_COBRANCA_GRUPO,
							idCobrancaGrupo));
		} else {
			filtroCobrancaAcaoAtividadeComando
					.adicionarParametro(new ParametroNulo(
							FiltroCobrancaAcaoAtividadeComando.ID_COBRANCA_GRUPO));
		}

		// id Gerencia Regional
		if (idGerenciaRegional != null
				&& !idGerenciaRegional.equals("")
				&& !idGerenciaRegional
						.equals(ConstantesSistema.NUMERO_NAO_INFORMADO + "")) {
			filtroCobrancaAcaoAtividadeComando
					.adicionarParametro(new ParametroSimples(
							FiltroCobrancaAcaoAtividadeComando.ID_GERENCIA_REGIONAL,
							idGerenciaRegional));
		} else {
			filtroCobrancaAcaoAtividadeComando
					.adicionarParametro(new ParametroNulo(
							FiltroCobrancaAcaoAtividadeComando.ID_GERENCIA_REGIONAL));
		}

		// id Unidade Negocio
		if (idUnidadeNegocio != null
				&& !idUnidadeNegocio
						.equals(ConstantesSistema.NUMERO_NAO_INFORMADO + "")) {
			filtroCobrancaAcaoAtividadeComando
					.adicionarParametro(new ParametroSimples(
							FiltroCobrancaAcaoAtividadeComando.ID_UNIDADE_NEGOCIO,
							idUnidadeNegocio));
		} else {
			filtroCobrancaAcaoAtividadeComando
					.adicionarParametro(new ParametroNulo(
							FiltroCobrancaAcaoAtividadeComando.ID_UNIDADE_NEGOCIO));
		}

		// localidade inicial e final
		if ((idLocalidadeInicial != null && !idLocalidadeInicial.equals(""))
				&& (idLocalidadeFinal != null && !idLocalidadeFinal.equals(""))) {
			filtroCobrancaAcaoAtividadeComando
					.adicionarParametro(new ParametroSimples(
							FiltroCobrancaAcaoAtividadeComando.ID_LOCALIDADE_INICIAL,
							idLocalidadeInicial));
			filtroCobrancaAcaoAtividadeComando
					.adicionarParametro(new ParametroSimples(
							FiltroCobrancaAcaoAtividadeComando.ID_LOCALIDADE_FINAL,
							idLocalidadeFinal));
		} else {
			filtroCobrancaAcaoAtividadeComando
					.adicionarParametro(new ParametroNulo(
							FiltroCobrancaAcaoAtividadeComando.ID_LOCALIDADE_INICIAL));
			filtroCobrancaAcaoAtividadeComando
					.adicionarParametro(new ParametroNulo(
							FiltroCobrancaAcaoAtividadeComando.ID_LOCALIDADE_FINAL));
		}

		// setor comercial inicial e final
		if ((codigoSetorComercialInicial != null && !codigoSetorComercialInicial
				.equals(""))
				&& (codigoSetorComercialFinal != null && !codigoSetorComercialFinal
						.equals(""))) {
			filtroCobrancaAcaoAtividadeComando
					.adicionarParametro(new ParametroSimples(
							FiltroCobrancaAcaoAtividadeComando.CODIGO_SETOR_COMERCIAL_INICIAL,
							codigoSetorComercialInicial));
			filtroCobrancaAcaoAtividadeComando
					.adicionarParametro(new ParametroSimples(
							FiltroCobrancaAcaoAtividadeComando.CODIGO_SETOR_COMERCIAL_FINAL,
							codigoSetorComercialFinal));
		} else {
			filtroCobrancaAcaoAtividadeComando
					.adicionarParametro(new ParametroNulo(
							FiltroCobrancaAcaoAtividadeComando.CODIGO_SETOR_COMERCIAL_INICIAL));
			filtroCobrancaAcaoAtividadeComando
					.adicionarParametro(new ParametroNulo(
							FiltroCobrancaAcaoAtividadeComando.CODIGO_SETOR_COMERCIAL_FINAL));
		}

		// id do cliente superior
		if (codigoClienteSuperior != null && !codigoClienteSuperior.equals("")) {
			filtroCobrancaAcaoAtividadeComando
					.adicionarParametro(new ParametroSimples(
							FiltroCobrancaAcaoAtividadeComando.ID_CLIENTE_SUPERIOR,
							codigoClienteSuperior));
		} else {
			filtroCobrancaAcaoAtividadeComando
					.adicionarParametro(new ParametroNulo(
							FiltroCobrancaAcaoAtividadeComando.ID_CLIENTE_SUPERIOR));
		}
		
		// id do cliente
		if (idCliente != null && !idCliente.equals("")) {
			filtroCobrancaAcaoAtividadeComando
					.adicionarParametro(new ParametroSimples(
							FiltroCobrancaAcaoAtividadeComando.ID_CLIENTE,
							idCliente));
		} else {
			filtroCobrancaAcaoAtividadeComando
					.adicionarParametro(new ParametroNulo(
							FiltroCobrancaAcaoAtividadeComando.ID_CLIENTE));
		}

		// id cliente relação tipo
		if (idClienteRelacaoTipo != null
				&& !idClienteRelacaoTipo.equals("")
				&& !idClienteRelacaoTipo
						.equals(ConstantesSistema.NUMERO_NAO_INFORMADO + "")) {
			filtroCobrancaAcaoAtividadeComando
					.adicionarParametro(new ParametroSimples(
							FiltroCobrancaAcaoAtividadeComando.ID_CLIENTE_RELACAO_TIPO,
							idClienteRelacaoTipo));
		} else {
			filtroCobrancaAcaoAtividadeComando
					.adicionarParametro(new ParametroNulo(
							FiltroCobrancaAcaoAtividadeComando.ID_CLIENTE_RELACAO_TIPO));
		}

		// ano mes referencial inicial
		// ano mes referencial final
		// inicial
		if (anoMesReferencialInicial != null
				&& !anoMesReferencialInicial.equals("")) {
			String anoInicial = anoMesReferencialInicial.substring(3, 7);
			String mesInicial = anoMesReferencialInicial.substring(0, 2);
			String anoMes = anoInicial + mesInicial;
			filtroCobrancaAcaoAtividadeComando
					.adicionarParametro(new ParametroSimples(
							FiltroCobrancaAcaoAtividadeComando.ANO_MES_REFERENCIA_CONTA_INICIAL,
							anoMes));
		} else {
			filtroCobrancaAcaoAtividadeComando
					.adicionarParametro(new ParametroSimples(
							FiltroCobrancaAcaoAtividadeComando.ANO_MES_REFERENCIA_CONTA_INICIAL,
							"198001"));
		}

		// final
		if (anoMesReferencialFinal != null
				&& !anoMesReferencialFinal.equals("")) {
			String anoFinal = anoMesReferencialFinal.substring(3, 7);
			String mesFinal = anoMesReferencialFinal.substring(0, 2);
			String anoMes = anoFinal + mesFinal;
			filtroCobrancaAcaoAtividadeComando
					.adicionarParametro(new ParametroSimples(
							FiltroCobrancaAcaoAtividadeComando.ANO_MES_REFERENCIA_CONTA_FINAL,
							anoMes));
		} else {
			filtroCobrancaAcaoAtividadeComando
					.adicionarParametro(new ParametroSimples(
							FiltroCobrancaAcaoAtividadeComando.ANO_MES_REFERENCIA_CONTA_FINAL,
							"999912"));
		}

		// data vencimento conta inicial
		// data vencimento conta final
		// data inicial
		if (dataVencimentoContaInicial != null
				&& !dataVencimentoContaInicial.equals("")) {

			filtroCobrancaAcaoAtividadeComando
					.adicionarParametro(new ParametroSimples(
							FiltroCobrancaAcaoAtividadeComando.DATA_VENCIMENTO_CONTA_INICIAL,
							Util
									.converteStringParaDate(dataVencimentoContaInicial)));
		} else {
			filtroCobrancaAcaoAtividadeComando
					.adicionarParametro(new ParametroSimples(
							FiltroCobrancaAcaoAtividadeComando.DATA_VENCIMENTO_CONTA_INICIAL,
							Util.converteStringParaDate("01/01/1980")));
		}
		// data final
		if (dataVencimentoContaFinal != null
				&& !dataVencimentoContaFinal.equals("")) {
			filtroCobrancaAcaoAtividadeComando
					.adicionarParametro(new ParametroSimples(
							FiltroCobrancaAcaoAtividadeComando.DATA_VENCIMENTO_CONTA_FINAL,
							Util
									.converteStringParaDate(dataVencimentoContaFinal)));
		} else {
			filtroCobrancaAcaoAtividadeComando
					.adicionarParametro(new ParametroSimples(
							FiltroCobrancaAcaoAtividadeComando.DATA_VENCIMENTO_CONTA_FINAL,
							Util.converteStringParaDate("31/12/9999")));
		}

		// indicador de critério
		if (indicador != null && !indicador.equals("")) {
			if (indicador.equals("Rota")) {
				filtroCobrancaAcaoAtividadeComando
						.adicionarParametro(new ParametroSimples(
								FiltroCobrancaAcaoAtividadeComando.INDICADOR_CRITERIO,
								1));
			} else {
				filtroCobrancaAcaoAtividadeComando
						.adicionarParametro(new ParametroSimples(
								FiltroCobrancaAcaoAtividadeComando.INDICADOR_CRITERIO,
								2));
			}
		}

		// cobrança criterio
		if (idComando != null && !idComando.equals("")) {
			filtroCobrancaAcaoAtividadeComando
					.adicionarParametro(new ParametroSimples(
							FiltroCobrancaAcaoAtividadeComando.ID_COBRANCA_CRITERIO,
							idComando));
		} else {
			filtroCobrancaAcaoAtividadeComando
					.adicionarParametro(new ParametroNulo(
							FiltroCobrancaAcaoAtividadeComando.ID_COBRANCA_CRITERIO));
		}

		// rota inicial e final
		if ((rotaInicial != null && !rotaInicial.equals(""))
				&& (rotaFinal != null && !rotaFinal.equals(""))) {
			filtroCobrancaAcaoAtividadeComando
					.adicionarParametro(new ParametroSimples(
							FiltroCobrancaAcaoAtividadeComando.ID_ROTA_INICIAL,
							rotaInicial));
			filtroCobrancaAcaoAtividadeComando
					.adicionarParametro(new ParametroSimples(
							FiltroCobrancaAcaoAtividadeComando.ID_ROTA_FINAL,
							rotaFinal));
		} else {
			filtroCobrancaAcaoAtividadeComando
					.adicionarParametro(new ParametroNulo(
							FiltroCobrancaAcaoAtividadeComando.ID_ROTA_INICIAL));
			filtroCobrancaAcaoAtividadeComando
					.adicionarParametro(new ParametroNulo(
							FiltroCobrancaAcaoAtividadeComando.ID_ROTA_FINAL));
		}
		
		// numero Quadra inicial e final
		if ((numeroQuadraInicial != null && !numeroQuadraInicial.equals("")) && 
			(numeroQuadraFinal != null && !numeroQuadraFinal.equals(""))) {
			
			filtroCobrancaAcaoAtividadeComando.adicionarParametro(
				new ParametroSimples(
					FiltroCobrancaAcaoAtividadeComando.NUMERO_QUADRA_INICIAL,
					numeroQuadraInicial));
			
			filtroCobrancaAcaoAtividadeComando.adicionarParametro(
				new ParametroSimples(
					FiltroCobrancaAcaoAtividadeComando.NUMERO_QUADRA_FINAL,
					numeroQuadraFinal));
		} else {
			filtroCobrancaAcaoAtividadeComando.adicionarParametro(
				new ParametroNulo(
					FiltroCobrancaAcaoAtividadeComando.NUMERO_QUADRA_INICIAL));
			
			filtroCobrancaAcaoAtividadeComando.adicionarParametro(
				new ParametroNulo(
					FiltroCobrancaAcaoAtividadeComando.NUMERO_QUADRA_FINAL));
		}
		

		Collection colecaoCobrancaAcaoAtividadeComando = getControladorUtil()
				.pesquisar(filtroCobrancaAcaoAtividadeComando,
						CobrancaAcaoAtividadeComando.class.getName());

		if (colecaoCobrancaAcaoAtividadeComando != null
				&& !colecaoCobrancaAcaoAtividadeComando.isEmpty()) {
			
			Collection colecaoIdsFiltroComando = new ArrayList();
			Iterator iterator = colecaoCobrancaAcaoAtividadeComando.iterator();
			while ( iterator.hasNext()) {
				CobrancaAcaoAtividadeComando cobrancaAcaoAtividadeComando = (CobrancaAcaoAtividadeComando) iterator.next();
				
				colecaoIdsFiltroComando.add(cobrancaAcaoAtividadeComando.getId());
			}
			
			if ( idsLocalidadeGerenciaRegional != null && idsLocalidadeGerenciaRegional.length > 0 ) {
				
				Collection colecaoIdsFiltro = new ArrayList();
				
				for (int i = 0; i < idsLocalidadeGerenciaRegional.length; i++) {
					if (!idsLocalidadeGerenciaRegional[i].equals("")){
						colecaoIdsFiltro.add(new Integer(idsLocalidadeGerenciaRegional[i]));
					}
				}
				
				FiltroCobrancaAcaoAtividadeComandoLocalidade filtroCobrancaAcaoAtividadeComandoLocalidade = new FiltroCobrancaAcaoAtividadeComandoLocalidade();
				filtroCobrancaAcaoAtividadeComandoLocalidade.adicionarParametro( new ParametroSimplesIn(FiltroCobrancaAcaoAtividadeComandoLocalidade.ID_LOCALIDADE, colecaoIdsFiltro));
				filtroCobrancaAcaoAtividadeComandoLocalidade.adicionarParametro( new ParametroSimplesIn(FiltroCobrancaAcaoAtividadeComandoLocalidade.ID_COB_ACAO_ATV_COMAND, colecaoIdsFiltroComando));
				Collection colecao = getControladorUtil()
						.pesquisar(filtroCobrancaAcaoAtividadeComandoLocalidade,
								CobrancaAcaoAtividadeComandoLocalidade.class.getName());
				if ( colecao != null && !colecao.isEmpty() ) {
					throw new ControladorException("atencao.existe.comando");
				}
			}
			else if (idsSetorComercialLocalidade != null && idsSetorComercialLocalidade.length > 0 ){
				
				Collection colecaoIdsFiltro = new ArrayList();
				
				for (int i = 0; i < idsSetorComercialLocalidade.length; i++) {
					if (!idsSetorComercialLocalidade[i].equals("")){
						colecaoIdsFiltro.add(new Integer(idsSetorComercialLocalidade[i]));
					}
				}
				
				FiltroCobrancaAcaoAtividadeComandoSetorComercial filtroCobrancaAcaoAtividadeComandoSetorComercial = new FiltroCobrancaAcaoAtividadeComandoSetorComercial();
				filtroCobrancaAcaoAtividadeComandoSetorComercial.adicionarParametro( new ParametroSimplesIn(FiltroCobrancaAcaoAtividadeComandoSetorComercial.ID_SETORCOMERCIAL, colecaoIdsFiltro));
				filtroCobrancaAcaoAtividadeComandoSetorComercial.adicionarParametro( new ParametroSimplesIn(FiltroCobrancaAcaoAtividadeComandoLocalidade.ID_COB_ACAO_ATV_COMAND, colecaoIdsFiltroComando));
				Collection colecao = getControladorUtil()
						.pesquisar(filtroCobrancaAcaoAtividadeComandoSetorComercial,
								CobrancaAcaoAtividadeComandoSetorComercial.class.getName());
				if ( colecao != null && !colecao.isEmpty() ) {
					throw new ControladorException("atencao.existe.comando");
				}
			} else {
				// Existe comando não realizado para esta atividade com estes mesmos
				// parametros
				throw new ControladorException("atencao.existe.comando");
			}
			
		}
	}

	/**
	 * 
	 * Inserir um comando de atividade de cobrança eventual
	 * 
	 * [UC0243] - Inserir Comando Ação de Cobrança
	 * 
	 * Verificar referência final menor que referência inicial
	 * 
	 * [FS0012] - Verificar referência final menor que referência inicial
	 * 
	 * @author Rafael Santos
	 * @throws ControladorException
	 * @date 04/04/2006
	 */
	public void validarAnoMesInicialFinalComandoAcaoCobranca(
			String anoMesContaInicial, String anoMesContaFinal)
			throws ControladorException {

		if (anoMesContaFinal != null && !anoMesContaFinal.equals("")) {

			String anoFinal = anoMesContaFinal.substring(3, 7);
			String mesFinal = anoMesContaFinal.substring(0, 2);

			Calendar periodoFinal = new GregorianCalendar();
			periodoFinal.set(Calendar.DATE, 1);
			periodoFinal.set(Calendar.MONTH,
					(new Integer(mesFinal).intValue() - 1));
			periodoFinal.set(Calendar.YEAR, new Integer(anoFinal).intValue());

			String periodoFinalConta = this.getControladorUtil()
					.pesquisarParametrosDoSistema().getAnoMesArrecadacao()
					+ "";

			String anoFinalArrecadacao = periodoFinalConta.substring(0, 4);
			String mesFinalArrecadacao = periodoFinalConta.substring(4, 6);

			Calendar periodoAnoMesArrecadacao = new GregorianCalendar();
			periodoAnoMesArrecadacao.set(Calendar.DATE, 1);
			periodoAnoMesArrecadacao.set(Calendar.MONTH, (new Integer(
					mesFinalArrecadacao).intValue() - 1));
			periodoAnoMesArrecadacao.set(Calendar.YEAR, new Integer(
					anoFinalArrecadacao).intValue());

			if (periodoFinal.compareTo(periodoAnoMesArrecadacao) > 0) {
				throw new ControladorException(
				// Mês/Ano Final do Período de Referência das Contas maior que o
						// mês ano da arrecadação({0})
						"atencao.periodo_final.maior.mes_ano", null,
						mesFinalArrecadacao + "/" + anoFinalArrecadacao);
			}

		}

		if ((anoMesContaInicial != null && !anoMesContaInicial.equals(""))
				&& (anoMesContaFinal != null && !anoMesContaFinal.equals(""))) {
			if (anoMesContaInicial.length() == 7
					& anoMesContaFinal.length() == 7) {

				String anoInicial = anoMesContaInicial.substring(3, 7);
				String mesInicial = anoMesContaInicial.substring(0, 2);

				String anoFinal = anoMesContaFinal.substring(3, 7);
				String mesFinal = anoMesContaFinal.substring(0, 2);

				boolean valida = Util.validarAnoMes(anoMesContaInicial);
				if (valida) {
					throw new ControladorException("errors.invalid", null,
							"Mês/Ano Inicial do Período da Referência das Contas");
				}

				valida = Util.validarAnoMes(anoMesContaFinal);
				if (valida) {
					throw new ControladorException("errors.invalid", null,
							"Mês/Ano Final do Período da Referência das Contas");
				}

				Calendar periodoInicial = new GregorianCalendar();
				periodoInicial.set(Calendar.DATE, 1);
				periodoInicial.set(Calendar.MONTH, (new Integer(mesInicial)
						.intValue() - 1));
				periodoInicial.set(Calendar.YEAR, new Integer(anoInicial)
						.intValue());

				Calendar periodoFinal = new GregorianCalendar();
				periodoFinal.set(Calendar.DATE, 1);
				periodoFinal.set(Calendar.MONTH, (new Integer(mesFinal)
						.intValue() - 1));
				periodoFinal.set(Calendar.YEAR, new Integer(anoFinal)
						.intValue());

				if (periodoInicial.compareTo(new GregorianCalendar()) > 0) {
					throw new ControladorException(// 
							// Mês/Ano Final do Período de Referência das Contas
							// posterior ao mês e ano corrente
							"atencao.periodo_inicial.maior.data_corrente");
				}

				if (periodoInicial.compareTo(periodoFinal) > 0) {
					throw new ControladorException(
					// Mês/Ano Inicial do Período da Referência das Contas
							// posterior ao Mês/Ano Final do Período de
							// Referência das
							// Contas
							"atencao.referencia_inicial.maior.referencia_final");
				}
			} else {
				if (anoMesContaInicial.length() < 7) {
					throw new ControladorException("errors.invalid", null,
							"Mês/Ano Inicial do Período da Referência das Contas");
				}

				if (anoMesContaFinal.length() < 7) {
					throw new ControladorException("errors.invalid", null,
							"Mês/Ano Final do Período da Referência das Contas");
				}

			}
		}

	}

	/**
	 * 
	 * Inserir um comando de atividade de cobrança eventual
	 * 
	 * [UC0243] - Inserir Comando Ação de Cobrança
	 * 
	 * Verificar data final menos que data inicial
	 * 
	 * [FS0014] - Verificar data final menos que data inicial
	 * 
	 * @author Rafael Santos
	 * @throws ControladorException
	 * @date 04/04/2006
	 */
	public void verificarVencimentoContaComandoAcaoCobranca(
			String anoMesVencimentoInicial, String anoMesVencimentoFinal)
			throws ControladorException {

		if (anoMesVencimentoInicial != null
				&& !anoMesVencimentoInicial.equals("")) {
			String anoInicial = anoMesVencimentoInicial.substring(6, 10);
			String mesInicial = anoMesVencimentoInicial.substring(3, 5);
			String diaInicial = anoMesVencimentoInicial.substring(0, 2);

			boolean valida = Util.validarDiaMesAno(anoMesVencimentoInicial);
			if (valida) {
				throw new ControladorException("errors.invalid", null,
						"Data Inicial do Período de Vencimento das Contas");
			}

			Calendar periodoInicial = new GregorianCalendar();
			periodoInicial.set(Calendar.DATE, new Integer(diaInicial)
					.intValue());
			periodoInicial.set(Calendar.MONTH, (new Integer(mesInicial)
					.intValue() - 1));
			periodoInicial.set(Calendar.YEAR, new Integer(anoInicial)
					.intValue());

			if (periodoInicial.compareTo(new GregorianCalendar()) > 0) {
				throw new ControladorException(
				// Data Final do Período de Vencimento das Contas posterior à
						// data corrente
						"atencao.data_final.maior.data_corrente");
			}

		}

		if ((anoMesVencimentoInicial != null && !anoMesVencimentoInicial
				.equals(""))
				&& (anoMesVencimentoFinal != null && !anoMesVencimentoFinal
						.equals(""))) {

			if (anoMesVencimentoInicial.length() == 10
					& anoMesVencimentoFinal.length() == 10) {
				String anoInicial = anoMesVencimentoInicial.substring(6, 10);
				String mesInicial = anoMesVencimentoInicial.substring(3, 5);
				String diaInicial = anoMesVencimentoInicial.substring(0, 2);

				String anoFinal = anoMesVencimentoFinal.substring(6, 10);
				String mesFinal = anoMesVencimentoFinal.substring(3, 5);
				String diaFinal = anoMesVencimentoInicial.substring(0, 2);

				boolean valida = Util.validarDiaMesAno(anoMesVencimentoInicial);
				if (valida) {
					throw new ControladorException("errors.invalid", null,
							"Data Inicial do Período de Vencimento das Contas");
				}
				valida = Util.validarDiaMesAno(anoMesVencimentoFinal);
				if (valida) {
					throw new ControladorException("errors.invalid", null,
							"Data Final do Período de Vencimento das Contas");
				}

				Calendar periodoInicial = new GregorianCalendar();
				periodoInicial.set(Calendar.DATE, new Integer(diaInicial)
						.intValue());
				periodoInicial.set(Calendar.MONTH, (new Integer(mesInicial)
						.intValue() - 1));
				periodoInicial.set(Calendar.YEAR, new Integer(anoInicial)
						.intValue());

				Calendar periodoFinal = new GregorianCalendar();
				periodoFinal.set(Calendar.DATE, new Integer(diaFinal)
						.intValue());
				periodoFinal.set(Calendar.MONTH, (new Integer(mesFinal)
						.intValue() - 1));
				periodoFinal.set(Calendar.YEAR, new Integer(anoFinal)
						.intValue());

				if (periodoInicial.compareTo(periodoFinal) > 0) {
					throw new ControladorException(
					// Data Inicial do Período de Vencimento das Contas
							// posterior à Data Final do Período de Vencimento
							// das
							// Contas
							"atencao.data_inicial.maior.data_final");
				}
			} else {
				if (anoMesVencimentoInicial.length() < 10) {
					throw new ControladorException("errors.invalid", null,
							"Data Inicial do Período de Vencimento das Contas");
				}

				if (anoMesVencimentoFinal.length() < 10) {
					throw new ControladorException("errors.invalid", null,
							"Data Final do Período de Vencimento das Contas");
				}

			}
		}

	}


	/**
	 * 
	 * Inserir um comando de atividade de cobrança eventual
	 * 
	 * [UC0243] - Inserir Comando Ação de Cobrança
	 * 
	 * Inserir cobranca acao atividade comando
	 * 
	 * [SB0007] - Inserir cobranca acao atividade comando
	 * 
	 * @author Rafael Santos
	 * @param usuarioLogado
	 * @throws ControladorException
	 * @date 04/04/2006
	 */
	public Collection inserirComandoAcaoCobrancaCriterioEventual(
			String[] idsCobrancaAcao, String idCobrancaAtividade,
			String idCobrancaGrupo, String idGerenciaRegional,
			String idLocalidadeInicial, String idLocalidadeFinal,
			String codigoSetorComercialInicial,
			String codigoSetorComercialFinal, String idSetorComercialInicial,
			String idSetorComercialFinal, String idCliente,
			String idClienteRelacaoTipo, String anoMesReferencialInicial,
			String anoMesReferencialFinal, String dataVencimentoContaInicial,
			String dataVencimentoContaFinal, String indicador,
			String idRotaInicial, String idRotaFinal, String idComando,
			String unidadeNegocio, Usuario usuarioLogado, String titulo,
			String descricaoSolicitacao, String prazoExecucao,
			String quantidadeMaximaDocumentos,String valorLimiteObrigatoria,
			String indicadorImoveisDebito,String indicadorGerarBoletimCadastro,
			String codigoClienteSuperior,String codigoRotaInicial, 
			String codigoRotaFinal,String logradouroId,
			String consumoMedioInicial, String consumoMedioFinal, String tipoConsumo,
			String periodoInicialFiscalizacao, String periodoFinalFiscalizacao, String[] situacaoFiscalizacao,
			String numeroQuadraInicial,
			String numeroQuadraFinal,String quantidadeDiasVencimento, 
			String imoveisSitLigacaoNaoAlteradaDeb, String nomeArquivo, 
			Collection<Integer> colecaoIdsImovel, String[] idsLocalidade, String[] idsSetorComercial, String
			idLocalidade) throws ControladorException {

		// ------------ REGISTRAR TRANSAÇÃO ----------------
		RegistradorOperacao registradorOperacao = null;
		Operacao operacao = new Operacao();
		OperacaoEfetuada operacaoEfetuada = new OperacaoEfetuada();
		// ------------ REGISTRAR TRANSAÇÃO ----------------

		Collection colecaoCobrancaAcaoAtividadeComando = new ArrayList();

		// executar comando
		CobrancaAcaoAtividadeComando cobrancaAcaoAtividadeComando = new CobrancaAcaoAtividadeComando();

		// id gerado pelo sistema
		CobrancaAcao cobrancaAcao = null;

		// id da atividade de cobranca

		FiltroCobrancaAtividade filtroCobrancaAtividade = new FiltroCobrancaAtividade();
		filtroCobrancaAtividade.adicionarParametro(new ParametroSimples(
				FiltroCobrancaAtividade.ID, idCobrancaAtividade));
		Collection colecaoCobrancaAtividade = this.getControladorUtil()
				.pesquisar(filtroCobrancaAtividade,
						CobrancaAtividade.class.getName());
		CobrancaAtividade cobrancaAtividade = (CobrancaAtividade) colecaoCobrancaAtividade
				.iterator().next();
		cobrancaAcaoAtividadeComando.setCobrancaAtividade(cobrancaAtividade);
		// comando
		cobrancaAcaoAtividadeComando.setComando(new Date());
		// realizacao
		cobrancaAcaoAtividadeComando.setRealizacao(null);
		// ultima alteracao
		cobrancaAcaoAtividadeComando.setUltimaAlteracao(new Date());
		// usuario
		cobrancaAcaoAtividadeComando.setUsuario(usuarioLogado);
		// empresa
		cobrancaAcaoAtividadeComando.setEmpresa(null);

		// id Cobranca Grupo
		if (idCobrancaGrupo != null
				&& !idCobrancaGrupo
						.equals(ConstantesSistema.NUMERO_NAO_INFORMADO + "")
				&& !idCobrancaGrupo.equals("")) {
			CobrancaGrupo cobrancaGrupo = new CobrancaGrupo();
			cobrancaGrupo.setId(new Integer(idCobrancaGrupo));
			cobrancaAcaoAtividadeComando.setCobrancaGrupo(cobrancaGrupo);
		} else {
			cobrancaAcaoAtividadeComando.setCobrancaGrupo(null);
		}

		// id Gerencia Regional
		if (idGerenciaRegional != null
				&& !idGerenciaRegional
						.equals(ConstantesSistema.NUMERO_NAO_INFORMADO + "")
				&& !idGerenciaRegional.equals("")) {
			GerenciaRegional gerenciaRegional = new GerenciaRegional();
			gerenciaRegional.setId(new Integer(idGerenciaRegional));
			cobrancaAcaoAtividadeComando.setGerenciaRegional(gerenciaRegional);
		} else {
			cobrancaAcaoAtividadeComando.setGerenciaRegional(null);
		}

		// id Unidade Negocio
		if (unidadeNegocio != null
				&& !unidadeNegocio
						.equals(ConstantesSistema.NUMERO_NAO_INFORMADO + "")
				&& !unidadeNegocio.equals("")) {
			UnidadeNegocio unidadeNegocioObj = new UnidadeNegocio();
			unidadeNegocioObj.setId(new Integer(unidadeNegocio));
			cobrancaAcaoAtividadeComando.setUnidadeNegocio(unidadeNegocioObj);
		} else {
			cobrancaAcaoAtividadeComando.setUnidadeNegocio(null);
		}

		// localidade inicial e final
		if ((idLocalidadeInicial != null && !idLocalidadeInicial.equals(""))
				&& (idLocalidadeFinal != null && !idLocalidadeFinal.equals(""))) {
			Localidade localidadeInicial = new Localidade();
			localidadeInicial.setId(new Integer(idLocalidadeInicial));
			cobrancaAcaoAtividadeComando
					.setLocalidadeInicial(localidadeInicial);

			Localidade localidadeFinal = new Localidade();
			localidadeFinal.setId(new Integer(idLocalidadeFinal));
			cobrancaAcaoAtividadeComando.setLocalidadeFinal(localidadeFinal);
		} else {
			cobrancaAcaoAtividadeComando.setLocalidadeInicial(null);
			cobrancaAcaoAtividadeComando.setLocalidadeFinal(null);
		}

		// codigo do setor comercial inicial e final
		if ((codigoSetorComercialInicial != null && !codigoSetorComercialInicial
				.equals(""))
				&& (codigoSetorComercialFinal != null && !codigoSetorComercialFinal
						.equals(""))) {
			cobrancaAcaoAtividadeComando
					.setCodigoSetorComercialInicial(new Integer(
							codigoSetorComercialInicial));
			cobrancaAcaoAtividadeComando
					.setCodigoSetorComercialFinal(new Integer(
							codigoSetorComercialFinal));
		} else {
			cobrancaAcaoAtividadeComando.setCodigoSetorComercialInicial(null);
			cobrancaAcaoAtividadeComando.setCodigoSetorComercialFinal(null);
		}//

		// rota inicial e final
		if ((idRotaInicial != null && !idRotaInicial
				.equals(ConstantesSistema.NUMERO_NAO_INFORMADO + ""))
				&& (idRotaFinal != null && !idRotaFinal
						.equals(ConstantesSistema.NUMERO_NAO_INFORMADO + ""))) {
			Rota rotaInicial = new Rota();
			rotaInicial.setId(new Integer(idRotaInicial));
			cobrancaAcaoAtividadeComando.setRotaInicial(rotaInicial);

			Rota rotaFinal = new Rota();
			rotaFinal.setId(new Integer(idRotaFinal));
			cobrancaAcaoAtividadeComando.setRotaFinal(rotaFinal);
		} else {
			cobrancaAcaoAtividadeComando.setRotaInicial(null);
			cobrancaAcaoAtividadeComando.setRotaFinal(null);
		}
		
		// numero quadra inicial e final
		if ((numeroQuadraInicial != null && !numeroQuadraInicial.equals(ConstantesSistema.NUMERO_NAO_INFORMADO + "") && !numeroQuadraInicial.equals("")) && 
			(numeroQuadraFinal != null && !numeroQuadraFinal.equals(ConstantesSistema.NUMERO_NAO_INFORMADO + "") && !numeroQuadraFinal.equals(""))) {
			
			cobrancaAcaoAtividadeComando.setNumeroQuadraInicial(new Integer(numeroQuadraInicial));
			cobrancaAcaoAtividadeComando.setNumeroQuadraFinal(new Integer(numeroQuadraFinal));
		} else {
			cobrancaAcaoAtividadeComando.setNumeroQuadraInicial(null);
			cobrancaAcaoAtividadeComando.setNumeroQuadraFinal(null);
		}

		//Quantidade de Dias de Vencimento
		if(quantidadeDiasVencimento != null
				&& !quantidadeDiasVencimento.equals("")){
			
			cobrancaAcaoAtividadeComando.setQuantidadeDiasVencimento(new Integer(quantidadeDiasVencimento));
		}
		else{
			cobrancaAcaoAtividadeComando.setQuantidadeDiasVencimento(null);
		}
		
		//Selecionar Imóveis Com Situação da Ligação Não Alterada por Débito
		if(imoveisSitLigacaoNaoAlteradaDeb != null 
				&& !imoveisSitLigacaoNaoAlteradaDeb.equals("")){
			
			cobrancaAcaoAtividadeComando.setLigacaoAlteradaDebito(new Integer(imoveisSitLigacaoNaoAlteradaDeb));
		}
		else{
			
			cobrancaAcaoAtividadeComando.setLigacaoAlteradaDebito(null);
		}
		
		//Relação de Imóveis
		if(nomeArquivo != null && !nomeArquivo.equals("")){
			cobrancaAcaoAtividadeComando.setNomeArquivoRelacaoImoveis(nomeArquivo);
		}
		else{
			cobrancaAcaoAtividadeComando.setNomeArquivoRelacaoImoveis(null);
		}

		// id do cliente
		if (idCliente != null && !idCliente.equals("")) {
			Cliente cliente = new Cliente();
			cliente.setId(new Integer(idCliente));
			cobrancaAcaoAtividadeComando.setCliente(cliente);
		} else {
			cobrancaAcaoAtividadeComando.setCliente(null);
		}
		
		// id do cliente superior
		if (codigoClienteSuperior != null && !codigoClienteSuperior.equals("")) {
			Cliente cliente = new Cliente();
			cliente.setId(new Integer(codigoClienteSuperior));
			cobrancaAcaoAtividadeComando.setSuperior(cliente);
		} else {
			cobrancaAcaoAtividadeComando.setSuperior(null);
		}

		// id cliente relação tipo
		if (idClienteRelacaoTipo != null
				&& !idClienteRelacaoTipo
						.equals(ConstantesSistema.NUMERO_NAO_INFORMADO + "")
				&& !idClienteRelacaoTipo.equals("")) {
			ClienteRelacaoTipo clienteRelacaoTipo = new ClienteRelacaoTipo();
			clienteRelacaoTipo.setId(new Integer(idClienteRelacaoTipo));
			cobrancaAcaoAtividadeComando
					.setClienteRelacaoTipo(clienteRelacaoTipo);
		} else {
			cobrancaAcaoAtividadeComando.setClienteRelacaoTipo(null);
		}

		// inicial referencial
		if (anoMesReferencialInicial != null
				&& !anoMesReferencialInicial.equals("")) {
			String anoInicial = anoMesReferencialInicial.substring(3, 7);
			String mesInicial = anoMesReferencialInicial.substring(0, 2);
			String anoMes = anoInicial + mesInicial;

			cobrancaAcaoAtividadeComando
					.setAnoMesReferenciaContaInicial(new Integer(anoMes));
		} else {
			cobrancaAcaoAtividadeComando
					.setAnoMesReferenciaContaInicial(null);
		}

		// final referencial
		if (anoMesReferencialFinal != null
				&& !anoMesReferencialFinal.equals("")) {
			String anoFinal = anoMesReferencialFinal.substring(3, 7);
			String mesFinal = anoMesReferencialFinal.substring(0, 2);
			String anoMes = anoFinal + mesFinal;
			cobrancaAcaoAtividadeComando
					.setAnoMesReferenciaContaFinal(new Integer(anoMes));
		} else {
			cobrancaAcaoAtividadeComando
					.setAnoMesReferenciaContaFinal(null);
		}

		// data inicial conta
		if (dataVencimentoContaInicial != null
				&& !dataVencimentoContaInicial.equals("")) {
			cobrancaAcaoAtividadeComando.setDataVencimentoContaInicial(Util
					.converteStringParaDate(dataVencimentoContaInicial));
		} else {
			cobrancaAcaoAtividadeComando.setDataVencimentoContaInicial(null);
		}

		// data final conta
		if (dataVencimentoContaFinal != null
				&& !dataVencimentoContaFinal.equals("")) {
			cobrancaAcaoAtividadeComando.setDataVencimentoContaFinal(Util
					.converteStringParaDate(dataVencimentoContaFinal));
		} else {
			cobrancaAcaoAtividadeComando.setDataVencimentoContaFinal(null);
		}

		// indicador de critério
		if (indicador != null && !indicador.equals("")) {
			if (indicador.equals("Rota")) {
				cobrancaAcaoAtividadeComando.setIndicadorCriterio(new Short(
						(short) 1));
			} else {
				cobrancaAcaoAtividadeComando.setIndicadorCriterio(new Short(
						(short) 2));
			}
		}
		// Logradouro
		if(logradouroId !=null
				&& !logradouroId.equals("")){
			
			Logradouro logradouro = new Logradouro();
			
			logradouro.setId(new Integer(logradouroId));
			
			cobrancaAcaoAtividadeComando.setLogradouro(logradouro);
			
		}

		cobrancaAcaoAtividadeComando.setQuantidadeDocumentos(null);
		cobrancaAcaoAtividadeComando.setValorDocumentos(null);
		cobrancaAcaoAtividadeComando.setQuantidadeItensCobrados(null);

		cobrancaAcaoAtividadeComando.setDescricaoTitulo(titulo);
		cobrancaAcaoAtividadeComando
				.setDescricaoSolicitacao(descricaoSolicitacao);
		cobrancaAcaoAtividadeComando.setDataEncerramentoPrevista(null);
		if (prazoExecucao != null && !prazoExecucao.equals("")) {
			cobrancaAcaoAtividadeComando.setQuantidadeDiasRealizacao(new Short(
					prazoExecucao));
		}
		if (quantidadeMaximaDocumentos != null
				&& !quantidadeMaximaDocumentos.equals("")) {
			cobrancaAcaoAtividadeComando
					.setQuantidadeMaximaDocumentos(new Integer(
							quantidadeMaximaDocumentos));
		}
		if (valorLimiteObrigatoria != null
				&& !valorLimiteObrigatoria.equals("")) {
			valorLimiteObrigatoria = valorLimiteObrigatoria.replace(".", "").replace(",", ".");
			cobrancaAcaoAtividadeComando
					.setValorLimiteObrigatoria(new BigDecimal(
							valorLimiteObrigatoria));
		}
		if (indicadorGerarBoletimCadastro != null
				&& !indicadorGerarBoletimCadastro.equals("")) {
			cobrancaAcaoAtividadeComando.setIndicadorBoletim(new Short(
					indicadorGerarBoletimCadastro));
		}
		if (indicadorImoveisDebito != null
				&& !indicadorImoveisDebito.equals("")) {
			cobrancaAcaoAtividadeComando.setIndicadorDebito(new Short(
					indicadorImoveisDebito));
		}
		if(consumoMedioInicial!=null && !consumoMedioInicial.equals("")){
			cobrancaAcaoAtividadeComando.setConsumoMedioInicial(new Integer(consumoMedioInicial));
		}
		if(consumoMedioFinal!=null && !consumoMedioFinal.equals("")){
			cobrancaAcaoAtividadeComando.setConsumoMedioFinal(new Integer(consumoMedioFinal));
		}
		if(tipoConsumo!=null){
			cobrancaAcaoAtividadeComando.setTipoConsumo(new Short(tipoConsumo));
		}
		
		// data inicial fiscalização
		if (periodoInicialFiscalizacao != null
				&& !periodoInicialFiscalizacao.equals("")) {
			
			cobrancaAcaoAtividadeComando.setPeriodoInicialFiscalizacao(
					Util.converteStringParaDate(periodoInicialFiscalizacao));
			
		} else {
			cobrancaAcaoAtividadeComando.setPeriodoInicialFiscalizacao(null);
		}

		// data final fiscalização
		if (periodoFinalFiscalizacao != null
				&& !periodoFinalFiscalizacao.equals("")) {
			
			cobrancaAcaoAtividadeComando.setPeriodoFinalFiscalizacao(
					Util.converteStringParaDate(periodoFinalFiscalizacao));
			
		} else {
			cobrancaAcaoAtividadeComando.setPeriodoFinalFiscalizacao(null);
		}
		
		if ( idLocalidade != null && !idLocalidade.equals("") ) {
			Localidade localidadeUnica = new Localidade();
			localidadeUnica.setId(Integer.valueOf(idLocalidade));
			cobrancaAcaoAtividadeComando.setLocalidade(localidadeUnica);
		}

		FiltroCobrancaAcao filtroCobrancaAcao = new FiltroCobrancaAcao();

		for (int i = 0; i < idsCobrancaAcao.length; i++) {

			if (idsCobrancaAcao.length == 1) {
				filtroCobrancaAcao.adicionarParametro(new ParametroSimples(
						FiltroCobrancaAcao.ID, idsCobrancaAcao[i]));
			} else {
				// caso seja a primeira vez então inserino filtro, a mais, a
				// quantidade de vezes que terá o conector or
				// (idsCobrancaAcao.length)
				if (i == 0) {
					filtroCobrancaAcao
							.adicionarParametro(new ParametroSimples(
									FiltroCobrancaAcao.ID, idsCobrancaAcao[i],
									FiltroParametro.CONECTOR_OR,
									idsCobrancaAcao.length));
				} else {
					// senão se for o ultimo laço do for então inseri no filtro
					// sem
					// o conector or
					if (idsCobrancaAcao.length == i + 1) {
						filtroCobrancaAcao
								.adicionarParametro(new ParametroSimples(
										FiltroCobrancaAcao.ID,
										idsCobrancaAcao[i]));
					} else {
						// senão inseri no filtro o conector or
						filtroCobrancaAcao
								.adicionarParametro(new ParametroSimples(
										FiltroCobrancaAcao.ID,
										idsCobrancaAcao[i],
										FiltroParametro.CONECTOR_OR));
					}
				}
			}
		}

		filtroCobrancaAcao
				.adicionarCaminhoParaCarregamentoEntidade(FiltroCobrancaAcao.DOCUMENTO_TIPO);
		filtroCobrancaAcao
				.adicionarCaminhoParaCarregamentoEntidade(FiltroCobrancaAcao.SERVICO_TIPO_PREDECESSORA);
		filtroCobrancaAcao
			.adicionarCaminhoParaCarregamentoEntidade(FiltroCobrancaAcao.SERVICO_TIPO);		
		Collection colecaoCobrancaAcao = this.getControladorUtil().pesquisar(
				filtroCobrancaAcao, CobrancaAcao.class.getName());

		if (idComando != null && !idComando.equals("")) {
			FiltroCobrancaCriterio filtroCobrancaCriterio = new FiltroCobrancaCriterio();
			filtroCobrancaCriterio.adicionarParametro(new ParametroSimples(
					FiltroCobrancaCriterio.ID, idComando));
			Collection colecaoCobrancaCriterio = this.getControladorUtil()
					.pesquisar(filtroCobrancaCriterio,
							CobrancaCriterio.class.getName());
			CobrancaCriterio cobrancaCriterio = (CobrancaCriterio) colecaoCobrancaCriterio
					.iterator().next();
			cobrancaAcaoAtividadeComando.setCobrancaCriterio(cobrancaCriterio);
		}

		if (colecaoCobrancaAcao != null && !colecaoCobrancaAcao.isEmpty()) {
			Iterator iterator = colecaoCobrancaAcao.iterator();
			while (iterator.hasNext()) {
				cobrancaAcao = (CobrancaAcao) iterator.next();
				CobrancaAcaoAtividadeComando cobrancaAcaoAtividadeComandoColecao = new CobrancaAcaoAtividadeComando();
				cobrancaAcaoAtividadeComandoColecao = cobrancaAcaoAtividadeComando;
				// id da ação de cobranca selecionada
				cobrancaAcaoAtividadeComandoColecao
						.setCobrancaAcao(cobrancaAcao);
				
				if(nomeArquivo == null || nomeArquivo.equals("")){
					if (cobrancaAcao.getIndicadorBoletim() != null
							&& cobrancaAcao.getIndicadorBoletim().equals(
									CobrancaAcao.INDICADOR_BOLETIM_NAO)) {
						if (indicadorGerarBoletimCadastro != null
								&& !indicadorGerarBoletimCadastro.equals("")) {
							Short indicadorBoletim = new Short(
									indicadorGerarBoletimCadastro);
							if (indicadorBoletim
									.equals(CobrancaAcao.INDICADOR_BOLETIM_SIM)) {
								sessionContext.setRollbackOnly();
								throw new ControladorException(
										"atencao.acoes.selecionada.nao.boletim");
							}
						}
					}
	
					if (cobrancaAcao.getIndicadorDebito() != null
							&& cobrancaAcao.getIndicadorDebito().equals(
									CobrancaAcao.INDICADOR_DEBITO_NAO)) {
						if (indicadorImoveisDebito != null
								&& !indicadorImoveisDebito.equals("")) {
							Short indicadorDebito = new Short(
									indicadorImoveisDebito);
							if (indicadorDebito
									.equals(CobrancaAcao.INDICADOR_BOLETIM_NAO)) {
								sessionContext.setRollbackOnly();
								throw new ControladorException(
										"atencao.acoes.selecionada.nao.debito");
							}
						}
					}
				}

				if (idComando != null && !idComando.equals("")) {

					// ------------ REGISTRAR TRANSAÇÃO ----------------
					registradorOperacao = new RegistradorOperacao(
							Operacao.OPERACAO_INSERIR_COMANDO_ACAO_COBRANCA_EVENTUAL_COMANDO,
							new UsuarioAcaoUsuarioHelper(usuarioLogado,
									UsuarioAcao.USUARIO_ACAO_EFETUOU_OPERACAO));

					operacao
							.setId(Operacao.OPERACAO_INSERIR_COMANDO_ACAO_COBRANCA_EVENTUAL_COMANDO);
					operacaoEfetuada.setOperacao(operacao);
					cobrancaAcaoAtividadeComando
							.setOperacaoEfetuada(operacaoEfetuada);
					cobrancaAcaoAtividadeComando.adicionarUsuario(
							usuarioLogado,
							UsuarioAcao.USUARIO_ACAO_EFETUOU_OPERACAO);
					registradorOperacao
							.registrarOperacao(cobrancaAcaoAtividadeComando);
					// ------------ REGISTRAR TRANSAÇÃO ----------------

				} else {
					// ------------ REGISTRAR TRANSAÇÃO ----------------
					registradorOperacao = new RegistradorOperacao(
							Operacao.OPERACAO_INSERIR_COMANDO_ACAO_COBRANCA_EVENTUAL_ROTA,
							new UsuarioAcaoUsuarioHelper(usuarioLogado,
									UsuarioAcao.USUARIO_ACAO_EFETUOU_OPERACAO));

					operacao
							.setId(Operacao.OPERACAO_INSERIR_COMANDO_ACAO_COBRANCA_EVENTUAL_ROTA);
					operacaoEfetuada.setOperacao(operacao);
					cobrancaAcaoAtividadeComando
							.setOperacaoEfetuada(operacaoEfetuada);
					cobrancaAcaoAtividadeComando.adicionarUsuario(
							usuarioLogado,
							UsuarioAcao.USUARIO_ACAO_EFETUOU_OPERACAO);
					registradorOperacao
							.registrarOperacao(cobrancaAcaoAtividadeComando);
					// ------------ REGISTRAR TRANSAÇÃO ----------------

				}

				// inserir cobranca acao atividade comando
				Integer idCobrancaAcaoAtividadeComando = (Integer) this
						.getControladorUtil().inserir(
								cobrancaAcaoAtividadeComandoColecao);

				colecaoCobrancaAcaoAtividadeComando
						.add(idCobrancaAcaoAtividadeComando);
				
				//4. Caso tenha informado o arquivo texto com a Relação de Imóveis, para cada linha lida no arquivo
				if(colecaoIdsImovel != null && colecaoIdsImovel.size() > 0){
					
					Iterator it = colecaoIdsImovel.iterator();
					while(it.hasNext()){
						
						Integer idImovel = (Integer)it.next();
						try {
							
							Collection colecaoAtivComando = repositorioCobranca.obterImoveisComandoAtividadeImovel(idImovel, idCobrancaAcaoAtividadeComando);
							
							//4.1. Caso o imóvel não tenha sido associado ao comando de ação de cobrança
							if(colecaoAtivComando == null || colecaoAtivComando.size() == 0){
								
								//4.1. o sistema deverá incluir o imóvel 
								//     na tabela COBRANCA.COMANDO_ATIV_IMOVEIS
								ComandoAtividadeImoveis comandoAtivImov = new ComandoAtividadeImoveis();
								ComandoAtividadeImoveisPK comandoAtivImovPK = new ComandoAtividadeImoveisPK();
								
								CobrancaAcaoAtividadeComando cobrancaAACom = new CobrancaAcaoAtividadeComando();
								
								cobrancaAACom.setId(idCobrancaAcaoAtividadeComando);
								
								Imovel imov = new Imovel();
								imov.setId(idImovel);
								
								comandoAtivImov.setCobrancaAcaoAtividadeComando(cobrancaAACom);
								comandoAtivImov.setImovel(imov);
								comandoAtivImov.setUltimaAlteracao(new Date());
								
								comandoAtivImovPK.setImovelId(imov.getId());
								comandoAtivImovPK.setCobrancaAcaoAtividadeComandoId(cobrancaAACom.getId());
								
								comandoAtivImov.setComp_id(comandoAtivImovPK);
								
								if (idComando != null && !idComando.equals("")) {

									// ------------ REGISTRAR TRANSAÇÃO ----------------
									registradorOperacao = new RegistradorOperacao(
											Operacao.OPERACAO_INSERIR_COMANDO_ACAO_COBRANCA_EVENTUAL_COMANDO,
											new UsuarioAcaoUsuarioHelper(usuarioLogado,
													UsuarioAcao.USUARIO_ACAO_EFETUOU_OPERACAO));

									operacao
											.setId(Operacao.OPERACAO_INSERIR_COMANDO_ACAO_COBRANCA_EVENTUAL_COMANDO);
									operacaoEfetuada.setOperacao(operacao);
									cobrancaAcaoAtividadeComando
											.setOperacaoEfetuada(operacaoEfetuada);
									cobrancaAcaoAtividadeComando.adicionarUsuario(
											usuarioLogado,
											UsuarioAcao.USUARIO_ACAO_EFETUOU_OPERACAO);
									registradorOperacao
											.registrarOperacao(comandoAtivImov);
									// ------------ REGISTRAR TRANSAÇÃO ----------------

								} else {
									// ------------ REGISTRAR TRANSAÇÃO ----------------
									registradorOperacao = new RegistradorOperacao(
											Operacao.OPERACAO_INSERIR_COMANDO_ACAO_COBRANCA_EVENTUAL_ROTA,
											new UsuarioAcaoUsuarioHelper(usuarioLogado,
													UsuarioAcao.USUARIO_ACAO_EFETUOU_OPERACAO));

									operacao
											.setId(Operacao.OPERACAO_INSERIR_COMANDO_ACAO_COBRANCA_EVENTUAL_ROTA);
									operacaoEfetuada.setOperacao(operacao);
									cobrancaAcaoAtividadeComando
											.setOperacaoEfetuada(operacaoEfetuada);
									cobrancaAcaoAtividadeComando.adicionarUsuario(
											usuarioLogado,
											UsuarioAcao.USUARIO_ACAO_EFETUOU_OPERACAO);
									registradorOperacao
											.registrarOperacao(comandoAtivImov);
									// ------------ REGISTRAR TRANSAÇÃO ----------------

								}
								
								getControladorUtil().inserir(comandoAtivImov);
								
							}
							
						} catch (ErroRepositorioException e) {
							e.printStackTrace();
						}
						
					}
				}
			}
		}
		

		// [FS008] - Obter Lista de Rotas
		Collection colecaoRotas = 
			this.obterListasRotas(null,
				null, 
				codigoSetorComercialInicial,
				codigoSetorComercialFinal, 
				idLocalidadeInicial,
				idLocalidadeFinal, 
				idGerenciaRegional, 
				unidadeNegocio, 
				codigoRotaInicial, 
				codigoRotaFinal,
				numeroQuadraInicial,
				numeroQuadraFinal, 
				idsLocalidade,
				idsSetorComercial,
				idLocalidade);
		 
		// -- Validar se todas as rotas do grupo informado possui um criterio definido para a açao de cobrança
       if(colecaoRotas != null && !colecaoRotas.isEmpty())  {
        	
    	   Collection<Integer> colecaoIdsAcoesCobranca = new ArrayList<Integer>();
	        for (String idCobrancaAcao : idsCobrancaAcao) {
	        	colecaoIdsAcoesCobranca.add(new Integer(idCobrancaAcao));
	        }
	        
	        Collection<Integer> colecaoIdsRotas = new ArrayList<Integer>();
	        for (Rota rota : (Collection<Rota>) colecaoRotas) {
	        	colecaoIdsRotas.add(new Integer(rota.getId()));
	        }
	         
	        PesquisarQtdeRotasSemCriteriosParaAcoesCobranca filtro = new PesquisarQtdeRotasSemCriteriosParaAcoesCobranca();
	        filtro.setIdsRotas(colecaoIdsRotas);
	        filtro.setIdsAcoesCobranca(colecaoIdsAcoesCobranca);
	        if (cobrancaAcaoAtividadeComando.getCobrancaGrupo() != null) {
	        	filtro.setIdGrupoCobranca(cobrancaAcaoAtividadeComando.getCobrancaGrupo().getId());
	        } 
	        
	        Integer qtdeRotasSemCriterios = this.pesquisarQtdeRotasSemCriteriosParaAcoesCobranca(filtro);
			if (qtdeRotasSemCriterios != null && qtdeRotasSemCriterios.intValue() > 0) { 
				sessionContext.setRollbackOnly();

				throw new ControladorException("atencao.rotas.sem.criterio.para.acao.cobranca");
				
			}
        }
        // ---------

		if (colecaoRotas != null && !colecaoRotas.isEmpty()) {

			CobrancaAtividadeComandoRota cobrancaAtividadeComandoRota = null;
			Iterator iteratorColecaoRotas = colecaoRotas.iterator();
			while (iteratorColecaoRotas.hasNext()) {
				Rota rota = (Rota) iteratorColecaoRotas.next();

				registradorOperacao = null;
				operacao = new Operacao();
				operacaoEfetuada = new OperacaoEfetuada();
				if (colecaoCobrancaAcaoAtividadeComando != null
						&& !colecaoCobrancaAcaoAtividadeComando.isEmpty()) {
					Iterator iteCobrancaAtividadeComando = colecaoCobrancaAcaoAtividadeComando
							.iterator();
					while (iteCobrancaAtividadeComando.hasNext()) {
						Integer idCobrancaAcaoAtividadeComandoColecao = (Integer) iteCobrancaAtividadeComando
								.next();
						CobrancaAtividadeComandoRotaPK cobrancaAtividadeComandoRotaPK = new CobrancaAtividadeComandoRotaPK();
						cobrancaAtividadeComandoRotaPK
								.setCobrancaAcaoAtividadeComandoId(idCobrancaAcaoAtividadeComandoColecao);
						cobrancaAtividadeComandoRotaPK.setRotaId(rota.getId());

						cobrancaAtividadeComandoRota = new CobrancaAtividadeComandoRota();
						cobrancaAtividadeComandoRota
								.setComp_id(cobrancaAtividadeComandoRotaPK);
						CobrancaAcaoAtividadeComando cobrancaAcaoAtividadeComandoAux = new CobrancaAcaoAtividadeComando();
						cobrancaAcaoAtividadeComandoAux
								.setId(idCobrancaAcaoAtividadeComandoColecao);
						cobrancaAtividadeComandoRota
								.setCobrancaAcaoAtividadeComando(cobrancaAcaoAtividadeComandoAux);
						cobrancaAtividadeComandoRota.setRota(rota);
						cobrancaAtividadeComandoRota
								.setUltimaAlteracao(new Date());

						if (idComando != null && !idComando.equals("")) {
							// ------------ REGISTRAR TRANSAÇÃO ----------------
							registradorOperacao = new RegistradorOperacao(
									Operacao.OPERACAO_INSERIR_COMANDO_ACAO_COBRANCA_EVENTUAL_COMANDO,
									new UsuarioAcaoUsuarioHelper(
											usuarioLogado,
											UsuarioAcao.USUARIO_ACAO_EFETUOU_OPERACAO));

							operacao
									.setId(Operacao.OPERACAO_INSERIR_COMANDO_ACAO_COBRANCA_EVENTUAL_COMANDO);
							operacaoEfetuada.setOperacao(operacao);
							cobrancaAtividadeComandoRota
									.setOperacaoEfetuada(operacaoEfetuada);
							cobrancaAtividadeComandoRota.adicionarUsuario(
									usuarioLogado,
									UsuarioAcao.USUARIO_ACAO_EFETUOU_OPERACAO);
							registradorOperacao
									.registrarOperacao(cobrancaAtividadeComandoRota);
							// ------------ REGISTRAR TRANSAÇÃO ----------------
						} else {
							// ------------ REGISTRAR TRANSAÇÃO ----------------
							registradorOperacao = new RegistradorOperacao(
									Operacao.OPERACAO_INSERIR_COMANDO_ACAO_COBRANCA_EVENTUAL_ROTA,
									new UsuarioAcaoUsuarioHelper(
											usuarioLogado,
											UsuarioAcao.USUARIO_ACAO_EFETUOU_OPERACAO));

							operacao
									.setId(Operacao.OPERACAO_INSERIR_COMANDO_ACAO_COBRANCA_EVENTUAL_ROTA);
							operacaoEfetuada.setOperacao(operacao);
							cobrancaAtividadeComandoRota
									.setOperacaoEfetuada(operacaoEfetuada);
							cobrancaAtividadeComandoRota.adicionarUsuario(
									usuarioLogado,
									UsuarioAcao.USUARIO_ACAO_EFETUOU_OPERACAO);
							registradorOperacao
									.registrarOperacao(cobrancaAtividadeComandoRota);
							// ------------ REGISTRAR TRANSAÇÃO ----------------
						}
						// inserir cobranca atividade comando rota
						this.getControladorUtil().inserir(
								cobrancaAtividadeComandoRota);
					}
				}
			}
		}

		colecaoRotas = new ArrayList();
		if (cobrancaAcaoAtividadeComando.getCobrancaGrupo() != null) {

			FiltroRota filtroRota = new FiltroRota();
			filtroRota.adicionarParametro(new ParametroSimples(
					FiltroRota.COBRANCA_GRUPO_ID, cobrancaAcaoAtividadeComando
							.getCobrancaGrupo().getId()));
			colecaoRotas = getControladorUtil().pesquisar(filtroRota,
					Rota.class.getName());

		} else {

			try {
				colecaoRotas = repositorioBatch
						.pesquisarRotasProcessamentoBatchCobrancaGrupoNaoInformado(cobrancaAcaoAtividadeComando
								.getId());
			} catch (ErroRepositorioException e) {
				e.printStackTrace();
			}

		}
		
		
		if (colecaoRotas == null || colecaoRotas.isEmpty()) {
			
			if((idCliente == null || idCliente.trim().equals("")) && (codigoClienteSuperior == null || codigoClienteSuperior.trim().equals("")) 
				&& (logradouroId == null || logradouroId.trim().equals(""))) {
				if(nomeArquivo == null || nomeArquivo.trim().equals("")){
				  
					sessionContext.setRollbackOnly();
					throw new ControladorException("atencao.comando.nao.existe.rotas");
				}
			}
		}
		
		if (colecaoCobrancaAcaoAtividadeComando != null
				&& !colecaoCobrancaAcaoAtividadeComando.isEmpty()) {
			
			Iterator iteCobrancaAtividadeComando = 
				colecaoCobrancaAcaoAtividadeComando.iterator();
			
			while (iteCobrancaAtividadeComando.hasNext()) {
				Integer idCobrancaAcaoAtividadeComandoColecao = 
					(Integer) iteCobrancaAtividadeComando.next();
				
				CobrancaAcaoAtividadeComando cobrancaAcaoAtividadeComandoAux = new CobrancaAcaoAtividadeComando();
				cobrancaAcaoAtividadeComandoAux.setId(idCobrancaAcaoAtividadeComandoColecao);
			
				// Para cada Situação da Fiscalização selecionada, inclui a situação da fiscalização
				// na tabela COB_ACAO_ATV_CMD_FIS_SIT.				
				this.atualizarCobrancaAcaoAtividadeComandoFiscalizacaoSituacao(
						cobrancaAcaoAtividadeComando,situacaoFiscalizacao);
				// Fim insert de CobrancaAcaoAtividadeComandoFiscalizacaoSituacao.
			}	
		}
		
		
		if ( idsSetorComercial != null && idsSetorComercial.length > 0 ) {
			for (int i = 0; i < idsSetorComercial.length; i++) {
				SetorComercial setorComercial = new SetorComercial();
				setorComercial.setId( Integer.valueOf(idsSetorComercial[i]) );
				
				CobrancaAcaoAtividadeComandoSetorComercial cobrancaAcaoAtividadeComandoSetorComercial = new CobrancaAcaoAtividadeComandoSetorComercial();
				
				cobrancaAcaoAtividadeComandoSetorComercial.setSetorComercial(setorComercial);
				cobrancaAcaoAtividadeComandoSetorComercial.setCobrancaAcaoAtividadeComando(cobrancaAcaoAtividadeComando);
				cobrancaAcaoAtividadeComandoSetorComercial.setUltimaAlteracao( new Date() );
				getControladorUtil().inserir(cobrancaAcaoAtividadeComandoSetorComercial);
			}
		}
		
		if ( idsLocalidade != null && idsLocalidade.length > 0 ) {
			for (int i = 0; i < idsLocalidade.length; i++) {
				Localidade localidade = new Localidade();
				localidade.setId( Integer.valueOf(idsLocalidade[i]) );
				
				CobrancaAcaoAtividadeComandoLocalidade cobrancaAcaoAtividadeComandoLocalidade = new CobrancaAcaoAtividadeComandoLocalidade();
				cobrancaAcaoAtividadeComandoLocalidade.setLocalidade(localidade);
				cobrancaAcaoAtividadeComandoLocalidade.setCobrancaAcaoAtividadeComando(cobrancaAcaoAtividadeComando);
				cobrancaAcaoAtividadeComandoLocalidade.setUltimaAlteracao( new Date() );
				getControladorUtil().inserir(cobrancaAcaoAtividadeComandoLocalidade);
			}
		}

		return colecaoCobrancaAcaoAtividadeComando;
	}

	/**
	 * 
	 * Inserir Comando de Ação de Cobrança
	 * 
	 * [UC0243] Inserir Comando Ação de Cobrança
	 * 
	 * Consultar CobrancaAtividade
	 * 
	 * @author Rafael Santos
	 * @date 04/04/2006
	 * 
	 * @param idCobrancaAcaoAtividadeComando
	 * @return
	 * @throws ControladorException
	 */
	public CobrancaAtividade consultarCobrancaAtividade(
			String idCobrancaAtividade) throws ControladorException {

		CobrancaAtividade cobrancaAtividade = null;

		FiltroCobrancaAtividade filtroCobrancaAtividade = new FiltroCobrancaAtividade();
		filtroCobrancaAtividade.adicionarParametro(new ParametroSimples(
				FiltroCobrancaAcao.ID, idCobrancaAtividade));

		Collection colecaoCobrancaAtividade = this.getControladorUtil()
				.pesquisar(filtroCobrancaAtividade,
						CobrancaAtividade.class.getName());

		if (colecaoCobrancaAtividade != null
				&& !colecaoCobrancaAtividade.isEmpty()) {
			cobrancaAtividade = (CobrancaAtividade) colecaoCobrancaAtividade
					.iterator().next();
		}

		return cobrancaAtividade;

	}

	/**
	 * 
	 * Inserir Comando de Ação de Cobrança
	 * 
	 * [UC0243] Inserir Comando Ação de Cobrança
	 * 
	 * Atualizar Comando
	 * 
	 * @author Rafael Santos
	 * @date 05/04/2006
	 * 
	 * @param idCobrancaAcaoAtividadeComando
	 * @return
	 * @throws ControladorException
	 */
	public void atualizarCobrancaAcaoAtividadeComando(
			CobrancaAcaoAtividadeComando cobrancaAcaoAtividadeComando,
			GerarAtividadeAcaoCobrancaHelper gerarAtividadeAcaoCobrancaHelper)
			throws ControladorException {

		if (gerarAtividadeAcaoCobrancaHelper != null) {
			// incluir os dados gerados pela atividade ação cobrança
			cobrancaAcaoAtividadeComando
					.setQuantidadeDocumentos(gerarAtividadeAcaoCobrancaHelper
							.getQuantidadeDocumentosCobranca());
			cobrancaAcaoAtividadeComando
					.setValorDocumentos(gerarAtividadeAcaoCobrancaHelper
							.getValorDocumentosCobranca());
			cobrancaAcaoAtividadeComando
					.setQuantidadeItensCobrados(gerarAtividadeAcaoCobrancaHelper
							.getQuantidadeItensCobradosDocumentos());
			cobrancaAcaoAtividadeComando.setRealizacao(new Date());

			// atualizar os dados de cobranca acao atividade comando
			this.getControladorUtil().atualizar(cobrancaAcaoAtividadeComando);
		}

	}

	/**
	 * 
	 * Inserir Comando de Ação de Cobrança
	 * 
	 * [UC0243] Inserir Comando Ação de Cobrança
	 * 
	 * Concluir Comando de Ação de Cobrança
	 * 
	 * @author Rafael Santos
	 * @date 05/04/2006
	 * 
	 * @param idCobrancaAcaoAtividadeComando
	 * @return
	 * @throws ControladorException
	 */
	public Collection concluirComandoAcaoCobranca(String periodoInicialConta,
			String periodoFinalConta, 
			String periodoVencimentoContaInicial,
			String periodoVencimentoContaFinal, 
			String[] idsCobrancaAcao,
			String idCobrancaAtividade, 
			String idCobrancaGrupo,
			String idGerenciaRegional, 
			String localidadeOrigemID,
			String localidadeDestinoID, 
			String setorComercialOrigemCD,
			String setorComercialDestinoCD, 
			String idCliente,
			String clienteRelacaoTipo, 
			String indicador, 
			String rotaInicial,
			String rotaFinal, 
			String setorComercialOrigemID,
			String setorComercialDestinoID, 
			String idComando,
			String unidadeNegocio, 
			Usuario usuarioLogado, 
			String titulo,
			String descricaoSolicitacao, 
			String prazoExecucao,
			String quantidadeMaximaDocumentos, 
			String valorLimiteObrigatoria, 
			String indicadorImoveisDebito,
			String indicadorGerarBoletimCadastro,
			String codigoClienteSuperior, 
			String codigoRotaInicial,
			String codigoRotaFinal,
			String logradouroId, 
			String consumoMedioInicial, 
			String consumoMedioFinal, 
			String tipoConsumo,
			String periodoInicialFiscalizacao, 
			String periodoFinalFiscalizacao, 
			String[] situacaoFiscalizacao,
			String numeroQuadraInicial,
			String numeroQuadraFinal,
			String quantidadeDiasVencimento, 
			String imoveisSitLigacaoNaoAlteradaDeb, 
			String nomeArquivo, 
			Collection<Integer> colecaoIdsImovel,
			String[] idsLocalidade,
			String[] idsSetorComercial,
			String idLocalidade) throws ControladorException{

		// [FS0012] - Verificar referência final menor que referência inicial
		this.validarAnoMesInicialFinalComandoAcaoCobranca(periodoInicialConta,periodoFinalConta);

		// [FS0014] - Verificar data final menos que data inicial
		this.verificarVencimentoContaComandoAcaoCobranca(periodoVencimentoContaInicial, periodoVencimentoContaFinal);
		
		// [FS0014] - Verificar data final menos que data inicial
		this.verificarPeriodoFiscalizacaoComandoAcaoCobranca(periodoInicialFiscalizacao, periodoFinalFiscalizacao);

		// [FS0016] - Verificar existência do comando eventual
		this.verficarExistenciaComandoEventual(idsCobrancaAcao,
				idCobrancaAtividade, 
				idCobrancaGrupo, 
				idGerenciaRegional,
				localidadeOrigemID, 
				localidadeDestinoID,
				setorComercialOrigemCD, 
				setorComercialDestinoCD, 
				idCliente,
				clienteRelacaoTipo, 
				periodoInicialConta, 
				periodoFinalConta,
				periodoVencimentoContaInicial, 
				periodoVencimentoContaFinal,
				indicador, 
				rotaInicial, 
				rotaFinal, 
				idComando, 
				unidadeNegocio,
				codigoClienteSuperior,
				numeroQuadraInicial,
				numeroQuadraFinal, idLocalidade, idsLocalidade, idsSetorComercial);

		// inserir comando de ação de cobança
		// [SB0007]
		Collection colecaoCobrancaAcaoAtividadeComando = 
			this.inserirComandoAcaoCobrancaCriterioEventual(
				idsCobrancaAcao,
				idCobrancaAtividade, 
				idCobrancaGrupo,
				idGerenciaRegional, 
				localidadeOrigemID,
				localidadeDestinoID, 
				setorComercialOrigemCD,
				setorComercialDestinoCD, 
				setorComercialOrigemID,
				setorComercialDestinoID, 
				idCliente, 
				clienteRelacaoTipo,
				periodoInicialConta, 
				periodoFinalConta,
				periodoVencimentoContaInicial,
				periodoVencimentoContaFinal, 
				indicador, rotaInicial,
				rotaFinal, 
				idComando, 
				unidadeNegocio, 
				usuarioLogado,
				titulo, 
				descricaoSolicitacao, 
				prazoExecucao,
				quantidadeMaximaDocumentos, 
				valorLimiteObrigatoria, 
				indicadorImoveisDebito,
				indicadorGerarBoletimCadastro,
				codigoClienteSuperior, 
				codigoRotaInicial,
				codigoRotaFinal,
				logradouroId,
				consumoMedioInicial,
				consumoMedioFinal,
				tipoConsumo,
				periodoInicialFiscalizacao,
				periodoFinalFiscalizacao,
				situacaoFiscalizacao,
				numeroQuadraInicial,
				numeroQuadraFinal,
				quantidadeDiasVencimento, 
				imoveisSitLigacaoNaoAlteradaDeb, 
				nomeArquivo, 
				colecaoIdsImovel, idsLocalidade, idsSetorComercial, idLocalidade);

		return colecaoCobrancaAcaoAtividadeComando;
	}

	/**
	 * 
	 * Inserir Comando de Ação de Cobrança
	 * 
	 * [UC0243] Inserir Comando Ação de Cobrança
	 * 
	 * Executar Comando Concluir Comando de Ação de Cobrança
	 * 
	 * @author Rafael Santos
	 * @date 05/04/2006
	 * 
	 * @param idCobrancaAcaoAtividadeComando
	 * @return
	 * @throws ControladorException
	 */
	public Collection executarComandoAcaoCobranca(String periodoInicialConta,
			String periodoFinalConta, String periodoVencimentoContaInicial,
			String periodoVencimentoContaFinal, String[] idsCobrancaAcao,
			String idCobrancaAtividade, String idCobrancaGrupo,
			String idGerenciaRegional, String localidadeOrigemID,
			String localidadeDestinoID, String setorComercialOrigemCD,
			String setorComercialDestinoCD, String idCliente,
			String clienteRelacaoTipo, String indicador, String rotaInicial,
			String rotaFinal, String setorComercialOrigemID,
			String setorComercialDestinoID, String idComando,
			Usuario usuarioLogado, String titulo, String descricaoSolicitacao,
			String prazoExecucao, String quantidadeMaximaDocumentos, String valorLimiteObrigatoria,
			String indicadorImoveisDebito, String indicadorGerarBoletimCadastro,
			String codigoClienteSuperior, String codigoRotaInicial,
			String codigoRotaFinal,String consumoMedioInicial, String consumoMedioFinal, 
			String tipoConsumo,String periodoInicialFiscalizacao, String periodoFinalFiscalizacao, 
			String[] situacaoFiscalizacao,String numeroQuadraInicial,
			String numeroQuadraFinal,
			String quantidadeDiasVencimento, 
			String imoveisSitLigacaoNaoAlteradaDeb, 
			String nomeArquivo, 
			Collection<Integer> colecaoIdsImovel, String[] idsLocalidade, String[] idsSetorComercial, String idLocalidade) throws ControladorException{

		// [FS0012] - Verificar referência final menor que referência inicial
		this.validarAnoMesInicialFinalComandoAcaoCobranca(periodoInicialConta,
				periodoFinalConta);

		// [FS0014] - Verificar data final menos que data inicial
		this.verificarVencimentoContaComandoAcaoCobranca(
				periodoVencimentoContaInicial, periodoVencimentoContaFinal);
		
		// [FS0014] - Verificar data final menos que data inicial
		this.verificarPeriodoFiscalizacaoComandoAcaoCobranca(
				periodoInicialFiscalizacao, periodoFinalFiscalizacao);

		// [FS0016] - Verificar existência do comando eventual
		this.verficarExistenciaComandoEventual(idsCobrancaAcao,
				idCobrancaAtividade, idCobrancaGrupo, idGerenciaRegional,
				localidadeOrigemID, localidadeDestinoID,
				setorComercialOrigemCD, setorComercialDestinoCD, idCliente,
				clienteRelacaoTipo, periodoInicialConta, periodoFinalConta,
				periodoVencimentoContaInicial, periodoVencimentoContaFinal,
				indicador, rotaInicial, rotaFinal, idComando, null,codigoClienteSuperior,
				numeroQuadraInicial,numeroQuadraFinal, idLocalidade, idsLocalidade, idsSetorComercial);

		// inserir comando de ação de cobança
		// [SB0007]
		Collection colecaoCobrancaAcaoAtividadeComando = this
				.inserirComandoAcaoCobrancaCriterioEventual(idsCobrancaAcao,
						idCobrancaAtividade, idCobrancaGrupo,
						idGerenciaRegional, localidadeOrigemID,
						localidadeDestinoID, setorComercialOrigemCD,
						setorComercialDestinoCD, setorComercialOrigemID,
						setorComercialDestinoID, idCliente, clienteRelacaoTipo,
						periodoInicialConta, periodoFinalConta,
						periodoVencimentoContaInicial,
						periodoVencimentoContaFinal, indicador, rotaInicial,
						rotaFinal, idComando, null, usuarioLogado, titulo,
						descricaoSolicitacao, prazoExecucao,
						quantidadeMaximaDocumentos, valorLimiteObrigatoria, indicadorImoveisDebito,
						indicadorGerarBoletimCadastro,codigoClienteSuperior, codigoRotaInicial,
						codigoRotaFinal,codigoRotaFinal,consumoMedioInicial, consumoMedioFinal,
						tipoConsumo,periodoInicialFiscalizacao,periodoFinalFiscalizacao,
						situacaoFiscalizacao,numeroQuadraInicial,numeroQuadraFinal,
						quantidadeDiasVencimento, 
						imoveisSitLigacaoNaoAlteradaDeb, 
						nomeArquivo, 
						colecaoIdsImovel, idsLocalidade, idsSetorComercial, idLocalidade);

		Iterator iteCobrancaAcaoAtividadeComando = colecaoCobrancaAcaoAtividadeComando
				.iterator();
		while (iteCobrancaAcaoAtividadeComando.hasNext()) {
			CobrancaAcaoAtividadeComando cobrancaAcaoAtividadeComando = (CobrancaAcaoAtividadeComando) iteCobrancaAcaoAtividadeComando
					.next();

			// [SF0009] - Selecionar Lista de Rotas do Comando
			Collection colecaoRotas = this.obterListaRotasComando(
					idCobrancaGrupo, cobrancaAcaoAtividadeComando.getId()
							.toString());

			// pesquisar cobranca atividade
			CobrancaAtividade cobrancaAtividade = this
					.consultarCobrancaAtividade(idCobrancaAtividade);

			// pesquisar cobranca acao
			// CobrancaAcao cobrancaAcao = this
			// .consultarCobrancaAcao(.getId());

			// [SF0010] - Executar Comando Eventual
			GerarAtividadeAcaoCobrancaHelper gerarAtividadeAcaoCobrancaHelper = this
					.executarComandoEventual(cobrancaAtividade,
							cobrancaAcaoAtividadeComando,
							cobrancaAcaoAtividadeComando.getCobrancaAcao(),
							colecaoRotas);

			// atualizar os dados de cobranca acao atividade comando
			this.atualizarCobrancaAcaoAtividadeComando(
					cobrancaAcaoAtividadeComando,
					gerarAtividadeAcaoCobrancaHelper);
		}

		return colecaoCobrancaAcaoAtividadeComando;

	}

	/**
	 * 
	 * Permite excluir um comando de atividade de cobrança do crongrama ou
	 * alterar/excluir um comando deatividade de cobrança eventual
	 * 
	 * [UC0244] Manter Comando Ação de Cobrança
	 * 
	 * Consultar Cobranca Ação CAtividade Comando
	 * 
	 * @author Rafael Santos
	 * @date 25/03/2006
	 * 
	 * @param idCobrancaAcaoAtividadeComando
	 * @return
	 * @throws ControladorException
	 */
	public CobrancaAcaoAtividadeComando consultarCobrancaAcaoAtividadeComando(
			String idCobrancaAcaoAtividadeComando) throws ControladorException {

		CobrancaAcaoAtividadeComando cobrancaAcaoAtividadeComando = null;

		if (idCobrancaAcaoAtividadeComando != null
				&& !idCobrancaAcaoAtividadeComando.equals("")) {

			FiltroCobrancaAcaoAtividadeComando filtroCobrancaAcaoAtividadeComando = new FiltroCobrancaAcaoAtividadeComando();
			filtroCobrancaAcaoAtividadeComando
					.adicionarCaminhoParaCarregamentoEntidade(FiltroCobrancaAcaoAtividadeComando.COBRANCA_ACAO);
			filtroCobrancaAcaoAtividadeComando
					.adicionarCaminhoParaCarregamentoEntidade(FiltroCobrancaAcaoAtividadeComando.COBRANCA_GRUPO);
			filtroCobrancaAcaoAtividadeComando
					.adicionarCaminhoParaCarregamentoEntidade(FiltroCobrancaAcaoAtividadeComando.COBRANCA_ATIVIDADE);
			filtroCobrancaAcaoAtividadeComando
					.adicionarCaminhoParaCarregamentoEntidade(FiltroCobrancaAcaoAtividadeComando.COBRANCA_CRITERIO);
			filtroCobrancaAcaoAtividadeComando
					.adicionarCaminhoParaCarregamentoEntidade(FiltroCobrancaAcaoAtividadeComando.USUARIO);
			filtroCobrancaAcaoAtividadeComando
					.adicionarCaminhoParaCarregamentoEntidade(FiltroCobrancaAcaoAtividadeComando.EMPRESA);
			filtroCobrancaAcaoAtividadeComando
					.adicionarCaminhoParaCarregamentoEntidade(FiltroCobrancaAcaoAtividadeComando.GERENCIAL_REGIONAL);
			filtroCobrancaAcaoAtividadeComando
					.adicionarCaminhoParaCarregamentoEntidade(FiltroCobrancaAcaoAtividadeComando.LOCALIDADE_INICIAL);
			filtroCobrancaAcaoAtividadeComando
					.adicionarCaminhoParaCarregamentoEntidade(FiltroCobrancaAcaoAtividadeComando.ROTA_INICIAL);
			filtroCobrancaAcaoAtividadeComando
			.adicionarCaminhoParaCarregamentoEntidade(FiltroCobrancaAcaoAtividadeComando.ROTA_FINAL);
			filtroCobrancaAcaoAtividadeComando
					.adicionarCaminhoParaCarregamentoEntidade(FiltroCobrancaAcaoAtividadeComando.CLIENTE);
			filtroCobrancaAcaoAtividadeComando
			.adicionarCaminhoParaCarregamentoEntidade(FiltroCobrancaAcaoAtividadeComando.CLIENTE_SUPERIOR);
			filtroCobrancaAcaoAtividadeComando
					.adicionarCaminhoParaCarregamentoEntidade(FiltroCobrancaAcaoAtividadeComando.CLIENTE_RELACAO_TIPO);
			filtroCobrancaAcaoAtividadeComando
					.adicionarParametro(new ParametroSimples(
							FiltroCobrancaAcaoAtividadeComando.ID,
							idCobrancaAcaoAtividadeComando));

			Collection colecaoCobrancaAcaoAtividadeComando = this
					.getControladorUtil().pesquisar(
							filtroCobrancaAcaoAtividadeComando,
							CobrancaAcaoAtividadeComando.class.getName());
			if (colecaoCobrancaAcaoAtividadeComando != null
					&& !colecaoCobrancaAcaoAtividadeComando.isEmpty()) {
				cobrancaAcaoAtividadeComando = (CobrancaAcaoAtividadeComando) colecaoCobrancaAcaoAtividadeComando
						.iterator().next();
			}

		}

		return cobrancaAcaoAtividadeComando;
	}

	/**
	 * 
	 * Permite atualizar os dados de uma resolução de diretoria
	 * 
	 * [UC0218] Manter Resolução de Diretoria
	 * 
	 * [SB0001] Atualizar Resolução de Diretoria
	 * 
	 * @author Rafael Corrêa
	 * @param usuarioLogado
	 * @date 10/04/2006
	 * 
	 */
	public void atualizarResolucaoDiretoria(
			ResolucaoDiretoria resolucaoDiretoria, Usuario usuarioLogado)
			throws ControladorException {

		// [FS0001] - Validar Período de Vigência
		if (resolucaoDiretoria.getDataVigenciaFim() != null) {
			if (resolucaoDiretoria.getDataVigenciaInicio().compareTo(
					resolucaoDiretoria.getDataVigenciaFim()) >= 0) {
				throw new ControladorException(
						"atencao.termino_vigencia.anterior.inicio_vigencia");
			}
		}

		// [FS0003] - Atualização realizada por outro usuário
		FiltroResolucaoDiretoria filtroResolucaoDiretoria = new FiltroResolucaoDiretoria();
		filtroResolucaoDiretoria.adicionarParametro(new ParametroSimples(
				FiltroResolucaoDiretoria.CODIGO, resolucaoDiretoria.getId()));

		Collection colecaoResolucaoDiretoriaBase = getControladorUtil()
				.pesquisar(filtroResolucaoDiretoria,
						ResolucaoDiretoria.class.getName());

		if (colecaoResolucaoDiretoriaBase == null
				|| colecaoResolucaoDiretoriaBase.isEmpty()) {
			sessionContext.setRollbackOnly();
			throw new ControladorException("atencao.atualizacao.timestamp");
		}

		ResolucaoDiretoria resolucaoDiretoriaBase = (ResolucaoDiretoria) colecaoResolucaoDiretoriaBase
				.iterator().next();

		if (resolucaoDiretoriaBase.getUltimaAlteracao().after(
				resolucaoDiretoria.getUltimaAlteracao())) {
			sessionContext.setRollbackOnly();
			throw new ControladorException("atencao.atualizacao.timestamp");
		}

		resolucaoDiretoria.setUltimaAlteracao(new Date());

		// ------------ REGISTRAR TRANSAÇÃO----------------------------
		RegistradorOperacao registradorOperacao = new RegistradorOperacao(
				Operacao.OPERACAO_RESOLUCAO_DIRETORIA_ATUALIZAR,
				new UsuarioAcaoUsuarioHelper(usuarioLogado,
						UsuarioAcao.USUARIO_ACAO_EFETUOU_OPERACAO));

		Operacao operacao = new Operacao();
		operacao.setId(Operacao.OPERACAO_RESOLUCAO_DIRETORIA_ATUALIZAR);

		OperacaoEfetuada operacaoEfetuada = new OperacaoEfetuada();
		operacaoEfetuada.setOperacao(operacao);

		resolucaoDiretoria.setOperacaoEfetuada(operacaoEfetuada);
		resolucaoDiretoria.adicionarUsuario(usuarioLogado,
				UsuarioAcao.USUARIO_ACAO_EFETUOU_OPERACAO);
		registradorOperacao.registrarOperacao(resolucaoDiretoria);
		// ------------ REGISTRAR TRANSAÇÃO----------------------------

		getControladorUtil().atualizar(resolucaoDiretoria);

	}

	/**
	 * 
	 * Manter Comando de Ação de Cobrança
	 * 
	 * [UC0244] Manter Comando Ação de Cobrança
	 * 
	 * Concluir Comando de Ação de Cobrança
	 * 
	 * @author Rafael Santos
	 * @date 24/04/2006
	 * 
	 * @param idCobrancaAcaoAtividadeComando
	 * @return
	 * @throws ControladorException
	 */
	public void concluirManterComandoAcaoCobranca(String periodoInicialConta,
			String periodoFinalConta, String periodoVencimentoContaInicial,
			String periodoVencimentoContaFinal, String idCobrancaAcao,
			String idCobrancaAtividade, String idCobrancaGrupo,
			String idGerenciaRegional, String localidadeOrigemID,
			String localidadeDestinoID, String setorComercialOrigemCD,
			String setorComercialDestinoCD, String idCliente,
			String clienteRelacaoTipo, String indicador, String rotaInicial,
			String rotaFinal, String setorComercialOrigemID,
			String setorComercialDestinoID,
			String idCobrancaAcaoAtividadeComando, Date realizacao,
			Date comando, Date ultimaDataAtualizacao, Usuario usuario,
			Empresa empresa, Integer quantidadeDocumentos,
			BigDecimal valorDocumentos, Integer quantidadeItensCobrados,
			String idComando, String unidadeNegocio, String titulo,
			String descricaoSolicitacao, String prazoExecucao,
			String quantidadeMaximaDocumentos, String valorLimiteObrigatoria, String indicadorImoveisDebito,
			String indicadorGerarBoletimCadastro,String codigoClienteSuperior,
			String codigoRotaInicial, String codigoRotaFinal,
			String consumoMedioInicial, String consumoMedioFinal, String tipoConsumo,
			String periodoInicialFiscalizacao, String periodoFinalFiscalizacao, 
			String[] situacaoFiscalizacao,
			String numeroQuadraInicial,
			String numeroQuadraFinal, 
			String quantidadeDiasVencimento, 
			String imoveisSitLigacaoNaoAlteradaDeb, 
			String nomeArquivo, 
			Collection<Integer> colecaoIdsImovel,
			String[] idsLocalidade,
			String[] idsSetorComercial,
			String idLocalidade) throws ControladorException {

		// [FS0011] - Verificar execução do comando
		if (realizacao == null) {
			// [FS0012] - Verificar referência final menor que referência
			// inicial
			this.validarAnoMesInicialFinalComandoAcaoCobranca(
					periodoInicialConta, periodoFinalConta);

			// [FS0014] - Verificar data final menos que data inicial
			this.verificarVencimentoContaComandoAcaoCobranca(
					periodoVencimentoContaInicial, periodoVencimentoContaFinal);
			
			this.verificarPeriodoFiscalizacaoComandoAcaoCobranca(
					periodoInicialFiscalizacao, periodoFinalFiscalizacao);
		}

		// inserir comando de ação de cobança
		// [SB0007]
		this.atualizarComandoAcaoCobrancaEventual(idCobrancaAcao,
				idCobrancaAtividade, idCobrancaGrupo, idGerenciaRegional,
				localidadeOrigemID, localidadeDestinoID,
				setorComercialOrigemCD, setorComercialDestinoCD,
				setorComercialOrigemID, setorComercialDestinoID, idCliente,
				clienteRelacaoTipo, periodoInicialConta, periodoFinalConta,
				periodoVencimentoContaInicial, periodoVencimentoContaFinal,
				indicador, rotaInicial, rotaFinal,
				idCobrancaAcaoAtividadeComando, ultimaDataAtualizacao, comando,
				realizacao, usuario, empresa, quantidadeDocumentos,
				valorDocumentos, quantidadeItensCobrados, idComando,
				unidadeNegocio, titulo, descricaoSolicitacao, prazoExecucao,
				quantidadeMaximaDocumentos,valorLimiteObrigatoria, indicadorImoveisDebito,
				indicadorGerarBoletimCadastro,codigoClienteSuperior,
				codigoRotaInicial, codigoRotaFinal,
				consumoMedioInicial, consumoMedioFinal, tipoConsumo,
				periodoInicialFiscalizacao,periodoFinalFiscalizacao,
				situacaoFiscalizacao,numeroQuadraInicial,numeroQuadraFinal,
				quantidadeDiasVencimento, 
				imoveisSitLigacaoNaoAlteradaDeb,
				nomeArquivo, colecaoIdsImovel, idsLocalidade, idsSetorComercial, idLocalidade);
	}
	
	/**	 
	 * [UC1183] Gerar Arquivo TXT OS Contas Pagas/Parceladas	 
	 * 	 
	 * @author Mariana Victor, Ana Maria, Raimundo Martins	 
	 * @date 02/07/2011, 02/07/2011, 04/05/2012
	 * @throws ControladorException	 
	 * 
	 * */	
	public void gerarArquivoTxtOSContasPagasParceladas(int idFuncionalidadeIniciada) throws ControladorException {
		
		int idUnidadeIniciada = 0;		        
		
		// ------------------------- // Registrar o início do processamento da Unidade de Processamento do Batch // ------------------------- //		
		System.out.println("****** gerarArquivoTxtOSContasPagasParceladas ******");
		idUnidadeIniciada = getControladorBatch().iniciarUnidadeProcessamentoBatch(				
				idFuncionalidadeIniciada,UnidadeProcessamento.FUNCIONALIDADE, 0);     
		
		try {     
			
			//Declaração dos objetos e variáveis que serão usados no decorrer do batch
			StringBuilder arquivo = new StringBuilder("");
			String nomeArquivo = "";
			boolean erroEmail = false;
			boolean arquivoComDados = false;
			int idComando = 0;
			Date dataExecucaoComando = null;
			Date dataEncerramentoComando = null;
			int idOS = 0;
			int idImovel = 0;			
			Integer idGpag = null;
			Integer idHpcr = null;
			Integer qtdContasQuitadas = 0;
			Integer qtdContasParceladasGuia = 0;
			Integer qtdContasParceladas = 0;
			Integer qtdContasCanceladas = 0;
			Integer qtdContas = 0;
			int idConta = 0;			
			int cont = 0;
			int contPart = 1;
			
			
			String idOrdem;			
			String idImovelOS;
			String idComandoOS;
			String mesAno;
			String valorPago;
			String quantidadeParcelas;
			String descPag;
			String dataPagamento = null;
			String motivoEncerramento = null;
			String indicadorPagamento = null;
			String faixaAtrasoDebito = null;
			
			SimpleDateFormat format = new SimpleDateFormat("dd/MM/yyyy");
			ComandoEmpresaCobrancaConta comando = new ComandoEmpresaCobrancaConta();
			ContaGeral cnta = new ContaGeral();												
			Imovel imovel = new Imovel();
			OrdemServico os = new OrdemServico();
			GuiaPagamento guia = new GuiaPagamento();
			DebitoACobrarGeral debito = new DebitoACobrarGeral();
			Pagamento pg = null;
			Parcelamento parc = null;
			
			Collection<Object[]> contasQuitadas = null;
			Collection<Object[]> contasParceladasGuia = null;
			Collection<Object[]> contasCanceladas = null;
			Collection<Object[]> contasParceladas = null;			
			Collection<Object[]> dadosOrdensServico = null;	
			Collection<Integer> idsParcelamentosGuia = null;
			Collection<Integer> idsHpcrAtualizar = new ArrayList<Integer>();
			
			
			FiltroUsuario filtroUsuario = new FiltroUsuario();										
			filtroUsuario.adicionarParametro(new ParametroSimples(FiltroUsuario.ID, Usuario.USUARIO_BATCH.getId()));								
			filtroUsuario.adicionarCaminhoParaCarregamentoEntidade(FiltroUsuario.UNIDADE_ORGANIZACIONAL);
			Collection colecaoUsuario =  Fachada.getInstancia().pesquisar(filtroUsuario,  Usuario.class.getName());
			Usuario usuarioBatch = (Usuario)  Util.retonarObjetoDeColecao(colecaoUsuario);	
			
			// Pesquisa as empresas que possuem comandos ativos e executados para gerar o txt por empresa		
			Collection<Object[]> dadosEmpresas = this.repositorioCobranca.pesquisarEmpresasComandosCobrancaAtivosExecutados();		
			
			if (dadosEmpresas != null && !dadosEmpresas.isEmpty()) {				
				
				Iterator iterator = dadosEmpresas.iterator();		
				
				while(iterator.hasNext()) {				
					Object[] dadosEmpresa = (Object[]) iterator.next();
					
					Integer idEmpresa = (Integer) dadosEmpresa[0];
					String emailEmpresa = (String) dadosEmpresa[1];					
					
					String data = Util.formatarDataSemBarraDDMMAAAA(new Date());	
					
					
					arquivo = new StringBuilder("");				
					
					// 2. O sistema deverá verificar todos os comandos de cobrança por resultados ativos e executados					
					//Collection<Object[]> dadosComandos =this.repositorioCobranca.pesquisarComandosCobrancaAtivosExecutados(idEmpresa);
					
					//3. O sistema deverá verificar todos os comandos de cobrança por resultados executados 
					Collection<Object[]> dadosComandos = this.repositorioCobranca.pesquisarComandosCobrancaExecutados(idEmpresa);
					
					if (dadosComandos != null && !dadosComandos.isEmpty()) {				
						
						Iterator iteratorComando = dadosComandos.iterator();		
						
						while(iteratorComando.hasNext()) {			
							Object[] dadosComando = (Object[]) iteratorComando.next();
							idComando = (Integer) dadosComando[0];
							dataExecucaoComando = (Date) dadosComando[1];
							dataEncerramentoComando = (Date) dadosComando[2];

							// 2.1.	Para cada comando selecionado o sistema deverá selecionar os ordens de serviço  associadas ao mesmo							
							dadosOrdensServico = this.repositorioCobranca.pesquisarOrdensServicoComando(idComando);
							
							
							if (dadosOrdensServico != null && !dadosOrdensServico.isEmpty()) {
								
								Iterator iteratorOS = dadosOrdensServico.iterator();	
								
								while(iteratorOS.hasNext()) {
									Object[] dadosOS = (Object[]) iteratorOS.next();	
									idOS = (Integer) dadosOS[0];	
									idImovel = (Integer) dadosOS[1];
									qtdContasQuitadas = 0;
									qtdContasParceladasGuia = 0;
									qtdContasParceladas = 0;
									qtdContasCanceladas = 0;
									motivoEncerramento = "";
									indicadorPagamento = "P";
									
									/*2.1.1.1. O sistema deverá verificar as contas associadas ao comando de cobrança 
									 * do imóvel da ordem de serviço estão quitadas*/
									contasQuitadas = this.repositorioCobranca.verificarContasQuitadasAssociadas(idOS);
									
									/*2.1.1.2.O sistema deverá verificar as contas associadas ao comando de cobrança, do 
									 * imóvel da ordem de serviço, estão parceladas*/
									contasParceladasGuia = this.repositorioCobranca.verificarContasParceladasAssociadas(idOS);
									
									//2.1.1.2. O sistema deverá verificar as contas associadas ao comando de cobrança, do 
									//imóvel da ordem de serviço estão canceladas
									contasCanceladas = this.repositorioCobranca.verificarContasCanceladasAssociadas(idOS);
									
									if(contasQuitadas !=null && !contasQuitadas.isEmpty()){
										qtdContasQuitadas = contasQuitadas.size();
									}									
									if(contasParceladasGuia !=null && !contasParceladasGuia.isEmpty()){
										//2.1.1.2.1. O sistema deverá verificar se o parcelamento foi gerado com entrada
										idsParcelamentosGuia = this.repositorioCobranca.possuiEntrParcelamento(contasParceladasGuia);
										for(Integer idParc : idsParcelamentosGuia){
											//2.1.1.2.1.1. sistema deverá verificar se a entrada do parcelamento foi paga
											idGpag = this.repositorioCobranca.entradaParcelamentoPaga(idParc, dataExecucaoComando, dataEncerramentoComando);
											if(idGpag !=null && idGpag.compareTo(0) > 0){
												qtdContasParceladasGuia++; 
											}										
										}
									}
									
									//Contas canceladas
									if(contasCanceladas != null && !contasCanceladas.isEmpty()){
										qtdContasCanceladas = contasCanceladas.size();
									}
									
									
									qtdContas = this.repositorioCobranca.quantidadeContasEmAberto(idOS);
									
									/* 2.2.Caso todas as contas associadas ao imóvel da ordem de serviço estejam quitadas ou
									 * parceladas o sistema deverá encerrar a ordem de serviço para a paralização da cobrança
									 * pela empresa responsável 
									 * 	2.2.1. Caso sim, o sistema deverá o sistema deverá encerrar a ordem de serviço com os seguintes motivos
									 * */
									
									if (qtdContas == null 
											|| qtdContas.compareTo(new Integer(0)) == 0) {

										// 2.2.1. Caso sim, o sistema deverá o sistema deverá 
										//  encerrar a ordem de serviço com os seguintes motivos 
										//  e retirar o imóvel da situação de cobrança por resultado
										/*this.getControladorImovel().retirarSituacaoCobrancaImovel(
												idImovel,CobrancaSituacao.EMPRESA_DE_COBRANCA_COMPESA);*/
										
										
										
										//7. DEBITO PARTE QUITADO, PARTE PARCELADO, PARTE CANCELADO
										if(qtdContasParceladasGuia != null 
												&& qtdContasParceladasGuia > 0
												&& qtdContasQuitadas != null
												&& qtdContasQuitadas > 0
												&& qtdContasCanceladas != null
												&& qtdContasCanceladas > 0){
											indicadorPagamento = "P";
											idsParcelamentosGuia = this.repositorioCobranca.possuiEntrParcelamento(contasParceladasGuia);
											for(Integer idParc : idsParcelamentosGuia){
												idGpag = this.repositorioCobranca.entradaParcelamentoPaga(idParc, dataExecucaoComando, dataEncerramentoComando);
												if(idGpag !=null && idGpag.compareTo(0) > 0 ){
													
													if(getControladorOrdemServico().verificaSituacaoOS(idOS).shortValue() 
															!= new Integer(OrdemServicoSituacao.ENCERRADO).shortValue()){
													
														this.getControladorOrdemServico()		
														.encerrarOSSemExecucao(idOS,new Date(),usuarioBatch,
														AtendimentoMotivoEncerramento.DEBITO_PARTE_QUITADO_PARTE_PARCELADO_PARTE_CANCELADO.toString(),
														new Date(), null, null, null, null,null,null, null);
													}
													motivoEncerramento = Util.adicionarZerosEsquedaNumero(4,"DEBITO PARTE QUITADO PARTE PARCELADO PARTE CANCELADO");
													indicadorPagamento = "T";
													
													break;
												}
												else{
													parc = this.repositorioCobranca.pesquisarParcelamento(idParc);
													if(parc.getValorEntrada() == null || 
													   parc.getValorEntrada().compareTo(BigDecimal.ZERO) == 0){
														
														if(getControladorOrdemServico().verificaSituacaoOS(idOS).shortValue() 
																!= new Integer(OrdemServicoSituacao.ENCERRADO).shortValue()){
															
															this.getControladorOrdemServico()		
															.encerrarOSSemExecucao(idOS,new Date(),usuarioBatch,
															AtendimentoMotivoEncerramento.DEBITO_PARTE_QUITADO_PARTE_PARCELADO_PARTE_CANCELADO.toString(),
															new Date(), null, null, null, null,null,null, null);
														}
														motivoEncerramento = Util.adicionarZerosEsquedaNumero(4,"DEBITO PARTE QUITADO PARTE PARCELADO PARTE CANCELADO");													
														indicadorPagamento = "T";
														
														break;
													}
												}
											}
										}
										
										
										//4. DEBITO PARTE QUITADO, PARTE PARCELADO
										else if(qtdContasParceladasGuia != null 
												&& qtdContasParceladasGuia > 0
												&& qtdContasQuitadas != null
												&& qtdContasQuitadas > 0){
											indicadorPagamento = "P";
											idsParcelamentosGuia = this.repositorioCobranca.possuiEntrParcelamento(contasParceladasGuia);
											for(Integer idParc : idsParcelamentosGuia){
												idGpag = this.repositorioCobranca.entradaParcelamentoPaga(idParc, dataExecucaoComando, dataEncerramentoComando);
												if(idGpag !=null && idGpag.compareTo(0) > 0 ){
													
													if(getControladorOrdemServico().verificaSituacaoOS(idOS).shortValue() 
															!= new Integer(OrdemServicoSituacao.ENCERRADO).shortValue()){
													
														this.getControladorOrdemServico()		
														.encerrarOSSemExecucao(idOS,new Date(),usuarioBatch,
														AtendimentoMotivoEncerramento.DEBITO_PARTE_QUITADO_PARTE_PARCELADO.toString(),
														new Date(), null, null, null, null,null,null, null);
													}
													motivoEncerramento = Util.adicionarZerosEsquedaNumero(4,"DEBITO PARTE QUITADO PARTE PARCELADO");
													indicadorPagamento = "T";
													
													break;
												}
												else{
													parc = this.repositorioCobranca.pesquisarParcelamento(idParc);
													if(parc.getValorEntrada() == null || 
													   parc.getValorEntrada().compareTo(BigDecimal.ZERO) == 0){
														
														if(getControladorOrdemServico().verificaSituacaoOS(idOS).shortValue() 
																!= new Integer(OrdemServicoSituacao.ENCERRADO).shortValue()){
															
															this.getControladorOrdemServico()		
															.encerrarOSSemExecucao(idOS,new Date(),usuarioBatch,
															AtendimentoMotivoEncerramento.DEBITO_PARTE_QUITADO_PARTE_PARCELADO.toString(),
															new Date(), null, null, null, null,null,null, null);
														}
														motivoEncerramento = Util.adicionarZerosEsquedaNumero(4,"DEBITO PARTE QUITADO PARTE PARCELADO");													
														indicadorPagamento = "T";
														
														break;
													}
												}
											}
										}
										
										
										//6. DEBITO PARTE PARCELADO, PARTE CANCELADO
										else if(qtdContasParceladasGuia != null 
												&& qtdContasParceladasGuia > 0
												&& qtdContasCanceladas != null
												&& qtdContasCanceladas > 0){
											indicadorPagamento = "P";
											idsParcelamentosGuia = this.repositorioCobranca.possuiEntrParcelamento(contasParceladasGuia);
											for(Integer idParc : idsParcelamentosGuia){
												idGpag = this.repositorioCobranca.entradaParcelamentoPaga(idParc, dataExecucaoComando, dataEncerramentoComando);
												if(idGpag !=null && idGpag.compareTo(0) > 0 ){
													
													if(getControladorOrdemServico().verificaSituacaoOS(idOS).shortValue() 
															!= new Integer(OrdemServicoSituacao.ENCERRADO).shortValue()){
													
														this.getControladorOrdemServico()		
														.encerrarOSSemExecucao(idOS,new Date(),usuarioBatch,
														AtendimentoMotivoEncerramento.DEBITO_PARTE_PARCELADO_PARTE_CANCELADO.toString(),
														new Date(), null, null, null, null,null,null, null);
													}
													motivoEncerramento = Util.adicionarZerosEsquedaNumero(4,"DEBITO PARTE PARCELADO PARTE CANCELADO");
													indicadorPagamento = "T";
													
													break;
												}
												else{
													parc = this.repositorioCobranca.pesquisarParcelamento(idParc);
													if(parc.getValorEntrada() == null || 
													   parc.getValorEntrada().compareTo(BigDecimal.ZERO) == 0){
														
														if(getControladorOrdemServico().verificaSituacaoOS(idOS).shortValue() 
																!= new Integer(OrdemServicoSituacao.ENCERRADO).shortValue()){
															
															this.getControladorOrdemServico()		
															.encerrarOSSemExecucao(idOS,new Date(),usuarioBatch,
															AtendimentoMotivoEncerramento.DEBITO_PARTE_PARCELADO_PARTE_CANCELADO.toString(),
															new Date(), null, null, null, null,null,null, null);
														}
														motivoEncerramento = Util.adicionarZerosEsquedaNumero(4,"DEBITO PARTE PARCELADO PARTE CANCELADO");													
														indicadorPagamento = "T";
														
														break;
													}
												}
											}
										}
										
										//5. DEBITO PARTE QUITADO, PARTE CANCELADO
										else if(qtdContasQuitadas != null 
												&& qtdContasQuitadas > 0
												&& qtdContasCanceladas != null
												&& qtdContasCanceladas > 0){
											
											if(getControladorOrdemServico().verificaSituacaoOS(idOS).shortValue() 
													!= new Integer(OrdemServicoSituacao.ENCERRADO).shortValue()){
												
												this.getControladorOrdemServico()		
												.encerrarOSSemExecucao(idOS,new Date(),usuarioBatch,
												AtendimentoMotivoEncerramento.DEBITO_PARTE_QUITADO_PARTE_CANCELADO.toString(),new Date(), 
												null, null, null, null,null,null, null);
											}
											motivoEncerramento = "DEBITO PARTE QUITADO PARTE CANCELADO";		
											indicadorPagamento = "T";
										}
										
										
										//1. DEBITO QUITADO
										else if(qtdContasQuitadas != null 
												&& qtdContasQuitadas > 0){
											
											if(getControladorOrdemServico().verificaSituacaoOS(idOS).shortValue() 
													!= new Integer(OrdemServicoSituacao.ENCERRADO).shortValue()){
												
												this.getControladorOrdemServico()		
												.encerrarOSSemExecucao(idOS,new Date(),usuarioBatch,
												AtendimentoMotivoEncerramento.DEBITO_QUITADO.toString(),new Date(), 
												null, null, null, null,null,null, null);
											}
											motivoEncerramento = "DEBITO QUITADO";		
											indicadorPagamento = "T";
										}
										
										//3. DEBITO CANCELADO
										else if(qtdContasCanceladas != null 
												&& qtdContasCanceladas > 0){
											
											if(getControladorOrdemServico().verificaSituacaoOS(idOS).shortValue() 
													!= new Integer(OrdemServicoSituacao.ENCERRADO).shortValue()){
												
												this.getControladorOrdemServico()		
												.encerrarOSSemExecucao(idOS,new Date(),usuarioBatch,
												AtendimentoMotivoEncerramento.DEBITO_CANCELADO.toString(),new Date(), 
												null, null, null, null,null,null, null);
											}
											motivoEncerramento = "DEBITO CANCELADO";		
											indicadorPagamento = "T";
										}
										
										
										//2. DEBITO PARCELADO
										else if (qtdContasParceladasGuia != null 
												&& qtdContasParceladasGuia > 0){
											indicadorPagamento = "P";
											idsParcelamentosGuia = this.repositorioCobranca.possuiEntrParcelamento(contasParceladasGuia);
											for(Integer idParc : idsParcelamentosGuia){
												idGpag = this.repositorioCobranca.entradaParcelamentoPaga(idParc, dataExecucaoComando, dataEncerramentoComando);
												if(idGpag !=null && idGpag.compareTo(0) > 0 ){
													
													if(getControladorOrdemServico().verificaSituacaoOS(idOS).shortValue() 
															!= new Integer(OrdemServicoSituacao.ENCERRADO).shortValue()){
														
														this.getControladorOrdemServico()		
														.encerrarOSSemExecucao(idOS,new Date(),usuarioBatch,
														AtendimentoMotivoEncerramento.DEBITO_PARCELADO.toString(),new Date(), 
														null, null, null, null,null,null, null);
													}
													motivoEncerramento = "DEBITO PARCELADO";
													indicadorPagamento = "T";
													
													break;
												}
												else{
													parc = this.repositorioCobranca.pesquisarParcelamento(idParc);
													if(parc.getValorEntrada() == null || 
													   parc.getValorEntrada().compareTo(BigDecimal.ZERO) == 0){
														
														if(getControladorOrdemServico().verificaSituacaoOS(idOS).shortValue() 
																!= new Integer(OrdemServicoSituacao.ENCERRADO).shortValue()){
														
															this.getControladorOrdemServico()		
															.encerrarOSSemExecucao(idOS,new Date(),usuarioBatch,
															AtendimentoMotivoEncerramento.DEBITO_PARCELADO.toString(),new Date(), 
															null, null, null, null,null,null, null);
														}															
														motivoEncerramento = "DEBITO PARCELADO";
														indicadorPagamento = "T";
														
														break;
													}
												}
											}
										}
									}

									if(contasQuitadas !=null && !contasQuitadas.isEmpty()){
										for(Object[] contaQuitada : contasQuitadas){
											idConta = (Integer) contaQuitada[0];											
											if(!this.repositorioCobranca.contaEnviadaArquivoTexto(idConta, idComando)){												
												pg = this.repositorioarrecadacao.pesquisarPagamentoConta(idConta, dataExecucaoComando, dataEncerramentoComando, false);
												
												if (pg != null) {
													cont++;
													os.setId(idOS);
													comando.setId(idComando);
													cnta.setId(idConta);
													imovel.setId(idImovel);
													faixaAtrasoDebito = this.repositorioCobranca.obterFaixaAtrasoDebito(idImovel,idComando);
													
													HistoricoPagamentoCobrancaResultado hpcr = new HistoricoPagamentoCobrancaResultado();
													hpcr.setComando(comando);
													hpcr.setConta(cnta);												
													hpcr.setDataPagamento(pg.getDataPagamento());
													hpcr.setImovel(imovel);
													hpcr.setIndicadorEnviado(new Short("2"));
													hpcr.setNumeroParcela(null);
													hpcr.setOrdemServico(os);
													hpcr.setUltimaAlteracao(new Date());
													hpcr.setValorPago(pg.getValorPagamento());
													hpcr.setDebitoACobrar(null);
													hpcr.setGuia(null);
													hpcr.setFaixaAtrasoDebito(faixaAtrasoDebito);
													
													idOrdem = Util.adicionarZerosEsquedaNumero(10, idOS+"");
													idComandoOS = Util.adicionarZerosEsquedaNumero(10, idComando+"");												
													idImovelOS = Util.adicionarZerosEsquedaNumero(10, idImovel+"");
													mesAno = Util.formatarAnoMesParaMesAno(contaQuitada[1].toString());
													valorPago = Util.adicionarZerosEsquedaNumero(10, Util
															.formataBigDecimal(pg.getValorPagamento(),2,false));
													quantidadeParcelas = Util.adicionarZerosEsquedaNumero(3, "0");
													descPag = "PAGAMENTO CONTA";
													if(pg.getDataPagamento() !=null)
														dataPagamento = format.format(pg.getDataPagamento());
													if(dataPagamento == null || dataPagamento.trim().equals(""))
														dataPagamento = Util.adicionarZerosEsquedaNumero(8,"");													
													if(valorPago == null || valorPago.trim().equals(""))
														valorPago = Util.adicionarZerosEsquedaNumero(10,"0");
													else
														valorPago = valorPago.replaceAll(",", "");
													
													
													//[SB0001] ? Gerar Arquivo.
													arquivo.append(
															idOrdem+"#"+
															idComandoOS+"#"+
															idImovelOS+"#"+
															motivoEncerramento+"#"+
															descPag+"#"+
															mesAno+"#"+
															valorPago+"#"+
															dataPagamento+"#"+
															quantidadeParcelas+"#"+														
															indicadorPagamento+"#"+
															faixaAtrasoDebito);
													arquivo.append(System.getProperty("line.separator"));
													
													idHpcr = (Integer) this.repositorioUtil.inserir(hpcr);
													idsHpcrAtualizar.add(idHpcr);
													arquivoComDados = true;
													//Envia o arquivo a cada 10.000 linhas
													if (arquivo != null && !arquivo.toString().trim().equals("") && cont%10000 == 0) {													
	
														nomeArquivo = "contas_retiradas_" + idEmpresa + "_" + data + "_parte"+contPart+".txt";
														this.enviarArquivoTxtContasPagasParceladas(nomeArquivo, arquivo, idsHpcrAtualizar, emailEmpresa);
														contPart++;
														cont = 0;
														idsHpcrAtualizar.clear();
														arquivo = new StringBuilder("");
													}
												}
											}
										}
									}
									
									
									if(contasCanceladas !=null && !contasCanceladas.isEmpty()){
										for(Object[] contaCancelada : contasCanceladas){
											idConta = (Integer) contaCancelada[0];											
											if(!this.repositorioCobranca.contaEnviadaArquivoTexto(idConta, idComando)){												
												cont++;
												os.setId(idOS);
												comando.setId(idComando);
												cnta.setId(idConta);
												imovel.setId(idImovel);
												faixaAtrasoDebito = this.repositorioCobranca.obterFaixaAtrasoDebito(idImovel,idComando);
												
												HistoricoPagamentoCobrancaResultado hpcr = new HistoricoPagamentoCobrancaResultado();
												hpcr.setComando(comando);
												hpcr.setConta(cnta);												
												hpcr.setDataPagamento(null);
												hpcr.setImovel(imovel);
												hpcr.setIndicadorEnviado(new Short("2"));
												hpcr.setNumeroParcela(null);
												hpcr.setOrdemServico(os);
												hpcr.setUltimaAlteracao(new Date());
												hpcr.setValorPago(null);
												hpcr.setDebitoACobrar(null);
												hpcr.setGuia(null);
												hpcr.setFaixaAtrasoDebito(faixaAtrasoDebito);
												
												idOrdem = Util.adicionarZerosEsquedaNumero(10, idOS+"");
												idComandoOS = Util.adicionarZerosEsquedaNumero(10, idComando+"");												
												idImovelOS = Util.adicionarZerosEsquedaNumero(10, idImovel+"");
												mesAno = Util.formatarAnoMesParaMesAno(contaCancelada[1].toString());
												quantidadeParcelas = Util.adicionarZerosEsquedaNumero(3, "0");
												descPag = "CONTA CANCELADA";
												
												dataPagamento = Util.adicionarZerosEsquedaNumero(8,"");													
												valorPago = Util.adicionarZerosEsquedaNumero(10,"");
												
												
												
												//[SB0001] ? Gerar Arquivo.
												arquivo.append(
														idOrdem+"#"+
														idComandoOS+"#"+
														idImovelOS+"#"+
														motivoEncerramento+"#"+
														descPag+"#"+
														mesAno+"#"+
														valorPago+"#"+
														dataPagamento+"#"+
														quantidadeParcelas+"#"+														
														indicadorPagamento+"#"+
														faixaAtrasoDebito);
												arquivo.append(System.getProperty("line.separator"));
												
												idHpcr = (Integer) this.repositorioUtil.inserir(hpcr);
												idsHpcrAtualizar.add(idHpcr);
												arquivoComDados = true;
												//Envia o arquivo a cada 10.000 linhas
												if (arquivo != null && !arquivo.toString().trim().equals("") && cont%10000 == 0) {													

													nomeArquivo = "contas_retiradas_" + idEmpresa + "_" + data + "_parte"+contPart+".txt";
													this.enviarArquivoTxtContasPagasParceladas(nomeArquivo, arquivo, idsHpcrAtualizar, emailEmpresa);
													contPart++;
													cont = 0;
													idsHpcrAtualizar.clear();
													arquivo = new StringBuilder("");
												}
												
											}
										}
									}
									
									
																		
								}								
							}							
						}
					}
					
					//3. O sistema deverá verificar todos os comandos de cobrança por resultados executados 
					dadosComandos = this.repositorioCobranca.pesquisarComandosCobrancaExecutados(idEmpresa);
					
					if (dadosComandos != null && !dadosComandos.isEmpty()) {				
						
						Iterator iteratorComando = dadosComandos.iterator();		
						
						while(iteratorComando.hasNext()) {			
							Object[] dadosComando = (Object[]) iteratorComando.next();
							idComando = (Integer) dadosComando[0];
							dataExecucaoComando = (Date) dadosComando[1];
							dataEncerramentoComando = (Date) dadosComando[2];

							// 3.1.Para cada comando selecionado, o sistema deverá selecionar os imóveis das ordens de serviço associadas ao mesmo							
							dadosOrdensServico = this.repositorioCobranca.pesquisarOrdensServicoComando(idComando);
							
							
							if (dadosOrdensServico != null && !dadosOrdensServico.isEmpty()) {
								Iterator iteratorOS = dadosOrdensServico.iterator();
								while(iteratorOS.hasNext()) {
									Object[] dadosOS = (Object[]) iteratorOS.next();	
									idOS = (Integer) dadosOS[0];	
									idImovel = (Integer) dadosOS[1];
									motivoEncerramento = "";
									indicadorPagamento = "T";
									Collection<Integer> colecaoParcelamento = this.repositorioCobranca.pesquisaParcelamentoEfetuadoDuranteVigenciaContrato(idOS);
									
									// 3.1.1.	Para cada imóvel selecionado, o sistema deverá verificar existe parcelamento efetuado
									//  durante a vigência do contrato de cobrança 	que esteja na situação "Normal" 
									if (!Util.isVazioOrNulo(colecaoParcelamento)) {
										
										Iterator iColecaoParcelamento = colecaoParcelamento.iterator();
										
										while (iColecaoParcelamento.hasNext()) {
											
											Integer idParcelamento = (Integer) iColecaoParcelamento.next();
											
										// 3.1.1.1. Para cada parcelamento selecionado o sistema deverá verificar se o parcelamento foi gerado com entrada
										idGpag = this.repositorioCobranca.entradaParcelamentoPaga(idParcelamento, dataExecucaoComando, dataEncerramentoComando);
										if(idGpag !=null && idGpag.compareTo(0) > 0 
											&& !this.repositorioCobranca.guiaEnviadaArquivoTexto(idGpag)){
											
											pg = this.repositorioarrecadacao.pesquisarPagamentoGuia(idGpag, dataExecucaoComando);

											if (pg != null) {
												cont++;
												os.setId(idOS);
												comando.setId(idComando);												
												imovel.setId(idImovel);
												guia.setId(idGpag);
												faixaAtrasoDebito = this.repositorioCobranca.obterFaixaAtrasoDebito(idImovel,idComando);
												
												HistoricoPagamentoCobrancaResultado hpcr = new HistoricoPagamentoCobrancaResultado();
												hpcr.setComando(comando);
												hpcr.setConta(null);
												hpcr.setDataEnviado(null);
												hpcr.setDataPagamento(pg.getDataPagamento());
												hpcr.setImovel(imovel);
												hpcr.setIndicadorEnviado(new Short("2"));
												hpcr.setNumeroParcela(null);
												hpcr.setOrdemServico(os);
												hpcr.setUltimaAlteracao(new Date());
												hpcr.setValorPago(pg.getValorPagamento());
												hpcr.setDebitoACobrar(null);
												hpcr.setGuia(guia);
												hpcr.setFaixaAtrasoDebito(faixaAtrasoDebito);
												
												idOrdem = Util.adicionarZerosEsquedaNumero(10, idOS+"");
												idComandoOS = Util.adicionarZerosEsquedaNumero(10, idComando+"");												
												idImovelOS = Util.adicionarZerosEsquedaNumero(10, idImovel+"");
												mesAno = "";
												valorPago = Util.adicionarZerosEsquedaNumero(10, Util
														.formataBigDecimal(pg.getValorPagamento(),2,false));
												quantidadeParcelas = Util.adicionarZerosEsquedaNumero(3, "0");
												descPag = "PAGAMENTO ENTRADA";
												if(pg.getDataPagamento() !=null)
													dataPagamento = format.format(pg.getDataPagamento());
												if(dataPagamento == null || dataPagamento.trim().equals(""))
													dataPagamento = Util.adicionarZerosEsquedaNumero(8,"");													
												if(valorPago == null || valorPago.trim().equals(""))
													valorPago = Util.adicionarZerosEsquedaNumero(10,"0");																						
												else
													valorPago = valorPago.replaceAll(",", "");
												
												//[SB0001] ? Gerar Arquivo.
												arquivo.append(
														idOrdem+"#"+
														idComandoOS+"#"+
														idImovelOS+"#"+
														motivoEncerramento+"#"+
														descPag+"#"+
														mesAno+"#"+
														valorPago+"#"+
														dataPagamento+"#"+
														quantidadeParcelas+"#"+														
														indicadorPagamento+"#"+
														faixaAtrasoDebito);
												arquivo.append(System.getProperty("line.separator"));
												
												idHpcr = (Integer) this.repositorioUtil.inserir(hpcr);
												idsHpcrAtualizar.add(idHpcr);
												arquivoComDados = true;
												//Envia o arquivo a cada 10.000 linhas
												if (arquivo != null && !arquivo.toString().trim().equals("") && cont%10000 == 0) {													
	
													nomeArquivo = "contas_retiradas_" + idEmpresa + "_" + data + "_parte"+contPart+".txt";
													this.enviarArquivoTxtContasPagasParceladas(nomeArquivo, arquivo, idsHpcrAtualizar, emailEmpresa);
													contPart++;
													cont = 0;
													idsHpcrAtualizar.clear();
													arquivo = new StringBuilder("");
												}
											}
											
										}
										
										// 3.1.1.2. Para cada parcelamento selecionado o sistema deverá verificar se a alguma parcela 
										//  foi paga e não enviada em arquivo texto 
										contasParceladas = this.repositorioCobranca.verificarContasParceladasAssociadasImovel(idImovel, idParcelamento);
										if(contasParceladas !=null && !contasParceladas.isEmpty()){
											for(Object[] contaParcelada : contasParceladas){
												idConta = (Integer) contaParcelada[0];
												
												if(!this.repositorioCobranca.debitoEnviadaArquivoTexto((Integer)contaParcelada[3],
																											(Integer)contaParcelada[2], idConta)){												
													pg = this.repositorioarrecadacao.pesquisarPagamentoConta(idConta, dataExecucaoComando, dataEncerramentoComando, true);

													if (pg != null) {
														cont++;
														os.setId(idOS);																									
														comando.setId(idComando);
														cnta.setId(idConta);
														imovel.setId(idImovel);
														debito.setId((Integer)contaParcelada[3]);
														faixaAtrasoDebito = this.repositorioCobranca.obterFaixaAtrasoDebito(idImovel,idComando);
														
														HistoricoPagamentoCobrancaResultado hpcr = new HistoricoPagamentoCobrancaResultado();
														hpcr.setComando(comando);
														hpcr.setConta(cnta);
														hpcr.setDataEnviado(null);
														hpcr.setDataPagamento(pg.getDataPagamento());
														hpcr.setImovel(imovel);
														hpcr.setIndicadorEnviado(new Short("2"));
														hpcr.setNumeroParcela((Integer)contaParcelada[2]);
														hpcr.setOrdemServico(os);
														hpcr.setUltimaAlteracao(new Date());
														hpcr.setValorPago((BigDecimal) contaParcelada[1]);
														hpcr.setDebitoACobrar(debito);
														hpcr.setGuia(null);
														hpcr.setFaixaAtrasoDebito(faixaAtrasoDebito);
														
														idOrdem = Util.adicionarZerosEsquedaNumero(10, idOS+"");
														idComandoOS = Util.adicionarZerosEsquedaNumero(10, idComando+"");												
														idImovelOS = Util.adicionarZerosEsquedaNumero(10, idImovel+"");
														mesAno = "";
														valorPago = Util.adicionarZerosEsquedaNumero(10, Util
																.formataBigDecimal((BigDecimal) contaParcelada[1],2,false));
														quantidadeParcelas = Util.adicionarZerosEsquedaNumero(3, contaParcelada[2].toString());
														descPag = "PAGAMENTO PARCELA";
														if(pg.getDataPagamento() !=null)
															dataPagamento = format.format(pg.getDataPagamento());
														if(dataPagamento == null || dataPagamento.trim().equals(""))
															dataPagamento = Util.adicionarZerosEsquedaNumero(8,"");													
														if(valorPago == null || valorPago.trim().equals(""))
															valorPago = Util.adicionarZerosEsquedaNumero(10,"0");																						
														else
															valorPago = valorPago.replaceAll(",", "");
														
														//[SB0001] ? Gerar Arquivo.
														arquivo.append(
																idOrdem+"#"+
																idComandoOS+"#"+
																idImovelOS+"#"+
																motivoEncerramento+"#"+
																descPag+"#"+
																mesAno+"#"+
																valorPago+"#"+
																dataPagamento+"#"+
																quantidadeParcelas+"#"+														
																indicadorPagamento+"#"+
																faixaAtrasoDebito);
														arquivo.append(System.getProperty("line.separator"));
		
														idHpcr = (Integer) this.repositorioUtil.inserir(hpcr);
														idsHpcrAtualizar.add(idHpcr);
														arquivoComDados = true;
														//Envia o arquivo a cada 10.000 linhas
														if (arquivo != null && !arquivo.toString().trim().equals("") && cont%10000 == 0) {	
															
															nomeArquivo = "contas_retiradas_" + idEmpresa + "_" + data + "_parte"+contPart+".txt";
															this.enviarArquivoTxtContasPagasParceladas(nomeArquivo, arquivo, idsHpcrAtualizar, emailEmpresa);
															contPart++;
															cont = 0;
															idsHpcrAtualizar.clear();
															arquivo = new StringBuilder("");
														}
													}
												}
											}
										}
										
										// 3.1.1.3. Para cada parcelamento selecionado	o sistema deverá verificar 
										//  se o débito a cobrar do parcelamento foi pago e não enviado em arquivo texto
										Collection<Object[]> colecaoDadosPagamentoDebitoACobrar = 
												this.repositorioarrecadacao.pesquisarPagamentoDebitoACobrar(idParcelamento, dataExecucaoComando);
										
										if (!Util.isVazioOrNulo(colecaoDadosPagamentoDebitoACobrar)) {
											
											Iterator iColecaoDadosPagamentoDebitoACobrar = colecaoDadosPagamentoDebitoACobrar.iterator();
											
											while (iColecaoDadosPagamentoDebitoACobrar.hasNext()) {
												
											Object[] dadosPagamentoDebitoACobrar = (Object[]) iColecaoDadosPagamentoDebitoACobrar.next();
												
											if (!this.repositorioCobranca.debitoACobrarEnviadoArquivoTexto(
												(Integer)dadosPagamentoDebitoACobrar[0])) {
											
											cont++;
											os.setId(idOS);																									
											comando.setId(idComando);
											imovel.setId(idImovel);
											
											if (dadosPagamentoDebitoACobrar[0] != null) {
												debito.setId((Integer) dadosPagamentoDebitoACobrar[0]);
											}

											if (dadosPagamentoDebitoACobrar[1] != null) {
												valorPago = Util.adicionarZerosEsquedaNumero(10, Util
													.formataBigDecimal((BigDecimal) dadosPagamentoDebitoACobrar[1],2,false));
												valorPago = valorPago.replaceAll(",", "");
											} else {
												valorPago = Util.adicionarZerosEsquedaNumero(10,"0");		
											}

											if (dadosPagamentoDebitoACobrar[2] != null) {
												dataPagamento = Util.formatarData((Date) dadosPagamentoDebitoACobrar[2]);
											} else {
												dataPagamento = Util.adicionarZerosEsquedaNumero(8,"");
											}
											
											faixaAtrasoDebito = this.repositorioCobranca.obterFaixaAtrasoDebito(idImovel,idComando);
											
											// [SB0003] Atualizar Tabela Histórico de Envio 
											HistoricoPagamentoCobrancaResultado hpcr = new HistoricoPagamentoCobrancaResultado();
											hpcr.setComando(comando);
											hpcr.setConta(null);
											hpcr.setDataEnviado(null);
											hpcr.setDataPagamento((Date) dadosPagamentoDebitoACobrar[2]);
											hpcr.setImovel(imovel);
											hpcr.setIndicadorEnviado(new Short("2"));
											hpcr.setNumeroParcela(null);
											hpcr.setOrdemServico(os);
											hpcr.setUltimaAlteracao(new Date());
											hpcr.setValorPago((BigDecimal) dadosPagamentoDebitoACobrar[1]);
											hpcr.setDebitoACobrar(debito);
											hpcr.setGuia(null);
											hpcr.setFaixaAtrasoDebito(faixaAtrasoDebito);
											
											idHpcr = (Integer) this.repositorioUtil.inserir(hpcr);
											idsHpcrAtualizar.add(idHpcr);
											
											idOrdem = Util.adicionarZerosEsquedaNumero(10, idOS+"");
											idComandoOS = Util.adicionarZerosEsquedaNumero(10, idComando+"");												
											idImovelOS = Util.adicionarZerosEsquedaNumero(10, idImovel+"");
											mesAno = "";
											quantidadeParcelas = "000";
											descPag = "PAGAMENTO DEBITO A COBRAR";
											
											//[SB0001] - Gerar Arquivo.
											arquivo.append(
													idOrdem+"#"+
													idComandoOS+"#"+
													idImovelOS+"#"+
													motivoEncerramento+"#"+
													descPag+"#"+
													mesAno+"#"+
													valorPago+"#"+
													dataPagamento+"#"+
													quantidadeParcelas+"#"+														
													indicadorPagamento+"#"+
													faixaAtrasoDebito);
											arquivo.append(System.getProperty("line.separator"));

											arquivoComDados = true;
											
											//Envia o arquivo a cada 10.000 linhas
											if (arquivo != null && !arquivo.toString().trim().equals("") && cont%10000 == 0) {	
												
												nomeArquivo = "contas_retiradas_" + idEmpresa + "_" + data + "_parte"+contPart+".txt";
												this.enviarArquivoTxtContasPagasParceladas(nomeArquivo, arquivo, idsHpcrAtualizar, emailEmpresa);
												contPart++;
												cont = 0;
												idsHpcrAtualizar.clear();
												arquivo = new StringBuilder("");
												
											}
											}
										  }
										}
										
									}
								  }
								}
							}
						}
					}
					
					// se existirem dados no arquivo a ser gerado					
					if (arquivoComDados
							&& arquivo != null 
							&& !arquivo.toString().trim().equals("")){

						nomeArquivo = "contas_retiradas_" + idEmpresa + "_" + data + "_parte"+contPart+".txt";
						this.enviarArquivoTxtContasPagasParceladas(nomeArquivo, arquivo, idsHpcrAtualizar, emailEmpresa);
						contPart++;
						cont = 0;
						idsHpcrAtualizar.clear();
						arquivo = new StringBuilder("");
						
					} else {	
						EnvioEmail envioEmail = getControladorCadastro().pesquisarEnvioEmail(
								EnvioEmail.GERAR_TXT_OS_CONTAS_PAGAS_PARCELADAS_SEM_DADOS);		
					
						String emailRemetente = envioEmail.getEmailRemetente();					
						 String emailDestinatario = emailEmpresa + ", " + envioEmail.getEmailReceptor();	
						String tituloMensagem = envioEmail.getTituloMensagem();					
						String mensagem = envioEmail.getCorpoMensagem();
					
						try {
							ServicosEmail.enviarMensagem(emailRemetente, emailDestinatario, tituloMensagem, 
								mensagem);
						} catch (Exception e) {
							System.out.println("Erro no envio do email! Não existia dados para criação do arquivo..");
							e.printStackTrace();
							getControladorBatch().encerrarUnidadeProcessamentoBatch(e,                    
								idUnidadeIniciada, true);
							erroEmail = true;
						}
											
					}
					
				}			
			}
			
			if (!erroEmail){
				getControladorBatch().encerrarUnidadeProcessamentoBatch(null,                    
					idUnidadeIniciada, false); 
			}
			
			
		} catch (Exception e) {
			System.out.println("Erro! Verificar Arquivo criado no BIN.");
			e.printStackTrace();
			//sessionContext.setRollbackOnly();
			getControladorBatch().encerrarUnidadeProcessamentoBatch(e,                    
					idUnidadeIniciada, true);
			
			throw new EJBException(e);        
		}
	}
	
	/**
	 * 
	 * Manter Comando de Ação de Cobrança
	 * 
	 * [UC0244] Manter Comando Ação de Cobrança
	 * 
	 * Executar Comando Concluir Comando de Ação de Cobrança
	 * 
	 * @author Rafael Santos
	 * @date 24/04/2006
	 * 
	 * @param idCobrancaAcaoAtividadeComando
	 * @return
	 * @throws ControladorException
	 */
	public void executarComandoManterAcaoCobranca(String periodoInicialConta,
			String periodoFinalConta, String periodoVencimentoContaInicial,
			String periodoVencimentoContaFinal, String idCobrancaAcao,
			String idCobrancaAtividade, String idCobrancaGrupo,
			String idGerenciaRegional, String localidadeOrigemID,
			String localidadeDestinoID, String setorComercialOrigemCD,
			String setorComercialDestinoCD, String idCliente,
			String clienteRelacaoTipo, String indicador, String rotaInicial,
			String rotaFinal, String setorComercialOrigemID,
			String setorComercialDestinoID, String idComando,
			String idCobrancaAcaoAtividadeComando, Date ultimaDataAtualizacao,
			Date comando, Date realizacao, Usuario usuario, Empresa empresa,
			Integer quantidadeDocumentos, BigDecimal valorDocumentos,
			Integer quantidadeItensCobrados, String titulo,
			String descricaoSolicitacao, String prazoExecucao,
			String quantidadeMaximaDocumentos, String valorLimiteObrigatoria, String indicadorImoveisDebito,
			String indicadorGerarBoletimCadastro, String codigoClienteSuperior, 
			String codigoRotaInicial, String codigoRotaFinal,
			String consumoMedioInicial, String consumoMedioFinal, String tipoConsumo, 
			String periodoInicialFiscalizacao, String periodoFinalFiscalizacao, 
			String[] situacaoFiscalizacao,String numeroQuadraInicial,String numeroQuadraFinal,
			String quantidadeDiasVencimento, 
			String imoveisSitLigacaoNaoAlteradaDeb, 
			String nomeArquivo, 
			Collection<Integer> colecaoIdsImovel, 
			String[] idsLocalidade,
			String[] idsSetorComercial,
			String idLocalidade) throws ControladorException {

		// [FS0012] - Verificar referência final menor que referência inicial
		this.validarAnoMesInicialFinalComandoAcaoCobranca(periodoInicialConta,
				periodoFinalConta);

		// [FS0014] - Verificar data final menos que data inicial
		this.verificarVencimentoContaComandoAcaoCobranca(
				periodoVencimentoContaInicial, periodoVencimentoContaFinal);
		
		// [FS0014] - Verificar data final menos que data inicial
		this.verificarPeriodoFiscalizacaoComandoAcaoCobranca(
				periodoInicialFiscalizacao, periodoFinalFiscalizacao);

		// atualizar comando de ação de cobança
		// [SB0006]
		CobrancaAcaoAtividadeComando cobrancaAcaoAtividadeComando = this
				.atualizarComandoAcaoCobrancaEventual(idCobrancaAcao,
						idCobrancaAtividade, idCobrancaGrupo,
						idGerenciaRegional, localidadeOrigemID,
						localidadeDestinoID, setorComercialOrigemCD,
						setorComercialDestinoCD, setorComercialOrigemID,
						setorComercialDestinoID, idCliente, clienteRelacaoTipo,
						periodoInicialConta, periodoFinalConta,
						periodoVencimentoContaInicial,
						periodoVencimentoContaFinal, indicador, rotaInicial,
						rotaFinal, idCobrancaAcaoAtividadeComando,
						ultimaDataAtualizacao, comando, realizacao, usuario,
						empresa, quantidadeDocumentos, valorDocumentos,
						quantidadeItensCobrados, idComando, null, titulo,
						descricaoSolicitacao, prazoExecucao,
						quantidadeMaximaDocumentos, valorLimiteObrigatoria, indicadorImoveisDebito,
						indicadorGerarBoletimCadastro, codigoClienteSuperior,
						codigoRotaInicial, codigoRotaFinal,
						consumoMedioInicial, consumoMedioFinal, tipoConsumo,
						periodoInicialFiscalizacao,periodoFinalFiscalizacao,
						situacaoFiscalizacao,numeroQuadraInicial,numeroQuadraFinal,
						quantidadeDiasVencimento, 
						imoveisSitLigacaoNaoAlteradaDeb,
						nomeArquivo, colecaoIdsImovel, idsLocalidade, idsSetorComercial, idLocalidade);

		// [SF0008] - Selecionar Lista de Rotas do Comando
		Collection colecaoRotas = this.obterListaRotasComando(idCobrancaGrupo,
				cobrancaAcaoAtividadeComando.getId().toString());

		// pesquisar cobranca atividade
		CobrancaAtividade cobrancaAtividade = this
				.consultarCobrancaAtividade(idCobrancaAtividade);

		// pesquisar cobranca acao
		CobrancaAcao cobrancaAcao = this.consultarCobrancaAcao(idCobrancaAcao);

		// [SF0009] - Executar Comando Eventual
		GerarAtividadeAcaoCobrancaHelper gerarAtividadeAcaoCobrancaHelper = this
				.executarComandoEventual(cobrancaAtividade,
						cobrancaAcaoAtividadeComando, cobrancaAcao,
						colecaoRotas);

		// atualizar os dados de cobranca acao atividade comando
		this.atualizarCobrancaAcaoAtividadeComando(
				cobrancaAcaoAtividadeComando, gerarAtividadeAcaoCobrancaHelper);
		
		this.atualizarCobrancaAcaoAtividadeComandoFiscalizacaoSituacao(
				cobrancaAcaoAtividadeComando,situacaoFiscalizacao);

	}

	private void atualizarCobrancaAcaoAtividadeComandoFiscalizacaoSituacao(
			CobrancaAcaoAtividadeComando cobrancaAcaoAtividadeComando,
			String[] situacaoFiscalizacao) throws ControladorException {
		
		// Para cada Situação da Fiscalização selecionada, inclui a situação da fiscalização
		// na tabela COB_ACAO_ATV_CMD_FIS_SIT.
		if(situacaoFiscalizacao!=null){		
			Date dataAtual = new Date();
			for (int i = 0; i < situacaoFiscalizacao.length; i++) {		
				
				if(!situacaoFiscalizacao[i].equals("-1")){
					FiscalizacaoSituacao fiscSituacao = new FiscalizacaoSituacao();
					fiscSituacao.setId(new Integer(situacaoFiscalizacao[i]));			
							
					CobrancaAcaoAtividadeComandoFiscalizacaoSituacao cobAcaoAtividadeFiscSit
							= new CobrancaAcaoAtividadeComandoFiscalizacaoSituacao(
									cobrancaAcaoAtividadeComando,
									fiscSituacao,
									dataAtual);
							
					this.getControladorUtil().inserir(cobAcaoAtividadeFiscSit);
				}
			}
		}
		// Fim insert de CobrancaAcaoAtividadeComandoFiscalizacaoSituacao.
	}

	/**
	 * 
	 * Manter um comando de atividade de cobrança eventual
	 * 
	 * [UC0244] - Inserir Comando Ação de Cobrança
	 * 
	 * Manter cobranca acao atividade comando
	 * 
	 * [SB0006] - Atualizar Comando Eventual
	 * 
	 * @author Rafael Santos
	 * @throws ControladorException
	 * @date 24/04/2006
	 */
	public CobrancaAcaoAtividadeComando atualizarComandoAcaoCobrancaEventual(
			String idCobrancaAcao, String idCobrancaAtividade,
			String idCobrancaGrupo, String idGerenciaRegional,
			String idLocalidadeInicial, String idLocalidadeFinal,
			String codigoSetorComercialInicial,
			String codigoSetorComercialFinal, String idSetorComercialInicial,
			String idSetorComercialFinal, String idCliente,
			String idClienteRelacaoTipo, String anoMesReferencialInicial,
			String anoMesReferencialFinal, String dataVencimentoContaInicial,
			String dataVencimentoContaFinal, String indicador,
			String idRotaInicial, String idRotaFinal,
			String idCobrancaAcaoAtividadeComando, Date ultimaDataAtualizacao,
			Date comando, Date realizacao, Usuario usuario, Empresa empresa,
			Integer quantidadeDocumentos, BigDecimal valorDocumentos,
			Integer quantidadeItensCobrados, String idComando,
			String unidadeNegocio, String titulo, String descricaoSolicitacao,
			String prazoExecucao, String quantidadeMaximaDocumentos,
			String valorLimiteObrigatoria,String indicadorImoveisDebito,
			String indicadorGerarBoletimCadastro, String codigoClienteSuperior,
			String codigoRotaInicial, String codigoRotaFinal,
			String consumoMedioInicial, String consumoMedioFinal, String tipoConsumo, 
			String periodoInicialFiscalizacao, String periodoFinalFiscalizacao, 
			String[] situacaoFiscalizacao,String numeroQuadraInicial,String numeroQuadraFinal,
			String quantidadeDiasVencimento, 
			String imoveisSitLigacaoNaoAlteradaDeb, 
			String nomeArquivo, 
			Collection<Integer> colecaoIdsImovel,
			String[] idsLocalidade,
			String[] idsSetorComercial,
			String idLocalidade) throws ControladorException {

		// executar comando
		CobrancaAcaoAtividadeComando cobrancaAcaoAtividadeComando = null;

		// ------------ REGISTRAR TRANSAÇÃO ----------------
		// RegistradorOperacao registradorOperacao = null;
		// Operacao operacao = new Operacao();
		// OperacaoEfetuada operacaoEfetuada = new OperacaoEfetuada();
		// ------------ REGISTRAR TRANSAÇÃO ----------------

		// em caso de já existir a data de realização, então atualiza só o prazo
		// de execução
		if (realizacao != null) {
			FiltroCobrancaAcaoAtividadeComando filtroCobrancaAcaoAtividadeComando = new FiltroCobrancaAcaoAtividadeComando();
			filtroCobrancaAcaoAtividadeComando
					.adicionarParametro(new ParametroSimples(
							FiltroCobrancaAcaoAtividadeComando.ID,
							idCobrancaAcaoAtividadeComando));
			Collection colecaoCobrancaAcaoAtividadeComando = getControladorUtil()
					.pesquisar(filtroCobrancaAcaoAtividadeComando,
							CobrancaAcaoAtividadeComando.class.getName());

			if (colecaoCobrancaAcaoAtividadeComando == null
					|| colecaoCobrancaAcaoAtividadeComando.isEmpty()) {
				sessionContext.setRollbackOnly();
				throw new ControladorException("atencao.atualizacao.timestamp");
			}

			CobrancaAcaoAtividadeComando cobrancaAcaoAtividadeComandoBase = (CobrancaAcaoAtividadeComando) Util
					.retonarObjetoDeColecao(colecaoCobrancaAcaoAtividadeComando);

			if (cobrancaAcaoAtividadeComandoBase.getUltimaAlteracao().after(
					ultimaDataAtualizacao)) {
				sessionContext.setRollbackOnly();
				throw new ControladorException("atencao.atualizacao.timestamp");
			}

			if (prazoExecucao != null && !prazoExecucao.equals("")) {
				cobrancaAcaoAtividadeComandoBase
						.setQuantidadeDiasRealizacao(new Short(prazoExecucao));
				cobrancaAcaoAtividadeComandoBase.setUltimaAlteracao(new Date());
				getControladorUtil()
						.atualizar(cobrancaAcaoAtividadeComandoBase);
			}
			cobrancaAcaoAtividadeComando = cobrancaAcaoAtividadeComandoBase;

		} else {

			boolean temArquivo = false;
			if(nomeArquivo != null && !nomeArquivo.equals("")){
				temArquivo = true;
			}	
			
			// executar comando
			cobrancaAcaoAtividadeComando = new CobrancaAcaoAtividadeComando();

			cobrancaAcaoAtividadeComando.setId(new Integer(
					idCobrancaAcaoAtividadeComando));
			cobrancaAcaoAtividadeComando
					.setUltimaAlteracao(ultimaDataAtualizacao);
			// id gerado pelo sistema
			CobrancaAcao cobrancaAcao = new CobrancaAcao();

			FiltroCobrancaAcao filtroCobrancaAcao = new FiltroCobrancaAcao();
			filtroCobrancaAcao.adicionarParametro(new ParametroSimples(
					FiltroCobrancaAcao.ID, idCobrancaAcao));
			filtroCobrancaAcao
					.adicionarCaminhoParaCarregamentoEntidade(FiltroCobrancaAcao.DOCUMENTO_TIPO);
			filtroCobrancaAcao
					.adicionarCaminhoParaCarregamentoEntidade(FiltroCobrancaAcao.SERVICO_TIPO);
			filtroCobrancaAcao
				.adicionarCaminhoParaCarregamentoEntidade(FiltroCobrancaAcao.SERVICO_TIPO_PREDECESSORA);			
			Collection colecaoCobrancaAcao = this
					.getControladorUtil()
					.pesquisar(filtroCobrancaAcao, CobrancaAcao.class.getName());
			cobrancaAcao = (CobrancaAcao) colecaoCobrancaAcao.iterator().next();

			// id da ação de cobranca selecionada
			cobrancaAcaoAtividadeComando.setCobrancaAcao(cobrancaAcao);
			// id da atividade de cobranca

			FiltroCobrancaAtividade filtroCobrancaAtividade = new FiltroCobrancaAtividade();
			filtroCobrancaAtividade.adicionarParametro(new ParametroSimples(
					FiltroCobrancaAtividade.ID, idCobrancaAtividade));
			Collection colecaoCobrancaAtividade = this.getControladorUtil()
					.pesquisar(filtroCobrancaAtividade,
							CobrancaAtividade.class.getName());
			CobrancaAtividade cobrancaAtividade = (CobrancaAtividade) colecaoCobrancaAtividade
					.iterator().next();
			cobrancaAcaoAtividadeComando
					.setCobrancaAtividade(cobrancaAtividade);

			// id Cobranca Grupo
			if (idCobrancaGrupo != null
					&& !idCobrancaGrupo.equals("")
					&& !idCobrancaGrupo
							.equals(ConstantesSistema.NUMERO_NAO_INFORMADO + "") && !temArquivo) {
				CobrancaGrupo cobrancaGrupo = new CobrancaGrupo();
				cobrancaGrupo.setId(new Integer(idCobrancaGrupo));
				cobrancaAcaoAtividadeComando.setCobrancaGrupo(cobrancaGrupo);
			} else {
				cobrancaAcaoAtividadeComando.setCobrancaGrupo(null);
			}

			// id Gerencia Regional
			if (idGerenciaRegional != null
					&& !idGerenciaRegional.equals("")
					&& !idGerenciaRegional
							.equals(ConstantesSistema.NUMERO_NAO_INFORMADO + "") && !temArquivo) {
				GerenciaRegional gerenciaRegional = new GerenciaRegional();
				gerenciaRegional.setId(new Integer(idGerenciaRegional));
				cobrancaAcaoAtividadeComando
						.setGerenciaRegional(gerenciaRegional);
			} else {
				cobrancaAcaoAtividadeComando.setGerenciaRegional(null);
			}

			// Unidade Negocio
			if (unidadeNegocio != null
					&& !unidadeNegocio.equals("")
					&& !unidadeNegocio
							.equals(ConstantesSistema.NUMERO_NAO_INFORMADO + "") && !temArquivo) {
				UnidadeNegocio unidadeNegocioObj = new UnidadeNegocio();
				unidadeNegocioObj.setId(new Integer(unidadeNegocio));
				cobrancaAcaoAtividadeComando
						.setUnidadeNegocio(unidadeNegocioObj);
			} else {
				cobrancaAcaoAtividadeComando.setUnidadeNegocio(null);
			}
			
			//Localidade
			if(idLocalidade != null && !idLocalidade.equals("")){
				Localidade localidade =  new Localidade();
				localidade.setId(Integer.parseInt(idLocalidade));
				
				cobrancaAcaoAtividadeComando.setLocalidade(localidade);		
			}else{
				cobrancaAcaoAtividadeComando.setLocalidade(null);
			}

			// localidade inicial e final
			if ((idLocalidadeInicial != null && !idLocalidadeInicial.equals(""))
					&& (idLocalidadeFinal != null && !idLocalidadeFinal
							.equals("")) && !temArquivo) {
				Localidade localidadeInicial = new Localidade();
				localidadeInicial.setId(new Integer(idLocalidadeInicial));
				cobrancaAcaoAtividadeComando
						.setLocalidadeInicial(localidadeInicial);

				Localidade localidadeFinal = new Localidade();
				localidadeFinal.setId(new Integer(idLocalidadeFinal));
				cobrancaAcaoAtividadeComando
						.setLocalidadeFinal(localidadeFinal);
			} else {
				cobrancaAcaoAtividadeComando.setLocalidadeInicial(null);
				cobrancaAcaoAtividadeComando.setLocalidadeFinal(null);
			}

			// codigo do setor comercial inicial e final
			if ((codigoSetorComercialInicial != null && !codigoSetorComercialInicial
					.equals(""))
					&& (codigoSetorComercialFinal != null && !codigoSetorComercialFinal
							.equals("")) && !temArquivo) {
				cobrancaAcaoAtividadeComando
						.setCodigoSetorComercialInicial(new Integer(
								codigoSetorComercialInicial));
				cobrancaAcaoAtividadeComando
						.setCodigoSetorComercialFinal(new Integer(
								codigoSetorComercialFinal));
			} else {
				cobrancaAcaoAtividadeComando
						.setCodigoSetorComercialInicial(null);
				cobrancaAcaoAtividadeComando.setCodigoSetorComercialFinal(null);
			}//

			// rota inicial e final
			if ((idRotaInicial != null && !idRotaInicial.equals(""))
					&& (idRotaFinal != null && !idRotaFinal.equals("")) && !temArquivo) {
				Rota rotaInicial = new Rota();
				rotaInicial.setId(new Integer(idRotaInicial));
				cobrancaAcaoAtividadeComando.setRotaInicial(rotaInicial);

				Rota rotaFinal = new Rota();
				rotaFinal.setId(new Integer(idRotaFinal));
				cobrancaAcaoAtividadeComando.setRotaFinal(rotaFinal);
			} else {
				cobrancaAcaoAtividadeComando.setRotaInicial(null);
				cobrancaAcaoAtividadeComando.setRotaFinal(null);
			}
			
			// rota inicial e final
			if ((numeroQuadraInicial != null && !numeroQuadraInicial.equals("")) && 
				(numeroQuadraFinal != null && !numeroQuadraFinal.equals("")) && !temArquivo) {
				
				cobrancaAcaoAtividadeComando.setNumeroQuadraInicial(new Integer(numeroQuadraInicial));
				cobrancaAcaoAtividadeComando.setNumeroQuadraFinal(new Integer(numeroQuadraFinal));
			} else {
				cobrancaAcaoAtividadeComando.setNumeroQuadraInicial(null);
				cobrancaAcaoAtividadeComando.setNumeroQuadraFinal(null);
			}


			// codigo do cliente superior
			if (codigoClienteSuperior != null && !codigoClienteSuperior.equals("") && !temArquivo) {
				Cliente cliente = new Cliente();
				cliente.setId(new Integer(codigoClienteSuperior));
				cobrancaAcaoAtividadeComando.setSuperior(cliente);
			} else {
				cobrancaAcaoAtividadeComando.setSuperior(null);
			}

			// id do cliente
			if (idCliente != null && !idCliente.equals("") && !temArquivo) {
				Cliente cliente = new Cliente();
				cliente.setId(new Integer(idCliente));
				cobrancaAcaoAtividadeComando.setCliente(cliente);
			} else {
				cobrancaAcaoAtividadeComando.setCliente(null);
			}

			// id cliente relação tipo
			if (idClienteRelacaoTipo != null
					&& !idClienteRelacaoTipo.equals("")
					&& !idClienteRelacaoTipo
							.equals(ConstantesSistema.NUMERO_NAO_INFORMADO + "") && !temArquivo) {
				ClienteRelacaoTipo clienteRelacaoTipo = new ClienteRelacaoTipo();
				clienteRelacaoTipo.setId(new Integer(idClienteRelacaoTipo));
				cobrancaAcaoAtividadeComando
						.setClienteRelacaoTipo(clienteRelacaoTipo);
			} else {
				cobrancaAcaoAtividadeComando.setClienteRelacaoTipo(null);
			}

			// inicial referencial
			if (anoMesReferencialInicial != null
					&& !anoMesReferencialInicial.equals("") && !temArquivo) {
				String anoInicial = anoMesReferencialInicial.substring(3, 7);
				String mesInicial = anoMesReferencialInicial.substring(0, 2);
				String anoMes = anoInicial + mesInicial;

				cobrancaAcaoAtividadeComando
						.setAnoMesReferenciaContaInicial(new Integer(anoMes));
			} else {
				cobrancaAcaoAtividadeComando
						.setAnoMesReferenciaContaInicial(null);
			}

			// final referencial
			if (anoMesReferencialFinal != null
					&& !anoMesReferencialFinal.equals("") && !temArquivo) {
				String anoFinal = anoMesReferencialFinal.substring(3, 7);
				String mesFinal = anoMesReferencialFinal.substring(0, 2);
				String anoMes = anoFinal + mesFinal;
				cobrancaAcaoAtividadeComando
						.setAnoMesReferenciaContaFinal(new Integer(anoMes));
			} else {
				/*String periodoFinalConta = this.getControladorUtil()
						.pesquisarParametrosDoSistema().getAnoMesArrecadacao()
						+ "";
				String ano = periodoFinalConta.substring(0, 4);
				String mes = periodoFinalConta.substring(4, 6);*/
				cobrancaAcaoAtividadeComando
						.setAnoMesReferenciaContaFinal(null);
			}

			// data inicial conta
			if (dataVencimentoContaInicial != null
					&& !dataVencimentoContaInicial.equals("") && !temArquivo) {
				cobrancaAcaoAtividadeComando.setDataVencimentoContaInicial(Util
						.converteStringParaDate(dataVencimentoContaInicial));
			} else {
				cobrancaAcaoAtividadeComando.setDataVencimentoContaInicial(null);
			}

			// data final conta
			if (dataVencimentoContaFinal != null
					&& !dataVencimentoContaFinal.equals("") && !temArquivo) {
				cobrancaAcaoAtividadeComando.setDataVencimentoContaFinal(Util
						.converteStringParaDate(dataVencimentoContaFinal));
			} else {

				/*Calendar calendarNova = Calendar.getInstance();

				calendarNova.add(Calendar.MONTH, -1);

				String dataNova = "";
				dataNova = calendarNova.getActualMaximum(Calendar.DAY_OF_MONTH)
						+ "";

				if (calendarNova.get(Calendar.MONTH) < 10) {
					dataNova = dataNova + "/0"
							+ (calendarNova.get(Calendar.MONTH) + 1);
				} else {
					dataNova = dataNova + "/"
							+ (calendarNova.get(Calendar.MONTH) + 1);
				}
				dataNova = dataNova + "/" + calendarNova.get(Calendar.YEAR);*/

				cobrancaAcaoAtividadeComando.setDataVencimentoContaFinal(null);
			}

			// indicador de critério
			if (indicador != null && !indicador.equals("") && !temArquivo) {
				if (indicador.equals("Rota")) {
					cobrancaAcaoAtividadeComando
							.setIndicadorCriterio(new Short((short) 1));
				} else {
					cobrancaAcaoAtividadeComando
							.setIndicadorCriterio(new Short((short) 2));
				}

			}
			
			if(consumoMedioInicial!=null && !consumoMedioInicial.equals("") && !temArquivo){
				cobrancaAcaoAtividadeComando.setConsumoMedioInicial(new Integer(consumoMedioInicial));
			}
			if(consumoMedioFinal!=null && !consumoMedioFinal.equals("") && !temArquivo){
				cobrancaAcaoAtividadeComando.setConsumoMedioFinal(new Integer(consumoMedioFinal));
			}
			if(tipoConsumo!=null && !temArquivo){
				cobrancaAcaoAtividadeComando.setTipoConsumo(new Short(tipoConsumo));
			}

			// Criterio de Cobranca
			if (idComando != null && !idComando.equals("")) {
				CobrancaCriterio cobrancaCriterio = new CobrancaCriterio();
				cobrancaCriterio.setId(new Integer(idComando));
				cobrancaAcaoAtividadeComando
						.setCobrancaCriterio(cobrancaCriterio);
				// ------------ REGISTRAR TRANSAÇÃO ----------------
				/*
				 * registradorOperacao = new RegistradorOperacao(
				 * Operacao.OPERACAO_ATUALIZAR_COMANDO_ACAO_COBRANCA_EVENTUAL_COMANDO,
				 * new UsuarioAcaoUsuarioHelper(usuarioLogado,
				 * UsuarioAcao.USUARIO_ACAO_EFETUOU_OPERACAO));
				 * operacao.setId(Operacao.OPERACAO_ATUALIZAR_COMANDO_ACAO_COBRANCA_EVENTUAL_COMANDO);
				 * operacaoEfetuada.setOperacao(operacao);
				 * cobrancaAcaoAtividadeComando.setOperacaoEfetuada(operacaoEfetuada);
				 * cobrancaAcaoAtividadeComando.adicionarUsuario(usuarioLogado,
				 * UsuarioAcao.USUARIO_ACAO_EFETUOU_OPERACAO);
				 * registradorOperacao.registrarOperacao(cobrancaAcaoAtividadeComando);
				 */
				// ------------ REGISTRAR TRANSAÇÃO ----------------
			} else {
				// ------------ REGISTRAR TRANSAÇÃO ----------------
				/*
				 * registradorOperacao = new RegistradorOperacao(
				 * Operacao.OPERACAO_ATUALIZAR_COMANDO_ACAO_COBRANCA_EVENTUAL_ROTA,
				 * new UsuarioAcaoUsuarioHelper(usuarioLogado, /*
				 * UsuarioAcao.USUARIO_ACAO_EFETUOU_OPERACAO));
				 * operacao.setId(Operacao.OPERACAO_ATUALIZAR_COMANDO_ACAO_COBRANCA_EVENTUAL_ROTA);
				 * operacaoEfetuada.setOperacao(operacao);
				 * cobrancaAcaoAtividadeComando.setOperacaoEfetuada(operacaoEfetuada);
				 * cobrancaAcaoAtividadeComando.adicionarUsuario(usuarioLogado,
				 * UsuarioAcao.USUARIO_ACAO_EFETUOU_OPERACAO);
				 * registradorOperacao.registrarOperacao(cobrancaAcaoAtividadeComando);
				 */
				// ------------ REGISTRAR TRANSAÇÃO ----------------
			}
			
			//Quantidade de Dias de Vencimento
			if(quantidadeDiasVencimento != null
					&& !quantidadeDiasVencimento.equals("") && !temArquivo){
				
				cobrancaAcaoAtividadeComando.setQuantidadeDiasVencimento(new Integer(quantidadeDiasVencimento));
			}
			else{
				cobrancaAcaoAtividadeComando.setQuantidadeDiasVencimento(null);
			}
			
			//Selecionar Imóveis Com Situação da Ligação Não Alterada por Débito
			if(imoveisSitLigacaoNaoAlteradaDeb != null 
					&& !imoveisSitLigacaoNaoAlteradaDeb.equals("")){
				
				cobrancaAcaoAtividadeComando.setLigacaoAlteradaDebito(new Integer(imoveisSitLigacaoNaoAlteradaDeb));
			}
			else{
				
				cobrancaAcaoAtividadeComando.setLigacaoAlteradaDebito(null);
			}
			
			//Relação de Imóveis
			if(nomeArquivo != null && !nomeArquivo.equals("")){
				cobrancaAcaoAtividadeComando.setNomeArquivoRelacaoImoveis(nomeArquivo);
			}
			else{
				cobrancaAcaoAtividadeComando.setNomeArquivoRelacaoImoveis(null);
			}

			// campos que mantiveram o valor
			// comando
			cobrancaAcaoAtividadeComando.setComando(comando);
			// realizacao
			cobrancaAcaoAtividadeComando.setRealizacao(realizacao);
			// usuario
			cobrancaAcaoAtividadeComando.setUsuario(usuario);
			// empresa
			cobrancaAcaoAtividadeComando.setEmpresa(empresa);
			cobrancaAcaoAtividadeComando
					.setQuantidadeDocumentos(quantidadeDocumentos);
			cobrancaAcaoAtividadeComando.setValorDocumentos(valorDocumentos);
			cobrancaAcaoAtividadeComando
					.setQuantidadeItensCobrados(quantidadeItensCobrados);

			// [FS0003] - Atualização realizada por outro usuário
			FiltroCobrancaAcaoAtividadeComando filtroCobrancaAcaoAtividadeComando = new FiltroCobrancaAcaoAtividadeComando();
			filtroCobrancaAcaoAtividadeComando
					.adicionarParametro(new ParametroSimples(
							FiltroCobrancaAcaoAtividadeComando.ID,
							idCobrancaAcaoAtividadeComando));

			Collection colecaoCobrancaAcaoAtividadeComandoBase = getControladorUtil()
					.pesquisar(filtroCobrancaAcaoAtividadeComando,
							CobrancaAcaoAtividadeComando.class.getName());

			if (colecaoCobrancaAcaoAtividadeComandoBase == null
					|| colecaoCobrancaAcaoAtividadeComandoBase.isEmpty()) {
				sessionContext.setRollbackOnly();
				throw new ControladorException("atencao.atualizacao.timestamp");
			}

			CobrancaAcaoAtividadeComando cobrancaAcaoAtividadeComandoBase = (CobrancaAcaoAtividadeComando) colecaoCobrancaAcaoAtividadeComandoBase
					.iterator().next();

			if (cobrancaAcaoAtividadeComandoBase.getUltimaAlteracao().after(
					cobrancaAcaoAtividadeComando.getUltimaAlteracao())) {
				sessionContext.setRollbackOnly();
				throw new ControladorException("atencao.atualizacao.timestamp");
			}

			cobrancaAcaoAtividadeComando.setUltimaAlteracao(new Date());

			cobrancaAcaoAtividadeComando.setDescricaoTitulo(titulo);
			cobrancaAcaoAtividadeComando
					.setDescricaoSolicitacao(descricaoSolicitacao);
			if (prazoExecucao != null && !prazoExecucao.equals("")  && !temArquivo) {
				cobrancaAcaoAtividadeComando
						.setQuantidadeDiasRealizacao(new Short(prazoExecucao));
			}
			else{
				cobrancaAcaoAtividadeComando
				.setQuantidadeDiasRealizacao(null);
			}
			if (quantidadeMaximaDocumentos != null
					&& !quantidadeMaximaDocumentos.equals("") && !temArquivo) {
				cobrancaAcaoAtividadeComando
						.setQuantidadeMaximaDocumentos(new Integer(
								quantidadeMaximaDocumentos));
			}
			else{
				cobrancaAcaoAtividadeComando
				.setQuantidadeMaximaDocumentos(null);
			}
			if (valorLimiteObrigatoria != null
					&& !valorLimiteObrigatoria.equals("") && !temArquivo) {
				valorLimiteObrigatoria = valorLimiteObrigatoria.replace(".", "").replace(",", ".");
				cobrancaAcaoAtividadeComando
						.setValorLimiteObrigatoria(new BigDecimal(
								valorLimiteObrigatoria));
			}
			if (indicadorGerarBoletimCadastro != null
					&& !indicadorGerarBoletimCadastro.equals("") && !temArquivo) {
				cobrancaAcaoAtividadeComando.setIndicadorBoletim(new Short(
						indicadorGerarBoletimCadastro));
			}
			else{
				cobrancaAcaoAtividadeComando.setIndicadorBoletim(new Short("2"));
			}
			if (indicadorImoveisDebito != null
					&& !indicadorImoveisDebito.equals("") && !temArquivo) {
				cobrancaAcaoAtividadeComando.setIndicadorDebito(new Short(
						indicadorImoveisDebito));
			}
			else{
				cobrancaAcaoAtividadeComando.setIndicadorDebito(new Short("2"));
				
			}
			
			
			// data inicial fiscalização
			if (periodoInicialFiscalizacao != null
					&& !periodoInicialFiscalizacao.equals("") && !temArquivo) {
				
				cobrancaAcaoAtividadeComando.setPeriodoInicialFiscalizacao(
						Util.converteStringParaDate(periodoInicialFiscalizacao));
				
			}  else {
				cobrancaAcaoAtividadeComando.setPeriodoInicialFiscalizacao(null);
			}

			// data final fiscalização
			if (periodoFinalFiscalizacao != null
					&& !periodoFinalFiscalizacao.equals("") && !temArquivo) {
				
				cobrancaAcaoAtividadeComando.setPeriodoFinalFiscalizacao(
						Util.converteStringParaDate(periodoFinalFiscalizacao));
				
		    } else {
				cobrancaAcaoAtividadeComando.setPeriodoFinalFiscalizacao(null);
			}
			
			getControladorUtil().atualizar(cobrancaAcaoAtividadeComando);

			Collection colecaoIdCobrancaAtividadeComandoRota = new ArrayList();

			FiltroCobrancaAtividadeComandoRotas filtroCobrancaAtividadeComandoRotas = new FiltroCobrancaAtividadeComandoRotas();
			filtroCobrancaAtividadeComandoRotas
					.adicionarParametro(new ParametroSimples(
							FiltroCobrancaAtividadeComandoRotas.COBRANCA_ACAO_ATIVIDADE_COMANDO_ID,
							idCobrancaAcaoAtividadeComando));

			Collection colecaoCobrancaAtividadeComandoRotas = this
					.getControladorUtil().pesquisar(
							filtroCobrancaAtividadeComandoRotas,
							CobrancaAtividadeComandoRota.class.getName());
			if (colecaoCobrancaAtividadeComandoRotas != null
					&& !colecaoCobrancaAtividadeComandoRotas.isEmpty()) {

				Iterator iteratorColecaoCobrancaAtividadeComandoRotas = colecaoCobrancaAtividadeComandoRotas
						.iterator();
				while (iteratorColecaoCobrancaAtividadeComandoRotas.hasNext()) {
					CobrancaAtividadeComandoRota cobrancaAtividadeComandoRota = (CobrancaAtividadeComandoRota) iteratorColecaoCobrancaAtividadeComandoRotas
							.next();
					// registradorOperacao = null;
					// operacao = new Operacao();
					// operacaoEfetuada = new OperacaoEfetuada();

					// Criterio de Cobranca
					if (idComando != null && !idComando.equals("")) {
						// ------------ REGISTRAR TRANSAÇÃO ----------------
						/*
						 * registradorOperacao = new RegistradorOperacao(
						 * Operacao.OPERACAO_ATUALIZAR_COMANDO_ACAO_COBRANCA_EVENTUAL_COMANDO,
						 * new UsuarioAcaoUsuarioHelper(usuarioLogado,
						 * UsuarioAcao.USUARIO_ACAO_EFETUOU_OPERACAO));
						 * operacao.setId(Operacao.OPERACAO_ATUALIZAR_COMANDO_ACAO_COBRANCA_EVENTUAL_COMANDO);
						 * operacaoEfetuada.setOperacao(operacao);
						 * cobrancaAtividadeComandoRota.setOperacaoEfetuada(operacaoEfetuada);
						 * cobrancaAtividadeComandoRota.adicionarUsuario(usuarioLogado,
						 * UsuarioAcao.USUARIO_ACAO_EFETUOU_OPERACAO);
						 * registradorOperacao.registrarOperacao(cobrancaAtividadeComandoRota);
						 */
						// ------------ REGISTRAR TRANSAÇÃO ----------------
					} else {
						// ------------ REGISTRAR TRANSAÇÃO ----------------
						/*
						 * registradorOperacao = new RegistradorOperacao(
						 * Operacao.OPERACAO_ATUALIZAR_COMANDO_ACAO_COBRANCA_EVENTUAL_ROTA,
						 * new UsuarioAcaoUsuarioHelper(usuarioLogado,
						 * UsuarioAcao.USUARIO_ACAO_EFETUOU_OPERACAO));
						 * operacao.setId(Operacao.OPERACAO_ATUALIZAR_COMANDO_ACAO_COBRANCA_EVENTUAL_ROTA);
						 * operacaoEfetuada.setOperacao(operacao);
						 * cobrancaAtividadeComandoRota.setOperacaoEfetuada(operacaoEfetuada);
						 * cobrancaAtividadeComandoRota.adicionarUsuario(usuarioLogado,
						 * UsuarioAcao.USUARIO_ACAO_EFETUOU_OPERACAO);
						 * registradorOperacao.registrarOperacao(cobrancaAtividadeComandoRota);
						 */
						// ------------ REGISTRAR TRANSAÇÃO ----------------
					}
					this.getControladorUtil().remover(
							cobrancaAtividadeComandoRota);
				}
			}

			// [FS008] - Obter Lista de Rotas
			Collection colecaoRotas = this.obterListasRotas(null,
					null, codigoSetorComercialInicial,
					codigoSetorComercialFinal, idLocalidadeInicial,
					idLocalidadeFinal, idGerenciaRegional, unidadeNegocio, codigoRotaInicial,
					codigoRotaFinal,numeroQuadraInicial,numeroQuadraFinal, idsLocalidade, idsSetorComercial, idLocalidade);
			
//			 -- Validar se todas as rotas do grupo informado possui um criterio definido para a açao de cobrança
	        {
	        	Collection<Integer> colecaoIdsAcoesCobranca = new ArrayList<Integer>();
	        	colecaoIdsAcoesCobranca.add(new Integer(idCobrancaAcao));
		        
		        Collection<Integer> colecaoIdsRotas = new ArrayList<Integer>();
		        for (Rota rota : (Collection<Rota>) colecaoRotas) {
		        	colecaoIdsRotas.add(new Integer(rota.getId()));
		        }
		         
		        PesquisarQtdeRotasSemCriteriosParaAcoesCobranca filtro = new PesquisarQtdeRotasSemCriteriosParaAcoesCobranca();
		        filtro.setIdsRotas(colecaoIdsRotas);
		        filtro.setIdsAcoesCobranca(colecaoIdsAcoesCobranca);
		        if (cobrancaAcaoAtividadeComando.getCobrancaGrupo() != null) {
		        	filtro.setIdGrupoCobranca(cobrancaAcaoAtividadeComando.getCobrancaGrupo().getId());
		        } 
		        
		        Integer qtdeRotasSemCriterios = this.pesquisarQtdeRotasSemCriteriosParaAcoesCobranca(filtro);
				if (qtdeRotasSemCriterios != null && qtdeRotasSemCriterios.intValue() > 0) { 
					sessionContext.setRollbackOnly();
					throw new ControladorException("atencao.rotas.sem.criterio.para.acao.cobranca");
				}
	        }
	        // ---------
			
			if (colecaoRotas != null && !colecaoRotas.isEmpty()) {

				CobrancaAtividadeComandoRota cobrancaAtividadeComandoRota = null;
				Iterator iteratorColecaoRotas = colecaoRotas.iterator();
				while (iteratorColecaoRotas.hasNext()) {
					Rota rota = (Rota) iteratorColecaoRotas.next();

					// registradorOperacao = null;
					// operacao = new Operacao();
					// operacaoEfetuada = new OperacaoEfetuada();

					CobrancaAtividadeComandoRotaPK cobrancaAtividadeComandoRotaPK = new CobrancaAtividadeComandoRotaPK();
					cobrancaAtividadeComandoRotaPK
							.setCobrancaAcaoAtividadeComandoId(cobrancaAcaoAtividadeComando
									.getId());
					cobrancaAtividadeComandoRotaPK.setRotaId(rota.getId());

					cobrancaAtividadeComandoRota = new CobrancaAtividadeComandoRota();
					cobrancaAtividadeComandoRota
							.setComp_id(cobrancaAtividadeComandoRotaPK);
					cobrancaAtividadeComandoRota
							.setCobrancaAcaoAtividadeComando(cobrancaAcaoAtividadeComando);
					cobrancaAtividadeComandoRota.setRota(rota);
					cobrancaAtividadeComandoRota.setUltimaAlteracao(new Date());

					// Criterio de Cobranca
					if (idComando != null && !idComando.equals("")) {
						// ------------ REGISTRAR TRANSAÇÃO ----------------
						/*
						 * registradorOperacao = new RegistradorOperacao(
						 * Operacao.OPERACAO_ATUALIZAR_COMANDO_ACAO_COBRANCA_EVENTUAL_COMANDO,
						 * new UsuarioAcaoUsuarioHelper(usuarioLogado,
						 * UsuarioAcao.USUARIO_ACAO_EFETUOU_OPERACAO));
						 * operacao.setId(Operacao.OPERACAO_ATUALIZAR_COMANDO_ACAO_COBRANCA_EVENTUAL_COMANDO);
						 * operacaoEfetuada.setOperacao(operacao);
						 * cobrancaAtividadeComandoRota.setOperacaoEfetuada(operacaoEfetuada);
						 * cobrancaAtividadeComandoRota.adicionarUsuario(usuarioLogado,
						 * UsuarioAcao.USUARIO_ACAO_EFETUOU_OPERACAO);
						 * registradorOperacao.registrarOperacao(cobrancaAtividadeComandoRota);
						 */
						// ------------ REGISTRAR TRANSAÇÃO ----------------
					} else {
						// ------------ REGISTRAR TRANSAÇÃO ----------------
						/*
						 * registradorOperacao = new RegistradorOperacao(
						 * Operacao.OPERACAO_ATUALIZAR_COMANDO_ACAO_COBRANCA_EVENTUAL_ROTA,
						 * new UsuarioAcaoUsuarioHelper(usuarioLogado,
						 * UsuarioAcao.USUARIO_ACAO_EFETUOU_OPERACAO));
						 * operacao.setId(Operacao.OPERACAO_ATUALIZAR_COMANDO_ACAO_COBRANCA_EVENTUAL_ROTA);
						 * operacaoEfetuada.setOperacao(operacao);
						 * cobrancaAtividadeComandoRota.setOperacaoEfetuada(operacaoEfetuada);
						 * cobrancaAtividadeComandoRota.adicionarUsuario(usuarioLogado,
						 * UsuarioAcao.USUARIO_ACAO_EFETUOU_OPERACAO);
						 * registradorOperacao.registrarOperacao(cobrancaAtividadeComandoRota);
						 */
						// ------------ REGISTRAR TRANSAÇÃO ----------------
					}

					// inserir cobranca atividade comando rota
					CobrancaAtividadeComandoRotaPK compIDCobrancaAtividadeComandoRotaPK = (CobrancaAtividadeComandoRotaPK) this
							.getControladorUtil().inserir(
									cobrancaAtividadeComandoRota);

					colecaoIdCobrancaAtividadeComandoRota
							.add(compIDCobrancaAtividadeComandoRotaPK);
				}
			}
		}
		// }	
		try {
			
			//	Para cada Situação da Fiscalização selecionada, inclui a situação da fiscalização 
			// na tabela COB_ACAO_ATV_CMD_FIS_SIT
			this.atualizarCobrancaAcaoAtividadeComandoFiscalizacaoSituacao(
					cobrancaAcaoAtividadeComando,situacaoFiscalizacao);
			
			//4. Caso tenha informado o arquivo texto com a Relação de Imóveis, para cada linha lida no arquivo
			if(colecaoIdsImovel != null && colecaoIdsImovel.size() > 0){
					
				Iterator it = colecaoIdsImovel.iterator();
				
				//4.1. Exclui todas os imóveis associados ao comando
				repositorioCobranca.removerImoveisComandoAtividadeImovel(new Integer(idCobrancaAcaoAtividadeComando));
				
				while(it.hasNext()){
					
					Integer idImovel = (Integer)it.next();
					
					Collection colecaoImovComandos = repositorioCobranca.obterImoveisComandoAtividadeImovel(idImovel, new Integer(idCobrancaAcaoAtividadeComando));
					
					//4.2.1. Caso o imóvel não tenha sido associado ao comando de ação de cobrança
					if(colecaoImovComandos == null || colecaoImovComandos.size() == 0){
					
						//4.2.1 o sistema deverá incluir o imóvel 
						//      na tabela COBRANCA.COMANDO_ATIV_IMOVEIS
						ComandoAtividadeImoveis comandoAtivImov = new ComandoAtividadeImoveis();
						ComandoAtividadeImoveisPK comandoAtivImovPK = new ComandoAtividadeImoveisPK();
						
						CobrancaAcaoAtividadeComando cobrancaAACom = new CobrancaAcaoAtividadeComando();
						
						cobrancaAACom.setId(new Integer(idCobrancaAcaoAtividadeComando));
						
						Imovel imov = new Imovel();
						imov.setId(idImovel);
						
						comandoAtivImov.setCobrancaAcaoAtividadeComando(cobrancaAACom);
						comandoAtivImov.setImovel(imov);
						comandoAtivImov.setUltimaAlteracao(new Date());
						
						comandoAtivImovPK.setImovelId(imov.getId());
						comandoAtivImovPK.setCobrancaAcaoAtividadeComandoId(cobrancaAACom.getId());
						
						comandoAtivImov.setComp_id(comandoAtivImovPK);
						
						getControladorUtil().inserir(comandoAtivImov);
					}
						
				}
					
			}
			
			repositorioCobranca.removerCobrancaAcaoAtividadeComandoSetorComercial(cobrancaAcaoAtividadeComando.getId());
			if ( idsSetorComercial != null && idsSetorComercial.length > 0 ) {
				for (int i = 0; i < idsSetorComercial.length; i++) {
					SetorComercial setorComercial = new SetorComercial();
					setorComercial.setId( Integer.valueOf(idsSetorComercial[i]) );
					
					CobrancaAcaoAtividadeComandoSetorComercial cobrancaAcaoAtividadeComandoSetorComercial = new CobrancaAcaoAtividadeComandoSetorComercial();
					
					cobrancaAcaoAtividadeComandoSetorComercial.setSetorComercial(setorComercial);
					cobrancaAcaoAtividadeComandoSetorComercial.setCobrancaAcaoAtividadeComando(cobrancaAcaoAtividadeComando);
					cobrancaAcaoAtividadeComandoSetorComercial.setUltimaAlteracao( new Date() );
					getControladorUtil().inserir(cobrancaAcaoAtividadeComandoSetorComercial);
				}
			}
			
			repositorioCobranca.removerCobrancaAcaoAtividadeComandoLocalidade(cobrancaAcaoAtividadeComando.getId());
			if ( idsLocalidade != null && idsLocalidade.length > 0 ) {
				for (int i = 0; i < idsLocalidade.length; i++) {
					Localidade localidade = new Localidade();
					localidade.setId( Integer.valueOf(idsLocalidade[i]) );
					
					CobrancaAcaoAtividadeComandoLocalidade cobrancaAcaoAtividadeComandoLocalidade = new CobrancaAcaoAtividadeComandoLocalidade();
					cobrancaAcaoAtividadeComandoLocalidade.setLocalidade(localidade);
					cobrancaAcaoAtividadeComandoLocalidade.setCobrancaAcaoAtividadeComando(cobrancaAcaoAtividadeComando);
					cobrancaAcaoAtividadeComandoLocalidade.setUltimaAlteracao( new Date() );
					getControladorUtil().inserir(cobrancaAcaoAtividadeComandoLocalidade);
				}
			}
		
		} catch (ErroRepositorioException e) {
			e.printStackTrace();
		}

		return cobrancaAcaoAtividadeComando;
	}

	/**
	 * Permite efetuar o parcelamento dos débitos de um imóvel
	 * 
	 * [UC0214] Efetuar Parcelamento de Débitos
	 * 
	 * Faz as atualizações e inserções do parcelamento do débito
	 * 
	 * concluirParcelamentoDebitos
	 * 
	 * @author Roberta Costa - Vivianne Sousa - Raphael Rossiter
	 * @date 26/04/2006 - 26/09/2006 - 29/09/2008
	 *
	 * @param ConcluirParcelamentoDebitosHelper
	 * @return Integer
	 * @throws ControladorException
	 */
	public Integer concluirParcelamentoDebitos(ConcluirParcelamentoDebitosHelper helper, Usuario usuarioLogado)
	throws ControladorException {
		Integer parcelamentoId = 0;
		try {
		
			//Pega as informações de Sistema Parâmetros
			SistemaParametro sistemaParametros = null;
			sistemaParametros = getControladorUtil().pesquisarParametrosDoSistema();
		
			//COLEÇÃO CONTAS PARA PARCELAMENTO
			Collection colecaoContasParaParcelamento = helper.getColecaoContaValores();
			
			/*
			 * Caso a informação do motivo de revisão esteja preenchido, o sistema deverá
			 * colocar em revisao as contas que estão em antiguidade.
			 */
			Collection colecaoContasEmRevisaoPorAntiguidade = new ArrayList();
			Integer maiorAnoMesContas = null;
			
			if (helper.getColecaoContasEmAntiguidade() != null &&
				!helper.getColecaoContasEmAntiguidade().isEmpty()){
				
				ParcelamentoPerfil parcelamentoPerfil = new ParcelamentoPerfil();
				parcelamentoPerfil.setId(helper.getParcelamentoPerfilId());
				
				maiorAnoMesContas = this.recuperaMaiorAnoMesContasParcelamento(helper.getColecaoContasEmAntiguidade());
				
				Iterator iteratorContasEmAntiguidade = helper.getColecaoContasEmAntiguidade().iterator();
		
				while (iteratorContasEmAntiguidade.hasNext()) {
					
					ContaValoresHelper contaEmAntiguidade = (ContaValoresHelper)iteratorContasEmAntiguidade.next();
					
					Collection<ParcelamentoDescontoAntiguidade> colecaoParcelamentoDescontoAntiguidade = 
					this.obterParcelamentoDescontoAntiguidadeParaConta(parcelamentoPerfil,contaEmAntiguidade.getConta());
					
					if (colecaoParcelamentoDescontoAntiguidade != null && !colecaoParcelamentoDescontoAntiguidade.isEmpty()){
						
						ParcelamentoDescontoAntiguidade parcelamentoDescontoAntiguidade = null;
						
						if (colecaoParcelamentoDescontoAntiguidade.size() == 1){
							
							parcelamentoDescontoAntiguidade = (ParcelamentoDescontoAntiguidade)
							Util.retonarObjetoDeColecao(colecaoParcelamentoDescontoAntiguidade);
						}
						else{
							
							Iterator parcelamentoDescontoAntiguidadeValores = 
							colecaoParcelamentoDescontoAntiguidade.iterator();
		
							int quantidadeMinimaMesesAntiguidade = 0;
							int maiorQuantidadeMinimaMesesAntiguidade = 0;
		
							while (parcelamentoDescontoAntiguidadeValores.hasNext()) {
								
								ParcelamentoDescontoAntiguidade parcelamentoDescontoAntiguidadeColecao = 
								(ParcelamentoDescontoAntiguidade) parcelamentoDescontoAntiguidadeValores.next();
								
								quantidadeMinimaMesesAntiguidade = parcelamentoDescontoAntiguidadeColecao.getQuantidadeMinimaMesesDebito();
								
								if (quantidadeMinimaMesesAntiguidade > maiorQuantidadeMinimaMesesAntiguidade) {
									maiorQuantidadeMinimaMesesAntiguidade = quantidadeMinimaMesesAntiguidade;
									parcelamentoDescontoAntiguidade = parcelamentoDescontoAntiguidadeColecao;
								}
							}
						}
						
						if (parcelamentoDescontoAntiguidade.getContaMotivoRevisao() != null){
							
							Collection colecaoContaParaRevisao = new ArrayList();
							colecaoContaParaRevisao.add(contaEmAntiguidade.getConta());
							
							//COLOCAR CONTA EM REVISAO
							getControladorFaturamento().colocarRevisaoConta(colecaoContaParaRevisao, null,
							parcelamentoDescontoAntiguidade.getContaMotivoRevisao(), helper.getUsuarioLogado(), true);
							
							//ESSAS CONTAS NÃO FARÃO PARTE DO PARCELAMENTO
							colecaoContasEmRevisaoPorAntiguidade.add(contaEmAntiguidade);
						}
						
					}
				}
			}
			
			/*
			 * Só entrará no parcelamento as contas que estão em antiguidade e não forão colocadas em revisão
			 * com o motivo associado ao PARCELAMENTO_DESCONTO_ANTIGUIDADE. 
			 */
			if(colecaoContasEmRevisaoPorAntiguidade != null &&
				!colecaoContasEmRevisaoPorAntiguidade.isEmpty()){
				colecaoContasParaParcelamento.removeAll(colecaoContasEmRevisaoPorAntiguidade);
			}
			
			//Verificando se foram selecionadas contas que farão parte da entrada do parcelamento
			boolean isContaEntradaParcelamento = false;
			
			Collection<Conta> colecaoContaEP = this.obterContasEntradaParcelamento(colecaoContasParaParcelamento);
			
			if ((colecaoContaEP != null && !colecaoContaEP.isEmpty()) 
					|| (helper.getValorEntradaInformado() !=null &&  !(helper.getValorEntradaInformado().toString().equals("0.00")))){
				isContaEntradaParcelamento = true;
			}
			
			// 6.1.1 Para cada conta da lista de contas em débito cujo indicador de
			// que a conta já foi paga, não esteja marcada, atualizar
			if (colecaoContasParaParcelamento != null && !colecaoContasParaParcelamento.isEmpty()) {
				
				Iterator contaValores = colecaoContasParaParcelamento.iterator();
		
				Collection<Conta> colecaoContas = new ArrayList();
		
				while (contaValores.hasNext()) {
					
					ContaValoresHelper contaValoresHelper = (ContaValoresHelper) contaValores.next();
					colecaoContas.add(contaValoresHelper.getConta());
				}
		
				maiorAnoMesContas = this.recuperaMaiorAnoMesContasParcelamento(colecaoContasParaParcelamento);
				contaValores = colecaoContasParaParcelamento.iterator();
				while (contaValores.hasNext()) {
					
					ContaValoresHelper contaValoresHelper = (ContaValoresHelper) contaValores.next();
		
					FiltroConta filtroConta = new FiltroConta();
					
					filtroConta.adicionarParametro(new ParametroSimples(FiltroConta.ID, contaValoresHelper.getConta().getId()));
					
					filtroConta.adicionarCaminhoParaCarregamentoEntidade("debitoCreditoSituacaoAtual");
					filtroConta.adicionarCaminhoParaCarregamentoEntidade("imovel");
		
					Collection<Conta> contaPesquisada = getControladorUtil().pesquisar(filtroConta, Conta.class.getName());
		
					Conta conta = new Conta();
					if (contaPesquisada != null && !contaPesquisada.isEmpty()) {
						conta = contaPesquisada.iterator().next();
					}
					
					if (conta.getImovel() != null && conta.getImovel().getId().intValue() != helper.getImovel().getId().intValue()) {
						throw new ControladorException("atencao.parcelamento.divergente");
					}
		
					// Data de última alteração
					conta.setUltimaAlteracao(new Date());
		
					if (contaValoresHelper.getIndicadorContasDebito() != null) {
						
						// Caso não seja marcarda como NB e tb n esteja marcada como EP
						if (!contaValoresHelper.getIndicadorContasDebito().equals(new Integer(ConstantesSistema.NAO)) && 
							!contaValoresHelper.getIndicadorContasDebito().equals(new Integer(ConstantesSistema.SIM))) {
							
							// Atualiza Contas na Base de Dados
							atualizarContaEfetuarParcelamentoDebito(conta, isContaEntradaParcelamento, maiorAnoMesContas);
						} 
						else if (contaValoresHelper.getIndicadorContasDebito().equals(ConstantesSistema.NAO)) {
							/*
							 * 6.1.2. Colocar em revisão como motivo correspondente a pagamento comprovado 
							 * as contas que estejam marcardas como NB.
							 */
							ContaMotivoRevisao contaMotivoRevisao = new ContaMotivoRevisao();
							
							// REVISAO POR PAGAMENTO COMPROVADO
							contaMotivoRevisao.setId(ContaMotivoRevisao.REVISAO_POR_PAGAMENTO_COMPROVADO);
		
							//[UC0148] Colocar Conta em Revisão
							getControladorFaturamento().colocarRevisaoConta(colecaoContas, conta.getId().toString(), contaMotivoRevisao,helper.getUsuarioLogado(), true);
						}
					} 
					else {
						
						// Atualiza Contas na Base de Dados
						atualizarContaEfetuarParcelamentoDebito(conta,isContaEntradaParcelamento, maiorAnoMesContas);
					}
					
					
				}
			}
			
			GuiaPagamento guiaPagamentoParcelamento = null;
			Integer anoMesVencimentoGuia  = null;		
			// 6.1.3. Para cada guia de pagamento
			if (helper.getIndicadorGuiasPagamento().equals(ConstantesSistema.SIM.toString())) {
				
				if (helper.getColecaoGuiaPagamentoValores() != null && !helper.getColecaoGuiaPagamentoValores().isEmpty()) {
					
					Iterator guiPagamentoValores = helper.getColecaoGuiaPagamentoValores().iterator();
					
					Integer situacaoAnterior = null;
		
					while (guiPagamentoValores.hasNext()) {
						
						GuiaPagamentoValoresHelper guiaPagamentoValoresHelper = (GuiaPagamentoValoresHelper)guiPagamentoValores.next();
		
						FiltroGuiaPagamento filtroGuiaPagamento = new FiltroGuiaPagamento();
		
						filtroGuiaPagamento.adicionarParametro(new ParametroSimples(
									FiltroGuiaPagamento.ID,guiaPagamentoValoresHelper.getGuiaPagamento().getId()));
						
						filtroGuiaPagamento.adicionarCaminhoParaCarregamentoEntidade("imovel");
						
						Collection colecaoGuiaPagamento = getControladorUtil().pesquisar(filtroGuiaPagamento,GuiaPagamento.class.getName());
		
						GuiaPagamento guiaPagamento = new GuiaPagamento();
						if (colecaoGuiaPagamento != null && !colecaoGuiaPagamento.isEmpty()) {
							guiaPagamento = (GuiaPagamento) colecaoGuiaPagamento.iterator().next();
						}
						
						if (guiaPagamento.getImovel() != null && guiaPagamento.getImovel().getId().intValue() != helper.getImovel().getId().intValue()) {
							throw new ControladorException("atencao.parcelamento.divergente");
						}
		
						// 6.1.3.1 Situação anterior
						if ( Util.compararAnoMesReferencia(guiaPagamento.getAnoMesReferenciaContabil(),sistemaParametros.getAnoMesFaturamento(), "=") 
								   || (Util.compararAnoMesReferencia(guiaPagamento.getAnoMesReferenciaContabil(),sistemaParametros.getAnoMesFaturamento(), ">") ))  {
							situacaoAnterior = guiaPagamento.getDebitoCreditoSituacaoAtual().getId();
						} else {
							situacaoAnterior = null;
						}
		
						// 6.1.3.2 Situação atual
						DebitoCreditoSituacao debitoCreditoSituacaoAtual = new DebitoCreditoSituacao();
						debitoCreditoSituacaoAtual.setId(DebitoCreditoSituacao.PARCELADA);
						guiaPagamento.setDebitoCreditoSituacaoAtual(debitoCreditoSituacaoAtual);
		
						if (situacaoAnterior == null) {
							guiaPagamento.setDebitoCreditoSituacaoAnterior(null);
						} else {
							DebitoCreditoSituacao debitoCreditoSituacaoAnterior = new DebitoCreditoSituacao();
							debitoCreditoSituacaoAnterior.setId(situacaoAnterior);
							guiaPagamento.setDebitoCreditoSituacaoAnterior(debitoCreditoSituacaoAnterior);
						}
		
						guiaPagamento.setUltimaAlteracao(new Date());
						anoMesVencimentoGuia = Util.recuperaAnoMesDaData(guiaPagamento.getDataVencimento());
		//				guiaPagamento.setAnoMesReferenciaContabil(Util.recuperaAnoMesDaData(new Date()));
					    //alterado por Vivianne Sousa 01/09/2008 
				        //analista :Aryed 
				        Integer referenciaContabil = obterReferenciaContabilParcelamentoOUConta(
				        		isContaEntradaParcelamento,anoMesVencimentoGuia, maiorAnoMesContas);
				        guiaPagamento.setAnoMesReferenciaContabil(referenciaContabil);
						guiaPagamento.getIndicadorEmitirObservacao();
						guiaPagamentoParcelamento = guiaPagamento;
						// Atualiza Guia de Pagamento a base de dados
						getControladorUtil().atualizar(guiaPagamento);
						
						// Alterado por Francisco - 26/05/08, por conta do Resumo de Ações de cobrança
						// Analista: Ana Breda
						try {
							// Atualizar documento de cobranca da conta, se houver, para cancelado
							repositorioCobranca.atualizarSituacaoCobrancaDocumentoItem(CobrancaDebitoSituacao.PARCELADO,
									new Date(), null, guiaPagamento.getId(), null);
						} catch (ErroRepositorioException ex) {
							sessionContext.setRollbackOnly();
							new ControladorException("erro.sistema", ex);
						}	
					}
				}
			}
		
			// 6.1.4 Para cada débito a cobrar
			if (helper.getIndicadorDebitosACobrar().equals(ConstantesSistema.SIM.toString())) {
				
				if (helper.getColecaoDebitoACobrar() != null && !helper.getColecaoDebitoACobrar().isEmpty()) {
					
					Iterator debitoACobrarValores = helper.getColecaoDebitoACobrar().iterator();
					Integer situacaoAnterior = null;
		
					while (debitoACobrarValores.hasNext()) {
						DebitoACobrar debitoACobrar = (DebitoACobrar) debitoACobrarValores.next();
		
						FiltroDebitoACobrar filtroDebitoACobrar = new FiltroDebitoACobrar();
						filtroDebitoACobrar.adicionarParametro(new ParametroSimples(
										FiltroDebitoACobrar.ID, debitoACobrar.getId()));
						
						filtroDebitoACobrar.adicionarCaminhoParaCarregamentoEntidade("imovel");
		
						Collection debitoACobrarPesquisada = getControladorUtil()
								.pesquisar(filtroDebitoACobrar,DebitoACobrar.class.getName());
		
						DebitoACobrar debitoACobrarParaAtualizacao = new DebitoACobrar();
						if (debitoACobrarPesquisada != null && !debitoACobrarPesquisada.isEmpty()) {
							debitoACobrarParaAtualizacao = (DebitoACobrar) debitoACobrarPesquisada.iterator().next();
						}
						
						if (debitoACobrarParaAtualizacao.getImovel() != null && debitoACobrarParaAtualizacao.getImovel().getId().intValue() != helper.getImovel().getId().intValue()) {
							throw new ControladorException("atencao.parcelamento.divergente");
						}
		
						// 6.1.4.1 Situação anterior
						if ( Util.compararAnoMesReferencia(debitoACobrar.getAnoMesReferenciaContabil(),sistemaParametros.getAnoMesFaturamento(), "=") 
								   || (Util.compararAnoMesReferencia(debitoACobrar.getAnoMesReferenciaContabil(),sistemaParametros.getAnoMesFaturamento(), ">")))  {
							situacaoAnterior = debitoACobrar.getDebitoCreditoSituacaoAtual().getId();
						} else {
							situacaoAnterior = null;
						}
		
						// 6.1.4.2 Situação atual
						DebitoCreditoSituacao debitoCreditoSituacaoAtual = new DebitoCreditoSituacao();
						if (debitoACobrar.getDebitoTipo().getId().equals(DebitoTipo.JUROS_SOBRE_PARCELAMENTO)) {
							debitoCreditoSituacaoAtual.setId(DebitoCreditoSituacao.CANCELADA);
						} else {
							debitoCreditoSituacaoAtual.setId(DebitoCreditoSituacao.PARCELADA);
						}
						debitoACobrarParaAtualizacao.setDebitoCreditoSituacaoAtual(debitoCreditoSituacaoAtual);
		
						if (situacaoAnterior == null) {
							debitoACobrarParaAtualizacao.setDebitoCreditoSituacaoAnterior(null);
						} else {
							DebitoCreditoSituacao debitoCreditoSituacaoAnterior = new DebitoCreditoSituacao();
							debitoCreditoSituacaoAnterior.setId(situacaoAnterior);
							debitoACobrarParaAtualizacao.setDebitoCreditoSituacaoAnterior(debitoCreditoSituacaoAnterior);
						}
		
						debitoACobrarParaAtualizacao.setUltimaAlteracao(new Date());
		
		//				debitoACobrarParaAtualizacao.setAnoMesReferenciaContabil(Util.recuperaAnoMesDaData(new Date()));
					    //alterado por Vivianne Sousa 01/09/2008 
				        //analista :Aryed 
				        Integer referenciaContabil = obterReferenciaContabilParcelamentoOUConta(
				        		isContaEntradaParcelamento, 
				        		guiaPagamentoParcelamento != null ? guiaPagamentoParcelamento.getAnoMesReferenciaContabil() : null, 
				        				maiorAnoMesContas);
				        debitoACobrarParaAtualizacao.setAnoMesReferenciaContabil(referenciaContabil);
						
						// Atualiza Débito a Cobrar a base de dados
						getControladorUtil().atualizar(debitoACobrarParaAtualizacao);
						
						// Alterado por Francisco - 26/05/08, por conta do Resumo de Ações de cobrança
						// Analista: Ana Breda
						try {
							// Atualizar documento de cobranca da conta, se houver, para cancelado
							repositorioCobranca.atualizarSituacaoCobrancaDocumentoItem(CobrancaDebitoSituacao.PARCELADO,
									new Date(), null, null, debitoACobrarParaAtualizacao.getId());
						} catch (ErroRepositorioException ex) {
							sessionContext.setRollbackOnly();
							new ControladorException("erro.sistema", ex);
						}						
					}
				}
			}
		
			// 6.1.5 Para cada crédito a realizar
			if (helper.getIndicadorCreditoARealizar().equals(ConstantesSistema.SIM.toString())) {
				
				if (helper.getColecaoCreditoARealizar() != null && 
					!helper.getColecaoCreditoARealizar().isEmpty()) {
					
					Iterator creditoARealizarValores = helper.getColecaoCreditoARealizar().iterator();
					
					Integer situacaoAnterior = null;
		
					while (creditoARealizarValores.hasNext()) {
						CreditoARealizar creditoARealizar = (CreditoARealizar) creditoARealizarValores.next();
		
						FiltroCreditoARealizar filtroCreditoARealizar = new FiltroCreditoARealizar();
						filtroCreditoARealizar.adicionarParametro(new ParametroSimples(
								FiltroCreditoARealizar.ID, creditoARealizar.getId()));
		
						filtroCreditoARealizar.adicionarCaminhoParaCarregamentoEntidade("imovel");
						
						Collection creditoARealizarPesquisada = getControladorUtil()
								.pesquisar(filtroCreditoARealizar,CreditoARealizar.class.getName());
		
						CreditoARealizar creditoARealizarParaAtualizacao = new CreditoARealizar();
						if (creditoARealizarPesquisada != null && !creditoARealizarPesquisada.isEmpty()) {
							creditoARealizarParaAtualizacao = (CreditoARealizar) creditoARealizarPesquisada.iterator().next();
						}
						
						if (creditoARealizarParaAtualizacao.getImovel() != null && creditoARealizarParaAtualizacao.getImovel().getId().intValue() != helper.getImovel().getId().intValue()) {
							throw new ControladorException("atencao.parcelamento.divergente");
						}
		
						// 6.1.5.1 Situação anterior
						if ( Util.compararAnoMesReferencia(creditoARealizar.getAnoMesReferenciaContabil(),sistemaParametros.getAnoMesFaturamento(), "=") 
								   || (Util.compararAnoMesReferencia(creditoARealizar.getAnoMesReferenciaContabil(),sistemaParametros.getAnoMesFaturamento(), ">")))  {
							situacaoAnterior = creditoARealizar.getDebitoCreditoSituacaoAtual().getId();
						} else {
							situacaoAnterior = null;
						}
		
						// 6.1.5.2 Situação atual
						DebitoCreditoSituacao debitoCreditoSituacaoAtual = new DebitoCreditoSituacao();
						debitoCreditoSituacaoAtual.setId(DebitoCreditoSituacao.PARCELADA);
						creditoARealizarParaAtualizacao.setDebitoCreditoSituacaoAtual(debitoCreditoSituacaoAtual);
		
						if (situacaoAnterior == null) {
							creditoARealizarParaAtualizacao.setDebitoCreditoSituacaoAnterior(null);
						} else {
							DebitoCreditoSituacao debitoCreditoSituacaoAnterior = new DebitoCreditoSituacao();
							debitoCreditoSituacaoAnterior.setId(situacaoAnterior);
							creditoARealizarParaAtualizacao.setDebitoCreditoSituacaoAnterior(debitoCreditoSituacaoAnterior);
						}
		
						creditoARealizarParaAtualizacao.setUltimaAlteracao(new Date());
		
		//				creditoARealizarParaAtualizacao.setAnoMesReferenciaContabil(Util.recuperaAnoMesDaData(new Date()));
					    //alterado por Vivianne Sousa 01/09/2008 
				        //analista :Aryed 
				        Integer referenciaContabil = obterReferenciaContabilParcelamentoOUConta
				        (isContaEntradaParcelamento, 
				        		guiaPagamentoParcelamento != null ? guiaPagamentoParcelamento.getAnoMesReferenciaContabil() : null, 
				        				maiorAnoMesContas);
				        creditoARealizarParaAtualizacao.setAnoMesReferenciaContabil(referenciaContabil);
						
						// Atualiza Crédito a Realizar na base de dados
						getControladorUtil().atualizar(creditoARealizarParaAtualizacao);
					}
				}
			}
		
			// 6.1.7 [SB0008] Gerar Dados do Parcelamento
			BigDecimal valorJurosParcelamento = BigDecimal.ZERO;
			if (helper.getTaxaJuros() != null && !helper.getTaxaJuros().equals(new BigDecimal("0.00"))) {
				
				valorJurosParcelamento = helper.getValorASerParcelado().add(helper.getValorEntradaInformado());
				
				valorJurosParcelamento = valorJurosParcelamento.subtract(helper.getValorASerNegociado());
		
				if (valorJurosParcelamento.compareTo(BigDecimal.ZERO) == -1) {
					valorJurosParcelamento = BigDecimal.ZERO;
				}
			}
		
			 Integer referenciaContabil = obterReferenciaContabilParcelamentoOUConta(
		        		isContaEntradaParcelamento,anoMesVencimentoGuia, maiorAnoMesContas);
			 
			parcelamentoId = gerarDadosParcelamento(
					helper.getDataParcelamento(),
					helper.getValorTotalContaValores(), 
					helper.getValorGuiasPagamento(),
					helper.getValorDebitoACobrarServico(), 
					helper.getValorDebitoACobrarParcelamento(),
					helper.getValorCreditoARealizar(), 
					helper.getValorAtualizacaoMonetaria(),
					helper.getValorJurosMora(), 
					helper.getValorMulta(), 
					helper.getValorDebitoTotalAtualizado(),
					helper.getDescontoAcrescimosImpontualidade(), 
					helper.getDescontoAntiguidadeDebito(),
					helper.getDescontoInatividadeLigacaoAgua(), 
					helper.getValorEntradaInformado(),
					valorJurosParcelamento, 
					helper.getNumeroPrestacoes(), 
					helper.getValorPrestacao(),
					helper.getIndicadorRestabelecimento().equals("") ? null : new Short(helper.getIndicadorRestabelecimento()), 
					helper.getIndicadorContasRevisao().equals("") ? null : new Short(helper.getIndicadorContasRevisao()),
					helper.getIndicadorGuiasPagamento().equals("") ? null : new Short(helper.getIndicadorGuiasPagamento()),
					helper.getIndicadorAcrescimosImpotualidade().equals("") ? null : new Short(helper.getIndicadorAcrescimosImpotualidade()),
					helper.getIndicadorDebitosACobrar().equals("") ? null : new Short(helper.getIndicadorDebitosACobrar()), 
					helper.getIndicadorCreditoARealizar().equals("") ? null : new Short(helper.getIndicadorCreditoARealizar()),
					helper.getPercentualDescontoAcrescimosImpontualidade(),
					helper.getPercentualDescontoAntiguidadeDebito(),
					helper.getPercentualDescontoInatividadeLigacaoAgua(), 
					helper.getImovel(),
					helper.getUsuarioLogado(), 
					helper.getParcelamentoPerfilId(), 
					colecaoContasParaParcelamento,
					helper.getColecaoGuiaPagamentoValores(), 
					helper.getColecaoDebitoACobrar(),
					helper.getColecaoCreditoARealizar(), 
					helper.getTaxaJuros(),
					helper.getIndicadorConfirmacaoParcelamento().equals("") ? ConstantesSistema.SIM	: new Short(helper.getIndicadorConfirmacaoParcelamento()), 
					helper.getCliente(),
					helper.getDescontoSancoesRDEspecial(), 
					helper.getDescontoTarifaSocialRDEspecial(),
					referenciaContabil,
					helper.getDescontoSobreDebitoTotal());
		
			// 6.1.8 [UC0108] Determinar a quantidade de economias por categoria
			Collection<Categoria> colecaoCategoria = getControladorImovel()
			.obterQuantidadeEconomiasCategoria(helper.getImovel());
		
			// 6.1.6 [SB0004] Gerar Débitos a Cobrar dos Acréscimos por
			// Impontualidade
			gerarDebitosACobrarAcrescimosImpontualidade(helper.getImovel(),
			helper.getValorAtualizacaoMonetaria(), helper.getValorJurosMora(), helper.getValorMulta(),
			helper.getTaxaJuros(), parcelamentoId, colecaoCategoria, usuarioLogado, isContaEntradaParcelamento, anoMesVencimentoGuia, maiorAnoMesContas);
		
			BigDecimal valorEntrada = BigDecimal.ZERO;
			if (helper.getValorEntradaInformado().equals(BigDecimal.ZERO)) {
				valorEntrada = helper.getValorEntradaMinima();
			} else {
				valorEntrada = helper.getValorEntradaInformado();
			}
		
			// 6.1.9 [SB0005] Gerar Débitos a Cobrar
			// valorTotalJurosParcelamento
			// if (indicadorDebitosACobrar.equals("1")) {
			gerarDebitosACobrarParcelamento(helper.getImovel(), helper.getNumeroPrestacoes(),
			helper.getValorTotalContaValores(), helper.getValorGuiasPagamento(),
			helper.getValorAcrescimosServicosCurtoPrazo(),
			helper.getValorAcrescimosServicosLongoPrazo(),
			helper.getValorAcrescimosParcelamentosCurtoPrazo(),
			helper.getValorAcrescimosParcelamentosLongoPrazo(),
			helper.getValorAcrescimosImpontualidade(),
			helper.getValorDebitoACobrarServicoCurtoPrazo(),
			helper.getValorDebitoACobrarServicoLongoPrazo(),
			helper.getValorDebitoACobrarParcelamentoCurtoPrazo(),
			helper.getValorDebitoACobrarParcelamentoLongoPrazo(),
			valorJurosParcelamento, helper.getTaxaJuros(), parcelamentoId,
			colecaoCategoria, valorEntrada, new Integer(helper.getIndicadorDividaAtiva()), usuarioLogado, 
			isContaEntradaParcelamento, anoMesVencimentoGuia, maiorAnoMesContas);
			// }
		
			// 6.1.10 [SB0006] Gera os crédito a realizar
			// if (indicadorCreditoARealizar.equals("1")) {
			gerarCreditoARealizarParcelamento(helper.getImovel(), helper.getNumeroPrestacoes(),
			valorJurosParcelamento, parcelamentoId,
			helper.getDescontoAcrescimosImpontualidade(), helper.getDescontoAntiguidadeDebito(),
			helper.getDescontoInatividadeLigacaoAgua(),
			helper.getValorCreditoARealizar(), colecaoCategoria,
			helper.getDescontoSancoesRDEspecial(), helper.getDescontoTarifaSocialRDEspecial(), 
			isContaEntradaParcelamento, anoMesVencimentoGuia, maiorAnoMesContas, helper.getDescontoSobreDebitoTotal());
			// }
		
			// 6.1.13.1 [SB0007] Gera a entrada do parcelamento
			gerarEntradaParcelamento(helper.getImovel(), valorEntrada, valorJurosParcelamento,
			parcelamentoId, colecaoCategoria, colecaoContasParaParcelamento,
			helper.getUsuarioLogado(), sistemaParametros, isContaEntradaParcelamento, anoMesVencimentoGuia, maiorAnoMesContas);
		
			// Atualiza a quantidade de parcelamentos e reparcelamenos do imóvel
			Short numeroParcelamento = 0;
			Short numeroReparcelamento = new Short("0");
			Short numeroReparcelamentoConsecutivos = new Short("0");
		
			FiltroDebitoACobrar filtroDebitoACobrar = new FiltroDebitoACobrar();
			filtroDebitoACobrar.adicionarParametro(new ParametroSimples(
					FiltroDebitoACobrar.IMOVEL_ID, helper.getImovel().getId()));
			filtroDebitoACobrar.adicionarParametro(new ParametroSimples(
					FiltroDebitoACobrar.FINANCIAMENTO_TIPO_ID,
					FinanciamentoTipo.PARCELAMENTO_AGUA,
					FiltroParametro.CONECTOR_OR, 3));
			filtroDebitoACobrar.adicionarParametro(new ParametroSimples(
					FiltroDebitoACobrar.FINANCIAMENTO_TIPO_ID,
					FinanciamentoTipo.PARCELAMENTO_ESGOTO,
					FiltroParametro.CONECTOR_OR));
			filtroDebitoACobrar.adicionarParametro(new ParametroSimples(
					FiltroDebitoACobrar.FINANCIAMENTO_TIPO_ID,
					FinanciamentoTipo.PARCELAMENTO_SERVICO));
		
			Collection colecaoDebitoACobrarParcelamento = getControladorUtil()
					.pesquisar(filtroDebitoACobrar, DebitoACobrar.class.getName());
		
			Collection colecaoDebitoCobradoParcelamento = null;
			if (colecaoContasParaParcelamento != null && !colecaoContasParaParcelamento.isEmpty()) {
				Iterator contaValores = colecaoContasParaParcelamento.iterator();
		
				while (contaValores.hasNext()) {
					ContaValoresHelper contaValoresHelper = (ContaValoresHelper) contaValores
							.next();
		
					FiltroDebitoCobrado filtroDebitoCobrado = new FiltroDebitoCobrado();
					filtroDebitoCobrado.adicionarParametro(new ParametroSimples(
							FiltroDebitoCobrado.CONTA_ID, contaValoresHelper
									.getConta().getId()));
					filtroDebitoCobrado.adicionarParametro(new ParametroSimples(
							FiltroDebitoCobrado.FINANCIAMENTO_TIPO_ID,
							FinanciamentoTipo.PARCELAMENTO_AGUA,
							FiltroParametro.CONECTOR_OR, 3));
					filtroDebitoCobrado.adicionarParametro(new ParametroSimples(
							FiltroDebitoCobrado.FINANCIAMENTO_TIPO_ID,
							FinanciamentoTipo.PARCELAMENTO_ESGOTO,
							FiltroParametro.CONECTOR_OR));
					filtroDebitoCobrado.adicionarParametro(new ParametroSimples(
							FiltroDebitoCobrado.FINANCIAMENTO_TIPO_ID,
							FinanciamentoTipo.PARCELAMENTO_SERVICO));
		
					colecaoDebitoCobradoParcelamento = getControladorUtil()
							.pesquisar(filtroDebitoCobrado,
									DebitoCobrado.class.getName());
				}
		
			}
		
			if (colecaoDebitoACobrarParcelamento != null
					&& !colecaoDebitoACobrarParcelamento.isEmpty()
					|| colecaoDebitoCobradoParcelamento != null
					&& !colecaoDebitoCobradoParcelamento.isEmpty()) {
				if (helper.getImovel().getNumeroReparcelamento() == null) {
					numeroReparcelamento = new Short("0");
				} else {
					numeroReparcelamento = (short) (helper.getImovel()
							.getNumeroReparcelamento() + 1);
				}
				if (helper.getImovel().getNumeroReparcelamentoConsecutivos() == null) {
					numeroReparcelamentoConsecutivos = new Short("0");
				} else {
					numeroReparcelamentoConsecutivos = (short) (helper.getImovel()
							.getNumeroReparcelamentoConsecutivos() + 1);
				}
		
			}
			if (helper.getImovel().getNumeroParcelamento() == null) {
				numeroParcelamento = new Short("1");
			} else {
				numeroParcelamento = (short) (helper.getImovel().getNumeroParcelamento() + 1);
			}
		
			helper.getImovel().setNumeroParcelamento(numeroParcelamento);
			helper.getImovel().setNumeroReparcelamento(numeroReparcelamento);
			helper.getImovel().setNumeroReparcelamentoConsecutivos(numeroReparcelamentoConsecutivos);
			helper.getImovel().setUltimaAlteracao(new Date());
			getControladorUtil().atualizar(helper.getImovel());
		
			// insere CPF p cliente do Parcelamento
			if (helper.getCpfClienteParcelamentoDigitado() != null && 
				!helper.getCpfClienteParcelamentoDigitado().equals("")) {
				
				getControladorCliente().atualizarCPFCliente(
				helper.getCpfClienteParcelamentoDigitado(), helper.getCliente().getId(), helper.getUsuarioLogado());
			}
		
		}catch (ControladorException e) {
			sessionContext.setRollbackOnly();
			throw e;
		}catch (Exception e) {
			sessionContext.setRollbackOnly();
			throw new ControladorException("erro.sistema", e);
		}	
		
		return parcelamentoId;
	}

	/**
	 * 
	 * Inseri um Cornograma de Cobrança com as Ações de Cobranças e suas
	 * Atividades
	 * 
	 * [UC0312] Inserir Cornograma de Cobrança
	 * 
	 * @author Flávio Cordeiro
	 * @param usuarioLogado
	 * @data 25/04/2006
	 * 
	 * @param cobrancaGrupoCronogramaMes,
	 *            cobrancaAcaoCronograma,
	 *            cobrancasAtividadesParaInsercao(Collection)
	 */

	public void inserirCobrancaCronograma(
			Collection colecaoCobrancaCronogramaHelper, Usuario usuarioLogado)
			throws ControladorException {

		SistemaParametro sistemaParametro = getControladorUtil()
				.pesquisarParametrosDoSistema();

		// ------------ REGISTRAR TRANSAÇÃO ----------------------------
		RegistradorOperacao registradorOperacao = new RegistradorOperacao(
				Operacao.OPERACAO_INSERIR_CRONOGRAMA_COBRANCA,
				new UsuarioAcaoUsuarioHelper(usuarioLogado,
						UsuarioAcao.USUARIO_ACAO_EFETUOU_OPERACAO));
		// ------------ REGISTRAR TRANSAÇÃO ----------------------------

		Iterator iteratorHelper = colecaoCobrancaCronogramaHelper.iterator();
		
		// -- Validar se todas as rotas do grupo informado possui um criterio definido para cada ação
		Integer idGrupoCobranca = null;
		Collection<Integer> idsAcoesCobranca = new ArrayList<Integer>();
		
		for (CobrancaCronogramaHelper cobrancaCronograma : (Collection<CobrancaCronogramaHelper>) colecaoCobrancaCronogramaHelper) {
			idGrupoCobranca = cobrancaCronograma.getCobrancaGrupoCronogramaMes().getCobrancaGrupo().getId();
			idsAcoesCobranca.add(cobrancaCronograma.getCobrancaAcaoCronograma().getCobrancaAcao().getId());
		}
		
		if (idsAcoesCobranca.size() > 0) {
			PesquisarQtdeRotasSemCriteriosParaAcoesCobranca filtro = new PesquisarQtdeRotasSemCriteriosParaAcoesCobranca();
			filtro.setIdGrupoCobranca(idGrupoCobranca);
			filtro.setIdsAcoesCobranca(idsAcoesCobranca);
		
			Integer qtdeRotasSemCriterios = pesquisarQtdeRotasSemCriteriosParaAcoesCobranca(filtro);
			if (qtdeRotasSemCriterios != null && qtdeRotasSemCriterios.intValue() > 0) { 
				throw new ControladorException("atencao.rotas.sem.criterio.para.acao.cobranca");
			}
		}
		// -------------

		Map<CobrancaAcaoAtividadeHelper, Date> mapAcaoAtividadeDataPrevista = new HashMap();

		CobrancaCronogramaHelper cobrancaCronogramaHelper = null;
		CobrancaGrupoCronogramaMes cobrancaGrupoCronogramaMes = null;
		CobrancaAcaoCronograma cobrancaAcaoCronograma = null;
		Collection cobrancasAtividadesParaInsercao = null;
		// Collection colecaoCobrancaAcao = null;
		Collection colecaoAtividades = null;

		Integer idCobrancaGrupoCronogramaMesRetorno = null;
		Integer idCobrancaAcaoCronogramaRetorno = null;
		CobrancaGrupoCronogramaMes cobrancaGrupoCronogramaMesRetorno = null;
		CobrancaAcaoCronograma cobrancaAcaoCronogramaRetorno = null;
		// CobrancaAcaoCronograma cobrancaAcaoCronogramaAnterior = null;

		// FiltroCobrancaAcao filtroCobrancaAcao = null;
		FiltroCobrancaAtividade filtroCobrancaAtividade = new FiltroCobrancaAtividade();
		filtroCobrancaAtividade.adicionarParametro(new ParametroSimples(
				FiltroCobrancaAtividade.INDICADOR_USO,
				ConstantesSistema.INDICADOR_USO_ATIVO));
		colecaoAtividades = getControladorUtil().pesquisar(
				filtroCobrancaAtividade, CobrancaAtividade.class.getName());

		// ----Usado para comparar a ultima data da acao anterior com a primeira
		// da atual
		Calendar ultimaDataAcaoAnterior = Calendar.getInstance();
		int inserirCronograma = 0;
		int comparaGrupo = 0;

		CobrancaAcaoAtividadeCronograma cobrancaAcaoAtividadeCronogramaTeste = null;
		// CobrancaAcaoAtividadeCronograma
		// cobrancaAcaoAtividadeCronogramaAnterior = null;

		while (iteratorHelper.hasNext()) {
			// inserirCronograma = 0;
			cobrancaCronogramaHelper = (CobrancaCronogramaHelper) iteratorHelper
					.next();

			cobrancaGrupoCronogramaMes = cobrancaCronogramaHelper
					.getCobrancaGrupoCronogramaMes();
			cobrancasAtividadesParaInsercao = cobrancaCronogramaHelper
					.getCobrancasAtividadesParaInsercao();
			cobrancaAcaoCronograma = cobrancaCronogramaHelper
					.getCobrancaAcaoCronograma();

			// verifica se existe rotas para o cronograma e a ação especifica
			FiltroRota filtroRota = new FiltroRota();
			filtroRota.adicionarParametro(new ParametroSimples(
					FiltroRota.COBRANCA_GRUPO_ID, cobrancaGrupoCronogramaMes
							.getCobrancaGrupo().getId()));
			if (cobrancaAcaoCronograma.getCobrancaAcao().getId() != null
					&& cobrancaAcaoCronograma.getCobrancaAcao().getId().equals(
							CobrancaAcao.CORTE_ADMINISTRATIVO)
					&& sistemaParametro.getCodigoEmpresaFebraban() != null
					&& sistemaParametro.getCodigoEmpresaFebraban().equals(
							Empresa.EMPRESA_FEBRABAN_COMPESA)) {
				filtroRota.adicionarParametro(new ParametroSimplesDiferenteDe(
						FiltroRota.EMPRESA_COBRANCA_ID, 1));
			}
			Collection<Rota> colecaoRotas = getControladorUtil().pesquisar(
					filtroRota, Rota.class.getName());

			if (colecaoRotas == null || colecaoRotas.isEmpty()) {
				sessionContext.setRollbackOnly();
				throw new ControladorException(
						"atencao.cobranca.nao.existe.rotas.grupo");
			}

			if (comparaGrupo == 0) {
				comparaGrupo = 1;
				/**
				 * [FS0002] Validar referência do cronograma
				 */
				FiltroCobrancaGrupo filtroCobrancaGrupo = new FiltroCobrancaGrupo();
				filtroCobrancaGrupo.adicionarParametro(new ParametroSimples(
						FiltroCobrancaGrupo.ID, cobrancaGrupoCronogramaMes
								.getCobrancaGrupo().getId()));
				Collection cobrancaGrupos;

				cobrancaGrupos = getControladorUtil().pesquisar(
						filtroCobrancaGrupo, CobrancaGrupo.class.getName());

				CobrancaGrupo cobrancaGrupo = null;

				if (!cobrancaGrupos.isEmpty()) {
					cobrancaGrupo = (CobrancaGrupo) cobrancaGrupos.iterator()
							.next();
					if (cobrancaGrupoCronogramaMes.getAnoMesReferencia() < cobrancaGrupo
							.getAnoMesReferencia()) {
						sessionContext.setRollbackOnly();
						throw new ControladorException(
								"atencao.cobranca.mes_ano_anterior_grupo",
								null, Util
										.formatarAnoMesParaMesAno(cobrancaGrupo
												.getAnoMesReferencia()));
					}
				}

				/**
				 * [FS0003] Verificar existência do cronograma para o grupo
				 */
				FiltroCobrancaGrupoCronogramaMes filtroCobrancaGrupoCronogramaMes = new FiltroCobrancaGrupoCronogramaMes();
				filtroCobrancaGrupoCronogramaMes
						.adicionarParametro(new ParametroSimples(
								FiltroCobrancaGrupoCronogramaMes.ID_COBRANCA_GRUPO,
								cobrancaGrupoCronogramaMes.getCobrancaGrupo()
										.getId()));
				filtroCobrancaGrupoCronogramaMes
						.adicionarParametro(new ParametroSimples(
								FiltroCobrancaGrupoCronogramaMes.ANO_MES_REFERENCIA,
								cobrancaGrupoCronogramaMes
										.getAnoMesReferencia()));

				Collection colecaoCobrancaGrupoCronogramaMes = getControladorUtil()
						.pesquisar(filtroCobrancaGrupoCronogramaMes,
								CobrancaGrupoCronogramaMes.class.getName());

				if (!colecaoCobrancaGrupoCronogramaMes.isEmpty()) {
					sessionContext.setRollbackOnly();
					throw new ControladorException(
							"atencao.cobranca.existencia_cronograma_grupo",
							null,
							cobrancaGrupo.getDescricao(),
							Util
									.formatarAnoMesParaMesAno(cobrancaGrupoCronogramaMes
											.getAnoMesReferencia()));
				}
			}

			/**
			 * [FS0004] Validar Datas Previstas
			 */
			Iterator iteratorTestaDatas = cobrancasAtividadesParaInsercao
					.iterator();

			//int mes = 0;
			//int ano = 0;
			int mudarCronograma = 0;
			//String anoMes = null;
			Calendar dataCobrancaTeste = Calendar.getInstance();
			// Calendar dataCobrancaAnterior = null;

			while (iteratorTestaDatas.hasNext()) {
				// if (cobrancaAcaoAtividadeCronogramaAnterior == null) {
				cobrancaAcaoAtividadeCronogramaTeste = (CobrancaAcaoAtividadeCronograma) iteratorTestaDatas
						.next();
				dataCobrancaTeste.setTime(cobrancaAcaoAtividadeCronogramaTeste
						.getDataPrevista());
				/**
				 * [FS0006] Verifica Ação Predecessora
				 */
				mapAcaoAtividadeDataPrevista = validarAtividadeAcaoPredecessora(
						cobrancaAcaoCronograma.getCobrancaAcao(),
						cobrancaAcaoCronograma.getCobrancaAcao()
								.getCobrancaAcaoPredecessora(),
						cobrancaAcaoAtividadeCronogramaTeste,
						mapAcaoAtividadeDataPrevista);

				//Retirado por Romulo Aurelio Data:21/07/2010
				//Correcao da CRC 4660 
				//Analista:Eduardo Borges
				/*if (cobrancaAcaoAtividadeCronogramaTeste.getDataPrevista() != null) {
					dataCobrancaTeste
							.setTime(cobrancaAcaoAtividadeCronogramaTeste
									.getDataPrevista());

					ano = dataCobrancaTeste.get(Calendar.YEAR);
					mes = dataCobrancaTeste.get(Calendar.MONTH) + 1;

					if (mes < 10) {
						anoMes = ano + "0" + mes;
					} else {
						anoMes = ano + "" + mes;
					}
					if (cobrancaGrupoCronogramaMes.getAnoMesReferencia() > Integer
							.parseInt(anoMes)) {
						sessionContext.setRollbackOnly();
						throw new ControladorException(
								"atencao.cobranca.data_prevista_mes_ano_menor",
								null, cobrancaAcaoAtividadeCronogramaTeste
										.getCobrancaAtividade()
										.getDescricaoCobrancaAtividade(),
								cobrancaAcaoCronograma.getCobrancaAcao()
										.getDescricaoCobrancaAcao());
					}
				}*/

				if (mudarCronograma == 0) {

					if (inserirCronograma == 0) {
						// ------------ REGISTRAR TRANSAÇÃO ----------------
						registradorOperacao
								.registrarOperacao(cobrancaGrupoCronogramaMes);
						// ------------ REGISTRAR TRANSAÇÃO ---------------

						inserirCronograma = 1;
						cobrancaGrupoCronogramaMes
								.setUltimaAlteracao(new Date());
						idCobrancaGrupoCronogramaMesRetorno = (Integer) getControladorUtil()
								.inserir(cobrancaGrupoCronogramaMes);
						cobrancaGrupoCronogramaMesRetorno = new CobrancaGrupoCronogramaMes();
						cobrancaGrupoCronogramaMesRetorno
								.setId(idCobrancaGrupoCronogramaMesRetorno);
					}

					// ------------ REGISTRAR TRANSAÇÃO ----------------
					registradorOperacao
							.registrarOperacao(cobrancaAcaoCronograma);
					// ------------ REGISTRAR TRANSAÇÃO ---------------

					if (cobrancaAcaoCronograma.getCobrancaAcao()
							.getIndicadorObrigatoriedade().intValue() == 2
							&& cobrancaAcaoAtividadeCronogramaTeste
									.getDataPrevista() == null) {

					} else {
						mudarCronograma = colecaoAtividades.size();

						cobrancaAcaoCronograma.setUltimaAlteracao(new Date());
						cobrancaAcaoCronograma
								.setCobrancaGrupoCronogramaMes(cobrancaGrupoCronogramaMesRetorno);
						idCobrancaAcaoCronogramaRetorno = (Integer) getControladorUtil()
								.inserir(cobrancaAcaoCronograma);
						cobrancaAcaoCronogramaRetorno = new CobrancaAcaoCronograma();
						cobrancaAcaoCronogramaRetorno
								.setId(idCobrancaAcaoCronogramaRetorno);
					}

				}
				// ------------ REGISTRAR TRANSAÇÃO ----------------
				registradorOperacao
						.registrarOperacao(cobrancaAcaoAtividadeCronogramaTeste);
				// ------------ REGISTRAR TRANSAÇÃO ---------------
				if (cobrancaAcaoCronograma.getCobrancaAcao()
						.getIndicadorObrigatoriedade().intValue() == 2
						&& cobrancaAcaoAtividadeCronogramaTeste
								.getDataPrevista() == null) {

				} else {
					cobrancaAcaoAtividadeCronogramaTeste
							.setCobrancaAcaoCronograma(cobrancaAcaoCronogramaRetorno);
					cobrancaAcaoAtividadeCronogramaTeste
							.setUltimaAlteracao(new Date());
					cobrancaAcaoAtividadeCronogramaTeste
							.setQuantidadeDocumentos(new Integer(0));
					cobrancaAcaoAtividadeCronogramaTeste
							.setValorDocumentos(new BigDecimal(0));
					cobrancaAcaoAtividadeCronogramaTeste
							.setQuantidadeItensCobrados(new Integer(0));

					getControladorUtil().inserir(
							cobrancaAcaoAtividadeCronogramaTeste);
					if (cobrancaAcaoAtividadeCronogramaTeste.getDataPrevista() != null) {
						ultimaDataAcaoAnterior
								.setTime(cobrancaAcaoAtividadeCronogramaTeste
										.getDataPrevista());
					}
					// cobrancaAcaoAtividadeCronogramaAnterior =
					// cobrancaAcaoAtividadeCronogramaTeste;
					// diminui um no contador de mudanca de Cronograma
					mudarCronograma -= 1;
				}
			}

			// cobrancaAcaoCronogramaAnterior = cobrancaAcaoCronograma;
		}

	}

	public void validarAcaoCobrancaCronogramaPredecessora(
			Collection colecaoCobrancaCronogramaHelper,
			CobrancaCronogramaHelper cobrancaCronogramaHelperAtual)
			throws ControladorException {

		if (cobrancaCronogramaHelperAtual.getCobrancaAcaoCronograma() != null
				&& cobrancaCronogramaHelperAtual.getCobrancaAcaoCronograma()
						.getCobrancaAcao().getCobrancaAcaoPredecessora() != null) {
			CobrancaCronogramaHelper cobrancaCronogramaHelperAnterior = null;
			CobrancaAcaoAtividadeCronograma cobrancaAcaoAtividadeCronogramaAnterior = null;
			// Calendar dataAtividadeAcaoPredecesora = Calendar.getInstance();
			CobrancaAcaoAtividadeCronograma cobrancaAcaoAtividadeCronogramaAtual = (CobrancaAcaoAtividadeCronograma) cobrancaCronogramaHelperAtual
					.getCobrancasAtividadesParaInsercao().iterator().next();

			Iterator iteratorAcao = colecaoCobrancaCronogramaHelper.iterator();
			while (iteratorAcao.hasNext()) {
				cobrancaCronogramaHelperAnterior = (CobrancaCronogramaHelper) iteratorAcao
						.next();

				if (cobrancaCronogramaHelperAtual.getCobrancaAcaoCronograma()
						.getCobrancaAcao().getCobrancaAcaoPredecessora()
						.getId().equals(
								cobrancaCronogramaHelperAnterior
										.getCobrancaAcaoCronograma()
										.getCobrancaAcao().getId())) {
					break;
				}
			}

			Iterator iteratorAtividadeCronograma = cobrancaCronogramaHelperAnterior
					.getCobrancasAtividadesParaInsercao().iterator();
			while (iteratorAtividadeCronograma.hasNext()) {
				cobrancaAcaoAtividadeCronogramaAnterior = (CobrancaAcaoAtividadeCronograma) iteratorAtividadeCronograma
						.next();
			}

			if ((cobrancaAcaoAtividadeCronogramaAnterior.getDataPrevista() != null)
					&& cobrancaAcaoAtividadeCronogramaAtual.getDataPrevista() != null
					&& cobrancaAcaoAtividadeCronogramaAnterior
							.getDataPrevista().after(
									cobrancaAcaoAtividadeCronogramaAtual
											.getDataPrevista())) {
				sessionContext.setRollbackOnly();
				throw new ControladorException(
						"atencao.cobranca.data_prevista_predecessora_maior");
			}
			if ((cobrancaAcaoAtividadeCronogramaAnterior != null)
					&& (cobrancaAcaoAtividadeCronogramaAnterior
							.getDataPrevista() == null)
					&& (cobrancaCronogramaHelperAtual
							.getCobrancaAcaoCronograma().getCobrancaAcao()
							.getCobrancaAcaoPredecessora() != null)
					&& cobrancaAcaoAtividadeCronogramaAtual.getDataPrevista() != null) {
				sessionContext.setRollbackOnly();
				throw new ControladorException(
						"atencao.cobranca.data_predecessora_nula", null,
						cobrancaCronogramaHelperAtual
								.getCobrancaAcaoCronograma().getCobrancaAcao()
								.getDescricaoCobrancaAcao());
			}
			if ((cobrancaAcaoAtividadeCronogramaAnterior != null)
					&& (cobrancaAcaoAtividadeCronogramaAnterior.getComando() == null)
					&& (cobrancaAcaoAtividadeCronogramaAtual.getComando() != null)) {
				sessionContext.setRollbackOnly();
				throw new ControladorException(
						"atencao.cobranca.comandar_predecessora", null,
						cobrancaCronogramaHelperAtual
								.getCobrancaAcaoCronograma().getCobrancaAcao()
								.getDescricaoCobrancaAcao());
			}
			if ((cobrancaAcaoAtividadeCronogramaAtual.getCobrancaAtividade()
					.getCobrancaAtividadePredecessora() != null)
					&& (cobrancaAcaoAtividadeCronogramaAnterior.getComando() == null)
					&& (cobrancaAcaoAtividadeCronogramaAtual.getComando() != null)) {
				sessionContext.setRollbackOnly();
				throw new ControladorException(
						"atencao.cobranca.comandar_predecessora", null,
						cobrancaCronogramaHelperAtual
								.getCobrancaAcaoCronograma().getCobrancaAcao()
								.getDescricaoCobrancaAcao());
			}
			if (cobrancaAcaoAtividadeCronogramaAnterior.getDataPrevista() != null
					&& cobrancaAcaoAtividadeCronogramaAtual.getDataPrevista() != null
					&& cobrancaAcaoAtividadeCronogramaAnterior
							.getDataPrevista().after(
									cobrancaAcaoAtividadeCronogramaAtual
											.getDataPrevista())) {
				sessionContext.setRollbackOnly();
				throw new ControladorException(
						"atencao.cobranca.data_acao_anterior", null,
						cobrancaCronogramaHelperAtual
								.getCobrancaAcaoCronograma().getCobrancaAcao()
								.getDescricaoCobrancaAcao());
			}
		}

	}

	/**
	 * 
	 * Filtrar Cronograma de Cobrança com as Ações de Cobranças e suas
	 * Atividades
	 * 
	 * [UC03125] Inserir Cronograma de Cobrança
	 * 
	 * @author Flávio Cordeiro
	 * @data 29/04/2006
	 * 
	 * @param idGrupoCobranca,
	 *            mesAno
	 * @return Colecao de CobrancaAcaoAtividadeCronograma
	 */
	public FiltroCobrancaAcaoAtividadeCronograma filtrarCobrancaCronograma(
			String idGrupoCobranca, String mesAno) throws ControladorException {

		FiltroCobrancaGrupo filtroCobrancaGrupo = new FiltroCobrancaGrupo();

		if (idGrupoCobranca != null && !idGrupoCobranca.equals("-1")
				&& !idGrupoCobranca.equals("")) {
			filtroCobrancaGrupo.adicionarParametro(new ParametroSimples(
					FiltroCobrancaGrupo.ID, idGrupoCobranca));
		}

		Collection colecaoCobrancaGrupo = getControladorUtil().pesquisar(
				filtroCobrancaGrupo, CobrancaGrupo.class.getName());

		CobrancaGrupo cobrancaGrupo = (CobrancaGrupo) colecaoCobrancaGrupo
				.iterator().next();

		FiltroCobrancaAcaoAtividadeCronograma filtroCobrancaAcaoAtividadeCronograma = new FiltroCobrancaAcaoAtividadeCronograma();

		/**
		 * [FS0002] Verifica existência de cronograma
		 */

		// filtroCobrancaAcaoAtividadeCronograma
		// .adicionarCaminhoParaCarregamentoEntidade("cobrancaGrupo");
		// filtroCobrancaAcaoAtividadeCronograma.adicionarCaminhoParaCarregamentoEntidade("cobrancaAcaoCronograma.cobrancaGrupoCronogramaMes.cobrancaGrupo");
		// filtroCobrancaAcaoAtividadeCronograma.adicionarCaminhoParaCarregamentoEntidade("cobrancaAtividade");
		// filtroCobrancaAcaoAtividadeCronograma
		// .adicionarParametro(new ParametroNulo(
		// FiltroCobrancaAcaoAtividadeCronograma.REALIZACAO));
		if (idGrupoCobranca != null && !idGrupoCobranca.equals("-1")
				&& !idGrupoCobranca.equals("")) {
			filtroCobrancaAcaoAtividadeCronograma
					.adicionarParametro(new ParametroSimples(
							FiltroCobrancaAcaoAtividadeCronograma.COBRANCA_GRUPO,
							idGrupoCobranca));

		}
		// filtroCobrancaAcaoAtividadeCronograma.setCampoOrderBy(filtroCobrancaAcaoAtividadeCronograma.COBRANCA_GRUPO_CRONOGRAMA_MES_MES_ANO);

		if (mesAno != null && !mesAno.trim().equals("")) {
			filtroCobrancaAcaoAtividadeCronograma
					.adicionarParametro(new ParametroSimples(
							FiltroCobrancaAcaoAtividadeCronograma.COBRANCA_GRUPO_CRONOGRAMA_MES_MES_ANO,
							Util.formatarMesAnoComBarraParaAnoMes(mesAno)));

		} else {
			filtroCobrancaAcaoAtividadeCronograma
					.adicionarParametro(new MaiorQue(
							FiltroCobrancaAcaoAtividadeCronograma.COBRANCA_GRUPO_CRONOGRAMA_MES_MES_ANO,
							cobrancaGrupo.getAnoMesReferencia()));
		}

		/*
		 * Collection colecaoCobrancaAcaoAtividadeCronograma =
		 * getControladorUtil().pesquisar(filtroCobrancaAcaoAtividadeCronograma,
		 * CobrancaAcaoAtividadeCronograma.class.getName());
		 * 
		 * if(colecaoCobrancaAcaoAtividadeCronograma.isEmpty()){ throw new
		 * ControladorException("atencao.naocadastrado", null, "grupo de
		 * cobranca"); }
		 */

		return filtroCobrancaAcaoAtividadeCronograma;
	}

	/**
	 * [UC0213] Desfazer Parcelamento Debito
	 * 
	 * @author Fernanda Paiva
	 * @created 29/04/2006
	 * 
	 * @param codigoImovel
	 * @throws ControladorException
	 *             Controlador Exception
	 */

	public void atualizarDadosParcelamentoParaImovel(Integer codigoImovel)
			throws ControladorException {
		try {
			FiltroImovel filtroImovel = new FiltroImovel();

			Imovel imovel = null;

			filtroImovel.adicionarParametro(new ParametroSimples(
					FiltroImovel.ID, codigoImovel));

			Collection<Imovel> colecaoImovel = getControladorUtil().pesquisar(
					filtroImovel, Imovel.class.getName());

			imovel = ((Imovel) ((List) colecaoImovel).get(0));

			Short numeroParcelamento = imovel.getNumeroParcelamento();
			Short numeroReparcelamentoConsecutivo = imovel
					.getNumeroReparcelamentoConsecutivos();
			Short numeroReparcelamento = imovel.getNumeroReparcelamento();

			if (numeroParcelamento > 0) {
				numeroParcelamento = (short) (imovel.getNumeroParcelamento() - 1);
			}
			if (numeroReparcelamentoConsecutivo > 0) {
				numeroReparcelamento = (short) (imovel
						.getNumeroReparcelamento() - 1);
				numeroReparcelamentoConsecutivo = (short) (imovel
						.getNumeroReparcelamentoConsecutivos() - 1);
			}

			repositorioCobranca.atualizarDadosParcelamentoImovel(codigoImovel,
					numeroParcelamento, numeroReparcelamento,
					numeroReparcelamentoConsecutivo);

		} catch (ErroRepositorioException ex) {
			ex.printStackTrace();
			sessionContext.setRollbackOnly();
			throw new ControladorException("erro.sistema", ex);
		}
	}

	/**
	 * [UC0213] Desfazer Parcelamentos por entrada não paga
	 * 
	 * Este caso de uso permite desfazer os parcelamentos de débitos efetuados
	 * no mês cuja entrada não tenha sido paga.
	 * 
	 * @author Fernanda Paiva
	 * @created 02/05/2006
	 * 
	 * @throws ControladorException
	 *             Controlador Exception
	 */
	public void desfazerParcelamentosPorEntradaNaoPaga(
			int idFuncionalidadeIniciada) throws ControladorException {

		int idUnidadeIniciada = 0;

		idUnidadeIniciada = getControladorBatch()
				.iniciarUnidadeProcessamentoBatch(idFuncionalidadeIniciada,
						UnidadeProcessamento.FUNCIONALIDADE, 0);

		// cria uma coleção de parcelamentos de débitos efetuados no mês
		// corrente
		Collection parcelamentosMes = null;
		// cria uma coleção de guias de pagamento correspondente a entrada do
		// parcelamento
		Collection guiaPagamento = null;
		// cria uma coleção de contas correspondente a entrada do
		// parcelamento
		Collection conta = null;
		// cria uma coleção de pagamentos para a guia de pagamento
		// correspondente a entrada do parcelamento
		Collection pagamento = null;
		// cria uma coleção de pagamentos para a guia de pagamento
		// correspondente a entrada do parcelamento
		Collection pagamentoConta = null;

		try {
			// pesquisa os parametros do sistem na base
			SistemaParametro sistemaParametros = getControladorUtil()
					.pesquisarParametrosDoSistema();

			// recupera o ano/mês corrente de faturamento
			int anoMesReferenciaArrecadacao = sistemaParametros.getAnoMesArrecadacao();

			int anoMesReferenciaArrecadacaoMenosUm = anoMesReferenciaArrecadacao;

			// recupera todos os parcelamentos no mes atual e que esteja com a
			// situacao normal
			parcelamentosMes = repositorioCobranca
					.pesquisarParcelamentosSituacaoNormalNoMes(
							ParcelamentoSituacao.NORMAL.toString(),
							anoMesReferenciaArrecadacao);

			if ( !Util.isVazioOrNulo(parcelamentosMes)) {

				Iterator parcelamentosMesIterator = parcelamentosMes.iterator();

				while (parcelamentosMesIterator.hasNext()) {

					// Obtém os dados do crédito realizado
					Object[] dadosParcelamento = (Object[]) parcelamentosMesIterator.next();
					Integer numeroParcelamentosMes = (Integer) dadosParcelamento[0];
					Integer idImovel = (Integer)dadosParcelamento[2];
					
					// recupera todos os parcelamentos no mes atual e que
					// esteja com a situacao normal

					System.out.println(" **** PESQUISAR GUIA POR PARCELAMENTO **** ");
					System.out.println(" ------------------------------------------ ");

					guiaPagamento = repositorioCobranca.pesquisarGuiaPagamentoDoParcelamento(
							numeroParcelamentosMes.toString());

					if (guiaPagamento != null && !guiaPagamento.isEmpty()) {

						Iterator guiaPagamentoIterator = guiaPagamento.iterator();

						while (guiaPagamentoIterator.hasNext()) {

							Object[] dadosGuiaPagamento = (Object[]) guiaPagamentoIterator.next();

							Integer numeroGuiaPagamento = (Integer) dadosGuiaPagamento[0];

							Calendar calendario = new GregorianCalendar();
							String anoMesArrecadacao = anoMesReferenciaArrecadacaoMenosUm + "";

							calendario.set(Calendar.YEAR, new Integer(
								anoMesArrecadacao.substring(0, 4)).intValue());
							calendario.set(Calendar.MONTH, new Integer(
								anoMesArrecadacao.substring(4, 6)).intValue() - 1);
							calendario.set(Calendar.DAY_OF_MONTH, calendario
								.getActualMaximum(Calendar.DAY_OF_MONTH));

							if (((Date) dadosGuiaPagamento[1])
									.compareTo(calendario.getTime()) <= 0) {

								// retorno da pesquisa

								// recupera todos os parcelamentos no mes
								// atual e que esteja com a situacao normal

								System.out.println(" **** PESQUISAR PAGAMENTO DA GUIA **** ");
								System.out.println(" ------------------------------------------ ");

								pagamento = repositorioCobranca
										.pesquisarPagamentoParaGuiaPagamentoDoParcelamento(numeroGuiaPagamento
												.toString(), idImovel);

								if (pagamento == null || pagamento.isEmpty()) {

									System.out.println("");
									System.out.println("");

									System.out.println(" ---------------------------------------------- ");
									System.out.println(" **** DESFAZER " + numeroParcelamentosMes + " **** ");
									System.out.println(" ---------------------------------------------- ");
									System.out.println("");
									System.out.println("");

									Usuario usuarioBatch = this.getControladorUsuario().pesquisarUsuarioRotinaBatch();
									if(usuarioBatch == null){
										throw new ControladorException( "atencao.usuario_rotina_batch_nao_cadastrado" );
									}else{
										this.desfazerParcelamentosDebito(
												ParcelamentoMotivoDesfazer.ENTRADA_NAO_PAGA.toString(),
												numeroParcelamentosMes,usuarioBatch);
									}
									
								}
							}
						}
					} else {

						/*
						 * ===============================================================================
						 * PARTE NOVA - CONTAS
						 * ==============================================================================
						 */

						System.out.println(" **** PESQUISAR CONTA POR PARCELAMENTO **** ");
						System.out.println(" ------------------------------------------ ");

						conta = repositorioCobranca
								.pesquisarContaDoParcelamento(numeroParcelamentosMes);

						if (conta != null && !conta.isEmpty()) {

							Iterator contaIterator = conta.iterator();

							while (contaIterator.hasNext()) {

								Integer numeroConta = (Integer) contaIterator.next();

								System.out.println(" **** PESQUISAR PAGAMENTO DA CONTA **** ");
								System.out.println(" ------------------------------------------ ");

								pagamentoConta = repositorioCobranca
										.pesquisarPagamentoParaContaDoParcelamento(numeroConta
												.toString());

								if (pagamentoConta == null || pagamentoConta.isEmpty()) {

									System.out.println("");
									System.out.println("");
									System.out.println(" ------------------------------------- ");
									System.out.println(" **** DESFAZER CONTA " + numeroParcelamentosMes + " **** ");
									System.out.println(" ------------------------------------- ");
									System.out.println("");
									System.out.println("");

									Usuario usuarioBatch = this.getControladorUsuario().pesquisarUsuarioRotinaBatch();
									if(usuarioBatch == null){
										throw new ControladorException( "atencao.usuario_rotina_batch_nao_cadastrado" );
									}else{
										this.desfazerParcelamentosDebito(
												ParcelamentoMotivoDesfazer.ENTRADA_NAO_PAGA.toString(),
												numeroParcelamentosMes,usuarioBatch);
									}

									break;
								}
							}
						}
					}
				}
			}

			getControladorBatch().encerrarUnidadeProcessamentoBatch(null,
					idUnidadeIniciada, false);

		} catch (Exception ex) {

			getControladorBatch().encerrarUnidadeProcessamentoBatch(ex,
					idUnidadeIniciada, true);
			ex.printStackTrace();
			sessionContext.setRollbackOnly();
			

			throw new EJBException(ex);
		}


	}

	
	/**
	 * Desfazer Parcelamentos Débito
	 * 
	 * Este caso de uso permite desfazer os parcelamentos de débitos
	 * 
	 * @author Fernanda Paiva,Vivianne Sousa, Raphael Rossiter
	 * @created 02/05/2006,19/10/2006, 30/09/2008
	 * 
	 * @throws ControladorException
	 *             Controlador Exception
	 */

	public Integer desfazerParcelamentosDebito(String motivo, Integer codigo,Usuario usuario)
			throws ControladorException {
		try{
			Integer retorno = 0;
	
			FiltroParcelamentoItem filtroParcelamentoItem = new FiltroParcelamentoItem();
	
			filtroParcelamentoItem.adicionarParametro(new ParametroSimples(
					FiltroParcelamentoItem.PARCELAMENTO, codigo));
	
			filtroParcelamentoItem
					.adicionarCaminhoParaCarregamentoEntidade("contaGeral.conta");
	
			filtroParcelamentoItem
					.adicionarCaminhoParaCarregamentoEntidade("parcelamento.imovel");
	
			filtroParcelamentoItem
					.adicionarCaminhoParaCarregamentoEntidade("guiaPagamentoGeral.guiaPagamento");
	
			filtroParcelamentoItem
					.adicionarCaminhoParaCarregamentoEntidade("debitoACobrarGeral.debitoACobrar");
	
			filtroParcelamentoItem
					.adicionarCaminhoParaCarregamentoEntidade("creditoARealizarGeral.creditoARealizar");
	
			// Procura ParcelamentoItem na base
			Collection colecaoParcelamentoItem = getControladorUtil().pesquisar(
					filtroParcelamentoItem, ParcelamentoItem.class.getName());
	
			Iterator parcelamentoItemIterator = colecaoParcelamentoItem.iterator();
			ParcelamentoItem parcelamentoItem = null;
			Integer codigoImovel = null;
			while (parcelamentoItemIterator.hasNext()) {
	
				parcelamentoItem = (ParcelamentoItem) parcelamentoItemIterator
						.next();
	
				codigoImovel = parcelamentoItem.getParcelamento().getImovel()
						.getId();
	
				if (parcelamentoItem.getContaGeral() != null
						&& parcelamentoItem.getContaGeral().getConta() != null) {
					int situacaoAtual = 0;
	
					if (parcelamentoItem.getContaGeral().getConta() != null) {
						Conta conta = parcelamentoItem.getContaGeral().getConta();
	
						if (conta.getDebitoCreditoSituacaoAnterior() == null) {
							
							if (conta.getDataRetificacao() != null){
								
								situacaoAtual = DebitoCreditoSituacao.RETIFICADA.intValue();
							}
							else if (conta.getDataInclusao() != null){
								
								situacaoAtual = DebitoCreditoSituacao.INCLUIDA.intValue();
							}
							else{
								
								situacaoAtual = DebitoCreditoSituacao.NORMAL.intValue();
							}
						} 
						else {
							
							situacaoAtual = conta.getDebitoCreditoSituacaoAnterior().getId();
						}
	
						int anoMesReferenciaContabil = 0;
	
						Collection colecaoContaCanceladaRetificacao = repositorioCobranca
								.pesquisarContaCanceladaRetificacao(
										codigoImovel, conta.getReferencia());
						
						// Mês/ano de referência contábil
						// Caso exista conta com situação atual correspondete a
						// cancelada por retificação
						// CNTA_AMREFERENCIACONTABIL = CNTA_AMREFERENCIACONTABIL da
						// conta cancelada por retificação
						if (colecaoContaCanceladaRetificacao != null
								&& !colecaoContaCanceladaRetificacao.isEmpty()) {
							anoMesReferenciaContabil = ((Integer) colecaoContaCanceladaRetificacao
									.iterator().next()).intValue();
						} else {
							// caso contrário
							// CNTA_AMREFERENCIACONTABIL = CNTA_AMREFERENCIACONTA da
							// conta parcelada
							anoMesReferenciaContabil = conta.getReferencia();
						}
	
						this.atualizarSituacaoConta(conta.getId().toString(),
								situacaoAtual, anoMesReferenciaContabil);
						
						//CRC2725 - alterado por Vivianne Sousa - 24/09/2009 analista:Fátima
						//1.1.4. Verificar se há relação do desfazer parcelamento com itens de negativação:
						getControladorSpcSerasa().
							verificarRelacaoDoParcelamentoComItensNegativacao(
							null, conta, null);
						
						
						// Alterado por Francisco - 27/05/08, por conta do Resumo de Ações de cobrança
						// Analista: Ana Breda
						// Atualizar item de documento de cobranca da conta, se houver, para pendente
						repositorioCobranca.atualizarSituacaoCobrancaDocumentoItem(CobrancaDebitoSituacao.PENDENTE,
								new Date(), conta.getId(), null,null);
					
					}
				}
	
				int situacaoAtualGuia = 0;
	
				if (parcelamentoItem.getGuiaPagamentoGeral() != null
						&& parcelamentoItem.getGuiaPagamentoGeral()
								.getGuiaPagamento() != null) {
	
					GuiaPagamento guiaPagamento = parcelamentoItem
							.getGuiaPagamentoGeral().getGuiaPagamento();
	
					if (guiaPagamento.getDebitoCreditoSituacaoAnterior() != null) {
						situacaoAtualGuia = guiaPagamento
								.getDebitoCreditoSituacaoAnterior().getId();
					} else {
						situacaoAtualGuia = DebitoCreditoSituacao.NORMAL.intValue();
					}
	
					int anoMesReferenciaContabil = Util
							.recuperaAnoMesDaData(guiaPagamento.getDataEmissao());
	
					this.atualizarSituacaoGuiaPagamento(guiaPagamento.getId()
							.toString(), situacaoAtualGuia,
							anoMesReferenciaContabil);
					
					//CRC2725 - alterado por Vivianne Sousa - 24/09/2009 analista:Fátima
					//1.4.4. Verificar se há relação do desfazer parcelamento com itens de negativação:
					getControladorSpcSerasa().
						verificarRelacaoDoParcelamentoComItensNegativacao(
						null, null, guiaPagamento);
					
					// Alterado por Francisco - 27/05/08, por conta do Resumo de Ações de cobrança
					// Analista: Ana Breda
					// Atualizar item de documento de cobranca da conta, se houver, para pendente
					repositorioCobranca.atualizarSituacaoCobrancaDocumentoItem(CobrancaDebitoSituacao.PENDENTE,
							new Date(), null, guiaPagamento.getId(), null);
								
				}
	
				int situacaoAtualDebito = 0;
	
				if (parcelamentoItem.getDebitoACobrarGeral() != null
						&& parcelamentoItem.getDebitoACobrarGeral()
								.getDebitoACobrar() != null) {
	
					DebitoACobrar debitoACobrar = parcelamentoItem
							.getDebitoACobrarGeral().getDebitoACobrar();
	
					if (debitoACobrar.getDebitoCreditoSituacaoAnterior() == null) {
						situacaoAtualDebito = DebitoCreditoSituacao.NORMAL
								.intValue();
					} else {
						situacaoAtualDebito = debitoACobrar
								.getDebitoCreditoSituacaoAnterior().getId();
					}
	
					int anoMesReferenciaContabil = Util
							.recuperaAnoMesDaData(debitoACobrar.getGeracaoDebito());
	
					this.atualizarSituacaoDebitoACobrar(debitoACobrar.getId()
							.toString(), situacaoAtualDebito,
							anoMesReferenciaContabil);
					
					// Alterado por Francisco - 27/05/08, por conta do Resumo de Ações de cobrança
					// Analista: Ana Breda
					// Atualizar item de documento de cobranca da conta, se houver, para pendente
					repositorioCobranca.atualizarSituacaoCobrancaDocumentoItem(CobrancaDebitoSituacao.PENDENTE,
							new Date(), null, null, debitoACobrar.getId());
													
				}
	
				int situacaoAtualCredito = 0;
	
				if (parcelamentoItem.getCreditoARealizarGeral() != null
						&& parcelamentoItem.getCreditoARealizarGeral()
								.getCreditoARealizar() != null) {
	
					CreditoARealizar creditoARealizar = parcelamentoItem
							.getCreditoARealizarGeral().getCreditoARealizar();
	
					if (creditoARealizar.getDebitoCreditoSituacaoAnterior() == null) {
						situacaoAtualCredito = DebitoCreditoSituacao.NORMAL
								.intValue();
					} else {
						situacaoAtualCredito = creditoARealizar
								.getDebitoCreditoSituacaoAnterior().getId();
					}
					int anoMesReferenciaContabil = Util
							.recuperaAnoMesDaData(creditoARealizar
									.getGeracaoCredito());
					this.atualizarSituacaoCreditoARealizar(creditoARealizar.getId()
							.toString(), situacaoAtualCredito,
							anoMesReferenciaContabil);
				}
			}
	
			if (codigoImovel != null) {
				FiltroConta filtroConta = new FiltroConta();
	
				filtroConta
				.adicionarCaminhoParaCarregamentoEntidade("debitoCreditoSituacaoAtual");
				
				filtroConta.adicionarParametro(new ParametroSimples(
				FiltroConta.IMOVEL_ID, codigoImovel));
	
				filtroConta.adicionarParametro(new ParametroSimples(
				FiltroConta.CONTA_MOTIVO_REVISAO_ID,
				ContaMotivoRevisao.REVISAO_POR_PAGAMENTO_COMPROVADO, FiltroParametro.CONECTOR_OR, 2));
				
				filtroConta.adicionarParametro(new ParametroSimples(
				FiltroConta.CONTA_MOTIVO_REVISAO_ID, ContaMotivoRevisao.REVISAO_POR_ANTIGUIDADE));
				
				Collection<Conta> colecaoConta = getControladorUtil().pesquisar(
				filtroConta, Conta.class.getName());
	
				Collection<Conta> colecaoContasRetirarRevisao = new ArrayList();
	
				if (colecaoConta != null && !colecaoConta.isEmpty()) {
	
					Iterator iteratorConta = colecaoConta.iterator();
	
					while (iteratorConta.hasNext()) {
	
						Conta conta = null;
	
						conta = (Conta) iteratorConta.next();
	
						if (((conta.getDebitoCreditoSituacaoAtual().getId()
								.intValue() == DebitoCreditoSituacao.NORMAL
								.intValue())
								|| (conta.getDebitoCreditoSituacaoAtual().getId()
										.intValue() == DebitoCreditoSituacao.RETIFICADA
										.intValue())
								|| (conta.getDebitoCreditoSituacaoAtual().getId()
										.intValue() == DebitoCreditoSituacao.INCLUIDA
										.intValue())) && conta.getDataRevisao() != null) {
							
							colecaoContasRetirarRevisao.add(conta);
						}
					}
					// 1.2
					/* chama o caso de uso [UC0149] para retirar contas de revisao */
					getControladorFaturamento().retirarRevisaoConta(
							colecaoContasRetirarRevisao, null, usuario, false, null);
				}
				// recupera todos os parcelamentos no mes atual e
				// que esteja com a situacao normal
				 Collection debitoACobrarColecao = repositorioCobranca
						.pesquisarDebitoACobrarDoParcelamento(codigoImovel,
								new Integer(codigo));
			
	
				/* remove o parcelamento das respectivas tabelas */
				Iterator debitoACobrarIterator = debitoACobrarColecao.iterator();
				while (debitoACobrarIterator.hasNext()) {
	
					DebitoACobrar debitoACobrar = (DebitoACobrar) debitoACobrarIterator
							.next();
	
					Integer idDebito = debitoACobrar.getId();
	
					if (idDebito != null) {
						this.removerDebitoACobrarCategoriaDoParcelamento(codigo, idDebito);
					}
				}
				// 1.6 Exclui os débitos a cobrar referente ao Parcelamento
				this.removerDebitoACobrarDoParcelamento(codigoImovel, new Integer(codigo));
				
				// 1.7 Exclui os créditos a cobrar referente ao Parcelamento
				this.removerCreditoARealizarDoParcelamento(codigoImovel,
						new Integer(codigo));
	
				Collection<Conta> colecaoContasEP = new ArrayList<Conta>();
				Collection<Conta> colecaoContasEPRetirarRevisao = new ArrayList<Conta>();
				if (codigoImovel != null) {
	
					filtroConta.limparListaParametros();
	
					filtroConta.adicionarParametro(new ParametroSimples(
							FiltroConta.IMOVEL_ID, codigoImovel));
	
					filtroConta.adicionarParametro(new ParametroSimples(
							FiltroConta.PARCELAMENTO_ID, codigo));
	
					Collection colecaoConta2 = getControladorUtil().pesquisar(
							filtroConta, Conta.class.getName());
	
					if (colecaoConta2 != null && !colecaoConta2.isEmpty()) {
	
						Iterator iteratorConta = colecaoConta2.iterator();
	
						while (iteratorConta.hasNext()) {
	
							Conta conta = null;
	
							conta = (Conta) iteratorConta.next();
	
							if ((conta.getDebitoCreditoSituacaoAtual().getId()
									.intValue() == DebitoCreditoSituacao.NORMAL
									.intValue())
									|| (conta.getDebitoCreditoSituacaoAtual()
											.getId().intValue() == DebitoCreditoSituacao.RETIFICADA
											.intValue())
									|| (conta.getDebitoCreditoSituacaoAtual()
											.getId().intValue() == DebitoCreditoSituacao.INCLUIDA
											.intValue())) {
	
								colecaoContasEP.add(conta);
								
								if (conta.getDataRevisao() != null){
									
									colecaoContasEPRetirarRevisao.add(conta);
								}
							}
						}
	
					}
				}
	
				// 1.8.1 Caso a entrada do parcelamento tenha sido através de contas
				// marcadas como EP,
				// ou seja,existem contas do ímovel associados ao parcelamento(a
				// partir da tabela
				// CONTA com IMOV_ID = IMOV_ID da tabela IMOVEL) e situação atual
				// DCST_IDATUAL com o
				// valor correspondente a normal ,retificada ou concluída e
				// PARC_ID=PARC_ID do parcelamento
				if (colecaoContasEP != null && !colecaoContasEP.isEmpty()) {
					// 1.8.1.1 Retirar as contas de revisão
					getControladorFaturamento().retirarRevisaoConta(
							colecaoContasEPRetirarRevisao, null, usuario, false, null);
	
					// 1.8.1.3 desassociar a conta do parcelamento
					// atualiza PARC_ID da tabela CONTA com valor nulo
					Iterator iteratorContaEP = colecaoContasEP.iterator();
	
					while (iteratorContaEP.hasNext()) {
						Conta conta = null;
	
						conta = (Conta) iteratorContaEP.next();
						conta.setParcelamento(null);
	
						// 1.8.1.2 Para cada conta alterar o vencimento para
						// vencimento
						// original
						// passando o vencimento original da conta
						// (CNTA_DTVENCIMENTOORIGINAL)
						getControladorFaturamento().alterarVencimentoConta(
								Collections.singletonList(conta), null,
								conta.getDataVencimentoOriginal(), null);
	
						repositorioCobranca.desassociarContaParcelamento(conta.getId());
						
					}
	
				} else {
					// 1.8.2 Exclui a guia de pagamento correspondente a entrada do
					// Parcelamento
					this.removerGuiaPagamentoDoParcelamento(codigoImovel,
							new Integer(codigo));
	
				}
	
				Imovel imovel = null;
	
				imovel = getControladorImovel()
						.consultarParcelamentosDebitosImovel(codigoImovel);
	
				if (imovel != null) {
					Integer numeroParcelamento = 0;
					if (imovel.getNumeroParcelamento() != null
							&& imovel.getNumeroParcelamento() > 0) {
						numeroParcelamento = imovel.getNumeroParcelamento() - 1;
					}
					Integer numeroReparcelamentoConsecutivo = 0;
					Integer numeroReparcelamento = 0;
					if (imovel.getNumeroReparcelamentoConsecutivos() != null
							&& imovel.getNumeroReparcelamentoConsecutivos() > 0) {
						numeroReparcelamentoConsecutivo = imovel
								.getNumeroReparcelamentoConsecutivos() - 1;
						numeroReparcelamento = imovel.getNumeroReparcelamento() - 1;
					}
	
					// 1.9 Atualiza a tabela IMOVEL
					repositorioImovel.atualizarDadosImovel(codigoImovel,
							numeroParcelamento,
							numeroReparcelamentoConsecutivo,
							numeroReparcelamento);
				
				}
	
				// 1.10 atualiza a tabela parcelamento
				this.atualizarParcelamento(new Integer(codigo),
						ParcelamentoSituacao.DESFEITO, motivo,usuario.getId());
	
				this.atualizarDadosParcelamentoParaImovel(codigoImovel);
			}
	
			return retorno;
		
		} catch (ErroRepositorioException e) {
			e.printStackTrace();
			sessionContext.setRollbackOnly();
			throw new ControladorException("erro.sistema", e);
		}catch (ControladorException e) {
			e.printStackTrace();
			sessionContext.setRollbackOnly();
			throw e;
		}catch (Exception e) {
			e.printStackTrace();
			sessionContext.setRollbackOnly();
			throw new ControladorException("erro.sistema", e);
		}
	}

	/**
	 * [UC0316] Inserir Critério de Cobrança
	 * 
	 * Este caso de uso inseri a cobrança critério e as linhas da cobrança
	 * critério
	 * 
	 * @author Sávio luiz
	 * @param usuarioLogado
	 * @created 04/05/2006
	 * 
	 * @throws ControladorException
	 *             Controlador Exception
	 */
	public Integer inserirCobrancaCriterio(CobrancaCriterio cobrancaCriterio,
			Usuario usuarioLogado) throws ControladorException {

		Integer idCobrancaCriterio = null;
		try {

			// ------------ REGISTRAR TRANSAÇÃO ----------------------------
//			RegistradorOperacao registradorOperacaoCriterioCobranca = new RegistradorOperacao(
//					Operacao.OPERACAO_CRITERIO_COBRANCA_INSERIR,
//					new UsuarioAcaoUsuarioHelper(usuarioLogado,
//							UsuarioAcao.USUARIO_ACAO_EFETUOU_OPERACAO));
//			
//			registradorOperacaoCriterioCobranca
//					.registrarOperacao(cobrancaCriterio);
			// ------------ REGISTRAR TRANSAÇÃO ----------------------------

			Collection colecaoCobrancaCriterioLinha = cobrancaCriterio
					.getCobrancaCriterioLinhas();
			Collection colecaoCobrancaCriterioSituacaoCobranca = cobrancaCriterio
				.getCriteriosSituacaoCobranca();
			Collection colecaoCobrancaCriterioSituacaoLigacaoAgua = cobrancaCriterio
				.getCriteriosSituacaoLigacaoAgua();
			Collection colecaoCobrancaCriterioSituacaoLigacaoEsgoto = cobrancaCriterio
				.getCriteriosSituacaoLigacaoEsgoto();			

			cobrancaCriterio.setCobrancaCriterioLinhas(null);
			cobrancaCriterio.setCriteriosSituacaoCobranca(null);
			cobrancaCriterio.setCriteriosSituacaoLigacaoAgua(null);
			cobrancaCriterio.setCriteriosSituacaoLigacaoEsgoto(null);
			
			idCobrancaCriterio = (Integer) repositorioUtil
					.inserir(cobrancaCriterio);
			cobrancaCriterio.setId(idCobrancaCriterio);

			// inserindo as situacoes de cobranca
			if (colecaoCobrancaCriterioSituacaoCobranca != null){
				Iterator iterSitCob = colecaoCobrancaCriterioSituacaoCobranca.iterator();
				while (iterSitCob.hasNext()) {
					CriterioSituacaoCobranca critSitCob = (CriterioSituacaoCobranca) iterSitCob.next();
					critSitCob.getComp_id().setCobrancaCriterio(cobrancaCriterio);
					critSitCob.setUltimaAlteracao(new Date());
					repositorioUtil.inserir(critSitCob);	
					
				}
			}
			
			// inserindo as situacoes de ligacao de agua para o criterio
			if (colecaoCobrancaCriterioSituacaoLigacaoAgua != null){
				Iterator iterSitLigAgua = colecaoCobrancaCriterioSituacaoLigacaoAgua.iterator();
				while (iterSitLigAgua.hasNext()) {
					CriterioSituacaoLigacaoAgua critSitLigAgua = (CriterioSituacaoLigacaoAgua) 
						iterSitLigAgua.next();
					critSitLigAgua.getComp_id().setCobrancaCriterio(cobrancaCriterio);
					critSitLigAgua.setUltimaAlteracao(new Date());
					repositorioUtil.inserir(critSitLigAgua);	
					
				}
			}

			// inserindo as Situacaoes de ligacao de esgoto para o criterio
			if (colecaoCobrancaCriterioSituacaoLigacaoEsgoto != null){
				Iterator iterSitLigEsgoto = colecaoCobrancaCriterioSituacaoLigacaoEsgoto.iterator();
				while (iterSitLigEsgoto.hasNext()) {
					CriterioSituacaoLigacaoEsgoto critSitLigEsgoto = (CriterioSituacaoLigacaoEsgoto)
						iterSitLigEsgoto.next();
					critSitLigEsgoto.getComp_id().setCobrancaCriterio(cobrancaCriterio);
					critSitLigEsgoto.setUltimaAlteracao(new Date());
					repositorioUtil.inserir(critSitLigEsgoto);	
					
				}
			}
			
//			 inserindo as Situacaoes de ligacao de esgoto para o criterio
			if (colecaoCobrancaCriterioLinha != null){
				Iterator cobrancaCriterioLinhaIterator = colecaoCobrancaCriterioLinha.iterator();
				while (cobrancaCriterioLinhaIterator.hasNext()) {
	
					// inseri cada cobrança criterio linha
					CobrancaCriterioLinha cobrancaCriterioLinha = (CobrancaCriterioLinha) cobrancaCriterioLinhaIterator
							.next();
	
					cobrancaCriterioLinha.setCobrancaCriterio(cobrancaCriterio);
					// caso não tenha informado o valor minimo débito
					if (cobrancaCriterioLinha.getValorMinimoDebito() == null) {
						cobrancaCriterioLinha.setValorMinimoDebito(new BigDecimal(
								"0.00"));
					}
					// caso não tenha informado o valor máximo débito
					if (cobrancaCriterioLinha.getValorMaximoDebito() == null) {
						cobrancaCriterioLinha.setValorMaximoDebito(new BigDecimal(
								"99999999999.99"));
					}
					// caso não tenha informado a quantidade minima de contas
					if (cobrancaCriterioLinha.getQuantidadeMinimaContas() == null) {
						cobrancaCriterioLinha.setQuantidadeMinimaContas(new Short(
								"0"));
					}
					// caso não tenha informado a quantidade máxima de contas
					if (cobrancaCriterioLinha.getQuantidadeMaximaContas() == null) {
						cobrancaCriterioLinha.setQuantidadeMaximaContas(new Short(
								"9999"));
					}
					// caso não tenha informado o valor minimo do débito para
					// cliente
					// com débito automático
					if (cobrancaCriterioLinha
							.getValorMinimoDebitoDebitoAutomatico() == null) {
						cobrancaCriterioLinha
								.setValorMinimoDebitoDebitoAutomatico(new BigDecimal(
										"0.00"));
					}
					// caso não tenha informado a quantidade minima de contas para
					// cliente com
					// débito automático
					if (cobrancaCriterioLinha
							.getQuantidadeMinimaContasDebitoAutomatico() == null) {
						cobrancaCriterioLinha
								.setQuantidadeMinimaContasDebitoAutomatico(new Short(
										"0"));
					}
					// caso não tenha informado valor mínimo da conta do mês
					if (cobrancaCriterioLinha.getValorMinimoContaMes() == null) {
						cobrancaCriterioLinha
								.setValorMinimoContaMes(new BigDecimal("0.00"));
					}
	
					repositorioUtil.inserir(cobrancaCriterioLinha);
				}
			}
		} catch (ErroRepositorioException e) {
			sessionContext.setRollbackOnly();
			throw new ControladorException("erro.sistema", e);
		}
		return idCobrancaCriterio;
	}

	/**
	 * [UC0317] Manter Critério de Cobrança
	 * 
	 * Este caso de uso atualiza a cobrança critério e as linhas da cobrança
	 * critério
	 * 
	 * [SB0001] Atualizar Critério de Cobrança
	 * 
	 * @author Sávio luiz
	 * @param usuarioLogado
	 * @created 11/05/2006
	 * 
	 * @throws ControladorException
	 *             Controlador Exception
	 */
	public void atualizarCobrancaCriterio(CobrancaCriterio cobrancaCriterio,
			Collection colecaoCobrancaCriterioLinha,
			Collection colecaoCobrancaCriterioLinhaRemovidas,
			Collection colecaoCriterioSituacaoCobrancaNovos,
			Collection colecaoCriterioSituacaoLigacaoAguaNovos,
			Collection colecaoCriterioSituacaoLigacaoEsgotoNovos,
			Usuario usuarioLogado) throws ControladorException {

		try {

			CobrancaCriterio cobrancaCriterioNaBase = null;
			FiltroCobrancaCriterio filtroCobrancaCriterio = new FiltroCobrancaCriterio();
			filtroCobrancaCriterio.adicionarParametro(new ParametroSimples(
					FiltroCobrancaCriterio.ID, cobrancaCriterio.getId()));

			Collection<CobrancaCriterio> collectionCobrancaCriterio = repositorioUtil
					.pesquisar(filtroCobrancaCriterio, CobrancaCriterio.class
							.getName());

			// ------------ REGISTRAR TRANSAÇÃO ----------------------------
			RegistradorOperacao registradorOperacaoCriterioCobranca = new RegistradorOperacao(
					Operacao.OPERACAO_CRITERIO_COBRANCA_ATUALIZAR,
					new UsuarioAcaoUsuarioHelper(usuarioLogado,
							UsuarioAcao.USUARIO_ACAO_EFETUOU_OPERACAO));

			registradorOperacaoCriterioCobranca
					.registrarOperacao(cobrancaCriterio);
			// ------------ REGISTRAR TRANSAÇÃO ----------------------------

			// Caso a pesquisa tenha retornado o critério de cobrança
			if (collectionCobrancaCriterio != null
					&& !collectionCobrancaCriterio.isEmpty()) {

				// Recupera da coleção a rota que vai ser atualizada
				cobrancaCriterioNaBase = (CobrancaCriterio) Util
						.retonarObjetoDeColecao(collectionCobrancaCriterio);
			}
			// Verificar se o logradouro já foi atualizado por outro usuário
			// durante
			// esta atualização
			if (cobrancaCriterioNaBase == null
					|| cobrancaCriterioNaBase.getUltimaAlteracao().after(
							cobrancaCriterio.getUltimaAlteracao())) {
				sessionContext.setRollbackOnly();
				throw new ControladorException("atencao.atualizacao.timestamp");
			}

			cobrancaCriterio.setUltimaAlteracao(new Date());

			repositorioUtil.atualizar(cobrancaCriterio);
			Iterator cobrancaCriterioLinhaIterator = colecaoCobrancaCriterioLinha
					.iterator();
			while (cobrancaCriterioLinhaIterator.hasNext()) {
				// inseri cada cobrança criterio linha
				CobrancaCriterioLinha cobrancaCriterioLinha = (CobrancaCriterioLinha) cobrancaCriterioLinhaIterator
						.next();
				cobrancaCriterioLinha.setCobrancaCriterio(cobrancaCriterio);

				// caso não tenha informado o valor minimo débito
				if (cobrancaCriterioLinha.getValorMinimoDebito() == null) {
					cobrancaCriterioLinha.setValorMinimoDebito(new BigDecimal(
							"0.00"));
				}
				// caso não tenha informado o valor máximo débito
				if (cobrancaCriterioLinha.getValorMaximoDebito() == null) {
					cobrancaCriterioLinha.setValorMaximoDebito(new BigDecimal(
							"99999999999.99"));
				}
				// caso não tenha informado a quantidade minima de contas
				if (cobrancaCriterioLinha.getQuantidadeMinimaContas() == null) {
					cobrancaCriterioLinha.setQuantidadeMinimaContas(new Short(
							"0"));
				}
				// caso não tenha informado a quantidade máxima de contas
				if (cobrancaCriterioLinha.getQuantidadeMaximaContas() == null) {
					cobrancaCriterioLinha.setQuantidadeMaximaContas(new Short(
							"9999"));
				}
				// caso não tenha informado o valor minimo do débito para
				// cliente
				// com débito automático
				if (cobrancaCriterioLinha
						.getValorMinimoDebitoDebitoAutomatico() == null) {
					cobrancaCriterioLinha
							.setValorMinimoDebitoDebitoAutomatico(new BigDecimal(
									"0.00"));
				}
				// caso não tenha informado a quantidade minima de contas para
				// cliente com
				// débito automático
				if (cobrancaCriterioLinha
						.getQuantidadeMinimaContasDebitoAutomatico() == null) {
					cobrancaCriterioLinha
							.setQuantidadeMinimaContasDebitoAutomatico(new Short(
									"0"));
				}
				// caso não tenha informado valor mínimo da conta do mês
				if (cobrancaCriterioLinha.getValorMinimoContaMes() == null) {
					cobrancaCriterioLinha
							.setValorMinimoContaMes(new BigDecimal("0.00"));
				}
				cobrancaCriterioLinha.setUltimaAlteracao(new Date());
				repositorioUtil.inserirOuAtualizar(cobrancaCriterioLinha);
			}
			if (colecaoCobrancaCriterioLinhaRemovidas != null
					&& !colecaoCobrancaCriterioLinhaRemovidas.isEmpty()) {
				Iterator cobrancaCriterioLinhaRemovidasIterator = colecaoCobrancaCriterioLinhaRemovidas
						.iterator();
				while (cobrancaCriterioLinhaRemovidasIterator.hasNext()) {
					// inseri cada cobrança criterio linha
					CobrancaCriterioLinha cobrancaCriterioLinhaRemovida = (CobrancaCriterioLinha) cobrancaCriterioLinhaRemovidasIterator
							.next();
					repositorioUtil.remover(cobrancaCriterioLinhaRemovida);
				}
			}
			
			// removendo criterios de situacao de cobranca antigos
	        if (cobrancaCriterio.getCriteriosSituacaoCobranca() != null &&
	        		!cobrancaCriterio.getCriteriosSituacaoCobranca().isEmpty()){
		        for (Iterator iter = cobrancaCriterio.getCriteriosSituacaoCobranca().iterator(); 
		        		iter.hasNext();) {
		        	CriterioSituacaoCobranca critSitCob = (CriterioSituacaoCobranca) iter.next();
		        	repositorioUtil.remover(critSitCob);					
		        }
	        }
	        // removendo criterios de situacao de ligacao de agua antigos
	        if (cobrancaCriterio.getCriteriosSituacaoLigacaoAgua() != null &&
	        		!cobrancaCriterio.getCriteriosSituacaoLigacaoAgua().isEmpty()){
		        for (Iterator iter = cobrancaCriterio.getCriteriosSituacaoLigacaoAgua().iterator(); 
		        		iter.hasNext();) {
		        	CriterioSituacaoLigacaoAgua critSitLigacaoAgua = (CriterioSituacaoLigacaoAgua) iter.next();
		        	repositorioUtil.remover(critSitLigacaoAgua);					
		        }
	        }
	        // removendo criterios de situacao de ligacao de esgoto antigos
	        if (cobrancaCriterio.getCriteriosSituacaoLigacaoEsgoto() != null &&
	        		!cobrancaCriterio.getCriteriosSituacaoLigacaoEsgoto().isEmpty()){
		        for (Iterator iter = cobrancaCriterio.getCriteriosSituacaoLigacaoEsgoto().iterator(); 
		        		iter.hasNext();) {
		        	CriterioSituacaoLigacaoEsgoto critSitLigacaoEsgoto = (CriterioSituacaoLigacaoEsgoto) iter.next();
		        	repositorioUtil.remover(critSitLigacaoEsgoto);					
		        }
	        }	        
	        
	        // Inserindo os novos criterios de situacao de cobranca
	        if (colecaoCriterioSituacaoCobrancaNovos != null &&
	        		!colecaoCriterioSituacaoCobrancaNovos.isEmpty()){
		        for (Iterator iter = colecaoCriterioSituacaoCobrancaNovos.iterator(); 
		        		iter.hasNext();) {
		        	CriterioSituacaoCobranca critSitCob = (CriterioSituacaoCobranca) iter.next();
		        	critSitCob.setUltimaAlteracao(new Date());
		        	repositorioUtil.inserir(critSitCob);			
		        }
	        }

	        // Inserindo os novos criterios de situacao de ligacao de agua
	        if (colecaoCriterioSituacaoLigacaoAguaNovos != null &&
	        		!colecaoCriterioSituacaoLigacaoAguaNovos.isEmpty()){
		        for (Iterator iter = colecaoCriterioSituacaoLigacaoAguaNovos.iterator(); 
		        		iter.hasNext();) {
		        	CriterioSituacaoLigacaoAgua critSitLigacaoAgua = (CriterioSituacaoLigacaoAgua) iter.next();
		        	critSitLigacaoAgua.setUltimaAlteracao(new Date());
		        	repositorioUtil.inserir(critSitLigacaoAgua);			
		        }
	        }

	        // Inserindo os novos criterios de situacao de ligacao de esgoto
	        if (colecaoCriterioSituacaoLigacaoEsgotoNovos != null &&
	        		!colecaoCriterioSituacaoLigacaoEsgotoNovos.isEmpty()){
		        for (Iterator iter = colecaoCriterioSituacaoLigacaoEsgotoNovos.iterator(); 
		        		iter.hasNext();) {
		        	CriterioSituacaoLigacaoEsgoto critSitLigacaoEsgoto = (CriterioSituacaoLigacaoEsgoto) iter.next();
		        	critSitLigacaoEsgoto.setUltimaAlteracao(new Date());
		        	repositorioUtil.inserir(critSitLigacaoEsgoto);			
		        }
	        }
	        
		} catch (ErroRepositorioException e) {
			sessionContext.setRollbackOnly();
			throw new ControladorException("erro.sistema", e);
		}
	}

	/**
	 * [UC0317] Manter Critério de Cobrança
	 * 
	 * Este caso de uso remove a cobrança critério e as linhas da cobrança
	 * critério
	 * 
	 * [SB0002] Excluir Critério de Cobrança
	 * 
	 * @author Sávio luiz
	 * @param usuarioLogado
	 * @created 11/05/2006
	 * 
	 * @throws ControladorException
	 *             Controlador Exception
	 */
	public void removerCobrancaCriterio(String[] idsCobrancaCriterio,
			Usuario usuarioLogado) throws ControladorException {

		try {
			// remove primeiro as linhas do critério cobrança

			// ------------ REGISTRAR TRANSAÇÃO ----------------
			Operacao operacao = new Operacao();
			operacao.setId(Operacao.OPERACAO_CRITERIO_COBRANCA_REMOVER);

			OperacaoEfetuada operacaoEfetuada = new OperacaoEfetuada();
			operacaoEfetuada.setOperacao(operacao);
			// ------------ REGISTRAR TRANSAÇÃO ----------------

			repositorioCobranca
					.removerCobrancaCriterioLinha(idsCobrancaCriterio);

			// ------------ REGISTRAR TRANSAÇÃO ----------------
			UsuarioAcaoUsuarioHelper usuarioAcaoUsuarioHelper = new UsuarioAcaoUsuarioHelper(
					usuarioLogado, UsuarioAcao.USUARIO_ACAO_EFETUOU_OPERACAO);
			Collection<UsuarioAcaoUsuarioHelper> colecaoUsuarios = new ArrayList();
			colecaoUsuarios.add(usuarioAcaoUsuarioHelper);
			// ------------ REGISTRAR TRANSAÇÃO ----------------

			// remove os critérios cobrança
			getControladorUtil().remover(idsCobrancaCriterio,
					CobrancaCriterio.class.getName(), operacaoEfetuada,
					colecaoUsuarios);

		} catch (ErroRepositorioException e) {
			sessionContext.setRollbackOnly();
			throw new ControladorException("erro.sistema", e);
		}
	}

	/**
	 * [UC0313] Manter Cornograma de Cobrança
	 * 
	 * Testa se a atividade cronograma é para ser inserido ou atualizado
	 */
	public CobrancaCronogramaHelper testeInserirAtualizarAtividadeCronograma(
			CobrancaCronogramaHelper cobrancaCronogramaHelper) {

		try {
			Iterator iteratorAtividadeCronograma = cobrancaCronogramaHelper
					.getCobrancasAtividadesParaInsercao().iterator();

			FiltroCobrancaAcaoAtividadeCronograma filtroCobrancaAcaoAtividadeCronograma = new FiltroCobrancaAcaoAtividadeCronograma();
			filtroCobrancaAcaoAtividadeCronograma
					.adicionarParametro(new ParametroSimples(
							FiltroCobrancaAcaoAtividadeCronograma.ID_COBRANCA_ACAO_CRONOGRAMA,
							cobrancaCronogramaHelper
									.getCobrancaAcaoCronograma().getId()));
			// filtroCobrancaAcaoAtividadeCronograma.adicionarCaminhoParaCarregamentoEntidade("cobrancaAtividade");

			Collection colecaoAtividadeCrongramaBase = getControladorUtil()
					.pesquisar(filtroCobrancaAcaoAtividadeCronograma,
							CobrancaAcaoAtividadeCronograma.class.getName());
			Iterator iteratorBase = colecaoAtividadeCrongramaBase.iterator();

			while (iteratorAtividadeCronograma.hasNext()) {
				CobrancaAcaoAtividadeCronograma cobrancaAcaoAtividadeCronograma = (CobrancaAcaoAtividadeCronograma) iteratorAtividadeCronograma
						.next();
				iteratorBase = colecaoAtividadeCrongramaBase.iterator();
				while (iteratorBase.hasNext()) {
					CobrancaAcaoAtividadeCronograma cobrancaAcaoAtividadeCronogramaBase = (CobrancaAcaoAtividadeCronograma) iteratorBase
							.next();
					if (cobrancaAcaoAtividadeCronograma.getCobrancaAtividade()
							.getId().equals(
									cobrancaAcaoAtividadeCronogramaBase
											.getCobrancaAtividade().getId())) {
						cobrancaAcaoAtividadeCronograma
								.setId(cobrancaAcaoAtividadeCronogramaBase
										.getId());
					}
				}
			}

		} catch (ControladorException e) {
			e.printStackTrace();
		}

		return cobrancaCronogramaHelper;

	}

	/**
	 * [UC0313] Manter Cornograma de Cobrança
	 * 
	 * Testa se o Acao cronograma é para ser inserido ou atualizado
	 */
	public CobrancaCronogramaHelper testeInserirAtualizarCronograma(
			CobrancaCronogramaHelper cobrancaCronogramaHelper) {
		try {
			if (cobrancaCronogramaHelper.getCobrancaAcaoCronograma() != null
					&& cobrancaCronogramaHelper.getCobrancaAcaoCronograma()
							.getId() != null) {
				FiltroCobrancaAcaoCronograma filtroCobrancaAcaoCronograma = new FiltroCobrancaAcaoCronograma();
				filtroCobrancaAcaoCronograma
						.adicionarParametro(new ParametroSimples(
								FiltroCobrancaAcaoCronograma.ID_COBRANCA_GRUPO_CRONOGRAMA_MES,
								cobrancaCronogramaHelper
										.getCobrancaGrupoCronogramaMes()
										.getId()));

				filtroCobrancaAcaoCronograma
						.adicionarParametro(new ParametroSimples(
								FiltroCobrancaAcaoCronograma.ID,
								cobrancaCronogramaHelper
										.getCobrancaAcaoCronograma().getId()));

				Collection colecaoCobrancaAcaoBase = getControladorUtil()
						.pesquisar(filtroCobrancaAcaoCronograma,
								CobrancaAcaoCronograma.class.getName());

				if (!colecaoCobrancaAcaoBase.isEmpty()) {
					CobrancaAcaoCronograma cobrancaAcaoCronograma = (CobrancaAcaoCronograma) colecaoCobrancaAcaoBase
							.iterator().next();
					cobrancaCronogramaHelper.getCobrancaAcaoCronograma().setId(
							cobrancaAcaoCronograma.getId());

					cobrancaCronogramaHelper = this
							.testeInserirAtualizarAtividadeCronograma(cobrancaCronogramaHelper);
				}
			}
		} catch (ControladorException e) {
			e.printStackTrace();
		}

		return cobrancaCronogramaHelper;
	}

	/**
	 * 
	 * Manter - Atualizar um Cornograma de Cobrança com as Ações de Cobranças e
	 * suas Atividades
	 * 
	 * [UC0313] Manter Cornograma de Cobrança
	 * 
	 * @author Flávio Cordeiro
	 * @param usuarioLogado
	 * @data 05/05/2006
	 * 
	 * @param cobrancaGrupoCronogramaMes,
	 *            cobrancaAcaoCronograma,
	 *            cobrancasAtividadesParaInsercao(Collection)
	 */

	public void atualizarCobrancaCronograma(
			Collection colecaoCobrancaCronogramaHelper,
			Collection colecaoCronogramaHelperErroAtualizacao,
			Usuario usuarioLogado) throws ControladorException {

		SistemaParametro sistemaParametro = getControladorUtil()
				.pesquisarParametrosDoSistema();

		// ------------ REGISTRAR TRANSAÇÃO ----------------------------
		RegistradorOperacao registradorOperacao = new RegistradorOperacao(
				Operacao.OPERACAO_ATUALIZAR_CRONOGRAMA_COBRANCA,
				new UsuarioAcaoUsuarioHelper(usuarioLogado,
						UsuarioAcao.USUARIO_ACAO_EFETUOU_OPERACAO));
		// ------------ REGISTRAR TRANSAÇÃO ----------------------------

		Iterator iteratorHelper = colecaoCobrancaCronogramaHelper.iterator();
		
		// -- Validar se todas as rotas do grupo informado possui um criterio definido para cada ação
		Integer idGrupoCobranca = null;
		Collection<Integer> idsAcoesCobranca = new ArrayList<Integer>();
		
		for (CobrancaCronogramaHelper cobrancaCronograma : (Collection<CobrancaCronogramaHelper>) colecaoCobrancaCronogramaHelper) {
			idGrupoCobranca = cobrancaCronograma.getCobrancaGrupoCronogramaMes().getCobrancaGrupo().getId();
			idsAcoesCobranca.add(cobrancaCronograma.getCobrancaAcaoCronograma().getCobrancaAcao().getId());
		}
		
		if (idsAcoesCobranca.size() > 0) {
			PesquisarQtdeRotasSemCriteriosParaAcoesCobranca filtro = new PesquisarQtdeRotasSemCriteriosParaAcoesCobranca();
			filtro.setIdGrupoCobranca(idGrupoCobranca);
			filtro.setIdsAcoesCobranca(idsAcoesCobranca);
		
			Integer qtdeRotasSemCriterios = pesquisarQtdeRotasSemCriteriosParaAcoesCobranca(filtro);
			if (qtdeRotasSemCriterios != null && qtdeRotasSemCriterios.intValue() > 0) { 
				throw new ControladorException("atencao.rotas.sem.criterio.para.acao.cobranca");
			}
		}
		// -------------

		CobrancaCronogramaHelper cobrancaCronogramaHelper = null;
		CobrancaGrupoCronogramaMes cobrancaGrupoCronogramaMes = null;
		CobrancaAcaoCronograma cobrancaAcaoCronograma = null;
		Collection cobrancasAtividadesParaInsercao = null;
		// Collection colecaoCobrancaAcao = null;
		Collection colecaoAtividades = null;

		Map<CobrancaAcaoAtividadeHelper, Date> mapAcaoAtividadeDataPrevista = new HashMap();

		Integer idCobrancaGrupoCronogramaMesRetorno = null;
		Integer idCobrancaAcaoCronogramaRetorno = null;
		CobrancaGrupoCronogramaMes cobrancaGrupoCronogramaMesRetorno = null;
		CobrancaAcaoCronograma cobrancaAcaoCronogramaRetorno = null;

		FiltroCobrancaAtividade filtroCobrancaAtividade = new FiltroCobrancaAtividade();
		filtroCobrancaAtividade.adicionarParametro(new ParametroSimples(
				FiltroCobrancaAtividade.INDICADOR_USO,
				ConstantesSistema.INDICADOR_USO_ATIVO));
		colecaoAtividades = getControladorUtil().pesquisar(
				filtroCobrancaAtividade, CobrancaAtividade.class.getName());
 
		// ----Usado para comparar a ultima data da acao anterior com a primeira
		// da atual
		Calendar ultimaDataAcaoAnterior = Calendar.getInstance();
		int inserirCronograma = 0;
		int comparaGrupo = 0;
		int mudarAcao = 0;

		CobrancaAcaoAtividadeCronograma cobrancaAcaoAtividadeCronogramaTeste = null;

		while (iteratorHelper.hasNext()) { 
			// inserirCronograma = 0;
			mudarAcao = 0;
			cobrancaCronogramaHelper = (CobrancaCronogramaHelper) iteratorHelper
					.next();
			
			cobrancaGrupoCronogramaMes = cobrancaCronogramaHelper
					.getCobrancaGrupoCronogramaMes();

			// if (cobrancaCronogramaHelper.getCobrancaGrupoCronogramaMes() !=
			// null) {
			// cobrancaGrupoCronogramaMesParaRemocao = cobrancaCronogramaHelper
			// .getCobrancaGrupoCronogramaMes();
			// }

			cobrancaCronogramaHelper = this
					.testeInserirAtualizarCronograma(cobrancaCronogramaHelper);

			cobrancasAtividadesParaInsercao = cobrancaCronogramaHelper
					.getCobrancasAtividadesParaInsercao();
			cobrancaAcaoCronograma = cobrancaCronogramaHelper
					.getCobrancaAcaoCronograma();

			// verifica se existe rotas para o cronograma e a ação especifica
			FiltroRota filtroRota = new FiltroRota();
			filtroRota.adicionarParametro(new ParametroSimples(
					FiltroRota.COBRANCA_GRUPO_ID, cobrancaGrupoCronogramaMes
							.getCobrancaGrupo().getId()));
			if (cobrancaAcaoCronograma.getCobrancaAcao().getId() != null
					&& cobrancaAcaoCronograma.getCobrancaAcao().getId().equals(
							CobrancaAcao.CORTE_ADMINISTRATIVO)
					&& sistemaParametro.getCodigoEmpresaFebraban() != null
					&& sistemaParametro.getCodigoEmpresaFebraban().equals(
							Empresa.EMPRESA_FEBRABAN_COMPESA)) {
				filtroRota.adicionarParametro(new ParametroSimplesDiferenteDe(
						FiltroRota.EMPRESA_COBRANCA_ID, 1));
			}
			Collection<Rota> colecaoRotas = getControladorUtil().pesquisar(
					filtroRota, Rota.class.getName());

			if (colecaoRotas == null || colecaoRotas.isEmpty()) {
				sessionContext.setRollbackOnly();
				throw new ControladorException(
						"atencao.cobranca.nao.existe.rotas.grupo");
			}

			if (comparaGrupo == 0) {
				comparaGrupo = 1;
				/**
				 * [FS0002] Validar referência do cronograma
				 */
				FiltroCobrancaGrupo filtroCobrancaGrupo = new FiltroCobrancaGrupo();
				filtroCobrancaGrupo.adicionarParametro(new ParametroSimples(
						FiltroCobrancaGrupo.ID, cobrancaGrupoCronogramaMes
								.getCobrancaGrupo().getId()));
				// Collection cobrancaGrupos;

				// cobrancaGrupos = getControladorUtil().pesquisar(
				// filtroCobrancaGrupo, CobrancaGrupo.class.getName());

				// CobrancaGrupo cobrancaGrupo = null;

				/**
				 * 
				 * MODIFICAR PARA TESTAR SE O REGISTRO JÁ FOI ALTERADO
				 * 
				 * [FS0003] -----------------------------
				 */
				FiltroCobrancaGrupoCronogramaMes filtroCobrancaGrupoCronogramaMes = new FiltroCobrancaGrupoCronogramaMes();
				filtroCobrancaGrupoCronogramaMes
						.adicionarParametro(new ParametroSimples(
								FiltroCobrancaGrupoCronogramaMes.ID,
								cobrancaCronogramaHelper
										.getCobrancaGrupoCronogramaMes()
										.getId()));

				Collection colecaoCobrancaGrupoCronogramaMes = getControladorUtil()
						.pesquisar(filtroCobrancaGrupoCronogramaMes,
								CobrancaGrupoCronogramaMes.class.getName());

				if (!colecaoCobrancaGrupoCronogramaMes.isEmpty()) {
					CobrancaGrupoCronogramaMes cobrancaGrupoCronogramaMesBase = (CobrancaGrupoCronogramaMes) colecaoCobrancaGrupoCronogramaMes
							.iterator().next();

					if (cobrancaGrupoCronogramaMesBase.getUltimaAlteracao()
							.after(
									cobrancaCronogramaHelper
											.getCobrancaGrupoCronogramaMes()
											.getUltimaAlteracao())) {
						sessionContext.setRollbackOnly();
						throw new ControladorException(
								"atencao.atualizacao.timestamp");
					}
				}

			}

			/**
			 * [FS0004] Validar Datas Previstas
			 */
			Iterator iteratorTestaDatas = cobrancasAtividadesParaInsercao
					.iterator();

			//int mes = 0;
			//int ano = 0;
			int mudarCronograma = 0;
			// boolean remover = true;
			//String anoMes = null;
			Calendar dataCobrancaTeste = Calendar.getInstance();
			// Calendar dataCobrancaAnterior = null;

			while (iteratorTestaDatas.hasNext()) {
				// if (cobrancaAcaoAtividadeCronogramaAnterior == null) {
				cobrancaAcaoAtividadeCronogramaTeste = (CobrancaAcaoAtividadeCronograma) iteratorTestaDatas
						.next();

				if (cobrancaAcaoAtividadeCronogramaTeste.getDataPrevista() != null
						&& !cobrancaAcaoAtividadeCronogramaTeste
								.getDataPrevista().toString().equals("")) {
					dataCobrancaTeste
							.setTime(cobrancaAcaoAtividadeCronogramaTeste
									.getDataPrevista());
				}

				mapAcaoAtividadeDataPrevista = validarAtividadeAcaoPredecessora(
						cobrancaAcaoCronograma.getCobrancaAcao(),
						cobrancaAcaoCronograma.getCobrancaAcao()
								.getCobrancaAcaoPredecessora(),
						cobrancaAcaoAtividadeCronogramaTeste,
						mapAcaoAtividadeDataPrevista);
				/**
				 * [FS0006] Verifica Ação Predecessora
				 */
				// if (primeiraVez == 0) {
				// primeiraVez = 1;
				// } else {
				// filtroCobrancaAcao = new FiltroCobrancaAcao();
				// filtroCobrancaAcao
				// .adicionarParametro(new ParametroSimples(
				// FiltroCobrancaAcao.ID,
				// cobrancaAcaoCronograma
				// .getCobrancaAcao().getId()));
				// filtroCobrancaAcao
				// .adicionarParametro(new ParametroNaoNulo(
				// FiltroCobrancaAcao.COBRANCA_ACAO_PRECEDENTE_ID));
				// colecaoCobrancaAcao = getControladorUtil().pesquisar(
				// filtroCobrancaAcao,
				// CobrancaAcao.class.getName());
				/*
				 * this.validarAcaoCobrancaCronogramaPredecessora(
				 * colecaoCobrancaCronogramaHelper, cobrancaCronogramaHelper);
				 */
				
				
				/*
				 * Autor: Hugo Leonardo 
				 * Data:08/10/2010
				 * Correcao da CRC_5227 
				 * Analista: Eduardo Borges
				 * 
				 * */
				
				if ( cobrancaAcaoAtividadeCronogramaTeste.getComando() == null ||
						cobrancaAcaoAtividadeCronogramaTeste.getComando().equals("") ) {
					
					if (cobrancaAcaoAtividadeCronogramaTeste.getDataPrevista() != null) {
						
						if (Util.compararData(cobrancaAcaoAtividadeCronogramaTeste.getDataPrevista(), new Date()) < 0){
							
							sessionContext.setRollbackOnly();
							throw new ControladorException(
									"atencao.cobranca.data_prevista_mes_ano_menor_data_atual",
									null, cobrancaAcaoAtividadeCronogramaTeste
											.getCobrancaAtividade().getDescricaoCobrancaAtividade(),
									cobrancaAcaoCronograma.getCobrancaAcao().getDescricaoCobrancaAcao());
						}
					}
				}
				
				// } else {
				// cobrancaAcaoAtividadeCronogramaTeste =
				// (CobrancaAcaoAtividadeCronograma) iteratorTestaDatas
				// .next();
				// anoMes = null;
				// if (cobrancaAcaoAtividadeCronogramaTeste.getDataPrevista() !=
				// null) {
				// dataCobrancaTeste = Calendar.getInstance();
				// dataCobrancaTeste
				// .setTime(cobrancaAcaoAtividadeCronogramaTeste
				// .getDataPrevista());
				//
				// ano = dataCobrancaTeste.get(Calendar.YEAR);
				// mes = dataCobrancaTeste.get(Calendar.MONTH) + 1;
				//
				// if (mes < 10) {
				// anoMes = ano + "0" + mes;
				// } else {
				// anoMes = ano + "" + mes;
				// }
				// } else {
				// dataCobrancaTeste = null;
				// }
				//
				// if (anoMes != null
				// && cobrancaGrupoCronogramaMes.getAnoMesReferencia() > Integer
				// .parseInt(anoMes)) {
				// sessionContext.setRollbackOnly();
				// throw new ControladorException(
				// "atencao.cobranca.data_prevista_mes_ano_menor");
				// }
				//
				// /*
				// * if ((cobrancaAcaoAtividadeCronogramaAnterior
				// * .getDataPrevista() != null) &&
				// * cobrancaAcaoAtividadeCronogramaTeste .getDataPrevista() !=
				// * null && cobrancaAcaoAtividadeCronogramaAnterior
				// * .getDataPrevista().after(
				// * cobrancaAcaoAtividadeCronogramaTeste .getDataPrevista())) {
				// * sessionContext.setRollbackOnly(); throw new
				// * ControladorException(
				// * "atencao.cobranca.data_prevista_predecessora_maior"); }
				// */
				//
				// Collections.sort((List) colecaoCobrancaCronogramaHelper,
				// new Comparator() {
				// public int compare(Object a, Object b) {
				// String posicao1 = ""
				// + ((CobrancaCronogramaHelper) a)
				// .getCobrancaAcaoCronograma()
				// .getCobrancaAcao()
				// .getOrdemRealizacao();
				// String posicao2 = ""
				// + ((CobrancaCronogramaHelper) b)
				// .getCobrancaAcaoCronograma()
				// .getCobrancaAcao()
				// .getOrdemRealizacao();
				//
				// return posicao1.compareTo(posicao2);
				// }
				// });
				//
				// // this.validarAcaoCobrancaCronogramaPredecessora(
				// // colecaoCobrancaCronogramaHelper,
				// // cobrancaCronogramaHelper);
				// }
				/**
				 * Testa para saber se o objeto vai ser inserido ou atualizado.
				 */
				if (cobrancaCronogramaHelper.getCobrancaGrupoCronogramaMes() == null
						&& cobrancaCronogramaHelper
								.getCobrancaGrupoCronogramaMes().getId() == null) {

					if (mudarCronograma == 0) {

						if (inserirCronograma == 0) {
							// ------------ REGISTRAR TRANSAÇÃO ----------------
							registradorOperacao
									.registrarOperacao(cobrancaGrupoCronogramaMes);
							// ------------ REGISTRAR TRANSAÇÃO ----------------
							inserirCronograma = 1;
							cobrancaGrupoCronogramaMes
									.setUltimaAlteracao(new Date());
							idCobrancaGrupoCronogramaMesRetorno = (Integer) getControladorUtil()
									.inserir(cobrancaGrupoCronogramaMes);
							cobrancaGrupoCronogramaMesRetorno = new CobrancaGrupoCronogramaMes();
							cobrancaGrupoCronogramaMesRetorno
									.setId(idCobrancaGrupoCronogramaMesRetorno);
						}
						if (cobrancaAcaoCronograma.getCobrancaAcao()
								.getIndicadorObrigatoriedade().intValue() == 2
								&& cobrancaAcaoAtividadeCronogramaTeste
										.getDataPrevista() == null) {

						} else {
							// ------------ REGISTRAR TRANSAÇÃO ----------------
							registradorOperacao
									.registrarOperacao(cobrancaAcaoCronograma);
							// ------------ REGISTRAR TRANSAÇÃO ----------------
							mudarCronograma = colecaoAtividades.size();

							cobrancaAcaoCronograma
									.setUltimaAlteracao(new Date());
							cobrancaAcaoCronograma
									.setCobrancaGrupoCronogramaMes(cobrancaGrupoCronogramaMesRetorno);
							idCobrancaAcaoCronogramaRetorno = (Integer) getControladorUtil()
									.inserir(cobrancaAcaoCronograma);
							cobrancaAcaoCronogramaRetorno = new CobrancaAcaoCronograma();
							cobrancaAcaoCronogramaRetorno
									.setId(idCobrancaAcaoCronogramaRetorno);
						}
					}

					if (cobrancaAcaoCronograma.getCobrancaAcao()
							.getIndicadorObrigatoriedade().intValue() == 2
							&& cobrancaAcaoAtividadeCronogramaTeste
									.getDataPrevista() == null) {

					} else {
						// ------------ REGISTRAR TRANSAÇÃO ----------------
						registradorOperacao
								.registrarOperacao(cobrancaAcaoAtividadeCronogramaTeste);
						// ------------ REGISTRAR TRANSAÇÃO ----------------
						cobrancaAcaoAtividadeCronogramaTeste
								.setCobrancaAcaoCronograma(cobrancaAcaoCronogramaRetorno);
						cobrancaAcaoAtividadeCronogramaTeste
								.setUltimaAlteracao(new Date());

						cobrancaAcaoAtividadeCronogramaTeste
								.setQuantidadeDocumentos(new Integer(0));
						cobrancaAcaoAtividadeCronogramaTeste
								.setValorDocumentos(new BigDecimal(0));
						cobrancaAcaoAtividadeCronogramaTeste
								.setQuantidadeItensCobrados(new Integer(0));

						getControladorUtil().inserir(
								cobrancaAcaoAtividadeCronogramaTeste);
						// diminui um no contador de mudanca de Cronograma
						mudarCronograma -= 1;
					}
				} else {
					if (mudarAcao == 0) {
						mudarAcao = 1;

						// ------------ REGISTRAR TRANSAÇÃO ----------------
						registradorOperacao
								.registrarOperacao(cobrancaGrupoCronogramaMes);
						// ------------ REGISTRAR TRANSAÇÃO ----------------

						cobrancaGrupoCronogramaMes
								.setUltimaAlteracao(new Date());
						cobrancaAcaoAtividadeCronogramaTeste
								.setUltimaAlteracao(new Date());
						cobrancaAcaoCronograma.setUltimaAlteracao(new Date());

						getControladorUtil().atualizar(
								cobrancaGrupoCronogramaMes);
						cobrancaAcaoCronograma
								.setCobrancaGrupoCronogramaMes(cobrancaGrupoCronogramaMes);
						// cobrancaAcaoCronograma.setId(null);
						if (cobrancaAcaoCronograma
								.getCobrancaGrupoCronogramaMes() == null
								|| cobrancaAcaoCronograma
										.getCobrancaGrupoCronogramaMes()
										.getId() == null) {
							cobrancaAcaoCronograma
									.setCobrancaGrupoCronogramaMes(cobrancaGrupoCronogramaMes);
						}

						if (cobrancaAcaoCronograma.getCobrancaAcao()
								.getIndicadorObrigatoriedade().intValue() == 2
								&& cobrancaAcaoAtividadeCronogramaTeste
										.getDataPrevista() == null) {

						} else {
							// ------------ REGISTRAR TRANSAÇÃO ----------------
							registradorOperacao
									.registrarOperacao(cobrancaAcaoCronograma);
							// ------------ REGISTRAR TRANSAÇÃO ----------------
							if (cobrancaAcaoCronograma.getId() == null) {
								Integer idCobrancaAcaoCronograma = (Integer) getControladorUtil()
										.inserir(cobrancaAcaoCronograma);
								cobrancaAcaoCronograma
										.setId(idCobrancaAcaoCronograma);
							} else {
								getControladorUtil().atualizar(
										cobrancaAcaoCronograma);
							}
						}
					}

					if (cobrancaAcaoCronograma.getCobrancaAcao()
							.getIndicadorObrigatoriedade().intValue() == 2
							&& cobrancaAcaoAtividadeCronogramaTeste
									.getDataPrevista() == null) {

					} else {
						// ------------ REGISTRAR TRANSAÇÃO ----------------
						registradorOperacao
								.registrarOperacao(cobrancaAcaoAtividadeCronogramaTeste);
						// ------------ REGISTRAR TRANSAÇÃO ----------------
						cobrancaAcaoAtividadeCronogramaTeste
								.setCobrancaAcaoCronograma(cobrancaAcaoCronograma);
						cobrancaAcaoAtividadeCronogramaTeste
								.setUltimaAlteracao(new Date());

						if (cobrancaAcaoAtividadeCronogramaTeste.getId() == null) {
							cobrancaAcaoAtividadeCronogramaTeste
									.setQuantidadeDocumentos(new Integer(0));
							cobrancaAcaoAtividadeCronogramaTeste
									.setValorDocumentos(new BigDecimal(0));
							cobrancaAcaoAtividadeCronogramaTeste
									.setQuantidadeItensCobrados(new Integer(0));

							getControladorUtil().inserir(
									cobrancaAcaoAtividadeCronogramaTeste);
						} else {
							getControladorUtil().atualizar(
									cobrancaAcaoAtividadeCronogramaTeste);
						}
					}
				}

				if (cobrancaAcaoAtividadeCronogramaTeste.getDataPrevista() != null) {
					ultimaDataAcaoAnterior
							.setTime(cobrancaAcaoAtividadeCronogramaTeste
									.getDataPrevista());
				}
				
			}

		}

	}
	
	/**
	 * [UC0313] Manter Cronograma Cobrança
	 * 
	 * [SB0002] Excluir Cronograma de Cobrança
	 * 
	 * @param ids
	 * @throws ControladorException
	 */
	public void removerCobrancaCronograma(String[] idsCobrancaCronograma,
			Usuario usuarioLogado) throws ControladorException {
		
		// ------------ REGISTRAR TRANSAÇÃO----------------------------
		RegistradorOperacao registradorOperacao = new RegistradorOperacao(
				Operacao.OPERACAO_COBRANCA_CRONOGRAMA_REMOVER,
				new UsuarioAcaoUsuarioHelper(usuarioLogado,
						UsuarioAcao.USUARIO_ACAO_EFETUOU_OPERACAO));

		Operacao operacao = new Operacao();
		operacao.setId(Operacao.OPERACAO_COBRANCA_CRONOGRAMA_REMOVER);

		OperacaoEfetuada operacaoEfetuada = new OperacaoEfetuada();
		operacaoEfetuada.setOperacao(operacao);
		// ------------ REGISTRAR TRANSAÇÃO----------------------------


		for (int i = 0; i < idsCobrancaCronograma.length; i++) {
			String idCobrancaCronograma = idsCobrancaCronograma[i];

			FiltroCobrancaGrupoCronogramaMes filtroCobrancaGrupoCronogramaMes = new FiltroCobrancaGrupoCronogramaMes();
			filtroCobrancaGrupoCronogramaMes
					.adicionarParametro(new ParametroSimples(
							FiltroCobrancaGrupoCronogramaMes.ID,
							idCobrancaCronograma));

			Collection colecaoCobrancaGrupoCronogramaMes = getControladorUtil()
					.pesquisar(filtroCobrancaGrupoCronogramaMes,
							CobrancaGrupoCronogramaMes.class.getName());

			if (colecaoCobrancaGrupoCronogramaMes != null
					&& !colecaoCobrancaGrupoCronogramaMes.isEmpty()) {
				CobrancaGrupoCronogramaMes cobrancaCronograma = (CobrancaGrupoCronogramaMes) Util
						.retonarObjetoDeColecao(colecaoCobrancaGrupoCronogramaMes);

				// Remove os dados das tabelas dependentes
				removerCobrancaAcaoAtividadeCronograma(idCobrancaCronograma);
				removerCobrancaAcaoCronograma(idCobrancaCronograma);
				
				// ------------ REGISTRAR TRANSAÇÃO----------------------------
				cobrancaCronograma.setOperacaoEfetuada(operacaoEfetuada);
				cobrancaCronograma.adicionarUsuario(usuarioLogado,
						UsuarioAcao.USUARIO_ACAO_EFETUOU_OPERACAO);
				registradorOperacao.registrarOperacao(cobrancaCronograma);
				// ------------ REGISTRAR TRANSAÇÃO----------------------------

				getControladorUtil().remover(cobrancaCronograma);

			}

		}

	}

	private void removerCobrancaAcaoCronograma(String idCobrancaCronograma) throws ControladorException {
		FiltroCobrancaAcaoCronograma filtroCobrancaAcaoCronograma = new FiltroCobrancaAcaoCronograma();
		filtroCobrancaAcaoCronograma
				.adicionarParametro(new ParametroSimples(
						FiltroCobrancaAcaoCronograma.ID_COBRANCA_GRUPO_CRONOGRAMA_MES,
						idCobrancaCronograma));
		
		Collection colecaoCobrancaAcaoCronograma = getControladorUtil().pesquisar(filtroCobrancaAcaoCronograma, CobrancaAcaoCronograma.class.getName());
		
		getControladorBatch().removerColecaoObjetoParaBatch(colecaoCobrancaAcaoCronograma);
	}

	private void removerCobrancaAcaoAtividadeCronograma(String idCobrancaCronograma) throws ControladorException {
		FiltroCobrancaAcaoAtividadeCronograma filtroCobrancaAcaoAtividadeCronograma = new FiltroCobrancaAcaoAtividadeCronograma();
		filtroCobrancaAcaoAtividadeCronograma
				.adicionarParametro(new ParametroSimples(
						FiltroCobrancaAcaoAtividadeCronograma.COBRANCA_GRUPO_CRONOGRAMA_MES_ID,
						idCobrancaCronograma));
		filtroCobrancaAcaoAtividadeCronograma.adicionarParametro(new ParametroNaoNulo(FiltroCobrancaAcaoAtividadeCronograma.REALIZACAO));
		
		Collection colecaoCobrancaAcaoAtividadeCronograma = getControladorUtil()
				.pesquisar(filtroCobrancaAcaoAtividadeCronograma,
						CobrancaAcaoAtividadeCronograma.class.getName());
		
		if (colecaoCobrancaAcaoAtividadeCronograma != null && !colecaoCobrancaAcaoAtividadeCronograma.isEmpty()) {
			sessionContext.setRollbackOnly();
			throw new ControladorException(
					"atencao.faturamento.exclusao_nao_permitida");
		}
		
		filtroCobrancaAcaoAtividadeCronograma.limparListaParametros();
		filtroCobrancaAcaoAtividadeCronograma
				.adicionarParametro(new ParametroSimples(
						FiltroCobrancaAcaoAtividadeCronograma.COBRANCA_GRUPO_CRONOGRAMA_MES_ID,
						idCobrancaCronograma));
		
		colecaoCobrancaAcaoAtividadeCronograma = getControladorUtil()
				.pesquisar(filtroCobrancaAcaoAtividadeCronograma,
						CobrancaAcaoAtividadeCronograma.class.getName());
		
		getControladorBatch().removerColecaoObjetoParaBatch(colecaoCobrancaAcaoAtividadeCronograma);
	}


	/**
	 * [UC0313] Manter Cronograma Cobrança
	 * 
	 * [SB0002] Excluir Cronograma de Cobrança
	 * 
	 * @param ids
	 * @throws ControladorException
	 */

	public void removerCobrancaCronograma(
			Collection<CobrancaCronogramaHelper> colecaocobrancaCronogramaHelperRemover)
			throws ControladorException {

		int i = 1;
		// filtro para testar se as acoes passadas para serem removidas sa
		// predecessoras de alguma acao
		FiltroCobrancaAcaoCronograma filtroCobrancaAcaoCronograma = new FiltroCobrancaAcaoCronograma();
		for (CobrancaCronogramaHelper cobrancaCronogramaHelper : colecaocobrancaCronogramaHelperRemover) {

			if (colecaocobrancaCronogramaHelperRemover.size() == 1) {
				filtroCobrancaAcaoCronograma
						.adicionarParametro(new ParametroSimples(
								FiltroCobrancaAcaoCronograma.ID_COBRANCA_ACAO,
								cobrancaCronogramaHelper
										.getCobrancaAcaoCronograma()
										.getCobrancaAcao().getId()));

				filtroCobrancaAcaoCronograma
						.adicionarParametro(new ParametroSimples(
								FiltroCobrancaAcaoCronograma.ID_COBRANCA_GRUPO_CRONOGRAMA_MES,
								cobrancaCronogramaHelper
										.getCobrancaGrupoCronogramaMes()
										.getId()));

			} else {

				// caso seja a primeira vez então inserino filtro, a mais, a
				// quantidade de vezes que terá o conector or
				// (idsCobrancaAcao.length)
				if (i == 1) {
					filtroCobrancaAcaoCronograma
							.adicionarParametro(new ParametroSimples(
									FiltroCobrancaAcaoCronograma.ID_COBRANCA_ACAO,
									cobrancaCronogramaHelper
											.getCobrancaAcaoCronograma()
											.getCobrancaAcao().getId(),
									FiltroParametro.CONECTOR_OR,
									colecaocobrancaCronogramaHelperRemover
											.size()));
				} else {
					// senão se for o ultimo laço do for então inseri no filtro
					// sem
					// o conector or
					if (colecaocobrancaCronogramaHelperRemover.size() == i) {
						filtroCobrancaAcaoCronograma
								.adicionarParametro(new ParametroSimples(
										FiltroCobrancaAcaoCronograma.ID_COBRANCA_ACAO,
										cobrancaCronogramaHelper
												.getCobrancaAcaoCronograma()
												.getCobrancaAcao().getId()));
						filtroCobrancaAcaoCronograma
								.adicionarParametro(new ParametroSimples(
										FiltroCobrancaAcaoCronograma.ID_COBRANCA_GRUPO_CRONOGRAMA_MES,
										cobrancaCronogramaHelper
												.getCobrancaGrupoCronogramaMes()
												.getId()));
					} else {
						// senão inseri no filtro o conector or
						filtroCobrancaAcaoCronograma
								.adicionarParametro(new ParametroSimples(
										FiltroCobrancaAcaoCronograma.ID_COBRANCA_ACAO,
										cobrancaCronogramaHelper
												.getCobrancaAcaoCronograma()
												.getCobrancaAcao().getId(),
										FiltroParametro.CONECTOR_OR));
					}
				}
			}
			i++;
		}

		Collection<CobrancaAcaoCronograma> colecaoCobrancaAcaoCronograma = getControladorUtil()
				.pesquisar(filtroCobrancaAcaoCronograma,
						CobrancaAcaoCronograma.class.getName());

		if (colecaoCobrancaAcaoCronograma == null
				|| colecaoCobrancaAcaoCronograma.isEmpty()) {
			sessionContext.setRollbackOnly();
			throw new ControladorException(
					"atencao.registro_remocao_nao_existente");
		}

		Collection colecaoCobrancaAcaoCronogramaRemover = new ArrayList();

		i = 1;

		FiltroCobrancaAcaoAtividadeCronograma filtroCobrancaAcaoAtividadeCronograma = new FiltroCobrancaAcaoAtividadeCronograma();

		for (CobrancaAcaoCronograma cobrancaAcaoCronograma : colecaoCobrancaAcaoCronograma) {
			if (colecaocobrancaCronogramaHelperRemover.size() == 1) {
				filtroCobrancaAcaoAtividadeCronograma
						.adicionarParametro(new ParametroSimples(
								FiltroCobrancaAcaoAtividadeCronograma.ID_COBRANCA_ACAO_CRONOGRAMA,
								cobrancaAcaoCronograma.getId()));

			} else {

				// caso seja a primeira vez então inserino filtro, a mais, a
				// quantidade de vezes que terá o conector or
				// (idsCobrancaAcao.length)
				if (i == 1) {
					filtroCobrancaAcaoAtividadeCronograma
							.adicionarParametro(new ParametroSimples(
									FiltroCobrancaAcaoAtividadeCronograma.ID_COBRANCA_ACAO_CRONOGRAMA,
									cobrancaAcaoCronograma.getId(),
									FiltroParametro.CONECTOR_OR,
									colecaocobrancaCronogramaHelperRemover
											.size()));
				} else {
					// senão se for o ultimo laço do for então inseri no filtro
					// sem
					// o conector or
					if (colecaocobrancaCronogramaHelperRemover.size() == i) {
						filtroCobrancaAcaoAtividadeCronograma
								.adicionarParametro(new ParametroSimples(
										FiltroCobrancaAcaoAtividadeCronograma.ID_COBRANCA_ACAO_CRONOGRAMA,
										cobrancaAcaoCronograma.getId()));
					} else {
						// senão inseri no filtro o conector or
						filtroCobrancaAcaoAtividadeCronograma
								.adicionarParametro(new ParametroSimples(
										FiltroCobrancaAcaoAtividadeCronograma.ID_COBRANCA_ACAO_CRONOGRAMA,
										cobrancaAcaoCronograma.getId(),
										FiltroParametro.CONECTOR_OR));
					}
				}
			}
			i++;
			colecaoCobrancaAcaoCronogramaRemover.add(cobrancaAcaoCronograma);
		}

		// filtro para testar se as acoes passadas para serem removidas sa
		// predecessoras de alguma acao
		Collection colecaoCobrancaAcaoAtividadeCronograma = getControladorUtil()
				.pesquisar(filtroCobrancaAcaoAtividadeCronograma,
						CobrancaAcaoAtividadeCronograma.class.getName());

		FiltroCobrancaAcaoAtividadeCronograma filtroCobrancaAcaoAtividadeCronogramaTeste = filtroCobrancaAcaoAtividadeCronograma;

		filtroCobrancaAcaoAtividadeCronogramaTeste
				.adicionarParametro(new ParametroNaoNulo(
						FiltroCobrancaAcaoAtividadeCronograma.REALIZACAO));

		// filtro para testar se as acoes passadas para serem removidas sa
		// predecessoras de alguma acao
		Collection colecaoCobrancaAcaoAtividadeCronogramaTeste = getControladorUtil()
				.pesquisar(filtroCobrancaAcaoAtividadeCronogramaTeste,
						CobrancaAcaoAtividadeCronograma.class.getName());

		if (!colecaoCobrancaAcaoAtividadeCronogramaTeste.isEmpty()) {
			sessionContext.setRollbackOnly();
			throw new ControladorException(
					"atencao.dependencias.acao_realizada");
		}

		try {

			// remove as coleções pesquisadas
			getControladorBatch().removerColecaoObjetoParaBatch(
					colecaoCobrancaAcaoAtividadeCronograma);

			getControladorBatch().removerColecaoObjetoParaBatch(
					colecaoCobrancaAcaoCronogramaRemover);
		} catch (ControladorException ex) {
			sessionContext.setRollbackOnly();
			throw new ControladorException("erro.sistema", ex);
		}

		// filtroCobrancaAcaoAtividadeCronograma
		// .adicionarParametro(new ParametroNaoNulo(
		// FiltroCobrancaAcaoAtividadeCronograma.REALIZACAO));
		//
		// filtroCobrancaAcaoAtividadeCronograma
		// .adicionarParametro(new ParametroSimples(
		// FiltroCobrancaAcaoCronograma.ID_COBRANCA_ACAO,
		// cobrancaAcaoCronograma.getId()));
		//
		// filtroCobrancaAcaoAtividadeCronograma
		// .adicionarCaminhoParaCarregamentoEntidade("cobrancaAtividade");
		// filtroCobrancaAcaoAtividadeCronograma
		// .adicionarCaminhoParaCarregamentoEntidade("cobrancaAcaoCronograma.cobrancaGrupoCronogramaMes");
		//
		// FiltroCobrancaAcaoCronograma filtroCobrancaAcaoCronograma = new
		// FiltroCobrancaAcaoCronograma();
		// filtroCobrancaAcaoCronograma
		// .adicionarCaminhoParaCarregamentoEntidade("cobrancaGrupoCronogramaMes");
		// filtroCobrancaAcaoCronograma
		// .adicionarCaminhoParaCarregamentoEntidade("cobrancaAcao.cobrancaAcaoPredecessora");
		//
		// // filtro para testar se as acoes passadas para serem removidas sa
		// // predecessoras de alguma acao
		// FiltroCobrancaAcaoCronograma filtroCobrancaAcaoCronogramaTeste =
		// filtroCobrancaAcaoCronograma;
		//
		// /**
		// * [FS0004] Cronograma de cobranca possui atividades ja realizadas
		// */
		// for (int i = 0; i < ids.length; i++) {
		//
		// if ((i + 1) == ids.length) {
		// filtroCobrancaAcaoAtividadeCronograma
		// .adicionarParametro(new ParametroSimples(
		// FiltroCobrancaAcaoAtividadeCronograma.COBRANCA_GRUPO_CRONOGRAMA_MES,
		// ids[i]));
		//
		// filtroCobrancaAcaoCronograma
		// .adicionarParametro(new ParametroSimples(
		// FiltroCobrancaAcaoCronograma.ID_COBRANCA_GRUPO_CRONOGRAMA_MES,
		// ids[i]));
		//
		// filtroCobrancaAcaoCronogramaTeste
		// .adicionarParametro(new ParametroSimples(
		// FiltroCobrancaAcaoCronograma.COBRANCA_ACAO_PREDECESSORA,
		// ids[i]));
		//
		// } else {
		// filtroCobrancaAcaoAtividadeCronograma
		// .adicionarParametro(new ParametroSimples(
		// FiltroCobrancaAcaoAtividadeCronograma.COBRANCA_GRUPO_CRONOGRAMA_MES,
		// ids[i], ParametroSimples.CONECTOR_OR));
		//
		// filtroCobrancaAcaoCronograma
		// .adicionarParametro(new ParametroSimples(
		// FiltroCobrancaAcaoCronograma.ID_COBRANCA_GRUPO_CRONOGRAMA_MES,
		// ids[i], ParametroSimples.CONECTOR_OR));
		//
		// filtroCobrancaAcaoCronogramaTeste
		// .adicionarParametro(new ParametroSimples(
		// FiltroCobrancaAcaoCronograma.COBRANCA_ACAO_PREDECESSORA,
		// ids[i], ParametroSimples.CONECTOR_OR));
		// }
		// }
		//
		// filtroCobrancaAcaoAtividadeCronograma
		// .adicionarParametro(new ParametroNaoNulo(
		// FiltroCobrancaAcaoAtividadeCronograma.REALIZACAO));
		//
		// // filtro para testar se as acoes passadas para serem removidas sa
		// // predecessoras de alguma acao
		// Collection colecaoCobrancaAtividadeTeste = getControladorUtil()
		// .pesquisar(filtroCobrancaAcaoCronogramaTeste,
		// CobrancaAcaoCronograma.class.getName());
		// if (!colecaoCobrancaAtividadeTeste.isEmpty()) {
		// sessionContext.setRollbackOnly();
		// throw new ControladorException(
		// "atencao.dependencias.nao_remover_com_acao_sucessora");
		// }
		//
		// Collection colecaoCobrancaAcaoAtividade = getControladorUtil()
		// .pesquisar(filtroCobrancaAcaoAtividadeCronograma,
		// CobrancaAcaoAtividadeCronograma.class.getName());
		//
		// if (!colecaoCobrancaAcaoAtividade.isEmpty()) {
		// sessionContext.setRollbackOnly();
		// throw new ControladorException("atencao.dependencias.existentes");
		// }
		//
		// filtroCobrancaAcaoAtividadeCronograma.limparListaParametros();
		// filtroCobrancaAcaoCronograma.limparListaParametros();
		// for (int i = 0; i < ids.length; i++) {
		//
		// if ((i + 1) == ids.length) {
		// filtroCobrancaAcaoAtividadeCronograma
		// .adicionarParametro(new ParametroSimples(
		// FiltroCobrancaAcaoAtividadeCronograma.COBRANCA_GRUPO_CRONOGRAMA_MES,
		// ids[i]));
		//
		// filtroCobrancaAcaoCronograma
		// .adicionarParametro(new ParametroSimples(
		// FiltroCobrancaAcaoCronograma.ID_COBRANCA_GRUPO_CRONOGRAMA_MES,
		// ids[i]));
		// } else {
		// filtroCobrancaAcaoAtividadeCronograma
		// .adicionarParametro(new ParametroSimples(
		// FiltroCobrancaAcaoAtividadeCronograma.COBRANCA_GRUPO_CRONOGRAMA_MES,
		// ids[i], ParametroSimples.CONECTOR_OR));
		//
		// filtroCobrancaAcaoCronograma
		// .adicionarParametro(new ParametroSimples(
		// FiltroCobrancaAcaoCronograma.ID_COBRANCA_GRUPO_CRONOGRAMA_MES,
		// ids[i], ParametroSimples.CONECTOR_OR));
		// }
		// }
		//
		// colecaoCobrancaAcaoAtividade = getControladorUtil().pesquisar(
		// filtroCobrancaAcaoAtividadeCronograma,
		// CobrancaAcaoAtividadeCronograma.class.getName());
		//
		// CobrancaAcaoAtividadeCronograma cobrancaAcaoAtividadeCronograma =
		// null;
		// Iterator iteratorRemoveAtividades = colecaoCobrancaAcaoAtividade
		// .iterator();
		// while (iteratorRemoveAtividades.hasNext()) {
		// cobrancaAcaoAtividadeCronograma = (CobrancaAcaoAtividadeCronograma)
		// iteratorRemoveAtividades
		// .next();
		//
		// if (cobrancaAcaoAtividadeCronograma.getRealizacao() != null) {
		// sessionContext.setRollbackOnly();
		// throw new ControladorException(
		// "atencao.dependencias.acao_realizada");
		// }
		// getControladorUtil().remover(cobrancaAcaoAtividadeCronograma);
		// }
		//
		// Collection colecaoAcaoCronograma = getControladorUtil().pesquisar(
		// filtroCobrancaAcaoCronograma,
		// CobrancaAcaoCronograma.class.getName());
		// Iterator iteratorAcaoCronogramaRemover = colecaoAcaoCronograma
		// .iterator();
		//
		// CobrancaAcaoCronograma cobrancaAcaoCronograma = null;
		//
		// while (iteratorAcaoCronogramaRemover.hasNext()) {
		// cobrancaAcaoCronograma = (CobrancaAcaoCronograma)
		// iteratorAcaoCronogramaRemover
		// .next();
		//
		// getControladorUtil().remover(cobrancaAcaoCronograma);
		// }
		//
		// getControladorUtil().remover(ids,
		// CobrancaGrupoCronogramaMes.class.getName(), null, null);

	}

	/**
	 * [UC0313] Manter Cronograma Cobrança
	 * 
	 * [SB0002] Excluir Cobrança Cronograma
	 * 
	 * @param ids
	 * @throws ControladorException
	 */

	public void removerCobrancaAtividadeCronograma(String[] ids)
			throws ControladorException {

		FiltroCobrancaAcaoAtividadeCronograma filtroCobrancaAcaoAtividadeCronograma = new FiltroCobrancaAcaoAtividadeCronograma();
		filtroCobrancaAcaoAtividadeCronograma
				.adicionarCaminhoParaCarregamentoEntidade("cobrancaAcaoCronograma");

		Collection colecaoAtividadeCronograma = null;
		for (int i = 0; i < (ids.length + 1); i++) {
			filtroCobrancaAcaoAtividadeCronograma
					.adicionarParametro(new ParametroSimples(
							FiltroCobrancaAcaoAtividadeCronograma.COBRANCA_ACAO,
							ids[i], ParametroSimples.CONECTOR_OR));
		}

		colecaoAtividadeCronograma = getControladorUtil().pesquisar(
				filtroCobrancaAcaoAtividadeCronograma,
				CobrancaAcaoAtividadeCronograma.class.getName());

		Iterator iteratorAtividadeCronograma = colecaoAtividadeCronograma
				.iterator();

		CobrancaAcaoAtividadeCronograma cobrancaAcaoAtividadeCronograma = null;
		while (iteratorAtividadeCronograma.hasNext()) {
			cobrancaAcaoAtividadeCronograma = (CobrancaAcaoAtividadeCronograma) iteratorAtividadeCronograma
					.next();

			getControladorUtil().remover(cobrancaAcaoAtividadeCronograma);
		}

		getControladorUtil().remover(ids,
				CobrancaAcaoCronograma.class.getName(), null, null);
	}

	/**
	 * [UC0220] Inserir Perfil de Parcelamento [UC0221] Manter Perfil de
	 * Parcelamento
	 * 
	 * Validar Inserir Perfil de Parcelamento e Manter Perfil de Parcelamento
	 * 
	 * @author Vivianne Sousa
	 * @date 10/05/2006
	 * 
	 * @param numeroResolucaoDiretoria
	 * @param idImovelSituacaoTipo
	 * @param idImovelPerfil
	 * @param idSubcategoria
	 * @param percentualDescontoAcrescimo
	 * 
	 * @return
	 */
	protected void validacaoFinalPerfilParcelamento(
			ParcelamentoPerfil parcelamentoPerfil,
			Collection collectionParcelamentoQuantidadeReparcelamentoHelper,
			Collection collectionParcelamentoDescontoInatividade,
			Collection collectionParcelamentoDescontoAntiguidade, String acao,
			Collection collectionParcelamentoDescontoInatividadeAVista,
			Collection collectionDescontoValorDebitoPeriodo)
			throws ControladorException {

		String idResolucaoDiretoria = ""
				+ parcelamentoPerfil.getResolucaoDiretoria().getId();
		String idImovelSituacaoTipo = ""
				+ parcelamentoPerfil.getImovelSituacaoTipo().getId();

		String idImovelPerfil = null;
		if (parcelamentoPerfil.getImovelPerfil() != null) {
			idImovelPerfil = "" + parcelamentoPerfil.getImovelPerfil().getId();
		}

		String idSubcategoria = null;
		if (parcelamentoPerfil.getSubcategoria() != null) {
			idSubcategoria = "" + parcelamentoPerfil.getSubcategoria().getId();
		}


		if (acao.equals("INSERIR")
				&& (idResolucaoDiretoria == null || idResolucaoDiretoria
						.equalsIgnoreCase(""))) {
			// Informe Numero da RD.
			throw new ControladorException("atencao.numero_rd_nao_informado");
		}

		if (acao.equals("INSERIR")
				&& (idImovelSituacaoTipo == null || idImovelSituacaoTipo
						.equals("" + ConstantesSistema.NUMERO_NAO_INFORMADO))) {
			// Informe Tipo da Situação do Imóvel
			throw new ControladorException(
					"atencao.tipo_situacao_imovel_nao_informado");
		}

		if (parcelamentoPerfil.getPercentualTarifaMinimaPrestacao() == null
				|| parcelamentoPerfil.getPercentualTarifaMinimaPrestacao()
						.equals("")) {
			// Informe Percentual da Tarifa Mínima para Cálculo do Valor Mínimo
			// da Prestação
			throw new ControladorException("atencao.required", null,
					" Percentual da Tarifa Mínima para Cálculo do Valor Mínimo da Prestação");
		}

		if (acao.equals("INSERIR")) {
			// [FS0008]Verificar existência do perfil de parcelamento
			FiltroParcelamentoPerfil filtroParcelamentoPerfil = new FiltroParcelamentoPerfil();

			filtroParcelamentoPerfil
					.adicionarCaminhoParaCarregamentoEntidade("resolucaoDiretoria");
			filtroParcelamentoPerfil.adicionarParametro(new ParametroSimples(
					FiltroParcelamentoPerfil.RESOLUCAO_DIRETORIA_ID,
					idResolucaoDiretoria));

			filtroParcelamentoPerfil
					.adicionarCaminhoParaCarregamentoEntidade("imovelSituacaoTipo");

			filtroParcelamentoPerfil.adicionarParametro(new ParametroSimples(
					FiltroParcelamentoPerfil.IMOVEL_SITUACAO_TIPO_ID,
					idImovelSituacaoTipo));

			filtroParcelamentoPerfil
					.adicionarCaminhoParaCarregamentoEntidade("imovelPerfil");
			if (idImovelPerfil == null) {
				filtroParcelamentoPerfil.adicionarParametro(new ParametroNulo(
						FiltroParcelamentoPerfil.IMOVEL_PERFIL_ID));
			} else {
				filtroParcelamentoPerfil
						.adicionarParametro(new ParametroSimples(
								FiltroParcelamentoPerfil.IMOVEL_PERFIL_ID,
								idImovelPerfil));
			}

			filtroParcelamentoPerfil
					.adicionarCaminhoParaCarregamentoEntidade("subcategoria");
			if (idSubcategoria == null) {
				filtroParcelamentoPerfil.adicionarParametro(new ParametroNulo(
						FiltroParcelamentoPerfil.SUBCATEGORIA_ID));
			} else {
				filtroParcelamentoPerfil
						.adicionarParametro(new ParametroSimples(
								FiltroParcelamentoPerfil.SUBCATEGORIA_ID,
								idSubcategoria));
			}

			Collection colecaoParcelamentoPerfil = null;

			colecaoParcelamentoPerfil = getControladorUtil().pesquisar(
					filtroParcelamentoPerfil,
					ParcelamentoPerfil.class.getName());

			if (colecaoParcelamentoPerfil != null
					&& !colecaoParcelamentoPerfil.isEmpty()) {
				throw new ControladorException(
						"atencao.perfil_parcelamento_ja_existe");
			}

		}
		// else {
		// // [FS0002]Verificar se perfil de parcelamento já foi utilizado
		// FiltroParcelamento filtroParcelamento = new FiltroParcelamento();
		//
		// filtroParcelamento.adicionarParametro(new ParametroSimples(
		// FiltroParcelamento.PARCELAMENTO_PERFIL_ID,
		// idPerfilParcelamento));
		//
		// Collection colecaoParcelamento = getControladorUtil().pesquisar(
		// filtroParcelamento, Parcelamento.class.getName());
		//
		// if (colecaoParcelamento != null && !colecaoParcelamento.isEmpty()) {
		// // Perfil de Parcelamento já utilizado, não pode ser alterado
		// // nem excluído.
		// throw new ControladorException(
		// "atencao.perfil_parcelamento_ja_utilizado");
		// }
		// }
		
		if(parcelamentoPerfil.getIndicadorDescontoVistaValorDebito().equals(ConstantesSistema.SIM) 
				&& Util.isVazioOrNulo(collectionDescontoValorDebitoPeriodo)){
			throw new ControladorException("atencao.campo.informado", null, "Informar Valores de Desconto");
		}
		
		boolean  informadoParcelaEntradaDesconto = false;
		
		if (collectionParcelamentoQuantidadeReparcelamentoHelper == null
				|| collectionParcelamentoQuantidadeReparcelamentoHelper
						.isEmpty()) {
			throw new ControladorException(
			// Informe Reparcelamento Consecutivo
					"atencao.required", null, " Reparcelamento Consecutivo");
		} else {
			Iterator iterator = collectionParcelamentoQuantidadeReparcelamentoHelper
					.iterator();

			while (iterator.hasNext()) {

				ParcelamentoQuantidadeReparcelamentoHelper parcelamentoQuantidadeReparcelamentoHelper = (ParcelamentoQuantidadeReparcelamentoHelper) iterator
						.next();
				/*
				 * if (parcelamentoQuantidadeReparcelamentoHelper
				 * .getValorMinimoPrestacao() == null) { //Informe Valor Mínimo
				 * da Prestação throw new ControladorException(
				 * "atencao.required", null, " Valor Mínimo da Prestação"); }
				 * 
				 * BigDecimal valorMinPrest =
				 * parcelamentoQuantidadeReparcelamentoHelper.getValorMinimoPrestacao();
				 * if (valorMinPrest.equals(new BigDecimal(0))){ //Valor Mínimo
				 * da Prestação deve somente conter números decimais positivos.
				 * throw new ControladorException( "atencao.float", null," Valor
				 * Mínimo da Prestação"); }
				 */
				
				Collection<ParcelaEntradaDesconto> collectionParcelaEntradaDesconto = parcelamentoQuantidadeReparcelamentoHelper.getCollectionParcelaEntradaDesconto();
				
				if (collectionParcelaEntradaDesconto != null &&	!collectionParcelaEntradaDesconto.isEmpty()){
					informadoParcelaEntradaDesconto = true;
				}

				Collection collectionParcelamentoQuantidadePrestacaoHelper = parcelamentoQuantidadeReparcelamentoHelper
						.getCollectionParcelamentoQuantidadePrestacaoHelper();

				if (collectionParcelamentoQuantidadePrestacaoHelper == null
						|| collectionParcelamentoQuantidadePrestacaoHelper
								.isEmpty()) {
					throw new ControladorException(
					// Informações do Parcelamento por Quantidade de
							// Reparcelamentos deve ser informado
							"atencao.campo.informado", null,
							"Informações do Parcelamento por Quantidade de Reparcelamentos");
				}

			}
		}
		
		if(parcelamentoPerfil.getIndicadorDescontoParcelaValorEntrada().equals(ConstantesSistema.SIM) 
				&& !informadoParcelaEntradaDesconto){
			//Informações de Desconto da parcela de Entrada deve ser informada
			throw new ControladorException("atencao.campo.informado", null, "Informações do Percentual de Desconto por Percentual de Entrada");
		}

		// filtro para descobrir o percentual máximo de desconto permitido para
		// financiamento
		/*
		 * FiltroSistemaParametro filtroSistemaParametro = new
		 * FiltroSistemaParametro(); Collection colecaoSistemaParametros;
		 * 
		 * colecaoSistemaParametros = getControladorUtil().pesquisar(
		 * filtroSistemaParametro, SistemaParametro.class.getName());
		 * SistemaParametro sistemaParametro = (SistemaParametro)
		 * colecaoSistemaParametros .iterator().next(); BigDecimal
		 * percentualMaximoAbatimentoPermitido = sistemaParametro
		 * .getPercentualMaximoAbatimento();
		 */

		if (collectionParcelamentoDescontoAntiguidade != null
				&& !collectionParcelamentoDescontoAntiguidade.isEmpty()) {

			Iterator iteratorParcelamentoDescontoAntiguidade = collectionParcelamentoDescontoAntiguidade
					.iterator();

			while (iteratorParcelamentoDescontoAntiguidade.hasNext()) {

				ParcelamentoDescontoAntiguidade parcelamentoDescontoAntiguidade = (ParcelamentoDescontoAntiguidade) iteratorParcelamentoDescontoAntiguidade
						.next();

				if (parcelamentoDescontoAntiguidade
						.getPercentualDescontoSemRestabelecimento() == null) {
					// Percentual de Desconto Sem Restabelecimento
					throw new ControladorException("atencao.required", null,
							"Percentual de Desconto Sem Restabelecimento");
				} else {
					// [FS0006]Verificar percentual de desconto
					BigDecimal percentualDescontoSemRestabelecimento = parcelamentoDescontoAntiguidade
							.getPercentualDescontoSemRestabelecimento();
					if (percentualDescontoSemRestabelecimento
							.equals(new BigDecimal(0))) {
						// Percentual de Desconto Sem Restabelecimento deve
						// somente conter números decimais positivos.
						throw new ControladorException("atencao.float", null,
								"Percentual de Desconto Sem Restabelecimento");
					} /*
						 * else if (percentualDescontoSemRestabelecimento
						 * .compareTo(percentualMaximoAbatimentoPermitido) > 0) { //
						 * Percentual de Desconto Sem Restabelecimento é //
						 * superior ao // Percentual Máximo de Desconto de << //
						 * percentualMaximoAbatimento >> permitido para //
						 * Financiamneto throw new ControladorException(
						 * "atencao.percentual_desconto_sem_rest_superior_percentual_max",
						 * null, "" + percentualMaximoAbatimentoPermitido); }
						 */
				}

				if (parcelamentoDescontoAntiguidade
						.getPercentualDescontoComRestabelecimento() == null) {
					throw new ControladorException(
					// Informe Percentual de Desconto Com Restabelecimento
							"atencao.required", null,
							"  Percentual de Desconto Com Restabelecimento");
				} else {
					// [FS0006]Verificar percentual de desconto
					BigDecimal percentualDescontoComRestabelecimento = parcelamentoDescontoAntiguidade
							.getPercentualDescontoComRestabelecimento();
					if (percentualDescontoComRestabelecimento
							.equals(new BigDecimal(0))) {
						// Percentual de Desconto Com Restabelecimento deve
						// somente conter números decimais positivos.
						throw new ControladorException("atencao.float", null,
								"Percentual de Desconto Com Restabelecimento");
					}/*
						 * else if (percentualDescontoComRestabelecimento
						 * .compareTo(percentualMaximoAbatimentoPermitido) > 0) { //
						 * Percentual de Desconto Cem Restabelecimento é //
						 * superior ao // Percentual Máximo de Desconto de << //
						 * percentualMaximoAbatimento >> permitido para //
						 * Financiamneto throw new ControladorException(
						 * "atencao.percentual_desconto_sem_rest_superior_percentual_max",
						 * null, "" + percentualMaximoAbatimentoPermitido); }
						 */
				}

				if (parcelamentoDescontoAntiguidade
						.getPercentualDescontoAtivo() == null) {
					// Informe Percentual de Desconto Ativo
					throw new ControladorException("atencao.required", null,
							"  Percentual de Desconto Ativo");
				} else {
					// [FS0006]Verificar percentual de desconto
					BigDecimal percentualDescontoAtivo = parcelamentoDescontoAntiguidade
							.getPercentualDescontoAtivo();
					if (percentualDescontoAtivo.equals(new BigDecimal(0))) {
						// Percentual de Desconto Ativo deve somente conter
						// números decimais positivos.
						throw new ControladorException("atencao.float", null,
								"Percentual de Desconto Ativo");
					}/*
						 * else if (percentualDescontoAtivo
						 * .compareTo(percentualMaximoAbatimentoPermitido) > 0) { //
						 * Percentual de Desconto Ativo é superior ao //
						 * Percentual Máximo de Desconto de << //
						 * percentualMaximoAbatimento >> permitido para //
						 * Financiamneto throw new ControladorException(
						 * "atencao.percentual_desconto_sem_rest_superior_percentual_max",
						 * null, "" + percentualMaximoAbatimentoPermitido); }
						 */
				}

			}

		}

		if (collectionParcelamentoDescontoInatividade != null
				&& !collectionParcelamentoDescontoInatividade.isEmpty()) {

			Iterator iteratorParcelamentoDescontoInatividade = collectionParcelamentoDescontoInatividade
					.iterator();

			while (iteratorParcelamentoDescontoInatividade.hasNext()) {

				ParcelamentoDescontoInatividade parcelamentoDescontoInatividade = (ParcelamentoDescontoInatividade) iteratorParcelamentoDescontoInatividade
						.next();

				if (parcelamentoDescontoInatividade
						.getPercentualDescontoSemRestabelecimento() == null) {
					// Informe Percentual de Desconto Sem Restabelecimento
					throw new ControladorException("atencao.required", null,
							"  Percentual de Desconto Sem Restabelecimento");
				} else {
					// [FS0006]Verificar percentual de desconto
					BigDecimal percentualDescontoSemRestabelecimento = parcelamentoDescontoInatividade
							.getPercentualDescontoSemRestabelecimento();
					if (percentualDescontoSemRestabelecimento
							.equals(new BigDecimal(0))) {
						// Percentual de Desconto Sem Restabelecimento deve
						// somente conter números decimais positivos.
						throw new ControladorException("atencao.float", null,
								"Percentual de Desconto Sem Restabelecimento");
					} /*
						 * else if (percentualDescontoSemRestabelecimento
						 * .compareTo(percentualMaximoAbatimentoPermitido) > 0) { //
						 * Percentual de Desconto Sem Restabelecimento é //
						 * superior ao // Percentual Máximo de Desconto de << //
						 * percentualMaximoAbatimento >> permitido para //
						 * Financiamneto throw new ControladorException(
						 * "atencao.percentual_desconto_sem_rest_superior_percentual_max",
						 * null, "" + percentualMaximoAbatimentoPermitido); }
						 */
				}

				if (parcelamentoDescontoInatividade
						.getPercentualDescontoComRestabelecimento() == null) {
					throw new ControladorException(
					// Informe Percentual de Desconto Com Restabelecimento
							"atencao.required", null,
							"  Percentual de Desconto Com Restabelecimento");
				} else {
					// [FS0006]Verificar percentual de desconto
					BigDecimal percentualDescontoComRestabelecimento = parcelamentoDescontoInatividade
							.getPercentualDescontoComRestabelecimento();
					if (percentualDescontoComRestabelecimento
							.equals(new BigDecimal(0))) {
						// Percentual de Desconto Com Restabelecimento deve
						// somente conter números decimais positivos.
						throw new ControladorException("atencao.float", null,
								"Percentual de Desconto Com Restabelecimento");
					} /*
						 * else if (percentualDescontoComRestabelecimento
						 * .compareTo(percentualMaximoAbatimentoPermitido) > 0) { //
						 * Percentual de Desconto Cem Restabelecimento é //
						 * superior ao // Percentual Máximo de Desconto de << //
						 * percentualMaximoAbatimento >> permitido para //
						 * Financiamneto throw new ControladorException(
						 * "atencao.percentual_desconto_sem_rest_superior_percentual_max",
						 * null, "" + percentualMaximoAbatimentoPermitido); }
						 */
				}
			}
		}
		
		if (collectionParcelamentoDescontoInatividadeAVista != null
				&& !collectionParcelamentoDescontoInatividadeAVista.isEmpty()) {

			Iterator iteratorParcelamentoDescontoInatividade = collectionParcelamentoDescontoInatividadeAVista
					.iterator();

			while (iteratorParcelamentoDescontoInatividade.hasNext()) {

				ParcDesctoInativVista parcelamentoDescontoInatividade = (ParcDesctoInativVista) iteratorParcelamentoDescontoInatividade
						.next();

				if (parcelamentoDescontoInatividade
						.getPercentualDescontoSemRestabelecimento() == null) {
					// Informe Percentual de Desconto Sem Restabelecimento
					throw new ControladorException("atencao.required", null,
							"  Percentual de Desconto Sem Restabelecimento");
				} else {
					// [FS0006]Verificar percentual de desconto
					BigDecimal percentualDescontoSemRestabelecimento = parcelamentoDescontoInatividade
							.getPercentualDescontoSemRestabelecimento();
					if (percentualDescontoSemRestabelecimento
							.equals(new BigDecimal(0))) {
						// Percentual de Desconto Sem Restabelecimento deve
						// somente conter números decimais positivos.
						throw new ControladorException("atencao.float", null,
								"Percentual de Desconto Sem Restabelecimento");
					} 
				}

				if (parcelamentoDescontoInatividade
						.getPercentualDescontoComRestabelecimento() == null) {
					throw new ControladorException(
					// Informe Percentual de Desconto Com Restabelecimento
							"atencao.required", null,
							"  Percentual de Desconto Com Restabelecimento");
				} else {
					// [FS0006]Verificar percentual de desconto
					BigDecimal percentualDescontoComRestabelecimento = parcelamentoDescontoInatividade
							.getPercentualDescontoComRestabelecimento();
					if (percentualDescontoComRestabelecimento
							.equals(new BigDecimal(0))) {
						// Percentual de Desconto Com Restabelecimento deve
						// somente conter números decimais positivos.
						throw new ControladorException("atencao.float", null,
								"Percentual de Desconto Com Restabelecimento");
					}
				}
			}
		}

	}

	/**
	 * Inserir o Perfil de Parcelamento na base
	 * 
	 * [UC0220] Inserir Perfil de Parcelamento
	 * 
	 * @author Vivianne Sousa
	 * @date 10/05/2006
	 * 
	 * @param parcelamentoPerfilNova
	 * @param collectionParcelamentoQuantidadeReparcelamentoHelper
	 * @param collectionParcelamentoDescontoInatividade
	 * @param collectionParcelamentoDescontoAntiguidade
	 * @param usuarioLogado
	 * @return o idPerfilParcelamneto
	 */
	public Integer inserirPerfilParcelamento(
			ParcelamentoPerfil parcelamentoPerfilNovo,
			Collection collectionParcelamentoQuantidadeReparcelamentoHelper,
			Collection collectionParcelamentoDescontoInatividade,
			Collection collectionParcelamentoDescontoAntiguidade,
			Usuario usuarioLogado,
			Collection collectionParcelamentoDescontoInatividadeAVista,
			ArrayList<DescontoValorDebitoPeriodo> collectionDescontoValorDebitoPeriodo) throws ControladorException {

		validacaoFinalPerfilParcelamento(parcelamentoPerfilNovo,
				collectionParcelamentoQuantidadeReparcelamentoHelper,
				collectionParcelamentoDescontoInatividade,
				collectionParcelamentoDescontoAntiguidade, "INSERIR",
				collectionParcelamentoDescontoInatividadeAVista,
				collectionDescontoValorDebitoPeriodo);

		// ------------ REGISTRAR TRANSAÇÃO ----------------------------
		RegistradorOperacao registradorOperacao = new RegistradorOperacao(
				Operacao.OPERACAO_PERFIL_PARCELAMENTO_INSERIR,
				new UsuarioAcaoUsuarioHelper(usuarioLogado,
						UsuarioAcao.USUARIO_ACAO_EFETUOU_OPERACAO));

		Operacao operacao = new Operacao();
		operacao.setId(Operacao.OPERACAO_PERFIL_PARCELAMENTO_INSERIR);

		OperacaoEfetuada operacaoEfetuada = new OperacaoEfetuada();
		operacaoEfetuada.setOperacao(operacao);

		parcelamentoPerfilNovo.setOperacaoEfetuada(operacaoEfetuada);
		parcelamentoPerfilNovo.adicionarUsuario(usuarioLogado,
				UsuarioAcao.USUARIO_ACAO_EFETUOU_OPERACAO);
		registradorOperacao.registrarOperacao(parcelamentoPerfilNovo);
		// ------------ REGISTRAR TRANSAÇÃO ----------------------------

		// insere o objeto PerfilParcelamento e recupera o seu id
		parcelamentoPerfilNovo.setUltimaAlteracao(new Date());
		Integer idPerfilParcelamento = (Integer) this.getControladorUtil()
				.inserir(parcelamentoPerfilNovo);
		parcelamentoPerfilNovo.setId(idPerfilParcelamento);
		
		/**
		 * Desconto Valor Debito A vista
		 ***/
		if(parcelamentoPerfilNovo.getIndicadorDescontoVistaValorDebito().equals(ConstantesSistema.SIM)){
			
			for (DescontoValorDebitoPeriodo descontoValorDebitoPeriodo : collectionDescontoValorDebitoPeriodo){
				// ------------ REGISTRAR TRANSAÇÃO
				// ---------------
				descontoValorDebitoPeriodo
						.setOperacaoEfetuada(operacaoEfetuada);
				descontoValorDebitoPeriodo
						.adicionarUsuario(
								usuarioLogado,
								UsuarioAcao.USUARIO_ACAO_EFETUOU_OPERACAO);
				registradorOperacao
						.registrarOperacao(descontoValorDebitoPeriodo);
				// ------------ REGISTRAR TRANSAÇÃO
				
				descontoValorDebitoPeriodo.setParcelamentoPerfil(parcelamentoPerfilNovo);
				descontoValorDebitoPeriodo.setUltimaAlteracao(new Date());
				
				this.getControladorUtil().inserir(descontoValorDebitoPeriodo);
			}
		
		}

		// inserir a coleção de ParcelamentoQuantidadeReparcelamento
		if (collectionParcelamentoQuantidadeReparcelamentoHelper != null
				&& !collectionParcelamentoQuantidadeReparcelamentoHelper
						.isEmpty()) {

			Iterator iterator = collectionParcelamentoQuantidadeReparcelamentoHelper
					.iterator();

			while (iterator.hasNext()) {

				ParcelamentoQuantidadeReparcelamentoHelper parcelamentoQuantidadeReparcelamentoHelper = (ParcelamentoQuantidadeReparcelamentoHelper) iterator
						.next();
				ParcelamentoQuantidadeReparcelamento parcelamentoQuantidadeReparcelamento = new ParcelamentoQuantidadeReparcelamento();

				parcelamentoQuantidadeReparcelamento
						.setParcelamentoPerfil(parcelamentoPerfilNovo);
				parcelamentoQuantidadeReparcelamento
						.setQuantidadeMaximaReparcelamento(parcelamentoQuantidadeReparcelamentoHelper
								.getQuantidadeMaximaReparcelamento());
				
				parcelamentoQuantidadeReparcelamento
				.setPercentualEntradaSugerida(parcelamentoQuantidadeReparcelamentoHelper
						.getPercentualEntradaSugerida());
				
				/*
				 * parcelamentoQuantidadeReparcelamento
				 * .setValorMinimoPrestacao(parcelamentoQuantidadeReparcelamentoHelper
				 * .getValorMinimoPrestacao());
				 */
				parcelamentoQuantidadeReparcelamento
						.setUltimaAlteracao(new Date());

				// ------------ REGISTRAR TRANSAÇÃO ----------------------------
				parcelamentoQuantidadeReparcelamento
						.setOperacaoEfetuada(operacaoEfetuada);
				parcelamentoQuantidadeReparcelamento.adicionarUsuario(
						usuarioLogado,
						UsuarioAcao.USUARIO_ACAO_EFETUOU_OPERACAO);
				registradorOperacao
						.registrarOperacao(parcelamentoQuantidadeReparcelamento);
				// ------------ REGISTRAR TRANSAÇÃO ----------------------------

				// insere o objeto ParcelamentoQuantidadeReparcelamento e
				// recupera o seu id
				Integer idParcelamentoQuantidadeReparcelamento = (Integer) this
						.getControladorUtil().inserir(
								parcelamentoQuantidadeReparcelamento);
				parcelamentoQuantidadeReparcelamento
						.setId(idParcelamentoQuantidadeReparcelamento);
				
				/******
				 * PARCELA ENTRADA DESCONTO
				 ******/
				
				Collection<ParcelaEntradaDesconto> collectionParcelaEntradaDesconto = parcelamentoQuantidadeReparcelamentoHelper
						.getCollectionParcelaEntradaDesconto();

				if (collectionParcelaEntradaDesconto != null
						&& !collectionParcelaEntradaDesconto.isEmpty()) {

					Iterator<ParcelaEntradaDesconto> iteratorParcelaEntradaDesconto = collectionParcelaEntradaDesconto.iterator();

					while (iteratorParcelaEntradaDesconto.hasNext()) {

						ParcelaEntradaDesconto parcelaEntradaDesconto = iteratorParcelaEntradaDesconto.next();

						parcelaEntradaDesconto.setParcelamentoQuantidadeReparcelamento(parcelamentoQuantidadeReparcelamento);
						parcelaEntradaDesconto.setUltimaAlteracao(new Date());

						// ------------ REGISTRAR TRANSAÇÃO
						// ---------------
						parcelaEntradaDesconto
								.setOperacaoEfetuada(operacaoEfetuada);
						parcelaEntradaDesconto
								.adicionarUsuario(
										usuarioLogado,
										UsuarioAcao.USUARIO_ACAO_EFETUOU_OPERACAO);
						registradorOperacao
								.registrarOperacao(parcelaEntradaDesconto);
						// ------------ REGISTRAR TRANSAÇÃO
						// ---------------

						// insere o objeto parcelaEntradaDesconto
						this.getControladorUtil().inserir(parcelaEntradaDesconto);
					}
				}
				
				Collection collectionParcelamentoQuantidadePrestacaoHelper = parcelamentoQuantidadeReparcelamentoHelper
						.getCollectionParcelamentoQuantidadePrestacaoHelper();

				if (collectionParcelamentoQuantidadePrestacaoHelper != null
						&& !collectionParcelamentoQuantidadePrestacaoHelper
								.isEmpty()) {

					Iterator iteratorParcelamentoQuantidadePrestacaoHelper = collectionParcelamentoQuantidadePrestacaoHelper
							.iterator();

					while (iteratorParcelamentoQuantidadePrestacaoHelper
							.hasNext()) {

						ParcelamentoQuantidadePrestacaoHelper parcelamentoQuantidadePrestacaoHelper = (ParcelamentoQuantidadePrestacaoHelper) iteratorParcelamentoQuantidadePrestacaoHelper
								.next();

						ParcelamentoQuantidadePrestacao parcelamentoQuantidadePrestacao = parcelamentoQuantidadePrestacaoHelper
								.getParcelamentoQuantidadePrestacao();

						parcelamentoQuantidadePrestacao
								.setParcelamentoQuantidadeReparcelamento(parcelamentoQuantidadeReparcelamento);

//						parcelamentoQuantidadePrestacao
//								.setUltimaAlteracao(new Date());

						// ------------ REGISTRAR TRANSAÇÃO ---------------
						parcelamentoQuantidadePrestacao
								.setOperacaoEfetuada(operacaoEfetuada);
						parcelamentoQuantidadePrestacao.adicionarUsuario(
								usuarioLogado,
								UsuarioAcao.USUARIO_ACAO_EFETUOU_OPERACAO);
						registradorOperacao
								.registrarOperacao(parcelamentoQuantidadePrestacao);
						// ------------ REGISTRAR TRANSAÇÃO ---------------

						// insere o objeto parcelamentoQuantidadePrestacao
						Integer idparcelamentoQuantidadePrestacao = (Integer) this
								.getControladorUtil().inserir(
										parcelamentoQuantidadePrestacao);
						parcelamentoQuantidadePrestacao
								.setId(idparcelamentoQuantidadePrestacao);

						Collection collectionParcelamentoFaixaValor = parcelamentoQuantidadePrestacaoHelper
								.getCollectionParcelamentoFaixaValor();

						if (collectionParcelamentoFaixaValor != null
								&& !collectionParcelamentoFaixaValor.isEmpty()) {

							Iterator iteratorParcelamentoFaixaValor = collectionParcelamentoFaixaValor
									.iterator();

							while (iteratorParcelamentoFaixaValor.hasNext()) {

								ParcelamentoFaixaValor parcelamentoFaixaValor = (ParcelamentoFaixaValor) iteratorParcelamentoFaixaValor
										.next();

								parcelamentoFaixaValor
										.setParcelamentoQuantidadePrestacao(parcelamentoQuantidadePrestacao);
								parcelamentoFaixaValor
										.setUltimaAlteracao(new Date());

								// ------------ REGISTRAR TRANSAÇÃO
								// ---------------
								parcelamentoFaixaValor
										.setOperacaoEfetuada(operacaoEfetuada);
								parcelamentoFaixaValor
										.adicionarUsuario(
												usuarioLogado,
												UsuarioAcao.USUARIO_ACAO_EFETUOU_OPERACAO);
								registradorOperacao
										.registrarOperacao(parcelamentoFaixaValor);
								// ------------ REGISTRAR TRANSAÇÃO
								// ---------------

								// insere o objeto parcelamentoFaixaValor
								this.getControladorUtil().inserir(
										parcelamentoFaixaValor);

							}

						}
						
						
						Collection colLigacoesAgua = parcelamentoQuantidadePrestacaoHelper.getCollectionParcelamentoQtdLigacaoAgua();
						if(!Util.isVazioOrNulo(colLigacoesAgua)){
							Iterator iteratorLigacoesAgua = colLigacoesAgua.iterator();
							while(iteratorLigacoesAgua.hasNext()){
								ParcelamentoQuantidadePrestacaoSituacaoLigacaoAgua parcelamentoLigacoesAgua = 
									(ParcelamentoQuantidadePrestacaoSituacaoLigacaoAgua) iteratorLigacoesAgua.next();
								parcelamentoLigacoesAgua.setParcelamentoQuantidadePrestacao(parcelamentoQuantidadePrestacao);
								this.getControladorUtil().inserir(parcelamentoLigacoesAgua);
							}
						}
						
					}

				}
				
			}

		}

		// inserir a coleção de collectionParcelamentoDescontoInatividade
		if (collectionParcelamentoDescontoInatividade != null
				&& !collectionParcelamentoDescontoInatividade.isEmpty()) {

			Iterator iterator = collectionParcelamentoDescontoInatividade
					.iterator();

			while (iterator.hasNext()) {

				ParcelamentoDescontoInatividade parcelamentoDescontoInatividade = (ParcelamentoDescontoInatividade) iterator
						.next();

				parcelamentoDescontoInatividade
						.setParcelamentoPerfil(parcelamentoPerfilNovo);
				parcelamentoDescontoInatividade.setUltimaAlteracao(new Date());

				// ------------ REGISTRAR TRANSAÇÃO ----------------------------
				parcelamentoDescontoInatividade
						.setOperacaoEfetuada(operacaoEfetuada);
				parcelamentoDescontoInatividade.adicionarUsuario(usuarioLogado,
						UsuarioAcao.USUARIO_ACAO_EFETUOU_OPERACAO);
				registradorOperacao
						.registrarOperacao(parcelamentoDescontoInatividade);
				// ------------ REGISTRAR TRANSAÇÃO ----------------------------

				// insere o objeto parcelamentoDescontoInatividade
				this.getControladorUtil().inserir(
						parcelamentoDescontoInatividade);

			}

		}

		// inserir a coleção de collectionParcelamentoDescontoAntiguidade
		if (collectionParcelamentoDescontoAntiguidade != null
				&& !collectionParcelamentoDescontoAntiguidade.isEmpty()) {

			Iterator iterator = collectionParcelamentoDescontoAntiguidade
					.iterator();

			while (iterator.hasNext()) {

				ParcelamentoDescontoAntiguidade parcelamentoDescontoAntiguidade = (ParcelamentoDescontoAntiguidade) iterator
						.next();

				parcelamentoDescontoAntiguidade
						.setParcelamentoPerfil(parcelamentoPerfilNovo);
				parcelamentoDescontoAntiguidade.setUltimaAlteracao(new Date());

				// ------------ REGISTRAR TRANSAÇÃO ----------------------------
				parcelamentoDescontoAntiguidade
						.setOperacaoEfetuada(operacaoEfetuada);
				parcelamentoDescontoAntiguidade.adicionarUsuario(usuarioLogado,
						UsuarioAcao.USUARIO_ACAO_EFETUOU_OPERACAO);
				registradorOperacao
						.registrarOperacao(parcelamentoDescontoAntiguidade);
				// ------------ REGISTRAR TRANSAÇÃO ----------------------------

				// insere o objeto parcelamentoDescontoAntiguidade
				this.getControladorUtil().inserir(
						parcelamentoDescontoAntiguidade);

			}

		}
		
		//inserir a coleção de collectionParcelamentoDescontoInatividade
		if (collectionParcelamentoDescontoInatividadeAVista != null
				&& !collectionParcelamentoDescontoInatividadeAVista.isEmpty()) {

			Iterator iterator = collectionParcelamentoDescontoInatividadeAVista.iterator();

			while (iterator.hasNext()) {

				ParcDesctoInativVista parcelamentoDescontoInatividade = 
					(ParcDesctoInativVista) iterator.next();

				parcelamentoDescontoInatividade
						.setParcelamentoPerfil(parcelamentoPerfilNovo);
				parcelamentoDescontoInatividade.setUltimaAlteracao(new Date());

				// ------------ REGISTRAR TRANSAÇÃO ----------------------------
				parcelamentoDescontoInatividade
						.setOperacaoEfetuada(operacaoEfetuada);
				parcelamentoDescontoInatividade.adicionarUsuario(usuarioLogado,
						UsuarioAcao.USUARIO_ACAO_EFETUOU_OPERACAO);
				registradorOperacao
						.registrarOperacao(parcelamentoDescontoInatividade);
				// ------------ REGISTRAR TRANSAÇÃO ----------------------------

				// insere o objeto parcelamentoDescontoInatividade
				this.getControladorUtil().inserir(
						parcelamentoDescontoInatividade);

			}

		}

		return idPerfilParcelamento;

	}

	/**
	 * [UC0221] Manter Perfil de Parcelamento
	 * 
	 * Remove um objeto do tipo ParcelamentoPerfil no BD
	 * 
	 * @author Vivianne Sousa
	 * @date 11/05/2006
	 * 
	 * @param ids
	 * @param usuarioLogado
	 * @return
	 */
	public void removerPerfilParcelamento(String[] ids, Usuario usuarioLogado)
			throws ControladorException {

		// remover
		// ParcelamentoQuantidadeReparcelamento,ParcelamentoDescontoAntiguidade,
		// ParcelamentoDescontoInatividade para cada ParcelamentoPerfil a
		// remover
		// e remover ParcelamentoQuantidadePrestacao para cada
		// ParcelamentoQuantidadeReparcelamento remivido

		// ------------ REGISTRAR TRANSAÇÃO ----------------
		Operacao operacao = new Operacao();
		operacao.setId(Operacao.OPERACAO_PERFIL_PARCELAMENTO_REMOVER);

		OperacaoEfetuada operacaoEfetuada = new OperacaoEfetuada();
		operacaoEfetuada.setOperacao(operacao);

		UsuarioAcaoUsuarioHelper usuarioAcaoUsuarioHelper = new UsuarioAcaoUsuarioHelper(
				usuarioLogado, UsuarioAcao.USUARIO_ACAO_EFETUOU_OPERACAO);
		Collection<UsuarioAcaoUsuarioHelper> colecaoUsuarios = new ArrayList();
		colecaoUsuarios.add(usuarioAcaoUsuarioHelper);
		// ------------ REGISTRAR TRANSAÇÃO ----------------

		int i = 0;
		while (i < ids.length) {
			String idPerfilParcelamento = ids[i];
			// [FS0002]Verificar se perfil de parcelamento já foi utilizado
			FiltroParcelamento filtroParcelamento = new FiltroParcelamento();
			filtroParcelamento.adicionarParametro(new ParametroSimples(
					FiltroParcelamento.PARCELAMENTO_PERFIL_ID,
					idPerfilParcelamento));

			Collection colecaoParcelamento = this
					.getControladorUtil()
					.pesquisar(filtroParcelamento, Parcelamento.class.getName());

			if (colecaoParcelamento != null && !colecaoParcelamento.isEmpty()) {
				// Perfil de Parcelamento já utilizado, não pode ser alterado
				// nem excluído.
				throw new ControladorException(
						"atencao.perfil_parcelamento_ja_utilizado");
			}
			
			/**
			 * Desconto Valor Debito Periodo
			 * ***/
			FiltroDescontoValorDebitoPeriodo filtroDescontoValorDebitoPeriodo = new FiltroDescontoValorDebitoPeriodo();
			filtroDescontoValorDebitoPeriodo.adicionarParametro(new ParametroSimples(FiltroDescontoValorDebitoPeriodo.PARCELAMENTO_PERFIL_ID, idPerfilParcelamento));
			
			ArrayList<DescontoValorDebitoPeriodo> collectionDescontoValorDebitoPeriodo = (ArrayList<DescontoValorDebitoPeriodo>) getControladorUtil().pesquisar(filtroDescontoValorDebitoPeriodo, DescontoValorDebitoPeriodo.class.getName());
				
			if(collectionDescontoValorDebitoPeriodo != null && !collectionDescontoValorDebitoPeriodo.isEmpty()){
				
				for(DescontoValorDebitoPeriodo descontoValorDebitoPeriodo : collectionDescontoValorDebitoPeriodo){
					if(descontoValorDebitoPeriodo.getId() != null && !descontoValorDebitoPeriodo.equals("")){
						// ------------ REGISTRAR TRANSAÇÃO ----------------------------
						descontoValorDebitoPeriodo
								.setOperacaoEfetuada(operacaoEfetuada);
						descontoValorDebitoPeriodo.adicionarUsuario(
								usuarioLogado,
								UsuarioAcao.USUARIO_ACAO_EFETUOU_OPERACAO);
						// ------------ REGISTRAR TRANSAÇÃO ----------------------------
						
						getControladorUtil().remover(descontoValorDebitoPeriodo);
					}
				}
			}
			/**************/

			// coleção de ParcelamentoQuantidadeReparcelamento para remover
			FiltroParcelamentoQuantidadeReparcelamento filtroParcelamentoQuantidadeReparcelamento = new FiltroParcelamentoQuantidadeReparcelamento();

			filtroParcelamentoQuantidadeReparcelamento
					.adicionarCaminhoParaCarregamentoEntidade("parcelamentoPerfil");
			filtroParcelamentoQuantidadeReparcelamento
					.adicionarParametro(new ParametroSimples(
							FiltroParcelamentoQuantidadeReparcelamento.PARCELAMENTO_PERFIL,
							idPerfilParcelamento));

			Collection collectionParcelamentoQuantidadeReparcelamento = (Collection<ParcelamentoQuantidadeReparcelamento>) this
					.getControladorUtil().pesquisar(
							filtroParcelamentoQuantidadeReparcelamento,
							ParcelamentoQuantidadeReparcelamento.class
									.getName());

			Iterator iteratorReparcelamento = collectionParcelamentoQuantidadeReparcelamento
					.iterator();

			while (iteratorReparcelamento.hasNext()) {

				ParcelamentoQuantidadeReparcelamento parcelamentoQuantidadeReparcelamento = (ParcelamentoQuantidadeReparcelamento) iteratorReparcelamento
						.next();
				
				/***
				 *	Parcela Entrada Desconto 
				 ****/
				FiltroParcelaEntradaDesconto filtroParcelaEntradaDesconto = new FiltroParcelaEntradaDesconto();
				filtroParcelaEntradaDesconto.adicionarParametro(new ParametroSimples(FiltroParcelaEntradaDesconto.PARCELAMENTO_QUANTIDADE_REPARCELAMENTO_ID, parcelamentoQuantidadeReparcelamento.getId()));
				
				ArrayList<ParcelaEntradaDesconto> collectionParcelaEntradaDesconto = (ArrayList<ParcelaEntradaDesconto>) getControladorUtil().pesquisar(filtroParcelaEntradaDesconto, ParcelaEntradaDesconto.class.getName());
				if(!Util.isVazioOrNulo(collectionParcelaEntradaDesconto)){
					for(ParcelaEntradaDesconto parcelaEntradaDesconto : collectionParcelaEntradaDesconto){
						if(parcelaEntradaDesconto.getId() != null && !parcelaEntradaDesconto.getId().equals("")){
							// ------------ REGISTRAR TRANSAÇÃO ----------------------------
							parcelaEntradaDesconto
									.setOperacaoEfetuada(operacaoEfetuada);
							parcelaEntradaDesconto.adicionarUsuario(
									usuarioLogado,
									UsuarioAcao.USUARIO_ACAO_EFETUOU_OPERACAO);
							// ------------ REGISTRAR TRANSAÇÃO ----------------------------
							
							getControladorUtil().remover(parcelaEntradaDesconto);
						}
					}
				}
				/*********/

				String idParcelamentoQuantidadeReparcelamento = ""
						+ parcelamentoQuantidadeReparcelamento.getId();
				// coleção de ParcelamentoQuantidadePrestacao para remover
				FiltroParcelamentoQuantidadePrestacao filtroParcelamentoQuantidadePrestacao = new FiltroParcelamentoQuantidadePrestacao();

				filtroParcelamentoQuantidadePrestacao
						.adicionarCaminhoParaCarregamentoEntidade("parcelamentoQuantidadeReparcelamento");
				filtroParcelamentoQuantidadePrestacao
						.adicionarParametro(new ParametroSimples(
								FiltroParcelamentoQuantidadePrestacao.PARCELAMENTO_QUANTIDADE_REPARCELAMENTO,
								idParcelamentoQuantidadeReparcelamento));

				Collection collectionParcelamentoQuantidadePrestacao = (Collection<ParcelamentoQuantidadePrestacao>) this
						.getControladorUtil()
						.pesquisar(filtroParcelamentoQuantidadePrestacao,
								ParcelamentoQuantidadePrestacao.class.getName());

				Iterator iteratorPrestacao = collectionParcelamentoQuantidadePrestacao
						.iterator();

				while (iteratorPrestacao.hasNext()) {

					ParcelamentoQuantidadePrestacao parcelamentoQuantidadePrestacao = (ParcelamentoQuantidadePrestacao) iteratorPrestacao
							.next();

					String idParcelamentoQuantidadePrestacao = ""
							+ parcelamentoQuantidadePrestacao.getId();
					// coleção de ParcelamentoFaixaValor para remover
					FiltroParcelamentoFaixaValor filtroParcelamentoFaixaValor = new FiltroParcelamentoFaixaValor();

					// filtroParcelamentoFaixaValor
					// .adicionarCaminhoParaCarregamentoEntidade("parcelamentoQuantidadePrestacao");
					filtroParcelamentoFaixaValor
							.adicionarParametro(new ParametroSimples(
									FiltroParcelamentoFaixaValor.PARCELAMENTO_QUANTIDADE_PRESTACAO,
									idParcelamentoQuantidadePrestacao));

					Collection collectionParcelamentoFaixaValor = (Collection) this
							.getControladorUtil().pesquisar(
									filtroParcelamentoFaixaValor,
									ParcelamentoFaixaValor.class.getName());

					Iterator iteratorFaixaValor = collectionParcelamentoFaixaValor
							.iterator();

					while (iteratorFaixaValor.hasNext()) {

						ParcelamentoFaixaValor parcelamentoFaixaValor = (ParcelamentoFaixaValor) iteratorFaixaValor
								.next();

						// ------------ REGISTRAR TRANSAÇÃO ----------------
						parcelamentoFaixaValor
								.setOperacaoEfetuada(operacaoEfetuada);
						parcelamentoFaixaValor.adicionarUsuario(usuarioLogado,
								UsuarioAcao.USUARIO_ACAO_EFETUOU_OPERACAO);
						// ------------ REGISTRAR TRANSAÇÃO ----------------
						// remove objeto ParcelamentoFaixaValor na base
						this.getControladorUtil().remover(
								parcelamentoFaixaValor);

					}

					// ------------ REGISTRAR TRANSAÇÃO ----------------
					parcelamentoQuantidadePrestacao
							.setOperacaoEfetuada(operacaoEfetuada);
					parcelamentoQuantidadePrestacao.adicionarUsuario(
							usuarioLogado,
							UsuarioAcao.USUARIO_ACAO_EFETUOU_OPERACAO);
					// ------------ REGISTRAR TRANSAÇÃO ----------------
					// remove objeto ParcelamentoQuantidadePrestacao na base
					this.getControladorUtil().remover(
							parcelamentoQuantidadePrestacao);
				}
				// ------------ REGISTRAR TRANSAÇÃO ----------------
				parcelamentoQuantidadeReparcelamento
						.setOperacaoEfetuada(operacaoEfetuada);
				parcelamentoQuantidadeReparcelamento.adicionarUsuario(
						usuarioLogado,
						UsuarioAcao.USUARIO_ACAO_EFETUOU_OPERACAO);
				// ------------ REGISTRAR TRANSAÇÃO ----------------
				// remove objeto ParcelamentoQuantidadeReparcelamento na base
				this.getControladorUtil().remover(
						parcelamentoQuantidadeReparcelamento);
			}

			// coleção de ParcelamentoDescontoAntiguidade para remover
			FiltroParcelamentoDescontoAntiguidade filtroParcelamentoDescontoAntiguidade = new FiltroParcelamentoDescontoAntiguidade();

			filtroParcelamentoDescontoAntiguidade
					.adicionarCaminhoParaCarregamentoEntidade("parcelamentoPerfil");
			filtroParcelamentoDescontoAntiguidade
					.adicionarParametro(new ParametroSimples(
							FiltroParcelamentoDescontoAntiguidade.PARCELAMENTO_PERFIL,
							idPerfilParcelamento));

			Collection collectionParcelamentoDescontoAntiguidade = (Collection<ParcelamentoDescontoAntiguidade>) this
					.getControladorUtil().pesquisar(
							filtroParcelamentoDescontoAntiguidade,
							ParcelamentoDescontoAntiguidade.class.getName());

			Iterator iteratorAntiguidade = collectionParcelamentoDescontoAntiguidade
					.iterator();

			while (iteratorAntiguidade.hasNext()) {

				ParcelamentoDescontoAntiguidade parcelamentoDescontoAntiguidade = (ParcelamentoDescontoAntiguidade) iteratorAntiguidade
						.next();
				// ------------ REGISTRAR TRANSAÇÃO ----------------
				parcelamentoDescontoAntiguidade
						.setOperacaoEfetuada(operacaoEfetuada);
				parcelamentoDescontoAntiguidade.adicionarUsuario(usuarioLogado,
						UsuarioAcao.USUARIO_ACAO_EFETUOU_OPERACAO);
				// ------------ REGISTRAR TRANSAÇÃO ----------------
				// remove objeto ParcelamentoDescontoAntiguidade na base
				this.getControladorUtil().remover(
						parcelamentoDescontoAntiguidade);
			}

			// coleção de ParcelamentoDescontoInatividade para remover
			FiltroParcelamentoDescontoInatividade filtroParcelamentoDescontoInatividade = new FiltroParcelamentoDescontoInatividade();

			filtroParcelamentoDescontoInatividade
					.adicionarCaminhoParaCarregamentoEntidade("parcelamentoPerfil");
			filtroParcelamentoDescontoInatividade
					.adicionarParametro(new ParametroSimples(
							FiltroParcelamentoDescontoInatividade.PARCELAMENTO_PERFIL,
							idPerfilParcelamento));

			Collection collectionParcelamentoDescontoInatividade = (Collection<ParcelamentoDescontoInatividade>) this
					.getControladorUtil().pesquisar(
							filtroParcelamentoDescontoInatividade,
							ParcelamentoDescontoInatividade.class.getName());

			Iterator iteratorInatividade = collectionParcelamentoDescontoInatividade
					.iterator();

			while (iteratorInatividade.hasNext()) {

				ParcelamentoDescontoInatividade parcelamentoDescontoInatividade = (ParcelamentoDescontoInatividade) iteratorInatividade
						.next();
				// ------------ REGISTRAR TRANSAÇÃO ----------------
				parcelamentoDescontoInatividade
						.setOperacaoEfetuada(operacaoEfetuada);
				parcelamentoDescontoInatividade.adicionarUsuario(usuarioLogado,
						UsuarioAcao.USUARIO_ACAO_EFETUOU_OPERACAO);
				// ------------ REGISTRAR TRANSAÇÃO ----------------
				// remove objeto ParcelamentoDescontoInatividade na base
				this.getControladorUtil().remover(
						parcelamentoDescontoInatividade);
			}
			
			// coleção de ParcelamentoDescontoInatividadeAVista para remover
			FiltroParcDesctoInativVista filtroParcDesctoInativVista = new FiltroParcDesctoInativVista();

			filtroParcDesctoInativVista.adicionarCaminhoParaCarregamentoEntidade("parcelamentoPerfil");
			filtroParcDesctoInativVista.adicionarParametro(new ParametroSimples(
				FiltroParcDesctoInativVista.PARCELAMENTO_PERFIL,idPerfilParcelamento));

			Collection collectionParcelamentoDescontoInatividadeAVista = (Collection<ParcDesctoInativVista>) 
				this.getControladorUtil().pesquisar(filtroParcDesctoInativVista,
							ParcDesctoInativVista.class.getName());

			Iterator iteratorInatividadeAVista = collectionParcelamentoDescontoInatividadeAVista
					.iterator();

			while (iteratorInatividadeAVista.hasNext()) {

				ParcDesctoInativVista parcDesctoInativVista = (ParcDesctoInativVista) 
				iteratorInatividadeAVista.next();
				// ------------ REGISTRAR TRANSAÇÃO ----------------
				parcDesctoInativVista.setOperacaoEfetuada(operacaoEfetuada);
				parcDesctoInativVista.adicionarUsuario(usuarioLogado,
						UsuarioAcao.USUARIO_ACAO_EFETUOU_OPERACAO);
				// ------------ REGISTRAR TRANSAÇÃO ----------------
				// remove objeto ParcelamentoDescontoInatividadeAVista na base
				this.getControladorUtil().remover(parcDesctoInativVista);
			}

			

			i = i + 1;
		}

		// remover ParcelamentoPerfil(s)
		this.getControladorUtil().remover(ids,
				ParcelamentoPerfil.class.getName(), operacaoEfetuada,
				colecaoUsuarios);

	}

	/**
	 * Atualizar o Perfil de Parcelamento na base
	 * 
	 * [UC0221] Manter Perfil de Parcelamento
	 * 
	 * @author Vivianne Sousa
	 * @date 17/05/2006
	 * 
	 * @param parcelamentoPerfilNova
	 * @param collectionParcelamentoQuantidadeReparcelamentoHelper
	 * @param collectionParcelamentoDescontoInatividade
	 * @param collectionParcelamentoDescontoAntiguidade
	 * @param collectionParcelamentoQuantidadeReparcelamentoHelperLinhaRemovidas
	 * @param collectionParcelamentoDescontoInatividadeLinhaRemovidas
	 * @param collectionParcelamentoDescontoAntiguidadeLinhaRemovidas
	 * @param collectionParcelamentoQuantidadePrestacaoLinhaRemovidas
	 * @param usuarioLogado
	 * @return
	 */
	public void atualizarPerfilParcelamento(
			ParcelamentoPerfil parcelamentoPerfil,
			Collection collectionParcelamentoQuantidadeReparcelamentoHelper,
			Collection collectionParcelamentoDescontoInatividade,
			Collection collectionParcelamentoDescontoAntiguidade,
			Collection collectionParcelamentoQuantidadeReparcelamentoHelperLinhaRemovidas,
			Collection collectionParcelamentoDescontoInatividadeLinhaRemovidas,
			Collection collectionParcelamentoDescontoAntiguidadeLinhaRemovidas,
			Collection collectionParcelamentoQuantidadePrestacaoLinhaRemovidas,
			Usuario usuarioLogado,
			Collection collectionParcelamentoDescontoInatividadeAVista,
			Collection collectionParcelamentoDescontoInatividadeAVistaLinhaRemovidas,
			ArrayList<DescontoValorDebitoPeriodo> collectionDescontoValorDebitoPeriodo,
			ArrayList<ParcelaEntradaDesconto> collectionParcelaEntradaDescontoLinhaRemovidas,
			ArrayList<DescontoValorDebitoPeriodo> collectionDescontoValorDebitoPeriodoLinhaRemovidas) throws ControladorException {

		validacaoFinalPerfilParcelamento(parcelamentoPerfil,
				collectionParcelamentoQuantidadeReparcelamentoHelper,
				collectionParcelamentoDescontoInatividade,
				collectionParcelamentoDescontoAntiguidade, "ATUALIZAR",
				collectionParcelamentoDescontoInatividadeAVista,
				collectionDescontoValorDebitoPeriodo);

		// ------------ REGISTRAR TRANSAÇÃO ----------------------------
		RegistradorOperacao registradorOperacao = new RegistradorOperacao(
				Operacao.OPERACAO_PERFIL_PARCELAMENTO_ATUALIZAR,
				new UsuarioAcaoUsuarioHelper(usuarioLogado,
						UsuarioAcao.USUARIO_ACAO_EFETUOU_OPERACAO));

		Operacao operacao = new Operacao();
		operacao.setId(Operacao.OPERACAO_PERFIL_PARCELAMENTO_ATUALIZAR);

		OperacaoEfetuada operacaoEfetuada = new OperacaoEfetuada();
		operacaoEfetuada.setOperacao(operacao);
		// ------------ REGISTRAR TRANSAÇÃO ----------------------------

		String idPerfilParcelamento = "" + parcelamentoPerfil.getId();
		FiltroParcelamentoPerfil filtroParcelamentoPerfil = new FiltroParcelamentoPerfil();
		// Seta o filtro para buscar o ParcelamentoPerfil na base
		filtroParcelamentoPerfil.adicionarParametro(new ParametroSimples(
				FiltroParcelamentoPerfil.ID, idPerfilParcelamento));

		// Procura o ParcelamentoPerfil na base
		ParcelamentoPerfil parcelamentoPerfilNaBase = null;
		parcelamentoPerfilNaBase = (ParcelamentoPerfil) ((List) (this
				.getControladorUtil().pesquisar(filtroParcelamentoPerfil,
				ParcelamentoPerfil.class.getName()))).get(0);

		// Verificar se o ParcelamentoPerfil já foi atualizado por outro usuário
		// durante esta atualização
		if (parcelamentoPerfilNaBase.getUltimaAlteracao().after(
				parcelamentoPerfil.getUltimaAlteracao())) {
			sessionContext.setRollbackOnly();
			throw new ControladorException("atencao.atualizacao.timestamp");
		}
		// ------------ REGISTRAR TRANSAÇÃO ----------------------------
		parcelamentoPerfil.setOperacaoEfetuada(operacaoEfetuada);
		parcelamentoPerfil.adicionarUsuario(usuarioLogado,
				UsuarioAcao.USUARIO_ACAO_EFETUOU_OPERACAO);
		registradorOperacao.registrarOperacao(parcelamentoPerfil);
		// ------------ REGISTRAR TRANSAÇÃO ----------------------------

		// atualiza o objeto PerfilParcelamento
		parcelamentoPerfil.setUltimaAlteracao(new Date());
		this.getControladorUtil().atualizar(parcelamentoPerfil);
		
		/**
		 * Desconto Valor Debito A vista
		 ***/
		if(parcelamentoPerfil.getIndicadorDescontoVistaValorDebito().equals(ConstantesSistema.SIM)){
			
			for (DescontoValorDebitoPeriodo descontoValorDebitoPeriodo : collectionDescontoValorDebitoPeriodo){
				// ------------ REGISTRAR TRANSAÇÃO
				// ---------------
				descontoValorDebitoPeriodo
						.setOperacaoEfetuada(operacaoEfetuada);
				descontoValorDebitoPeriodo
						.adicionarUsuario(
								usuarioLogado,
								UsuarioAcao.USUARIO_ACAO_EFETUOU_OPERACAO);
				registradorOperacao
						.registrarOperacao(descontoValorDebitoPeriodo);
				// ------------ REGISTRAR TRANSAÇÃO
				
				descontoValorDebitoPeriodo.setParcelamentoPerfil(parcelamentoPerfil);
				descontoValorDebitoPeriodo.setUltimaAlteracao(new Date());
				
				this.getControladorUtil().inserirOuAtualizar(descontoValorDebitoPeriodo);
			}		
		}else{
			for (DescontoValorDebitoPeriodo descontoValorDebitoPeriodo : collectionDescontoValorDebitoPeriodo){
				
				if(descontoValorDebitoPeriodo.getId() != null && !descontoValorDebitoPeriodo.getId().equals("")){
					this.getControladorUtil().remover(descontoValorDebitoPeriodo);
				}
			}	
		}
		
		// atualizar a coleção de ParcelamentoQuantidadeReparcelamento
		if (collectionParcelamentoQuantidadeReparcelamentoHelper != null
				&& !collectionParcelamentoQuantidadeReparcelamentoHelper
						.isEmpty()) {

			Iterator iterator = collectionParcelamentoQuantidadeReparcelamentoHelper
					.iterator();

			while (iterator.hasNext()) {

				ParcelamentoQuantidadeReparcelamentoHelper parcelamentoQuantidadeReparcelamentoHelper = (ParcelamentoQuantidadeReparcelamentoHelper) iterator
						.next();
				ParcelamentoQuantidadeReparcelamento parcelamentoQuantidadeReparcelamento = new ParcelamentoQuantidadeReparcelamento();

				parcelamentoQuantidadeReparcelamento
						.setId(parcelamentoQuantidadeReparcelamentoHelper
								.getId());
				parcelamentoQuantidadeReparcelamento
						.setParcelamentoPerfil(parcelamentoPerfil);
				parcelamentoQuantidadeReparcelamento
						.setQuantidadeMaximaReparcelamento(parcelamentoQuantidadeReparcelamentoHelper
								.getQuantidadeMaximaReparcelamento());
				
				parcelamentoQuantidadeReparcelamento
					.setPercentualEntradaSugerida(parcelamentoQuantidadeReparcelamentoHelper
							.getPercentualEntradaSugerida());
				/*
				 * parcelamentoQuantidadeReparcelamento
				 * .setValorMinimoPrestacao(parcelamentoQuantidadeReparcelamentoHelper
				 * .getValorMinimoPrestacao());
				 */
				parcelamentoQuantidadeReparcelamento
						.setUltimaAlteracao(new Date());

				// ------------ REGISTRAR TRANSAÇÃO ----------------------------
				parcelamentoQuantidadeReparcelamento
						.setOperacaoEfetuada(operacaoEfetuada);
				parcelamentoQuantidadeReparcelamento.adicionarUsuario(
						usuarioLogado,
						UsuarioAcao.USUARIO_ACAO_EFETUOU_OPERACAO);
				registradorOperacao
						.registrarOperacao(parcelamentoQuantidadeReparcelamento);
				// ------------ REGISTRAR TRANSAÇÃO ----------------------------

				// insere ou atualiza o objeto
				// ParcelamentoQuantidadeReparcelamento
				this.getControladorUtil().inserirOuAtualizar(
						parcelamentoQuantidadeReparcelamento);
				
				/******
				 * PARCELA ENTRADA DESCONTO
				 ******/				
				Collection<ParcelaEntradaDesconto> collectionParcelaEntradaDesconto = parcelamentoQuantidadeReparcelamentoHelper
						.getCollectionParcelaEntradaDesconto();

				if (collectionParcelaEntradaDesconto != null
						&& !collectionParcelaEntradaDesconto.isEmpty()) {

					Iterator<ParcelaEntradaDesconto> iteratorParcelaEntradaDesconto = collectionParcelaEntradaDesconto.iterator();

					while (iteratorParcelaEntradaDesconto.hasNext()) {

						ParcelaEntradaDesconto parcelaEntradaDesconto = iteratorParcelaEntradaDesconto.next();

						parcelaEntradaDesconto.setParcelamentoQuantidadeReparcelamento(parcelamentoQuantidadeReparcelamento);
						parcelaEntradaDesconto.setUltimaAlteracao(new Date());

						// ------------ REGISTRAR TRANSAÇÃO
						// ---------------
						parcelaEntradaDesconto
								.setOperacaoEfetuada(operacaoEfetuada);
						parcelaEntradaDesconto
								.adicionarUsuario(
										usuarioLogado,
										UsuarioAcao.USUARIO_ACAO_EFETUOU_OPERACAO);
						registradorOperacao
								.registrarOperacao(parcelaEntradaDesconto);
						// ------------ REGISTRAR TRANSAÇÃO
						// ---------------

						// insere o objeto parcelaEntradaDesconto
						this.getControladorUtil().inserirOuAtualizar(parcelaEntradaDesconto);
					}
				}
				/**************/
				
				Collection collectionParcelamentoQuantidadePrestacaoHelper = parcelamentoQuantidadeReparcelamentoHelper
						.getCollectionParcelamentoQuantidadePrestacaoHelper();
				if (collectionParcelamentoQuantidadePrestacaoHelper != null
						&& !collectionParcelamentoQuantidadePrestacaoHelper
								.isEmpty()) {

					Iterator iteratorParcelamentoQuantidadePrestacaoHelper = collectionParcelamentoQuantidadePrestacaoHelper
							.iterator();

					while (iteratorParcelamentoQuantidadePrestacaoHelper
							.hasNext()) {

						ParcelamentoQuantidadePrestacaoHelper parcelamentoQuantidadePrestacaoHelper = (ParcelamentoQuantidadePrestacaoHelper) iteratorParcelamentoQuantidadePrestacaoHelper
								.next();

						ParcelamentoQuantidadePrestacao parcelamentoQuantidadePrestacao = parcelamentoQuantidadePrestacaoHelper
								.getParcelamentoQuantidadePrestacao();

						parcelamentoQuantidadePrestacao
								.setParcelamentoQuantidadeReparcelamento(parcelamentoQuantidadeReparcelamento);

						parcelamentoQuantidadePrestacao
								.setUltimaAlteracao(new Date());

						// ------------ REGISTRAR TRANSAÇÃO
						// ----------------------------
						parcelamentoQuantidadePrestacao
								.setOperacaoEfetuada(operacaoEfetuada);
						parcelamentoQuantidadePrestacao.adicionarUsuario(
								usuarioLogado,
								UsuarioAcao.USUARIO_ACAO_EFETUOU_OPERACAO);
						registradorOperacao
								.registrarOperacao(parcelamentoQuantidadePrestacao);
						// ------------ REGISTRAR TRANSAÇÃO
						// ----------------------------

						// insere ou atualiza o objeto
						// parcelamentoQuantidadePrestacao
						Integer idParcelamentoQuantidadePrestacao = (Integer) this
								.getControladorUtil().inserirOuAtualizar(
										parcelamentoQuantidadePrestacao);
						if (idParcelamentoQuantidadePrestacao != null) {
							parcelamentoQuantidadePrestacao
									.setId(idParcelamentoQuantidadePrestacao);
						}

						Collection collectionParcelamentoFaixaValor = parcelamentoQuantidadePrestacaoHelper
								.getCollectionParcelamentoFaixaValor();
						if (collectionParcelamentoFaixaValor != null
								&& !collectionParcelamentoFaixaValor.isEmpty()) {

							Iterator iteratorParcelamentoFaixaValor = collectionParcelamentoFaixaValor
									.iterator();

							while (iteratorParcelamentoFaixaValor.hasNext()) {

								ParcelamentoFaixaValor parcelamentoFaixaValor = (ParcelamentoFaixaValor) iteratorParcelamentoFaixaValor
										.next();

								parcelamentoFaixaValor
										.setParcelamentoQuantidadePrestacao(parcelamentoQuantidadePrestacao);

								parcelamentoFaixaValor
										.setUltimaAlteracao(new Date());

								// ------------ REGISTRAR TRANSAÇÃO ------------
								parcelamentoFaixaValor
										.setOperacaoEfetuada(operacaoEfetuada);
								parcelamentoFaixaValor
										.adicionarUsuario(
												usuarioLogado,
												UsuarioAcao.USUARIO_ACAO_EFETUOU_OPERACAO);
								registradorOperacao
										.registrarOperacao(parcelamentoFaixaValor);
								// ------------ REGISTRAR TRANSAÇÃO
								// --------------

								// insere ou atualiza o objeto
								// parcelamentoFaixaValor
								this.getControladorUtil().inserirOuAtualizar(
										parcelamentoFaixaValor);
							}
						}
						
						Collection collectionParcelamentoQtdLigAgua = parcelamentoQuantidadePrestacaoHelper.getCollectionParcelamentoQtdLigacaoAgua();
						if(!Util.isVazioOrNulo(collectionParcelamentoQtdLigAgua)){
							Iterator iteratorLigAgua = collectionParcelamentoQtdLigAgua.iterator();
							while(iteratorLigAgua.hasNext()){
								ParcelamentoQuantidadePrestacaoSituacaoLigacaoAgua parcelamentoQtdPrestLigAgua =
									(ParcelamentoQuantidadePrestacaoSituacaoLigacaoAgua) iteratorLigAgua.next();
								parcelamentoQtdPrestLigAgua.setParcelamentoQuantidadePrestacao(parcelamentoQuantidadePrestacao);
								this.getControladorUtil().inserirOuAtualizar(parcelamentoQtdPrestLigAgua);
							}
						}

					}

				}

			}

		}

		// atualizar a coleção de collectionParcelamentoDescontoInatividade
		if (collectionParcelamentoDescontoInatividade != null
				&& !collectionParcelamentoDescontoInatividade.isEmpty()) {

			Iterator iterator = collectionParcelamentoDescontoInatividade
					.iterator();

			while (iterator.hasNext()) {

				ParcelamentoDescontoInatividade parcelamentoDescontoInatividade = (ParcelamentoDescontoInatividade) iterator
						.next();

				parcelamentoDescontoInatividade
						.setParcelamentoPerfil(parcelamentoPerfil);

				// ------------ REGISTRAR TRANSAÇÃO ----------------------------
				parcelamentoDescontoInatividade
						.setOperacaoEfetuada(operacaoEfetuada);
				parcelamentoDescontoInatividade.adicionarUsuario(usuarioLogado,
						UsuarioAcao.USUARIO_ACAO_EFETUOU_OPERACAO);
				registradorOperacao
						.registrarOperacao(parcelamentoDescontoInatividade);
				// ------------ REGISTRAR TRANSAÇÃO ----------------------------

				parcelamentoDescontoInatividade.setUltimaAlteracao(new Date());
				// insere ou atualiza o objeto parcelamentoDescontoInatividade
				this.getControladorUtil().inserirOuAtualizar(
						parcelamentoDescontoInatividade);

			}

		}
		
//		 atualizar a coleção de collectionParcelamentoDescontoInatividadeAVista
		if (collectionParcelamentoDescontoInatividadeAVista != null
				&& !collectionParcelamentoDescontoInatividadeAVista.isEmpty()) {

			Iterator iterator = collectionParcelamentoDescontoInatividadeAVista.iterator();

			while (iterator.hasNext()) {

				ParcDesctoInativVista parcelamentoDescontoInatividade = (ParcDesctoInativVista) iterator.next();

				parcelamentoDescontoInatividade
						.setParcelamentoPerfil(parcelamentoPerfil);

				// ------------ REGISTRAR TRANSAÇÃO ----------------------------
				parcelamentoDescontoInatividade.setOperacaoEfetuada(operacaoEfetuada);
				parcelamentoDescontoInatividade.adicionarUsuario(usuarioLogado,
						UsuarioAcao.USUARIO_ACAO_EFETUOU_OPERACAO);
				registradorOperacao.registrarOperacao(parcelamentoDescontoInatividade);
				// ------------ REGISTRAR TRANSAÇÃO ----------------------------

				parcelamentoDescontoInatividade.setUltimaAlteracao(new Date());
				// insere ou atualiza o objeto parcelamentoDescontoInatividadeAVista
				this.getControladorUtil().inserirOuAtualizar(
						parcelamentoDescontoInatividade);

			}

		}

		// atualizar a coleção de collectionParcelamentoDescontoAntiguidade
		if (collectionParcelamentoDescontoAntiguidade != null
				&& !collectionParcelamentoDescontoAntiguidade.isEmpty()) {

			Iterator iterator = collectionParcelamentoDescontoAntiguidade
					.iterator();

			while (iterator.hasNext()) {

				ParcelamentoDescontoAntiguidade parcelamentoDescontoAntiguidade = (ParcelamentoDescontoAntiguidade) iterator
						.next();

				parcelamentoDescontoAntiguidade
						.setParcelamentoPerfil(parcelamentoPerfil);
				// ------------ REGISTRAR TRANSAÇÃO ----------------------------
				parcelamentoDescontoAntiguidade
						.setOperacaoEfetuada(operacaoEfetuada);
				parcelamentoDescontoAntiguidade.adicionarUsuario(usuarioLogado,
						UsuarioAcao.USUARIO_ACAO_EFETUOU_OPERACAO);
				registradorOperacao
						.registrarOperacao(parcelamentoDescontoAntiguidade);
				// ------------ REGISTRAR TRANSAÇÃO ----------------------------
				parcelamentoDescontoAntiguidade.setUltimaAlteracao(new Date());
				// insere ou atualiza o objeto parcelamentoDescontoAntiguidade
				this.getControladorUtil().inserirOuAtualizar(
						parcelamentoDescontoAntiguidade);

			}
		}
		
		/**
		 * Desconto Valor Debito Periodo
		 * ***/
		if(collectionDescontoValorDebitoPeriodoLinhaRemovidas != null && !collectionDescontoValorDebitoPeriodoLinhaRemovidas.isEmpty()){
			
			for(DescontoValorDebitoPeriodo descontoValorDebitoPeriodo : collectionDescontoValorDebitoPeriodoLinhaRemovidas){
				if(descontoValorDebitoPeriodo.getId() != null && !descontoValorDebitoPeriodo.equals("")){
					getControladorUtil().remover(descontoValorDebitoPeriodo);
				}
			}
		}
		/**************/

		if (collectionParcelamentoQuantidadeReparcelamentoHelperLinhaRemovidas != null
				&& !collectionParcelamentoQuantidadeReparcelamentoHelperLinhaRemovidas
						.isEmpty()) {
			Iterator parcelamentoQuantidadeReparcelamentoHelperLinhaRemovidasIterator = collectionParcelamentoQuantidadeReparcelamentoHelperLinhaRemovidas
					.iterator();
			while (parcelamentoQuantidadeReparcelamentoHelperLinhaRemovidasIterator
					.hasNext()) {
				// remove cada ParcelamentoQuantidadeReparcelamentoHelper linha
				ParcelamentoQuantidadeReparcelamentoHelper parcelamentoQuantidadeReparcelamentoHelperLinhaRemovida = (ParcelamentoQuantidadeReparcelamentoHelper) parcelamentoQuantidadeReparcelamentoHelperLinhaRemovidasIterator
						.next();

				ParcelamentoQuantidadeReparcelamento parcelamentoQuantidadeReparcelamentoLinhaRemovida = new ParcelamentoQuantidadeReparcelamento();

				parcelamentoQuantidadeReparcelamentoLinhaRemovida
						.setId(parcelamentoQuantidadeReparcelamentoHelperLinhaRemovida
								.getId());
				
				/***
				 *	Parcela Entrada Desconto 
				 ****/
				ArrayList<ParcelaEntradaDesconto> collectionParcelaEntradaDesconto = parcelamentoQuantidadeReparcelamentoHelperLinhaRemovida.getCollectionParcelaEntradaDesconto();
				
				for(ParcelaEntradaDesconto parcelaEntradaDesconto : collectionParcelaEntradaDesconto){
					if(parcelaEntradaDesconto.getId() != null && !parcelaEntradaDesconto.getId().equals("")){
						// ------------ REGISTRAR TRANSAÇÃO ----------------------------
						parcelaEntradaDesconto
								.setOperacaoEfetuada(operacaoEfetuada);
						parcelaEntradaDesconto.adicionarUsuario(
								usuarioLogado,
								UsuarioAcao.USUARIO_ACAO_EFETUOU_OPERACAO);
						registradorOperacao
								.registrarOperacao(parcelaEntradaDesconto);
						// ------------ REGISTRAR TRANSAÇÃO ----------------------------
						
						getControladorUtil().remover(parcelaEntradaDesconto);
					}
				}
				/*********/
				
				Collection collectionParcelamentoQuantidadePrestacaoHelperLinhaRemovida = parcelamentoQuantidadeReparcelamentoHelperLinhaRemovida
						.getCollectionParcelamentoQuantidadePrestacaoHelper();

				if (collectionParcelamentoQuantidadePrestacaoHelperLinhaRemovida != null
						&& !collectionParcelamentoQuantidadePrestacaoHelperLinhaRemovida
								.isEmpty()) {
					Iterator parcelamentoQuantidadePrestacaoHelperLinhaRemovidasIterator = collectionParcelamentoQuantidadePrestacaoHelperLinhaRemovida
							.iterator();
					while (parcelamentoQuantidadePrestacaoHelperLinhaRemovidasIterator
							.hasNext()) {
						// remove cada ParcelamentoFaixaValor e
						// ParcelamentoQuantidadePrestacao linha
						ParcelamentoQuantidadePrestacaoHelper parcelamentoQuantidadePrestacaoHelperLinhaRemovida = (ParcelamentoQuantidadePrestacaoHelper) parcelamentoQuantidadePrestacaoHelperLinhaRemovidasIterator
								.next();

						Collection collectionParcelamentoFaixaValor = parcelamentoQuantidadePrestacaoHelperLinhaRemovida
								.getCollectionParcelamentoFaixaValor();

						if (collectionParcelamentoFaixaValor != null
								&& !collectionParcelamentoFaixaValor.isEmpty()) {

							Iterator iteratorParcelamentoFaixaValor = collectionParcelamentoFaixaValor
									.iterator();

							while (iteratorParcelamentoFaixaValor.hasNext()) {
								ParcelamentoFaixaValor parcelamentoFaixaValor = (ParcelamentoFaixaValor) iteratorParcelamentoFaixaValor
										.next();

								// ------------ REGISTRAR TRANSAÇÃO
								// -------------
								parcelamentoFaixaValor
										.setOperacaoEfetuada(operacaoEfetuada);
								parcelamentoFaixaValor
										.adicionarUsuario(
												usuarioLogado,
												UsuarioAcao.USUARIO_ACAO_EFETUOU_OPERACAO);
								registradorOperacao
										.registrarOperacao(parcelamentoFaixaValor);
								// ------------ REGISTRAR TRANSAÇÃO ------------
								try {
									repositorioUtil
											.remover(parcelamentoFaixaValor);
								} catch (ErroRepositorioException e) {
									e.printStackTrace();
								}
							}
						}

						ParcelamentoQuantidadePrestacao parcelamentoQuantidadePrestacaoLinhaRemovida = parcelamentoQuantidadePrestacaoHelperLinhaRemovida
								.getParcelamentoQuantidadePrestacao();
						
						FiltroParcelamentoQuantidadePrestacaoSituacaoLigacaoAgua filtroParcPrestLigAgua = new FiltroParcelamentoQuantidadePrestacaoSituacaoLigacaoAgua();
						filtroParcPrestLigAgua.adicionarParametro(new ParametroSimples
							(FiltroParcelamentoQuantidadePrestacaoSituacaoLigacaoAgua.PARCELAMENTO_PRESTACAO_ID, parcelamentoQuantidadePrestacaoLinhaRemovida.getId().toString()));
						
						Collection colParcelamentoPrestacaoLigAgua = this.getControladorUtil().pesquisar(filtroParcPrestLigAgua, 
							ParcelamentoQuantidadePrestacaoSituacaoLigacaoAgua.class.getName());
						
						if(!Util.isVazioOrNulo(colParcelamentoPrestacaoLigAgua)){
							Iterator iterator = colParcelamentoPrestacaoLigAgua.iterator();
							while(iterator.hasNext()){
								ParcelamentoQuantidadePrestacaoSituacaoLigacaoAgua parcelamentoQtdPrestLigAgua =
									(ParcelamentoQuantidadePrestacaoSituacaoLigacaoAgua) iterator.next();
								
								try{
									repositorioUtil.remover(parcelamentoQtdPrestLigAgua);
								}catch(Exception ex){
									ex.printStackTrace();
								}
							}
						}

						// ------------ REGISTRAR TRANSAÇÃO
						// ----------------------------
						parcelamentoQuantidadePrestacaoLinhaRemovida
								.setOperacaoEfetuada(operacaoEfetuada);
						parcelamentoQuantidadePrestacaoLinhaRemovida
								.adicionarUsuario(
										usuarioLogado,
										UsuarioAcao.USUARIO_ACAO_EFETUOU_OPERACAO);
						registradorOperacao
								.registrarOperacao(parcelamentoQuantidadePrestacaoLinhaRemovida);
						// ------------ REGISTRAR TRANSAÇÃO
						// ----------------------------
						try {
							repositorioUtil
									.remover(parcelamentoQuantidadePrestacaoLinhaRemovida);
						} catch (ErroRepositorioException e) {
							e.printStackTrace();
						}
						
					}
				}

				// ------------ REGISTRAR TRANSAÇÃO ----------------------------
				parcelamentoQuantidadeReparcelamentoLinhaRemovida
						.setOperacaoEfetuada(operacaoEfetuada);
				parcelamentoQuantidadeReparcelamentoLinhaRemovida
						.adicionarUsuario(usuarioLogado,
								UsuarioAcao.USUARIO_ACAO_EFETUOU_OPERACAO);
				registradorOperacao
						.registrarOperacao(parcelamentoQuantidadeReparcelamentoLinhaRemovida);
				// ------------ REGISTRAR TRANSAÇÃO ----------------------------
				try {
					// remove cada ParcelamentoQuantidadeReparcelamento linha
					repositorioUtil
							.remover(parcelamentoQuantidadeReparcelamentoLinhaRemovida);
				} catch (ErroRepositorioException e) {
					e.printStackTrace();
				}
			}
		}
		
		/***
		 *	Parcela Entrada Desconto 
		 ****/
		if(collectionParcelaEntradaDescontoLinhaRemovidas != null && !collectionParcelaEntradaDescontoLinhaRemovidas.isEmpty()){
			
			for(ParcelaEntradaDesconto parcelaEntradaDesconto : collectionParcelaEntradaDescontoLinhaRemovidas){
				if(parcelaEntradaDesconto.getId() != null && !parcelaEntradaDesconto.getId().equals("")){
					// ------------ REGISTRAR TRANSAÇÃO ----------------------------
					parcelaEntradaDesconto
							.setOperacaoEfetuada(operacaoEfetuada);
					parcelaEntradaDesconto.adicionarUsuario(
							usuarioLogado,
							UsuarioAcao.USUARIO_ACAO_EFETUOU_OPERACAO);
					registradorOperacao
							.registrarOperacao(parcelaEntradaDesconto);
					// ------------ REGISTRAR TRANSAÇÃO ----------------------------
					
					getControladorUtil().remover(parcelaEntradaDesconto);
				}
			}
		}
		/************/
		
		if (collectionParcelamentoDescontoInatividadeLinhaRemovidas != null
				&& !collectionParcelamentoDescontoInatividadeLinhaRemovidas
						.isEmpty()) {
			Iterator parcelamentoDescontoInatividadeLinhaRemovidasIterator = collectionParcelamentoDescontoInatividadeLinhaRemovidas
					.iterator();
			while (parcelamentoDescontoInatividadeLinhaRemovidasIterator
					.hasNext()) {
				// remove cada ParcelamentoDescontoInatividade linha
				ParcelamentoDescontoInatividade parcelamentoDescontoInatividadeLinhaRemovida = (ParcelamentoDescontoInatividade) parcelamentoDescontoInatividadeLinhaRemovidasIterator
						.next();
				// ------------ REGISTRAR TRANSAÇÃO ----------------------------
				parcelamentoDescontoInatividadeLinhaRemovida
						.setOperacaoEfetuada(operacaoEfetuada);
				parcelamentoDescontoInatividadeLinhaRemovida.adicionarUsuario(
						usuarioLogado,
						UsuarioAcao.USUARIO_ACAO_EFETUOU_OPERACAO);
				registradorOperacao
						.registrarOperacao(parcelamentoDescontoInatividadeLinhaRemovida);
				// ------------ REGISTRAR TRANSAÇÃO ----------------------------
				try {
					repositorioUtil
							.remover(parcelamentoDescontoInatividadeLinhaRemovida);
				} catch (ErroRepositorioException e) {
					e.printStackTrace();
				}
			}
		}
		
		if (collectionParcelamentoDescontoInatividadeAVistaLinhaRemovidas != null
				&& !collectionParcelamentoDescontoInatividadeAVistaLinhaRemovidas.isEmpty()) {
			
			Iterator parcelamentoDescontoInatividadeLinhaRemovidasIterator = 
				collectionParcelamentoDescontoInatividadeAVistaLinhaRemovidas.iterator();
			
			while (parcelamentoDescontoInatividadeLinhaRemovidasIterator.hasNext()) {
				// remove cada ParcelamentoDescontoInatividade linha
				ParcDesctoInativVista parcelamentoDescontoInatividadeLinhaRemovida = 
					(ParcDesctoInativVista) parcelamentoDescontoInatividadeLinhaRemovidasIterator.next();
				// ------------ REGISTRAR TRANSAÇÃO ----------------------------
				parcelamentoDescontoInatividadeLinhaRemovida.setOperacaoEfetuada(operacaoEfetuada);
				parcelamentoDescontoInatividadeLinhaRemovida.adicionarUsuario(
						usuarioLogado,UsuarioAcao.USUARIO_ACAO_EFETUOU_OPERACAO);
				registradorOperacao.registrarOperacao(parcelamentoDescontoInatividadeLinhaRemovida);
				// ------------ REGISTRAR TRANSAÇÃO ----------------------------
				try {
					repositorioUtil.remover(parcelamentoDescontoInatividadeLinhaRemovida);
				} catch (ErroRepositorioException e) {
					e.printStackTrace();
				}
			}
		}

		if (collectionParcelamentoDescontoAntiguidadeLinhaRemovidas != null
				&& !collectionParcelamentoDescontoAntiguidadeLinhaRemovidas
						.isEmpty()) {
			Iterator parcelamentoDescontoAntiguidadeLinhaRemovidasIterator = collectionParcelamentoDescontoAntiguidadeLinhaRemovidas
					.iterator();
			while (parcelamentoDescontoAntiguidadeLinhaRemovidasIterator
					.hasNext()) {
				// remove cada ParcelamentoDescontoAntiguidade linha
				ParcelamentoDescontoAntiguidade parcelamentoDescontoAntiguidadeLinhaRemovida = (ParcelamentoDescontoAntiguidade) parcelamentoDescontoAntiguidadeLinhaRemovidasIterator
						.next();
				// ------------ REGISTRAR TRANSAÇÃO ----------------------------
				parcelamentoDescontoAntiguidadeLinhaRemovida
						.setOperacaoEfetuada(operacaoEfetuada);
				parcelamentoDescontoAntiguidadeLinhaRemovida.adicionarUsuario(
						usuarioLogado,
						UsuarioAcao.USUARIO_ACAO_EFETUOU_OPERACAO);
				registradorOperacao
						.registrarOperacao(parcelamentoDescontoAntiguidadeLinhaRemovida);
				// ------------ REGISTRAR TRANSAÇÃO ----------------------------
				try {
					repositorioUtil
							.remover(parcelamentoDescontoAntiguidadeLinhaRemovida);
				} catch (ErroRepositorioException e) {
					e.printStackTrace();
				}
			}
		}

		if (collectionParcelamentoQuantidadePrestacaoLinhaRemovidas != null
				&& !collectionParcelamentoQuantidadePrestacaoLinhaRemovidas
						.isEmpty()) {
			Iterator parcelamentoQuantidadePrestacaoLinhaRemovidasIterator = collectionParcelamentoQuantidadePrestacaoLinhaRemovidas
					.iterator();
			while (parcelamentoQuantidadePrestacaoLinhaRemovidasIterator
					.hasNext()) {
				// remove cada ParcelamentoQuantidadePrestacao linha
				ParcelamentoQuantidadePrestacaoHelper parcelamentoQuantidadePrestacaoLinhaRemovida = (ParcelamentoQuantidadePrestacaoHelper) parcelamentoQuantidadePrestacaoLinhaRemovidasIterator
						.next();
				Integer idParcelamentoQtdPrestacao = parcelamentoQuantidadePrestacaoLinhaRemovida.getParcelamentoQuantidadePrestacao().getId();
				
				// ------------ REGISTRAR TRANSAÇÃO ----------------------------
				parcelamentoQuantidadePrestacaoLinhaRemovida.getParcelamentoQuantidadePrestacao()
						.setOperacaoEfetuada(operacaoEfetuada);
				parcelamentoQuantidadePrestacaoLinhaRemovida.getParcelamentoQuantidadePrestacao().adicionarUsuario(
						usuarioLogado,
						UsuarioAcao.USUARIO_ACAO_EFETUOU_OPERACAO);
				registradorOperacao
						.registrarOperacao(parcelamentoQuantidadePrestacaoLinhaRemovida.getParcelamentoQuantidadePrestacao());
				// ------------ REGISTRAR TRANSAÇÃO ----------------------------
				
				//remover os filhos do Parcelamento Quantidade Prestação
				FiltroParcelamentoQuantidadePrestacaoSituacaoLigacaoAgua filtroParcelamentoLigAgua = 
						new FiltroParcelamentoQuantidadePrestacaoSituacaoLigacaoAgua();
				filtroParcelamentoLigAgua.adicionarParametro(new ParametroSimples(
						FiltroParcelamentoQuantidadePrestacaoSituacaoLigacaoAgua.PARCELAMENTO_PRESTACAO_ID, idParcelamentoQtdPrestacao));
				
				Collection<?> colParcelamentoLigAgua = this.getControladorUtil().pesquisar(filtroParcelamentoLigAgua, 
						ParcelamentoQuantidadePrestacaoSituacaoLigacaoAgua.class.getName());
				
				try {
					if(!Util.isVazioOrNulo(colParcelamentoLigAgua)){
						Iterator<?> it = colParcelamentoLigAgua.iterator();
						while(it.hasNext()){
							ParcelamentoQuantidadePrestacaoSituacaoLigacaoAgua parcelamentoQtdPrestLigAgua = 
									(ParcelamentoQuantidadePrestacaoSituacaoLigacaoAgua) it.next();
							
							repositorioUtil.remover(parcelamentoQtdPrestLigAgua);
						}
					}
					
					repositorioUtil
							.remover(parcelamentoQuantidadePrestacaoLinhaRemovida.getParcelamentoQuantidadePrestacao());
				} catch (ErroRepositorioException e) {
					e.printStackTrace();
				}
			}
		}
	}


	/**
	 * 
	 * Filtrar os Comandos de Ação de Cobrança tipo comando Cronograma
	 * 
	 * [UC0326] - Filtrar Comandos de Ação de Cobrança
	 * 
	 * @author Rafael Santos
	 * @date 10/05/2006
	 * 
	 * @return filtroCobrancaAcaoAtividadeCronograma
	 * @throws ControladorException
	 */
	public FiltroCobrancaAcaoAtividadeCronograma construirFiltroCobrancaAcaoAtividadeCronograma(
			String anoMesPeriodoReferenciaCobrancaInicial,
			String anoMesPeriodoReferenciaCobrancaFinal,
			String[] grupoCobranca, String[] acaoCobranca,
			String[] atividadeCobranca,
			String dataPeriodoPrevisaoComandoInicial,
			String dataPeriodoPrevisaoComandoFinal,
			String dataPeriodoComandoInicial, String dataPeriodoComandoFinal,
			String dataPeriodoRealizacaoComandoInicial,
			String dataPeriodoRealizacaoComandoFinal,
			String intervaloValorDocumentosInicial,
			String intervaloValorDocumentosFinal,
			String intervaloQuantidadeDocumentosInicial,
			String intervaloQuantidadeDocumentosFinal,
			String intervaloQuantidadeItensDocumentosInicial,
			String intervaloQuantidadeItensDocumentosFinal,
			String situacaoCronograma, String situacaoComando)
			throws ControladorException {

		FiltroCobrancaAcaoAtividadeCronograma filtroCobrancaAcaoAtividadeCronograma = new FiltroCobrancaAcaoAtividadeCronograma();

		boolean peloMenosUmParametroInformado = false;

		// validar Período de Referência da Cobrança
		// [FS0001] - Validar Referência
		// [FS0002] - Verificar referência final menor que referência inicial
		this.getControladorUtil().validarAnoMesInicialFinalPeriodo(
				anoMesPeriodoReferenciaCobrancaInicial,
				anoMesPeriodoReferenciaCobrancaFinal,
				"Período de Referência da Cobrança Inicial",
				"Período de Referência da Cobrança Final",
				"atencao.referencia.final.menor.referencia.inicial");

		// Período de Referência da Cobrança
		if ((anoMesPeriodoReferenciaCobrancaInicial != null && !anoMesPeriodoReferenciaCobrancaInicial
				.equals(""))
				&& (anoMesPeriodoReferenciaCobrancaFinal != null && !anoMesPeriodoReferenciaCobrancaFinal
						.equals(""))) {

			peloMenosUmParametroInformado = true;

			String anoInicial = anoMesPeriodoReferenciaCobrancaInicial
					.substring(3, 7);
			String mesInicial = anoMesPeriodoReferenciaCobrancaInicial
					.substring(0, 2);

			String anoFinal = anoMesPeriodoReferenciaCobrancaFinal.substring(3,
					7);
			String mesFinal = anoMesPeriodoReferenciaCobrancaFinal.substring(0,
					2);

			Intervalo intervalo = new Intervalo(
					FiltroCobrancaAcaoAtividadeCronograma.COBRANCA_GRUPO_CRONOGRAMA_MES_MES_ANO,
					anoInicial + mesInicial, anoFinal + mesFinal);

			filtroCobrancaAcaoAtividadeCronograma.adicionarParametro(intervalo);

		}

		// grupo cobrança
		if (grupoCobranca != null && grupoCobranca.length > 0) {
			peloMenosUmParametroInformado = true;

			int i = 0;
			if (grupoCobranca != null) {

				while (i < grupoCobranca.length) {

					if (!grupoCobranca[i].equals("")) {
						peloMenosUmParametroInformado = true;
						if (i + 1 < grupoCobranca.length) {
							filtroCobrancaAcaoAtividadeCronograma
									.adicionarParametro(new ParametroSimples(
											FiltroCobrancaAcaoAtividadeCronograma.COBRANCA_GRUPO_CRONOGRAMA_MES_COBRANCA_GRUPO_ID,
											grupoCobranca[i],
											ConectorOr.CONECTOR_OR,
											(grupoCobranca.length)));
						} else {
							filtroCobrancaAcaoAtividadeCronograma
									.adicionarParametro(new ParametroSimples(
											FiltroCobrancaAcaoAtividadeCronograma.COBRANCA_GRUPO_CRONOGRAMA_MES_COBRANCA_GRUPO_ID,
											grupoCobranca[i]));
						}
					}

					i++;
				}

			}
		}

		// açao cobrança
		if (acaoCobranca != null && acaoCobranca.length > 0) {
			peloMenosUmParametroInformado = true;
			int i = 0;
			if (acaoCobranca != null) {

				while (i < acaoCobranca.length) {

					if (!acaoCobranca[i].equals("")) {
						peloMenosUmParametroInformado = true;
						if (i + 1 < acaoCobranca.length) {
							filtroCobrancaAcaoAtividadeCronograma
									.adicionarParametro(new ParametroSimples(
											FiltroCobrancaAcaoAtividadeCronograma.COBRANCA_ACAO_CRONOGRAMA_COBRANCA_ACAO_ID,
											acaoCobranca[i],
											ConectorOr.CONECTOR_OR,
											(acaoCobranca.length)));
						} else {
							filtroCobrancaAcaoAtividadeCronograma
									.adicionarParametro(new ParametroSimples(
											FiltroCobrancaAcaoAtividadeCronograma.COBRANCA_ACAO_CRONOGRAMA_COBRANCA_ACAO_ID,
											acaoCobranca[i]));
						}
					}

					i++;
				}

			}
		}

		// atividade cobrança
		if (atividadeCobranca != null && atividadeCobranca.length > 0) {
			peloMenosUmParametroInformado = true;

			int i = 0;
			if (atividadeCobranca != null) {

				while (i < atividadeCobranca.length) {

					if (!atividadeCobranca[i].equals("")) {
						peloMenosUmParametroInformado = true;
						if (i + 1 < atividadeCobranca.length) {
							filtroCobrancaAcaoAtividadeCronograma
									.adicionarParametro(new ParametroSimples(
											FiltroCobrancaAcaoAtividadeCronograma.ID_COBRANCA_ATIVIDADE,
											atividadeCobranca[i],
											ConectorOr.CONECTOR_OR,
											(atividadeCobranca.length)));
						} else {
							filtroCobrancaAcaoAtividadeCronograma
									.adicionarParametro(new ParametroSimples(
											FiltroCobrancaAcaoAtividadeCronograma.ID_COBRANCA_ATIVIDADE,
											atividadeCobranca[i]));
						}
					}

					i++;
				}

			}
		}

		// validar Período de Previsão do Comando
		// [FS0004] - Validar Data
		// [FS0005] - Verificar data final menor que data inicial
		this.getControladorUtil().verificarDataInicialFinalPeriodo(
				dataPeriodoPrevisaoComandoInicial,
				dataPeriodoPrevisaoComandoFinal,
				"Período de Previsão do Comando Inicial",
				"Período de Previsão do Comando Final",
				"atencao.data_final_periodo.anterior.data_inicial_periodo");

		// Período de Previsão do Comando
		if ((dataPeriodoPrevisaoComandoInicial != null && !dataPeriodoPrevisaoComandoInicial
				.equals(""))
				&& (dataPeriodoPrevisaoComandoFinal != null && !dataPeriodoPrevisaoComandoFinal
						.equals(""))) {

			peloMenosUmParametroInformado = true;

			String anoInicial = dataPeriodoPrevisaoComandoInicial.substring(6,
					10);
			String mesInicial = dataPeriodoPrevisaoComandoInicial.substring(3,
					5);
			String diaInicial = dataPeriodoPrevisaoComandoInicial.substring(0,
					2);

			String anoFinal = dataPeriodoPrevisaoComandoFinal.substring(6, 10);
			String mesFinal = dataPeriodoPrevisaoComandoFinal.substring(3, 5);
			String diaFinal = dataPeriodoPrevisaoComandoFinal.substring(0, 2);

			Calendar periodoInicial = new GregorianCalendar();
			periodoInicial.set(Calendar.DATE, new Integer(diaInicial)
					.intValue());
			periodoInicial.set(Calendar.MONTH, (new Integer(mesInicial)
					.intValue() - 1));
			periodoInicial.set(Calendar.YEAR, new Integer(anoInicial)
					.intValue());
			periodoInicial.set(Calendar.HOUR_OF_DAY, 00);
			periodoInicial.set(Calendar.MINUTE, 00);
			periodoInicial.set(Calendar.SECOND, 00);

			Calendar periodoFinal = new GregorianCalendar();
			periodoFinal.set(Calendar.DATE, new Integer(diaFinal).intValue());
			periodoFinal.set(Calendar.MONTH,
					(new Integer(mesFinal).intValue() - 1));
			periodoFinal.set(Calendar.YEAR, new Integer(anoFinal).intValue());
			periodoFinal.set(Calendar.HOUR_OF_DAY, 23);
			periodoFinal.set(Calendar.MINUTE, 59);
			periodoFinal.set(Calendar.SECOND, 59);

			Intervalo intervalo = new Intervalo(
					FiltroCobrancaAcaoAtividadeCronograma.DATA_PREVISTA,
					periodoInicial, periodoFinal);

			filtroCobrancaAcaoAtividadeCronograma.adicionarParametro(intervalo);
		}

		// validar Período do Comando
		// [FS0004] - Validar Data
		// [FS0005] - Verificar data final menor que data inicial
		this.getControladorUtil().verificarDataInicialFinalPeriodo(
				dataPeriodoComandoInicial, dataPeriodoComandoFinal,
				"Período do Comando Inicial", "Período do Comando Final",
				"atencao.data_final_periodo.anterior.data_inicial_periodo");

		// Período do Comando
		if ((dataPeriodoComandoInicial != null && !dataPeriodoComandoInicial
				.equals(""))
				&& (dataPeriodoComandoFinal != null && !dataPeriodoComandoFinal
						.equals(""))) {

			peloMenosUmParametroInformado = true;

			String anoInicial = dataPeriodoComandoInicial.substring(6, 10);
			String mesInicial = dataPeriodoComandoInicial.substring(3, 5);
			String diaInicial = dataPeriodoComandoInicial.substring(0, 2);

			String anoFinal = dataPeriodoComandoFinal.substring(6, 10);
			String mesFinal = dataPeriodoComandoFinal.substring(3, 5);
			String diaFinal = dataPeriodoComandoFinal.substring(0, 2);

			Calendar periodoInicial = new GregorianCalendar();
			periodoInicial.set(Calendar.DATE, new Integer(diaInicial)
					.intValue());
			periodoInicial.set(Calendar.MONTH, (new Integer(mesInicial)
					.intValue() - 1));
			periodoInicial.set(Calendar.YEAR, new Integer(anoInicial)
					.intValue());
			periodoInicial.set(Calendar.HOUR_OF_DAY, 0);
			periodoInicial.set(Calendar.MINUTE, 00);
			periodoInicial.set(Calendar.SECOND, 00);

			Calendar periodoFinal = new GregorianCalendar();
			periodoFinal.set(Calendar.DATE, new Integer(diaFinal).intValue());
			periodoFinal.set(Calendar.MONTH,
					(new Integer(mesFinal).intValue() - 1));
			periodoFinal.set(Calendar.YEAR, new Integer(anoFinal).intValue());
			periodoFinal.set(Calendar.HOUR_OF_DAY, 23);
			periodoFinal.set(Calendar.MINUTE, 59);
			periodoFinal.set(Calendar.SECOND, 59);

			Intervalo intervalo = new Intervalo(
					FiltroCobrancaAcaoAtividadeCronograma.COMANDO,
					periodoInicial, periodoFinal);

			filtroCobrancaAcaoAtividadeCronograma.adicionarParametro(intervalo);
		}

		// validar Período de Realização do Comando
		// [FS0004] - Validar Data
		// [FS0005] - Verificar data final menor que data inicial
		this.getControladorUtil().verificarDataInicialFinalPeriodo(
				dataPeriodoRealizacaoComandoInicial,
				dataPeriodoRealizacaoComandoFinal,
				"Período de Realização do Comando Inicial",
				"Período de Realização do Comando Final",
				"atencao.data_final_periodo.anterior.data_inicial_periodo");

		// Período de Realização do Comando
		// Período Realizacao Comando
		if ((dataPeriodoRealizacaoComandoInicial != null && !dataPeriodoRealizacaoComandoInicial
				.equals(""))
				&& (dataPeriodoRealizacaoComandoFinal != null && !dataPeriodoRealizacaoComandoFinal
						.equals(""))) {

			peloMenosUmParametroInformado = true;

			String anoInicial = dataPeriodoRealizacaoComandoInicial.substring(
					6, 10);
			String mesInicial = dataPeriodoRealizacaoComandoInicial.substring(
					3, 5);
			String diaInicial = dataPeriodoRealizacaoComandoInicial.substring(
					0, 2);

			String anoFinal = dataPeriodoRealizacaoComandoFinal
					.substring(6, 10);
			String mesFinal = dataPeriodoRealizacaoComandoFinal.substring(3, 5);
			String diaFinal = dataPeriodoRealizacaoComandoFinal.substring(0, 2);

			Calendar periodoInicial = new GregorianCalendar();
			periodoInicial.set(Calendar.DATE, new Integer(diaInicial)
					.intValue());
			periodoInicial.set(Calendar.MONTH, (new Integer(mesInicial)
					.intValue() - 1));
			periodoInicial.set(Calendar.YEAR, new Integer(anoInicial)
					.intValue());
			periodoInicial.set(Calendar.HOUR_OF_DAY, 0);
			periodoInicial.set(Calendar.MINUTE, 0);
			periodoInicial.set(Calendar.SECOND, 0);

			Calendar periodoFinal = new GregorianCalendar();
			periodoFinal.set(Calendar.DATE, new Integer(diaFinal).intValue());
			periodoFinal.set(Calendar.MONTH,
					(new Integer(mesFinal).intValue() - 1));
			periodoFinal.set(Calendar.YEAR, new Integer(anoFinal).intValue());
			periodoFinal.set(Calendar.HOUR_OF_DAY, 23);
			periodoFinal.set(Calendar.MINUTE, 59);
			periodoFinal.set(Calendar.SECOND, 59);

			Intervalo intervalo = new Intervalo(
					FiltroCobrancaAcaoAtividadeCronograma.REALIZACAO,
					periodoInicial, periodoFinal);

			filtroCobrancaAcaoAtividadeCronograma.adicionarParametro(intervalo);
		}

		// Intervalo de Valor dos Documentos
		if ((intervaloValorDocumentosInicial != null && !intervaloValorDocumentosInicial
				.equals(""))
				&& (intervaloValorDocumentosFinal != null && !intervaloValorDocumentosFinal
						.equals(""))) {

			peloMenosUmParametroInformado = true;

			BigDecimal valorDocumentosInicial = Util
					.formatarMoedaRealparaBigDecimal(intervaloValorDocumentosInicial);

			BigDecimal valorDocumentosFinal = Util
					.formatarMoedaRealparaBigDecimal(intervaloValorDocumentosFinal);

			Intervalo intervalo = new Intervalo(
					FiltroCobrancaAcaoAtividadeCronograma.VALOR_DOCUMENTOS,
					valorDocumentosInicial, valorDocumentosFinal);

			filtroCobrancaAcaoAtividadeCronograma.adicionarParametro(intervalo);

		}

		// Intervalo de Quantidade dos Documentos
		if ((intervaloQuantidadeDocumentosInicial != null && !intervaloQuantidadeDocumentosInicial
				.equals(""))
				&& (intervaloQuantidadeDocumentosFinal != null && !intervaloQuantidadeDocumentosFinal
						.equals(""))) {

			peloMenosUmParametroInformado = true;

			Intervalo intervalo = new Intervalo(
					FiltroCobrancaAcaoAtividadeCronograma.QUANTIDADE_DOCUMENTOS,
					intervaloQuantidadeDocumentosInicial,
					intervaloQuantidadeDocumentosFinal);

			filtroCobrancaAcaoAtividadeCronograma.adicionarParametro(intervalo);

		}

		// Intervalo de Quantidade Itens dos Documentos
		if ((intervaloQuantidadeItensDocumentosInicial != null && !intervaloQuantidadeItensDocumentosInicial
				.equals(""))
				&& (intervaloQuantidadeItensDocumentosFinal != null && !intervaloQuantidadeItensDocumentosFinal
						.equals(""))) {

			peloMenosUmParametroInformado = true;

			Intervalo intervalo = new Intervalo(
					FiltroCobrancaAcaoAtividadeCronograma.QUANTIDADE_ITENS_COBRADOS,
					intervaloQuantidadeItensDocumentosInicial,
					intervaloQuantidadeItensDocumentosFinal);

			filtroCobrancaAcaoAtividadeCronograma.adicionarParametro(intervalo);

		}

		// Situação do Cronograma
		// [SB003] - Seleciona Comandos do Crongrama por Situação do Cronograma
		if (situacaoCronograma != null && !situacaoCronograma.equals("")) {
			if (situacaoCronograma.equals("Comandados")) {
				filtroCobrancaAcaoAtividadeCronograma
						.adicionarParametro(new ParametroNaoNulo(
								FiltroCobrancaAcaoAtividadeCronograma.COMANDO));
			} else if (situacaoCronograma.equals("NaoComandados")) {
				filtroCobrancaAcaoAtividadeCronograma
						.adicionarParametro(new ParametroNulo(
								FiltroCobrancaAcaoAtividadeCronograma.COMANDO));
			}
		}

		// Situação do Comando
		// [SB0004] - Seleciona Comandos do Cronograma por Situação do Comando
		if (situacaoComando != null && !situacaoComando.equals("")) {
			peloMenosUmParametroInformado = true;
			if (situacaoComando.equals("Realizados")) {
				filtroCobrancaAcaoAtividadeCronograma
						.adicionarParametro(new ParametroNaoNulo(
								FiltroCobrancaAcaoAtividadeCronograma.REALIZACAO));
			} else if (situacaoComando.equals("NaoRealizados")) {
				filtroCobrancaAcaoAtividadeCronograma
						.adicionarParametro(new ParametroNulo(
								FiltroCobrancaAcaoAtividadeCronograma.REALIZACAO));
			}

		}

		// [FS0006] - Verificar situação do crongrama e período do comando
		if ((situacaoCronograma != null && !situacaoCronograma.equals("") && situacaoCronograma
				.equals("NaoComandados"))
				&& ((dataPeriodoComandoInicial != null && !dataPeriodoComandoInicial
						.equals("")) && (dataPeriodoComandoFinal != null && !dataPeriodoComandoFinal
						.equals("")))) {
			throw new ControladorException(
					"atencao.periodo_comando.informado.situacao_comando");
		}

		// [FS0007] - Verificar situação do comando e período de realização do
		// comando
		if ((situacaoComando != null && !situacaoComando.equals("") && situacaoComando
				.equals("NaoRealizados"))
				&& ((dataPeriodoRealizacaoComandoFinal != null && !dataPeriodoRealizacaoComandoFinal
						.equals("")) && (dataPeriodoRealizacaoComandoInicial != null && !dataPeriodoRealizacaoComandoInicial
						.equals("")))) {
			throw new ControladorException(
					"atencao.periodo_realizacao.informado.situacao_comando");
		}

		// Erro caso o usuário mandou filtrar sem nenhum parâmetro
		if (!peloMenosUmParametroInformado) {
			throw new ControladorException(
					"atencao.filtro.nenhum_parametro_informado");

		}
		filtroCobrancaAcaoAtividadeCronograma
				.adicionarCaminhoParaCarregamentoEntidade(FiltroCobrancaAcaoAtividadeCronograma.COBRANCA_ATIVIDADE);
		filtroCobrancaAcaoAtividadeCronograma
				.adicionarCaminhoParaCarregamentoEntidade(FiltroCobrancaAcaoAtividadeCronograma.COBRANCA_GRUPO_CRONOGRAMA_MES);
		filtroCobrancaAcaoAtividadeCronograma
				.adicionarCaminhoParaCarregamentoEntidade(FiltroCobrancaAcaoAtividadeCronograma.COBRANCA_GRUPO_CRONOGRAMA_MES_COBRANCA_GRUPO);
		filtroCobrancaAcaoAtividadeCronograma
				.adicionarCaminhoParaCarregamentoEntidade(FiltroCobrancaAcaoAtividadeCronograma.COBRANCA_ACAO_CRONOGRAMA_COBRANCA_ACAO);

		return filtroCobrancaAcaoAtividadeCronograma;
	}

	/**
	 * Consultar Comando de Ação de Cobrança
	 * 
	 * [UC0325] - Consultar Comandos de Ação de Cobrança
	 * 
	 * @author Rafael Santos
	 * @date 10/05/2006
	 * 
	 * @param filtroCobrancaAcaoAtividadeCronograma
	 * @return
	 * @throws ControladorException
	 */
	public Collection<CobrancaAcaoAtividadeCronograma> pesquisarCobrancaAcaoAtividadeCronograma(
			FiltroCobrancaAcaoAtividadeCronograma filtroCobrancaAcaoAtividadeCronograma)
			throws ControladorException {

		Collection colecaoCobrancaAcaoAtividadeCronograma;

		colecaoCobrancaAcaoAtividadeCronograma = this.getControladorUtil()
				.pesquisar(filtroCobrancaAcaoAtividadeCronograma,
						CobrancaAcaoAtividadeCronograma.class.getName());

		if (colecaoCobrancaAcaoAtividadeCronograma == null
				|| colecaoCobrancaAcaoAtividadeCronograma.isEmpty()) {
			throw new ControladorException("atencao.pesquisa.nenhumresultado",
					null, "Comando Ação de Cobrança - Cronograma");
		}

		return colecaoCobrancaAcaoAtividadeCronograma;

	}

	/**
	 * 
	 * [UC0325] Consultar Comandos Ação de Cobrança
	 * 
	 * Consultar Comando Cobranca Ação Atividade Cobranca
	 * 
	 * [SB0002] - Apresenta Comandos de Ação de cobrança Eventuais
	 * 
	 * @author Rafael Santos
	 * @date 11/05/2006
	 * 
	 * @return
	 * @throws ControladorException
	 */
	public CobrancaAcaoAtividadeCronograma obterCobrancaAcaoAtividadeCronograma(
			String idCobrancaAcaoAtividadeCronograma)
			throws ControladorException {
		Collection colecaoAtividadeCronogramaAcaoCobrancaComandadas = null;

		FiltroCobrancaAcaoAtividadeCronograma filtroCobrancaAcaoAtividadeCronograma = new FiltroCobrancaAcaoAtividadeCronograma();
		filtroCobrancaAcaoAtividadeCronograma
				.adicionarParametro(new ParametroSimples(
						FiltroCobrancaAcaoAtividadeCronograma.ID,
						idCobrancaAcaoAtividadeCronograma));
		filtroCobrancaAcaoAtividadeCronograma
				.adicionarCaminhoParaCarregamentoEntidade(FiltroCobrancaAcaoAtividadeCronograma.COBRANCA_ATIVIDADE);
		filtroCobrancaAcaoAtividadeCronograma
				.adicionarCaminhoParaCarregamentoEntidade(FiltroCobrancaAcaoAtividadeCronograma.COBRANCA_GRUPO);
		filtroCobrancaAcaoAtividadeCronograma
				.adicionarCaminhoParaCarregamentoEntidade(FiltroCobrancaAcaoAtividadeCronograma.COBRANCA_ACAO);

		colecaoAtividadeCronogramaAcaoCobrancaComandadas = this
				.getControladorUtil().pesquisar(
						filtroCobrancaAcaoAtividadeCronograma,
						CobrancaAcaoAtividadeCronograma.class.getName());
		if (colecaoAtividadeCronogramaAcaoCobrancaComandadas == null
				|| colecaoAtividadeCronogramaAcaoCobrancaComandadas.isEmpty()) {
			throw new ControladorException(
					"atencao.nao.atividade.cobranca.comandadas");
		}

		return (CobrancaAcaoAtividadeCronograma) colecaoAtividadeCronogramaAcaoCobrancaComandadas
				.iterator().next();
	}

	/**
	 * 
	 * Filtrar os Comandos de Ação de Cobrança tipo comando Eventual
	 * 
	 * [UC0326] - Filtrar Comandos de Ação de Cobrança
	 * 
	 * @author Rafael Santos
	 * @date 12/05/2006
	 * 
	 * @return filtroCobrancaAcaoAtividadeComando
	 * @throws ControladorException
	 */
	public FiltroCobrancaAcaoAtividadeComando construirFiltroCobrancaAcaoAtividadeEventual(
			String[] grupoCobranca, String[] acaoCobranca,
			String[] atividadeCobranca,
			String anoMesPeriodoReferenciaContasInicial,
			String anoMesPeriodoReferenciaContasFinal,
			String dataPeriodoComandoInicial, String dataPeriodoComandoFinal,
			String dataPeriodoRealizacaoComandoInicial,
			String dataPeriodoRealizacaoComandoFinal,
			String dataPeriodoVencimentoContasInicial,
			String dataPeriodoVencimentoContasFinal,
			String intervaloValorDocumentosInicial,
			String intervaloValorDocumentosFinal,
			String intervaloQuantidadeDocumentosInicial,
			String intervaloQuantidadeDocumentosFinal,
			String intervaloQuantidadeItensDocumentosInicial,
			String intervaloQuantidadeItensDocumentosFinal,
			String situacaoComando, String indicadorCriterio,
			String idGerenciaRegional, String idLocalidadeInicial,
			String idLocalidadeFinal, String codigoSetorComercialInicial,
			String codigoSetorComercialFinal, String idRotaInicial,
			String idRotaFinal, String idCliente, String idClienteRelacaoTipo,
			String criterioCobranca, String unidadeNegocio, 
			String[] idCobrancaAcaoAtividadeComando, String dataEmissaoInicial,
			String dataEmissaoFinal, String consumoMedioInicial,
			String consumoMedioFinal, String tipoConsumo,
			String periodoInicialFiscalizacao, String periodoFinalFiscalizacao, 
			String[] situacaoFiscalizacao,
			String numeroQuadraInicial,
			String numeroQuadraFinal, 
			String quantidadeDiasVencimento, 
			String ligacaoAlteradaDebito)
	
			throws ControladorException {

		FiltroCobrancaAcaoAtividadeComando filtroCobrancaAcaoAtividadeComando = new FiltroCobrancaAcaoAtividadeComando();

		boolean peloMenosUmParametroInformado = false;
		
		//período de emissão/comando
		if (dataEmissaoInicial != null && dataEmissaoFinal != null){
			if ((dataEmissaoInicial.trim().length() == 10)
					&& (dataEmissaoFinal.trim().length() == 10)){
				Date dataComandoInicial = Util.converteStringParaDateHora(dataEmissaoInicial + " 00:00:00");
				Date dataComandoFinal = Util.converteStringParaDateHora(dataEmissaoFinal + " 23:59:59");
				filtroCobrancaAcaoAtividadeComando.adicionarParametro(
						new Intervalo(FiltroCobrancaAcaoAtividadeComando.COMANDO,
							dataComandoInicial, 
							dataComandoFinal));
				
				peloMenosUmParametroInformado = true;
			}
		}
		
		//Título do comando/Id do comando
		if (idCobrancaAcaoAtividadeComando != null && idCobrancaAcaoAtividadeComando.length > 0 ){
			
			Collection colecaoIdsFiltro = new ArrayList();
			
			for (int i = 0; i < idCobrancaAcaoAtividadeComando.length; i++) {
				if (!idCobrancaAcaoAtividadeComando[i].equals("")){
					colecaoIdsFiltro.add(new Integer(idCobrancaAcaoAtividadeComando[i]));
				}
			}
			
			if (!colecaoIdsFiltro.isEmpty()){
				filtroCobrancaAcaoAtividadeComando.adicionarParametro(
						new ParametroSimplesIn(FiltroCobrancaAcaoAtividadeComando.ID, 
								colecaoIdsFiltro));
				
				peloMenosUmParametroInformado = true;
			}
		}

		// Intervalo de Valor dos Documentos
		if ((intervaloValorDocumentosInicial != null && !intervaloValorDocumentosInicial
				.equals(""))
				&& (intervaloValorDocumentosFinal != null && !intervaloValorDocumentosFinal
						.equals(""))) {

			peloMenosUmParametroInformado = true;

			BigDecimal valorDocumentosInicial = Util
					.formatarMoedaRealparaBigDecimal(intervaloValorDocumentosInicial);

			BigDecimal valorDocumentosFinal = Util
					.formatarMoedaRealparaBigDecimal(intervaloValorDocumentosFinal);

			Intervalo intervalo = new Intervalo(
					FiltroCobrancaAcaoAtividadeComando.VALOR_DOCUMENTOS,
					valorDocumentosInicial, valorDocumentosFinal);

			filtroCobrancaAcaoAtividadeComando.adicionarParametro(intervalo);

		}

		// Intervalo de Quantidade dos Documentos
		if ((intervaloQuantidadeDocumentosInicial != null && !intervaloQuantidadeDocumentosInicial
				.equals(""))
				&& (intervaloQuantidadeDocumentosFinal != null && !intervaloQuantidadeDocumentosFinal
						.equals(""))) {

			peloMenosUmParametroInformado = true;

			Intervalo intervalo = new Intervalo(
					FiltroCobrancaAcaoAtividadeComando.QUANTIDADE_DOCUMENTOS,
					intervaloQuantidadeDocumentosInicial,
					intervaloQuantidadeDocumentosFinal);

			filtroCobrancaAcaoAtividadeComando.adicionarParametro(intervalo);

		}

		// Intervalo de Quantidade Itens dos Documentos
		if ((intervaloQuantidadeItensDocumentosInicial != null && !intervaloQuantidadeItensDocumentosInicial
				.equals(""))
				&& (intervaloQuantidadeItensDocumentosFinal != null && !intervaloQuantidadeItensDocumentosFinal
						.equals(""))) {

			peloMenosUmParametroInformado = true;

			Intervalo intervalo = new Intervalo(
					FiltroCobrancaAcaoAtividadeComando.QUANTIDADE_ITENS_COBRADOS,
					intervaloQuantidadeItensDocumentosInicial,
					intervaloQuantidadeItensDocumentosFinal);

			filtroCobrancaAcaoAtividadeComando.adicionarParametro(intervalo);

		}

		// grupo cobrança
		if (grupoCobranca != null && grupoCobranca.length > 0) {
			peloMenosUmParametroInformado = true;

			int i = 0;
			if (grupoCobranca != null) {

				while (i < grupoCobranca.length) {

					if (!grupoCobranca[i].equals("")) {
						peloMenosUmParametroInformado = true;
						if (i + 1 < grupoCobranca.length) {
							filtroCobrancaAcaoAtividadeComando
									.adicionarParametro(new ParametroSimples(
											FiltroCobrancaAcaoAtividadeComando.COBRANCA_GRUPO,
											grupoCobranca[i],
											ConectorOr.CONECTOR_OR,
											(grupoCobranca.length)));
						} else {
							filtroCobrancaAcaoAtividadeComando
									.adicionarParametro(new ParametroSimples(
											FiltroCobrancaAcaoAtividadeComando.COBRANCA_GRUPO,
											grupoCobranca[i]));
						}
					}

					i++;
				}

			}
		}

		// açao cobrança
		if (acaoCobranca != null && acaoCobranca.length > 0) {
			peloMenosUmParametroInformado = true;
			int i = 0;
			if (acaoCobranca != null) {

				while (i < acaoCobranca.length) {

					if (!acaoCobranca[i].equals("")) {
						peloMenosUmParametroInformado = true;
						if (i + 1 < acaoCobranca.length) {
							filtroCobrancaAcaoAtividadeComando
									.adicionarParametro(new ParametroSimples(
											FiltroCobrancaAcaoAtividadeComando.COBRANCA_ACAO,
											acaoCobranca[i],
											ConectorOr.CONECTOR_OR,
											(acaoCobranca.length)));
						} else {
							filtroCobrancaAcaoAtividadeComando
									.adicionarParametro(new ParametroSimples(
											FiltroCobrancaAcaoAtividadeComando.COBRANCA_ACAO,
											acaoCobranca[i]));
						}
					}

					i++;
				}

			}
		}

		// atividade cobrança
		if (atividadeCobranca != null && atividadeCobranca.length > 0) {
			peloMenosUmParametroInformado = true;

			int i = 0;
			if (atividadeCobranca != null) {

				while (i < atividadeCobranca.length) {

					if (!atividadeCobranca[i].equals("")) {
						peloMenosUmParametroInformado = true;
						if (i + 1 < atividadeCobranca.length) {
							filtroCobrancaAcaoAtividadeComando
									.adicionarParametro(new ParametroSimples(
											FiltroCobrancaAcaoAtividadeComando.ID_COBRANCA_ATIVIDADE,
											atividadeCobranca[i],
											ConectorOr.CONECTOR_OR,
											(atividadeCobranca.length)));
						} else {
							filtroCobrancaAcaoAtividadeComando
									.adicionarParametro(new ParametroSimples(
											FiltroCobrancaAcaoAtividadeComando.ID_COBRANCA_ATIVIDADE,
											atividadeCobranca[i]));
						}
					}

					i++;
				}

			}
		}

		// validar Período do Comando
		// [FS0004] - Validar Data
		// [FS0005] - Verificar data final menor que data inicial
		this.getControladorUtil().verificarDataInicialFinalPeriodo(
				dataPeriodoComandoInicial, dataPeriodoComandoFinal,
				"Período do Comando Inicial", "Período do Comando Final",
				"atencao.data_final_periodo.anterior.data_inicial_periodo");

		// Período do Comando
		if ((dataPeriodoComandoInicial != null && !dataPeriodoComandoInicial
				.equals(""))
				&& (dataPeriodoComandoFinal != null && !dataPeriodoComandoFinal
						.equals(""))) {

			peloMenosUmParametroInformado = true;

			String anoInicial = dataPeriodoComandoInicial.substring(6, 10);
			String mesInicial = dataPeriodoComandoInicial.substring(3, 5);
			String diaInicial = dataPeriodoComandoInicial.substring(0, 2);

			String anoFinal = dataPeriodoComandoFinal.substring(6, 10);
			String mesFinal = dataPeriodoComandoFinal.substring(3, 5);
			String diaFinal = dataPeriodoComandoFinal.substring(0, 2);

			Calendar periodoInicial = new GregorianCalendar();
			periodoInicial.set(Calendar.DATE, new Integer(diaInicial)
					.intValue());
			periodoInicial.set(Calendar.MONTH, (new Integer(mesInicial)
					.intValue() - 1));
			periodoInicial.set(Calendar.YEAR, new Integer(anoInicial)
					.intValue());
			periodoInicial.set(Calendar.HOUR_OF_DAY, 00);
			periodoInicial.set(Calendar.MINUTE, 00);
			periodoInicial.set(Calendar.SECOND, 00);

			Calendar periodoFinal = new GregorianCalendar();
			periodoFinal.set(Calendar.DATE, new Integer(diaFinal).intValue());
			periodoFinal.set(Calendar.MONTH,
					(new Integer(mesFinal).intValue() - 1));
			periodoFinal.set(Calendar.YEAR, new Integer(anoFinal).intValue());
			periodoFinal.set(Calendar.HOUR_OF_DAY, 23);
			periodoFinal.set(Calendar.MINUTE, 59);
			periodoFinal.set(Calendar.SECOND, 59);

			Intervalo intervalo = new Intervalo(
					FiltroCobrancaAcaoAtividadeComando.COMANDO, periodoInicial,
					periodoFinal);

			filtroCobrancaAcaoAtividadeComando.adicionarParametro(intervalo);
		}

		// validar Período de Realização do Comando
		// [FS0004] - Validar Data
		// [FS0005] - Verificar data final menor que data inicial
		this.getControladorUtil().verificarDataInicialFinalPeriodo(
				dataPeriodoRealizacaoComandoInicial,
				dataPeriodoRealizacaoComandoFinal,
				"Período de Realização do Comando Inicial",
				"Período de Realização do Comando Final",
				"atencao.data_final_periodo.anterior.data_inicial_periodo");

		// Período de Realização do Comando
		// Período Realizacao Comando
		if ((dataPeriodoRealizacaoComandoInicial != null && !dataPeriodoRealizacaoComandoInicial
				.equals(""))
				&& (dataPeriodoRealizacaoComandoFinal != null && !dataPeriodoRealizacaoComandoFinal
						.equals(""))) {

			peloMenosUmParametroInformado = true;

			String anoInicial = dataPeriodoRealizacaoComandoInicial.substring(
					6, 10);
			String mesInicial = dataPeriodoRealizacaoComandoInicial.substring(
					3, 5);
			String diaInicial = dataPeriodoRealizacaoComandoInicial.substring(
					0, 2);

			String anoFinal = dataPeriodoRealizacaoComandoFinal
					.substring(6, 10);
			String mesFinal = dataPeriodoRealizacaoComandoFinal.substring(3, 5);
			String diaFinal = dataPeriodoRealizacaoComandoFinal.substring(0, 2);

			Calendar periodoInicial = new GregorianCalendar();
			periodoInicial.set(Calendar.DATE, new Integer(diaInicial)
					.intValue());
			periodoInicial.set(Calendar.MONTH, (new Integer(mesInicial)
					.intValue() - 1));
			periodoInicial.set(Calendar.YEAR, new Integer(anoInicial)
					.intValue());
			periodoInicial.set(Calendar.HOUR_OF_DAY, 0);
			periodoInicial.set(Calendar.MINUTE, 00);
			periodoInicial.set(Calendar.SECOND, 00);

			Calendar periodoFinal = new GregorianCalendar();
			periodoFinal.set(Calendar.DATE, new Integer(diaFinal).intValue());
			periodoFinal.set(Calendar.MONTH,
					(new Integer(mesFinal).intValue() - 1));
			periodoFinal.set(Calendar.YEAR, new Integer(anoFinal).intValue());
			periodoFinal.set(Calendar.HOUR_OF_DAY, 23);
			periodoFinal.set(Calendar.MINUTE, 59);
			periodoFinal.set(Calendar.SECOND, 59);

			Intervalo intervalo = new Intervalo(
					FiltroCobrancaAcaoAtividadeComando.REALIZACAO,
					periodoInicial, periodoFinal);

			filtroCobrancaAcaoAtividadeComando.adicionarParametro(intervalo);
		}

		// validar Período de Vencimentos das Contas
		// [FS0004] - Validar Data
		// [FS0005] - Verificar data final menor que data inicial
		this.getControladorUtil().verificarDataInicialFinalPeriodo(
				dataPeriodoVencimentoContasInicial,
				dataPeriodoVencimentoContasFinal,
				"Período de Vencimentos das Contas Inicial",
				"Período de Vencimentos das Contas Final",
				"atencao.data_final_periodo.anterior.data_inicial_periodo");

		// Período de Realização do Comando
		// Período Realizacao Comando
		if ((dataPeriodoVencimentoContasInicial != null && !dataPeriodoVencimentoContasInicial
				.equals(""))
				&& (dataPeriodoVencimentoContasFinal != null && !dataPeriodoVencimentoContasFinal
						.equals(""))) {

			peloMenosUmParametroInformado = true;

			String anoInicial = dataPeriodoVencimentoContasInicial.substring(6,
					10);
			String mesInicial = dataPeriodoVencimentoContasInicial.substring(3,
					5);
			String diaInicial = dataPeriodoVencimentoContasInicial.substring(0,
					2);

			String anoFinal = dataPeriodoVencimentoContasFinal.substring(6, 10);
			String mesFinal = dataPeriodoVencimentoContasFinal.substring(3, 5);
			String diaFinal = dataPeriodoVencimentoContasFinal.substring(0, 2);

			Calendar periodoInicial = new GregorianCalendar();
			periodoInicial.set(Calendar.DATE, new Integer(diaInicial)
					.intValue());
			periodoInicial.set(Calendar.MONTH, (new Integer(mesInicial)
					.intValue() - 1));
			periodoInicial.set(Calendar.YEAR, new Integer(anoInicial)
					.intValue());
			periodoInicial.set(Calendar.HOUR_OF_DAY, 0);
			periodoInicial.set(Calendar.MINUTE, 00);
			periodoInicial.set(Calendar.SECOND, 00);

			Calendar periodoFinal = new GregorianCalendar();
			periodoFinal.set(Calendar.DATE, new Integer(diaFinal).intValue());
			periodoFinal.set(Calendar.MONTH,
					(new Integer(mesFinal).intValue() - 1));
			periodoFinal.set(Calendar.YEAR, new Integer(anoFinal).intValue());
			periodoFinal.set(Calendar.HOUR_OF_DAY, 23);
			periodoFinal.set(Calendar.MINUTE, 59);
			periodoFinal.set(Calendar.SECOND, 59);

			filtroCobrancaAcaoAtividadeComando
					.adicionarParametro(new ParametroSimples(
							FiltroCobrancaAcaoAtividadeComando.DATA_VENCIMENTO_CONTA_INICIAL,
							periodoInicial));
			filtroCobrancaAcaoAtividadeComando
					.adicionarParametro(new ParametroSimples(
							FiltroCobrancaAcaoAtividadeComando.DATA_VENCIMENTO_CONTA_FINAL,
							periodoFinal));
		}

		// validar Período de Referência das Contas
		// [FS0001] - Validar Referência
		// [FS0002] - Verificar referência final menor que referência inicial
		this.getControladorUtil().validarAnoMesInicialFinalPeriodo(
				anoMesPeriodoReferenciaContasInicial,
				anoMesPeriodoReferenciaContasFinal,
				"Período de Referência das Contas Inicial",
				"Período de Referência das Contas Final",
				"atencao.referencia.final.menor.referencia.inicial");

		// Período de Referência da Cobrança
		if ((anoMesPeriodoReferenciaContasInicial != null && !anoMesPeriodoReferenciaContasInicial
				.equals(""))
				&& (anoMesPeriodoReferenciaContasFinal != null && !anoMesPeriodoReferenciaContasFinal
						.equals(""))) {

			peloMenosUmParametroInformado = true;

			String anoInicial = anoMesPeriodoReferenciaContasInicial.substring(
					3, 7);
			String mesInicial = anoMesPeriodoReferenciaContasInicial.substring(
					0, 2);

			String anoFinal = anoMesPeriodoReferenciaContasFinal
					.substring(3, 7);
			String mesFinal = anoMesPeriodoReferenciaContasFinal
					.substring(0, 2);

			filtroCobrancaAcaoAtividadeComando
					.adicionarParametro(new ParametroSimples(
							FiltroCobrancaAcaoAtividadeComando.ANO_MES_REFERENCIA_CONTA_INICIAL,
							anoInicial + mesInicial));
			filtroCobrancaAcaoAtividadeComando
					.adicionarParametro(new ParametroSimples(
							FiltroCobrancaAcaoAtividadeComando.ANO_MES_REFERENCIA_CONTA_FINAL,
							anoFinal + mesFinal));
		}

		// Situação do Comando
		// [SB0006] - Seleciona Comandos Eventuais por Situação do Comando
		if (situacaoComando != null && !situacaoComando.equals("")) {
			peloMenosUmParametroInformado = true;
			if (situacaoComando.equals("Realizados")) {
				filtroCobrancaAcaoAtividadeComando
						.adicionarParametro(new ParametroNaoNulo(
								FiltroCobrancaAcaoAtividadeCronograma.REALIZACAO));
			} else if (situacaoComando.equals("NaoRealizados")) {
				filtroCobrancaAcaoAtividadeComando
						.adicionarParametro(new ParametroNulo(
								FiltroCobrancaAcaoAtividadeCronograma.REALIZACAO));
			}

		}

		// [FS0007] - Verificar situação do comando e período de realização do
		// comando
		if ((situacaoComando != null && !situacaoComando.equals("") && situacaoComando
				.equals("NaoRealizados"))
				&& ((dataPeriodoRealizacaoComandoFinal != null && !dataPeriodoRealizacaoComandoFinal
						.equals("")) && (dataPeriodoRealizacaoComandoInicial != null && !dataPeriodoRealizacaoComandoInicial
						.equals("")))) {
			throw new ControladorException(
					"atencao.periodo_realizacao.informado.situacao_comando");
		}

		// gerencia regional
		if (idGerenciaRegional != null
				&& !idGerenciaRegional.equals("")
				&& !idGerenciaRegional.equals(new Integer(
						ConstantesSistema.NUMERO_NAO_INFORMADO).toString())) {
			filtroCobrancaAcaoAtividadeComando
					.adicionarParametro(new ParametroSimples(
							FiltroCobrancaAcaoAtividadeComando.ID_GERENCIA_REGIONAL,
							idGerenciaRegional));
		}

		// unidade negocio
		if (unidadeNegocio != null
				&& !unidadeNegocio.equals("")
				&& !unidadeNegocio.equals(new Integer(
						ConstantesSistema.NUMERO_NAO_INFORMADO).toString())) {
			filtroCobrancaAcaoAtividadeComando
					.adicionarParametro(new ParametroSimples(
							FiltroCobrancaAcaoAtividadeComando.ID_UNIDADE_NEGOCIO,
							unidadeNegocio));
		}

		// localidade inicial e final
		if ((idLocalidadeInicial != null && !idLocalidadeInicial.equals(""))
				&& (idLocalidadeInicial != null && !idLocalidadeFinal
						.equals(""))) {
	
			filtroCobrancaAcaoAtividadeComando
					.adicionarParametro(new MaiorQue(
							FiltroCobrancaAcaoAtividadeComando.ID_LOCALIDADE_INICIAL,
							idLocalidadeInicial));
			filtroCobrancaAcaoAtividadeComando
					.adicionarParametro(new MenorQue(
							FiltroCobrancaAcaoAtividadeComando.ID_LOCALIDADE_FINAL,
							idLocalidadeFinal));

		}

		// setor comercial inicial e final
		if ((codigoSetorComercialInicial != null && !codigoSetorComercialInicial
				.equals(""))
				&& (codigoSetorComercialFinal != null && !codigoSetorComercialFinal
						.equals(""))) {
		
			filtroCobrancaAcaoAtividadeComando
					.adicionarParametro(new MaiorQue(
							FiltroCobrancaAcaoAtividadeComando.CODIGO_SETOR_COMERCIAL_INICIAL,
							codigoSetorComercialInicial));
			filtroCobrancaAcaoAtividadeComando
					.adicionarParametro(new MenorQue(
							FiltroCobrancaAcaoAtividadeComando.CODIGO_SETOR_COMERCIAL_FINAL,
							codigoSetorComercialFinal));
		}

		
		// setor comercial inicial e final
		if ((numeroQuadraInicial != null && !numeroQuadraInicial.equals("")) && 
			(numeroQuadraFinal != null && !numeroQuadraFinal.equals(""))) {
		
			filtroCobrancaAcaoAtividadeComando
					.adicionarParametro(new MaiorQue(
							FiltroCobrancaAcaoAtividadeComando.NUMERO_QUADRA_INICIAL,
							numeroQuadraInicial));
			filtroCobrancaAcaoAtividadeComando
					.adicionarParametro(new MenorQue(
							FiltroCobrancaAcaoAtividadeComando.NUMERO_QUADRA_FINAL,
							numeroQuadraFinal));
		}
		
		if (quantidadeDiasVencimento != null && !quantidadeDiasVencimento.equals("")) {
			filtroCobrancaAcaoAtividadeComando
			.adicionarParametro(new ParametroSimples(
					FiltroCobrancaAcaoAtividadeComando.QUANTIDADE_DIAS_VENCIMENTO,
					quantidadeDiasVencimento));		
		}
		
		if (ligacaoAlteradaDebito != null && !ligacaoAlteradaDebito.equals("") && !ligacaoAlteradaDebito.equals("Todos")) {
			if (ligacaoAlteradaDebito.equals("Apenas")){
				filtroCobrancaAcaoAtividadeComando
				.adicionarParametro(new ParametroSimples(
						FiltroCobrancaAcaoAtividadeComando.LIGACAO_ALTERADA_DEBITO,
						"2"));
			} else if (ligacaoAlteradaDebito.equals("Inclusive")){
				filtroCobrancaAcaoAtividadeComando
				.adicionarParametro(new ParametroSimples(
						FiltroCobrancaAcaoAtividadeComando.LIGACAO_ALTERADA_DEBITO,
						"1"));
			} else if (ligacaoAlteradaDebito.equals("NaoIncluir")){
				filtroCobrancaAcaoAtividadeComando
				.adicionarParametro(new ParametroSimples(
						FiltroCobrancaAcaoAtividadeComando.LIGACAO_ALTERADA_DEBITO,
						"3"));
			}		
		}
		
		// rota inicial e final
		if ((idRotaInicial != null && !idRotaInicial.equals(""))
				&& (idRotaFinal != null && !idRotaFinal.equals(""))) {
			
			filtroCobrancaAcaoAtividadeComando
					.adicionarParametro(new MaiorQue(
							FiltroCobrancaAcaoAtividadeComando.CODIGO_ROTA_INICIAL,
							idRotaInicial));
			filtroCobrancaAcaoAtividadeComando
					.adicionarParametro(new MenorQue(
							FiltroCobrancaAcaoAtividadeComando.CODIGO_ROTA_FINAL,
							idRotaFinal));
		}

		// cliente e cliente relação tipo
		if (idCliente != null && !idCliente.equals("")) {
			filtroCobrancaAcaoAtividadeComando
					.adicionarParametro(new ParametroSimples(
							FiltroCobrancaAcaoAtividadeComando.ID_CLIENTE,
							idCliente));
		}

		if (idClienteRelacaoTipo != null && !idClienteRelacaoTipo.equals("")) {
			filtroCobrancaAcaoAtividadeComando
					.adicionarParametro(new ParametroSimples(
							FiltroCobrancaAcaoAtividadeComando.ID_CLIENTE,
							idCliente));
			filtroCobrancaAcaoAtividadeComando
					.adicionarParametro(new ParametroSimples(
							FiltroCobrancaAcaoAtividadeComando.ID_CLIENTE_RELACAO_TIPO,
							idClienteRelacaoTipo));
		}

		// Critério de Cobrança
		// [SB0005] - Seleciona Comandos por Critérios
		if (indicadorCriterio != null && !indicadorCriterio.equals("")) {
			peloMenosUmParametroInformado = true;
			if (indicadorCriterio.equals("Rota")) {
				filtroCobrancaAcaoAtividadeComando
						.adicionarParametro(new ParametroSimples(
								FiltroCobrancaAcaoAtividadeComando.INDICADOR_CRITERIO,
								1));
			} else if (indicadorCriterio.equals("Comando")) {
				filtroCobrancaAcaoAtividadeComando
						.adicionarParametro(new ParametroSimples(
								FiltroCobrancaAcaoAtividadeComando.INDICADOR_CRITERIO,
								2));
			}

		}

		// criterio de cobranca
		if (criterioCobranca != null && !criterioCobranca.equals("")) {
			filtroCobrancaAcaoAtividadeComando
					.adicionarParametro(new ParametroSimples(
							FiltroCobrancaAcaoAtividadeComando.ID_COBRANCA_CRITERIO,
							criterioCobranca));
		}
		
		// consumo medio inicial e consumo medio final
		if(consumoMedioInicial!=null && !consumoMedioInicial.equals("")
				&& consumoMedioFinal!=null && !consumoMedioFinal.equals("")){
			filtroCobrancaAcaoAtividadeComando
				.adicionarParametro(new MaiorQue(
					FiltroCobrancaAcaoAtividadeComando.CONSUMO_MEDIO_INICIAL,
					consumoMedioInicial));
			
			filtroCobrancaAcaoAtividadeComando
				.adicionarParametro(new MenorQue(
					FiltroCobrancaAcaoAtividadeComando.CONSUMO_MEDIO_FINAL,
					consumoMedioFinal));
			
		}
		
		// tipo consumo
		if(tipoConsumo!=null && !tipoConsumo.equals("") && !tipoConsumo.equals("3")){
			filtroCobrancaAcaoAtividadeComando
				.adicionarParametro(new ParametroSimples(
					FiltroCobrancaAcaoAtividadeComando.TIPO_CONSUMO,
					tipoConsumo));
		}
		
		if(periodoInicialFiscalizacao!=null && !periodoInicialFiscalizacao.equals("")){
			filtroCobrancaAcaoAtividadeComando
				.adicionarParametro(new MaiorQue(
						FiltroCobrancaAcaoAtividadeComando.PERIODO_INICIAL_FISCALIZACAO,
						Util.formatarData(periodoInicialFiscalizacao)));
		}else if(periodoFinalFiscalizacao!=null && !periodoFinalFiscalizacao.equals("")){
			filtroCobrancaAcaoAtividadeComando
				.adicionarParametro(new MaiorQue(
					FiltroCobrancaAcaoAtividadeComando.PERIODO_INICIAL_FISCALIZACAO,
					Util.converteStringParaDate("01/01/0001")));
		}
		if(periodoFinalFiscalizacao!=null && !periodoFinalFiscalizacao.equals("")){
			filtroCobrancaAcaoAtividadeComando
				.adicionarParametro(new MenorQue(
						FiltroCobrancaAcaoAtividadeComando.PERIODO_FINAL_FISCALIZACAO,
						Util.formatarData(periodoFinalFiscalizacao)));
		}else if(periodoInicialFiscalizacao!=null && !periodoInicialFiscalizacao.equals("")){
			filtroCobrancaAcaoAtividadeComando
				.adicionarParametro(new MenorQue(
					FiltroCobrancaAcaoAtividadeComando.PERIODO_FINAL_FISCALIZACAO,
					Util.converteStringParaDate("31/12/9999")));
		}
		
		filtroCobrancaAcaoAtividadeComando
				.adicionarCaminhoParaCarregamentoEntidade(FiltroCobrancaAcaoAtividadeComando.COBRANCA_ATIVIDADE);
		filtroCobrancaAcaoAtividadeComando
				.adicionarCaminhoParaCarregamentoEntidade(FiltroCobrancaAcaoAtividadeComando.COBRANCA_ACAO);
		filtroCobrancaAcaoAtividadeComando
				.adicionarCaminhoParaCarregamentoEntidade(FiltroCobrancaAcaoAtividadeComando.COBRANCA_GRUPO);
		filtroCobrancaAcaoAtividadeComando
				.adicionarCaminhoParaCarregamentoEntidade(FiltroCobrancaAcaoAtividadeComando.COBRANCA_CRITERIO);
		filtroCobrancaAcaoAtividadeComando
				.adicionarCaminhoParaCarregamentoEntidade(FiltroCobrancaAcaoAtividadeComando.GERENCIAL_REGIONAL);
		filtroCobrancaAcaoAtividadeComando
				.adicionarCaminhoParaCarregamentoEntidade(FiltroCobrancaAcaoAtividadeComando.LOCALIDADE_INICIAL);
		// filtroCobrancaAcaoAtividadeComando
		// .adicionarCaminhoParaCarregamentoEntidade(FiltroCobrancaAcaoAtividadeComando.SETOR_COMERCIAL);
		filtroCobrancaAcaoAtividadeComando
				.adicionarCaminhoParaCarregamentoEntidade(FiltroCobrancaAcaoAtividadeComando.ROTA_INICIAL);
		filtroCobrancaAcaoAtividadeComando
				.adicionarCaminhoParaCarregamentoEntidade(FiltroCobrancaAcaoAtividadeComando.CLIENTE);
		filtroCobrancaAcaoAtividadeComando
				.adicionarCaminhoParaCarregamentoEntidade(FiltroCobrancaAcaoAtividadeComando.ROTA_FINAL);
		filtroCobrancaAcaoAtividadeComando
				.adicionarCaminhoParaCarregamentoEntidade(FiltroCobrancaAcaoAtividadeComando.CLIENTE_RELACAO_TIPO);
		filtroCobrancaAcaoAtividadeComando
				.adicionarCaminhoParaCarregamentoEntidade(FiltroCobrancaAcaoAtividadeComando.CLIENTE);

		// Erro caso o usuário mandou filtrar sem nenhum parâmetro
		if (!peloMenosUmParametroInformado) {
			throw new ControladorException(
					"atencao.filtro.nenhum_parametro_informado");
		}

		return filtroCobrancaAcaoAtividadeComando;
	}
	
	
	/**
	 * 
	 * Filtrar os Comandos de Ação de Cobrança tipo comando Eventual
	 * 
	 * [UC0326] - Filtrar Comandos de Ação de Cobrança
	 * 
	 * @author Rafael Santos
	 * @date 12/05/2006
	 * 
	 * @return filtroCobrancaAcaoAtividadeComando
	 * @throws ControladorException
	 */
	public FiltrarComandosAcaoCobrancaEventualHelper construirFiltroComandosAcaoCobrancaEventualHelper(
			String[] grupoCobranca, String[] acaoCobranca,
			String[] atividadeCobranca,
			String anoMesPeriodoReferenciaContasInicial,
			String anoMesPeriodoReferenciaContasFinal,
			String dataPeriodoComandoInicial, String dataPeriodoComandoFinal,
			String dataPeriodoRealizacaoComandoInicial,
			String dataPeriodoRealizacaoComandoFinal,
			String dataPeriodoVencimentoContasInicial,
			String dataPeriodoVencimentoContasFinal,
			String intervaloValorDocumentosInicial,
			String intervaloValorDocumentosFinal,
			String intervaloQuantidadeDocumentosInicial,
			String intervaloQuantidadeDocumentosFinal,
			String intervaloQuantidadeItensDocumentosInicial,
			String intervaloQuantidadeItensDocumentosFinal,
			String situacaoComando, String indicadorCriterio,
			String idGerenciaRegional, String idLocalidadeInicial,
			String idLocalidadeFinal, String codigoSetorComercialInicial,
			String codigoSetorComercialFinal, String idRotaInicial,
			String idRotaFinal, String idCliente, String idClienteRelacaoTipo,
			String criterioCobranca, String unidadeNegocio, 
			String[] idCobrancaAcaoAtividadeComando, String dataEmissaoInicial,
			String dataEmissaoFinal, String consumoMedioInicial,
			String consumoMedioFinal, String tipoConsumo,
			String periodoInicialFiscalizacao, String periodoFinalFiscalizacao, 
			String[] situacaoFiscalizacao,
			String numeroQuadraInicial,
			String numeroQuadraFinal, 
			String quantidadeDiasVencimento, 
			String ligacaoAlteradaDebito,
			String[] idsLocalidadeApartirGerenciaRegional,
			String localidadeUnica,
			String[] idsSetoresApartirLocalidadeUnica)
	
			throws ControladorException {

		FiltrarComandosAcaoCobrancaEventualHelper helper = new FiltrarComandosAcaoCobrancaEventualHelper();
		
		boolean peloMenosUmParametroInformado = false;
		
		//período de emissão/comando
		if (dataEmissaoInicial != null && dataEmissaoFinal != null){
			if ((dataEmissaoInicial.trim().length() == 10) && (dataEmissaoFinal.trim().length() == 10)){
				
				Date dataComandoInicial = Util.converteStringParaDateHora(dataEmissaoInicial + " 00:00:00");
				Date dataComandoFinal = Util.converteStringParaDateHora(dataEmissaoFinal + " 23:59:59");

				helper.setDataEmissaoInicial(dataComandoInicial);
				helper.setDataEmissaoFinal(dataComandoFinal);

				
				peloMenosUmParametroInformado = true;
			}
		}
		
		//Título do comando/Id do comando
		if (idCobrancaAcaoAtividadeComando != null && idCobrancaAcaoAtividadeComando.length > 0 && !(idCobrancaAcaoAtividadeComando.length == 1 && idCobrancaAcaoAtividadeComando[0].equals("")) ){
			helper.setIdCobrancaAcaoAtividadeComando(idCobrancaAcaoAtividadeComando);
		}

		// Intervalo de Valor dos Documentos
		if ((intervaloValorDocumentosInicial != null && !intervaloValorDocumentosInicial.equals("")) && 
			(intervaloValorDocumentosFinal != null && !intervaloValorDocumentosFinal.equals(""))) {

			peloMenosUmParametroInformado = true;

			BigDecimal valorDocumentosInicial = Util
					.formatarMoedaRealparaBigDecimal(intervaloValorDocumentosInicial);

			BigDecimal valorDocumentosFinal = Util
					.formatarMoedaRealparaBigDecimal(intervaloValorDocumentosFinal);


			helper.setIntervaloValorDocumentosInicial(valorDocumentosInicial);        			
			helper.setIntervaloValorDocumentosFinal(valorDocumentosFinal);

		}

		// Intervalo de Quantidade dos Documentos
		if ((intervaloQuantidadeDocumentosInicial != null && !intervaloQuantidadeDocumentosInicial.equals("")) && 
			(intervaloQuantidadeDocumentosFinal != null && !intervaloQuantidadeDocumentosFinal.equals(""))) {

			peloMenosUmParametroInformado = true;

			helper.setIntervaloQuantidadeDocumentosInicial(intervaloQuantidadeDocumentosInicial);        			
			helper.setIntervaloQuantidadeDocumentosFinal(intervaloQuantidadeDocumentosFinal);

		}

		// Intervalo de Quantidade Itens dos Documentos
		if ((intervaloQuantidadeItensDocumentosInicial != null && !intervaloQuantidadeItensDocumentosInicial.equals("")) && 
			(intervaloQuantidadeItensDocumentosFinal != null && !intervaloQuantidadeItensDocumentosFinal.equals(""))) {

			peloMenosUmParametroInformado = true;

			helper.setIntervaloQuantidadeItensDocumentosInicial(intervaloQuantidadeItensDocumentosInicial);
			helper.setIntervaloQuantidadeItensDocumentosFinal(intervaloQuantidadeItensDocumentosFinal);    			
		}

		// grupo cobrança
		if (grupoCobranca != null && grupoCobranca.length > 0 && !(grupoCobranca.length == 1 && grupoCobranca[0].equals("")) ) {
			
			peloMenosUmParametroInformado = true;

			helper.setGrupoCobranca(grupoCobranca);
		}

		// açao cobrança
		if (acaoCobranca != null && acaoCobranca.length > 0 && !(acaoCobranca.length == 1 && acaoCobranca[0].equals(""))) {
			peloMenosUmParametroInformado = true;
			
			helper.setAcaoCobranca(acaoCobranca);
		}

		// atividade cobrança
		if (atividadeCobranca != null && atividadeCobranca.length > 0 && !(atividadeCobranca.length == 1 && atividadeCobranca[0].equals("")) ) {
			
			peloMenosUmParametroInformado = true;

			helper.setAtividadeCobranca(atividadeCobranca);
		}
		
		if (idsLocalidadeApartirGerenciaRegional != null && idsLocalidadeApartirGerenciaRegional.length > 0) {
			peloMenosUmParametroInformado = true;

			helper.setIdsLocalidadeApartirGerenciaRegional(idsLocalidadeApartirGerenciaRegional);
		}

		if (idsSetoresApartirLocalidadeUnica != null && idsSetoresApartirLocalidadeUnica.length > 0) {
			peloMenosUmParametroInformado = true;

			helper.setIdsSetoresApartirLocalidadeUnica(idsSetoresApartirLocalidadeUnica);
		}

		// validar Período do Comando
		// [FS0004] - Validar Data
		// [FS0005] - Verificar data final menor que data inicial
		this.getControladorUtil().verificarDataInicialFinalPeriodo(
				dataPeriodoComandoInicial, dataPeriodoComandoFinal,
				"Período do Comando Inicial", "Período do Comando Final",
				"atencao.data_final_periodo.anterior.data_inicial_periodo");

		// Período do Comando
		if ((dataPeriodoComandoInicial != null && !dataPeriodoComandoInicial.equals("")) && 
			(dataPeriodoComandoFinal != null && !dataPeriodoComandoFinal.equals(""))) {

			peloMenosUmParametroInformado = true;

			String anoInicial = dataPeriodoComandoInicial.substring(6, 10);
			String mesInicial = dataPeriodoComandoInicial.substring(3, 5);
			String diaInicial = dataPeriodoComandoInicial.substring(0, 2);

			String anoFinal = dataPeriodoComandoFinal.substring(6, 10);
			String mesFinal = dataPeriodoComandoFinal.substring(3, 5);
			String diaFinal = dataPeriodoComandoFinal.substring(0, 2);

			Calendar periodoInicial = new GregorianCalendar();
			periodoInicial.set(Calendar.DATE, new Integer(diaInicial).intValue());
			periodoInicial.set(Calendar.MONTH, (new Integer(mesInicial).intValue() - 1));
			periodoInicial.set(Calendar.YEAR, new Integer(anoInicial).intValue());
			periodoInicial.set(Calendar.HOUR_OF_DAY, 00);
			periodoInicial.set(Calendar.MINUTE, 00);
			periodoInicial.set(Calendar.SECOND, 00);

			Calendar periodoFinal = new GregorianCalendar();
			periodoFinal.set(Calendar.DATE, new Integer(diaFinal).intValue());
			periodoFinal.set(Calendar.MONTH,(new Integer(mesFinal).intValue() - 1));
			periodoFinal.set(Calendar.YEAR, new Integer(anoFinal).intValue());
			periodoFinal.set(Calendar.HOUR_OF_DAY, 23);
			periodoFinal.set(Calendar.MINUTE, 59);
			periodoFinal.set(Calendar.SECOND, 59);
			
			helper.setDataPeriodoComandoInicial(periodoInicial.getTime());
			helper.setDataPeriodoComandoFinal(periodoFinal.getTime());
		}

		// validar Período de Realização do Comando
		// [FS0004] - Validar Data
		// [FS0005] - Verificar data final menor que data inicial
		this.getControladorUtil().verificarDataInicialFinalPeriodo(
				dataPeriodoRealizacaoComandoInicial,
				dataPeriodoRealizacaoComandoFinal,
				"Período de Realização do Comando Inicial",
				"Período de Realização do Comando Final",
				"atencao.data_final_periodo.anterior.data_inicial_periodo");

		// Período de Realização do Comando
		// Período Realizacao Comando
		if ((dataPeriodoRealizacaoComandoInicial != null && !dataPeriodoRealizacaoComandoInicial.equals("")) && 
			(dataPeriodoRealizacaoComandoFinal != null && !dataPeriodoRealizacaoComandoFinal.equals(""))) {

			peloMenosUmParametroInformado = true;

			String anoInicial = dataPeriodoRealizacaoComandoInicial.substring(6, 10);
			String mesInicial = dataPeriodoRealizacaoComandoInicial.substring(3, 5);
			String diaInicial = dataPeriodoRealizacaoComandoInicial.substring(0, 2);

			String anoFinal = dataPeriodoRealizacaoComandoFinal.substring(6, 10);
			String mesFinal = dataPeriodoRealizacaoComandoFinal.substring(3, 5);
			String diaFinal = dataPeriodoRealizacaoComandoFinal.substring(0, 2);

			Calendar periodoInicial = new GregorianCalendar();
			periodoInicial.set(Calendar.DATE, new Integer(diaInicial).intValue());
			periodoInicial.set(Calendar.MONTH, (new Integer(mesInicial).intValue() - 1));
			periodoInicial.set(Calendar.YEAR, new Integer(anoInicial).intValue());
			periodoInicial.set(Calendar.HOUR_OF_DAY, 0);
			periodoInicial.set(Calendar.MINUTE, 00);
			periodoInicial.set(Calendar.SECOND, 00);

			Calendar periodoFinal = new GregorianCalendar();
			periodoFinal.set(Calendar.DATE, new Integer(diaFinal).intValue());
			periodoFinal.set(Calendar.MONTH,(new Integer(mesFinal).intValue() - 1));
			periodoFinal.set(Calendar.YEAR, new Integer(anoFinal).intValue());
			periodoFinal.set(Calendar.HOUR_OF_DAY, 23);
			periodoFinal.set(Calendar.MINUTE, 59);
			periodoFinal.set(Calendar.SECOND, 59);


			helper.setDataPeriodoRealizacaoComandoInicial(periodoInicial.getTime());
			helper.setDataPeriodoRealizacaoComandoFinal(periodoFinal.getTime());

		}

		// validar Período de Vencimentos das Contas
		// [FS0004] - Validar Data
		// [FS0005] - Verificar data final menor que data inicial
		this.getControladorUtil().verificarDataInicialFinalPeriodo(
				dataPeriodoVencimentoContasInicial,
				dataPeriodoVencimentoContasFinal,
				"Período de Vencimentos das Contas Inicial",
				"Período de Vencimentos das Contas Final",
				"atencao.data_final_periodo.anterior.data_inicial_periodo");

		// Período de Realização do Comando
		// Período Realizacao Comando
		if ((dataPeriodoVencimentoContasInicial != null && !dataPeriodoVencimentoContasInicial.equals("")) && 
			(dataPeriodoVencimentoContasFinal != null && !dataPeriodoVencimentoContasFinal.equals(""))) {

			peloMenosUmParametroInformado = true;

			String anoInicial = dataPeriodoVencimentoContasInicial.substring(6,10);
			String mesInicial = dataPeriodoVencimentoContasInicial.substring(3,5);
			String diaInicial = dataPeriodoVencimentoContasInicial.substring(0,2);

			String anoFinal = dataPeriodoVencimentoContasFinal.substring(6, 10);
			String mesFinal = dataPeriodoVencimentoContasFinal.substring(3, 5);
			String diaFinal = dataPeriodoVencimentoContasFinal.substring(0, 2);

			Calendar periodoInicial = new GregorianCalendar();
			periodoInicial.set(Calendar.DATE, new Integer(diaInicial).intValue());
			periodoInicial.set(Calendar.MONTH, (new Integer(mesInicial).intValue() - 1));
			periodoInicial.set(Calendar.YEAR, new Integer(anoInicial).intValue());
			periodoInicial.set(Calendar.HOUR_OF_DAY, 0);
			periodoInicial.set(Calendar.MINUTE, 00);
			periodoInicial.set(Calendar.SECOND, 00);

			Calendar periodoFinal = new GregorianCalendar();
			periodoFinal.set(Calendar.DATE, new Integer(diaFinal).intValue());
			periodoFinal.set(Calendar.MONTH,(new Integer(mesFinal).intValue() - 1));
			periodoFinal.set(Calendar.YEAR, new Integer(anoFinal).intValue());
			periodoFinal.set(Calendar.HOUR_OF_DAY, 23);
			periodoFinal.set(Calendar.MINUTE, 59);
			periodoFinal.set(Calendar.SECOND, 59);

			
			helper.setDataPeriodoVencimentoContasInicial(periodoInicial.getTime());
			helper.setDataPeriodoVencimentoContasInicial(periodoFinal.getTime());
			
		}

		// validar Período de Referência das Contas
		// [FS0001] - Validar Referência
		// [FS0002] - Verificar referência final menor que referência inicial
		this.getControladorUtil().validarAnoMesInicialFinalPeriodo(
				anoMesPeriodoReferenciaContasInicial,
				anoMesPeriodoReferenciaContasFinal,
				"Período de Referência das Contas Inicial",
				"Período de Referência das Contas Final",
				"atencao.referencia.final.menor.referencia.inicial");

		// Período de Referência da Cobrança
		if ((anoMesPeriodoReferenciaContasInicial != null && !anoMesPeriodoReferenciaContasInicial.equals("")) && 
			(anoMesPeriodoReferenciaContasFinal != null && !anoMesPeriodoReferenciaContasFinal.equals(""))) {

			peloMenosUmParametroInformado = true;

			String anoInicial = anoMesPeriodoReferenciaContasInicial.substring(3, 7);
			String mesInicial = anoMesPeriodoReferenciaContasInicial.substring(0, 2);

			String anoFinal = anoMesPeriodoReferenciaContasFinal.substring(3, 7);
			String mesFinal = anoMesPeriodoReferenciaContasFinal.substring(0, 2);

			helper.setAnoMesPeriodoReferenciaContasInicial(anoInicial + mesInicial);
			helper.setAnoMesPeriodoReferenciaContasFinal(anoFinal + mesFinal);
			
		}

		// Situação do Comando
		// [SB0006] - Seleciona Comandos Eventuais por Situação do Comando
		if (situacaoComando != null && !situacaoComando.equals("")) {
			peloMenosUmParametroInformado = true;
			
			helper.setSituacaoComando(situacaoComando);
			
		}
		
		if (localidadeUnica != null && !localidadeUnica.equals("")) {
			peloMenosUmParametroInformado = true;
			
			helper.setLocalidadeUnica(localidadeUnica);
		}


		// [FS0007] - Verificar situação do comando e período de realização do
		// comando
		if ((situacaoComando != null && !situacaoComando.equals("") && situacaoComando.equals("NaoRealizados")) && 
			((dataPeriodoRealizacaoComandoFinal != null && !dataPeriodoRealizacaoComandoFinal.equals("")) && 
			(dataPeriodoRealizacaoComandoInicial != null && !dataPeriodoRealizacaoComandoInicial.equals("")))) {
			
			throw new ControladorException("atencao.periodo_realizacao.informado.situacao_comando");
		}

		// gerencia regional
		if (idGerenciaRegional != null && !idGerenciaRegional.equals("") && 
			!idGerenciaRegional.equals(new Integer(ConstantesSistema.NUMERO_NAO_INFORMADO).toString())) {

			helper.setIdGerenciaRegional(idGerenciaRegional);
			
		}

		// unidade negocio
		if (unidadeNegocio != null && !unidadeNegocio.equals("") && 
			!unidadeNegocio.equals(new Integer(ConstantesSistema.NUMERO_NAO_INFORMADO).toString())) {

			helper.setUnidadeNegocio(unidadeNegocio);
		}

		// localidade inicial e final
		if ((idLocalidadeInicial != null && !idLocalidadeInicial.equals("")) && 
			(idLocalidadeFinal != null && !idLocalidadeFinal.equals(""))) {
	
			helper.setIdLocalidadeInicial(idLocalidadeInicial);
			helper.setIdLocalidadeFinal(idLocalidadeFinal);
			
		}

		// setor comercial inicial e final
		if ((codigoSetorComercialInicial != null && !codigoSetorComercialInicial.equals("")) && 
			(codigoSetorComercialFinal != null && !codigoSetorComercialFinal.equals(""))) {
		
			
			helper.setCodigoSetorComercialInicial(codigoSetorComercialInicial);
			helper.setCodigoSetorComercialFinal(codigoSetorComercialFinal);
			
		}

		
		// setor comercial inicial e final
		if ((numeroQuadraInicial != null && !numeroQuadraInicial.equals("")) && 
			(numeroQuadraFinal != null && !numeroQuadraFinal.equals(""))) {
		
			
			helper.setNumeroQuadraInicial(numeroQuadraInicial);
			helper.setNumeroQuadraFinal(numeroQuadraFinal);

		}
		
		if (quantidadeDiasVencimento != null && !quantidadeDiasVencimento.equals("")) {

			helper.setQuantidadeDiasVencimento(quantidadeDiasVencimento);		
		}
		
		if (ligacaoAlteradaDebito != null && !ligacaoAlteradaDebito.equals("") && !ligacaoAlteradaDebito.equals("Todos")) {
			String codigo = "";
			if (ligacaoAlteradaDebito.equals("Apenas")){
				codigo = "2";
			} else if (ligacaoAlteradaDebito.equals("Inclusive")){
				codigo = "1";
			} else if (ligacaoAlteradaDebito.equals("NaoIncluir")){
				codigo = "3";
			}
			
			helper.setLigacaoAlteradaDebito(codigo);
		}
		
		// rota inicial e final
		if ((idRotaInicial != null && !idRotaInicial.equals("")) && 
			(idRotaFinal != null && !idRotaFinal.equals(""))) {
			
			helper.setIdRotaInicial(idRotaInicial);
			helper.setIdRotaFinal(idRotaFinal);
		}

		// cliente e cliente relação tipo
		if (idCliente != null && !idCliente.equals("")) {
			helper.setIdCliente(idCliente);
		}

		if (idClienteRelacaoTipo != null && !idClienteRelacaoTipo.equals("")) {
			helper.setIdClienteRelacaoTipo(idClienteRelacaoTipo);
		}

		// Critério de Cobrança
		// [SB0005] - Seleciona Comandos por Critérios
		if (indicadorCriterio != null && !indicadorCriterio.equals("")) {
			peloMenosUmParametroInformado = true;
			Integer valor = null;
		
			if (indicadorCriterio.equals("Rota")) {
				valor = new Integer(1);
			} else if (indicadorCriterio.equals("Comando")) {
				valor = new Integer(2);
			}

			helper.setIndicadorCriterio(valor);
		}


		// criterio de cobranca
		if (criterioCobranca != null && !criterioCobranca.equals("")) {
			
			helper.setCriterioCobranca(criterioCobranca);
		}
		
		// consumo medio inicial e consumo medio final
		if(consumoMedioInicial!=null && !consumoMedioInicial.equals("") && 
			consumoMedioFinal!=null && !consumoMedioFinal.equals("")){
			
			helper.setConsumoMedioInicial(consumoMedioInicial);
			helper.setConsumoMedioFinal(consumoMedioFinal);
			
		}
		
		// tipo consumo
		if(tipoConsumo!=null && !tipoConsumo.equals("") && !tipoConsumo.equals("3")){
			
			helper.setTipoConsumo(tipoConsumo);
		}
		
		if(periodoInicialFiscalizacao!=null && !periodoInicialFiscalizacao.equals("")){
			
			helper.setPeriodoInicialFiscalizacao(Util.converteStringParaDate(periodoInicialFiscalizacao));

		}else if(periodoFinalFiscalizacao!=null && !periodoFinalFiscalizacao.equals("")){

			helper.setPeriodoInicialFiscalizacao(Util.converteStringParaDate("01/01/0001"));			
		}
		if(periodoFinalFiscalizacao!=null && !periodoFinalFiscalizacao.equals("")){
			
			helper.setPeriodoFinalFiscalizacao(Util.converteStringParaDate(periodoFinalFiscalizacao));
			
		}else if(periodoInicialFiscalizacao!=null && !periodoInicialFiscalizacao.equals("")){
			
			helper.setPeriodoFinalFiscalizacao(Util.converteStringParaDate("31/12/9999"));
		}
		

		// Erro caso o usuário mandou filtrar sem nenhum parâmetro
		if (!peloMenosUmParametroInformado) {
			throw new ControladorException(
					"atencao.filtro.nenhum_parametro_informado");
		}

		return helper;
	}
	
	
	
	
	

	/**
	 * Filtrar os Comandos de Ação de Cobrança tipo comando Eventual
	 * 
	 * [UC0326] - Filtrar Comandos de Ação de Cobrança
	 * 
	 * @author Rafael Santos
	 * @date 15/05/2006
	 * 
	 * @param localidadeID
	 * @param setorComercialCD
	 * @return
	 * @throws ControladorException
	 */
	public SetorComercial obterSetorComercialLocalidade(String localidadeID,
			String setorComercialCD) throws ControladorException {

		SetorComercial setorComercial = null;

		FiltroSetorComercial filtroSetorComercial = new FiltroSetorComercial();

		// Adiciona o id da localidade que está no formulário para
		// compor a pesquisa.
		filtroSetorComercial.adicionarParametro(new ParametroSimples(
				FiltroSetorComercial.ID_LOCALIDADE, localidadeID));

		// Adiciona o código do setor comercial que esta no formulário
		// para compor a pesquisa.
		filtroSetorComercial.adicionarParametro(new ParametroSimples(
				FiltroSetorComercial.CODIGO_SETOR_COMERCIAL, setorComercialCD));

		filtroSetorComercial.adicionarParametro(new ParametroSimples(
				FiltroSetorComercial.INDICADORUSO,
				ConstantesSistema.INDICADOR_USO_ATIVO));

		// Retorna setorComercial
		Collection colecaoPesquisa = getControladorUtil().pesquisar(
				filtroSetorComercial, SetorComercial.class.getName());

		if (colecaoPesquisa != null && !colecaoPesquisa.isEmpty()) {
			setorComercial = (SetorComercial) Util
					.retonarObjetoDeColecao(colecaoPesquisa);
		}

		return setorComercial;
	}

	/**
	 * 
	 * Filtrar os Comandos de Ação de Cobrança tipo comando Eventual
	 * 
	 * [UC0326] - Filtrar Comandos de Ação de Cobrança
	 * 
	 * @author Rafael Santos
	 * @date 15/05/2006
	 * 
	 * @param codigoSetorComercial
	 * @return
	 * @throws ControladorException
	 */
	public Collection obterColecaoRotaSetorComercialLocalidade(
			String codigoSetorComercial, String idLocalidade)
			throws ControladorException {

		FiltroRota filtroRota = new FiltroRota();

		filtroRota
				.adicionarCaminhoParaCarregamentoEntidade("setorComercial.localidade");
		filtroRota.adicionarParametro(new ParametroSimples(
				FiltroRota.LOCALIDADE_ID, idLocalidade));

		filtroRota.adicionarCaminhoParaCarregamentoEntidade("setorComercial");
		filtroRota.adicionarParametro(new ParametroSimples(
				FiltroRota.SETOR_COMERCIAL_CODIGO, codigoSetorComercial));

		Collection colecaoRota = getControladorUtil().pesquisar(filtroRota,
				Rota.class.getName());

		return colecaoRota;

	}

	/**
	 * 
	 * Filtrar os Comandos de Ação de Cobrança tipo comando Eventual
	 * 
	 * [UC0326] - Filtrar Comandos de Ação de Cobrança
	 * 
	 * @author Rafael Santos
	 * @date 15/05/2006
	 * 
	 * @param localidadeID
	 * @return
	 */
	public Localidade obterLocalidadeGerenciaRegional(String localidadeID)
			throws ControladorException {

		Localidade localidade = null;

		FiltroLocalidade filtroLocalidade = new FiltroLocalidade();

		filtroLocalidade.adicionarParametro(new ParametroSimples(
				FiltroLocalidade.ID, localidadeID));

		// filtroLocalidade.adicionarParametro(new ParametroSimples(
		// FiltroLocalidade.ID_GERENCIA, gerenciaRegionalID));

		filtroLocalidade.adicionarParametro(new ParametroSimples(
				FiltroLocalidade.INDICADORUSO,
				ConstantesSistema.INDICADOR_USO_ATIVO));

		// Retorna localidade
		Collection colecaoPesquisa = getControladorUtil().pesquisar(
				filtroLocalidade, Localidade.class.getName());

		if (colecaoPesquisa != null && !colecaoPesquisa.isEmpty()) {
			localidade = (Localidade) Util
					.retonarObjetoDeColecao(colecaoPesquisa);
		}

		return localidade;

	}

	/**
	 * 
	 * Filtrar os Comandos de Ação de Cobrança tipo comando Eventual
	 * 
	 * [UC0326] - Filtrar Comandos de Ação de Cobrança
	 * 
	 * @author Rafael Santos
	 * @date 15/05/2006
	 * 
	 * @param idCliente
	 * @return
	 */
	public Cliente obterCliente(String idCliente) throws ControladorException {

		Cliente cliente = null;

		FiltroCliente filtroCliente = new FiltroCliente();

		filtroCliente.adicionarParametro(new ParametroSimples(
				FiltroCliente.INDICADOR_USO,
				ConstantesSistema.INDICADOR_USO_ATIVO));
		filtroCliente.adicionarParametro(new ParametroSimples(FiltroCliente.ID,
				new Integer(idCliente)));

		Collection colecaoPesquisa = getControladorUtil().pesquisar(
				filtroCliente, Cliente.class.getName());

		if (colecaoPesquisa != null && !colecaoPesquisa.isEmpty()) {
			cliente = (Cliente) Util.retonarObjetoDeColecao(colecaoPesquisa);
		}

		return cliente;

	}

	/**
	 * 
	 * Filtrar os Comandos de Ação de Cobrança tipo comando Eventual
	 * 
	 * [UC0326] - Filtrar Comandos de Ação de Cobrança
	 * 
	 * 
	 * 
	 * @author Administrador
	 * @date 19/05/2006
	 * 
	 * @param idCobrancaCriterio
	 * @return
	 */
	public CobrancaCriterio obterCobrancaCriterio(String idCobrancaCriterio)
			throws ControladorException {
		CobrancaCriterio cobrancaCriterio = null;

		FiltroCobrancaCriterio filtroCobrancaCriterio = new FiltroCobrancaCriterio();

		filtroCobrancaCriterio.adicionarParametro(new ParametroSimples(
				FiltroCobrancaCriterio.ID, idCobrancaCriterio));

		Collection colecaoPesquisa = getControladorUtil().pesquisar(
				filtroCobrancaCriterio, CobrancaCriterio.class.getName());

		if (colecaoPesquisa != null && !colecaoPesquisa.isEmpty()) {
			cobrancaCriterio = (CobrancaCriterio) Util
					.retonarObjetoDeColecao(colecaoPesquisa);
		}

		return cobrancaCriterio;

	}

	/**
	 * Consultar Comando de Ação de Cobrança
	 * 
	 * [UC0325] - Consultar Comandos de Ação de Cobrança - Tipo Eventual
	 * 
	 * @author Rafael Santos
	 * @date 10/05/2006
	 * 
	 * @param filtroCobrancaAcaoAtividadeCronograma
	 * @return
	 * @throws ControladorException
	 */
	public Collection<CobrancaAcaoAtividadeComando> pesquisarCobrancaAcaoAtividadeEventual(
			FiltroCobrancaAcaoAtividadeComando filtroCobrancaAcaoAtividadeComando)
			throws ControladorException {

		Collection colecaoCobrancaAcaoAtividadeComando;

		colecaoCobrancaAcaoAtividadeComando = this.getControladorUtil()
				.pesquisar(filtroCobrancaAcaoAtividadeComando,
						CobrancaAcaoAtividadeComando.class.getName());

		if (colecaoCobrancaAcaoAtividadeComando == null
				|| colecaoCobrancaAcaoAtividadeComando.isEmpty()) {
			throw new ControladorException("atencao.pesquisa.nenhumresultado",
					null, "Comando Ação de Cobrança - Eventual");
		}

		return colecaoCobrancaAcaoAtividadeComando;
	}

	/**
	 * 
	 * [UC0325] Consultar Comandos Ação de Cobrança
	 * 
	 * Consultar Comando Cobranca Ação Atividade Cobranca - Verificar pelo ID
	 * 
	 * [SB0004] - Consultar Dados do Comando de Ação de cobrança Eventual
	 * 
	 * @author Rafael Santos
	 * @date 11/05/2006
	 * 
	 * @return
	 * @throws ControladorException
	 */
	public CobrancaAcaoAtividadeComando obterCobrancaAcaoAtividadeComando(
			String idCobrancaAcaoAtividadeComando) throws ControladorException {

		Collection colecaoAtividadeEventualAcaoCobrancaComandadas = null;

		FiltroCobrancaAcaoAtividadeComando filtroCobrancaAcaoAtividadeComando = new FiltroCobrancaAcaoAtividadeComando();
		filtroCobrancaAcaoAtividadeComando
				.adicionarParametro(new ParametroSimples(
						FiltroCobrancaAcaoAtividadeComando.ID,
						idCobrancaAcaoAtividadeComando));
		filtroCobrancaAcaoAtividadeComando
				.adicionarCaminhoParaCarregamentoEntidade(FiltroCobrancaAcaoAtividadeComando.COBRANCA_ATIVIDADE);
		filtroCobrancaAcaoAtividadeComando
				.adicionarCaminhoParaCarregamentoEntidade(FiltroCobrancaAcaoAtividadeComando.COBRANCA_ACAO);
		filtroCobrancaAcaoAtividadeComando
				.adicionarCaminhoParaCarregamentoEntidade(FiltroCobrancaAcaoAtividadeComando.COBRANCA_GRUPO);
		filtroCobrancaAcaoAtividadeComando
				.adicionarCaminhoParaCarregamentoEntidade(FiltroCobrancaAcaoAtividadeComando.COBRANCA_CRITERIO);
		filtroCobrancaAcaoAtividadeComando
				.adicionarCaminhoParaCarregamentoEntidade(FiltroCobrancaAcaoAtividadeComando.GERENCIAL_REGIONAL);
		filtroCobrancaAcaoAtividadeComando
				.adicionarCaminhoParaCarregamentoEntidade(FiltroCobrancaAcaoAtividadeComando.LOCALIDADE_INICIAL);
		filtroCobrancaAcaoAtividadeComando
				.adicionarCaminhoParaCarregamentoEntidade(FiltroCobrancaAcaoAtividadeComando.LOCALIDADE_FINAL);
		// filtroCobrancaAcaoAtividadeComando
		// .adicionarCaminhoParaCarregamentoEntidade(FiltroCobrancaAcaoAtividadeComando.SETOR_COMERCIAL);
		filtroCobrancaAcaoAtividadeComando
				.adicionarCaminhoParaCarregamentoEntidade(FiltroCobrancaAcaoAtividadeComando.ROTA_INICIAL);
		filtroCobrancaAcaoAtividadeComando
		.adicionarCaminhoParaCarregamentoEntidade(FiltroCobrancaAcaoAtividadeComando.ROTA_FINAL);
		filtroCobrancaAcaoAtividadeComando
				.adicionarCaminhoParaCarregamentoEntidade(FiltroCobrancaAcaoAtividadeComando.CLIENTE);
		filtroCobrancaAcaoAtividadeComando
				.adicionarCaminhoParaCarregamentoEntidade(FiltroCobrancaAcaoAtividadeComando.CLIENTE_RELACAO_TIPO);
		filtroCobrancaAcaoAtividadeComando
				.adicionarCaminhoParaCarregamentoEntidade(FiltroCobrancaAcaoAtividadeComando.NEGOCIO_UNIDADE);
		filtroCobrancaAcaoAtividadeComando
				.adicionarCaminhoParaCarregamentoEntidade(FiltroCobrancaAcaoAtividadeComando.LOCALIDADE);
		
		colecaoAtividadeEventualAcaoCobrancaComandadas = this.getControladorUtil().pesquisar(filtroCobrancaAcaoAtividadeComando, CobrancaAcaoAtividadeComando.class.getName());
		
		if (colecaoAtividadeEventualAcaoCobrancaComandadas == null
				|| colecaoAtividadeEventualAcaoCobrancaComandadas.isEmpty()) {
			throw new ControladorException(
					"atencao.nao.atividade.cobranca.comandadas");
		}

		return (CobrancaAcaoAtividadeComando) colecaoAtividadeEventualAcaoCobrancaComandadas
				.iterator().next();
	}

	/**
	 * 
	 * Gerar Relção de Debitos
	 * 
	 * [UC0227] - Gerar Relação de Débitos
	 * 
	 * @author Rafael Santos
	 * @date 15/06/2006
	 * 
	 * @param idImovelCondominio
	 * @param idImovelPrincipal
	 * @param idNomeConta
	 * @param idSituacaoLigacaoAgua
	 * @param consumoMinimoInicialAgua
	 * @param consumoMinimoFinalAgua
	 * @param idSituacaoLigacaoEsgoto
	 * @param consumoMinimoInicialEsgoto
	 * @param consumoMinimoFinalEsgoto
	 * @param intervaloValorPercentualEsgotoInicial
	 * @param intervaloValorPercentualEsgotoFinal
	 * @param intervaloMediaMinimaImovelInicial
	 * @param intervaloMediaMinimaImovelFinal
	 * @param intervaloMediaMinimaHidrometroInicial
	 * @param intervaloMediaMinimaHidrometroFinal
	 * @param idImovelPerfil
	 * @param idPocoTipo
	 * @param idFaturamentoSituacaoTipo
	 * @param idCobrancaSituacaoTipo
	 * @param idSituacaoEspecialCobranca
	 * @param idEloAnormalidade
	 * @param areaConstruidaInicial
	 * @param areaConstruidaFinal
	 * @param idCadastroOcorrencia
	 * @param idConsumoTarifa
	 * @param idGerenciaRegional
	 * @param idLocalidadeInicial
	 * @param idLocalidadeFinal
	 * @param setorComercialInicial
	 * @param setorComercialFinal
	 * @param quadraInicial
	 * @param quadraFinal
	 * @param loteOrigem
	 * @param loteDestno
	 * @param cep
	 * @param logradouro
	 * @param bairro
	 * @param municipio
	 * @param idTipoMedicao
	 * @param indicadorMedicao
	 * @param idSubCategoria
	 * @param idCategoria
	 * @param quantidadeEconomiasInicial
	 * @param quantidadeEconomiasFinal
	 * @param diaVencimento
	 * @param idCliente
	 * @param idClienteTipo
	 * @param idClienteRelacaoTipo
	 * @param numeroPontosInicial
	 * @param numeroPontosFinal
	 * @param numeroMoradoresInicial
	 * @param numeroMoradoresFinal
	 * @param idAreaConstruidaFaixa
	 * @return
	 * @throws ControladorException
	 */
	public List gerarRelacaoDebitos(String idImovelCondominio,
			String idImovelPrincipal, String idNomeConta,
			String idSituacaoLigacaoAgua, String consumoMinimoInicialAgua,
			String consumoMinimoFinalAgua, String idSituacaoLigacaoEsgoto,
			String consumoMinimoInicialEsgoto, String consumoMinimoFinalEsgoto,
			String intervaloValorPercentualEsgotoInicial,
			String intervaloValorPercentualEsgotoFinal,

			String intervaloMediaMinimaImovelInicial,
			String intervaloMediaMinimaImovelFinal,
			String intervaloMediaMinimaHidrometroInicial,
			String intervaloMediaMinimaHidrometroFinal,

			String idImovelPerfil, String idPocoTipo,
			String idFaturamentoSituacaoTipo, String idCobrancaSituacaoTipo,
			String idSituacaoEspecialCobranca, String idEloAnormalidade,
			String areaConstruidaInicial, String areaConstruidaFinal,
			String idCadastroOcorrencia, String idConsumoTarifa,
			String idGerenciaRegional, String idLocalidadeInicial,
			String idLocalidadeFinal, String setorComercialInicial,
			String setorComercialFinal, String quadraInicial,
			String quadraFinal, String loteOrigem, String loteDestno,
			String cep, String logradouro, String bairro, String municipio,
			String idTipoMedicao, String indicadorMedicao,
			String idSubCategoria, String idCategoria,
			String quantidadeEconomiasInicial, String quantidadeEconomiasFinal,
			String diaVencimento, String idCliente, String idClienteTipo,
			String idClienteRelacaoTipo, String numeroPontosInicial,
			String numeroPontosFinal, String numeroMoradoresInicial,
			String numeroMoradoresFinal, String idAreaConstruidaFaixa,
			String[] tipoDebito, String valorDebitoInicial,
			String valorDebitoFinal, String qtdContasInicial,
			String qtdContasFinal, String referenciaFaturaInicial,
			String referenciaFaturaFinal, String vencimentoInicial,
			String vencimentoFinal, String qtdImoveis, String qtdMaiores, String indicadorCodigoBarra, String ordenacao,
			String indicadorCpfCnpj, String cpfCnpj)
			throws ControladorException {

		
		Integer idLocalidade = null;
		Integer idGerencia = null;
		int countContasLocalidade = 0;
		int countImovelLocalidade = 0;
		int countDebitosLocalidade = 0;
		int countContasGerencia = 0;
		int countImovelGerencia = 0;
		int countDebitosGerencia = 0;
		int countContasTotal = 0;
		int countImovelTotal = 0;
		int countDebitosTotal = 0;
		BigDecimal totalDebitosLocalidade = new BigDecimal("0.00");
		BigDecimal totalContasLocalidade = new BigDecimal("0.00");
		BigDecimal totalGuiasPagamentoLocalidade = new BigDecimal("0.00");
		BigDecimal totalDebitoACobrarLocalidade = new BigDecimal("0.00");
		BigDecimal totalAcrescimosLocalidade = new BigDecimal("0.00");
		BigDecimal totalDebitosGerencia = new BigDecimal("0.00");
		BigDecimal totalContasGerencia = new BigDecimal("0.00");
		BigDecimal totalGuiasPagamentoGerencia = new BigDecimal("0.00");
		BigDecimal totalDebitoACobrarGerencia = new BigDecimal("0.00");
		BigDecimal totalAcrescimosGerencia = new BigDecimal("0.00");
		BigDecimal totalDebitosTotal = new BigDecimal("0.00");
		BigDecimal totalContasTotal = new BigDecimal("0.00");
		BigDecimal totalGuiasPagamentoTotal = new BigDecimal("0.00");
		BigDecimal totalDebitoACobrarTotal = new BigDecimal("0.00");
		BigDecimal totalAcrescimosTotal = new BigDecimal("0.00");
		
		System.out.println("------------------------------------INICIO GERAR RELACAO DEBITOS -----------------------------------");
		List colecaoImoveis = null;
		boolean flagFimPesquisa = false;
		final int quantidadeImovel = 500;
		int quantidadeImovelInicio = 0;
		// coleção de beans do relatório
		List relatorioBeans = new ArrayList();
		// colecao com os dados para o relatorio
		Collection colecaoGerarRelacaoDebitos = new ArrayList();
int count = 0;
		imovelColecao: while (!flagFimPesquisa) {
			
			System.out.println("------------------------------------INICIO PESQUISA 500 IMOVEIS A PARTIR"+ quantidadeImovelInicio +" -----------------------------------");
			
			try {
				// remove primeiro as linhas do critério cobrança
				colecaoImoveis = (List) repositorioCobranca
						.gerarRelacaoDebitos(idImovelCondominio,
								idImovelPrincipal, idNomeConta,
								idSituacaoLigacaoAgua,
								consumoMinimoInicialAgua,
								consumoMinimoFinalAgua,
								idSituacaoLigacaoEsgoto,
								consumoMinimoInicialEsgoto,
								consumoMinimoFinalEsgoto,
								intervaloValorPercentualEsgotoInicial,
								intervaloValorPercentualEsgotoFinal,
								intervaloMediaMinimaImovelInicial,
								intervaloMediaMinimaImovelFinal,
								intervaloMediaMinimaHidrometroInicial,
								intervaloMediaMinimaHidrometroFinal,
								idImovelPerfil, idPocoTipo,
								idFaturamentoSituacaoTipo,
								idCobrancaSituacaoTipo,
								idSituacaoEspecialCobranca, idEloAnormalidade,
								areaConstruidaInicial, areaConstruidaFinal,
								idCadastroOcorrencia, idConsumoTarifa,
								idGerenciaRegional, idLocalidadeInicial,
								idLocalidadeFinal, setorComercialInicial,
								setorComercialFinal, quadraInicial,
								quadraFinal, loteOrigem, loteDestno, cep,
								logradouro, bairro, municipio, idTipoMedicao,
								indicadorMedicao, idSubCategoria, idCategoria,
								quantidadeEconomiasInicial,
								quantidadeEconomiasFinal, diaVencimento,
								idCliente, idClienteTipo, idClienteRelacaoTipo,
								numeroPontosInicial, numeroPontosFinal,
								numeroMoradoresInicial, numeroMoradoresFinal,
								idAreaConstruidaFaixa, ordenacao, quantidadeImovelInicio,
								indicadorCpfCnpj, cpfCnpj);
			} catch (ErroRepositorioException e) {
				//sessionContext.setRollbackOnly();
				throw new ControladorException("erro.sistema", e);
			}

			Integer numeroImovel = 0;
			System.out.println("------------------------------------TERMINOU PESQUISA 500 IMOVEIS A PARTIR"+ quantidadeImovelInicio +" -----------------------------------");
			// para cada imovel pega as conta, debitos, creditos e guias
			if (colecaoImoveis != null && !colecaoImoveis.isEmpty()) {

				if (colecaoImoveis.size() < quantidadeImovel) {
					flagFimPesquisa = true;
				} else {
					quantidadeImovelInicio = quantidadeImovelInicio + 500;
				}

				Iterator iteratorColecaoImoveis = colecaoImoveis.iterator();

				GerarRelacaoDebitosImovelHelper gerarRelacaoDebitosImovelHelper = null;
				GerarRelacaoDebitosHelper gerarRelacaoDebitosHelper = null;
				// imovel :
				while (iteratorColecaoImoveis.hasNext()) {

					Object[] contasDadosRelatorio = (Object[]) iteratorColecaoImoveis
							.next();

					gerarRelacaoDebitosImovelHelper = new GerarRelacaoDebitosImovelHelper();

					gerarRelacaoDebitosHelper = new GerarRelacaoDebitosHelper();

					// id gerencia regional
					if (contasDadosRelatorio[0] != null) { // 0
						gerarRelacaoDebitosImovelHelper
								.setIdGerenciaRegional(((Integer) contasDadosRelatorio[0])
										.toString());
					}
					// nome abreviado gerencia regional
					if (contasDadosRelatorio[1] != null) { // 1
						gerarRelacaoDebitosImovelHelper
								.setNomeGerenciaRegional((String) contasDadosRelatorio[1]);
					}
					// id localidade
					if (contasDadosRelatorio[2] != null) { // 2
						gerarRelacaoDebitosImovelHelper
								.setIdLocalidade(((Integer) contasDadosRelatorio[2])
										.toString());
					}
					// descricao localidade
					if (contasDadosRelatorio[3] != null) { // 3
						gerarRelacaoDebitosImovelHelper
								.setDescricaoLocalidade((String) contasDadosRelatorio[3]);
					}
					// id imovel
					if (contasDadosRelatorio[4] != null) { // 4
						gerarRelacaoDebitosImovelHelper
								.setIdImovel(((Integer) contasDadosRelatorio[4])
										.toString());
					}
					// quantidade de economias
					if (contasDadosRelatorio[5] != null) { // 5
						gerarRelacaoDebitosImovelHelper
								.setQuantidadeEconomias(((Short) contasDadosRelatorio[5])
										.toString());
					}
					// codigo setor comercial
					if (contasDadosRelatorio[6] != null) { // 6
						gerarRelacaoDebitosImovelHelper
								.setCodigoSetorComercial(((Integer) contasDadosRelatorio[6])
										.toString());
					}
					// numero quadra
					if (contasDadosRelatorio[7] != null) { // 7
						gerarRelacaoDebitosImovelHelper
								.setNumeroQuadra(((Integer) contasDadosRelatorio[7])
										.toString());
					}
					// lote
					if (contasDadosRelatorio[8] != null) { // 8
						gerarRelacaoDebitosImovelHelper
								.setLote(((Short) contasDadosRelatorio[8])
										.toString());
					}
					// sub lote
					if (contasDadosRelatorio[9] != null) { // 9
						gerarRelacaoDebitosImovelHelper
								.setSubLote(((Short) contasDadosRelatorio[9])
										.toString());
					}
					// descricao ligacao agua situacao
					if (contasDadosRelatorio[10] != null) { // 10
						gerarRelacaoDebitosImovelHelper
								.setSituacaoAgua((String) contasDadosRelatorio[10]);
					}
					// descricao ligacao esgoto situacao
					if (contasDadosRelatorio[11] != null) { // 11
						gerarRelacaoDebitosImovelHelper
								.setSituacaoEsgoto((String) contasDadosRelatorio[11]);
					}
					// percentual
					if (contasDadosRelatorio[12] != null) { // 12
						gerarRelacaoDebitosImovelHelper
								.setPercentualEsgoto(Util
										.formatarMoedaReal((BigDecimal) contasDadosRelatorio[12]));
					}
					// data corte
					if (contasDadosRelatorio[13] != null) { // 13
						gerarRelacaoDebitosImovelHelper.setDataCorte(Util
								.formatarData((Date) contasDadosRelatorio[13]));
					}
					// gerencia regional - nome
					if (contasDadosRelatorio[14] != null) { // 14
						gerarRelacaoDebitosImovelHelper
								.setGerenciaRegional((String) contasDadosRelatorio[14]);
					}
					// nome cliente usuario
					if (contasDadosRelatorio[15] != null) { // 15
						gerarRelacaoDebitosImovelHelper
								.setNomeClienteUsuario((String) contasDadosRelatorio[15]);
					}
					// nome cliente resposanvel
					if (contasDadosRelatorio[16] != null) { // 16
						gerarRelacaoDebitosImovelHelper
								.setNomeClienteResponsavel((String) contasDadosRelatorio[16]);
					}
					// rota
					if (contasDadosRelatorio[17] != null) { // 17
						gerarRelacaoDebitosImovelHelper
								.setRota(((Short) contasDadosRelatorio[17]).toString());
					} else {
						gerarRelacaoDebitosImovelHelper
						.setRota("");
					}
					
					// sequencial rota
					if (contasDadosRelatorio[18] != null) { // 18
						gerarRelacaoDebitosImovelHelper
								.setSequencialRota(((Integer) contasDadosRelatorio[18]).toString());
					} else {
						gerarRelacaoDebitosImovelHelper
						.setSequencialRota("");
					}
					
					// subcategoria
					if (contasDadosRelatorio[20] != null) { // 20
						gerarRelacaoDebitosImovelHelper.setSubcategoriaPrincipal((String) contasDadosRelatorio[20]);
					} else {
						gerarRelacaoDebitosImovelHelper.setSubcategoriaPrincipal("");
					}
					
					// categoria
					if (contasDadosRelatorio[21] != null) { // 21
						gerarRelacaoDebitosImovelHelper.setCategoriaPrincipal( (String) contasDadosRelatorio[21]);
					} else {
						gerarRelacaoDebitosImovelHelper.setCategoriaPrincipal("");
					}
					
					// consumo Medio
					if (contasDadosRelatorio[22] != null) { // 22
						gerarRelacaoDebitosImovelHelper.setConsumoMediaImovel( (String) contasDadosRelatorio[22]);
					} else {
						gerarRelacaoDebitosImovelHelper.setConsumoMediaImovel("");
					}
					

					Imovel imovel = new Imovel();

					Localidade localidadeImovel = new Localidade();
					localidadeImovel.setId(new Integer(
							gerarRelacaoDebitosImovelHelper.getIdLocalidade()));
					SetorComercial setorComercialImovel = new SetorComercial();
					setorComercialImovel.setCodigo(new Integer(
							gerarRelacaoDebitosImovelHelper
									.getCodigoSetorComercial()).intValue());
					Quadra quadraImovel = new Quadra();
					quadraImovel.setNumeroQuadra(new Integer(
							gerarRelacaoDebitosImovelHelper.getNumeroQuadra())
							.intValue());

					imovel.setLocalidade(localidadeImovel);
					imovel.setSetorComercial(setorComercialImovel);
					imovel.setQuadra(quadraImovel);
					imovel.setLote(new Short(gerarRelacaoDebitosImovelHelper
							.getLote()).shortValue());
					imovel.setSubLote(new Short(gerarRelacaoDebitosImovelHelper
							.getSubLote()).shortValue());

					// inscricao formatada do imovel
					gerarRelacaoDebitosImovelHelper.setInscricaoImovel(imovel
							.getInscricaoFormatada());

					Calendar dataInicio = new GregorianCalendar();
					dataInicio.set(Calendar.YEAR, 1980);
					dataInicio.set(Calendar.MONTH, 0);
					dataInicio.set(Calendar.DAY_OF_MONTH, 1);

					/*
					 * Calendar dataFim = new GregorianCalendar();
					 * dataFim.add(Calendar.DATE, -45);
					 */

					Calendar dataFim = new GregorianCalendar();
					dataFim.set(Calendar.YEAR, 9999);
					dataFim.set(Calendar.MONTH, 11);
					dataFim.set(Calendar.DAY_OF_MONTH, 31);

					ObterDebitoImovelOuClienteHelper obterDebitoImovelOuClienteHelper = obterDebitoImovelOuCliente(
							1, gerarRelacaoDebitosImovelHelper.getIdImovel(),
							null, null, "198001", "999912", dataInicio
									.getTime(), dataFim.getTime(), 1, 1, 1, 1,
							1, 1, 1, null);

					if (qtdImoveis != null && !qtdImoveis.equals("")) {
						Integer qtdImoveisInformada = new Integer(qtdImoveis) - 1;
						if (numeroImovel.compareTo(qtdImoveisInformada) == 1) {
							// flagFimPesquisa = true;
							break imovelColecao;
						}
					}

					if (qtdMaiores != null && !qtdMaiores.equals("")) {
						Integer qtdMaioresInformada = new Integer(qtdMaiores) - 1;
						if (numeroImovel.compareTo(qtdMaioresInformada) == 1) {
							// flagFimPesquisa = true;
							break imovelColecao;
						}
					}

					if ((obterDebitoImovelOuClienteHelper
							.getColecaoContasValores() != null && !obterDebitoImovelOuClienteHelper
							.getColecaoContasValores().isEmpty())
							| (obterDebitoImovelOuClienteHelper
									.getColecaoCreditoARealizar() != null && !obterDebitoImovelOuClienteHelper
									.getColecaoCreditoARealizar().isEmpty())
							| (obterDebitoImovelOuClienteHelper
									.getColecaoDebitoACobrar() != null && !obterDebitoImovelOuClienteHelper
									.getColecaoDebitoACobrar().isEmpty())
							| (obterDebitoImovelOuClienteHelper
									.getColecaoGuiasPagamentoValores() != null && !obterDebitoImovelOuClienteHelper
									.getColecaoGuiasPagamentoValores()
									.isEmpty())) {

						// obter endereco
						gerarRelacaoDebitosImovelHelper
								.setEndereco(getControladorEndereco()
										.pesquisarEndereco(
												new Integer(
														gerarRelacaoDebitosImovelHelper
																.getIdImovel())));

						// obter categoria do imovel
						Integer idImovel = new Integer(
								gerarRelacaoDebitosImovelHelper
								.getIdImovel());
						
						
						
						// /////////////////////////////////////////////////////////////

						// total de conta
						BigDecimal totalContas = new BigDecimal("0.00");
						// total conta atualizado
						BigDecimal totalContasAtualizado = new BigDecimal(
								"0.00");

						// valor total juros
						BigDecimal totalJuros = new BigDecimal("0.00");
						// valor total multa
						BigDecimal totalMulta = new BigDecimal("0.00");
						// valor total atualizacao monetaria
						BigDecimal totalAtualizacaoMonetaria = new BigDecimal(
								"0.00");
						// valor totoal geral atualizado
						BigDecimal totalDebito = new BigDecimal("0.00");
						// valor total acrescimo por impontualidade
						BigDecimal totalAcrescimoImpontualidade = new BigDecimal(
								"0.00");

						boolean verificarQtdConta = true;
						boolean verificarValorDebito = true;
						boolean verificarReferencia = true;
						boolean verificarVencimento = true;

						if ((qtdContasInicial != null && !qtdContasInicial
								.equals(""))
								&& (qtdContasFinal != null && !qtdContasFinal
										.equals(""))) {
							Integer qtdContaInicial = new Integer(
									qtdContasInicial);
							Integer qtdContaFinal = new Integer(qtdContasFinal);
							if (obterDebitoImovelOuClienteHelper
									.getColecaoContasValores() != null
									&& !obterDebitoImovelOuClienteHelper
											.getColecaoContasValores()
											.isEmpty()) {
								Integer tamanhoColecaoConta = obterDebitoImovelOuClienteHelper
										.getColecaoContasValores().size();
								if (tamanhoColecaoConta
										.compareTo(qtdContaInicial) != ConstantesSistema.INVALIDO_ID
										&& tamanhoColecaoConta
												.compareTo(qtdContaFinal) != 1) {
									verificarQtdConta = true;
								} else {
									verificarQtdConta = false;
								}
							} else if (!qtdContaInicial.equals(0)) {
								verificarQtdConta = false;
							}
						} else {
							verificarQtdConta = true;
						}

						Collection<ContaValoresHelper> colecaoContasHelper = new ArrayList();
						if (obterDebitoImovelOuClienteHelper
								.getColecaoContasValores() != null
								&& !obterDebitoImovelOuClienteHelper
										.getColecaoContasValores().isEmpty()) {
							Iterator iteratorColecaoContasValores = obterDebitoImovelOuClienteHelper
									.getColecaoContasValores().iterator();
							while (iteratorColecaoContasValores.hasNext()) {
								ContaValoresHelper contaValoresHelper = (ContaValoresHelper) iteratorColecaoContasValores
										.next();

								if (referenciaFaturaInicial != null
										&& !referenciaFaturaInicial.equals("")
										&& referenciaFaturaFinal != null
										&& !referenciaFaturaFinal.equals("")) {

									Integer referencia = contaValoresHelper
											.getConta().getReferencia();
									Integer referenciaInicial = Util
											.formatarMesAnoComBarraParaAnoMes(referenciaFaturaInicial);
									Integer referenciaFinal = Util
											.formatarMesAnoComBarraParaAnoMes(referenciaFaturaFinal);
									if (referencia.compareTo(referenciaInicial) != ConstantesSistema.INVALIDO_ID
											&& referencia
													.compareTo(referenciaFinal) != 1) {
										verificarReferencia = true;
									} else {
										verificarReferencia = false;
									}
								} else {
									verificarReferencia = true;
								}

								if (vencimentoInicial != null
										&& !vencimentoInicial.equals("")
										&& vencimentoFinal != null
										&& !vencimentoFinal.equals("")) {

									Date vencimento = contaValoresHelper
											.getConta()
											.getDataVencimentoConta();
									Date venInicial = Util
											.converteStringParaDate(vencimentoInicial);
									Date venFinal = Util
											.converteStringParaDate(vencimentoFinal);
									if (vencimento.compareTo(venInicial) != ConstantesSistema.INVALIDO_ID
											&& vencimento.compareTo(venFinal) != 1) {
										verificarVencimento = true;
									} else {
										verificarVencimento = false;
									}
								} else {
									verificarVencimento = true;
								}

								if (verificarReferencia && verificarVencimento) {

									if (tipoDebito != null
											&& tipoDebito.length > 0) {
										achou: for (int i = 0; i < tipoDebito.length; i++) {
											if (new Integer(tipoDebito[i])
													.intValue() != ConstantesSistema.NUMERO_NAO_INFORMADO
													&& new Integer(
															tipoDebito[i])
															.equals(ConstantesSistema.CONTA)) {
												totalContas = totalContas
														.add(contaValoresHelper
																.getConta()
																.getValorTotal());
												totalContasAtualizado = totalContasAtualizado
														.add(contaValoresHelper
																.getConta()
																.getValorTotal());
												totalContasAtualizado = totalContasAtualizado
														.add(contaValoresHelper
																.getValorTotalContaValores());
												break achou;
											}
										}
									} else {
										totalContas = totalContas
												.add(contaValoresHelper
														.getConta()
														.getValorTotal());
										totalContasAtualizado = totalContasAtualizado
												.add(contaValoresHelper
														.getConta()
														.getValorTotal());
										totalContasAtualizado = totalContasAtualizado
												.add(contaValoresHelper
														.getValorTotalContaValores());
									}

									if (tipoDebito != null
											&& tipoDebito.length > 0) {
										achou: for (int i = 0; i < tipoDebito.length; i++) {
											if (new Integer(tipoDebito[i])
													.intValue() != ConstantesSistema.NUMERO_NAO_INFORMADO
													&& new Integer(
															tipoDebito[i])
															.equals(ConstantesSistema.ACRESCIMO)) {
												
												if (contaValoresHelper.getValorJurosMora() != null){
													
													totalJuros = totalJuros.add(contaValoresHelper.getValorJurosMora());
												}
												
												if (contaValoresHelper.getValorMulta() != null){
													
													totalMulta = totalMulta.add(contaValoresHelper.getValorMulta());
												}
												
												if (contaValoresHelper.getValorAtualizacaoMonetaria() != null){
													
													totalAtualizacaoMonetaria = totalAtualizacaoMonetaria.add(contaValoresHelper
													.getValorAtualizacaoMonetaria());
												}
												
												break achou;
											}
										}
									} else {
										
										if (contaValoresHelper.getValorJurosMora() != null){
											
											totalJuros = totalJuros.add(contaValoresHelper.getValorJurosMora());
										}
										
										if (contaValoresHelper.getValorMulta() != null){
											
											totalMulta = totalMulta.add(contaValoresHelper.getValorMulta());
										}
										
										if (contaValoresHelper.getValorAtualizacaoMonetaria() != null){
											
											totalAtualizacaoMonetaria = totalAtualizacaoMonetaria.add(contaValoresHelper
											.getValorAtualizacaoMonetaria());
										}
									}

									colecaoContasHelper.add(contaValoresHelper);
								}

							}
						}

						if (tipoDebito != null && tipoDebito.length > 0) {
							achou: for (int i = 0; i < tipoDebito.length; i++) {
								if (new Integer(tipoDebito[i]).intValue() != ConstantesSistema.NUMERO_NAO_INFORMADO
										&& new Integer(tipoDebito[i])
												.equals(ConstantesSistema.CONTA)) {
									// colecao de contas
									gerarRelacaoDebitosHelper
											.setColecaoContas(colecaoContasHelper);
									break achou;
								}
							}
						} else {
							// colecao de contas
							gerarRelacaoDebitosHelper
									.setColecaoContas(colecaoContasHelper);
						}

						// somando com o total de contas
						totalDebito = totalDebito.add(totalContas);

						BigDecimal totalDebitoACobrar = new BigDecimal("0.00");

						Collection colecao = new ArrayList();

						if (tipoDebito != null && tipoDebito.length > 0) {
							achou: for (int i = 0; i < tipoDebito.length; i++) {
								if (new Integer(tipoDebito[i]).intValue() != ConstantesSistema.NUMERO_NAO_INFORMADO
										&& new Integer(tipoDebito[i])
												.equals(ConstantesSistema.DEBITO_A_COBRAR)) {
									// debitos a cobrar
									if (obterDebitoImovelOuClienteHelper
											.getColecaoDebitoACobrar() != null
											&& !obterDebitoImovelOuClienteHelper
													.getColecaoDebitoACobrar()
													.isEmpty()) {

										Iterator iteratorColecaoDebitoACobrar = obterDebitoImovelOuClienteHelper
												.getColecaoDebitoACobrar()
												.iterator();
										while (iteratorColecaoDebitoACobrar
												.hasNext()) {
											DebitoACobrar debitoACobrar = (DebitoACobrar) iteratorColecaoDebitoACobrar
													.next();

											totalDebitoACobrar = totalDebitoACobrar
													.add(debitoACobrar
															.getValorTotalComBonus());

											colecao.add(debitoACobrar);
										}

									}
									break achou;
								}
							}
						} else {
							// debitos a cobrar
							if (obterDebitoImovelOuClienteHelper
									.getColecaoDebitoACobrar() != null
									&& !obterDebitoImovelOuClienteHelper
											.getColecaoDebitoACobrar()
											.isEmpty()) {

								Iterator iteratorColecaoDebitoACobrar = obterDebitoImovelOuClienteHelper
										.getColecaoDebitoACobrar().iterator();
								while (iteratorColecaoDebitoACobrar.hasNext()) {
									DebitoACobrar debitoACobrar = (DebitoACobrar) iteratorColecaoDebitoACobrar
											.next();

									totalDebitoACobrar = totalDebitoACobrar
											.add(debitoACobrar.getValorTotalComBonus());

									colecao.add(debitoACobrar);
								}

							}
						}

						// colecao.addAll(obterDebitoImovelOuClienteHelper.getColecaoDebitoACobrar());

						// somando com o total de debitos a cobrar
						totalDebito = totalDebito.add(totalDebitoACobrar);

						BigDecimal totalCreditoARealizar = new BigDecimal(
								"0.00");

						if (tipoDebito != null && tipoDebito.length > 0) {
							achou: for (int i = 0; i < tipoDebito.length; i++) {
								if (new Integer(tipoDebito[i]).intValue() != ConstantesSistema.NUMERO_NAO_INFORMADO
										&& new Integer(tipoDebito[i])
												.equals(ConstantesSistema.CREDITO_A_REALIZAR)) {
									// creditos a realizar
									if (obterDebitoImovelOuClienteHelper
											.getColecaoCreditoARealizar() != null
											&& !obterDebitoImovelOuClienteHelper
													.getColecaoCreditoARealizar()
													.isEmpty()) {

										Iterator iteratorColecaoCreditoARealizar = obterDebitoImovelOuClienteHelper
												.getColecaoCreditoARealizar()
												.iterator();
										while (iteratorColecaoCreditoARealizar
												.hasNext()) {
											CreditoARealizar creditoARealizar = (CreditoARealizar) iteratorColecaoCreditoARealizar
													.next();

											totalCreditoARealizar = totalCreditoARealizar
													.add(creditoARealizar
															.getValorTotalComBonus());

											colecao.add(creditoARealizar);
										}

									}
									break achou;
								}
							}
						} else {
							// creditos a realizar
							if (obterDebitoImovelOuClienteHelper
									.getColecaoCreditoARealizar() != null
									&& !obterDebitoImovelOuClienteHelper
											.getColecaoCreditoARealizar()
											.isEmpty()) {

								Iterator iteratorColecaoCreditoARealizar = obterDebitoImovelOuClienteHelper
										.getColecaoCreditoARealizar()
										.iterator();
								while (iteratorColecaoCreditoARealizar
										.hasNext()) {
									CreditoARealizar creditoARealizar = (CreditoARealizar) iteratorColecaoCreditoARealizar
											.next();

									totalCreditoARealizar = totalCreditoARealizar
											.add(creditoARealizar
													.getValorTotalComBonus());

									colecao.add(creditoARealizar);
								}

							}
						}

						// colecao de debitos a cobrar e creditos a realizar
						gerarRelacaoDebitosHelper
								.setColecaoDebitosACobrarCreditoARealizar(colecao);

						if (tipoDebito != null && tipoDebito.length > 0) {
							achou: for (int i = 0; i < tipoDebito.length; i++) {
								if (new Integer(tipoDebito[i]).intValue() != ConstantesSistema.NUMERO_NAO_INFORMADO
										&& new Integer(tipoDebito[i])
												.equals(ConstantesSistema.CONTA)) {
									// colecao guias de pagamento
									gerarRelacaoDebitosHelper
											.setColecaoGuiasPagamento(obterDebitoImovelOuClienteHelper
													.getColecaoGuiasPagamentoValores());
									break achou;
								}
							}
						} else {
							// colecao guias de pagamento
							gerarRelacaoDebitosHelper
									.setColecaoGuiasPagamento(obterDebitoImovelOuClienteHelper
											.getColecaoGuiasPagamentoValores());
						}

						BigDecimal totalGuiasPagamentos = new BigDecimal("0.00");
						// guias de pagamentos
						if (tipoDebito != null && tipoDebito.length > 0) {
							achou: for (int i = 0; i < tipoDebito.length; i++) {
								if (new Integer(tipoDebito[i]).intValue() != ConstantesSistema.NUMERO_NAO_INFORMADO
										&& new Integer(tipoDebito[i])
												.equals(ConstantesSistema.GUIA_PAGAMENTO)) {
									if (obterDebitoImovelOuClienteHelper
											.getColecaoGuiasPagamentoValores() != null
											&& !obterDebitoImovelOuClienteHelper
													.getColecaoGuiasPagamentoValores()
													.isEmpty()) {

										Iterator iteratorColecaoGuiasPagamentos = obterDebitoImovelOuClienteHelper
												.getColecaoGuiasPagamentoValores()
												.iterator();
										while (iteratorColecaoGuiasPagamentos
												.hasNext()) {
											GuiaPagamentoValoresHelper guiaPagamentoValoresHelper = (GuiaPagamentoValoresHelper) iteratorColecaoGuiasPagamentos
													.next();

											totalGuiasPagamentos = totalGuiasPagamentos
													.add(guiaPagamentoValoresHelper
															.getGuiaPagamento()
															.getValorDebito());
											
											if (guiaPagamentoValoresHelper.getValorJurosMora() != null){
												
												totalJuros = totalJuros.add(guiaPagamentoValoresHelper.getValorJurosMora());
											}
											
											if (guiaPagamentoValoresHelper.getValorMulta() != null){
												
												totalMulta = totalMulta.add(guiaPagamentoValoresHelper.getValorMulta());
											}
											
											if (guiaPagamentoValoresHelper.getValorAtualizacaoMonetaria() != null){
												
												totalAtualizacaoMonetaria = totalAtualizacaoMonetaria.add(guiaPagamentoValoresHelper
												.getValorAtualizacaoMonetaria());
											}
										}
									}
									break achou;
								}
							}
						} else {
							if (obterDebitoImovelOuClienteHelper
									.getColecaoGuiasPagamentoValores() != null
									&& !obterDebitoImovelOuClienteHelper
											.getColecaoGuiasPagamentoValores()
											.isEmpty()) {

								Iterator iteratorColecaoGuiasPagamentos = obterDebitoImovelOuClienteHelper
										.getColecaoGuiasPagamentoValores()
										.iterator();
								while (iteratorColecaoGuiasPagamentos.hasNext()) {
									GuiaPagamentoValoresHelper guiaPagamentoValoresHelper = (GuiaPagamentoValoresHelper) iteratorColecaoGuiasPagamentos
											.next();

									totalGuiasPagamentos = totalGuiasPagamentos
											.add(guiaPagamentoValoresHelper
													.getGuiaPagamento()
													.getValorDebito());
									
									if (guiaPagamentoValoresHelper.getValorJurosMora() != null){
										
										totalJuros = totalJuros.add(guiaPagamentoValoresHelper.getValorJurosMora());
									}
									
									if (guiaPagamentoValoresHelper.getValorMulta() != null){
										
										totalMulta = totalMulta.add(guiaPagamentoValoresHelper.getValorMulta());
									}
									
									if (guiaPagamentoValoresHelper.getValorAtualizacaoMonetaria() != null){
										
										totalAtualizacaoMonetaria = totalAtualizacaoMonetaria.add(guiaPagamentoValoresHelper
										.getValorAtualizacaoMonetaria());
									}
								}
							}
						}

						// somando com o totoal de guias
						totalDebito = totalDebito.add(totalGuiasPagamentos);
						// somas todas as multas, juros, acrescimos
						totalAcrescimoImpontualidade = totalAcrescimoImpontualidade
								.add(totalJuros);
						totalAcrescimoImpontualidade = totalAcrescimoImpontualidade
								.add(totalMulta);
						totalAcrescimoImpontualidade = totalAcrescimoImpontualidade
								.add(totalAtualizacaoMonetaria);

						totalDebito = totalDebito.add(totalCreditoARealizar);
						BigDecimal totalGeralAtualizado = new BigDecimal("0.00");
						totalGeralAtualizado = totalGeralAtualizado
								.add(totalDebito);
						totalGeralAtualizado = totalGeralAtualizado
								.add(totalAcrescimoImpontualidade);
						totalGeralAtualizado = totalGeralAtualizado.setScale(2,
								BigDecimal.ROUND_HALF_DOWN);

						// adicionou os dados do imovel
						gerarRelacaoDebitosHelper
								.setGerarRelacaoDebitosImovelHelper(gerarRelacaoDebitosImovelHelper);
						// conta
						gerarRelacaoDebitosHelper.setTotalContas(totalContas);
						gerarRelacaoDebitosHelper
								.setTotalContaAtualizado(totalContasAtualizado);
						// credito
						gerarRelacaoDebitosHelper
								.setTotalCreditoARealizar(totalCreditoARealizar);
						// debito
						gerarRelacaoDebitosHelper
								.setTotalDebitosACobrar(totalDebitoACobrar);
						// guia
						gerarRelacaoDebitosHelper
								.setTotalGuiasPagamento(totalGuiasPagamentos);
						// acrescimo
						gerarRelacaoDebitosHelper.setTotalMulta(totalMulta);
						gerarRelacaoDebitosHelper.setTotalJuros(totalJuros);
						gerarRelacaoDebitosHelper
								.setTotalAtualizacaoMonetaria(totalAtualizacaoMonetaria);
						// total
						gerarRelacaoDebitosHelper
								.setTotalGeralAtualizado(totalGeralAtualizado);

						if ((valorDebitoInicial != null && !valorDebitoInicial
								.equals(""))
								&& (valorDebitoFinal != null && !valorDebitoFinal
										.equals(""))) {
							BigDecimal debitoInicial = Util
									.formatarMoedaRealparaBigDecimal(valorDebitoInicial);
							BigDecimal debitoFinal = Util
									.formatarMoedaRealparaBigDecimal(valorDebitoFinal);
							if (totalGeralAtualizado.compareTo(debitoInicial) != ConstantesSistema.INVALIDO_ID
									&& totalGeralAtualizado
											.compareTo(debitoFinal) != 1) {
								verificarValorDebito = true;
							} else {
								verificarValorDebito = false;
							}
						} else {
							verificarValorDebito = true;
						}
						
						
						
						
						
						
						
						
						
						
						
						
						
						
						
						
						
						
						
						
						
						
						
						
						
						
						
						
						
						
						
						////////////////////////////////////////
						// bean do relatorio
						RelatorioGerarRelacaoDebitosBean relatorioGerarRelacaoDebitosBean = null;

						// dados para o relatorio
//						if (colecaoDadosRelatorio != null && !colecaoDadosRelatorio.isEmpty()) {
//
//							Iterator iteratorColecaoDadosRelatorio = colecaoDadosRelatorio
//									.iterator();

						

//							while (iteratorColecaoDadosRelatorio.hasNext()) {
//								GerarRelacaoDebitosHelper gerarRelacaoDebitosHelper = (GerarRelacaoDebitosHelper) iteratorColecaoDadosRelatorio
//										.next();
//
//								GerarRelacaoDebitosImovelHelper gerarRelacaoDebitosImovelHelper = gerarRelacaoDebitosHelper
//										.getGerarRelacaoDebitosImovelHelper();

								if (idLocalidade == null) {
									idLocalidade = new Integer(gerarRelacaoDebitosImovelHelper
											.getIdLocalidade());
								} else {
									Integer idLocalAtual = new Integer(
											gerarRelacaoDebitosImovelHelper.getIdLocalidade());
									if (!idLocalidade.equals(idLocalAtual)) {
										countContasLocalidade = 0;
										countImovelLocalidade = 0;
										countDebitosLocalidade = 0;
										totalDebitosLocalidade = new BigDecimal("0.00");
										totalContasLocalidade = new BigDecimal("0.00");
										totalGuiasPagamentoLocalidade = new BigDecimal("0.00");
										totalDebitoACobrarLocalidade = new BigDecimal("0.00");
										totalAcrescimosLocalidade = new BigDecimal("0.00");
										idLocalidade = idLocalAtual;
									}
								}

								if (idGerencia == null) {
									idGerencia = new Integer(gerarRelacaoDebitosImovelHelper
											.getIdGerenciaRegional());
								} else {
									Integer idGerenciaAtual = new Integer(
											gerarRelacaoDebitosImovelHelper
													.getIdGerenciaRegional());
									if (!idGerencia.equals(idGerenciaAtual)) {
										countContasGerencia = 0;
										countImovelGerencia = 0;
										countDebitosGerencia = 0;
										totalDebitosGerencia = new BigDecimal("0.00");
										totalContasGerencia = new BigDecimal("0.00");
										totalGuiasPagamentoGerencia = new BigDecimal("0.00");
										totalDebitoACobrarGerencia = new BigDecimal("0.00");
										totalAcrescimosGerencia = new BigDecimal("0.00");
										idGerencia = idGerenciaAtual;

									}
								}

								countImovelLocalidade++;
								countImovelGerencia++;
								countImovelTotal++;

								if (gerarRelacaoDebitosHelper.getTotalGeralAtualizado() != null) {

									totalDebitosLocalidade = totalDebitosLocalidade
											.add(gerarRelacaoDebitosHelper
													.getTotalGeralAtualizado());
									totalDebitosGerencia = totalDebitosGerencia
											.add(gerarRelacaoDebitosHelper
													.getTotalGeralAtualizado());
									totalDebitosTotal = totalDebitosTotal
											.add(gerarRelacaoDebitosHelper
													.getTotalGeralAtualizado());
								}

								Collection colecaoRelatorioGerarRelacaoDebitosGuiasPagamentoBean = null;

								colecaoRelatorioGerarRelacaoDebitosGuiasPagamentoBean = new ArrayList();

								// carregar os dados das guias de pagamento
								if (gerarRelacaoDebitosHelper.getColecaoGuiasPagamento() != null
										&& !gerarRelacaoDebitosHelper
												.getColecaoGuiasPagamento().isEmpty()) {

									Iterator iteratorColecaoGuiasPagamento = gerarRelacaoDebitosHelper
											.getColecaoGuiasPagamento().iterator();

									RelatorioGerarRelacaoDebitosGuiasPagamentoBean relatorioGerarRelacaoDebitosGuiasPagamentoBean = null;
									RelatorioGerarRelacaoDebitosGuiasPagamentoTotalBean relatorioGerarRelacaoDebitosGuiasPagamentoTotalBean = null;

									Collection colecaoRelatorioGerarRelacaoDebitosGuiaPagamentoTotal = null;

									while (iteratorColecaoGuiasPagamento.hasNext()) {

										GuiaPagamentoValoresHelper guiaPagamentoValoresHelper = (GuiaPagamentoValoresHelper) iteratorColecaoGuiasPagamento
												.next();

										colecaoRelatorioGerarRelacaoDebitosGuiaPagamentoTotal = new ArrayList();
										relatorioGerarRelacaoDebitosGuiasPagamentoTotalBean = new RelatorioGerarRelacaoDebitosGuiasPagamentoTotalBean();
										// total da guia de pagamento
										relatorioGerarRelacaoDebitosGuiasPagamentoTotalBean
												.setGuiaValorTotal(Util
														.formatarMoedaReal(gerarRelacaoDebitosHelper
																.getTotalGuiasPagamento()));
										colecaoRelatorioGerarRelacaoDebitosGuiaPagamentoTotal
												.add(relatorioGerarRelacaoDebitosGuiasPagamentoTotalBean);

										// dados da guia de pagamento
										relatorioGerarRelacaoDebitosGuiasPagamentoBean = new RelatorioGerarRelacaoDebitosGuiasPagamentoBean(
												Util
														.formatarData(guiaPagamentoValoresHelper
																.getGuiaPagamento()
																.getDataVencimento()),
												Util
														.formatarMoedaReal(guiaPagamentoValoresHelper
																.getGuiaPagamento()
																.getValorDebito()),
												colecaoRelatorioGerarRelacaoDebitosGuiaPagamentoTotal);

										colecaoRelatorioGerarRelacaoDebitosGuiasPagamentoBean
												.add(relatorioGerarRelacaoDebitosGuiasPagamentoBean);
									}// fim do while de guias
								}// fim da condição das guias

								totalContasLocalidade = totalContasLocalidade
										.add(gerarRelacaoDebitosHelper.getTotalContas());
								totalGuiasPagamentoLocalidade = totalGuiasPagamentoLocalidade
										.add(gerarRelacaoDebitosHelper.getTotalGuiasPagamento());
								totalDebitoACobrarLocalidade = totalDebitoACobrarLocalidade
										.add(gerarRelacaoDebitosHelper.getTotalDebitosACobrar());
								totalAcrescimosLocalidade = totalAcrescimosLocalidade.add(
										gerarRelacaoDebitosHelper.getTotalMulta()).add(
										gerarRelacaoDebitosHelper.getTotalJuros()).add(
										gerarRelacaoDebitosHelper
												.getTotalAtualizacaoMonetaria());

								totalContasGerencia = totalContasGerencia
										.add(gerarRelacaoDebitosHelper.getTotalContas());
								totalGuiasPagamentoGerencia = totalGuiasPagamentoGerencia
										.add(gerarRelacaoDebitosHelper.getTotalGuiasPagamento());
								totalDebitoACobrarGerencia = totalDebitoACobrarGerencia
										.add(gerarRelacaoDebitosHelper.getTotalDebitosACobrar());
								totalAcrescimosGerencia = totalAcrescimosGerencia.add(
										gerarRelacaoDebitosHelper.getTotalMulta()).add(
										gerarRelacaoDebitosHelper.getTotalJuros()).add(
										gerarRelacaoDebitosHelper
												.getTotalAtualizacaoMonetaria());

								totalContasTotal = totalContasTotal
										.add(gerarRelacaoDebitosHelper.getTotalContas());
								totalGuiasPagamentoTotal = totalGuiasPagamentoTotal
										.add(gerarRelacaoDebitosHelper.getTotalGuiasPagamento());
								totalDebitoACobrarTotal = totalDebitoACobrarTotal
										.add(gerarRelacaoDebitosHelper.getTotalDebitosACobrar());
								totalAcrescimosTotal = totalAcrescimosTotal.add(
										gerarRelacaoDebitosHelper.getTotalMulta()).add(
										gerarRelacaoDebitosHelper.getTotalJuros()).add(
										gerarRelacaoDebitosHelper
												.getTotalAtualizacaoMonetaria());

								BigDecimal contaDacGuia = gerarRelacaoDebitosHelper
										.getTotalContas()
										.add(
												gerarRelacaoDebitosHelper
														.getTotalDebitosACobrar()
														.add(
																gerarRelacaoDebitosHelper
																		.getTotalGuiasPagamento()));
								BigDecimal acrescimo = gerarRelacaoDebitosHelper
										.getTotalMulta()
										.add(
												gerarRelacaoDebitosHelper
														.getTotalJuros()
														.add(
																gerarRelacaoDebitosHelper
																		.getTotalAtualizacaoMonetaria()));

								// carrega os dados dos valores totais do imovel
								RelatorioGerarRelacaoDebitosTotaisImovelBean relatorioGerarRelacaoDebitosTotaisImovelBean = new RelatorioGerarRelacaoDebitosTotaisImovelBean(
										Util.formatarMoedaReal(gerarRelacaoDebitosHelper
												.getTotalContas()), Util
												.formatarMoedaReal(gerarRelacaoDebitosHelper
														.getTotalDebitosACobrar()), Util
												.formatarMoedaReal(contaDacGuia),// Util.formatarMoedaReal(gerarRelacaoDebitosHelper.getTotalContas()),
										Util.formatarMoedaReal(gerarRelacaoDebitosHelper
												.getTotalGuiasPagamento()), Util
												.formatarMoedaReal(acrescimo),// Util.formatarMoedaReal(gerarRelacaoDebitosHelper.getTotalMulta()),
										Util.formatarMoedaReal(gerarRelacaoDebitosHelper
												.getTotalJuros()), Util
												.formatarMoedaReal(gerarRelacaoDebitosHelper
														.getTotalAtualizacaoMonetaria()), Util
												.formatarMoedaReal(gerarRelacaoDebitosHelper
														.getTotalGeralAtualizado()),
										colecaoRelatorioGerarRelacaoDebitosGuiasPagamentoBean);

								// adiciona os dados dos valores totais do imovel
								Collection colecaoRelatorioGerarRelacaoDebitosTotaisImovelBean = new ArrayList();
								colecaoRelatorioGerarRelacaoDebitosTotaisImovelBean
										.add(relatorioGerarRelacaoDebitosTotaisImovelBean);

								// colecao dos creditos a realizar
								Collection colecaoRelatorioGerarRelacaoDebitosTipoDebitoCreditoBean = null;

								colecaoRelatorioGerarRelacaoDebitosTipoDebitoCreditoBean = new ArrayList();

								// carrega os dados de debito a cobrar e credito a realizar
								if (gerarRelacaoDebitosHelper
										.getColecaoDebitosACobrarCreditoARealizar() != null
										&& !gerarRelacaoDebitosHelper
												.getColecaoDebitosACobrarCreditoARealizar()
												.isEmpty()) {

									RelatorioGerarRelacaoDebitosTipoDebitoCreditoBean relatorioGerarRelacaoDebitosTipoDebitoCreditoBean = null;

									Iterator iteratorColecaoDebitosACobrarCreditoARealizar = gerarRelacaoDebitosHelper
											.getColecaoDebitosACobrarCreditoARealizar()
											.iterator();
									while (iteratorColecaoDebitosACobrarCreditoARealizar
											.hasNext()) {

										countDebitosLocalidade++;
										countDebitosGerencia++;
										countDebitosTotal++;

										relatorioGerarRelacaoDebitosTipoDebitoCreditoBean = new RelatorioGerarRelacaoDebitosTipoDebitoCreditoBean();

										Object object = iteratorColecaoDebitosACobrarCreditoARealizar
												.next();
										if (object instanceof DebitoACobrar) {
											DebitoACobrar debitoACobrar = (DebitoACobrar) object;

											relatorioGerarRelacaoDebitosTipoDebitoCreditoBean
													.setDebitoTipoDebito(debitoACobrar
															.getDebitoTipo().getDescricao());
											relatorioGerarRelacaoDebitosTipoDebitoCreditoBean
													.setDebitoValor(Util
															.formatarMoedaReal(debitoACobrar
																	.getValorTotalComBonus()));

										} else if (object instanceof CreditoARealizar) {
											CreditoARealizar creditoARealizar = (CreditoARealizar) object;

											relatorioGerarRelacaoDebitosTipoDebitoCreditoBean
													.setDebitoTipoDebito(creditoARealizar
															.getCreditoTipo().getDescricao());
											relatorioGerarRelacaoDebitosTipoDebitoCreditoBean
													.setDebitoValor(Util
															.formatarMoedaReal(creditoARealizar
																	.getValorTotalComBonus()));

										}

										colecaoRelatorioGerarRelacaoDebitosTipoDebitoCreditoBean
												.add(relatorioGerarRelacaoDebitosTipoDebitoCreditoBean);
									}// fim do whilede creditos
								}// fim if decreditos

								// colecao de contas
								Collection colecaoRelatorioGerarRelacaoDebitosContasBean = null;

								colecaoRelatorioGerarRelacaoDebitosContasBean = new ArrayList();

								// carregar a colecao de contas
								if (gerarRelacaoDebitosHelper.getColecaoContas() != null
										&& !gerarRelacaoDebitosHelper.getColecaoContas()
												.isEmpty()) {

									RelatorioGerarRelacaoDebitosContasBean relatorioGerarRelacaoDebitosContasBean = null;

									Iterator iteratorColecaoContas = gerarRelacaoDebitosHelper
											.getColecaoContas().iterator();

									RelatorioGerarRelacaoDebitosContasTotalBean relatorioGerarRelacaoDebitosContasTotalBean = null;
									Collection colecaoRelatorioGerarRelacaoDebitosContasTotalBean = null;

									while (iteratorColecaoContas.hasNext()) {
										ContaValoresHelper contaValoresHelper = (ContaValoresHelper) iteratorColecaoContas
												.next();

										countContasLocalidade++;
										countContasGerencia++;
										countContasTotal++;

										String revisao = "";
										if (contaValoresHelper.getConta()
												.getContaMotivoRevisao() != null
												&& contaValoresHelper.getConta()
														.getContaMotivoRevisao().getId() != null) {
											revisao = new String("R");
										}

										String codigoBarras = "";

										String anoMesFormatado = "";
										String anoMesRecebido = ""
												+ contaValoresHelper.getConta().getReferencia();
										if (anoMesRecebido.length() < 6) {
											anoMesFormatado = anoMesRecebido;
										} else {
											String mes = anoMesRecebido.substring(4, 6);
											String ano = anoMesRecebido.substring(0, 4);
											anoMesFormatado = mes + "" + ano;
										}
										String representacaoNumericaCodBarraFormatada = "";

										if (indicadorCodigoBarra.equals("1")) {
											codigoBarras = getControladorArrecadacao()
													.obterRepresentacaoNumericaCodigoBarra(
															new Integer(3),
															new BigDecimal(contaValoresHelper
																	.getConta()
																	.getValorTotalConta()),
															new Integer(
																	gerarRelacaoDebitosHelper
																			.getGerarRelacaoDebitosImovelHelper()
																			.getIdLocalidade()),
															new Integer(
																	gerarRelacaoDebitosHelper
																			.getGerarRelacaoDebitosImovelHelper()
																			.getIdImovel()),
															anoMesFormatado,
															new Integer(
																	new Short(
																			contaValoresHelper
																					.getConta()
																					.getDigitoVerificadorConta())
																			.toString()), null,
															null, null, null, null, null,null);

											// Formata a representação númerica do código de
											// barras
											representacaoNumericaCodBarraFormatada = codigoBarras
													.substring(0, 11)
													+ "-"
													+ codigoBarras.substring(11, 12)
													+ " "
													+ codigoBarras.substring(12, 23)
													+ "-"
													+ codigoBarras.substring(23, 24)
													+ " "
													+ codigoBarras.substring(24, 35)
													+ "-"
													+ codigoBarras.substring(35, 36)
													+ " "
													+ codigoBarras.substring(36, 47)
													+ "-" + codigoBarras.substring(47, 48);
										}
										colecaoRelatorioGerarRelacaoDebitosContasTotalBean = new ArrayList();

										// dados do total da conta
										relatorioGerarRelacaoDebitosContasTotalBean = new RelatorioGerarRelacaoDebitosContasTotalBean(
												Util
														.formatarMoedaReal(gerarRelacaoDebitosHelper
																.getTotalContas()),
												Util
														.formatarMoedaReal(gerarRelacaoDebitosHelper
																.getTotalContaAtualizado()));

										colecaoRelatorioGerarRelacaoDebitosContasTotalBean
												.add(relatorioGerarRelacaoDebitosContasTotalBean);

										relatorioGerarRelacaoDebitosContasBean = new RelatorioGerarRelacaoDebitosContasBean(
												revisao,
												Util
														.formatarAnoMesParaMesAno(contaValoresHelper
																.getConta().getReferencia())
														+ "-"
														+ contaValoresHelper.getConta()
																.getDigitoVerificadorConta(),
												Util.formatarData(contaValoresHelper.getConta()
														.getDataVencimentoConta()),
												Util.formatarMoedaReal(new BigDecimal(
														contaValoresHelper.getConta()
																.getValorTotalConta())),
												representacaoNumericaCodBarraFormatada,
												colecaoRelatorioGerarRelacaoDebitosContasTotalBean);

										colecaoRelatorioGerarRelacaoDebitosContasBean
												.add(relatorioGerarRelacaoDebitosContasBean);

									}// fim while de contas

								}// fim if de contas

								String percentualEsgoto = "";
								if (gerarRelacaoDebitosImovelHelper.getPercentualEsgoto() != null) {
									percentualEsgoto = percentualEsgoto
											+ gerarRelacaoDebitosImovelHelper
													.getPercentualEsgoto() + " %";

								}
								relatorioGerarRelacaoDebitosBean = new RelatorioGerarRelacaoDebitosBean(
										gerarRelacaoDebitosImovelHelper.getIdImovel(),
										gerarRelacaoDebitosImovelHelper.getInscricaoImovel(),
										gerarRelacaoDebitosImovelHelper.getNomeClienteUsuario(),
										gerarRelacaoDebitosImovelHelper
												.getNomeClienteResponsavel(),
										gerarRelacaoDebitosImovelHelper.getEndereco(),
										gerarRelacaoDebitosImovelHelper
												.getQuantidadeEconomias(),
										gerarRelacaoDebitosImovelHelper.getCategoriaPrincipal(),
										gerarRelacaoDebitosImovelHelper
												.getSubcategoriaPrincipal(),
										gerarRelacaoDebitosImovelHelper.getSituacaoAgua(),
										gerarRelacaoDebitosImovelHelper.getSituacaoEsgoto(),
										percentualEsgoto,
										gerarRelacaoDebitosImovelHelper.getDataCorte(),
										gerarRelacaoDebitosImovelHelper.getConsumoMediaImovel(),
										gerarRelacaoDebitosImovelHelper
												.getNomeGerenciaRegional()
												+ " - "
												+ gerarRelacaoDebitosImovelHelper
														.getGerenciaRegional(),
										gerarRelacaoDebitosImovelHelper.getIdLocalidade()
												+ " - "
												+ gerarRelacaoDebitosImovelHelper
														.getDescricaoLocalidade(),
										gerarRelacaoDebitosImovelHelper.getRota(),
										gerarRelacaoDebitosImovelHelper.getSequencialRota(),
										"" + countContasLocalidade,
										"" + countImovelLocalidade,
										"" + countDebitosLocalidade,
										"" + countContasGerencia,
										"" + countImovelGerencia,
										"" + countDebitosGerencia,
										"" + countContasTotal,
										"" + countImovelTotal,
										"" + countDebitosTotal,
										Util.formatarMoedaReal(totalDebitosLocalidade),
										Util.formatarMoedaReal(totalDebitosGerencia),
										Util.formatarMoedaReal(totalDebitosTotal),
										colecaoRelatorioGerarRelacaoDebitosContasBean,
										colecaoRelatorioGerarRelacaoDebitosTipoDebitoCreditoBean,
										colecaoRelatorioGerarRelacaoDebitosTotaisImovelBean,
										colecaoRelatorioGerarRelacaoDebitosGuiasPagamentoBean,
										totalContasLocalidade, totalGuiasPagamentoLocalidade,
										totalDebitoACobrarLocalidade,
										totalAcrescimosLocalidade, totalContasGerencia,
										totalGuiasPagamentoGerencia,
										totalDebitoACobrarGerencia, totalAcrescimosGerencia,
										totalContasTotal, totalGuiasPagamentoTotal,
										totalDebitoACobrarTotal, totalAcrescimosTotal);

								// add item da colecao
//								relatorioBeans.add(relatorioGerarRelacaoDebitosBean);
//							}
//						}
						/////////////////
						
						
						
						
						
						
						
						
						
						
						
						
						
						
						
						
						
						
						
						
						
						
						
						
						
						
						
						
						
						
						
						
						
						
						
						
						
						
						
						
						
						
						
						

						if (verificarValorDebito && verificarQtdConta) {
							numeroImovel = numeroImovel + 1;
							// adiciona o helper
							relatorioBeans
									.add(relatorioGerarRelacaoDebitosBean);
						} else {
							gerarRelacaoDebitosHelper = null;
						}
System.out.println("terminou imovel" + count++);
					}// fim do if de pesquisasr debitos
				}// fim while
			} else {// fim if
				flagFimPesquisa = true;
			}
			System.out.println("------------------------------------TERMINOU DE MONTAR O HELPER 500 IMOVEIS A PARTIR"+ quantidadeImovelInicio +" -----------------------------------");

		}
		return relatorioBeans;
	}

	/**
	 * Retorna o valor de controladorEndereco
	 * 
	 * @return O valor de controladorEndereco
	 */
	protected ControladorEnderecoLocal getControladorEndereco() {
		ControladorEnderecoLocalHome localHome = null;
		ControladorEnderecoLocal local = null;

		// pega a instância do ServiceLocator.

		ServiceLocator locator = null;

		try {
			locator = ServiceLocator.getInstancia();

			localHome = (ControladorEnderecoLocalHome) locator
					.getLocalHome(ConstantesJNDI.CONTROLADOR_ENDERECO_SEJB);
			// guarda a referencia de um objeto capaz de fazer chamadas à
			// objetos remotamente
			local = localHome.create();

			return local;
		} catch (CreateException e) {
			throw new SistemaException(e);
		} catch (ServiceLocatorException e) {
			throw new SistemaException(e);
		}
	}

	/**
	 * 
	 * Este caso de uso permite a emissão de um ou mais documentos de cobrança
	 * 
	 * [UC0349] Emitir Documento de Cobrança
	 * 
	 * @author Raphael Rossiter
	 * @data 26/05/2006
	 * 
	 * @param
	 * @return void
	 */
	public void emitirDocumentoCobranca(
			CobrancaAcaoAtividadeCronograma cobrancaAcaoAtividadeCronograma,
			CobrancaAcaoAtividadeComando cobrancaAcaoAtividadeComando,
			Date dataAtualPesquisa, CobrancaAcao acaoCobranca,
			CobrancaGrupo grupoCobranca, CobrancaCriterio cobrancaCriterio)
			throws ControladorException {

		boolean flagFimPesquisa = false;
		final int quantidadeCobrancaDocumento = 1000;
		int quantidadeCobrancaDocumentoInicio = 0;

		StringBuilder cobrancaDocumentoTxt = new StringBuilder();
		int sequencialImpressao = 0;

		Collection colecaoCobrancaDocumento = null;

		Map<Integer, Integer> mapAtualizaSequencial = null;

		Integer idCronogramaAtividadeAcaoCobranca = null;
		Integer idComandoAtividadeAcaoCobranca = null;
		Integer idAcaoCobranca = null;
		if (cobrancaAcaoAtividadeCronograma != null
				&& cobrancaAcaoAtividadeCronograma.getId() != null) {
			idCronogramaAtividadeAcaoCobranca = cobrancaAcaoAtividadeCronograma
					.getId();
		}
		if (cobrancaAcaoAtividadeComando != null
				&& cobrancaAcaoAtividadeComando.getId() != null) {
			idComandoAtividadeAcaoCobranca = cobrancaAcaoAtividadeComando
					.getId();
		}
		if (acaoCobranca != null && acaoCobranca.getId() != null) {
			idAcaoCobranca = acaoCobranca.getId();
		}
		
		// Definindo arquivo para escrita
		Date dataAtual = new Date();
		String nomeZip = null;
		if (idAcaoCobranca.equals(CobrancaAcao.AVISO_CORTE)) {		
			if (idCronogramaAtividadeAcaoCobranca != null) {
				nomeZip = "AVISO_CORTE_GRUPO_" + grupoCobranca.getId() + "_"
						+ Util.formatarData(dataAtual) + Util.formatarHoraSemDataSemDoisPontos(dataAtual);
				nomeZip = nomeZip.replace("/", "_");
	
			} else {
				String descricaoAbrevDocumentoTipo = "";
				if (acaoCobranca != null && acaoCobranca.getDocumentoTipo() != null) {
					descricaoAbrevDocumentoTipo = acaoCobranca.getDocumentoTipo()
							.getDescricaoAbreviado();
				}
				String tituloComandoEventual = cobrancaAcaoAtividadeComando
						.getDescricaoTitulo();
	
				nomeZip = descricaoAbrevDocumentoTipo + " " + tituloComandoEventual
						+ " " + Util.formatarData(dataAtual) + Util.formatarHoraSemDataSemDoisPontos(dataAtual);
				nomeZip = nomeZip.replace("/", "_");
				nomeZip = nomeZip.replace(" ", "_");
	
			}
		} else if (idAcaoCobranca.equals(CobrancaAcao.AVISO_CORTE_A_REVELIA)){
			if (idCronogramaAtividadeAcaoCobranca != null) {
				nomeZip = "AVISO_CORTE_A_REVELIA_GRUPO_" + grupoCobranca.getId() + "_"
						+ Util.formatarData(dataAtual) + Util.formatarHoraSemDataSemDoisPontos(dataAtual);
				nomeZip = nomeZip.replace("/", "_");
	
			} else {
				String descricaoAbrevDocumentoTipo = "";
				if (acaoCobranca != null && acaoCobranca.getDocumentoTipo() != null) {
					descricaoAbrevDocumentoTipo = acaoCobranca.getDocumentoTipo()
							.getDescricaoAbreviado();
				}
				String tituloComandoEventual = cobrancaAcaoAtividadeComando
						.getDescricaoTitulo();
	
				nomeZip = descricaoAbrevDocumentoTipo + " " + tituloComandoEventual
						+ " " + Util.formatarData(dataAtual) + Util.formatarHoraSemDataSemDoisPontos(dataAtual);
				nomeZip = nomeZip.replace("/", "_");
				nomeZip = nomeZip.replace(" ", "_");
	
			}
		}
		
		BufferedWriter out = null;
		ZipOutputStream zos = null;
		File leitura = null;
		
		// pegar o arquivo, zipar pasta e arquivo e escrever no stream
		try {

			System.out.println("***************************************");
			System.out.println("INICO DA CRIACAO DO ARQUIVO");
			System.out.println("***************************************");

			// criar o arquivo zip
			File compactado = new File(nomeZip + ".zip"); // nomeZip
			zos = new ZipOutputStream(new FileOutputStream(
					compactado));

			leitura = new File(nomeZip + ".txt");
			out = new BufferedWriter(new OutputStreamWriter(
					new FileOutputStream(leitura.getAbsolutePath())));
			
		} catch (IOException e) {
			e.printStackTrace();
			throw new ControladorException("erro.sistema", e);
		} catch (Exception e) {
			e.printStackTrace();
			throw new ControladorException("erro.sistema", e);
		}
		

		while (!flagFimPesquisa) {
			// map que armazena o sequencial e o numero da
			// conta para no final atualizar todos os
			// sequencias
			mapAtualizaSequencial = new HashMap();

			try {

				System.out.println("***************************************");
				System.out.println("ENTROU NO AVISO DE CORTE");
				System.out.println("***************************************");
				colecaoCobrancaDocumento = repositorioCobranca
						.pesquisarCobrancaDocumentoParaEmitir(
								idCronogramaAtividadeAcaoCobranca,
								idComandoAtividadeAcaoCobranca,
								dataAtualPesquisa, idAcaoCobranca,
								quantidadeCobrancaDocumentoInicio);
				System.out.println("***************************************");
				System.out.println("QTD DE COBRANCA DOCUMENTO:"
						+ colecaoCobrancaDocumento.size());
				System.out.println("***************************************");
			} catch (ErroRepositorioException ex) {
				ex.printStackTrace();
				throw new ControladorException("erro.sistema", ex);
			}

			if (colecaoCobrancaDocumento != null
					&& !colecaoCobrancaDocumento.isEmpty()) {

				System.out.println("***************************************");
				System.out.println("QUANTIDADE COBRANÇA:"
						+ colecaoCobrancaDocumento.size());
				System.out.println("***************************************");

				if (colecaoCobrancaDocumento.size() < quantidadeCobrancaDocumento) {
					flagFimPesquisa = true;
				} else {
					quantidadeCobrancaDocumentoInicio = quantidadeCobrancaDocumentoInicio + 1000;
				}

				int metadeColecao = 0;
				if (colecaoCobrancaDocumento.size() % 2 == 0) {
					metadeColecao = colecaoCobrancaDocumento.size() / 2;
				} else {
					metadeColecao = (colecaoCobrancaDocumento.size() / 2) + 1;
				}

				Map<Integer, Map<Object, Object>> mapCobrancaDocumentoOrdenada = dividirColecao(colecaoCobrancaDocumento);

				if (mapCobrancaDocumentoOrdenada != null) {
					int countOrdem = 0;

					while (countOrdem < mapCobrancaDocumentoOrdenada.size()) {
						Map<Object, Object> mapCobrancaoDocumentoDivididas = mapCobrancaDocumentoOrdenada
								.get(countOrdem);

						Iterator iteratorCobrancaDocumento = mapCobrancaoDocumentoDivididas
								.keySet().iterator();

						while (iteratorCobrancaDocumento.hasNext()) {

							CobrancaDocumento cobrancaDocumento = null;

							int situacao = 0;

							cobrancaDocumento = (CobrancaDocumento) iteratorCobrancaDocumento
									.next();

							String nomeCliente = null;
							Collection colecaoCobrancaDocumentoItem = null;
							Iterator iteratorColecaoCobrancaDocumento = colecaoCobrancaDocumento
									.iterator();

							/*
							 * Estes objetos auxiliarão na formatação da
							 * inscrição que será composta por informações do
							 * documento de cobrança e do imóvel a ele associado
							 */
							Imovel inscricao = null;
							SetorComercial setorComercialInscricao = null;
							Quadra quadraInscricao = null;

							/*
							 * Objeto que será utilizado para armazenar as
							 * informações do documento de cobrança de acordo
							 * com o layout definido no caso de uso
							 */

							sequencialImpressao++;

							while (situacao < 2) {
								if (situacao == 0) {
									situacao = 1;
									sequencialImpressao = atualizaSequencial(
											sequencialImpressao, situacao,
											metadeColecao);

								} else {
									cobrancaDocumento = (CobrancaDocumento) mapCobrancaoDocumentoDivididas
											.get(cobrancaDocumento);
									situacao = 2;
									sequencialImpressao = atualizaSequencial(
											sequencialImpressao, situacao,
											metadeColecao);
								}

								if (cobrancaDocumento != null) {

									try {

										nomeCliente = this.repositorioClienteImovel
												.pesquisarNomeClientePorImovel(cobrancaDocumento
														.getImovel().getId());

										colecaoCobrancaDocumentoItem = this.repositorioCobranca
												.selecionarCobrancaDocumentoItemReferenteConta(cobrancaDocumento);

									} catch (ErroRepositorioException ex) {
										ex.printStackTrace();
										throw new ControladorException(
												"erro.sistema", ex);
									}

									if (colecaoCobrancaDocumentoItem != null
											&& !colecaoCobrancaDocumentoItem
													.isEmpty()) {

										// Início do processo de geração do
										// arquivo
										// txt

										// LINHA 01
										// ==================================

										/*
										 * Canal ("1") Fonte ("1")
										 */
										cobrancaDocumentoTxt.append("1");
										cobrancaDocumentoTxt.append("1");
										cobrancaDocumentoTxt.append(" ");
										
										// Nome da Localidade
										cobrancaDocumentoTxt
												.append(Util
														.completaString(
																cobrancaDocumento
																		.getLocalidade()
																		.getDescricao(),
																20));
										
										if (cobrancaAcaoAtividadeCronograma != null) {
											String ciclo = " CICLO:" + Util.formatarAnoMesParaMesAno(
													cobrancaAcaoAtividadeCronograma.getCobrancaAcaoCronograma()
													.getCobrancaGrupoCronogramaMes().getAnoMesReferencia());
											
											cobrancaDocumentoTxt.append(ciclo);
											cobrancaDocumentoTxt.append(Util.completaString("", 46));
										}else {
											cobrancaDocumentoTxt.append(Util.completaString("", 62));
										}

										cobrancaDocumentoTxt.append(System
												.getProperty("line.separator"));

										// LINHA 02
										// ==================================

										/*
										 * Canal ("-") Fonte ("1")
										 */
										cobrancaDocumentoTxt.append("-");
										cobrancaDocumentoTxt.append("1");
										cobrancaDocumentoTxt.append(" ");

										// Inscrição
										quadraInscricao = new Quadra();
										setorComercialInscricao = new SetorComercial();
										inscricao = new Imovel();

										quadraInscricao
												.setNumeroQuadra(cobrancaDocumento
														.getNumeroQuadra());
										setorComercialInscricao
												.setCodigo(cobrancaDocumento
														.getCodigoSetorComercial());
										inscricao
												.setLocalidade(cobrancaDocumento
														.getLocalidade());
										inscricao
												.setSetorComercial(setorComercialInscricao);
										inscricao.setQuadra(quadraInscricao);
										inscricao.setLote(cobrancaDocumento
												.getImovel().getLote());
										inscricao.setSubLote(cobrancaDocumento
												.getImovel().getSubLote());

										cobrancaDocumentoTxt
												.append(Util
														.completaString(
																inscricao
																		.getInscricaoFormatada(),
																20));

										cobrancaDocumentoTxt.append(Util
												.completaString("", 14));

										// Nome do Cliente
										cobrancaDocumentoTxt
												.append(Util.completaString(
														nomeCliente, 50));

										cobrancaDocumentoTxt.append(Util
												.completaString("", 65));

										cobrancaDocumentoTxt.append(System
												.getProperty("line.separator"));

										// LINHA 03
										// ==================================

										/*
										 * Canal ("+") Fonte ("2")
										 */
										cobrancaDocumentoTxt.append("+");
										cobrancaDocumentoTxt.append("2");
										cobrancaDocumentoTxt.append(Util
												.completaString("", 69));

										// Matrícula do imóvel
										String matriculaImovelFormatada = Util
												.retornaMatriculaImovelFormatada(cobrancaDocumento
														.getImovel().getId());

										cobrancaDocumentoTxt
												.append(Util
														.completaStringComEspacoAEsquerda(
																matriculaImovelFormatada,
																10));

										cobrancaDocumentoTxt.append(Util
												.completaString("", 71));

										cobrancaDocumentoTxt.append(System
												.getProperty("line.separator"));

										// LINHA 04
										// ==================================

										/*
										 * Canal ("-") Fonte ("1")
										 */
										cobrancaDocumentoTxt.append("-");
										cobrancaDocumentoTxt.append("1");
										cobrancaDocumentoTxt.append(" ");

										// Endereço Formatado
										cobrancaDocumentoTxt
												.append(Util
														.completaString(
																cobrancaDocumento
																		.getImovel()
																		.getEnderecoFormatadoAbreviado(),
																72));
										cobrancaDocumentoTxt.append(Util
												.completaString("", 77));

										cobrancaDocumentoTxt.append(System
												.getProperty("line.separator"));

										// LINHA 05
										// ==================================

										/*
										 * Canal ("+") Fonte ("2")
										 */
										cobrancaDocumentoTxt.append("+");
										cobrancaDocumentoTxt.append("2");
										cobrancaDocumentoTxt.append(Util
												.completaString("", 66));

										// Grupo de Cobrança
										cobrancaDocumentoTxt
												.append(Util
														.completaStringComEspacoAEsquerda(
																cobrancaDocumento
																		.getQuadra()
																		.getRota()
																		.getCobrancaGrupo()
																		.getId()
																		.toString(),
																2));

										cobrancaDocumentoTxt.append(" ");

										// Sequencial do Documento de Cobrança
										cobrancaDocumentoTxt
												.append(Util
														.completaStringComEspacoAEsquerda(
																""
																		+ cobrancaDocumento
																				.getNumeroSequenciaDocumento(),
																9));

										cobrancaDocumentoTxt.append(Util
												.completaString("", 72));

										cobrancaDocumentoTxt.append(System
												.getProperty("line.separator"));

										// LINHA 06
										// ==================================

										/*
										 * Canal ("-") Fonte ("1")
										 */
										cobrancaDocumentoTxt.append("-");
										cobrancaDocumentoTxt.append("1");
										cobrancaDocumentoTxt.append(" ");

										// Código da situação da ligação de água
										cobrancaDocumentoTxt
												.append(Util
														.completaStringComEspacoAEsquerda(
																cobrancaDocumento
																		.getImovel()
																		.getLigacaoAguaSituacao()
																		.getId()
																		.toString(),
																1));

										cobrancaDocumentoTxt.append(Util
												.completaString("", 2));

										// Código da situação da ligação de
										// esgoto
										cobrancaDocumentoTxt
												.append(Util
														.completaStringComEspacoAEsquerda(
																cobrancaDocumento
																		.getImovel()
																		.getLigacaoEsgotoSituacao()
																		.getId()
																		.toString(),
																1));

										cobrancaDocumentoTxt.append(Util
												.completaString("", 6));

										/*
										 * Quantidades de economias por
										 * categoria: 1º RESIDÊNCIAL 2º
										 * COMERCIAL 3º INDUSTRIAL 4º PÚBLICA
										 */
										Collection colecaoCategorias = this
												.getControladorImovel()
												.obterQuantidadeEconomiasCategoria(
														cobrancaDocumento
																.getImovel());
										String qtdResidencial = "";
										String qtdComercial = "";
										String qtdIndustrial = "";
										String qtdPublico = "";

										if (colecaoCategorias != null
												&& !colecaoCategorias.isEmpty()) {
											Iterator iteratorColecaoCategorias = colecaoCategorias
													.iterator();
											Categoria categoria = null;

											while (iteratorColecaoCategorias
													.hasNext()) {
												categoria = (Categoria) iteratorColecaoCategorias
														.next();

												if (categoria.getId().equals(
														Categoria.RESIDENCIAL)) {
													qtdResidencial = ""
															+ categoria
																	.getQuantidadeEconomiasCategoria();
												} else if (categoria
														.getId()
														.equals(
																Categoria.COMERCIAL)) {
													qtdComercial = ""
															+ categoria
																	.getQuantidadeEconomiasCategoria();
												} else if (categoria
														.getId()
														.equals(
																Categoria.INDUSTRIAL)) {
													qtdIndustrial = ""
															+ categoria
																	.getQuantidadeEconomiasCategoria();
												} else if (categoria
														.getId()
														.equals(
																Categoria.PUBLICO)) {
													qtdPublico = ""
															+ categoria
																	.getQuantidadeEconomiasCategoria();
												}
											}
										}
										colecaoCategorias = null;

										// Residêncial
										if (!qtdResidencial.equals("")) {
											cobrancaDocumentoTxt
													.append(Util
															.adicionarZerosEsquedaNumero(
																	3,
																	qtdResidencial));
										} else {
											cobrancaDocumentoTxt.append(Util
													.completaString("", 3));
										}

										cobrancaDocumentoTxt.append(Util
												.completaString("", 5));

										// Comercial
										if (!qtdComercial.equals("")) {
											cobrancaDocumentoTxt
													.append(Util
															.adicionarZerosEsquedaNumero(
																	3,
																	qtdComercial));
										} else {
											cobrancaDocumentoTxt.append(Util
													.completaString("", 3));
										}

										cobrancaDocumentoTxt.append(Util
												.completaString("", 8));

										// Industrial
										if (!qtdIndustrial.equals("")) {
											cobrancaDocumentoTxt
													.append(Util
															.adicionarZerosEsquedaNumero(
																	3,
																	qtdIndustrial));
										} else {
											cobrancaDocumentoTxt.append(Util
													.completaString("", 3));
										}

										cobrancaDocumentoTxt.append(Util
												.completaString("", 5));

										// Público
										if (!qtdPublico.equals("")) {
											cobrancaDocumentoTxt
													.append(Util
															.adicionarZerosEsquedaNumero(
																	3,
																	qtdPublico));
										} else {
											cobrancaDocumentoTxt.append(Util
													.completaString("", 3));
										}

										cobrancaDocumentoTxt.append(Util
												.completaString("", 11));

										// Perfil do Imóvel
										cobrancaDocumentoTxt
												.append(Util
														.completaString(
																cobrancaDocumento
																		.getImovelPerfil()
																		.getDescricao(),
																8));

										cobrancaDocumentoTxt.append(Util
												.completaString("", 6));

										// Data de Emissão
										if (cobrancaDocumento.getEmissao() != null) {
											cobrancaDocumentoTxt
													.append(Util
															.formatarData(cobrancaDocumento
																	.getEmissao()));
										} else {
											cobrancaDocumentoTxt.append(Util
													.completaString("", 10));
										}

										cobrancaDocumentoTxt.append(Util
												.completaString("", 4));

//										// Data de Validade
//										if (cobrancaDocumento.getDataValidade() != null) {
//											cobrancaDocumentoTxt.append(Util
//												.formatarData(cobrancaDocumento.getDataValidade()));
//										} else {
//											cobrancaDocumentoTxt.append(Util
//													.completaString("", 10));
//										}
										
										//alterado por Vivianne Sousa 15/09/2008
										//Data de Validade
										Date dataValidade = this.
											obterDataValidadeDocumentoCobranca(cobrancaDocumento,null,null);
										
										if (dataValidade != null) {
											cobrancaDocumentoTxt.append(Util.formatarData(dataValidade));
										} else {
											cobrancaDocumentoTxt.append(Util.completaString("", 10));
										}
										
										cobrancaDocumentoTxt.append(Util
												.completaString("", 60));

										cobrancaDocumentoTxt.append(System
												.getProperty("line.separator"));

										// LINHA 07
										// ==================================

										/*
										 * Canal ("1") Fonte ("1")
										 */
										cobrancaDocumentoTxt.append("1");
										cobrancaDocumentoTxt.append("1");

										/*
										 * Selecionar os itens do documento de
										 * cobrança correspondentes a conta e
										 * ordenar por ano/mês de referência da
										 * conta
										 */
										if (colecaoCobrancaDocumentoItem != null
												&& !colecaoCobrancaDocumentoItem
														.isEmpty()) {

											int countImpressao = colecaoCobrancaDocumentoItem
													.size() - 26;

											Iterator iteratorColecaoCobrancaDocumentoItem = null;
											int contRegistros = 0;
											CobrancaDocumentoItem cobrancaDocumentoItem = null;

											cobrancaDocumentoTxt.append(Util
													.completaString("", 3));

											/*
											 * Caso a quantidade de itens
											 * selecionados seja superior a 28
											 * [SB0001 - Calcular Valor e Data
											 * de Vencimento Anterior]
											 * 
											 * Caso contrário: Dados do primeiro
											 * e segundo itens selecionados
											 */
											if (colecaoCobrancaDocumentoItem
													.size() > 28) {

												CalcularValorDataVencimentoAnteriorHelper calcularValorDataVencimentoAnteriorHelper = this
														.calcularValorDataVencimentoAnterior(
																colecaoCobrancaDocumentoItem,
																28);

												// Constante "DEBTO.ATE"
												cobrancaDocumentoTxt
														.append("DEBTO.ATE");

												cobrancaDocumentoTxt
														.append(Util
																.completaString(
																		"", 5));

												// Data de Vencimento anterior
												// retornado
												// pelo
												// [SB0001]
												cobrancaDocumentoTxt
														.append(Util
																.formatarData(calcularValorDataVencimentoAnteriorHelper
																		.getDataVencimentoAnterior()));

												cobrancaDocumentoTxt
														.append(" ");

												// Valor anterior retornado pelo
												// [SB0001]
												cobrancaDocumentoTxt
														.append(Util
																.completaStringComEspacoAEsquerda(
																		Util
																				.formatarMoedaReal(calcularValorDataVencimentoAnteriorHelper
																						.getValorAnterior()),
																		16));

												cobrancaDocumentoTxt
														.append(Util
																.completaString(
																		"", 5));

												/*
												 * Dados do primeiro ítem que
												 * não foi considerado anterior:
												 */

												// Mês/Ano de referência da
												// conta
												cobrancaDocumentoTxt
														.append(Util
																.completaString(
																		Util
																				.formatarAnoMesParaMesAno(calcularValorDataVencimentoAnteriorHelper
																						.getCobrancaDocumentoItemNaoAnterior()
																						.getContaGeral()
																						.getConta()
																						.getReferencia()),
																		9));

												cobrancaDocumentoTxt
														.append(Util
																.completaString(
																		"", 5));

												// Data de vencimento da conta
												cobrancaDocumentoTxt
														.append(Util
																.formatarData(calcularValorDataVencimentoAnteriorHelper
																		.getCobrancaDocumentoItemNaoAnterior()
																		.getContaGeral()
																		.getConta()
																		.getDataVencimentoConta()));

												cobrancaDocumentoTxt
														.append(" ");

												// Valor do item
												cobrancaDocumentoTxt
														.append(Util
																.completaStringComEspacoAEsquerda(
																		Util
																				.formatarMoedaReal(calcularValorDataVencimentoAnteriorHelper
																						.getCobrancaDocumentoItemNaoAnterior()
																						.getValorItemCobrado()),
																		16));

												cobrancaDocumentoTxt
														.append(Util
																.completaString(
																		"", 60));

											} else {

												iteratorColecaoCobrancaDocumentoItem = colecaoCobrancaDocumentoItem
														.iterator();
												contRegistros = 0;
												cobrancaDocumentoItem = null;

												while (iteratorColecaoCobrancaDocumentoItem
														.hasNext()) {
													cobrancaDocumentoItem = (CobrancaDocumentoItem) iteratorColecaoCobrancaDocumentoItem
															.next();

													if (contRegistros == 2) {
														break;
													}

													// Mês/Ano de referência da
													// conta
													cobrancaDocumentoTxt
															.append(Util
																	.completaString(
																			Util
																					.formatarAnoMesParaMesAno(cobrancaDocumentoItem
																							.getContaGeral()
																							.getConta()
																							.getReferencia()),
																			9));

													cobrancaDocumentoTxt
															.append(Util
																	.completaString(
																			"",
																			5));

													// Data de vencimento da
													// conta
													cobrancaDocumentoTxt
															.append(Util
																	.formatarData(cobrancaDocumentoItem
																			.getContaGeral()
																			.getConta()
																			.getDataVencimentoConta()));

													cobrancaDocumentoTxt
															.append(" ");

													// Valor do item
													cobrancaDocumentoTxt
															.append(Util
																	.completaStringComEspacoAEsquerda(
																			Util
																					.formatarMoedaReal(cobrancaDocumentoItem
																							.getValorItemCobrado()),
																			16));

													cobrancaDocumentoTxt
															.append(Util
																	.completaString(
																			"",
																			5));

													contRegistros++;
												}

												if (contRegistros < 2) {
													cobrancaDocumentoTxt
															.append(Util
																	.completaString(
																			"",
																			101));
												} else {
													cobrancaDocumentoTxt
															.append(Util
																	.completaString(
																			"",
																			55));
												}

											}

											cobrancaDocumentoTxt
													.append(System
															.getProperty("line.separator"));

											// LINHA 08
											// ==================================

											/*
											 * Canal ("") Fonte ("1")
											 */
											if (countImpressao <= 0) {
												iteratorColecaoCobrancaDocumentoItem = colecaoCobrancaDocumentoItem
														.iterator();
												contRegistros = 0;
												cobrancaDocumentoItem = null;

												while (iteratorColecaoCobrancaDocumentoItem
														.hasNext()) {
													cobrancaDocumentoItem = (CobrancaDocumentoItem) iteratorColecaoCobrancaDocumentoItem
															.next();

													if (contRegistros >= 2) {

														if (contRegistros % 2 == 0) {
															cobrancaDocumentoTxt
																	.append(" ");
															cobrancaDocumentoTxt
																	.append("1");
															cobrancaDocumentoTxt
																	.append(Util
																			.completaString(
																					"",
																					3));
														}

														// Mês/Ano de referência
														// da
														// conta
														cobrancaDocumentoTxt
																.append(Util
																		.completaString(
																				Util
																						.formatarAnoMesParaMesAno(cobrancaDocumentoItem
																								.getContaGeral()
																								.getConta()
																								.getReferencia()),
																				9));

														cobrancaDocumentoTxt
																.append(Util
																		.completaString(
																				"",
																				5));

														// Data de vencimento da
														// conta
														cobrancaDocumentoTxt
																.append(Util
																		.formatarData(cobrancaDocumentoItem
																				.getContaGeral()
																				.getConta()
																				.getDataVencimentoConta()));

														cobrancaDocumentoTxt
																.append(" ");

														// Valor do item
														cobrancaDocumentoTxt
																.append(Util
																		.completaStringComEspacoAEsquerda(
																				Util
																						.formatarMoedaReal(cobrancaDocumentoItem
																								.getValorItemCobrado()),
																				16));

														cobrancaDocumentoTxt
																.append(Util
																		.completaString(
																				"",
																				5));

														if (contRegistros % 2 != 0) {
															cobrancaDocumentoTxt
																	.append(Util
																			.completaString(
																					"",
																					55));
															cobrancaDocumentoTxt
																	.append(System
																			.getProperty("line.separator"));
														}
													}

													contRegistros++;
												}
											} else {
												while (countImpressao < colecaoCobrancaDocumentoItem
														.size()) {
													cobrancaDocumentoItem = (CobrancaDocumentoItem) ((List) colecaoCobrancaDocumentoItem)
															.get(countImpressao);

													if (contRegistros % 2 == 0) {
														cobrancaDocumentoTxt
																.append(" ");
														cobrancaDocumentoTxt
																.append("1");
														cobrancaDocumentoTxt
																.append(Util
																		.completaString(
																				"",
																				3));
													}

													// Mês/Ano de referência
													// da
													// conta
													cobrancaDocumentoTxt
															.append(Util
																	.completaString(
																			Util
																					.formatarAnoMesParaMesAno(cobrancaDocumentoItem
																							.getContaGeral()
																							.getConta()
																							.getReferencia()),
																			9));

													cobrancaDocumentoTxt
															.append(Util
																	.completaString(
																			"",
																			5));

													// Data de vencimento da
													// conta
													cobrancaDocumentoTxt
															.append(Util
																	.formatarData(cobrancaDocumentoItem
																			.getContaGeral()
																			.getConta()
																			.getDataVencimentoConta()));

													cobrancaDocumentoTxt
															.append(" ");

													// Valor do item
													cobrancaDocumentoTxt
															.append(Util
																	.completaStringComEspacoAEsquerda(
																			Util
																					.formatarMoedaReal(cobrancaDocumentoItem
																							.getValorItemCobrado()),
																			16));

													cobrancaDocumentoTxt
															.append(Util
																	.completaString(
																			"",
																			5));

													if (contRegistros % 2 != 0) {
														cobrancaDocumentoTxt
																.append(Util
																		.completaString(
																				"",
																				55));
														cobrancaDocumentoTxt
																.append(System
																		.getProperty("line.separator"));
													}

													countImpressao++;

													contRegistros++;
												}
											}

											if (contRegistros > 2) {
												if (contRegistros % 2 != 0) {
													cobrancaDocumentoTxt
															.append(Util
																	.completaString(
																			"",
																			101));
													cobrancaDocumentoTxt
															.append(System
																	.getProperty("line.separator"));
												}
											}
										}

										// LINHA 09
										// ==================================

										/*
										 * Canal ("1") Fonte ("2")
										 */
										cobrancaDocumentoTxt.append("1");
										cobrancaDocumentoTxt.append("2");

										cobrancaDocumentoTxt.append(Util
												.completaString("", 150));

										cobrancaDocumentoTxt.append(System
												.getProperty("line.separator"));

										// LINHA 10
										// ==================================

										/*
										 * Canal ("0") Fonte ("2")
										 */
										cobrancaDocumentoTxt.append("0");
										cobrancaDocumentoTxt.append("2");

										cobrancaDocumentoTxt.append(Util
												.completaString("", 61));

										// Valor total do documento de cobrança
										cobrancaDocumentoTxt
												.append(Util
														.completaStringComEspacoAEsquerda(
																Util
																		.formatarMoedaReal(cobrancaDocumento
																				.getValorDocumento()),
																16));

										cobrancaDocumentoTxt.append(Util
												.completaString("", 73));

										cobrancaDocumentoTxt.append(System
												.getProperty("line.separator"));

										// LINHA 11
										// ==================================

										/*
										 * Canal ("1") Fonte ("1")
										 */
										cobrancaDocumentoTxt.append("1");
										cobrancaDocumentoTxt.append("1");

										cobrancaDocumentoTxt.append(" ");

										// Constante "GR- "
										cobrancaDocumentoTxt.append("GR- ");

										// Grupo de Cobrança
										cobrancaDocumentoTxt
												.append(Util
														.completaStringComEspacoAEsquerda(
																cobrancaDocumento
																		.getQuadra()
																		.getRota()
																		.getCobrancaGrupo()
																		.getId()
																		.toString(),
																2));

										cobrancaDocumentoTxt.append(Util
												.completaString("", 2));

										// Código e descrição da empresa
										if (cobrancaDocumento.getEmpresa() != null) {
											cobrancaDocumentoTxt
													.append(Util
															.completaStringComEspacoAEsquerda(
																	cobrancaDocumento
																			.getEmpresa()
																			.getId()
																			.toString(),
																	2));

											cobrancaDocumentoTxt.append("- ");

											cobrancaDocumentoTxt
													.append(Util
															.completaString(
																	cobrancaDocumento
																			.getEmpresa()
																			.getDescricaoAbreviada(),
																	10));
										} else {
											cobrancaDocumentoTxt.append(Util
													.completaString("", 14));
										}

										cobrancaDocumentoTxt.append(Util
												.completaString("", 11));

										// Sigla e descriçao da gerência
										// regional
										cobrancaDocumentoTxt
												.append(Util
														.completaString(
																cobrancaDocumento
																		.getLocalidade()
																		.getGerenciaRegional()
																		.getNomeAbreviado(),
																3));

										cobrancaDocumentoTxt.append("-");

										cobrancaDocumentoTxt
												.append(Util
														.completaString(
																cobrancaDocumento
																		.getLocalidade()
																		.getGerenciaRegional()
																		.getNome(),
																8));

										cobrancaDocumentoTxt.append(Util
												.completaString("", 25));

										// Sequencial de impressão
										cobrancaDocumentoTxt
												.append(Util
														.completaStringComEspacoAEsquerda(
																Util
																		.retornaSequencialFormatado(sequencialImpressao),
																9));

										cobrancaDocumentoTxt.append(Util
												.completaString("", 70));

										cobrancaDocumentoTxt.append(System
												.getProperty("line.separator"));

										// LINHA 12
										// ==================================

										/*
										 * Canal ("") Fonte ("1")
										 */
										cobrancaDocumentoTxt.append(" ");
										cobrancaDocumentoTxt.append("1");

										cobrancaDocumentoTxt.append(Util
												.completaString("", 150));

										cobrancaDocumentoTxt.append(System
												.getProperty("line.separator"));

										// LINHA 13
										// ==================================

										/*
										 * Canal ("-") Fonte ("1")
										 */
										cobrancaDocumentoTxt.append("-");
										cobrancaDocumentoTxt.append("1");

										cobrancaDocumentoTxt.append(Util
												.completaString("", 18));

										String representacaoNumericaCodBarra = "";

										// Obtém a representação numérica do
										// códigode
										// barra
										representacaoNumericaCodBarra = this
												.getControladorArrecadacao()
												.obterRepresentacaoNumericaCodigoBarra(
														5,
														cobrancaDocumento
																.getValorDocumento(),
														cobrancaDocumento
																.getLocalidade()
																.getId(),
														cobrancaDocumento
																.getImovel()
																.getId(),
														null,
														null,
														null,
														null,
														String
																.valueOf(cobrancaDocumento
																		.getNumeroSequenciaDocumento()),
														cobrancaDocumento
																.getDocumentoTipo()
																.getId(), null,
														null,
														null);

										// Formata a representação númerica do
										// código de
										// barras
										String representacaoNumericaCodBarraFormatada = representacaoNumericaCodBarra
												.substring(0, 11)
												+ " "
												+ representacaoNumericaCodBarra
														.substring(11, 12)
												+ " "
												+ representacaoNumericaCodBarra
														.substring(12, 23)
												+ " "
												+ representacaoNumericaCodBarra
														.substring(23, 24)
												+ " "
												+ representacaoNumericaCodBarra
														.substring(24, 35)
												+ " "
												+ representacaoNumericaCodBarra
														.substring(35, 36)
												+ " "
												+ representacaoNumericaCodBarra
														.substring(36, 47)
												+ " "
												+ representacaoNumericaCodBarra
														.substring(47, 48);

										cobrancaDocumentoTxt
												.append(representacaoNumericaCodBarraFormatada);

										cobrancaDocumentoTxt.append(Util
												.completaString("", 77));

										cobrancaDocumentoTxt.append(System
												.getProperty("line.separator"));

										// LINHA 14
										// ==================================

										/*
										 * Canal ("-") Fonte ("1")
										 */
										cobrancaDocumentoTxt.append("-");
										cobrancaDocumentoTxt.append("1");

										cobrancaDocumentoTxt.append(Util
												.completaString("", 150));

										cobrancaDocumentoTxt.append(System
												.getProperty("line.separator"));

										// LINHA 15
										// ==================================

										/*
										 * Canal ("") Fonte ("1")
										 */
										cobrancaDocumentoTxt.append(" ");
										cobrancaDocumentoTxt.append("1");

										cobrancaDocumentoTxt.append(Util
												.completaString("", 150));

										cobrancaDocumentoTxt.append(System
												.getProperty("line.separator"));

										// LINHA 16
										// ==================================

										/*
										 * Canal ("-") Fonte ("3")
										 */
										cobrancaDocumentoTxt.append("-");
										cobrancaDocumentoTxt.append("3");

										// Cria o objeto para gerar o código de
										// barras
										// no
										// padrão
										// intercalado 2 de 5
										Interleaved2of5 codigoBarraIntercalado2de5 = new Interleaved2of5();

										// Recupera a representação númerica do
										// código
										// de
										// barras
										// sem
										// os dígitos verificadores
										String representacaoCodigoBarrasSemDigitoVerificador = representacaoNumericaCodBarra
												.substring(0, 11)
												+ representacaoNumericaCodBarra
														.substring(12, 23)
												+ representacaoNumericaCodBarra
														.substring(24, 35)
												+ representacaoNumericaCodBarra
														.substring(36, 47);

										cobrancaDocumentoTxt.append(Util
												.completaString("", 21));

										cobrancaDocumentoTxt
												.append(codigoBarraIntercalado2de5
														.encodeValue(representacaoCodigoBarrasSemDigitoVerificador));

										cobrancaDocumentoTxt.append(Util
												.completaString("", 17));

										cobrancaDocumentoTxt.append(System
												.getProperty("line.separator"));

										// LINHA 17
										// ==================================

										/*
										 * Canal ("-") Fonte ("1")
										 */
										cobrancaDocumentoTxt.append("-");
										cobrancaDocumentoTxt.append("1");
										cobrancaDocumentoTxt.append(" ");

										// Inscrição
										cobrancaDocumentoTxt
												.append(Util
														.completaString(
																inscricao
																		.getInscricaoFormatada(),
																20));

										cobrancaDocumentoTxt.append(Util
												.completaString("", 14));

										// Data de Validade
//										if (cobrancaDocumento.getDataValidade() != null) {
//											cobrancaDocumentoTxt.append(Util
//												.formatarData(cobrancaDocumento.getDataValidade()));
//										} else {
//											cobrancaDocumentoTxt.append(Util.completaString("", 10));
//										}
										
										//alterado por Vivianne Sousa 15/09/2008
										//Data de Validade
										if (dataValidade != null) {
											cobrancaDocumentoTxt.append(Util.formatarData(dataValidade));
										} else {
											cobrancaDocumentoTxt.append(Util.completaString("", 10));
										}
										

										cobrancaDocumentoTxt.append(Util
												.completaString("", 105));

										cobrancaDocumentoTxt.append(System
												.getProperty("line.separator"));

										// LINHA 18
										// ==================================

										/*
										 * Canal ("+") Fonte ("2")
										 */
										cobrancaDocumentoTxt.append("+");
										cobrancaDocumentoTxt.append("2");

										cobrancaDocumentoTxt.append(Util
												.completaString("", 50));

										// Matrícula do imóvel
										cobrancaDocumentoTxt
												.append(Util
														.completaStringComEspacoAEsquerda(
																matriculaImovelFormatada,
																10));

										cobrancaDocumentoTxt.append(Util
												.completaString("", 7));

										// Sequencial do documento de cobrança
										cobrancaDocumentoTxt
												.append(Util
														.completaStringComEspacoAEsquerda(
																""
																		+ cobrancaDocumento
																				.getNumeroSequenciaDocumento(),
																9));

										cobrancaDocumentoTxt.append(Util
												.completaString("", 74));

										cobrancaDocumentoTxt.append(System
												.getProperty("line.separator"));

										// LINHA 19
										// ==================================

										/*
										 * Canal ("-") Fonte ("1")
										 */
										cobrancaDocumentoTxt.append("-");
										cobrancaDocumentoTxt.append("1");

										cobrancaDocumentoTxt.append(Util
												.completaString("", 150));

										cobrancaDocumentoTxt.append(System
												.getProperty("line.separator"));

										// LINHA 20
										// ==================================

										/*
										 * Canal ("0") Fonte ("2")
										 */
										cobrancaDocumentoTxt.append("0");
										cobrancaDocumentoTxt.append("2");

										cobrancaDocumentoTxt.append(Util
												.completaString("", 61));

										// Valor total do documento de cobrança
										cobrancaDocumentoTxt
												.append(Util
														.completaStringComEspacoAEsquerda(
																Util
																		.formatarMoedaReal(cobrancaDocumento
																				.getValorDocumento()),
																16));

										cobrancaDocumentoTxt.append(Util
												.completaString("", 73));

										cobrancaDocumentoTxt.append(System
												.getProperty("line.separator"));

										// LINHA 21
										// ==================================

										/*
										 * Canal ("0") Fonte ("1")
										 */
										cobrancaDocumentoTxt.append("0");
										cobrancaDocumentoTxt.append("1");

										cobrancaDocumentoTxt.append(Util
												.completaString("", 150));

										cobrancaDocumentoTxt.append(System
												.getProperty("line.separator"));

										// LINHA
										// 22==================================

										/*
										 * Canal ("-") Fonte ("1")
										 */
										cobrancaDocumentoTxt.append("-");
										cobrancaDocumentoTxt.append("1");

										cobrancaDocumentoTxt.append(" ");

										// Constante "GR- "
										cobrancaDocumentoTxt.append("GR- ");

										// Grupo de Cobrança
										cobrancaDocumentoTxt
												.append(Util
														.completaStringComEspacoAEsquerda(
																cobrancaDocumento
																		.getQuadra()
																		.getRota()
																		.getCobrancaGrupo()
																		.getId()
																		.toString(),
																2));

										cobrancaDocumentoTxt.append(Util
												.completaString("", 64));

										// Sequencial de impressão
										cobrancaDocumentoTxt
												.append(Util
														.completaStringComEspacoAEsquerda(
																Util
																		.retornaSequencialFormatado(sequencialImpressao),
																9));

										cobrancaDocumentoTxt.append(Util
												.completaString("", 70));

										if (iteratorColecaoCobrancaDocumento
												.hasNext()) {
											cobrancaDocumentoTxt
													.append(System
															.getProperty("line.separator"));
										}
										
										try {
											out.write(cobrancaDocumentoTxt.toString());
											out.flush();
										} catch (IOException e) {
											e.printStackTrace();
											throw new ControladorException("erro.sistema", e);
										}
										
										cobrancaDocumentoTxt = new StringBuilder();
										
									}
									// adiciona o id da
									// conta e o sequencial
									// no para serem
									// atualizados
									mapAtualizaSequencial.put(cobrancaDocumento
											.getId(), sequencialImpressao);

									colecaoCobrancaDocumentoItem = null;
								}

							}// fim do laço que verifica
							// as 2
							// contas

						}// fim laço while do iterator do
						// objeto
						// helper
						countOrdem++;
						mapCobrancaoDocumentoDivididas = null;
					}
				}
			} else {
				flagFimPesquisa = true;
			}
			try {
				repositorioCobranca
						.atualizarSequencialCobrancaDocumentoImpressao(mapAtualizaSequencial);
			} catch (ErroRepositorioException e) {
				throw new ControladorException("erro.sistema", e);
			}
			mapAtualizaSequencial = null;
			colecaoCobrancaDocumento = null;
		}
		
        // fim de arquivo
		try {
			cobrancaDocumentoTxt = new StringBuilder();
			cobrancaDocumentoTxt.append("\u0004");
			out.write(cobrancaDocumentoTxt.toString());
			                         
			out.flush();                           
			ZipUtil.adicionarArquivo(zos, leitura);
			zos.close();
			leitura.delete();
			out.close();
		} catch (IOException e) {
			e.printStackTrace();
			throw new ControladorException("erro.sistema", e);
		}		

		System.out.println("***************************************");
		System.out.println("FIM DA CRIACAO DO ARQUIVO");
		System.out.println("***************************************");
		
//		Date dataAtual = new Date();
//		String nomeZip = null;
//		if (idAcaoCobranca.equals(CobrancaAcao.AVISO_CORTE)) {		
//			if (idCronogramaAtividadeAcaoCobranca != null) {
//				nomeZip = "AVISO_CORTE_GRUPO_" + grupoCobranca.getId() + "_"
//						+ Util.formatarData(dataAtual) + Util.formatarHoraSemDataSemDoisPontos(dataAtual);
//				nomeZip = nomeZip.replace("/", "_");
//	
//			} else {
//				String descricaoAbrevDocumentoTipo = "";
//				if (acaoCobranca != null && acaoCobranca.getDocumentoTipo() != null) {
//					descricaoAbrevDocumentoTipo = acaoCobranca.getDocumentoTipo()
//							.getDescricaoAbreviado();
//				}
//				String tituloComandoEventual = cobrancaAcaoAtividadeComando
//						.getDescricaoTitulo();
//	
//				nomeZip = descricaoAbrevDocumentoTipo + " " + tituloComandoEventual
//						+ " " + Util.formatarData(dataAtual) + Util.formatarHoraSemDataSemDoisPontos(dataAtual);
//				nomeZip = nomeZip.replace("/", "_");
//				nomeZip = nomeZip.replace(" ", "_");
//	
//			}
//		} else if (idAcaoCobranca.equals(CobrancaAcao.AVISO_CORTE_A_REVELIA)){
//			if (idCronogramaAtividadeAcaoCobranca != null) {
//				nomeZip = "AVISO_CORTE_A_REVELIA_GRUPO_" + grupoCobranca.getId() + "_"
//						+ Util.formatarData(dataAtual) + Util.formatarHoraSemDataSemDoisPontos(dataAtual);
//				nomeZip = nomeZip.replace("/", "_");
//	
//			} else {
//				String descricaoAbrevDocumentoTipo = "";
//				if (acaoCobranca != null && acaoCobranca.getDocumentoTipo() != null) {
//					descricaoAbrevDocumentoTipo = acaoCobranca.getDocumentoTipo()
//							.getDescricaoAbreviado();
//				}
//				String tituloComandoEventual = cobrancaAcaoAtividadeComando
//						.getDescricaoTitulo();
//	
//				nomeZip = descricaoAbrevDocumentoTipo + " " + tituloComandoEventual
//						+ " " + Util.formatarData(dataAtual) + Util.formatarHoraSemDataSemDoisPontos(dataAtual);
//				nomeZip = nomeZip.replace("/", "_");
//				nomeZip = nomeZip.replace(" ", "_");
//	
//			}
//		}

//		// pegar o arquivo, zipar pasta e arquivo e escrever no stream
//		try {
//
//			System.out.println("***************************************");
//			System.out.println("INICO DA CRIACAO DO ARQUIVO");
//			System.out.println("***************************************");
//
//			if (cobrancaDocumentoTxt != null
//					&& cobrancaDocumentoTxt.length() != 0) {
//
//				cobrancaDocumentoTxt.append("\u0004");
//
//				// criar o arquivo zip
//				File compactado = new File(nomeZip + ".zip"); // nomeZip
//				ZipOutputStream zos = new ZipOutputStream(new FileOutputStream(
//						compactado));
//
//				File leitura = new File(nomeZip + ".txt");
//				BufferedWriter out = new BufferedWriter(new OutputStreamWriter(
//						new FileOutputStream(leitura.getAbsolutePath())));
//				out.write(cobrancaDocumentoTxt.toString());
//				out.close();
//				ZipUtil.adicionarArquivo(zos, leitura);
//
//				// close the stream
//				zos.close();
//				leitura.delete();
//			}
//			System.out.println("***************************************");
//			System.out.println("FIM DA CRIACAO DO ARQUIVO");
//			System.out.println("***************************************");
//
//		} catch (IOException e) {
//			e.printStackTrace();
//			throw new ControladorException("erro.sistema", e);
//		} catch (Exception e) {
//			e.printStackTrace();
//			throw new ControladorException("erro.sistema", e);
//		}


	}

	/**
	 * [UC0349] Emitir Documento de Cobrança
	 * 
	 * Calcular valor e Data de vencimento anterior
	 * 
	 * [SB0001] - Calcular Valor e Data de Vencimento Anterior
	 * 
	 * @author Raphael Rossiter, Vivianne Sousa
	 * @data 30/05/2006, 14/09/2006
	 * 
	 * @param Collection
	 *            <CobrancaDocumentoItem>
	 * @return CalcularValorDataVencimentoAnteriorHelper
	 */
	public CalcularValorDataVencimentoAnteriorHelper calcularValorDataVencimentoAnterior(
			Collection<CobrancaDocumentoItem> colecaoCobrancaDocumentoItem,
			int qtdMaxItens) throws ControladorException {

		CalcularValorDataVencimentoAnteriorHelper retorno = new CalcularValorDataVencimentoAnteriorHelper();

		/*
		 * Calcular a quantidade de itens anteriores = (quantidade de itens
		 * selecionados - qtdMaxItens) + 1
		 */
		int qtdItensAnteriores = (colecaoCobrancaDocumentoItem.size() - qtdMaxItens) + 1;

		/*
		 * Calcular o valor anterior que é o somatório do valor dos itens
		 * selecionados (CDIT_VLITEMCOBRADO) do primeiro item até o item com
		 * sequencial igual a quantidade itens anteriores
		 */
		BigDecimal vlAnterior = new BigDecimal("0.00");
		BigDecimal vlAnteriorAcrescimos = new BigDecimal("0.00");
		Date dataVencimentoAnterior = null;
		int sequencia = 0;
		Iterator iteratorColecaoCobrancaDocumentoItem = colecaoCobrancaDocumentoItem
				.iterator();
		CobrancaDocumentoItem cobrancaDocumentoItem = null;
		CobrancaDocumentoItem cobrancaDocumentoItemNaoAnterior = null;

		while (iteratorColecaoCobrancaDocumentoItem.hasNext()) {
			cobrancaDocumentoItem = (CobrancaDocumentoItem) iteratorColecaoCobrancaDocumentoItem
					.next();

			if (cobrancaDocumentoItem.getValorItemCobrado() != null) {
				vlAnterior = vlAnterior.add(cobrancaDocumentoItem
						.getValorItemCobrado());
			}
			if (cobrancaDocumentoItem.getValorAcrescimos() != null) {
				vlAnteriorAcrescimos = vlAnteriorAcrescimos
						.add(cobrancaDocumentoItem.getValorAcrescimos());
			}
			sequencia++;

			if (sequencia == qtdItensAnteriores) {

				/*
				 * Atribuir à date de vencimento anterior o vencimento da conta
				 * referente ao item coma sequência igual a quantidade de itens
				 * anteriores
				 */
				dataVencimentoAnterior = cobrancaDocumentoItem.getContaGeral()
						.getConta().getDataVencimentoConta();
				cobrancaDocumentoItemNaoAnterior = (CobrancaDocumentoItem) iteratorColecaoCobrancaDocumentoItem
						.next();
				break;
			}

		}

		retorno.setValorAnterior(vlAnterior);
		retorno.setDataVencimentoAnterior(dataVencimentoAnterior);
		retorno
				.setCobrancaDocumentoItemNaoAnterior(cobrancaDocumentoItemNaoAnterior);
		retorno.setValorAcrescimosAnterior(vlAnteriorAcrescimos);

		return retorno;
	}

	/**
	 * 
	 * Gerar Relação de Débitos
	 * 
	 * [UC0227] Gerar Relação de Débitos
	 * 
	 * @author Rafael Santos
	 * @date 12/06/2006
	 * 
	 */
	public Integer obterQuantidadaeRelacaoImoveisDebitos(
			String idImovelCondominio, String idImovelPrincipal,
			String idNomeConta, String idSituacaoLigacaoAgua,
			String consumoMinimoInicialAgua, String consumoMinimoFinalAgua,
			String idSituacaoLigacaoEsgoto, String consumoMinimoInicialEsgoto,
			String consumoMinimoFinalEsgoto,
			String intervaloValorPercentualEsgotoInicial,
			String intervaloValorPercentualEsgotoFinal,
			String intervaloMediaMinimaImovelInicial,
			String intervaloMediaMinimaImovelFinal,
			String intervaloMediaMinimaHidrometroInicial,
			String intervaloMediaMinimaHidrometroFinal, String idImovelPerfil,
			String idPocoTipo, String idFaturamentoSituacaoTipo,
			String idCobrancaSituacaoTipo, String idSituacaoEspecialCobranca,
			String idEloAnormalidade, String areaConstruidaInicial,
			String areaConstruidaFinal, String idCadastroOcorrencia,
			String idConsumoTarifa, String idGerenciaRegional,
			String idLocalidadeInicial, String idLocalidadeFinal,
			String setorComercialInicial, String setorComercialFinal,
			String quadraInicial, String quadraFinal, String loteOrigem,
			String loteDestno, String cep, String logradouro, String bairro,
			String municipio, String idTipoMedicao, String indicadorMedicao,
			String idSubCategoria, String idCategoria,
			String quantidadeEconomiasInicial, String quantidadeEconomiasFinal,
			String diaVencimento, String idCliente, String idClienteTipo,
			String idClienteRelacaoTipo, String numeroPontosInicial,
			String numeroPontosFinal, String numeroMoradoresInicial,
			String numeroMoradoresFinal, String idAreaConstruidaFaixa)
			throws ControladorException {

		Integer quantidade;
		try {
			// remove primeiro as linhas do critério cobrança
			quantidade = repositorioCobranca
					.obterQuantidadaeRelacaoImoveisDebitos(idImovelCondominio,
							idImovelPrincipal, idNomeConta,
							idSituacaoLigacaoAgua, consumoMinimoInicialAgua,
							consumoMinimoFinalAgua, idSituacaoLigacaoEsgoto,
							consumoMinimoInicialEsgoto,
							consumoMinimoFinalEsgoto,
							intervaloValorPercentualEsgotoInicial,
							intervaloValorPercentualEsgotoFinal,

							intervaloMediaMinimaImovelInicial,
							intervaloMediaMinimaImovelFinal,
							intervaloMediaMinimaHidrometroInicial,
							intervaloMediaMinimaHidrometroFinal,

							idImovelPerfil, idPocoTipo,
							idFaturamentoSituacaoTipo, idCobrancaSituacaoTipo,
							idSituacaoEspecialCobranca, idEloAnormalidade,
							areaConstruidaInicial, areaConstruidaFinal,
							idCadastroOcorrencia, idConsumoTarifa,
							idGerenciaRegional, idLocalidadeInicial,
							idLocalidadeFinal, setorComercialInicial,
							setorComercialFinal, quadraInicial, quadraFinal,
							loteOrigem, loteDestno, cep, logradouro, bairro,
							municipio, idTipoMedicao, indicadorMedicao,
							idSubCategoria, idCategoria,
							quantidadeEconomiasInicial,
							quantidadeEconomiasFinal, diaVencimento, idCliente,
							idClienteTipo, idClienteRelacaoTipo,
							numeroPontosInicial, numeroPontosFinal,
							numeroMoradoresInicial, numeroMoradoresFinal,
							idAreaConstruidaFaixa);
		} catch (ErroRepositorioException e) {
			sessionContext.setRollbackOnly();
			throw new ControladorException("erro.sistema", e);
		}

		return quantidade;

	}

	/**
	 * Retorna o count do resultado da pesquisa de Cobrança Cronograma
	 * 
	 * 
	 * @author Flávio Leonardo
	 * @date 14/06/2006
	 * 
	 * @return Integer retorno
	 * @throws ErroRepositorioException
	 */
	public Integer pesquisarCobrancaCronogramaCount(Filtro filtro)
			throws ControladorException {
		Integer totalRegistros = null;
		try {
			totalRegistros = repositorioCobranca
					.pesquisarCobrancaCronogramaCount(filtro);
		} catch (ErroRepositorioException ex) {
			ex.printStackTrace();
			throw new ControladorException("erro.sistema", ex);
		}

		return totalRegistros;
	}

	/**
	 * 
	 * Consultar Relação de Debitos do Imovel Consulta o Consumo Medio do Imovel
	 * 
	 * [UC0227] - Gerar Relção de Débitos
	 * 
	 * @author Rafael Santos
	 * @date 15/06/2006
	 * 
	 * @param imovelId
	 * @return
	 * @throws ErroRepositorioException
	 */
	public Integer pesquisarConsumoMedioConsumoHistoricoImovel(Integer imovelId)
			throws ControladorException {
		Integer consumoMedio = null;
		try {
			consumoMedio = repositorioCobranca
					.pesquisarConsumoMedioConsumoHistoricoImovel(imovelId);
		} catch (ErroRepositorioException ex) {
			ex.printStackTrace();
			throw new ControladorException("erro.sistema", ex);
		}

		return consumoMedio;

	}

	/**
	 * Gerar Relatório de Critério de Cobrança
	 * 
	 * Pesquisa as linhas de critério de cobrança através do id do critério de
	 * cobrança
	 * 
	 * @author Rafael Corrêa
	 * @data 09/08/2006
	 * 
	 * @param CobrancaDocumento
	 * @return Collection<CobrancaDocumentoItem>
	 */
	public Collection pesquisarCobrancaCriterioLinha(Integer idCriterioCobranca)
			throws ControladorException {
		Collection retorno = new ArrayList();
		try {
			Collection colecaoCobrancaCriterioLinha = repositorioCobranca
					.pesquisarCobrancaCriterioLinha(idCriterioCobranca);

			if (colecaoCobrancaCriterioLinha != null
					&& !colecaoCobrancaCriterioLinha.isEmpty()) {
				Iterator colecaoCobrancaCriterioLinhaIterator = colecaoCobrancaCriterioLinha
						.iterator();

				Object[] objetoCriterioCobrancaLinha = null;

				while (colecaoCobrancaCriterioLinhaIterator.hasNext()) {
					objetoCriterioCobrancaLinha = (Object[]) colecaoCobrancaCriterioLinhaIterator
							.next();

					CobrancaCriterioLinha cobrancaCriterioLinha = new CobrancaCriterioLinha();

					// Imóvel Perfil
					if (objetoCriterioCobrancaLinha[0] != null) {
						ImovelPerfil imovelPerfil = new ImovelPerfil();
						imovelPerfil
								.setDescricao((String) objetoCriterioCobrancaLinha[0]);
						cobrancaCriterioLinha.setImovelPerfil(imovelPerfil);
					}

					// Categoria
					if (objetoCriterioCobrancaLinha[1] != null) {
						Categoria categoria = new Categoria();
						categoria
								.setDescricao((String) objetoCriterioCobrancaLinha[1]);
						cobrancaCriterioLinha.setCategoria(categoria);
					}

					// Valor Mínimo Débito
					if (objetoCriterioCobrancaLinha[2] != null) {
						cobrancaCriterioLinha
								.setValorMinimoDebito((BigDecimal) objetoCriterioCobrancaLinha[2]);
					}

					// Valor Máximo Débito
					if (objetoCriterioCobrancaLinha[3] != null) {
						cobrancaCriterioLinha
								.setValorMaximoDebito((BigDecimal) objetoCriterioCobrancaLinha[3]);
					}

					// Quantidade Mínima Contas
					if (objetoCriterioCobrancaLinha[4] != null) {
						cobrancaCriterioLinha
								.setQuantidadeMinimaContas((Short) objetoCriterioCobrancaLinha[4]);
					}

					// Quantidade Máxima Contas
					if (objetoCriterioCobrancaLinha[5] != null) {
						cobrancaCriterioLinha
								.setQuantidadeMaximaContas((Short) objetoCriterioCobrancaLinha[5]);
					}

					// Valor Mínimo da Conta do Mês
					if (objetoCriterioCobrancaLinha[6] != null) {
						cobrancaCriterioLinha
								.setValorMinimoContaMes((BigDecimal) objetoCriterioCobrancaLinha[6]);
					}

					// Valor Mínimo do Débito para Cliente com Débito Automático
					if (objetoCriterioCobrancaLinha[7] != null) {
						cobrancaCriterioLinha
								.setValorMinimoDebitoDebitoAutomatico((BigDecimal) objetoCriterioCobrancaLinha[7]);
					}

					// Quantidade Mínima de Contas para Cliente com Débito
					// Automático
					if (objetoCriterioCobrancaLinha[8] != null) {
						cobrancaCriterioLinha
								.setQuantidadeMinimaContasDebitoAutomatico((Short) objetoCriterioCobrancaLinha[8]);
					}

					retorno.add(cobrancaCriterioLinha);

				}
			}

		} catch (ErroRepositorioException ex) {
			ex.printStackTrace();
			throw new ControladorException("erro.sistema", ex);
		}

		return retorno;

	}

	/**
	 * Gerar Relatório de Perfil de Parcelamento
	 * 
	 * Pesquisa os Parcelamentos Desconto Antiguidade através do id de Perfil de
	 * Parcelamento
	 * 
	 * @author Rafael Corrêa
	 * @data 22/08/2006
	 */
	public Collection pesquisarParcelamentoDescontoAntiguidade(
			Integer idParcelamentoPerfil) throws ControladorException {

		Collection retorno = new ArrayList();
		try {
			Collection colecaoParcelamentoDescontoAntiguidade = repositorioCobranca
					.pesquisarParcelamentoDescontoAntiguidade(idParcelamentoPerfil);

			if (colecaoParcelamentoDescontoAntiguidade != null
					&& !colecaoParcelamentoDescontoAntiguidade.isEmpty()) {
				Iterator colecaoParcelamentoDescontoAntiguidadeIterator = colecaoParcelamentoDescontoAntiguidade
						.iterator();

				Object[] objetoParcelamentoDescontoAntiguidade = null;

				while (colecaoParcelamentoDescontoAntiguidadeIterator.hasNext()) {
					objetoParcelamentoDescontoAntiguidade = (Object[]) colecaoParcelamentoDescontoAntiguidadeIterator
							.next();

					ParcelamentoDescontoAntiguidade parcelamentoDescontoAntiguidade = new ParcelamentoDescontoAntiguidade();

					// Id
					if (objetoParcelamentoDescontoAntiguidade[0] != null) {
						parcelamentoDescontoAntiguidade
								.setId((Integer) objetoParcelamentoDescontoAntiguidade[0]);
					}

					// Quantidade Mínima Meses Débito
					if (objetoParcelamentoDescontoAntiguidade[1] != null) {
						parcelamentoDescontoAntiguidade
								.setQuantidadeMinimaMesesDebito((Integer) objetoParcelamentoDescontoAntiguidade[1]);
					}

					// Percentual de Desconto Sem Restabelecimento
					if (objetoParcelamentoDescontoAntiguidade[2] != null) {
						parcelamentoDescontoAntiguidade
								.setPercentualDescontoSemRestabelecimento((BigDecimal) objetoParcelamentoDescontoAntiguidade[2]);
					}

					// Percentual de Desconto Com Restabelecimento
					if (objetoParcelamentoDescontoAntiguidade[3] != null) {
						parcelamentoDescontoAntiguidade
								.setPercentualDescontoComRestabelecimento((BigDecimal) objetoParcelamentoDescontoAntiguidade[3]);
					}

					// Percentual de Desconto Ativo
					if (objetoParcelamentoDescontoAntiguidade[4] != null) {
						parcelamentoDescontoAntiguidade
								.setPercentualDescontoAtivo((BigDecimal) objetoParcelamentoDescontoAntiguidade[4]);
					}

					retorno.add(parcelamentoDescontoAntiguidade);

				}
			}

		} catch (ErroRepositorioException ex) {
			ex.printStackTrace();
			throw new ControladorException("erro.sistema", ex);
		}

		return retorno;

	}

	/**
	 * Gerar Relatório de Perfil de Parcelamento
	 * 
	 * Pesquisa os Parcelamentos Desconto Inatividade através do id de Perfil de
	 * Parcelamento
	 * 
	 * @author Rafael Corrêa
	 * @data 22/08/2006
	 */
	public Collection pesquisarParcelamentoDescontoInatividade(
			Integer idParcelamentoPerfil) throws ControladorException {

		Collection retorno = new ArrayList();
		try {
			Collection colecaoParcelamentoDescontoInatividade = repositorioCobranca
					.pesquisarParcelamentoDescontoInatividade(idParcelamentoPerfil);

			if (colecaoParcelamentoDescontoInatividade != null
					&& !colecaoParcelamentoDescontoInatividade.isEmpty()) {
				Iterator colecaoParcelamentoDescontoInatividadeIterator = colecaoParcelamentoDescontoInatividade
						.iterator();

				Object[] objetoParcelamentoDescontoInatividade = null;

				while (colecaoParcelamentoDescontoInatividadeIterator.hasNext()) {
					objetoParcelamentoDescontoInatividade = (Object[]) colecaoParcelamentoDescontoInatividadeIterator
							.next();

					ParcelamentoDescontoInatividade parcelamentoDescontoInatividade = new ParcelamentoDescontoInatividade();

					// Id
					if (objetoParcelamentoDescontoInatividade[0] != null) {
						parcelamentoDescontoInatividade
								.setId((Integer) objetoParcelamentoDescontoInatividade[0]);
					}

					// Quantidade Máxima Meses de Inatividade
					if (objetoParcelamentoDescontoInatividade[1] != null) {
						parcelamentoDescontoInatividade
								.setQuantidadeMaximaMesesInatividade((Integer) objetoParcelamentoDescontoInatividade[1]);
					}

					// Percentual de Desconto Sem Restabelecimento
					if (objetoParcelamentoDescontoInatividade[2] != null) {
						parcelamentoDescontoInatividade
								.setPercentualDescontoSemRestabelecimento((BigDecimal) objetoParcelamentoDescontoInatividade[2]);
					}

					// Valor Máximo Débito
					if (objetoParcelamentoDescontoInatividade[3] != null) {
						parcelamentoDescontoInatividade
								.setPercentualDescontoComRestabelecimento((BigDecimal) objetoParcelamentoDescontoInatividade[3]);
					}

					retorno.add(parcelamentoDescontoInatividade);

				}
			}

		} catch (ErroRepositorioException ex) {
			ex.printStackTrace();
			throw new ControladorException("erro.sistema", ex);
		}

		return retorno;

	}

	/**
	 * Gerar Relatório de Perfil de Parcelamento
	 * 
	 * Pesquisa os Reparcelamentos Consecutivos através do id de Perfil de
	 * Parcelamento
	 * 
	 * @author Rafael Corrêa
	 * @data 22/08/2006
	 */
	public Collection pesquisarReparcelamentoConsecutivo(
			Integer idParcelamentoPerfil) throws ControladorException {

		Collection retorno = new ArrayList();
		try {
			Collection colecaoReparcelamentoConsecutivo = repositorioCobranca
					.pesquisarReparcelamentoConsecutivo(idParcelamentoPerfil);

			if (colecaoReparcelamentoConsecutivo != null
					&& !colecaoReparcelamentoConsecutivo.isEmpty()) {
				Iterator colecaoReparcelamentoConsecutivoIterator = colecaoReparcelamentoConsecutivo
						.iterator();

				Object[] objetoReparcelamentoConsecutivo = null;

				while (colecaoReparcelamentoConsecutivoIterator.hasNext()) {
					objetoReparcelamentoConsecutivo = (Object[]) colecaoReparcelamentoConsecutivoIterator
							.next();

					ParcelamentoQuantidadeReparcelamentoRelatorioHelper parcelamentoQuantidadeReparcelamentoRelatorioHelper = new ParcelamentoQuantidadeReparcelamentoRelatorioHelper();

					// Id Reparcelamento
					if (objetoReparcelamentoConsecutivo[0] != null) {
						parcelamentoQuantidadeReparcelamentoRelatorioHelper
								.setIdReparcelamento((Integer) objetoReparcelamentoConsecutivo[0]);
					}

					// Quantidade Máxima de Reparcelamentos Consecutivos
					if (objetoReparcelamentoConsecutivo[1] != null) {
						parcelamentoQuantidadeReparcelamentoRelatorioHelper
								.setQuantidadeMaximaReparcelamento((Short) objetoReparcelamentoConsecutivo[1]);
					}

					// Id Prestação
					if (objetoReparcelamentoConsecutivo[2] != null) {
						parcelamentoQuantidadeReparcelamentoRelatorioHelper
								.setIdPrestacao((Integer) objetoReparcelamentoConsecutivo[2]);
					}

					// Quantidade Máxima de Prestações do Parcelamento
					if (objetoReparcelamentoConsecutivo[3] != null) {
						parcelamentoQuantidadeReparcelamentoRelatorioHelper
								.setQuantidadeMaximaPrestacoes((Short) objetoReparcelamentoConsecutivo[3]);
					}

					// Taxa de Juros
					if (objetoReparcelamentoConsecutivo[4] != null) {
						parcelamentoQuantidadeReparcelamentoRelatorioHelper
								.setTaxaJuros((BigDecimal) objetoReparcelamentoConsecutivo[4]);
					}

					// Percentual Mínimo de Entrada
					if (objetoReparcelamentoConsecutivo[5] != null) {
						parcelamentoQuantidadeReparcelamentoRelatorioHelper
								.setPercentualMinimoEntrada((BigDecimal) objetoReparcelamentoConsecutivo[5]);
					}

					retorno
							.add(parcelamentoQuantidadeReparcelamentoRelatorioHelper);

				}
			}

		} catch (ErroRepositorioException ex) {
			ex.printStackTrace();
			throw new ControladorException("erro.sistema", ex);
		}

		return retorno;

	}

	/**
	 * Permite efetuar o parcelamento dos débitos de um imóvel
	 * 
	 * [UC0214] Efetuar Parcelamento de Débitos
	 * 
	 * Pesquisa os débitos do imóvel a partir das informações do formulário
	 * 
	 * pesquisarDebitosImovel
	 * 
	 * @author Roberta Costa
	 * @date 23/08/2006
	 * 
	 * @param codigoImovel
	 * @param codigoImovelAntes
	 * @param dataParcelamento
	 * @param resolucaoDiretoria
	 * @param fimIntervaloParcelamento
	 * @param inicioIntervaloParcelamento
	 * @param indicadorContasRevisao
	 * @param indicadorGuiasPagamento
	 * @param indicadorAcrescimosImpotualidade
	 * @param indicadorDebitosACobrar
	 * @param indicadorCreditoARealizar
	 * @return Object[]
	 * @throws ControladorException
	 */
	public Object[] pesquisarDebitosImovel(String codigoImovel,
			String codigoImovelAntes, String dataParcelamento,
			String resolucaoDiretoria, String fimIntervaloParcelamento,
			String inicioIntervaloParcelamento, String indicadorContasRevisao,
			String indicadorGuiasPagamento,
			String indicadorAcrescimosImpotualidade,
			String indicadorDebitosACobrar, String indicadorCreditoARealizar,
			Boolean indicadorContas, String indicadorDividaAtiva) throws ControladorException {

		Object[] debitosImovel = new Object[25];

		// Definição dos indices do array debitosImovel
		final Integer COLECAO_CONTAS = new Integer("0");
		final Integer VALOR_TOTAL_CONTAS = new Integer("1");
		final Integer COLECAO_GUIA_PAGAMENTO = new Integer("2");
		final Integer VALOR_TOTAL_GUIA_PAGAMENTO = new Integer("3");
		final Integer VALOR_ACRESCIMOS_IMPONTUALIDADE = new Integer("4");
		final Integer COLECAO_DEBITO_A_COBRAR = new Integer("5");
		final Integer VALOR_DEBITO_A_COBRAR_SERVICO = new Integer("6");
		final Integer VALOR_DEBITO_A_COBRAR_SERVICO_LONGO_PRAZO = new Integer(
				"7");
		final Integer VALOR_DEBITO_A_COBRAR_SERVICO_CURTO_PRAZO = new Integer(
				"8");
		final Integer VALOR_DEBITO_A_COBRAR_PARCELAMENTO = new Integer("9");
		final Integer VALOR_DEBITO_A_COBRAR_PARCELAMENTO_LONGO_PRAZO = new Integer(
				"10");
		final Integer VALOR_DEBITO_A_COBRAR_PARCELAMENTO_CURTO_PRAZO = new Integer(
				"11");
		final Integer COLECAO_CREDITO_A_REALIZAR = new Integer("12");
		final Integer VALOR_CREDITO_A_REALIZAR = new Integer("13");
		final Integer VALOR_DEBITO_TOTAL_ATUALIZADO_IMOVEL = new Integer("14");
		// final Integer CODIGO_IMOVEL_ANTES = new Integer("15");
		final Integer DATA_PARCELAMENTO = new Integer("16");
		final Integer RESOLUCAO_DIRETORIA = new Integer("17");
		final Integer INICIO_INTERVALO_PARCELAMENTO = new Integer("18");
		final Integer FIM_INTERVALO_PARCELAMENTO = new Integer("19");
		final Integer INDICADOR_CONTAS_REVISAO = new Integer("20");
		final Integer INDICADOR_GUIAS_PAGAMENTO = new Integer("21");
		final Integer INDICADOR_ACRESCIMOS_IMPONTUALIDADE = new Integer("22");
		final Integer INDICADOR_DEBITO_A_COBRAR = new Integer("23");
		final Integer INDICADOR_CREDITO_A_REALIZAR = new Integer("24");


		// [FS0012] Verificar existência de parcelamento no mês
		Collection<Parcelamento> colecaoParcelamento = this
				.verificarParcelamentoMesImovel(new Integer(codigoImovel));

		if (colecaoParcelamento != null && !colecaoParcelamento.isEmpty()) {
			throw new ActionServletException(
					"atencao.debito.ja.parcelado.mes.faturamento.corrente");
		}

		// [UC0067] Obter Débito do Imóvel ou Cliente
		ObterDebitoImovelOuClienteHelper colecaoDebitoImovel = this
				.obterDebitoImovelOuCliente(
						1, // Indicador
						// de
						// débito
						// do
						// imóvel
						codigoImovel, // Matrícula do imóvel
						null, // Código do cliente
						null, // Tipo de relação cliente imóvel
						Util
								.formatarMesAnoParaAnoMesSemBarra(inicioIntervaloParcelamento), // Referência
						// inicial
						// do
						// débito
						Util
								.formatarMesAnoParaAnoMesSemBarra(fimIntervaloParcelamento), // Fim
						// do
						// débito
						Util.converteStringParaDate("01/01/0001"), // Inicio
						// vencimento
						Util.converteStringParaDate("31/12/9999"), // Fim
						// vencimento
						1, // Indicador de pagamento
						new Integer(indicadorContasRevisao), // conta em
						// revisão
						new Integer(indicadorDebitosACobrar), // Débito a
						// cobrar
						new Integer(indicadorCreditoARealizar), // crédito a
						// realizar
						1, // Indicador de notas promissórias
						new Integer(indicadorGuiasPagamento), // guias
						// pagamento
						new Integer(indicadorAcrescimosImpotualidade),// acréscimos
						// impontualidade
						indicadorContas,
						new Integer(indicadorDividaAtiva) // divida ativa
				);

		// [FS0014] Verificar existência de débitos para o imóvel
		// Caso não exista débito
		if ((colecaoDebitoImovel.getColecaoContasValoresImovel() == null || colecaoDebitoImovel
				.getColecaoContasValoresImovel().size() == 0)
				&& (colecaoDebitoImovel.getColecaoGuiasPagamentoValores() == null || colecaoDebitoImovel
						.getColecaoGuiasPagamentoValores().size() == 0)
				&& (colecaoDebitoImovel.getColecaoDebitoACobrar() == null || colecaoDebitoImovel
						.getColecaoDebitoACobrar().size() == 0)) {
			throw new ControladorException("atencao.imovel.sem.debitos", null,
					codigoImovel);
		}

		// Para o cálculo do Débito Total Atualizado
		BigDecimal valorTotalContas = new BigDecimal("0.00");
		BigDecimal valorTotalAcrescimoImpontualidade = new BigDecimal("0.00");
		BigDecimal valorTotalRestanteServicosACobrar = new BigDecimal("0.00");
		BigDecimal valorTotalRestanteServicosACobrarCurtoPrazo = new BigDecimal(
				"0.00");
		BigDecimal valorTotalRestanteServicosACobrarLongoPrazo = new BigDecimal(
				"0.00");
		BigDecimal valorTotalRestanteParcelamentosACobrar = new BigDecimal(
				"0.00");
		BigDecimal valorTotalRestanteParcelamentosACobrarCurtoPrazo = new BigDecimal(
				"0.00");
		BigDecimal valorTotalRestanteParcelamentosACobrarLongoPrazo = new BigDecimal(
				"0.00");
		BigDecimal valorTotalGuiasPagamento = new BigDecimal("0.00");
		BigDecimal valorTotalAcrescimoImpontualidadeContas = new BigDecimal(
				"0.00");
		BigDecimal valorTotalAcrescimoImpontualidadeGuias = new BigDecimal(
				"0.00");
		BigDecimal valorCreditoARealizar = new BigDecimal("0.00");
		BigDecimal valorRestanteACobrar = new BigDecimal("0.00");
		BigDecimal valorAtualizacaoMonetaria = new BigDecimal("0.00");
		BigDecimal valorJurosMora = new BigDecimal("0.00");
		BigDecimal valorMulta = new BigDecimal("0.00");

		// Dados do Débito do Imóvel - Contas
		Collection<ContaValoresHelper> colecaoContasImovel = colecaoDebitoImovel
				.getColecaoContasValoresImovel();

		if (colecaoContasImovel != null && !colecaoContasImovel.isEmpty()) {
			Iterator contaValores = colecaoContasImovel.iterator();
			while (contaValores.hasNext()) {
				ContaValoresHelper contaValoresHelper = (ContaValoresHelper) contaValores
						.next();
				valorTotalContas.setScale(Parcelamento.CASAS_DECIMAIS,
						Parcelamento.TIPO_ARREDONDAMENTO);
				valorTotalContas = valorTotalContas.add(contaValoresHelper
						.getValorTotalConta());
				if (contaValoresHelper.getValorAtualizacaoMonetaria() != null
						&& !contaValoresHelper.getValorAtualizacaoMonetaria()
								.equals("")) {

					valorAtualizacaoMonetaria = valorAtualizacaoMonetaria
							.add(contaValoresHelper
									.getValorAtualizacaoMonetaria());
					valorAtualizacaoMonetaria.setScale(
							Parcelamento.CASAS_DECIMAIS,
							Parcelamento.TIPO_ARREDONDAMENTO);
				}
				if (contaValoresHelper.getValorJurosMora() != null
						&& !contaValoresHelper.getValorJurosMora().equals("")) {
					valorJurosMora.setScale(Parcelamento.CASAS_DECIMAIS,
							Parcelamento.TIPO_ARREDONDAMENTO);
					valorJurosMora = valorJurosMora.add(contaValoresHelper
							.getValorJurosMora());

				}
				if (contaValoresHelper.getValorMulta() != null
						&& !contaValoresHelper.getValorMulta().equals("")) {
					valorMulta.setScale(Parcelamento.CASAS_DECIMAIS,
							Parcelamento.TIPO_ARREDONDAMENTO);
					valorMulta = valorMulta.add(contaValoresHelper
							.getValorMulta());
				}

				// Para cálculo do Acrescimo de Impontualidade
				valorTotalAcrescimoImpontualidadeContas.setScale(
						Parcelamento.CASAS_DECIMAIS,
						Parcelamento.TIPO_ARREDONDAMENTO);
				valorTotalAcrescimoImpontualidadeContas = valorTotalAcrescimoImpontualidadeContas
						.add(contaValoresHelper
								.getValorTotalContaValoresParcelamento());

			}
			debitosImovel[COLECAO_CONTAS] = colecaoContasImovel;

			debitosImovel[VALOR_TOTAL_CONTAS] = valorTotalContas;
		} else {
			debitosImovel[VALOR_TOTAL_CONTAS] = new BigDecimal("0.00");
		}

		// Guias de Pagamento
		Collection<GuiaPagamentoValoresHelper> colecaoGuiaPagamentoValoresImovel = colecaoDebitoImovel
				.getColecaoGuiasPagamentoValores();

		if (colecaoGuiaPagamentoValoresImovel != null
				&& !colecaoGuiaPagamentoValoresImovel.isEmpty()) {
			Iterator guiaPagamentoValores = colecaoGuiaPagamentoValoresImovel
					.iterator();
			while (guiaPagamentoValores.hasNext()) {
				GuiaPagamentoValoresHelper guiaPagamentoValoresHelper = (GuiaPagamentoValoresHelper) guiaPagamentoValores
						.next();
				if (guiaPagamentoValoresHelper.getGuiaPagamento() != null
						&& !guiaPagamentoValoresHelper.getGuiaPagamento()
								.equals("")) {
					valorTotalGuiasPagamento.setScale(
							Parcelamento.CASAS_DECIMAIS,
							Parcelamento.TIPO_ARREDONDAMENTO);
					valorTotalGuiasPagamento = valorTotalGuiasPagamento
							.add(guiaPagamentoValoresHelper.getGuiaPagamento()
									.getValorDebito());
				}
				if (guiaPagamentoValoresHelper.getValorAtualizacaoMonetaria() != null
						&& !guiaPagamentoValoresHelper
								.getValorAtualizacaoMonetaria().equals("")) {
					valorAtualizacaoMonetaria.setScale(
							Parcelamento.CASAS_DECIMAIS,
							Parcelamento.TIPO_ARREDONDAMENTO);
					valorAtualizacaoMonetaria = valorAtualizacaoMonetaria
							.add(guiaPagamentoValoresHelper
									.getValorAtualizacaoMonetaria());
				}
				if (guiaPagamentoValoresHelper.getValorJurosMora() != null
						&& !guiaPagamentoValoresHelper.getValorJurosMora()
								.equals("")) {
					valorJurosMora.setScale(Parcelamento.CASAS_DECIMAIS,
							Parcelamento.TIPO_ARREDONDAMENTO);
					valorJurosMora = valorJurosMora
							.add(guiaPagamentoValoresHelper.getValorJurosMora());
				}
				if (guiaPagamentoValoresHelper.getValorMulta() != null
						&& !guiaPagamentoValoresHelper.getValorMulta().equals(
								"")) {
					valorMulta.setScale(Parcelamento.CASAS_DECIMAIS,
							Parcelamento.TIPO_ARREDONDAMENTO);
					valorMulta = valorMulta.add(guiaPagamentoValoresHelper
							.getValorMulta());
				}

				// Para cálculo do Acrescimo de Impontualidade
				if (guiaPagamentoValoresHelper
						.getValorAcrescimosImpontualidade() != null
						&& !guiaPagamentoValoresHelper
								.getValorAcrescimosImpontualidade().equals("")) {
					valorTotalAcrescimoImpontualidadeGuias.setScale(
							Parcelamento.CASAS_DECIMAIS,
							Parcelamento.TIPO_ARREDONDAMENTO);
					valorTotalAcrescimoImpontualidadeGuias = valorTotalAcrescimoImpontualidadeGuias
							.add(guiaPagamentoValoresHelper
									.getValorAcrescimosImpontualidade());
				}
			}
			debitosImovel[COLECAO_GUIA_PAGAMENTO] = colecaoGuiaPagamentoValoresImovel;
			debitosImovel[VALOR_TOTAL_GUIA_PAGAMENTO] = valorTotalGuiasPagamento;
		} else {
			debitosImovel[VALOR_TOTAL_GUIA_PAGAMENTO] = new BigDecimal("0.00");
		}

		// Acrescimos por Impotualidade
		BigDecimal retornoSoma = new BigDecimal("0.00");
		retornoSoma.setScale(Parcelamento.CASAS_DECIMAIS,
				Parcelamento.TIPO_ARREDONDAMENTO);
		retornoSoma = retornoSoma.add(valorTotalAcrescimoImpontualidadeContas);
		retornoSoma = retornoSoma.add(valorTotalAcrescimoImpontualidadeGuias);
		debitosImovel[VALOR_ACRESCIMOS_IMPONTUALIDADE] = retornoSoma;

		// Para o cálculo do Débito Total Atualizado
		valorTotalAcrescimoImpontualidade = retornoSoma;

		// Debitos A Cobrar
		Collection<DebitoACobrar> colecaoDebitoACobrar = colecaoDebitoImovel
				.getColecaoDebitoACobrar();
		if (colecaoDebitoACobrar != null && !colecaoDebitoACobrar.isEmpty()) {
			Iterator debitoACobrarValores = colecaoDebitoACobrar.iterator();

			final int indiceCurtoPrazo = 0;
			final int indiceLongoPrazo = 1;

			while (debitoACobrarValores.hasNext()) {
				DebitoACobrar debitoACobrar = (DebitoACobrar) debitoACobrarValores
						.next();
				// Debitos A Cobrar - Serviço
				if (debitoACobrar.getFinanciamentoTipo().getId().equals(
						FinanciamentoTipo.SERVICO_NORMAL)) {
					// [SB0001] Obter Valores de Curto e Longo Prazo
					valorRestanteACobrar = debitoACobrar.getValorTotalComBonus();

					BigDecimal[] valoresDeCurtoELongoPrazo = getControladorFaturamento()
							.obterValorACobrarDeCurtoELongoPrazo(
									debitoACobrar.getNumeroPrestacaoDebito(),
									debitoACobrar.getNumeroPrestacaoCobradasMaisBonus(),
									valorRestanteACobrar);

					valorTotalRestanteServicosACobrarCurtoPrazo = valorTotalRestanteServicosACobrarCurtoPrazo
							.add(valoresDeCurtoELongoPrazo[indiceCurtoPrazo]);
					valorTotalRestanteServicosACobrarLongoPrazo = valorTotalRestanteServicosACobrarLongoPrazo
							.add(valoresDeCurtoELongoPrazo[indiceLongoPrazo]);
				}

				// Debitos A Cobrar - Parcelamento
				if (debitoACobrar.getFinanciamentoTipo().getId().equals(
						FinanciamentoTipo.PARCELAMENTO_AGUA)
						|| debitoACobrar.getFinanciamentoTipo().getId().equals(
								FinanciamentoTipo.PARCELAMENTO_ESGOTO)
						|| debitoACobrar.getFinanciamentoTipo().getId().equals(
								FinanciamentoTipo.PARCELAMENTO_SERVICO)) {
					// [SB0001] Obter Valores de Curto e Longo Prazo
					valorRestanteACobrar = debitoACobrar.getValorTotalComBonus();

					BigDecimal[] valoresDeCurtoELongoPrazo = getControladorFaturamento()
							.obterValorACobrarDeCurtoELongoPrazo(
									debitoACobrar.getNumeroPrestacaoDebito(),
									debitoACobrar.getNumeroPrestacaoCobradasMaisBonus(),
									valorRestanteACobrar);

					valorTotalRestanteParcelamentosACobrarCurtoPrazo = valorTotalRestanteParcelamentosACobrarCurtoPrazo
							.add(valoresDeCurtoELongoPrazo[indiceCurtoPrazo]);
					valorTotalRestanteParcelamentosACobrarLongoPrazo = valorTotalRestanteParcelamentosACobrarLongoPrazo
							.add(valoresDeCurtoELongoPrazo[indiceLongoPrazo]);
				}
			}

			debitosImovel[COLECAO_DEBITO_A_COBRAR] = colecaoDebitoACobrar;

			// Serviços
			valorTotalRestanteServicosACobrar = valorTotalRestanteServicosACobrarCurtoPrazo
					.add(valorTotalRestanteServicosACobrarLongoPrazo);

			debitosImovel[VALOR_DEBITO_A_COBRAR_SERVICO_LONGO_PRAZO] = valorTotalRestanteServicosACobrarLongoPrazo;
			debitosImovel[VALOR_DEBITO_A_COBRAR_SERVICO_CURTO_PRAZO] = valorTotalRestanteServicosACobrarCurtoPrazo;
			debitosImovel[VALOR_DEBITO_A_COBRAR_SERVICO] = valorTotalRestanteServicosACobrar;

			// Parcelamentos
			valorTotalRestanteParcelamentosACobrar = valorTotalRestanteParcelamentosACobrarCurtoPrazo
					.add(valorTotalRestanteParcelamentosACobrarLongoPrazo);
			debitosImovel[VALOR_DEBITO_A_COBRAR_PARCELAMENTO_LONGO_PRAZO] = valorTotalRestanteParcelamentosACobrarLongoPrazo;
			debitosImovel[VALOR_DEBITO_A_COBRAR_PARCELAMENTO_CURTO_PRAZO] = valorTotalRestanteParcelamentosACobrarCurtoPrazo;
			debitosImovel[VALOR_DEBITO_A_COBRAR_PARCELAMENTO] = valorTotalRestanteParcelamentosACobrar;
		} else {
			debitosImovel[VALOR_DEBITO_A_COBRAR_SERVICO] = new BigDecimal(
					"0.00");
			debitosImovel[VALOR_DEBITO_A_COBRAR_PARCELAMENTO] = new BigDecimal(
					"0.00");
		}

		// Caso não exista débito de serviço nem contas
		if ((colecaoDebitoImovel.getColecaoContasValoresImovel() == null || colecaoDebitoImovel.getColecaoContasValoresImovel().isEmpty())
				&& (colecaoDebitoImovel.getColecaoGuiasPagamentoValores() == null || colecaoDebitoImovel.getColecaoGuiasPagamentoValores().size() == 0)	&& 
				(colecaoDebitoImovel.getColecaoDebitoACobrar() == null || colecaoDebitoImovel.getColecaoDebitoACobrar().size() == 0)
				) {
			throw new ControladorException("atencao.imovel.sem.debitos", null,
					codigoImovel);
		}

		// Crédito A Realizar
		Collection<CreditoARealizar> colecaoCreditoARealizar = colecaoDebitoImovel
				.getColecaoCreditoARealizar();
		if (colecaoCreditoARealizar != null
				&& !colecaoCreditoARealizar.isEmpty()) {
			Iterator creditoARealizarValores = colecaoCreditoARealizar
					.iterator();
			while (creditoARealizarValores.hasNext()) {
				CreditoARealizar creditoARealizar = (CreditoARealizar) creditoARealizarValores
						.next();
				valorCreditoARealizar = valorCreditoARealizar
						.add(creditoARealizar.getValorTotalComBonus());
			}

			debitosImovel[COLECAO_CREDITO_A_REALIZAR] = colecaoCreditoARealizar;
			debitosImovel[VALOR_CREDITO_A_REALIZAR] = valorCreditoARealizar;
		} else {
			debitosImovel[VALOR_CREDITO_A_REALIZAR] = new BigDecimal("0.00");
		}

		// Débito Total Atualizado
		BigDecimal debitoTotalAtualizado = new BigDecimal("0.00");

		debitoTotalAtualizado = debitoTotalAtualizado.add(valorTotalContas);
		debitoTotalAtualizado = debitoTotalAtualizado
				.add(valorTotalGuiasPagamento);
		debitoTotalAtualizado = debitoTotalAtualizado
				.add(valorTotalAcrescimoImpontualidade);
		debitoTotalAtualizado = debitoTotalAtualizado
				.add(valorTotalRestanteServicosACobrar);
		debitoTotalAtualizado = debitoTotalAtualizado
				.add(valorTotalRestanteParcelamentosACobrar);
		debitoTotalAtualizado = debitoTotalAtualizado
				.subtract(valorCreditoARealizar);

		debitosImovel[VALOR_DEBITO_TOTAL_ATUALIZADO_IMOVEL] = debitoTotalAtualizado;

		// Quando mudar de imóvel iniciar a data do parcelamento com a data
		// atual, limpar
		// a resolução de diretoria
		if (!codigoImovelAntes.equals(codigoImovel)) {
			// Reinicia a Data do Parcelamento
			SimpleDateFormat formatoData = new SimpleDateFormat("dd/MM/yyyy");
			Calendar dataCorrente = new GregorianCalendar();

			debitosImovel[DATA_PARCELAMENTO] = formatoData.format(dataCorrente
					.getTime());

			// Limpa Resolução de Diretoria
			debitosImovel[RESOLUCAO_DIRETORIA] = "";

			// Limpa fim do Intervalo do Parcelamento
			debitosImovel[FIM_INTERVALO_PARCELAMENTO] = "";

			// Limpa as perguntas
			debitosImovel[INDICADOR_CONTAS_REVISAO] = "";
			debitosImovel[INDICADOR_GUIAS_PAGAMENTO] = "";
			debitosImovel[INDICADOR_ACRESCIMOS_IMPONTUALIDADE] = "";
			debitosImovel[INDICADOR_DEBITO_A_COBRAR] = "";
			debitosImovel[INDICADOR_CREDITO_A_REALIZAR] = "";
		}

		// Intervalo do Parcelamento
		if (colecaoContasImovel != null) {
			Iterator contaValores = colecaoContasImovel.iterator();
			int anoMesReferenciaColecao = 0;
			int menorAnoMesReferencia = 999999;
			int maiorAnoMesReferencia = 0;

			while (contaValores.hasNext()) {
				ContaValoresHelper contaValoresHelper = (ContaValoresHelper) contaValores
						.next();
				anoMesReferenciaColecao = contaValoresHelper.getConta()
						.getReferencia();
				if (anoMesReferenciaColecao < menorAnoMesReferencia) {
					menorAnoMesReferencia = anoMesReferenciaColecao;
				}
				if (anoMesReferenciaColecao > maiorAnoMesReferencia) {
					maiorAnoMesReferencia = anoMesReferenciaColecao;
				}
			}

			// Quando não houver intervalo de parcelamento inicial e final
			debitosImovel[INICIO_INTERVALO_PARCELAMENTO] = Util
					.formatarAnoMesParaMesAno(menorAnoMesReferencia);
			if (maiorAnoMesReferencia != 0) {
				if ((fimIntervaloParcelamento == null || fimIntervaloParcelamento
						.equals(""))) {
					debitosImovel[FIM_INTERVALO_PARCELAMENTO] = Util
							.formatarAnoMesParaMesAno(maiorAnoMesReferencia);
				}
			} else {
				debitosImovel[FIM_INTERVALO_PARCELAMENTO] = "00/0000";
			}
		} else {
			// [FS0015] Verificar existência de contas
			// Caso mão existam contas para o imóvel deixar indisponível o campo
			// mês/ano
			// de referência inicial e mês/ano de referência final
			debitosImovel[INICIO_INTERVALO_PARCELAMENTO] = "";
			debitosImovel[FIM_INTERVALO_PARCELAMENTO] = "";
		}

		return debitosImovel;
	}

	/**
	 * Este caso de uso permite gerar e emitir o extrato dos débitos de um
	 * imóvel
	 * 
	 * [UC0444] Gerar e Emitir Extrato de Débitos
	 * 
	 * Este caso de uso permite gerar atividade de ação de cobrança com base nos
	 * parâmetros recebidos
	 * 
	 * [UC0251] Gerar Atividade de Ação de Cobranca
	 * 
	 * Gera o documento de cobrança
	 * 
	 * gerarDocumentoCobranca
	 * 
	 * @author COMPESA
	 * @date 08/09/2006
	 * 
	 * @param imovel
	 * @param indicadorGeracaoTaxaCobranca
	 * @param colecaoContas
	 * @param colecaoGuiasPagamento
	 * @param colecaoDebitosACobrar
	 * @param valorAcrescimosImpontualidade
	 * @param valorDesconto
	 * @param anoMesReferenciaDebito
	 * @param documentoEmissaoForma
	 * @param documentoTipo
	 * @param cobrancaAcaoAtividadeComando
	 * @param cobrancaAcaoAtividadeCronograma
	 * @param empresa
	 * @param cobrancaCriterio
	 * @param cobrancaAcao
	 * @param valorDocumento
	 * @param usuario 
	 * @throws ControladorException
	 */
	// Vai ser um caso de uso a parte, depois colocar o número nos casos de usos
	// e no comentário
	public ExtratoDebitoRelatorioHelper gerarDocumentoCobranca(Imovel imovel,
			Short indicadorGeracaoTaxaCobranca,
			Collection<ContaValoresHelper> colecaoContas,
			Collection<GuiaPagamentoValoresHelper> colecaoGuiasPagamento,
			Collection<DebitoACobrar> colecaoDebitosACobrar,
			BigDecimal valorAcrescimosImpontualidade, BigDecimal valorDesconto,
			Integer anoMesReferenciaDebito,
			DocumentoEmissaoForma documentoEmissaoForma,
			DocumentoTipo documentoTipo,
			CobrancaAcaoAtividadeComando cobrancaAcaoAtividadeComando,
			CobrancaAcaoAtividadeCronograma cobrancaAcaoAtividadeCronograma,
			Empresa empresa, CobrancaCriterio cobrancaCriterio,
			CobrancaAcao cobrancaAcao, BigDecimal valorDocumento,
			Date dataAtual,
			Collection<CreditoARealizar> colecaoCreditoARealizar,
			Cliente cliente,ResolucaoDiretoria resolucaoDiretoria, Date dataEmissaoPredecessor,
			Collection<DebitoCreditoParcelamentoHelper> colecaoAntecipacaoDebitosDeParcelamento,
			Collection<DebitoCreditoParcelamentoHelper> colecaoAntecipacaoCreditosDeParcelamento, Usuario usuario, Short indicadorClienteImovel) 
			throws ControladorException {

		ExtratoDebitoRelatorioHelper extratoDebitoRelatorioHelper = new ExtratoDebitoRelatorioHelper(
				new ArrayList(), new ArrayList(), new ArrayList(),
				new ArrayList());

		// Pesquisando Sistemas Parâmetros
		SistemaParametro sistemaParametro = this.getControladorUtil()
				.pesquisarParametrosDoSistema();

		// Item 1
		// Variável que vai armazenar o valor da taxa para o cálculo do valor do
		// débito
		BigDecimal valorTaxa = new BigDecimal("0.00");

		/*
		 * Caso tenha sido passado o parâmetro imovel, bem como esteja indicado que é para gerar a taxa de cobrança
		 * (indicador de geração de taxa de cobrança = 1 ou 3), o sistema gera o debito a cobrar para o imóvel
		 * relativo a taxa de cobrança
		 */
		if (indicadorGeracaoTaxaCobranca.intValue() != ConstantesSistema.NAO.intValue() && 
			imovel != null) {

			valorTaxa = this.obterValorTaxaDocumentoCobranca(imovel,
			indicadorGeracaoTaxaCobranca);

			DebitoTipo debitoTipo = null;

			// Pesquisa o tipo de débito no sistema
			try {

				debitoTipo = repositorioCobranca
						.pesquisarDebitoTipo(DebitoTipo.TAXA_COBRANCA);

			} catch (ErroRepositorioException ex) {
				ex.printStackTrace();
				throw new ControladorException("erro.sistema", ex);
			}

			// Cria a variável que vai armazenar a situação de crédito/débito
			DebitoCreditoSituacao debitoCreditoSituacaoAtual = new DebitoCreditoSituacao();
			debitoCreditoSituacaoAtual.setId(DebitoCreditoSituacao.NORMAL);

			// Cria a variável que vai armazenar a forma de cobrança
			CobrancaForma cobrancaForma = new CobrancaForma();
			cobrancaForma.setId(CobrancaForma.COBRANCA_EM_CONTA);

			/** Cria o débito a cobrar geral */
			DebitoACobrarGeral debitoACobrarGeral = new DebitoACobrarGeral();
			debitoACobrarGeral.setIndicadorHistorico(new Short("2"));
			debitoACobrarGeral.setUltimaAlteracao(new Date());
			Integer idDebitoACobrarGeral = (Integer) getControladorUtil()
					.inserir(debitoACobrarGeral);

			// Cria o débito a cobrar
			// Seta as informações necessárias para criar o débito a cobrar
			DebitoACobrar debitoACobrar = new DebitoACobrar();
			debitoACobrar.setImovel(imovel);
			debitoACobrar.setDebitoTipo(debitoTipo);
			debitoACobrar.setGeracaoDebito(new Date());
			debitoACobrar.setAnoMesReferenciaDebito(anoMesReferenciaDebito);
			debitoACobrar.setAnoMesCobrancaDebito(sistemaParametro
					.getAnoMesArrecadacao());
			// debitoACobrar.setAnoMesReferenciaContabil(sistemaParametro
			//.getAnoMesFaturamento());
			// Alterado por: Rômulo Aurélio 17/03/2009
	        // Analista responsavel: Rosana Carvalho
			
			int anoMesParametros = sistemaParametro.getAnoMesFaturamento();
	        int anoMesCorrente = Util.getAnoMesComoInt(new Date());
	        
	        //anoMesReferenciaContabil recebe o maior valor entre ano/mes da data corrente
	        //e o ano/mes de referencia do faturamento
	        if(anoMesParametros > anoMesCorrente){
		        debitoACobrar.setAnoMesReferenciaContabil(anoMesParametros);
	        }else{
		        debitoACobrar.setAnoMesReferenciaContabil(anoMesCorrente);	        	
	        }
	        
			debitoACobrar.setValorDebito(valorTaxa);
			debitoACobrar.setNumeroPrestacaoDebito((new Short("1"))
					.shortValue());
			debitoACobrar.setNumeroPrestacaoCobradas((new Short("0"))
					.shortValue());
			debitoACobrar.setLocalidade(imovel.getLocalidade());
			debitoACobrar.setQuadra(imovel.getQuadra());
			debitoACobrar.setCodigoSetorComercial(imovel.getSetorComercial()
					.getCodigo());
			debitoACobrar.setNumeroQuadra(imovel.getQuadra().getNumeroQuadra());
			debitoACobrar.setNumeroLote(imovel.getLote());
			debitoACobrar.setNumeroSubLote(imovel.getSubLote());
			debitoACobrar.setPercentualTaxaJurosFinanciamento(new BigDecimal(
					"0.00"));
			debitoACobrar.setRegistroAtendimento(null);
			debitoACobrar.setOrdemServico(null);
			debitoACobrar.setFinanciamentoTipo(debitoTipo
					.getFinanciamentoTipo());
			debitoACobrar.setLancamentoItemContabil(debitoTipo
					.getLancamentoItemContabil());
			debitoACobrar
					.setDebitoCreditoSituacaoAtual(debitoCreditoSituacaoAtual);
			debitoACobrar.setDebitoCreditoSituacaoAnterior(null);
			debitoACobrar.setParcelamentoGrupo(null);
			debitoACobrar.setCobrancaForma(cobrancaForma);
			debitoACobrar.setUltimaAlteracao(new Date());
			debitoACobrar.setId(idDebitoACobrarGeral);
			debitoACobrar.setDebitoACobrarGeral(debitoACobrarGeral);

			getControladorUtil().inserir(debitoACobrar);

			// [UC0108] Obter Quantidade de Economias por Categoria
			Collection<Categoria> colecaoCategoriasImovel = getControladorImovel()
					.obterQuantidadeEconomiasCategoria(imovel);

			// [UC0185] Obter Valor por Categoria, passando o valor da taxa
			Collection<BigDecimal> colecaoValorePorCategoria = getControladorImovel()
					.obterValorPorCategoria(colecaoCategoriasImovel, valorTaxa);

			// Cria as iterações de categoria e valor
			Iterator iteratorCategoria = colecaoCategoriasImovel.iterator();
			Iterator iteratorValorPorCategoria = colecaoValorePorCategoria
					.iterator();

			// Inclui na tabela DEBITO_A_COBRAR_CATEGORIA a(s) categoria(s) e
			// sua(s)
			// respectiva(s) quantidade(s) de economia retornados pels [UC0108]
			// e os
			// valores retornados pelo [UC0185] para cada categoria
			while (iteratorCategoria.hasNext()) {
				// Recupera a categoria
				Categoria categoria = (Categoria) iteratorCategoria.next();

				// Recupera o valor da categoria
				BigDecimal valorPorCategoria = (BigDecimal) iteratorValorPorCategoria
						.next();

				// Cria o débito a cobrar categoria
				DebitoACobrarCategoria debitoACobrarCategoria = new DebitoACobrarCategoria();

				DebitoACobrarCategoriaPK debitoACobrarCategoriaPK = new DebitoACobrarCategoriaPK(
						debitoACobrar, categoria);
				debitoACobrarCategoria.setComp_id(debitoACobrarCategoriaPK);
				debitoACobrarCategoria.setQuantidadeEconomia(categoria
						.getQuantidadeEconomiasCategoria());
				debitoACobrarCategoria.setValorCategoria(valorPorCategoria);
				debitoACobrarCategoria.setUltimaAlteracao(new Date());

				// Inserindo o DEBITO_A_COBRAR_CATEGORIA no banco de dados
				getControladorUtil().inserir(debitoACobrarCategoria);
			}
		}
		// Fim item 1

		// Item 2
		// Cria o documento de cobrança
		// Seta as informações necessárias para criar o documento de cobrança
		CobrancaDocumento documentoCobranca = new CobrancaDocumento();

		documentoCobranca.setDocumentoTipo(documentoTipo);
		// Seta com qualquer valor para inserir, depois da inserção pegar o id
		// do documentoCobranca gerado para atualizar o mesmo registro
		documentoCobranca.setNumeroSequenciaDocumento((new Integer(1))
				.intValue());
		documentoCobranca
				.setCobrancaAcaoAtividadeComando(cobrancaAcaoAtividadeComando);
		documentoCobranca
				.setCobrancaAcaoAtividadeCronograma(cobrancaAcaoAtividadeCronograma);

		
		documentoCobranca.setIndicadorClienteImovel(indicadorClienteImovel);
		
		// [RM5405]
		if(usuario != null){
			documentoCobranca.setUsuario(usuario);
		}

		if (imovel != null) {
			documentoCobranca.setImovel(imovel);
			documentoCobranca.setLocalidade(imovel.getLocalidade());
			documentoCobranca.setQuadra(imovel.getQuadra());
			documentoCobranca.setCodigoSetorComercial(imovel.getSetorComercial().getCodigo());
			documentoCobranca.setNumeroQuadra(imovel.getQuadra().getNumeroQuadra());
			documentoCobranca.setImovelPerfil(imovel.getImovelPerfil());
			
			documentoCobranca.setLigacaoAguaSituacao(imovel.getLigacaoAguaSituacao());
			documentoCobranca.setLigacaoEsgotoSituacao(imovel.getLigacaoEsgotoSituacao());
			
			//adicionado por Vivianne Sousa - 13/08/2009 - Francisco 
			//De acordo com o metodo ControladorImovel.obterPrincipalCategoriaImovel
			// caso seja a empresa FEBRABAN, a categoria principal sera a que tiver o maior codigo,
			// caso contrario, a principal será a que tiver menor codigo						
			boolean ehFEBRABAN = sistemaParametro.getCodigoEmpresaFebraban().equals(
					SistemaParametro.CODIGO_EMPRESA_FEBRABAN_CAERN); 
			try {
				Integer idCategoria = repositorioImovel.obterIdCategoriaPrincipal(imovel.getId(), ehFEBRABAN);
				Categoria categoria = new Categoria();
				categoria.setId(idCategoria);
				documentoCobranca.setCategoria(categoria);
				
				//pesquisa os imovel para ser usado para gravar o Resumo Cobrança Ação						
				Integer idEsferaPoder = repositorioImovel.obterIdEsferaPoder(imovel.getId());
				EsferaPoder esferaPoder = new EsferaPoder();
				esferaPoder.setId(idEsferaPoder);
				documentoCobranca.setEsferaPoder(esferaPoder);
				
			} catch (ErroRepositorioException e) {
				e.printStackTrace();
				throw new ControladorException("erro.sistema", e);
			}
			
		}

		documentoCobranca.setEmissao(dataAtual);
		documentoCobranca.setValorTaxa(new BigDecimal("0.00"));
	    documentoCobranca.setValorDocumento(valorDocumento);
			
		

		// Inicio Alterado por Sávio Luiz Data:27/07/2007

		/*
		 * Alterado por Raphael Rossiter em 18/09/2007 (Analistas: Aryed Lins e
		 * Rosana Carvalho) OBJ: Gravar o valor dos acréscimos e o valor do
		 * desconto para os documentos de cobranca que forem de EXTRATO DE
		 * DÉBITO
		 */
		if (documentoTipo.getId() != null
				&& (documentoTipo.getId().equals(DocumentoTipo.CARTA_COBRANCA_SUPRIMIDO)
						|| documentoTipo.getId().equals(DocumentoTipo.CARTA_COBRANCA_CORTADO)
						|| documentoTipo.getId().equals(DocumentoTipo.CARTA_COBRANCA_LIGADO) 
						|| documentoTipo.getId().equals(DocumentoTipo.EXTRATO_DE_DEBITO)
						|| documentoTipo.getId().equals(DocumentoTipo.CARTA_SOLIDARIEDADE_DA_CRIANCA)
						|| documentoTipo.getId().equals(DocumentoTipo.CARTA_DE_FINAL_DE_ANO_2009))) {

			documentoCobranca.setValorAcrescimos(valorAcrescimosImpontualidade);
			documentoCobranca.setValorDesconto(valorDesconto);

		} else {
			documentoCobranca.setValorAcrescimos(new BigDecimal("0.00"));
		}
		// Fim Alterado por Sávio Luiz Data:27/07/2007

		documentoCobranca.setDocumentoEmissaoForma(documentoEmissaoForma);
		documentoCobranca.setMotivoNaoEntregaDocumento(null);

		documentoCobranca.setEmpresa(empresa);
		documentoCobranca.setUltimaAlteracao(new Date());
		documentoCobranca.setCobrancaCriterio(cobrancaCriterio);
		documentoCobranca.setCobrancaAcao(cobrancaAcao);
		
		CobrancaAcaoSituacao cas = new CobrancaAcaoSituacao();
		if (cobrancaAcao != null && cobrancaAcao.getServicoTipo() != null){
			cas.setId(CobrancaAcaoSituacao.PENDENTE);			
		} else {
			cas.setId(CobrancaAcaoSituacao.ENVIADOS);
			documentoCobranca.setDataSituacaoAcao(dataAtual);
		}
		documentoCobranca.setCobrancaAcaoSituacao(cas);
		
		CobrancaDebitoSituacao cds = new CobrancaDebitoSituacao();
		if ((colecaoContas != null && !colecaoContas.isEmpty()) ||
			(colecaoDebitosACobrar != null && !colecaoDebitosACobrar.isEmpty()) ||
			(colecaoGuiasPagamento != null && !colecaoGuiasPagamento.isEmpty()) ||
			(colecaoCreditoARealizar != null && !colecaoCreditoARealizar.isEmpty())){
			cds.setId(CobrancaDebitoSituacao.PENDENTE);	
		} else {
			cds.setId(CobrancaDebitoSituacao.SEM_DEBITOS);
		}	
		documentoCobranca.setCobrancaDebitoSituacao(cds);
		
		documentoCobranca.setCliente(cliente);
		
		documentoCobranca.setResolucaoDiretoria(resolucaoDiretoria);
		
		documentoCobranca.setDataEmissaoPredecessor(dataEmissaoPredecessor);
		
		// Recupera o código do documento de cobrança
		Integer idDocumentoCobranca = (Integer) getControladorUtil().inserir(
				documentoCobranca);

		// Seta o código no objeto
		documentoCobranca.setId(idDocumentoCobranca);

		/** Atualizado por pedro alexandre dia 16/11/2006 */
		extratoDebitoRelatorioHelper.setDocumentoCobranca(documentoCobranca);
		// Fim item 2
		

		// Item 3
		// Para cada ocorrência das listas recebidas ( conts, guias de
		// pagamento, débito a cobrar),
		// o sistema gera os items do documento de cobrança na tabela
		// COBRANCA_DOCUMENTO_ITEM

		// Cria a variável que vai armazenar os itens de cobrança de documento
		CobrancaDocumentoItem cobrancaDocumentoItem = new CobrancaDocumentoItem();

		// Contas
		DocumentoTipo documentoTipoConta = new DocumentoTipo();
		documentoTipoConta.setId(DocumentoTipo.CONTA);
		BigDecimal valorAcrescimos = null;
		BigDecimal valorImpostos = null;
		if (colecaoContas != null && !colecaoContas.isEmpty()) {
			
			valorImpostos = new BigDecimal("0.00");
			
			// Cria os itens de cobrança de documento para contas	
			for (ContaValoresHelper contaValorHelper : colecaoContas) {
				cobrancaDocumentoItem = new CobrancaDocumentoItem();
				valorAcrescimos = new BigDecimal("0.00");
				// Cria a variável que vai conter o valor do item cobrado
				BigDecimal valorItemCobrado = new BigDecimal("0.00");

				// Calcula o valor do item cobrado
				valorItemCobrado = valorItemCobrado.add(contaValorHelper
						.getConta().getValorAgua());
				valorItemCobrado = valorItemCobrado.add(contaValorHelper
						.getConta().getValorEsgoto());
				valorItemCobrado = valorItemCobrado.add(contaValorHelper
						.getConta().getDebitos());
				valorItemCobrado = valorItemCobrado.subtract(contaValorHelper
						.getConta().getValorCreditos());

				if (contaValorHelper.getConta().getValorImposto() != null) {
					valorItemCobrado = valorItemCobrado
							.subtract(contaValorHelper.getConta()
									.getValorImposto());
					
					valorImpostos = Util.somaBigDecimal(valorImpostos,contaValorHelper.getConta().getValorImposto());
					
				}

				// alterado por Sávio Luiz data:03/04/2007
				if (contaValorHelper.getValorMulta() != null) {
					valorAcrescimos = valorAcrescimos.add(contaValorHelper
							.getValorMulta());
				}
				if (contaValorHelper.getValorJurosMora() != null) {
					valorAcrescimos = valorAcrescimos.add(contaValorHelper
							.getValorJurosMora());
				}
				if (contaValorHelper.getValorAtualizacaoMonetaria() != null) {
					valorAcrescimos = valorAcrescimos.add(contaValorHelper
							.getValorAtualizacaoMonetaria());
				}

				// Caso seja extrato de débito conta não deve-se gerar
				// acréscimos
				// CDDO_VLACESCIMOS e CDIT_VLACRESCIMOS
				if (valorAcrescimosImpontualidade != null
						&& valorAcrescimosImpontualidade.equals(new BigDecimal("0.00"))) {
					valorAcrescimos = new BigDecimal("0.00");
				}
				
                cobrancaDocumentoItem.setValorAcrescimos(valorAcrescimos);

                // valoresTotalAcrescimos = valoresTotalAcrescimos
				// .add(valorAcrescimos);

				// Cria o item de documento de cobrança
				cobrancaDocumentoItem.setCobrancaDocumento(documentoCobranca);
				cobrancaDocumentoItem.setDocumentoTipo(documentoTipoConta);
				ContaGeral contaGeral = new ContaGeral();
				if (contaValorHelper.getConta() != null
						&& !contaValorHelper.getConta().equals("")) {
					contaGeral.setId(contaValorHelper.getConta().getId());
					contaGeral.setConta(contaValorHelper.getConta());
					cobrancaDocumentoItem.setContaGeral(contaGeral);
				}
				cobrancaDocumentoItem.setDebitoACobrarGeral(null);
				cobrancaDocumentoItem.setGuiaPagamentoGeral(null);
				cobrancaDocumentoItem.setCreditoARealizarGeral(null);
				cobrancaDocumentoItem.setValorItemCobrado(valorItemCobrado);
				cobrancaDocumentoItem.setUltimaAlteracao(new Date());
				
				// Documento item ja iniciado com situacao de debito PENDENTE
				// Alterado por Francisco, 27/06/08 
				CobrancaDebitoSituacao situacaoDebito = new CobrancaDebitoSituacao();
				situacaoDebito.setId(CobrancaDebitoSituacao.PENDENTE);
				cobrancaDocumentoItem.setCobrancaDebitoSituacao(situacaoDebito);				

				// Inseri o item de documento de cobrança
				getControladorUtil().inserir(cobrancaDocumentoItem);

				extratoDebitoRelatorioHelper
						.getColecaoCobrancaDocumentoItemContas().add(
								cobrancaDocumentoItem);
			}

		}
		
		// Inseri valor total  dos impostos, caso esfera de poder
		// do tipo do cliente seja igual a Federal, caso contrario
		// seta valor com null.
		
		if(documentoCobranca.getCliente()!= null
				&& documentoCobranca.getCliente().getClienteTipo()!= null
					&& documentoCobranca.getCliente().getClienteTipo().getEsferaPoder()!=null
						&& documentoCobranca.getCliente().getClienteTipo().getEsferaPoder().getId()
							.compareTo(EsferaPoder.FEDERAL.intValue())==0){
		
			documentoCobranca.setValorImpostos(valorImpostos);		
		}else{			
			documentoCobranca.setValorImpostos(null);			
		}
		// Débitos a Cobrar
		DocumentoTipo documentoTipoDebito = new DocumentoTipo();
		documentoTipoDebito.setId(DocumentoTipo.DEBITO_A_COBRAR);
		if (colecaoDebitosACobrar != null && !colecaoDebitosACobrar.isEmpty()) {
			// Cria os itens de cobrança de documento para os débitos a cobrar
			for (DebitoACobrar debitoACobrar : colecaoDebitosACobrar) {
				cobrancaDocumentoItem = new CobrancaDocumentoItem();
				valorAcrescimos = new BigDecimal("0.00");
				// Cria a variável que vai conter o valor do item cobrado
				BigDecimal valorItemCobrado = new BigDecimal("0.00");

				// // Calcula o valor da prestação
				// double valorPrestacao = (debitoACobrar.getValorDebito()
				// .doubleValue() / debitoACobrar
				// .getNumeroPrestacaoDebito())
				// * debitoACobrar.getNumeroPrestacaoCobradas();
				//
				// // Calcula o valor do item cobrado
				// valorItemCobrado = valorItemCobrado.add(debitoACobrar
				// .getValorDebito().subtract(
				// new BigDecimal(valorPrestacao)));

				valorItemCobrado = debitoACobrar.getValorTotalComBonus();

				// cria o item de documento de cobrança
				cobrancaDocumentoItem.setCobrancaDocumento(documentoCobranca);
				cobrancaDocumentoItem.setDocumentoTipo(documentoTipoDebito);
				cobrancaDocumentoItem.setContaGeral(null);
				DebitoACobrarGeral debitoACobrarGeral = new DebitoACobrarGeral();
				debitoACobrarGeral.setDebitoACobrar(debitoACobrar);
				debitoACobrarGeral.setId(debitoACobrar.getId());
				cobrancaDocumentoItem.setDebitoACobrarGeral(debitoACobrarGeral);
				cobrancaDocumentoItem.setGuiaPagamentoGeral(null);
				cobrancaDocumentoItem.setCreditoARealizarGeral(null);
				cobrancaDocumentoItem.setValorItemCobrado(valorItemCobrado);
				cobrancaDocumentoItem.setUltimaAlteracao(new Date());

				// Documento item ja iniciado com situacao de debito PENDENTE
				// Alterado por Francisco, 27/06/08 
				CobrancaDebitoSituacao situacaoDebito = new CobrancaDebitoSituacao();
				situacaoDebito.setId(CobrancaDebitoSituacao.PENDENTE);
				cobrancaDocumentoItem.setCobrancaDebitoSituacao(situacaoDebito);				
				
				cobrancaDocumentoItem.setValorAcrescimos(valorAcrescimos);
				
				// inseri o item de documento de cobrança
				getControladorUtil().inserir(cobrancaDocumentoItem);

				extratoDebitoRelatorioHelper
						.getColecaoCobrancaDocumentoItemDebitosACobrar().add(
								cobrancaDocumentoItem);
			}
		}

		// Guias de Pagamento
		DocumentoTipo documentoTipoGuia = new DocumentoTipo();
		documentoTipoGuia.setId(DocumentoTipo.GUIA_PAGAMENTO);
		if (colecaoGuiasPagamento != null && !colecaoGuiasPagamento.isEmpty()) {
			// cria os itens de cobrança de documento para as guias de pagamento
			for (GuiaPagamentoValoresHelper guiaPagamentoValorHelper : colecaoGuiasPagamento) {
				cobrancaDocumentoItem = new CobrancaDocumentoItem();
				valorAcrescimos = new BigDecimal("0.00");

				// cria o item de documento de cobrança
				cobrancaDocumentoItem.setCobrancaDocumento(documentoCobranca);
				cobrancaDocumentoItem.setDocumentoTipo(documentoTipoGuia);
				cobrancaDocumentoItem.setContaGeral(null);
				cobrancaDocumentoItem.setDebitoACobrarGeral(null);
				cobrancaDocumentoItem.setCreditoARealizarGeral(null);
				GuiaPagamentoGeral guiaPagamentoGeral = new GuiaPagamentoGeral();
				guiaPagamentoGeral.setGuiaPagamento(guiaPagamentoValorHelper
						.getGuiaPagamento());
				if (guiaPagamentoValorHelper.getGuiaPagamento() != null
						&& !guiaPagamentoValorHelper.getGuiaPagamento().equals(
								"")) {
					guiaPagamentoGeral.setId(guiaPagamentoValorHelper
							.getGuiaPagamento().getId());
				}

				// alterado por Sávio Luiz data:03/04/2007
				if (guiaPagamentoValorHelper.getValorMulta() != null) {
					valorAcrescimos = valorAcrescimos
							.add(guiaPagamentoValorHelper.getValorMulta());
				}
				if (guiaPagamentoValorHelper.getValorJurosMora() != null) {
					valorAcrescimos = valorAcrescimos
							.add(guiaPagamentoValorHelper.getValorJurosMora());
				}
				if (guiaPagamentoValorHelper.getValorAtualizacaoMonetaria() != null) {
					valorAcrescimos = valorAcrescimos
							.add(guiaPagamentoValorHelper
									.getValorAtualizacaoMonetaria());
				}
				cobrancaDocumentoItem.setValorAcrescimos(valorAcrescimos);
				// valoresTotalAcrescimos = valoresTotalAcrescimos
				// .add(valorAcrescimos);

				cobrancaDocumentoItem.setGuiaPagamentoGeral(guiaPagamentoGeral);
				cobrancaDocumentoItem
						.setValorItemCobrado(guiaPagamentoValorHelper
								.getGuiaPagamento().getValorDebito());
				cobrancaDocumentoItem.setUltimaAlteracao(new Date());

				// Documento item ja iniciado com situacao de debito PENDENTE
				// Alterado por Francisco, 27/06/08 
				CobrancaDebitoSituacao situacaoDebito = new CobrancaDebitoSituacao();
				situacaoDebito.setId(CobrancaDebitoSituacao.PENDENTE);
				cobrancaDocumentoItem.setCobrancaDebitoSituacao(situacaoDebito);				
				
				// inseri o item de documento de cobrança
				getControladorUtil().inserir(cobrancaDocumentoItem);
				extratoDebitoRelatorioHelper
						.getColecaoCobrancaDocumentoItemGuiasPagamento().add(
								cobrancaDocumentoItem);
			}
		}

		// Crédito a Realizar
		DocumentoTipo documentoTipoCredito = new DocumentoTipo();
		documentoTipoCredito.setId(DocumentoTipo.CREDITO_A_REALIZAR);
		
		if (colecaoCreditoARealizar != null
				&& !colecaoCreditoARealizar.isEmpty()) {
			// Cria os itens de cobrança de documento para os creditos a
			// realizar
			for (CreditoARealizar creditoARealizar : colecaoCreditoARealizar) {
				cobrancaDocumentoItem = new CobrancaDocumentoItem();

				valorAcrescimos = new BigDecimal("0.00");
				
				// cria o item de documento de cobrança
				cobrancaDocumentoItem.setCobrancaDocumento(documentoCobranca);
				cobrancaDocumentoItem.setDocumentoTipo(documentoTipoCredito);
				cobrancaDocumentoItem.setContaGeral(null);
				CreditoARealizarGeral creditoARealizarGeral = new CreditoARealizarGeral();
				creditoARealizarGeral.setCreditoARealizar(creditoARealizar);
				creditoARealizarGeral.setId(creditoARealizar.getId());
				cobrancaDocumentoItem
						.setCreditoARealizarGeral(creditoARealizarGeral);
				cobrancaDocumentoItem.setGuiaPagamentoGeral(null);
				cobrancaDocumentoItem.setDebitoACobrarGeral(null);
				cobrancaDocumentoItem.setValorItemCobrado(creditoARealizar
						.getValorTotalComBonus());
				cobrancaDocumentoItem.setUltimaAlteracao(new Date());

				// Documento item ja iniciado com situacao de debito PENDENTE
				// Alterado por Francisco, 27/06/08 
				CobrancaDebitoSituacao situacaoDebito = new CobrancaDebitoSituacao();
				situacaoDebito.setId(CobrancaDebitoSituacao.PENDENTE);
				cobrancaDocumentoItem.setCobrancaDebitoSituacao(situacaoDebito);				
				
				cobrancaDocumentoItem.setValorAcrescimos(valorAcrescimos);
				
				// inseri o item de documento de cobrança
				getControladorUtil().inserir(cobrancaDocumentoItem);

				extratoDebitoRelatorioHelper
						.getColecaoCobrancaDocumentoItemCreditoARealizar().add(
								cobrancaDocumentoItem);
			}
		}

		// Fim item 3
		
		
		
		/*
		 * ANTECIPAÇÃO DE PARCELAS DE PARCELAMENTO (DÉBITOS)
		 */
		if (colecaoAntecipacaoDebitosDeParcelamento != null &&
			!colecaoAntecipacaoDebitosDeParcelamento.isEmpty()){
			
			//COLEÇÃO POR PARCELAMENTO
			Iterator itAntecipacaoDebitoDeParcelamento = colecaoAntecipacaoDebitosDeParcelamento.iterator();
			DebitoCreditoParcelamentoHelper antecipacaoDebitoDeParcelamento = null;
			
			while (itAntecipacaoDebitoDeParcelamento.hasNext()){
				
				antecipacaoDebitoDeParcelamento = (DebitoCreditoParcelamentoHelper) 
				itAntecipacaoDebitoDeParcelamento.next();
				
				//COLEÇÃO POR DÉBITOS A COBRAR DO PARCELAMENTO
				Collection<DebitoACobrar> colecaoDebitosACobrarAntecipacaoDeParcelamento = 
				antecipacaoDebitoDeParcelamento.getColecaoDebitoACobrarParcelamento();
				
				for (DebitoACobrar debitoACobrar : colecaoDebitosACobrarAntecipacaoDeParcelamento) {
					
					cobrancaDocumentoItem = new CobrancaDocumentoItem();
					
					BigDecimal valorItemCobrado = debitoACobrar.getValorAntecipacaoParcela(
					antecipacaoDebitoDeParcelamento.getQuantidadeAntecipacaoParcelas());

					// cria o item de documento de cobrança
					cobrancaDocumentoItem.setCobrancaDocumento(documentoCobranca);
					cobrancaDocumentoItem.setDocumentoTipo(documentoTipoDebito);
					cobrancaDocumentoItem.setContaGeral(null);
					DebitoACobrarGeral debitoACobrarGeral = new DebitoACobrarGeral();
					debitoACobrarGeral.setDebitoACobrar(debitoACobrar);
					debitoACobrarGeral.setId(debitoACobrar.getId());
					cobrancaDocumentoItem.setDebitoACobrarGeral(debitoACobrarGeral);
					cobrancaDocumentoItem.setGuiaPagamentoGeral(null);
					cobrancaDocumentoItem.setCreditoARealizarGeral(null);
					cobrancaDocumentoItem.setValorItemCobrado(valorItemCobrado);
					cobrancaDocumentoItem.setUltimaAlteracao(new Date());

					CobrancaDebitoSituacao situacaoDebito = new CobrancaDebitoSituacao();
					situacaoDebito.setId(CobrancaDebitoSituacao.PENDENTE);
					cobrancaDocumentoItem.setCobrancaDebitoSituacao(situacaoDebito);				
					
					cobrancaDocumentoItem.setValorAcrescimos(new BigDecimal("0.00"));
					
					//QUANTIDADE DE PARCELAS ANTECIPADAS
					cobrancaDocumentoItem.setNumeroParcelasAntecipadas(antecipacaoDebitoDeParcelamento.getQuantidadeAntecipacaoParcelas());
					
					// inseri o item de documento de cobrança
					getControladorUtil().inserir(cobrancaDocumentoItem);

					extratoDebitoRelatorioHelper
							.getColecaoCobrancaDocumentoItemDebitosACobrar().add(
									cobrancaDocumentoItem);
				}
			}
		}

		
		/*
		 * ANTECIPAÇÃO DE PARCELAS DE PARCELAMENTO (CRÉDITO)
		 */
		if (colecaoAntecipacaoCreditosDeParcelamento != null &&
			!colecaoAntecipacaoCreditosDeParcelamento.isEmpty()){
			
			//COLEÇÃO POR PARCELAMENTO
			Iterator itAntecipacaoCreditosDeParcelamento = colecaoAntecipacaoCreditosDeParcelamento.iterator();
			DebitoCreditoParcelamentoHelper antecipacaoCreditosDeParcelamento = null;
			
			while (itAntecipacaoCreditosDeParcelamento.hasNext()){
				
				antecipacaoCreditosDeParcelamento = (DebitoCreditoParcelamentoHelper) 
				itAntecipacaoCreditosDeParcelamento.next();
				
				//COLEÇÃO POR CRÉDITOS A REALIZAR DO PARCELAMENTO
				Collection<CreditoARealizar> colecaoCreditosARealizarAntecipacaoDeParcelamento = 
			    antecipacaoCreditosDeParcelamento.getColecaoCreditoARealizarParcelamento();
				
				for (CreditoARealizar creditoARealizar : colecaoCreditosARealizarAntecipacaoDeParcelamento) {
					
					cobrancaDocumentoItem = new CobrancaDocumentoItem();

					cobrancaDocumentoItem.setCobrancaDocumento(documentoCobranca);
					cobrancaDocumentoItem.setDocumentoTipo(documentoTipoCredito);
					cobrancaDocumentoItem.setContaGeral(null);
					CreditoARealizarGeral creditoARealizarGeral = new CreditoARealizarGeral();
					creditoARealizarGeral.setCreditoARealizar(creditoARealizar);
					creditoARealizarGeral.setId(creditoARealizar.getId());
					cobrancaDocumentoItem
							.setCreditoARealizarGeral(creditoARealizarGeral);
					cobrancaDocumentoItem.setGuiaPagamentoGeral(null);
					cobrancaDocumentoItem.setDebitoACobrarGeral(null);
					
					cobrancaDocumentoItem.setValorItemCobrado(creditoARealizar
					.getValorAntecipacaoParcela(Integer.valueOf(antecipacaoCreditosDeParcelamento
					.getQuantidadeAntecipacaoParcelas())));
					
					cobrancaDocumentoItem.setUltimaAlteracao(new Date());

					CobrancaDebitoSituacao situacaoDebito = new CobrancaDebitoSituacao();
					situacaoDebito.setId(CobrancaDebitoSituacao.PENDENTE);
					cobrancaDocumentoItem.setCobrancaDebitoSituacao(situacaoDebito);				
					
					cobrancaDocumentoItem.setValorAcrescimos(new BigDecimal("0.00"));
					
					//QUANTIDADE DE PARCELAS ANTECIPADAS
					cobrancaDocumentoItem.setNumeroParcelasAntecipadas(antecipacaoCreditosDeParcelamento.getQuantidadeAntecipacaoParcelas());
					
					// inseri o item de documento de cobrança
					getControladorUtil().inserir(cobrancaDocumentoItem);

					extratoDebitoRelatorioHelper
							.getColecaoCobrancaDocumentoItemCreditoARealizar().add(
									cobrancaDocumentoItem);
				}
			}
		}	
			
			
		
		// atualiza o valor dos acrescimos e do nuumero do sequencial do
		// documento de cobrança
		// Atualiza o número do sequencial do documento com o código do
		// documento de cobrança gerado
		documentoCobranca.setNumeroSequenciaDocumento(documentoCobranca.getId()
				.intValue());

		// Atualiza documento cobrança na base de dados
		getControladorUtil().atualizar(documentoCobranca);

		// Item 4
		// Caso o tipo de serviço da ação de cobrança(SVTP_ID da tabela
		// COBRANCA_ACAO)
		// tenha um valor diferente de nulo, o sistema gera a ordem de serviço
		// referente
		// ao documento de cobrança
		if (cobrancaAcao != null) {
			if (cobrancaAcao.getServicoTipo() != null) {

				/*
				 * RegistroAtendimento registroAtendimento = new
				 * RegistroAtendimento(); registroAtendimento.setId(0);
				 * OrdemServico ordemServico = new OrdemServico(new Date(),
				 * registroAtendimento, cobrancaAcao.getServicoTipo(),
				 * documentoCobranca);
				 * getControladorUtil().inserir(ordemServico);
				 */
				OrdemServico ordemServico = new OrdemServico();
				ordemServico.setCobrancaDocumento(documentoCobranca);
				ordemServico.setServicoTipo(cobrancaAcao.getServicoTipo());
				ordemServico.setImovel(imovel);
				ordemServico.setDataEmissao(dataAtual);
				

				getControladorOrdemServico().gerarOrdemServicoSemValidacao(
						ordemServico, imovel.getLocalidade().getId(),
						Usuario.USUARIO_BATCH);
			}
		}
		// Fim item 4

		return extratoDebitoRelatorioHelper;
	}

	/**
	 * Este caso de uso permite iniciar processos batch de faturamento ou
	 * cobrança previdamento comandados e processos mensais ou eventuais
	 * 
	 * [UC0001] - Iniciar Processo
	 * 
	 * Este subfluxo inicia os processo batch de cobrança do sistema
	 * 
	 * [SB0002] - Iniciar Process de Cobrança Comandado
	 * 
	 * @author Rodrigo Silveira
	 * @date 17/08/2006
	 * 
	 * @return
	 * @throws ErroRepositorioException
	 */
	public Collection<CobrancaAcaoAtividadeCronograma> pesquisarCobrancaAcaoAtividadeCronogramaComandadosNaoRealizados()
			throws ControladorException {

		/**
		 * UC[01111] - [SB0002].2
		 * Data de pesquisa = DataAtual - PARM_NNDIASINSPROCCOB
		 */
		SistemaParametro sistemaParametro = getControladorUtil().pesquisarParametrosDoSistema();
		Integer numeroDias = sistemaParametro.getNumeroDiasInserirProcessoCobranca();
		Date dataPesquisa = null;
		
		if(numeroDias!=null){
			Date dataAtual = new Date();
			dataPesquisa = Util.subtrairNumeroDiasDeUmaData(dataAtual, numeroDias);
		}
		
		Collection<CobrancaAcaoAtividadeCronograma> retorno = null;
		try {
			retorno = repositorioCobranca
					.pesquisarCobrancaAcaoAtividadeCronogramaComandadosNaoRealizados(dataPesquisa);
		} catch (ErroRepositorioException ex) {
			ex.printStackTrace();
			throw new ControladorException("erro.sistema", ex);
		}

		return retorno;

	}

	/**
	 * Este caso de uso permite iniciar processos batch de faturamento ou
	 * cobrança previdamento comandados e processos mensais ou eventuais
	 * 
	 * [UC0001] - Iniciar Processo
	 * 
	 * Este subfluxo inicia os processo batch de cobrança do sistema
	 * 
	 * [SB0002] - Iniciar Process de Cobrança Comandado
	 * 
	 * @author Rodrigo Silveira, Carlos Chaves
	 * @date 17/08/2006, 26/12/2012
	 * 
	 * @return
	 * @throws ErroRepositorioException
	 */
	public Collection<CobrancaAcaoAtividadeComando> pesquisarCobrancaAcaoAtividadeCronogramaEventuaisComandadosNaoRealizados()
			throws ControladorException {

		/**
		 * UC[01111] - [SB0002].2
		 * Data de pesquisa = DataAtual - PARM_NNDIASINSPROCCOB
		 */
		SistemaParametro sistemaParametro = getControladorUtil().pesquisarParametrosDoSistema();
		Integer numeroDias = sistemaParametro.getNumeroDiasInserirProcessoCobranca();
		Date dataPesquisa = null;
		
		if(numeroDias!=null){
			Date dataAtual = new Date();
			dataPesquisa = Util.subtrairNumeroDiasDeUmaData(dataAtual, numeroDias);
		}
		
		Collection<CobrancaAcaoAtividadeComando> retorno = null;
		try {
			retorno = repositorioCobranca
					.pesquisarCobrancaAcaoAtividadeCronogramaEventuaisComandadosNaoRealizados(dataPesquisa);
		} catch (ErroRepositorioException ex) {
			ex.printStackTrace();
			throw new ControladorException("erro.sistema", ex);
		}

		return retorno;

	}

	
	/**
	 * Este caso de uso permite gerar e emitir extrato dos débitos de um imóvel
	 * 
	 * [UC0444] Gerar e Emitir Extrato de Débito
	 * 
	 * @author Roberta Costa, Vivianne Sousa
	 * @date 06/09/2006, 11/09/2006 
	 * modificado por Fernanda Almeida [RM5405] - 23/05/2012
	 * @param imovel
	 * @param indicadorGeracaoTaxaCobranca
	 * @param colecaoContas
	 * @param colecaoGuiasPagamento
	 * @param colecaoDebitosACobrar
	 * @param valorAcrescimosImpontualidade
	 * @param valorDesconto
	 * @param valorDocumento
	 * @param colecaoCreditoARealizar
	 * @param cliente
	 * @param resolucaoDiretoria
	 * @param colecaoAntecipacaoDebitosDeParcelamento
	 * @param colecaoAntecipacaoCreditosDeParcelamento
	 * @return
	 * @throws ControladorException
	 */
	//Quando implementar Notas Promissórias acrescentar nos parâmetros
	public ExtratoDebitoRelatorioHelper gerarEmitirExtratoDebito(Imovel imovel,
			Short indicadorGeracaoTaxaCobranca, Collection colecaoContas,
			Collection colecaoGuiasPagamento, Collection colecaoDebitosACobrar,
			BigDecimal valorAcrescimosImpontualidade, BigDecimal valorDesconto,
			BigDecimal valorDocumento,
			Collection<CreditoARealizar> colecaoCreditoARealizar,
			Cliente cliente,ResolucaoDiretoria resolucaoDiretoria,
			Collection<DebitoCreditoParcelamentoHelper> colecaoAntecipacaoDebitosDeParcelamento,
			Collection<DebitoCreditoParcelamentoHelper> colecaoAntecipacaoCreditosDeParcelamento,Usuario usuario, Short indicadorClienteImovel) throws ControladorException {

		// [SB0001] - Gerar Documento de Cobrança
		DocumentoEmissaoForma documentoEmissaoForma = new DocumentoEmissaoForma();
		documentoEmissaoForma.setId(DocumentoEmissaoForma.INDIVIDUAL);

		DocumentoTipo documentoTipo = new DocumentoTipo();
		documentoTipo.setId(DocumentoTipo.EXTRATO_DE_DEBITO);

		ExtratoDebitoRelatorioHelper extratoDebitoRelatorioHelper = this
				.gerarDocumentoCobranca(imovel, indicadorGeracaoTaxaCobranca,
						colecaoContas, colecaoGuiasPagamento,
                        colecaoDebitosACobrar, valorAcrescimosImpontualidade,
						valorDesconto, null, // anoMesReferenciaDebito
						// é
						// nulo
						// para o parcelamento
						documentoEmissaoForma, documentoTipo, null, // cobrancaAcaoAtividadeComando
						// é nulo
						// para o
						// parcelamento
						null, // cobrancaAcaoAtividadeCronograma é nulo para o
						// parcelamento
						null, // Empresa é nulo para o parcelamento
						null, // CobrancaCriterio é nulo para o parcelamento
						null, // CobrancaAcao é nulo para o parcelamento
						valorDocumento, new Date(), colecaoCreditoARealizar,
						cliente, resolucaoDiretoria, null, colecaoAntecipacaoDebitosDeParcelamento, 
						colecaoAntecipacaoCreditosDeParcelamento,usuario, indicadorClienteImovel);

		return extratoDebitoRelatorioHelper;
	}

	/**
	 * 
	 * Este caso de uso permite a emissão de um ou mais documentos de cobrança
	 * 
	 * [UC0476] Emitir Documento de Cobrança - Ordem de Corte
	 * 
	 * @author Ana Maria
	 * @data 07/09/2006
	 * 
	 * @param
	 * @return void
	 */
	public void emitirDocumentoCobrancaOrdemCorte(
			CobrancaAcaoAtividadeCronograma cobrancaAcaoAtividadeCronograma,
			CobrancaAcaoAtividadeComando cobrancaAcaoAtividadeComando,
			Date dataAtualPesquisa, CobrancaAcao acaoCobranca,
			CobrancaGrupo grupoCobranca, CobrancaCriterio cobrancaCriterio)
			throws ControladorException {

		boolean flagFimPesquisa = false;
		final int quantidadeCobrancaDocumento = 1000;
		int quantidadeCobrancaDocumentoInicio = 0;
		StringBuilder cobrancaDocumentoTxt = new StringBuilder();
		int sequencialImpressao = 0;

		System.out.println("***************************************");
		System.out.println("ENTROU NO CORTE ADMINISTRATIVO OU FISICO OU ORDEM DE SUPRESSÃO");
		System.out.println("***************************************");

		Collection colecaoEmitirDocumentoCobranca = null;
		Map<Integer, Integer> mapAtualizaSequencial = null;

		Integer idCronogramaAtividadeAcaoCobranca = null;
		Integer idComandoAtividadeAcaoCobranca = null;
		Integer idAcaoCobranca = null;
		if (cobrancaAcaoAtividadeCronograma != null
				&& cobrancaAcaoAtividadeCronograma.getId() != null) {
			idCronogramaAtividadeAcaoCobranca = cobrancaAcaoAtividadeCronograma
					.getId();
		}
		if (cobrancaAcaoAtividadeComando != null
				&& cobrancaAcaoAtividadeComando.getId() != null) {
			idComandoAtividadeAcaoCobranca = cobrancaAcaoAtividadeComando
					.getId();
		}
		if (acaoCobranca != null && acaoCobranca.getId() != null) {
			idAcaoCobranca = acaoCobranca.getId();
		}
		
		Date dataAtual = new Date();
		String nomeZip = "";
		// caso seja cronograma
		if (idCronogramaAtividadeAcaoCobranca != null) {
			if (idAcaoCobranca.equals(CobrancaAcao.CORTE_ADMINISTRATIVO)) {			
				nomeZip = "ORDEM_CORTE_ADMINISTRATIVO_GRUPO_"
						+ grupoCobranca.getId() + "_"
						+ Util.formatarData(dataAtual) + Util.formatarHoraSemDataSemDoisPontos(dataAtual);		 
			} else if (idAcaoCobranca.equals(CobrancaAcao.CORTE_FISICO)) {
				nomeZip = "ORDEM_CORTE_FISICO_GRUPO_"
						+ grupoCobranca.getId() + "_"
						+ Util.formatarData(dataAtual) + Util.formatarHoraSemDataSemDoisPontos(dataAtual);
			} else if (idAcaoCobranca.equals(CobrancaAcao.CORTE_FISICO_LIGADO_A_REVELIA)) {
				nomeZip = "ORDEM_CORTE_FISICO_LIGADO_A_REVELIA_GRUPO_"
						+ grupoCobranca.getId() + "_"
						+ Util.formatarData(dataAtual) + Util.formatarHoraSemDataSemDoisPontos(dataAtual);
			} else if (idAcaoCobranca.equals(CobrancaAcao.CORTE_ADMINISTRATIVO_LIGADO_A_REVELIA)) {
				nomeZip = "ORDEM_CORTE_ADMINISTRATIVO_LIGADO_A_REVELIA_GRUPO_"
						+ grupoCobranca.getId() + "_"
						+ Util.formatarData(dataAtual) + Util.formatarHoraSemDataSemDoisPontos(dataAtual);
			} else if (idAcaoCobranca.equals(CobrancaAcao.CORTE_FISICO_PUBLICO)) {
				nomeZip = "ORDEM_CORTE_FISICO_PUBLICO_GRUPO_"
						+ grupoCobranca.getId() + "_"
						+ Util.formatarData(dataAtual) + Util.formatarHoraSemDataSemDoisPontos(dataAtual);
			} else if (idAcaoCobranca.equals(CobrancaAcao.RECORTE)) {
				nomeZip = "ORDEM_RECORTE_GRUPO_"
						+ grupoCobranca.getId() + "_"
						+ Util.formatarData(dataAtual) + Util.formatarHoraSemDataSemDoisPontos(dataAtual);
			} else if (idAcaoCobranca.equals(CobrancaAcao.SUPRESSAO_PARCIAL)){
				nomeZip = "ORDEM_SUPRESSAO_PARCIAL_GRUPO_"
					+ grupoCobranca.getId() + "_"
					+ Util.formatarData(dataAtual) + Util.formatarHoraSemDataSemDoisPontos(dataAtual);
			} else if (idAcaoCobranca.equals(CobrancaAcao.SUPRESSAO_TOTAL)){
				nomeZip = "ORDEM_SUPRESSAO_TOTAL_GRUPO_"
					+ grupoCobranca.getId() + "_"
					+ Util.formatarData(dataAtual) + Util.formatarHoraSemDataSemDoisPontos(dataAtual);
			} else if (idAcaoCobranca.equals(CobrancaAcao.FISCALIZACAO_SITUACAO_ESGOTO)){
				nomeZip = "ORDEM_FISCALIZACAO_SITUACAO_ESGOTO_"
					+ grupoCobranca.getId() + "_"
					+ Util.formatarData(dataAtual) + Util.formatarHoraSemDataSemDoisPontos(dataAtual);
			}
			// para o caso de eventual
		} else {
			String descricaoAbrevDocumentoTipo = "";
			if (acaoCobranca != null
					&& acaoCobranca.getDocumentoTipo() != null) {
				descricaoAbrevDocumentoTipo = acaoCobranca
						.getDocumentoTipo().getDescricaoAbreviado();
			}
			String tituloComandoEventual = cobrancaAcaoAtividadeComando
					.getDescricaoTitulo();
	
			nomeZip = descricaoAbrevDocumentoTipo + " "
					+ tituloComandoEventual + " "
					+ Util.formatarData(dataAtual) + Util.formatarHoraSemDataSemDoisPontos(dataAtual);
		}
		nomeZip = nomeZip.replace("/", "_");
		nomeZip = nomeZip.replace(" ", "_");
		
		BufferedWriter out = null;
		ZipOutputStream zos = null;
		File leitura = null;
		
		// pegar o arquivo, zipar pasta e arquivo e escrever no stream
		try {

			System.out.println("***************************************");
			System.out.println("INICO DA CRIACAO DO ARQUIVO");
			System.out.println("***************************************");

			// criar o arquivo zip
			File compactado = new File(nomeZip + ".zip"); // nomeZip
			zos = new ZipOutputStream(new FileOutputStream(
					compactado));

			leitura = new File(nomeZip + ".txt");
			out = new BufferedWriter(new OutputStreamWriter(
					new FileOutputStream(leitura.getAbsolutePath())));
			
		} catch (IOException e) {
			e.printStackTrace();
			throw new ControladorException("erro.sistema", e);
		} catch (Exception e) {
			e.printStackTrace();
			throw new ControladorException("erro.sistema", e);
		}
		
		
		while (!flagFimPesquisa) {
			// map que armazena o sequencial e o numero da
			// conta para no final atualizar todos os
			// sequencias
			mapAtualizaSequencial = new HashMap();

			try {
				colecaoEmitirDocumentoCobranca = repositorioCobranca
						.pesquisarCobrancaDocumentoOrdemCorte(
								idCronogramaAtividadeAcaoCobranca,
								idComandoAtividadeAcaoCobranca,
								dataAtualPesquisa, idAcaoCobranca,
								quantidadeCobrancaDocumentoInicio);
			} catch (ErroRepositorioException ex) {
				ex.printStackTrace();
				throw new ControladorException("erro.sistema", ex);
			}

			if (colecaoEmitirDocumentoCobranca != null
					&& !colecaoEmitirDocumentoCobranca.isEmpty()) {

				System.out.println("***************************************");
				System.out.println("QUANTIDADE DE COBRANÇA:"
						+ colecaoEmitirDocumentoCobranca.size());
				System.out.println("***************************************");

				String nomeCliente = null;
				Collection colecaoCobrancaDocumentoItem = null;

				if (colecaoEmitirDocumentoCobranca.size() < quantidadeCobrancaDocumento) {
					flagFimPesquisa = true;
				} else {
					quantidadeCobrancaDocumentoInicio = quantidadeCobrancaDocumentoInicio + 1000;
				}

				int metadeColecao = 0;
				if (colecaoEmitirDocumentoCobranca.size() % 2 == 0) {
					metadeColecao = colecaoEmitirDocumentoCobranca.size() / 2;
				} else {
					metadeColecao = (colecaoEmitirDocumentoCobranca.size() / 2) + 1;
				}

				System.out.println("***************************************");
				System.out.println("INICIO DIVIDE A COLECAO:");
				System.out.println("***************************************");

				Map<Integer, Map<Object, Object>> mapCobrancaDocumentoOrdenada = dividirColecao(colecaoEmitirDocumentoCobranca);
				System.out.println("***************************************");
				System.out.println("FIM DIVIDE A COLECAO:");
				System.out.println("***************************************");
				EmitirDocumentoCobrancaHelper emitirDocumentoCobrancaHelper = null;
				if (mapCobrancaDocumentoOrdenada != null) {
					int countOrdem = 0;

					while (countOrdem < mapCobrancaDocumentoOrdenada.size()) {
						Map<Object, Object> mapCobrancaoDocumentoDivididas = mapCobrancaDocumentoOrdenada
								.get(countOrdem);

						Iterator iteratorColecaoCobrancaDocumento = mapCobrancaoDocumentoDivididas
								.keySet().iterator();

						while (iteratorColecaoCobrancaDocumento.hasNext()) {

							emitirDocumentoCobrancaHelper = null;

							int situacao = 0;
							emitirDocumentoCobrancaHelper = (EmitirDocumentoCobrancaHelper) iteratorColecaoCobrancaDocumento
									.next();

							/*
							 * Estes objetos auxiliarão na formatação da
							 * inscrição que será composta por informações do
							 * documento de cobrança e do imóvel a ele associado
							 */
							Imovel inscricao = null;
							SetorComercial setorComercialInscricao = null;
							Quadra quadraInscricao = null;
							Localidade localidade = null;

							sequencialImpressao++;

							while (situacao < 2) {
								if (situacao == 0) {
									situacao = 1;
									sequencialImpressao = atualizaSequencial(
											sequencialImpressao, situacao,
											metadeColecao);

								} else {
									emitirDocumentoCobrancaHelper = (EmitirDocumentoCobrancaHelper) mapCobrancaoDocumentoDivididas
											.get(emitirDocumentoCobrancaHelper);
									situacao = 2;
									sequencialImpressao = atualizaSequencial(
											sequencialImpressao, situacao,
											metadeColecao);
								}

								if (emitirDocumentoCobrancaHelper != null) {

									/*
									 * Objeto que será utilizado para armazenar
									 * as informações do documento de cobrança
									 * de acordo com o layout definido no caso
									 * de uso
									 */

									try {

										nomeCliente = this.repositorioClienteImovel
												.pesquisarNomeClientePorImovel(emitirDocumentoCobrancaHelper
														.getIdImovel());

										CobrancaDocumento cobrancaDocumento = new CobrancaDocumento();
										cobrancaDocumento
												.setId(emitirDocumentoCobrancaHelper
														.getIdDocumentoCobranca());

										colecaoCobrancaDocumentoItem = this.repositorioCobranca
												.selecionarCobrancaDocumentoItemReferenteConta(cobrancaDocumento);

									} catch (ErroRepositorioException ex) {
										ex.printStackTrace();
										throw new ControladorException(
												"erro.sistema", ex);
									}

									if (colecaoCobrancaDocumentoItem != null
											&& !colecaoCobrancaDocumentoItem
													.isEmpty()) {
										// Início do processo de geração do
										// arquivo txt

										// LINHA 01
										// ==================================

										/*
										 * Canal ("1") Fonte ("1")
										 */
										cobrancaDocumentoTxt.append("1");
										cobrancaDocumentoTxt.append("1");
										cobrancaDocumentoTxt.append(" ");
										
										// Nome da Localidade
										cobrancaDocumentoTxt
												.append(Util
														.completaString(
																emitirDocumentoCobrancaHelper
																		.getDescricaoLocalidade(),
																20));
										
										if (cobrancaAcaoAtividadeCronograma != null) {
											String ciclo = " CICLO:" + Util.formatarAnoMesParaMesAno(
													cobrancaAcaoAtividadeCronograma.getCobrancaAcaoCronograma()
													.getCobrancaGrupoCronogramaMes().getAnoMesReferencia());
											
											cobrancaDocumentoTxt.append(ciclo);
											cobrancaDocumentoTxt.append(Util.completaString("", 46));
										}else {
											cobrancaDocumentoTxt.append(Util.completaString("", 62));
										}

										cobrancaDocumentoTxt.append(System
												.getProperty("line.separator"));

										// LINHA 02
										// ==================================

										/*
										 * Canal ("-") Fonte ("1")
										 */
										cobrancaDocumentoTxt.append("-");
										cobrancaDocumentoTxt.append("1");
										cobrancaDocumentoTxt.append(" ");

										// Inscrição
										quadraInscricao = new Quadra();
										setorComercialInscricao = new SetorComercial();
										localidade = new Localidade();
										inscricao = new Imovel();

										quadraInscricao
												.setNumeroQuadra(emitirDocumentoCobrancaHelper
														.getNumeroQuadra());
										setorComercialInscricao
												.setCodigo(emitirDocumentoCobrancaHelper
														.getCodigoSetorComercial());
										localidade
												.setId(emitirDocumentoCobrancaHelper
														.getIdLocalidade());
										inscricao.setLocalidade(localidade);
										inscricao
												.setSetorComercial(setorComercialInscricao);
										inscricao.setQuadra(quadraInscricao);
										inscricao
												.setLote(emitirDocumentoCobrancaHelper
														.getLote());
										inscricao
												.setSubLote(emitirDocumentoCobrancaHelper
														.getSubLote());

										cobrancaDocumentoTxt
												.append(Util
														.completaString(
																inscricao
																		.getInscricaoFormatada(),
																20));

										cobrancaDocumentoTxt.append(Util
												.completaString("", 14));

										// Nome do Cliente
										cobrancaDocumentoTxt
												.append(Util.completaString(
														nomeCliente, 50));

										cobrancaDocumentoTxt.append(Util
												.completaString("", 65));

										cobrancaDocumentoTxt.append(System
												.getProperty("line.separator"));

										// LINHA 03
										// ==================================

										/*
										 * Canal ("+") Fonte ("2")
										 */
										cobrancaDocumentoTxt.append("+");
										cobrancaDocumentoTxt.append("2");
										cobrancaDocumentoTxt.append(Util
												.completaString("", 66));

										// Matrícula do imóvel
										String matriculaImovelFormatada = Util
												.retornaMatriculaImovelFormatada(emitirDocumentoCobrancaHelper
														.getIdImovel());

										cobrancaDocumentoTxt
												.append(Util
														.completaString(
																matriculaImovelFormatada,
																10));

										cobrancaDocumentoTxt.append(Util
												.completaString("", 74));

										cobrancaDocumentoTxt.append(System
												.getProperty("line.separator"));

										// LINHA 04
										// ==================================

										String enderecoFormatado = getControladorEndereco()
												.pesquisarEnderecoFormatado(
														emitirDocumentoCobrancaHelper
																.getIdImovel());
										/*
										 * Canal ("-") Fonte ("1")
										 */
										cobrancaDocumentoTxt.append("-");
										cobrancaDocumentoTxt.append("1");
										cobrancaDocumentoTxt.append(" ");

										// Endereço Formatado
										cobrancaDocumentoTxt.append(Util
												.completaString(
														enderecoFormatado, 61));
										cobrancaDocumentoTxt.append("  ");

										// Data de Validade
										if (emitirDocumentoCobrancaHelper
												.getEmissao() != null) {
											if (emitirDocumentoCobrancaHelper
													.getNumeroDiasValidade() != null) {
												cobrancaDocumentoTxt
														.append(Util
																.formatarData(Util
																		.adicionarNumeroDiasDeUmaData(
																				emitirDocumentoCobrancaHelper
																						.getEmissao(),
																				emitirDocumentoCobrancaHelper
																						.getNumeroDiasValidade()
																						.intValue())));
											} else {
												cobrancaDocumentoTxt
														.append(Util
																.formatarData(emitirDocumentoCobrancaHelper
																		.getEmissao()));
											}
										} else {
											cobrancaDocumentoTxt.append(Util
													.completaString("", 10));
										}

										cobrancaDocumentoTxt.append(Util
												.completaString("", 75));

										cobrancaDocumentoTxt.append(System
												.getProperty("line.separator"));

										// LINHA 05
										// ==================================

										/*
										 * Canal ("+") Fonte ("2")
										 */
										cobrancaDocumentoTxt.append("+");
										cobrancaDocumentoTxt.append("2");
										cobrancaDocumentoTxt.append(Util
												.completaString("", 67));

										// Sequencial de impressão
										cobrancaDocumentoTxt.append(Util.completaStringComEspacoAEsquerda(
												"" + emitirDocumentoCobrancaHelper.getNumeroOS(),9));
										//CRC2574 alterado por Vivianne Sousa 19/08/2009 - Francisco 
//											"" + emitirDocumentoCobrancaHelper.getNumeroSequenciaDocumento(),9));

										cobrancaDocumentoTxt.append(Util
												.completaString("", 74));

										cobrancaDocumentoTxt.append(System
												.getProperty("line.separator"));

										// LINHA 06
										// ==================================

										/*
										 * Canal ("-") Fonte ("1")
										 */
										cobrancaDocumentoTxt.append("-");
										cobrancaDocumentoTxt.append("1");
										cobrancaDocumentoTxt.append(" ");

										/*
										 * Quantidades de economias por
										 * categoria: 1º RESIDÊNCIAL 2º
										 * COMERCIAL 3º INDUSTRIAL 4º PÚBLICA
										 */
										Imovel imovel = new Imovel();
										imovel
												.setId(emitirDocumentoCobrancaHelper
														.getIdImovel());
										Collection colecaoCategorias = getControladorImovel()
												.obterQuantidadeEconomiasCategoria(
														imovel);
										String qtdResidencial = "";
										String qtdComercial = "";
										String qtdIndustrial = "";
										String qtdPublico = "";

										if (colecaoCategorias != null
												&& !colecaoCategorias.isEmpty()) {
											Iterator iteratorColecaoCategorias = colecaoCategorias
													.iterator();
											Categoria categoria = null;

											while (iteratorColecaoCategorias
													.hasNext()) {
												categoria = (Categoria) iteratorColecaoCategorias
														.next();

												if (categoria.getId().equals(
														Categoria.RESIDENCIAL)) {
													qtdResidencial = ""
															+ categoria
																	.getQuantidadeEconomiasCategoria();
												} else if (categoria
														.getId()
														.equals(
																Categoria.COMERCIAL)) {
													qtdComercial = ""
															+ categoria
																	.getQuantidadeEconomiasCategoria();
												} else if (categoria
														.getId()
														.equals(
																Categoria.INDUSTRIAL)) {
													qtdIndustrial = ""
															+ categoria
																	.getQuantidadeEconomiasCategoria();
												} else if (categoria
														.getId()
														.equals(
																Categoria.PUBLICO)) {
													qtdPublico = ""
															+ categoria
																	.getQuantidadeEconomiasCategoria();
												}
											}
										}

										colecaoCategorias = null;

										// Residêncial
										if (!qtdResidencial.equals("")) {
											cobrancaDocumentoTxt
													.append(Util
															.adicionarZerosEsquedaNumero(
																	3,
																	qtdResidencial));
										} else {
											cobrancaDocumentoTxt.append(Util
													.completaString("", 3));
										}

										cobrancaDocumentoTxt.append(Util
												.completaString("", 3));

										// Comercial
										if (!qtdComercial.equals("")) {
											cobrancaDocumentoTxt
													.append(Util
															.adicionarZerosEsquedaNumero(
																	3,
																	qtdComercial));
										} else {
											cobrancaDocumentoTxt.append(Util
													.completaString("", 3));
										}
										cobrancaDocumentoTxt.append(Util
												.completaString("", 3));

										// Industrial
										if (!qtdIndustrial.equals("")) {
											cobrancaDocumentoTxt
													.append(Util
															.adicionarZerosEsquedaNumero(
																	3,
																	qtdIndustrial));
										} else {
											cobrancaDocumentoTxt.append(Util
													.completaString("", 3));
										}
										cobrancaDocumentoTxt.append(Util
												.completaString("", 6));

										// Público
										if (!qtdPublico.equals("")) {
											cobrancaDocumentoTxt
													.append(Util
															.adicionarZerosEsquedaNumero(
																	3,
																	qtdPublico));
										} else {
											cobrancaDocumentoTxt.append(Util
													.completaString("", 3));
										}
										cobrancaDocumentoTxt.append(Util
												.completaString("", 4));

										// Data de Emissão
										if (emitirDocumentoCobrancaHelper
												.getEmissao() != null) {
											cobrancaDocumentoTxt
													.append(Util
															.formatarData(emitirDocumentoCobrancaHelper
																	.getEmissao()));
										} else {
											cobrancaDocumentoTxt.append(Util
													.completaString("", 10));
										}

										cobrancaDocumentoTxt.append(Util
												.completaString("", 4));

										// Perfil do Imóvel
										cobrancaDocumentoTxt
												.append(Util
														.completaString(
																emitirDocumentoCobrancaHelper
																		.getDescricaoImovelPerfil(),
																8));

										cobrancaDocumentoTxt.append(Util
												.completaString("", 6));

										String numeroHidrometro = getControladorAtendimentoPublico()
												.pesquisarNumeroHidrometroLigacaoAgua(
														emitirDocumentoCobrancaHelper
																.getIdImovel());

										// Número Hidrômetro
										if (numeroHidrometro != null) {
											cobrancaDocumentoTxt.append(Util
													.completaString(
															numeroHidrometro,
															10));
										} else {
											cobrancaDocumentoTxt.append(Util
													.completaString("", 10));
										}

										cobrancaDocumentoTxt.append(Util
												.completaString("", 7));

										// Grupo de Cobrança
										cobrancaDocumentoTxt
												.append(Util
														.completaString(
																""
																		+ emitirDocumentoCobrancaHelper
																				.getIdCobrancaGrupo(),
																6));

										// Sequencial de impressão
										cobrancaDocumentoTxt
												.append(Util
														.completaStringComEspacoAEsquerda(
																Util
																		.retornaSequencialFormatado(sequencialImpressao),
																9));

										cobrancaDocumentoTxt.append(Util
												.completaString("", 61));

										cobrancaDocumentoTxt.append(System
												.getProperty("line.separator"));

										// LINHA 07
										// ==================================

										/*
										 * Canal ("1") Fonte ("1")
										 */
										cobrancaDocumentoTxt.append("1");
										cobrancaDocumentoTxt.append("1");

										/*
										 * Selecionar os itens do documento de
										 * cobrança correspondentes a conta e
										 * ordenar por ano/mês de referência da
										 * conta
										 */
										if (colecaoCobrancaDocumentoItem != null
												&& !colecaoCobrancaDocumentoItem
														.isEmpty()) {
											Iterator iteratorColecaoCobrancaDocumentoItem = null;
											CobrancaDocumentoItem cobrancaDocumentoItem = null;

											int countImpressao = colecaoCobrancaDocumentoItem
													.size() - 13;

											cobrancaDocumentoTxt.append(Util
													.completaString("", 1));
											/*
											 * Caso a quantidade de itens
											 * selecionados seja superior a 15
											 * [SB0001 - Calcular Valor e Data
											 * de Vencimento Anterior]
											 * 
											 * Caso contrário: Dados do primeiro
											 * e segundo itens selecionados
											 */
											if (colecaoCobrancaDocumentoItem
													.size() > 15) {

												CalcularValorDataVencimentoAnteriorHelper calcularValorDataVencimentoAnteriorHelper = this
														.calcularValorDataVencimentoAnterior(
																colecaoCobrancaDocumentoItem,
																15);

												// Constante "DEBTO.ATE"
												cobrancaDocumentoTxt
														.append("DEBTO.ATE");

												cobrancaDocumentoTxt
														.append(Util
																.completaString(
																		"", 3));

												// Data de Vencimento anterior
												// retornado
												// pelo
												// [SB0001]
												cobrancaDocumentoTxt
														.append(Util
																.formatarData(calcularValorDataVencimentoAnteriorHelper
																		.getDataVencimentoAnterior()));

												cobrancaDocumentoTxt
														.append(Util
																.completaString(
																		"", 127));

											} else {

												iteratorColecaoCobrancaDocumentoItem = colecaoCobrancaDocumentoItem
														.iterator();
												cobrancaDocumentoItem = null;

												cobrancaDocumentoItem = (CobrancaDocumentoItem) iteratorColecaoCobrancaDocumentoItem
														.next();

												// Mês/Ano de referência da
												// conta
												cobrancaDocumentoTxt
														.append(Util
																.completaString(
																		Util
																				.formatarAnoMesParaMesAno(cobrancaDocumentoItem
																						.getContaGeral()
																						.getConta()
																						.getReferencia()),
																		7));

												cobrancaDocumentoTxt
														.append(".");

												// Dígito verificador da conta
												cobrancaDocumentoTxt
														.append(cobrancaDocumentoItem
																.getContaGeral()
																.getConta()
																.getDigitoVerificadorConta());

												cobrancaDocumentoTxt
														.append(Util
																.completaString(
																		"", 3));

												// Data de vencimento da conta
												cobrancaDocumentoTxt
														.append(Util
																.formatarData(cobrancaDocumentoItem
																		.getContaGeral()
																		.getConta()
																		.getDataVencimentoConta()));

												cobrancaDocumentoTxt
														.append(Util
																.completaString(
																		"", 127));
											}

											cobrancaDocumentoTxt
													.append(System
															.getProperty("line.separator"));

											// LINHA 08
											// ==================================

											/*
											 * Canal ("") Fonte ("1")
											 */
											if (countImpressao <= 0) {
												iteratorColecaoCobrancaDocumentoItem = colecaoCobrancaDocumentoItem
														.iterator();
												cobrancaDocumentoItem = null;

												int countRegistros = 0;

												while (iteratorColecaoCobrancaDocumentoItem
														.hasNext()) {

													cobrancaDocumentoItem = (CobrancaDocumentoItem) iteratorColecaoCobrancaDocumentoItem
															.next();

													if (countRegistros > 0) {
														cobrancaDocumentoTxt
																.append(" ");
														cobrancaDocumentoTxt
																.append("1");
														cobrancaDocumentoTxt
																.append(" ");

														// Mês/Ano de referência
														// da
														// conta
														cobrancaDocumentoTxt
																.append(Util
																		.completaString(
																				Util
																						.formatarAnoMesParaMesAno(cobrancaDocumentoItem
																								.getContaGeral()
																								.getConta()
																								.getReferencia()),
																				7));

														cobrancaDocumentoTxt
																.append(".");

														// Dígito verificador da
														// conta
														cobrancaDocumentoTxt
																.append(cobrancaDocumentoItem
																		.getContaGeral()
																		.getConta()
																		.getDigitoVerificadorConta());

														cobrancaDocumentoTxt
																.append(Util
																		.completaString(
																				"",
																				3));

														// Data de vencimento da
														// conta
														cobrancaDocumentoTxt
																.append(Util
																		.formatarData(cobrancaDocumentoItem
																				.getContaGeral()
																				.getConta()
																				.getDataVencimentoConta()));

														cobrancaDocumentoTxt
																.append(Util
																		.completaString(
																				"",
																				127));
														cobrancaDocumentoTxt
																.append(System
																		.getProperty("line.separator"));
													}
													countRegistros++;
												}
											} else {
												while (countImpressao < colecaoCobrancaDocumentoItem
														.size()) {
													cobrancaDocumentoItem = (CobrancaDocumentoItem) ((List) colecaoCobrancaDocumentoItem)
															.get(countImpressao);
													cobrancaDocumentoTxt
															.append(" ");
													cobrancaDocumentoTxt
															.append("1");
													cobrancaDocumentoTxt
															.append(" ");

													// Mês/Ano de referência da
													// conta
													cobrancaDocumentoTxt
															.append(Util
																	.completaString(
																			Util
																					.formatarAnoMesParaMesAno(cobrancaDocumentoItem
																							.getContaGeral()
																							.getConta()
																							.getReferencia()),
																			7));

													cobrancaDocumentoTxt
															.append(".");

													// Dígito verificador da
													// conta
													cobrancaDocumentoTxt
															.append(cobrancaDocumentoItem
																	.getContaGeral()
																	.getConta()
																	.getDigitoVerificadorConta());

													cobrancaDocumentoTxt
															.append(Util
																	.completaString(
																			"",
																			3));

													// Data de vencimento da
													// conta
													cobrancaDocumentoTxt
															.append(Util
																	.formatarData(cobrancaDocumentoItem
																			.getContaGeral()
																			.getConta()
																			.getDataVencimentoConta()));

													cobrancaDocumentoTxt
															.append(Util
																	.completaString(
																			"",
																			127));
													cobrancaDocumentoTxt
															.append(System
																	.getProperty("line.separator"));

													countImpressao++;
												}
											}
										}

										// LINHA 09
										// ==================================

										/*
										 * Canal ("1") Fonte ("2")
										 */
										cobrancaDocumentoTxt.append("1");
										cobrancaDocumentoTxt.append("2");

										cobrancaDocumentoTxt.append(Util
												.completaString("", 6));

										// Valor total do documento de cobrança
										cobrancaDocumentoTxt
												.append(Util
														.completaStringComEspacoAEsquerda(
																Util
																		.formatarMoedaReal(emitirDocumentoCobrancaHelper
																				.getValorDocumento()),
																16));

										cobrancaDocumentoTxt.append(Util
												.completaString("", 128));

										cobrancaDocumentoTxt.append(System
												.getProperty("line.separator"));

										// LINHA 10
										// ==================================

										/*
										 * Canal ("1") Fonte ("4")
										 */
										cobrancaDocumentoTxt.append("1");
										cobrancaDocumentoTxt.append("4");

										cobrancaDocumentoTxt.append(Util
												.completaString("", 1));

										float valorDocumento = emitirDocumentoCobrancaHelper
												.getValorDocumento()
												.floatValue();

										if (valorDocumento > 500) {
											cobrancaDocumentoTxt
													.append("PRIORIDADE - DÉBITO ACIMA DE R$ 500,00");
										} else {
											cobrancaDocumentoTxt.append(Util
													.completaString("", 38));
										}

										cobrancaDocumentoTxt.append(Util
												.completaString("", 111));

										cobrancaDocumentoTxt.append(System
												.getProperty("line.separator"));

										// LINHA 11
										// ==================================

										/*
										 * Canal ("-") Fonte ("2")
										 */
										cobrancaDocumentoTxt.append("-");
										cobrancaDocumentoTxt.append("2");

										cobrancaDocumentoTxt.append(Util
												.completaString("", 150));

										cobrancaDocumentoTxt.append(System
												.getProperty("line.separator"));

										// LINHA 12
										// ==================================

										/*
										 * Canal (" ") Fonte ("2")
										 */
										cobrancaDocumentoTxt.append(" ");
										cobrancaDocumentoTxt.append("2");

										cobrancaDocumentoTxt.append(" ");

										// Grupo de Cobrança
										cobrancaDocumentoTxt
												.append(Util
														.completaStringComEspacoAEsquerda(
																emitirDocumentoCobrancaHelper
																		.getIdCobrancaGrupo()
																		.toString(),
																2));

										cobrancaDocumentoTxt.append("-");

										// Sigla e descriçao da gerência
										// regional
										cobrancaDocumentoTxt
												.append(Util
														.completaString(
																emitirDocumentoCobrancaHelper
																		.getNomeAbreviadoGerencia(),
																3));

										cobrancaDocumentoTxt.append("-");

										cobrancaDocumentoTxt
												.append(Util
														.completaString(
																emitirDocumentoCobrancaHelper
																		.getNomeGerencia(),
																25));

										cobrancaDocumentoTxt.append(Util
												.completaString("", 25));

										// Código e descrição da empresa
										if (emitirDocumentoCobrancaHelper
												.getIdEmpresa() != null) {
											cobrancaDocumentoTxt
													.append(Util
															.completaStringComEspacoAEsquerda(
																	emitirDocumentoCobrancaHelper
																			.getIdEmpresa()
																			.toString(),
																	4));

											cobrancaDocumentoTxt.append("- ");

											cobrancaDocumentoTxt
													.append(Util
															.completaString(
																	emitirDocumentoCobrancaHelper
																			.getDescricaoEmpresa(),
																	10));
										} else {
											cobrancaDocumentoTxt.append(Util
													.completaString("", 16));
										}

										cobrancaDocumentoTxt.append(Util
												.completaString("", 76));

										cobrancaDocumentoTxt.append(System
												.getProperty("line.separator"));

										// LINHA 13
										// ==================================

										/*
										 * Canal ("1") Fonte ("1")
										 */
										cobrancaDocumentoTxt.append("1");
										cobrancaDocumentoTxt.append("1");
										cobrancaDocumentoTxt.append(" ");

										cobrancaDocumentoTxt
												.append(Util
														.completaString(
																inscricao
																		.getInscricaoFormatada(),
																20));

										cobrancaDocumentoTxt.append(Util
												.completaString("", 14));

										// Nome do Cliente
										cobrancaDocumentoTxt
												.append(Util.completaString(
														nomeCliente, 50));

										cobrancaDocumentoTxt.append(Util
												.completaString("", 65));

										cobrancaDocumentoTxt.append(System
												.getProperty("line.separator"));

										// LINHA 14
										// ==================================

										/*
										 * Canal ("+") Fonte ("2")
										 */
										cobrancaDocumentoTxt.append("+");
										cobrancaDocumentoTxt.append("2");
										cobrancaDocumentoTxt.append(Util
												.completaString("", 66));

										cobrancaDocumentoTxt
												.append(Util
														.completaString(
																matriculaImovelFormatada,
																10));

										cobrancaDocumentoTxt.append(Util
												.completaString("", 74));

										cobrancaDocumentoTxt.append(System
												.getProperty("line.separator"));

										// LINHA 15
										// ==================================

										/*
										 * Canal ("-") Fonte ("1")
										 */
										cobrancaDocumentoTxt.append("-");
										cobrancaDocumentoTxt.append("1");
										cobrancaDocumentoTxt.append(" ");

										// Endereço Formatado
										cobrancaDocumentoTxt.append(Util
												.completaString(
														enderecoFormatado, 62));

										cobrancaDocumentoTxt.append(Util
												.completaString("", 87));

										cobrancaDocumentoTxt.append(System
												.getProperty("line.separator"));

										// LINHA 16
										// ==================================

										/*
										 * Canal ("+") Fonte ("2")
										 */
										cobrancaDocumentoTxt.append("+");
										cobrancaDocumentoTxt.append("2");
										cobrancaDocumentoTxt.append(Util
												.completaString("", 67));

										//CRC2574 alterado por Vivianne Sousa 19/08/2009 - Francisco
										// Sequencial do Documento de Cobrança
										cobrancaDocumentoTxt.append(Util.completaStringComEspacoAEsquerda(
											""+ emitirDocumentoCobrancaHelper.getNumeroOS(),9));
//											""+ emitirDocumentoCobrancaHelper.getNumeroSequenciaDocumento(),9));

										cobrancaDocumentoTxt.append(Util
												.completaString("", 74));

										cobrancaDocumentoTxt.append(System
												.getProperty("line.separator"));

										// LINHA 17
										// ==================================

										/*
										 * Canal ("-") Fonte ("1")
										 */
										cobrancaDocumentoTxt.append("-");
										cobrancaDocumentoTxt.append("1");
										cobrancaDocumentoTxt.append(" ");

										// Residêncial
										if (!qtdResidencial.equals("")) {
											cobrancaDocumentoTxt
													.append(Util
															.adicionarZerosEsquedaNumero(
																	3,
																	qtdResidencial));
										} else {
											cobrancaDocumentoTxt.append(Util
													.completaString("", 3));
										}

										cobrancaDocumentoTxt.append(Util
												.completaString("", 3));

										// Comercial
										if (!qtdComercial.equals("")) {
											cobrancaDocumentoTxt
													.append(Util
															.adicionarZerosEsquedaNumero(
																	3,
																	qtdComercial));
										} else {
											cobrancaDocumentoTxt.append(Util
													.completaString("", 3));
										}
										cobrancaDocumentoTxt.append(Util
												.completaString("", 3));

										// Industrial
										if (!qtdIndustrial.equals("")) {
											cobrancaDocumentoTxt
													.append(Util
															.adicionarZerosEsquedaNumero(
																	3,
																	qtdIndustrial));
										} else {
											cobrancaDocumentoTxt.append(Util
													.completaString("", 3));
										}
										cobrancaDocumentoTxt.append(Util
												.completaString("", 5));

										// Público
										if (!qtdPublico.equals("")) {
											cobrancaDocumentoTxt
													.append(Util
															.adicionarZerosEsquedaNumero(
																	3,
																	qtdPublico));
										} else {
											cobrancaDocumentoTxt.append(Util
													.completaString("", 3));
										}
										cobrancaDocumentoTxt.append(Util
												.completaString("", 1));

										// Data de Emissão
										if (emitirDocumentoCobrancaHelper
												.getEmissao() != null) {
											cobrancaDocumentoTxt
													.append(Util
															.formatarData(emitirDocumentoCobrancaHelper
																	.getEmissao()));
										} else {
											cobrancaDocumentoTxt.append(Util
													.completaString("", 10));
										}

										cobrancaDocumentoTxt.append(Util
												.completaString("", 4));

										// Perfil do Imóvel
										cobrancaDocumentoTxt
												.append(Util
														.completaString(
																emitirDocumentoCobrancaHelper
																		.getDescricaoImovelPerfil(),
																8));

										cobrancaDocumentoTxt.append(Util
												.completaString("", 10));

										// Código da situação da ligação de água
										cobrancaDocumentoTxt
												.append(Util
														.completaString(
																""
																		+ emitirDocumentoCobrancaHelper
																				.getIdLigacaoAguaSituacao(),
																3));

										// Código da situação da ligação do
										// esgoto
										cobrancaDocumentoTxt
												.append(Util
														.completaString(
																""
																		+ emitirDocumentoCobrancaHelper
																				.getIdLigacaoEsgotoSituacao(),
																3));

										cobrancaDocumentoTxt.append(Util
												.completaString("", 3));

										// Grupo de Cobrança
										cobrancaDocumentoTxt
												.append(Util
														.completaString(
																""
																		+ emitirDocumentoCobrancaHelper
																				.getIdCobrancaGrupo(),
																6));
										cobrancaDocumentoTxt.append(Util
												.completaString("", 9));

										// Sequencial de impressão
										cobrancaDocumentoTxt
												.append(Util
														.completaStringComEspacoAEsquerda(
																Util
																		.retornaSequencialFormatado(sequencialImpressao),
																7));

										cobrancaDocumentoTxt.append(Util
												.completaString("", 62));

										cobrancaDocumentoTxt.append(System
												.getProperty("line.separator"));

										try {
											out.write(cobrancaDocumentoTxt.toString());
											out.flush();
										} catch (IOException e) {
											e.printStackTrace();
											throw new ControladorException("erro.sistema", e);
										}
										
										cobrancaDocumentoTxt = new StringBuilder();
										
									}
									// adiciona o id da
									// conta e o sequencial
									// no para serem
									// atualizados
									mapAtualizaSequencial.put(
											emitirDocumentoCobrancaHelper
													.getIdDocumentoCobranca(),
											sequencialImpressao);
									colecaoCobrancaDocumentoItem = null;
								}
							}
						}
						mapCobrancaoDocumentoDivididas = null;
						countOrdem++;
					}
					mapCobrancaDocumentoOrdenada = null;
				}

			} else {
				flagFimPesquisa = true;
			}
			try {
				repositorioCobranca
						.atualizarSequencialCobrancaDocumentoImpressao(mapAtualizaSequencial);
			} catch (ErroRepositorioException e) {
				throw new ControladorException("erro.sistema", e);
			}
			mapAtualizaSequencial = null;
			colecaoEmitirDocumentoCobranca = null;
		}

        // fim de arquivo
		try {
			cobrancaDocumentoTxt = new StringBuilder();
			cobrancaDocumentoTxt.append("\u0004");
			out.write(cobrancaDocumentoTxt.toString());
			                         
			out.flush();                           
			ZipUtil.adicionarArquivo(zos, leitura);
			zos.close();
			leitura.delete();
			out.close();
		} catch (IOException e) {
			e.printStackTrace();
			throw new ControladorException("erro.sistema", e);
		}		
		
		System.out.println("***************************************");
		System.out.println("FIM DO CORTE ADMINISTRATIVO OU FISICO OU ORDEM DE SUPRESSÃO");
		System.out.println("***************************************");

//		Date dataAtual = new Date();
//		String nomeZip = "";
//		// caso seja cronograma
//		if (idCronogramaAtividadeAcaoCobranca != null) {
//			if (idAcaoCobranca.equals(CobrancaAcao.CORTE_ADMINISTRATIVO)) {			
//				nomeZip = "ORDEM_CORTE_ADMINISTRATIVO_GRUPO_"
//						+ grupoCobranca.getId() + "_"
//						+ Util.formatarData(dataAtual) + Util.formatarHoraSemDataSemDoisPontos(dataAtual);		 
//			} else if (idAcaoCobranca.equals(CobrancaAcao.CORTE_FISICO)) {
//				nomeZip = "ORDEM_CORTE_FISICO_GRUPO_"
//						+ grupoCobranca.getId() + "_"
//						+ Util.formatarData(dataAtual) + Util.formatarHoraSemDataSemDoisPontos(dataAtual);
//			} else if (idAcaoCobranca.equals(CobrancaAcao.CORTE_FISICO_LIGADO_A_REVELIA)) {
//				nomeZip = "ORDEM_CORTE_FISICO_LIGADO_A_REVELIA_GRUPO_"
//						+ grupoCobranca.getId() + "_"
//						+ Util.formatarData(dataAtual) + Util.formatarHoraSemDataSemDoisPontos(dataAtual);
//			} else if (idAcaoCobranca.equals(CobrancaAcao.CORTE_ADMINISTRATIVO_LIGADO_A_REVELIA)) {
//				nomeZip = "ORDEM_CORTE_ADMINISTRATIVO_LIGADO_A_REVELIA_GRUPO_"
//						+ grupoCobranca.getId() + "_"
//						+ Util.formatarData(dataAtual) + Util.formatarHoraSemDataSemDoisPontos(dataAtual);
//			} else if (idAcaoCobranca.equals(CobrancaAcao.CORTE_FISICO_PUBLICO)) {
//				nomeZip = "ORDEM_CORTE_FISICO_PUBLICO_GRUPO_"
//						+ grupoCobranca.getId() + "_"
//						+ Util.formatarData(dataAtual) + Util.formatarHoraSemDataSemDoisPontos(dataAtual);
//			} else if (idAcaoCobranca.equals(CobrancaAcao.RECORTE)) {
//				nomeZip = "ORDEM_RECORTE_GRUPO_"
//						+ grupoCobranca.getId() + "_"
//						+ Util.formatarData(dataAtual) + Util.formatarHoraSemDataSemDoisPontos(dataAtual);
//			} 
//			// para o caso de eventual
//		} else {
//			String descricaoAbrevDocumentoTipo = "";
//			if (acaoCobranca != null
//					&& acaoCobranca.getDocumentoTipo() != null) {
//				descricaoAbrevDocumentoTipo = acaoCobranca
//						.getDocumentoTipo().getDescricaoAbreviado();
//			}
//			String tituloComandoEventual = cobrancaAcaoAtividadeComando
//					.getDescricaoTitulo();
//	
//			nomeZip = descricaoAbrevDocumentoTipo + " "
//					+ tituloComandoEventual + " "
//					+ Util.formatarData(dataAtual) + Util.formatarHoraSemDataSemDoisPontos(dataAtual);
//		}
//		nomeZip = nomeZip.replace("/", "_");
//		nomeZip = nomeZip.replace(" ", "_");

//		try {
//			System.out.println("***************************************");
//			System.out.println("INICIO CRIAR ARQUIVO");
//			System.out.println("***************************************");
//
//			if (cobrancaDocumentoTxt != null
//					&& cobrancaDocumentoTxt.length() != 0) {
//
//				cobrancaDocumentoTxt.append("\u0004");
//
//				File leitura = new File(nomeZip + ".txt");
//				// criar o arquivo zip
//				File compactado = new File(nomeZip + ".zip"); // nomeZip
//				ZipOutputStream zos = new ZipOutputStream(new FileOutputStream(
//						compactado));
//
//				BufferedWriter out = new BufferedWriter(new OutputStreamWriter(
//						new FileOutputStream(leitura.getAbsolutePath())));
//				out.write(cobrancaDocumentoTxt.toString());
//				out.close();
//				ZipUtil.adicionarArquivo(zos, leitura);
//
//				// close the stream
//				zos.close();
//				leitura.delete();
//			}
//			System.out.println("***************************************");
//			System.out.println("FIM CRIAR ARQUIVO");
//			System.out.println("***************************************");
//
//		} catch (IOException e) {
//			e.printStackTrace();
//			throw new ControladorException("erro.sistema", e);
//		} catch (Exception e) {
//			e.printStackTrace();
//			throw new ControladorException("erro.sistema", e);
//		}


	}


	/**
	 * Este caso de consulta os dados do imovel, esse metodo consulta os
	 * documentos de cobrança do imovel
	 * 
	 * [UC0472] - Consultar Imovel
	 * 
	 * @author Rafael Santos
	 * @date 18/09/2006
	 * 
	 * @return
	 * @throws ErroRepositorioException
	 */
	public Collection<CobrancaDocumento> consultarImovelDocumentosCobranca(
			Integer idImovel, Integer numeroPagina) throws ControladorException {

		Collection colecaoDocumentosCobranca = null;
		Collection<CobrancaDocumento> imoveisDocumentosCobranca = null;

		try {

			colecaoDocumentosCobranca = this.repositorioCobranca
					.consultarImovelDocumentosCobranca(idImovel, numeroPagina);

		} catch (ErroRepositorioException ex) {
			ex.printStackTrace();
			throw new ControladorException("erro.sistema", ex);
		}

		if (colecaoDocumentosCobranca != null
				&& !colecaoDocumentosCobranca.isEmpty()) {

			imoveisDocumentosCobranca = new ArrayList();

			Iterator iteratorColecaoDocumentosCobranca = colecaoDocumentosCobranca
					.iterator();

			while (iteratorColecaoDocumentosCobranca.hasNext()) {

				Object[] array = (Object[]) iteratorColecaoDocumentosCobranca
						.next();

				CobrancaDocumento cobrancaDocumento = new CobrancaDocumento();

				Imovel imovel = new Imovel();
				imovel.setId(idImovel);
				// imovel do documento de cobranca
				cobrancaDocumento.setImovel(imovel);

				// 0 - descricao Ação de Cobranca
				CobrancaAcao cobrancaAcao = null;
				if (array[0] != null) {
					cobrancaAcao = new CobrancaAcao();
					cobrancaAcao.setDescricaoCobrancaAcao((String) array[0]);
					cobrancaDocumento.setCobrancaAcao(cobrancaAcao);
				}

				// 1 - Data e Hora de Emissão
				if (array[1] != null) {
					cobrancaDocumento.setEmissao((Date) array[1]);
				}

				// 2 - descricao Forma de Emissão
				DocumentoEmissaoForma documentoEmissaoForma = null;
				if (array[2] != null && array[9] != null) {
					documentoEmissaoForma = new DocumentoEmissaoForma();
					documentoEmissaoForma
							.setId((Integer) array[9]);
					documentoEmissaoForma
							.setDescricaoDocumentoEmissaoForma((String) array[2]);
					cobrancaDocumento
							.setDocumentoEmissaoForma(documentoEmissaoForma);
				}

				// 3 - descricao Tipo Documento
				DocumentoTipo documentoTipo = null;
				if (array[3] != null && array[8] != null) {
					documentoTipo = new DocumentoTipo();
					documentoTipo.setId((Integer) array[8]);
					documentoTipo.setDescricaoDocumentoTipo((String) array[3]);
					cobrancaDocumento.setDocumentoTipo(documentoTipo);
				}

				// 4 - VAlor do Documento
				if (array[4] != null) {
					cobrancaDocumento.setValorDocumento((BigDecimal) array[4]);
				}

				// 5 - id Cobranca Documento
				if (array[5] != null) {
					cobrancaDocumento.setId((Integer) array[5]);
				}
				
				// 6 - Nome do Responsavel
				if (array[6] != null) {
					Usuario usuario = new Usuario();
					usuario.setNomeUsuario((String) array[6]);
					cobrancaDocumento.setUsuario(usuario);
				}
				
				//7 - Indicador Cliente Imovel
				if (array[7] != null) {
					cobrancaDocumento.setIndicadorClienteImovel((Short) array[7]);
				}
				
				//10 - Descrição de Cobrança Ação da Atividade de Comando
				if(array[10] != null) {
					cobrancaAcao = new CobrancaAcao();
					cobrancaAcao.setDescricaoCobrancaAcao((String) array[10]);
					CobrancaAcaoAtividadeComando cobrancaAcaoAtividadeComando = new CobrancaAcaoAtividadeComando();
					cobrancaAcaoAtividadeComando.setCobrancaAcao(cobrancaAcao);
					cobrancaDocumento.setCobrancaAcaoAtividadeComando(cobrancaAcaoAtividadeComando);
				}
				
				//11 - Descrição de Cobrança Ação do Cronograma
				if(array[11] != null) {
					cobrancaAcao = new CobrancaAcao();
					cobrancaAcao.setDescricaoCobrancaAcao((String) array[11]);
					CobrancaAcaoCronograma cobrancaAcaoCronograma = new CobrancaAcaoCronograma();
					cobrancaAcaoCronograma.setCobrancaAcao(cobrancaAcao);
					CobrancaAcaoAtividadeCronograma cobrancaAcaoAtividadeCronograma = new CobrancaAcaoAtividadeCronograma();
					cobrancaAcaoAtividadeCronograma.setCobrancaAcaoCronograma(cobrancaAcaoCronograma);
					cobrancaDocumento.setCobrancaAcaoAtividadeCronograma(cobrancaAcaoAtividadeCronograma);
				}

				imoveisDocumentosCobranca.add(cobrancaDocumento);

			}// fim do while
		}
		return imoveisDocumentosCobranca;

	}

	/**
	 * Este caso de consulta os dados do imovel, esse metodo consulta a
	 * quantidade de documentos de cobrança do imovel
	 * 
	 * [UC0472] - Consultar Imovel
	 * 
	 * @author Rafael Santos
	 * @date 18/09/2006
	 * 
	 * @return
	 * @throws ErroRepositorioException
	 */
	public Integer consultarQuantidadeImovelDocumentosCobranca(Integer idImovel)
			throws ControladorException {
		Integer quantidadeDocumentosCobranca = null;
		try {

			quantidadeDocumentosCobranca = this.repositorioCobranca
					.consultarQuantidadeImovelDocumentosCobranca(idImovel);

		} catch (ErroRepositorioException ex) {
			ex.printStackTrace();
			throw new ControladorException("erro.sistema", ex);
		}

		return quantidadeDocumentosCobranca;
	}

	/**
	 * Este caso de consulta os dados do imovel, esse metodo consulta a
	 * quantidade de documentos de itens de cobrança do imovel
	 * 
	 * [UC0472] - Consultar Imovel
	 * 
	 * @author Rafael Santos
	 * @date 18/09/2006
	 * 
	 * @return
	 * @throws ErroRepositorioException
	 */
	public Integer consultarQuantidadeImovelDocumentosItemCobranca(
			Integer idImovel) throws ControladorException {

		Integer quantidadeDocumentosCobrancaItem = null;
		try {

			quantidadeDocumentosCobrancaItem = this.repositorioCobranca
					.consultarQuantidadeImovelDocumentosItemCobranca(idImovel);

		} catch (ErroRepositorioException ex) {
			ex.printStackTrace();
			throw new ControladorException("erro.sistema", ex);
		}

		return quantidadeDocumentosCobrancaItem;
	}

	/**
	 * 
	 * Este caso de uso permite a emissão de um ou mais documentos de cobrança
	 * 
	 * [UC0477] Emitir Documento de Cobrança - Ordem de Supressão
	 * 
	 * @author Ana Maria
	 * @data 15/09/2006
	 * 
	 * @param
	 * @return void
	 */
	public void emitirDocumentoCobrancaOrdemSupressao(
			CobrancaAcaoAtividadeCronograma cobrancaAcaoAtividadeCronograma,
			CobrancaAcaoAtividadeComando cobrancaAcaoAtividadeComando,
			Date dataAtualPesquisa, CobrancaAcao acaoCobranca,
			CobrancaGrupo cobrancaGrupo, CobrancaCriterio cobrancaCriterio)
			throws ControladorException {

		System.out.println("********************");
		System.out.println("INICIO SUPRESSÃO");
		System.out.println("********************");

		boolean flagFimPesquisa = false;
		final int quantidadeCobrancaDocumento = 1000;
		int quantidadeCobrancaDocumentoInicio = 0;
		StringBuilder cobrancaDocumentoTxt = new StringBuilder();
		int sequencialImpressao = 0;
		Collection colecaoEmitirDocumentoCobranca = null;
		Map<Integer, Integer> mapAtualizaSequencial = null;

		Integer idCronogramaAtividadeAcaoCobranca = null;
		Integer idComandoAtividadeAcaoCobranca = null;
		Integer idAcaoCobranca = null;
		if (cobrancaAcaoAtividadeCronograma != null
				&& cobrancaAcaoAtividadeCronograma.getId() != null) {
			idCronogramaAtividadeAcaoCobranca = cobrancaAcaoAtividadeCronograma
					.getId();
		}
		if (cobrancaAcaoAtividadeComando != null
				&& cobrancaAcaoAtividadeComando.getId() != null) {
			idComandoAtividadeAcaoCobranca = cobrancaAcaoAtividadeComando
					.getId();
		}
		if (acaoCobranca != null && acaoCobranca.getId() != null) {
			idAcaoCobranca = acaoCobranca.getId();
		}
		while (!flagFimPesquisa) {
			// map que armazena o sequencial e o numero da
			// conta para no final atualizar todos os
			// sequencias
			mapAtualizaSequencial = new HashMap();

			try {
				colecaoEmitirDocumentoCobranca = repositorioCobranca
						.pesquisarCobrancaDocumentoOrdemCorte(
								idCronogramaAtividadeAcaoCobranca,
								idComandoAtividadeAcaoCobranca,
								dataAtualPesquisa, idAcaoCobranca,
								quantidadeCobrancaDocumentoInicio);
			} catch (ErroRepositorioException ex) {
				ex.printStackTrace();
				throw new ControladorException("erro.sistema", ex);
			}

			if (colecaoEmitirDocumentoCobranca != null
					&& !colecaoEmitirDocumentoCobranca.equals("")) {

				System.out.println("********************");
				System.out.println("QUANTIDADE COBRANÇA:"
						+ colecaoEmitirDocumentoCobranca.size());
				System.out.println("********************");

				if (colecaoEmitirDocumentoCobranca.size() < quantidadeCobrancaDocumento) {
					flagFimPesquisa = true;
				} else {
					quantidadeCobrancaDocumentoInicio = quantidadeCobrancaDocumentoInicio + 1000;
				}

				int metadeColecao = 0;
				if (colecaoEmitirDocumentoCobranca.size() % 2 == 0) {
					metadeColecao = colecaoEmitirDocumentoCobranca.size() / 2;
				} else {
					metadeColecao = (colecaoEmitirDocumentoCobranca.size() / 2) + 1;
				}

				Map<Integer, Map<Object, Object>> mapCobrancaDocumentoOrdenada = dividirColecao(colecaoEmitirDocumentoCobranca);

				if (mapCobrancaDocumentoOrdenada != null) {
					int countOrdem = 0;
					EmitirDocumentoCobrancaHelper emitirDocumentoCobrancaHelper = null;
					while (countOrdem < mapCobrancaDocumentoOrdenada.size()) {
						Map<Object, Object> mapCobrancaoDocumentoDivididas = mapCobrancaDocumentoOrdenada
								.get(countOrdem);

						Iterator iteratorColecaoCobrancaDocumento = mapCobrancaoDocumentoDivididas
								.keySet().iterator();
						while (iteratorColecaoCobrancaDocumento.hasNext()) {

							int situacao = 0;
							emitirDocumentoCobrancaHelper = null;
							emitirDocumentoCobrancaHelper = (EmitirDocumentoCobrancaHelper) iteratorColecaoCobrancaDocumento
									.next();

							String nomeCliente = null;
							Collection colecaoCobrancaDocumentoItem = null;

							/*
							 * Estes objetos auxiliarão na formatação da
							 * inscrição que será composta por informações do
							 * documento de cobrança e do imóvel a ele associado
							 */
							Imovel inscricao = null;
							SetorComercial setorComercialInscricao = null;
							Quadra quadraInscricao = null;
							Localidade localidade = null;

							sequencialImpressao++;

							while (situacao < 2) {
								if (situacao == 0) {
									situacao = 1;
									sequencialImpressao = atualizaSequencial(
											sequencialImpressao, situacao,
											metadeColecao);

								} else {
									emitirDocumentoCobrancaHelper = (EmitirDocumentoCobrancaHelper) mapCobrancaoDocumentoDivididas
											.get(emitirDocumentoCobrancaHelper);
									situacao = 2;
									sequencialImpressao = atualizaSequencial(
											sequencialImpressao, situacao,
											metadeColecao);
								}

								if (emitirDocumentoCobrancaHelper != null) {

									/*
									 * Objeto que será utilizado para armazenar
									 * as informações do documento de cobrança
									 * de acordo com o layout definido no caso
									 * de uso
									 */

									try {

										nomeCliente = this.repositorioClienteImovel
												.pesquisarNomeClientePorImovel(emitirDocumentoCobrancaHelper
														.getIdImovel());

										CobrancaDocumento cobrancaDocumento = new CobrancaDocumento();
										cobrancaDocumento
												.setId(emitirDocumentoCobrancaHelper
														.getIdDocumentoCobranca());

										colecaoCobrancaDocumentoItem = this.repositorioCobranca
												.selecionarCobrancaDocumentoItemReferenteConta(cobrancaDocumento);
										cobrancaDocumento = null;

									} catch (ErroRepositorioException ex) {
										ex.printStackTrace();
										throw new ControladorException(
												"erro.sistema", ex);
									}

									if (colecaoCobrancaDocumentoItem != null
											&& !colecaoCobrancaDocumentoItem
													.isEmpty()) {
										// Início do processo de geração do
										// arquivo txt

										// LINHA 01
										// ==================================

										/*
										 * Canal ("1") Fonte ("3")
										 */
										cobrancaDocumentoTxt.append("1");
										cobrancaDocumentoTxt.append("3");

										cobrancaDocumentoTxt.append(Util
												.completaString("", 140));

										cobrancaDocumentoTxt.append(System
												.getProperty("line.separator"));

										// LINHA 02
										// ==================================

										/*
										 * Canal (" ") Fonte ("4")
										 */
										cobrancaDocumentoTxt.append(" ");
										cobrancaDocumentoTxt.append("4");

										cobrancaDocumentoTxt.append(Util
												.completaString("", 140));

										cobrancaDocumentoTxt.append(System
												.getProperty("line.separator"));

										// LINHA 03
										// ==================================
										/*
										 * Canal (" ") Fonte (" ")
										 */
										cobrancaDocumentoTxt.append(" ");
										cobrancaDocumentoTxt.append(" ");

										cobrancaDocumentoTxt.append(Util
												.completaString("", 140));

										cobrancaDocumentoTxt.append(System
												.getProperty("line.separator"));

										// LINHA 03
										// ==================================

										/*
										 * Canal ("-") Fonte ("1")
										 */
										cobrancaDocumentoTxt.append("-");
										cobrancaDocumentoTxt.append("1");
										cobrancaDocumentoTxt.append(Util
												.completaString("", 34));

										// Data de Validade
										if (emitirDocumentoCobrancaHelper
												.getEmissao() != null) {
											if (emitirDocumentoCobrancaHelper
													.getNumeroDiasValidade() != null) {
												cobrancaDocumentoTxt
														.append(Util
																.formatarData(Util
																		.adicionarNumeroDiasDeUmaData(
																				emitirDocumentoCobrancaHelper
																						.getEmissao(),
																				emitirDocumentoCobrancaHelper
																						.getNumeroDiasValidade()
																						.intValue())));
											} else {
												cobrancaDocumentoTxt
														.append(Util
																.formatarData(emitirDocumentoCobrancaHelper
																		.getEmissao()));
											}
										} else {
											cobrancaDocumentoTxt.append(Util
													.completaString("", 10));
										}

										//CRC2574 alterado por Vivianne Sousa 19/08/2009 - Francisco
										// Sequencial do Documento de Cobrança
										cobrancaDocumentoTxt.append(Util.completaStringComEspacoAEsquerda(
											""+ emitirDocumentoCobrancaHelper.getNumeroOS(),13));
										//""+ emitirDocumentoCobrancaHelper.getNumeroSequenciaDocumento(),13));

										cobrancaDocumentoTxt.append(Util
												.completaString("", 43));

										// Data de Validade
										if (emitirDocumentoCobrancaHelper
												.getEmissao() != null) {
											if (emitirDocumentoCobrancaHelper
													.getNumeroDiasValidade() != null) {
												cobrancaDocumentoTxt
														.append(Util
																.formatarData(Util
																		.adicionarNumeroDiasDeUmaData(
																				emitirDocumentoCobrancaHelper
																						.getEmissao(),
																				emitirDocumentoCobrancaHelper
																						.getNumeroDiasValidade()
																						.intValue())));
											} else {
												cobrancaDocumentoTxt
														.append(Util
																.formatarData(emitirDocumentoCobrancaHelper
																		.getEmissao()));
											}
										} else {
											cobrancaDocumentoTxt.append(Util
													.completaString("", 10));
										}

										//CRC2574 alterado por Vivianne Sousa 19/08/2009 - Francisco
										// Sequencial do Documento de Cobrança
										cobrancaDocumentoTxt.append(Util.completaStringComEspacoAEsquerda(
											""+ emitirDocumentoCobrancaHelper.getNumeroOS(),13));
										//""+ emitirDocumentoCobrancaHelper.getNumeroSequenciaDocumento(),13));

										cobrancaDocumentoTxt.append(Util
												.completaString("", 17));

										cobrancaDocumentoTxt.append(System
												.getProperty("line.separator"));

										// LINHA 04
										// ==================================

										/*
										 * Canal ("0") Fonte ("1")
										 */
										cobrancaDocumentoTxt.append("0");
										cobrancaDocumentoTxt.append("1");

										// Inscrição
										quadraInscricao = new Quadra();
										setorComercialInscricao = new SetorComercial();
										localidade = new Localidade();
										inscricao = new Imovel();

										quadraInscricao
												.setNumeroQuadra(emitirDocumentoCobrancaHelper
														.getNumeroQuadra());
										setorComercialInscricao
												.setCodigo(emitirDocumentoCobrancaHelper
														.getCodigoSetorComercial());
										localidade
												.setId(emitirDocumentoCobrancaHelper
														.getIdLocalidade());
										inscricao.setLocalidade(localidade);
										inscricao
												.setSetorComercial(setorComercialInscricao);
										inscricao.setQuadra(quadraInscricao);
										inscricao
												.setLote(emitirDocumentoCobrancaHelper
														.getLote());
										inscricao
												.setSubLote(emitirDocumentoCobrancaHelper
														.getSubLote());

										cobrancaDocumentoTxt
												.append(Util
														.completaString(
																inscricao
																		.getInscricaoFormatada(),
																20));

										cobrancaDocumentoTxt.append(Util
												.completaString("", 5));

										// Nome do Cliente
										cobrancaDocumentoTxt
												.append(Util.completaString(
														nomeCliente, 39));

										// Inscrição
										cobrancaDocumentoTxt
												.append(Util
														.completaString(
																inscricao
																		.getInscricaoFormatada(),
																20));

										cobrancaDocumentoTxt.append(Util
												.completaString("", 5));

										// Nome do Cliente
										cobrancaDocumentoTxt
												.append(Util.completaString(
														nomeCliente, 39));

										cobrancaDocumentoTxt.append(Util
												.completaString("", 12));

										cobrancaDocumentoTxt.append(System
												.getProperty("line.separator"));

										// LINHA 05
										// ==================================

										/*
										 * Canal ("0") Fonte ("1")
										 */
										cobrancaDocumentoTxt.append("0");
										cobrancaDocumentoTxt.append("1");

										String enderecoFormatado = getControladorEndereco()
												.pesquisarEnderecoFormatado(
														emitirDocumentoCobrancaHelper
																.getIdImovel());

										// Endereço Formatado
										cobrancaDocumentoTxt.append(Util
												.completaString(
														enderecoFormatado, 62));

										cobrancaDocumentoTxt.append(Util
												.completaString("", 2));

										// Endereço Formatado
										cobrancaDocumentoTxt.append(Util
												.completaString(
														enderecoFormatado, 62));

										cobrancaDocumentoTxt.append(Util
												.completaString("", 14));

										cobrancaDocumentoTxt.append(System
												.getProperty("line.separator"));

										// LINHA 06
										// ==================================

										/*
										 * Canal (" ") Fonte ("1")
										 */
										cobrancaDocumentoTxt.append(" ");
										cobrancaDocumentoTxt.append("1");

										cobrancaDocumentoTxt.append(Util
												.completaString("", 11));

										// Nome da Localidade
										cobrancaDocumentoTxt
												.append(Util
														.completaString(
																emitirDocumentoCobrancaHelper
																		.getDescricaoLocalidade(),
																62));

										cobrancaDocumentoTxt.append(Util
												.completaString("", 2));

										// Nome da Localidade
										cobrancaDocumentoTxt
												.append(Util
														.completaString(
																emitirDocumentoCobrancaHelper
																		.getDescricaoLocalidade(),
																62));

										cobrancaDocumentoTxt.append(Util
												.completaString("", 3));

										cobrancaDocumentoTxt.append(System
												.getProperty("line.separator"));

										// LINHA 07
										// ==================================

										/*
										 * Canal ("0") Fonte ("1")
										 */
										cobrancaDocumentoTxt.append("0");
										cobrancaDocumentoTxt.append("1");
										cobrancaDocumentoTxt.append(" ");
										cobrancaDocumentoTxt.append(" ");

										/*
										 * Quantidades de economias por
										 * categoria: 1º RESIDÊNCIAL 2º
										 * COMERCIAL 3º INDUSTRIAL 4º PÚBLICA
										 */
										Imovel imovel = new Imovel();
										imovel
												.setId(emitirDocumentoCobrancaHelper
														.getIdImovel());
										Collection colecaoCategorias = getControladorImovel()
												.obterQuantidadeEconomiasCategoria(
														imovel);
										String qtdResidencial = "";
										String qtdComercial = "";
										String qtdIndustrial = "";
										String qtdPublico = "";

										if (colecaoCategorias != null
												&& !colecaoCategorias.isEmpty()) {
											Iterator iteratorColecaoCategorias = colecaoCategorias
													.iterator();
											Categoria categoria = null;

											while (iteratorColecaoCategorias
													.hasNext()) {
												categoria = (Categoria) iteratorColecaoCategorias
														.next();

												if (categoria.getId().equals(
														Categoria.RESIDENCIAL)) {
													qtdResidencial = ""
															+ categoria
																	.getQuantidadeEconomiasCategoria();
												} else if (categoria
														.getId()
														.equals(
																Categoria.COMERCIAL)) {
													qtdComercial = ""
															+ categoria
																	.getQuantidadeEconomiasCategoria();
												} else if (categoria
														.getId()
														.equals(
																Categoria.INDUSTRIAL)) {
													qtdIndustrial = ""
															+ categoria
																	.getQuantidadeEconomiasCategoria();
												} else if (categoria
														.getId()
														.equals(
																Categoria.PUBLICO)) {
													qtdPublico = ""
															+ categoria
																	.getQuantidadeEconomiasCategoria();
												}
											}
										}
										colecaoCategorias = null;

										// Residêncial
										if (!qtdResidencial.equals("")) {
											cobrancaDocumentoTxt
													.append(Util
															.adicionarZerosEsquedaNumero(
																	3,
																	qtdResidencial));
										} else {
											cobrancaDocumentoTxt.append(Util
													.completaString("", 3));
										}

										cobrancaDocumentoTxt.append(Util
												.completaString("", 5));

										// Comercial
										if (!qtdComercial.equals("")) {
											cobrancaDocumentoTxt
													.append(Util
															.adicionarZerosEsquedaNumero(
																	3,
																	qtdComercial));
										} else {
											cobrancaDocumentoTxt.append(Util
													.completaString("", 3));
										}
										cobrancaDocumentoTxt.append(Util
												.completaString("", 5));

										// Industrial
										if (!qtdIndustrial.equals("")) {
											cobrancaDocumentoTxt
													.append(Util
															.adicionarZerosEsquedaNumero(
																	3,
																	qtdIndustrial));
										} else {
											cobrancaDocumentoTxt.append(Util
													.completaString("", 3));
										}
										cobrancaDocumentoTxt.append(Util
												.completaString("", 5));

										// Público
										if (!qtdPublico.equals("")) {
											cobrancaDocumentoTxt
													.append(Util
															.adicionarZerosEsquedaNumero(
																	3,
																	qtdPublico));
										} else {
											cobrancaDocumentoTxt.append(Util
													.completaString("", 3));
										}
										cobrancaDocumentoTxt.append(Util
												.completaString("", 6));

										// Data de Emissão
										if (emitirDocumentoCobrancaHelper
												.getEmissao() != null) {
											cobrancaDocumentoTxt
													.append(Util
															.formatarData(emitirDocumentoCobrancaHelper
																	.getEmissao()));
										} else {
											cobrancaDocumentoTxt.append(Util
													.completaString("", 10));
										}

										// Grupo de Cobrança
										cobrancaDocumentoTxt
												.append(Util
														.completaStringComEspacoAEsquerda(
																""
																		+ emitirDocumentoCobrancaHelper
																				.getIdCobrancaGrupo(),
																11));

										cobrancaDocumentoTxt.append(Util
												.completaString("", 11));

										// Residêncial
										if (!qtdResidencial.equals("")) {
											cobrancaDocumentoTxt
													.append(Util
															.adicionarZerosEsquedaNumero(
																	3,
																	qtdResidencial));
										} else {
											cobrancaDocumentoTxt.append(Util
													.completaString("", 3));
										}

										cobrancaDocumentoTxt.append(Util
												.completaString("", 5));

										// Comercial
										if (!qtdComercial.equals("")) {
											cobrancaDocumentoTxt
													.append(Util
															.adicionarZerosEsquedaNumero(
																	3,
																	qtdComercial));
										} else {
											cobrancaDocumentoTxt.append(Util
													.completaString("", 3));
										}
										cobrancaDocumentoTxt.append(Util
												.completaString("", 5));

										// Industrial
										if (!qtdIndustrial.equals("")) {
											cobrancaDocumentoTxt
													.append(Util
															.adicionarZerosEsquedaNumero(
																	3,
																	qtdIndustrial));
										} else {
											cobrancaDocumentoTxt.append(Util
													.completaString("", 3));
										}
										cobrancaDocumentoTxt.append(Util
												.completaString("", 5));

										// Público
										if (!qtdPublico.equals("")) {
											cobrancaDocumentoTxt
													.append(Util
															.adicionarZerosEsquedaNumero(
																	3,
																	qtdPublico));
										} else {
											cobrancaDocumentoTxt.append(Util
													.completaString("", 3));
										}
										cobrancaDocumentoTxt.append(Util
												.completaString("", 7));

										// Data de Emissão
										if (emitirDocumentoCobrancaHelper
												.getEmissao() != null) {
											cobrancaDocumentoTxt
													.append(Util
															.formatarData(emitirDocumentoCobrancaHelper
																	.getEmissao()));
										} else {
											cobrancaDocumentoTxt.append(Util
													.completaString("", 10));
										}

										// Grupo de Cobrança
										cobrancaDocumentoTxt
												.append(Util
														.completaStringComEspacoAEsquerda(
																""
																		+ emitirDocumentoCobrancaHelper
																				.getIdCobrancaGrupo(),
																5));

										cobrancaDocumentoTxt.append(Util
												.completaString("", 1));

										// Sequencial de impressão
										cobrancaDocumentoTxt
												.append(Util
														.completaStringComEspacoAEsquerda(
																Util
																		.retornaSequencialFormatado(sequencialImpressao),
																7));

										cobrancaDocumentoTxt.append(Util
												.completaString("", 16));

										cobrancaDocumentoTxt.append(System
												.getProperty("line.separator"));

										// LINHA 08
										// ==================================
										/*
										 * Canal ("+") Fonte ("1")
										 */
										cobrancaDocumentoTxt.append("+");
										cobrancaDocumentoTxt.append("1");

										// Matrícula do imóvel
										String matriculaImovelFormatada = Util
												.retornaMatriculaImovelFormatada(emitirDocumentoCobrancaHelper
														.getIdImovel());

										cobrancaDocumentoTxt
												.append(Util
														.completaString(
																matriculaImovelFormatada,
																10));

										cobrancaDocumentoTxt.append(Util
												.completaString("", 66));

										cobrancaDocumentoTxt.append(System
												.getProperty("line.separator"));

										// LINHA 09
										// ==================================

										/*
										 * Canal ("-") Fonte ("2")
										 */
										cobrancaDocumentoTxt.append("-");
										cobrancaDocumentoTxt.append("2");
										cobrancaDocumentoTxt.append(" ");

										/*
										 * Selecionar os itens do documento de
										 * cobrança correspondentes a conta e
										 * ordenar por ano/mês de referência da
										 * conta
										 */
										if (colecaoCobrancaDocumentoItem != null
												&& !colecaoCobrancaDocumentoItem
														.isEmpty()) {
											Iterator iteratorColecaoCobrancaDocumentoItem = null;
											CobrancaDocumentoItem cobrancaDocumentoItem = null;

											int countImpressao1 = colecaoCobrancaDocumentoItem
													.size() - 6;

											cobrancaDocumentoTxt.append(Util
													.completaString("", 1));
											/*
											 * Caso a quantidade de itens
											 * selecionados seja superior a 07
											 * [SB0001 - Calcular Valor e Data
											 * de Vencimento Anterior]
											 * 
											 * Caso contrário: Dados do primeiro
											 * item selecionado
											 */
											if (colecaoCobrancaDocumentoItem
													.size() > 7) {

												CalcularValorDataVencimentoAnteriorHelper calcularValorDataVencimentoAnteriorHelper = this
														.calcularValorDataVencimentoAnterior(
																colecaoCobrancaDocumentoItem,
																7);

												// Constante "DEBTO.ATE"
												cobrancaDocumentoTxt
														.append("DEB.ATE");

												cobrancaDocumentoTxt
														.append(Util
																.completaString(
																		"", 7));

												// Data de Vencimento anterior
												// retornado
												// pelo
												// [SB0001]
												cobrancaDocumentoTxt
														.append(Util
																.formatarData(calcularValorDataVencimentoAnteriorHelper
																		.getDataVencimentoAnterior()));

												// Valor anterior retornado pelo
												// [SB0001]
												cobrancaDocumentoTxt
														.append(Util
																.completaStringComEspacoAEsquerda(
																		Util
																				.formatarMoedaReal(calcularValorDataVencimentoAnteriorHelper
																						.getValorAnterior()),
																		16));

											} else {

												iteratorColecaoCobrancaDocumentoItem = colecaoCobrancaDocumentoItem
														.iterator();
												cobrancaDocumentoItem = null;

												cobrancaDocumentoItem = (CobrancaDocumentoItem) iteratorColecaoCobrancaDocumentoItem
														.next();

												// Mês/Ano de referência da
												// conta
												cobrancaDocumentoTxt
														.append(Util
																.completaString(
																		Util
																				.formatarAnoMesParaMesAno(cobrancaDocumentoItem
																						.getContaGeral()
																						.getConta()
																						.getReferencia()),
																		7));

												cobrancaDocumentoTxt
														.append(".");

												// Dígito verificador da conta
												cobrancaDocumentoTxt
														.append(cobrancaDocumentoItem
																.getContaGeral()
																.getConta()
																.getDigitoVerificadorConta());

												cobrancaDocumentoTxt
														.append(Util
																.completaString(
																		"", 5));

												// Data de vencimento da conta
												cobrancaDocumentoTxt
														.append(Util
																.formatarData(cobrancaDocumentoItem
																		.getContaGeral()
																		.getConta()
																		.getDataVencimentoConta()));

												// Valor do item
												cobrancaDocumentoTxt
														.append(Util
																.completaStringComEspacoAEsquerda(
																		Util
																				.formatarMoedaReal(cobrancaDocumentoItem
																						.getValorItemCobrado()),
																		16));

											}

											// Código da situação da ligação de
											// água
											cobrancaDocumentoTxt
													.append(Util
															.completaStringComEspacoAEsquerda(
																	""
																			+ emitirDocumentoCobrancaHelper
																					.getIdLigacaoAguaSituacao(),
																	9));

											// Código da situação da ligação do
											// esgoto
											cobrancaDocumentoTxt
													.append(Util
															.completaStringComEspacoAEsquerda(
																	""
																			+ emitirDocumentoCobrancaHelper
																					.getIdLigacaoEsgotoSituacao(),
																	5));

											cobrancaDocumentoTxt.append(Util
													.completaString("", 3));

											// Sequencial de impressão
											cobrancaDocumentoTxt
													.append(Util
															.completaStringComEspacoAEsquerda(
																	Util
																			.retornaSequencialFormatado(sequencialImpressao),
																	11));

											cobrancaDocumentoTxt.append(Util
													.completaString("", 11));

											if (colecaoCobrancaDocumentoItem
													.size() > 7) {

												CalcularValorDataVencimentoAnteriorHelper calcularValorDataVencimentoAnteriorHelper = this
														.calcularValorDataVencimentoAnterior(
																colecaoCobrancaDocumentoItem,
																7);

												// Constante "DEBTO.ATE"
												cobrancaDocumentoTxt
														.append("DEB.ATE");

												cobrancaDocumentoTxt
														.append(Util
																.completaString(
																		"", 4));

												// Data de Vencimento anterior
												// retornado
												// pelo
												// [SB0001]
												cobrancaDocumentoTxt
														.append(Util
																.formatarData(calcularValorDataVencimentoAnteriorHelper
																		.getDataVencimentoAnterior()));

												cobrancaDocumentoTxt
														.append(Util
																.completaString(
																		"", 3));

											} else {

												iteratorColecaoCobrancaDocumentoItem = colecaoCobrancaDocumentoItem
														.iterator();
												cobrancaDocumentoItem = null;

												cobrancaDocumentoItem = (CobrancaDocumentoItem) iteratorColecaoCobrancaDocumentoItem
														.next();

												// Mês/Ano de referência da
												// conta
												cobrancaDocumentoTxt
														.append(Util
																.completaString(
																		Util
																				.formatarAnoMesParaMesAno(cobrancaDocumentoItem
																						.getContaGeral()
																						.getConta()
																						.getReferencia()),
																		7));

												cobrancaDocumentoTxt
														.append(".");

												// Dígito verificador da conta
												cobrancaDocumentoTxt
														.append(cobrancaDocumentoItem
																.getContaGeral()
																.getConta()
																.getDigitoVerificadorConta());

												cobrancaDocumentoTxt
														.append(Util
																.completaString(
																		"", 5));

												// Data de vencimento da conta
												cobrancaDocumentoTxt
														.append(Util
																.formatarData(cobrancaDocumentoItem
																		.getContaGeral()
																		.getConta()
																		.getDataVencimentoConta()));
											}

											cobrancaDocumentoTxt.append(Util
													.completaString("", 35));

											cobrancaDocumentoTxt
													.append(System
															.getProperty("line.separator"));

											// LINHA 10
											// ==================================

											/*
											 * Canal (" ") Fonte ("2")
											 */

											if (countImpressao1 <= 0) {
												iteratorColecaoCobrancaDocumentoItem = colecaoCobrancaDocumentoItem
														.iterator();
												cobrancaDocumentoItem = null;

												int countRegistros = 0;

												while (iteratorColecaoCobrancaDocumentoItem
														.hasNext()) {
													cobrancaDocumentoItem = (CobrancaDocumentoItem) iteratorColecaoCobrancaDocumentoItem
															.next();

													if (countRegistros > 0) {

														cobrancaDocumentoTxt
																.append(" ");
														cobrancaDocumentoTxt
																.append("2");

														// Mês/Ano de referência
														// da
														// conta
														cobrancaDocumentoTxt
																.append(Util
																		.completaString(
																				Util
																						.formatarAnoMesParaMesAno(cobrancaDocumentoItem
																								.getContaGeral()
																								.getConta()
																								.getReferencia()),
																				7));

														cobrancaDocumentoTxt
																.append(".");

														// Dígito verificador da
														// conta
														cobrancaDocumentoTxt
																.append(cobrancaDocumentoItem
																		.getContaGeral()
																		.getConta()
																		.getDigitoVerificadorConta());

														cobrancaDocumentoTxt
																.append(Util
																		.completaString(
																				"",
																				7));

														// Data de vencimento da
														// conta
														cobrancaDocumentoTxt
																.append(Util
																		.formatarData(cobrancaDocumentoItem
																				.getContaGeral()
																				.getConta()
																				.getDataVencimentoConta()));

														cobrancaDocumentoTxt
																.append(Util
																		.completaString(
																				"",
																				1));

														// Valor do item
														cobrancaDocumentoTxt
																.append(Util
																		.completaStringComEspacoAEsquerda(
																				Util
																						.formatarMoedaReal(cobrancaDocumentoItem
																								.getValorItemCobrado()),
																				13));

														cobrancaDocumentoTxt
																.append(Util
																		.completaString(
																				"",
																				38));

														// Mês/Ano de referência
														// da
														// conta
														cobrancaDocumentoTxt
																.append(Util
																		.completaString(
																				Util
																						.formatarAnoMesParaMesAno(cobrancaDocumentoItem
																								.getContaGeral()
																								.getConta()
																								.getReferencia()),
																				7));

														cobrancaDocumentoTxt
																.append(".");

														// Dígito verificador da
														// conta
														cobrancaDocumentoTxt
																.append(cobrancaDocumentoItem
																		.getContaGeral()
																		.getConta()
																		.getDigitoVerificadorConta());

														cobrancaDocumentoTxt
																.append(Util
																		.completaString(
																				"",
																				4));

														// Data de vencimento da
														// conta
														cobrancaDocumentoTxt
																.append(Util
																		.formatarData(cobrancaDocumentoItem
																				.getContaGeral()
																				.getConta()
																				.getDataVencimentoConta()));

														cobrancaDocumentoTxt
																.append(Util
																		.completaString(
																				"",
																				39));

														cobrancaDocumentoTxt
																.append(System
																		.getProperty("line.separator"));
													}
													countRegistros++;
												}

											} else {
												while (countImpressao1 < colecaoCobrancaDocumentoItem
														.size()) {
													cobrancaDocumentoItem = (CobrancaDocumentoItem) ((List) colecaoCobrancaDocumentoItem)
															.get(countImpressao1);
													cobrancaDocumentoTxt
															.append(" ");
													cobrancaDocumentoTxt
															.append("2");

													// Mês/Ano de referência da
													// conta
													cobrancaDocumentoTxt
															.append(Util
																	.completaString(
																			Util
																					.formatarAnoMesParaMesAno(cobrancaDocumentoItem
																							.getContaGeral()
																							.getConta()
																							.getReferencia()),
																			7));

													cobrancaDocumentoTxt
															.append(".");

													// Dígito verificador da
													// conta
													cobrancaDocumentoTxt
															.append(cobrancaDocumentoItem
																	.getContaGeral()
																	.getConta()
																	.getDigitoVerificadorConta());

													cobrancaDocumentoTxt
															.append(Util
																	.completaString(
																			"",
																			7));

													// Data de vencimento da
													// conta
													cobrancaDocumentoTxt
															.append(Util
																	.formatarData(cobrancaDocumentoItem
																			.getContaGeral()
																			.getConta()
																			.getDataVencimentoConta()));

													cobrancaDocumentoTxt
															.append(Util
																	.completaString(
																			"",
																			1));

													// Valor do item
													cobrancaDocumentoTxt
															.append(Util
																	.completaStringComEspacoAEsquerda(
																			Util
																					.formatarMoedaReal(cobrancaDocumentoItem
																							.getValorItemCobrado()),
																			13));

													cobrancaDocumentoTxt
															.append(Util
																	.completaString(
																			"",
																			38));

													// Mês/Ano de referência da
													// conta
													cobrancaDocumentoTxt
															.append(Util
																	.completaString(
																			Util
																					.formatarAnoMesParaMesAno(cobrancaDocumentoItem
																							.getContaGeral()
																							.getConta()
																							.getReferencia()),
																			7));

													cobrancaDocumentoTxt
															.append(".");

													// Dígito verificador da
													// conta
													cobrancaDocumentoTxt
															.append(cobrancaDocumentoItem
																	.getContaGeral()
																	.getConta()
																	.getDigitoVerificadorConta());

													cobrancaDocumentoTxt
															.append(Util
																	.completaString(
																			"",
																			4));

													// Data de vencimento da
													// conta
													cobrancaDocumentoTxt
															.append(Util
																	.formatarData(cobrancaDocumentoItem
																			.getContaGeral()
																			.getConta()
																			.getDataVencimentoConta()));

													cobrancaDocumentoTxt
															.append(Util
																	.completaString(
																			"",
																			39));

													cobrancaDocumentoTxt
															.append(System
																	.getProperty("line.separator"));

													countImpressao1++;
												}
											}
										}

										// LINHA 11
										// ==================================

										/*
										 * Canal ("-") Fonte ("2")
										 */
										cobrancaDocumentoTxt.append("-");
										cobrancaDocumentoTxt.append("2");

										cobrancaDocumentoTxt.append(Util
												.completaString("", 22));

										// Valor total do documento de cobrança
										cobrancaDocumentoTxt
												.append(Util
														.completaStringComEspacoAEsquerda(
																Util
																		.formatarMoedaReal(emitirDocumentoCobrancaHelper
																				.getValorDocumento()),
																18));

										cobrancaDocumentoTxt.append(Util
												.completaString("", 100));

										cobrancaDocumentoTxt.append(System
												.getProperty("line.separator"));

										// LINHA 12
										// ==================================

										/*
										 * Canal ("0") Fonte ("1")
										 */
										cobrancaDocumentoTxt.append("0");
										cobrancaDocumentoTxt.append("1");
										cobrancaDocumentoTxt.append(Util
												.completaString("", 64));

										// Perfil do Imóvel
										cobrancaDocumentoTxt
												.append(Util
														.completaString(
																emitirDocumentoCobrancaHelper
																		.getDescricaoImovelPerfil(),
																20));

										cobrancaDocumentoTxt.append(Util
												.completaString("", 56));

										cobrancaDocumentoTxt.append(System
												.getProperty("line.separator"));

										// LINHA 13
										// ==================================

										/*
										 * Canal ("0") Fonte ("1")
										 */
										cobrancaDocumentoTxt.append("0");
										cobrancaDocumentoTxt.append("1");

										cobrancaDocumentoTxt.append(Util
												.completaString("", 140));

										cobrancaDocumentoTxt.append(System
												.getProperty("line.separator"));

										// LINHA 14
										// ==================================

										/*
										 * Canal ("0") Fonte ("1")
										 */
										cobrancaDocumentoTxt.append("0");
										cobrancaDocumentoTxt.append("1");
										cobrancaDocumentoTxt.append(Util
												.completaString("", 89));

										String numeroHidrometro = getControladorAtendimentoPublico()
												.pesquisarNumeroHidrometroLigacaoAgua(
														emitirDocumentoCobrancaHelper
																.getIdImovel());

										// Número Hidrômetro
										if (numeroHidrometro != null) {
											cobrancaDocumentoTxt.append(Util
													.completaString(
															numeroHidrometro,
															10));
										} else {
											cobrancaDocumentoTxt.append(Util
													.completaString("", 10));
										}

										cobrancaDocumentoTxt.append(Util
												.completaString("", 7));

										Object[] dadosLigacaoAgua = null;

										// Dados da Ligação de Água(a partir da
										// tabela
										// LIGACAO_AGUA
										// lagu_id=imov_id da tabela IMOVEL)
										dadosLigacaoAgua = getControladorAtendimentoPublico()
												.pesquisarDadosLigacaoAgua(
														emitirDocumentoCobrancaHelper
																.getIdImovel());

										if (dadosLigacaoAgua != null) {
											if (dadosLigacaoAgua[1] != null) {
												// Data do Corte(lagu_dtcorte)
												cobrancaDocumentoTxt
														.append(Util
																.completaString(
																		(String) Util.formatarData( 
																				(Date) dadosLigacaoAgua[1] ) ,
																		10));
											} else {
												cobrancaDocumentoTxt
														.append(Util
																.completaString(
																		"", 10));
											}
											cobrancaDocumentoTxt.append(Util
													.completaString("", 2));

											if (dadosLigacaoAgua[0] != null) {
												// Tipo da ligação de
												// água(cotp_id)
												cobrancaDocumentoTxt
														.append(Util
																.completaString(
																		("" + (Integer) dadosLigacaoAgua[0]),
																		8));
											} else {
												cobrancaDocumentoTxt
														.append(Util
																.completaString(
																		"", 8));
											}
											cobrancaDocumentoTxt.append(Util
													.completaString("", 14));
										} else {
											cobrancaDocumentoTxt.append(Util
													.completaString("", 34));
										}

										cobrancaDocumentoTxt.append(System
												.getProperty("line.separator"));

										// LINHA 15
										// ==================================

										/*
										 * Canal ("1") Fonte ("1")
										 */
										cobrancaDocumentoTxt.append("1");
										cobrancaDocumentoTxt.append("1");
										cobrancaDocumentoTxt.append(Util
												.completaString("", 5));

										// Código, Sigla e Descrição da Gerência
										// Regional
										cobrancaDocumentoTxt
												.append(Util
														.completaStringComEspacoAEsquerda(
																emitirDocumentoCobrancaHelper
																		.getIdGerencia()
																		.toString(),
																4));

										cobrancaDocumentoTxt.append("-");

										cobrancaDocumentoTxt
												.append(Util
														.completaString(
																emitirDocumentoCobrancaHelper
																		.getNomeAbreviadoGerencia(),
																3));

										cobrancaDocumentoTxt.append("-");

										cobrancaDocumentoTxt
												.append(Util
														.completaString(
																emitirDocumentoCobrancaHelper
																		.getNomeGerencia(),
																28));

										// Constante
										cobrancaDocumentoTxt.append("EXECUTOR");

										// Descrição da empresa
										if (emitirDocumentoCobrancaHelper
												.getIdEmpresa() != null) {
											cobrancaDocumentoTxt.append("-");

											cobrancaDocumentoTxt
													.append(Util
															.completaString(
																	emitirDocumentoCobrancaHelper
																			.getDescricaoEmpresa(),
																	47));
										} else {
											cobrancaDocumentoTxt.append(Util
													.completaString("", 48));
										}

										cobrancaDocumentoTxt.append("SEQ.");

										// Sequencial de impressão
										cobrancaDocumentoTxt
												.append(Util
														.completaStringComEspacoAEsquerda(
																Util
																		.retornaSequencialFormatado(sequencialImpressao),
																9));

										// Descrição da empresa
										if (emitirDocumentoCobrancaHelper
												.getIdEmpresa() != null) {
											cobrancaDocumentoTxt.append("-");

											cobrancaDocumentoTxt
													.append(Util
															.completaString(
																	emitirDocumentoCobrancaHelper
																			.getDescricaoEmpresa(),
																	28));
										} else {
											cobrancaDocumentoTxt.append(Util
													.completaString("", 29));
										}

										cobrancaDocumentoTxt.append(System
												.getProperty("line.separator"));

									}
									// adiciona o id da
									// conta e o sequencial
									// no para serem
									// atualizados
									mapAtualizaSequencial.put(
											emitirDocumentoCobrancaHelper
													.getIdDocumentoCobranca(),
											sequencialImpressao);
									colecaoCobrancaDocumentoItem = null;
								}
							}
						}
						mapCobrancaoDocumentoDivididas = null;
						countOrdem++;
					}
					mapCobrancaDocumentoOrdenada = null;
				}
			} else {
				flagFimPesquisa = true;
			}
			try {
				repositorioCobranca
						.atualizarSequencialCobrancaDocumentoImpressao(mapAtualizaSequencial);
			} catch (ErroRepositorioException e) {
				throw new ControladorException("erro.sistema", e);
			}
			mapAtualizaSequencial = null;

			colecaoEmitirDocumentoCobranca = null;
		}
		System.out.println("********************");
		System.out.println("FIM SUPRESSÃO");
		System.out.println("********************");

		Date dataAtual = new Date();

		String nomeZip = null;
		if (idAcaoCobranca.equals(CobrancaAcao.SUPRESSAO_PARCIAL)) {
			if (idCronogramaAtividadeAcaoCobranca != null) {
				nomeZip = "ORDEM_SUPRESSAO_PARCIAL_GRUPO_"
						+ cobrancaGrupo.getId() + "_"
						+ Util.formatarData(dataAtual) + Util.formatarHoraSemDataSemDoisPontos(dataAtual);
				nomeZip = nomeZip.replace("/", "_");
			} else {
				String descricaoAbrevDocumentoTipo = "";
				if (acaoCobranca != null
						&& acaoCobranca.getDocumentoTipo() != null) {
					descricaoAbrevDocumentoTipo = acaoCobranca
							.getDocumentoTipo().getDescricaoAbreviado();
				}
				String tituloComandoEventual = cobrancaAcaoAtividadeComando
						.getDescricaoTitulo();

				nomeZip = descricaoAbrevDocumentoTipo + " "
						+ tituloComandoEventual + " "
						+ Util.formatarData(dataAtual) + Util.formatarHoraSemDataSemDoisPontos(dataAtual);
				nomeZip = nomeZip.replace("/", "_");
				nomeZip = nomeZip.replace(" ", "_");
			}

		} else {
			if (idAcaoCobranca.equals(CobrancaAcao.SUPRESSAO_TOTAL)) {
				if (idCronogramaAtividadeAcaoCobranca != null) {
					nomeZip = "ORDEM_SUPRESSAO_TOTAL_GRUPO_"
							+ cobrancaGrupo.getId() + "_"
							+ Util.formatarData(dataAtual) + Util.formatarHoraSemDataSemDoisPontos(dataAtual);
				} else {
					String descricaoAbrevDocumentoTipo = "";
					if (acaoCobranca != null
							&& acaoCobranca.getDocumentoTipo() != null) {
						descricaoAbrevDocumentoTipo = acaoCobranca
								.getDocumentoTipo().getDescricaoAbreviado();
					}
					String tituloComandoEventual = cobrancaAcaoAtividadeComando
							.getDescricaoTitulo();

					nomeZip = descricaoAbrevDocumentoTipo + " "
							+ tituloComandoEventual + " "
							+ Util.formatarData(dataAtual) + Util.formatarHoraSemDataSemDoisPontos(dataAtual);
					nomeZip = nomeZip.replace("/", "_");
					nomeZip = nomeZip.replace(" ", "_");
				}

			}
		}

		try {

			if (cobrancaDocumentoTxt != null
					&& cobrancaDocumentoTxt.length() != 0) {

				cobrancaDocumentoTxt.append("\u0004");
				// criar o arquivo zip
				File compactado = new File(nomeZip + ".zip"); // nomeZip
				ZipOutputStream zos = new ZipOutputStream(new FileOutputStream(
						compactado));

				File leitura = new File(nomeZip + ".txt");
				BufferedWriter out = new BufferedWriter(new OutputStreamWriter(
						new FileOutputStream(leitura.getAbsolutePath())));
				out.write(cobrancaDocumentoTxt.toString());
				out.close();
				ZipUtil.adicionarArquivo(zos, leitura);

				// close the stream
				zos.close();
				leitura.delete();
			}
			System.out.println("********************");
			System.out.println("FIM GERAÇÃO ARQUIVO");
			System.out.println("********************");

		} catch (IOException e) {
			e.printStackTrace();
			throw new ControladorException("erro.sistema", e);
		} catch (Exception e) {
			e.printStackTrace();
			throw new ControladorException("erro.sistema", e);
		}


	}

	/**
	 * Pesquisa os dados do parcelamento necessários para o relatório através do
	 * id do parcelamento
	 * 
	 * @author Rafael Corrêa
	 * @date 25/09/2006
	 * 
	 * @return
	 * @throws ControladorException
	 */
	public ParcelamentoRelatorioHelper pesquisarParcelamentoRelatorio(
			Integer idParcelamento) throws ControladorException {

		Collection colecaoParcelamentos = null;
		ParcelamentoRelatorioHelper parcelamentoRelatorioHelper = null;

		try {

			colecaoParcelamentos = repositorioCobranca
					.pesquisarParcelamentoRelatorio(idParcelamento);

		} catch (ErroRepositorioException ex) {
			sessionContext.setRollbackOnly();
			throw new ControladorException("erro.sistema", ex);
		}

		if (colecaoParcelamentos != null && !colecaoParcelamentos.isEmpty()) {
			Iterator colecaoParcelamentosIterator = colecaoParcelamentos
					.iterator();

			// dados da conta
			while (colecaoParcelamentosIterator.hasNext()) {
				parcelamentoRelatorioHelper = new ParcelamentoRelatorioHelper();

				Object[] dadosParcelamento = (Object[]) colecaoParcelamentosIterator
						.next();

				// Cria as variáveis do total de débitos e do total de descontos
				// para ser acrescido de cada débito e desconto existente
				BigDecimal totalDebitos = new BigDecimal("0.00");

				BigDecimal totalDescontos = new BigDecimal("0.00");
				BigDecimal totalDescontosSemValorCreditos = new BigDecimal("0.00");

				if (dadosParcelamento[0] != null) {// 0
					// Imóvel
					parcelamentoRelatorioHelper
							.setIdImovel((Integer) dadosParcelamento[0]);
				}

				if (dadosParcelamento[1] != null) {// 1
					// Nome do Município
					parcelamentoRelatorioHelper
							.setNomeMunicipio(dadosParcelamento[1].toString());
				}

				if (dadosParcelamento[2] != null) {// 2
					// Data do Parcelamento
					parcelamentoRelatorioHelper
							.setDataParcelamento((Date) dadosParcelamento[2]);
				}

				// Débitos
				if (dadosParcelamento[3] != null) {// 3
					// Valor das Faturas em Aberto
					parcelamentoRelatorioHelper
							.setValorFaturasEmAberto((BigDecimal) dadosParcelamento[3]);
					totalDebitos = totalDebitos.add(parcelamentoRelatorioHelper
							.getValorFaturasEmAberto());
				} else {
					parcelamentoRelatorioHelper
							.setValorFaturasEmAberto(new BigDecimal("0.00"));
				}

				if (dadosParcelamento[4] != null) {// 4
					// Valor dos Serviços A Cobrar
					parcelamentoRelatorioHelper
							.setValorServicosACobrar((BigDecimal) dadosParcelamento[4]);
					totalDebitos = totalDebitos.add(parcelamentoRelatorioHelper
							.getValorServicosACobrar());
				} else {
					parcelamentoRelatorioHelper
							.setValorServicosACobrar(new BigDecimal("0.00"));
				}

				if (dadosParcelamento[5] != null) {// 5
					// Valor das Atualizações Monetárias
					parcelamentoRelatorioHelper
							.setValorAtualizacaoMonetaria((BigDecimal) dadosParcelamento[5]);
					totalDebitos = totalDebitos.add(parcelamentoRelatorioHelper
							.getValorAtualizacaoMonetaria());
				} else {
					parcelamentoRelatorioHelper
							.setValorAtualizacaoMonetaria(new BigDecimal("0.00"));
				}

				if (dadosParcelamento[6] != null) {// 6
					// Valor dos Juros/Mora
					parcelamentoRelatorioHelper
							.setValorJurosMora((BigDecimal) dadosParcelamento[6]);
					totalDebitos = totalDebitos.add(parcelamentoRelatorioHelper
							.getValorJurosMora());
				} else {
					parcelamentoRelatorioHelper
							.setValorJurosMora(new BigDecimal("0.00"));
				}

				if (dadosParcelamento[7] != null) {// 7
					// Valor das Multas
					parcelamentoRelatorioHelper
							.setValorMultas((BigDecimal) dadosParcelamento[7]);
					totalDebitos = totalDebitos.add(parcelamentoRelatorioHelper
							.getValorMultas());
				} else {
					parcelamentoRelatorioHelper.setValorMultas(new BigDecimal(
							"0.00"));
				}

				if (dadosParcelamento[8] != null) {// 8
					// Valor das Guais de Pagamento
					parcelamentoRelatorioHelper
							.setValorGuiaPagamento((BigDecimal) dadosParcelamento[8]);
					totalDebitos = totalDebitos.add(parcelamentoRelatorioHelper
							.getValorGuiaPagamento());
				} else {
					parcelamentoRelatorioHelper
							.setValorGuiaPagamento(new BigDecimal("0.00"));
				}

				if (dadosParcelamento[9] != null) {// 9
					// Valor do Parcelamento a Cobrar
					parcelamentoRelatorioHelper
							.setValorParcelamentoACobrar((BigDecimal) dadosParcelamento[9]);
					totalDebitos = totalDebitos.add(parcelamentoRelatorioHelper
							.getValorParcelamentoACobrar());
				} else {
					parcelamentoRelatorioHelper
							.setValorParcelamentoACobrar(new BigDecimal("0.00"));
				}

				// Seta o valor do total dos débitos, pois todos os dados de
				// débito já foram passados
				parcelamentoRelatorioHelper.setValorTotalDebitos(totalDebitos);

				// Descontos/Créditos

				if (dadosParcelamento[10] != null) {// 10
					// Valor dos Descontos de Acréscimo
					parcelamentoRelatorioHelper.setValorDescontoAcrescimo((BigDecimal) dadosParcelamento[10]);
					totalDescontos = totalDescontos.add(parcelamentoRelatorioHelper.getValorDescontoAcrescimo());
					totalDescontosSemValorCreditos = totalDescontosSemValorCreditos
						.add(parcelamentoRelatorioHelper.getValorDescontoAcrescimo());					
				} else {
					parcelamentoRelatorioHelper
							.setValorDescontoAcrescimo(new BigDecimal("0.00"));
				}

				if (dadosParcelamento[11] != null) {// 11
					// Valor dos Descontos de Antiguidade
					parcelamentoRelatorioHelper
							.setValorDescontoAntiguidade((BigDecimal) dadosParcelamento[11]);
					totalDescontos = totalDescontos.add(parcelamentoRelatorioHelper.getValorDescontoAntiguidade());
					totalDescontosSemValorCreditos = totalDescontosSemValorCreditos
						.add(parcelamentoRelatorioHelper.getValorDescontoAntiguidade());
				} else {
					parcelamentoRelatorioHelper
							.setValorDescontoAntiguidade(new BigDecimal("0.00"));
				}

				if (dadosParcelamento[12] != null) {// 12
					// Valor dos Descontos de Inatividade
					parcelamentoRelatorioHelper
							.setValorDescontoInatividade((BigDecimal) dadosParcelamento[12]);
					totalDescontos = totalDescontos.add(parcelamentoRelatorioHelper.getValorDescontoInatividade());
					totalDescontosSemValorCreditos = totalDescontosSemValorCreditos
						.add(parcelamentoRelatorioHelper.getValorDescontoInatividade());
				} else {
					parcelamentoRelatorioHelper
							.setValorDescontoInatividade(new BigDecimal("0.00"));
				}

				if (dadosParcelamento[13] != null) {// 13
					// Valor dos Créditos a Realizar
					parcelamentoRelatorioHelper
							.setValorCreditosRealizar((BigDecimal) dadosParcelamento[13]);
					totalDescontos = totalDescontos
							.add(parcelamentoRelatorioHelper
									.getValorCreditosRealizar());
				} else {
					parcelamentoRelatorioHelper
							.setValorCreditosRealizar(new BigDecimal("0.00"));
				}

				if (dadosParcelamento[24] != null) {// 24
					// Valor Desconto de Sanções Regulamentares
					parcelamentoRelatorioHelper
							.setValorDescontoSancoesRegulamentares((BigDecimal) dadosParcelamento[24]);
					totalDescontos = totalDescontos.add(parcelamentoRelatorioHelper.getValorDescontoSancoesRegulamentares());
					totalDescontosSemValorCreditos = totalDescontosSemValorCreditos
						.add(parcelamentoRelatorioHelper.getValorDescontoSancoesRegulamentares());

				} else {
					parcelamentoRelatorioHelper
							.setValorDescontoSancoesRegulamentares(new BigDecimal(
									"0.00"));
				}

				if (dadosParcelamento[25] != null) {// 25
					// Valor Desconto de Sanções Regulamentares
					parcelamentoRelatorioHelper
							.setValorDescontoTarifaSocial((BigDecimal) dadosParcelamento[25]);

					totalDescontos = totalDescontos.add(parcelamentoRelatorioHelper.getValorDescontoTarifaSocial());
					totalDescontosSemValorCreditos = totalDescontosSemValorCreditos
						.add(parcelamentoRelatorioHelper.getValorDescontoTarifaSocial());

				} else {
					parcelamentoRelatorioHelper
							.setValorDescontoTarifaSocial(new BigDecimal("0.00"));
				}
				
				if(dadosParcelamento[40] != null) { //40
					//Valor Desconto Débito Total
					parcelamentoRelatorioHelper.setValorDescontoDebitoTotal((BigDecimal) dadosParcelamento[40]);
					
					totalDescontos = totalDescontos.add(parcelamentoRelatorioHelper.getValorDescontoDebitoTotal());
					totalDescontosSemValorCreditos = totalDescontosSemValorCreditos.
							add(parcelamentoRelatorioHelper.getValorDescontoDebitoTotal());
				}else{
					parcelamentoRelatorioHelper.setValorDescontoDebitoTotal(new BigDecimal("0.00"));
				}

				// Seta o valor do total dos descontos/créditos, pois todos os
				// dados de desconto/crédito já foram passados
				parcelamentoRelatorioHelper.setValorTotalDescontos(totalDescontos);
				parcelamentoRelatorioHelper.setValorTotalDescontosSemValorCreditos(totalDescontosSemValorCreditos);

				if (dadosParcelamento[14] != null) {// 14
					// Valor a Ser Negociado
					parcelamentoRelatorioHelper
							.setValorASerNegociado((BigDecimal) dadosParcelamento[14]);
				} else {
					parcelamentoRelatorioHelper
							.setValorASerNegociado(new BigDecimal("0.00"));
				}

				if (dadosParcelamento[15] != null) {// 15
					// Valor da Entrada
					parcelamentoRelatorioHelper
							.setValorEntrada((BigDecimal) dadosParcelamento[15]);
				} else {
					parcelamentoRelatorioHelper.setValorEntrada(new BigDecimal(
							"0.00"));
				}

				if (dadosParcelamento[16] != null) {// 16
					// Número de Parcelas
					parcelamentoRelatorioHelper
							.setNumeroParcelas((Short) dadosParcelamento[16]);
				}

				if (dadosParcelamento[17] != null) {// 17
					// Valor da Parcela
					parcelamentoRelatorioHelper
							.setValorParcela((BigDecimal) dadosParcelamento[17]);
					// Valor a Ser Parcelado
					BigDecimal valorASerParcelado = parcelamentoRelatorioHelper
							.getValorParcela();
					valorASerParcelado = valorASerParcelado
							.multiply(new BigDecimal(
									parcelamentoRelatorioHelper
											.getNumeroParcelas().toString()));
					parcelamentoRelatorioHelper
							.setValorASerParcelado(valorASerParcelado);
				} else {
					parcelamentoRelatorioHelper.setValorParcela(new BigDecimal(
							"0.00"));
					parcelamentoRelatorioHelper
							.setValorASerParcelado(new BigDecimal("0.00"));
				}

				if (dadosParcelamento[18] != null) {// 18
					// Indicador Restabelecimento
					if (((Short) dadosParcelamento[18])
							.equals(ConstantesSistema.SIM)) {
						parcelamentoRelatorioHelper
								.setSolicitacaoRestabelecimento("SIM");
					} else {
						parcelamentoRelatorioHelper
								.setSolicitacaoRestabelecimento("NÃO");
					}
				} else {
					parcelamentoRelatorioHelper
							.setSolicitacaoRestabelecimento("");
				}

				if (dadosParcelamento[19] != null) {// 19
					// Id do Funcionário
					parcelamentoRelatorioHelper
							.setIdFuncionario((Integer) dadosParcelamento[19]);
				} else if (dadosParcelamento[26] != null) {// 26
					// Id do Funcionário
					parcelamentoRelatorioHelper
							.setIdFuncionario((Integer) dadosParcelamento[26]);
				}

				if (dadosParcelamento[20] != null) {// 20
					// Nome do Cliente do Parcelamento
					parcelamentoRelatorioHelper
							.setNomeClienteParcelamento((String) dadosParcelamento[20]);
				} else {
					parcelamentoRelatorioHelper.setNomeClienteParcelamento("");
				}

				if (dadosParcelamento[21] != null
						&& !((String) dadosParcelamento[21]).equals("")) {// 21
					// CPF do Cliente do Parcelamento
					String cpfFormatado = (String) dadosParcelamento[21];
					
					String zeros = "";
					for (int a = 0; a < (11 - cpfFormatado.length()); a++) {
						zeros = zeros.concat("0");
					}
					// concatena os zeros ao numero
					// caso o numero seja diferente de nulo
					cpfFormatado = zeros.concat(cpfFormatado);
					
					cpfFormatado = cpfFormatado.substring(0, 3) + "."
							+ cpfFormatado.substring(3, 6) + "."
							+ cpfFormatado.substring(6, 9) + "-"
							+ cpfFormatado.substring(9, 11);

					parcelamentoRelatorioHelper
							.setCpfClienteParcelamento(cpfFormatado);
				} else if (dadosParcelamento[22] != null
						&& !((String) dadosParcelamento[22]).equals("")) {// 21
					// CNPJ do Cliente do Parcelamento
					String cnpjFormatado = (String) dadosParcelamento[22];
					String zeros = "";

					for (int a = 0; a < (14 - cnpjFormatado.length()); a++) {
						zeros = zeros.concat("0");
					}
					// concatena os zeros ao numero
					// caso o numero seja diferente de nulo
					cnpjFormatado = zeros.concat(cnpjFormatado);

					cnpjFormatado = cnpjFormatado.substring(0, 2) + "."
							+ cnpjFormatado.substring(2, 5) + "."
							+ cnpjFormatado.substring(5, 8) + "/"
							+ cnpjFormatado.substring(8, 12) + "-"
							+ cnpjFormatado.substring(12, 14);

					parcelamentoRelatorioHelper
							.setCpfClienteParcelamento(cnpjFormatado);
				} else {
					parcelamentoRelatorioHelper.setCpfClienteParcelamento("");
				}

				if (dadosParcelamento[23] != null) {
					// taxaJuros
					parcelamentoRelatorioHelper
							.setTaxaJuros(Util
									.formatarMoedaReal((BigDecimal) dadosParcelamento[23]));
				} else {
					parcelamentoRelatorioHelper.setTaxaJuros("0,00");
				}

				String rgClienteParcelamento = "";
				Cliente clienteParcelamento = getControladorCliente()
						.pesquisarDadosClienteDoParcelamentoRelatorioParcelamento(
								idParcelamento);

				if (clienteParcelamento != null) {

					if (clienteParcelamento.getRg() != null) {
						if (clienteParcelamento.getOrgaoExpedidorRg() != null
								&& clienteParcelamento.getUnidadeFederacao() != null) {
							rgClienteParcelamento = clienteParcelamento.getRg()
									+ "-"
									+ clienteParcelamento.getOrgaoExpedidorRg()
											.getDescricao().trim()
									+ "/"
									+ clienteParcelamento.getUnidadeFederacao()
											.getSigla();
						} else {
							rgClienteParcelamento = clienteParcelamento.getRg();
						}
					}
					parcelamentoRelatorioHelper
							.setRgClienteParcelamento(rgClienteParcelamento);
				}
				
				if ( dadosParcelamento[27] != null ){
					parcelamentoRelatorioHelper.setNomeDiretorComercial( (String) dadosParcelamento[27] );
				}
				
				if ( dadosParcelamento[28] != null ){
					parcelamentoRelatorioHelper.setCpfDiretorComercial( Util.formatarCpf( (String) dadosParcelamento[28] ) );
				}
				
				if ( dadosParcelamento[29] != null ){
					parcelamentoRelatorioHelper.setProfissao( (String) dadosParcelamento[29] );
				}
				
				if ( dadosParcelamento[30] != null ){
					parcelamentoRelatorioHelper.setIndicadorPessoaJuridica( (Short) dadosParcelamento[30] );
				}
				
				if ( dadosParcelamento[31] != null ){
					parcelamentoRelatorioHelper.setNomeDevedor( (String) dadosParcelamento[31] );
				}
				
				if ( dadosParcelamento[32] != null ){
					parcelamentoRelatorioHelper.setCnpjDevedor( Util.formatarCnpj( (String) dadosParcelamento[32] ) );
				}
				
				if ( dadosParcelamento[33] != null ){
					parcelamentoRelatorioHelper.setIdDevedor( (Integer) dadosParcelamento[33] );
				}				

				// Endereço
				String endereco = getControladorEndereco().pesquisarEndereco(
						parcelamentoRelatorioHelper.getIdImovel());
				parcelamentoRelatorioHelper.setEndereco(endereco);
				
				parcelamentoRelatorioHelper.setEnderecoDevedor(
					getControladorEndereco().pesquisarEnderecoClienteAbreviado( parcelamentoRelatorioHelper.getIdDevedor() ) );

				// Dados do Cliente
				Cliente cliente = getControladorCliente()
						.pesquisarDadosClienteRelatorioParcelamentoPorImovel(
								parcelamentoRelatorioHelper.getIdImovel());

				// NomeRepositorio
				parcelamentoRelatorioHelper.setNomeCliente(cliente.getNome());

				// RG
				parcelamentoRelatorioHelper.setRgCliente(cliente.getRg());

				// CPF/CNPJ
				if (cliente.getCpf() != null) {
					parcelamentoRelatorioHelper.setCpfCnpj(cliente
							.getCpfFormatado());
				} else if (cliente.getCnpj() != null) {
					parcelamentoRelatorioHelper.setCpfCnpj(cliente
							.getCnpjFormatado());
				} else {
					parcelamentoRelatorioHelper.setCpfCnpj("");
				}

				if (cliente.getOrgaoExpedidorRg() != null
						&& cliente.getOrgaoExpedidorRg().getDescricao() != null) {
					parcelamentoRelatorioHelper
							.setDescOrgaoExpRgCliente(cliente
									.getOrgaoExpedidorRg().getDescricao());
				}

				if (cliente.getUnidadeFederacao() != null
						&& cliente.getUnidadeFederacao().getSigla() != null) {
					parcelamentoRelatorioHelper
							.setSiglaUnidadeFederacaoRgCliente(cliente
									.getUnidadeFederacao().getSigla());
				}

				// Telefone
				Collection colecaoClienteFone = getControladorCliente()
						.pesquisarClienteFone(cliente.getId());

				ClienteFone clienteFone = null;

				if (colecaoClienteFone != null && !colecaoClienteFone.isEmpty()) {

					Iterator colecaoClienteFoneIterator = colecaoClienteFone
							.iterator();

					while (colecaoClienteFoneIterator.hasNext()) {
						clienteFone = (ClienteFone) colecaoClienteFoneIterator
								.next();

						if (clienteFone.getIndicadorTelefonePadrao() != null
								&& clienteFone
										.getIndicadorTelefonePadrao()
										.equals(
												ClienteFone.INDICADOR_FONE_PADRAO)) {
							break;
						}
					}

					parcelamentoRelatorioHelper.setTelefone(clienteFone
							.getDddTelefone());

				} else {
					parcelamentoRelatorioHelper.setTelefone("");
				}
				
				// Telefone do Devedor
				Collection colecaoDevedorFone = getControladorCliente()
						.pesquisarClienteFone( parcelamentoRelatorioHelper.getIdDevedor() );

				ClienteFone devedorFone = null;

				if (colecaoDevedorFone != null && !colecaoDevedorFone.isEmpty()) {

					Iterator colecaoDevedorFoneIterator = colecaoDevedorFone
							.iterator();

					while (colecaoDevedorFoneIterator.hasNext()) {
						devedorFone = (ClienteFone) colecaoDevedorFoneIterator
								.next();

						if (devedorFone.getIndicadorTelefonePadrao() != null
								&& devedorFone
										.getIndicadorTelefonePadrao()
										.equals(
												ClienteFone.INDICADOR_FONE_PADRAO)) {
							break;
						}
					}

					parcelamentoRelatorioHelper.setTelefoneDevedor(devedorFone
							.getDddTelefone());

				} else {
					parcelamentoRelatorioHelper.setTelefoneDevedor("");
				}
				


				int numeroParcelas = parcelamentoRelatorioHelper
				.getNumeroParcelas().intValue();

				//alterado por Flávio Leonardo 09/07/2008
				//inicio parcelamento deve ser pelo anoMesReferenciaFaturamento 
				//e naum pelo anomes faturamento do grupo
				/*parcelamentoRelatorioHelper
						.setMesAnoInicioParcelamento(Util
								.formatarAnoMesParaMesAno(anoMesReferenciaFaturamentoGrupo));
				parcelamentoRelatorioHelper.setMesAnoFinalParcelamento(Util
						.formatarAnoMesParaMesAno(Util.somaMesAnoMesReferencia(
								anoMesReferenciaFaturamentoGrupo,
								numeroParcelasMenosUm)));*/
                //35 anoMesReferenciaFaturamento
				parcelamentoRelatorioHelper
					.setMesAnoInicioParcelamento(Util
						.formatarAnoMesParaMesAno(Util.somaMesAnoMesReferencia((Integer)dadosParcelamento[35],1)));
				parcelamentoRelatorioHelper.setMesAnoFinalParcelamento(Util
				    .formatarAnoMesParaMesAno(Util.somaMesAnoMesReferencia(
				    		(Integer)dadosParcelamento[35],
						numeroParcelas)));
                
                if (dadosParcelamento[34] != null) {// 34
                    // nome do usuario que efetuou parcelamento
                    parcelamentoRelatorioHelper
                            .setNomeUsuarioParcelamento((String) dadosParcelamento[34]);
                }else{
                    parcelamentoRelatorioHelper.setNomeUsuarioParcelamento("");
                }
                
                //Bairro
                if( dadosParcelamento[36] != null ) {
                	parcelamentoRelatorioHelper.setBairro( ( String ) dadosParcelamento[36] );
                } else {
                	parcelamentoRelatorioHelper.setBairro("");
                }
                
                //Codigo da rota
                if ( dadosParcelamento[37] != null ) {
                	parcelamentoRelatorioHelper.setCodigoRota( ( Short ) dadosParcelamento[37] );
                } else {
                	parcelamentoRelatorioHelper.setCodigoRota(new Short(""));
                }
                
                //Localidade
                if ( dadosParcelamento[38] != null ) {
                	parcelamentoRelatorioHelper.setLocalidade( ( String ) dadosParcelamento[38] );
                } else {
                	parcelamentoRelatorioHelper.setLocalidade("");
                }
                
                //Setor Comercial
                if ( dadosParcelamento[39] != null ) {
                	int setorCodigo = (Integer) dadosParcelamento[39];
                	parcelamentoRelatorioHelper.setSetorComercial( String.valueOf(setorCodigo) );
                } else {
                	parcelamentoRelatorioHelper.setSetorComercial("");
                }
                

			}

		}

		return parcelamentoRelatorioHelper;
	}


	/**
	 * Pesquisa os itens do parcelamento necessários para o relatório através do
	 * id do parcelamento
	 * 
	 * @author Rafael Corrêa
	 * @date 25/09/2006
	 * 
	 * @return
	 * @throws ControladorException
	 */
	public Collection pesquisarParcelamentoItemPorIdParcelamentoRelatorio(
			Integer idParcelamento) throws ControladorException {

		Collection colecaoParcelamentosItens = null;
		Collection colecaoParcelamentosItensRelatorio = null;

		try {

			colecaoParcelamentosItens = this.repositorioCobranca
					.pesquisarParcelamentoItemPorIdParcelamentoRelatorio(idParcelamento);

		} catch (ErroRepositorioException ex) {
			ex.printStackTrace();
			throw new ControladorException("erro.sistema", ex);
		}

		if (colecaoParcelamentosItens != null
				&& !colecaoParcelamentosItens.isEmpty()) {

			colecaoParcelamentosItensRelatorio = new ArrayList();

			Iterator colecaoParcelamentosItensIterator = colecaoParcelamentosItens
					.iterator();

			while (colecaoParcelamentosItensIterator.hasNext()) {

				Object[] dadosParcelamentoItem = (Object[]) colecaoParcelamentosItensIterator
						.next();

				ParcelamentoItem parcelamentoItem = new ParcelamentoItem();

				// Dados das Contas
				ContaGeral contaGeral = new ContaGeral();
				Conta conta = new Conta();

				// Referência da Conta
				if (dadosParcelamentoItem[0] != null) { // 0
					conta.setReferencia(((Integer) dadosParcelamentoItem[0])
							.intValue());
				}

				// Valor de Água da Conta
				if (dadosParcelamentoItem[1] != null) { // 1
					conta.setValorAgua((BigDecimal) dadosParcelamentoItem[1]);
				}

				// Valor de Esgoto da Conta
				if (dadosParcelamentoItem[2] != null) { // 2
					conta.setValorEsgoto((BigDecimal) dadosParcelamentoItem[2]);
				}

				// Valor dos Débitos da Conta
				if (dadosParcelamentoItem[4] != null) { // 4
					conta.setDebitos((BigDecimal) dadosParcelamentoItem[4]);
				}

				// Valor dos Créditos da Conta
				if (dadosParcelamentoItem[3] != null) { // 3
					conta
							.setValorCreditos((BigDecimal) dadosParcelamentoItem[3]);
				}

				contaGeral.setConta(conta);
				parcelamentoItem.setContaGeral(contaGeral);

				// Dados das Guias de Pagamento
				GuiaPagamentoGeral guiaPagamentoGeral = new GuiaPagamentoGeral();
				GuiaPagamento guiaPagamento = new GuiaPagamento();
				DebitoTipo debitoTipoGuiaPagamento = new DebitoTipo();

				// Id da Guia de Pagamento
				if (dadosParcelamentoItem[5] != null) { // 5
					guiaPagamento.setId((Integer) dadosParcelamentoItem[5]);
				}

				// Descrição do Tipo de Débito das Guias Pagamento
				if (dadosParcelamentoItem[6] != null) { // 6
					debitoTipoGuiaPagamento
							.setDescricao((String) dadosParcelamentoItem[6]);

				}

				guiaPagamento.setDebitoTipo(debitoTipoGuiaPagamento);

				// Valor das Guias de Pagamento
				if (dadosParcelamentoItem[7] != null) { // 7
					guiaPagamento
							.setValorDebito((BigDecimal) dadosParcelamentoItem[7]);
				}

				guiaPagamentoGeral.setGuiaPagamento(guiaPagamento);
				parcelamentoItem.setGuiaPagamentoGeral(guiaPagamentoGeral);

				// Dados do Débito a Cobrar
				DebitoACobrarGeral debitoACobrarGeral = new DebitoACobrarGeral();
				DebitoACobrar debitoACobrar = new DebitoACobrar();
				DebitoTipo debitoTipoDebitoACobrar = new DebitoTipo();

				// Id do Tipo de Débito dos Débitos a Cobrar
				if (dadosParcelamentoItem[8] != null) { // 8
					debitoTipoDebitoACobrar
							.setId((Integer) dadosParcelamentoItem[8]);
				}

				// Descrição do Tipo de Débito dos Débitos a Cobrar
				if (dadosParcelamentoItem[9] != null) { // 9
					debitoTipoDebitoACobrar
							.setDescricao((String) dadosParcelamentoItem[9]);
				}

				debitoACobrar.setDebitoTipo(debitoTipoDebitoACobrar);

				// Número de Prestações do Débito a Cobrar
				if (dadosParcelamentoItem[10] != null) { // 10
					debitoACobrar
							.setNumeroPrestacaoDebito(((Short) dadosParcelamentoItem[10])
									.shortValue());
				}

				// Número de Prestações Cobradas do Débito a Cobrar
				if (dadosParcelamentoItem[11] != null) { // 11
					debitoACobrar
							.setNumeroPrestacaoCobradas(((Short) dadosParcelamentoItem[11])
									.shortValue());
				}

				// Valor do Débito a Cobrar
				if (dadosParcelamentoItem[12] != null) { // 12
					debitoACobrar
							.setValorDebito(((BigDecimal) dadosParcelamentoItem[12]));
				}
                
				//número de parcelas bonus
                if (dadosParcelamentoItem[18] != null) { // 18
                    debitoACobrar
                            .setNumeroParcelaBonus(((Short) dadosParcelamentoItem[18]));
                }
                

				debitoACobrarGeral.setDebitoACobrar(debitoACobrar);
				parcelamentoItem.setDebitoACobrarGeral(debitoACobrarGeral);

				// Dados do Crédito a Realizar
				CreditoARealizarGeral creditoARealizarGeral = new CreditoARealizarGeral();
				CreditoARealizar creditoARealizar = new CreditoARealizar();
				CreditoTipo creditoTipoCreditoARealizar = new CreditoTipo();

				// Id do Tipo de Crédito dos Débitos a Cobrar
				if (dadosParcelamentoItem[13] != null) { // 13
					creditoTipoCreditoARealizar
							.setId((Integer) dadosParcelamentoItem[13]);
				}

				// Descrição do Tipo de Crédito dos Débitos a Cobrar
				if (dadosParcelamentoItem[14] != null) { // 14
					creditoTipoCreditoARealizar
							.setDescricao((String) dadosParcelamentoItem[14]);
				}

				creditoARealizar.setCreditoTipo(creditoTipoCreditoARealizar);

				// Número de Prestações do Crédito a Realizar
				if (dadosParcelamentoItem[15] != null) { // 15
					creditoARealizar
							.setNumeroPrestacaoCredito(((Short) dadosParcelamentoItem[15])
									.shortValue());
				}

				// Número de Prestações Realizadas do Crédito a Realizar
				if (dadosParcelamentoItem[16] != null) { // 16
					creditoARealizar
							.setNumeroPrestacaoRealizada(((Short) dadosParcelamentoItem[16])
									.shortValue());
				}

				// Valor do Crédito a Realizar
				if (dadosParcelamentoItem[17] != null) { // 17
					creditoARealizar
							.setValorCredito(((BigDecimal) dadosParcelamentoItem[17]));
				}

				// número de parcelas bonus
                if (dadosParcelamentoItem[19] != null) { // 19
                    creditoARealizar
                            .setNumeroParcelaBonus(((Short) dadosParcelamentoItem[19]));
                }
                
				creditoARealizarGeral.setCreditoARealizar(creditoARealizar);
				parcelamentoItem
						.setCreditoARealizarGeral(creditoARealizarGeral);

				colecaoParcelamentosItensRelatorio.add(parcelamentoItem);

			}// fim do while
		}
		return colecaoParcelamentosItensRelatorio;

	}

	/**
	 * Este caso de uso permite a emissão de um ou mais documentos de cobrança
	 * 
	 * 
	 * [UC0349] Emitir Documento de Cobrança - Ordem de Fiscalização
	 * 
	 * @author Ana Maria
	 * @data 11/10/2006
	 * 
	 * @param
	 * @return void
	 */
	public void emitirDocumentoCobrancaOrdemFiscalizacao(
			CobrancaAcaoAtividadeCronograma cobrancaAcaoAtividadeCronograma,
			CobrancaAcaoAtividadeComando cobrancaAcaoAtividadeComando,
			Date dataAtualPesquisa, CobrancaAcao acaoCobranca,
			CobrancaGrupo cobrancaGrupo, CobrancaCriterio cobrancaCriterio)
			throws ControladorException {

		SistemaParametro sistemaParametro = this.getControladorUtil()
				.pesquisarParametrosDoSistema();

		System.out.println("********************");
		System.out.println("INICIO FISCALIZAÇÃO");
		System.out.println("********************");

		boolean flagFimPesquisa = false;
		final int quantidadeCobrancaDocumento = 1000;
		int quantidadeCobrancaDocumentoInicio = 0;
		StringBuilder cobrancaDocumentoTxt = new StringBuilder();
		int sequencialImpressao = 0;
		Map<Integer, Integer> mapAtualizaSequencial = null;

		Integer idCronogramaAtividadeAcaoCobranca = null;
		Integer idComandoAtividadeAcaoCobranca = null;
		Integer idAcaoCobranca = null;
		if (cobrancaAcaoAtividadeCronograma != null
				&& cobrancaAcaoAtividadeCronograma.getId() != null) {
			idCronogramaAtividadeAcaoCobranca = cobrancaAcaoAtividadeCronograma
					.getId();
		}
		if (cobrancaAcaoAtividadeComando != null
				&& cobrancaAcaoAtividadeComando.getId() != null) {
			idComandoAtividadeAcaoCobranca = cobrancaAcaoAtividadeComando
					.getId();
		}
		if (acaoCobranca != null && acaoCobranca.getId() != null) {
			idAcaoCobranca = acaoCobranca.getId();
		}

		while (!flagFimPesquisa) {
			// map que armazena o sequencial e o numero da
			// conta para no final atualizar todos os
			// sequencias
			mapAtualizaSequencial = new HashMap();
			Collection colecaoEmitirDocumentoCobranca = null;
			try {
				colecaoEmitirDocumentoCobranca = repositorioCobranca
						.pesquisarCobrancaDocumentoOrdemCorte(
								idCronogramaAtividadeAcaoCobranca,
								idComandoAtividadeAcaoCobranca,
								dataAtualPesquisa, idAcaoCobranca,
								quantidadeCobrancaDocumentoInicio);
			} catch (ErroRepositorioException ex) {
				ex.printStackTrace();
				throw new ControladorException("erro.sistema", ex);
			}

			if (colecaoEmitirDocumentoCobranca != null
					&& !colecaoEmitirDocumentoCobranca.equals("")) {
				System.out.println("********************");
				System.out.println("QUANTIDADE COBRANÇA:"
						+ colecaoEmitirDocumentoCobranca.size());
				System.out.println("********************");

				if (colecaoEmitirDocumentoCobranca.size() < quantidadeCobrancaDocumento) {
					flagFimPesquisa = true;
				} else {
					quantidadeCobrancaDocumentoInicio = quantidadeCobrancaDocumentoInicio + 1000;
				}

				Iterator iteratorColecaoCobrancaDocumento = colecaoEmitirDocumentoCobranca
						.iterator();
				EmitirDocumentoCobrancaHelper emitirDocumentoCobrancaHelper = null;
				while (iteratorColecaoCobrancaDocumento.hasNext()) {

					emitirDocumentoCobrancaHelper = (EmitirDocumentoCobrancaHelper) iteratorColecaoCobrancaDocumento
							.next();

					String nomeCliente = null;
					Collection colecaoCobrancaDocumentoItem = null;

					/*
					 * Estes objetos auxiliarão na formatação da inscrição que
					 * será composta por informações do documento de cobrança e
					 * do imóvel a ele associado
					 */
					Imovel inscricao = null;
					SetorComercial setorComercialInscricao = null;
					Quadra quadraInscricao = null;
					Localidade localidade = null;

					sequencialImpressao++;

					if (emitirDocumentoCobrancaHelper != null) {
						try {

							nomeCliente = this.repositorioClienteImovel
									.pesquisarNomeClientePorImovel(emitirDocumentoCobrancaHelper
											.getIdImovel());

							CobrancaDocumento cobrancaDocumento = new CobrancaDocumento();
							cobrancaDocumento
									.setId(emitirDocumentoCobrancaHelper
											.getIdDocumentoCobranca());

							colecaoCobrancaDocumentoItem = this.repositorioCobranca
									.selecionarCobrancaDocumentoItemReferenteConta(cobrancaDocumento);
							cobrancaDocumento = null;

						} catch (ErroRepositorioException ex) {
							ex.printStackTrace();
							throw new ControladorException("erro.sistema", ex);
						}

//						if (colecaoCobrancaDocumentoItem != null
//								&& !colecaoCobrancaDocumentoItem.isEmpty()) {
							// Início do processo de geração do
							// arquivo txt

							// LINHA 01
							// ==================================

							/*
							 * Canal ("1") Fonte ("1")
							 */
						
							
						
							cobrancaDocumentoTxt.append("1");
							cobrancaDocumentoTxt.append("1");
							cobrancaDocumentoTxt.append(" ");
							
							if (cobrancaAcaoAtividadeCronograma != null) {
								cobrancaDocumentoTxt.append(Util.completaString("", 21));
								String ciclo = "CICLO:" + Util.formatarAnoMesParaMesAno(
										cobrancaAcaoAtividadeCronograma.getCobrancaAcaoCronograma()
										.getCobrancaGrupoCronogramaMes().getAnoMesReferencia());								
								cobrancaDocumentoTxt.append(Util.completaString(ciclo, 151));
							}else {
								cobrancaDocumentoTxt.append(Util.completaString("", 186));
							}
							
							cobrancaDocumentoTxt.append(System
									.getProperty("line.separator"));

							// LINHA 02
							// ==================================

							/*
							 * Canal ("1") Fonte ("1")
							 */
							cobrancaDocumentoTxt.append("1");
							cobrancaDocumentoTxt.append("1");

							cobrancaDocumentoTxt.append(Util.completaString("",
									26));

							cobrancaDocumentoTxt.append("EXECUTOR");

							cobrancaDocumentoTxt.append("-");

							// Código e descrição da empresa
							if (emitirDocumentoCobrancaHelper.getIdEmpresa() != null) {
								cobrancaDocumentoTxt.append(Util
										.completaStringComEspacoAEsquerda(
												emitirDocumentoCobrancaHelper
														.getIdEmpresa()
														.toString(), 4));

								cobrancaDocumentoTxt.append("-");

								cobrancaDocumentoTxt.append(Util
										.completaString(
												emitirDocumentoCobrancaHelper
														.getDescricaoEmpresa(),
												10));
							} else {
								cobrancaDocumentoTxt.append(Util
										.completaString("", 15));
							}

							cobrancaDocumentoTxt.append(Util.completaString("",
									2));

							// Sigla e descriçao da gerência
							// regional
							cobrancaDocumentoTxt.append(Util.completaString(
									emitirDocumentoCobrancaHelper
											.getNomeAbreviadoGerencia(), 3));

							cobrancaDocumentoTxt.append("-");

							cobrancaDocumentoTxt.append(Util.completaString(
									emitirDocumentoCobrancaHelper
											.getNomeGerencia(), 20));
							cobrancaDocumentoTxt.append(Util.completaString("",
									5));

							// Nome da Localidade
							cobrancaDocumentoTxt.append(Util.completaString(
									emitirDocumentoCobrancaHelper
											.getDescricaoLocalidade(), 10));

							cobrancaDocumentoTxt.append(Util.completaString("",
									96));

							cobrancaDocumentoTxt.append(System
									.getProperty("line.separator"));

							// LINHA 03
							// ==================================

							/*
							 * Canal ("-") Fonte ("1")
							 */
							cobrancaDocumentoTxt.append("-");
							cobrancaDocumentoTxt.append("1");
							cobrancaDocumentoTxt.append(Util.completaString("",
									2));

							// Inscrição
							quadraInscricao = new Quadra();
							setorComercialInscricao = new SetorComercial();
							localidade = new Localidade();
							inscricao = new Imovel();

							quadraInscricao
									.setNumeroQuadra(emitirDocumentoCobrancaHelper
											.getNumeroQuadra());
							setorComercialInscricao
									.setCodigo(emitirDocumentoCobrancaHelper
											.getCodigoSetorComercial());
							localidade.setId(emitirDocumentoCobrancaHelper
									.getIdLocalidade());
							inscricao.setLocalidade(localidade);
							inscricao
									.setSetorComercial(setorComercialInscricao);
							inscricao.setQuadra(quadraInscricao);
							inscricao.setLote(emitirDocumentoCobrancaHelper
									.getLote());
							inscricao.setSubLote(emitirDocumentoCobrancaHelper
									.getSubLote());

							cobrancaDocumentoTxt.append(Util.completaString(
									inscricao.getInscricaoFormatada(), 20));

							cobrancaDocumentoTxt.append(Util.completaString("",
									12));

							// Nome do Cliente
							cobrancaDocumentoTxt.append(Util.completaString(
									nomeCliente, 50));

							cobrancaDocumentoTxt.append(Util.completaString("",
									103));

							cobrancaDocumentoTxt.append(System
									.getProperty("line.separator"));

							// LINHA 04
							// ==================================

							/*
							 * Canal ("+") Fonte ("2")
							 */

							cobrancaDocumentoTxt.append("+");
							cobrancaDocumentoTxt.append("2");
							cobrancaDocumentoTxt.append(Util.completaString("",
									68));

							// Matrícula do imóvel
							String matriculaImovelFormatada = Util
									.adicionarZerosEsquedaNumero(9, ""
											+ emitirDocumentoCobrancaHelper
													.getIdImovel());
							matriculaImovelFormatada = matriculaImovelFormatada
									.substring(0, 8)
									+ "."
									+ matriculaImovelFormatada.substring(8, 9);
							cobrancaDocumentoTxt.append(Util.completaString(
									matriculaImovelFormatada, 10));

							cobrancaDocumentoTxt.append(Util.completaString("",
									109));

							cobrancaDocumentoTxt.append(System
									.getProperty("line.separator"));

							// LINHA 05
							// ==================================

							/*
							 * Canal ("+") Fonte ("1")
							 */
							cobrancaDocumentoTxt.append("+");
							cobrancaDocumentoTxt.append("1");
							cobrancaDocumentoTxt.append(Util.completaString("",
									98));

							cobrancaDocumentoTxt.append(Util.completaString(
									inscricao.getInscricaoFormatada(), 20));

							cobrancaDocumentoTxt.append(Util.completaString("",
									15));

							// Nome do Cliente
							cobrancaDocumentoTxt.append(Util.completaString(
									nomeCliente, 50));

							cobrancaDocumentoTxt.append(Util.completaString("",
									4));

							cobrancaDocumentoTxt.append(System
									.getProperty("line.separator"));

							// LINHA 06
							// ==================================

							/*
							 * Canal ("+") Fonte ("2")
							 */

							cobrancaDocumentoTxt.append("+");
							cobrancaDocumentoTxt.append("2");
							cobrancaDocumentoTxt.append(Util.completaString("",
									153));

							// Matrícula do imóvel
							cobrancaDocumentoTxt.append(Util.completaString(
									matriculaImovelFormatada, 10));

							cobrancaDocumentoTxt.append(Util.completaString("",
									24));

							cobrancaDocumentoTxt.append(System
									.getProperty("line.separator"));

							// LINHA 07
							// ==================================

							String enderecoFormatado = getControladorEndereco()
									.pesquisarEnderecoFormatado(
											emitirDocumentoCobrancaHelper
													.getIdImovel());
							/*
							 * Canal ("-") Fonte ("1")
							 */
							cobrancaDocumentoTxt.append("-");
							cobrancaDocumentoTxt.append("1");
							cobrancaDocumentoTxt.append(Util.completaString("",
									2));

							// Endereço Formatado
							cobrancaDocumentoTxt.append(Util.completaString(
									enderecoFormatado, 52));

							cobrancaDocumentoTxt.append(Util.completaString("",
									44));

							// Endereço Formatado
							cobrancaDocumentoTxt.append(Util.completaString(
									enderecoFormatado, 52));

							cobrancaDocumentoTxt.append(System
									.getProperty("line.separator"));

							// LINHA 08
							// ==================================

							/*
							 * Canal ("+") Fonte ("2")
							 */
							cobrancaDocumentoTxt.append("+");
							cobrancaDocumentoTxt.append("2");
							cobrancaDocumentoTxt.append(Util.completaString("",
									69));

							//CRC2574 alterado por Vivianne Sousa 19/08/2009 - Francisco
							// Sequencial do Documento de Cobrança
							cobrancaDocumentoTxt.append(Util.completaStringComEspacoAEsquerda(
								""+ emitirDocumentoCobrancaHelper.getNumeroOS(),9));
							//""+ emitirDocumentoCobrancaHelper.getNumeroSequenciaDocumento(),9));

							cobrancaDocumentoTxt.append(Util.completaString("",
									109));

							cobrancaDocumentoTxt.append(System
									.getProperty("line.separator"));

							// LINHA 09
							// ==================================

							/*
							 * Canal ("+") Fonte ("2")
							 */
							cobrancaDocumentoTxt.append("+");
							cobrancaDocumentoTxt.append("2");
							cobrancaDocumentoTxt.append(Util.completaString("",
									152));

							//CRC2574 alterado por Vivianne Sousa 19/08/2009 - Francisco
							// Sequencial do Documento de Cobrança
							cobrancaDocumentoTxt.append(Util.completaStringComEspacoAEsquerda(
								""+ emitirDocumentoCobrancaHelper.getNumeroOS(),9));
							//""+ emitirDocumentoCobrancaHelper.getNumeroSequenciaDocumento(),9));

							cobrancaDocumentoTxt.append(Util.completaString("",
									26));

							cobrancaDocumentoTxt.append(System
									.getProperty("line.separator"));
							// LINHA 10
							// ==================================
							/*
							 * Canal ("-") Fonte ("1")
							 */
							cobrancaDocumentoTxt.append("-");
							cobrancaDocumentoTxt.append("1");
							cobrancaDocumentoTxt.append(Util.completaString("",
									4));

							/*
							 * Quantidades de economias por categoria: 1º
							 * RESIDÊNCIAL 2º COMERCIAL 3º INDUSTRIAL 4º PÚBLICA
							 */
							Imovel imovel = new Imovel();
							imovel.setId(emitirDocumentoCobrancaHelper
									.getIdImovel());
							Collection colecaoCategorias = getControladorImovel()
									.obterQuantidadeEconomiasCategoria(imovel);
							imovel = null;
							String qtdResidencial = "";
							String qtdComercial = "";
							String qtdIndustrial = "";
							String qtdPublico = "";

							Integer totalCategoria = 0;

							if (colecaoCategorias != null
									&& !colecaoCategorias.isEmpty()) {
								Iterator iteratorColecaoCategorias = colecaoCategorias
										.iterator();
								Categoria categoria = null;

								while (iteratorColecaoCategorias.hasNext()) {
									categoria = (Categoria) iteratorColecaoCategorias
											.next();

									if (categoria.getId().equals(
											Categoria.RESIDENCIAL)) {
										qtdResidencial = ""
												+ categoria
														.getQuantidadeEconomiasCategoria();
										totalCategoria = totalCategoria
												+ categoria
														.getQuantidadeEconomiasCategoria();
									} else if (categoria.getId().equals(
											Categoria.COMERCIAL)) {
										qtdComercial = ""
												+ categoria
														.getQuantidadeEconomiasCategoria();
										totalCategoria = totalCategoria
												+ categoria
														.getQuantidadeEconomiasCategoria();
									} else if (categoria.getId().equals(
											Categoria.INDUSTRIAL)) {
										qtdIndustrial = ""
												+ categoria
														.getQuantidadeEconomiasCategoria();
										totalCategoria = totalCategoria
												+ categoria
														.getQuantidadeEconomiasCategoria();
									} else if (categoria.getId().equals(
											Categoria.PUBLICO)) {
										qtdPublico = ""
												+ categoria
														.getQuantidadeEconomiasCategoria();
										totalCategoria = totalCategoria
												+ categoria
														.getQuantidadeEconomiasCategoria();
									}
								}
							}
							colecaoCategorias = null;

							// Residêncial
							if (!qtdResidencial.equals("")) {
								cobrancaDocumentoTxt.append(Util
										.adicionarZerosEsquedaNumero(3,
												qtdResidencial));
							} else {
								cobrancaDocumentoTxt.append(Util
										.completaString("", 3));
							}

							cobrancaDocumentoTxt.append(Util.completaString("",
									2));

							// Comercial
							if (!qtdComercial.equals("")) {
								cobrancaDocumentoTxt.append(Util
										.adicionarZerosEsquedaNumero(3,
												qtdComercial));
							} else {
								cobrancaDocumentoTxt.append(Util
										.completaString("", 3));
							}
							cobrancaDocumentoTxt.append(Util.completaString("",
									2));

							// Industrial
							if (!qtdIndustrial.equals("")) {
								cobrancaDocumentoTxt.append(Util
										.adicionarZerosEsquedaNumero(3,
												qtdIndustrial));
							} else {
								cobrancaDocumentoTxt.append(Util
										.completaString("", 3));
							}
							cobrancaDocumentoTxt.append(Util.completaString("",
									2));

							// Público
							if (!qtdPublico.equals("")) {
								cobrancaDocumentoTxt.append(Util
										.adicionarZerosEsquedaNumero(3,
												qtdPublico));
							} else {
								cobrancaDocumentoTxt.append(Util
										.completaString("", 3));
							}
							cobrancaDocumentoTxt.append(Util.completaString("",
									2));

							if (totalCategoria != null
									&& !totalCategoria.equals("")) {
								// Soma Total das economias
								cobrancaDocumentoTxt.append(Util
										.adicionarZerosEsquedaNumero(4, ""
												+ totalCategoria));
							} else {
								cobrancaDocumentoTxt
										.append(Util
												.completaStringComEspacoAEsquerda(
														"", 4));
							}

							cobrancaDocumentoTxt.append(Util.completaString("",
									3));

							// Data de Emissão
							if (emitirDocumentoCobrancaHelper.getEmissao() != null) {
								cobrancaDocumentoTxt
										.append(Util
												.formatarData(emitirDocumentoCobrancaHelper
														.getEmissao()));
							} else {
								cobrancaDocumentoTxt.append(Util
										.completaString("", 10));
							}

							cobrancaDocumentoTxt.append(Util.completaString("",
									4));

							// Perfil do Imóvel
							cobrancaDocumentoTxt.append(Util.completaString(
									emitirDocumentoCobrancaHelper
											.getDescricaoImovelPerfil(), 15));

							cobrancaDocumentoTxt.append(" ");

							// Data da última alteração
							if (emitirDocumentoCobrancaHelper
									.getDtImovelUltimaAlteracao() != null) {
								cobrancaDocumentoTxt
										.append(Util
												.formatarData(emitirDocumentoCobrancaHelper
														.getDtImovelUltimaAlteracao()));
							} else {
								cobrancaDocumentoTxt.append(Util
										.completaString("", 10));
							}

							// Grupo de Cobrança
							cobrancaDocumentoTxt.append(Util
									.completaStringComEspacoAEsquerda(""
											+ emitirDocumentoCobrancaHelper
													.getIdCobrancaGrupo(), 9));

							cobrancaDocumentoTxt.append(Util.completaString("",
									2));

							// Sequencial de impressão
							cobrancaDocumentoTxt
									.append(Util
											.completaStringComEspacoAEsquerda(
													Util
															.retornaSequencialFormatado(sequencialImpressao),
													8));

							cobrancaDocumentoTxt.append(Util.completaString("",
									11));

							// Residêncial
							if (!qtdResidencial.equals("")) {
								cobrancaDocumentoTxt.append(Util
										.adicionarZerosEsquedaNumero(3,
												qtdResidencial));
							} else {
								cobrancaDocumentoTxt.append(Util
										.completaString("", 3));
							}

							cobrancaDocumentoTxt.append(Util.completaString("",
									2));

							// Comercial
							if (!qtdComercial.equals("")) {
								cobrancaDocumentoTxt.append(Util
										.adicionarZerosEsquedaNumero(3,
												qtdComercial));
							} else {
								cobrancaDocumentoTxt.append(Util
										.completaString("", 3));
							}
							cobrancaDocumentoTxt.append(Util.completaString("",
									2));

							// Industrial
							if (!qtdIndustrial.equals("")) {
								cobrancaDocumentoTxt.append(Util
										.adicionarZerosEsquedaNumero(3,
												qtdIndustrial));
							} else {
								cobrancaDocumentoTxt.append(Util
										.completaString("", 3));
							}
							cobrancaDocumentoTxt.append(Util.completaString("",
									2));

							// Público
							if (!qtdPublico.equals("")) {
								cobrancaDocumentoTxt.append(Util
										.adicionarZerosEsquedaNumero(3,
												qtdPublico));
							} else {
								cobrancaDocumentoTxt.append(Util
										.completaString("", 3));
							}

							cobrancaDocumentoTxt.append(Util.completaString("",
									8));

							// Data de Emissão
							if (emitirDocumentoCobrancaHelper.getEmissao() != null) {
								cobrancaDocumentoTxt
										.append(Util
												.formatarData(emitirDocumentoCobrancaHelper
														.getEmissao()));
							} else {
								cobrancaDocumentoTxt.append(Util
										.completaString("", 10));
							}

							cobrancaDocumentoTxt.append(" ");

							// Valor total do documento de cobrança
							cobrancaDocumentoTxt
									.append(Util
											.completaStringComEspacoAEsquerda(
													Util
															.formatarMoedaReal(emitirDocumentoCobrancaHelper
																	.getValorDocumento()),
													12));

							cobrancaDocumentoTxt.append(Util.completaString("",
									5));

							// Data da Posição do Débito

							String anoMesValidade = sistemaParametro
									.getAnoMesArrecadacao().toString();
							Calendar calendario = new GregorianCalendar();

							if (anoMesValidade != null
									&& !anoMesValidade.equals("")) {
								calendario.set(Calendar.YEAR, new Integer(
										anoMesValidade.substring(0, 4))
										.intValue());
								calendario.set(Calendar.MONTH, new Integer(
										anoMesValidade.substring(4, 6))
										.intValue() - 1);
								calendario
										.set(
												Calendar.DAY_OF_MONTH,
												calendario
														.getActualMaximum(Calendar.DAY_OF_MONTH));

								cobrancaDocumentoTxt.append(Util
										.formatarData(calendario.getTime()));
							} else {
								cobrancaDocumentoTxt.append(Util
										.completaString("", 10));
							}

							cobrancaDocumentoTxt.append(Util.completaString("",
									5));

							// ////////////////////////////////////////////////////////////////////
							// Grupo de Cobrança
							cobrancaDocumentoTxt.append(Util
									.completaStringComEspacoAEsquerda(""
											+ emitirDocumentoCobrancaHelper
													.getIdCobrancaGrupo(), 5));

							cobrancaDocumentoTxt.append(Util.completaString("",
									4));

							// Sequencial de impressão
							cobrancaDocumentoTxt
									.append(Util
											.retornaSequencialFormatado(sequencialImpressao));

							cobrancaDocumentoTxt.append(Util.completaString("",
									1));
							// ///////////////////////////////////////////////////////////////////
							cobrancaDocumentoTxt.append(System
									.getProperty("line.separator"));

							// LINHA 11
							// ==================================
							/*
							 * Canal ("-") Fonte ("1")
							 */
							cobrancaDocumentoTxt.append("-");
							cobrancaDocumentoTxt.append("1");
							cobrancaDocumentoTxt.append(Util.completaString("",
									2));

							// Situação da Ligação de Água
							cobrancaDocumentoTxt.append(Util.completaString(""
									+ emitirDocumentoCobrancaHelper
											.getDescricaoSituacaoLigacaoAgua(),
									20));

							// Consumo Médio
							Integer consumoMedio = getControladorMicromedicao()
									.pesquisarConsumoMedioImovel(
											emitirDocumentoCobrancaHelper
													.getIdImovel());

							if (consumoMedio != null) {
								cobrancaDocumentoTxt.append(Util
										.completaString("" + consumoMedio, 28));
							} else {
								cobrancaDocumentoTxt.append(Util
										.completaString("", 28));
							}

							// Situação da Ligação de Esgoto
							cobrancaDocumentoTxt
									.append(Util
											.completaString(
													""
															+ emitirDocumentoCobrancaHelper
																	.getDescricaoSituacaoLigacaoEsgoto(),
													20));

							// Consumo Fixo de Esgoto
							Integer consumoMinimoEsgoto = getControladorLigacaoEsgoto()
									.recuperarConsumoMinimoEsgoto(
											emitirDocumentoCobrancaHelper
													.getIdImovel());

							if (consumoMinimoEsgoto != null) {
								cobrancaDocumentoTxt.append(Util
										.completaString(""
												+ consumoMinimoEsgoto, 10));
							} else {
								cobrancaDocumentoTxt.append(Util
										.completaString("", 10));
							}

							cobrancaDocumentoTxt.append(Util.completaString("",
									107));

							cobrancaDocumentoTxt.append(System
									.getProperty("line.separator"));

							// LINHA 12
							// ==================================
							/*
							 * Canal ("-") Fonte ("1")
							 */
							cobrancaDocumentoTxt.append("-");
							cobrancaDocumentoTxt.append("1");
							cobrancaDocumentoTxt.append(Util.completaString("",
									3));
							Object[] dadosLigacaoAgua = null;

							// Dados da Ligação de Água(a partir da
							// tabela
							// LIGACAO_AGUA
							// lagu_id=imov_id da tabela IMOVEL)
							dadosLigacaoAgua = getControladorAtendimentoPublico()
									.pesquisarDadosLigacaoAgua(
											emitirDocumentoCobrancaHelper
													.getIdImovel());

							if (dadosLigacaoAgua != null) {
								if (dadosLigacaoAgua[1] != null) {
									// Data do Corte(lagu_dtcorte)
									cobrancaDocumentoTxt
											.append(Util
													.completaString(
															Util
																	.formatarData((Date) dadosLigacaoAgua[1]),
															10));
								} else {
									cobrancaDocumentoTxt.append(Util
											.completaString("", 10));
								}
								cobrancaDocumentoTxt.append(Util
										.completaString("", 6));

								if (dadosLigacaoAgua[2] != null) {
									// Data Supressão
									cobrancaDocumentoTxt
											.append(Util
													.completaString(
															Util
																	.formatarData((Date) dadosLigacaoAgua[2]),
															10));
								} else {
									cobrancaDocumentoTxt.append(Util
											.completaString("", 10));
								}
								cobrancaDocumentoTxt.append(Util
										.completaString("", 13));
							} else {
								cobrancaDocumentoTxt.append(Util
										.completaString("", 40));
							}

							// Origem
							Integer anormalidadeLeitura = emitirDocumentoCobrancaHelper
									.getIdLeituraAnormalidade();
							if (anormalidadeLeitura == null) {
								cobrancaDocumentoTxt.append("AUTOMÁTICO");
								cobrancaDocumentoTxt.append(Util
										.completaString("", 5));
							} else if (anormalidadeLeitura == LeituraAnormalidade.INDICADOR_LIGADO_CLANDESTINO_AGUA
									|| anormalidadeLeitura == LeituraAnormalidade.INDICADOR_LIGADO_CLANDESTINO_ESGOTO
									|| anormalidadeLeitura == LeituraAnormalidade.INDICADOR_LIGADO_CLANDESTINO_AGUA_ESGOTO) {
								cobrancaDocumentoTxt.append("RECADASTRAMENTO");
							} else {
								cobrancaDocumentoTxt.append("LEITURA");
								cobrancaDocumentoTxt.append(Util
										.completaString("", 8));
							}

							// Ocorrência
							cobrancaDocumentoTxt
									.append(Util
											.completaString(
													emitirDocumentoCobrancaHelper
															.getDescricaoLeitAnormalidade(),
													34));

							cobrancaDocumentoTxt.append(Util.completaString("",
									95));

							cobrancaDocumentoTxt.append(System
									.getProperty("line.separator"));

							// LINHA 13
							// ==================================
							/*
							 * Canal ("-") Fonte ("1")
							 */
							cobrancaDocumentoTxt.append("-");
							cobrancaDocumentoTxt.append(Util.completaString("",
									188));
							cobrancaDocumentoTxt.append(System
									.getProperty("line.separator"));
							// LINHA 14
							// ==================================

							/*
							 * Canal ("0") Fonte ("1")
							 */
							cobrancaDocumentoTxt.append("0");
							cobrancaDocumentoTxt.append("1");
							cobrancaDocumentoTxt.append(" ");

							/*
							 * Selecionar os itens do documento de cobrança
							 * correspondentes a conta e ordenar por ano/mês de
							 * referência da conta
							 */
							if (colecaoCobrancaDocumentoItem != null
									&& !colecaoCobrancaDocumentoItem.isEmpty()) {
								Iterator iteratorColecaoCobrancaDocumentoItem = null;
								CobrancaDocumentoItem cobrancaDocumentoItem = null;

								int countImpressao = colecaoCobrancaDocumentoItem
										.size() - 12;

								cobrancaDocumentoTxt.append(Util
										.completaString("", 10));
								/*
								 * Caso a quantidade de itens selecionados seja
								 * superior a 13 [SB0001 - Calcular Valor e Data
								 * de Vencimento Anterior]
								 * 
								 * Caso contrário: Dados do primeiro item
								 * selecionado
								 */
								if (colecaoCobrancaDocumentoItem.size() > 13) {

									CalcularValorDataVencimentoAnteriorHelper calcularValorDataVencimentoAnteriorHelper = this
											.calcularValorDataVencimentoAnterior(
													colecaoCobrancaDocumentoItem,
													13);

									// Constante "DEBTO.ATE"
									cobrancaDocumentoTxt.append("DEBTO.ATE");

									cobrancaDocumentoTxt.append(Util
											.completaString("", 17));

									// Data de Vencimento anterior
									// retornado
									// pelo
									// [SB0001]
									cobrancaDocumentoTxt
											.append(Util
													.formatarData(calcularValorDataVencimentoAnteriorHelper
															.getDataVencimentoAnterior()));

									// Valor anterior retornado pelo
									// [SB0001]
									cobrancaDocumentoTxt
											.append(Util
													.completaStringComEspacoAEsquerda(
															Util
																	.formatarMoedaReal(calcularValorDataVencimentoAnteriorHelper
																			.getValorAnterior()),
															29));

								} else {

									iteratorColecaoCobrancaDocumentoItem = colecaoCobrancaDocumentoItem
											.iterator();
									cobrancaDocumentoItem = null;

									cobrancaDocumentoItem = (CobrancaDocumentoItem) iteratorColecaoCobrancaDocumentoItem
											.next();

									// Mês/Ano de referência da
									// conta
									cobrancaDocumentoTxt
											.append(Util
													.completaString(
															Util
																	.formatarAnoMesParaMesAno(cobrancaDocumentoItem
																			.getContaGeral()
																			.getConta()
																			.getReferencia()),
															7));

									cobrancaDocumentoTxt.append(".");

									// Dígito verificador da conta
									cobrancaDocumentoTxt
											.append(cobrancaDocumentoItem
													.getContaGeral()
													.getConta()
													.getDigitoVerificadorConta());

									cobrancaDocumentoTxt.append(Util
											.completaString("", 17));

									// Data de vencimento da conta
									cobrancaDocumentoTxt.append(Util
											.formatarData(cobrancaDocumentoItem
													.getContaGeral().getConta()
													.getDataVencimentoConta()));

									// Valor do item
									cobrancaDocumentoTxt
											.append(Util
													.completaStringComEspacoAEsquerda(
															Util
																	.formatarMoedaReal(cobrancaDocumentoItem
																			.getValorItemCobrado()),
															29));
								}

								cobrancaDocumentoTxt.append(Util
										.completaString("", 111));

								cobrancaDocumentoTxt.append(System
										.getProperty("line.separator"));

								// LINHA 15
								// ==================================

								/*
								 * Canal (" ") Fonte ("1")
								 */

								if (countImpressao <= 0) {
									iteratorColecaoCobrancaDocumentoItem = colecaoCobrancaDocumentoItem
											.iterator();
									cobrancaDocumentoItem = null;

									int countRegistros = 0;

									while (iteratorColecaoCobrancaDocumentoItem
											.hasNext()) {
										cobrancaDocumentoItem = (CobrancaDocumentoItem) iteratorColecaoCobrancaDocumentoItem
												.next();

										if (countRegistros > 0) {

											cobrancaDocumentoTxt.append(" ");
											cobrancaDocumentoTxt.append("1");

											cobrancaDocumentoTxt.append(Util
													.completaString("", 11));

											// Mês/Ano de referência da
											// conta
											cobrancaDocumentoTxt
													.append(Util
															.completaString(
																	Util
																			.formatarAnoMesParaMesAno(cobrancaDocumentoItem
																					.getContaGeral()
																					.getConta()
																					.getReferencia()),
																	7));

											cobrancaDocumentoTxt.append(".");

											// Dígito verificador da conta
											cobrancaDocumentoTxt
													.append(cobrancaDocumentoItem
															.getContaGeral()
															.getConta()
															.getDigitoVerificadorConta());

											cobrancaDocumentoTxt.append(Util
													.completaString("", 17));

											// Data de vencimento da conta
											cobrancaDocumentoTxt
													.append(Util
															.formatarData(cobrancaDocumentoItem
																	.getContaGeral()
																	.getConta()
																	.getDataVencimentoConta()));

											cobrancaDocumentoTxt.append(Util
													.completaString("", 1));

											// Valor do item
											cobrancaDocumentoTxt
													.append(Util
															.completaStringComEspacoAEsquerda(
																	Util
																			.formatarMoedaReal(cobrancaDocumentoItem
																					.getValorItemCobrado()),
																	28));

											cobrancaDocumentoTxt.append(Util
													.completaString("", 111));

											cobrancaDocumentoTxt
													.append(System
															.getProperty("line.separator"));
										}

										countRegistros++;
									}
								} else {
									while (countImpressao < colecaoCobrancaDocumentoItem
											.size()) {
										cobrancaDocumentoItem = (CobrancaDocumentoItem) ((List) colecaoCobrancaDocumentoItem)
												.get(countImpressao);

										cobrancaDocumentoTxt.append(" ");
										cobrancaDocumentoTxt.append("1");

										cobrancaDocumentoTxt.append(Util
												.completaString("", 11));

										// Mês/Ano de referência da
										// conta
										cobrancaDocumentoTxt
												.append(Util
														.completaString(
																Util
																		.formatarAnoMesParaMesAno(cobrancaDocumentoItem
																				.getContaGeral()
																				.getConta()
																				.getReferencia()),
																7));

										cobrancaDocumentoTxt.append(".");

										// Dígito verificador da conta
										cobrancaDocumentoTxt
												.append(cobrancaDocumentoItem
														.getContaGeral()
														.getConta()
														.getDigitoVerificadorConta());

										cobrancaDocumentoTxt.append(Util
												.completaString("", 17));

										// Data de vencimento da conta
										cobrancaDocumentoTxt
												.append(Util
														.formatarData(cobrancaDocumentoItem
																.getContaGeral()
																.getConta()
																.getDataVencimentoConta()));

										cobrancaDocumentoTxt.append(Util
												.completaString("", 1));

										// Valor do item
										cobrancaDocumentoTxt
												.append(Util
														.completaStringComEspacoAEsquerda(
																Util
																		.formatarMoedaReal(cobrancaDocumentoItem
																				.getValorItemCobrado()),
																28));

										cobrancaDocumentoTxt.append(Util
												.completaString("", 111));

										cobrancaDocumentoTxt.append(System
												.getProperty("line.separator"));

										countImpressao++;
									}
								}
							} else {
								
								for (int i = 0; i < 12; i++) {
									cobrancaDocumentoTxt.append(System
											.getProperty("line.separator"));
								}
								
							}
							// LINHA 16
							// ==================================
							/*
							 * Canal ("1") Fonte ("2")
							 */
							cobrancaDocumentoTxt.append("1");
							cobrancaDocumentoTxt.append("2");

							cobrancaDocumentoTxt.append(Util.completaString("",
									60));
							try {

								BigDecimal servicoAtualizacao = repositorioCobranca
										.pesquisarServioAtualizacao(emitirDocumentoCobrancaHelper
												.getIdDocumentoCobranca());

								cobrancaDocumentoTxt
										.append(Util
												.completaStringComEspacoAEsquerda(
														Util
																.formatarMoedaReal(servicoAtualizacao),
														15));
							} catch (ErroRepositorioException ex) {
								ex.printStackTrace();
								throw new ControladorException("erro.sistema",
										ex);
							}

							cobrancaDocumentoTxt.append(Util.completaString("",
									112));

							cobrancaDocumentoTxt.append(System
									.getProperty("line.separator"));
							// LINHA 17
							// ==================================
							/*
							 * Canal ("+") Fonte ("1")
							 */
							cobrancaDocumentoTxt.append("+");
							cobrancaDocumentoTxt.append("1");
							cobrancaDocumentoTxt.append(Util.completaString("",
									187));
							cobrancaDocumentoTxt.append(System
									.getProperty("line.separator"));
							// LINHA 18
							// ==================================
							/*
							 * Canal ("0") Fonte ("2")
							 */
							cobrancaDocumentoTxt.append("0");
							cobrancaDocumentoTxt.append("2");
							cobrancaDocumentoTxt.append(Util.completaString("",
									24));

							// Data da Posição do Débito
							if (anoMesValidade != null
									&& !anoMesValidade.equals("")) {
								cobrancaDocumentoTxt.append(Util
										.formatarData(calendario.getTime()));
							} else {
								cobrancaDocumentoTxt.append(Util
										.completaString("", 10));
							}

							cobrancaDocumentoTxt.append(Util.completaString("",
									26));

							// Valor total do documento de cobrança
							cobrancaDocumentoTxt
									.append(Util
											.completaStringComEspacoAEsquerda(
													Util
															.formatarMoedaReal(emitirDocumentoCobrancaHelper
																	.getValorDocumento()),
													15));

							cobrancaDocumentoTxt.append(Util.completaString("",
									112));

							cobrancaDocumentoTxt.append(System
									.getProperty("line.separator"));
							// LINHA 19
							// ==================================
							/*
							 * Canal ("+") Fonte ("1")
							 */
							cobrancaDocumentoTxt.append("+");
							cobrancaDocumentoTxt.append("1");

							cobrancaDocumentoTxt.append(Util.completaString("",
									97));

							cobrancaDocumentoTxt.append(Util.completaString(
									inscricao.getInscricaoFormatada(), 20));

							cobrancaDocumentoTxt.append(Util.completaString("",
									16));

							// Nome do Cliente
							cobrancaDocumentoTxt.append(Util.completaString(
									nomeCliente, 50));

							cobrancaDocumentoTxt.append(Util.completaString("",
									4));

							cobrancaDocumentoTxt.append(System
									.getProperty("line.separator"));

							// LINHA 20
							// ==================================
							/*
							 * Canal ("+") Fonte ("2")
							 */

							cobrancaDocumentoTxt.append("+");
							cobrancaDocumentoTxt.append("2");

							cobrancaDocumentoTxt.append(Util.completaString("",
									152));

							// Matrícula do imóvel
							cobrancaDocumentoTxt.append(Util.completaString(
									matriculaImovelFormatada, 10));

							cobrancaDocumentoTxt.append(Util.completaString("",
									25));

							cobrancaDocumentoTxt.append(System
									.getProperty("line.separator"));

							// LINHA 21
							// ==================================
							/*
							 * Canal ("-") Fonte ("1")
							 */
							cobrancaDocumentoTxt.append("-");
							cobrancaDocumentoTxt.append("1");

							cobrancaDocumentoTxt.append(Util.completaString("",
									97));

							// Endereço Formatado
							cobrancaDocumentoTxt.append(Util.completaString(
									enderecoFormatado, 62));

							cobrancaDocumentoTxt.append(Util.completaString("",
									28));

							cobrancaDocumentoTxt.append(System
									.getProperty("line.separator"));

							// LINHA 22
							// ==================================
							/*
							 * Canal ("+") Fonte ("2")
							 */
							cobrancaDocumentoTxt.append("+");
							cobrancaDocumentoTxt.append("2");

							cobrancaDocumentoTxt.append(Util.completaString("",
									151));

							//CRC2574 alterado por Vivianne Sousa 19/08/2009 - Francisco
							// Sequencial do Documento de Cobrança
							cobrancaDocumentoTxt.append(Util.completaStringComEspacoAEsquerda(
								""+ emitirDocumentoCobrancaHelper.getNumeroOS(),9));
							//""+ emitirDocumentoCobrancaHelper.getNumeroSequenciaDocumento(),9));

							cobrancaDocumentoTxt.append(Util.completaString("",
									27));

							cobrancaDocumentoTxt.append(System
									.getProperty("line.separator"));
							// LINHA 23
							// ==================================
							/*
							 * Canal ("-") Fonte ("1")
							 */
							cobrancaDocumentoTxt.append("-");
							cobrancaDocumentoTxt.append("1");

							cobrancaDocumentoTxt.append(Util.completaString("",
									101));

							/*
							 * Quantidades de economias por categoria: 1º
							 * RESIDÊNCIAL 2º COMERCIAL 3º INDUSTRIAL 4º PÚBLICA
							 */

							// Residêncial
							if (!qtdResidencial.equals("")) {
								cobrancaDocumentoTxt.append(Util
										.adicionarZerosEsquedaNumero(3,
												qtdResidencial));
							} else {
								cobrancaDocumentoTxt.append(Util
										.completaString("", 3));
							}

							cobrancaDocumentoTxt.append(Util.completaString("",
									2));

							// Comercial
							if (!qtdComercial.equals("")) {
								cobrancaDocumentoTxt.append(Util
										.adicionarZerosEsquedaNumero(3,
												qtdComercial));
							} else {
								cobrancaDocumentoTxt.append(Util
										.completaString("", 3));
							}
							cobrancaDocumentoTxt.append(Util.completaString("",
									2));

							// Industrial
							if (!qtdIndustrial.equals("")) {
								cobrancaDocumentoTxt.append(Util
										.adicionarZerosEsquedaNumero(3,
												qtdIndustrial));
							} else {
								cobrancaDocumentoTxt.append(Util
										.completaString("", 3));
							}
							cobrancaDocumentoTxt.append(Util.completaString("",
									2));

							// Público
							if (!qtdPublico.equals("")) {
								cobrancaDocumentoTxt.append(Util
										.adicionarZerosEsquedaNumero(3,
												qtdPublico));
							} else {
								cobrancaDocumentoTxt.append(Util
										.completaString("", 3));
							}

							cobrancaDocumentoTxt.append(Util.completaString("",
									8));

							// Data de Emissão
							if (emitirDocumentoCobrancaHelper.getEmissao() != null) {
								cobrancaDocumentoTxt
										.append(Util
												.formatarData(emitirDocumentoCobrancaHelper
														.getEmissao()));
							} else {
								cobrancaDocumentoTxt.append(Util
										.completaString("", 10));
							}

							cobrancaDocumentoTxt.append(" ");

							// Valor total do documento de cobrança
							cobrancaDocumentoTxt
									.append(Util
											.completaStringComEspacoAEsquerda(
													Util
															.formatarMoedaReal(emitirDocumentoCobrancaHelper
																	.getValorDocumento()),
													12));

							cobrancaDocumentoTxt.append(Util.completaString("",
									5));

							// Data da Posição do Débito

							if (anoMesValidade != null
									&& !anoMesValidade.equals("")) {
								cobrancaDocumentoTxt.append(Util
										.formatarData(calendario.getTime()));
							} else {
								cobrancaDocumentoTxt.append(Util
										.completaString("", 10));
							}

							cobrancaDocumentoTxt.append(Util.completaString("",
									5));

							// ////////////////////////////////////////////////////////////////////
							// Grupo de Cobrança
							cobrancaDocumentoTxt.append(Util
									.completaStringComEspacoAEsquerda(""
											+ emitirDocumentoCobrancaHelper
													.getIdCobrancaGrupo(), 5));

							cobrancaDocumentoTxt.append(Util.completaString("",
									2));

							// Sequencial de impressão
							cobrancaDocumentoTxt
									.append(Util
											.retornaSequencialFormatado(sequencialImpressao));

							cobrancaDocumentoTxt.append(Util.completaString("",
									3));

							cobrancaDocumentoTxt.append(System
									.getProperty("line.separator"));

							// LINHA 24
							// ==================================
							/*
							 * Canal ("1") Fonte ("4")
							 */
							cobrancaDocumentoTxt.append("1");
							cobrancaDocumentoTxt.append("4");
							cobrancaDocumentoTxt.append(Util.completaString("",
									10));
							cobrancaDocumentoTxt
									.append("PRIORIDADE PARA EXECUÇÃO");
							cobrancaDocumentoTxt.append(Util.completaString("",
									153));
							cobrancaDocumentoTxt.append(System
									.getProperty("line.separator"));
//						}
						// adiciona o id da
						// conta e o sequencial
						// no para serem
						// atualizados
						mapAtualizaSequencial.put(emitirDocumentoCobrancaHelper
								.getIdDocumentoCobranca(), sequencialImpressao);
						colecaoCobrancaDocumentoItem = null;
					}

					emitirDocumentoCobrancaHelper = null;
				}
			} else {
				flagFimPesquisa = true;
			}
			try {
				repositorioCobranca
						.atualizarSequencialCobrancaDocumentoImpressao(mapAtualizaSequencial);
			} catch (ErroRepositorioException e) {
				throw new ControladorException("erro.sistema", e);
			}
			mapAtualizaSequencial = null;

			colecaoEmitirDocumentoCobranca = null;
		}

		System.out.println("********************");
		System.out.println("FIM FISCALIZAÇÃO");
		System.out.println("********************");

		Date dataAtual = new Date();

		String nomeZip = null;
				
		if (idAcaoCobranca.equals(CobrancaAcao.FISCALIZACAO_CORTADO)) {
			if (idCronogramaAtividadeAcaoCobranca != null) {
				nomeZip = "ORDEM_FISCALIZACAO_CORTADO_GRUPO_"
						+ cobrancaGrupo.getId() + "_"
						+ Util.formatarData(dataAtual) + Util.formatarHoraSemDataSemDoisPontos(dataAtual);
			} 
		} else if (idAcaoCobranca.equals(CobrancaAcao.FISCALIZACAO_SUPRIMIDO)) {
			if (idCronogramaAtividadeAcaoCobranca != null) {
				nomeZip = "ORDEM_FISCALIZACAO_SUPRIMIDO_GRUPO_"
						+ cobrancaGrupo.getId() + "_"
						+ Util.formatarData(dataAtual) + Util.formatarHoraSemDataSemDoisPontos(dataAtual);
			} 
		} else if (idAcaoCobranca.equals(CobrancaAcao.FISCALIZACAO_FACTIVEL)) {
			if (idCronogramaAtividadeAcaoCobranca != null) {
				nomeZip = "ORDEM_FISCALIZACAO_FACTIVEL_GRUPO_"
						+ cobrancaGrupo.getId() + "_"
						+ Util.formatarData(dataAtual) + Util.formatarHoraSemDataSemDoisPontos(dataAtual);
			} 
		} else if (idAcaoCobranca.equals(CobrancaAcao.FISCALIZACAO_POTENCIAL)) {
			if (idCronogramaAtividadeAcaoCobranca != null) {
				nomeZip = "ORDEM_FISCALIZACAO_POTENCIAL_GRUPO_"
						+ cobrancaGrupo.getId() + "_"
						+ Util.formatarData(dataAtual) + Util.formatarHoraSemDataSemDoisPontos(dataAtual);
			} 
		} else if (idAcaoCobranca.equals(CobrancaAcao.FISCALIZACAO_LIGADO)) {
			if (idCronogramaAtividadeAcaoCobranca != null) {
				nomeZip = "ORDEM_FISCALIZACAO_LIGADO_GRUPO_"
						+ cobrancaGrupo.getId() + "_"
						+ Util.formatarData(dataAtual) + Util.formatarHoraSemDataSemDoisPontos(dataAtual);
			} 
		} else if (idAcaoCobranca.equals(CobrancaAcao.FISCALIZACAO_TOTAL)) {
			if (idCronogramaAtividadeAcaoCobranca != null) {
				nomeZip = "ORDEM_FISCALIZACAO_TOTAL_GRUPO_"
						+ cobrancaGrupo.getId() + "_"
						+ Util.formatarData(dataAtual) + Util.formatarHoraSemDataSemDoisPontos(dataAtual);
			} 
		} else if (idAcaoCobranca.equals(CobrancaAcao.FISCALIZACAO_LIGADO_A_REVELIA)) {
			if (idCronogramaAtividadeAcaoCobranca != null) {
				nomeZip = "ORDEM_FISCALIZACAO_LIGADO_A_REVELIA_GRUPO_"
						+ cobrancaGrupo.getId() + "_"
						+ Util.formatarData(dataAtual) + Util.formatarHoraSemDataSemDoisPontos(dataAtual);
			} 
		}

		// Eventual
		if (idCronogramaAtividadeAcaoCobranca == null){
			String descricaoAbrevDocumentoTipo = "";
			if (acaoCobranca != null
					&& acaoCobranca.getDocumentoTipo() != null) {
				descricaoAbrevDocumentoTipo = acaoCobranca
						.getDocumentoTipo().getDescricaoAbreviado();
			}
			String tituloComandoEventual = cobrancaAcaoAtividadeComando
					.getDescricaoTitulo();

			nomeZip = descricaoAbrevDocumentoTipo + " "
					+ tituloComandoEventual + " "
					+ Util.formatarData(dataAtual) + Util.formatarHoraSemDataSemDoisPontos(dataAtual);
			nomeZip = nomeZip.replace("/", "_");
			nomeZip = nomeZip.replace(" ", "_");			
		}
		
		nomeZip = nomeZip.replace("/", "_");

		try {
			if (cobrancaDocumentoTxt != null
					&& cobrancaDocumentoTxt.length() != 0) {

				cobrancaDocumentoTxt.append("\u0004");
				// criar o arquivo zip
				File compactado = new File(nomeZip + ".zip"); // nomeZip
				ZipOutputStream zos = new ZipOutputStream(new FileOutputStream(
						compactado));

				File leitura = new File(nomeZip + ".txt");
				BufferedWriter out = new BufferedWriter(new OutputStreamWriter(
						new FileOutputStream(leitura.getAbsolutePath())));
				out.write(cobrancaDocumentoTxt.toString());
				out.flush();
				out.close();
				ZipUtil.adicionarArquivo(zos, leitura);

				// close the stream
				zos.close();
				leitura.delete();
			}

			System.out.println("********************");
			System.out.println("FIM GERAÇÃO ARQUIVO");
			System.out.println("********************");

		} catch (IOException e) {
			e.printStackTrace();
			throw new ControladorException("erro.sistema", e);
		} catch (Exception e) {
			e.printStackTrace();
			throw new ControladorException("erro.sistema", e);
		}


	}

	/**
	 * 
	 * Este caso de uso permite gerar o resumo das ações de cobrança com a
	 * atividade emitir já realizada e a atividade encerrar ainda não realizada
	 * e realizar a atividade encerrar das ações que estejam comandadas.
	 * 
	 * [UC0478] Gerar Resumo das Ações de Cobrança do Cronograma
	 * 
	 * Pós-oncidção: Resumo das ações de cobrança gerado e atividade encerrar da
	 * ação de cobrança, se for o caso, realizada
	 * 
	 * @author Rafael Santos, Pedro Alexandre,Sávio Luiz
	 * @date 16/10/2006, 18/01/2007,01/02/2007
	 * 
	 */
	public void gerarResumoAcoesCobrancaCronograma(
			Object[] dadosCobrancaAcaoAtividadeCronograma,
			int idFuncionalidadeIniciada) throws ControladorException {

		int idUnidadeIniciada = 0;

		// posições do array com os dados que serão atualizados
		final int POSICAO_ID_COB_ACAO_ATIV_CRON_EMITIR = 0;
		final int POSICAO_DATA_COM_ATIV_ENCERRAR = 2;
		final int POSICAO_DATA_PREV_ATIV_ENCERRAR = 3;
		final int POSICAO_DATA_PREV_ATIV_EMITIR = 4;
		final int POSICAO_ANO_MES_REF_COB_GRUP_CRON_MES = 5;
		final int POSICAO_ID_COB_ACAO_CRONOG = 6;
		final int POSICAO_ID_COB_GRUPO = 7;
		final int POSICAO_ID_COB_ACAO = 8;
		final int POSICAO_DATA_REA_ATIV_EMITIR = 9;

		// -------------------------
		//
		// Registrar o início do processamento da Unidade de
		// Processamento
		// do Batch
		//
		// -------------------------

		idUnidadeIniciada = getControladorBatch()
				.iniciarUnidadeProcessamentoBatch(
						idFuncionalidadeIniciada,
						UnidadeProcessamento.COB_ACAO_ATIV_CRONOG,
						((Integer) dadosCobrancaAcaoAtividadeCronograma[POSICAO_ID_COB_ACAO_ATIV_CRON_EMITIR]));

		// coleção com os cronogramas de cobrança dos grupos de cobrança e meses
		// de referência
		Usuario usuarioLogado = Usuario.USUARIO_BATCH;
		try {

			// colecaoCobrancaAtividadeAcaoCronogramaEncerrar = null;
			if (dadosCobrancaAcaoAtividadeCronograma != null) {
				Integer idCobrancaAcao = null;
				Date dataComandoAtividadeEncerrar = null;
				Date dataPrevistaAtividadeEncerrar = null;
				Integer idCobrancaAtividadeAcaoCronogramaEmitir = null;
				Integer anoMesReferenciaCobrancaGrupoCronogramaMes = null;
				Integer idCobrancaAcaoCronograma = null;
				Date dataRealizacaoAtividadeEmitir = null;
				Date dataRealizacaoAtividadeEncerrar = null;
				Integer idCobrancaGrupo = null;
				Date dataPrevistaAtividadeEmitir = null;
				if (dadosCobrancaAcaoAtividadeCronograma[POSICAO_ID_COB_ACAO] != null) {
					idCobrancaAcao = (Integer) dadosCobrancaAcaoAtividadeCronograma[POSICAO_ID_COB_ACAO];
				}
				if (dadosCobrancaAcaoAtividadeCronograma[POSICAO_DATA_COM_ATIV_ENCERRAR] != null) {
					dataComandoAtividadeEncerrar = (Date) dadosCobrancaAcaoAtividadeCronograma[POSICAO_DATA_COM_ATIV_ENCERRAR];
				}
				if (dadosCobrancaAcaoAtividadeCronograma[POSICAO_DATA_PREV_ATIV_ENCERRAR] != null) {
					dataPrevistaAtividadeEncerrar = (Date) dadosCobrancaAcaoAtividadeCronograma[POSICAO_DATA_PREV_ATIV_ENCERRAR];
				}
				if (dadosCobrancaAcaoAtividadeCronograma[POSICAO_ID_COB_ACAO_ATIV_CRON_EMITIR] != null) {
					idCobrancaAtividadeAcaoCronogramaEmitir = (Integer) dadosCobrancaAcaoAtividadeCronograma[POSICAO_ID_COB_ACAO_ATIV_CRON_EMITIR];
				}
				if (dadosCobrancaAcaoAtividadeCronograma[POSICAO_ANO_MES_REF_COB_GRUP_CRON_MES] != null) {
					anoMesReferenciaCobrancaGrupoCronogramaMes = (Integer) dadosCobrancaAcaoAtividadeCronograma[POSICAO_ANO_MES_REF_COB_GRUP_CRON_MES];
				}
				if (dadosCobrancaAcaoAtividadeCronograma[POSICAO_ID_COB_ACAO_CRONOG] != null) {
					idCobrancaAcaoCronograma = (Integer) dadosCobrancaAcaoAtividadeCronograma[POSICAO_ID_COB_ACAO_CRONOG];
				}
				if (dadosCobrancaAcaoAtividadeCronograma[POSICAO_DATA_REA_ATIV_EMITIR] != null) {
					dataRealizacaoAtividadeEmitir = (Date) dadosCobrancaAcaoAtividadeCronograma[POSICAO_DATA_REA_ATIV_EMITIR];
				}
				if (dadosCobrancaAcaoAtividadeCronograma[POSICAO_ID_COB_GRUPO] != null) {
					idCobrancaGrupo = (Integer) dadosCobrancaAcaoAtividadeCronograma[POSICAO_ID_COB_GRUPO];
				}
				if (dadosCobrancaAcaoAtividadeCronograma[POSICAO_DATA_PREV_ATIV_EMITIR] != null) {
					dataPrevistaAtividadeEmitir = (Date) dadosCobrancaAcaoAtividadeCronograma[POSICAO_DATA_PREV_ATIV_EMITIR];
				}

				Collection colecaoCobrancaAcao = null;
				FiltroCobrancaAcao filtroCobrancaAcao = new FiltroCobrancaAcao();
				filtroCobrancaAcao.adicionarParametro(new ParametroSimples(FiltroCobrancaAcao.ID, idCobrancaAcao));
				filtroCobrancaAcao.adicionarCaminhoParaCarregamentoEntidade(FiltroCobrancaAcao.DOCUMENTO_TIPO);
				filtroCobrancaAcao.adicionarCaminhoParaCarregamentoEntidade(FiltroCobrancaAcao.SERVICO_TIPO);
				
				colecaoCobrancaAcao = this.getControladorUtil().pesquisar(
					filtroCobrancaAcao, CobrancaAcao.class.getName());
				
				CobrancaAcao cobrancaAcao = (CobrancaAcao) 
					Util.retonarObjetoDeColecao(colecaoCobrancaAcao);
				
				if (cobrancaAcao != null) {

					// Item 3.4
					// verfica se o valor do documento tipo é
					// diferente de nulo
					if (cobrancaAcao.getDocumentoTipo() != null) {

						// caso a atividade da ação de cobrança
						// correspondente a
						// encerrar esteja comandada e a data
						// prescita para o
						// encerramento seja igual ou menor do
						// que a data
						// corrente
						if (dataComandoAtividadeEncerrar != null
								&& (dataPrevistaAtividadeEncerrar != null && (dataPrevistaAtividadeEncerrar
										.compareTo(new Date()) <= 0))) {
							dataRealizacaoAtividadeEncerrar = new Date();
						}

						// [SB0001] - Processar Ação com
						// Documentos de Cobrança
						this.processarDocumentoCobrancaVersaoReduzida(
								idCobrancaAtividadeAcaoCronogramaEmitir,
								ConstantesSistema.NUMERO_NAO_INFORMADO,
								cobrancaAcao,
								usuarioLogado,
								dataRealizacaoAtividadeEncerrar, 
								dataComandoAtividadeEncerrar,
								dataPrevistaAtividadeEncerrar);
					} else {

						// servico tipo

						// caso a atividade da ação de cobrança
						// correspondente a
						// encerrar esteja comandada e a data
						// prescita para o
						// encerramento seja igual ou menor do
						// que a data
						// corrente
						if (dataComandoAtividadeEncerrar != null
								&& (dataPrevistaAtividadeEncerrar != null && (dataPrevistaAtividadeEncerrar
										.compareTo(new Date()) <= 0))) {
							dataRealizacaoAtividadeEncerrar = new Date();
						}

						// Item 3.5
						// [SB0006] - Processar Ação com Ordens
						// de
						// Serviço
						this
								.processarAcaoOrdemServico(
										dataPrevistaAtividadeEncerrar,
										dataPrevistaAtividadeEmitir,
										dataComandoAtividadeEncerrar,
										dataRealizacaoAtividadeEmitir,
										usuarioLogado,
										anoMesReferenciaCobrancaGrupoCronogramaMes,
										idCobrancaAcaoCronograma,
										idCobrancaGrupo, 
										cobrancaAcao,
										dataRealizacaoAtividadeEncerrar);
					}

				}

				// seta para null para o GC liberar
				colecaoCobrancaAcao = null;
				idCobrancaAcao = null;
				dataComandoAtividadeEncerrar = null;
				dataPrevistaAtividadeEncerrar = null;
				idCobrancaAtividadeAcaoCronogramaEmitir = null;
				anoMesReferenciaCobrancaGrupoCronogramaMes = null;
				idCobrancaAcaoCronograma = null;
				dataRealizacaoAtividadeEmitir = null;
				dataRealizacaoAtividadeEncerrar = null;
				idCobrancaGrupo = null;
				dataPrevistaAtividadeEmitir = null;

			}

			// se atender as duas condições anteriores 3.1 e 3.2
			// if (primeiraCondicao && segundaCondicao) {

			// // Item 3.3
			// // o sistema exclui o resumo das ações de
			// // cobrança correspondente ao cronograma de
			// ação
			// // de
			// // cobrança
			// // que esta sendo processado
			// this.repositorioCobranca
			// .deletarResumoCobrancaAcao(idCobrancaAcaoCronograma);

			// caso a ação de cobrança gere documento de
			// cobrança(DOTP_ID da tabela COBRANCA_ACAO com
			// CBAC_ID da
			// tabela COBRANCA_ACAO_CRONOGRAMA com o valor
			// diferente de nulo

			// seta para null para o GC liberar
			// dadosCobrancaAcaoCronograma = null;
			// }// fim do while interno
			// }

			// seta null para o GC liberar
			// colecaoCobrancaAcaoCronograma = null;

			// seta para null para o GC liberar
			// dadosCobrancaGrupoCronogramaMes = null;
			// }// fim do while externo
			// } else {
			// // [FS0001] - Verificar Existência de Cronograma
			// sessionContext.setRollbackOnly();
			// throw new ControladorException(
			// "atencao.nao.existe.dados.tabela.cronograma");
			// }
			//
			// // seta null para GC liberar
			// colecaoCobrancaGrupoCronogramaMes = null;
			//
			// // --------------------------------------------------------
			// //
			// // Registrar o fim da execução da Unidade de Processamento
			// //
			// // --------------------------------------------------------
			//
			getControladorBatch().encerrarUnidadeProcessamentoBatch(null,
					idUnidadeIniciada, false);

			System.out.println("########## FINALIZADO EM  = " + new Date());

		} catch (Exception e) {
			// Este catch serve para interceptar qualquer exceção que o processo
			// batch venha a lançar e garantir que a unidade de processamento do
			// batch será atualizada com o erro ocorrido
			e.printStackTrace();
			//sessionContext.setRollbackOnly();

			getControladorBatch().encerrarUnidadeProcessamentoBatch(e,
					idUnidadeIniciada, true);

			throw new EJBException(e);
		}

	}

	/**
	 * 
	 * Este caso de uso permite gerar o resumo das ações de cobrança com a
	 * atividade emitir já realizada e a atividade encerrar ainda não realizada
	 * e realizar a atividade encerrar das ações que estejam comandadas.
	 * 
	 * [UC0478] Gerar Resumo das Ações de Cobrança do Cronograma
	 * 
	 * Pós-oncidção: Resumo das ações de cobrança gerado e atividade encerrar da
	 * ação de cobrança, se for o caso, realizada
	 * 
	 * @author Sávio Luiz
	 * @date 11/05/2007
	 * 
	 */
	public void inserirResumoAcoesCobrancaCronograma(
			Object[] dadosCobrancaAcaoAtividadeCronograma,
			int idFuncionalidadeIniciada) throws ControladorException {

		int idUnidadeIniciada = 0;

		// posições do array com os dados que serão atualizados
		final int POSICAO_ID_COB_ACAO_ATIV_CRON_EMITIR = 0;
		final int POSICAO_ID_COB_ACAO_ATIV_CRON_ENCERRAR = 1;
		final int POSICAO_DATA_COM_ATIV_ENCERRAR = 2;
		final int POSICAO_DATA_PREV_ATIV_ENCERRAR = 3;
		final int POSICAO_DATA_PREV_ATIV_EMITIR = 4;
		final int POSICAO_ANO_MES_REF_COB_GRUP_CRON_MES = 5;
		final int POSICAO_ID_COB_ACAO_CRONOG = 6;
		final int POSICAO_ID_COB_GRUPO = 7;
		final int POSICAO_ID_COB_ACAO = 8;
		final int POSICAO_DATA_REA_ATIV_EMITIR = 9;

		// -------------------------
		//
		// Registrar o início do processamento da Unidade de
		// Processamento
		// do Batch
		//
		// -------------------------

		idUnidadeIniciada = getControladorBatch()
				.iniciarUnidadeProcessamentoBatch(
						idFuncionalidadeIniciada,
						UnidadeProcessamento.COB_ACAO_ATIV_CRONOG,
						((Integer) dadosCobrancaAcaoAtividadeCronograma[POSICAO_ID_COB_ACAO_ATIV_CRON_EMITIR]));

		// coleção com os cronogramas de cobrança dos grupos de cobrança e meses
		// de referência
		Usuario usuarioLogado = Usuario.USUARIO_BATCH;
		try {

			// --------------------------------------------------------
			//
			// Registrar o fim da execução da Unidade de Processamento
			//
			// --------------------------------------------------------

			if (dadosCobrancaAcaoAtividadeCronograma != null) {
				Integer idCobrancaAcao = null;
				Date dataComandoAtividadeEncerrar = null;
				Date dataPrevistaAtividadeEncerrar = null;
				Integer idCobrancaAtividadeAcaoCronogramaEmitir = null;
				Integer idCobrancaAtividadeAcaoCronogramaEncerrar = null;
				Integer anoMesReferenciaCobrancaGrupoCronogramaMes = null;
				Integer idCobrancaAcaoCronograma = null;
				Date dataRealizacaoAtividadeEmitir = null;
				Date dataRealizacaoAtividadeEncerrar = null;
				Integer idCobrancaGrupo = null;
				Date dataPrevistaAtividadeEmitir = null;
				if (dadosCobrancaAcaoAtividadeCronograma[POSICAO_ID_COB_ACAO] != null) {
					idCobrancaAcao = (Integer) dadosCobrancaAcaoAtividadeCronograma[POSICAO_ID_COB_ACAO];
				}
				if (dadosCobrancaAcaoAtividadeCronograma[POSICAO_DATA_COM_ATIV_ENCERRAR] != null) {
					dataComandoAtividadeEncerrar = (Date) dadosCobrancaAcaoAtividadeCronograma[POSICAO_DATA_COM_ATIV_ENCERRAR];
				}

				if (dadosCobrancaAcaoAtividadeCronograma[POSICAO_DATA_PREV_ATIV_ENCERRAR] != null) {
					dataPrevistaAtividadeEncerrar = (Date) dadosCobrancaAcaoAtividadeCronograma[POSICAO_DATA_PREV_ATIV_ENCERRAR];

				}
				if (dadosCobrancaAcaoAtividadeCronograma[POSICAO_ID_COB_ACAO_ATIV_CRON_EMITIR] != null) {
					idCobrancaAtividadeAcaoCronogramaEmitir = (Integer) dadosCobrancaAcaoAtividadeCronograma[POSICAO_ID_COB_ACAO_ATIV_CRON_EMITIR];
				}
				
				if (dadosCobrancaAcaoAtividadeCronograma[POSICAO_ID_COB_ACAO_ATIV_CRON_ENCERRAR] != null) {
					idCobrancaAtividadeAcaoCronogramaEncerrar = (Integer) dadosCobrancaAcaoAtividadeCronograma[POSICAO_ID_COB_ACAO_ATIV_CRON_ENCERRAR];
				}
				if (dadosCobrancaAcaoAtividadeCronograma[POSICAO_ANO_MES_REF_COB_GRUP_CRON_MES] != null) {
					anoMesReferenciaCobrancaGrupoCronogramaMes = (Integer) dadosCobrancaAcaoAtividadeCronograma[POSICAO_ANO_MES_REF_COB_GRUP_CRON_MES];
				}
				if (dadosCobrancaAcaoAtividadeCronograma[POSICAO_ID_COB_ACAO_CRONOG] != null) {
					idCobrancaAcaoCronograma = (Integer) dadosCobrancaAcaoAtividadeCronograma[POSICAO_ID_COB_ACAO_CRONOG];
				}
				if (dadosCobrancaAcaoAtividadeCronograma[POSICAO_DATA_REA_ATIV_EMITIR] != null) {
					dataRealizacaoAtividadeEmitir = (Date) dadosCobrancaAcaoAtividadeCronograma[POSICAO_DATA_REA_ATIV_EMITIR];
				}
				if (dadosCobrancaAcaoAtividadeCronograma[POSICAO_ID_COB_GRUPO] != null) {
					idCobrancaGrupo = (Integer) dadosCobrancaAcaoAtividadeCronograma[POSICAO_ID_COB_GRUPO];
				}
				if (dadosCobrancaAcaoAtividadeCronograma[POSICAO_DATA_PREV_ATIV_EMITIR] != null) {
					dataPrevistaAtividadeEmitir = (Date) dadosCobrancaAcaoAtividadeCronograma[POSICAO_DATA_PREV_ATIV_EMITIR];
				}

				Collection colecaoCobrancaAcao = null;
				FiltroCobrancaAcao filtroCobrancaAcao = new FiltroCobrancaAcao();
				filtroCobrancaAcao.adicionarParametro(new ParametroSimples(FiltroCobrancaAcao.ID, idCobrancaAcao));
				filtroCobrancaAcao.adicionarCaminhoParaCarregamentoEntidade(FiltroCobrancaAcao.DOCUMENTO_TIPO);
				filtroCobrancaAcao.adicionarCaminhoParaCarregamentoEntidade(FiltroCobrancaAcao.SERVICO_TIPO);
				
				colecaoCobrancaAcao = this.getControladorUtil().pesquisar(
					filtroCobrancaAcao, CobrancaAcao.class.getName());
				
				CobrancaAcao cobrancaAcao = (CobrancaAcao) 
					Util.retonarObjetoDeColecao(colecaoCobrancaAcao);

				if (cobrancaAcao != null) {

					this.repositorioCobranca
							.deletarResumoCobrancaAcao(idCobrancaAcaoCronograma);

					// Item 3.4
					// verfica se o valor do documento tipo é
					// diferente de nulo
					if (cobrancaAcao.getDocumentoTipo() != null) {

						// caso a atividade da ação de cobrança
						// correspondente a
						// encerrar esteja comandada e a data
						// prescita para o
						// encerramento seja igual ou menor do
						// que a data
						// corrente
						if (dataComandoAtividadeEncerrar != null
								&& (dataPrevistaAtividadeEncerrar != null && (dataPrevistaAtividadeEncerrar
										.compareTo(new Date()) <= 0))) {
							dataRealizacaoAtividadeEncerrar = new Date();
						}

						// [SB0001] - Processar Ação com
						// Documentos de Cobrança
						this.pesquisarDocumentosCobrancaParaGeracaoResumo(
								idCobrancaAtividadeAcaoCronogramaEmitir,
								dataPrevistaAtividadeEncerrar,
								idCobrancaAtividadeAcaoCronogramaEncerrar,
								anoMesReferenciaCobrancaGrupoCronogramaMes,
								idCobrancaAcaoCronograma, 
								idCobrancaGrupo,
								idCobrancaAcao, 
								dataRealizacaoAtividadeEmitir,
								dataRealizacaoAtividadeEncerrar);
					} else {
						
						// caso a atividade da ação de cobrança
						// correspondente a
						// encerrar esteja comandada e a data
						// prescita para o
						// encerramento seja igual ou menor do
						// que a data
						// corrente
						if (dataComandoAtividadeEncerrar != null
								&& (dataPrevistaAtividadeEncerrar != null && (dataPrevistaAtividadeEncerrar
										.compareTo(new Date()) <= 0))) {
							dataRealizacaoAtividadeEncerrar = new Date();
						}

						// Item 3.5
						// [SB0006] - Processar Ação com Ordens
						// de
						// Serviço
						this
								.processarAcaoOrdemServico(
										dataPrevistaAtividadeEncerrar,
										dataPrevistaAtividadeEmitir,
										dataComandoAtividadeEncerrar,
										dataRealizacaoAtividadeEmitir,
										usuarioLogado,
										anoMesReferenciaCobrancaGrupoCronogramaMes,
										idCobrancaAcaoCronograma,
										idCobrancaGrupo, 
										cobrancaAcao,
										dataRealizacaoAtividadeEncerrar);
					}

				}

				// seta para null para o GC liberar
				colecaoCobrancaAcao = null;
				idCobrancaAcao = null;
				dataComandoAtividadeEncerrar = null;
				dataPrevistaAtividadeEncerrar = null;
				idCobrancaAtividadeAcaoCronogramaEmitir = null;
				idCobrancaAtividadeAcaoCronogramaEncerrar = null;
				anoMesReferenciaCobrancaGrupoCronogramaMes = null;
				idCobrancaAcaoCronograma = null;
				dataRealizacaoAtividadeEmitir = null;
				dataRealizacaoAtividadeEncerrar = null;
				idCobrancaGrupo = null;
				dataPrevistaAtividadeEmitir = null;

			}

			getControladorBatch().encerrarUnidadeProcessamentoBatch(null,
					idUnidadeIniciada, false);

			System.out.println("########## FINALIZADO EM  = " + new Date());

		} catch (Exception e) {
			// Este catch serve para interceptar qualquer exceção que o processo
			// batch venha a lançar e garantir que a unidade de processamento do
			// batch será atualizada com o erro ocorrido
			e.printStackTrace();

			getControladorBatch().encerrarUnidadeProcessamentoBatch(e,
					idUnidadeIniciada, true);

			throw new EJBException(e);
		}

	}

	public Collection gerarColecaoDocumentoCobrancaOrdemServico(
			CobrancaAcao cobrancaAcao,
			Date dataRealizacaoAtividadeEncerrar, Usuario usuarioLogado,
			Collection<DadosPesquisaCobrancaDocumentoHelper> colecaoCobrancaDocumentoParaAtualizar,
			Date dataPrevistaAtividadeEncerrar, Date dataComandoAtividadeEncerrar)
			throws ControladorException {

		// usado para salvar as COBRANCA_DOCUMENTO a cada 100 itens na coleção
//		Collection colecaoCobrancaDocumentoParaAtualizar = new ArrayList();

		try {

			Collection<Object[]> colecaoOrdemServico = null;

			
			// 2.1 Determinar a situação da ação de cobrança, de
			// acordo
			// com
			// a tabela COBRANCA_ACAO_SITUACAO
			// COBRANCA_DOCUMENTO com CBDO_ID igual a
			// idCobrancaDocumento
//				if (idCobrancaAtividadeAcaoCronogramaEmitir != ConstantesSistema.NUMERO_NAO_INFORMADO){
//					colecaoOrdemServico = this.repositorioCobranca
//						.pesquisarOrdemServico(idCobrancaAtividadeAcaoCronogramaEmitir, ConstantesSistema.NUMERO_NAO_INFORMADO);
//				} else if (idCobrancaAtividadeAcaoComandoEmitir != ConstantesSistema.NUMERO_NAO_INFORMADO){
//					colecaoOrdemServico = this.repositorioCobranca
//						.pesquisarOrdemServico(ConstantesSistema.NUMERO_NAO_INFORMADO, idCobrancaAtividadeAcaoComandoEmitir);					
//				}
			Collection colecaoIdsOrdemServicoCanceladaPorDecurso = new ArrayList();
			Collection colecaoIdsOrdemServicoSuspensa = new ArrayList();

			Collection colecaoOSUnidade = new ArrayList();

			OrdemServicoUnidade ordemServicoUnidade = null;
			OrdemServico os = null;
			AtendimentoRelacaoTipo atendimentoRelacaoTipo = null;


			// [SB0002] - Determinar Situação da Ação de Cobrança
			// caso exista ordem serviço para a cobranca documento
			if (colecaoCobrancaDocumentoParaAtualizar != null
					&& !colecaoCobrancaDocumentoParaAtualizar.isEmpty()) {
				
				Integer idOrdemServico = null;
				short situacaoOrdemServico = -1;
				Date dataFiscalizacaoSituacao = null;
				Integer idFiscalizacao = null;
				Integer idLocalidade = null;
				Integer idMotivoEncerramento = null;

				Iterator iterColecaoCobrancaDocumento = colecaoCobrancaDocumentoParaAtualizar.iterator();
				while (iterColecaoCobrancaDocumento.hasNext()) {
					
					// dados para atualizar o cobranca documento
					DadosPesquisaCobrancaDocumentoHelper cobrancaDocumentoAtualizar = 
						(DadosPesquisaCobrancaDocumentoHelper) iterColecaoCobrancaDocumento.next();						
					
					//caso o serviço tipo da ação de cobrança esteja
					// diferente de nulo,neste caso existe ordem de serviço
					// para a cobrança documento
					//1. Caso exista ordem de serviço [SB0003 ? Determinar Situação da Ordem de Serviço].
					if (cobrancaAcao.getServicoTipo() != null) {
						colecaoOrdemServico = this.repositorioCobranca
							.pesquisarOrdemServico(cobrancaDocumentoAtualizar.getIdDocumento());
						
						Object[] dadosOS = (Object[]) Util.retonarObjetoDeColecao(colecaoOrdemServico);
						
						if (dadosOS != null) {
							
							if (dadosOS[0] != null) {
								idOrdemServico = (Integer) dadosOS[0];
								
								//CRC4529 - adicionado por Vivianne Sousa - 31/08/2010 - analista: Fatima Sampaio
								OrdemServicoFiscSit  ordemServicoFiscSit = getControladorOrdemServico().
									recuperaOrdemServicoFiscSitComMenorDataFiscalizacao(idOrdemServico);
								if(ordemServicoFiscSit != null){
									idFiscalizacao = ordemServicoFiscSit.getFiscalizacaoSituacao().getId(); 
									dataFiscalizacaoSituacao = ordemServicoFiscSit.getDataFiscalizacaoSituacao();
								}else{
									idFiscalizacao = null; 
									dataFiscalizacaoSituacao = null;
								}
							}else{
								idFiscalizacao = null; 
								dataFiscalizacaoSituacao = null;
							}
							if (dadosOS[1] != null) {
								situacaoOrdemServico = (Short) dadosOS[1];
							}
//							if (dadosOS[2] != null) {
//								dataFiscalizacaoSituacao = (Date) dadosOS[2];
//							}
							//CRC4529 - comentado por Vivianne Sousa - 26/08/2010 - Fátima Sampaio
//							if (dadosOS[7] != null) {
//								idFiscalizacao = (Integer) dadosOS[7];
//							}
							if (dadosOS[10] != null) {
								idLocalidade = (Integer) dadosOS[10];
							}
							if (dadosOS[13] != null) {
								idMotivoEncerramento = (Integer) dadosOS[13];
							}
							//CRC4529 - comentado por Vivianne Sousa - 26/08/2010 - Fátima Sampaio
//							if (idFiscalizacao != null) {
//								cobrancaDocumentoAtualizar.setIdFiscalizacao(idFiscalizacao);
//							}
							if (idOrdemServico != null){
								cobrancaDocumentoAtualizar.setIdOrdemServico(idOrdemServico);
							}
							if (idLocalidade != null){
								cobrancaDocumentoAtualizar.setIdLocalidade(idLocalidade);
							}
							
							if (cobrancaDocumentoAtualizar.getIdSituacaoAcao() != null && 
								(cobrancaDocumentoAtualizar.getIdSituacaoAcao().intValue() == CobrancaAcaoSituacao.SUSPENSA_POR_PAG_PARC_CANC.intValue() ||
								cobrancaDocumentoAtualizar.getIdSituacaoAcao().intValue() == CobrancaAcaoSituacao.SUSPENSA_POR_PAG_PARC_CANC_APOS.intValue() ||
								cobrancaDocumentoAtualizar.getIdSituacaoAcao().intValue() == CobrancaAcaoSituacao.SUSPENSA_POR_PAG_PARC_CANC_ATE.intValue())){
									idMotivoEncerramento = new Integer(AtendimentoMotivoEncerramento.SUSPENSA_PAG_PARC_CANC_DO_DEBITO);
							} 
							
							if (idFiscalizacao != null) {								
								// atribuir o valor AÇÃO FISCALIZADA
								cobrancaDocumentoAtualizar.setIdSituacaoAcao(CobrancaAcaoSituacao.FISCALIZADA);
								cobrancaDocumentoAtualizar.setDataSituacaoAcao(dataFiscalizacaoSituacao);								
							}
							
							// a ordem se serviço não esteja encerrada
							if (situacaoOrdemServico != OrdemServico.SITUACAO_ENCERRADO.shortValue()) {
																
								// caso a atividade da ação de cobrança correspondente a
								// encerrar esteja comanda e a data presvista para o
								// encerramento seja igual ou menor do que a data corrente
								if (dataRealizacaoAtividadeEncerrar != null) {
									
									UnidadeOrganizacional unidadeOrganizacional = getControladorUnidade()
											.pesquisarUnidadeOrganizacionalLocalidade(
													idLocalidade);
									// seta os dados na osUnidade para ser
									// inserido na coleção
									ordemServicoUnidade = new OrdemServicoUnidade();
									os = new OrdemServico();
									atendimentoRelacaoTipo = new AtendimentoRelacaoTipo();

									ordemServicoUnidade.setUnidadeOrganizacional(unidadeOrganizacional);
									os.setId(idOrdemServico);
									ordemServicoUnidade.setOrdemServico(os);
									// seta o usuário na ordem serviço unidade
									ordemServicoUnidade.setUsuario(usuarioLogado);
									// seta o id do atendimento relação tipo
									atendimentoRelacaoTipo.setId(AtendimentoRelacaoTipo.ENCERRAR);
									ordemServicoUnidade.setAtendimentoRelacaoTipo(atendimentoRelacaoTipo);

									// seta a ultima alteração com a data atual
									ordemServicoUnidade.setUltimaAlteracao(new Date());
									colecaoOSUnidade.add(ordemServicoUnidade);

									// seta para null os dados para serem
									// coletados pelo GC
									ordemServicoUnidade = null;
									os = null;
									atendimentoRelacaoTipo = null;

									if (cobrancaDocumentoAtualizar.getIdSituacaoAcao() == null ||  
											cobrancaDocumentoAtualizar.getIdSituacaoAcao().intValue() == CobrancaAcaoSituacao.PENDENTE){										

										// Atibuir o valor AÇÃO CANCELADA POR
										// DECURSO DE PRAZO
										cobrancaDocumentoAtualizar.setIdSituacaoAcao(CobrancaAcaoSituacao.CANCELADA_PRAZO);
										cobrancaDocumentoAtualizar.setDataSituacaoAcao(new Date());
										idMotivoEncerramento = new Integer(AtendimentoMotivoEncerramento.CANCELADO_POR_DERCURSO_DE_PRAZO);
										colecaoIdsOrdemServicoCanceladaPorDecurso.add(idOrdemServico);
									}
									
								}
								
								if (idMotivoEncerramento != null 
									&& idMotivoEncerramento.shortValue() == AtendimentoMotivoEncerramento.SUSPENSA_PAG_PARC_CANC_DO_DEBITO){
									colecaoIdsOrdemServicoSuspensa.add(idOrdemServico);											 
								}																
	
								cobrancaDocumentoAtualizar.setIdMotivoEncerramento(idMotivoEncerramento);
	
//								} else {
//									if(idMotivoEncerramento.intValue() != AtendimentoMotivoEncerramento.SUSPENSA_PAG_PARC_CANC_DO_DEBITO){
//										if (idFiscalizacao != null
//												&& !idFiscalizacao.equals("")) {
//											cobrancaDocumentoAtualizar.setIdSituacaoAcao(CobrancaAcaoSituacao.FISCALIZADA);
//											cobrancaDocumentoAtualizar.setDataSituacaoAcao(dataFiscalizacaoSituacao);
//										} else {
//											if (icExecucao.shortValue() == ConstantesSistema.SIM.shortValue()){
//												cobrancaDocumentoAtualizar.setIdSituacaoAcao(CobrancaAcaoSituacao.EXECUTADA);										
//											} else{
//												cobrancaDocumentoAtualizar.setIdSituacaoAcao(CobrancaAcaoSituacao.CANCELADA);
//											}
//											cobrancaDocumentoAtualizar.setDataSituacaoAcao(dataEncerramento);									
//										}
//										cobrancaDocumentoAtualizar.setIdMotivoEncerramento(idMotivoEncerramento);
//									}
							}
														
							// atualiza os campos para serem utilizados para
							// atualização
							// e consulta de dados da cobrança documento							
//								cobrancaDocumentoAtualizar.setIdImovel(idImovel);
//								cobrancaDocumentoAtualizar.setIdDocumento(idDocumento);
//								cobrancaDocumentoAtualizar.setValorDocumento(valorDocumento);
//								cobrancaDocumentoAtualizar.setIdCobrancaCriterio(idCriterioCobranca);
//								cobrancaDocumentoAtualizar.setDataEmissao(dataEmissaoDocumento);
							
//								colecaoCobrancaDocumentoParaAtualizar
//										.add(cobrancaDocumentoAtualizar);
							
							
							//CRC4529 - adicionado por Vivianne Sousa - 26/08/2010 - Fátima Sampaio
							if (idOrdemServico != null){
								
								Collection colecaoOrdemServicoFiscSit  = getControladorOrdemServico().
									recuperaOrdemServicoFiscSit(idOrdemServico);
								
								if(colecaoOrdemServicoFiscSit != null && !colecaoOrdemServicoFiscSit.isEmpty()){
									
									CobrancaDocumento cobrancaDocumento = new CobrancaDocumento();
									cobrancaDocumento.setId(cobrancaDocumentoAtualizar.getIdDocumento());
									Iterator iteratorOrdemServicoFiscSit = colecaoOrdemServicoFiscSit.iterator();
									
									while (iteratorOrdemServicoFiscSit.hasNext()) {
										OrdemServicoFiscSit ordemServicoFiscSit = (OrdemServicoFiscSit) iteratorOrdemServicoFiscSit.next();
										
										boolean existeCobrancaDocumentoFisc = existeCobrancaDocumentoFisc(
												ordemServicoFiscSit.getFiscalizacaoSituacao().getId(),
												idOrdemServico, cobrancaDocumentoAtualizar.getIdDocumento());

										if(!existeCobrancaDocumentoFisc){
											CobrancaDocumentoFisc cobrancaDocumentoFisc = new CobrancaDocumentoFisc();
											cobrancaDocumentoFisc.setFiscalizacaoSituacao(ordemServicoFiscSit.getFiscalizacaoSituacao());
											cobrancaDocumentoFisc.setOrdemServico(ordemServicoFiscSit.getOrdemServico());
											cobrancaDocumentoFisc.setUltimaAlteracao(new Date());
											cobrancaDocumentoFisc.setCobrancaDocumento(cobrancaDocumento);
											getControladorUtil().inserir(cobrancaDocumentoFisc);
										}

										
									}
									
								}
								
							}
							
							
							
							
							
							// limpa os campos
							idOrdemServico = null;
							situacaoOrdemServico = -1;
							dataFiscalizacaoSituacao = null;
							idFiscalizacao = null;
							idMotivoEncerramento = null;
							idLocalidade = null;
							
						}
						
					}else{
						/*2.	Caso contrário:
						 * 2.1.	Caso a atividade da ação de cobrança correspondente a encerrar 
						 * esteja comandada, a data prevista para o encerramento seja igual ou 
						 * menor do que a data corrente (CAAC_TMCOMANDO seja diferente de nulo 
						 * e CAAC_DTPREVISTA da tabela COBRANCA_ACAO_ATIVIDADE_CRONOG correspondente 
						 * à atividade encerrar seja menor ou igual à data corrente), atribuir o 
						 * valor ?cancelada por prazo? (CAST_ID = 4 da tabela COBRANCA.COBRANCA_DOCUMENTO), 
						 * à situação da ação de cobrança e a data corrente à data da situação da ação 
						 * de cobrança;*/
						if (dataComandoAtividadeEncerrar != null 
								&& dataPrevistaAtividadeEncerrar != null
								&& dataPrevistaAtividadeEncerrar.compareTo(new Date()) <= 0){
							cobrancaDocumentoAtualizar.setIdSituacaoAcao(CobrancaAcaoSituacao.CANCELADA_PRAZO);
							cobrancaDocumentoAtualizar.setDataSituacaoAcao(new Date());
						}else{
							/*2.2.	Caso contrário atribuir o valor ?enviados? (CAST_ID = 6 da 
							 * tabela COBRANCA.COBRANCA_DOCUMENTO), à situação da ação de cobrança 
							 * e a data de emissão do documento de cobrança (extrair a data do 
							 * CBDO_TMEMISSAO) à data da situação da ação de cobrança;*/
							cobrancaDocumentoAtualizar.setIdSituacaoAcao(CobrancaAcaoSituacao.ENVIADOS);
							cobrancaDocumentoAtualizar.setDataSituacaoAcao(cobrancaDocumentoAtualizar.getDataEmissao());
						}
					}
				}
				
				//atualiza as ordem de serviços
				if (colecaoIdsOrdemServicoCanceladaPorDecurso != null
						&& !colecaoIdsOrdemServicoCanceladaPorDecurso.isEmpty()) {
					repositorioCobranca
							.atualizarParmsOS(
									colecaoIdsOrdemServicoCanceladaPorDecurso,
									(int) AtendimentoMotivoEncerramento.CANCELADO_POR_DERCURSO_DE_PRAZO);
					// limpa a coleção para ser coletado pelo GC
					colecaoIdsOrdemServicoCanceladaPorDecurso.clear();
					colecaoIdsOrdemServicoCanceladaPorDecurso = null;
				}
				if (colecaoIdsOrdemServicoSuspensa != null
						&& !colecaoIdsOrdemServicoSuspensa.isEmpty()) {
					repositorioCobranca
							.atualizarParmsOS(
									colecaoIdsOrdemServicoSuspensa,
									(int) AtendimentoMotivoEncerramento.SUSPENSA_PAG_PARC_CANC_DO_DEBITO);
					// limpa a coleção para ser coletado pelo GC
					colecaoIdsOrdemServicoSuspensa.clear();
					colecaoIdsOrdemServicoSuspensa = null;
				}

				if (colecaoOSUnidade != null && !colecaoOSUnidade.isEmpty()){
					getControladorBatch().inserirColecaoObjetoParaBatch(
							colecaoOSUnidade);
					colecaoOSUnidade.clear();
					colecaoOSUnidade = null;
				}
			}
			
		} catch (Exception ex) {
			ex.printStackTrace();
			throw new ControladorException("erro.sistema", ex);
		}

		return colecaoCobrancaDocumentoParaAtualizar;
	}

	/**
	 * 
	 * Este caso de uso permite gerar o resumo das ações de cobrança com a
	 * atividade emitir já realizada e a atividade encerrar ainda não realizada
	 * e realizar a atividade encerrar das ações que estejam comandadas.
	 * 
	 * [UC0478] Gerar Resumo das Ações de Cobrança do Cronograma
	 * 
	 * [SB0001] - Processar Documento de Cobrança
	 * 
	 * @author Sávio Luiz, Ivan Sergio
	 * @date 11/05/2007, 23/12/2010
	 * 
	 */
	public void pesquisarDocumentosCobrancaParaGeracaoResumo(
			int idCobrancaAtividadeAcaoCronogramaEmitir,
			Date dataPrevistaAtividadeEncerrar,
			Integer idCobrancaAtividadeAcaoCronogramaEncerrar,
			int anoMesReferenciaCobrancaGrupoCronogramaMes,
			int idCobrancaAcaoCronograma, int idCobrancaGrupo,
			int idCobrancaAcao, Date dataRealizacaoAtividadeEmitir,
			Date dataRealizacaoAtividadeEncerrar) throws ControladorException {
		// parte da paginação
		// int indice = 0;
		// boolean flagTerminou = false;
 
		// colecao com os documentos de cobrança gerados na atividade EMITIR da
		// ação de cobrança
		Collection colecaoDadosCobrancaDocumentos = null;
		
		Collection colecaoResumoCobrancaAcao = new ArrayList();

		int indicadorDefinitivo = 0;

		try {

			if (dataRealizacaoAtividadeEncerrar != null) {
				// Item 1
				// COBRANCA_DOCUMENTO com CAAC_ID igual a
				// idCobrancaAtividadeAcaoCronogramaEmitir
				colecaoDadosCobrancaDocumentos = this.pesquisarDadosCobrancaDocumentoAgrupadoPorDataComando
						(idCobrancaAtividadeAcaoCronogramaEmitir);
				indicadorDefinitivo = 1;
			} else {
				colecaoDadosCobrancaDocumentos = this.pesquisarDadosCobrancaDocumentoAgrupadoPorDataPrevista
						(idCobrancaAtividadeAcaoCronogramaEmitir);
				indicadorDefinitivo = 2;
			}

			// para cada documento de cobrança
			if (colecaoDadosCobrancaDocumentos != null
					&& !colecaoDadosCobrancaDocumentos.isEmpty()) {

				// if (colecaoDadosCobrancaDocumentos.size() < 500) {
				// flagTerminou = true;
				// } else {
				// indice = indice + 500;
				// }

				Iterator iteratorColecaoCobrancaDocumentos = colecaoDadosCobrancaDocumentos
						.iterator();
				while (iteratorColecaoCobrancaDocumentos.hasNext()) {

					DadosCobrancaDocumentoHelper dadosCobrancaDocumentoHelper = (DadosCobrancaDocumentoHelper) iteratorColecaoCobrancaDocumentos
							.next();

					// verifica se exista a data de realização da atividade
					// de encerrar se
					// existir então recupera ela para ser comparada,senão
					// recupera a data
					// prevista da atividade de encerrar
					Date dataAtividadeEncerrar = null;
					if (dataRealizacaoAtividadeEncerrar != null) {
						dataAtividadeEncerrar = dataRealizacaoAtividadeEncerrar;
					} else {
						dataAtividadeEncerrar = dataPrevistaAtividadeEncerrar;
					}

					// id do Cobranca Documento
					Integer idCobrancaCriterio = null;
					if (dadosCobrancaDocumentoHelper.getIdCobrancaCriterio() != null) {
						idCobrancaCriterio = dadosCobrancaDocumentoHelper
								.getIdCobrancaCriterio();
					}

					Integer idFiscalizacao = null;
					if (dadosCobrancaDocumentoHelper.getIdFiscalizacao() != null) {
						idFiscalizacao = dadosCobrancaDocumentoHelper
								.getIdFiscalizacao();
					}
					Categoria categoria = null;
					if (dadosCobrancaDocumentoHelper.getIdCategoria() != null) {
						categoria = new Categoria();
						categoria.setId(dadosCobrancaDocumentoHelper
								.getIdCategoria());

					} 
					Empresa empresa = null;
					if (dadosCobrancaDocumentoHelper.getIdEmpresa() != null) {
						empresa = new Empresa();
						empresa.setId(dadosCobrancaDocumentoHelper
								.getIdEmpresa());

					}
					DocumentoEmissaoForma documentoEmissaoForma = null;
					if (dadosCobrancaDocumentoHelper.getIdDocumentoEmissaoForma() != null) {
						documentoEmissaoForma = new DocumentoEmissaoForma();
						documentoEmissaoForma.setId(dadosCobrancaDocumentoHelper.getIdDocumentoEmissaoForma());
					}
					
					//*************************************************
					// RM3323
					// Autor: Ivan Sergio
					// Data: 23/12/2010
					// Alteracao para gerar consulta de tipo de corte;
					//*************************************************
					CorteTipo corteTipo = null;
					if (dadosCobrancaDocumentoHelper.getIdCorteTipo() != null) {
						corteTipo = new CorteTipo();
						corteTipo.setId(dadosCobrancaDocumentoHelper.getIdCorteTipo());
					}
					//*************************************************

					// cria o ResumoCobrancaAcao
					ResumoCobrancaAcao resumoCobrancaAcao = this
							.criarResumoCobrancaAcao(
									anoMesReferenciaCobrancaGrupoCronogramaMes,
									idCobrancaAcaoCronograma,
									dataRealizacaoAtividadeEmitir,
									dataAtividadeEncerrar, idCobrancaGrupo,
									categoria, idCobrancaAcao,
									dadosCobrancaDocumentoHelper
											.getIdCobrancaAcaoSituacao(),
									dadosCobrancaDocumentoHelper
											.getIdSituacaoDebito(),
									idFiscalizacao, 1,
									dadosCobrancaDocumentoHelper
											.getIndicadorAcimaAbaixo(),
									dadosCobrancaDocumentoHelper
											.getIndicadorAcimaLimite(),
									dadosCobrancaDocumentoHelper
											.getValorDocumentos(),
									idCobrancaCriterio,
									dadosCobrancaDocumentoHelper
											.getIdGerenciaRegional(),
									dadosCobrancaDocumentoHelper
											.getIdLocalidade(),
									dadosCobrancaDocumentoHelper
											.getIdSetorComercial(),
									dadosCobrancaDocumentoHelper.getIdRota(),
									dadosCobrancaDocumentoHelper
											.getCodigoSetorComercial(),
									dadosCobrancaDocumentoHelper.getIdQuadra(),
									dadosCobrancaDocumentoHelper
											.getNumeroQuadra(),
									dadosCobrancaDocumentoHelper
											.getIdImovelPerfil(),
									dadosCobrancaDocumentoHelper
											.getIdSituacaoLigacaoAgua(),
									dadosCobrancaDocumentoHelper
											.getIdSituacaoLigacaoEsgoto(),
									dadosCobrancaDocumentoHelper
											.getIdEsferaPoder(),
									dadosCobrancaDocumentoHelper
											.getQuantidadeDocumentos(),
									empresa, indicadorDefinitivo, 
									dadosCobrancaDocumentoHelper
											.getIdAtendimentoMotivoEncerramento(),
									dadosCobrancaDocumentoHelper.getIdUnidadeNegocio(), documentoEmissaoForma);
					
					//*************************************************
					// RM3323
					// Autor: Ivan Sergio
					// Data: 23/12/2010
					// Alteracao para gerar consulta de tipo de corte;
					//*************************************************
					resumoCobrancaAcao.setCorteTipo(corteTipo);
					//*************************************************

					// adciona na coleção
					colecaoResumoCobrancaAcao.add(resumoCobrancaAcao);
				}
				
				colecaoDadosCobrancaDocumentos.clear();
			}

			// } else {
			// flagTerminou = true;
			// }
			// seta nulo para o Garbage Collector limpar
			
			colecaoDadosCobrancaDocumentos = null;

			// 2.5 gravar os dados na tabela RESUMO_COBRANCA_ACAO
			if (!colecaoResumoCobrancaAcao.isEmpty()) {
				getControladorBatch().inserirColecaoObjetoParaBatch(
						colecaoResumoCobrancaAcao);
			}

			// 2.6
			// caso a atividade da ação de cobrança correspondente a
			// encerrar esteja comandada e a data prescita para o
			// encerramento seja igual ou menor do que a data
			// corrente
			if (dataRealizacaoAtividadeEncerrar != null && idCobrancaAtividadeAcaoCronogramaEncerrar != null) {
				// atualiza a data e hora da realização da atividade
				// encerrar ação de cobrança
				// grava no banco as
				// COBRANCA_ACAO_ATIVADADE_CRONOGRAMA
				repositorioCobranca
						.atualizarCobrancaAcaoAtividadeCronograma(idCobrancaAtividadeAcaoCronogramaEncerrar);
			}
		} catch (ErroRepositorioException ex) {
			ex.printStackTrace();
			throw new ControladorException("erro.sistema", ex);
		}

	}

	/**
	 * 
	 * Este caso de uso permite gerar o resumo das ações de cobrança com a
	 * atividade emitir já realizada e a atividade encerrar ainda não realizada
	 * e realizar a atividade encerrar das ações que estejam comandadas.
	 * 
	 * [UC0478] Gerar Resumo das Ações de Cobrança do Cronograma
	 * 
	 * [SB0004] - Atualizar Item do Documento de Cobrança
	 * 
	 * Acumula a quantidade e o valor do item, na situiaão de débito
	 * correspondente Armazena a data da situação do débito do imte do documento
	 * de cobrança refrente a situação do débito do item do documento de
	 * cobrança
	 * 
	 * @author Rafael Santos
	 * @date 18/10/2006
	 * 
	 */
	public void atualizarItemDocumentoCobranca(
			int idSituacaoDebito,
			BigDecimal valorItemCobrado,
			Date dataSituacaoDebito,
			Collection<GerarResumoAcoesCobrancaCronogramaHelper> colecaoGerarResumoAcoesCobrancaCronogramaHelper) {

		if (colecaoGerarResumoAcoesCobrancaCronogramaHelper != null
				&& !colecaoGerarResumoAcoesCobrancaCronogramaHelper.isEmpty()) {
			// se a coleção não estiver vazia, procura por uma ocorrencia o id
			// da Situação do Débito para acumular, se não existir adiciona

			Iterator iteratorcolecaoGerarResumoAcoesCobrancaCronogramaHelper = colecaoGerarResumoAcoesCobrancaCronogramaHelper
					.iterator();
			// guarda a informação para saber se existe ou não o debito na
			// coleção
			boolean naoExisteSituacaoDebito = true;
			// variavel para parar o loop da coleção
			boolean achou = true;
			// posição para aculumar situação do debito
			// int indicePosicaoParaAcumular = -1;
			// indice corrente do item na coleção
			// int indice = 0;
			// objeto que ira receber o resumo para ser substituido

			GerarResumoAcoesCobrancaCronogramaHelper gerarResumoAcoesCobrancaCronogramaHelper = null;
			while (iteratorcolecaoGerarResumoAcoesCobrancaCronogramaHelper
					.hasNext()
					&& achou) {
				gerarResumoAcoesCobrancaCronogramaHelper = (GerarResumoAcoesCobrancaCronogramaHelper) iteratorcolecaoGerarResumoAcoesCobrancaCronogramaHelper
						.next();

				// verifica se existe na coleção
				if (gerarResumoAcoesCobrancaCronogramaHelper
						.getIdSituacaoDebito() == idSituacaoDebito) {
					achou = false;// para a loop da coleção
					// indicePosicaoParaAcumular = indice;//guarda o indice da
					// coleção a qual esta o registro para ser substituido
					naoExisteSituacaoDebito = false;// guarda a informação de
					// que existe a situação de
					// debito na coleção
				}
			}

			// se não existi a situação de debito na coleção adiciona
			if (naoExisteSituacaoDebito) {
				gerarResumoAcoesCobrancaCronogramaHelper = new GerarResumoAcoesCobrancaCronogramaHelper();

				// cria o objeto
				gerarResumoAcoesCobrancaCronogramaHelper
						.setIdSituacaoDebito(idSituacaoDebito);
				gerarResumoAcoesCobrancaCronogramaHelper
						.setQuantidadeOcorrenciaSituacaoDebito(1);
				gerarResumoAcoesCobrancaCronogramaHelper
						.setValorItemCobrado(valorItemCobrado);
				gerarResumoAcoesCobrancaCronogramaHelper
						.setDataSituacaoDebito(dataSituacaoDebito);

				// adciona na coleção
				colecaoGerarResumoAcoesCobrancaCronogramaHelper
						.add(gerarResumoAcoesCobrancaCronogramaHelper);
			} else {
				// existe situação de debito na coleção

				// acumula a quantidade de ocorrencia da situação de debito
				gerarResumoAcoesCobrancaCronogramaHelper
						.setQuantidadeOcorrenciaSituacaoDebito(gerarResumoAcoesCobrancaCronogramaHelper
								.getQuantidadeOcorrenciaSituacaoDebito() + 1);
				// acumula o valor do item cobrado
				gerarResumoAcoesCobrancaCronogramaHelper
						.setValorItemCobrado(gerarResumoAcoesCobrancaCronogramaHelper
								.getValorItemCobrado().add(valorItemCobrado));
				// armazena a data da situação de debito
				// caso ela for nula, armazena a data
				if (gerarResumoAcoesCobrancaCronogramaHelper
						.getDataSituacaoDebito() == null) {
					gerarResumoAcoesCobrancaCronogramaHelper
							.setDataSituacaoDebito(dataSituacaoDebito);
				} else {
					Date datagerarResumoAcoesCobrancaCronogramaHelper = gerarResumoAcoesCobrancaCronogramaHelper
							.getDataSituacaoDebito();
					// se a data que esta, for maior que a data recebido, a nova
					// data ser a dataSituacaoDebito
					if (dataSituacaoDebito != null && datagerarResumoAcoesCobrancaCronogramaHelper
							.compareTo(dataSituacaoDebito) > 0) {
						gerarResumoAcoesCobrancaCronogramaHelper
								.setDataSituacaoDebito(dataSituacaoDebito);
					}
				}
			}
		} else {

			GerarResumoAcoesCobrancaCronogramaHelper gerarResumoAcoesCobrancaCronogramaHelper = new GerarResumoAcoesCobrancaCronogramaHelper();

			// cria o objeto
			gerarResumoAcoesCobrancaCronogramaHelper
					.setIdSituacaoDebito(idSituacaoDebito);
			gerarResumoAcoesCobrancaCronogramaHelper
					.setQuantidadeOcorrenciaSituacaoDebito(1);
			gerarResumoAcoesCobrancaCronogramaHelper
					.setValorItemCobrado(valorItemCobrado);
			gerarResumoAcoesCobrancaCronogramaHelper
					.setDataSituacaoDebito(dataSituacaoDebito);

			// adciona na coleção
			colecaoGerarResumoAcoesCobrancaCronogramaHelper
					.add(gerarResumoAcoesCobrancaCronogramaHelper);
		}
	}

	/**
	 * 
	 * Este caso de uso permite gerar o resumo das ações de cobrança com a
	 * atividade emitir já realizada e a atividade encerrar ainda não realizada
	 * e realizar a atividade encerrar das ações que estejam comandadas.
	 * 
	 * [UC0478] Gerar Resumo das Ações de Cobrança do Cronograma
	 * 
	 * [SB0001] - Processar Documentos de Cobrança
	 * 
	 * Pesquisa o Imovel para ser usado para acumular valores no
	 * RESUMO_COBRANCA_ACAO
	 * 
	 * @author Rafael Santos
	 * @date 23/10/2006
	 * 
	 */
	public Imovel pesquisarDadosImovel(int idImovel)
			throws ControladorException {

		Imovel imovel = new Imovel();

		Collection imoveis;

		// Pesquisa imovel
		try {
			// IMOV_ID de IMOVEL igual a idImovel
			imoveis = repositorioCobranca.pesquisarDadosImovel(idImovel);

		} catch (ErroRepositorioException ex) {
			sessionContext.setRollbackOnly();
			throw new ControladorException("erro.sistema", ex);
		}

		// Verifica se imovel
		if (imoveis != null && !imoveis.isEmpty()) {

			Iterator iteratorImoveis = imoveis.iterator();

			while (iteratorImoveis.hasNext()) {

				Object[] arrayImovel = (Object[]) iteratorImoveis.next();

				// id do imovel
				imovel.setId(idImovel);

				// ligacaoAguaSituacao.id
				if (arrayImovel[0] != null) {
					LigacaoAguaSituacao ligacaoAguaSituacao = new LigacaoAguaSituacao();
					ligacaoAguaSituacao.setId((Integer) arrayImovel[0]);
					imovel.setLigacaoAguaSituacao(ligacaoAguaSituacao);

					ligacaoAguaSituacao = null;
				}

				// ligacaoEsgotoSituacao.id
				if (arrayImovel[1] != null) {
					LigacaoEsgotoSituacao ligacaoEsgotoSituacao = new LigacaoEsgotoSituacao();
					ligacaoEsgotoSituacao.setId((Integer) arrayImovel[1]);
					imovel.setLigacaoEsgotoSituacao(ligacaoEsgotoSituacao);

					ligacaoEsgotoSituacao = null;
				}

				// localidade.id
				Localidade localidade = null;
				if (arrayImovel[2] != null) {
					localidade = new Localidade();
					localidade.setId((Integer) arrayImovel[2]);
					imovel.setLocalidade(localidade);

				}

				Quadra quadra = null;
				// quadra.id
				if (arrayImovel[3] != null) {
					quadra = new Quadra();
					quadra.setId((Integer) arrayImovel[3]);
					imovel.setQuadra(quadra);
				}

				// quadra.numeroQuadra
				if (arrayImovel[4] != null) {
					if (quadra == null) {
						quadra = new Quadra();
					}
					quadra.setNumeroQuadra(((Integer) arrayImovel[4])
							.intValue());
					imovel.setQuadra(quadra);
				}

				SetorComercial setorComercial = null;
				// setorComercial.id
				if (arrayImovel[5] != null) {
					setorComercial = new SetorComercial();
					setorComercial.setId(((Integer) arrayImovel[5]).intValue());
					imovel.setSetorComercial(setorComercial);
				}

				// setorComercial.codigo
				if (arrayImovel[6] != null) {
					if (setorComercial == null) {
						setorComercial = new SetorComercial();
					}
					setorComercial.setCodigo(((Integer) arrayImovel[6])
							.intValue());
					imovel.setSetorComercial(setorComercial);
				}

				setorComercial = null;

				// localidade.gerenciaRegional.iid
				if (arrayImovel[7] != null) {
					if (localidade == null) {
						localidade = new Localidade();
					}
					GerenciaRegional gerenciaRegional = new GerenciaRegional();
					gerenciaRegional.setId((Integer) arrayImovel[7]);
					localidade.setGerenciaRegional(gerenciaRegional);
					imovel.setLocalidade(localidade);
				}

				localidade = null;

				// quadra.rota.id
				if (arrayImovel[8] != null) {
					if (quadra == null) {
						quadra = new Quadra();
					}
					Rota rota = new Rota();
					rota.setId((Integer) arrayImovel[8]);
					quadra.setRota(rota);
					imovel.setQuadra(quadra);
				}

				quadra = null;

				// imovelPerfil.id
				if (arrayImovel[9] != null) {
					ImovelPerfil imovelPerfil = new ImovelPerfil();
					imovelPerfil.setId((Integer) arrayImovel[9]);
					imovel.setImovelPerfil(imovelPerfil);

					imovelPerfil = null;
				}

				// esfera do poder
				if (arrayImovel[10] != null) {
					HashSet clientes = new HashSet();
					EsferaPoder esferaPoder = new EsferaPoder();
					esferaPoder.setId((Integer) arrayImovel[10]);

					ClienteTipo clienteTipo = new ClienteTipo();
					clienteTipo.setEsferaPoder(esferaPoder);

					Cliente cliente = new Cliente();
					cliente.setClienteTipo(clienteTipo);
					clientes.add(cliente);
					imovel.setClienteImoveis(clientes);

					clientes = null;
					esferaPoder = null;
					clienteTipo = null;
					clienteTipo = null;
				}
			}
		}

		return imovel;
	}

	/**
	 * 
	 * Este caso de uso permite gerar o resumo das ações de cobrança com a
	 * atividade emitir já realizada e a atividade encerrar ainda não realizada
	 * e realizar a atividade encerrar das ações que estejam comandadas.
	 * 
	 * [UC0478] Gerar Resumo das Ações de Cobrança do Cronograma
	 * 
	 * [SB0001] - Processar Documentos de Cobrança
	 * 
	 * Acumular ou insere na coelção de RESUMO_COBRANCA_ACAO
	 * 
	 * @author Rafael Santos
	 * @date 24/10/2006
	 * 
	 */
	// public Collection<ResumoCobrancaAcao> acumularResumoCobrancaAcao(
	// Collection colecaoResumoCobrancaAcao,
	// int anoMesReferenciaCobrancaGrupoCronogramaMes,
	// int idCobrancaAcaoCronograma, Date dataRealizacaoAtividadeEmitir,
	// Date dataPrevistaAtividadeEncerrar, int idCobrancaGrupo,
	// Imovel imovel, Categoria categoria, int idCobrancaAcao,
	// Integer idSituacaoAcao, Integer idSituacaoPredominanteDebito,
	// Integer idFiscalizacao, int indicadorCronogramaComando,
	// Date dataSituacaoAcao, Date dataSituacaoDebito,
	// BigDecimal valorDocumento, BigDecimal valorLimitePrioridade,
	// Integer idCobrancaCriterio, Date dataRealizacaoAtividadeEncerrar) {
	//
	// // retira a hora das datas
	// if (dataSituacaoAcao != null && dataSituacaoDebito != null) {
	// dataSituacaoAcao = Util.formatarDataSemHora(dataSituacaoAcao);
	// dataSituacaoDebito = Util.formatarDataSemHora(dataSituacaoDebito);
	// }
	//
	// // verifica se exista a data de realização da atividade de encerrar se
	// // existir então recupera ela para ser comparada,senão recupera a data
	// // prevista da atividade de encerrar
	// Date dataAtividadeEncerrar = null;
	// if (dataRealizacaoAtividadeEncerrar != null) {
	// dataAtividadeEncerrar = dataRealizacaoAtividadeEncerrar;
	// } else {
	// dataAtividadeEncerrar = dataPrevistaAtividadeEncerrar;
	// }
	//
	// // ALterado por Sávio Luiz data:27/03/2007
	// // SimpleDateFormat formato = new SimpleDateFormat("dd/MM/yyyy");
	// //
	// // try {
	// // dataSituacaoAcao = formato.parse("" + dataSituacaoAcao);
	// // } catch (java.text.ParseException e) {
	// // dataSituacaoAcao = null;
	// // }
	//
	// if (colecaoResumoCobrancaAcao != null
	// && !colecaoResumoCobrancaAcao.isEmpty()) {
	// // se a coleção não estiver vazia, procura por uma ocorrencia do
	// // resumo cobrança ação para acumular, se não existir adiciona
	//
	// Iterator iteratorColecaoResumoCobrancaAcao = colecaoResumoCobrancaAcao
	// .iterator();
	// // guarda a informação para saber se existe ou não o resumo cobrança
	// // ação
	// boolean naoExisteResumoCobrancaAcao = true;
	// // variavel para parar o loop da coleção
	// boolean achou = true;
	//
	// ResumoCobrancaAcao resumoCobrancaAcao = null;
	//
	// while (iteratorColecaoResumoCobrancaAcao.hasNext() && achou) {
	// resumoCobrancaAcao = (ResumoCobrancaAcao)
	// iteratorColecaoResumoCobrancaAcao
	// .next();
	//
	// // verifica se existe na coleção
	// if (resumoCobrancaAcao.getAnoMesReferencia() ==
	// anoMesReferenciaCobrancaGrupoCronogramaMes
	// && resumoCobrancaAcao.getCobrancaAcaoCronograma()
	// .getId().equals(idCobrancaAcaoCronograma)
	// && resumoCobrancaAcao.getRealizacaoEmitir().compareTo(
	// dataRealizacaoAtividadeEmitir) == 0
	// && resumoCobrancaAcao.getRealizacaoEncerrar()
	// .compareTo(dataAtividadeEncerrar) == 0
	// && resumoCobrancaAcao.getCobrancaGrupo().getId()
	// .equals(idCobrancaGrupo)
	// && resumoCobrancaAcao.getGerenciaRegional().getId()
	// .equals(
	// imovel.getLocalidade()
	// .getGerenciaRegional().getId())
	// && resumoCobrancaAcao.getLocalidade().getId().equals(
	// imovel.getLocalidade().getId())
	// && resumoCobrancaAcao.getSetorComercial().getId()
	// .equals(imovel.getSetorComercial().getId())
	// && resumoCobrancaAcao.getRota().getId().equals(
	// imovel.getQuadra().getRota().getId())
	// && resumoCobrancaAcao.getCodigoSetorComercial() == imovel
	// .getSetorComercial().getCodigo()
	// && resumoCobrancaAcao.getQuadra().getId().equals(
	// imovel.getQuadra().getId())
	// && resumoCobrancaAcao.getNumeroQuadra() == imovel
	// .getQuadra().getNumeroQuadra()
	// && resumoCobrancaAcao.getImovelPerfil().getId().equals(
	// imovel.getImovelPerfil().getId())
	// && resumoCobrancaAcao
	// .getLigacaoAguaSituacao()
	// .getId()
	// .equals(imovel.getLigacaoAguaSituacao().getId())
	// && resumoCobrancaAcao.getLigacaoEsgotoSituacao()
	// .getId().equals(
	// imovel.getLigacaoEsgotoSituacao()
	// .getId())
	// && resumoCobrancaAcao.getCategoria().getId().equals(
	// categoria.getId())
	// && resumoCobrancaAcao.getCobrancaAcao().getId().equals(
	// idCobrancaAcao)
	// && resumoCobrancaAcao.getCobrancaAcaoSituacao().getId()
	// .equals(idSituacaoAcao)
	// // &&
	// //
	// resumoCobrancaAcao.getCobrancaDebitoSituacao().getId().equals(idSituacaoPredominanteDebito)
	// && resumoCobrancaAcao.getCobrancaCriterio().getId()
	// .equals(idCobrancaCriterio)) {
	//
	// /** verifica se a situação do debito é a mesma do resumo */
	// boolean igualdadeCobrancaDebitoSituacao = false;
	//
	// if (resumoCobrancaAcao.getCobrancaDebitoSituacao() != null
	// && idSituacaoPredominanteDebito != null) {
	// if (resumoCobrancaAcao.getCobrancaDebitoSituacao()
	// .getId().equals(idSituacaoPredominanteDebito)) {
	// igualdadeCobrancaDebitoSituacao = true;
	// }
	// }
	// if (resumoCobrancaAcao.getCobrancaDebitoSituacao() == null
	// && idSituacaoPredominanteDebito == null) {
	// igualdadeCobrancaDebitoSituacao = true;
	// }
	//
	// boolean igualdadeFiscalizacao = false;
	//
	// // id fiscalização
	// // verifica se a fiscalização na coleção esta diferente de
	// // nula e se a que irei comparar também é nula
	// if (resumoCobrancaAcao.getFiscalizacaoSituacao() != null
	// && idFiscalizacao != null) {
	// if (resumoCobrancaAcao.getFiscalizacaoSituacao()
	// .getId().equals(idFiscalizacao)) {
	// igualdadeFiscalizacao = true;
	// }
	// }
	// if (resumoCobrancaAcao.getFiscalizacaoSituacao() == null
	// && idFiscalizacao == null) {
	// // se as duas fiscalização forem nulas, elas são iguais
	// // como critéios diferença
	// igualdadeFiscalizacao = true;
	// }
	//
	// // pega a esfera do poder do imovel
	// EsferaPoder esferaPoder = null;
	// if (imovel.getClienteImoveis() != null
	// && !imovel.getClienteImoveis().isEmpty()) {
	// Cliente cliente = (Cliente) imovel.getClienteImoveis()
	// .iterator().next();
	// esferaPoder = cliente.getClienteTipo().getEsferaPoder();
	// }
	// boolean igualdadeEsferaPoder = false;
	//
	// // verifica se a esfera do poder na coleção esta diferente
	// // de nula e se a que irei comparar também é nula
	// if (resumoCobrancaAcao.getEsferaPoder() != null
	// && esferaPoder != null) {
	// if (resumoCobrancaAcao.getEsferaPoder().getId().equals(
	// esferaPoder.getId())) {
	// igualdadeEsferaPoder = true;
	// }
	// }
	// if (resumoCobrancaAcao.getEsferaPoder() == null
	// && esferaPoder == null) {
	// // se as duas esferar do poder forem nulas, elas são
	// // iguais como critéios diferença
	// igualdadeEsferaPoder = true;
	// }
	//
	// // verifica o valor do indicador antes apos
	// Short indicadorAntesApos = null;
	// if (dataSituacaoAcao == null && dataSituacaoDebito == null) {
	// indicadorAntesApos = null;
	// }
	// if (dataSituacaoAcao != null && dataSituacaoDebito != null) {
	// // data da situação da ação de cobrança seja anterior a
	// // data da situação do débito
	// if (dataSituacaoAcao.after(dataSituacaoDebito)) {
	// indicadorAntesApos = new Short("1");
	// } else {
	// indicadorAntesApos = new Short("2");
	// }
	// }
	//
	// boolean igualdadeIndicadorAntesApos = false;
	//
	// // verifica se o indicador de antes e apos na coleção são
	// // iguais
	// if (resumoCobrancaAcao.getIndicadorAntesApos() == null
	// && indicadorAntesApos == null) {
	// igualdadeIndicadorAntesApos = true;
	// } else {
	// if (resumoCobrancaAcao.getIndicadorAntesApos() != null
	// && indicadorAntesApos != null) {
	// if (resumoCobrancaAcao.getIndicadorAntesApos()
	// .shortValue() == indicadorAntesApos
	// .shortValue()) {
	// igualdadeIndicadorAntesApos = true;
	// }
	// }
	// }
	//
	// boolean igualdadeIndicadorAcimaLimite = false;
	//
	// // indicador acima do limite
	// Short indicadorAcimaLimite = null;
	// if (valorDocumento.compareTo(valorLimitePrioridade) > 0) {
	// indicadorAcimaLimite = new Short("1");
	// } else {
	// indicadorAcimaLimite = new Short("2");
	// }
	//
	// // verifica se o indicador de acima do limite na coleção são
	// // iguais
	// if (resumoCobrancaAcao.getIndicadorLimite() == indicadorAcimaLimite
	// .shortValue()) {
	// igualdadeIndicadorAcimaLimite = true;
	// }
	//
	// // verifica se são igual na esfera do poder, no indicador
	// // antes e apos e no indicador acima do limite
	// if (igualdadeFiscalizacao && igualdadeEsferaPoder
	// && igualdadeIndicadorAntesApos
	// && igualdadeIndicadorAcimaLimite
	// && igualdadeCobrancaDebitoSituacao) {
	// achou = false;// para a loop da coleção
	// naoExisteResumoCobrancaAcao = false;// guarda a
	// // informação de que
	// // existe o resumo
	// // cobranca ação na
	// // coleção
	// }
	// }
	// }
	//
	// // se não existi o resumo cobrança ação na coleção adiciona
	// if (naoExisteResumoCobrancaAcao) {
	//
	// // indicador antes apos
	// Integer indicadorAntesApos = null;
	// if (dataSituacaoAcao == null && dataSituacaoDebito == null) {
	// indicadorAntesApos = null;
	// }
	// if (dataSituacaoAcao != null && dataSituacaoDebito != null) {
	// // data da situação da ação de cobrança seja anterior a data
	// // da situação do débito
	// if (dataSituacaoAcao.after(dataSituacaoDebito)) {
	// indicadorAntesApos = new Integer("1");
	// } else {
	// indicadorAntesApos = new Integer("2");
	// }
	// }
	//
	// // indicador acima do limite
	// Integer indicadorAcimaLimite = null;
	// if (valorDocumento.compareTo(valorLimitePrioridade) > 0) {
	// indicadorAcimaLimite = new Integer("1");
	// } else {
	// indicadorAcimaLimite = new Integer("2");
	// }
	//
	// // cria o ResumoCobrancaAcao
	// resumoCobrancaAcao = this.criarResumoCobrancaAcao(
	// anoMesReferenciaCobrancaGrupoCronogramaMes,
	// idCobrancaAcaoCronograma,
	// dataRealizacaoAtividadeEmitir, dataAtividadeEncerrar,
	// idCobrancaGrupo, imovel, categoria, idCobrancaAcao,
	// idSituacaoAcao, idSituacaoPredominanteDebito,
	// idFiscalizacao, indicadorCronogramaComando,
	// indicadorAntesApos, indicadorAcimaLimite,
	// valorDocumento, idCobrancaCriterio);
	//
	// // adciona na coleção
	// colecaoResumoCobrancaAcao.add(resumoCobrancaAcao);
	//
	// // seta null para o GC liberar
	// resumoCobrancaAcao = null;
	// } else {
	// // existe o resumo cobrança ação na coleção
	//
	// // acumula a quantidade de documentos
	// resumoCobrancaAcao.setQuantidadeDocumentos(resumoCobrancaAcao
	// .getQuantidadeDocumentos() + 1);
	//
	// // acumula o valor do documento
	// resumoCobrancaAcao.setValorDocumentos(resumoCobrancaAcao
	// .getValorDocumentos().add(valorDocumento));
	// }
	// } else {
	// // se a coleção estiver vazia, adiciona o item
	//
	// // indicador antes apos
	// Integer indicadorAntesApos = null;
	// if (dataSituacaoAcao == null || dataSituacaoDebito == null) {
	// indicadorAntesApos = null;
	// } else {
	// // data da situação da ação de cobrança seja anterior a data da
	// // situação do débito
	// if (dataSituacaoAcao.after(dataSituacaoDebito)) {
	// indicadorAntesApos = new Integer("1");
	// } else {
	// indicadorAntesApos = new Integer("2");
	// }
	// }
	//
	// // indicador acima do limite
	// Short indicadorAcimaLimite = null;
	// if (valorDocumento.compareTo(valorLimitePrioridade) > 0) {
	// indicadorAcimaLimite = new Short("1");
	// } else {
	// indicadorAcimaLimite = new Short("2");
	// }
	//
	// // cria o ResumoCobrancaAcao
	// ResumoCobrancaAcao resumoCobrancaAcao = this
	// .criarResumoCobrancaAcao(
	// anoMesReferenciaCobrancaGrupoCronogramaMes,
	// idCobrancaAcaoCronograma,
	// dataRealizacaoAtividadeEmitir,
	// dataAtividadeEncerrar, idCobrancaGrupo, imovel,
	// categoria, idCobrancaAcao, idSituacaoAcao,
	// idSituacaoPredominanteDebito, idFiscalizacao,
	// indicadorCronogramaComando, indicadorAntesApos,
	// new Integer(indicadorAcimaLimite.shortValue()),
	// valorDocumento, idCobrancaCriterio);
	//
	// // adciona na coleção
	// colecaoResumoCobrancaAcao.add(resumoCobrancaAcao);
	// }
	// return colecaoResumoCobrancaAcao;
	// }
	/**
	 * Retorna o valor do ControladorOrdemServico
	 * 
	 * @author Leonardo Regis
	 * @date 23/09/2006
	 * 
	 * @return O valor de ControladorOrdemServico
	 */
	protected ControladorOrdemServicoLocal getControladorOrdemServico() {
		ControladorOrdemServicoLocalHome localHome = null;
		ControladorOrdemServicoLocal local = null;
		// pega a instância do ServiceLocator.
		ServiceLocator locator = null;
		try {
			locator = ServiceLocator.getInstancia();

			localHome = (ControladorOrdemServicoLocalHome) locator
					.getLocalHome(ConstantesJNDI.CONTROLADOR_ORDEM_SERVICO_SEJB);
			// guarda a referencia de um objeto capaz de fazer chamadas à
			// objetos remotamente
			local = localHome.create();
			return local;
		} catch (CreateException e) {
			throw new SistemaException(e);
		} catch (ServiceLocatorException e) {
			throw new SistemaException(e);
		}
	}

	/**
	 * Retorna o valor do ControladorBatch
	 * 
	 * @author Rafael Santos
	 * @date 25/10/2006
	 * 
	 * @return O valor de ControladorBatch
	 */
	protected ControladorBatchLocal getControladorBatch() {
		ControladorBatchLocalHome localHome = null;
		ControladorBatchLocal local = null;

		// pega a instância do ServiceLocator.

		ServiceLocator locator = null;

		try {
			locator = ServiceLocator.getInstancia();

			localHome = (ControladorBatchLocalHome) locator
					.getLocalHome(ConstantesJNDI.CONTROLADOR_BATCH_SEJB);
			// guarda a referencia de um objeto capaz de fazer chamadas à
			// objetos remotamente
			local = localHome.create();

			return local;
		} catch (CreateException e) {
			throw new SistemaException(e);
		} catch (ServiceLocatorException e) {
			throw new SistemaException(e);
		}
	}

	/**
	 * 
	 * Este caso de uso permite gerar o resumo das ações de cobrança com a
	 * atividade emitir já realizada e a atividade encerrar ainda não realizada
	 * e realizar a atividade encerrar das ações que estejam comandadas.
	 * 
	 * [UC0478] Gerar Resumo das Ações de Cobrança do Cronograma
	 * 
	 * Cria um Objto ResumoCobrancaAcao com os valores informados
	 * 
	 * @author Rafael Santos, Raphael Rossiter
	 * @date 24/10/2006, 02/09/2010
	 * 
	 */
	public ResumoCobrancaAcao criarResumoCobrancaAcao(
			int anoMesReferenciaCobrancaGrupoCronogramaMes,
			int idCobrancaAcaoCronograma, Date dataRealizacaoAtividadeEmitir,
			Date dataAtividadeEncerrar, int idCobrancaGrupo,
			Categoria categoria, int idCobrancaAcao, Integer idSituacaoAcao,
			Integer idSituacaoPredominanteDebito, Integer idFiscalizacao,
			int indicadorCronogramaComando, Short indicadorAntesApos,
			Short indicadorAcimaLimite, BigDecimal valorDocumento,
			Integer idCobrancaCriterio, Integer idGerenciaRegional,
			Integer idLocalidade, Integer idSetorComercial, Integer idRota,
			int codigoSetorComercial, Integer idQuadra, int numeroQuadra,
			Integer idPerfilImovel, Integer idSituacaoLigacaoAgua,
			Integer idSituacaoLigacaoEsgoto, Integer idEsferaPoder,
			Integer quantidadeDocumentos, Empresa empresa, 
			int indicadorDefinitivo, Integer idMotivoEncerramento,
			Integer idUnidadeNegocio, DocumentoEmissaoForma documentoEmissaoForma) {

		ResumoCobrancaAcao resumoCobrancaAcao = new ResumoCobrancaAcao();

		// ano/mes de referência do ciclor de cobrança
		resumoCobrancaAcao
				.setAnoMesReferencia(anoMesReferenciaCobrancaGrupoCronogramaMes);

		// id do cronograma da ação de cobranca
		CobrancaAcaoCronograma cobrancaAcaoCronograma = new CobrancaAcaoCronograma();
		cobrancaAcaoCronograma.setId(new Integer(idCobrancaAcaoCronograma));
		resumoCobrancaAcao.setCobrancaAcaoCronograma(cobrancaAcaoCronograma);

		// data e hora da realização da atividade "emitir"
		resumoCobrancaAcao.setRealizacaoEmitir(dataRealizacaoAtividadeEmitir);

		// data e hora presvista da atividade "encerrar"
		resumoCobrancaAcao.setRealizacaoEncerrar(dataAtividadeEncerrar);

		// id do grupo de cobrança
		CobrancaGrupo cobrancaGrupo = new CobrancaGrupo();
		cobrancaGrupo.setId(idCobrancaGrupo);
		resumoCobrancaAcao.setCobrancaGrupo(cobrancaGrupo);

		if (idGerenciaRegional != null) {
			GerenciaRegional gerenciaRegional = new GerenciaRegional();
			gerenciaRegional.setId(idGerenciaRegional);
			// gerência regional
			resumoCobrancaAcao.setGerenciaRegional(gerenciaRegional);
		}
		if (idLocalidade != null) {
			Localidade localidade = new Localidade();
			localidade.setId(idLocalidade);
			// localidade
			resumoCobrancaAcao.setLocalidade(localidade);
		}
		if (idSetorComercial != null) {
			SetorComercial setorComercial = new SetorComercial();
			setorComercial.setId(idSetorComercial);
			// Setor Comercial
			resumoCobrancaAcao.setSetorComercial(setorComercial);
		}
		if (idRota != null) {
			Rota rota = new Rota();
			rota.setId(idRota);
			// Rota
			resumoCobrancaAcao.setRota(rota);
		}
		if (idQuadra != null) {
			Quadra quadra = new Quadra();
			quadra.setId(idQuadra);
			// Quadra
			resumoCobrancaAcao.setQuadra(quadra);
		}

		// Código do Setor Comercial
		resumoCobrancaAcao.setCodigoSetorComercial(codigoSetorComercial);

		// Numero da Quadra
		resumoCobrancaAcao.setNumeroQuadra(numeroQuadra);

		if (idPerfilImovel != null) {
			ImovelPerfil imovelPerfil = new ImovelPerfil();
			imovelPerfil.setId(idPerfilImovel);
			// Perfil do Imovel
			resumoCobrancaAcao.setImovelPerfil(imovelPerfil);
		}

		if (idSituacaoLigacaoAgua != null) {
			LigacaoAguaSituacao ligacaoAguaSituacao = new LigacaoAguaSituacao();
			ligacaoAguaSituacao.setId(idSituacaoLigacaoAgua);
			// Situação da Ligação de Água
			resumoCobrancaAcao.setLigacaoAguaSituacao(ligacaoAguaSituacao);
		}

		if (idSituacaoLigacaoEsgoto != null) {
			LigacaoEsgotoSituacao ligacaoEsgotoSituacao = new LigacaoEsgotoSituacao();
			ligacaoEsgotoSituacao.setId(idSituacaoLigacaoEsgoto);
			// Situação da Ligação de Esgoto
			resumoCobrancaAcao.setLigacaoEsgotoSituacao(ligacaoEsgotoSituacao);
		}

		// categoria
		resumoCobrancaAcao.setCategoria(categoria);

		// Esfera do Poder
		if (idEsferaPoder != null) {
			EsferaPoder esferaPoder = new EsferaPoder();
			esferaPoder.setId(idEsferaPoder);
			resumoCobrancaAcao.setEsferaPoder(esferaPoder);
		}

		// id da ação de cobrança
		CobrancaAcao cobrancaAcao = new CobrancaAcao();
		cobrancaAcao.setId(new Integer(idCobrancaAcao));
		resumoCobrancaAcao.setCobrancaAcao(cobrancaAcao);

		// id da situação da ação de cobrança
		CobrancaAcaoSituacao cobrancaAcaoSituacao = new CobrancaAcaoSituacao();
		cobrancaAcaoSituacao.setId(idSituacaoAcao);
		resumoCobrancaAcao.setCobrancaAcaoSituacao(cobrancaAcaoSituacao);

		// id da situação predominante de débito
		if (idSituacaoPredominanteDebito != null) {
			CobrancaDebitoSituacao cobrancaDebitoSituacao = new CobrancaDebitoSituacao();
			cobrancaDebitoSituacao.setId(idSituacaoPredominanteDebito);
			resumoCobrancaAcao
					.setCobrancaDebitoSituacao(cobrancaDebitoSituacao);
		} else {
			resumoCobrancaAcao.setCobrancaDebitoSituacao(null);
		}

		// id da situação da fiscalização
		if (idFiscalizacao != null) {
			FiscalizacaoSituacao fiscalizacaoSituacao = new FiscalizacaoSituacao();
			fiscalizacaoSituacao.setId(idFiscalizacao);
			resumoCobrancaAcao.setFiscalizacaoSituacao(fiscalizacaoSituacao);
		}

		// indicador cronograma comando
		resumoCobrancaAcao
				.setIndicadorCronogramaComando((short) indicadorCronogramaComando);

		// indicador antes apos
		if (indicadorAntesApos != null) {
			resumoCobrancaAcao.setIndicadorAntesApos(new Short(
					indicadorAntesApos.shortValue()));
		} else {
			resumoCobrancaAcao.setIndicadorAntesApos(null);
		}

		// indicador acima do limite
		if (indicadorAcimaLimite != null) {
			resumoCobrancaAcao.setIndicadorLimite(new Short(
					indicadorAcimaLimite.shortValue()));
		} else {
			resumoCobrancaAcao.setIndicadorLimite(null);
		}

		// quantidade de documentos de cobrança
		resumoCobrancaAcao.setQuantidadeDocumentos(quantidadeDocumentos);

		// valor dos documentos de cobrança
		resumoCobrancaAcao.setValorDocumentos(valorDocumento);

		// data ultima alteração
		resumoCobrancaAcao.setUltimaAlteracao(new Date());

		CobrancaCriterio cobrancaCriterio = null;
		if (idCobrancaCriterio != null) {
			cobrancaCriterio = new CobrancaCriterio();
			cobrancaCriterio.setId(idCobrancaCriterio);
		}

		resumoCobrancaAcao.setCobrancaCriterio(cobrancaCriterio);

		resumoCobrancaAcao.setEmpresa(empresa);
		resumoCobrancaAcao.setIndicadorDefinitivo(indicadorDefinitivo);
		
		if (idMotivoEncerramento != null){
			AtendimentoMotivoEncerramento motivoEncerramento = new AtendimentoMotivoEncerramento();
			motivoEncerramento.setId(idMotivoEncerramento);
			resumoCobrancaAcao.setMotivoEncerramento(motivoEncerramento);
		}
		if (idUnidadeNegocio != null){
			UnidadeNegocio unidadeNegocio = new UnidadeNegocio();
			unidadeNegocio.setId(idUnidadeNegocio);
			resumoCobrancaAcao.setUnidadeNegocio(unidadeNegocio);
		}
		
		/*
		 * Colocado por Raphael Rossiter em 02/09/2010 - CRC 4986
		 * DEMF_ID correspondente ao código da tabela COBRANCA_DOCUMENTO
		 */
		if (documentoEmissaoForma != null){
			
			resumoCobrancaAcao.setDocumentoEmissaoForma(documentoEmissaoForma);
		}

		return resumoCobrancaAcao;

	}

	/**
	 * 
	 * Este caso de uso permite gerar o resumo das ações de cobrança com a
	 * atividade emitir já realizada e a atividade encerrar ainda não realizada
	 * e realizar a atividade encerrar das ações que estejam comandadas.
	 * 
	 * [UC0478] Gerar Resumo das Ações de Cobrança do Cronograma
	 * 
	 * [SB0006] Processar Ação com Ordens de Serviço
	 * 
	 * @author Rafael Santos, Pedro Alexandre
	 * @date 25/10/2006, 19/01/2007
	 * 
	 * @param idServicoTipo
	 * @param dataPrevistaAtividadeEncerrar
	 * @param dataPrevistaAtividadeEmitir
	 * @param dataComandoAtividadeEncerrar
	 * @param dataRealizacaoAtividadeEmitir
	 * @param usuarioLogado
	 * @param anoMesReferenciaCobrancaGrupoCronogramaMes
	 * @param idCobrancaAcaoCronograma
	 * @param idCobrancaGrupo
	 * @param idCobrancaAcao
	 * @throws ControladorException
	 */
	public void processarAcaoOrdemServico(Date dataPrevistaAtividadeEncerrar,
			Date dataPrevistaAtividadeEmitir,
			Date dataComandoAtividadeEncerrar,
			Date dataRealizacaoAtividadeEmitir, Usuario usuarioLogado,
			int anoMesReferenciaCobrancaGrupoCronogramaMes,
			int idCobrancaAcaoCronograma, int idCobrancaGrupo,
			CobrancaAcao cobrancaAcao, Date dataRealizacaoAtividadeEncerrar)
			throws ControladorException {

		// seleciona as ordens de serviço para ação de cobrança com a data de
		// entre as datas previstas das atividades
		// emitir e encerrar da ação de cobrança

		// colecao de ordem de serviço
		Collection colecaoOrdemServicos = null;

		int indice = 0;
		boolean flagTerminou = false;

		try {

			while (!flagTerminou) {
				// ORDERM_SERVICO com SVTP_ID da tabela COBRANCA_ACAO e
				// ORSE_TMGERACAO entre CAAC_DTPREVISTA do Emitir e do Encerrar
				colecaoOrdemServicos = repositorioCobranca
						.pesquisarOrdemServicos(cobrancaAcao.getServicoTipo().getId(),
								dataPrevistaAtividadeEncerrar,
								dataPrevistaAtividadeEmitir, indice);

				if (colecaoOrdemServicos != null
						&& !colecaoOrdemServicos.isEmpty()) {

					if (colecaoOrdemServicos.size() > 500) {
						flagTerminou = true;
					} else {
						indice = indice + 500;
					}

					Iterator iteratorColecaoOrdemServicos = colecaoOrdemServicos
							.iterator();

					// coleção de RESUMO_COBRANCA_ACAO
					Collection colecaoResumoCobrancaAcao = new ArrayList();

					Object[] dadosOrdemServico = null;

					while (iteratorColecaoOrdemServicos.hasNext()) {
						// id da fiscalização da ordem de serviço
						Integer idFiscalizacao = null;
						short codigoSituacao = -1;
						Integer idOrdemServico = null;
						Integer idAtendimentoMotivoEncerramento = null;
						Integer idImovel = null;
						Integer idLocalidade = null;

						dadosOrdemServico = (Object[]) colecaoOrdemServicos
								.iterator().next();

						// ir da ordem de serviço
						if (dadosOrdemServico[0] != null) {
							idOrdemServico = (Integer) dadosOrdemServico[0];
							
							//CRC4529 - adicionado por Vivianne Sousa - 30/08/2010 - analista: Fatima Sampaio
							OrdemServicoFiscSit  ordemServicoFiscSit = getControladorOrdemServico().
								recuperaOrdemServicoFiscSitComMenorDataFiscalizacao(idOrdemServico);
							if(ordemServicoFiscSit != null){
								idFiscalizacao = ordemServicoFiscSit.getFiscalizacaoSituacao().getId(); 
							}else{
								idFiscalizacao = null; 
							}
						}else{
							idFiscalizacao = null; 
						}
					
						
						// codigo da situacao
						if (dadosOrdemServico[1] != null) {
							codigoSituacao = ((Short) dadosOrdemServico[1])
									.shortValue();
						}

						// id fiscalização da ordem de serviço
//						if (dadosOrdemServico[2] != null) {
//							idFiscalizacao = (Integer) dadosOrdemServico[2];
//						}
						
						Integer idSituacaoAcao = null;

						// id atendimento motivo encerramento
						if (dadosOrdemServico[5] != null) {
							idAtendimentoMotivoEncerramento = (Integer) dadosOrdemServico[5];
						}

						// id imovel
						if (dadosOrdemServico[6] != null) {
							idImovel = (Integer) dadosOrdemServico[6];
						}
						// id localidade
						if (dadosOrdemServico[7] != null) {
							idLocalidade = (Integer) dadosOrdemServico[7];
						}

						// 2.1 Determina a situação da ação de cobrança de
						// acordo
						// com
						// a situação da ordem de serviço
						// a ordem se serviço não esteja encerrada
						if (codigoSituacao != OrdemServico.SITUACAO_ENCERRADO
								.shortValue()) {
							
							//RM8625 - UC0478
							/*
							 * 
							 * caso a acao nao tenha limite de dias para pagamento de terceiros
							 *     CAST  = acao suspensa por pag/canc/parc
							 * caso contrario, 
							 *    caso o intervalo de dias entre a data da situacao do debito e a data de emissao 
							 *    seja menor que o limite de dias para pagamento de terceiros
							 *    	  CAST = acao suspensa por pag/canc/parc até
							 *    caso contrario
							 *        CAST = acao suspensa por pag/canc/parc após
							 */
							
							FiltroCobrancaDocumento filtroCobrancaDocumento = new FiltroCobrancaDocumento();
							filtroCobrancaDocumento.adicionarParametro(
								new ParametroSimples(FiltroCobrancaDocumento.ID_COBRANCA_ACAO, cobrancaAcao.getId()));
							Collection colacaoCobrancaDocumento = getControladorUtil().pesquisar(filtroCobrancaDocumento, CobrancaDocumento.class.getName());
							
							CobrancaDocumento cobrancaDocumento = (CobrancaDocumento) Util.retonarObjetoDeColecao(colacaoCobrancaDocumento);
							
							if (cobrancaDocumento.getCobrancaDebitoSituacao() != null && 
									cobrancaDocumento.getCobrancaDebitoSituacao().getId() != new Integer("1")){
								
								encerrarOSPeloResumoAcaoCobranca(idOrdemServico, idLocalidade, 
									AtendimentoMotivoEncerramento.SUSPENSA_PAG_PARC_CANC_DO_DEBITO);
							}
							
							if (cobrancaAcao.getNumeroDiasRemuneracaoTerceiro() == null){
								idSituacaoAcao = CobrancaAcaoSituacao.SUSPENSA_POR_PAG_PARC_CANC;
							} else {
								
								if (cobrancaDocumento.getDataSituacaoDebito() != null &&
										cobrancaDocumento.getEmissao() != null){
									
									if (Math.abs(Util.obterQuantidadeDiasEntreDuasDatas(cobrancaDocumento.getEmissao(),
										cobrancaDocumento.getDataSituacaoDebito())) <= cobrancaAcao.getNumeroDiasRemuneracaoTerceiro().intValue()){
										idSituacaoAcao = CobrancaAcaoSituacao.SUSPENSA_POR_PAG_PARC_CANC_ATE;		
									} else {
										idSituacaoAcao = CobrancaAcaoSituacao.SUSPENSA_POR_PAG_PARC_CANC_APOS;
									}
									
								}
								
							}
							
							// caso a situação da fiscalização da ordem de
							// serviço
							// esteja preenchida
							if (idFiscalizacao != null) {
								// atribuir o valor AÇÃO FISCALIZADA
								idSituacaoAcao = CobrancaAcaoSituacao.FISCALIZADA;
							} else {
								// atribuir o valor AÇÃO PENDENTE
								idSituacaoAcao = CobrancaAcaoSituacao.PENDENTE;
							}
							
							// caso a atividade da ação de cobrança
							// correspondente a
							// encerrar esteja comanda e a data presvista para o
							// encerramento seja igual ou menor do que
							// a data corrente
							if (dataComandoAtividadeEncerrar != null
									&& (dataPrevistaAtividadeEncerrar != null && (dataPrevistaAtividadeEncerrar
											.compareTo(new Date()) <= 0))) {

								// Atibuir o valor AÇÃO CANCELADA POR DECURSO DE
								// PRAZO
								idSituacaoAcao = CobrancaAcaoSituacao.CANCELADA_PRAZO;

								encerrarOSPeloResumoAcaoCobranca(idOrdemServico, idLocalidade, 
										AtendimentoMotivoEncerramento.CANCELADO_POR_DERCURSO_DE_PRAZO);
								
							} 
						} else {

							// Caso a ordem de servico tenha sido encerrada com motivo
							// suspensa por pag/canc/parc do debito não alterar mais a OS
							if (idAtendimentoMotivoEncerramento.intValue() != AtendimentoMotivoEncerramento.SUSPENSA_PAG_PARC_CANC_DO_DEBITO){
							
								Collection colecaoAtendimentoMotivoEncerramento = null;
	
								// AMEN_ID igual a idAtendimentoMotivoEncerramento
								// da
								// Ordem de Servico
								colecaoAtendimentoMotivoEncerramento = this.repositorioCobranca
										.pesquisarAtendimentoMotivoEncerramento(idAtendimentoMotivoEncerramento);
	
								// pega os dados do atendimento motivo encerramento
								// pesquisado
								if (colecaoAtendimentoMotivoEncerramento != null
										&& !colecaoAtendimentoMotivoEncerramento
												.isEmpty()) {
	
									Object[] dadosAtendimentoMotivoEncerramento = (Object[]) colecaoAtendimentoMotivoEncerramento
											.iterator().next();
	
									Integer indicadorExecucao = null;
	
									// indicador de Execução
									if (dadosAtendimentoMotivoEncerramento[0] != null) {
										indicadorExecucao = (Integer) dadosAtendimentoMotivoEncerramento[0];
									}
	
									// caso o motivo de encerramento corresponda à
									// execução
									if (indicadorExecucao.intValue() == 1) {
										// atribuir o valor AÇÃO EXECUTADA
										idSituacaoAcao = CobrancaAcaoSituacao.EXECUTADA;
	
									} else {
										// atribuir o valor AÇÃO CANCELADA
										idSituacaoAcao = CobrancaAcaoSituacao.CANCELADA;
									}

									// seta null para o GC liberar
									dadosAtendimentoMotivoEncerramento = null;
									
								}// fim da colecao atendimento motivo
								// encerramento
	
								// seta null para o GC liberar
								colecaoAtendimentoMotivoEncerramento = null;
							}
						}

						// pesquisa os imovel para ser usado para gravar o
						// Resumo
						// Cobrança Ação
						Imovel imovel = this.pesquisarDadosImovel(idImovel);

						// [UC0306] - Obter Principal Categoria do Imovel
						Categoria categoria = getControladorImovel()
								.obterPrincipalCategoriaImovel(idImovel);
						
						// 2.2 acumula na tabela RESUMO_COBRANCA_ACAO os valores
						// da
						// rodem de serviço
						this.acumularResumoCobrancaAcaoOrdemServico(
								colecaoResumoCobrancaAcao,
								anoMesReferenciaCobrancaGrupoCronogramaMes,
								idCobrancaAcaoCronograma,
								dataRealizacaoAtividadeEmitir,
								dataPrevistaAtividadeEncerrar, idCobrancaGrupo,
								imovel, categoria, cobrancaAcao.getId(),
								idSituacaoAcao, null, idFiscalizacao, 1,
								new BigDecimal("0.00"), null, null,
								dataRealizacaoAtividadeEncerrar);

						// seta null para o GC liberar
						dadosOrdemServico = null;
					}// fim do while

					// armazenar os RESUMO_COBRANCA_ACAO
					if (!colecaoResumoCobrancaAcao.isEmpty()) {
						
						getControladorBatch().atualizarColecaoObjetoParaBatch(
								colecaoResumoCobrancaAcao);
					}
					colecaoResumoCobrancaAcao = null;
				} else {
					flagTerminou = true;
				}

				// seta null para GC liberar
				colecaoOrdemServicos = null;

			}

		} catch (ErroRepositorioException ex) {
			sessionContext.setRollbackOnly();
			throw new ControladorException("erro.sistema", ex);
		}
	}

	private void encerrarOSPeloResumoAcaoCobranca(Integer idOrdemServico,
			Integer idLocalidade, Short idMotivoEncerramento) throws ControladorException {
		
		Usuario usuarioLogado = Usuario.USUARIO_BATCH;
		
		UnidadeOrganizacional unidadeOrganizacional = getControladorUnidade()
				.pesquisarUnidadeOrganizacionalLocalidade(
						idLocalidade);
		usuarioLogado
				.setUnidadeOrganizacional(unidadeOrganizacional);
		
		// encerrar a ordem de serviço, com o motivo
		// correspodente a decurso de prazo
		// [UC0457] - Encerrar Ordem de Serviço
		this.getControladorOrdemServico()
				.encerrarOSSemExecucao(
						idOrdemServico,
						new Date(),
						usuarioLogado,
						idMotivoEncerramento.toString(), new Date(),
						null, null, null, null,null,null, null);
		
	}

	/**
	 * 
	 * Este caso de uso permite gerar o resumo das ações de cobrança com a
	 * atividade emitir já realizada e a atividade encerrar ainda não realizada
	 * e realizar a atividade encerrar das ações que estejam comandadas.
	 * 
	 * [UC0478] Gerar Resumo das Ações de Cobrança do Cronograma
	 * 
	 * [SB0006] - Processar Ação com Ordens de Serviço
	 * 
	 * Acumular ou insere na coelção de RESUMO_COBRANCA_ACAO
	 * 
	 * @author Rafael Santos
	 * @date 25/10/2006
	 * 
	 */
	public void acumularResumoCobrancaAcaoOrdemServico(
			Collection<ResumoCobrancaAcao> colecaoResumoCobrancaAcao,
			int anoMesReferenciaCobrancaGrupoCronogramaMes,
			int idCobrancaAcaoCronograma, Date dataRealizacaoAtividadeEmitir,
			Date dataPrevistaAtividadeEncerrar, int idCobrancaGrupo,
			Imovel imovel, Categoria categoria, int idCobrancaAcao,
			Integer idSituacaoAcao, Integer idSituacaoPredominanteDebito,
			int idFiscalizacao, int indicadorCronogramaComando,
			BigDecimal valorDocumento, Integer indicadorAntesApos,
			Integer indicadorAcimaLimite, Date dataRealizacaoAtividadeEncerrar) {

		// verifica se exista a data de realização da atividade de encerrar se
		// existir então recupera ela para ser comparada,senão recupera a data
		// prevista da atividade de encerrar
		Date dataAtividadeEncerrar = null;
		if (dataRealizacaoAtividadeEncerrar != null) {
			dataAtividadeEncerrar = dataRealizacaoAtividadeEncerrar;
		} else {
			dataAtividadeEncerrar = dataPrevistaAtividadeEncerrar;
		}

		if (colecaoResumoCobrancaAcao != null
				&& !colecaoResumoCobrancaAcao.isEmpty()) {
			// se a coleção não estiver vazia, procura por uma ocorrencia do
			// resumo cobrança ação para acumular, se não existir adiciona

			Iterator iteratorColecaoResumoCobrancaAcao = colecaoResumoCobrancaAcao
					.iterator();

			// guarda a informação para saber se existe ou não o resumo cobrança
			// ação
			boolean naoExisteResumoCobrancaAcao = true;
			// variavel para parar o loop da coleção
			boolean achou = true;
			// posição para aculumar o resumo cobrança ação
			// int indicePosicaoParaAcumular = -1;
			// indice corrente do item na coleção
			// int indice = 0;
			// objeto que ira receber o resumo para ser substituido
			// ResumoCobrancaAcao resumoCobrancaAcaoParaSubstituir = null;
			ResumoCobrancaAcao resumoCobrancaAcao = null;

			while (iteratorColecaoResumoCobrancaAcao.hasNext() && achou) {
				resumoCobrancaAcao = (ResumoCobrancaAcao) iteratorColecaoResumoCobrancaAcao
						.next();

				// verifica se existe na coleção
				if (resumoCobrancaAcao.getAnoMesReferencia() == anoMesReferenciaCobrancaGrupoCronogramaMes
						&& resumoCobrancaAcao.getCobrancaAcaoCronograma()
								.getId().intValue() == idCobrancaAcaoCronograma
						&& resumoCobrancaAcao.getRealizacaoEmitir().compareTo(
								dataRealizacaoAtividadeEmitir) == 0
						&& resumoCobrancaAcao.getRealizacaoEncerrar()
								.compareTo(dataAtividadeEncerrar) == 0
						&& resumoCobrancaAcao.getCobrancaGrupo().getId()
								.intValue() == idCobrancaGrupo
						&& resumoCobrancaAcao.getGerenciaRegional().getId()
								.intValue() == imovel.getLocalidade()
								.getGerenciaRegional().getId().intValue()
						&& resumoCobrancaAcao.getLocalidade().getId()
								.intValue() == imovel.getLocalidade().getId()
								.intValue()
						&& resumoCobrancaAcao.getSetorComercial().getId()
								.intValue() == imovel.getSetorComercial()
								.getId().intValue()
						&& resumoCobrancaAcao.getRota().getId().intValue() == imovel
								.getQuadra().getRota().getId().intValue()
						&& resumoCobrancaAcao.getCodigoSetorComercial() == imovel
								.getSetorComercial().getCodigo()
						&& resumoCobrancaAcao.getNumeroQuadra() == imovel
								.getQuadra().getNumeroQuadra()
						&& resumoCobrancaAcao.getImovelPerfil().getId()
								.intValue() == imovel.getImovelPerfil().getId()
								.intValue()
						&& resumoCobrancaAcao.getLigacaoAguaSituacao().getId()
								.intValue() == imovel.getLigacaoAguaSituacao()
								.getId().intValue()
						&& resumoCobrancaAcao.getLigacaoEsgotoSituacao()
								.getId().intValue() == imovel
								.getLigacaoEsgotoSituacao().getId().intValue()
						&& resumoCobrancaAcao.getCategoria().getId().intValue() == categoria
								.getId().intValue()
						&& resumoCobrancaAcao.getCobrancaAcao().getId()
								.intValue() == idCobrancaAcao
						&& resumoCobrancaAcao.getCobrancaAcaoSituacao().getId()
								.intValue() == idSituacaoAcao
						&& resumoCobrancaAcao.getFiscalizacaoSituacao().getId()
								.intValue() == idFiscalizacao
						&& resumoCobrancaAcao.getUnidadeNegocio().getId()
								.intValue() == 
							imovel.getLocalidade().getUnidadeNegocio().getId().intValue()) {
					// pega a esfera do poder do imovel
					EsferaPoder esferaPoder = null;
					if (imovel.getClienteImoveis() != null
							&& !imovel.getClienteImoveis().isEmpty()) {
						Cliente cliente = (Cliente) imovel.getClienteImoveis()
								.iterator().next();
						esferaPoder = cliente.getClienteTipo().getEsferaPoder();
					}
					boolean igualdadeEsferaPoder = false;

					// verifica se a esfera do poder na coleção esta diferente
					// de nula e se a que irei comparar também é nula
					if (resumoCobrancaAcao.getEsferaPoder() != null
							&& esferaPoder != null) {
						if (resumoCobrancaAcao.getEsferaPoder().getId()
								.intValue() == esferaPoder.getId().intValue()) {
							igualdadeEsferaPoder = true;
						}
					} else if (resumoCobrancaAcao.getEsferaPoder() == null
							&& esferaPoder == null) {
						// se as duas esferar do poder forem nulas, elas são
						// iguais como critéios diferença
						igualdadeEsferaPoder = true;
					}

					// verifica se é igual na esfera do poder
					if (igualdadeEsferaPoder) {
						achou = false;// para a loop da coleção
						// indicePosicaoParaAcumular = indice;//guarda o indice
						// da coleção a qual esta o registro para ser
						// substituido
						naoExisteResumoCobrancaAcao = false;// guarda a
						// informação de que
						// existe o resumo
						// cobranca ação na
						// coleção
						// resumoCobrancaAcaoParaSubstituir =
						// resumoCobrancaAcao;
					}
				}
			}

			// se não existi o resumo cobrança ação na coleção adiciona
			if (naoExisteResumoCobrancaAcao) {

				// cria o ResumoCobrancaAcao
				// resumoCobrancaAcao = this.criarResumoCobrancaAcao(
				// anoMesReferenciaCobrancaGrupoCronogramaMes,
				// idCobrancaAcaoCronograma,
				// dataRealizacaoAtividadeEmitir, dataAtividadeEncerrar,
				// idCobrancaGrupo, imovel, categoria, idCobrancaAcao,
				// idSituacaoAcao, idSituacaoPredominanteDebito,
				// idFiscalizacao, indicadorCronogramaComando,
				// indicadorAntesApos, indicadorAcimaLimite,
				// valorDocumento, null);

				// adciona na coleção
				colecaoResumoCobrancaAcao.add(resumoCobrancaAcao);
			} else {
				// existe o resumo cobrança ação na coleção

				// acumula a quantidade de documentos
				resumoCobrancaAcao.setQuantidadeDocumentos(resumoCobrancaAcao
						.getQuantidadeDocumentos() + 1);

			}
		} else {
			// se a coleção estiver vazia, adiciona o item
			// colecaoResumoCobrancaAcao = new ArrayList<ResumoCobrancaAcao>();

			// cria o ResumoCobrancaAcao
			// ResumoCobrancaAcao resumoCobrancaAcao = this
			// .criarResumoCobrancaAcao(
			// anoMesReferenciaCobrancaGrupoCronogramaMes,
			// idCobrancaAcaoCronograma,
			// dataRealizacaoAtividadeEmitir,
			// dataAtividadeEncerrar, idCobrancaGrupo, imovel,
			// categoria, idCobrancaAcao, idSituacaoAcao,
			// idSituacaoPredominanteDebito, idFiscalizacao,
			// indicadorCronogramaComando, indicadorAntesApos,
			// indicadorAcimaLimite, valorDocumento, null);

			// adciona na coleção
			// colecaoResumoCobrancaAcao.add(resumoCobrancaAcao);
		}
		// return colecaoResumoCobrancaAcao;
	}

	/**
	 * retorna coleção de ResolucaoDiretoria ordenada por data Vigência inicial
	 * 
	 * [UC0214] - Efetuar Parcelamento de Débitos
	 * 
	 * @author Vivianne Sousa
	 * @date 08/11/2006,18/05/2012
	 * 
	 * @return
	 * @throws ControladorException
	 */
	public Collection<ResolucaoDiretoria> pesquisarResolucaoDiretoriaMaiorDataVigenciaInicio(
			Imovel imovel,Usuario usuarioLogado) throws ControladorException {

		try {
			Collection colecaoRD = null;
			Collection colecaoRDComLimitacaoGeografica = null;
			
			//pesquisa as RD sem limitação geográfica
			colecaoRD = repositorioCobranca.pesquisarResolucaoDiretoriaMaiorDataVigenciaInicio();
			
			if (imovel != null){
				//pesquisa as RD com limitação geográfica
				colecaoRDComLimitacaoGeografica = repositorioCobranca.
						pesquisarResolucaoDiretoriaComLimitacaoGeografica(imovel,ConstantesSistema.NAO,null); 
				if(colecaoRDComLimitacaoGeografica != null && !colecaoRDComLimitacaoGeografica.isEmpty()){
					colecaoRD.addAll(colecaoRDComLimitacaoGeografica);
				}
			}
			
			Collection colecaoRDAcessoRestrito = pesquisarResolucaoDiretoriaMaiorDataVigenciaInicioRDAcessoRestrito(imovel, usuarioLogado);
			if(colecaoRDAcessoRestrito != null && !colecaoRDAcessoRestrito.isEmpty()){
				colecaoRD.addAll(colecaoRDAcessoRestrito);
			}
			
			return colecaoRD;
			
			// erro no hibernate
		} catch (ErroRepositorioException ex) {
			// seta o rollback
			sessionContext.setRollbackOnly();
			// levanta a exceção para a próxima camada
			throw new ControladorException("erro.sistema", ex);
		}
	}

	/**
	 * retorna o valor da entrada do Parcelamento
	 * 
	 * [UC0214] - Efetuar Parcelamento de Débitos [SB0002] - Obter opções de
	 * Parcelamento (5.4.1.4)
	 * 
	 * @author Vivianne Sousa
	 * @date 08/11/2006
	 * 
	 * @return
	 * @throws ControladorException
	 */
	public BigDecimal obterValorEntradaParcelamento(BigDecimal valorEntradaInformado, 
			BigDecimal valorEntradaMinima, BigDecimal valorEntradaReparcelamento, 
			Usuario usuario, BigDecimal valorEntradaSugerida, BigDecimal valorEntradaUltimaConta,
			Short indicadorVerificarMaiorValor) throws ControladorException {

		BigDecimal valorEntrada = new BigDecimal("0");

		boolean temPermissaoValMinimoEntrada = getControladorPermissaoEspecial()
				.verificarPermissaoEspecial(
						PermissaoEspecial.TESTAR_VAL_MINIMO_ENTRADA, usuario);

		if (valorEntradaInformado == null) {
			
			//RM9243 - Vivianne Sousa - 16/01/2014
			//9.1.	Caso o indicador de verificar maior valor de entrada seja SIM 
			if(indicadorVerificarMaiorValor.equals(ConstantesSistema.SIM)){
				
				//9.1.1.	Valor entrada = maior valor entre valor da entrada mínima, 
				//valor da entrada reparcelamento e valor da entrada ultima conta;
				
				if(valorEntradaReparcelamento.compareTo(valorEntradaMinima) == 1){
					valorEntrada = valorEntradaReparcelamento;
				} else {
					valorEntrada = valorEntradaMinima;
				}
				
				if (valorEntradaUltimaConta != null && 
						valorEntrada.compareTo(valorEntradaUltimaConta)== -1){
					valorEntrada = valorEntradaUltimaConta;	
				}
				
			}else if(valorEntradaUltimaConta != null 
				&& !valorEntradaUltimaConta.setScale(Parcelamento.CASAS_DECIMAIS).equals(new BigDecimal("0.00"))){
				
				valorEntrada = valorEntradaUltimaConta;
				
			}else if (valorEntradaSugerida != null){
				
				valorEntrada = valorEntradaSugerida;
				
			}else if (valorEntradaMinima != null){
				
				valorEntrada = valorEntradaMinima;
				
			}else if(valorEntradaReparcelamento != null){
				
				valorEntrada = valorEntradaReparcelamento;
			}
		} else if (temPermissaoValMinimoEntrada && valorEntradaInformado != null ) {
			
			valorEntrada = valorEntradaInformado;
			
		} else {
			// valor entrada = maior valor entre valorEntradaInformado,
			// valorEntradaMinima , valorEntradaReparcelamento e valorEntradaUltimaConta
			if (valorEntradaInformado != null) {
				
				if(valorEntradaInformado.compareTo(valorEntradaMinima) == 1){
					valorEntrada = valorEntradaInformado;
				} else {
					valorEntrada = valorEntradaMinima;
				}
				
				if (valorEntradaUltimaConta != null && 
						valorEntrada.compareTo(valorEntradaUltimaConta)== -1){
					valorEntrada = valorEntradaUltimaConta;	
				}
			}

			if (valorEntradaReparcelamento.compareTo(valorEntrada) == 1) {
				valorEntrada = valorEntradaReparcelamento;
			}
		}

		return valorEntrada;
	}



	/**
	 * Pesquisa o imóvel para parcelamento com controle de abrangência.
	 * 
	 * <Identificador e nome do caso de uso>
	 * 
	 * @author Pedro Alexandre
	 * @date 27/11/2006
	 * 
	 * @param filtroImovel
	 * @param usuarioLogado
	 * @return
	 * @throws ControladorException
	 */
	public Collection<Imovel> pesquisarImovelEfetuarParcelamento(
			FiltroImovel filtroImovel, Usuario usuarioLogado)
			throws ControladorException {

		Collection<Imovel> retorno = null;
		Imovel imovel = null;

		retorno = this.getControladorUtil().pesquisar(filtroImovel,
				Imovel.class.getName());

		if (retorno != null && !retorno.isEmpty()) {
			imovel = (Imovel) Util.retonarObjetoDeColecao(retorno);

			// ------------ CONTROLE DE ABRANGENCIA ----------------
			Abrangencia abrangencia = new Abrangencia(usuarioLogado, imovel);

			if (!getControladorAcesso().verificarAcessoAbrangencia(abrangencia)) {
				sessionContext.setRollbackOnly();
				throw new ControladorException(
						"atencao.acesso.negado.abrangencia");
			}

			// ------------ FIM CONTROLE DE ABRANGENCIA ------------
		} else {
			return retorno;
		}
		return retorno;
	}

	/**
	 * [UC0214] - Efetuar Parcelamento de Débitos
	 * 
	 * @author Vivianne Sousa
	 * @date 28/11/2006
	 * 
	 * @return
	 * @throws ControladorException
	 */
	public Boolean verificarQtdeReparcelamentoPerfil(Integer idPerfilParc,
			Short numeroReparcelamentoConsecutivos) throws ControladorException {

		Boolean retorno = false;

		ParcelamentoQuantidadeReparcelamento parcelamentoQuantidadeReparcelamento = null;
		try {
			parcelamentoQuantidadeReparcelamento = repositorioCobranca
					.obterQtdeReparcelamentoPerfil(idPerfilParc,
							numeroReparcelamentoConsecutivos);
		} catch (ErroRepositorioException e) {
			e.printStackTrace();
		}

		if (parcelamentoQuantidadeReparcelamento != null) {
			retorno = true;
		}

		return retorno;
	}

	public CobrancaAcaoAtividadeCronograma pesquisarCobrancaAcaoAtividadeCronogramaId(
			Integer idCobrancaAcaoAtividadeCronograma)
			throws ControladorException {

		CobrancaAcaoAtividadeCronograma retorno = null;

		try {
			// chama o metódo de pesquisar do repositório
			retorno = repositorioCobranca
					.pesquisarCobrancaAcaoAtividadeCronogramaId(idCobrancaAcaoAtividadeCronograma);

			// erro no hibernate
		} catch (ErroRepositorioException ex) {

			// levanta a exceção para a próxima camada
			throw new ControladorException("erro.sistema", ex);
		}
		return retorno;

	}

	/**
	 * [UC0478] Gerar Resumo das Ações de Cobrança do Cronograma
	 * 
	 * Item 1 O sistema seleciona os cronogramas de cobrança dos grupos de
	 * cobrança e meses de referência.
	 * 
	 * @author Pedro Alexandre
	 * @date 19/01/2007
	 * 
	 * @return
	 * @throws ControladorException
	 */
	public Collection pesquisarCobrancaGrupoCronogramaMes()
			throws ControladorException {

		Collection colecaoCobrancaGrupoCronogramaMes = null;
		try {
			colecaoCobrancaGrupoCronogramaMes = this.repositorioCobranca
					.pesquisarCobrancaGrupoCronogramaMes();
		} catch (ErroRepositorioException ex) {
			sessionContext.setRollbackOnly();
			throw new ControladorException("erro.sistema", ex);
		}

		return colecaoCobrancaGrupoCronogramaMes;
	}

	/**
	 * 
	 * Divide a coleção em duas partes e cria um map onde vai ter as 2 partes.É
	 * criado outro map que guarda a ordem de como será chamada a o map das 2
	 * partes. Ex.:Map<1,Map<objeto1,objeto2>>, onde 1 é a ordem que será
	 * chamado o segundo map<objeto1,objeto2> e o objeto1 é primeiro objeto da
	 * coleção da primeira parte e o objeto2 é o primeiro objeto da segunda
	 * parte da coleção
	 * 
	 * @author Sávio Luiz
	 * @date 22/01/2007
	 * 
	 * @return
	 * @throws ControladorException
	 */
	protected Map<Integer, Map<Object, Object>> dividirColecao(
			Collection colecao) {

		Map<Integer, Map<Object, Object>> mapOrdenada = new HashMap();
		List listColecao = new ArrayList();
		listColecao.addAll(colecao);
		int quantidadeContas = 0;
		int quantidadeContasColecao = listColecao.size();
		int metadeColecao = 0;
		// caso a coleção tenha um numero impar a metade será ela + 1
		// Ex.:coleção tamanho = 21; metade = 10+1 = 11.
		if (quantidadeContasColecao % 2 == 0) {
			metadeColecao = quantidadeContasColecao / 2;
		} else {
			metadeColecao = (quantidadeContasColecao / 2) + 1;
		}
		while (quantidadeContas < metadeColecao) {
			Map<Object, Object> map = new HashMap();
			Object object1 = (Object) listColecao.get(quantidadeContas);
			Object object2 = null;
			if (metadeColecao + quantidadeContas < quantidadeContasColecao) {
				object2 = (Object) listColecao.get(metadeColecao
						+ quantidadeContas);
			}
			map.put(object1, object2);
			mapOrdenada.put(quantidadeContas, map);
			map = null;

			quantidadeContas++;
		}
		quantidadeContasColecao = 0;

		return mapOrdenada;
	}

	/**
	 * 
	 * Atualiza o sequencial de acordo com a metade da coleção e da situação.
	 * Ex.: se situação for igual a 1 e a metade da coleção for 500 e o
	 * sequencial for 503 então: sequencial será igual a 3.
	 * 
	 * @author Sávio Luiz
	 * @date 22/01/2007
	 * 
	 * @return
	 * @throws ControladorException
	 */
	protected int atualizaSequencial(int sequencial, int situacao,
			int metadeColecao) {
		// recupera o sequencial
		int moduloSequencial = sequencial;
		// verifica se o sequencial é maior que 1000
		if (sequencial > 1000) {
			moduloSequencial = sequencial % 1000;
			// e se o modulo não é igual a 0 ou seja no caso de ser 1000 ou 2000
			if (moduloSequencial == 0) {
				moduloSequencial = sequencial;
			}
		}
		// caso a situação seja igual a 1(primeira parte da coleção) e o modulo
		// do sequencial seja maior que a metade da coleção então atualiza o
		// sequencial menos a metade da coleção
		if (situacao == 1 && moduloSequencial > metadeColecao) {
			sequencial = sequencial - metadeColecao;
		} else {
			// caso a situação seja igual a 2(segunda parte da coleção) e o
			// modulo
			// do sequencial seja menor ou igual que a metade da coleção então
			// atualiza o
			// sequencial mais a metade da coleção
			if (situacao == 2 && moduloSequencial <= metadeColecao) {
				sequencial = sequencial + metadeColecao;
			}
		}
		return sequencial;
	}

	/**
	 * [UC0214] Efetuar Parcelamento Debito [SB0011] Verificar Única Fatura
	 * 
	 * @author Vivianne Sousa
	 * @created 15/02/2007
	 * 
	 * @exception controladorException
	 *                controlador Exception
	 */
	public void verificarUnicaFatura(Collection colecaoContas,
			ParcelamentoPerfil parcelamentoPerfil) throws ControladorException {

		Short indicadorSancoesUnicaConta = parcelamentoPerfil
				.getIndicadorSancoesUnicaConta();

		// 1.
		if (colecaoContas != null && !colecaoContas.isEmpty()
				&& colecaoContas.size() == 1) {
			// Caso o imóvel so tenha uma conta a parcelar
			Iterator iteratorConta = colecaoContas.iterator();
			ContaValoresHelper contaValoresHelper = (ContaValoresHelper) iteratorConta
					.next();
			Conta conta = contaValoresHelper.getConta();
			Integer consumoMinimo = parcelamentoPerfil.getNumeroConsumoMinimo();

			if (consumoMinimo != null
					|| !indicadorSancoesUnicaConta
							.equals(ConstantesSistema.NAO)) {
				// caso o perfil indique que existem restrições para
				// parcelamento de uma única conta
				// PCPF_NNCONSUMOMINIMO da tabela PARCELAMENTO_PERFIL com valor
				// diferente de nulo
				// ou PCPF_ICSANCOESPARCUNICA com valor diferente de NÃO
				// verificar se é possível parcelar

				Integer consumoAgua = conta.getConsumoAgua();

				Collection colecaoConsumoMedioImovel = null;
				try {
					colecaoConsumoMedioImovel = this.repositorioCobranca
							.obterConsumoMedioImovel(conta.getImovel().getId());
				} catch (ErroRepositorioException e) {
					sessionContext.setRollbackOnly();
					throw new ControladorException("erro.sistema", e);
				}
				Integer consumoMedioImovel = null;
				if (colecaoConsumoMedioImovel != null
						&& !colecaoConsumoMedioImovel.isEmpty()) {
					consumoMedioImovel = (Integer) colecaoConsumoMedioImovel
							.iterator().next();
				}

				if (consumoMedioImovel == null
						|| consumoMedioImovel.equals(new Integer(0))) {
					Collection colecaoNumeroConsumoFaturadoMes = null;
					try {
						colecaoNumeroConsumoFaturadoMes = this.repositorioCobranca
								.obterNumeroConsumoFaturadoMes(conta
										.getImovel().getId());
					} catch (ErroRepositorioException e) {
						sessionContext.setRollbackOnly();
						throw new ControladorException("erro.sistema", e);
					}

					if (colecaoNumeroConsumoFaturadoMes != null
							&& !colecaoNumeroConsumoFaturadoMes.isEmpty()) {
						consumoMedioImovel = (Integer) colecaoNumeroConsumoFaturadoMes
								.iterator().next();
					}
				}

				Collection colecaoIdDebitoTipo = null;
				try {
					colecaoIdDebitoTipo = this.repositorioCobranca
							.obterIdDebitoTipoDeFiscalizacaoSituacaoServicoACobrar(conta
									.getId());
				} catch (ErroRepositorioException e) {
					sessionContext.setRollbackOnly();
					throw new ControladorException("erro.sistema", e);
				}

				if (consumoMinimo != null
						&& consumoAgua.compareTo(consumoMinimo) < 0) {
					// 1.1
					// caso consumo de água da única conta seja menor
					// que o valor determinado no perfil de parcelamento

					if (!indicadorSancoesUnicaConta
							.equals(ConstantesSistema.NAO)) {
						// 1.2
						// caso perfil exija q existam sanções regulamentares
						// cobradas na conta
						// PCPF_ICSANCOESPARCUNICA com valor diferente de NÃO

						Conta contaDebitoCobrado = null;
						try {
							contaDebitoCobrado = this.repositorioCobranca
									.verificarContaDebitoCobrado(conta.getId());
						} catch (ErroRepositorioException e) {
							sessionContext.setRollbackOnly();
							throw new ControladorException("erro.sistema", e);
						}

						if (contaDebitoCobrado == null
								|| (colecaoIdDebitoTipo == null || colecaoIdDebitoTipo
										.isEmpty())) {
							// e conta n tenha débito cobrado(CNTA_ID não ocorre
							// na
							// tabela DEBITO_COBRADO)
							// ou não existam sanções regulamentares cobradas
							// (DBTP_ID da tabela DEBITO_COBRADO com CNTA_ID =
							// CNTA_ID
							// da conta a ser parcelada não ocorrendo na tabela
							// FISCALIZACAO_SITUACAO_SERVICO_A_COBRAR)

							if (consumoMedioImovel != null
									&& consumoAgua
											.compareTo(consumoMedioImovel) <= 0) {
								// 1.3
								// consumo de água seja menor ou igual ao
								// consumo médio do
								// imóvel
								throw new ControladorException(
										"atencao.conta.unica.nao.permite.parcelamento");

							}

						}

					}

				}

				Short qtdeEconomiasConta = getControladorFaturamento()
						.obterQuantidadeEconomiasConta(conta.getId(), false);
				Integer consumoAguaPorEconomia = Util
						.dividirArredondarResultado(consumoAgua,
								qtdeEconomiasConta);

				BigDecimal percentualVariacaoConsumoMedio = parcelamentoPerfil
						.getPercentualVariacaoConsumoMedio();
				Integer variacaoEmRelacaoConsumoMedio = null;
				BigDecimal variacaoEmRelacaoConsumoMedioBigDecimal = null;

				if (consumoMedioImovel != null && consumoMedioImovel != 0) {
					variacaoEmRelacaoConsumoMedio = 100 * (consumoAgua - consumoMedioImovel);
					variacaoEmRelacaoConsumoMedioBigDecimal = Util
							.dividirArredondando(new BigDecimal(
									variacaoEmRelacaoConsumoMedio),
									new BigDecimal(consumoMedioImovel));
				}

				if (consumoMinimo != null
						&& consumoAguaPorEconomia.compareTo(consumoMinimo) < 0
						|| (variacaoEmRelacaoConsumoMedioBigDecimal != null
								&& percentualVariacaoConsumoMedio != null && variacaoEmRelacaoConsumoMedioBigDecimal
								.compareTo(percentualVariacaoConsumoMedio) < 0)) {
					// 1.4
					// consumo de água por economia seja menor que o valor
					// determinado no perfil
					// ou a variação em relação ao consumo médio for inferior ao
					// percentual definido no perfil

					if ((colecaoIdDebitoTipo != null && !colecaoIdDebitoTipo
							.isEmpty())) {
						// 1.5 E
						// caso existadébito cobrado na conta referente a
						// sanções
						// regulamentares
						// e o debito não tenha sido cobrado em uma única
						// parcela

						Collection colecaoNumeroPrestacoesDebitoCobrado = null;
						try {
							colecaoNumeroPrestacoesDebitoCobrado = this.repositorioCobranca
									.obterNumeroPrestacaoDebitoCobrado(conta
											.getImovel().getId());
						} catch (ErroRepositorioException e) {
							sessionContext.setRollbackOnly();
							throw new ControladorException("erro.sistema", e);
						}

						if (colecaoNumeroPrestacoesDebitoCobrado != null
								&& !colecaoNumeroPrestacoesDebitoCobrado
										.isEmpty()) {
							Iterator iterator = colecaoNumeroPrestacoesDebitoCobrado
									.iterator();

							while (iterator.hasNext()) {
								Short numeroPrestacoesDebitoCobrado = (Short) iterator
										.next();
								if (numeroPrestacoesDebitoCobrado
										.compareTo(new Short("1")) == 0) {
									throw new ControladorException(
											"atencao.conta.unica.nao.permite.parcelamento");
								}

							}

						}

					}

				}

			}
		}

	}

	/**
	 * Metodo criado para criar os debitos para os parcelamentos q tenham juros
	 * e nao tenha criado o debito dos juros DBTP_ID = 44
	 * 
	 * @author Flávio Cordeiro
	 * @date 23/02/2007
	 * 
	 * @return
	 * @throws ErroRepositorioException
	 */
	public void gerarDebitoCobrarNaoCriados() {

		Collection colecaoParcelamentoImovel;
		try {
			colecaoParcelamentoImovel = repositorioCobranca
					.pesquisarParcelamentosSemDebitos();

			if (!colecaoParcelamentoImovel.isEmpty()) {
				Object[] objeto = null;
				Parcelamento parcelamento = null;
				Imovel imovel = null;
				Localidade localidade = null;
				Quadra quadra = null;
				SetorComercial setorComercial = null;
				Collection colecaoObjetosCategorias = null;
				DebitoTipo debitoTipo = new DebitoTipo();

				FiltroDebitoTipo filtroDebitoTipo = new FiltroDebitoTipo();
				filtroDebitoTipo.adicionarParametro(new ParametroSimples(
						FiltroDebitoTipo.ID,
						DebitoTipo.JUROS_SOBRE_PARCELAMENTO));

				Collection colecaoDebito = getControladorUtil().pesquisar(
						filtroDebitoTipo, DebitoTipo.class.getName());
				debitoTipo = (DebitoTipo) colecaoDebito.iterator().next();

				Iterator iterator = colecaoParcelamentoImovel.iterator();
				while (iterator.hasNext()) {
					objeto = (Object[]) iterator.next();

					parcelamento = new Parcelamento();
					imovel = new Imovel();
					localidade = new Localidade();
					quadra = new Quadra();
					setorComercial = new SetorComercial();

					// idParcelamento
					if (objeto[0] != null) {
						parcelamento.setId((Integer) objeto[0]);
					}
					// numeroPrestacao
					if (objeto[1] != null) {
						parcelamento.setNumeroPrestacoes((Short) objeto[1]);
					}
					// taxaJuros
					if (objeto[2] != null) {
						parcelamento.setTaxaJuros((BigDecimal) objeto[2]);
					}
					// idLocalidade
					if (objeto[3] != null) {
						localidade.setId((Integer) objeto[3]);
					}
					imovel.setLocalidade(localidade);
					// idQuadra
					if (objeto[4] != null) {
						quadra.setId((Integer) objeto[4]);
					}
					// numeroQuadra
					if (objeto[5] != null) {
						quadra.setNumeroQuadra((Integer) objeto[5]);
					}
					imovel.setQuadra(quadra);
					// idSetor
					if (objeto[6] != null) {
						setorComercial.setId((Integer) objeto[6]);
					}
					// codigoSetor
					if (objeto[7] != null) {
						setorComercial.setCodigo((Integer) objeto[7]);
					}
					imovel.setSetorComercial(setorComercial);
					// lote
					if (objeto[8] != null) {
						imovel.setLote((Short) objeto[8]);
					}
					// subLote
					if (objeto[9] != null) {
						imovel.setSubLote((Short) objeto[9]);
					}
					// valorJurosParcelamento
					if (objeto[10] != null) {
						parcelamento
								.setValorJurosParcelamento((BigDecimal) objeto[10]);
					}
					// valorJurosParcelamento
					if (objeto[11] != null) {
						imovel.setId((Integer) objeto[11]);
					}

					colecaoObjetosCategorias = getControladorImovel()
							.obterQuantidadeEconomiasCategoria(imovel);

					inserirDebitoACobrarDebitoTipo(debitoTipo, imovel,
							parcelamento.getNumeroPrestacoes(), parcelamento
									.getValorJurosParcelamento(), parcelamento
									.getTaxaJuros(), parcelamento.getId(),
							colecaoObjetosCategorias, null,
							DebitoCreditoSituacao.NORMAL,null, null, true, null, null);

					repositorioImovel.pesquisarCategoriasImovel(imovel.getId());
				}
			}
		} catch (ErroRepositorioException e) {
			e.printStackTrace();
		} catch (NumberFormatException e) {
			e.printStackTrace();
		} catch (ControladorException e) {
			e.printStackTrace();
		}

	}

	/**
	 * 
	 * Este caso de uso gera os avisos de cobrança dos documentos de cobrança
	 * 
	 * [UC0575] Emitir Aviso de Cobrança
	 * 
	 * 
	 * @author Sávio Luiz
	 * @data 02/04/2007
	 * 
	 * @param
	 * @return void
	 */
	public void emitirAvisoCobranca(
			CobrancaAcaoAtividadeCronograma cobrancaAcaoAtividadeCronograma,
			CobrancaAcaoAtividadeComando cobrancaAcaoAtividadeComando,
			Date dataAtualPesquisa, CobrancaAcao acaoCobranca,
			CobrancaGrupo grupoCobranca, CobrancaCriterio cobrancaCriterio)
			throws ControladorException {

		boolean flagFimPesquisa = false;
		final int quantidadeCobrancaDocumento = 1000;
		int quantidadeCobrancaDocumentoInicio = 0;

		/*
		 * SistemaParametro sistemaParametro = getControladorUtil()
		 * .pesquisarParametrosDoSistema();
		 */

		StringBuilder cobrancaDocumentoTxt = new StringBuilder();
		int sequencialImpressao = 0;

		Collection colecaoCobrancaDocumento = null;

		Integer idCronogramaAtividadeAcaoCobranca = null;
		Integer idComandoAtividadeAcaoCobranca = null;
		Integer idAcaoCobranca = null;
		if (cobrancaAcaoAtividadeCronograma != null
				&& cobrancaAcaoAtividadeCronograma.getId() != null) {
			idCronogramaAtividadeAcaoCobranca = cobrancaAcaoAtividadeCronograma
					.getId();
		}
		if (cobrancaAcaoAtividadeComando != null
				&& cobrancaAcaoAtividadeComando.getId() != null) {
			idComandoAtividadeAcaoCobranca = cobrancaAcaoAtividadeComando
					.getId();
		}
		if (acaoCobranca != null && acaoCobranca.getId() != null) {
			idAcaoCobranca = acaoCobranca.getId();
		}

		while (!flagFimPesquisa) {

			try {

				System.out.println("***************************************");
				System.out.println("ENTROU NO AVISO DE CORTE");
				System.out.println("***************************************");
				colecaoCobrancaDocumento = repositorioCobranca
						.pesquisarCobrancaDocumentoParaEmitir(
								idCronogramaAtividadeAcaoCobranca,
								idComandoAtividadeAcaoCobranca,
								dataAtualPesquisa, idAcaoCobranca,
								quantidadeCobrancaDocumentoInicio);
				System.out.println("***************************************");
				System.out.println("QTD DE COBRANCA DOCUMENTO:"
						+ colecaoCobrancaDocumento.size());
				System.out.println("***************************************");
			} catch (ErroRepositorioException ex) {
				ex.printStackTrace();
				throw new ControladorException("erro.sistema", ex);
			}

			if (colecaoCobrancaDocumento != null
					&& !colecaoCobrancaDocumento.isEmpty()) {

				System.out.println("***************************************");
				System.out.println("QUANTIDADE COBRANÇA:"
						+ colecaoCobrancaDocumento.size());
				System.out.println("***************************************");

				if (colecaoCobrancaDocumento.size() < quantidadeCobrancaDocumento) {
					flagFimPesquisa = true;
				} else {
					quantidadeCobrancaDocumentoInicio = quantidadeCobrancaDocumentoInicio + 1000;
				}
				// ***********************************************************************
				// ****PARTE COMENTADA DA DIVISÃO PARA IMPRESSÃO DE DOCUMENTO
				// COBRANÇA****
				// ***********************************************************************

				// int metadeColecao = 0;
				// if (colecaoCobrancaDocumento.size() % 2 == 0) {
				// metadeColecao = colecaoCobrancaDocumento.size() / 2;
				// } else {
				// metadeColecao = (colecaoCobrancaDocumento.size() / 2) + 1;
				// }

				// Map<Integer, Map<Object, Object>>
				// mapCobrancaDocumentoOrdenada =
				// dividirColecao(colecaoCobrancaDocumento);

				/*
				 * if (mapCobrancaDocumentoOrdenada != null) { int countOrdem =
				 * 0;
				 * 
				 * while (countOrdem < mapCobrancaDocumentoOrdenada.size()) {
				 * Map<Object, Object> mapCobrancaoDocumentoDivididas =
				 * mapCobrancaDocumentoOrdenada .get(countOrdem);
				 */

				/*
				 * Iterator iteratorCobrancaDocumento =
				 * mapCobrancaoDocumentoDivididas .keySet().iterator();
				 */
				Iterator iteratorCobrancaDocumento = colecaoCobrancaDocumento
						.iterator();
				while (iteratorCobrancaDocumento.hasNext()) {

					CobrancaDocumento cobrancaDocumento = null;
					/*
					 * if(quantidadeContas == 48){ System.out.println(""); }
					 */

					// int situacao = 0;
					cobrancaDocumento = (CobrancaDocumento) iteratorCobrancaDocumento
							.next();

					String nomeClienteUsuario = null;
					Collection colecaoCobrancaDocumentoItemConta = null;
					Integer idClienteResponsavel = null;
					/*
					 * Estes objetos auxiliarão na formatação da inscrição que
					 * será composta por informações do documento de cobrança e
					 * do imóvel a ele associado
					 */

					/*
					 * Objeto que será utilizado para armazenar as informações
					 * do documento de cobrança de acordo com o layout definido
					 * no caso de uso
					 */


					if (cobrancaDocumento != null) {
						sequencialImpressao++;

						try {

							nomeClienteUsuario = this.repositorioClienteImovel
									.pesquisarNomeClientePorImovel(cobrancaDocumento
											.getImovel().getId());
							idClienteResponsavel = this.repositorioClienteImovel
									.retornaIdClienteResponsavel(cobrancaDocumento
											.getImovel().getId());

							colecaoCobrancaDocumentoItemConta = this.repositorioCobranca
									.selecionarCobrancaDocumentoItemReferenteConta(cobrancaDocumento);

						} catch (ErroRepositorioException ex) {
							ex.printStackTrace();
							throw new ControladorException("erro.sistema", ex);
						}
						
						if (colecaoCobrancaDocumentoItemConta != null
								&& !colecaoCobrancaDocumentoItemConta.isEmpty()) {

							String idGrupo = null;
							// id do grupo
							if (idCronogramaAtividadeAcaoCobranca != null) {
								idGrupo = "" + grupoCobranca.getId();
							} else {
								idGrupo = ""
									+ cobrancaDocumento.getImovel()
									.getQuadra().getRota()
									.getCobrancaGrupo()
									.getId();
							}
//							 Grupo-XX Entrega-XXXXXXXXXX
							String textoGrupoEntrega = "GRUPO-" + idGrupo + " ENTREGA-";
							if (cobrancaDocumento.getEmpresa() != null) {
								textoGrupoEntrega += cobrancaDocumento.getEmpresa().getDescricao();
							}
							cobrancaDocumentoTxt.append(Util.completaString(textoGrupoEntrega, 27));
							
							// Inscrição
							String idLocalidade = Util
									.adicionarZerosEsquedaNumero(3, ""
											+ cobrancaDocumento.getLocalidade()
													.getId());
							String codigoSetorComercial = Util
									.adicionarZerosEsquedaNumero(3, ""
											+ cobrancaDocumento
													.getCodigoSetorComercial());
							String numeroQuadra = Util
									.adicionarZerosEsquedaNumero(3, ""
											+ cobrancaDocumento
													.getNumeroQuadra());
							String lote = Util.adicionarZerosEsquedaNumero(4,
									""
											+ cobrancaDocumento.getImovel()
													.getLote());
							String subLote = Util.adicionarZerosEsquedaNumero(
									3, ""
											+ cobrancaDocumento.getImovel()
													.getSubLote());

							cobrancaDocumentoTxt
									.append(Util
											.completaString(idLocalidade + "."
													+ codigoSetorComercial + "."
													+ numeroQuadra + "." + lote + "."
													+ subLote, 20));

							// Nome da Localidade
							cobrancaDocumentoTxt.append(Util
									.completaString(""
											+ cobrancaDocumento.getImovel()
													.getLocalidade()
													.getDescricao(), 25));

							// nome cliente
							cobrancaDocumentoTxt.append(Util.completaString(
									nomeClienteUsuario, 50));

							String nomeBairro = "";
							String nomeMunicipio = "";
							String siglaUnidadeFederecao = "";
							String cepFormatado = "";

							String[] parmsEnderecoImovel = getControladorEndereco()
									.pesquisarEnderecoFormatadoDividido(
											cobrancaDocumento.getImovel()
													.getId());
							if (parmsEnderecoImovel != null) {
								// nome do bairro
								nomeBairro = "" + parmsEnderecoImovel[3];
								// nome do municipio
								nomeMunicipio = "" + parmsEnderecoImovel[1];
								// sigla da unidade federação
								siglaUnidadeFederecao = parmsEnderecoImovel[2];
								cepFormatado = parmsEnderecoImovel[4];
							}

							// endereço do cliente com opção de recebimento via
							// correio
							if (idClienteResponsavel != null) {
								String[] parmsEndereco = getControladorEndereco()
										.pesquisarEnderecoClienteAbreviadoDividido(
												idClienteResponsavel);
								// endereço sem municipio e unidade federação
								cobrancaDocumentoTxt.append(Util
										.completaString(parmsEndereco[0], 50));
								// nome do bairro
								nomeBairro = "" + parmsEndereco[3];
								// nome do municipio
								nomeMunicipio = "" + parmsEndereco[1];
								// sigla da unidade federação
								siglaUnidadeFederecao = parmsEndereco[2];
								cepFormatado = parmsEndereco[4];

							} else {
								if (parmsEnderecoImovel != null){
									// endereço sem municipio e unidade federação
									cobrancaDocumentoTxt.append(Util
											.completaString(parmsEnderecoImovel[0],
													50));
								} else {
									cobrancaDocumentoTxt.append(Util
											.completaString("", 50));									
								}
							}

							// nome Bairro
							cobrancaDocumentoTxt.append(Util.completaString(
									nomeBairro, 25));
							// nome municipio
							cobrancaDocumentoTxt.append(Util.completaString(
									nomeMunicipio, 24));
							// sigla unidade federacao
							cobrancaDocumentoTxt.append(Util.completaString(
									siglaUnidadeFederecao, 2));
							// CEP
							// variavel cepFormatado foi preenchido de acordo com a existencia de
							// cliente responsavel
							String cepStr = Util.completaString(cepFormatado, 8);
							String cepLabeled = "CEP. " + cepStr.substring(0,5) + "-" + cepStr.substring(5,8); 
							cobrancaDocumentoTxt.append(Util.completaString(cepLabeled, 14));
							
							// Sequencial de impressao [13]
							String sequencialImpressaoStr = Util.adicionarZerosEsquedaNumero(6,sequencialImpressao + "");
							cobrancaDocumentoTxt.append("SEQ.  " + sequencialImpressaoStr.substring(0,3) + "." + 
									sequencialImpressaoStr.substring(3,6));
							
							// Matrícula do imóvel
//							String matriculaStr = Util.
//									retornaMatriculaImovelFormatada(cobrancaDocumento.getImovel()
//										.getId());
							cobrancaDocumentoTxt.append(Util.adicionarZerosEsquedaNumero(9, "" + cobrancaDocumento.getImovel().getId()));

							// Endereço do imóvel sem municipio e unidade federação
							cobrancaDocumentoTxt.append(Util
									.completaString(parmsEnderecoImovel[0],
											50));

							//	sequencial do documento de cobranca
							String sequencialStr = Util
							.adicionarZerosEsquedaNumero(
									9, "" + cobrancaDocumento
									.getNumeroSequenciaDocumento()); 
							cobrancaDocumentoTxt
									.append(sequencialStr.substring(0,5) + "." + sequencialStr.substring(5,9));

							/*
							 * Data de vencimento
							 * 
							 * Alterado por Raphael Rossiter em 13/10/2011 - RM 6167
							 * 
							 * Obter a quantidade de dias do vencimento a partir da ação de cobrança. Caso a quantidade de dias não tenha sido 
							 * informada o sistema irá colocar 50 dias.
							 */
							Integer numeroDiasVencimento = 50;
							
							if (acaoCobranca.getNumeroDiasVencimento() != null){
								
								numeroDiasVencimento = acaoCobranca.getNumeroDiasVencimento();
							}
							
							String dataVencimento = "";
							dataVencimento = Util.formatarData(Util.adicionarNumeroDiasDeUmaData(new Date(), numeroDiasVencimento));
							
							cobrancaDocumentoTxt.append(Util.completaString(dataVencimento, 10));

							// idgrupo
							cobrancaDocumentoTxt.append(Util
									.completaString(idGrupo, 2));
							cobrancaDocumentoTxt.append("-");
							// código da firma
							if (cobrancaDocumento.getEmpresa() != null) {
								cobrancaDocumentoTxt.append(Util
										.adicionarZerosEsquedaNumero(2,
												cobrancaDocumento.getEmpresa()
														.getId().toString()));
							}
									
							String representacaoNumericaCodBarra = "";

							// Obtém a representação numérica do
							// códigode
							// barra
							representacaoNumericaCodBarra = this
									.getControladorArrecadacao()
									.obterRepresentacaoNumericaCodigoBarra(
											5,
											cobrancaDocumento
													.getValorDocumento(),
											cobrancaDocumento.getLocalidade()
													.getId(),
											cobrancaDocumento.getImovel()
													.getId(),
											null,
											null,
											null,
											null,
											String
													.valueOf(cobrancaDocumento
															.getNumeroSequenciaDocumento()),
											cobrancaDocumento
													.getDocumentoTipo().getId(),
											null, null, null);

							// Formata a representação númerica do
							// código de
							// barras
							String representacaoNumericaCodBarraFormatada = representacaoNumericaCodBarra
									.substring(0, 11)
									+ " "
									+ representacaoNumericaCodBarra.substring(
											11, 12)
									+ " "
									+ representacaoNumericaCodBarra.substring(
											12, 23)
									+ " "
									+ representacaoNumericaCodBarra.substring(
											23, 24)
									+ " "
									+ representacaoNumericaCodBarra.substring(
											24, 35)
									+ " "
									+ representacaoNumericaCodBarra.substring(
											35, 36)
									+ " "
									+ representacaoNumericaCodBarra.substring(
											36, 47)
									+ " "
									+ representacaoNumericaCodBarra.substring(
											47, 48);

							cobrancaDocumentoTxt
									.append(representacaoNumericaCodBarraFormatada);

							// Cria o objeto para gerar o código de
							// barras
							// no
							// padrão
							// intercalado 2 de 5
							Interleaved2of5 codigoBarraIntercalado2de5 = new Interleaved2of5();
 
							// Recupera a representação númerica do
							// código
							// de
							// barras
							// sem
							// os dígitos verificadores 
							String representacaoCodigoBarrasSemDigitoVerificador = representacaoNumericaCodBarra
									.substring(0, 11)
									+ representacaoNumericaCodBarra.substring(
											12, 23)
									+ representacaoNumericaCodBarra.substring(
											24, 35)
									+ representacaoNumericaCodBarra.substring(
											36, 47);

							cobrancaDocumentoTxt
									.append(codigoBarraIntercalado2de5
											.encodeValue(representacaoCodigoBarrasSemDigitoVerificador));
							
							int quantidadesContas = 0;
							// em caso de ser carta de tarifa social não
							// formatar o txt
							if (idAcaoCobranca != null
									&& (!idAcaoCobranca
											.equals(CobrancaAcao.CARTA_TARIFA_SOCIAL_LIGADO) && !idAcaoCobranca
											.equals(CobrancaAcao.CARTA_TARIFA_SOCIAL_CORTADO))) {
								quantidadesContas = 24;
							} else {
								quantidadesContas = 14;
							}

							// retorna o indicador de estouro e formata o
							// cobrançaDocumentoTxt com os dados
							formatarCobrancaDocumentoItemParaConta(
									cobrancaDocumentoTxt,
									colecaoCobrancaDocumentoItemConta,
									quantidadesContas, idAcaoCobranca);
							
							if (idAcaoCobranca != null && idAcaoCobranca.equals(CobrancaAcao.CARTA_COBRANCA_SUPRIMIDO)) {
								BigDecimal valorDesconto = cobrancaDocumento.getValorDesconto();
								BigDecimal valorDocumento = cobrancaDocumento.getValorDocumento();
								BigDecimal valorSemDesconto = valorDocumento.add(valorDesconto);
								
								String valorDocumentoStr = Util.formataBigDecimal(valorDocumento, 2, true);
								cobrancaDocumentoTxt.append(Util.completaStringComEspacoAEsquerda(valorDocumentoStr, 14));
								
								String valorSemDescontoStr = Util.formataBigDecimal(valorSemDesconto, 2, true);
								cobrancaDocumentoTxt.append(Util.completaStringComEspacoAEsquerda(valorSemDescontoStr, 14));
								
								String valorDescontoStr = Util.formataBigDecimal(valorDesconto, 2, true);
								cobrancaDocumentoTxt.append(Util.completaStringComEspacoAEsquerda(valorDescontoStr, 14));
							}
							
							cobrancaDocumentoTxt.append(System.getProperty("line.separator"));

						}

						colecaoCobrancaDocumentoItemConta = null;
					}

					// }// fim do laço que verifica
					// as 2
					// contas

				}// fim laço while do iterator do
				// objeto
				// helper
				// countOrdem++;
				// mapCobrancaoDocumentoDivididas = null;
				// // }
			} else {
				flagFimPesquisa = true;
			}
			// } else {
			// flagFimPesquisa = true;
			// }
			// colecaoCobrancaDocumento = null;
		}

		Date dataAtual = new Date();

		String nomeZip = null;



		// em caso de ser carta de tarifa social não
		// formatar o txt
		if (idAcaoCobranca != null
				&& (!idAcaoCobranca
						.equals(CobrancaAcao.CARTA_TARIFA_SOCIAL_LIGADO) && !idAcaoCobranca
						.equals(CobrancaAcao.CARTA_TARIFA_SOCIAL_CORTADO)) && !idAcaoCobranca
						.equals(CobrancaAcao.CARTA_TARIFA_SOCIAL_LIGADO_A_REVELIA)) {
			if (idAcaoCobranca.equals(CobrancaAcao.CARTA_COBRANCA_CORTADO)) {
				if (idCronogramaAtividadeAcaoCobranca != null) {
					nomeZip = "EMITIR_CARTA_CORTADO_GRUPO_"
							+ grupoCobranca.getId() + "_"
							+ Util.formatarData(dataAtual) + Util.formatarHoraSemDataSemDoisPontos(dataAtual);
				} else {
					String descricaoAbrevDocumentoTipo = "";
					if (acaoCobranca != null
							&& acaoCobranca.getDocumentoTipo() != null) {
						descricaoAbrevDocumentoTipo = acaoCobranca
								.getDocumentoTipo().getDescricaoAbreviado();
					}
					String tituloComandoEventual = cobrancaAcaoAtividadeComando
							.getDescricaoTitulo();

					nomeZip = descricaoAbrevDocumentoTipo + " "
							+ tituloComandoEventual + " "
							+ Util.formatarData(dataAtual) + Util.formatarHoraSemDataSemDoisPontos(dataAtual);
					nomeZip = nomeZip.replace("/", "_");
					nomeZip = nomeZip.replace(" ", "_");
				}
			}
			if (idAcaoCobranca.equals(CobrancaAcao.CARTA_COBRANCA_SUPRIMIDO)) {
				if (idCronogramaAtividadeAcaoCobranca != null) {
					nomeZip = "EMITIR_CARTA_SUPRIMIDO_GRUPO_"
							+ grupoCobranca.getId() + "_"
							+ Util.formatarData(dataAtual) + Util.formatarHoraSemDataSemDoisPontos(dataAtual);
				} else {
					String descricaoAbrevDocumentoTipo = "";
					if (acaoCobranca != null
							&& acaoCobranca.getDocumentoTipo() != null) {
						descricaoAbrevDocumentoTipo = acaoCobranca
								.getDocumentoTipo().getDescricaoAbreviado();
					}
					String tituloComandoEventual = cobrancaAcaoAtividadeComando
							.getDescricaoTitulo();

					nomeZip = descricaoAbrevDocumentoTipo + " "
							+ tituloComandoEventual + " "
							+ Util.formatarData(dataAtual) + Util.formatarHoraSemDataSemDoisPontos(dataAtual);
					nomeZip = nomeZip.replace("/", "_");
					nomeZip = nomeZip.replace(" ", "_");
				}
			}
			if (idAcaoCobranca.equals(CobrancaAcao.CARTA_COBRANCA_LIGADO)) {
				if (idCronogramaAtividadeAcaoCobranca != null) {
					nomeZip = "EMITIR_CARTA_LIGADO_GRUPO_"
							+ grupoCobranca.getId() + "_"
							+ Util.formatarData(dataAtual) + Util.formatarHoraSemDataSemDoisPontos(dataAtual);
				} else {
					String descricaoAbrevDocumentoTipo = "";
					if (acaoCobranca != null
							&& acaoCobranca.getDocumentoTipo() != null) {
						descricaoAbrevDocumentoTipo = acaoCobranca
								.getDocumentoTipo().getDescricaoAbreviado();
					}
					String tituloComandoEventual = cobrancaAcaoAtividadeComando
							.getDescricaoTitulo();

					nomeZip = descricaoAbrevDocumentoTipo + " "
							+ tituloComandoEventual + " "
							+ Util.formatarData(dataAtual) + Util.formatarHoraSemDataSemDoisPontos(dataAtual);
					nomeZip = nomeZip.replace("/", "_");
					nomeZip = nomeZip.replace(" ", "_");
				}
			}
			if (idAcaoCobranca.equals(CobrancaAcao.CARTA_COBRANCA_LIGADO_A_REVELIA)) {
				if (idCronogramaAtividadeAcaoCobranca != null) {
					nomeZip = "EMITIR_CARTA_LIGADO_A_REVELIA_GRUPO_"
							+ grupoCobranca.getId() + "_"
							+ Util.formatarData(dataAtual) + Util.formatarHoraSemDataSemDoisPontos(dataAtual);
				} else {
					String descricaoAbrevDocumentoTipo = "";
					if (acaoCobranca != null
							&& acaoCobranca.getDocumentoTipo() != null) {
						descricaoAbrevDocumentoTipo = acaoCobranca
								.getDocumentoTipo().getDescricaoAbreviado();
					}
					String tituloComandoEventual = cobrancaAcaoAtividadeComando
							.getDescricaoTitulo();

					nomeZip = descricaoAbrevDocumentoTipo + " "
							+ tituloComandoEventual + " "
							+ Util.formatarData(dataAtual) + Util.formatarHoraSemDataSemDoisPontos(dataAtual);
					nomeZip = nomeZip.replace("/", "_");
					nomeZip = nomeZip.replace(" ", "_");
				}
			}

		} else {
			if (idAcaoCobranca.equals(CobrancaAcao.CARTA_TARIFA_SOCIAL_CORTADO)) {
				if (idCronogramaAtividadeAcaoCobranca != null) {
					nomeZip = "EMITIR_CARTA_TARIFA_SOCIAL_CORTADO_GRUPO_"
							+ grupoCobranca.getId() + "_"
							+ Util.formatarData(dataAtual);

				} else {
					String descricaoAbrevDocumentoTipo = "";
					if (acaoCobranca != null
							&& acaoCobranca.getDocumentoTipo() != null) {
						descricaoAbrevDocumentoTipo = acaoCobranca
								.getDocumentoTipo().getDescricaoAbreviado();
					}
					String tituloComandoEventual = cobrancaAcaoAtividadeComando
							.getDescricaoTitulo();

					nomeZip = descricaoAbrevDocumentoTipo + " "
							+ tituloComandoEventual + " "
							+ Util.formatarData(dataAtual) + Util.formatarHoraSemDataSemDoisPontos(dataAtual);
					nomeZip = nomeZip.replace("/", "_");
					nomeZip = nomeZip.replace(" ", "_");
				}

			}
			if (idAcaoCobranca.equals(CobrancaAcao.CARTA_TARIFA_SOCIAL_LIGADO)) {
				if (idCronogramaAtividadeAcaoCobranca != null) {
					nomeZip = "EMITIR_CARTA_TARIFA_SOCIAL_LIGADO_GRUPO_"
							+ grupoCobranca.getId() + "_"
							+ Util.formatarData(dataAtual);

				} else {
					String descricaoAbrevDocumentoTipo = "";
					if (acaoCobranca != null
							&& acaoCobranca.getDocumentoTipo() != null) {
						descricaoAbrevDocumentoTipo = acaoCobranca
								.getDocumentoTipo().getDescricaoAbreviado();
					}
					String tituloComandoEventual = cobrancaAcaoAtividadeComando
							.getDescricaoTitulo();

					nomeZip = descricaoAbrevDocumentoTipo + " "
							+ tituloComandoEventual + " "
							+ Util.formatarData(dataAtual) + Util.formatarHoraSemDataSemDoisPontos(dataAtual);
					nomeZip = nomeZip.replace("/", "_");
					nomeZip = nomeZip.replace(" ", "_");
				}

			}
			if (idAcaoCobranca.equals(CobrancaAcao.CARTA_TARIFA_SOCIAL_LIGADO_A_REVELIA)) {
				if (idCronogramaAtividadeAcaoCobranca != null) {
					nomeZip = "EMITIR_CARTA_TARIFA_SOCIAL_LIGADO_A_REVELIA_GRUPO_"
							+ grupoCobranca.getId() + "_"
							+ Util.formatarData(dataAtual);

				} else {
					String descricaoAbrevDocumentoTipo = "";
					if (acaoCobranca != null
							&& acaoCobranca.getDocumentoTipo() != null) {
						descricaoAbrevDocumentoTipo = acaoCobranca
								.getDocumentoTipo().getDescricaoAbreviado();
					}
					String tituloComandoEventual = cobrancaAcaoAtividadeComando
							.getDescricaoTitulo();

					nomeZip = descricaoAbrevDocumentoTipo + " "
							+ tituloComandoEventual + " "
							+ Util.formatarData(dataAtual) + Util.formatarHoraSemDataSemDoisPontos(dataAtual);
					nomeZip = nomeZip.replace("/", "_");
					nomeZip = nomeZip.replace(" ", "_");
				}

			}

		}
		nomeZip = nomeZip.replace("/", "_");

		// pegar o arquivo, zipar pasta e arquivo e escrever no stream
		try {

			System.out.println("***************************************");
			System.out.println("INICO DA CRIACAO DO ARQUIVO");
			System.out.println("***************************************");

			if (cobrancaDocumentoTxt != null
					&& cobrancaDocumentoTxt.length() != 0) {

				// criar o arquivo zip
				File compactado = new File(nomeZip + ".zip"); // nomeZip
				ZipOutputStream zos = new ZipOutputStream(new FileOutputStream(
						compactado));

				File leitura = new File(nomeZip + ".txt");
				BufferedWriter out = new BufferedWriter(new OutputStreamWriter(
						new FileOutputStream(leitura.getAbsolutePath())));
				out.write(cobrancaDocumentoTxt.toString());
				out.close();
				ZipUtil.adicionarArquivo(zos, leitura);

				// close the stream
				zos.close();
				leitura.delete();
			}
			System.out.println("***************************************");
			System.out.println("FIM DA CRIACAO DO ARQUIVO");
			System.out.println("***************************************");

		} catch (IOException e) {
			e.printStackTrace();
			throw new ControladorException("erro.sistema", e);
		} catch (Exception e) {
			e.printStackTrace();

			throw new ControladorException("erro.sistema", e);
		}

	}

	/**
	 * Formata a string builder de cobrança documento de acordo com a quantidade
	 * de itens.Caso a quantidade de itens seja maior que 24 então as contas com
	 * o ano mes referencia mais antigas serão somadas (os valores do item e dos
	 * acrescimos) e formatadas na stringbuilder.
	 * 
	 * [UC0575] Emitir Aviso de Cobrança
	 * 
	 * @author Sávio Luiz
	 * @date 09/04/2007
	 * 
	 * @return
	 * @throws ControladorException
	 */
	protected int formatarCobrancaDocumentoItemParaConta(
			StringBuilder cobrancaDocumentoTxt,
			Collection colecaoCobrancaDocumentoItemConta, int quantidadeContas,
			Integer idAcaoCobranca) throws ControladorException {
		int indicadorEstouro = 0;
		int complementoEspecosBranco = 0;
		BigDecimal somaValorItem = new BigDecimal(0);
		BigDecimal somaValorAcrescimos = new BigDecimal(0);
		BigDecimal somaValorTotal = new BigDecimal(0);
		// em caso de ser carta de tarifa social não
		// formatar o txt
		if (idAcaoCobranca != null
				&& (!idAcaoCobranca
						.equals(CobrancaAcao.CARTA_TARIFA_SOCIAL_LIGADO) && !idAcaoCobranca
						.equals(CobrancaAcao.CARTA_TARIFA_SOCIAL_CORTADO))) {
			complementoEspecosBranco = quantidadeContas * 63;
		} else {
			complementoEspecosBranco = quantidadeContas * 35;
		}

		int countImpressao = colecaoCobrancaDocumentoItemConta.size()
				- (quantidadeContas - 1);

		if (colecaoCobrancaDocumentoItemConta.size() > quantidadeContas) {
			indicadorEstouro = 1;

			CalcularValorDataVencimentoAnteriorHelper calcularValorDataVencimentoAnteriorHelper = this
					.calcularValorDataVencimentoAnterior(
							colecaoCobrancaDocumentoItemConta, quantidadeContas);
			// Ano mes de referencia da conta anterior
			cobrancaDocumentoTxt.append(Util.completaStringComEspacoAEsquerda("ATÉ    ", 11));
			complementoEspecosBranco = complementoEspecosBranco - 11;
			// data de vencimento anterior
			cobrancaDocumentoTxt
					.append(Util
							.completaString(
									Util
											.formatarData(calcularValorDataVencimentoAnteriorHelper
													.getDataVencimentoAnterior()),
									10));
			complementoEspecosBranco = complementoEspecosBranco - 10;

			String valorItemAnterior = Util.formataBigDecimal(
					calcularValorDataVencimentoAnteriorHelper
							.getValorAnterior(), 2, true);
//			valorItemAnterior = valorItemAnterior.replace(".", ",");
			// Valor do item anterior
			cobrancaDocumentoTxt.append(Util.completaStringComEspacoAEsquerda(valorItemAnterior,14));
			complementoEspecosBranco = complementoEspecosBranco - 14;
			somaValorItem = somaValorItem.add(calcularValorDataVencimentoAnteriorHelper
							.getValorAnterior());
			// em caso de ser carta de tarifa social não
			// formatar o txt
			if (idAcaoCobranca != null
					&& (!idAcaoCobranca
							.equals(CobrancaAcao.CARTA_TARIFA_SOCIAL_LIGADO) && !idAcaoCobranca
							.equals(CobrancaAcao.CARTA_TARIFA_SOCIAL_CORTADO))) {
				String valorAcrescimosAnterior = Util.formataBigDecimal(
						calcularValorDataVencimentoAnteriorHelper
								.getValorAcrescimosAnterior(), 2, true);
//				valorAcrescimosAnterior = valorAcrescimosAnterior.replace(".", "");
				// Valor dos encargos anterior
				cobrancaDocumentoTxt.append(Util.completaStringComEspacoAEsquerda(valorAcrescimosAnterior, 14));
				complementoEspecosBranco = complementoEspecosBranco - 14;
				
				somaValorAcrescimos = somaValorAcrescimos.add(calcularValorDataVencimentoAnteriorHelper
								.getValorAcrescimosAnterior());
				
				BigDecimal valorTotal = calcularValorDataVencimentoAnteriorHelper
				.getValorAcrescimosAnterior().add(calcularValorDataVencimentoAnteriorHelper
						.getValorAnterior());
				String valorTotalConta = Util.formataBigDecimal(valorTotal, 2, true);
//				valorAcrescimosAnterior = valorAcrescimosAnterior.replace(".", "");
				// Valor dos encargos anterior
				cobrancaDocumentoTxt.append(Util.completaStringComEspacoAEsquerda(valorTotalConta, 14));
				complementoEspecosBranco = complementoEspecosBranco - 14;
				
				somaValorTotal = somaValorTotal.add(valorTotal);
			}

		}

		if (countImpressao <= 1) {
			Iterator iteratorColecaoCobrancaDocumentoItem = colecaoCobrancaDocumentoItemConta
					.iterator();

			CobrancaDocumentoItem cobrancaDocumentoItem = null;

			while (iteratorColecaoCobrancaDocumentoItem.hasNext()) {
				cobrancaDocumentoItem = (CobrancaDocumentoItem) iteratorColecaoCobrancaDocumentoItem
						.next();

				// Ano mes de referencia da conta
				cobrancaDocumentoTxt.append(Util.completaStringComEspacoAEsquerda(Util.formatarAnoMesParaMesAno(
						cobrancaDocumentoItem.getContaGeral().getConta()
								.getReferencia()), 11));
				complementoEspecosBranco = complementoEspecosBranco - 11;
				// data de vencimento
				cobrancaDocumentoTxt.append(Util.completaString(Util
						.formatarData(cobrancaDocumentoItem
								.getContaGeral().getConta()
								.getDataVencimentoConta()), 10));
				complementoEspecosBranco = complementoEspecosBranco - 10;

				String valorItem = Util.formataBigDecimal(cobrancaDocumentoItem.getValorItemCobrado(),
						2, true);
//				valorItem = valorItem.replace(".", "");
				// Valor do item
				cobrancaDocumentoTxt.append(Util.completaStringComEspacoAEsquerda(
					valorItem, 14));
				complementoEspecosBranco = complementoEspecosBranco - 14;
				
				somaValorItem = somaValorItem.add(cobrancaDocumentoItem.getValorItemCobrado());
				
				// em caso de ser carta de tarifa social não
				// formatar o txt
				if (idAcaoCobranca != null
						&& (!idAcaoCobranca
								.equals(CobrancaAcao.CARTA_TARIFA_SOCIAL_LIGADO) && !idAcaoCobranca
								.equals(CobrancaAcao.CARTA_TARIFA_SOCIAL_CORTADO))) {
					String valorAcrescimos = Util.formataBigDecimal(cobrancaDocumentoItem.getValorAcrescimos(),
						2, true);
//					valorAcrescimos = valorAcrescimos.replace(".", "");
					// Valor dos encargos
					cobrancaDocumentoTxt.append(Util
							.completaStringComEspacoAEsquerda(valorAcrescimos, 14));
					complementoEspecosBranco = complementoEspecosBranco - 14;
					
					somaValorAcrescimos = somaValorAcrescimos.add(cobrancaDocumentoItem.getValorAcrescimos());
					
					String valorTotalConta = Util.formataBigDecimal(
							cobrancaDocumentoItem.getValorAcrescimos().add(
									cobrancaDocumentoItem.getValorItemCobrado()), 2, true);
					// Valor total da conta
					cobrancaDocumentoTxt.append(Util.completaStringComEspacoAEsquerda(valorTotalConta, 14));
					complementoEspecosBranco = complementoEspecosBranco - 14;	
					
					somaValorTotal = somaValorTotal.add(cobrancaDocumentoItem.getValorAcrescimos().add(
							cobrancaDocumentoItem.getValorItemCobrado()));
				}

			}

		} else {
			CobrancaDocumentoItem cobrancaDocumentoItem = null;
			while (countImpressao < colecaoCobrancaDocumentoItemConta.size()) {
				cobrancaDocumentoItem = (CobrancaDocumentoItem) ((List) colecaoCobrancaDocumentoItemConta)
						.get(countImpressao);

				// Ano mes de referencia da conta
				cobrancaDocumentoTxt.append(Util.completaStringComEspacoAEsquerda(Util.formatarAnoMesParaMesAno(
						cobrancaDocumentoItem.getContaGeral().getConta()
								.getReferencia()), 11));
				complementoEspecosBranco = complementoEspecosBranco - 11;
				// data de vencimento
				cobrancaDocumentoTxt.append(Util.completaString(Util
						.formatarData(cobrancaDocumentoItem
								.getContaGeral().getConta()
								.getDataVencimentoConta()), 10));
				complementoEspecosBranco = complementoEspecosBranco - 10;

				String valorItem = Util.formataBigDecimal(cobrancaDocumentoItem.getValorItemCobrado(), 2 ,true);
//				valorItem = valorItem.replace(".", "");
				// Valor do item
				cobrancaDocumentoTxt.append(Util.completaStringComEspacoAEsquerda(valorItem, 14));
				complementoEspecosBranco = complementoEspecosBranco - 14;
				
				somaValorItem = somaValorItem.add(cobrancaDocumentoItem.getValorItemCobrado());
				
				// em caso de ser carta de tarifa social não
				// formatar o txt
				if (idAcaoCobranca != null
						&& (!idAcaoCobranca
								.equals(CobrancaAcao.CARTA_TARIFA_SOCIAL_LIGADO) && !idAcaoCobranca
								.equals(CobrancaAcao.CARTA_TARIFA_SOCIAL_CORTADO))) {
					String valorAcrescimos = Util.formataBigDecimal(cobrancaDocumentoItem.getValorAcrescimos(),
						2, true);
//					valorAcrescimos = valorAcrescimos.replace(".", "");
					// Valor dos encargos
					cobrancaDocumentoTxt.append(Util.completaStringComEspacoAEsquerda(valorAcrescimos, 14));
					complementoEspecosBranco = complementoEspecosBranco - 14;
					
					somaValorAcrescimos = somaValorAcrescimos.add(cobrancaDocumentoItem.getValorAcrescimos());
					
					String valorTotalConta = Util.formataBigDecimal(
							cobrancaDocumentoItem.getValorAcrescimos().add(
									cobrancaDocumentoItem.getValorItemCobrado()), 2, true);
					// Valor total da conta
					cobrancaDocumentoTxt.append(Util.completaStringComEspacoAEsquerda(valorTotalConta, 14));
					complementoEspecosBranco = complementoEspecosBranco - 14;	
					
					somaValorTotal = somaValorTotal.add(cobrancaDocumentoItem.getValorAcrescimos().add(
							cobrancaDocumentoItem.getValorItemCobrado()));
				}

				countImpressao++;

			}
		}
		
		cobrancaDocumentoTxt.append(Util.completaStringComEspacoAEsquerda("",
				complementoEspecosBranco));
	
		// em caso de ser carta de tarifa social não
		// formatar o txt
		if (idAcaoCobranca != null
				&& (!idAcaoCobranca
						.equals(CobrancaAcao.CARTA_TARIFA_SOCIAL_LIGADO) && !idAcaoCobranca
						.equals(CobrancaAcao.CARTA_TARIFA_SOCIAL_CORTADO))) {
			// Quant. contas em debito
			cobrancaDocumentoTxt
					.append(Util
							.adicionarZerosEsquedaNumero(
									3,	"" + colecaoCobrancaDocumentoItemConta.size()));
		}
		
		// soma dos valores item (valor historico)
		String somaValorItemStr = Util.formataBigDecimal(somaValorItem, 2, true);
		cobrancaDocumentoTxt.append(Util.completaStringComEspacoAEsquerda(somaValorItemStr, 14));

		//valor historico asteriscos
		cobrancaDocumentoTxt.append(Util.completaStringComAsteriscos(somaValorItemStr, 14));
		
		if (idAcaoCobranca != null
				&& (!idAcaoCobranca
						.equals(CobrancaAcao.CARTA_TARIFA_SOCIAL_LIGADO) && !idAcaoCobranca
						.equals(CobrancaAcao.CARTA_TARIFA_SOCIAL_CORTADO))) {
			// soma dos valores acrescimos (valor encargos)
			String somaValorAcrescimosStr = Util.formataBigDecimal(somaValorAcrescimos, 2, true);
			cobrancaDocumentoTxt.append(Util.completaStringComEspacoAEsquerda(somaValorAcrescimosStr, 14));
			
			if(!idAcaoCobranca.equals(CobrancaAcao.CARTA_COBRANCA_SUPRIMIDO)){
				// soma dos valores acrescimos (debitos vencidos)
				String somaValorTotalStr = Util.formataBigDecimal(somaValorTotal, 2, true);
				cobrancaDocumentoTxt.append(Util.completaStringComEspacoAEsquerda(somaValorTotalStr, 14));
			}
		}
		return indicadorEstouro;
	}

	/**
	 * Formata a string builder de cobrança documento de acordo com a quantidade
	 * de itens.Caso a quantidade de itens seja maior que 24 então as contas com
	 * o ano mes referencia mais antigas serão somadas (os valores do item e dos
	 * acrescimos) e formatadas na stringbuilder.
	 * 
	 * [UC0575] Emitir Aviso de Cobrança
	 * 
	 * @author Sávio Luiz
	 * @date 09/04/2007
	 * 
	 * @return
	 * @throws ControladorException
	 */
	protected int formatarCobrancaDocumentoItemParaContaComParcelamento(
			StringBuilder cobrancaDocumentoTxt,
			Collection colecaoCobrancaDocumentoItemConta, int quantidadeContas)
			throws ControladorException {
		int indicadorEstouro = 0;
		int complementoEspecosBranco = quantidadeContas * 49;
		BigDecimal valorTotalContas = new BigDecimal(0);

		int countImpressao = colecaoCobrancaDocumentoItemConta.size()
				- (quantidadeContas - 1);

		if (colecaoCobrancaDocumentoItemConta.size() > quantidadeContas) {
			indicadorEstouro = 1;

			CalcularValorDataVencimentoAnteriorHelper calcularValorDataVencimentoAnteriorHelper = this
					.calcularValorDataVencimentoAnterior(
							colecaoCobrancaDocumentoItemConta, quantidadeContas);

			int referenciaAnterior = Util.subtraiAteSeisMesesAnoMesReferencia(calcularValorDataVencimentoAnteriorHelper
					.getCobrancaDocumentoItemNaoAnterior()
						.getContaGeral().getConta().getReferencia(), 1);
			
			// Ano mes de referencia da conta anterior
			cobrancaDocumentoTxt.append("ATÉ " + Util.completaString(
					Util.formatarAnoMesParaMesAno(referenciaAnterior), 7));
			complementoEspecosBranco = complementoEspecosBranco - 11;
			// data de vencimento anterior
			cobrancaDocumentoTxt
					.append(Util
							.completaString(
									Util.formatarData(calcularValorDataVencimentoAnteriorHelper
										.getDataVencimentoAnterior()),10));
			complementoEspecosBranco = complementoEspecosBranco - 10;

			// pesquisa o valor do debito cobrado
			BigDecimal valorParcelamento = getControladorFaturamento()
					.pesquisarValorMultasCobradasPorFinanciamnetoTipo(
							calcularValorDataVencimentoAnteriorHelper
									.getCobrancaDocumentoItemNaoAnterior()
									.getContaGeral().getConta().getId());
			
			// pesquisa o valor do credito realizado
			BigDecimal valorCreditoRealizado = getControladorFaturamento()
					.pesquisarValorCreditoPorOrigem(
							calcularValorDataVencimentoAnteriorHelper
									.getCobrancaDocumentoItemNaoAnterior()
									.getContaGeral().getConta().getId());

			if (valorParcelamento != null) {
				if(valorCreditoRealizado != null){
					valorParcelamento = valorParcelamento.subtract(valorCreditoRealizado);
				}

				String valorParcelamentoAnterior = Util.formataBigDecimal(valorParcelamento, 2, true);
				cobrancaDocumentoTxt.append(Util.completaStringComEspacoAEsquerda(valorParcelamentoAnterior, 14));				
			} else {
				cobrancaDocumentoTxt.append(Util.completaStringComEspacoAEsquerda("", 14));
			}
			complementoEspecosBranco = complementoEspecosBranco - 14;

//			 Valor do item anterior
			String valorItemAnterior = Util.formataBigDecimal(
					calcularValorDataVencimentoAnteriorHelper
							.getValorAnterior(), 2, true);
			cobrancaDocumentoTxt.append(Util.completaStringComEspacoAEsquerda(valorItemAnterior,14));
			complementoEspecosBranco = complementoEspecosBranco - 14;
			
			if(calcularValorDataVencimentoAnteriorHelper.getValorAnterior() != null){
				valorTotalContas = valorTotalContas.add(calcularValorDataVencimentoAnteriorHelper
						.getValorAnterior());
			}
			
		}

		// equivalente ao teste: colecaoCobrancaDocumentoItemConta.size >= quantidadeContas
		if (countImpressao <= 1) {
			Iterator iteratorColecaoCobrancaDocumentoItem = colecaoCobrancaDocumentoItemConta
					.iterator();

			CobrancaDocumentoItem cobrancaDocumentoItem = null;

			while (iteratorColecaoCobrancaDocumentoItem.hasNext()) {
				cobrancaDocumentoItem = (CobrancaDocumentoItem) iteratorColecaoCobrancaDocumentoItem
						.next();

				// Ano mes de referencia da conta
				cobrancaDocumentoTxt.append(Util.completaStringComEspacoAEsquerda(Util.formatarAnoMesParaMesAno(
						cobrancaDocumentoItem.getContaGeral().getConta().getReferencia()), 11));
				complementoEspecosBranco = complementoEspecosBranco - 11;

				// data de vencimento
				cobrancaDocumentoTxt.append(Util.completaString(Util
						.formatarData(cobrancaDocumentoItem
								.getContaGeral().getConta()
								.getDataVencimentoConta()), 10));
				complementoEspecosBranco = complementoEspecosBranco - 10;

				// pesquisa o valor do parcelamento
				BigDecimal valorParcelamento = getControladorFaturamento()
						.pesquisarValorMultasCobradasPorFinanciamnetoTipo(
								cobrancaDocumentoItem.getContaGeral()
										.getConta().getId());
				
				//	pesquisa o valor do credito realizado
				BigDecimal valorCreditoRealizado = getControladorFaturamento()
						.pesquisarValorCreditoPorOrigem(cobrancaDocumentoItem.getContaGeral()
								.getConta().getId());

				if (valorParcelamento != null) {
					if(valorCreditoRealizado != null){
						valorParcelamento = valorParcelamento.subtract(valorCreditoRealizado);
					}
					String valorParcelamentoAnterior = Util.formataBigDecimal(valorParcelamento, 2, true);
					cobrancaDocumentoTxt.append(Util.completaStringComEspacoAEsquerda(valorParcelamentoAnterior, 14));
				} else {
					cobrancaDocumentoTxt.append(Util.completaStringComEspacoAEsquerda("", 14));
				}
				complementoEspecosBranco = complementoEspecosBranco - 14;

				// Valor do item
				String valorItem = Util.formataBigDecimal(cobrancaDocumentoItem.getValorItemCobrado(), 2, true);
				cobrancaDocumentoTxt.append(Util.completaStringComEspacoAEsquerda(valorItem, 14));
				complementoEspecosBranco = complementoEspecosBranco - 14;

				if(cobrancaDocumentoItem.getValorItemCobrado() != null){
					valorTotalContas = valorTotalContas.add(cobrancaDocumentoItem.getValorItemCobrado());
				}

			}

		} else {
			CobrancaDocumentoItem cobrancaDocumentoItem = null;
			while (countImpressao < colecaoCobrancaDocumentoItemConta.size()) {
				cobrancaDocumentoItem = (CobrancaDocumentoItem) ((List) colecaoCobrancaDocumentoItemConta)
						.get(countImpressao);

				// Ano mes de referencia da conta
				cobrancaDocumentoTxt.append(Util.completaStringComEspacoAEsquerda(Util.formatarAnoMesParaMesAno(
						cobrancaDocumentoItem.getContaGeral().getConta().getReferencia()), 11));
				complementoEspecosBranco = complementoEspecosBranco - 11;

				// data de vencimento
				cobrancaDocumentoTxt.append(Util.completaString(Util
						.formatarData(cobrancaDocumentoItem
								.getContaGeral().getConta()
								.getDataVencimentoConta()), 10));
				complementoEspecosBranco = complementoEspecosBranco - 10;

				// pesquisa o valor do parcelamento
				BigDecimal valorParcelamento = getControladorFaturamento()
						.pesquisarValorMultasCobradasPorFinanciamnetoTipo(
								cobrancaDocumentoItem.getContaGeral()
										.getConta().getId());
				
				//	pesquisa o valor do credito realizado
				BigDecimal valorCreditoRealizado = getControladorFaturamento()
						.pesquisarValorCreditoPorOrigem(cobrancaDocumentoItem.getContaGeral()
								.getConta().getId());

				if (valorParcelamento != null) {
					if(valorCreditoRealizado != null){
						valorParcelamento = valorParcelamento.subtract(valorCreditoRealizado);
					}
					String valorParcelamentoAnterior = Util.formataBigDecimal(valorParcelamento, 2, true);
					cobrancaDocumentoTxt.append(Util.completaStringComEspacoAEsquerda(valorParcelamentoAnterior, 14));
				} else {
					cobrancaDocumentoTxt.append(Util.completaStringComEspacoAEsquerda("", 14));
				}
				complementoEspecosBranco = complementoEspecosBranco - 14;

				// Valor do item
				String valorItem = Util.formataBigDecimal(cobrancaDocumentoItem.getValorItemCobrado(), 2, true);
				cobrancaDocumentoTxt.append(Util.completaStringComEspacoAEsquerda(valorItem, 14));
				complementoEspecosBranco = complementoEspecosBranco - 14;

				if(cobrancaDocumentoItem.getValorItemCobrado() != null){
					valorTotalContas = valorTotalContas.add(cobrancaDocumentoItem.getValorItemCobrado());
				}
				
				countImpressao++;

			}
		}
		cobrancaDocumentoTxt.append(Util.completaStringComEspacoAEsquerda("", complementoEspecosBranco));		
		if (valorTotalContas != null) {
			String valorTotalContasStr = Util.formataBigDecimal(valorTotalContas, 2, true);
			cobrancaDocumentoTxt.append(Util.completaStringComEspacoAEsquerda(valorTotalContasStr, 14));
			cobrancaDocumentoTxt.append(Util.completaStringComAsteriscos(valorTotalContasStr, 14));
		} else {
			cobrancaDocumentoTxt.append(Util.completaStringComEspacoAEsquerda("", 28));
		}
		return indicadorEstouro;
	}

	/**
	 * Somatário dos valores do item e dos acrescimos das guias de pagamento dos
	 * documentos itens recuperado da cobrança de documento
	 * 
	 * [UC0575] Emitir Aviso de Cobrança
	 * 
	 * @author Sávio Luiz
	 * @date 09/04/2007
	 * 
	 * @return
	 * @throws ControladorException
	 */
	protected int somatorioValoresAcrescimosDocumentoItem(
			StringBuilder cobrancaDocumentoTxt,
			Collection colecaoCobrancaDocumentoItemGuiaPagamento) {
		int quantidadeGuiasPagamentoDebito = 0;
		// if (colecaoCobrancaDocumentoItemGuiaPagamento != null
		// && !colecaoCobrancaDocumentoItemGuiaPagamento.isEmpty()) {
		// quantidadeGuiasPagamentoDebito =
		// colecaoCobrancaDocumentoItemGuiaPagamento
		// .size();
		// Iterator iteratorColecaoCobrancaDocumentoItemGuiaPagamento =
		// colecaoCobrancaDocumentoItemGuiaPagamento
		// .iterator();
		// BigDecimal somatorioValorItemGuia = new BigDecimal("0.00");
		// BigDecimal somatorioValorAcrescimosGuia = new BigDecimal("0.00");
		// while (iteratorColecaoCobrancaDocumentoItemGuiaPagamento.hasNext()) {
		// Object[] dadosCobrancaoDocumentoItem = (Object[])
		// iteratorColecaoCobrancaDocumentoItemGuiaPagamento
		// .next();
		// if (dadosCobrancaoDocumentoItem != null) {
		// if (dadosCobrancaoDocumentoItem[0] != null) {
		// somatorioValorItemGuia
		// .add((BigDecimal) dadosCobrancaoDocumentoItem[0]);
		// }
		// if (dadosCobrancaoDocumentoItem[1] != null) {
		// somatorioValorAcrescimosGuia
		// .add((BigDecimal) dadosCobrancaoDocumentoItem[1]);
		// }
		// }
		// }
		// String somatorioValorItemGuiaString = "" + somatorioValorItemGuia;
		// String somatorioValorAcrescimosGuiaString = ""
		// + somatorioValorAcrescimosGuia;
		// somatorioValorItemGuiaString = somatorioValorItemGuiaString
		// .replace(".", "");
		// somatorioValorAcrescimosGuiaString =
		// somatorioValorAcrescimosGuiaString
		// .replace(".", "");
		//
		// // valor da guia de pagamento
		// cobrancaDocumentoTxt.append(Util.completaString(
		// somatorioValorItemGuiaString, 11));
		//
		// // valor de encargos guia de pagamento
		// cobrancaDocumentoTxt.append(Util.completaString(
		// somatorioValorAcrescimosGuiaString, 11));
		//
		// } else {
		// valor da guia de pagamento
		cobrancaDocumentoTxt.append(Util.adicionarZerosEsquedaNumero(11, ""));

		// valor de encargos guia de pagamento
		cobrancaDocumentoTxt.append(Util.adicionarZerosEsquedaNumero(11, ""));
		// }

		return quantidadeGuiasPagamentoDebito;
	}

	/**
	 * Verificar se os itens do parcelamento(Conta, Debito a cobrar e Credit a
	 * realizar) já estão no historico
	 * 
	 * [UC0252] Desfazer Parcelamentos de Debito
	 * 
	 * @author Vivianne Sousa
	 * @date 09/04/2007
	 * 
	 * @return
	 * @throws ControladorException
	 */
	public boolean verificarItensParcelamentoNoHistorico(Integer idImovel,
			Integer idParcelamento) throws ControladorException {
		boolean retorno = false;

		try {

			Collection colecaoContaHistorico = null;
			Collection colecaoDebitoACobrar = null;
			Collection colecaoCreditoARealizar = null;

			colecaoContaHistorico = repositorioCobranca
					.verificarContaHistoricoParcelamento(idImovel,
							idParcelamento);

			if (colecaoContaHistorico != null
					&& !colecaoContaHistorico.isEmpty()) {

				retorno = true;

			} else {

				colecaoDebitoACobrar = repositorioCobranca
						.verificarContaHistoricoParcelamento(idImovel,
								idParcelamento);

				if (colecaoDebitoACobrar != null
						&& !colecaoDebitoACobrar.isEmpty()) {

					retorno = true;

				} else {
					colecaoCreditoARealizar = repositorioCobranca
							.verificarCreditoARealizarHistoricoParcelamento(
									idImovel, idParcelamento);

					if (colecaoCreditoARealizar != null
							&& !colecaoCreditoARealizar.isEmpty()) {

						retorno = true;

					}
				}
			}

		} catch (Exception e) {
			sessionContext.setRollbackOnly();
			throw new ControladorException("erro.sistema", e);
		}

		return retorno;
	}

	/**
	 * 
	 * Este caso de uso gera os avisos de cobrança dos documentos de cobrança
	 * 
	 * [UC0575] Emitir Parcelamento em Atraso
	 * 
	 * 
	 * @author Sávio Luiz
	 * @data 12/04/2007
	 * 
	 * @param
	 * @return void
	 */
	public void emitirParcelamentoEmAtraso(
			CobrancaAcaoAtividadeCronograma cobrancaAcaoAtividadeCronograma,
			CobrancaAcaoAtividadeComando cobrancaAcaoAtividadeComando,
			Date dataAtualPesquisa, CobrancaAcao acaoCobranca,
			CobrancaGrupo grupoCobranca, CobrancaCriterio cobrancaCriterio)
			throws ControladorException {

		boolean flagFimPesquisa = false;
		final int quantidadeCobrancaDocumento = 1000;
		int quantidadeCobrancaDocumentoInicio = 0;

		SistemaParametro sistemaParametro = getControladorUtil()
				.pesquisarParametrosDoSistema();

		StringBuilder cobrancaDocumentoTxt = new StringBuilder();
		int sequencialImpressao = 0;

		Collection colecaoCobrancaDocumento = null;

		Integer idCronogramaAtividadeAcaoCobranca = null;
		Integer idComandoAtividadeAcaoCobranca = null;
		Integer idAcaoCobranca = null;
		if (cobrancaAcaoAtividadeCronograma != null
				&& cobrancaAcaoAtividadeCronograma.getId() != null) {
			idCronogramaAtividadeAcaoCobranca = cobrancaAcaoAtividadeCronograma
					.getId();
		}
		if (cobrancaAcaoAtividadeComando != null
				&& cobrancaAcaoAtividadeComando.getId() != null) {
			idComandoAtividadeAcaoCobranca = cobrancaAcaoAtividadeComando
					.getId();
		}
		if (acaoCobranca != null && acaoCobranca.getId() != null) {
			idAcaoCobranca = acaoCobranca.getId();
		}

		while (!flagFimPesquisa) {

			try {

				System.out.println("***************************************");
				System.out.println("ENTROU NO PARCELAMENTO EM ATRASO");
				System.out.println("***************************************");
				colecaoCobrancaDocumento = repositorioCobranca
						.pesquisarCobrancaDocumentoParaEmitir(
								idCronogramaAtividadeAcaoCobranca,
								idComandoAtividadeAcaoCobranca,
								dataAtualPesquisa, idAcaoCobranca,
								quantidadeCobrancaDocumentoInicio);
				System.out.println("***************************************");
				System.out.println("QTD DE COBRANCA DOCUMENTO:"
						+ colecaoCobrancaDocumento.size());
				System.out.println("***************************************");
			} catch (ErroRepositorioException ex) {
				ex.printStackTrace();
				throw new ControladorException("erro.sistema", ex);
			}

			if (colecaoCobrancaDocumento != null
					&& !colecaoCobrancaDocumento.isEmpty()) {

				System.out.println("***************************************");
				System.out.println("QUANTIDADE COBRANÇA:"
						+ colecaoCobrancaDocumento.size());
				System.out.println("***************************************");

				if (colecaoCobrancaDocumento.size() < quantidadeCobrancaDocumento) {
					flagFimPesquisa = true;
				} else {
					quantidadeCobrancaDocumentoInicio = quantidadeCobrancaDocumentoInicio + 1000;

				}
				// ***********************************************************************
				// ****PARTE COMENTADA DA DIVISÃO PARA IMPRESSÃO DE DOCUMENTO
				// COBRANÇA****
				// ***********************************************************************

				// int metadeColecao = 0;
				// if (colecaoCobrancaDocumento.size() % 2 == 0) {
				// metadeColecao = colecaoCobrancaDocumento.size() / 2;
				// } else {
				// metadeColecao = (colecaoCobrancaDocumento.size() / 2) + 1;
				// }

				// Map<Integer, Map<Object, Object>>
				// mapCobrancaDocumentoOrdenada =
				// dividirColecao(colecaoCobrancaDocumento);

				/*
				 * if (mapCobrancaDocumentoOrdenada != null) { int countOrdem =
				 * 0;
				 * 
				 * while (countOrdem < mapCobrancaDocumentoOrdenada.size()) {
				 * Map<Object, Object> mapCobrancaoDocumentoDivididas =
				 * mapCobrancaDocumentoOrdenada .get(countOrdem);
				 */

				/*
				 * Iterator iteratorCobrancaDocumento =
				 * mapCobrancaoDocumentoDivididas .keySet().iterator();
				 */
				Iterator iteratorCobrancaDocumento = colecaoCobrancaDocumento
						.iterator();
				while (iteratorCobrancaDocumento.hasNext()) {

					CobrancaDocumento cobrancaDocumento = null;
					/*
					 * if(quantidadeContas == 48){ System.out.println(""); }
					 */

					// int situacao = 0;
					cobrancaDocumento = (CobrancaDocumento) iteratorCobrancaDocumento
							.next();

					String nomeClienteUsuario = null;
					Collection colecaoCobrancaDocumentoItemConta = null;
					Integer idClienteResponsavel = null;
					Parcelamento parcelamento = null;
					/*
					 * Estes objetos auxiliarão na formatação da inscrição que
					 * será composta por informações do documento de cobrança e
					 * do imóvel a ele associado
					 */

					/*
					 * Objeto que será utilizado para armazenar as informações
					 * do documento de cobrança de acordo com o layout definido
					 * no caso de uso
					 */

					/*
					 * while (situacao < 2) { if (situacao == 0) { situacao = 1;
					 * sequencialImpressao = atualizaSequencial(
					 * sequencialImpressao, situacao, metadeColecao); } else {
					 * cobrancaDocumento = (CobrancaDocumento)
					 * mapCobrancaoDocumentoDivididas .get(cobrancaDocumento);
					 * situacao = 2; sequencialImpressao = atualizaSequencial(
					 * sequencialImpressao, situacao, metadeColecao); }
					 */

					if (cobrancaDocumento != null) {
						sequencialImpressao++;

						try {

							nomeClienteUsuario = this.repositorioClienteImovel
									.pesquisarNomeClientePorImovel(cobrancaDocumento
											.getImovel().getId());
							idClienteResponsavel = this.repositorioClienteImovel
									.retornaIdClienteResponsavel(cobrancaDocumento
											.getImovel().getId());

							colecaoCobrancaDocumentoItemConta = this.repositorioCobranca
									.selecionarCobrancaDocumentoItemReferenteConta(cobrancaDocumento);

							parcelamento = pesquisarDadosParcelamentoComMaiorTimestemp(cobrancaDocumento
									.getImovel().getId());

						} catch (ErroRepositorioException ex) {
							ex.printStackTrace();
							throw new ControladorException("erro.sistema", ex);
						}

						if (colecaoCobrancaDocumentoItemConta != null
								&& !colecaoCobrancaDocumentoItemConta.isEmpty()) {

							String idGrupo = null;
							// id do grupo
							if (idCronogramaAtividadeAcaoCobranca != null) {
								idGrupo = "" + grupoCobranca.getId();
							} else {
								idGrupo = "" +
									+ cobrancaDocumento.getImovel()
									.getQuadra().getRota()
									.getCobrancaGrupo()
									.getId();
							}
//							 Grupo-XX Entrega-XXXXXXXXXX
							String textoGrupoEntrega = "GRUPO-" + Util.adicionarZerosEsquedaNumeroTruncando(2,idGrupo) + " ENTREGA-";
							if (cobrancaDocumento.getEmpresa() != null) {
								textoGrupoEntrega += cobrancaDocumento.getEmpresa().getDescricao();
							}
							cobrancaDocumentoTxt.append(Util.completaString(textoGrupoEntrega, 27));
							
							// Inscrição
							String idLocalidade = Util
									.adicionarZerosEsquedaNumero(3, ""
											+ cobrancaDocumento.getLocalidade()
													.getId());
							String codigoSetorComercial = Util
									.adicionarZerosEsquedaNumero(3, ""
											+ cobrancaDocumento
													.getCodigoSetorComercial());
							String numeroQuadra = Util
									.adicionarZerosEsquedaNumero(3, ""
											+ cobrancaDocumento
													.getNumeroQuadra());
							String lote = Util.adicionarZerosEsquedaNumero(4,
									""
											+ cobrancaDocumento.getImovel()
													.getLote());
							String subLote = Util.adicionarZerosEsquedaNumero(
									3, ""
											+ cobrancaDocumento.getImovel()
													.getSubLote());

							cobrancaDocumentoTxt
									.append(Util
											.completaString(idLocalidade + "."
													+ codigoSetorComercial + "."
													+ numeroQuadra + "." + lote + "."
													+ subLote, 20));

							// Nome da Localidade
							cobrancaDocumentoTxt.append(Util
									.completaString(""
											+ cobrancaDocumento.getImovel()
													.getLocalidade()
													.getDescricao(), 25));

							// nome cliente
							cobrancaDocumentoTxt.append(Util.completaString(
									nomeClienteUsuario, 50));

							String nomeBairro = "";
							String nomeMunicipio = "";
							String siglaUnidadeFederecao = "";
							String cepFormatado = "";

							String[] parmsEnderecoImovel = getControladorEndereco()
									.pesquisarEnderecoFormatadoDividido(
											cobrancaDocumento.getImovel()
													.getId());
							if (parmsEnderecoImovel != null) {
								// nome do bairro
								nomeBairro = "" + parmsEnderecoImovel[3];
								// nome do municipio
								nomeMunicipio = "" + parmsEnderecoImovel[1];
								// sigla da unidade federação
								siglaUnidadeFederecao = parmsEnderecoImovel[2];
								cepFormatado = parmsEnderecoImovel[4];
							}

							// endereço do cliente com opção de recebimento via
							// correio
							if (idClienteResponsavel != null) {
								String[] parmsEndereco = getControladorEndereco()
										.pesquisarEnderecoClienteAbreviadoDividido(
												idClienteResponsavel);
								// endereço sem municipio e unidade federação
								cobrancaDocumentoTxt.append(Util
										.completaString(parmsEndereco[0], 50));
								// nome do bairro
								nomeBairro = "" + parmsEndereco[3];
								// nome do municipio
								nomeMunicipio = "" + parmsEndereco[1];
								// sigla da unidade federação
								siglaUnidadeFederecao = parmsEndereco[2];
								cepFormatado = parmsEndereco[4];

							} else {
								if (parmsEnderecoImovel != null){
									// endereço sem municipio e unidade federação
									cobrancaDocumentoTxt.append(Util
											.completaString(parmsEnderecoImovel[0],
													50));
								} else {
									cobrancaDocumentoTxt.append(Util
											.completaString("", 50));									
								}
							}

							// nome Bairro
							cobrancaDocumentoTxt.append(Util.completaString(
									nomeBairro, 25));
							// nome municipio
							cobrancaDocumentoTxt.append(Util.completaString(
									nomeMunicipio, 24));
							// sigla unidade federacao
							cobrancaDocumentoTxt.append(Util.completaString(
									siglaUnidadeFederecao, 2));
							// CEP
							// variavel cepFormatado foi preenchido de acordo com a existencia de
							// cliente responsavel
							String cepStr = Util.completaString(cepFormatado, 8);
							cobrancaDocumentoTxt.append("CEP. " + cepStr.substring(0,5) + "-" + cepStr.substring(5,8));
							
							// Sequencial de impressao
							String sequencialImpressaoStr = Util.adicionarZerosEsquedaNumero(6,sequencialImpressao + "");
							cobrancaDocumentoTxt.append("SEQ.  " + sequencialImpressaoStr.substring(0,3) + "." + 
									sequencialImpressaoStr.substring(3,6));
							
							// Matrícula do imóvel
//							String matriculaStr = Util
//							.adicionarZerosEsquedaNumero(8, ""
//									+ cobrancaDocumento.getImovel()
//											.getId()); 
							cobrancaDocumentoTxt.append(Util.adicionarZerosEsquedaNumero(9, ""
									+ cobrancaDocumento.getImovel()
											.getId()));

							// Endereço do imóvel sem municipio e unidade federação
							cobrancaDocumentoTxt.append(Util
									.completaString(parmsEnderecoImovel[0],
											50));

							//	sequencial do documento de cobranca
							String sequencialStr = Util
							.adicionarZerosEsquedaNumero(
									9, "" + cobrancaDocumento
									.getNumeroSequenciaDocumento()); 
							cobrancaDocumentoTxt
									.append(sequencialStr.substring(0,5) + "." + sequencialStr.substring(5,9));

							// data de vencimento AAAAMMDD
							Object[] dadosFaturamentoGrupo = getControladorFaturamento()
									.pesquisarAnoMesEDiaVencimentoFaturamentoGrupo(
											cobrancaDocumento.getImovel()
													.getId());
							Integer anoMesFaturamento = null;
							Integer diaVencimento = null;
							if (dadosFaturamentoGrupo != null) {
								if (dadosFaturamentoGrupo[0] != null) {
									anoMesFaturamento = (Integer) dadosFaturamentoGrupo[0];
								}
								if (dadosFaturamentoGrupo[1] != null) {
									diaVencimento = ((Short) dadosFaturamentoGrupo[1])
											.intValue();
								}
							}
							String dataVencimento = "";
							if (anoMesFaturamento != null
									&& anoMesFaturamento > sistemaParametro
											.getAnoMesFaturamento()) {
								diaVencimento += 5;
								String anoMesFaturamentoString = ""
										+ anoMesFaturamento;
								Date dataVencimentoDate = Util.criarData(diaVencimento, 
										Integer.parseInt(anoMesFaturamentoString.substring(4,6)),
										Integer.parseInt(anoMesFaturamentoString.substring(0,4)));
								dataVencimento = Util.formatarData(dataVencimentoDate); 

							} else {
								dataVencimento = Util.formatarData(Util
										.adicionarNumeroDiasDeUmaData(
												new Date(), 20));
							}

							cobrancaDocumentoTxt.append(Util.completaString(
									dataVencimento, 10));

							// idgrupo
							cobrancaDocumentoTxt.append(Util
									.adicionarZerosEsquedaNumeroTruncando(2,idGrupo));
							cobrancaDocumentoTxt.append("-");
							// código da firma
							if (cobrancaDocumento.getEmpresa() != null) {
								cobrancaDocumentoTxt.append(Util
										.adicionarZerosEsquedaNumero(2,
												cobrancaDocumento.getEmpresa()
														.getId().toString()));
							}
									
							String representacaoNumericaCodBarra = "";

							// Obtém a representação numérica do
							// códigode
							// barra
							representacaoNumericaCodBarra = this
									.getControladorArrecadacao()
									.obterRepresentacaoNumericaCodigoBarra(
											5,
											cobrancaDocumento
													.getValorDocumento(),
											cobrancaDocumento.getLocalidade()
													.getId(),
											cobrancaDocumento.getImovel()
													.getId(),
											null,
											null,
											null,
											null,
											String
													.valueOf(cobrancaDocumento
															.getNumeroSequenciaDocumento()),
											cobrancaDocumento
													.getDocumentoTipo().getId(),
											null, null, null);

							// Formata a representação númerica do
							// código de
							// barras
							String representacaoNumericaCodBarraFormatada = representacaoNumericaCodBarra
									.substring(0, 11)
									+ " "
									+ representacaoNumericaCodBarra.substring(
											11, 12)
									+ " "
									+ representacaoNumericaCodBarra.substring(
											12, 23)
									+ " "
									+ representacaoNumericaCodBarra.substring(
											23, 24)
									+ " "
									+ representacaoNumericaCodBarra.substring(
											24, 35)
									+ " "
									+ representacaoNumericaCodBarra.substring(
											35, 36)
									+ " "
									+ representacaoNumericaCodBarra.substring(
											36, 47)
									+ " "
									+ representacaoNumericaCodBarra.substring(
											47, 48);

							cobrancaDocumentoTxt
									.append(representacaoNumericaCodBarraFormatada);

							// Cria o objeto para gerar o código de
							// barras
							// no
							// padrão
							// intercalado 2 de 5
							Interleaved2of5 codigoBarraIntercalado2de5 = new Interleaved2of5();

							// Recupera a representação númerica do
							// código
							// de
							// barras
							// sem
							// os dígitos verificadores
							String representacaoCodigoBarrasSemDigitoVerificador = representacaoNumericaCodBarra
									.substring(0, 11)
									+ representacaoNumericaCodBarra.substring(
											12, 23)
									+ representacaoNumericaCodBarra.substring(
											24, 35)
									+ representacaoNumericaCodBarra.substring(
											36, 47);

							cobrancaDocumentoTxt
									.append(codigoBarraIntercalado2de5
											.encodeValue(representacaoCodigoBarrasSemDigitoVerificador));
							
							if (parcelamento != null) {

								// obter dados do faturamento
								if (parcelamento.getParcelamento() != null) {
									cobrancaDocumentoTxt
											.append(Util.adicionarZerosEsquedaNumero(10, 
												Util.formatarData(parcelamento.getParcelamento())));
								} else {
									cobrancaDocumentoTxt
											.append(Util.completaStringComEspacoAEsquerda("", 10));
								}
								BigDecimal valorDebitoOriginal = new BigDecimal(0);
								if (parcelamento.getValorServicosACobrar() != null){
									valorDebitoOriginal = valorDebitoOriginal.add(parcelamento.getValorServicosACobrar());
								}
								if (parcelamento.getValorConta() != null) {
									valorDebitoOriginal = valorDebitoOriginal.add(parcelamento.getValorConta());
								}
								if(parcelamento.getValorParcelamentosACobrar() != null){
									valorDebitoOriginal = valorDebitoOriginal.add(parcelamento.getValorParcelamentosACobrar());
								}
								if (parcelamento.getValorGuiaPapagamento() != null){									
									valorDebitoOriginal = valorDebitoOriginal.add(parcelamento.getValorGuiaPapagamento());
								}
								if (valorDebitoOriginal.compareTo(new BigDecimal(0)) > 0){
									cobrancaDocumentoTxt
											.append(Util.completaStringComEspacoAEsquerda(
												Util.formataBigDecimal(valorDebitoOriginal,2,true),14));
								} else {
									cobrancaDocumentoTxt
											.append(Util.completaStringComEspacoAEsquerda("",14));
								}
								BigDecimal valorEncargos = new BigDecimal(0);
								if (parcelamento.getValorAtualizacaoMonetaria() != null) {
									valorEncargos = valorEncargos.add(parcelamento.getValorAtualizacaoMonetaria());
								}
								if (parcelamento.getValorJurosMora() != null) {
									valorEncargos = valorEncargos.add(parcelamento.getValorJurosMora());
								}
								if (parcelamento.getValorMulta() != null) {
									valorEncargos = valorEncargos.add(parcelamento.getValorMulta());
								} 
								if (valorEncargos.compareTo(new BigDecimal(0)) > 0){
									cobrancaDocumentoTxt
											.append(Util.completaStringComEspacoAEsquerda(
												Util.formataBigDecimal(valorEncargos,2,true),14));
								} else {
									cobrancaDocumentoTxt
										.append(Util.completaStringComEspacoAEsquerda("",14));
								}
								BigDecimal valorDescontos = parcelamento
										.getValorDesconto();
								if (valorDescontos != null) {
									cobrancaDocumentoTxt
									.append(Util.completaStringComEspacoAEsquerda(
										Util.formataBigDecimal(valorDescontos,2,true),14));
								} else {
									cobrancaDocumentoTxt
											.append(Util.completaStringComEspacoAEsquerda("",14));
								}
								
								//valor negociado = valordebitooriginal + valor encargos - valor descontos
								BigDecimal valorNegociado = new BigDecimal(0);
								if(valorDebitoOriginal != null){
									valorNegociado = valorDebitoOriginal; 
								}
								if (valorEncargos != null){
									valorNegociado = valorNegociado.add(valorEncargos);
								}
								if(valorDescontos != null){
									valorNegociado = valorNegociado.subtract(valorDescontos);
								}
								if (valorNegociado.compareTo(new BigDecimal(0)) > 0){
									cobrancaDocumentoTxt
											.append(Util.completaStringComEspacoAEsquerda(
												Util.formataBigDecimal(valorNegociado,2,true),14));
								} else {
									cobrancaDocumentoTxt
											.append(Util.completaStringComEspacoAEsquerda("",14));
								}
																
								//juros do parcelamento
								if (parcelamento.getValorJurosParcelamento() != null) {
									cobrancaDocumentoTxt
									.append(Util.completaStringComEspacoAEsquerda(
										Util.formataBigDecimal(parcelamento.getValorJurosParcelamento(),2,true),14));
								} else {
									cobrancaDocumentoTxt
											.append(Util.completaStringComEspacoAEsquerda("", 14));
								}
								//valor entrada
								if (parcelamento.getValorEntrada() != null) {
									cobrancaDocumentoTxt
									.append(Util.completaStringComEspacoAEsquerda(
										Util.formataBigDecimal(parcelamento.getValorEntrada(),2,true),14));
								} else {
									cobrancaDocumentoTxt
											.append(Util.completaStringComEspacoAEsquerda("",14));
								}
								if (parcelamento.getNumeroPrestacoes() != null) {
									cobrancaDocumentoTxt
											.append(Util
													.adicionarZerosEsquedaNumero(
															2, "" + parcelamento.getNumeroPrestacoes()));
								} else {
									cobrancaDocumentoTxt.append(Util.completaStringComEspacoAEsquerda("",2));
								}
								if (parcelamento.getValorPrestacao() != null) {
									cobrancaDocumentoTxt
									.append(Util.completaStringComEspacoAEsquerda(
										Util.formataBigDecimal(parcelamento.getValorPrestacao(),2,true),14));
								} else {
									cobrancaDocumentoTxt
											.append(Util.completaStringComEspacoAEsquerda("",14));
								}
								
							} else {
								cobrancaDocumentoTxt.append(Util
										.completaStringComEspacoAEsquerda("",110));
							}

							// retorna o indicador de estouro e formata o
							// cobrançaDocumentoTxt com os dados
							
							int quantidadesContas = 15;

							// retorna o indicador de estouro e formata o
							// cobrançaDocumentoTxt com os dados
							formatarCobrancaDocumentoItemParaContaComParcelamento(
									cobrancaDocumentoTxt,
									colecaoCobrancaDocumentoItemConta,
									quantidadesContas);
							
							//2.20
							if (parcelamento != null) {
								String idParcelamento = parcelamento.getId().toString();
								cobrancaDocumentoTxt.append(Util.adicionarZerosEsquedaNumero(8,idParcelamento));
							}else{
								cobrancaDocumentoTxt.append(Util.adicionarZerosEsquedaNumero(8,""));
							}
							
							//2.21
							String dadosEntrega = "";
							if(idGrupo != null){
								dadosEntrega = Util.adicionarZerosEsquedaNumero(3,""+idGrupo);
							}else{
								dadosEntrega = Util.adicionarZerosEsquedaNumero(3,"");
							}
							
							dadosEntrega += "-";
							
							if(cobrancaDocumento.getQuadra() != null && cobrancaDocumento.getQuadra().getRota() != null){
								dadosEntrega += Util.adicionarZerosEsquedaNumero(5,""+
										       cobrancaDocumento.getQuadra().getRota().getCodigo());
							}else{
								dadosEntrega += Util.adicionarZerosEsquedaNumero(5,"");
							}
							
							dadosEntrega += "-"; 

							if(cobrancaDocumento.getImovel() != null){
								if(cobrancaDocumento.getImovel().getNumeroSequencialRota() != null && 
										!cobrancaDocumento.getImovel().getNumeroSequencialRota().equals("")){
								  dadosEntrega += Util.adicionarZerosEsquedaNumero(9,""+cobrancaDocumento.getImovel().getNumeroSequencialRota());
								}else{
									dadosEntrega += Util.adicionarZerosEsquedaNumero(9,"");
								}
							}else{
								dadosEntrega += Util.adicionarZerosEsquedaNumero(9,"");
							}
							
							cobrancaDocumentoTxt.append(dadosEntrega);

							
							cobrancaDocumentoTxt.append(System
									.getProperty("line.separator"));

						}

						colecaoCobrancaDocumentoItemConta = null;
					}

					// }// fim do laço que verifica
					// as 2
					// contas

				}// fim laço while do iterator do
				// objeto
				// helper
				// countOrdem++;
				// mapCobrancaoDocumentoDivididas = null;
				// // }
			} else {
				flagFimPesquisa = true;
			}
			// } else {
			// flagFimPesquisa = true;
			// }
			// colecaoCobrancaDocumento = null;
		}

		Date dataAtual = new Date();

		String nomeZip = null;

		// em caso de ser carta de tarifa social não
		// formatar o txt
		if (idCronogramaAtividadeAcaoCobranca != null) {
			nomeZip = "EMITIR_CARTA_PARCELAMENTO_EM_ATRASO"
					+ grupoCobranca.getId() + "_"
					+ Util.formatarData(dataAtual) + Util.formatarHoraSemDataSemDoisPontos(dataAtual);
		} else {
			String descricaoAbrevDocumentoTipo = "";
			if (acaoCobranca != null && acaoCobranca.getDocumentoTipo() != null) {
				descricaoAbrevDocumentoTipo = acaoCobranca.getDocumentoTipo()
						.getDescricaoAbreviado();
			}
			String tituloComandoEventual = cobrancaAcaoAtividadeComando
					.getDescricaoTitulo();

			nomeZip = descricaoAbrevDocumentoTipo + " " + tituloComandoEventual
					+ " " + Util.formatarData(dataAtual)  + Util.formatarHoraSemDataSemDoisPontos(dataAtual);
			nomeZip = nomeZip.replace("/", "_");
			nomeZip = nomeZip.replace(" ", "_");
		}

		nomeZip = nomeZip.replace("/", "_");

		// pegar o arquivo, zipar pasta e arquivo e escrever no stream
		try {

			System.out.println("***************************************");
			System.out.println("INICO DA CRIACAO DO ARQUIVO");
			System.out.println("***************************************");

			if (cobrancaDocumentoTxt != null
					&& cobrancaDocumentoTxt.length() != 0) {

				// criar o arquivo zip
				File compactado = new File(nomeZip + ".zip"); // nomeZip
				ZipOutputStream zos = new ZipOutputStream(new FileOutputStream(
						compactado));

				File leitura = new File(nomeZip + ".txt");
				BufferedWriter out = new BufferedWriter(new OutputStreamWriter(
						new FileOutputStream(leitura.getAbsolutePath())));
				out.write(cobrancaDocumentoTxt.toString());
				out.close();
				ZipUtil.adicionarArquivo(zos, leitura);

				// close the stream
				zos.close();
				leitura.delete();
			}
			System.out.println("***************************************");
			System.out.println("FIM DA CRIACAO DO ARQUIVO");
			System.out.println("***************************************");

		} catch (IOException e) {
			e.printStackTrace();
			throw new ControladorException("erro.sistema", e);
		} catch (Exception e) {
			e.printStackTrace();

			throw new ControladorException("erro.sistema", e);
		}


	}

	/**
	 * retorna o objeto ParcelamentoFaixaValor com o valor do debito(valorFaixa)
	 * com desconto maior q o da faixa e menor que próxima faixa
	 * 
	 * [UC0575] - Emitir Parcelamento em Atraso
	 * 
	 * @author Sávio Luiz
	 * @date 14/04/2007
	 * 
	 * @return
	 * @throws ErroRepositorioException
	 */
	public Parcelamento pesquisarDadosParcelamentoComMaiorTimestemp(
			Integer idImovel) throws ControladorException {
		Parcelamento parcelamento = null;
		Object[] dadosParcelamento = null;
		try {
			dadosParcelamento = repositorioCobranca
					.pesquisarDadosParcelamentoComMaiorTimestemp(idImovel);
		} catch (ErroRepositorioException e) {
			sessionContext.setRollbackOnly();
			throw new ControladorException("erro.sistema", e);
		}

		if (dadosParcelamento != null) {
			parcelamento = new Parcelamento();
			if (dadosParcelamento[0] != null) {
				parcelamento.setParcelamento((Date) dadosParcelamento[0]);
			}
			if (dadosParcelamento[1] != null) {
				parcelamento.setValorConta((BigDecimal) dadosParcelamento[1]);
			}
			if (dadosParcelamento[2] != null) {
				parcelamento
						.setValorServicosACobrar((BigDecimal) dadosParcelamento[2]);
			}
			if (dadosParcelamento[3] != null) {
				parcelamento
						.setValorAtualizacaoMonetaria((BigDecimal) dadosParcelamento[3]);
			}
			if (dadosParcelamento[4] != null) {
				parcelamento
						.setValorJurosMora((BigDecimal) dadosParcelamento[4]);
			}
			if (dadosParcelamento[5] != null) {
				parcelamento.setValorMulta((BigDecimal) dadosParcelamento[5]);
			}
			if (dadosParcelamento[6] != null) {
				parcelamento
						.setValorDescontoAcrescimos((BigDecimal) dadosParcelamento[6]);
			}
			if (dadosParcelamento[7] != null) {
				parcelamento
						.setValorDescontoAntiguidade((BigDecimal) dadosParcelamento[7]);
			}
			if (dadosParcelamento[8] != null) {
				parcelamento
						.setValorDescontoInatividade((BigDecimal) dadosParcelamento[8]);
			}
			if (dadosParcelamento[9] != null) {
				parcelamento.setValorEntrada((BigDecimal) dadosParcelamento[9]);
			}
			if (dadosParcelamento[10] != null) {
				parcelamento.setNumeroPrestacoes((Short) dadosParcelamento[10]);
			}
			if (dadosParcelamento[11] != null) {
				parcelamento
						.setValorPrestacao((BigDecimal) dadosParcelamento[11]);
			}
			if (dadosParcelamento[12] != null) {
				parcelamento
						.setValorJurosParcelamento((BigDecimal) dadosParcelamento[12]);
			}
			if (dadosParcelamento[13] != null) {
				parcelamento
						.setId((Integer) dadosParcelamento[13]);
			}
		}
		return parcelamento;
	}

	/**
	 * Consulta o id e a situação da ordem de serviço associada ao documento de
	 * cobrança passado como parâmetro
	 * 
	 * @author Sávio Luiz
	 * @created 13/04/2007
	 * 
	 * @exception ErroRepositorioException
	 *                Repositorio Exception
	 */
	public Object[] pesquisarDadosOrdemServicoDocumentoCobranca(
			Integer idDocumentoCobranca) throws ControladorException {
		try {
			return repositorioCobranca
					.pesquisarDadosOrdemServicoDocumentoCobranca(idDocumentoCobranca);
		} catch (ErroRepositorioException e) {
			sessionContext.setRollbackOnly();
			throw new ControladorException("erro.sistema", e);
		}
	}
	
	/**
	 * [UCXXXX] - Emitir Documento de Cobrança
	 * 
	 * @author Rafael Corrêa
	 * @date 02/09/2009
	 * 
	 * @return
	 * @throws ErroRepositorioException
	 */
	public Collection<RelatorioNotificacaoDebitoBean> gerarRelatorioNotificacaoDebito(
			Integer idCobrancaAcaoCronograma, Integer idCobrancaAcaoComando, int tamanhoMaximoDebito, String quantidadeRelatorios) throws ControladorException {
		
		Collection<RelatorioNotificacaoDebitoBean> retorno = new ArrayList<RelatorioNotificacaoDebitoBean>();
		
		try {
			Collection<CobrancaDocumento> colecaoDocumentoCobranca = repositorioCobranca
					.pesquisarCobrancaDocumentoParaRelatorio(idCobrancaAcaoCronograma, idCobrancaAcaoComando);

			for (CobrancaDocumento cobrancaDocumento : colecaoDocumentoCobranca) {
				Collection<Conta> contas = repositorioCobranca.pesquisarCobrancaDocumentoItem(cobrancaDocumento.getId());
				
				int count = 0;
				
				BigDecimal valor = new BigDecimal(0);
				
				String inscricao = getControladorImovel().pesquisarInscricaoImovel(cobrancaDocumento.getImovel().getId());
				String clienteUsuario = getControladorImovel().consultarClienteUsuarioImovel(cobrancaDocumento.getImovel().getId());
				String endereco = getControladorEndereco().pesquisarEndereco(cobrancaDocumento.getImovel().getId());
				String codigoRota = cobrancaDocumento.getImovel().getQuadra().getRota().getCodigo().toString();
				String sequencialRota = "";
					
				if(cobrancaDocumento.getImovel().getNumeroSequencialRota()!=null){	
					sequencialRota = cobrancaDocumento.getImovel().getNumeroSequencialRota().toString();
				}
				
				String representacaoNumericaCodBarra = "";

				// Obtém a representação numérica do
				// códigode
				// barra
				representacaoNumericaCodBarra = this
						.getControladorArrecadacao()
						.obterRepresentacaoNumericaCodigoBarra(
								5,
								cobrancaDocumento
										.getValorDocumento(),
								cobrancaDocumento.getLocalidade()
										.getId(),
								cobrancaDocumento.getImovel()
										.getId(),
								null,
								null,
								null,
								null,
								String
										.valueOf(cobrancaDocumento
												.getNumeroSequenciaDocumento()),
								cobrancaDocumento
										.getDocumentoTipo().getId(),
								null, null, null);

				// Formata a representação númerica do
				// código de
				// barras
				String representacaoNumericaCodBarraFormatada = representacaoNumericaCodBarra
						.substring(0, 11)
						+ "-"
						+ representacaoNumericaCodBarra.substring(
								11, 12)
						+ " "
						+ representacaoNumericaCodBarra.substring(
								12, 23)
						+ "-"
						+ representacaoNumericaCodBarra.substring(
								23, 24)
						+ " "
						+ representacaoNumericaCodBarra.substring(
								24, 35)
						+ "-"
						+ representacaoNumericaCodBarra.substring(
								35, 36)
						+ " "
						+ representacaoNumericaCodBarra.substring(
								36, 47)
						+ "-"
						+ representacaoNumericaCodBarra.substring(
								47, 48);
				
				String representacaoNumericaCodBarraSemDigito = representacaoNumericaCodBarra
				.substring(0, 11)
				+ representacaoNumericaCodBarra.substring(12, 23)
				+ representacaoNumericaCodBarra.substring(24, 35)
				+ representacaoNumericaCodBarra.substring(36, 47);
				
				for (Conta conta : contas) {
					count++;
					
					if ((contas.size() - count) > tamanhoMaximoDebito) {
						valor = valor.add(conta.getValorTotal());
					} else {
						
						RelatorioNotificacaoDebitoBean bean = new RelatorioNotificacaoDebitoBean();
						bean.setIdImovel(Util.retornaMatriculaImovelFormatada(cobrancaDocumento.getImovel().getId()));
						
						bean.setInscricao(inscricao);
						bean.setNomeCliente(clienteUsuario);
						bean.setEndereco(endereco);
						bean.setCodigoRota(codigoRota);
						bean.setSequencialRota(sequencialRota);
						bean.setIdDocumentoCobranca(cobrancaDocumento.getId());
						
						if ((contas.size() - count) == tamanhoMaximoDebito) {
							valor = valor.add(conta.getValorTotal());
							bean.setValor(valor);
							bean.setMesAno("ATÉ " + conta.getReferenciaFormatada());
						} else {
							bean.setValor(conta.getValorTotal());
							bean.setMesAno(conta.getReferenciaFormatada());
							bean.setDataVencimento(conta.getDataVencimentoConta());
						}
						
						bean.setRepresentacaoNumericaCodBarraFormatada(representacaoNumericaCodBarraFormatada);
						bean.setRepresentacaoNumericaCodBarraSemDigito(representacaoNumericaCodBarraSemDigito);
						
						retorno.add(bean);
						
					}
					
				}
				
				//adiciona linhas em branco no relatorio para alinhar, 
				//quando a quantidade de relatorios/pagina = 2 
				//e o numero de contas for menor que a metade do "tamanhoMaximoDebito"
				int metadeTamanhoMaxDebito = (tamanhoMaximoDebito + 1) /2;
				
				if(quantidadeRelatorios != null && quantidadeRelatorios.equals("2") && contas.size() < metadeTamanhoMaxDebito){
					for(int i = 0; i < (metadeTamanhoMaxDebito - contas.size()); i++){
						RelatorioNotificacaoDebitoBean bean = new RelatorioNotificacaoDebitoBean();
						bean.setIdImovel(Util.retornaMatriculaImovelFormatada(cobrancaDocumento.getImovel().getId()));

						bean.setInscricao(inscricao);
						bean.setNomeCliente(clienteUsuario);
						bean.setEndereco(endereco);
						bean.setCodigoRota(codigoRota);
						bean.setSequencialRota(sequencialRota);
						bean.setIdDocumentoCobranca(cobrancaDocumento.getId());
				
						bean.setRepresentacaoNumericaCodBarraFormatada(representacaoNumericaCodBarraFormatada);
						bean.setRepresentacaoNumericaCodBarraSemDigito(representacaoNumericaCodBarraSemDigito);
						
						retorno.add(bean);								
					}
				}
			}
			
		} catch (ErroRepositorioException e) {
			throw new ControladorException("erro.sistema", e);
		}
		
		return retorno;
	}

	/**
	 * [UC0394] - Gerar Débitos a Cobrar de Doações
	 * 
	 * 
	 * @author Sávio Luiz
	 * @date 09/05/2007
	 * 
	 * @param colecaoRotas,
	 *            Integer anoMesReferenciaDebito
	 * @return
	 * @throws ErroRepositorioException
	 */
	public void atualizarParcelamentoItensDebitoACobrar(
			Collection colecaoIdsDebitoACobrar) throws ControladorException {
		try {
			Collection colecaoIdsParcelamentosItens = repositorioCobranca
					.pesquisarIdsParcelamentosItemDebitoACobrar(colecaoIdsDebitoACobrar);
			if (colecaoIdsParcelamentosItens != null
					&& !colecaoIdsParcelamentosItens.isEmpty()) {
				repositorioCobranca
						.atualizarParcelamentosItemDebitoACobrar(colecaoIdsParcelamentosItens);
			}
		} catch (ErroRepositorioException e) {
			throw new ControladorException("erro.sistema", e);
		}
	}

	/**
	 * [UC0394] - Gerar Débitos a Cobrar de Doações
	 * 
	 * 
	 * @author Sávio Luiz
	 * @date 09/05/2007
	 * 
	 * @param colecaoRotas,
	 *            Integer anoMesReferenciaDebito
	 * @return
	 * @throws ErroRepositorioException
	 */
	public void removerDocumentosItensDebitoACobrar(
			Collection colecaoIdsDebitoACobrar) throws ControladorException {
		try {
			Collection colecaoIdsDocumentosItens = repositorioCobranca
					.pesquisarIdsCobrancaDocumentoItemDebitoACobrar(colecaoIdsDebitoACobrar);
			if (colecaoIdsDocumentosItens != null
					&& !colecaoIdsDocumentosItens.isEmpty()) {
				repositorioCobranca
						.deletarCobrancaDocumentoItemDebitoACobrar(colecaoIdsDocumentosItens);
			}
		} catch (ErroRepositorioException e) {
			throw new ControladorException("erro.sistema", e);
		}
	}

	/**
	 * Esta funcionalidade permite informar dados para geração de relatórios ou
	 * consultas
	 * 
	 * [UC0304] - Informar Dados para Geração de Relatório ou Consulta
	 * 
	 * @author Sávio Luiz, Raphael Rossiter
	 * @date 22/05/2007, 02/09/2010
	 * 
	 */
	public InformarDadosGeracaoResumoAcaoConsultaHelper informarDadosGeracaoResumoAcaoConsulta(
			String mesAnoFaturamento, String[] idsCobrancaGrupo,
			String[] idsGerenciaRegional,String[] idsUnidadeNegocio, Integer idEloPolo,
			Integer idLocalidade, Integer idSetorComercial, Integer nmQuadra,
			String[] idsImovelPerfil, String[] idsLigacaoAguaSituacao,
			String[] idsLigacaoEsgotoSituacao, String[] idsCategoria,
			String[] idsEsferaPoder, String[] idsEmpresas, String tipoImpressao)
			throws ControladorException {

		InformarDadosGeracaoResumoAcaoConsultaHelper retorno = new InformarDadosGeracaoResumoAcaoConsultaHelper();

		if (!Util.validarMesAno(mesAnoFaturamento)) {
			throw new ControladorException("atencao.ano_mes.invalido");
		}

		Integer anoMesReferencia = new Integer(Util
				.formatarMesAnoParaAnoMesSemBarra(mesAnoFaturamento));
		// SistemaParametro sistemaParametro =
		// this.getControladorUtil().pesquisarParametrosDoSistema();

		// if
		// (anoMesReferencia.compareTo(sistemaParametro.getAnoMesFaturamento())
		// == 1){
		// throw new
		// ControladorException("atencao.ano.mes.referencia.posterior.ano.mes.faturamento",
		// null,
		// String.valueOf(sistemaParametro.getAnoMesFaturamento()));
		// }

		retorno.setAnoMesReferencia(anoMesReferencia);
		// retorno.setDescricaoOpcaoTotalizacao(this.obterDescricaoOpcaoTotalizacao(opcaoTotalizacao));

		Collection colecaoPesquisa = null;
		if (idEloPolo != null) {

			FiltroLocalidade filtroLocalidade = new FiltroLocalidade();
			filtroLocalidade
					.adicionarCaminhoParaCarregamentoEntidade("localidade");

			filtroLocalidade.adicionarParametro(new ParametroSimples(
					FiltroLocalidade.ID, idEloPolo));

			filtroLocalidade.adicionarParametro(new ParametroSimples(
					FiltroLocalidade.INDICADORUSO,
					ConstantesSistema.INDICADOR_USO_ATIVO));

			colecaoPesquisa = this.getControladorUtil().pesquisar(
					filtroLocalidade, Localidade.class.getName());

			if (colecaoPesquisa == null || colecaoPesquisa.isEmpty()) {
				throw new ControladorException("atencao.pesquisa_inexistente",
						null, "Elo Pólo");
			} else {
				Localidade eloPolo = (Localidade) Util
						.retonarObjetoDeColecao(colecaoPesquisa);

				if (eloPolo.getLocalidade() == null) {
					throw new ControladorException("atencao.localidade.nao.elo");
				} else if (!eloPolo.getLocalidade().getId().equals(
						new Integer(eloPolo.getId()))) {

					throw new ControladorException("atencao.localidade.nao.elo");

				}

				retorno.setEloPolo(eloPolo);
			}
		}
		if (idLocalidade != null) {

			FiltroLocalidade filtroLocalidade = new FiltroLocalidade();

			filtroLocalidade.adicionarParametro(new ParametroSimples(
					FiltroLocalidade.ID, idLocalidade));

			filtroLocalidade.adicionarParametro(new ParametroSimples(
					FiltroLocalidade.INDICADORUSO,
					ConstantesSistema.INDICADOR_USO_ATIVO));

			colecaoPesquisa = this.getControladorUtil().pesquisar(
					filtroLocalidade, Localidade.class.getName());

			if (colecaoPesquisa == null || colecaoPesquisa.isEmpty()) {
				throw new ControladorException("atencao.pesquisa_inexistente",
						null, "Localidade");
			}

			Localidade localidade = (Localidade) Util
					.retonarObjetoDeColecao(colecaoPesquisa);

			retorno.setLocalidade(localidade);
		}
		if (idSetorComercial != null) {

			FiltroSetorComercial filtroSetorComercial = new FiltroSetorComercial();
			filtroSetorComercial
					.adicionarCaminhoParaCarregamentoEntidade("localidade");

			filtroSetorComercial.adicionarParametro(new ParametroSimples(
					FiltroSetorComercial.ID, idSetorComercial));

			filtroSetorComercial.adicionarParametro(new ParametroSimples(
					FiltroSetorComercial.INDICADORUSO,
					ConstantesSistema.INDICADOR_USO_ATIVO));

			colecaoPesquisa = this.getControladorUtil().pesquisar(
					filtroSetorComercial, SetorComercial.class.getName());

			if (colecaoPesquisa == null || colecaoPesquisa.isEmpty()) {
				throw new ControladorException("atencao.pesquisa_inexistente",
						null, "Setor Comercial");
			}

			SetorComercial setorComercial = (SetorComercial) Util
					.retonarObjetoDeColecao(colecaoPesquisa);

			retorno.setLocalidade(setorComercial.getLocalidade());
			retorno.setSetorComercial(setorComercial);

		}
		if (idSetorComercial != null && nmQuadra != null) {

			FiltroQuadra filtroQuadra = new FiltroQuadra();
			filtroQuadra
					.adicionarCaminhoParaCarregamentoEntidade("setorComercial.localidade");

			filtroQuadra.adicionarParametro(new ParametroSimples(
					FiltroQuadra.ID_SETORCOMERCIAL, idSetorComercial));

			filtroQuadra.adicionarParametro(new ParametroSimples(
					FiltroQuadra.NUMERO_QUADRA, nmQuadra));

			filtroQuadra.adicionarParametro(new ParametroSimples(
					FiltroQuadra.INDICADORUSO,
					ConstantesSistema.INDICADOR_USO_ATIVO));

			colecaoPesquisa = this.getControladorUtil().pesquisar(filtroQuadra,
					Quadra.class.getName());

			if (colecaoPesquisa == null || colecaoPesquisa.isEmpty()) {
				throw new ControladorException("atencao.pesquisa_inexistente",
						null, "Quadra");
			}

			Quadra quadra = (Quadra) Util
					.retonarObjetoDeColecao(colecaoPesquisa);

			retorno.setLocalidade(quadra.getSetorComercial().getLocalidade());
			retorno.setSetorComercial(quadra.getSetorComercial());
			retorno.setQuadra(quadra);

		}

		if (idsGerenciaRegional != null && idsGerenciaRegional.length > 0) {

			Collection colecaoGerenciaRegional = new ArrayList();
			FiltroGerenciaRegional filtroGerenciaRegional = new FiltroGerenciaRegional();

			GerenciaRegional gerenciaRegional = null;

			for (int index = 0; idsGerenciaRegional.length > index; index++) {

				if (idsGerenciaRegional[index] != null
						&& idsGerenciaRegional[index].length() > 0) {

					filtroGerenciaRegional
							.adicionarParametro(new ParametroSimples(
									FiltroGerenciaRegional.ID,
									idsGerenciaRegional[index]));

					filtroGerenciaRegional
							.adicionarParametro(new ParametroSimples(
									FiltroGerenciaRegional.INDICADOR_USO,
									ConstantesSistema.INDICADOR_USO_ATIVO));

					colecaoPesquisa = this.getControladorUtil().pesquisar(
							filtroGerenciaRegional,
							GerenciaRegional.class.getName());

					if (colecaoPesquisa == null || colecaoPesquisa.isEmpty()) {
						throw new ControladorException(
								"atencao.pesquisa_inexistente", null,
								"Gerencia Regional");
					}

					gerenciaRegional = (GerenciaRegional) Util
							.retonarObjetoDeColecao(colecaoPesquisa);
					filtroGerenciaRegional.limparListaParametros();

					colecaoGerenciaRegional.add(gerenciaRegional);
				}
			}

			if (!colecaoGerenciaRegional.isEmpty()) {
				retorno.setColecaoGerenciaRegional(colecaoGerenciaRegional);
			}

		}
		
		
		if (idsUnidadeNegocio != null && idsUnidadeNegocio.length > 0) {

			Collection colecaoUnidadeNegocio = new ArrayList();
			FiltroUnidadeNegocio filtroUnidadeNegocio = new FiltroUnidadeNegocio();

			UnidadeNegocio unidadeNegocio = null;

			for (int index = 0; idsUnidadeNegocio.length > index; index++) {

				if (idsUnidadeNegocio[index] != null
						&& idsUnidadeNegocio[index].length() > 0) {

					filtroUnidadeNegocio
							.adicionarParametro(new ParametroSimples(
									FiltroUnidadeNegocio.ID,
									idsUnidadeNegocio[index]));

					filtroUnidadeNegocio
							.adicionarParametro(new ParametroSimples(
									FiltroUnidadeNegocio.INDICADOR_USO,
									ConstantesSistema.INDICADOR_USO_ATIVO));

					colecaoPesquisa = this.getControladorUtil().pesquisar(
							filtroUnidadeNegocio,
							UnidadeNegocio.class.getName());

					if (colecaoPesquisa == null || colecaoPesquisa.isEmpty()) {
						throw new ControladorException(
								"atencao.pesquisa_inexistente", null,
								"Unidade de Negocio");
					}

					unidadeNegocio = (UnidadeNegocio) Util
							.retonarObjetoDeColecao(colecaoPesquisa);
					filtroUnidadeNegocio.limparListaParametros();

					colecaoUnidadeNegocio.add(unidadeNegocio);
				}
			}

			if (!colecaoUnidadeNegocio.isEmpty()) {
				retorno.setColecaoUnidadeNegocio(colecaoUnidadeNegocio);
			}

		}
		
		
		
		
		
		

		if (idsCobrancaGrupo != null && idsCobrancaGrupo.length > 0) {

			Collection colecaoCobrancaGrupo = new ArrayList();
			FiltroCobrancaGrupo filtroCobrancaGrupo = new FiltroCobrancaGrupo();

			CobrancaGrupo cobrancaGrupo = null;

			for (int index = 0; idsCobrancaGrupo.length > index; index++) {

				if (idsCobrancaGrupo[index] != null
						&& idsCobrancaGrupo[index].length() > 0) {

					filtroCobrancaGrupo
							.adicionarParametro(new ParametroSimples(
									FiltroCobrancaGrupo.ID,
									idsCobrancaGrupo[index]));

					filtroCobrancaGrupo
							.adicionarParametro(new ParametroSimples(
									FiltroCobrancaGrupo.INDICADOR_USO,
									ConstantesSistema.INDICADOR_USO_ATIVO));

					colecaoPesquisa = this.getControladorUtil().pesquisar(
							filtroCobrancaGrupo, CobrancaGrupo.class.getName());

					if (colecaoPesquisa == null || colecaoPesquisa.isEmpty()) {
						throw new ControladorException(
								"atencao.pesquisa_inexistente", null,
								"Cobrança Grupo");
					}

					cobrancaGrupo = (CobrancaGrupo) Util
							.retonarObjetoDeColecao(colecaoPesquisa);
					filtroCobrancaGrupo.limparListaParametros();

					colecaoCobrancaGrupo.add(cobrancaGrupo);
				}
			}

			if (!colecaoCobrancaGrupo.isEmpty()) {
				retorno.setColecaoCobrancaGrupo(colecaoCobrancaGrupo);
			}

		}

		if (idsImovelPerfil != null && idsImovelPerfil.length > 0) {

			Collection colecaoImovelPerfil = new ArrayList();
			FiltroImovelPerfil filtroImovelPerfil = new FiltroImovelPerfil();

			ImovelPerfil imovelPerfil = null;

			for (int index = 0; idsImovelPerfil.length > index; index++) {

				if (idsImovelPerfil[index] != null
						&& idsImovelPerfil[index].length() > 0) {

					filtroImovelPerfil.adicionarParametro(new ParametroSimples(
							FiltroImovelPerfil.ID, idsImovelPerfil[index]));

					filtroImovelPerfil.adicionarParametro(new ParametroSimples(
							FiltroImovelPerfil.INDICADOR_USO,
							ConstantesSistema.INDICADOR_USO_ATIVO));

					colecaoPesquisa = this.getControladorUtil().pesquisar(
							filtroImovelPerfil, ImovelPerfil.class.getName());

					if (colecaoPesquisa == null || colecaoPesquisa.isEmpty()) {
						throw new ControladorException(
								"atencao.pesquisa_inexistente", null,
								"Perfil do Imóvel");
					}

					imovelPerfil = (ImovelPerfil) Util
							.retonarObjetoDeColecao(colecaoPesquisa);
					filtroImovelPerfil.limparListaParametros();

					colecaoImovelPerfil.add(imovelPerfil);
				}
			}

			if (!colecaoImovelPerfil.isEmpty()) {
				retorno.setColecaoImovelPerfil(colecaoImovelPerfil);
			}

		}

		if (idsLigacaoAguaSituacao != null && idsLigacaoAguaSituacao.length > 0) {

			Collection colecaoLigacaoAguaSituacao = new ArrayList();
			FiltroLigacaoAguaSituacao filtroLigacaoAguaSituacao = new FiltroLigacaoAguaSituacao();

			LigacaoAguaSituacao ligacaoAguaSituacao = null;

			for (int index = 0; idsLigacaoAguaSituacao.length > index; index++) {

				if (idsLigacaoAguaSituacao[index] != null
						&& idsLigacaoAguaSituacao[index].length() > 0) {
					filtroLigacaoAguaSituacao
							.adicionarParametro(new ParametroSimples(
									FiltroLigacaoAguaSituacao.ID,
									idsLigacaoAguaSituacao[index]));

					filtroLigacaoAguaSituacao
							.adicionarParametro(new ParametroSimples(
									FiltroLigacaoAguaSituacao.INDICADOR_USO,
									ConstantesSistema.INDICADOR_USO_ATIVO));

					colecaoPesquisa = this.getControladorUtil().pesquisar(
							filtroLigacaoAguaSituacao,
							LigacaoAguaSituacao.class.getName());

					if (colecaoPesquisa == null || colecaoPesquisa.isEmpty()) {
						throw new ControladorException(
								"atencao.pesquisa_inexistente", null,
								"Ligação de Água");
					}

					ligacaoAguaSituacao = (LigacaoAguaSituacao) Util
							.retonarObjetoDeColecao(colecaoPesquisa);
					filtroLigacaoAguaSituacao.limparListaParametros();

					colecaoLigacaoAguaSituacao.add(ligacaoAguaSituacao);
				}
			}

			if (!colecaoLigacaoAguaSituacao.isEmpty()) {
				retorno
						.setColecaoLigacaoAguaSituacao(colecaoLigacaoAguaSituacao);
			}

		}

		if (idsLigacaoEsgotoSituacao != null
				&& idsLigacaoEsgotoSituacao.length > 0) {

			Collection colecaoLigacaoEsgotoSituacao = new ArrayList();
			FiltroLigacaoEsgotoSituacao filtroLigacaoEsgotoSituacao = new FiltroLigacaoEsgotoSituacao();

			LigacaoEsgotoSituacao ligacaoEsgotoSituacao = null;

			for (int index = 0; idsLigacaoEsgotoSituacao.length > index; index++) {

				if (idsLigacaoEsgotoSituacao[index] != null
						&& idsLigacaoEsgotoSituacao[index].length() > 0) {

					filtroLigacaoEsgotoSituacao
							.adicionarParametro(new ParametroSimples(
									FiltroLigacaoEsgotoSituacao.ID,
									idsLigacaoEsgotoSituacao[index]));

					filtroLigacaoEsgotoSituacao
							.adicionarParametro(new ParametroSimples(
									FiltroLigacaoEsgotoSituacao.INDICADOR_USO,
									ConstantesSistema.INDICADOR_USO_ATIVO));

					colecaoPesquisa = this.getControladorUtil().pesquisar(
							filtroLigacaoEsgotoSituacao,
							LigacaoEsgotoSituacao.class.getName());

					if (colecaoPesquisa == null || colecaoPesquisa.isEmpty()) {
						throw new ControladorException(
								"atencao.pesquisa_inexistente", null,
								"Ligação de Esgoto");
					}

					ligacaoEsgotoSituacao = (LigacaoEsgotoSituacao) Util
							.retonarObjetoDeColecao(colecaoPesquisa);
					filtroLigacaoEsgotoSituacao.limparListaParametros();

					colecaoLigacaoEsgotoSituacao.add(ligacaoEsgotoSituacao);
				}
			}

			if (!colecaoLigacaoEsgotoSituacao.isEmpty()) {
				retorno
						.setColecaoLigacaoEsgotoSituacao(colecaoLigacaoEsgotoSituacao);
			}

		}

		if (idsCategoria != null && idsCategoria.length > 0) {

			Collection colecaoCategoria = new ArrayList();
			FiltroCategoria filtroCategoria = new FiltroCategoria();

			Categoria categoria = null;

			for (int index = 0; idsCategoria.length > index; index++) {

				if (idsCategoria[index] != null
						&& idsCategoria[index].length() > 0) {

					filtroCategoria.adicionarParametro(new ParametroSimples(
							FiltroCategoria.CODIGO, idsCategoria[index]));

					filtroCategoria.adicionarParametro(new ParametroSimples(
							FiltroCategoria.INDICADOR_USO,
							ConstantesSistema.INDICADOR_USO_ATIVO));

					colecaoPesquisa = this.getControladorUtil().pesquisar(
							filtroCategoria, Categoria.class.getName());

					if (colecaoPesquisa == null || colecaoPesquisa.isEmpty()) {
						throw new ControladorException(
								"atencao.pesquisa_inexistente", null,
								"Categoria");
					}

					categoria = (Categoria) Util
							.retonarObjetoDeColecao(colecaoPesquisa);
					filtroCategoria.limparListaParametros();

					colecaoCategoria.add(categoria);
				}
			}

			if (!colecaoCategoria.isEmpty()) {
				retorno.setColecaoCategoria(colecaoCategoria);
			}
		}

		if (idsEsferaPoder != null && idsEsferaPoder.length > 0) {

			Collection colecaoEsferaPoder = new ArrayList();
			FiltroEsferaPoder filtroEsferaPoder = new FiltroEsferaPoder();

			EsferaPoder esferaPoder = null;

			for (int index = 0; idsEsferaPoder.length > index; index++) {

				if (idsEsferaPoder[index] != null
						&& idsEsferaPoder[index].length() > 0) {

					filtroEsferaPoder.adicionarParametro(new ParametroSimples(
							FiltroEsferaPoder.ID, idsEsferaPoder[index]));

					filtroEsferaPoder.adicionarParametro(new ParametroSimples(
							FiltroEsferaPoder.INDICADOR_USO,
							ConstantesSistema.INDICADOR_USO_ATIVO));

					colecaoPesquisa = this.getControladorUtil().pesquisar(
							filtroEsferaPoder, EsferaPoder.class.getName());

					if (colecaoPesquisa == null || colecaoPesquisa.isEmpty()) {
						throw new ControladorException(
								"atencao.pesquisa_inexistente", null,
								"Esfera de Poder");
					}

					esferaPoder = (EsferaPoder) Util
							.retonarObjetoDeColecao(colecaoPesquisa);
					filtroEsferaPoder.limparListaParametros();

					colecaoEsferaPoder.add(esferaPoder);
				}
			}

			if (!colecaoEsferaPoder.isEmpty()) {
				retorno.setColecaoEsferaPoder(colecaoEsferaPoder);
			}

		}

		if (idsEmpresas != null && idsEmpresas.length > 0) {

			Collection colecaoEmpresa = new ArrayList();
			FiltroEmpresa filtroEmpresa = new FiltroEmpresa();

			Empresa empresa = null;

			for (int index = 0; idsEmpresas.length > index; index++) {

				if (idsEmpresas[index] != null
						&& idsEmpresas[index].length() > 0) {

					filtroEmpresa.adicionarParametro(new ParametroSimples(
							FiltroEmpresa.ID, idsEmpresas[index]));

					filtroEmpresa.adicionarParametro(new ParametroSimples(
							FiltroEmpresa.INDICADORUSO,
							ConstantesSistema.INDICADOR_USO_ATIVO));

					colecaoPesquisa = this.getControladorUtil().pesquisar(
							filtroEmpresa, Empresa.class.getName());

					if (colecaoPesquisa == null || colecaoPesquisa.isEmpty()) {
						throw new ControladorException(
								"atencao.pesquisa_inexistente", null, "Empresa");
					}

					empresa = (Empresa) Util
							.retonarObjetoDeColecao(colecaoPesquisa);
					filtroEmpresa.limparListaParametros();

					colecaoEmpresa.add(empresa);
				}
			}

			if (!colecaoEmpresa.isEmpty()) {
				retorno.setColecaoEmpresa(colecaoEmpresa);
			}

		}
		
		/*
		 * Colocado por Raphael Rossiter em 02/09/2010
		 * TIPO DE IMPRESSÃO
		 */
		if (tipoImpressao == null || tipoImpressao.equals("")){
			
			throw new ControladorException("atencao.campo.informado", null, "Tipo da Impressão");
		}
		
		if (Util.validarValorNaoNumerico(tipoImpressao)){
			
			throw new ControladorException("atencao.campo_texto.caracter_invalido", null, "Tipo da Impressão");
		}

		retorno.setTipoImpressao(Integer.valueOf(tipoImpressao));

		
		return retorno;
	}
	
	/**
	 * Esta funcionalidade permite informar dados para geração de relatórios ou
	 * consultas
	 * 
	 * [UC0304] - Informar Dados para Geração de Relatório ou Consulta
	 * 
	 * @author Sávio Luiz, Raphael Rossiter
	 * @date 22/05/2007, 02/09/2010
	 * 
	 */
	public InformarDadosGeracaoResumoAcaoConsultaPeriodoHelper informarDadosGeracaoResumoAcaoConsultaPeriodo(
			String mesAnoInicialFaturamento, String mesAnoFinalFaturamento, String[] idsCobrancaGrupo,
			String[] idsGerenciaRegional,String[] idsUnidadeNegocio, Integer idEloPolo,
			Integer idLocalidade, Integer idSetorComercial, Integer nmQuadra,
			String[] idsImovelPerfil, String[] idsLigacaoAguaSituacao,
			String[] idsLigacaoEsgotoSituacao, String[] idsCategoria,
			String[] idsEsferaPoder, String[] idsEmpresas, String tipoImpressao)
			throws ControladorException {

		InformarDadosGeracaoResumoAcaoConsultaPeriodoHelper retorno = new InformarDadosGeracaoResumoAcaoConsultaPeriodoHelper();

		if (!Util.validarMesAno(mesAnoInicialFaturamento)) {
			throw new ControladorException("atencao.ano_mes.invalido");
		}
		
		if(!Util.validarMesAno(mesAnoFinalFaturamento)){
			throw new ControladorException("atencao.ano_mes.invalido");
		}

		Integer anoMesInicialReferencia = new Integer(Util
				.formatarMesAnoParaAnoMesSemBarra(mesAnoInicialFaturamento));
		
		retorno.setAnoMesInicialReferencia(anoMesInicialReferencia);
		
		Integer anoMesFinalReferencia = new Integer(Util
			.formatarMesAnoParaAnoMesSemBarra(mesAnoInicialFaturamento));
		
		retorno.setAnoMesFinalReferencia(anoMesFinalReferencia);
		
		Collection colecaoPesquisa = null;
		if (idEloPolo != null) {

			FiltroLocalidade filtroLocalidade = new FiltroLocalidade();
			filtroLocalidade
					.adicionarCaminhoParaCarregamentoEntidade("localidade");

			filtroLocalidade.adicionarParametro(new ParametroSimples(
					FiltroLocalidade.ID, idEloPolo));

			filtroLocalidade.adicionarParametro(new ParametroSimples(
					FiltroLocalidade.INDICADORUSO,
					ConstantesSistema.INDICADOR_USO_ATIVO));

			colecaoPesquisa = this.getControladorUtil().pesquisar(
					filtroLocalidade, Localidade.class.getName());

			if (colecaoPesquisa == null || colecaoPesquisa.isEmpty()) {
				throw new ControladorException("atencao.pesquisa_inexistente",
						null, "Elo Pólo");
			} else {
				Localidade eloPolo = (Localidade) Util
						.retonarObjetoDeColecao(colecaoPesquisa);

				if (eloPolo.getLocalidade() == null) {
					throw new ControladorException("atencao.localidade.nao.elo");
				} else if (!eloPolo.getLocalidade().getId().equals(
						new Integer(eloPolo.getId()))) {

					throw new ControladorException("atencao.localidade.nao.elo");

				}

				retorno.setEloPolo(eloPolo);
			}
		}
		if (idLocalidade != null) {

			FiltroLocalidade filtroLocalidade = new FiltroLocalidade();

			filtroLocalidade.adicionarParametro(new ParametroSimples(
					FiltroLocalidade.ID, idLocalidade));

			filtroLocalidade.adicionarParametro(new ParametroSimples(
					FiltroLocalidade.INDICADORUSO,
					ConstantesSistema.INDICADOR_USO_ATIVO));

			colecaoPesquisa = this.getControladorUtil().pesquisar(
					filtroLocalidade, Localidade.class.getName());

			if (colecaoPesquisa == null || colecaoPesquisa.isEmpty()) {
				throw new ControladorException("atencao.pesquisa_inexistente",
						null, "Localidade");
			}

			Localidade localidade = (Localidade) Util
					.retonarObjetoDeColecao(colecaoPesquisa);

			retorno.setLocalidade(localidade);
		}
		if (idSetorComercial != null) {

			FiltroSetorComercial filtroSetorComercial = new FiltroSetorComercial();
			filtroSetorComercial
					.adicionarCaminhoParaCarregamentoEntidade("localidade");

			filtroSetorComercial.adicionarParametro(new ParametroSimples(
					FiltroSetorComercial.ID, idSetorComercial));

			filtroSetorComercial.adicionarParametro(new ParametroSimples(
					FiltroSetorComercial.INDICADORUSO,
					ConstantesSistema.INDICADOR_USO_ATIVO));

			colecaoPesquisa = this.getControladorUtil().pesquisar(
					filtroSetorComercial, SetorComercial.class.getName());

			if (colecaoPesquisa == null || colecaoPesquisa.isEmpty()) {
				throw new ControladorException("atencao.pesquisa_inexistente",
						null, "Setor Comercial");
			}

			SetorComercial setorComercial = (SetorComercial) Util
					.retonarObjetoDeColecao(colecaoPesquisa);

			retorno.setLocalidade(setorComercial.getLocalidade());
			retorno.setSetorComercial(setorComercial);

		}
		if (idSetorComercial != null && nmQuadra != null) {

			FiltroQuadra filtroQuadra = new FiltroQuadra();
			filtroQuadra
					.adicionarCaminhoParaCarregamentoEntidade("setorComercial.localidade");

			filtroQuadra.adicionarParametro(new ParametroSimples(
					FiltroQuadra.ID_SETORCOMERCIAL, idSetorComercial));

			filtroQuadra.adicionarParametro(new ParametroSimples(
					FiltroQuadra.NUMERO_QUADRA, nmQuadra));

			filtroQuadra.adicionarParametro(new ParametroSimples(
					FiltroQuadra.INDICADORUSO,
					ConstantesSistema.INDICADOR_USO_ATIVO));

			colecaoPesquisa = this.getControladorUtil().pesquisar(filtroQuadra,
					Quadra.class.getName());

			if (colecaoPesquisa == null || colecaoPesquisa.isEmpty()) {
				throw new ControladorException("atencao.pesquisa_inexistente",
						null, "Quadra");
			}

			Quadra quadra = (Quadra) Util
					.retonarObjetoDeColecao(colecaoPesquisa);

			retorno.setLocalidade(quadra.getSetorComercial().getLocalidade());
			retorno.setSetorComercial(quadra.getSetorComercial());
			retorno.setQuadra(quadra);

		}

		if (idsGerenciaRegional != null && idsGerenciaRegional.length > 0) {

			Collection colecaoGerenciaRegional = new ArrayList();
			FiltroGerenciaRegional filtroGerenciaRegional = new FiltroGerenciaRegional();

			GerenciaRegional gerenciaRegional = null;

			for (int index = 0; idsGerenciaRegional.length > index; index++) {

				if (idsGerenciaRegional[index] != null
						&& idsGerenciaRegional[index].length() > 0) {

					filtroGerenciaRegional
							.adicionarParametro(new ParametroSimples(
									FiltroGerenciaRegional.ID,
									idsGerenciaRegional[index]));

					filtroGerenciaRegional
							.adicionarParametro(new ParametroSimples(
									FiltroGerenciaRegional.INDICADOR_USO,
									ConstantesSistema.INDICADOR_USO_ATIVO));

					colecaoPesquisa = this.getControladorUtil().pesquisar(
							filtroGerenciaRegional,
							GerenciaRegional.class.getName());

					if (colecaoPesquisa == null || colecaoPesquisa.isEmpty()) {
						throw new ControladorException(
								"atencao.pesquisa_inexistente", null,
								"Gerencia Regional");
					}

					gerenciaRegional = (GerenciaRegional) Util
							.retonarObjetoDeColecao(colecaoPesquisa);
					filtroGerenciaRegional.limparListaParametros();

					colecaoGerenciaRegional.add(gerenciaRegional);
				}
			}

			if (!colecaoGerenciaRegional.isEmpty()) {
				retorno.setColecaoGerenciaRegional(colecaoGerenciaRegional);
			}

		}
		
		if (idsUnidadeNegocio != null && idsUnidadeNegocio.length > 0) {

			Collection colecaoUnidadeNegocio = new ArrayList();
			FiltroUnidadeNegocio filtroUnidadeNegocio = new FiltroUnidadeNegocio();

			UnidadeNegocio unidadeNegocio = null;

			for (int index = 0; idsUnidadeNegocio.length > index; index++) {

				if (idsUnidadeNegocio[index] != null
						&& idsUnidadeNegocio[index].length() > 0) {

					filtroUnidadeNegocio
							.adicionarParametro(new ParametroSimples(
									FiltroUnidadeNegocio.ID,
									idsUnidadeNegocio[index]));

					filtroUnidadeNegocio
							.adicionarParametro(new ParametroSimples(
									FiltroUnidadeNegocio.INDICADOR_USO,
									ConstantesSistema.INDICADOR_USO_ATIVO));

					colecaoPesquisa = this.getControladorUtil().pesquisar(
							filtroUnidadeNegocio,
							UnidadeNegocio.class.getName());

					if (colecaoPesquisa == null || colecaoPesquisa.isEmpty()) {
						throw new ControladorException(
								"atencao.pesquisa_inexistente", null,
								"Unidade de Negocio");
					}

					unidadeNegocio = (UnidadeNegocio) Util
							.retonarObjetoDeColecao(colecaoPesquisa);
					filtroUnidadeNegocio.limparListaParametros();

					colecaoUnidadeNegocio.add(unidadeNegocio);
				}
			}

			if (!colecaoUnidadeNegocio.isEmpty()) {
				retorno.setColecaoUnidadeNegocio(colecaoUnidadeNegocio);
			}

		}
		
		if (idsCobrancaGrupo != null && idsCobrancaGrupo.length > 0) {

			Collection colecaoCobrancaGrupo = new ArrayList();
			FiltroCobrancaGrupo filtroCobrancaGrupo = new FiltroCobrancaGrupo();

			CobrancaGrupo cobrancaGrupo = null;

			for (int index = 0; idsCobrancaGrupo.length > index; index++) {

				if (idsCobrancaGrupo[index] != null
						&& idsCobrancaGrupo[index].length() > 0) {

					filtroCobrancaGrupo
							.adicionarParametro(new ParametroSimples(
									FiltroCobrancaGrupo.ID,
									idsCobrancaGrupo[index]));

					filtroCobrancaGrupo
							.adicionarParametro(new ParametroSimples(
									FiltroCobrancaGrupo.INDICADOR_USO,
									ConstantesSistema.INDICADOR_USO_ATIVO));

					colecaoPesquisa = this.getControladorUtil().pesquisar(
							filtroCobrancaGrupo, CobrancaGrupo.class.getName());

					if (colecaoPesquisa == null || colecaoPesquisa.isEmpty()) {
						throw new ControladorException(
								"atencao.pesquisa_inexistente", null,
								"Cobrança Grupo");
					}

					cobrancaGrupo = (CobrancaGrupo) Util
							.retonarObjetoDeColecao(colecaoPesquisa);
					filtroCobrancaGrupo.limparListaParametros();

					colecaoCobrancaGrupo.add(cobrancaGrupo);
				}
			}

			if (!colecaoCobrancaGrupo.isEmpty()) {
				retorno.setColecaoCobrancaGrupo(colecaoCobrancaGrupo);
			}

		}

		if (idsImovelPerfil != null && idsImovelPerfil.length > 0) {

			Collection colecaoImovelPerfil = new ArrayList();
			FiltroImovelPerfil filtroImovelPerfil = new FiltroImovelPerfil();

			ImovelPerfil imovelPerfil = null;

			for (int index = 0; idsImovelPerfil.length > index; index++) {

				if (idsImovelPerfil[index] != null
						&& idsImovelPerfil[index].length() > 0) {

					filtroImovelPerfil.adicionarParametro(new ParametroSimples(
							FiltroImovelPerfil.ID, idsImovelPerfil[index]));

					filtroImovelPerfil.adicionarParametro(new ParametroSimples(
							FiltroImovelPerfil.INDICADOR_USO,
							ConstantesSistema.INDICADOR_USO_ATIVO));

					colecaoPesquisa = this.getControladorUtil().pesquisar(
							filtroImovelPerfil, ImovelPerfil.class.getName());

					if (colecaoPesquisa == null || colecaoPesquisa.isEmpty()) {
						throw new ControladorException(
								"atencao.pesquisa_inexistente", null,
								"Perfil do Imóvel");
					}

					imovelPerfil = (ImovelPerfil) Util
							.retonarObjetoDeColecao(colecaoPesquisa);
					filtroImovelPerfil.limparListaParametros();

					colecaoImovelPerfil.add(imovelPerfil);
				}
			}

			if (!colecaoImovelPerfil.isEmpty()) {
				retorno.setColecaoImovelPerfil(colecaoImovelPerfil);
			}

		}

		if (idsLigacaoAguaSituacao != null && idsLigacaoAguaSituacao.length > 0) {

			Collection colecaoLigacaoAguaSituacao = new ArrayList();
			FiltroLigacaoAguaSituacao filtroLigacaoAguaSituacao = new FiltroLigacaoAguaSituacao();

			LigacaoAguaSituacao ligacaoAguaSituacao = null;

			for (int index = 0; idsLigacaoAguaSituacao.length > index; index++) {

				if (idsLigacaoAguaSituacao[index] != null
						&& idsLigacaoAguaSituacao[index].length() > 0) {
					filtroLigacaoAguaSituacao
							.adicionarParametro(new ParametroSimples(
									FiltroLigacaoAguaSituacao.ID,
									idsLigacaoAguaSituacao[index]));

					filtroLigacaoAguaSituacao
							.adicionarParametro(new ParametroSimples(
									FiltroLigacaoAguaSituacao.INDICADOR_USO,
									ConstantesSistema.INDICADOR_USO_ATIVO));

					colecaoPesquisa = this.getControladorUtil().pesquisar(
							filtroLigacaoAguaSituacao,
							LigacaoAguaSituacao.class.getName());

					if (colecaoPesquisa == null || colecaoPesquisa.isEmpty()) {
						throw new ControladorException(
								"atencao.pesquisa_inexistente", null,
								"Ligação de Água");
					}

					ligacaoAguaSituacao = (LigacaoAguaSituacao) Util
							.retonarObjetoDeColecao(colecaoPesquisa);
					filtroLigacaoAguaSituacao.limparListaParametros();

					colecaoLigacaoAguaSituacao.add(ligacaoAguaSituacao);
				}
			}

			if (!colecaoLigacaoAguaSituacao.isEmpty()) {
				retorno
						.setColecaoLigacaoAguaSituacao(colecaoLigacaoAguaSituacao);
			}

		}

		if (idsLigacaoEsgotoSituacao != null
				&& idsLigacaoEsgotoSituacao.length > 0) {

			Collection colecaoLigacaoEsgotoSituacao = new ArrayList();
			FiltroLigacaoEsgotoSituacao filtroLigacaoEsgotoSituacao = new FiltroLigacaoEsgotoSituacao();

			LigacaoEsgotoSituacao ligacaoEsgotoSituacao = null;

			for (int index = 0; idsLigacaoEsgotoSituacao.length > index; index++) {

				if (idsLigacaoEsgotoSituacao[index] != null
						&& idsLigacaoEsgotoSituacao[index].length() > 0) {

					filtroLigacaoEsgotoSituacao
							.adicionarParametro(new ParametroSimples(
									FiltroLigacaoEsgotoSituacao.ID,
									idsLigacaoEsgotoSituacao[index]));

					filtroLigacaoEsgotoSituacao
							.adicionarParametro(new ParametroSimples(
									FiltroLigacaoEsgotoSituacao.INDICADOR_USO,
									ConstantesSistema.INDICADOR_USO_ATIVO));

					colecaoPesquisa = this.getControladorUtil().pesquisar(
							filtroLigacaoEsgotoSituacao,
							LigacaoEsgotoSituacao.class.getName());

					if (colecaoPesquisa == null || colecaoPesquisa.isEmpty()) {
						throw new ControladorException(
								"atencao.pesquisa_inexistente", null,
								"Ligação de Esgoto");
					}

					ligacaoEsgotoSituacao = (LigacaoEsgotoSituacao) Util
							.retonarObjetoDeColecao(colecaoPesquisa);
					filtroLigacaoEsgotoSituacao.limparListaParametros();

					colecaoLigacaoEsgotoSituacao.add(ligacaoEsgotoSituacao);
				}
			}

			if (!colecaoLigacaoEsgotoSituacao.isEmpty()) {
				retorno
						.setColecaoLigacaoEsgotoSituacao(colecaoLigacaoEsgotoSituacao);
			}

		}

		if (idsCategoria != null && idsCategoria.length > 0) {

			Collection colecaoCategoria = new ArrayList();
			FiltroCategoria filtroCategoria = new FiltroCategoria();

			Categoria categoria = null;

			for (int index = 0; idsCategoria.length > index; index++) {

				if (idsCategoria[index] != null
						&& idsCategoria[index].length() > 0) {

					filtroCategoria.adicionarParametro(new ParametroSimples(
							FiltroCategoria.CODIGO, idsCategoria[index]));

					filtroCategoria.adicionarParametro(new ParametroSimples(
							FiltroCategoria.INDICADOR_USO,
							ConstantesSistema.INDICADOR_USO_ATIVO));

					colecaoPesquisa = this.getControladorUtil().pesquisar(
							filtroCategoria, Categoria.class.getName());

					if (colecaoPesquisa == null || colecaoPesquisa.isEmpty()) {
						throw new ControladorException(
								"atencao.pesquisa_inexistente", null,
								"Categoria");
					}

					categoria = (Categoria) Util
							.retonarObjetoDeColecao(colecaoPesquisa);
					filtroCategoria.limparListaParametros();

					colecaoCategoria.add(categoria);
				}
			}

			if (!colecaoCategoria.isEmpty()) {
				retorno.setColecaoCategoria(colecaoCategoria);
			}
		}

		if (idsEsferaPoder != null && idsEsferaPoder.length > 0) {

			Collection colecaoEsferaPoder = new ArrayList();
			FiltroEsferaPoder filtroEsferaPoder = new FiltroEsferaPoder();

			EsferaPoder esferaPoder = null;

			for (int index = 0; idsEsferaPoder.length > index; index++) {

				if (idsEsferaPoder[index] != null
						&& idsEsferaPoder[index].length() > 0) {

					filtroEsferaPoder.adicionarParametro(new ParametroSimples(
							FiltroEsferaPoder.ID, idsEsferaPoder[index]));

					filtroEsferaPoder.adicionarParametro(new ParametroSimples(
							FiltroEsferaPoder.INDICADOR_USO,
							ConstantesSistema.INDICADOR_USO_ATIVO));

					colecaoPesquisa = this.getControladorUtil().pesquisar(
							filtroEsferaPoder, EsferaPoder.class.getName());

					if (colecaoPesquisa == null || colecaoPesquisa.isEmpty()) {
						throw new ControladorException(
								"atencao.pesquisa_inexistente", null,
								"Esfera de Poder");
					}

					esferaPoder = (EsferaPoder) Util
							.retonarObjetoDeColecao(colecaoPesquisa);
					filtroEsferaPoder.limparListaParametros();

					colecaoEsferaPoder.add(esferaPoder);
				}
			}

			if (!colecaoEsferaPoder.isEmpty()) {
				retorno.setColecaoEsferaPoder(colecaoEsferaPoder);
			}

		}

		if (idsEmpresas != null && idsEmpresas.length > 0) {

			Collection colecaoEmpresa = new ArrayList();
			FiltroEmpresa filtroEmpresa = new FiltroEmpresa();

			Empresa empresa = null;

			for (int index = 0; idsEmpresas.length > index; index++) {

				if (idsEmpresas[index] != null
						&& idsEmpresas[index].length() > 0) {

					filtroEmpresa.adicionarParametro(new ParametroSimples(
							FiltroEmpresa.ID, idsEmpresas[index]));

					filtroEmpresa.adicionarParametro(new ParametroSimples(
							FiltroEmpresa.INDICADORUSO,
							ConstantesSistema.INDICADOR_USO_ATIVO));

					colecaoPesquisa = this.getControladorUtil().pesquisar(
							filtroEmpresa, Empresa.class.getName());

					if (colecaoPesquisa == null || colecaoPesquisa.isEmpty()) {
						throw new ControladorException(
								"atencao.pesquisa_inexistente", null, "Empresa");
					}

					empresa = (Empresa) Util
							.retonarObjetoDeColecao(colecaoPesquisa);
					filtroEmpresa.limparListaParametros();

					colecaoEmpresa.add(empresa);
				}
			}

			if (!colecaoEmpresa.isEmpty()) {
				retorno.setColecaoEmpresa(colecaoEmpresa);
			}

		}
		
		/*
		 * Colocado por Raphael Rossiter em 02/09/2010
		 * TIPO DE IMPRESSÃO
		 */
		if (tipoImpressao == null || tipoImpressao.equals("")){
			
			throw new ControladorException("atencao.campo.informado", null, "Tipo da Impressão");
		}
		
		if (Util.validarValorNaoNumerico(tipoImpressao)){
			
			throw new ControladorException("atencao.campo_texto.caracter_invalido", null, "Tipo da Impressão");
		}

		retorno.setTipoImpressao(Integer.valueOf(tipoImpressao));

		
		return retorno;
	}

	/**
	 * Pesquisar relação de protocolos de documentos de cobrança do cronograma
	 * 
	 * @author Ana Maria
	 * @date 15/05/2007
	 * 
	 * @return Collection
	 * @throws ErroRepositorioException
	 */
	public Collection pesquisarProtocoloDocumentoCobrancaCronograma(
			Integer idCobrancaAcaoAtividadeCronograma)
			throws ControladorException {

		Collection protocoloDocumentoCobranca = new ArrayList();
		try {
			protocoloDocumentoCobranca = repositorioCobranca
					.pesquisarProtocoloDocumentoCobrancaCronograma(idCobrancaAcaoAtividadeCronograma);
		} catch (ErroRepositorioException e) {
			throw new ControladorException("erro.sistema", e);
		}
		return protocoloDocumentoCobranca;
	}

	/**
	 * Pesquisar relação de protocolos de documentos de cobrança do eventual
	 * 
	 * @author Ana Maria
	 * @date 15/05/2007
	 * 
	 * @return Collection
	 * @throws ErroRepositorioException
	 */
	public Collection pesquisarProtocoloDocumentoCobrancaEventual(
			Integer idCobrancaAcaoAtividadeComand) throws ControladorException {

		Collection protocoloDocumentoCobranca = new ArrayList();
		try {
			protocoloDocumentoCobranca = repositorioCobranca
					.pesquisarProtocoloDocumentoCobrancaEventual(idCobrancaAcaoAtividadeComand);
		} catch (ErroRepositorioException e) {
			throw new ControladorException("erro.sistema", e);
		}
		return protocoloDocumentoCobranca;
	}

	/**
	 * Este caso de uso permite gerar o resumo das ações de cobrança com a
	 * atividade emitir já realizada e a atividade encerrar ainda não realizada
	 * e realizar a atividade encerrar das ações que estejam comandadas.
	 * 
	 * [UC0478] Gerar Resumo das Ações de Cobrança do Cronograma
	 * 
	 * Retorna os CBCR_ID da tabela COBRANCA_ACAO_CRONOGRAMA com CBCM_ID da
	 * tabela COBRANCA_GRUPO_CRONOGRAMA_MES
	 * 
	 * @author Rafael Santos,Sávio Luiz
	 * @date 16/10/2006,04/06/2007
	 * 
	 * @return Collection retorno
	 * @throws ErroRepositorioException
	 */
	public Collection pesquisarCobrancaAcaoCronograma(
			int idCobrancaGrupoCronogramaMes) throws ControladorException {
		try {
			return repositorioCobranca
					.pesquisarCobrancaAcaoCronograma(idCobrancaGrupoCronogramaMes);
		} catch (ErroRepositorioException e) {
			throw new ControladorException("erro.sistema", e);
		}
	}

	/**
	 * Este caso de uso permite gerar o resumo das ações de cobrança com a
	 * atividade emitir já realizada e a atividade encerrar ainda não realizada
	 * e realizar a atividade encerrar das ações que estejam comandadas.
	 * 
	 * [UC0478] Gerar Resumo das Ações de Cobrança do Cronograma
	 * 
	 * Retorna CAAC_TMREALIZACAO do COBRANCA_ATIVIDADE_ACAO_CRONOGRAMA
	 * 
	 * @author Rafael Santos,Sávio Luiz
	 * @date 16/10/2006,04/06/2007
	 * 
	 * @return Collection retorno
	 * @throws ErroRepositorioException
	 */
	public Collection pesquisarDataRelizacaoCobrancaAtividadeAcaoConograma(
			int idCobrancaAcaoCronograma, int idCobrancaAtividade)
			throws ControladorException {
		try {
			return repositorioCobranca
					.pesquisarDataRelizacaoCobrancaAtividadeAcaoConograma(
							idCobrancaAcaoCronograma, idCobrancaAtividade);
		} catch (ErroRepositorioException e) {
			throw new ControladorException("erro.sistema", e);
		}
	}

	/**
	 * [UC00609] Transferencia de Debitos/Creditos
	 * 
	 * [FS0004] Validar Registro Atendimento
	 * 
	 * @author Raphael Rossiter
	 * @created 05/06/2007
	 * 
	 * @param idSolicitacaoTipoEspecificacao
	 * @exception ControladorException
	 */
	public Object[] validarRegistroAtendimentoTransferenciaDebitoCredito(
			Integer idRA, boolean levantarExcecao) throws ControladorException {

		Object[] retorno = new Object[3];

		try {

			boolean continuarValidacao = true;

			Object[] dadosRegistroAtendimento = repositorioCobranca
					.pesquisarRegistroAtendimentoTransferenciaDebitoCredito(idRA);

			// Verificando existência do RA
			if (dadosRegistroAtendimento == null) {

				if (levantarExcecao) {
					throw new ControladorException(
							"atencao.pesquisa_inexistente", null,
							"Registro de Atendimento");
				} else {
					continuarValidacao = false;
					retorno[0] = "REGISTRO DE ATENDIMENTO INEXISTENTE";
					retorno[1] = new Short("1");
				}
			}

			if (continuarValidacao) {

				Integer idSolicitacaoTipoEspecificacao = (Integer) dadosRegistroAtendimento[1];
				Integer idImovel = (Integer) dadosRegistroAtendimento[3];
				Short codigoSituacaoRA = (Short) dadosRegistroAtendimento[4];

				// Verificando se o RA está associado a um imóvel
				if (idImovel == null) {
					throw new ControladorException(
							"atencao.registro_atendimento_sem_imovel");
				}

				// Verificando se o RA está encerrado
				if (codigoSituacaoRA != null
						&& codigoSituacaoRA
								.equals(RegistroAtendimento.SITUACAO_ENCERRADO)) {
					throw new ControladorException(
							"atencao.registro_atendimento_encerrado");
				}

				// Verificando se a Especificação do RA permite transferência de
				// débito
				EspecificacaoTipoValidacao especificacaoTipoValidacao = repositorioCobranca
						.pesquisarEspecificacaoTipoValidacaoTransferenciaDebitoCredito(idSolicitacaoTipoEspecificacao);

				if (especificacaoTipoValidacao == null) {
					throw new ControladorException(
							"atencao.solicitacao_tipo_especificacao_nao_permite_transferencia");
				}

				retorno[0] = (String) dadosRegistroAtendimento[2];
				retorno[1] = new Short("2");
				retorno[2] = idImovel;

			}

		} catch (ErroRepositorioException e) {
			throw new ControladorException("erro.sistema", e);
		}

		return retorno;
	}

	/**
	 * [UC00609] Transferencia de Debitos/Creditos
	 * 
	 * @author Raphael Rossiter
	 * @created 08/06/2007
	 * 
	 * @param idRA,
	 *            idImovelDestino
	 * @exception ControladorException
	 */
	public Integer validarTransferenciaDebitoCreditoDadosImoveis(Integer idRA,
			Integer idImovelDestino) throws ControladorException {

		Integer idImovelRA = null;

		// [FS0004] Validar Registro Atendimento
		Object[] dadosRA = this
				.validarRegistroAtendimentoTransferenciaDebitoCredito(idRA,
						true);
		idImovelRA = (Integer) dadosRA[2];

		// [FS0001] Verificar existência da matrícula do imóvel
		String inscricaoImovel = this.getControladorImovel()
				.pesquisarInscricaoImovel(idImovelDestino);

		if (inscricaoImovel == null) {
			throw new ControladorException("atencao.pesquisa_inexistente",
					null, "Imóvel");
		}

		if (idImovelRA.equals(idImovelDestino)) {
			throw new ControladorException(
					"atencao.imovel_ra_igual_imovel_destino");
		}
		
		// [FS0006] - Verificar Imóvel Destino
		SistemaParametro sistemaParametro = getControladorUtil().pesquisarParametrosDoSistema();
		
		if (sistemaParametro.getIndicadorTransferenciaComDebito().equals(ConstantesSistema.NAO)) {
			
			String anoMesInicial = "000101";
			String anoMesFinal = "999912";
			
			String dataVencimentoInicialFormatada = "01/01/0001";
			
			Date dataVencimentoInicial = Util.converteStringParaDate(dataVencimentoInicialFormatada);
			Date dataVencimentoFinal = Util.adicionarNumeroDiasDeUmaData(new Date(), 3); 
			
			
			ObterDebitoImovelOuClienteHelper obterDebitoImovelOuClienteHelper = this.obterDebitoImovelOuCliente(
					// Indicador de débito do imóvel
					1,
					
					// Matrícula do Imóvel
					idImovelDestino.toString(),
					
					// Código do Cliente
					null,
					
					// Tipo da Relação
					null, 
					
					// Mês/Ano Inicial de Referência do Débito
					anoMesInicial,
					
					// Mês/Ano Final de Referência do Débito
					anoMesFinal,
					
					// Data Vencimento Inicial
					dataVencimentoInicial,
					
					// Data Vencimento Final
					dataVencimentoFinal,
					
					// Indicador de Pagamento com Valor
					1,
					
					// Indicador de Conta em Revisão com Valor
					1,
					
					// Indicador de Débito a Cobrar com Valor
					1,
					
					// Indicador de Crédito a Realizar com Valor
					1,
					
					// Indicador de Notas Promissórias com Valor
					1,
					
					// Indicador de Guias de Pagamento com Valor
					1,
					
					// Indicador Calcular Acréscimos por Impontualidade
					1,
					
					// Indicador de Atualizar Débito com Valor
					true);
			
			if ((obterDebitoImovelOuClienteHelper.getColecaoContasValores() != null && !obterDebitoImovelOuClienteHelper.getColecaoContasValores().isEmpty()) ||
				(obterDebitoImovelOuClienteHelper.getColecaoContasValoresImovel() != null && !obterDebitoImovelOuClienteHelper.getColecaoContasValoresImovel().isEmpty()) ||
				(obterDebitoImovelOuClienteHelper.getColecaoCreditoARealizar() != null && !obterDebitoImovelOuClienteHelper.getColecaoCreditoARealizar().isEmpty()) ||
				(obterDebitoImovelOuClienteHelper.getColecaoDebitoACobrar() != null && !obterDebitoImovelOuClienteHelper.getColecaoDebitoACobrar().isEmpty()) ||
				(obterDebitoImovelOuClienteHelper.getColecaoDebitoCreditoParcelamentoHelper() != null && !obterDebitoImovelOuClienteHelper.getColecaoDebitoCreditoParcelamentoHelper().isEmpty()) ||
				(obterDebitoImovelOuClienteHelper.getColecaoGuiasPagamentoValores() != null && !obterDebitoImovelOuClienteHelper.getColecaoGuiasPagamentoValores().isEmpty())) {
				
				throw new ControladorException("atencao.imovel_destino_com_debito", null, idImovelDestino.toString());
				
			}
		}

		return idImovelRA;
	}

	/**
	 * [UC00609] Transferencia de Debitos/Creditos
	 * 
	 * [SB0001] - Apresentar Débitos/Créditos do Imóvel de Origem
	 * 
	 * [FS0002] - Verificar existência de débitos/créditos no imóvel de origem
	 * 
	 * @author Raphael Rossiter
	 * @created 08/06/2007
	 * 
	 * @param idImovelOrigem
	 * @exception ControladorException
	 */
	public ObterDebitoImovelOuClienteHelper apresentarDebitoCreditoImovelOrigem(
			Integer idImovelOrigem) throws ControladorException {

		Date dataVencimentoInicial = Util.criarData(1, 1, 0001);
		Date dataVencimentoFinal = Util.criarData(31, 12, 9999);

		// [UC0067] Obter Débito do Imóvel ou Cliente
		ObterDebitoImovelOuClienteHelper imovelDebitoCredito = this
				.obterDebitoImovelOuCliente(1, idImovelOrigem.toString(), null,
						null, "000101", "999912", dataVencimentoInicial,
						dataVencimentoFinal, 1, 1, 1, 1, 1, 1, 1, true);

		boolean existeDebitoCredito = false;

		// CONTA
		if (imovelDebitoCredito.getColecaoContasValoresImovel() != null
				&& !imovelDebitoCredito.getColecaoContasValoresImovel()
						.isEmpty()) {
			existeDebitoCredito = true;
		}

		// DEBITO_A_COBRAR
		if (imovelDebitoCredito.getColecaoDebitoACobrar() != null
				&& !imovelDebitoCredito.getColecaoDebitoACobrar().isEmpty()) {
			existeDebitoCredito = true;

			Collection<DebitoACobrar> colecaoDebitoACobrarNaoParcelamento = new ArrayList();

			/*
			 * Alterado por Raphael Rossiter em 25/10/2007
			 * 
			 * Selecionar apenas os débitos que não sejam de parcelamento onde o
			 * tipo de financiamento associado a ele seja DIFERENTE de 2 -
			 * PARCELAMENTO_AGUA ,3 - PARCELAMENTO_ESGOTO ,4 -
			 * PARCELAMENTO_SERVICO, 8 - JUROS_PARCELAMENTO
			 */
			Iterator itColecaoDebitoACobrar = imovelDebitoCredito
					.getColecaoDebitoACobrar().iterator();

			Collection colecaoDebitoTipo = null;
			FiltroDebitoTipo filtroDebitoTipo = new FiltroDebitoTipo();
			DebitoTipo debitoTipo = null;

			while (itColecaoDebitoACobrar.hasNext()) {

				DebitoACobrar debitoACobrar = (DebitoACobrar) itColecaoDebitoACobrar
						.next();

				filtroDebitoTipo
						.adicionarCaminhoParaCarregamentoEntidade("financiamentoTipo");

				filtroDebitoTipo.adicionarParametro(new ParametroSimples(
						FiltroDebitoTipo.ID, debitoACobrar.getDebitoTipo()
								.getId()));

				colecaoDebitoTipo = this.getControladorUtil().pesquisar(
						filtroDebitoTipo, DebitoTipo.class.getName());

				debitoTipo = (DebitoTipo) Util
						.retonarObjetoDeColecao(colecaoDebitoTipo);

				if (!debitoTipo.getFinanciamentoTipo().getId().equals(
						FinanciamentoTipo.PARCELAMENTO_AGUA)
						&& !debitoTipo.getFinanciamentoTipo().getId().equals(
								FinanciamentoTipo.PARCELAMENTO_ESGOTO)
						&& !debitoTipo.getFinanciamentoTipo().getId().equals(
								FinanciamentoTipo.PARCELAMENTO_SERVICO)
						&& !debitoTipo.getFinanciamentoTipo().getId().equals(
								FinanciamentoTipo.JUROS_PARCELAMENTO)) {

					colecaoDebitoACobrarNaoParcelamento.add(debitoACobrar);
				}

				filtroDebitoTipo.limparListaParametros();
			}

			imovelDebitoCredito
					.setColecaoDebitoACobrar(colecaoDebitoACobrarNaoParcelamento);
		}

		// CREDITO_A_REALIZAR
		if (imovelDebitoCredito.getColecaoCreditoARealizar() != null
				&& !imovelDebitoCredito.getColecaoCreditoARealizar().isEmpty()) {
			existeDebitoCredito = true;

			Collection<CreditoARealizar> colecaoCreditoARealizarNaoParcelamento = new ArrayList();

			// Selecionar apenas os créditos que não sejam de parcelamento
			Iterator itColecaoCreditoARealizar = imovelDebitoCredito
					.getColecaoCreditoARealizar().iterator();

			while (itColecaoCreditoARealizar.hasNext()) {

				CreditoARealizar creditoARealizar = (CreditoARealizar) itColecaoCreditoARealizar
						.next();

				if (!creditoARealizar.getCreditoTipo().getId().equals(
						CreditoTipo.DESCONTO_INATIVIDADE_LIGACAO_AGUA)
						&& !creditoARealizar.getCreditoTipo().getId().equals(
								CreditoTipo.DESCONTO_ANTIGUIDADE_DEBITO)) {

					colecaoCreditoARealizarNaoParcelamento
							.add(creditoARealizar);
				}
			}

			imovelDebitoCredito
					.setColecaoCreditoARealizar(colecaoCreditoARealizarNaoParcelamento);
		}

		// GUIA_PAGAMENTO
		if (imovelDebitoCredito.getColecaoGuiasPagamentoValores() != null
				&& !imovelDebitoCredito.getColecaoGuiasPagamentoValores()
						.isEmpty()) {
			existeDebitoCredito = true;

			Collection<GuiaPagamentoValoresHelper> colecaoGuiasPagamentoValoresNaoParcelamento = new ArrayList();

			// Selecionar apenas as guias que não sejam de entrada de
			// parcelamento
			Iterator itColecaoGuiasPagamentoValoresNaoParcelamento = imovelDebitoCredito
					.getColecaoGuiasPagamentoValores().iterator();

			while (itColecaoGuiasPagamentoValoresNaoParcelamento.hasNext()) {

				GuiaPagamentoValoresHelper guiaPagamentoValoresHelper = (GuiaPagamentoValoresHelper) itColecaoGuiasPagamentoValoresNaoParcelamento
						.next();

				if (!guiaPagamentoValoresHelper.getGuiaPagamento()
						.getDebitoTipo().getId().equals(
								DebitoTipo.ENTRADA_PARCELAMENTO)) {

					colecaoGuiasPagamentoValoresNaoParcelamento
							.add(guiaPagamentoValoresHelper);
				}
			}

			imovelDebitoCredito
					.setColecaoGuiasPagamentoValores(colecaoGuiasPagamentoValoresNaoParcelamento);
		}

		// [FS0002] - Verificar existência de débitos/créditos no imóvel de
		// origem
		if (!existeDebitoCredito) {
			throw new ControladorException(
					"atencao.imovel_origem_sem_debito_credito");
		}

		return imovelDebitoCredito;
	}

	/**
	 * [UC0609] Transferência de Débitos/Créditos
	 * 
	 * [SB00002] Transferência dos Débitos/Créditos selecionados para o imóvel
	 * destino
	 * 
	 * @author Vivianne Sousa
	 * @date 09/06/2007
	 * 
	 * @param idImovelDestino
	 * @param colecaoConta
	 * @param colecaoDebitosACobrar
	 * @param colecaoCreditosARealizar
	 * @param colecaoGuiasPagamento
	 * @throws ControladorException
	 */
	public void transferirDebitosCreditos(Integer idImovelDestino,
			Collection colecaoContas, Collection colecaoDebitosACobrar,
			Collection colecaoCreditosARealizar,
			Collection colecaoGuiasPagamento, Usuario usuarioLogado,
			Integer idRegistroAtendimento, String identificadoresConta)
			throws ControladorException {
		
		RegistroAtendimento registroAtendimento = new RegistroAtendimento();
		registroAtendimento.setId(idRegistroAtendimento);

		Imovel imovelDestino = this.getControladorImovel()
				.pesquisarImovelRegistroAtendimento(idImovelDestino);

		// 1.Caso exista conta selecionada na Coleção de Contas
		if (colecaoContas != null && !colecaoContas.isEmpty()) {

			ContaMotivoCancelamento contaMotivoCancelamento = new ContaMotivoCancelamento();
			contaMotivoCancelamento
					.setId(ContaMotivoCancelamento.TRASFERENCIA_DE_COBRANCA);

			Iterator iterContas = colecaoContas.iterator();
			while (iterContas.hasNext()) {
				Conta conta = (Conta) iterContas.next();

				// 1.1.2.
				// o sistema passa a conta cancelada do imóvel origem para
				// inclusão
				this.inserirContaTransferencia(conta, imovelDestino,
						usuarioLogado);

				Collection colecaoContaRemover = new ArrayList();
				colecaoContaRemover.add(conta);

				// 1.1.1.
				// o sistema passa a conta a ser transferida para cancelamento
				// com o motivo de "TRANSFERÊNCIA CONTA"
				this.getControladorFaturamento().cancelarConta(
						colecaoContaRemover, identificadoresConta,
						contaMotivoCancelamento, usuarioLogado, false);
			}
		}

		// 2.Caso exista débito a cobrar selecionada na Coleção de débitos a
		// cobrar
		if (colecaoDebitosACobrar != null && !colecaoDebitosACobrar.isEmpty()) {

			Iterator iterDebitosACobrar = colecaoDebitosACobrar.iterator();
			while (iterDebitosACobrar.hasNext()) {

				DebitoACobrar debitosACobrar = (DebitoACobrar) iterDebitosACobrar
						.next();

				// 2.1.2.
				// o sistema passa o débito a cobrar do imóvel origem para
				// inclusão
				this.inserirDebitoACobrarTransferencia(debitosACobrar,
						imovelDestino, usuarioLogado, registroAtendimento);

				// 2.1.1.
				// o sistema passa o débito a cobrar a ser transferido para
				// cancelamento
				this.cancelarDebitoACobrarTransferencia(debitosACobrar.getId(),
						usuarioLogado);
			}
		}

		// 3.Caso exista crédito a realizar selecionada na Coleção de créditos a
		// realizar
		if (colecaoCreditosARealizar != null
				&& !colecaoCreditosARealizar.isEmpty()) {

			Iterator iterCreditosARealizar = colecaoCreditosARealizar
					.iterator();
			while (iterCreditosARealizar.hasNext()) {

				CreditoARealizar creditoARealizar = (CreditoARealizar) iterCreditosARealizar
						.next();

				// 3.1.2.
				// o sistema passa o crédito a realizar do imóvel origem para
				// inclusão
				this.inserirCreditoARealizarTransferencia(imovelDestino,
						creditoARealizar, usuarioLogado, registroAtendimento);

				// 3.1.1.
				// o sistema passa o crédito a realizar a ser transferido para
				// cancelamento
				this.cancelarCreditoARealizarTransferencia(creditoARealizar
						.getId(), creditoARealizar.getImovel(), usuarioLogado);
			}

		}

		// 4.Caso exista guia de pagamento selecionada na Coleção de guias de
		// pagamento
		if (colecaoGuiasPagamento != null && !colecaoGuiasPagamento.isEmpty()) {

			Iterator iterGuiasPagamento = colecaoGuiasPagamento.iterator();
			while (iterGuiasPagamento.hasNext()) {

				GuiaPagamento guiaPagamento = (GuiaPagamento) iterGuiasPagamento
						.next();

				// 3.1.2.
				// o sistema passa a guia de pagamento do imóvel origem para
				// inclusão
				this.inserirGuiaPagamentoTransferencia(guiaPagamento,
						usuarioLogado, imovelDestino, registroAtendimento);

				// 3.1.1.
				// o sistema passa a guia de pagamento a ser transferido para
				// cancelamento
				this.manterGuiaPagamentoTransferencia(guiaPagamento,
						usuarioLogado);

			}
		}

	}

	/**
	 * [US0184] Manter Débito A Cobrar Author: Vivianne Sousa Data: 11/06/2007
	 * 
	 * @param idDebitoAcobrar
	 * @param usuarioLogado
	 * @throws ControladorException
	 */
	public void cancelarDebitoACobrarTransferencia(Integer idDebitoAcobrar,
			Usuario usuarioLogado) throws ControladorException {



		FiltroDebitoACobrar filtroDebitoACobrar = new FiltroDebitoACobrar();

		filtroDebitoACobrar
				.adicionarCaminhoParaCarregamentoEntidade(FiltroDebitoACobrar.DEBITO_CREDITO_SITUACAO);
		filtroDebitoACobrar
				.adicionarCaminhoParaCarregamentoEntidade(FiltroDebitoACobrar.IMOVEL);

		filtroDebitoACobrar.adicionarParametro(new ParametroSimples(
				FiltroDebitoACobrar.ID, idDebitoAcobrar));

		Collection colecaoDebitosACobrar = getControladorUtil().pesquisar(
				filtroDebitoACobrar, DebitoACobrar.class.getName());

		DebitoACobrar debitoACobrar = (DebitoACobrar) colecaoDebitosACobrar
				.iterator().next();

		debitoACobrar.setDebitoCreditoSituacaoAnterior(debitoACobrar
				.getDebitoCreditoSituacaoAtual());
		DebitoCreditoSituacao debitoCreditoSituacao = new DebitoCreditoSituacao();
		debitoCreditoSituacao.setId(DebitoCreditoSituacao.CANCELADA);
		debitoACobrar.setDebitoCreditoSituacaoAtual(debitoCreditoSituacao);
		debitoACobrar.setUsuario(usuarioLogado);

		debitoACobrar.setUltimaAlteracao(new Date());
		
		// ------------ REGISTRAR TRANSAÇÃO ----------------
		RegistradorOperacao registradorOperacao = new RegistradorOperacao(
		    Operacao.OPERACAO_DEBITO_A_COBRAR_CANCELAR,
		    debitoACobrar.getImovel().getId(),debitoACobrar.getImovel().getId(),
		    new UsuarioAcaoUsuarioHelper(usuarioLogado,
		    UsuarioAcao.USUARIO_ACAO_EFETUOU_OPERACAO));

		registradorOperacao.registrarOperacao(debitoACobrar);

		// ------------ REGISTRAR TRANSAÇÃO ----------------

		
		getControladorUtil().atualizar(debitoACobrar);

	}

	/**
	 * [UC0183] - Inserir Débito A Cobrar
	 * 
	 * @author Vivianne Sousa
	 * @date 11/06/2007
	 * 
	 * @param debitoACobrar
	 * @param imovelDestino
	 * @param usuarioLogado
	 * @param colecaoDebitoACobrarCategoria
	 * @param registroAtendimento
	 * @param debitoCreditoSituacaoAtual
	 * @param debitoCreditoSituacaoAnterior
	 * @throws ControladorException
	 */
	public void inserirDebitoACobrarTransferencia(
			DebitoACobrar debitoACobrarOrigem, Imovel imovelDestino,
			Usuario usuarioLogado, RegistroAtendimento registroAtendimento)
			throws ControladorException {

		// CARREGANDO O DEBITO DESTINO
		// ========================================================
		FiltroDebitoACobrar filtroDebitoACobrar = new FiltroDebitoACobrar();

		filtroDebitoACobrar
				.adicionarCaminhoParaCarregamentoEntidade("parcelamento");
		filtroDebitoACobrar
				.adicionarCaminhoParaCarregamentoEntidade("financiamentoTipo");
		filtroDebitoACobrar
				.adicionarCaminhoParaCarregamentoEntidade("documentoTipo");
		filtroDebitoACobrar
				.adicionarCaminhoParaCarregamentoEntidade("ordemServico");
		filtroDebitoACobrar
				.adicionarCaminhoParaCarregamentoEntidade("debitoTipo");
		filtroDebitoACobrar
				.adicionarCaminhoParaCarregamentoEntidade("lancamentoItemContabil");
		filtroDebitoACobrar
				.adicionarCaminhoParaCarregamentoEntidade("parcelamentoGrupo");
		filtroDebitoACobrar
				.adicionarCaminhoParaCarregamentoEntidade("cobrancaForma");
		filtroDebitoACobrar
				.adicionarCaminhoParaCarregamentoEntidade("debitoCreditoSituacaoAnterior");
		filtroDebitoACobrar
				.adicionarCaminhoParaCarregamentoEntidade("debitoCreditoSituacaoAtual");

		filtroDebitoACobrar.adicionarParametro(new ParametroSimples(
				FiltroDebitoACobrar.ID, debitoACobrarOrigem.getId()));

		Collection colecaoDebitoACobrar = this.getControladorUtil().pesquisar(
				filtroDebitoACobrar, DebitoACobrar.class.getName());

		DebitoACobrar debitoACobrar = (DebitoACobrar) colecaoDebitoACobrar
				.iterator().next();

		debitoACobrar.setDebitoACobrarCategorias(null);
		// ===================================================================================

		// DADOS CADASTRAIS
		// =================================================================
        //alterado por Vivianne Sousa data:15/04/2008
        //analista: Adriano
		short numeroPrestacoesDebito = debitoACobrarOrigem.getParcelasRestanteComBonus();
//            debitoACobrarOrigem.getNumeroPrestacaoDebito()
//				- debitoACobrarOrigem.getNumeroPrestacaoCobradas();
        
		/*
		 * Colocado por Raphael Rossiter em 05/08/2008
		 * [SB0003] - Obter Valor Débito/Crédito.
		 */
		debitoACobrar.setValorDebito(debitoACobrar.getValorTotal());
		
		debitoACobrar.setNumeroPrestacaoDebito(numeroPrestacoesDebito);
		debitoACobrar.setNumeroPrestacaoCobradas((short) 0);
		debitoACobrar.setCodigoSetorComercial(imovelDestino.getSetorComercial()
				.getCodigo());
		debitoACobrar.setImovel(imovelDestino);
		debitoACobrar.setLocalidade(imovelDestino.getLocalidade());
		debitoACobrar.setNumeroLote(imovelDestino.getLote());
		debitoACobrar.setNumeroQuadra(imovelDestino.getQuadra()
				.getNumeroQuadra());
		debitoACobrar.setNumeroSubLote(imovelDestino.getSubLote());
		debitoACobrar.setQuadra(imovelDestino.getQuadra());

		debitoACobrar.setRegistroAtendimento(registroAtendimento);

		DebitoACobrarGeral debitoACobrarGeralOrigem = new DebitoACobrarGeral();
		debitoACobrarGeralOrigem.setId(debitoACobrar.getId());
		debitoACobrar.setDebitoACobrarGeralOrigem(debitoACobrarGeralOrigem);
		debitoACobrar.setId(null);

		// Insere o DebitoACobrarGeral na tabela debito_a_cobrar_geral
		DebitoACobrarGeral debitoACobrarGeral = new DebitoACobrarGeral();
		Short indicadorHistorico = 2;
		debitoACobrarGeral.setIndicadorHistorico(indicadorHistorico);
		debitoACobrarGeral.setUltimaAlteracao(new Date());
		// ================================================================================

		Integer idDebitoGerado = (Integer) this.getControladorUtil().inserir(
				debitoACobrarGeral);
		debitoACobrarGeral.setId(idDebitoGerado);

		debitoACobrar.setDebitoACobrarGeral(debitoACobrarGeral);
		debitoACobrar.setId(idDebitoGerado);
		debitoACobrar.setUsuario(usuarioLogado);

		
		// ------------ REGISTRAR TRANSAÇÃO ----------------
		RegistradorOperacao registradorOperacao = new RegistradorOperacao(
				Operacao.OPERACAO_DEBITO_A_COBRAR_INSERIR,
		    debitoACobrar.getImovel().getId(),debitoACobrar.getImovel().getId(),
		    new UsuarioAcaoUsuarioHelper(usuarioLogado,
		    UsuarioAcao.USUARIO_ACAO_EFETUOU_OPERACAO));

		registradorOperacao.registrarOperacao(debitoACobrar);

		// ------------ REGISTRAR TRANSAÇÃO ----------------

		
		getControladorUtil().inserir(debitoACobrar);

		// DEBITO_A_COBRAR_CATEGORIA
		// ========================================================
//		FiltroDebitoACobrarCategoria filtroDebitoACobrarCategoria = new FiltroDebitoACobrarCategoria();
//
//		filtroDebitoACobrarCategoria
//				.adicionarCaminhoParaCarregamentoEntidade("comp_id.debitoACobrar");
//		filtroDebitoACobrarCategoria
//				.adicionarCaminhoParaCarregamentoEntidade("comp_id.categoria");
//		filtroDebitoACobrarCategoria
//				.adicionarCaminhoParaCarregamentoEntidade("categoria");
//		filtroDebitoACobrarCategoria
//				.adicionarCaminhoParaCarregamentoEntidade("debitoACobrar");
//
//		filtroDebitoACobrarCategoria.adicionarParametro(new ParametroSimples(
//				FiltroDebitoACobrarCategoria.ID_DEBITO_A_COBRAR,
//				debitoACobrarOrigem.getId()));
//
//		Collection colecaoDebitoACobrarCategoria = this.getControladorUtil()
//				.pesquisar(filtroDebitoACobrarCategoria,
//						DebitoACobrarCategoria.class.getName());
//
//		Integer qtdDebitoACobrarCategoria = colecaoDebitoACobrarCategoria.size(); 
		
		// Inserir DebitoACobrarCategoria
		////////
		
		Collection colecaoCategorias = getControladorImovel()
				.obterQuantidadeEconomiasCategoria(debitoACobrarOrigem.getImovel());
		
		Collection<BigDecimal> colecaoValorPorCategoria = getControladorImovel()
				.obterValorPorCategoria(colecaoCategorias, debitoACobrar.getValorTotal());
			
		// Cria as iterações de categoria e valor
		Iterator iteratorCategoria = colecaoCategorias.iterator();
		Iterator iteratorValorCategoria = colecaoValorPorCategoria.iterator();

		// Laço para criar os débitos a cobrar por categoria
		while (iteratorCategoria.hasNext()) {
			// Recupera a categoria
			Categoria categoria = (Categoria) iteratorCategoria.next();

			// Recupera o valor da categoria
			BigDecimal valorPorCategoria = (BigDecimal) iteratorValorCategoria.next();

			// Cria o débito a cobrar categoria
			DebitoACobrarCategoria debitoACobrarCategoria = new DebitoACobrarCategoria();
			DebitoACobrarCategoriaPK debitoACobrarCategoriaPK = new DebitoACobrarCategoriaPK(
					debitoACobrar, categoria);
			debitoACobrarCategoria.setComp_id(debitoACobrarCategoriaPK);
			debitoACobrarCategoria.setDebitoACobrar(debitoACobrar);
			debitoACobrarCategoria.setCategoria(categoria);
			debitoACobrarCategoria.setQuantidadeEconomia(categoria
					.getQuantidadeEconomiasCategoria());
			debitoACobrarCategoria.setValorCategoria(valorPorCategoria);
			debitoACobrarCategoria.setUltimaAlteracao(new Date());

			//Inclui na tabela DEBITO_A_COBRAR_CATEGORIA
			getControladorUtil().inserir(debitoACobrarCategoria);
		}
		/////
//		Iterator icolecaoDebitoACobrarCategoria = colecaoDebitoACobrarCategoria
//				.iterator();
//		
//		while (icolecaoDebitoACobrarCategoria.hasNext()) {
//
//			DebitoACobrarCategoria debitoACobrarCategoria = (DebitoACobrarCategoria) icolecaoDebitoACobrarCategoria
//					.next();
//
//			debitoACobrarCategoria.getComp_id().setDebitoACobrar(debitoACobrar);
//			debitoACobrarCategoria.setDebitoACobrar(debitoACobrar);
//			debitoACobrarCategoria.setUltimaAlteracao(new Date());
//			debitoACobrarCategoria.setValorCategoria(debitoACobrar.getValorTotal().divide(new BigDecimal(qtdDebitoACobrarCategoria)));

			// ------------ REGISTRAR TRANSAÇÃO ----------------
			/*
			 * debitoACobrarCategoria.setOperacaoEfetuada(operacaoEfetuada);
			 * debitoACobrarCategoria.adicionarUsuario(usuarioLogado,
			 * UsuarioAcao.USUARIO_ACAO_EFETUOU_OPERACAO);
			 * registradorOperacao.registrarOperacao(debitoACobrarCategoria);
			 */
			// ------------ REGISTRAR TRANSAÇÃO ----------------
//			getControladorUtil().inserir(debitoACobrarCategoria);
//		}

		// ==============================================================================
	}

	/**
	 * [UC0195] - Manter Crédito a Realizar
	 * 
	 * @author Vivianne Sousa
	 * @date 11/06/2007
	 * 
	 * @param idCreditoARealizar
	 * @param imovel
	 * @param usuarioLogado
	 * @throws ControladorException
	 */
	public void cancelarCreditoARealizarTransferencia(
			Integer idCreditoARealizar, Imovel imovelDestino,
			Usuario usuarioLogado) throws ControladorException {



		FiltroCreditoARealizar filtroCreditoARealizar = new FiltroCreditoARealizar();

		filtroCreditoARealizar
				.adicionarCaminhoParaCarregamentoEntidade("debitoCreditoSituacaoAtual");

		filtroCreditoARealizar.adicionarParametro(new ParametroSimples(
				FiltroCreditoARealizar.ID, idCreditoARealizar));

		Collection colecaoCreditoARealizar = getControladorUtil().pesquisar(
				filtroCreditoARealizar, CreditoARealizar.class.getName());

		CreditoARealizar creditoARealizar = (CreditoARealizar) colecaoCreditoARealizar
				.iterator().next();

		// [FS0003] - Verifica usuário com débito em cobrança
		// administrativa
		FiltroImovelCobrancaSituacao filtroImovelCobrancaSituacao = new FiltroImovelCobrancaSituacao();

		filtroImovelCobrancaSituacao
				.adicionarCaminhoParaCarregamentoEntidade("cobrancaSituacao");

		filtroImovelCobrancaSituacao.adicionarParametro(new ParametroSimples(
				FiltroImovelCobrancaSituacao.IMOVEL_ID, imovelDestino.getId()));

		Collection imovelCobrancaSituacaoEncontrada = getControladorUtil()
				.pesquisar(filtroImovelCobrancaSituacao,
						ImovelCobrancaSituacao.class.getName());

		if (imovelCobrancaSituacaoEncontrada != null
				&& !imovelCobrancaSituacaoEncontrada.isEmpty()) {

			if (((ImovelCobrancaSituacao) ((List) imovelCobrancaSituacaoEncontrada)
					.get(0)).getCobrancaSituacao() != null) {

				if (((ImovelCobrancaSituacao) ((List) imovelCobrancaSituacaoEncontrada)
						.get(0)).getCobrancaSituacao().getId().equals(
						CobrancaSituacao.COBRANCA_ADMINISTRATIVA)
						&& ((ImovelCobrancaSituacao) ((List) imovelCobrancaSituacaoEncontrada)
								.get(0)).getDataRetiradaCobranca() == null) {

					sessionContext.setRollbackOnly();
					throw new ActionServletException(
							"atencao.pesquisa.imovel.cobranca_administrativa");
				}
			}
		}

		// Debito Credito Situacao Anterior
		DebitoCreditoSituacao debitoCreditoSituacaoAnterior = new DebitoCreditoSituacao();
		debitoCreditoSituacaoAnterior.setId(creditoARealizar
				.getDebitoCreditoSituacaoAtual().getId());

		creditoARealizar
				.setDebitoCreditoSituacaoAnterior(debitoCreditoSituacaoAnterior);

		// Debito Credito Situacao Atual
		DebitoCreditoSituacao debitoCreditoSituacaoAtual = new DebitoCreditoSituacao();
		debitoCreditoSituacaoAtual.setId(DebitoCreditoSituacao.CANCELADA);

		creditoARealizar
				.setDebitoCreditoSituacaoAtual(debitoCreditoSituacaoAtual);
		creditoARealizar.setUsuario(usuarioLogado);
		
		creditoARealizar.setUltimaAlteracao(new Date());

		
		
		// ------------ REGISTRAR TRANSAÇÃO ----------------
		RegistradorOperacao registradorOperacao = new RegistradorOperacao(
			Operacao.OPERACAO_CREDITO_A_REALIZAR_CANCELAR,
			creditoARealizar.getImovel().getId(),creditoARealizar.getImovel().getId(),
		    new UsuarioAcaoUsuarioHelper(usuarioLogado,
		    UsuarioAcao.USUARIO_ACAO_EFETUOU_OPERACAO));

		registradorOperacao.registrarOperacao(creditoARealizar);

		// ------------ REGISTRAR TRANSAÇÃO ----------------

		
		getControladorUtil().atualizar(creditoARealizar);
	}

	/**
	 * [UC0194] - Inserir Crédito a Realizar
	 * 
	 * @author Vivianne Sousa
	 * @date 11/06/2007
	 * 
	 * @param imovelDestino
	 * @param creditoARealizar
	 * @param usuarioLogado
	 * @param colecaoCreditoARealizarCategoria
	 * @param registroAtendimento
	 * @param debitoCreditoSituacaoAtual
	 * @param debitoCreditoSituacaoAnterior
	 * @throws ControladorException
	 */
	public void inserirCreditoARealizarTransferencia(Imovel imovelDestino,
			CreditoARealizar creditoARealizarOrigem, Usuario usuarioLogado,
			RegistroAtendimento registroAtendimento)
			throws ControladorException {

		// CARREGANDO O CREDITO DESTINO
		// ========================================================
		FiltroCreditoARealizar filtroCreditoARealizar = new FiltroCreditoARealizar();

		filtroCreditoARealizar
				.adicionarCaminhoParaCarregamentoEntidade("parcelamento");
		filtroCreditoARealizar
				.adicionarCaminhoParaCarregamentoEntidade("documentoTipo");
		filtroCreditoARealizar
				.adicionarCaminhoParaCarregamentoEntidade("ordemServico");
		filtroCreditoARealizar
				.adicionarCaminhoParaCarregamentoEntidade("creditoTipo");
		filtroCreditoARealizar
				.adicionarCaminhoParaCarregamentoEntidade("lancamentoItemContabil");
		filtroCreditoARealizar
				.adicionarCaminhoParaCarregamentoEntidade("origem");
		filtroCreditoARealizar
				.adicionarCaminhoParaCarregamentoEntidade("creditoOrigem");
		filtroCreditoARealizar
				.adicionarCaminhoParaCarregamentoEntidade("debitoCreditoSituacaoAnterior");
		filtroCreditoARealizar
				.adicionarCaminhoParaCarregamentoEntidade("debitoCreditoSituacaoAtual");
		filtroCreditoARealizar
				.adicionarCaminhoParaCarregamentoEntidade("creditoARealizarGeral");

		filtroCreditoARealizar.adicionarParametro(new ParametroSimples(
				FiltroCreditoARealizar.ID, creditoARealizarOrigem.getId()));

		Collection colecaoCreditoARealizar = this.getControladorUtil()
				.pesquisar(filtroCreditoARealizar,
						CreditoARealizar.class.getName());

		CreditoARealizar creditoARealizar = (CreditoARealizar) colecaoCreditoARealizar
				.iterator().next();

		creditoARealizar.setCreditoARealizarCategoria(null);
		// ===================================================================================

		// DADOS CADASTRAIS
		// =================================================================
		int numeroPrestacoesRealizada = creditoARealizarOrigem
				.getNumeroPrestacaoCredito()
				- creditoARealizarOrigem.getNumeroPrestacaoRealizada();
		
		/*
		 * Colocado por Raphael Rossiter em 05/08/2008
		 * [SB0003] - Obter Valor Débito/Crédito.
		 */
		creditoARealizar.setValorCredito(creditoARealizar.getValorTotal());
		creditoARealizar.setValorResidualMesAnterior(null);

		creditoARealizar
				.setNumeroPrestacaoRealizada((short) numeroPrestacoesRealizada);
		creditoARealizar.setNumeroPrestacaoRealizada((short) 0);

		// Imovel
		creditoARealizar.setImovel(imovelDestino);
		creditoARealizar.setLocalidade(imovelDestino.getLocalidade());
		creditoARealizar.setCodigoSetorComercial(imovelDestino
				.getSetorComercial().getCodigo());
		creditoARealizar.setNumeroLote(imovelDestino.getLote());
		creditoARealizar.setNumeroSubLote(imovelDestino.getSubLote());
		creditoARealizar.setQuadra(imovelDestino.getQuadra());
		creditoARealizar.setNumeroQuadra(new Integer(imovelDestino.getQuadra()
				.getNumeroQuadra()));

		CreditoARealizarGeral creditoARealizarGeralOrigem = new CreditoARealizarGeral();
		creditoARealizarGeralOrigem.setId(creditoARealizar.getId());
		creditoARealizar.setOrigem(creditoARealizarGeralOrigem);
		creditoARealizar.setId(null);

		creditoARealizar.setRegistroAtendimento(registroAtendimento);
		creditoARealizar.setUltimaAlteracao(new Date());

		CreditoARealizarGeral creditoARealizarGeral = new CreditoARealizarGeral();
		Short indicadorHistorico = 2;
		creditoARealizarGeral.setIndicadorHistorico(indicadorHistorico);
		creditoARealizarGeral.setUltimaAlteracao(new Date());


		Integer idGerado = (Integer) this.getControladorUtil().inserir(
				creditoARealizarGeral);

		// seta o id da Conta Geral gerada no objeto contaGeral
		creditoARealizarGeral.setId(idGerado);

		creditoARealizar.setCreditoARealizarGeral(creditoARealizarGeral);

		creditoARealizar.setId(idGerado);
		creditoARealizar.setUsuario(usuarioLogado);
		
		// ------------ REGISTRAR TRANSAÇÃO ----------------
		RegistradorOperacao registradorOperacao = new RegistradorOperacao(
		    Operacao.OPERACAO_CREDITO_A_REALIZAR_INSERIR,
		    creditoARealizar.getImovel().getId(),creditoARealizar.getImovel().getId(),
		    new UsuarioAcaoUsuarioHelper(usuarioLogado,
		    UsuarioAcao.USUARIO_ACAO_EFETUOU_OPERACAO));

		registradorOperacao.registrarOperacao(creditoARealizar);

		// ------------ REGISTRAR TRANSAÇÃO ----------------


		// Inserido o objeto Crédito a Realizar
		getControladorUtil().inserir(creditoARealizar);

		// CREDITO_A_REALIZAR_CATEGORIA
		// ========================================================
//		FiltroCreditoARealizarCategoria filtroCreditoARealizarCategoria = new FiltroCreditoARealizarCategoria();
//
//		filtroCreditoARealizarCategoria
//				.adicionarCaminhoParaCarregamentoEntidade("creditoARealizar");
//		filtroCreditoARealizarCategoria
//				.adicionarCaminhoParaCarregamentoEntidade("categoria");
//
//		filtroCreditoARealizarCategoria
//				.adicionarParametro(new ParametroSimples(
//						FiltroCreditoARealizarCategoria.ID_CREDITO_A_REALIZAR,
//						creditoARealizarOrigem.getId()));
//
//		Collection colecaoCreditoARealizarCategoria = this.getControladorUtil()
//				.pesquisar(filtroCreditoARealizarCategoria,
//						CreditoARealizarCategoria.class.getName());
//
//		Integer qtdCreditoARealizarCategoria = colecaoCreditoARealizarCategoria.size(); 
//		
//		// Inserir CreditoARealizarCategoria
//		Iterator icolecaoCreditoARealizarCategoria = colecaoCreditoARealizarCategoria
//				.iterator();
		
	////////
		
			Collection colecaoCategorias = getControladorImovel()
					.obterQuantidadeEconomiasCategoria(creditoARealizarOrigem.getImovel());
			
			Collection<BigDecimal> colecaoValorPorCategoria = getControladorImovel()
					.obterValorPorCategoria(colecaoCategorias, creditoARealizar.getValorTotal());
				
			// Cria as iterações de categoria e valor
			Iterator iteratorCategoria = colecaoCategorias.iterator();
			Iterator iteratorValorCategoria = colecaoValorPorCategoria.iterator();

			// Laço para criar os débitos a cobrar por categoria
			while (iteratorCategoria.hasNext()) {
				// Recupera a categoria
				Categoria categoria = (Categoria) iteratorCategoria.next();

				// Recupera o valor da categoria
				BigDecimal valorPorCategoria = (BigDecimal) iteratorValorCategoria.next();

				// Cria o créfito a realizar categoria
				CreditoARealizarCategoria creditoARealizarCategoria = new CreditoARealizarCategoria();
				CreditoARealizarCategoriaPK creditoARealizarCategoriaPK = new CreditoARealizarCategoriaPK(
						creditoARealizar.getId(), categoria.getId());
				creditoARealizarCategoria.setComp_id(creditoARealizarCategoriaPK);
				creditoARealizarCategoria.setCreditoARealizar(creditoARealizar);
				creditoARealizarCategoria.setCategoria(categoria);
				creditoARealizarCategoria.setQuantidadeEconomia(categoria
						.getQuantidadeEconomiasCategoria());
				creditoARealizarCategoria.setValorCategoria(valorPorCategoria);
				creditoARealizarCategoria.setUltimaAlteracao(new Date());

				//Inclui na tabela DEBITO_A_COBRAR_CATEGORIA
				getControladorUtil().inserir(creditoARealizarCategoria);
			}
			/////

//		while (icolecaoCreditoARealizarCategoria.hasNext()) {
//
//			CreditoARealizarCategoria creditoARealizarCategoria = (CreditoARealizarCategoria) icolecaoCreditoARealizarCategoria
//					.next();
//			Categoria categoria = creditoARealizarCategoria.getCategoria();
//
//			creditoARealizarCategoria
//					.setComp_id(new CreditoARealizarCategoriaPK(
//							creditoARealizar.getId(), categoria.getId()));
//			creditoARealizarCategoria.setValorCategoria(creditoARealizar.getValorTotal().divide(new BigDecimal(qtdCreditoARealizarCategoria)));
//			creditoARealizarCategoria.setUltimaAlteracao(new Date());
//
//
//			getControladorUtil().inserir(creditoARealizarCategoria);
//		}
		// ======================================================================================

	}

	/**
	 * [UC0188] - Manter Guia de Pagamento
	 * 
	 * @author Vivianne Sousa
	 * @since 11/06/2007
	 * 
	 * @param guiaPagamento
	 * @param usuarioLogado
	 * @throws ControladorException
	 */

	public void manterGuiaPagamentoTransferencia(
			GuiaPagamento guiaPagamentoOrigem, Usuario usuarioLogado)
			throws ControladorException {



		// CARREGANDO A GUIA
		// ================================================================
		FiltroGuiaPagamento filtroGuiaPagamento = new FiltroGuiaPagamento();

		filtroGuiaPagamento.adicionarCaminhoParaCarregamentoEntidade("cliente");
		filtroGuiaPagamento.adicionarCaminhoParaCarregamentoEntidade("imovel");
		filtroGuiaPagamento
				.adicionarCaminhoParaCarregamentoEntidade("debitoCreditoSituacaoAtual");
		filtroGuiaPagamento
				.adicionarCaminhoParaCarregamentoEntidade("debitoCreditoSituacaoAnterior");

		filtroGuiaPagamento.adicionarParametro(new ParametroSimples(
				FiltroGuiaPagamento.ID, guiaPagamentoOrigem.getId()));

		Collection colecaoGuiaPagamento = this.getControladorUtil().pesquisar(
				filtroGuiaPagamento, GuiaPagamento.class.getName());

		GuiaPagamento guiaPagamento = (GuiaPagamento) colecaoGuiaPagamento
				.iterator().next();
		// ===================================================================================

		// String idCliente = guiaPagamento.getCliente().getId() == null ? "" :
		// guiaPagamento.getCliente().getId().toString();
		String idImovel = guiaPagamento.getImovel()== null || guiaPagamento.getImovel().getId() == null ? ""
				: guiaPagamento.getImovel().getId().toString();

		if (idImovel != null && !idImovel.equals("")) {

			if (!idImovel.equalsIgnoreCase(guiaPagamento.getImovel().getId()
					.toString())) {

				sessionContext.setRollbackOnly();
				throw new ControladorException("atencao.imovel.alterado");
			}

			FiltroImovelCobrancaSituacao filtroImovelCobrancaSituacao = new FiltroImovelCobrancaSituacao();

			filtroImovelCobrancaSituacao
					.adicionarParametro(new ParametroSimples(
							FiltroImovelCobrancaSituacao.IMOVEL_ID, idImovel));

			Collection imovelCobrancaSituacaoEncontrada = getControladorUtil()
					.pesquisar(filtroImovelCobrancaSituacao,
							ImovelCobrancaSituacao.class.getName());

			if (imovelCobrancaSituacaoEncontrada != null
					&& !imovelCobrancaSituacaoEncontrada.isEmpty()) {

				if (((ImovelCobrancaSituacao) ((List) imovelCobrancaSituacaoEncontrada)
						.get(0)).getCobrancaSituacao() != null) {

					if (((ImovelCobrancaSituacao) ((List) imovelCobrancaSituacaoEncontrada)
							.get(0)).getCobrancaSituacao().getId().equals(
							CobrancaSituacao.COBRANCA_ADMINISTRATIVA)
							&& ((ImovelCobrancaSituacao) ((List) imovelCobrancaSituacaoEncontrada)
									.get(0)).getDataRetiradaCobranca() == null) {

						sessionContext.setRollbackOnly();
						throw new ActionServletException(
								"atencao.pesquisa.imovel.cobranca_administrativa");

					}
				}
			}

		}

		/*
		 * if (idCliente != null && !idCliente.equals("")) { // Fazer o teste de
		 * cliente com cobranca administrativa.
		 * 
		 * if
		 * (!idCliente.equalsIgnoreCase(guiaPagamento.getCliente().getId().toString())) {
		 * throw new ControladorException("atencao.cliente.alterado"); } }
		 */
		
		SistemaParametro sistemaParametro = this.getControladorUtil().pesquisarParametrosDoSistema();
		
		if (guiaPagamento.getAnoMesReferenciaContabil().intValue() >= 
			sistemaParametro.getAnoMesFaturamento().intValue()){
			
			//SITUAÇÃO ANTERIOR
			guiaPagamento.setDebitoCreditoSituacaoAnterior(guiaPagamento.getDebitoCreditoSituacaoAtual());
		}
		else{
			
			//SITUAÇÃO ANTERIOR
			guiaPagamento.setDebitoCreditoSituacaoAnterior(null);
			
			//REFERÊNCIA CONTÁBIL
			guiaPagamento.setAnoMesReferenciaContabil(sistemaParametro.getAnoMesFaturamento());
		}
		
		DebitoCreditoSituacao debitoCreditoSituacao = new DebitoCreditoSituacao();
		debitoCreditoSituacao.setId(DebitoCreditoSituacao.CANCELADA);
		
		//SITUAÇÃO ATUAL
		guiaPagamento.setDebitoCreditoSituacaoAtual(debitoCreditoSituacao);

		guiaPagamento.setUsuario(usuarioLogado);
		guiaPagamento.setUltimaAlteracao(new Date());

		// ------------ REGISTRAR TRANSAÇÃO ----------------
		RegistradorOperacao registradorOperacao = new RegistradorOperacao(
			Operacao.OPERACAO_GUIA_PAGAMENTO_CANCELAR,
			guiaPagamento.getId(),guiaPagamento.getId(),
		    new UsuarioAcaoUsuarioHelper(usuarioLogado,
		    UsuarioAcao.USUARIO_ACAO_EFETUOU_OPERACAO));

		registradorOperacao.registrarOperacao(guiaPagamento);

		// ------------ REGISTRAR TRANSAÇÃO ----------------


		getControladorUtil().atualizar(guiaPagamento);

	}

	/**
	 * [UC0187] - Inserir Guia de Pagamento
	 * 
	 * @author Vivianne Sousa
	 * @since 11/06/2007
	 * 
	 * @param guiaPagamento
	 * @param usuarioLogado
	 * @param imovelDestino
	 * @param colecaoGuiaPagamentoCategoria
	 * @param registroAtendimento
	 * @param debitoCreditoSituacaoAtual
	 * @param debitoCreditoSituacaoAnterior
	 * @throws ControladorException
	 */
	public Integer inserirGuiaPagamentoTransferencia(
			GuiaPagamento guiaPagamentoOrigem, Usuario usuarioLogado,
			Imovel imovelDestino, RegistroAtendimento registroAtendimento)
			throws ControladorException {


		// CARREGANDO A GUIA
		// ================================================================
		FiltroGuiaPagamento filtroGuiaPagamento = new FiltroGuiaPagamento();

		filtroGuiaPagamento.adicionarCaminhoParaCarregamentoEntidade("cliente");
		filtroGuiaPagamento
				.adicionarCaminhoParaCarregamentoEntidade("parcelamento");
		filtroGuiaPagamento
				.adicionarCaminhoParaCarregamentoEntidade("documentoTipo");
		filtroGuiaPagamento
				.adicionarCaminhoParaCarregamentoEntidade("financiamentoTipo");
		filtroGuiaPagamento
				.adicionarCaminhoParaCarregamentoEntidade("debitoTipo");
		filtroGuiaPagamento
				.adicionarCaminhoParaCarregamentoEntidade("ordemServico");
		filtroGuiaPagamento
				.adicionarCaminhoParaCarregamentoEntidade("lancamentoItemContabil");
		filtroGuiaPagamento
				.adicionarCaminhoParaCarregamentoEntidade("debitoCreditoSituacaoAtual");
		filtroGuiaPagamento
				.adicionarCaminhoParaCarregamentoEntidade("debitoCreditoSituacaoAnterior");

		filtroGuiaPagamento.adicionarParametro(new ParametroSimples(
				FiltroGuiaPagamento.ID, guiaPagamentoOrigem.getId()));

		Collection colecaoGuiaPagamento = this.getControladorUtil().pesquisar(
				filtroGuiaPagamento, GuiaPagamento.class.getName());

		GuiaPagamento guiaPagamento = (GuiaPagamento) colecaoGuiaPagamento
				.iterator().next();

		guiaPagamento.setClientesGuiaPagamento(null);
		// ===================================================================================

		// DADOS CADASTRAIS
		// =================================================================
		// String idImovel = guiaPagamentoInserir.getImovel().getId() == null ?
		// "" : guiaPagamentoInserir.getImovel().getId().toString();
		// String codigoCliente = guiaPagamentoInserir.getCliente().getId() ==
		// null ? "" : guiaPagamentoInserir.getCliente().getId().toString();

		GuiaPagamentoGeral guiaPagamentoGeralOrigem = new GuiaPagamentoGeral();
		guiaPagamentoGeralOrigem.setId(guiaPagamento.getId());
		guiaPagamento.setOrigem(guiaPagamentoGeralOrigem);
		guiaPagamento.setId(null);

		GuiaPagamentoGeral guiaPagamentoGeral = new GuiaPagamentoGeral();
		Short indicadorHistorico = 2;
		guiaPagamentoGeral.setIndicadorHistorico(indicadorHistorico);
		guiaPagamentoGeral.setUltimaAlteracao(new Date());

		Integer idGuiaPagamentoGerado = (Integer) getControladorUtil().inserir(
				guiaPagamentoGeral);

		guiaPagamentoGeral.setId(idGuiaPagamentoGerado);
		guiaPagamento.setGuiaPagamentoGeral(guiaPagamentoGeral);
		guiaPagamento.setId(idGuiaPagamentoGerado);

		guiaPagamento.setImovel(imovelDestino);
		guiaPagamento.setLocalidade(imovelDestino.getLocalidade());

		guiaPagamento.setRegistroAtendimento(registroAtendimento);
		guiaPagamento.setUsuario(usuarioLogado);

		guiaPagamento.setUltimaAlteracao(new Date());
		// ====================================================================================

		// ------------ REGISTRAR TRANSAÇÃO ----------------
		RegistradorOperacao registradorOperacao = new RegistradorOperacao(
				Operacao.OPERACAO_GUIA_PAGAMENTO_INSERIR,
				guiaPagamento.getImovel().getId(),guiaPagamento.getImovel().getId(),
		    new UsuarioAcaoUsuarioHelper(usuarioLogado,
		    UsuarioAcao.USUARIO_ACAO_EFETUOU_OPERACAO));

		registradorOperacao.registrarOperacao(guiaPagamento);

		// ------------ REGISTRAR TRANSAÇÃO ----------------


		getControladorUtil().inserir(guiaPagamento);

		// CREDITO_A_REALIZAR_CATEGORIA
		// ========================================================
		FiltroGuiaPagamentoCategoria filtroGuiaPagamentoCategoria = new FiltroGuiaPagamentoCategoria();

		filtroGuiaPagamentoCategoria
				.adicionarCaminhoParaCarregamentoEntidade("guiaPagamento");
		filtroGuiaPagamentoCategoria
				.adicionarCaminhoParaCarregamentoEntidade("categoria");

		filtroGuiaPagamentoCategoria.adicionarParametro(new ParametroSimples(
				FiltroGuiaPagamentoCategoria.GUIA_PAGAMENTO_ID,
				guiaPagamentoOrigem.getId()));

		Collection colecaoGuiaPagamentoCategoria = this.getControladorUtil()
				.pesquisar(filtroGuiaPagamentoCategoria,
						GuiaPagamentoCategoria.class.getName());

		Iterator icolecaoGuiaPagamentoCategoria = colecaoGuiaPagamentoCategoria
				.iterator();

		while (icolecaoGuiaPagamentoCategoria.hasNext()) {

			GuiaPagamentoCategoria guiaPagamentoCategoria = (GuiaPagamentoCategoria) icolecaoGuiaPagamentoCategoria
					.next();
			Categoria categoria = guiaPagamentoCategoria.getCategoria();

			guiaPagamentoCategoria.setComp_id(new GuiaPagamentoCategoriaPK(
					categoria.getId(), guiaPagamento.getId()));
			guiaPagamentoCategoria.setUltimaAlteracao(new Date());


			getControladorUtil().inserir(guiaPagamentoCategoria);
		}

		if (imovelDestino != null) {

			FiltroClienteImovel filtroClienteImovel = new FiltroClienteImovel();
			filtroClienteImovel
					.adicionarCaminhoParaCarregamentoEntidade("cliente");
			filtroClienteImovel
					.adicionarCaminhoParaCarregamentoEntidade("clienteRelacaoTipo");
			filtroClienteImovel.adicionarParametro(new ParametroSimples(
					FiltroClienteImovel.IMOVEL_ID, imovelDestino.getId()));
			filtroClienteImovel.adicionarParametro(new ParametroNulo(
					FiltroClienteImovel.DATA_FIM_RELACAO));

			Collection clientesImovel = getControladorUtil().pesquisar(
					filtroClienteImovel, ClienteImovel.class.getName());

			if (clientesImovel != null && !clientesImovel.isEmpty()) {

				Iterator clienteImovelIterator = clientesImovel.iterator();

				while (clienteImovelIterator.hasNext()) {

					ClienteImovel clienteImovel = (ClienteImovel) clienteImovelIterator
							.next();

					ClienteGuiaPagamento clienteGuiaPagamento = new ClienteGuiaPagamento();
					clienteGuiaPagamento.setGuiaPagamento(guiaPagamento);
					clienteGuiaPagamento.setCliente(clienteImovel.getCliente());
					clienteGuiaPagamento.setClienteRelacaoTipo(clienteImovel
							.getClienteRelacaoTipo());
					clienteGuiaPagamento.setUltimaAlteracao(new Date());



					getControladorUtil().inserir(clienteGuiaPagamento);
				}

			}
		}

		return idGuiaPagamentoGerado;
	}

	/**
	 * [UC0145] - Inserir Conta
	 * 
	 * @author Vivianne Sousa
	 * @since 12/06/2007
	 * 
	 * @param mesAnoConta
	 * @param imovel
	 * @param colecaoDebitoCobrado
	 * @param ligacaoAguaSituacao
	 * @param ligacaoEsgotoSituacao
	 * @param colecaoCategoria
	 * @param consumoAgua
	 * @param consumoEsgoto
	 * @param percentualEsgoto
	 * @param dataVencimentoConta
	 * @param calcularValoresConta
	 * @param motivoInclusaoConta
	 * @throws ControladorException
	 */
	public Integer inserirContaTransferencia(Conta conta, Imovel imovelDestino,
			Usuario usuarioLogado) throws ControladorException {

		Integer retorno = new Integer("0");
		/*
		// ------------ REGISTRAR TRANSAÇÃO ----------------
		RegistradorOperacao registradorOperacao = new RegistradorOperacao(
				Operacao.OPERACAO_INSERIR_CONTA, new UsuarioAcaoUsuarioHelper(
						usuarioLogado,
						UsuarioAcao.USUARIO_ACAO_EFETUOU_OPERACAO));

		Operacao operacao = new Operacao();
		operacao.setId(Operacao.OPERACAO_INSERIR_CONTA);

		OperacaoEfetuada operacaoEfetuada = new OperacaoEfetuada();
		operacaoEfetuada.setOperacao(operacao);
		// ------------ REGISTRAR TRANSAÇÃO ----------------
		*/
		 

		// [FS0003] Verificar existência da conta
		// =========================================
		FiltroConta filtroConta = new FiltroConta();

		filtroConta
				.adicionarCaminhoParaCarregamentoEntidade("debitoCreditoSituacaoAtual");
		filtroConta.adicionarParametro(new ParametroSimples(
				FiltroConta.IMOVEL_ID, imovelDestino.getId()));
		filtroConta.adicionarParametro(new ParametroSimples(
				FiltroConta.REFERENCIA, conta.getReferencia()));

		Collection colecaoConta = this.getControladorUtil().pesquisar(
				filtroConta, Conta.class.getName());
		Conta contaInserir = null;

		if (colecaoConta != null && !colecaoConta.isEmpty()) {

			Conta contaImovelDestino = (Conta) colecaoConta.iterator().next();

			/*
			 * Comentado por Raphael Rossiter em 25/06/2007 - Analistas(Aryed e
			 * Rosana)
			 */
			/*
			 * if
			 * (contaImovelDestino.getDebitoCreditoSituacaoAtual().getId().equals(DebitoCreditoSituacao.CANCELADA) ||
			 * contaImovelDestino.getDebitoCreditoSituacaoAtual().getId().equals(DebitoCreditoSituacao.CANCELADA_POR_RETIFICACAO)) {
			 * 
			 * 
			 * 
			 * sessionContext.setRollbackOnly(); throw new ControladorException(
			 * "atencao.conta_ja_existente_cancelada", null, Util
			 * .formatarMesAnoReferencia(contaImovelDestino .getReferencia())); }
			 * else {
			 * 
			 * sessionContext.setRollbackOnly();
			 * 
			 * throw new
			 * ControladorException("atencao.conta_ja_existente_imovel_anomesreferencia",
			 * null, imovelDestino.getId() + " já possui a conta com a
			 * referência " +
			 * Util.formatarMesAnoReferencia(contaImovelDestino.getReferencia()) +
			 * "."); }
			 */

			/*
			 * Colocado por Raphael Rossiter em 25/06/2007 - Analistas(Aryed e
			 * Rosana)
			 */
			if (!contaImovelDestino.getDebitoCreditoSituacaoAtual().getId()
					.equals(DebitoCreditoSituacao.CANCELADA)
					&& !contaImovelDestino
							.getDebitoCreditoSituacaoAtual()
							.getId()
							.equals(
									DebitoCreditoSituacao.CANCELADA_POR_RETIFICACAO)) {

				sessionContext.setRollbackOnly();
				throw new ControladorException(
						"atencao.conta_ja_existente_imovel_anomesreferencia",
						null,
						imovelDestino.getId()
								+ " já possui a conta com a referência "
								+ Util
										.formatarMesAnoReferencia(contaImovelDestino
												.getReferencia()) + ".");
			}
		}

		filtroConta.limparListaParametros();

		filtroConta
				.adicionarCaminhoParaCarregamentoEntidade("contaMotivoCancelamento");
		filtroConta
				.adicionarCaminhoParaCarregamentoEntidade("contaMotivoInclusao");
		filtroConta.adicionarCaminhoParaCarregamentoEntidade("documentoTipo");
		filtroConta.adicionarCaminhoParaCarregamentoEntidade("contaBancaria");
		filtroConta.adicionarCaminhoParaCarregamentoEntidade("faturamentoTipo");
		filtroConta
				.adicionarCaminhoParaCarregamentoEntidade("registroAtendimento");
		filtroConta.adicionarCaminhoParaCarregamentoEntidade("consumoTarifa");
		filtroConta
				.adicionarCaminhoParaCarregamentoEntidade("motivoNaoEntregaDocumento");
		filtroConta
				.adicionarCaminhoParaCarregamentoEntidade("funcionarioEntrega");
		filtroConta
				.adicionarCaminhoParaCarregamentoEntidade("contaMotivoRevisao");
		filtroConta
				.adicionarCaminhoParaCarregamentoEntidade("contaMotivoRetificacao");
		filtroConta
				.adicionarCaminhoParaCarregamentoEntidade("funcionarioLeitura");
		filtroConta
				.adicionarCaminhoParaCarregamentoEntidade("debitoCreditoSituacaoAtual");
		filtroConta
				.adicionarCaminhoParaCarregamentoEntidade("debitoCreditoSituacaoAnterior");

		filtroConta.adicionarParametro(new ParametroSimples(FiltroConta.ID,
				conta.getId()));

		colecaoConta = this.getControladorUtil().pesquisar(filtroConta,
				Conta.class.getName());

		contaInserir = (Conta) colecaoConta.iterator().next();

		/*
		 * Colocado por Raphael Rossiter em 18/10/2007 OBJ: Carregar o anoMes
		 * Contabil na conta que será cancelada
		 */
		conta.setReferenciaContabil(contaInserir.getReferenciaContabil());

		/*
		 * [SF002] - Gerar dados da conta
		 * ======================================================================
		 */

		// Inseri a conta na tabela Conta_Geral
		// =======================================================================
		ContaGeral contaGeralInserir = new ContaGeral();

		// valor fixo
		Short indicadorHistorico = 2;
		contaGeralInserir.setIndicadorHistorico(indicadorHistorico);
		// Ultima Alteração
		contaGeralInserir.setUltimaAlteracao(new Date());
		Integer idGerado = null;
		idGerado = (Integer) this.getControladorUtil().inserir(
				contaGeralInserir);

		// seta o id da Conta Geral gerada no objeto contaGeral
		contaGeralInserir.setId(idGerado);
		// =======================================================================

		// =======================================================================
		// Adiciona o idGerado da tabela Conta Geral
		contaInserir.setId(idGerado);
		// setando a conta geral na conta
		contaInserir.setContaGeral(contaGeralInserir);
		// Adiciona o id do imóvel selecionado
		contaInserir.setImovel(imovelDestino);

		// Localidade do imóvel
		contaInserir.setLocalidade(imovelDestino.getLocalidade());
		// Quadra do imóvel
		contaInserir.setQuadraConta(imovelDestino.getQuadra());
		// Lote do imóvel
		contaInserir.setLote(imovelDestino.getLote());
		// Sublote do imóvel
		contaInserir.setSubLote(imovelDestino.getSubLote());
		// Código do setor comercial do imóvel
		contaInserir.setCodigoSetorComercial(imovelDestino.getSetorComercial()
				.getCodigo());
		// Número da quadra do imóvel
		contaInserir.setQuadra(new Integer(imovelDestino.getQuadra()
				.getNumeroQuadra()));

		// LIGACAO_AGUA_SITUACAO
		contaInserir.setLigacaoAguaSituacao(imovelDestino
				.getLigacaoAguaSituacao());

		// LIGACAO_ESGOTO_SITUACAO
		contaInserir.setLigacaoEsgotoSituacao(imovelDestino
				.getLigacaoEsgotoSituacao());

		// IMOVEL_PERFIL
		contaInserir.setImovelPerfil(imovelDestino.getImovelPerfil());

		// CONTA_ORIGEM
		ContaGeral contaOrigem = new ContaGeral();
		contaOrigem.setId(conta.getId());
		contaInserir.setOrigem(contaOrigem);
		
		//DEBITO_CREDITO_SITUACAO_ATUAL
		DebitoCreditoSituacao debitoCreditoSituacao = new DebitoCreditoSituacao();
		debitoCreditoSituacao.setId(DebitoCreditoSituacao.INCLUIDA);
		
		contaInserir.setDebitoCreditoSituacaoAtual(debitoCreditoSituacao);
		
		//DEBITO_CREDITO_SITUACAO_ANTERIOR
		contaInserir.setDebitoCreditoSituacaoAnterior(null);
		
		//REFERENCIA_CONTABIL
		SistemaParametro sistemaParametro = this.getControladorUtil().pesquisarParametrosDoSistema();
		
		Integer referenciaContabil = this.getControladorFaturamento()
		.obterReferenciaContabilConta(sistemaParametro);
		
		if (referenciaContabil.compareTo(contaInserir.getReferencia()) == 1){
			contaInserir.setReferenciaContabil(referenciaContabil);
		}
		else{
			contaInserir.setReferenciaContabil(contaInserir.getReferencia());
		}
        
        
		contaInserir.setUsuario(usuarioLogado);

		// Ultima Alteração
		contaInserir.setUltimaAlteracao(new Date());
		// =======================================================================

		// [UC0609] Transferência de Débitos/Créditos
		// [FS0005] Conta em revisão
		if (contaInserir.getDataRevisao() != null) {
			contaInserir.setDataRevisao(null);
			contaInserir.setContaMotivoRevisao(null);
		}
		/*		
		// ------------ REGISTRAR TRANSAÇÃO ----------------
		contaInserir.setOperacaoEfetuada(operacaoEfetuada);
		contaInserir.adicionarUsuario(usuarioLogado,
				UsuarioAcao.USUARIO_ACAO_EFETUOU_OPERACAO);
		registradorOperacao.registrarOperacao(contaInserir);
		// ------------ REGISTRAR TRANSAÇÃO ----------------
		*/

		contaInserir.setContaCategorias(null);
		contaInserir.setDebitoCobrados(null);
		contaInserir.setCreditoRealizados(null);
		contaInserir.setClienteContas(null);
		contaInserir.setContaImpostosDeduzidos(null);
		
		// Author: Hugo Amorim
		// Fluxo [SB0002] 1.1.2 
		ContaMotivoInclusao contaMotivoInclusao = new ContaMotivoInclusao();
		contaMotivoInclusao.setId(ContaMotivoInclusao.TRASFERENCIA_DE_DEBITO);
		contaInserir.setContaMotivoInclusao(contaMotivoInclusao);
		
		
		// ------------ REGISTRAR TRANSAÇÃO ----------------
		RegistradorOperacao registradorOperacao = new RegistradorOperacao(
		    Operacao.OPERACAO_INSERIR_CONTA,
		    contaInserir.getImovel().getId(),contaInserir.getId(),
		    new UsuarioAcaoUsuarioHelper(usuarioLogado,
		    UsuarioAcao.USUARIO_ACAO_EFETUOU_OPERACAO));

		registradorOperacao.registrarOperacao(contaInserir);
		// ------------ REGISTRAR TRANSAÇÃO ----------------

		// Inserindo no BD
		Integer idContaGerado = (Integer) this.getControladorUtil().inserir(
				contaInserir);

		retorno = idContaGerado;

		/*
		 * Inserir na tabela CONTA_CATEGORIA e CONTA_CATEGORIA_CONSUMO_FAIXA
		 * ====================================================================
		 */
		this.inserirContaCategoriaTransferencia(conta, contaInserir);

		/*
		 * Inserir na tabela CLIENTE_CONTA
		 * ======================================================================
		 */
		this.getControladorFaturamento().inserirClienteConta(contaInserir,
				imovelDestino);

		/*
		 * Gerar os débitos cobrados - DEBITO_COBRADO e DEBITO_COBRADO_CATEGORIA
		 * ======================================================================
		 */
		this.inserirDebitoCobradoTransferencia(conta, contaInserir);

		/*
		 * Gerar os créditos realizados - CREDITO_REALIZADO e
		 * CREDITO_REALIZADO_CATEGORIA
		 * ======================================================================
		 */
		this.inserirCreditoRealizadoTransferencia(conta, contaInserir);

		/*
		 * Gerar os impostos - CONTA_IMPOSTOS_DEDUZIDOS
		 * ======================================================================
		 */
		this.inserirContaImpostosDeduzidosTransferencia(conta, contaInserir);

		return retorno;
	}

	/**
	 * [UC0145] - Inserir Conta Author: Raphael Rossiter Data: 13/06/2007
	 * 
	 * Inclui, na tabela CONTA_CATEGORIA, a(s) categoria(s) e sua(s)
	 * respectiva(s) quantidade(s) de economia da lista do passo 5.8 do fluxo
	 * principal e os atributos retornados pelo [UC0120] para cada categoria,
	 * caso o [UC0120] não tenha sido chamado, os valores correspondentes devem
	 * ser nulos.
	 * 
	 * Caso o [UC0120] não tenha sido chamado não gravar a tabela
	 * CONTA_CATEGORIA_CONSUMO_FAIXA
	 * 
	 * @throws ControladorException
	 */
	protected void inserirContaCategoriaTransferencia(Conta contaOrigem,
			Conta contaDestino) throws ControladorException {

		FiltroContaCategoria filtroContaCategoria = new FiltroContaCategoria();

		filtroContaCategoria
				.adicionarCaminhoParaCarregamentoEntidade("comp_id.categoria");
		filtroContaCategoria
				.adicionarCaminhoParaCarregamentoEntidade("comp_id.subcategoria");

		filtroContaCategoria.adicionarParametro(new ParametroSimples(
				FiltroContaCategoria.CONTA_ID, contaOrigem.getId()));

		Collection colecaoContaCategoria = this.getControladorUtil().pesquisar(
				filtroContaCategoria, ContaCategoria.class.getName());

		if (colecaoContaCategoria != null && !colecaoContaCategoria.isEmpty()) {

			ContaCategoria contaCategoriaInserir = null;
			Iterator itColecaoContaCategoria = colecaoContaCategoria.iterator();

			while (itColecaoContaCategoria.hasNext()) {

				contaCategoriaInserir = (ContaCategoria) itColecaoContaCategoria
						.next();

				contaCategoriaInserir.getComp_id().setConta(contaDestino);
				contaCategoriaInserir.setUltimaAlteracao(new Date());
				contaCategoriaInserir.setContaCategoriaConsumoFaixas(null);

				// CONTA_CATEGORIA
				this.getControladorUtil().inserir(contaCategoriaInserir);

				// CONTA_CATEGORIA_CONSUMO_FAIXA
				this.inserirContaCategoriaConsumoFaixaTransferencia(
						contaOrigem, contaCategoriaInserir);
			}
		}
	}

	/**
	 * [UC0145] - Inserir Conta Author: Raphael Rossiter Data: 13/06/2007
	 * 
	 * Inclui a(s) faixa(s) de consumo por categoria na tabela
	 * CONTA_CATEGORIA_CONSUMO_FAIXA com os atributos retornados pelo [UC0120]
	 * por categoria e para cada faixa da categoria, caso o [UC0120] não tenha
	 * sido chamado não gravar a tabela.
	 * 
	 * @throws ControladorException
	 */
	protected void inserirContaCategoriaConsumoFaixaTransferencia(
			Conta contaOrigem, ContaCategoria contaCategoriaDestino)
			throws ControladorException {

		FiltroContaCategoriaConsumoFaixa filtroContaCategoriaConsumoFaixa = new FiltroContaCategoriaConsumoFaixa();

		filtroContaCategoriaConsumoFaixa
				.adicionarCaminhoParaCarregamentoEntidade("contaCategoria");
		filtroContaCategoriaConsumoFaixa
				.adicionarCaminhoParaCarregamentoEntidade("categoria");
		filtroContaCategoriaConsumoFaixa
				.adicionarCaminhoParaCarregamentoEntidade("subcategoria");

		filtroContaCategoriaConsumoFaixa
				.adicionarParametro(new ParametroSimples(
						FiltroContaCategoriaConsumoFaixa.CONTA_ID, contaOrigem
								.getId()));

		filtroContaCategoriaConsumoFaixa
				.adicionarParametro(new ParametroSimples(
						FiltroContaCategoriaConsumoFaixa.CATEGORIA_ID,
						contaCategoriaDestino.getComp_id().getCategoria()
								.getId()));

		filtroContaCategoriaConsumoFaixa
				.adicionarParametro(new ParametroSimples(
						FiltroContaCategoriaConsumoFaixa.SUBCATEGORIA_ID,
						contaCategoriaDestino.getComp_id().getSubcategoria()
								.getId()));

		Collection colecaoContaCategoriaConsumoFaixa = this
				.getControladorUtil().pesquisar(
						filtroContaCategoriaConsumoFaixa,
						ContaCategoriaConsumoFaixa.class.getName());

		if (colecaoContaCategoriaConsumoFaixa != null
				&& !colecaoContaCategoriaConsumoFaixa.isEmpty()) {

			ContaCategoriaConsumoFaixa contaCategoriaConsumoFaixaInserir = null;
			Iterator itColecaoContaCategoriaConsumoFaixa = colecaoContaCategoriaConsumoFaixa
					.iterator();

			while (itColecaoContaCategoriaConsumoFaixa.hasNext()) {

				contaCategoriaConsumoFaixaInserir = (ContaCategoriaConsumoFaixa) itColecaoContaCategoriaConsumoFaixa
						.next();

				contaCategoriaConsumoFaixaInserir
						.setContaCategoria(contaCategoriaDestino);
				contaCategoriaConsumoFaixaInserir
						.setUltimaAlteracao(new Date());

				// CONTA_CATEGORIA_CONSUMO_FAIXA
				this.getControladorUtil().inserir(
						contaCategoriaConsumoFaixaInserir);
			}
		}
	}

	/**
	 * [UC0609] - Transferência de Débitos/Créditos
	 * 
	 * @author Raphael Rossiter
	 * @date 13/06/2007
	 * 
	 * @throws ControladorException
	 */
	protected void inserirDebitoCobradoTransferencia(Conta contaOrigem,
			Conta contaDestino) throws ControladorException {

		FiltroDebitoCobrado filtroDebitoCobrado = new FiltroDebitoCobrado();

		filtroDebitoCobrado
				.adicionarCaminhoParaCarregamentoEntidade("lancamentoItemContabil");
		filtroDebitoCobrado
				.adicionarCaminhoParaCarregamentoEntidade("financiamentoTipo");
		filtroDebitoCobrado
				.adicionarCaminhoParaCarregamentoEntidade("debitoTipo");
		filtroDebitoCobrado
				.adicionarCaminhoParaCarregamentoEntidade("parcelamentoGrupo");

		filtroDebitoCobrado.adicionarParametro(new ParametroSimples(
				FiltroDebitoCobrado.CONTA_ID, contaOrigem.getId()));

		Collection colecaoDebitoCobrado = this.getControladorUtil().pesquisar(
				filtroDebitoCobrado, DebitoCobrado.class.getName());

		if (colecaoDebitoCobrado != null && !colecaoDebitoCobrado.isEmpty()) {

			DebitoCobrado debitoCobradoOrigem = null;
			DebitoCobrado debitoCobradoInserir = null;
			Iterator itColecaoDebitoCobrado = colecaoDebitoCobrado.iterator();

			while (itColecaoDebitoCobrado.hasNext()) {

				debitoCobradoOrigem = (DebitoCobrado) itColecaoDebitoCobrado
						.next();
				
				
				
				FiltroDebitoCobrado filtroDebitoCobradoAux = new FiltroDebitoCobrado();

				filtroDebitoCobradoAux
						.adicionarCaminhoParaCarregamentoEntidade("lancamentoItemContabil");
				filtroDebitoCobradoAux
						.adicionarCaminhoParaCarregamentoEntidade("financiamentoTipo");
				filtroDebitoCobradoAux
						.adicionarCaminhoParaCarregamentoEntidade("debitoTipo");
				filtroDebitoCobradoAux
						.adicionarCaminhoParaCarregamentoEntidade("parcelamentoGrupo");

				filtroDebitoCobradoAux.adicionarParametro(new ParametroSimples(
						FiltroDebitoCobrado.CODIGO, debitoCobradoOrigem.getId()));

				Collection colecaoDebitoCobradoAux = this.getControladorUtil().pesquisar(
						filtroDebitoCobradoAux, DebitoCobrado.class.getName());
				
				
				debitoCobradoInserir = (DebitoCobrado) Util.retonarObjetoDeColecao(colecaoDebitoCobradoAux);
				
				//debitoCobradoInserir = debitoCobradoOrigem;

				debitoCobradoInserir.setId(null);
				debitoCobradoInserir.setDebitoCobradoCategorias(null);

				debitoCobradoInserir.setConta(contaDestino);

				debitoCobradoInserir
						.setLocalidade(contaDestino.getLocalidade());

				debitoCobradoInserir.setCodigoSetorComercial(contaDestino
						.getCodigoSetorComercial());

				debitoCobradoInserir.setQuadra(contaDestino.getQuadraConta());
				debitoCobradoInserir.setNumeroQuadra(contaDestino.getQuadra());

				debitoCobradoInserir.setNumeroLote(contaDestino.getLote());
				debitoCobradoInserir
						.setNumeroSubLote(contaDestino.getSubLote());

				debitoCobradoInserir.setUltimaAlteracao(new Date());

				// DEBITO_COBRADO
				Integer idGerado = (Integer) this.getControladorUtil().inserir(
						debitoCobradoInserir);
				debitoCobradoInserir.setId(idGerado);

				// DEBITO_COBRADO_CATEGORIA
				this.inserirDebitoCobradoCategoriaTransferencia(
						debitoCobradoOrigem, debitoCobradoInserir);
			}
		}
	}

	/**
	 * [UC0609] - Transferência de Débitos/Créditos
	 * 
	 * @author Raphael Rossiter
	 * @date 13/06/2007
	 * 
	 * @throws ControladorException
	 */
	protected void inserirDebitoCobradoCategoriaTransferencia(
			DebitoCobrado debitoCobradoOrigem,
			DebitoCobrado debitoCobradoDestino) throws ControladorException {

		FiltroDebitoCobradoCategoria filtroDebitoCobradoCategoria = new FiltroDebitoCobradoCategoria();

		filtroDebitoCobradoCategoria
				.adicionarCaminhoParaCarregamentoEntidade("debitoCobrado");
		filtroDebitoCobradoCategoria
				.adicionarCaminhoParaCarregamentoEntidade("categoria");

		filtroDebitoCobradoCategoria.adicionarParametro(new ParametroSimples(
				FiltroDebitoCobradoCategoria.DEBITO_COBRADO_ID,
				debitoCobradoOrigem.getId()));

		Collection colecaoDebitoCobradoCategoria = this.getControladorUtil()
				.pesquisar(filtroDebitoCobradoCategoria,
						DebitoCobradoCategoria.class.getName());

		if (colecaoDebitoCobradoCategoria != null
				&& !colecaoDebitoCobradoCategoria.isEmpty()) {

			DebitoCobradoCategoria debitoCobradoCategoriaInserir = null;
			Iterator itColecaoDebitoCobradoCategoria = colecaoDebitoCobradoCategoria
					.iterator();

			while (itColecaoDebitoCobradoCategoria.hasNext()) {

				debitoCobradoCategoriaInserir = (DebitoCobradoCategoria) itColecaoDebitoCobradoCategoria
						.next();

				debitoCobradoCategoriaInserir
						.setDebitoCobrado(debitoCobradoDestino);
				
				debitoCobradoCategoriaInserir.setComp_id(
						new DebitoCobradoCategoriaPK(
								debitoCobradoCategoriaInserir.getCategoria().getId(),
								debitoCobradoDestino.getId()));

				debitoCobradoCategoriaInserir.setUltimaAlteracao(new Date());

				this.getControladorUtil()
						.inserir(debitoCobradoCategoriaInserir);
			}
		}
	}

	/**
	 * [UC0609] - Transferência de Débitos/Créditos
	 * 
	 * @author Raphael Rossiter
	 * @date 13/06/2007
	 * 
	 * @throws ControladorException
	 */
	protected void inserirCreditoRealizadoTransferencia(Conta contaOrigem,
			Conta contaDestino) throws ControladorException {

		FiltroCreditoRealizado filtroCreditoRealizado = new FiltroCreditoRealizado();

		filtroCreditoRealizado
				.adicionarCaminhoParaCarregamentoEntidade("lancamentoItemContabil");
		filtroCreditoRealizado
				.adicionarCaminhoParaCarregamentoEntidade("creditoTipo");
		filtroCreditoRealizado
				.adicionarCaminhoParaCarregamentoEntidade("creditoOrigem");

		filtroCreditoRealizado.adicionarParametro(new ParametroSimples(
				FiltroCreditoRealizado.CONTA_ID, contaOrigem.getId()));

		Collection colecaoCreditoRealizado = this.getControladorUtil()
				.pesquisar(filtroCreditoRealizado,
						CreditoRealizado.class.getName());

		if (colecaoCreditoRealizado != null
				&& !colecaoCreditoRealizado.isEmpty()) {

			CreditoRealizado creditoRealizadoOrigem = null;
			CreditoRealizado creditoRealizadoInserir = null;
			Iterator itColecaoCreditoRealizado = colecaoCreditoRealizado
					.iterator();

			while (itColecaoCreditoRealizado.hasNext()) {

				creditoRealizadoOrigem = (CreditoRealizado) itColecaoCreditoRealizado
						.next();
				
				
				FiltroCreditoRealizado filtroCreditoRealizadoAux = new FiltroCreditoRealizado();

				filtroCreditoRealizadoAux
						.adicionarCaminhoParaCarregamentoEntidade("lancamentoItemContabil");
				filtroCreditoRealizadoAux
						.adicionarCaminhoParaCarregamentoEntidade("creditoTipo");
				filtroCreditoRealizadoAux
						.adicionarCaminhoParaCarregamentoEntidade("creditoOrigem");

				filtroCreditoRealizadoAux.adicionarParametro(new ParametroSimples(
						FiltroCreditoRealizado.CODIGO, creditoRealizadoOrigem.getId()));

				Collection colecaoCreditoRealizadoAux = this.getControladorUtil()
						.pesquisar(filtroCreditoRealizadoAux,
								CreditoRealizado.class.getName());
				
				creditoRealizadoInserir = (CreditoRealizado) Util.retonarObjetoDeColecao(colecaoCreditoRealizadoAux);

				//creditoRealizadoInserir = creditoRealizadoOrigem;

				creditoRealizadoInserir.setId(null);
				creditoRealizadoInserir.setCreditoRealizadoCategorias(null);

				creditoRealizadoInserir.setConta(contaDestino);

				creditoRealizadoInserir.setLocalidade(contaDestino
						.getLocalidade());

				creditoRealizadoInserir.setCodigoSetorComercial(contaDestino
						.getCodigoSetorComercial());

				creditoRealizadoInserir
						.setQuadra(contaDestino.getQuadraConta());
				creditoRealizadoInserir.setNumeroQuadra(contaDestino
						.getQuadra());

				creditoRealizadoInserir.setNumeroLote(contaDestino.getLote());
				creditoRealizadoInserir.setNumeroSubLote(contaDestino
						.getSubLote());

				creditoRealizadoInserir.setUltimaAlteracao(new Date());

				// CREDITO_REALIZADO
				Integer idGerado = (Integer) this.getControladorUtil().inserir(
						creditoRealizadoInserir);
				creditoRealizadoInserir.setId(idGerado);

				// CREDITO_REALIZADO_CATEGORIA
				this.inserirCreditoRealizadoCategoriaTransferencia(
						creditoRealizadoOrigem, creditoRealizadoInserir);
			}
		}

	}

	/**
	 * [UC0609] - Transferência de Débitos/Créditos
	 * 
	 * @author Raphael Rossiter
	 * @date 13/06/2007
	 * 
	 * @throws ControladorException
	 */
	protected void inserirCreditoRealizadoCategoriaTransferencia(
			CreditoRealizado creditoRealizadoOrigem,
			CreditoRealizado creditoRealizadoDestino)
			throws ControladorException {

		FiltroCreditoRealizadoCategoria filtroCreditoRealizadoCategoria = new FiltroCreditoRealizadoCategoria();

		filtroCreditoRealizadoCategoria
				.adicionarCaminhoParaCarregamentoEntidade("creditoRealizado");
		filtroCreditoRealizadoCategoria
				.adicionarCaminhoParaCarregamentoEntidade("categoria");

		filtroCreditoRealizadoCategoria
				.adicionarParametro(new ParametroSimples(
						FiltroCreditoRealizadoCategoria.CREDITO_REALIZADO_ID,
						creditoRealizadoOrigem.getId()));

		Collection colecaoCreditoRealizadoCategoria = this.getControladorUtil()
				.pesquisar(filtroCreditoRealizadoCategoria,
						CreditoRealizadoCategoria.class.getName());

		if (colecaoCreditoRealizadoCategoria != null
				&& !colecaoCreditoRealizadoCategoria.isEmpty()) {

			CreditoRealizadoCategoria creditoRealizadoCategoriaInserir = null;
			Iterator itColecaoCreditoRealizadoCategoria = colecaoCreditoRealizadoCategoria
					.iterator();

			while (itColecaoCreditoRealizadoCategoria.hasNext()) {

				creditoRealizadoCategoriaInserir = (CreditoRealizadoCategoria) itColecaoCreditoRealizadoCategoria
						.next();

				creditoRealizadoCategoriaInserir
						.setCreditoRealizado(creditoRealizadoDestino);
				
				creditoRealizadoCategoriaInserir.setComp_id(
						new CreditoRealizadoCategoriaPK(
								creditoRealizadoDestino,
								creditoRealizadoCategoriaInserir.getCategoria()));

				creditoRealizadoCategoriaInserir.setUltimaAlteracao(new Date());

				this.getControladorUtil().inserir(
						creditoRealizadoCategoriaInserir);
			}
		}
	}

	/**
	 * [UC0609] - Transferência de Débitos/Créditos
	 * 
	 * @author Raphael Rossiter
	 * @date 13/06/2007
	 * 
	 * @throws ControladorException
	 */
	protected void inserirContaImpostosDeduzidosTransferencia(
			Conta contaOrigem, Conta contaDestino) throws ControladorException {

		FiltroContaImpostosDeduzidos filtroContaImpostosDeduzidos = new FiltroContaImpostosDeduzidos();

		filtroContaImpostosDeduzidos
				.adicionarCaminhoParaCarregamentoEntidade("impostoTipo");

		filtroContaImpostosDeduzidos.adicionarParametro(new ParametroSimples(
				FiltroContaImpostosDeduzidos.CONTA_ID, contaOrigem.getId()));

		Collection colecaoContaImpostosDeduzidos = this.getControladorUtil()
				.pesquisar(filtroContaImpostosDeduzidos,
						ContaImpostosDeduzidos.class.getName());

		if (colecaoContaImpostosDeduzidos != null
				&& !colecaoContaImpostosDeduzidos.isEmpty()) {

			ContaImpostosDeduzidos contaImpostosDeduzidosInserir = null;
			Iterator itColecaoContaImpostosDeduzidos = colecaoContaImpostosDeduzidos
					.iterator();

			while (itColecaoContaImpostosDeduzidos.hasNext()) {

				contaImpostosDeduzidosInserir = (ContaImpostosDeduzidos) itColecaoContaImpostosDeduzidos
						.next();
				contaImpostosDeduzidosInserir.setId(null);

				contaImpostosDeduzidosInserir.setConta(contaDestino);

				contaImpostosDeduzidosInserir.setUltimaAlteracao(new Date());

				// CONTA_IMPOSTOS_DEDUZIDOS
				this.getControladorUtil()
						.inserir(contaImpostosDeduzidosInserir);
			}
		}

	}

	/**
	 * [UC0594] Gerar Relação de Parcelamento
	 * 
	 * @author Ana Maria
	 * 
	 * @date 30/05/2007
	 */
	public Collection<RelacaoParcelamentoRelatorioHelper> filtrarRelacaoParcelamento(
			FiltrarRelacaoParcelamentoHelper filtrarRelacaoParcelamento)
			throws ControladorException {

		Collection<RelacaoParcelamentoRelatorioHelper> colecaoRelacaoParcelamento = new ArrayList();

		try {

			colecaoRelacaoParcelamento = repositorioCobranca
					.pesquisarRelacaoParcelamento(filtrarRelacaoParcelamento);

		} catch (ErroRepositorioException ex) {
			sessionContext.setRollbackOnly();
			ex.printStackTrace();
			throw new ControladorException("erro.sistema", ex);
		}
		return colecaoRelacaoParcelamento;
	}
	
	/**
	 * [UC0878] Gerar Relação de Parcelamento - Visão Analitica
	 * 
	 * @author Bruno Barros
	 * 
	 * @date 04/02/2009
	 */
	public Collection<RelatorioRelacaoParcelamentoAnaliticoBean> filtrarRelacaoParcelamentoAnalitico(
			FiltrarRelacaoParcelamentoHelper filtrarRelacaoParcelamento) throws ControladorException {

		Collection<Object[]> colecaoRelacaoParcelamento = new ArrayList();
		Collection<RelatorioRelacaoParcelamentoAnaliticoBean> beans = new ArrayList();

		try {

			SistemaParametro sistemaParametro = this.getControladorUtil().pesquisarParametrosDoSistema();
			
			colecaoRelacaoParcelamento = repositorioCobranca
			.filtrarRelacaoParcelamentoAnalitico(filtrarRelacaoParcelamento, sistemaParametro.getAnoMesFaturamento());
			
			if ( colecaoRelacaoParcelamento != null && colecaoRelacaoParcelamento.size() > 0 ){
				
				Iterator iteRelacaoParcelamento = colecaoRelacaoParcelamento.iterator();
				
				while ( iteRelacaoParcelamento.hasNext() ){
					
					Object[] linha = (Object[]) iteRelacaoParcelamento.next();
					
					//Id do Debito a Cobrar pode estar em historico ou não
					Integer idDebitoACobrar = 0;
					if(linha[18] != null){
						idDebitoACobrar = (Integer) linha[18];
					}else if (linha[19] != null){
						idDebitoACobrar = (Integer) linha[19];
					}
					
					// Pesquisamos as quantidades de contas não pagas do parcelamento
					Integer quantidadeCobrancasNaoPagas= 
						this.repositorioCobranca.pesquisarQuantidadeContasNaoPagasParcelamento( ( Integer ) linha[0], idDebitoACobrar);
					
					// Calculamos a quantidade de cobranças pagas
					Integer quantidadeCobrancasPagas = 
						( Integer ) linha[14] - quantidadeCobrancasNaoPagas;
					
					// Pegamos a quantidade de cobranças não cobradas
					Integer quantidadeCobrancasNaoCobradas =
						( Integer ) linha[15];
					
					// Calculamos o valor cobrado pago
					BigDecimal valorCobradoPago = 
						new BigDecimal( ( ( BigDecimal ) linha[10] ).floatValue() * quantidadeCobrancasPagas  );
					
					// Calculamos o valor cobrado não pago
					BigDecimal valorCobradoNaoPago = 
						new BigDecimal( ( ( BigDecimal ) linha[10] ).floatValue() * quantidadeCobrancasNaoPagas  );
					
					// Calculamos o valor não cobrado
					BigDecimal valorNaoCobrado = 
						new BigDecimal( ( ( BigDecimal ) linha[10] ).floatValue() * quantidadeCobrancasNaoCobradas  );
					
					String municipio = null;
					Integer idMunicipio = null;
					if(!Util.isVazioOrNulo(filtrarRelacaoParcelamento.getColecaoMunicipiosAssociados())){
						idMunicipio = (Integer) linha[18];
						municipio = (String) linha[19];
					}
					
					// Criamos o bean do relatorio
					RelatorioRelacaoParcelamentoAnaliticoBean bean = 
						new RelatorioRelacaoParcelamentoAnaliticoBean(
								// Nome do cliente
								(String) linha[5],
								// Matricula do imovel
								( (Integer) linha[6] ) + "",
								// Telefone do cliente
								(String) linha[7],
								// Unidade de Negocio
								(String) linha[16],
								// Id do parcelamento
								( (Integer) linha[0] ) + "",
								// Dia do vencimento
								(Integer) linha[8],
								// Valor do debito
								(BigDecimal) linha[9],
								// Valor do parcela
								(BigDecimal) linha[10],								
								// Valor entrada
								(BigDecimal) linha[11],								
								// Data do parcelamento
								(Date) linha[12],
								// Quantidade de parcelas do parcelamento
								(Integer) linha[13],
								// Quantidade de cobrancas pagas
								quantidadeCobrancasPagas,
								// Quantidade de cobrancas nao pagas
								quantidadeCobrancasNaoPagas,
								// Quantidade nao cobradas
								quantidadeCobrancasNaoCobradas,							
								// Valor de cobrancas pagas
								valorCobradoPago,
								// Valor de cobrancas nao pagas
								valorCobradoNaoPago,
								// Valor nao cobradas
								valorNaoCobrado,
								// id da gerencial
								(Integer) linha[3],
								// Id da localidade
								(Integer) linha[1],
								//Id do Município
								idMunicipio,
								// Descricao da gerencial
								(String) linha[4],
								// Descricao da localidade
								(String) linha[2],
								//Descrição Município
								municipio,
								// login
								(String) linha[17]
								);
					
					// adicionamos o bean a coleção
					beans.add( bean );					
				}				
			}
			
		} catch (ErroRepositorioException ex) {
			ex.printStackTrace();
			//sessionContext.setRollbackOnly();
			throw new ControladorException("erro.sistema", ex);
		}
		
		return beans;
	}
	

	/**
	 * [UC0XXXX] Gerar Resumo das Ações de Cobrança Eventuais
	 * 
	 * @author Sávio Luiz
	 * @created 15/06/2006
	 * 
	 * @exception ErroRepositorioException
	 *                Repositorio Exception
	 */
	public Collection<Object[]> pesquisarCobrancaAcaoAtividadeComandoSemRealizacao()
			throws ControladorException {
		try {

			return repositorioCobranca
					.pesquisarCobrancaAcaoAtividadeComandoSemRealizacao();

		} catch (ErroRepositorioException ex) {
			sessionContext.setRollbackOnly();
			ex.printStackTrace();
			throw new ControladorException("erro.sistema", ex);
		}
	}

	/**
	 * 
	 * [UCXXXX] Gerar Resumo das Ações de Cobrança Eventuais
	 * 
	 * Pós-oncidção: Resumo das ações de cobrança gerado e atividade encerrar da
	 * ação de cobrança, se for o caso, realizada
	 * 
	 * @author Sávio Luiz
	 * @date 15/06/2007
	 * 
	 */
	public void gerarResumoAcoesCobrancaEventual(
			Object[] dadosCobrancaAcaoAtividadeEventual,
			int idFuncionalidadeIniciada) throws ControladorException {

		int idUnidadeIniciada = 0;

		// posições do array com os dados que serão atualizados
		final int POSICAO_ID_COB_ACAO_ATIV_COMANDO = 0;
		final int POSICAO_ID_COB_ACAO = 1;
		final int POSICAO_ID_DOCUMENTO_TIPO = 3;
		final int POSICAO_DATA_ENCERRAMENTO_PREVISTA = 4;
		final int POSICAO_DATA_COMANDO = 6;

		// -------------------------
		//
		// Registrar o início do processamento da Unidade de
		// Processamento
		// do Batch
		//
		// -------------------------

		idUnidadeIniciada = getControladorBatch()
				.iniciarUnidadeProcessamentoBatch(
						idFuncionalidadeIniciada,
						UnidadeProcessamento.COB_ACAO_ATIV_COMAND,
						((Integer) dadosCobrancaAcaoAtividadeEventual[POSICAO_ID_COB_ACAO_ATIV_COMANDO]));

		// coleção com os cronogramas de cobrança dos grupos de cobrança e meses
		// de referência
		Usuario usuarioLogado = Usuario.USUARIO_BATCH;
		try {

			if (dadosCobrancaAcaoAtividadeEventual != null) {

				Integer idCobrancaAtividadeAcaoComando = null;
				Integer idCobrancaAcao = null;
				Integer idDocumentoTipo = null;
				
				Date dataEncerramentoPrevista = null;
				Date dataRealizacaoEncerrar = null;
				Date dataComando = null;
				
				if (dadosCobrancaAcaoAtividadeEventual[POSICAO_ID_COB_ACAO_ATIV_COMANDO] != null) {
					idCobrancaAtividadeAcaoComando = (Integer) dadosCobrancaAcaoAtividadeEventual[POSICAO_ID_COB_ACAO_ATIV_COMANDO];
				}
				if (dadosCobrancaAcaoAtividadeEventual[POSICAO_ID_COB_ACAO] != null) {
					idCobrancaAcao = (Integer) dadosCobrancaAcaoAtividadeEventual[POSICAO_ID_COB_ACAO];
				}

				if (dadosCobrancaAcaoAtividadeEventual[POSICAO_ID_DOCUMENTO_TIPO] != null) {
					idDocumentoTipo = (Integer) dadosCobrancaAcaoAtividadeEventual[POSICAO_ID_DOCUMENTO_TIPO];
				}
				if (dadosCobrancaAcaoAtividadeEventual[POSICAO_DATA_ENCERRAMENTO_PREVISTA] != null) {
					dataEncerramentoPrevista = (Date) dadosCobrancaAcaoAtividadeEventual[POSICAO_DATA_ENCERRAMENTO_PREVISTA];
				}
				
				if (dadosCobrancaAcaoAtividadeEventual[POSICAO_DATA_COMANDO] != null){
					dataComando = (Date) dadosCobrancaAcaoAtividadeEventual[POSICAO_DATA_COMANDO];
				}

				Collection colecaoCobrancaAcao = null;
				FiltroCobrancaAcao filtroCobrancaAcao = new FiltroCobrancaAcao();
				filtroCobrancaAcao.adicionarParametro(new ParametroSimples(FiltroCobrancaAcao.ID, idCobrancaAcao));
				filtroCobrancaAcao.adicionarCaminhoParaCarregamentoEntidade(FiltroCobrancaAcao.DOCUMENTO_TIPO);
				filtroCobrancaAcao.adicionarCaminhoParaCarregamentoEntidade(FiltroCobrancaAcao.SERVICO_TIPO);
				
				colecaoCobrancaAcao = this.getControladorUtil().pesquisar(
					filtroCobrancaAcao, CobrancaAcao.class.getName());
				
				CobrancaAcao cobrancaAcao = (CobrancaAcao) 
					Util.retonarObjetoDeColecao(colecaoCobrancaAcao);
				
				// Item 3.4
				// verfica se o valor do documento tipo é
				// diferente de nulo
				if (idDocumentoTipo != null) {

					// caso a atividade da ação de cobrança
					// correspondente a
					// encerrar esteja comandada e a data
					// prescita para o
					// encerramento seja igual ou menor do
					// que a data
					// corrente
					if (dataEncerramentoPrevista != null
							&& (dataEncerramentoPrevista.compareTo(new Date()) <= 0)) {
						dataRealizacaoEncerrar = new Date();
					}

					// [SB0001] - Processar Ação com
					// Documentos de Cobrança
					this.processarDocumentoCobrancaVersaoReduzida(
							ConstantesSistema.NUMERO_NAO_INFORMADO, idCobrancaAtividadeAcaoComando, 							
							cobrancaAcao, 
							usuarioLogado,							
							dataRealizacaoEncerrar,
							dataComando,
							dataEncerramentoPrevista);
				}
				// seta para null para o GC liberar
				idCobrancaAcao = null;
				idDocumentoTipo = null;
				dataEncerramentoPrevista = null;
				dataRealizacaoEncerrar = null;

			}

			getControladorBatch().encerrarUnidadeProcessamentoBatch(null,
					idUnidadeIniciada, false);

			System.out.println("########## FINALIZADO EM  = " + new Date());

		} catch (Exception e) {
			// Este catch serve para interceptar qualquer exceção que o processo
			// batch venha a lançar e garantir que a unidade de processamento do
			// batch será atualizada com o erro ocorrido
			e.printStackTrace();

			getControladorBatch().encerrarUnidadeProcessamentoBatch(e,
					idUnidadeIniciada, true);

			throw new EJBException(e);
		}

	}

	/**
	 * 
	 * [UCXXXX] Gerar Resumo das Ações de Cobrança Eventuais
	 * 
	 * [SB0001] - Processar Documento de Cobrança
	 * 
	 * @author Sávio Luiz
	 * @date 18/06/2007
	 * 
	 */
//	public void processarDocumentoCobrancaEventual(
//			int idCobrancaAtividadeAcaoComando, Usuario usuarioLogado,
//			int idCobrancaAcao, Integer idServicoTipoAcaoCobranca,
//			Date dataRealizacaoEncerrar) throws ControladorException {
//
//		// colecao com os documentos de cobrança gerados na atividade EMITIR da
//		// ação de cobrança
//		Collection<DadosPesquisaCobrancaDocumentoHelper> colecaoDadosPesquisaCobrancaDocumentoHelper = null;
//
//		// posições do array com os dados que serão atualizados
//		final int POSICAO_ID_COBRANCA_DOCUMENTO = 0;
//		final int POSICAO_ID_SITUACAO_ACAO = 1;
//		final int POSICAO_DATA_SITUACAO_ACAO = 2;
//		final int POSICAO_ID_SITUACAO_PREDOMINANTE_DEBITO_COBRANCA = 3;
//		final int POSICAO_ID_CATEGORIA = 5;
//		final int POSICAO_ID_ESFERA_PODER = 6;
//		final int POSICAO_INDICADOR_ACIMA_LIMITE = 9;
//		final int POSICAO_PERCENTUAL_VALOR_MINIMO_PAGO_CRITERIO_COBRANCA = 10;
//		final int POSICAO_PERCENTUAL_QUANTIDADE_MINIMO_PAGO_CRITERIO_COBRANCA = 11;
//
//		try {
//
//			colecaoDadosPesquisaCobrancaDocumentoHelper = this.repositorioCobranca
//					.pesquisarCobrancaDocumentoEventual(idCobrancaAtividadeAcaoComando);
//
//			// para cada documento de cobrança
//			if (colecaoDadosPesquisaCobrancaDocumentoHelper != null
//					&& !colecaoDadosPesquisaCobrancaDocumentoHelper.isEmpty()) {
//
//				Iterator iteratorCobrancaDocumantoParaAtualizarOUHelper = null;
//				Collection colecaoCobrancaDocumantoParaAtualizar = null;
//
//				// caso o id do serviço tipo seja diferente de nulo então
//				// pode ter OS e é verificado as os dos documentos de
//				// cobrança
//				if (idServicoTipoAcaoCobranca != null) {
//					colecaoCobrancaDocumantoParaAtualizar = this
//							.gerarColecaoDocumentoCobrancaOrdemServicoEventual(
//									idServicoTipoAcaoCobranca, usuarioLogado,
//									idCobrancaAtividadeAcaoComando,
//									dataRealizacaoEncerrar);
//
//					iteratorCobrancaDocumantoParaAtualizarOUHelper = colecaoCobrancaDocumantoParaAtualizar
//							.iterator();
//				} else {
//					iteratorCobrancaDocumantoParaAtualizarOUHelper = colecaoDadosPesquisaCobrancaDocumentoHelper
//							.iterator();
//					colecaoCobrancaDocumantoParaAtualizar = new ArrayList();
//				}
//				while (iteratorCobrancaDocumantoParaAtualizarOUHelper.hasNext()) {
//
//					Object[] cobrancaDocumentoParaAtualizar = null;
//					Integer idCobrancaDocumento = null;
//					BigDecimal valorMinimoPagoParceladoCancelado = null;
//					BigDecimal quantidadeMinimoaPagoParceladoCancelado = null;
//					if (idServicoTipoAcaoCobranca != null) {
//						cobrancaDocumentoParaAtualizar = (Object[]) iteratorCobrancaDocumantoParaAtualizarOUHelper
//								.next();
//						idCobrancaDocumento = (Integer) cobrancaDocumentoParaAtualizar[POSICAO_ID_COBRANCA_DOCUMENTO];
//						valorMinimoPagoParceladoCancelado = (BigDecimal) cobrancaDocumentoParaAtualizar[POSICAO_PERCENTUAL_VALOR_MINIMO_PAGO_CRITERIO_COBRANCA];
//						quantidadeMinimoaPagoParceladoCancelado = (BigDecimal) cobrancaDocumentoParaAtualizar[POSICAO_PERCENTUAL_QUANTIDADE_MINIMO_PAGO_CRITERIO_COBRANCA];
//					} else {
//						// dados para atualizar o cobranca documento
//						cobrancaDocumentoParaAtualizar = new Object[13];
//
//						DadosPesquisaCobrancaDocumentoHelper dadosPesquisaCobrancaDocumentoHelper = (DadosPesquisaCobrancaDocumentoHelper) iteratorCobrancaDocumantoParaAtualizarOUHelper
//								.next();
//
//						// indicador acima do limite
//						Short indicadorAcimaLimite = null;
//						if (dadosPesquisaCobrancaDocumentoHelper
//								.getValorDocumento() != null
//								&& dadosPesquisaCobrancaDocumentoHelper
//										.getValorDocumento()
//										.compareTo(
//												dadosPesquisaCobrancaDocumentoHelper
//														.getValorLimitePrioridadeCobrancaCriterio()) > 0) {
//							indicadorAcimaLimite = new Short("1");
//						} else {
//							indicadorAcimaLimite = new Short("2");
//						}
//
//						cobrancaDocumentoParaAtualizar[POSICAO_INDICADOR_ACIMA_LIMITE] = indicadorAcimaLimite;
//
//						// [UC0306] - Obter Principal CAtegoria do Imovel
//						Categoria categoria = getControladorImovel()
//								.obterPrincipalCategoriaImovel(
//										dadosPesquisaCobrancaDocumentoHelper
//												.getIdImovel());
//						cobrancaDocumentoParaAtualizar[POSICAO_ID_CATEGORIA] = categoria
//								.getId();
//
//						// pesquisa os imovel para ser usado para gravar o
//						// Resumo
//						// Cobrança Ação
//						Imovel imovel = this
//								.pesquisarDadosImovel(dadosPesquisaCobrancaDocumentoHelper
//										.getIdImovel());
//
//						// pega a esfera do poder do imovel
//						EsferaPoder esferaPoder = null;
//						if (imovel.getClienteImoveis() != null
//								&& !imovel.getClienteImoveis().isEmpty()) {
//							Cliente cliente = (Cliente) imovel
//									.getClienteImoveis().iterator().next();
//							esferaPoder = cliente.getClienteTipo()
//									.getEsferaPoder();
//						}
//						if (esferaPoder != null && !esferaPoder.equals("")) {
//							cobrancaDocumentoParaAtualizar[POSICAO_ID_ESFERA_PODER] = esferaPoder
//									.getId();
//						} else {
//							cobrancaDocumentoParaAtualizar[POSICAO_ID_ESFERA_PODER] = null;
//						}
//
//						// atualiza os campos para serem utilizados para
//						// atualização
//						// e consulta de dados da cobrança documento
//						// Atribuir o valor AÇÃO ENVIADOS à situação de
//						// Cobrança
//						cobrancaDocumentoParaAtualizar[POSICAO_ID_SITUACAO_ACAO] = CobrancaAcaoSituacao.ENVIADOS;
//						cobrancaDocumentoParaAtualizar[POSICAO_DATA_SITUACAO_ACAO] = dadosPesquisaCobrancaDocumentoHelper
//								.getDataEmissao();
//						idCobrancaDocumento = dadosPesquisaCobrancaDocumentoHelper
//								.getIdDocumento();
//						cobrancaDocumentoParaAtualizar[POSICAO_ID_COBRANCA_DOCUMENTO] = idCobrancaDocumento;
//						valorMinimoPagoParceladoCancelado = dadosPesquisaCobrancaDocumentoHelper
//								.getPercentualValorMinimoCobrancaCriterio();
//						quantidadeMinimoaPagoParceladoCancelado = dadosPesquisaCobrancaDocumentoHelper
//								.getPercentualQuantidadeMinimaCobrancaCriterio();
//
//					}
//
//					// 2.2 Seleciona os itens do documento de cobrança
//					Collection colecaoCobrancaDocumentoItem = null;
//					// COBRANCA_DOCUMENTO_ITEM por CBDO_ID igual a
//					// idCobrancaDocmento
//
//					colecaoCobrancaDocumentoItem = this.repositorioCobranca
//							.pesquisarDadosCobrancaDocumentoItem(idCobrancaDocumento);
//
//					// colecaoCobrancaDocumentoItem =
//					// this.repositorioCobranca
//					// .pesquisarCobrancaDocumentoItem(idCobrancaDocumento);
//
//					// [SB0003] - Determinar Situação de Débtio do Item de
//					// Cobrança
//					if (colecaoCobrancaDocumentoItem != null
//							&& !colecaoCobrancaDocumentoItem.isEmpty()) {
//
////						cobrancaDocumentoParaAtualizar = 
//							processarCobrancaDocumentoItem(
//								colecaoCobrancaDocumentoItem,
//								cobrancaDocumentoParaAtualizar,
//								valorMinimoPagoParceladoCancelado,
//								quantidadeMinimoaPagoParceladoCancelado);
//
//					} else {
//						cobrancaDocumentoParaAtualizar[POSICAO_ID_SITUACAO_PREDOMINANTE_DEBITO_COBRANCA] = CobrancaDebitoSituacao.SEM_DEBITOS;
//					}
//
//					if (idServicoTipoAcaoCobranca == null) {
//						colecaoCobrancaDocumantoParaAtualizar
//								.add(cobrancaDocumentoParaAtualizar);
//					}
//
//				}// fim do while da Colecao Cobranca Documentos
//
//				if (!colecaoCobrancaDocumantoParaAtualizar.isEmpty()) {
//					// grava no banco as COBRANCA_DOCUMENTO
//					repositorioCobranca
//							.atualizarCobrancaDocumento(colecaoCobrancaDocumantoParaAtualizar);
//				}
//
//				// seta null para o GC liberar
//				colecaoCobrancaDocumantoParaAtualizar.clear();
//				colecaoCobrancaDocumantoParaAtualizar = null;
//			}
//
//			colecaoDadosPesquisaCobrancaDocumentoHelper.clear();
//			colecaoDadosPesquisaCobrancaDocumentoHelper = null;
//
//		} catch (Exception ex) {
//			ex.printStackTrace();
//			throw new ControladorException("erro.sistema", ex);
//		}
//	}

//	/**
//	 * 
//	 * [UCXXXX] Gerar Resumo das Ações de Cobrança Eventuais
//	 * 
//	 * [SB0001] - Processar Documento de Cobrança
//	 * 
//	 * @author Sávio Luiz
//	 * @date 18/06/2007
//	 * 
//	 */
//	public void processarDocumentoCobrancaEventualVersaoReduzida(
//			int idCobrancaAtividadeAcaoComando, Usuario usuarioLogado,
//			int idCobrancaAcao, Integer idServicoTipoAcaoCobranca,
//			Date dataRealizacaoEncerrar) throws ControladorException {
//
//		// colecao com os documentos de cobrança gerados na atividade EMITIR da
//		// ação de cobrança
//		Collection<DadosPesquisaCobrancaDocumentoHelper> colecaoDadosPesquisaCobrancaDocumentoHelper = null;
//
//		// posições do array com os dados que serão atualizados
//		final int POSICAO_ID_COBRANCA_DOCUMENTO = 0;
//		final int POSICAO_ID_SITUACAO_ACAO = 1;
//		final int POSICAO_DATA_SITUACAO_ACAO = 2;
//		final int POSICAO_ID_SITUACAO_PREDOMINANTE_DEBITO_COBRANCA = 3;
//		final int POSICAO_ID_CATEGORIA = 5;
//		final int POSICAO_ID_ESFERA_PODER = 6;
//		final int POSICAO_ID_CRITERIO_COBRANCA = 8;
//		final int POSICAO_INDICADOR_ACIMA_LIMITE = 9;
//
//		try {
//
//			colecaoDadosPesquisaCobrancaDocumentoHelper = this.repositorioCobranca
//					.pesquisarCobrancaDocumentoEventualSemCriterio(idCobrancaAtividadeAcaoComando);
//
//			HashtableCache cacheCriterios = new HashtableCache("criterioCobranca");			
//			
//			// para cada documento de cobrança
//			if (colecaoDadosPesquisaCobrancaDocumentoHelper != null
//					&& !colecaoDadosPesquisaCobrancaDocumentoHelper.isEmpty()) {
//
//				Iterator iteratorCobrancaDocumantoParaAtualizarOUHelper = null;
//				Collection colecaoCobrancaDocumantoParaAtualizar = null;
//
//				// caso o id do serviço tipo seja diferente de nulo então
//				// pode ter OS e é verificado as os dos documentos de
//				// cobrança
//				if (idServicoTipoAcaoCobranca != null) {
//					colecaoCobrancaDocumantoParaAtualizar = this
//							.gerarColecaoDocumentoCobrancaOrdemServico(
//									idServicoTipoAcaoCobranca, dataRealizacaoEncerrar, usuarioLogado,
//									ConstantesSistema.NUMERO_NAO_INFORMADO, idCobrancaAtividadeAcaoComando);
//
//					iteratorCobrancaDocumantoParaAtualizarOUHelper = colecaoCobrancaDocumantoParaAtualizar
//							.iterator();
//				} else {
//					iteratorCobrancaDocumantoParaAtualizarOUHelper = colecaoDadosPesquisaCobrancaDocumentoHelper
//							.iterator();
//					colecaoCobrancaDocumantoParaAtualizar = new ArrayList();
//				}
//				while (iteratorCobrancaDocumantoParaAtualizarOUHelper.hasNext()) {
//
//					Object[] cobrancaDocumentoParaAtualizar = null;
//					Integer idCobrancaDocumento = null;
//					Integer idImovel = null;
//					Date dataEmissao = null;
//					Integer idCobrancaCriterio = null;
//					BigDecimal valorMinimoPagoParceladoCancelado = null;
//					BigDecimal quantidadeMinimaPagoParceladoCancelado = null;
//					BigDecimal valorLimitePrioridade = null;
//					BigDecimal valorDocumento = null;
//					Integer idSituacaoAcao = null;
//
//					if (idServicoTipoAcaoCobranca != null) {
//						cobrancaDocumentoParaAtualizar = (Object[]) iteratorCobrancaDocumantoParaAtualizarOUHelper
//								.next();
//						idCobrancaDocumento = (Integer) cobrancaDocumentoParaAtualizar[POSICAO_ID_COBRANCA_DOCUMENTO];
//						// Consultando criterio de cobranca... usando cache, pois ha muita repeticao de criterios
//						if (cobrancaDocumentoParaAtualizar[POSICAO_ID_CRITERIO_COBRANCA] != null){
//							idCobrancaCriterio = (Integer) cobrancaDocumentoParaAtualizar[POSICAO_ID_CRITERIO_COBRANCA];
//						}
//						
//					} else {
//
//						// dados para atualizar o cobranca documento
//						cobrancaDocumentoParaAtualizar = new Object[13];
//	
//						// cbdo_id as idCobrancaDocumento	 	// 0
//						// cbdo_tmemissao as emissao			// 1
//						// imov_id as idImovel, " + 			// 2
//						// cbdo_vldocumento as valorDocumento	// 3
//						// cbct_id as idCriterio "				// 4
//						// cast_id as idSituacaoAcao "			// 5
//						Object[] dadosPesquisaCobrancaDocumento = (Object[]) iteratorCobrancaDocumantoParaAtualizarOUHelper.next();
//	
//						if (dadosPesquisaCobrancaDocumento != null){
//							idCobrancaDocumento = (Integer) dadosPesquisaCobrancaDocumento[0];
//							dataEmissao = (Date) dadosPesquisaCobrancaDocumento[1];
//							idImovel = (Integer) dadosPesquisaCobrancaDocumento[2];							
//							valorDocumento = (BigDecimal) dadosPesquisaCobrancaDocumento[3];
//							idCobrancaCriterio = (Integer) dadosPesquisaCobrancaDocumento[4];
//							idSituacaoAcao = (Integer) dadosPesquisaCobrancaDocumento[5];
//						}
//						
//						// [UC0306] - Obter Principal CAtegoria do Imovel
//						// De acordo com o metodo ControladorImovel.obterPrincipalCategoriaImovel
//						// caso seja a empresa FEBRABAN, a categoria principal sera a que tiver o maior codigo,
//						// caso contrario, a principal será a que tiver menor codigo						
//						SistemaParametro sistemaParametro = getControladorUtil().pesquisarParametrosDoSistema();
//						boolean ehFEBRABAN = sistemaParametro.getCodigoEmpresaFebraban().equals(
//								SistemaParametro.CODIGO_EMPRESA_FEBRABAN_CAERN); 
//						Integer idCategoria = repositorioImovel.obterIdCategoriaPrincipal(
//								idImovel, ehFEBRABAN);
//						cobrancaDocumentoParaAtualizar[POSICAO_ID_CATEGORIA] = idCategoria;
//
//						Integer idEsferaPoder = repositorioImovel.obterIdEsferaPoder(idImovel);
//						
//						if (idEsferaPoder != null) {
//							cobrancaDocumentoParaAtualizar[POSICAO_ID_ESFERA_PODER] = idEsferaPoder;
//						} else {
//							cobrancaDocumentoParaAtualizar[POSICAO_ID_ESFERA_PODER] = null;
//						}
//		
//						// atualiza os campos para serem utilizados para
//						// atualização
//						// e consulta de dados da cobrança documento
//						// Atribuir o valor AÇÃO ENVIADOS à situação de
//						// Cobrança
//						if (idSituacaoAcao == null){
//							cobrancaDocumentoParaAtualizar[POSICAO_ID_SITUACAO_ACAO] = CobrancaAcaoSituacao.ENVIADOS;
//							cobrancaDocumentoParaAtualizar[POSICAO_DATA_SITUACAO_ACAO] = dataEmissao;							
//						}
//						cobrancaDocumentoParaAtualizar[POSICAO_ID_COBRANCA_DOCUMENTO] = idCobrancaDocumento;
//						
//					}
//					
//					// Consultando criterio de cobranca... usando cache, pois ha muita repeticao de criterios
//					if (idCobrancaCriterio != null){
//						CobrancaCriterio cobrancaCriterio = null;						
//						Object objCache = cacheCriterios.get(idCobrancaCriterio);
//						if (objCache == null){
//							FiltroCobrancaCriterio filtroCriterio = new FiltroCobrancaCriterio();
//							filtroCriterio.adicionarParametro(new ParametroSimples(
//									FiltroCobrancaCriterio.ID,
//									idCobrancaCriterio));
//							Collection retorno = repositorioUtil.pesquisar(filtroCriterio, CobrancaCriterio.class.getName());
//							cobrancaCriterio = (CobrancaCriterio) Util.retonarObjetoDeColecao(retorno);
//							cacheCriterios.put(idCobrancaCriterio, cobrancaCriterio);
//						} else {
//							cobrancaCriterio = (CobrancaCriterio) objCache;
//						}
//						valorMinimoPagoParceladoCancelado = cobrancaCriterio
//								.getPercentualValorMinimoPagoParceladoCancelado(); 
//						quantidadeMinimaPagoParceladoCancelado =
//								cobrancaCriterio.getPercentualQuantidadeMinimoPagoParceladoCancelado();
//						valorLimitePrioridade = cobrancaCriterio.getValorLimitePrioridade();
//					}
//						
//					// indicador acima do limite
//					Short indicadorAcimaLimite = null;
//					if (valorDocumento != null && valorLimitePrioridade != null
//							&& valorDocumento.compareTo(valorLimitePrioridade) > 0) {
//						indicadorAcimaLimite = new Short("1");
//					} else {
//						indicadorAcimaLimite = new Short("2");
//					}
//
//					cobrancaDocumentoParaAtualizar[POSICAO_INDICADOR_ACIMA_LIMITE] = indicadorAcimaLimite;
//			
//					// 2.2 Seleciona os itens do documento de cobrança
//					Collection colecaoCobrancaDocumentoItem = null;
//					// COBRANCA_DOCUMENTO_ITEM por CBDO_ID igual a
//					// idCobrancaDocmento
//					colecaoCobrancaDocumentoItem = this.repositorioCobranca
//						.pesquisarDadosCobrancaDocumentoItemSituacaoJaAtualizada(idCobrancaDocumento);
//					
//					// colecaoCobrancaDocumentoItem =
//					// this.repositorioCobranca
//					// .pesquisarCobrancaDocumentoItem(idCobrancaDocumento);
//
//					// [SB0003] - Determinar Situação de Débtio do Item de
//					// Cobrança
//					if (colecaoCobrancaDocumentoItem != null
//							&& !colecaoCobrancaDocumentoItem.isEmpty()) {
//						cobrancaDocumentoParaAtualizar = processarCobrancaDocumentoItemComItensJaAtualizados(
//								colecaoCobrancaDocumentoItem,
//								cobrancaDocumentoParaAtualizar,
//								valorMinimoPagoParceladoCancelado,
//								quantidadeMinimaPagoParceladoCancelado,
//								idImovel);
//					} else {
//						cobrancaDocumentoParaAtualizar[POSICAO_ID_SITUACAO_PREDOMINANTE_DEBITO_COBRANCA] = CobrancaDebitoSituacao.SEM_DEBITOS;
//					}
//
//					if (idServicoTipoAcaoCobranca == null) {
//						colecaoCobrancaDocumantoParaAtualizar
//								.add(cobrancaDocumentoParaAtualizar);
//					}
//
//				}// fim do while da Colecao Cobranca Documentos
//
//				if (!colecaoCobrancaDocumantoParaAtualizar.isEmpty()) {
//					// grava no banco as COBRANCA_DOCUMENTO
//					repositorioCobranca
//							.atualizarCobrancaDocumento(colecaoCobrancaDocumantoParaAtualizar);
//				}
//
//				// seta null para o GC liberar
//				colecaoCobrancaDocumantoParaAtualizar.clear();
//				colecaoCobrancaDocumantoParaAtualizar = null;
//			}
//
//			colecaoDadosPesquisaCobrancaDocumentoHelper.clear();
//			colecaoDadosPesquisaCobrancaDocumentoHelper = null;
//
//		} catch (Exception ex) {
//			ex.printStackTrace();
//			throw new ControladorException("erro.sistema", ex);
//		}
//	}

	/**
	 * 
	 * [UCXXXX] Gerar Resumo das Ações de Cobrança Eventuais
	 * 
	 * [SB0006] - Determinar Situação da Ordem de Serviço
	 * 
	 * @author Sávio Luiz
	 * @date 18/06/2007
	 * 
	 */
	public Collection gerarColecaoDocumentoCobrancaOrdemServicoEventual(
			Integer idServicoTipoAcaoCobranca, Usuario usuarioLogado,
			int idCobrancaAtividadeAcaoComando, Date dataRealizacaoEncerrar)
			throws ControladorException {

		Collection colecaoCobrancaDocumentoParaAtualizar = new ArrayList();

		try {

			Collection<Object[]> colecaoOrdemServico = null;

			// posições do array com os dados que serão atualizados
			final byte POSICAO_ID_COBRANCA_DOCUMENTO = 0;
			final byte POSICAO_ID_SITUACAO_ACAO = 1;
			final byte POSICAO_DATA_SITUACAO_ACAO = 2;
			final byte POSICAO_ID_CATEGORIA = 5;
			final byte POSICAO_ID_ESFERA_PODER = 6;
			final byte POSICAO_ID_FISCALIZACAO = 7;
			final byte POSICAO_INDICADOR_ACIMA_LIMITE = 9;
			final byte POSICAO_PERCENTUAL_VALOR_MINIMO_PAGO_CRITERIO_COBRANCA = 10;
			final byte POSICAO_PERCENTUAL_QUANTIDADE_MINIMO_PAGO_CRITERIO_COBRANCA = 11;
			final byte POSICAO_ID_MOTIVO_ENCERRAMENTO = 12;

			// caso o serviço tipo da ação de cobrança esteja
			// diferente de nulo,neste caso existe ordem de serviço
			// para a cobrança documento
			if (idServicoTipoAcaoCobranca != null) {

				// 2.1 Determinar a situação da ação de cobrança, 
				// de acordo com a tabela COBRANCA_ACAO_SITUACAO
				// COBRANCA_DOCUMENTO com CBDO_ID igual a idCobrancaDocumento
				colecaoOrdemServico = this.repositorioCobranca
						.pesquisarOrdemServicoEventual(idCobrancaAtividadeAcaoComando);

				Collection colecaoIdsOrdemServico = new ArrayList();

				Collection colecaoOSUnidade = new ArrayList();

				OrdemServicoUnidade ordemServicoUnidade = null;
				OrdemServico os = null;
				AtendimentoRelacaoTipo atendimentoRelacaoTipo = null;

				// [SB0002] - Determinar Situação da Ação de Cobrança
				// caso exista ordem serviço para a cobranca documento
				if (colecaoOrdemServico != null 
						&& !colecaoOrdemServico.isEmpty()) {
					// [SB0007] - Determinar Situação da Ordem de Serviço
					Integer idOrdemServico = null;
					Integer idDocumento = null;
					short situacaoOrdemServico = -1;
					Date dataFiscalizacaoSituacao = null;
					Integer idFiscalizacao = null;
					Date dataEncerramento = null;
					Short indicadorExecucaoMotivoEncerramento = null;
					BigDecimal valorDocumento = null;
					BigDecimal percentualValorMinimoCobrancaCriterio = null;
					BigDecimal percentualQuantidadeMinimaCobrancaCriterio = null;
					BigDecimal valorLimitePrioridadeCobrancaCriterio = null;
					Integer idImovel = null;
					Integer idLocalidade = null;
					Integer idMotivoEncerramento = null;

					Iterator iteColecaoOrdemServico = colecaoOrdemServico.iterator();
					while (iteColecaoOrdemServico.hasNext()) {
						Object[] dadosOS = (Object[]) iteColecaoOrdemServico.next();
						if (dadosOS != null) {
							if (dadosOS[0] != null) {
								idOrdemServico = (Integer) dadosOS[0];
								
								//CRC4529 - adicionado por Vivianne Sousa - 31/08/2010 - analista: Fatima Sampaio
								OrdemServicoFiscSit  ordemServicoFiscSit = getControladorOrdemServico().
									recuperaOrdemServicoFiscSitComMenorDataFiscalizacao(idOrdemServico);
								if(ordemServicoFiscSit != null){
									idFiscalizacao = ordemServicoFiscSit.getFiscalizacaoSituacao().getId(); 
									dataFiscalizacaoSituacao = ordemServicoFiscSit.getDataFiscalizacaoSituacao();
								}else{
									idFiscalizacao = null; 
									dataFiscalizacaoSituacao = null;
								}
							}else{
								idFiscalizacao = null; 
								dataFiscalizacaoSituacao = null;
							}
							
							if (dadosOS[1] != null) {
								situacaoOrdemServico = (Short) dadosOS[1];
							}
//							if (dadosOS[2] != null) {
//								dataFiscalizacaoSituacao = (Date) dadosOS[2];
//							}
							if (dadosOS[3] != null) {
								dataEncerramento = (Date) dadosOS[3];
							}
							if (dadosOS[4] != null) {
								idDocumento = (Integer) dadosOS[4];
							}
							if (dadosOS[5] != null) {
								valorDocumento = (BigDecimal) dadosOS[5];
							}
							if (dadosOS[6] != null) {
								percentualValorMinimoCobrancaCriterio = (BigDecimal) dadosOS[6];
							}
							if (dadosOS[7] != null) {
								percentualQuantidadeMinimaCobrancaCriterio = (BigDecimal) dadosOS[7];
							}
							if (dadosOS[8] != null) {
								valorLimitePrioridadeCobrancaCriterio = (BigDecimal) dadosOS[8];
							}
//							if (dadosOS[9] != null) {
//								idFiscalizacao = (Integer) dadosOS[9];
//							}
							
							if (dadosOS[10] != null) {
								indicadorExecucaoMotivoEncerramento = (Short) dadosOS[10];
							}
							if (dadosOS[11] != null) {
								idImovel = (Integer) dadosOS[11];
							}
							if (dadosOS[12] != null) {
								idLocalidade = (Integer) dadosOS[12];
							}
							if (dadosOS[13] != null) {
								idMotivoEncerramento = (Integer) dadosOS[13];
							}

							// dados para atualizar o cobranca documento
							Object[] cobrancaDocumentoParaAtualizar = new Object[13];
							if (idFiscalizacao != null	&& !idFiscalizacao.equals("")) {
								cobrancaDocumentoParaAtualizar[POSICAO_ID_FISCALIZACAO] = idFiscalizacao;
							}
							// a ordem se serviço não esteja encerrada
							if (situacaoOrdemServico != OrdemServico.SITUACAO_ENCERRADO.shortValue()) {
								// caso a atividade da ação de cobrança correspondente a
								// encerrar esteja comanda e a data presvista para o
								// encerramento seja igual ou menor do que a data corrente
								if (dataRealizacaoEncerrar != null) {

									if (idFiscalizacao == null || idFiscalizacao.equals("")) {
										// Atibuir o valor AÇÃO CANCELADA POR
										// DECURSO DE PRAZO
										cobrancaDocumentoParaAtualizar[POSICAO_ID_SITUACAO_ACAO] = CobrancaAcaoSituacao.CANCELADA_PRAZO;
										cobrancaDocumentoParaAtualizar[POSICAO_DATA_SITUACAO_ACAO] = new Date();
									} else {
										// atribuir o valor AÇÃO FISCALIZADA
										cobrancaDocumentoParaAtualizar[POSICAO_ID_SITUACAO_ACAO] = CobrancaAcaoSituacao.FISCALIZADA;
										cobrancaDocumentoParaAtualizar[POSICAO_DATA_SITUACAO_ACAO] = dataFiscalizacaoSituacao;
									}

									UnidadeOrganizacional unidadeOrganizacional = getControladorUnidade()
											.pesquisarUnidadeOrganizacionalLocalidade(idLocalidade);
									// seta os dados na osUnidade para ser
									// inserido na coleção
									ordemServicoUnidade = new OrdemServicoUnidade();
									os = new OrdemServico();
									atendimentoRelacaoTipo = new AtendimentoRelacaoTipo();

									ordemServicoUnidade.setUnidadeOrganizacional(unidadeOrganizacional);
									os.setId(idOrdemServico);
									ordemServicoUnidade.setOrdemServico(os);
									// seta o usuário na ordem serviço unidade
									ordemServicoUnidade.setUsuario(usuarioLogado);
									// seta o id do atendimento relação tipo
									atendimentoRelacaoTipo.setId(AtendimentoRelacaoTipo.ENCERRAR);
									ordemServicoUnidade.setAtendimentoRelacaoTipo(atendimentoRelacaoTipo);

									// seta a ultima alteração com a data atual
									ordemServicoUnidade.setUltimaAlteracao(new Date());
									colecaoOSUnidade.add(ordemServicoUnidade);

									// seta para null os dados para serem
									// coletados pelo GC
									ordemServicoUnidade = null;
									os = null;
									atendimentoRelacaoTipo = null;

									colecaoIdsOrdemServico.add(idOrdemServico);
								} else {
									
									
									
									// caso a situação da fiscalização da ordem de serviço esteja preenchida
									if (idFiscalizacao != null && !idFiscalizacao.equals("")) {
										// atribuir o valor AÇÃO FISCALIZADA
										cobrancaDocumentoParaAtualizar[POSICAO_ID_SITUACAO_ACAO] = CobrancaAcaoSituacao.FISCALIZADA;
										cobrancaDocumentoParaAtualizar[POSICAO_DATA_SITUACAO_ACAO] = dataFiscalizacaoSituacao;
									} else {
										// atribuir o valor AÇÃO PENDENTE
										cobrancaDocumentoParaAtualizar[POSICAO_ID_SITUACAO_ACAO] = CobrancaAcaoSituacao.PENDENTE;
										cobrancaDocumentoParaAtualizar[POSICAO_DATA_SITUACAO_ACAO] = null;
									}
								}

							} else {
								// recebe a data de encerramento da ordem de serivo(ORSE_TMENCERRAMENTO)
								cobrancaDocumentoParaAtualizar[POSICAO_DATA_SITUACAO_ACAO] = dataEncerramento;
								// indicador de Execução caso o motivo de encerramento corresponda à execução
								if (indicadorExecucaoMotivoEncerramento != null
										&& indicadorExecucaoMotivoEncerramento.intValue() == 1) {
									// atribuir o valor AÇÃO EXECUTADA
									cobrancaDocumentoParaAtualizar[POSICAO_ID_SITUACAO_ACAO] = CobrancaAcaoSituacao.EXECUTADA;

								} else {
									if (idMotivoEncerramento != null && new Short(idMotivoEncerramento
										.toString()).equals(AtendimentoMotivoEncerramento.CANCELADO_POR_DERCURSO_DE_PRAZO)) {
										cobrancaDocumentoParaAtualizar[POSICAO_ID_SITUACAO_ACAO] = CobrancaAcaoSituacao.CANCELADA_PRAZO;

									} else {
										// atribuir o valor AÇÃO CANCELADA
										cobrancaDocumentoParaAtualizar[POSICAO_ID_SITUACAO_ACAO] = CobrancaAcaoSituacao.CANCELADA;
									}
								}
							}

							// indicador acima do limite
							Short indicadorAcimaLimite = null;
							if (valorDocumento != null && valorDocumento.compareTo(valorLimitePrioridadeCobrancaCriterio) > 0) {
								indicadorAcimaLimite = new Short("1");
							} else {
								indicadorAcimaLimite = new Short("2");
							}

							cobrancaDocumentoParaAtualizar[POSICAO_INDICADOR_ACIMA_LIMITE] = indicadorAcimaLimite;

							// [UC0306] - Obter Principal CAtegoria do Imovel
							Categoria categoria = getControladorImovel()
									.obterPrincipalCategoriaImovel(idImovel);
							cobrancaDocumentoParaAtualizar[POSICAO_ID_CATEGORIA] = categoria
									.getId();

							// pesquisa os imovel para ser usado para gravar o
							// Resumo Cobrança Ação
							Imovel imovel = this.pesquisarDadosImovel(idImovel);

							// pega a esfera do poder do imovel
							EsferaPoder esferaPoder = null;
							if (imovel.getClienteImoveis() != null && !imovel.getClienteImoveis().isEmpty()) {
								Cliente cliente = (Cliente) imovel.getClienteImoveis().iterator().next();
								esferaPoder = cliente.getClienteTipo().getEsferaPoder();
							}
							if (esferaPoder != null && !esferaPoder.equals("")) {
								cobrancaDocumentoParaAtualizar[POSICAO_ID_ESFERA_PODER] = esferaPoder.getId();
							} else {
								cobrancaDocumentoParaAtualizar[POSICAO_ID_ESFERA_PODER] = null;
							}
							// atualiza os campos para serem utilizados para
							// atualização e consulta de dados da cobrança documento
							cobrancaDocumentoParaAtualizar[POSICAO_ID_COBRANCA_DOCUMENTO] = idDocumento;
							cobrancaDocumentoParaAtualizar[POSICAO_PERCENTUAL_VALOR_MINIMO_PAGO_CRITERIO_COBRANCA] = percentualValorMinimoCobrancaCriterio;
							cobrancaDocumentoParaAtualizar[POSICAO_PERCENTUAL_QUANTIDADE_MINIMO_PAGO_CRITERIO_COBRANCA] = percentualQuantidadeMinimaCobrancaCriterio;
							
							cobrancaDocumentoParaAtualizar[POSICAO_ID_MOTIVO_ENCERRAMENTO] = idMotivoEncerramento;
							
							colecaoCobrancaDocumentoParaAtualizar.add(cobrancaDocumentoParaAtualizar);
							// limpa os campos
							cobrancaDocumentoParaAtualizar = null;
							idOrdemServico = null;
							idDocumento = null;
							situacaoOrdemServico = -1;
							dataFiscalizacaoSituacao = null;
							idFiscalizacao = null;
							dataEncerramento = null;
							indicadorExecucaoMotivoEncerramento = null;
							idMotivoEncerramento = null;

							valorDocumento = null;
							percentualValorMinimoCobrancaCriterio = null;
							percentualQuantidadeMinimaCobrancaCriterio = null;
							valorLimitePrioridadeCobrancaCriterio = null;
							idImovel = null;
							idLocalidade = null;
						}

					}

				}
				// atualiza as ordem de serviços
				if (colecaoIdsOrdemServico != null && !colecaoIdsOrdemServico.isEmpty()) {
					repositorioCobranca.atualizarParmsOS(colecaoIdsOrdemServico,
									(int) AtendimentoMotivoEncerramento.CANCELADO_POR_DERCURSO_DE_PRAZO);
					getControladorBatch().inserirColecaoObjetoParaBatch(colecaoOSUnidade);

					// limpa a coleção para ser coletado pelo GC
					colecaoIdsOrdemServico.clear();
					colecaoOSUnidade.clear();
					colecaoIdsOrdemServico = null;
					colecaoOSUnidade = null;
				}
			}

		} catch (Exception ex) {
			ex.printStackTrace();
			throw new ControladorException("erro.sistema", ex);
		}

		return colecaoCobrancaDocumentoParaAtualizar;
	}

	/**
	 * 
	 * [UCXXXX] Gerar Resumo das Ações de Cobrança Eventuais
	 * 
	 * [SB0006] - Determinar Situação da Ordem de Serviço
	 * 
	 * @author Sávio Luiz
	 * @date 18/06/2007
	 * 
	 */
	public void inserirResumoAcoesCobrancaEventual(
			Object[] dadosCobrancaAcaoAtividadeEventual,
			int idFuncionalidadeIniciada) throws ControladorException {

		int idUnidadeIniciada = 0;

		// posições do array com os dados que serão atualizados
		final int POSICAO_ID_COB_ACAO_ATIV_COMANDO = 0;
		final int POSICAO_ID_COB_ACAO = 1;
		final int POSICAO_ID_DOCUMENTO_TIPO = 3;
		final int POSICAO_DATA_ENCERRAMENTO_PREVISTA = 4;
		final int POSICAO_DATA_REALIZACAO = 5;

		// -------------------------
		//
		// Registrar o início do processamento da Unidade de
		// Processamento
		// do Batch
		//
		// -------------------------

		idUnidadeIniciada = getControladorBatch()
				.iniciarUnidadeProcessamentoBatch(
						idFuncionalidadeIniciada,
						UnidadeProcessamento.COB_ACAO_ATIV_COMAND,
						((Integer) dadosCobrancaAcaoAtividadeEventual[POSICAO_ID_COB_ACAO_ATIV_COMANDO]));

		// coleção com os cronogramas de cobrança dos grupos de cobrança e meses
		// de referência
		Usuario usuarioLogado = Usuario.USUARIO_BATCH;
		try {

			if (dadosCobrancaAcaoAtividadeEventual != null) {
				Integer idCobrancaAtividadeAcaoComando = null;
				Integer idCobrancaAcao = null;
				Integer idDocumentoTipo = null;
				Date dataEncerramentoPrevista = null;
				Date dataRealizacao = null;
				Date dataRealizacaoEncerrar = null;
				if (dadosCobrancaAcaoAtividadeEventual[POSICAO_ID_COB_ACAO_ATIV_COMANDO] != null) {
					idCobrancaAtividadeAcaoComando = (Integer) dadosCobrancaAcaoAtividadeEventual[POSICAO_ID_COB_ACAO_ATIV_COMANDO];
				}
				if (dadosCobrancaAcaoAtividadeEventual[POSICAO_ID_COB_ACAO] != null) {
					idCobrancaAcao = (Integer) dadosCobrancaAcaoAtividadeEventual[POSICAO_ID_COB_ACAO];
				}

				if (dadosCobrancaAcaoAtividadeEventual[POSICAO_ID_DOCUMENTO_TIPO] != null) {
					idDocumentoTipo = (Integer) dadosCobrancaAcaoAtividadeEventual[POSICAO_ID_DOCUMENTO_TIPO];
				}
				if (dadosCobrancaAcaoAtividadeEventual[POSICAO_DATA_ENCERRAMENTO_PREVISTA] != null) {
					dataEncerramentoPrevista = (Date) dadosCobrancaAcaoAtividadeEventual[POSICAO_DATA_ENCERRAMENTO_PREVISTA];
				}
				if (dadosCobrancaAcaoAtividadeEventual[POSICAO_DATA_REALIZACAO] != null) {
					dataRealizacao = (Date) dadosCobrancaAcaoAtividadeEventual[POSICAO_DATA_REALIZACAO];

				}

				// Item 3.4
				// verfica se o valor do documento tipo é
				// diferente de nulo
				if (idDocumentoTipo != null) {

					this.repositorioCobranca
							.deletarResumoCobrancaAcaoEventual(idCobrancaAtividadeAcaoComando);

					// caso a atividade da ação de cobrança
					// correspondente a
					// encerrar esteja comandada e a data
					// prescita para o
					// encerramento seja igual ou menor do
					// que a data
					// corrente
					if (dataEncerramentoPrevista != null
							&& (dataEncerramentoPrevista.compareTo(new Date()) <= 0)) {
						dataRealizacaoEncerrar = new Date();
					}

					// [SB0001] - Processar Ação com
					// Documentos de Cobrança
					this.pesquisarDocumentosCobrancaParaGeracaoResumoEventual(
							idCobrancaAtividadeAcaoComando, usuarioLogado,
							idCobrancaAcao, dataEncerramentoPrevista,
							dataRealizacaoEncerrar, dataRealizacao);
				}
				// seta para null para o GC liberar
				idCobrancaAcao = null;
				idDocumentoTipo = null;
				dataEncerramentoPrevista = null;
				dataRealizacaoEncerrar = null;

			}

			getControladorBatch().encerrarUnidadeProcessamentoBatch(null,
					idUnidadeIniciada, false);

			System.out.println("########## FINALIZADO EM  = " + new Date());

		} catch (Exception e) {
			// Este catch serve para interceptar qualquer exceção que o processo
			// batch venha a lançar e garantir que a unidade de processamento do
			// batch será atualizada com o erro ocorrido
			e.printStackTrace();

			getControladorBatch().encerrarUnidadeProcessamentoBatch(e,
					idUnidadeIniciada, true);

			throw new EJBException(e);
		}

	}

	/**
	 * 
	 * [UCXXXX] Gerar Resumo das Ações de Cobrança Eventuais
	 * 
	 * [SB0006] - Determinar Situação da Ordem de Serviço
	 * 
	 * @author Sávio Luiz
	 * @date 19/06/2007
	 * 
	 */
	public void pesquisarDocumentosCobrancaParaGeracaoResumoEventual(
			Integer idCobrancaAtividadeAcaoComando, Usuario usuarioLogado,
			Integer idCobrancaAcao, Date dataEncerramentoPrevista,
			Date dataRealizacaoEncerrar, Date dataRealizacao)
			throws ControladorException {

		// colecao com os documentos de cobrança gerados na atividade EMITIR da
		// ação de cobrança
		Collection colecaoDadosCobrancaDocumentos = null;

		Collection colecaoResumoCobrancaAcaoEventual = new ArrayList();

		short indicadorDefinitivo = 0;

		try {
			colecaoDadosCobrancaDocumentos = this
					.pesquisarDadosCobrancaDocumentoEventualAgrupadoPorDataPrevista(idCobrancaAtividadeAcaoComando);

			// para cada documento de cobrança
			if (colecaoDadosCobrancaDocumentos != null
					&& !colecaoDadosCobrancaDocumentos.isEmpty()) {

				// verifica se exista a data de realização da atividade
				// de encerrar se
				// existir então recupera ela para ser comparada,senão
				// recupera a data
				// prevista da atividade de encerrar
				Date dataAtividadeEncerrar = null;
				if (dataRealizacaoEncerrar != null) {
					dataAtividadeEncerrar = dataRealizacaoEncerrar;
					indicadorDefinitivo = 1;
				} else {
					dataAtividadeEncerrar = dataEncerramentoPrevista;
					indicadorDefinitivo = 2;
				}

				Iterator iteratorColecaoCobrancaDocumentos = colecaoDadosCobrancaDocumentos
						.iterator();
				while (iteratorColecaoCobrancaDocumentos.hasNext()) {

					DadosCobrancaDocumentoHelper dadosCobrancaDocumentoHelper = (DadosCobrancaDocumentoHelper) iteratorColecaoCobrancaDocumentos
							.next();

					// id do Cobranca Documento
					Integer idCobrancaCriterio = null;
					if (dadosCobrancaDocumentoHelper.getIdCobrancaCriterio() != null) {
						idCobrancaCriterio = dadosCobrancaDocumentoHelper
								.getIdCobrancaCriterio();
					}

					// id do Cobranca Documento
					Integer idCobrancaGrupo = null;
					if (dadosCobrancaDocumentoHelper.getIdCobrancaGrupo() != null) {
						idCobrancaGrupo = dadosCobrancaDocumentoHelper
								.getIdCobrancaGrupo();
					}

					Integer idFiscalizacao = null;
					if (dadosCobrancaDocumentoHelper.getIdFiscalizacao() != null) {
						idFiscalizacao = dadosCobrancaDocumentoHelper
								.getIdFiscalizacao();
					}
					Categoria categoria = null;
					if (dadosCobrancaDocumentoHelper.getIdCategoria() != null) {
						categoria = new Categoria();
						categoria.setId(dadosCobrancaDocumentoHelper
								.getIdCategoria());

					}
					Empresa empresa = null;
					if (dadosCobrancaDocumentoHelper.getIdEmpresa() != null) {
						empresa = new Empresa();
						empresa.setId(dadosCobrancaDocumentoHelper
								.getIdEmpresa());

					}

					// cria o ResumoCobrancaAcao
					ResumoCobrancaAcaoEventual resumoCobrancaAcaoEventual = this
							.criarResumoCobrancaAcaoEventual(
									idCobrancaAtividadeAcaoComando,
									dataRealizacao, dataAtividadeEncerrar,
									categoria, idCobrancaAcao, idCobrancaGrupo,
									dadosCobrancaDocumentoHelper.getIdCobrancaAcaoSituacao(),
									dadosCobrancaDocumentoHelper.getIdSituacaoDebito(),
									idFiscalizacao, 1,
									dadosCobrancaDocumentoHelper.getIndicadorAcimaAbaixo(),
									dadosCobrancaDocumentoHelper.getIndicadorAcimaLimite(),
									dadosCobrancaDocumentoHelper.getValorDocumentos(),
									idCobrancaCriterio,
									dadosCobrancaDocumentoHelper.getIdGerenciaRegional(),
									dadosCobrancaDocumentoHelper.getIdLocalidade(),
									dadosCobrancaDocumentoHelper.getIdSetorComercial(),
									dadosCobrancaDocumentoHelper.getIdRota(),
									dadosCobrancaDocumentoHelper.getCodigoSetorComercial(),
									dadosCobrancaDocumentoHelper.getIdQuadra(),
									dadosCobrancaDocumentoHelper.getNumeroQuadra(),
									dadosCobrancaDocumentoHelper.getIdImovelPerfil(),
									dadosCobrancaDocumentoHelper.getIdSituacaoLigacaoAgua(),
									dadosCobrancaDocumentoHelper.getIdSituacaoLigacaoEsgoto(),
									dadosCobrancaDocumentoHelper.getIdEsferaPoder(),
									dadosCobrancaDocumentoHelper.getQuantidadeDocumentos(),
									empresa, indicadorDefinitivo,
									dadosCobrancaDocumentoHelper.getIdAtendimentoMotivoEncerramento(),
									dadosCobrancaDocumentoHelper.getIdUnidadeNegocio());

					// adciona na coleção
					colecaoResumoCobrancaAcaoEventual
							.add(resumoCobrancaAcaoEventual);
				}
			}

			// seta nulo para o Garbage Collector limpar
			if(colecaoDadosCobrancaDocumentos != null){
				colecaoDadosCobrancaDocumentos.clear();	
			}
			
			colecaoDadosCobrancaDocumentos = null;

			// 2.5 gravar os dados na tabela RESUMO_COBRANCA_ACAO
			if (!colecaoResumoCobrancaAcaoEventual.isEmpty()) {
				getControladorBatch().inserirColecaoObjetoParaBatch(
						colecaoResumoCobrancaAcaoEventual);
			}

			// 2.6
			// caso a atividade da ação de cobrança correspondente a
			// encerrar esteja comandada e a data prescita para o
			// encerramento seja igual ou menor do que a data
			// corrente
			if (dataRealizacaoEncerrar != null) {
				// atualiza a data e hora da realização da atividade
				// encerrar ação de cobrança
				// grava no banco as
				// COBRANCA_ACAO_ATIVADADE_CRONOGRAMA
				repositorioCobranca
						.atualizarCobrancaAcaoAtividadeComando(idCobrancaAtividadeAcaoComando);
			}
		} catch (ErroRepositorioException ex) {
			throw new ControladorException("erro.sistema", ex);
		}

	}

	/**
	 * 
	 * [UCXXXX] Gerar Resumo das Ações de Cobrança Eventuais
	 * 
	 * [SB0006] - Determinar Situação da Ordem de Serviço
	 * 
	 * @author Sávio Luiz
	 * @date 19/06/2007
	 * 
	 */
	public ResumoCobrancaAcaoEventual criarResumoCobrancaAcaoEventual(
			int idCobrancaAcaoComando, Date dataRealizacaoEmitir,
			Date dataAtividadeEncerrar, Categoria categoria,
			int idCobrancaAcao, Integer idCobrancaGrupo,
			Integer idSituacaoAcao, Integer idSituacaoPredominanteDebito,
			Integer idFiscalizacao, int indicadorCronogramaComando,
			Short indicadorAntesApos, Short indicadorAcimaLimite,
			BigDecimal valorDocumento, Integer idCobrancaCriterio,
			Integer idGerenciaRegional, Integer idLocalidade,
			Integer idSetorComercial, Integer idRota, int codigoSetorComercial,
			Integer idQuadra, int numeroQuadra, Integer idPerfilImovel,
			Integer idSituacaoLigacaoAgua, Integer idSituacaoLigacaoEsgoto,
			Integer idEsferaPoder, Integer quantidadeDocumentos,
			Empresa empresa, short indicadorDefinitivo, Integer idMotivoEncerramento,
			Integer idUnidadeNegocio) {

		ResumoCobrancaAcaoEventual resumoCobrancaAcaoEventual = new ResumoCobrancaAcaoEventual();

		// id do cronograma da ação de cobranca
		CobrancaAcaoAtividadeComando cobrancaAcaoAtividadeComando = new CobrancaAcaoAtividadeComando();
		cobrancaAcaoAtividadeComando.setId(new Integer(idCobrancaAcaoComando));
		resumoCobrancaAcaoEventual
				.setCobrancaAcaoAtividadeComando(cobrancaAcaoAtividadeComando);

		// data e hora da realização da atividade "emitir"
		resumoCobrancaAcaoEventual
				.setTempoRealizacaoEmitir(dataRealizacaoEmitir);

		// data e hora presvista da atividade "encerrar"
		resumoCobrancaAcaoEventual
				.setTempoRealizacaoEncerrar(dataAtividadeEncerrar);

		// id do grupo de cobrança
		CobrancaGrupo cobrancaGrupo = new CobrancaGrupo();
		cobrancaGrupo.setId(idCobrancaGrupo);
		resumoCobrancaAcaoEventual.setCobrancaGrupo(cobrancaGrupo);

		if (idGerenciaRegional != null) {
			GerenciaRegional gerenciaRegional = new GerenciaRegional();
			gerenciaRegional.setId(idGerenciaRegional);
			// gerência regional
			resumoCobrancaAcaoEventual.setGerenciaRegional(gerenciaRegional);
		}
		if (idLocalidade != null) {
			Localidade localidade = new Localidade();
			localidade.setId(idLocalidade);
			// localidade
			resumoCobrancaAcaoEventual.setLocalidade(localidade);
		}
		if (idSetorComercial != null) {
			SetorComercial setorComercial = new SetorComercial();
			setorComercial.setId(idSetorComercial);
			// Setor Comercial
			resumoCobrancaAcaoEventual.setSetorComercial(setorComercial);
		}
		if (idRota != null) {
			Rota rota = new Rota();
			rota.setId(idRota);
			// Rota
			resumoCobrancaAcaoEventual.setRota(rota);
		}
		if (idQuadra != null) {
			Quadra quadra = new Quadra();
			quadra.setId(idQuadra);
			// Quadra
			resumoCobrancaAcaoEventual.setQuadra(quadra);
		}

		// Código do Setor Comercial
		resumoCobrancaAcaoEventual
				.setCodigoSetorcomercial(codigoSetorComercial);

		// Numero da Quadra
		resumoCobrancaAcaoEventual.setNumeroQuadra(numeroQuadra);

		if (idPerfilImovel != null) {
			ImovelPerfil imovelPerfil = new ImovelPerfil();
			imovelPerfil.setId(idPerfilImovel);
			// Perfil do Imovel
			resumoCobrancaAcaoEventual.setImovelPerfil(imovelPerfil);
		}

		if (idSituacaoLigacaoAgua != null) {
			LigacaoAguaSituacao ligacaoAguaSituacao = new LigacaoAguaSituacao();
			ligacaoAguaSituacao.setId(idSituacaoLigacaoAgua);
			// Situação da Ligação de Água
			resumoCobrancaAcaoEventual
					.setLigacaoAguaSituacao(ligacaoAguaSituacao);
		}

		if (idSituacaoLigacaoEsgoto != null) {
			LigacaoEsgotoSituacao ligacaoEsgotoSituacao = new LigacaoEsgotoSituacao();
			ligacaoEsgotoSituacao.setId(idSituacaoLigacaoEsgoto);
			// Situação da Ligação de Esgoto
			resumoCobrancaAcaoEventual
					.setLigacaoEsgotoSituacao(ligacaoEsgotoSituacao);
		}

		// categoria
		resumoCobrancaAcaoEventual.setCategoria(categoria);

		// Esfera do Poder
		if (idEsferaPoder != null) {
			EsferaPoder esferaPoder = new EsferaPoder();
			esferaPoder.setId(idEsferaPoder);
			resumoCobrancaAcaoEventual.setEsferaPoder(esferaPoder);
		}

		// id da ação de cobrança
		CobrancaAcao cobrancaAcao = new CobrancaAcao();
		cobrancaAcao.setId(new Integer(idCobrancaAcao));
		resumoCobrancaAcaoEventual.setCobrancaAcao(cobrancaAcao);

		// id da situação da ação de cobrança
		CobrancaAcaoSituacao cobrancaAcaoSituacao = new CobrancaAcaoSituacao();
		cobrancaAcaoSituacao.setId(idSituacaoAcao);
		resumoCobrancaAcaoEventual
				.setCobrancaAcaoSituacao(cobrancaAcaoSituacao);

		// id da situação predominante de débito
		if (idSituacaoPredominanteDebito != null) {
			CobrancaDebitoSituacao cobrancaDebitoSituacao = new CobrancaDebitoSituacao();
			cobrancaDebitoSituacao.setId(idSituacaoPredominanteDebito);
			resumoCobrancaAcaoEventual
					.setCobrancaDebitoSituacao(cobrancaDebitoSituacao);
		} else {
			resumoCobrancaAcaoEventual.setCobrancaDebitoSituacao(null);
		}

		// id da situação da fiscalização
		if (idFiscalizacao != null) {
			FiscalizacaoSituacao fiscalizacaoSituacao = new FiscalizacaoSituacao();
			fiscalizacaoSituacao.setId(idFiscalizacao);
			resumoCobrancaAcaoEventual
					.setFiscalizacaoSituacao(fiscalizacaoSituacao);
		}

		// indicador antes apos
		if (indicadorAntesApos != null) {
			resumoCobrancaAcaoEventual.setIndicadorAntesApos(new Short(
					indicadorAntesApos.shortValue()));
		} else {
			resumoCobrancaAcaoEventual.setIndicadorAntesApos(null);
		}

		// indicador acima do limite
		if (indicadorAcimaLimite != null) {
			resumoCobrancaAcaoEventual.setIndicadorAcimaLimite(new Short(
					indicadorAcimaLimite.shortValue()));
		} else {
			resumoCobrancaAcaoEventual.setIndicadorAcimaLimite(null);
		}

		// quantidade de documentos de cobrança
		resumoCobrancaAcaoEventual
				.setQuantidadeDocumentos(quantidadeDocumentos);

		// valor dos documentos de cobrança
		resumoCobrancaAcaoEventual.setValorDocumentos(valorDocumento);

		// data ultima alteração
		resumoCobrancaAcaoEventual.setUltimaAlteracao(new Date());

		CobrancaCriterio cobrancaCriterio = null;
		if (idCobrancaCriterio != null) {
			cobrancaCriterio = new CobrancaCriterio();
			cobrancaCriterio.setId(idCobrancaCriterio);
		}

		resumoCobrancaAcaoEventual.setCobrancaCriterio(cobrancaCriterio);

		resumoCobrancaAcaoEventual.setEmpresa(empresa);
		resumoCobrancaAcaoEventual.setIndicadorDefinitivo(indicadorDefinitivo);

		if (idMotivoEncerramento != null){
			AtendimentoMotivoEncerramento motivoEncerramento = new AtendimentoMotivoEncerramento();
			motivoEncerramento.setId(idMotivoEncerramento);
			resumoCobrancaAcaoEventual.setMotivoEncerramento(motivoEncerramento);
		}
		
		if (idUnidadeNegocio != null){
			UnidadeNegocio unidadeNegocio = new UnidadeNegocio();
			unidadeNegocio.setId(idUnidadeNegocio);
			resumoCobrancaAcaoEventual.setUnidadeNegocio(unidadeNegocio);
		}
		
		return resumoCobrancaAcaoEventual;

	}

	/**
	 * Esta funcionalidade permite informar dados para geração de relatórios ou
	 * consultas
	 * 
	 * [UC0616] - Informar Dados para Consulta do Resumo das Ações de Cobrança
	 * Eventual
	 * 
	 * @author Sávio Luiz
	 * @date 25/06/2007
	 * 
	 */
	public InformarDadosGeracaoResumoAcaoConsultaEventualHelper informarDadosGeracaoResumoAcaoConsultaEventual(
			String dataEmissaoInicial, String dataEmissaoFinal,
			String idCobrancaAcaoAtividadeComando,
			String tituloCobrancaAcaoAtividadeComando,
			String[] idsCobrancaGrupo, String[] idsGerenciaRegional,
			Integer idEloPolo, Integer idLocalidade, Integer idSetorComercial,
			Integer nmQuadra, String[] idsImovelPerfil,
			String[] idsLigacaoAguaSituacao, String[] idsLigacaoEsgotoSituacao,
			String[] idsCategoria, String[] idsEsferaPoder, String[] idsEmpresas, 
			String[] idsUnidadeNegocio)
			throws ControladorException {

		InformarDadosGeracaoResumoAcaoConsultaEventualHelper retorno = new InformarDadosGeracaoResumoAcaoConsultaEventualHelper();

		if (dataEmissaoInicial != null && !dataEmissaoInicial.equals("")) {
			Date dataEmissaoInicialDate = Util
					.converteStringParaDate(dataEmissaoInicial);
			retorno.setDataInicialEmissao(dataEmissaoInicialDate);
		}

		if (dataEmissaoFinal != null && !dataEmissaoFinal.equals("")) {
			Date dataEmissaoFinalDate = Util
					.converteStringParaDate(dataEmissaoFinal);
			dataEmissaoFinalDate = Util.formatarDataFinal(dataEmissaoFinalDate);
			retorno.setDataFinalEmissao(dataEmissaoFinalDate);
		}

		if (idCobrancaAcaoAtividadeComando != null) {
			Integer idCobrancaAcaoAtividadeComandoInteger = Util
					.converterStringParaInteger(idCobrancaAcaoAtividadeComando);
			retorno
					.setIdCobrancaAcaoAtividadeComando(idCobrancaAcaoAtividadeComandoInteger);
		}

		if (tituloCobrancaAcaoAtividadeComando != null) {
			retorno
					.setTituloCobrancaAcaoAtividadeComando(tituloCobrancaAcaoAtividadeComando);
		}

		Collection colecaoPesquisa = null;
		if (idEloPolo != null) {

			FiltroLocalidade filtroLocalidade = new FiltroLocalidade();
			filtroLocalidade
					.adicionarCaminhoParaCarregamentoEntidade("localidade");

			filtroLocalidade.adicionarParametro(new ParametroSimples(
					FiltroLocalidade.ID, idEloPolo));

			filtroLocalidade.adicionarParametro(new ParametroSimples(
					FiltroLocalidade.INDICADORUSO,
					ConstantesSistema.INDICADOR_USO_ATIVO));

			colecaoPesquisa = this.getControladorUtil().pesquisar(
					filtroLocalidade, Localidade.class.getName());

			if (colecaoPesquisa == null || colecaoPesquisa.isEmpty()) {
				throw new ControladorException("atencao.pesquisa_inexistente",
						null, "Elo Pólo");
			} else {
				Localidade eloPolo = (Localidade) Util
						.retonarObjetoDeColecao(colecaoPesquisa);

				if (eloPolo.getLocalidade() == null) {
					throw new ControladorException("atencao.localidade.nao.elo");
				} else if (!eloPolo.getLocalidade().getId().equals(
						new Integer(eloPolo.getId()))) {

					throw new ControladorException("atencao.localidade.nao.elo");

				}

				retorno.setEloPolo(eloPolo);
			}
		}
		if (idLocalidade != null) {

			FiltroLocalidade filtroLocalidade = new FiltroLocalidade();

			filtroLocalidade.adicionarParametro(new ParametroSimples(
					FiltroLocalidade.ID, idLocalidade));

			filtroLocalidade.adicionarParametro(new ParametroSimples(
					FiltroLocalidade.INDICADORUSO,
					ConstantesSistema.INDICADOR_USO_ATIVO));

			colecaoPesquisa = this.getControladorUtil().pesquisar(
					filtroLocalidade, Localidade.class.getName());

			if (colecaoPesquisa == null || colecaoPesquisa.isEmpty()) {
				throw new ControladorException("atencao.pesquisa_inexistente",
						null, "Localidade");
			}

			Localidade localidade = (Localidade) Util
					.retonarObjetoDeColecao(colecaoPesquisa);

			retorno.setLocalidade(localidade);
		}
		if (idSetorComercial != null) {

			FiltroSetorComercial filtroSetorComercial = new FiltroSetorComercial();
			filtroSetorComercial
					.adicionarCaminhoParaCarregamentoEntidade("localidade");

			filtroSetorComercial.adicionarParametro(new ParametroSimples(
					FiltroSetorComercial.ID, idSetorComercial));

			filtroSetorComercial.adicionarParametro(new ParametroSimples(
					FiltroSetorComercial.INDICADORUSO,
					ConstantesSistema.INDICADOR_USO_ATIVO));

			colecaoPesquisa = this.getControladorUtil().pesquisar(
					filtroSetorComercial, SetorComercial.class.getName());

			if (colecaoPesquisa == null || colecaoPesquisa.isEmpty()) {
				throw new ControladorException("atencao.pesquisa_inexistente",
						null, "Setor Comercial");
			}

			SetorComercial setorComercial = (SetorComercial) Util
					.retonarObjetoDeColecao(colecaoPesquisa);

			retorno.setLocalidade(setorComercial.getLocalidade());
			retorno.setSetorComercial(setorComercial);

		}
		if (idSetorComercial != null && nmQuadra != null) {

			FiltroQuadra filtroQuadra = new FiltroQuadra();
			filtroQuadra
					.adicionarCaminhoParaCarregamentoEntidade("setorComercial.localidade");

			filtroQuadra.adicionarParametro(new ParametroSimples(
					FiltroQuadra.ID_SETORCOMERCIAL, idSetorComercial));

			filtroQuadra.adicionarParametro(new ParametroSimples(
					FiltroQuadra.NUMERO_QUADRA, nmQuadra));

			filtroQuadra.adicionarParametro(new ParametroSimples(
					FiltroQuadra.INDICADORUSO,
					ConstantesSistema.INDICADOR_USO_ATIVO));

			colecaoPesquisa = this.getControladorUtil().pesquisar(filtroQuadra,
					Quadra.class.getName());

			if (colecaoPesquisa == null || colecaoPesquisa.isEmpty()) {
				throw new ControladorException("atencao.pesquisa_inexistente",
						null, "Quadra");
			}

			Quadra quadra = (Quadra) Util
					.retonarObjetoDeColecao(colecaoPesquisa);

			retorno.setLocalidade(quadra.getSetorComercial().getLocalidade());
			retorno.setSetorComercial(quadra.getSetorComercial());
			retorno.setQuadra(quadra);

		}

		if (idsGerenciaRegional != null && idsGerenciaRegional.length > 0) {

			Collection colecaoGerenciaRegional = new ArrayList();
			FiltroGerenciaRegional filtroGerenciaRegional = new FiltroGerenciaRegional();

			GerenciaRegional gerenciaRegional = null;

			for (int index = 0; idsGerenciaRegional.length > index; index++) {

				if (idsGerenciaRegional[index] != null
						&& idsGerenciaRegional[index].length() > 0) {

					filtroGerenciaRegional
							.adicionarParametro(new ParametroSimples(
									FiltroGerenciaRegional.ID,
									idsGerenciaRegional[index]));

					filtroGerenciaRegional
							.adicionarParametro(new ParametroSimples(
									FiltroGerenciaRegional.INDICADOR_USO,
									ConstantesSistema.INDICADOR_USO_ATIVO));

					colecaoPesquisa = this.getControladorUtil().pesquisar(
							filtroGerenciaRegional,
							GerenciaRegional.class.getName());

					if (colecaoPesquisa == null || colecaoPesquisa.isEmpty()) {
						throw new ControladorException(
								"atencao.pesquisa_inexistente", null,
								"Gerencia Regional");
					}

					gerenciaRegional = (GerenciaRegional) Util
							.retonarObjetoDeColecao(colecaoPesquisa);
					filtroGerenciaRegional.limparListaParametros();

					colecaoGerenciaRegional.add(gerenciaRegional);
				}
			}

			if (!colecaoGerenciaRegional.isEmpty()) {
				retorno.setColecaoGerenciaRegional(colecaoGerenciaRegional);
			}

		}

		if (idsUnidadeNegocio != null && idsUnidadeNegocio.length > 0) {

			Collection colecaoUnidadeNegocio = new ArrayList();
			FiltroUnidadeNegocio filtroUnidadeNegocio = new FiltroUnidadeNegocio();

			UnidadeNegocio unidadeNegocio = null;

			for (int index = 0; idsUnidadeNegocio.length > index; index++) {

				if (idsUnidadeNegocio[index] != null
						&& idsUnidadeNegocio[index].length() > 0) {

					filtroUnidadeNegocio
							.adicionarParametro(new ParametroSimples(
									FiltroUnidadeNegocio.ID,
									idsUnidadeNegocio[index]));

					filtroUnidadeNegocio
							.adicionarParametro(new ParametroSimples(
									FiltroUnidadeNegocio.INDICADOR_USO,
									ConstantesSistema.INDICADOR_USO_ATIVO));

					colecaoPesquisa = this.getControladorUtil().pesquisar(
							filtroUnidadeNegocio,
							UnidadeNegocio.class.getName());

					if (colecaoPesquisa == null || colecaoPesquisa.isEmpty()) {
						throw new ControladorException(
								"atencao.pesquisa_inexistente", null,
								"Unidade de Negocio");
					}

					unidadeNegocio = (UnidadeNegocio) Util
							.retonarObjetoDeColecao(colecaoPesquisa);
					filtroUnidadeNegocio.limparListaParametros();

					colecaoUnidadeNegocio.add(unidadeNegocio);
				}
			}

			if (!colecaoUnidadeNegocio.isEmpty()) {
				retorno.setColecaoUnidadeNegocio(colecaoUnidadeNegocio);
			}

		}
		
		if (idsCobrancaGrupo != null && idsCobrancaGrupo.length > 0) {

			Collection colecaoCobrancaGrupo = new ArrayList();
			FiltroCobrancaGrupo filtroCobrancaGrupo = new FiltroCobrancaGrupo();

			CobrancaGrupo cobrancaGrupo = null;

			for (int index = 0; idsCobrancaGrupo.length > index; index++) {

				if (idsCobrancaGrupo[index] != null
						&& idsCobrancaGrupo[index].length() > 0) {

					filtroCobrancaGrupo
							.adicionarParametro(new ParametroSimples(
									FiltroCobrancaGrupo.ID,
									idsCobrancaGrupo[index]));

					filtroCobrancaGrupo
							.adicionarParametro(new ParametroSimples(
									FiltroCobrancaGrupo.INDICADOR_USO,
									ConstantesSistema.INDICADOR_USO_ATIVO));

					colecaoPesquisa = this.getControladorUtil().pesquisar(
							filtroCobrancaGrupo, CobrancaGrupo.class.getName());

					if (colecaoPesquisa == null || colecaoPesquisa.isEmpty()) {
						throw new ControladorException(
								"atencao.pesquisa_inexistente", null,
								"Cobrança Grupo");
					}

					cobrancaGrupo = (CobrancaGrupo) Util
							.retonarObjetoDeColecao(colecaoPesquisa);
					filtroCobrancaGrupo.limparListaParametros();

					colecaoCobrancaGrupo.add(cobrancaGrupo);
				}
			}

			if (!colecaoCobrancaGrupo.isEmpty()) {
				retorno.setColecaoCobrancaGrupo(colecaoCobrancaGrupo);
			}

		}

		if (idsImovelPerfil != null && idsImovelPerfil.length > 0) {

			Collection colecaoImovelPerfil = new ArrayList();
			FiltroImovelPerfil filtroImovelPerfil = new FiltroImovelPerfil();

			ImovelPerfil imovelPerfil = null;

			for (int index = 0; idsImovelPerfil.length > index; index++) {

				if (idsImovelPerfil[index] != null
						&& idsImovelPerfil[index].length() > 0) {

					filtroImovelPerfil.adicionarParametro(new ParametroSimples(
							FiltroImovelPerfil.ID, idsImovelPerfil[index]));

					filtroImovelPerfil.adicionarParametro(new ParametroSimples(
							FiltroImovelPerfil.INDICADOR_USO,
							ConstantesSistema.INDICADOR_USO_ATIVO));

					colecaoPesquisa = this.getControladorUtil().pesquisar(
							filtroImovelPerfil, ImovelPerfil.class.getName());

					if (colecaoPesquisa == null || colecaoPesquisa.isEmpty()) {
						throw new ControladorException(
								"atencao.pesquisa_inexistente", null,
								"Perfil do Imóvel");
					}

					imovelPerfil = (ImovelPerfil) Util
							.retonarObjetoDeColecao(colecaoPesquisa);
					filtroImovelPerfil.limparListaParametros();

					colecaoImovelPerfil.add(imovelPerfil);
				}
			}

			if (!colecaoImovelPerfil.isEmpty()) {
				retorno.setColecaoImovelPerfil(colecaoImovelPerfil);
			}

		}

		if (idsLigacaoAguaSituacao != null && idsLigacaoAguaSituacao.length > 0) {

			Collection colecaoLigacaoAguaSituacao = new ArrayList();
			FiltroLigacaoAguaSituacao filtroLigacaoAguaSituacao = new FiltroLigacaoAguaSituacao();

			LigacaoAguaSituacao ligacaoAguaSituacao = null;

			for (int index = 0; idsLigacaoAguaSituacao.length > index; index++) {

				if (idsLigacaoAguaSituacao[index] != null
						&& idsLigacaoAguaSituacao[index].length() > 0) {
					filtroLigacaoAguaSituacao
							.adicionarParametro(new ParametroSimples(
									FiltroLigacaoAguaSituacao.ID,
									idsLigacaoAguaSituacao[index]));

					filtroLigacaoAguaSituacao
							.adicionarParametro(new ParametroSimples(
									FiltroLigacaoAguaSituacao.INDICADOR_USO,
									ConstantesSistema.INDICADOR_USO_ATIVO));

					colecaoPesquisa = this.getControladorUtil().pesquisar(
							filtroLigacaoAguaSituacao,
							LigacaoAguaSituacao.class.getName());

					if (colecaoPesquisa == null || colecaoPesquisa.isEmpty()) {
						throw new ControladorException(
								"atencao.pesquisa_inexistente", null,
								"Ligação de Água");
					}

					ligacaoAguaSituacao = (LigacaoAguaSituacao) Util
							.retonarObjetoDeColecao(colecaoPesquisa);
					filtroLigacaoAguaSituacao.limparListaParametros();

					colecaoLigacaoAguaSituacao.add(ligacaoAguaSituacao);
				}
			}

			if (!colecaoLigacaoAguaSituacao.isEmpty()) {
				retorno
						.setColecaoLigacaoAguaSituacao(colecaoLigacaoAguaSituacao);
			}

		}

		if (idsLigacaoEsgotoSituacao != null
				&& idsLigacaoEsgotoSituacao.length > 0) {

			Collection colecaoLigacaoEsgotoSituacao = new ArrayList();
			FiltroLigacaoEsgotoSituacao filtroLigacaoEsgotoSituacao = new FiltroLigacaoEsgotoSituacao();

			LigacaoEsgotoSituacao ligacaoEsgotoSituacao = null;

			for (int index = 0; idsLigacaoEsgotoSituacao.length > index; index++) {

				if (idsLigacaoEsgotoSituacao[index] != null
						&& idsLigacaoEsgotoSituacao[index].length() > 0) {

					filtroLigacaoEsgotoSituacao
							.adicionarParametro(new ParametroSimples(
									FiltroLigacaoEsgotoSituacao.ID,
									idsLigacaoEsgotoSituacao[index]));

					filtroLigacaoEsgotoSituacao
							.adicionarParametro(new ParametroSimples(
									FiltroLigacaoEsgotoSituacao.INDICADOR_USO,
									ConstantesSistema.INDICADOR_USO_ATIVO));

					colecaoPesquisa = this.getControladorUtil().pesquisar(
							filtroLigacaoEsgotoSituacao,
							LigacaoEsgotoSituacao.class.getName());

					if (colecaoPesquisa == null || colecaoPesquisa.isEmpty()) {
						throw new ControladorException(
								"atencao.pesquisa_inexistente", null,
								"Ligação de Esgoto");
					}

					ligacaoEsgotoSituacao = (LigacaoEsgotoSituacao) Util
							.retonarObjetoDeColecao(colecaoPesquisa);
					filtroLigacaoEsgotoSituacao.limparListaParametros();

					colecaoLigacaoEsgotoSituacao.add(ligacaoEsgotoSituacao);
				}
			}

			if (!colecaoLigacaoEsgotoSituacao.isEmpty()) {
				retorno
						.setColecaoLigacaoEsgotoSituacao(colecaoLigacaoEsgotoSituacao);
			}

		}

		if (idsCategoria != null && idsCategoria.length > 0) {

			Collection colecaoCategoria = new ArrayList();
			FiltroCategoria filtroCategoria = new FiltroCategoria();

			Categoria categoria = null;

			for (int index = 0; idsCategoria.length > index; index++) {

				if (idsCategoria[index] != null
						&& idsCategoria[index].length() > 0) {

					filtroCategoria.adicionarParametro(new ParametroSimples(
							FiltroCategoria.CODIGO, idsCategoria[index]));

					filtroCategoria.adicionarParametro(new ParametroSimples(
							FiltroCategoria.INDICADOR_USO,
							ConstantesSistema.INDICADOR_USO_ATIVO));

					colecaoPesquisa = this.getControladorUtil().pesquisar(
							filtroCategoria, Categoria.class.getName());

					if (colecaoPesquisa == null || colecaoPesquisa.isEmpty()) {
						throw new ControladorException(
								"atencao.pesquisa_inexistente", null,
								"Categoria");
					}

					categoria = (Categoria) Util
							.retonarObjetoDeColecao(colecaoPesquisa);
					filtroCategoria.limparListaParametros();

					colecaoCategoria.add(categoria);
				}
			}

			if (!colecaoCategoria.isEmpty()) {
				retorno.setColecaoCategoria(colecaoCategoria);
			}
		}

		if (idsEsferaPoder != null && idsEsferaPoder.length > 0) {

			Collection colecaoEsferaPoder = new ArrayList();
			FiltroEsferaPoder filtroEsferaPoder = new FiltroEsferaPoder();

			EsferaPoder esferaPoder = null;

			for (int index = 0; idsEsferaPoder.length > index; index++) {

				if (idsEsferaPoder[index] != null
						&& idsEsferaPoder[index].length() > 0) {

					filtroEsferaPoder.adicionarParametro(new ParametroSimples(
							FiltroEsferaPoder.ID, idsEsferaPoder[index]));

					filtroEsferaPoder.adicionarParametro(new ParametroSimples(
							FiltroEsferaPoder.INDICADOR_USO,
							ConstantesSistema.INDICADOR_USO_ATIVO));

					colecaoPesquisa = this.getControladorUtil().pesquisar(
							filtroEsferaPoder, EsferaPoder.class.getName());

					if (colecaoPesquisa == null || colecaoPesquisa.isEmpty()) {
						throw new ControladorException(
								"atencao.pesquisa_inexistente", null,
								"Esfera de Poder");
					}

					esferaPoder = (EsferaPoder) Util
							.retonarObjetoDeColecao(colecaoPesquisa);
					filtroEsferaPoder.limparListaParametros();

					colecaoEsferaPoder.add(esferaPoder);
				}
			}

			if (!colecaoEsferaPoder.isEmpty()) {
				retorno.setColecaoEsferaPoder(colecaoEsferaPoder);
			}

		}

		if (idsEmpresas != null && idsEmpresas.length > 0) {

			Collection colecaoEmpresa = new ArrayList();
			FiltroEmpresa filtroEmpresa = new FiltroEmpresa();

			Empresa empresa = null;

			for (int index = 0; idsEmpresas.length > index; index++) {

				if (idsEmpresas[index] != null
						&& idsEmpresas[index].length() > 0) {

					filtroEmpresa.adicionarParametro(new ParametroSimples(
							FiltroEmpresa.ID, idsEmpresas[index]));

					filtroEmpresa.adicionarParametro(new ParametroSimples(
							FiltroEmpresa.INDICADORUSO,
							ConstantesSistema.INDICADOR_USO_ATIVO));

					colecaoPesquisa = this.getControladorUtil().pesquisar(
							filtroEmpresa, Empresa.class.getName());

					if (colecaoPesquisa == null || colecaoPesquisa.isEmpty()) {
						throw new ControladorException(
								"atencao.pesquisa_inexistente", null, "Empresa");
					}

					empresa = (Empresa) Util
							.retonarObjetoDeColecao(colecaoPesquisa);
					filtroEmpresa.limparListaParametros();

					colecaoEmpresa.add(empresa);
				}
			}

			if (!colecaoEmpresa.isEmpty()) {
				retorno.setColecaoEmpresa(colecaoEmpresa);
			}

		}

		return retorno;
	}

	/**
	 * Esta funcionalidade permite informar dados para geração de relatórios ou
	 * consultas
	 * 
	 * [UC0312] - Inserir Cronograma de Cobrança
	 * 
	 * [FS0006] - Verificar ação predecessora
	 * 
	 * @author Sávio Luiz
	 * @date 04/07/2007
	 * 
	 */
	public Map<CobrancaAcaoAtividadeHelper, Date> validarAtividadeAcaoPredecessora(
			CobrancaAcao cobrancaAcao, CobrancaAcao cobrancaAcaoPredecessora,
			CobrancaAcaoAtividadeCronograma cobrancaAcaoAtividadeCronograma,
			Map<CobrancaAcaoAtividadeHelper, Date> mapAcaoAtividadeDataPrevista)
			throws ControladorException {

		CobrancaAcaoAtividadeHelper cobrancaAcaoAtividadeHelper = new CobrancaAcaoAtividadeHelper();
		if (cobrancaAcaoAtividadeCronograma.getCobrancaAtividade() != null
				&& !cobrancaAcaoAtividadeCronograma.getCobrancaAtividade()
						.equals("")) {
			cobrancaAcaoAtividadeHelper
					.setCobrancaAtividade(cobrancaAcaoAtividadeCronograma
							.getCobrancaAtividade());
			cobrancaAcaoAtividadeHelper.setCobrancaAcao(cobrancaAcao);
			mapAcaoAtividadeDataPrevista.put(cobrancaAcaoAtividadeHelper,
					cobrancaAcaoAtividadeCronograma.getDataPrevista());

			int idCobrancaAtividade = cobrancaAcaoAtividadeCronograma
					.getCobrancaAtividade().getId() - 1;

			if (idCobrancaAtividade > 0) {
				CobrancaAcaoAtividadeHelper cobrancaAcaoAtividadeHelperProcura = new CobrancaAcaoAtividadeHelper();
				CobrancaAtividade cobrancaAtividade = new CobrancaAtividade();
				cobrancaAtividade.setId(idCobrancaAtividade);
				cobrancaAcaoAtividadeHelperProcura
						.setCobrancaAtividade(cobrancaAtividade);
				cobrancaAcaoAtividadeHelperProcura
						.setCobrancaAcao(cobrancaAcao);

				Date dataPrevistaAtividade = mapAcaoAtividadeDataPrevista
						.get(cobrancaAcaoAtividadeHelperProcura);
				if (dataPrevistaAtividade != null) {
					if (cobrancaAcaoAtividadeCronograma.getDataPrevista()
							.before(dataPrevistaAtividade)) {
						sessionContext.setRollbackOnly();
						throw new ControladorException(
								"atencao.cobranca.atividade.data.inferior.atividade.predecessora",
								null, cobrancaAcaoAtividadeCronograma
										.getCobrancaAtividade()
										.getDescricaoCobrancaAtividade(),
								cobrancaAcao.getDescricaoCobrancaAcao());
					}
				} else {
					FiltroCobrancaAtividade filtroCobrancaAtividade = new FiltroCobrancaAtividade();
					filtroCobrancaAtividade
							.adicionarParametro(new ParametroSimples(
									FiltroCobrancaAtividade.ID,
									idCobrancaAtividade));
					Collection colecaoCobrancaAtividade = getControladorUtil()
							.pesquisar(filtroCobrancaAtividade,
									CobrancaAtividade.class.getName());
					CobrancaAtividade cobrancaAtividadePredecessora = (CobrancaAtividade) Util
							.retonarObjetoDeColecao(colecaoCobrancaAtividade);
					// caso o indicador de obrigatoriedade esteja ativo então a
					// data prevista não pode ser nula
					if (cobrancaAtividadePredecessora != null
							&& cobrancaAtividadePredecessora
									.getIndicadorObrigatoriedade()
									.equals(
											ConstantesSistema.INDICADOR_USO_ATIVO)) {
						sessionContext.setRollbackOnly();
						throw new ControladorException(
								"atencao.cobranca.atividade.predecessora.atividade",
								null, cobrancaAcaoAtividadeCronograma
										.getCobrancaAtividade()
										.getDescricaoCobrancaAtividade(),
								cobrancaAcao.getDescricaoCobrancaAcao());
					}
				}
			}

			if (cobrancaAcaoPredecessora != null
					&& !cobrancaAcaoPredecessora.equals("")) {
				CobrancaAcaoAtividadeHelper cobrancaAcaoAtividadeHelperProcura = new CobrancaAcaoAtividadeHelper();
				cobrancaAcaoAtividadeHelperProcura
						.setCobrancaAtividade(cobrancaAcaoAtividadeCronograma
								.getCobrancaAtividade());
				cobrancaAcaoAtividadeHelperProcura
						.setCobrancaAcao(cobrancaAcaoPredecessora);

				Date dataPrevistaPredecessora = //cobrancaAcaoAtividadeCronograma.getDataPrevista();
				mapAcaoAtividadeDataPrevista.get(cobrancaAcaoAtividadeHelperProcura);
				if (dataPrevistaPredecessora == null
						|| dataPrevistaPredecessora.equals("")) {

					sessionContext.setRollbackOnly();
					throw new ControladorException(
							"atencao.cobranca.atividade.data.predecessora.deve.ser.informado",
							null, cobrancaAcaoAtividadeCronograma
									.getCobrancaAtividade()
									.getDescricaoCobrancaAtividade(),
							cobrancaAcaoPredecessora.getDescricaoCobrancaAcao());

				} else {
					if (cobrancaAcaoAtividadeCronograma.getDataPrevista()
							.before(dataPrevistaPredecessora)) {
						sessionContext.setRollbackOnly();
						throw new ControladorException(
								"atencao.cobranca.atividade.data.inferior.acao.predecessora",
								null, cobrancaAcaoAtividadeCronograma
										.getCobrancaAtividade()
										.getDescricaoCobrancaAtividade(),
								cobrancaAcao.getDescricaoCobrancaAcao(),
								cobrancaAcaoAtividadeCronograma
										.getCobrancaAtividade()
										.getDescricaoCobrancaAtividade());
					}
				}
				
			}

		}

		return mapAcaoAtividadeDataPrevista;
	}

	/**
	 * 
	 * Este caso de uso gera os avisos de cobrança dos documentos de cobrança
	 * 
	 * [UC0575] Emitir Aviso de Cobrança
	 * 
	 * 
	 * @author Sávio Luiz, Raphael Rossiter
	 * @data 02/04/2007, 03/01/2007
	 * 
	 * @param
	 * @return void
	 */
	public void emitirAvisoCobrancaFormatado(
			CobrancaAcaoAtividadeCronograma cobrancaAcaoAtividadeCronograma,
			CobrancaAcaoAtividadeComando cobrancaAcaoAtividadeComando,
			Date dataAtualPesquisa, CobrancaAcao acaoCobranca,
			CobrancaGrupo grupoCobranca, CobrancaCriterio cobrancaCriterio)
			throws ControladorException {

		boolean flagFimPesquisa = false;
		final int quantidadeCobrancaDocumento = 1000;
		int quantidadeCobrancaDocumentoInicio = 0;

		StringBuilder cobrancaDocumentoTxt = new StringBuilder();
		int sequencialImpressao = 0;

		Collection colecaoCobrancaDocumento = null;

		Integer idCronogramaAtividadeAcaoCobranca = null;
		Integer idComandoAtividadeAcaoCobranca = null;
		Integer idAcaoCobranca = null;
		if (cobrancaAcaoAtividadeCronograma != null
				&& cobrancaAcaoAtividadeCronograma.getId() != null) {
			idCronogramaAtividadeAcaoCobranca = cobrancaAcaoAtividadeCronograma
					.getId();
		}
		if (cobrancaAcaoAtividadeComando != null
				&& cobrancaAcaoAtividadeComando.getId() != null) {
			idComandoAtividadeAcaoCobranca = cobrancaAcaoAtividadeComando
					.getId();
		}
		if (acaoCobranca != null && acaoCobranca.getId() != null) {
			idAcaoCobranca = acaoCobranca.getId();
		}

		while (!flagFimPesquisa) {

			try {

				System.out.println("***************************************");
				System.out.println("ENTROU NO AVISO DE CORTE");
				System.out.println("***************************************");
				colecaoCobrancaDocumento = repositorioCobranca
						.pesquisarCobrancaDocumentoParaEmitirCAER(
								idCronogramaAtividadeAcaoCobranca,
								idComandoAtividadeAcaoCobranca,
								dataAtualPesquisa, idAcaoCobranca,
								quantidadeCobrancaDocumentoInicio);
				System.out.println("***************************************");
				System.out.println("QTD DE COBRANCA DOCUMENTO:"
						+ colecaoCobrancaDocumento.size());
				System.out.println("***************************************");
			} catch (ErroRepositorioException ex) {
				ex.printStackTrace();
				throw new ControladorException("erro.sistema", ex);
			}

			if (colecaoCobrancaDocumento != null
					&& !colecaoCobrancaDocumento.isEmpty()) {

				System.out.println("***************************************");
				System.out.println("QUANTIDADE COBRANÇA:"
						+ colecaoCobrancaDocumento.size());
				System.out.println("***************************************");

				if (colecaoCobrancaDocumento.size() < quantidadeCobrancaDocumento) {
					flagFimPesquisa = true;
				} else {
					quantidadeCobrancaDocumentoInicio = quantidadeCobrancaDocumentoInicio + 1000;
				}
				// ***********************************************************************
				// ****PARTE COMENTADA DA DIVISÃO PARA IMPRESSÃO DE DOCUMENTO
				// COBRANÇA****
				// ***********************************************************************

				// int metadeColecao = 0;
				// if (colecaoCobrancaDocumento.size() % 2 == 0) {
				// metadeColecao = colecaoCobrancaDocumento.size() / 2;
				// } else {
				// metadeColecao = (colecaoCobrancaDocumento.size() / 2) + 1;
				// }

				// Map<Integer, Map<Object, Object>>
				// mapCobrancaDocumentoOrdenada =
				// dividirColecao(colecaoCobrancaDocumento);

				/*
				 * if (mapCobrancaDocumentoOrdenada != null) { int countOrdem =
				 * 0;
				 * 
				 * while (countOrdem < mapCobrancaDocumentoOrdenada.size()) {
				 * Map<Object, Object> mapCobrancaoDocumentoDivididas =
				 * mapCobrancaDocumentoOrdenada .get(countOrdem);
				 */

				/*
				 * Iterator iteratorCobrancaDocumento =
				 * mapCobrancaoDocumentoDivididas .keySet().iterator();
				 */
				Iterator iteratorCobrancaDocumento = colecaoCobrancaDocumento
						.iterator();
				while (iteratorCobrancaDocumento.hasNext()) {

					CobrancaDocumento cobrancaDocumento = null;
					/*
					 * if(quantidadeContas == 48){ System.out.println(""); }
					 */

					// int situacao = 0;
					cobrancaDocumento = (CobrancaDocumento) iteratorCobrancaDocumento
							.next();

					String nomeClienteUsuario = null;
					Collection colecaoCobrancaDocumentoItemConta = null;
					Integer idClienteResponsavel = null;
					// Collection colecaoCobrancaDocumentoItemGuiaPagamento =
					// null;
					/*
					 * Estes objetos auxiliarão na formatação da inscrição que
					 * será composta por informações do documento de cobrança e
					 * do imóvel a ele associado
					 */

					/*
					 * Objeto que será utilizado para armazenar as informações
					 * do documento de cobrança de acordo com o layout definido
					 * no caso de uso
					 */

					/*
					 * while (situacao < 2) { if (situacao == 0) { situacao = 1;
					 * sequencialImpressao = atualizaSequencial(
					 * sequencialImpressao, situacao, metadeColecao); } else {
					 * cobrancaDocumento = (CobrancaDocumento)
					 * mapCobrancaoDocumentoDivididas .get(cobrancaDocumento);
					 * situacao = 2; sequencialImpressao = atualizaSequencial(
					 * sequencialImpressao, situacao, metadeColecao); }
					 */

					if (cobrancaDocumento != null) {
						sequencialImpressao++;

						try {

							nomeClienteUsuario = this.repositorioClienteImovel
									.pesquisarNomeClientePorImovel(cobrancaDocumento
											.getImovel().getId());
							idClienteResponsavel = this.repositorioClienteImovel
									.retornaIdClienteResponsavelIndicadorEnvioConta(cobrancaDocumento
											.getImovel().getId());

							colecaoCobrancaDocumentoItemConta = this.repositorioCobranca
									.selecionarCobrancaDocumentoItemReferenteConta(cobrancaDocumento);

						} catch (ErroRepositorioException ex) {
							ex.printStackTrace();
							throw new ControladorException("erro.sistema", ex);
						}

						if (colecaoCobrancaDocumentoItemConta != null
								&& !colecaoCobrancaDocumentoItemConta.isEmpty()) {

							// ITEM 1
							// sequencial do documento de cobranca
							cobrancaDocumentoTxt
									.append(Util
											.retornaSequencialFormatado(cobrancaDocumento
													.getNumeroSequenciaDocumento()));
							// ITEM 2
							// Formatar sequencial de documento gerado
							cobrancaDocumentoTxt
									.append(Util
											.retornaSequencialFormatado(sequencialImpressao));
							// ITEM 3
							// id do grupo
							if (idCronogramaAtividadeAcaoCobranca != null) {
								cobrancaDocumentoTxt.append(Util
										.adicionarZerosEsquedaNumero(2, ""
												+ grupoCobranca.getId()));
							} else {
								cobrancaDocumentoTxt.append(Util
										.adicionarZerosEsquedaNumero(2, ""
												+ cobrancaDocumento.getImovel()
														.getQuadra().getRota()
														.getCobrancaGrupo()
														.getId()));
							}
							// Codigo Rota
							cobrancaDocumentoTxt.append(Util
									.adicionarZerosEsquedaNumero(6, ""
											+ cobrancaDocumento.getImovel()
													.getQuadra().getRota()
													.getCodigo()));

							// ITEM 4
							// Codigo Rota
							cobrancaDocumentoTxt
									.append(Util
											.adicionarZerosEsquedaNumero(
													4,
													""
															+ cobrancaDocumento
																	.getImovel()
																	.getNumeroSequencialRota()));

							// ITEM 5
							// código da firma
							if (cobrancaDocumento.getEmpresa() != null) {
								cobrancaDocumentoTxt.append(Util
										.adicionarZerosEsquedaNumero(2,
												cobrancaDocumento.getEmpresa()
														.getId().toString()));
							}

							// ITEM 6
							if (cobrancaDocumento.getEmpresa() != null) {
								cobrancaDocumentoTxt.append(Util
										.completaString(cobrancaDocumento
												.getEmpresa()
												.getDescricaoAbreviada(), 10));
							}

							// ITEM 7
							// Matrícula do imóvel
							cobrancaDocumentoTxt
									.append(Util
											.adicionarZerosEsquedaNumero(
													9,
													Util
															.retornaMatriculaImovelFormatada(cobrancaDocumento
																	.getImovel()
																	.getId())));
							// ITEM 8
							// Inscrição
							String idLocalidade = Util
									.adicionarZerosEsquedaNumero(3, ""
											+ cobrancaDocumento.getLocalidade()
													.getId());
							String codigoSetorComercial = Util
									.adicionarZerosEsquedaNumero(3, ""
											+ cobrancaDocumento
													.getCodigoSetorComercial());
							String numeroQuadra = Util
									.adicionarZerosEsquedaNumero(3, ""
											+ cobrancaDocumento
													.getNumeroQuadra());
							String lote = Util.adicionarZerosEsquedaNumero(4,
									""
											+ cobrancaDocumento.getImovel()
													.getLote());
							String subLote = Util.adicionarZerosEsquedaNumero(
									3, ""
											+ cobrancaDocumento.getImovel()
													.getSubLote());

							cobrancaDocumentoTxt.append(Util.completaString(
									idLocalidade + "." + codigoSetorComercial
											+ "." + numeroQuadra + "." + lote
											+ "." + subLote, 20));

							// ITEM 9,10
							String enderecoImovel = "";
							String nomeBairro = "";
							String nomeMunicipio = "";
							String siglaUnidadeFederecao = "";
							String cepFormatado = "";

							String[] parmsEnderecoImovel = getControladorEndereco()
									.pesquisarEnderecoFormatadoDividido(
											cobrancaDocumento.getImovel()
													.getId());
							if (parmsEnderecoImovel != null) {
								// endereço sem municipio e unidade federação
								cobrancaDocumentoTxt.append(Util
										.completaString(parmsEnderecoImovel[0],
												100));
								enderecoImovel = parmsEnderecoImovel[0];
								// nome do bairro
								nomeBairro = "" + parmsEnderecoImovel[3];
								// nome do municipio
								nomeMunicipio = "" + parmsEnderecoImovel[1];
								// sigla da unidade federação
								siglaUnidadeFederecao = parmsEnderecoImovel[2];
								cepFormatado = parmsEnderecoImovel[4];
							}

							// nome Bairro
							cobrancaDocumentoTxt.append(Util.completaString(
									nomeBairro, 30));
							// nome municipio
							cobrancaDocumentoTxt.append(Util.completaString(
									nomeMunicipio, 30));
							// sigla unidade federacao
							cobrancaDocumentoTxt.append(Util.completaString(
									siglaUnidadeFederecao, 2));

							if (cepFormatado != null) {
								cepFormatado = Util
										.adicionarZerosEsquedaNumero(8,
												cepFormatado);

								cobrancaDocumentoTxt.append(cepFormatado
										.substring(0, 5)
										+ "-" + cepFormatado.substring(5, 8));
							}

							// ITEM 11,12
							// endereço do cliente com opção de recebimento via
							// correio
							// ITEM 9,10
							String nomeBairroResponsavel = "";
							String nomeMunicipioResponsavel = "";
							String siglaUnidadeFederecaoResponsavel = "";
							String cepFormatadoResponsavel = "";
							if (idClienteResponsavel != null) {
								String[] parmsEndereco = getControladorEndereco()
										.pesquisarEnderecoClienteAbreviadoDividido(
												idClienteResponsavel);
								// endereço sem municipio e unidade federação
								cobrancaDocumentoTxt.append(Util
										.completaString(parmsEndereco[0], 100));
								// nome do bairro
								nomeBairroResponsavel = "" + parmsEndereco[3];
								// nome do municipio
								nomeMunicipioResponsavel = ""
										+ parmsEndereco[1];
								// sigla da unidade federação
								siglaUnidadeFederecaoResponsavel = parmsEndereco[2];
								cepFormatadoResponsavel = parmsEndereco[4];

								// nome Bairro
								cobrancaDocumentoTxt.append(Util
										.completaString(nomeBairroResponsavel,
												30));
								// nome municipio
								cobrancaDocumentoTxt.append(Util
										.completaString(
												nomeMunicipioResponsavel, 30));
								// sigla unidade federacao
								cobrancaDocumentoTxt
										.append(Util
												.completaString(
														siglaUnidadeFederecaoResponsavel,
														2));

								if (cepFormatadoResponsavel != null) {
									cepFormatadoResponsavel = Util
											.adicionarZerosEsquedaNumero(8,
													cepFormatadoResponsavel);

									cobrancaDocumentoTxt
											.append(cepFormatadoResponsavel
													.substring(0, 5)
													+ "-"
													+ cepFormatado.substring(5,
															8));
								}

							} else {
								// endereço sem municipio e unidade federação
								cobrancaDocumentoTxt.append(Util
										.completaString(enderecoImovel, 100));

								// nome Bairro
								cobrancaDocumentoTxt.append(Util
										.completaString(nomeBairro, 30));
								// nome municipio
								cobrancaDocumentoTxt.append(Util
										.completaString(nomeMunicipio, 30));
								// sigla unidade federacao
								cobrancaDocumentoTxt.append(Util
										.completaString(siglaUnidadeFederecao,
												2));

								if (cepFormatado != null) {
									cepFormatado = Util
											.adicionarZerosEsquedaNumero(8,
													cepFormatado);

									cobrancaDocumentoTxt.append(cepFormatado
											.substring(0, 5)
											+ "-"
											+ cepFormatado.substring(5, 8));
								}

							}

							// ITEM 13
							// nome cliente
							cobrancaDocumentoTxt.append(Util.completaString(
									nomeClienteUsuario, 50));

							// ITEM 14
							// Quant. contas em debito
							cobrancaDocumentoTxt.append(Util
									.adicionarZerosEsquedaNumero(3, ""
											+ colecaoCobrancaDocumentoItemConta
													.size()));

							// ITEM 15,18
							// Indicador Estouro
							// cobrancaDocumentoTxt.append(Util.completaString(""
							// + indicadorEstouro, 1));
							// em caso de ser carta de tarifa social não
							// formatar o txt

							int quantidadesContas = 12;

							// retorna o indicador de estouro e formata o
							// cobrançaDocumentoTxt com os dados
							Object[] dadosValores = formatarCobrancaDocumentoItemParaContaComFormatacao(
									cobrancaDocumentoTxt,
									colecaoCobrancaDocumentoItemConta,
									quantidadesContas, idAcaoCobranca);

							BigDecimal valorItemCobrado = (BigDecimal) dadosValores[0];
							BigDecimal valorAcrescimos = (BigDecimal) dadosValores[1];
							BigDecimal valorItemAcrescimos = (BigDecimal) dadosValores[2];

							// somatorio do valor do item da conta
							cobrancaDocumentoTxt.append(Util.completaString(
									Util.formataBigDecimal(valorItemCobrado, 2,
											true), 14));
							// somatorio do valor dos encargos
							cobrancaDocumentoTxt.append(Util.completaString(
									Util.formataBigDecimal(valorAcrescimos, 2,
											true), 14));
							// somatorio do valor total das contas
							cobrancaDocumentoTxt.append(Util.completaString(
									Util.formataBigDecimal(valorItemAcrescimos,
											2, true), 14));

							// String
							// quantidadeItensDocumentoGuiaPagamentoString =
							// null;
							// // em caso de ser carta de tarifa social não
							// // formatar o txt
							// if (idAcaoCobranca != null
							// && (!idAcaoCobranca
							// .equals(CobrancaAcao.CARTA_TARIFA_SOCIAL_LIGADO)
							// && !idAcaoCobranca
							// .equals(CobrancaAcao.CARTA_TARIFA_SOCIAL_CORTADO)))
							// {
							// // retorna o quantidade de documento item com
							// // guia
							// // pagamento e formata o cobrançaDocumentoTxt
							// // com os
							// // dados
							// int quantidadeItensDocumentoGuiaPagamento =
							// somatorioValoresAcrescimosDocumentoItem(
							// cobrancaDocumentoTxt,
							// colecaoCobrancaDocumentoItemGuiaPagamento);
							// quantidadeItensDocumentoGuiaPagamentoString = ""
							// + quantidadeItensDocumentoGuiaPagamento;
							// }

							// ITEM 19
							// em caso de ser carta de tarifa social não
							// formatar o txt
							// Sigla da regional
							cobrancaDocumentoTxt.append(Util.completaString(""
									+ cobrancaDocumento.getImovel()
											.getLocalidade()
											.getGerenciaRegional()
											.getNomeAbreviado(), 3));

							// ITEM 20
							// Nome da Localidade
							cobrancaDocumentoTxt.append(Util
									.completaString(""
											+ cobrancaDocumento.getImovel()
													.getLocalidade()
													.getDescricao(), 25));
							// em caso de ser carta de tarifa social não
							// formatar o txt

							// ITEM 21
							cobrancaDocumentoTxt.append(Util
									.formatarData(cobrancaDocumento
											.getEmissao()));

							// data de vencimento AAAAMMDD
							// Object[] dadosFaturamentoGrupo =
							// getControladorFaturamento()
							// .pesquisarAnoMesEDiaVencimentoFaturamentoGrupo(
							// cobrancaDocumento.getImovel()
							// .getId());
							// Integer anoMesFaturamento = null;
							// Integer diaVencimento = null;
							// if (dadosFaturamentoGrupo != null) {
							// if (dadosFaturamentoGrupo[0] != null) {
							// anoMesFaturamento = (Integer)
							// dadosFaturamentoGrupo[0];
							// }
							// if (dadosFaturamentoGrupo[1] != null) {
							// diaVencimento = ((Short)
							// dadosFaturamentoGrupo[1])
							// .intValue();
							// }
							// }

							// ITEM 22
							String dataVencimento = "";
							if (cobrancaDocumento.getEmissao() != null
									&& acaoCobranca.getNumeroDiasValidade() != null) {
								dataVencimento = Util
										.formatarData(Util
												.adicionarNumeroDiasDeUmaData(
														cobrancaDocumento
																.getEmissao(),
														acaoCobranca
																.getNumeroDiasVencimento()));
							}

							cobrancaDocumentoTxt.append(Util
									.completaStringComEspacoAEsquerda(
											dataVencimento, 10));

							// ITEM 23
							if (cobrancaDocumento.getImovel() != null
									&& cobrancaDocumento.getImovel()
											.getLigacaoAgua() != null
									&& cobrancaDocumento.getImovel()
											.getLigacaoAgua()
											.getHidrometroInstalacaoHistorico() != null) {
								// numero do hidometro
								if (cobrancaDocumento.getImovel()
										.getLigacaoAgua()
										.getHidrometroInstalacaoHistorico() != null) {
									cobrancaDocumentoTxt
											.append(Util
													.completaString(
															""
																	+ cobrancaDocumento
																			.getImovel()
																			.getLigacaoAgua()
																			.getHidrometroInstalacaoHistorico()
																			.getHidrometro()
																			.getNumero(),
															10));

									// Local de instalação descricao abreviada
									cobrancaDocumentoTxt
											.append(Util
													.completaString(
															""
																	+ cobrancaDocumento
																			.getImovel()
																			.getLigacaoAgua()
																			.getHidrometroInstalacaoHistorico()
																			.getHidrometroLocalInstalacao()
																			.getDescricaoAbreviada(),
															5));
								} else {
									cobrancaDocumentoTxt.append(Util
											.completaString("", 10));
									cobrancaDocumentoTxt.append(Util
											.completaString("", 5));
								}

							} else {
								cobrancaDocumentoTxt.append(Util
										.completaString("", 10));
								cobrancaDocumentoTxt.append(Util
										.completaString("", 5));
							}

							// ITEM 24,25,26
							String representacaoNumericaCodBarra = "";

							// Obtém a representação numérica do
							// códigode
							// barra
							representacaoNumericaCodBarra = this
									.getControladorArrecadacao()
									.obterRepresentacaoNumericaCodigoBarra(
											5,
											cobrancaDocumento
													.getValorDocumento(),
											cobrancaDocumento.getLocalidade()
													.getId(),
											cobrancaDocumento.getImovel()
													.getId(),
											null,
											null,
											null,
											null,
											String
													.valueOf(cobrancaDocumento
															.getNumeroSequenciaDocumento()),
											cobrancaDocumento
													.getDocumentoTipo().getId(),
											null, null, null);

							// Formata a representação númerica do
							// código de
							// barras
							String representacaoNumericaCodBarraFormatada = representacaoNumericaCodBarra
									.substring(0, 11)
									+ " "
									+ representacaoNumericaCodBarra.substring(
											11, 12)
									+ " "
									+ representacaoNumericaCodBarra.substring(
											12, 23)
									+ " "
									+ representacaoNumericaCodBarra.substring(
											23, 24)
									+ " "
									+ representacaoNumericaCodBarra.substring(
											24, 35)
									+ " "
									+ representacaoNumericaCodBarra.substring(
											35, 36)
									+ " "
									+ representacaoNumericaCodBarra.substring(
											36, 47)
									+ " "
									+ representacaoNumericaCodBarra.substring(
											47, 48);

							cobrancaDocumentoTxt
									.append(representacaoNumericaCodBarraFormatada);

							// Cria o objeto para gerar o código de
							// barras
							// no
							// padrão
							// intercalado 2 de 5
							Interleaved2of5 codigoBarraIntercalado2de5 = new Interleaved2of5();

							// Recupera a representação númerica do
							// código
							// de
							// barras
							// sem
							// os dígitos verificadores
							String representacaoCodigoBarrasSemDigitoVerificador = representacaoNumericaCodBarra
									.substring(0, 11)
									+ representacaoNumericaCodBarra.substring(
											12, 23)
									+ representacaoNumericaCodBarra.substring(
											24, 35)
									+ representacaoNumericaCodBarra.substring(
											36, 47);

							cobrancaDocumentoTxt
									.append(codigoBarraIntercalado2de5
											.encodeValue(representacaoCodigoBarrasSemDigitoVerificador));

							Object[] dadosOS = pesquisarDadosOrdemServicoDocumentoCobranca(cobrancaDocumento
									.getId());
							if (dadosOS != null) {
								cobrancaDocumentoTxt.append(Util
										.completaString("" + dadosOS[0], 9));
							} else {
								cobrancaDocumentoTxt.append(Util
										.completaString("", 9));
							}
							// situação ligação de agua
							if (cobrancaDocumento.getImovel() != null
									&& cobrancaDocumento.getImovel()
											.getLigacaoAguaSituacao() != null) {
								cobrancaDocumentoTxt.append(Util
										.completaString(cobrancaDocumento
												.getImovel()
												.getLigacaoAguaSituacao()
												.getDescricao(), 20));
							} else {
								cobrancaDocumentoTxt.append(Util
										.completaString("", 20));
							}

							// situação ligação de esgoto
							if (cobrancaDocumento.getImovel() != null
									&& cobrancaDocumento.getImovel()
											.getLigacaoEsgotoSituacao() != null) {
								cobrancaDocumentoTxt.append(Util
										.completaString(cobrancaDocumento
												.getImovel()
												.getLigacaoEsgotoSituacao()
												.getDescricao(), 20));
							} else {
								cobrancaDocumentoTxt.append(Util
										.completaString("", 20));
							}

							Categoria categoria = getControladorImovel()
									.obterPrincipalCategoriaImovel(
											cobrancaDocumento.getImovel()
													.getId());
							if (categoria != null) {
								cobrancaDocumentoTxt.append(Util
										.completaString(categoria
												.getDescricao(), 15));
							} else {
								cobrancaDocumentoTxt.append(Util
										.completaString("", 15));
							}
							
							
							/*
							 * COLOCADO POR RAPHAEL ROSSITER EM 03/01/2007 =============================================
							 * -----------------------------------------------------------------------------------------
							 */ 
							
							//ITEM 31 - Consumo Médio
							Integer consumoMedio = getControladorMicromedicao().pesquisarConsumoMedioImovel(
							cobrancaDocumento.getImovel().getId());

							if (consumoMedio != null) {
								cobrancaDocumentoTxt.append(Util
								.completaString("" + consumoMedio, 10));
							} else {
								cobrancaDocumentoTxt.append(Util
								.completaString("", 10));
							}

							
							//ITEM 32 - Consumo Fixo
							Integer consumoMinimoEsgoto = getControladorLigacaoEsgoto().recuperarConsumoMinimoEsgoto(
							cobrancaDocumento.getImovel().getId());

							if (consumoMinimoEsgoto != null) {
								cobrancaDocumentoTxt.append(Util
								.completaString("" + consumoMinimoEsgoto, 10));
							} else {
								cobrancaDocumentoTxt.append(Util
								.completaString("", 10));
							}
							
							
							// Categoria(s) e Economia(s)
							Collection colecaoCategorias = getControladorImovel()
							.obterQuantidadeEconomiasCategoria(cobrancaDocumento.getImovel());
							
							String qtdResidencial = "";
							String qtdComercial = "";
							String qtdIndustrial = "";
							String qtdPublico = "";

							Integer totalCategoria = 0;

							if (colecaoCategorias != null && !colecaoCategorias.isEmpty()) {
								
								Iterator iteratorColecaoCategorias = colecaoCategorias
								.iterator();
								
								while (iteratorColecaoCategorias.hasNext()) {
									
									categoria = (Categoria) iteratorColecaoCategorias.next();

									if (categoria.getId().equals(Categoria.RESIDENCIAL)) {
										
										qtdResidencial = "" + categoria
										.getQuantidadeEconomiasCategoria();
										
										totalCategoria = totalCategoria + categoria
										.getQuantidadeEconomiasCategoria();
										
									} else if (categoria.getId().equals(Categoria.COMERCIAL)) {
										
										qtdComercial = "" + categoria
										.getQuantidadeEconomiasCategoria();
										
										totalCategoria = totalCategoria + categoria
										.getQuantidadeEconomiasCategoria();
										
									} else if (categoria.getId().equals(Categoria.INDUSTRIAL)) {
										
										qtdIndustrial = "" + categoria
										.getQuantidadeEconomiasCategoria();
										
										totalCategoria = totalCategoria + categoria
										.getQuantidadeEconomiasCategoria();
									
									} else if (categoria.getId().equals(Categoria.PUBLICO)) {
										
										qtdPublico = "" + categoria
										.getQuantidadeEconomiasCategoria();
										
										totalCategoria = totalCategoria + categoria
										.getQuantidadeEconomiasCategoria();
									}
								}
							}
							
							//ITEM 33 - Residêncial
							if (!qtdResidencial.equals("")) {
								cobrancaDocumentoTxt.append(Util.adicionarZerosEsquedaNumero(3,
								qtdResidencial));
							} else {
								cobrancaDocumentoTxt.append(Util.completaString("", 3));
							}

							
							//ITEM 34 - Comercial
							if (!qtdComercial.equals("")) {
								cobrancaDocumentoTxt.append(Util.adicionarZerosEsquedaNumero(3,
								qtdComercial));
							} else {
								cobrancaDocumentoTxt.append(Util.completaString("", 3));
							}
							
							
							//ITEM 35 - Industrial
							if (!qtdIndustrial.equals("")) {
								cobrancaDocumentoTxt.append(Util.adicionarZerosEsquedaNumero(3,
								qtdIndustrial));
							} else {
								cobrancaDocumentoTxt.append(Util.completaString("", 3));
							}
							
							
							//ITEM 36 - Público
							if (!qtdPublico.equals("")) {
								cobrancaDocumentoTxt.append(Util.adicionarZerosEsquedaNumero(3,
								qtdPublico));
							} else {
								cobrancaDocumentoTxt.append(Util.completaString("", 3));
							}
							
							
							//ITEM 37 - Soma Total das economias
							if (totalCategoria != null && !totalCategoria.equals("")) {
								
								cobrancaDocumentoTxt.append(Util.adicionarZerosEsquedaNumero(4, ""
								+ totalCategoria));
							} else {
								cobrancaDocumentoTxt.append(Util.completaStringComEspacoAEsquerda("", 4));
							}
							
							
							//ITEM 38 - Data da Posição do Débito
							SistemaParametro sistemaParametro = this.getControladorUtil()
							.pesquisarParametrosDoSistema();
							
							String anoMesValidade = sistemaParametro.getAnoMesArrecadacao().toString();
					
							Calendar calendario = new GregorianCalendar();

							if (anoMesValidade != null && !anoMesValidade.equals("")) {
						
								calendario.set(Calendar.YEAR, new Integer(
								anoMesValidade.substring(0, 4)).intValue());
						
								calendario.set(Calendar.MONTH, new Integer(
								anoMesValidade.substring(4, 6)).intValue() - 1);
						
								calendario.set(Calendar.DAY_OF_MONTH,
								calendario.getActualMaximum(Calendar.DAY_OF_MONTH));

								cobrancaDocumentoTxt.append(Util
								.formatarData(calendario.getTime()));
							} else {
								cobrancaDocumentoTxt.append(Util.completaString("", 10));
							}
							
							
							/*
							 * As datas de corte e supressão serão repassadas de acordo com
							 * a situação da ligação do imóvel.
							 * 
							 * ITEM 39 - Data do Corte
							 * ITEM 40 - Data da Supressão
							 */
							if (cobrancaDocumento.getImovel().getLigacaoAguaSituacao().getId()
								.equals(LigacaoAguaSituacao.CORTADO) ||
								cobrancaDocumento.getImovel().getLigacaoAguaSituacao().getId()
								.equals(LigacaoAguaSituacao.SUPRIMIDO)){
							
								/*
								 * Dados da Ligação de Água(a partir da tabela LIGACAO_AGUA
								 * lagu_id=imov_id da tabela IMOVEL)
								 */
								Object[] dadosLigacaoAgua = getControladorAtendimentoPublico()
								.pesquisarDadosLigacaoAgua(cobrancaDocumento.getImovel().getId());
								
								if (dadosLigacaoAgua != null) {
									
									//Data do Corte
									if (cobrancaDocumento.getImovel().getLigacaoAguaSituacao().getId()
										.equals(LigacaoAguaSituacao.CORTADO)){
										
										if (dadosLigacaoAgua[3] != null) {
											
											cobrancaDocumentoTxt.append(Util.completaString(
											Util.formatarData((Date) dadosLigacaoAgua[3]),10));
											
											cobrancaDocumentoTxt.append(Util.completaString("", 10));
										} 
										else {
											cobrancaDocumentoTxt.append(Util.completaString("", 20));
										}
									}
									
									//Data da Supressão
									else if (cobrancaDocumento.getImovel().getLigacaoAguaSituacao().getId()
											.equals(LigacaoAguaSituacao.SUPRIMIDO)){
										

										if (dadosLigacaoAgua[4] != null) {
									
											cobrancaDocumentoTxt.append(Util.completaString("", 10));
											
											cobrancaDocumentoTxt.append(Util.completaString(
											Util.formatarData((Date) dadosLigacaoAgua[4]),10));
											
										} 
										else {
											cobrancaDocumentoTxt.append(Util.completaString("", 20));
										}
									}
									else{
										
										cobrancaDocumentoTxt.append(Util.completaString("", 20));
									}
									
								} else {
									cobrancaDocumentoTxt.append(Util.completaString("", 20));
								}
							}
							else{
								cobrancaDocumentoTxt.append(Util.completaString("", 20));
							}
							
							//ITEM 41 - Origem
							LeituraAnormalidade leituraAnormalidade = cobrancaDocumento.getImovel()
							.getLeituraAnormalidade();
							
							if (leituraAnormalidade == null) {
								cobrancaDocumentoTxt.append("AUTOMATICO");
								cobrancaDocumentoTxt.append(Util.completaString("", 5));
							} 
							else if (leituraAnormalidade.getId().equals(LeituraAnormalidade.INDICADOR_LIGADO_CLANDESTINO_AGUA) 
									|| leituraAnormalidade.getId().equals(LeituraAnormalidade.INDICADOR_LIGADO_CLANDESTINO_ESGOTO)
									|| leituraAnormalidade.getId().equals(LeituraAnormalidade.INDICADOR_LIGADO_CLANDESTINO_AGUA_ESGOTO)) {
								
								cobrancaDocumentoTxt.append("RECADASTRAMENTO");
							} 
							else {
								cobrancaDocumentoTxt.append("LEITURA");
								cobrancaDocumentoTxt.append(Util.completaString("", 8));
							}

							//ITEM 42 - Ocorrência
							if (leituraAnormalidade != null){
								
								cobrancaDocumentoTxt.append(Util.completaString(
								leituraAnormalidade.getDescricao(), 34));
							}
							else{
								
								cobrancaDocumentoTxt.append(Util.completaString("", 34));
							}
							
							//ITEM 43 - Data Última Alteração
							if (cobrancaDocumento.getImovel().getUltimaAlteracao() != null) {
								
								cobrancaDocumentoTxt.append(Util.formatarData(
								cobrancaDocumento.getImovel().getUltimaAlteracao()));
								
							} else {
								cobrancaDocumentoTxt.append(Util.completaString("", 10));
							}
							
							//ITEM 44 - Ordem de Serviço
							Integer idOrdemServico = this.getControladorOrdemServico()
							.pesquisarOrdemServicoPorCobrancaDocumento(cobrancaDocumento.getId());
							
							if (idOrdemServico != null){
								
								cobrancaDocumentoTxt.append(Util.completaString(
								idOrdemServico.toString(), 15));
							}
							else{
								cobrancaDocumentoTxt.append(Util.completaString("", 15));
							}
							
							//ITEM 45 - Tipo de Consumidor (ImovelPerfil da tabela CobrancaDocumento)
							if (cobrancaDocumento.getImovelPerfil() != null) {
								
								cobrancaDocumentoTxt.append(Util.completaString(
								cobrancaDocumento.getImovelPerfil().getDescricao() , 20));
								
							} else {
								cobrancaDocumentoTxt.append(Util.completaString("", 20));
							}
							
							//ITEM 46 - Hidrômetro
							/*Collection dadosHidrometro = null;
							
							try {

								dadosHidrometro = this.repositorioMicromedicao
								.pesquisarDadosHidrometroTipoLigacaoAgua(cobrancaDocumento.getImovel().getId());
								
							} catch (ErroRepositorioException ex) {
								ex.printStackTrace();
								throw new ControladorException("erro.sistema", ex);
							}
							
							if (dadosHidrometro != null && !dadosHidrometro.isEmpty()){
								
								Object[] objetoDados = (Object[]) Util.retonarObjetoDeColecao(dadosHidrometro);
								String numeroHidrometro = String.valueOf(objetoDados[1]);
								
								if (numeroHidrometro != null && !numeroHidrometro.equalsIgnoreCase("")){
									
									cobrancaDocumentoTxt.append(Util.completaString(numeroHidrometro, 10));
								}
								else{
									
									cobrancaDocumentoTxt.append(Util.completaString("", 10));
								}
							}
							else{
								
								cobrancaDocumentoTxt.append(Util.completaString("", 10));
							}*/
				
							//==========================================================================================

							
							cobrancaDocumentoTxt.append(System
									.getProperty("line.separator"));

						}

						colecaoCobrancaDocumentoItemConta = null;
					}

					// }// fim do laço que verifica
					// as 2
					// contas

				}// fim laço while do iterator do
				// objeto
				// helper
				// countOrdem++;
				// mapCobrancaoDocumentoDivididas = null;
				// // }
			} else {
				flagFimPesquisa = true;
			}
			// } else {
			// flagFimPesquisa = true;
			// }
			// colecaoCobrancaDocumento = null;
		}

		Date dataAtual = new Date();

		String nomeZip = null;

		System.out.println("ID AÇÃO COBRANÇA:" + idAcaoCobranca);

		if (idCronogramaAtividadeAcaoCobranca != null) {
			nomeZip = "EMITIR_" + acaoCobranca.getDescricaoCobrancaAcao()
					+ "_GRUPO_" + grupoCobranca.getId() + "_"
					+ Util.formatarData(dataAtual) + Util.formatarHoraSemDataSemDoisPontos(dataAtual);
		} else {
			String descricaoAbrevDocumentoTipo = "";
			if (acaoCobranca != null && acaoCobranca.getDocumentoTipo() != null) {
				descricaoAbrevDocumentoTipo = acaoCobranca.getDocumentoTipo()
						.getDescricaoAbreviado();
			}
			String tituloComandoEventual = cobrancaAcaoAtividadeComando
					.getDescricaoTitulo();

			nomeZip = descricaoAbrevDocumentoTipo + " " + tituloComandoEventual
					+ " " + Util.formatarData(dataAtual) + Util.formatarHoraSemDataSemDoisPontos(dataAtual);
		}
		nomeZip = nomeZip.replace("/", "_");
		nomeZip = nomeZip.replace(" ", "_");

		// pegar o arquivo, zipar pasta e arquivo e escrever no stream
		try {

			System.out.println("***************************************");
			System.out.println("INICO DA CRIACAO DO ARQUIVO");
			System.out.println("***************************************");

			if (cobrancaDocumentoTxt != null
					&& cobrancaDocumentoTxt.length() != 0) {

				// criar o arquivo zip
				File compactado = new File(nomeZip + ".zip"); // nomeZip
				ZipOutputStream zos = new ZipOutputStream(new FileOutputStream(
						compactado));

				File leitura = new File(nomeZip + ".txt");
				BufferedWriter out = new BufferedWriter(new OutputStreamWriter(
						new FileOutputStream(leitura.getAbsolutePath())));
				out.write(cobrancaDocumentoTxt.toString());
				out.close();
				ZipUtil.adicionarArquivo(zos, leitura);

				// close the stream
				zos.close();
				leitura.delete();
			}
			System.out.println("***************************************");
			System.out.println("FIM DA CRIACAO DO ARQUIVO");
			System.out.println("***************************************");

		} catch (IOException e) {
			e.printStackTrace();
			throw new ControladorException("erro.sistema", e);
		} catch (Exception e) {
			e.printStackTrace();

			throw new ControladorException("erro.sistema", e);
		}

	}

	/**
	 * Formata a string builder de cobrança documento de acordo com a quantidade
	 * de itens.Caso a quantidade de itens seja maior que 24 então as contas com
	 * o ano mes referencia mais antigas serão somadas (os valores do item e dos
	 * acrescimos) e formatadas na stringbuilder.
	 * 
	 * [UC0575] Emitir Aviso de Cobrança
	 * 
	 * @author Sávio Luiz
	 * @date 09/04/2007
	 * 
	 * @return
	 * @throws ControladorException
	 */
	protected Object[] formatarCobrancaDocumentoItemParaContaComFormatacao(
			StringBuilder cobrancaDocumentoTxt,
			Collection colecaoCobrancaDocumentoItemConta, int quantidadeContas,
			Integer idAcaoCobranca) throws ControladorException {

		Object[] parsValores = new Object[3];

		BigDecimal valorTotalItemCobrado = new BigDecimal("0.00");
		BigDecimal valorTotalAcrescimos = new BigDecimal("0.00");
		BigDecimal valorTotalAcrescimosItemCobrados = new BigDecimal("0.00");

		int complementoEspecosBranco = 0;
		// em caso de ser carta de tarifa social não
		// formatar o txt
		complementoEspecosBranco = quantidadeContas * 61;

		int countImpressao = colecaoCobrancaDocumentoItemConta.size()
				- (quantidadeContas - 1);

		if (colecaoCobrancaDocumentoItemConta.size() > quantidadeContas) {
			// indicadorEstouro = 1;

			CalcularValorDataVencimentoAnteriorHelper calcularValorDataVencimentoAnteriorHelper = this
					.calcularValorDataVencimentoAnterior(
							colecaoCobrancaDocumentoItemConta, quantidadeContas);

			// Ano mes de referencia da conta anterior
			cobrancaDocumentoTxt.append("DEB.ATE");

			complementoEspecosBranco = complementoEspecosBranco - 7;

			// origem
			cobrancaDocumentoTxt.append("  ");
			complementoEspecosBranco = complementoEspecosBranco - 2;

			// data de vencimento anterior
			cobrancaDocumentoTxt.append(Util
					.formatarData(calcularValorDataVencimentoAnteriorHelper
							.getDataVencimentoAnterior()));
			complementoEspecosBranco = complementoEspecosBranco - 10;

			String valorItemAnterior = Util.formataBigDecimal(
					calcularValorDataVencimentoAnteriorHelper
							.getValorAnterior(), 2, true);

			// adiciona o valor de item cobrado para o total
			valorTotalItemCobrado = valorTotalItemCobrado
					.add(calcularValorDataVencimentoAnteriorHelper
							.getValorAnterior());

			// Valor do item anterior
			cobrancaDocumentoTxt.append(Util.completaString(valorItemAnterior,
					14));
			complementoEspecosBranco = complementoEspecosBranco - 14;

			String valorAcrescimosAnterior = Util.formataBigDecimal(
					calcularValorDataVencimentoAnteriorHelper
							.getValorAcrescimosAnterior(), 2, true);
			// Valor dos encargos anterior
			cobrancaDocumentoTxt.append(Util.completaString(
					valorAcrescimosAnterior, 14));
			complementoEspecosBranco = complementoEspecosBranco - 14;
			valorTotalAcrescimos = valorTotalAcrescimos
					.add(calcularValorDataVencimentoAnteriorHelper
							.getValorAcrescimosAnterior());

			BigDecimal valorItemCobradoAcrescimosAnteriorB = new BigDecimal(
					"0.00");

			valorItemCobradoAcrescimosAnteriorB = valorItemCobradoAcrescimosAnteriorB
					.add(calcularValorDataVencimentoAnteriorHelper
							.getValorAnterior());

			valorItemCobradoAcrescimosAnteriorB = valorItemCobradoAcrescimosAnteriorB
					.add(calcularValorDataVencimentoAnteriorHelper
							.getValorAcrescimosAnterior());

			String valorItemCobradoAcrescimosAnterior = Util.formataBigDecimal(
					valorItemCobradoAcrescimosAnteriorB, 2, true);
			// Valor dos encargos anterior + valor dos descontos
			cobrancaDocumentoTxt.append(Util.completaString(
					valorItemCobradoAcrescimosAnterior, 14));
			complementoEspecosBranco = complementoEspecosBranco - 14;

			valorTotalAcrescimosItemCobrados = valorTotalAcrescimosItemCobrados
					.add(valorItemCobradoAcrescimosAnteriorB);

		}

		if (countImpressao <= 1) {
			Iterator iteratorColecaoCobrancaDocumentoItem = colecaoCobrancaDocumentoItemConta
					.iterator();

			CobrancaDocumentoItem cobrancaDocumentoItem = null;

			while (iteratorColecaoCobrancaDocumentoItem.hasNext()) {
				cobrancaDocumentoItem = (CobrancaDocumentoItem) iteratorColecaoCobrancaDocumentoItem
						.next();

				// Ano mes de referencia da conta anterior
				cobrancaDocumentoTxt.append(Util
						.formatarAnoMesParaMesAno(cobrancaDocumentoItem
								.getContaGeral().getConta().getReferencia()));
				complementoEspecosBranco = complementoEspecosBranco - 7;

				// origem
				if (cobrancaDocumentoItem.getContaGeral().getConta()
						.getDebitoCreditoSituacaoAtual() != null) {
					if (cobrancaDocumentoItem.getContaGeral().getConta()
							.getDebitoCreditoSituacaoAtual().getId().equals(
									DebitoCreditoSituacao.NORMAL)) {
						cobrancaDocumentoTxt.append("19");
					} else {
						if (cobrancaDocumentoItem.getContaGeral().getConta()
								.getDebitoCreditoSituacaoAtual().getId()
								.equals(DebitoCreditoSituacao.RETIFICADA)) {
							cobrancaDocumentoTxt.append("27");
						} else {
							if (cobrancaDocumentoItem.getContaGeral()
									.getConta().getDebitoCreditoSituacaoAtual()
									.getId().equals(
											DebitoCreditoSituacao.INCLUIDA)) {
								cobrancaDocumentoTxt.append("35");
							} else {
								cobrancaDocumentoTxt.append("00");
							}
						}
					}

				} else {
					cobrancaDocumentoTxt.append("00");
				}
				complementoEspecosBranco = complementoEspecosBranco - 2;

				// data de vencimento anterior
				cobrancaDocumentoTxt.append(Util
						.formatarData(cobrancaDocumentoItem.getContaGeral()
								.getConta().getDataVencimentoConta()));
				complementoEspecosBranco = complementoEspecosBranco - 10;

				String valorItem = Util.formataBigDecimal(cobrancaDocumentoItem
						.getValorItemCobrado(), 2, true);

				// adiciona o valor de item cobrado para o total
				valorTotalItemCobrado = valorTotalItemCobrado
						.add(cobrancaDocumentoItem.getValorItemCobrado());

				// Valor do item anterior
				cobrancaDocumentoTxt.append(Util.completaString(valorItem, 14));
				complementoEspecosBranco = complementoEspecosBranco - 14;

				String valorAcrescimos = Util.formataBigDecimal(
						cobrancaDocumentoItem.getValorAcrescimos(), 2, true);
				// Valor dos encargos anterior
				cobrancaDocumentoTxt.append(Util.completaString(
						valorAcrescimos, 14));
				complementoEspecosBranco = complementoEspecosBranco - 14;
				valorTotalAcrescimos = valorTotalAcrescimos
						.add(cobrancaDocumentoItem.getValorAcrescimos());

				BigDecimal valorItemCobradoAcrescimosB = new BigDecimal("0.00");

				valorItemCobradoAcrescimosB = valorItemCobradoAcrescimosB
						.add(cobrancaDocumentoItem.getValorItemCobrado());

				valorItemCobradoAcrescimosB = valorItemCobradoAcrescimosB
						.add(cobrancaDocumentoItem.getValorAcrescimos());

				String valorItemCobradoAcrescimos = Util.formataBigDecimal(
						valorItemCobradoAcrescimosB, 2, true);
				// Valor dos encargos anterior + valor dos descontos
				cobrancaDocumentoTxt.append(Util.completaString(
						valorItemCobradoAcrescimos, 14));
				complementoEspecosBranco = complementoEspecosBranco - 14;

				valorTotalAcrescimosItemCobrados = valorTotalAcrescimosItemCobrados
						.add(valorItemCobradoAcrescimosB);

			}

		} else {
			CobrancaDocumentoItem cobrancaDocumentoItem = null;
			while (countImpressao < colecaoCobrancaDocumentoItemConta.size()) {
				cobrancaDocumentoItem = (CobrancaDocumentoItem) ((List) colecaoCobrancaDocumentoItemConta)
						.get(countImpressao);

				// Ano mes de referencia da conta anterior
				cobrancaDocumentoTxt.append(Util
						.formatarAnoMesParaMesAno(cobrancaDocumentoItem
								.getContaGeral().getConta().getReferencia()));
				complementoEspecosBranco = complementoEspecosBranco - 7;

				// origem
				if (cobrancaDocumentoItem.getContaGeral().getConta()
						.getDebitoCreditoSituacaoAtual() != null) {
					if (cobrancaDocumentoItem.getContaGeral().getConta()
							.getDebitoCreditoSituacaoAtual().getId().equals(
									DebitoCreditoSituacao.NORMAL)) {
						cobrancaDocumentoTxt.append("19");
					} else {
						if (cobrancaDocumentoItem.getContaGeral().getConta()
								.getDebitoCreditoSituacaoAtual().getId()
								.equals(DebitoCreditoSituacao.RETIFICADA)) {
							cobrancaDocumentoTxt.append("27");
						} else {
							if (cobrancaDocumentoItem.getContaGeral()
									.getConta().getDebitoCreditoSituacaoAtual()
									.getId().equals(
											DebitoCreditoSituacao.INCLUIDA)) {
								cobrancaDocumentoTxt.append("35");
							} else {
								cobrancaDocumentoTxt.append("00");
							}
						}
					}

				} else {
					cobrancaDocumentoTxt.append("00");
				}
				complementoEspecosBranco = complementoEspecosBranco - 2;

				// data de vencimento anterior
				cobrancaDocumentoTxt.append(Util
						.formatarData(cobrancaDocumentoItem.getContaGeral()
								.getConta().getDataVencimentoConta()));
				complementoEspecosBranco = complementoEspecosBranco - 10;

				String valorItem = Util.formataBigDecimal(cobrancaDocumentoItem
						.getValorItemCobrado(), 2, true);

				// adiciona o valor de item cobrado para o total
				valorTotalItemCobrado = valorTotalItemCobrado
						.add(cobrancaDocumentoItem.getValorItemCobrado());

				// Valor do item anterior
				cobrancaDocumentoTxt.append(Util.completaString(valorItem, 14));
				complementoEspecosBranco = complementoEspecosBranco - 14;

				String valorAcrescimos = Util.formataBigDecimal(
						cobrancaDocumentoItem.getValorAcrescimos(), 2, true);
				// Valor dos encargos anterior
				cobrancaDocumentoTxt.append(Util.completaString(
						valorAcrescimos, 14));
				complementoEspecosBranco = complementoEspecosBranco - 14;
				valorTotalAcrescimos = valorTotalAcrescimos
						.add(cobrancaDocumentoItem.getValorAcrescimos());

				BigDecimal valorItemCobradoAcrescimosB = new BigDecimal("0.00");

				valorItemCobradoAcrescimosB = valorItemCobradoAcrescimosB
						.add(cobrancaDocumentoItem.getValorItemCobrado());

				valorItemCobradoAcrescimosB = valorItemCobradoAcrescimosB
						.add(cobrancaDocumentoItem.getValorAcrescimos());

				String valorItemCobradoAcrescimos = Util.formataBigDecimal(
						valorItemCobradoAcrescimosB, 2, true);
				// Valor dos encargos anterior + valor dos descontos
				cobrancaDocumentoTxt.append(Util.completaString(
						valorItemCobradoAcrescimos, 14));
				complementoEspecosBranco = complementoEspecosBranco - 14;

				valorTotalAcrescimosItemCobrados = valorTotalAcrescimosItemCobrados
						.add(valorItemCobradoAcrescimosB);
				countImpressao++;

			}
		}
		cobrancaDocumentoTxt.append(Util.completaString("",
				complementoEspecosBranco));

		parsValores[0] = valorTotalItemCobrado;
		parsValores[1] = valorTotalAcrescimos;
		parsValores[2] = valorTotalAcrescimosItemCobrados;
		return parsValores;
	}

	/**
	 * Gerar Curva ABC de Debitos
	 * 
	 * [UC0621] Gerar Curva ABC de Debitos
	 * 
	 * @author Ivan Sérgio
	 * @date 01/08/2007
	 * 
	 */
	public Collection gerarCurvaAbcDebitos(String classificacao,
			String referenciaCobrancaInicial, String referenciaCobrancaFinal,
			String indicadorImovelMedicaoIndividualizada,
			String indicadorImovelParalizacaoFaturamentoCobranca,
			String[] gerenciaRegional, String idLocalidadeInicial,
			String idLocalidadeFinal, String idSetorComercialInicial,
			String idSetorComercialFinal, String idMunicipio,
			String[] situacaoLigacaoAgua, String[] situacaoLigacaoEsgoto,
			String intervaloMesesCortadoSuprimidoInicial,
			String intervaloMesesCortadoSuprimidoFinal,
			String intervaloConsumoMinimoFixadoEsgotoInicial,
			String intervaloConsumoMinimoFixadoEsgotoFinal,
			String indicadorMedicao, String idTipoMedicao,
			String idPerfilImovel, String idTipoCategoria, String[] categoria,
			String idSubCategoria, String valorMinimoDebito,
			String intervaloQuantidadeDocumentosInicial,
			String intervaloQuantidadeDocumentosFinal,
			String indicadorPagamentosNaoClassificados)
			throws ControladorException {

		Collection colecaoImoveis = null;

		try {
			colecaoImoveis = repositorioCobranca.gerarCurvaAbcDebitos(
					classificacao, indicadorImovelMedicaoIndividualizada,
					indicadorImovelParalizacaoFaturamentoCobranca,
					gerenciaRegional, idLocalidadeInicial, idLocalidadeFinal,
					idSetorComercialInicial, idSetorComercialFinal, idMunicipio,
					situacaoLigacaoAgua, situacaoLigacaoEsgoto,
					intervaloConsumoMinimoFixadoEsgotoInicial,
					intervaloConsumoMinimoFixadoEsgotoFinal, indicadorMedicao,
					idTipoMedicao, idPerfilImovel, idTipoCategoria, categoria,
					idSubCategoria);

		} catch (ErroRepositorioException e) {
			//sessionContext.setRollbackOnly();
			throw new ControladorException("erro.sistema", e);
		}

		// colecao com os dados para o relatorio
		Collection<Integer> colecaoImoveisGerarCurvaAbcDebitos = null;
		Collection colecaoGerarCurvaAbcDebitos = null;

		boolean pesquisarMunicipio = false;
		if(idMunicipio != null && !idMunicipio.equals("")){
			pesquisarMunicipio = true;
		}
		
		if (colecaoImoveis != null && !colecaoImoveis.isEmpty()) {

			Iterator iteratorColecaoImoveis = colecaoImoveis.iterator();
			colecaoImoveisGerarCurvaAbcDebitos = new ArrayList();

			Integer idImovel = null;
			Integer idSituacaoLigacaoAgua = null;
			Integer dataCortado = null;
			Integer dataSuprimido = null;

			Integer intervaloInicial = null;
			Integer intervaloFinal = null;
			Date dataIntervaloInicial = null;
			Date dataIntervaloFinal = null;

			
			
			while (iteratorColecaoImoveis.hasNext()) {
				Object[] dadosRelatorio = (Object[]) iteratorColecaoImoveis
						.next();

				idImovel = (Integer) dadosRelatorio[0];
				idSituacaoLigacaoAgua = (Integer) dadosRelatorio[1];

				// Calcula os intervalos de Meses para Cortado/Suprimido caso
				// a Situacao da Ligacao de Agua seja cortado e/ou suprimido e
				// retira da lista caso esteja fora do periodo
				if (intervaloMesesCortadoSuprimidoInicial != null
						&& !intervaloMesesCortadoSuprimidoInicial.equals("")
						&& intervaloMesesCortadoSuprimidoFinal != null
						&& !intervaloMesesCortadoSuprimidoFinal.equals("")) {

					dataIntervaloInicial = Util
							.adcionarOuSubtrairMesesAData(
									new Date(),
									-(Util
											.converterStringParaInteger(intervaloMesesCortadoSuprimidoInicial)
											.intValue()), 0);

					intervaloInicial = Integer.decode(Util
							.formatarDataSemBarra(dataIntervaloInicial));

					dataIntervaloFinal = Util
							.adcionarOuSubtrairMesesAData(
									new Date(),
									-(Util
											.converterStringParaInteger(intervaloMesesCortadoSuprimidoFinal)
											.intValue()), 0);

					intervaloFinal = Integer.decode(Util
							.formatarDataSemBarra(dataIntervaloFinal));

					if (idSituacaoLigacaoAgua
							.equals(LigacaoAguaSituacao.CORTADO)) {
						dataCortado = Integer.decode(dadosRelatorio[2]
								.toString().replace("-", ""));

						if ((dataCortado >= intervaloFinal)
								&& (dataCortado <= intervaloInicial)) {
							colecaoImoveisGerarCurvaAbcDebitos.add(idImovel);
						}

					} else if (idSituacaoLigacaoAgua
							.equals(LigacaoAguaSituacao.SUPRIMIDO)) {
						dataSuprimido = Integer.decode(dadosRelatorio[3]
								.toString().replace("-", ""));

						if ((dataSuprimido >= intervaloFinal)
								&& (dataSuprimido <= intervaloInicial)) {
							colecaoImoveisGerarCurvaAbcDebitos.add(idImovel);
						}
					}
					System.out.println("Ligacao de Agua seja cortado e/ou suprimida");
				} else {
					colecaoImoveisGerarCurvaAbcDebitos.add(idImovel);
				}
			}

			if (!colecaoImoveisGerarCurvaAbcDebitos.isEmpty()) {
				referenciaCobrancaInicial = referenciaCobrancaInicial.replace(
						"/", "");
				referenciaCobrancaInicial = referenciaCobrancaInicial
						.substring(2, 6)
						+ referenciaCobrancaInicial.substring(0, 2);

				referenciaCobrancaFinal = referenciaCobrancaFinal.replace("/",
						"");
				referenciaCobrancaFinal = referenciaCobrancaFinal.substring(2,
						6)
						+ referenciaCobrancaFinal.substring(0, 2);

				String valorMinimoDebitoInformado = valorMinimoDebito.replace(
						".", "");
				valorMinimoDebitoInformado = valorMinimoDebitoInformado
						.replace(",", ".");
				
				colecaoGerarCurvaAbcDebitos = pesquisarDebitoImovelPorFaixaValores(
						colecaoImoveisGerarCurvaAbcDebitos,
						valorMinimoDebitoInformado, referenciaCobrancaInicial,
						referenciaCobrancaFinal, classificacao, pesquisarMunicipio);
			}
		}

		return colecaoGerarCurvaAbcDebitos;
	}

	/**
	 * [UC0630] - Solicitar Emissão do Extrato de Débitos Apresentar
	 * Débitos/Créditos do Imóvel
	 * 
	 * @author Vivianne Sousa
	 * @created 21/08/2007
	 * 
	 * @param idImovel
	 * @exception ControladorException
	 */
	public ObterDebitoImovelOuClienteHelper apresentarDebitoCreditoImovelExtratoDebito(
			Integer idImovel, boolean indicadorParcelamento)
			throws ControladorException {

		Date dataVencimentoInicial = Util.criarData(1, 1, 0001);
		Date dataVencimentoFinal = Util.criarData(31, 12, 9999);

		// [UC0067] Obter Débito do Imóvel ou Cliente
		ObterDebitoImovelOuClienteHelper imovelDebitoCredito = this
				.obterDebitoImovelOuCliente(1, // indicadorDebito
						idImovel.toString(), // idImovel
						null, // codigoCliente
						null, // clienteRelacaoTipo
						"000101", // anoMesInicialReferenciaDebito
						"999912", // anoMesFinalReferenciaDebito
						dataVencimentoInicial, // anoMesInicialVencimentoDebito
						dataVencimentoFinal, // anoMesFinalVencimentoDebito
						1, // indicadorPagamento
						1, // indicadorConta
						1, // indicadorDebitoACobrar
						1, // indicadorCreditoARealizar
						1, // indicadorNotasPromissorias
						1, // indicadorGuiasPagamento
						1, // indicadorCalcularAcrescimoImpontualidade
						true);// indicadorContas

		boolean existeDebitoCredito = false;

		// CONTA
		if (imovelDebitoCredito.getColecaoContasValoresImovel() != null
				&& !imovelDebitoCredito.getColecaoContasValoresImovel()
						.isEmpty()) {
			existeDebitoCredito = true;

			if (!indicadorParcelamento) {

				Collection<ContaValoresHelper> colecaoContaValoresNaoParcelamento = new ArrayList();

				// Selecionar apenas as contas que não estejam parceladas
				Iterator itColecaoConta = imovelDebitoCredito
						.getColecaoContasValoresImovel().iterator();

				while (itColecaoConta.hasNext()) {

					ContaValoresHelper contaValoresHelper = (ContaValoresHelper) itColecaoConta
							.next();

					if (!contaValoresHelper.getConta()
							.getDebitoCreditoSituacaoAtual().getId().equals(
									DebitoCreditoSituacao.PARCELADA)) {

						colecaoContaValoresNaoParcelamento
								.add(contaValoresHelper);
					}
				}

				imovelDebitoCredito
						.setColecaoContasValoresImovel(colecaoContaValoresNaoParcelamento);

			}

		}

		// DEBITO_A_COBRAR
		if (imovelDebitoCredito.getColecaoDebitoACobrar() != null
				&& !imovelDebitoCredito.getColecaoDebitoACobrar().isEmpty()) {
			existeDebitoCredito = true;

			if (!indicadorParcelamento) {
				
				//COLEÇÃO COM OS DÉBITOS A COBRAR
				Collection<DebitoACobrar> colecaoDebitoACobrarNaoParcelamento = new ArrayList();
				
				// Selecionar apenas os débitos que não sejam de parcelamento
				Iterator itColecaoDebitoACobrar = imovelDebitoCredito
				.getColecaoDebitoACobrar().iterator();

				while (itColecaoDebitoACobrar.hasNext()) {

					DebitoACobrar debitoACobrar = (DebitoACobrar) itColecaoDebitoACobrar.next();

					if (!debitoACobrar.getFinanciamentoTipo().getId().equals(
						 FinanciamentoTipo.PARCELAMENTO_AGUA)
						&& !debitoACobrar.getFinanciamentoTipo().getId().equals(
						   FinanciamentoTipo.PARCELAMENTO_ESGOTO)
						&& !debitoACobrar.getFinanciamentoTipo().getId()
						   .equals(FinanciamentoTipo.PARCELAMENTO_SERVICO)
                 		&& !debitoACobrar.getFinanciamentoTipo().getId().equals(
						FinanciamentoTipo.JUROS_PARCELAMENTO)) {

						colecaoDebitoACobrarNaoParcelamento.add(debitoACobrar);
					}
				}

				imovelDebitoCredito.setColecaoDebitoACobrar(colecaoDebitoACobrarNaoParcelamento);
			}

		}

		// CREDITO_A_REALIZAR
		if (imovelDebitoCredito.getColecaoCreditoARealizar() != null
				&& !imovelDebitoCredito.getColecaoCreditoARealizar().isEmpty()) {
			existeDebitoCredito = true;

			if (!indicadorParcelamento) {

				Collection<CreditoARealizar> colecaoCreditoARealizarNaoParcelamento = new ArrayList();

				// Selecionar apenas os créditos que não sejam de parcelamento
				Iterator itColecaoCreditoARealizar = imovelDebitoCredito
						.getColecaoCreditoARealizar().iterator();

				while (itColecaoCreditoARealizar.hasNext()) {

					CreditoARealizar creditoARealizar = (CreditoARealizar) itColecaoCreditoARealizar
							.next();

					if (!creditoARealizar.getCreditoOrigem().getId().equals(
						 CreditoOrigem.DESCONTOS_CONCEDIDOS_NO_PARCELAMENTO)) {

						colecaoCreditoARealizarNaoParcelamento
								.add(creditoARealizar);
					}
				}

				imovelDebitoCredito
						.setColecaoCreditoARealizar(colecaoCreditoARealizarNaoParcelamento);

			}
		}

		// GUIA_PAGAMENTO
		if (imovelDebitoCredito.getColecaoGuiasPagamentoValores() != null
				&& !imovelDebitoCredito.getColecaoGuiasPagamentoValores()
						.isEmpty()) {
			existeDebitoCredito = true;
		}

		//PARCELAMENTO
		if (!indicadorParcelamento) {
			Collection colecaoParcelamento = new ArrayList();
			Collection colecaoDebitoCreditoParcelamentoHelper = new ArrayList();
			DebitoCreditoParcelamentoHelper debitoCreditoParcelamentoHelper = null;

			try {
				colecaoParcelamento = repositorioCobranca
						.pesquisarParcelamentosSituacaoNormal(idImovel);
			} catch (ErroRepositorioException e) {
				sessionContext.setRollbackOnly();
				throw new ControladorException("erro.sistema", e);
			}

			Iterator iteratorParcelamento = colecaoParcelamento.iterator();
			while (iteratorParcelamento.hasNext()) {
				Parcelamento parcelamento = (Parcelamento) iteratorParcelamento
						.next();
				debitoCreditoParcelamentoHelper = new DebitoCreditoParcelamentoHelper();

				debitoCreditoParcelamentoHelper = apresentarDebitoCreditoImovelExtratoDebito(parcelamento);
				colecaoDebitoCreditoParcelamentoHelper
						.add(debitoCreditoParcelamentoHelper);
			}
			
			
			
			imovelDebitoCredito
					.setColecaoDebitoCreditoParcelamentoHelper(colecaoDebitoCreditoParcelamentoHelper);
		}
		
		
		// Adicionado por Rômulo Aurélio Data: 05/11/2009 
		// Analista: Rosana Carvalho
		// Obtem os débitos a cobrar que estejam com PARC_ID = NULL,
		// com SITUACAO NORMAL E FINANCIAMENTO_TIPO = 2
		// Trata os Parcelamentos com ID nulo como debito a cobrar 
		// OBS: Problema ocorrido na migracao (parc_id = null)
		// Problema ocorrido na SAAE ,CAEMA e COSANPA
		if (!indicadorParcelamento) {
			Collection<DebitoACobrar> colecaoDebitoACobrarParceladoComIDNulo = new ArrayList();
			Collection<DebitoACobrar> colecaoDebitoACobrar = new ArrayList();
			colecaoDebitoACobrar = imovelDebitoCredito
					.getColecaoDebitoACobrar();

			try {
				colecaoDebitoACobrarParceladoComIDNulo = repositorioCobranca
						.pesquisarDebitoACobrarParceladoComIDNulo(idImovel);
			} catch (ErroRepositorioException e) {
				sessionContext.setRollbackOnly();
				throw new ControladorException("erro.sistema", e);
				
			}

			if (colecaoDebitoACobrarParceladoComIDNulo != null
					&& !colecaoDebitoACobrarParceladoComIDNulo.isEmpty()) {

				Iterator iteratorDebitoACobrarParceladoComIDNulo = colecaoDebitoACobrarParceladoComIDNulo
						.iterator();

				while (iteratorDebitoACobrarParceladoComIDNulo.hasNext()) {
					DebitoACobrar debitoACobrarParceladoComIDNulo = (DebitoACobrar) iteratorDebitoACobrarParceladoComIDNulo
							.next();

					colecaoDebitoACobrar.add(debitoACobrarParceladoComIDNulo);
				}
			}
		}
		// FIM ALTERACAO

		// [FS0002] - Verificar existência de débitos/créditos no imóvel
		if (!existeDebitoCredito) {
			throw new ControladorException("atencao.imovel_sem_debito_credito");
		}

		return imovelDebitoCredito;

	}

	/**
	 * [UC0630] - Solicitar Emissão do Extrato de Débitos Apresentar
	 * Débitos/Créditos do Imóvel
	 * 
	 * @author Vivianne Sousa
	 * @created 22/08/2007
	 * 
	 * @param idImovel
	 * @exception ControladorException
	 */
	public DebitoCreditoParcelamentoHelper apresentarDebitoCreditoImovelExtratoDebito(
			Parcelamento parcelamento) throws ControladorException {

		DebitoCreditoParcelamentoHelper debitoCreditoParcelamentoHelper = new DebitoCreditoParcelamentoHelper();
		Collection colecaoDebitosACobrar = null;
		Collection colecaoCreditosARealizar = null;

		debitoCreditoParcelamentoHelper.setParcelamento(parcelamento);

		//DÉBITOS A COBRAR
		try {
			colecaoDebitosACobrar = repositorioCobranca
			.pesquisarDebitosACobrarImovelParcelamento(parcelamento.getId());
		} 
		catch (ErroRepositorioException e) {
			sessionContext.setRollbackOnly();
			throw new ControladorException("erro.sistema", e);
		}

		if (colecaoDebitosACobrar != null && !colecaoDebitosACobrar.isEmpty()) {
			
			BigDecimal valorTotalDebito = BigDecimal.ZERO;

			//COLEÇÃO COM TODOS OS DÉBITOS RELACIONADOS AO PARCELAMENTO
			debitoCreditoParcelamentoHelper.setColecaoDebitoACobrarParcelamento(colecaoDebitosACobrar);

			Iterator iteratorColecaoDebitosACobrar = colecaoDebitosACobrar.iterator();
			DebitoACobrar debitoACobrar = null;
			
			//CALCULANDO O VALOR TOTAL RESTANTE PARA QUITAÇÃO DO PARCELAMENTO
			while (iteratorColecaoDebitosACobrar.hasNext()) {
				
				debitoACobrar = (DebitoACobrar) 
				iteratorColecaoDebitosACobrar.next();
				
				//ACUMULANDO O VALOR TOTAL RESTANTE PARA QUITAÇÃO DO PARCELAMENTO
				valorTotalDebito = valorTotalDebito.add(debitoACobrar.getValorTotalComBonus());
				
			}
			
			//VALOR TOTAL RESTANTE PARA QUITAÇÃO DO PARCELAMENTO
			debitoCreditoParcelamentoHelper.setValorTotalDebito(valorTotalDebito);
			
			//QUANTIDADE DE PARCELAS RESTANTES PARA QUITAÇÃO DO PARCELAMENTO
			debitoCreditoParcelamentoHelper.setNumeroPrestacaoCobradas(
			debitoACobrar.getNumeroPrestacaoCobradasMaisBonus());
			
			/*
			 * A cada débito a cobrar com parcelas a cobrar com valor maior que 1 (DBAC_NNPRESTACAODEBITO ? 
			 * (DBAC_NNPRESTACAOCOBRADAS + DBAC_NNPARCELABONUS)):
			 * 
			 * O sistema deverá disponibilizar um campo para receber, caso o usuário deseje, a quantidade 
			 * de parcelas que deseja antecipar.
			 */
			if (debitoCreditoParcelamentoHelper.getNumeroPrestacaoRestante() > 1){
				debitoCreditoParcelamentoHelper.setAntecipacaoParcela(true);
			}
			else{
				debitoCreditoParcelamentoHelper.setAntecipacaoParcela(false);
			}
		}

		
		//CRÉDTIOS A REALIZAR
		try {
			colecaoCreditosARealizar = repositorioCobranca
			.pesquisarCreditosARealizarParcelamento(parcelamento.getId());
		} 
		catch (ErroRepositorioException e) {
			sessionContext.setRollbackOnly();
			throw new ControladorException("erro.sistema", e);
		}

		if (colecaoCreditosARealizar != null) {

			Collection colecaoCreditosARealizarNovos = new ArrayList();
			BigDecimal valorTotalCredito = BigDecimal.ZERO;

			if (colecaoCreditosARealizar != null && !colecaoCreditosARealizar.isEmpty()) {

				Iterator iteratorcolecaoCreditosARealizar = 
				colecaoCreditosARealizar.iterator();

				//CALCULANDO O VALOR TOTAL RESTANTE DO CRÉDITO RELACIONADO AO PARCELAMENTO
				while (iteratorcolecaoCreditosARealizar.hasNext()) {

					Object[] colecaoCreditosARealizarArray = (Object[]) 
					iteratorcolecaoCreditosARealizar.next();

					CreditoARealizar creditoARealizar = null;

					if (colecaoCreditosARealizarArray[0] != null) {
						creditoARealizar = (CreditoARealizar) colecaoCreditosARealizarArray[0];
					}

					if (colecaoCreditosARealizarArray[1] != null) {
						
						CreditoTipo creditoTipo = new CreditoTipo();
						creditoTipo.setId((Integer) colecaoCreditosARealizarArray[2]);
						creditoTipo.setDescricao((String) colecaoCreditosARealizarArray[1]);
						
						creditoARealizar.setCreditoTipo(creditoTipo);

					}

					FiltroDevolucao filtroDevolucao = new FiltroDevolucao();
					filtroDevolucao.adicionarParametro(new ParametroSimples(FiltroDevolucao.CREDITO_A_REALIZAR_ID, creditoARealizar.getId()));
					
					Collection colecaoDevolucao = this.getControladorUtil().pesquisar(filtroDevolucao, Devolucao.class.getName());
					
					if (colecaoDevolucao == null || colecaoDevolucao.isEmpty()){
						
						//ACUMULANDO O VALOR TOTAL RESTANTE DO CRÉDITO RELACIONADO AO PARCELAMENTO
						valorTotalCredito = valorTotalCredito.add(creditoARealizar
						.getValorTotalComBonus());

						colecaoCreditosARealizarNovos.add(creditoARealizar);
					}
				}

			}

			//COLEÇÃO COM TODOS OS CRÉDITOS RELACIONADOS AO PARCELAMENTO
			debitoCreditoParcelamentoHelper
			.setColecaoCreditoARealizarParcelamento(colecaoCreditosARealizarNovos);
			
			//VALOR TOTAL RESTANTE DO CRÉDITO RELACIONADO AO PARCELAMENTO
			debitoCreditoParcelamentoHelper
			.setValorTotalCredito(valorTotalCredito);

		}

		return debitoCreditoParcelamentoHelper;
	}

	/**
	 * [UC0444] Gerar e Emitir Extrato de Débitos 
	 * 
	 * [UC0251] Gerar Atividade de Ação de Cobranca
	 * 
	 * Recuparea o valor da taxa de cobrança para gerar o documento de cobrança
	 * 
	 * gerarDocumentoCobranca
	 * 
	 * @author Vivianne Sousa
	 * @date 31/08/2007
	 * 
	 * @param imovel
	 * @param indicadorCobrancaTaxaExtrato
	 * @throws ControladorException
	 */
	public BigDecimal obterValorTaxaDocumentoCobranca(Imovel imovel,
			Short indicadorCobrancaTaxaExtrato) throws ControladorException {

		BigDecimal valorTaxa = BigDecimal.ZERO;
		
		SistemaParametro sistemaParametro = this.getControladorUtil().pesquisarParametrosDoSistema();

		if (indicadorCobrancaTaxaExtrato.equals(ConstantesSistema.INDICADOR_CALCULAR_TAXA_SALARIO_MINIMO)){
			
			//Caso o perfil do imóvel corresponda a tarifa social
			if (imovel.getImovelPerfil().getId() == ImovelPerfil.TARIFA_SOCIAL) {
				// Atribuir 0,25% do valor do salário mínimo
				valorTaxa = sistemaParametro.getValorSalarioMinimo().multiply(
						new BigDecimal("0.0025"));
			} else {
				// Atribuir 0,5% do valor do salário mínimo
				valorTaxa = sistemaParametro.getValorSalarioMinimo().multiply(
						new BigDecimal("0.005"));
			}
		}
		else if (indicadorCobrancaTaxaExtrato.equals(ConstantesSistema.INDICADOR_CALCULAR_TAXA_SEGUNDA_VIA)){
			
			valorTaxa = sistemaParametro.getValorSegundaVia();
		}
		

		return valorTaxa;
	}

	/**
	 * [UC0214] - Efetuar Parcelamento de Débitos
	 * 
	 * @author Vivianne Sousa
	 * @date 01/09/2007
	 * 
	 * @return
	 * @throws ErroRepositorioException
	 */
	public Integer verificarRDUtilizadaPeloImovel(Integer idRD, Integer idImovel)
			throws ControladorException {

		try {
			// chama o metódo de pesquisar do repositório
			return repositorioCobranca.verificarRDUtilizadaPeloImovel(idRD,
					idImovel);

			// erro no hibernate
		} catch (ErroRepositorioException ex) {
			// seta o rollback
			sessionContext.setRollbackOnly();

			// levanta a exceção para a próxima camada
			throw new ControladorException("erro.sistema", ex);
		}
	}

	/**
	 * [UC0214] Efetuar Parcelamento Debito [SB0011] Verificar Única Fatura
	 * 
	 * @author Vivianne Sousa
	 * @created 01/09/2007
	 * 
	 * @param idImovel
	 * @return
	 * @throws ErroRepositorioException
	 */
	public BigDecimal pesquisarValorDebitoACobrarSancoes(Integer idImovel,
			Integer anoMesInicialReferenciaDebito,
			Integer anoMesFinalReferenciaDebito) throws ControladorException {

		try {
			if (anoMesFinalReferenciaDebito
					.compareTo(anoMesInicialReferenciaDebito) < 0) {
				anoMesFinalReferenciaDebito = anoMesInicialReferenciaDebito;
			}

			// chama o metódo de pesquisar do repositório
			return repositorioCobranca.pesquisarValorDebitoACobrarSancoes(
					idImovel, anoMesInicialReferenciaDebito,
					anoMesFinalReferenciaDebito);

			// erro no hibernate
		} catch (ErroRepositorioException ex) {
			// seta o rollback
			sessionContext.setRollbackOnly();

			// levanta a exceção para a próxima camada
			throw new ControladorException("erro.sistema", ex);
		}

	}

	/**
	 * [UC0214] Efetuar Parcelamento Debito [SB0011] Verificar Única Fatura
	 * 
	 * @author Vivianne Sousa
	 * @created 06/09/2007
	 * 
	 * @param idImovel
	 * @return
	 * @throws ErroRepositorioException
	 */
	public BigDecimal pesquisarValorDebitoACobrar(Integer idImovel,
			Integer anoMesInicialReferenciaDebito,
			Integer anoMesFinalReferenciaDebito) throws ControladorException {

		try {
			if (anoMesFinalReferenciaDebito
					.compareTo(anoMesInicialReferenciaDebito) < 0) {
				anoMesFinalReferenciaDebito = anoMesInicialReferenciaDebito;
			}

			// chama o metódo de pesquisar do repositório
			return repositorioCobranca.pesquisarValorDebitoACobrar(idImovel,
					anoMesInicialReferenciaDebito, anoMesFinalReferenciaDebito);

			// erro no hibernate
		} catch (ErroRepositorioException ex) {
			// seta o rollback
			sessionContext.setRollbackOnly();

			// levanta a exceção para a próxima camada
			throw new ControladorException("erro.sistema", ex);
		}

	}

	/**
	 * [UC0214] Efetuar Parcelamento Debito
	 * 
	 * @author Vivianne Sousa
	 * @created 14/09/2007
	 * 
	 * @param idImovel
	 * @return
	 * @throws ErroRepositorioException
	 */
	public BigDecimal pesquisarValorDebitoCobradoContas(Integer idImovel,
			Integer anoMesInicialReferenciaDebito,
			Integer anoMesFinalReferenciaDebito, int indicadorDividaAtiva) throws ControladorException {

		try {
			// chama o metódo de pesquisar do repositório
			return repositorioCobranca.pesquisarValorDebitoCobradoContas(
					idImovel, anoMesInicialReferenciaDebito,
					anoMesFinalReferenciaDebito, indicadorDividaAtiva);

			// erro no hibernate
		} catch (ErroRepositorioException ex) {
			// seta o rollback
			sessionContext.setRollbackOnly();

			// levanta a exceção para a próxima camada
			throw new ControladorException("erro.sistema", ex);
		}

	}

	/**
	 * [UC0214] Inserir Ação de Cobrança
	 * 
	 * @author Sávio Luiz
	 * @created 14/09/2007
	 * 
	 * @param idImovel
	 * @return
	 * @throws ErroRepositorioException
	 */
	public Integer inserirAcaoCobranca(CobrancaAcaoHelper cobrancaAcaoHelper) throws ControladorException {

		Integer idCobrancaAcao = null;

		CobrancaAcao cobrancaAcao = new CobrancaAcao();

		// verifica a existencia da descrição da ação de cobrança
		if (cobrancaAcaoHelper.getDescricaoCobrancaAcao() != null && !cobrancaAcaoHelper.getDescricaoCobrancaAcao().equals("")) {
			cobrancaAcao.setDescricaoCobrancaAcao(cobrancaAcaoHelper.getDescricaoCobrancaAcao());
		} else {
			// levanta a exceção para a próxima camada
			throw new ControladorException("atencao.required", null,
					"Descrição da Ação de Cobrança");
		}

		// verifica a existencia do numero de dias de validade da ação
		if (cobrancaAcaoHelper.getNumeroDiasValidade() != null && !cobrancaAcaoHelper.getNumeroDiasValidade().equals("")) {
			cobrancaAcao.setNumeroDiasValidade(new Short(cobrancaAcaoHelper.getNumeroDiasValidade()));
		} else {
			// levanta a exceção para a próxima camada
			throw new ControladorException("atencao.required", null,
					"Numero de Dias de Validade da Ação");
		}
		
		// verifica a existencia da ordem do cronograma
		if (cobrancaAcaoHelper.getOrdemRealizacao() != null && !cobrancaAcaoHelper.getOrdemRealizacao().equals("")) {
			// [FS0002] - Verificar existência de ação com mesma ordem
			FiltroCobrancaAcao filtroCobrancaAcao = new FiltroCobrancaAcao();
			filtroCobrancaAcao.adicionarParametro(new ParametroSimples(
					FiltroCobrancaAcao.ORDEM_REALIZACAO, cobrancaAcaoHelper.getOrdemRealizacao()));

			Collection colecaoCobarncaAcao = getControladorUtil().pesquisar(
					filtroCobrancaAcao, CobrancaAcao.class.getName());

			if (colecaoCobarncaAcao != null && !colecaoCobarncaAcao.isEmpty()) {
				CobrancaAcao cobAcao = (CobrancaAcao) Util
						.retonarObjetoDeColecao(colecaoCobarncaAcao);
				// // levanta a exceção para a próxima camada
				throw new ControladorException(
						"atencao.acao_cobranca_mesma_ordem", null, ""
								+ cobAcao.getDescricaoCobrancaAcao());
			} else {
				cobrancaAcao.setOrdemRealizacao(new Short(cobrancaAcaoHelper.getOrdemRealizacao()));
			}

		}

		// verifica a existencia da ação predecessora
		if (cobrancaAcaoHelper.getIdCobrancaAcaoPredecessora() != null && !cobrancaAcaoHelper.getIdCobrancaAcaoPredecessora().equals("")) {

			// [FS0008] - Verificar se o numero da ordem é menor que o da
			// predecessora
			FiltroCobrancaAcao filtroCobrancaAcao = new FiltroCobrancaAcao();
			filtroCobrancaAcao.adicionarParametro(new ParametroSimples(
					FiltroCobrancaAcao.ID, cobrancaAcaoHelper.getIdCobrancaAcaoPredecessora()));

			Collection colecaoCobarncaAcaoPredecessora = getControladorUtil()
					.pesquisar(filtroCobrancaAcao, CobrancaAcao.class.getName());

			if (colecaoCobarncaAcaoPredecessora != null
					&& !colecaoCobarncaAcaoPredecessora.isEmpty()) {
				CobrancaAcao cobrancaAcaoPredecessora = (CobrancaAcao) Util
						.retonarObjetoDeColecao(colecaoCobarncaAcaoPredecessora);
				if (cobrancaAcaoPredecessora.getOrdemRealizacao() != null
						&& cobrancaAcaoPredecessora.getOrdemRealizacao() >= new Short(
								cobrancaAcaoHelper.getOrdemRealizacao())) {

					// levanta a exceção para a próxima camada
					throw new ControladorException(
							"atencao.acao_cobranca_ordem_realizacao_predecessora");

				}

			}

			CobrancaAcao cobrancaAcaoPredecessora = new CobrancaAcao();
			cobrancaAcaoPredecessora.setId(new Integer(cobrancaAcaoHelper.getIdCobrancaAcaoPredecessora()));
			cobrancaAcao.setCobrancaAcaoPredecessora(cobrancaAcaoPredecessora);
		}

		// verifica a existencia do numero de dias entre a ação e sua
		// predecessora
		if (cobrancaAcaoHelper.getNumeroDiasMinimoAcaoPrecedente() != null && !cobrancaAcaoHelper.getNumeroDiasMinimoAcaoPrecedente().equals("")) {
			cobrancaAcao.setNumeroDiasMinimoAcaoPrecedente(new Short(
					cobrancaAcaoHelper.getNumeroDiasMinimoAcaoPrecedente()));
		}

		// verifica a existencia do tipo do documento a ser gerado
		if (cobrancaAcaoHelper.getIdDocumentoTipo() != null && !cobrancaAcaoHelper.getIdDocumentoTipo().equals("")) {
			DocumentoTipo documentoTipo = new DocumentoTipo();
			documentoTipo.setId(new Integer(cobrancaAcaoHelper.getIdDocumentoTipo()));
			cobrancaAcao.setDocumentoTipo(documentoTipo);
		} else {
			// levanta a exceção para a próxima camada
			throw new ControladorException("atencao.required", null,
					"Tipo de Documento a ser Gerado");
		}

		// verifica a existencia da situação da ligação de agua
		if (cobrancaAcaoHelper.getIdLigacaoAguaSituacao() != null && !cobrancaAcaoHelper.getIdLigacaoAguaSituacao().equals("")) {
			LigacaoAguaSituacao ligacaoAguaSituacao = new LigacaoAguaSituacao();
			ligacaoAguaSituacao.setId(new Integer(cobrancaAcaoHelper.getIdLigacaoAguaSituacao()));
			cobrancaAcao.setLigacaoAguaSituacao(ligacaoAguaSituacao);
		}

		// verifica a existencia da situação da ligação de esgoto
		if (cobrancaAcaoHelper.getIdLigacaoEsgotoSituacao() != null
				&& !cobrancaAcaoHelper.getIdLigacaoEsgotoSituacao().equals("")) {
			LigacaoEsgotoSituacao ligacaoEsgotoSituacao = new LigacaoEsgotoSituacao();
			ligacaoEsgotoSituacao.setId(new Integer(cobrancaAcaoHelper.getIdLigacaoEsgotoSituacao()));
			cobrancaAcao.setLigacaoEsgotoSituacao(ligacaoEsgotoSituacao);
		}

		// pesquisa enter de critério de cobrança
		if (cobrancaAcaoHelper.getIdCobrancaCriterio() != null && !cobrancaAcaoHelper.getIdCobrancaCriterio().equals("")) {
			if (cobrancaAcaoHelper.getDescricaoCobrancaCriterio() == null
					|| cobrancaAcaoHelper.getDescricaoCobrancaCriterio().equals("")) {

				FiltroCobrancaCriterio filtroCobrancaCriterio = new FiltroCobrancaCriterio();
				filtroCobrancaCriterio.adicionarParametro(new ParametroSimples(
						FiltroCobrancaCriterio.ID, new Integer(
								cobrancaAcaoHelper.getIdCobrancaCriterio())));
				filtroCobrancaCriterio
						.setCampoOrderBy(FiltroCobrancaCriterio.DESCRICAO_COBRANCA_CRITERIO);
				Collection colecaoCobrancaCriterio = getControladorUtil()
						.pesquisar(filtroCobrancaCriterio,
								CobrancaCriterio.class.getName());

				if (colecaoCobrancaCriterio != null
						&& !colecaoCobrancaCriterio.isEmpty()) {
					CobrancaCriterio cobrancaCriterio = (CobrancaCriterio) Util
							.retonarObjetoDeColecao(colecaoCobrancaCriterio);
					cobrancaAcao.setCobrancaCriterio(cobrancaCriterio);
				} else {
					// levanta a exceção para a próxima camada
					throw new ControladorException(
							"atencao.pesquisa_inexistente", null,
							"Critério de Cobrança");
				}
			} else {
				CobrancaCriterio cobrancaCriterio = new CobrancaCriterio();
				cobrancaCriterio.setId(new Integer(cobrancaAcaoHelper.getIdCobrancaCriterio()));
				cobrancaAcao.setCobrancaCriterio(cobrancaCriterio);
			}

		} else {
			// levanta a exceção para a próxima camada
			throw new ControladorException("atencao.required", null,
					"Critério de Cobrança");
		}

		// pesquisa enter de critério de cobrança
		if (cobrancaAcaoHelper.getIdServicoTipo() != null && !cobrancaAcaoHelper.getIdServicoTipo().equals("")) {
			if (cobrancaAcaoHelper.getDescricaoServicoTipo() == null || cobrancaAcaoHelper.getDescricaoServicoTipo().equals("")) {

				FiltroServicoTipo filtroServicoTipo = new FiltroServicoTipo();
				filtroServicoTipo.adicionarParametro(new ParametroSimples(
						FiltroServicoTipo.ID, new Integer(cobrancaAcaoHelper.getIdServicoTipo())));
				filtroServicoTipo.setCampoOrderBy(FiltroServicoTipo.DESCRICAO);
				Collection colecaoServicoTipo = getControladorUtil().pesquisar(
						filtroServicoTipo, ServicoTipo.class.getName());

				if (colecaoServicoTipo != null && !colecaoServicoTipo.isEmpty()) {
					ServicoTipo servicoTipo = (ServicoTipo) Util
							.retonarObjetoDeColecao(colecaoServicoTipo);
					cobrancaAcao.setServicoTipo(servicoTipo);
				} else {
					// levanta a exceção para a próxima camada
					throw new ControladorException(
							"atencao.pesquisa_inexistente", null,
							"Tipo de serviço");
				}
			} else {
				ServicoTipo servicoTipo = new ServicoTipo();
				servicoTipo.setId(new Integer(cobrancaAcaoHelper.getIdServicoTipo()));
				cobrancaAcao.setServicoTipo(servicoTipo);
			}

		}

		

		// verifica a existencia do indicador de compõe o cronograma
		if (cobrancaAcaoHelper.getIndicadorCronograma() != null && !cobrancaAcaoHelper.getIndicadorCronograma().equals("")) {
			cobrancaAcao.setIndicadorCronograma(new Short(cobrancaAcaoHelper.getIndicadorCronograma()));
		} else {
			// levanta a exceção para a próxima camada
			throw new ControladorException("atencao.required", null,
					"Compõe Cronograma");
		}

		// verifica a existencia do indicador de ação Obrigatória
		if (cobrancaAcaoHelper.getIndicadorObrigatoriedade() != null && !cobrancaAcaoHelper.getIndicadorObrigatoriedade().equals("")) {
			if (new Short(cobrancaAcaoHelper.getIndicadorObrigatoriedade()).equals(CobrancaAcao.INDICADOR_SIM)
					&& new Short(cobrancaAcaoHelper.getIndicadorCronograma())
							.equals(CobrancaAcao.INDICADOR_NAO)) {
				// levanta a exceção para a próxima camada
				throw new ControladorException(
						"atencao.acao_cobranca_compor_cronograma");
			} else {
				cobrancaAcao.setIndicadorObrigatoriedade(new Short(
						cobrancaAcaoHelper.getIndicadorObrigatoriedade()));
			}
		} else {
			// levanta a exceção para a próxima camada
			throw new ControladorException("atencao.required", null,
					"Ação Obrigatória");
		}

		// verifica a existencia do indicador de repetição
		if (cobrancaAcaoHelper.getIndicadorRepeticao() != null && !cobrancaAcaoHelper.getIndicadorRepeticao().equals("")) {
			cobrancaAcao.setIndicadorRepeticao(new Short(cobrancaAcaoHelper.getIndicadorRepeticao()));
		} else {
			// levanta a exceção para a próxima camada
			throw new ControladorException("atencao.required", null,
					"Pode ser Repetida no Ciclo");
		}

		// verifica a existencia do indicador de suspensão de abastecimento
		if (cobrancaAcaoHelper.getIndicadorSuspensaoAbastecimento() != null
				&& !cobrancaAcaoHelper.getIndicadorSuspensaoAbastecimento().equals("")) {
			cobrancaAcao.setIndicadorSuspensaoAbastecimento(new Short(
					cobrancaAcaoHelper.getIndicadorSuspensaoAbastecimento()));
		} else {
			// levanta a exceção para a próxima camada
			throw new ControladorException("atencao.required", null,
					"Provoca Suspensão no Abastecimento");
		}

		// verifica a existencia do indicador de cobrança deb a cobrar
		if (cobrancaAcaoHelper.getIndicadorCobrancaDebACobrar() != null && !cobrancaAcaoHelper.getIndicadorCobrancaDebACobrar().equals("")) {
			cobrancaAcao.setIndicadorCobrancaDebACobrar(new Short(
					cobrancaAcaoHelper.getIndicadorCobrancaDebACobrar()));
		} else {
			// levanta a exceção para a próxima camada
			throw new ControladorException("atencao.required", null,
					"Considera Débitos a Cobrar");
		}

		// verifica a existencia do indicador de acrescimos por impontualidade
		if (cobrancaAcaoHelper.getIndicadorAcrescimoImpontualidade() != null
				&& !cobrancaAcaoHelper.getIndicadorAcrescimoImpontualidade().equals("")) {
			cobrancaAcao.setIndicadorAcrescimoImpontualidade(new Short(
					cobrancaAcaoHelper.getIndicadorAcrescimoImpontualidade()));
		} else {
			// levanta a exceção para a próxima camada
			throw new ControladorException("atencao.required", null,
					"Considera Acréscimos por Impontualidade");
		}

		// verifica a existencia do indicador de geração de taxa
		if (cobrancaAcaoHelper.getIndicadorGeracaoTaxa() != null && !cobrancaAcaoHelper.getIndicadorGeracaoTaxa().equals("")) {
			cobrancaAcao.setIndicadorGeracaoTaxa(new Short(cobrancaAcaoHelper.getIndicadorGeracaoTaxa()));
		} else {
			// levanta a exceção para a próxima camada
			throw new ControladorException("atencao.required", null,
					"Gera Taxa");
		}

		// verifica a existencia do indicador de emitir boletim de cadastro
		if (cobrancaAcaoHelper.getIndicadorBoletim() != null
				&& !cobrancaAcaoHelper.getIndicadorBoletim().equals("")) {
			cobrancaAcao
					.setIndicadorBoletim(new Short(cobrancaAcaoHelper.getIndicadorBoletim()));
		} else {
			// levanta a exceção para a próxima camada
			throw new ControladorException("atencao.required", null,
					"Pode Emitir Boletins de Cadastro");
		}

		// verifica a existencia do indicador de compõe o cronograma
		if (cobrancaAcaoHelper.getIndicadorDebito() != null && !cobrancaAcaoHelper.getIndicadorDebito().equals("")) {
			cobrancaAcao.setIndicadorDebito(new Short(cobrancaAcaoHelper.getIndicadorDebito()));
		} else {
			// levanta a exceção para a próxima camada
			throw new ControladorException("atencao.required", null,
					"Pode ser Executada para Imóveis sem Débito");
		}
		
		// verifica a existencia dnumero de dias de vencimento
		if (cobrancaAcaoHelper.getNumeroDiasVencimento() != null && !cobrancaAcaoHelper.getNumeroDiasVencimento().equals("")) {
			cobrancaAcao.setNumeroDiasVencimento(new Integer(cobrancaAcaoHelper.getNumeroDiasVencimento()));
		}
//		} else {
//			// levanta a exceção para a próxima camada
//			throw new ControladorException("atencao.required", null,
//					"Pode ser Executada para Imóveis sem Débito");
//		}
		
		//verifica a existencia do indicador de metasCronograma
		if (cobrancaAcaoHelper.getIndicadorMetasCronograma() != null && !cobrancaAcaoHelper.getIndicadorMetasCronograma().equals("")) {
			cobrancaAcao.setIndicadorMetasCronograma(new Integer(cobrancaAcaoHelper.getIndicadorMetasCronograma()));
		} else {
			// levanta a exceção para a próxima camada
			throw new ControladorException("atencao.required", null,
					"Usa Metas no Cronograma");
		}
		
		//verifica a existencia do indicador de ordenamentoCronograma
		if (cobrancaAcaoHelper.getIndicadorOrdenamentoCronograma() != null && !cobrancaAcaoHelper.getIndicadorOrdenamentoCronograma().equals("")) {
			cobrancaAcao.setIndicadorOrdenamentoCronograma(new Integer(cobrancaAcaoHelper.getIndicadorOrdenamentoCronograma()));
		} else {
			// levanta a exceção para a próxima camada
			throw new ControladorException("atencao.required", null,
					"Usa Ordenamento: No Cronograma");
		}
		
		//verifica a existencia do indicador de ordenamentoEventual
		if (cobrancaAcaoHelper.getIndicadorOrdenamentoEventual() != null && !cobrancaAcaoHelper.getIndicadorOrdenamentoEventual().equals("")) {
			cobrancaAcao.setIndicadorOrdenamentoEventual(new Integer(cobrancaAcaoHelper.getIndicadorOrdenamentoEventual()));
		} else {
			// levanta a exceção para a próxima camada
			throw new ControladorException("atencao.required", null,
					"Usa Ordenamento: Nas Eventuais");
		}
		
		//verifica a existencia do indicador de debitoInterfereAcao
		if (cobrancaAcaoHelper.getIndicadorDebitoInterfereAcao() != null && !cobrancaAcaoHelper.getIndicadorDebitoInterfereAcao().equals("")) {
			cobrancaAcao.setIndicadorDebitoInterfereAcao(new Integer(cobrancaAcaoHelper.getIndicadorDebitoInterfereAcao()));
		} else {
			// levanta a exceção para a próxima camada
			throw new ControladorException("atencao.required", null,
					"Situação do Débito Interfere na Situação da Ação");
		}
		
		//verifica a existencia numero de diasRemuneracaoTerceiro
		if (cobrancaAcaoHelper.getNumeroDiasRemuneracaoTerceiro() != null && !cobrancaAcaoHelper.getNumeroDiasRemuneracaoTerceiro().equals("")) {
			cobrancaAcao.setNumeroDiasRemuneracaoTerceiro(new Integer(cobrancaAcaoHelper.getNumeroDiasRemuneracaoTerceiro()));
		}
		
		if(cobrancaAcaoHelper.getIndicadorCreditosARealizar()!=null
				&& !cobrancaAcaoHelper.getIndicadorCreditosARealizar().equals("")){
			cobrancaAcao.setIndicadorCreditosARealizar(
					new Short(cobrancaAcaoHelper.getIndicadorCreditosARealizar()));
		}
		
		if(cobrancaAcaoHelper.getIndicadorNotasPromissoria()!=null
				&& !cobrancaAcaoHelper.getIndicadorNotasPromissoria().equals("")){
			cobrancaAcao.setIndicadorNotasPromissoria(
					new Short(cobrancaAcaoHelper.getIndicadorNotasPromissoria()));
		}
		
		if(cobrancaAcaoHelper.getIndicadorOrdenarMaiorValor()!=null
				&& !cobrancaAcaoHelper.getIndicadorOrdenarMaiorValor().equals("")){
			cobrancaAcao.setIndicadorOrdenarMaiorValor(
					new Short(cobrancaAcaoHelper.getIndicadorOrdenarMaiorValor()));
		}
		
		if(cobrancaAcaoHelper.getIndicadorValidarItem()!=null
				&& !cobrancaAcaoHelper.getIndicadorValidarItem().equals("")){
			cobrancaAcao.setIndicadorValidarItem(
					new Short(cobrancaAcaoHelper.getIndicadorValidarItem()));
		}
		//verifica a existencia de IndicadorEfetuarAcaoCpfCnpjValido
		if(cobrancaAcaoHelper.getIndicadorEfetuarAcaoCpfCnpjValido()!=null
				&& !cobrancaAcaoHelper.getIndicadorEfetuarAcaoCpfCnpjValido().equals("")){
			cobrancaAcao.setIndicadorEfetuarAcaoCpfCnpjValido(new Short(cobrancaAcaoHelper.getIndicadorEfetuarAcaoCpfCnpjValido()));
		}

		cobrancaAcao.setUltimaAlteracao(new Date());

		cobrancaAcao.setIndicadorUso(new Short(cobrancaAcaoHelper.getIndicadorUso()));

		// ------------ REGISTRAR TRANSAÇÃO----------------------------
		RegistradorOperacao registradorOperacao = new RegistradorOperacao(
				Operacao.OPERACAO_COBRANCA_ACAO_INSERIR,
				cobrancaAcao.getId(), cobrancaAcao.getId(),
				new UsuarioAcaoUsuarioHelper(cobrancaAcaoHelper.getUsuarioLogado(), 
				UsuarioAcao.USUARIO_ACAO_EFETUOU_OPERACAO));
		registradorOperacao.registrarOperacao(cobrancaAcao);
		
//		RegistradorOperacao registradorOperacao = new RegistradorOperacao(
//				Operacao.OPERACAO_COBRANCA_ACAO_INSERIR,
//				new UsuarioAcaoUsuarioHelper(cobrancaAcaoHelper.getUsuarioLogado(),
//						UsuarioAcao.USUARIO_ACAO_EFETUOU_OPERACAO));
//
//		Operacao operacao = new Operacao();
//		operacao.setId(Operacao.OPERACAO_COBRANCA_ACAO_INSERIR);
//
//		OperacaoEfetuada operacaoEfetuada = new OperacaoEfetuada();
//		operacaoEfetuada.setOperacao(operacao);
//
//		cobrancaAcao.setOperacaoEfetuada(operacaoEfetuada);
//		cobrancaAcao.adicionarUsuario(cobrancaAcaoHelper.getUsuarioLogado(),
//				UsuarioAcao.USUARIO_ACAO_EFETUOU_OPERACAO);
//		registradorOperacao.registrarOperacao(cobrancaAcao);
		// ------------ REGISTRAR TRANSAÇÃO----------------------------

		idCobrancaAcao = (Integer) getControladorUtil().inserir(cobrancaAcao);
		
		if(cobrancaAcaoHelper.getTextoPersonalizado()!=null && 
		  !cobrancaAcaoHelper.getTextoPersonalizado().equals("")){
			
			FiltroDocumentoTipo filtroDocumentoTipo = new FiltroDocumentoTipo();
			filtroDocumentoTipo.adicionarParametro(new ParametroSimples(
			FiltroDocumentoTipo.ID, cobrancaAcao.getDocumentoTipo().getId()));
			
			Collection colecaoDocumentoTipo = this.getControladorUtil().pesquisar(filtroDocumentoTipo, DocumentoTipo.class.getName());
			
			DocumentoTipo documentoTipo = (DocumentoTipo) Util.retonarObjetoDeColecao(colecaoDocumentoTipo);
			
			if (documentoTipo.getIndicadorTextoPersonalizado() != null &&
				documentoTipo.getIndicadorTextoPersonalizado().equals(ConstantesSistema.SIM)){
					
				//Atualizando o texto personalizado
				this.atualizarCobrancaAcaoTextoPersonalizado(idCobrancaAcao, cobrancaAcaoHelper.getTextoPersonalizado());
			}
		}
		

		return idCobrancaAcao;

	}

	/**
	 * [UC0701] Informar Índices dos Acréscimos de Impontualidade
	 * 
	 * @author Sávio Luiz
	 * @created 26/09/2007
	 * @throws ErroRepositorioException
	 */
	public Integer pesquisarMaximoAnoMesIndicesAcerscimosImpontualidade()
			throws ControladorException {
		try {
			// chama o metódo de pesquisar do repositório
			return repositorioCobranca
					.pesquisarMaximoAnoMesIndicesAcerscimosImpontualidade();

			// erro no hibernate
		} catch (ErroRepositorioException ex) {
			// seta o rollback
			sessionContext.setRollbackOnly();

			// levanta a exceção para a próxima camada
			throw new ControladorException("erro.sistema", ex);
		}

	}

	/**
	 * [UC0214] Efetuar Parcelamento Debito
	 * 
	 * @author Vivianne Sousa
	 * @created 18/09/2007
	 * 
	 * @param idImovel
	 * @return
	 * @throws ErroRepositorioException
	 */
	public BigDecimal obterDescontoTarifaSocial(Integer idImovel,
			Integer anoMesInicialReferenciaDebito,
			Integer anoMesFinalReferenciaDebito,
			ParcelamentoPerfil parcelamentoPerfil,
			Integer indicadorContasRevisao) throws ControladorException {

		BigDecimal retorno = BigDecimal.ZERO;

		if (anoMesFinalReferenciaDebito
				.compareTo(anoMesInicialReferenciaDebito) < 0) {
			anoMesFinalReferenciaDebito = anoMesInicialReferenciaDebito;
		}

		SistemaParametro sistemaParametro = getControladorUtil()
				.pesquisarParametrosDoSistema();

		Collection colecaoContas = getControladorFaturamento()
				.pesquisarContasAtualizacaoTarifaria(idImovel,
						anoMesInicialReferenciaDebito,
						anoMesFinalReferenciaDebito,
						Util.converteStringParaDate("01/01/0001"), // Inicio Vencimento
						Util.converteStringParaDate("31/12/9999"), // Final Vencimento
						indicadorContasRevisao);

		if (colecaoContas != null && !colecaoContas.isEmpty()) {

			Iterator iter = colecaoContas.iterator();
			while (iter.hasNext()) {
				Conta conta = (Conta) iter.next();

				retorno = retorno.add(calcularValorAtualizacaoTarifaSocial(
						sistemaParametro, conta));
			}
		}

		return retorno;

	}

	/**
	 * [UC0214] Efetuar Parcelamento Debito
	 * 
	 * @author Vivianne Sousa
	 * @created 18/09/2007
	 * 
	 * @param idImovel
	 * @return
	 * @throws ErroRepositorioException
	 */
	public BigDecimal calcularValorAtualizacaoTarifaSocial(
			SistemaParametro sistemaParametro, Conta conta)
			throws ControladorException {

		BigDecimal valorAtualizacaoMonetaria = new BigDecimal("0.00");

		Imovel imovel = conta.getImovel();
		ConsumoTarifa consumoTarifa = new ConsumoTarifa();
		consumoTarifa.setId(ConsumoTarifa.CONSUMO_SOCIAL);
		imovel.setConsumoTarifa(consumoTarifa);

		// [UC0105] - Obter Consumo Mínimo da Ligação
		Integer consumoMinimoLigacao = getControladorMicromedicao()
				.obterConsumoMinimoLigacao(imovel, null);

		// [UC0108] - Obter Quantidade de Economias por Categoria
		Collection colecaoCategorias = getControladorImovel()
				.obterQuantidadeEconomiasCategoria(imovel);

		Integer anoMesReferencia = sistemaParametro.getAnoMesFaturamento();

		// Data de Leitura Anterior
		Integer anoMesReferenciaAnterior = Util.subtrairMesDoAnoMes(
				anoMesReferencia, 1);

		Date dataLeituraAnterior = null;
		try {

			dataLeituraAnterior = (Date) this.repositorioFaturamento
					.pesquisarFaturamentoAtividadeCronogramaDataRealizacao(
							imovel.getQuadra().getRota().getFaturamentoGrupo()
									.getId(),
							FaturamentoAtividade.EFETUAR_LEITURA,
							anoMesReferenciaAnterior);

		} catch (ErroRepositorioException ex) {
			sessionContext.setRollbackOnly();
			throw new ControladorException("erro.sistema", ex);
		}

		// Data de Leitura Atual
		Date dataLeituraAtual = null;
		try {

			dataLeituraAtual = (Date) this.repositorioFaturamento
					.pesquisarFaturamentoAtividadeCronogramaDataRealizacao(
							imovel.getQuadra().getRota().getFaturamentoGrupo()
									.getId(),
							FaturamentoAtividade.EFETUAR_LEITURA,
							anoMesReferencia);

		} catch (ErroRepositorioException ex) {
			sessionContext.setRollbackOnly();
			throw new ControladorException("erro.sistema", ex);
		}

		/*
		 * Caso NÃO existe cronograma para o anoMes informado
		 */

		if (dataLeituraAnterior == null || dataLeituraAtual == null) {

			int mesConta = Util.obterMes(anoMesReferencia);
			int anoConta = Util.obterAno(anoMesReferencia);

			int ultimoDiaMes = new Integer(Util.obterUltimoDiaMes(mesConta,
					anoConta));

			dataLeituraAtual = Util.criarData(ultimoDiaMes, mesConta, anoConta);

			dataLeituraAnterior = Util.criarData(1, mesConta, anoConta);
		}

		BigDecimal percentualEsgoto = new BigDecimal(0);
		if (conta.getLigacaoEsgotoSituacao().getId().equals(
				LigacaoEsgotoSituacao.LIGADO)) {
			percentualEsgoto = conta.getPercentualEsgoto();
		}

		// Valores de água e esgoto que estão na conta (VALOR ANTIGO)
		BigDecimal valorAguaEsgotoAnterior = new BigDecimal(0);

		if (conta.getValorAgua() != null) {
			valorAguaEsgotoAnterior = valorAguaEsgotoAnterior.add(conta
					.getValorAgua());
		}

		if (conta.getValorEsgoto() != null) {
			valorAguaEsgotoAnterior = valorAguaEsgotoAnterior.add(conta
					.getValorEsgoto());
		}

		// Valores de água e esgoto (VALOR ATUAL)
		BigDecimal valorAguaEsgotoAtual = new BigDecimal(0);

		// [UC0120] - Calcular Valores de Água e/ou Esgoto
		Collection<CalcularValoresAguaEsgotoHelper> colecaoCalcularValoresAguaEsgotoHelper = this
				.getControladorFaturamento().calcularValoresAguaEsgoto(
						anoMesReferencia,
						conta.getLigacaoAguaSituacao().getId(),
						conta.getLigacaoEsgotoSituacao().getId(),
						new Short("1"), new Short("1"), colecaoCategorias,
						conta.getConsumoAgua(), conta.getConsumoEsgoto(),
						consumoMinimoLigacao, dataLeituraAnterior,
						dataLeituraAtual, percentualEsgoto,
						ConsumoTarifa.CONSUMO_SOCIAL, null, null, getControladorFaturamento().pesquisarDataLigacaoEsgoto(imovel));

		if (colecaoCalcularValoresAguaEsgotoHelper != null
				&& !colecaoCalcularValoresAguaEsgotoHelper.isEmpty()) {

			CalcularValoresAguaEsgotoHelper valoresAguaEsgoto = null;

			if (colecaoCalcularValoresAguaEsgotoHelper.size() > 1) {

				Iterator itAguaEsgoto = colecaoCalcularValoresAguaEsgotoHelper
						.iterator();

				while (itAguaEsgoto.hasNext()) {

					valoresAguaEsgoto = (CalcularValoresAguaEsgotoHelper) itAguaEsgoto
							.next();

					if (valoresAguaEsgoto.getValorFaturadoAguaCategoria() != null) {
						valorAguaEsgotoAtual = valorAguaEsgotoAtual
								.add(valoresAguaEsgoto
										.getValorFaturadoAguaCategoria());
					}

					if (valoresAguaEsgoto.getValorFaturadoEsgotoCategoria() != null) {
						valorAguaEsgotoAtual = valorAguaEsgotoAtual
								.add(valoresAguaEsgoto
										.getValorFaturadoEsgotoCategoria());
					}
				}
			} else {

				valoresAguaEsgoto = (CalcularValoresAguaEsgotoHelper) Util
						.retonarObjetoDeColecao(colecaoCalcularValoresAguaEsgotoHelper);

				if (valoresAguaEsgoto.getValorFaturadoAguaCategoria() != null) {
					valorAguaEsgotoAtual = valorAguaEsgotoAtual
							.add(valoresAguaEsgoto
									.getValorFaturadoAguaCategoria());
				}

				if (valoresAguaEsgoto.getValorFaturadoEsgotoCategoria() != null) {
					valorAguaEsgotoAtual = valorAguaEsgotoAtual
							.add(valoresAguaEsgoto
									.getValorFaturadoEsgotoCategoria());
				}
			}

			valorAtualizacaoMonetaria = valorAguaEsgotoAnterior
					.subtract(valorAguaEsgotoAtual);

			if (valorAtualizacaoMonetaria.compareTo(new BigDecimal(0)) == -1) {
				valorAtualizacaoMonetaria = new BigDecimal(0);
			}
		}

		return valorAtualizacaoMonetaria;
	}

	/**
	 * [UC0214] Efetuar Parcelamento Debito
	 * 
	 * @author Vivianne Sousa
	 * @created 20/09/2007
	 * 
	 * @param idImovel
	 * @param anoMesInicialReferenciaDebito
	 * @param anoMesFinalReferenciaDebito
	 * @return
	 * @throws ErroRepositorioException
	 */
	public BigDecimal pesquisarValorDebitoCobradoSancoes(Integer idImovel,
			Integer anoMesInicialReferenciaDebito,
			Integer anoMesFinalReferenciaDebito, int indicadorDividaAtiva) throws ControladorException {

		try {

			if (anoMesFinalReferenciaDebito
					.compareTo(anoMesInicialReferenciaDebito) < 0) {
				anoMesFinalReferenciaDebito = anoMesInicialReferenciaDebito;
			}

			// chama o metódo de pesquisar do repositório
			return repositorioCobranca.pesquisarValorDebitoCobradoSancoes(
					idImovel, anoMesInicialReferenciaDebito,
					anoMesFinalReferenciaDebito, indicadorDividaAtiva);

			// erro no hibernate
		} catch (ErroRepositorioException ex) {
			// seta o rollback
			sessionContext.setRollbackOnly();

			// levanta a exceção para a próxima camada
			throw new ControladorException("erro.sistema", ex);
		}

	}

	/**
	 * Retorna uma colecao de Debitos por Faixa de Valores dos Imoveis
	 * 
	 * @author Ivan Sergio
	 * @created 20/09/2007
	 * 
	 * @param idImovel
	 * @return
	 * @throws ErroRepositorioException
	 */
	public Collection pesquisarDebitoImovelPorFaixaValores(
			Collection colecaoIdImoveis, String valorMinimoDebito,
			String anoMesReferenciaInicial, String anoMesReferenciaFinal,
			String classificacao, boolean pesquisaMunicipio) throws ControladorException {

		Collection colecaoImoveisFaixaValores = null;
		Integer posIni = 0;
		Integer posFinal = 0;
		Integer qtdRegistros = 500;
		boolean terminou = false;
		Collection retorno = null;
		List listaImoveis = (List) colecaoIdImoveis;
		List registrosPesquisa = null;
		CurvaAbcDebitosHelper curvaAbc = null;
		
		try {
			if (listaImoveis != null && !listaImoveis.isEmpty()) {
				colecaoImoveisFaixaValores = new ArrayList();
				
				while (!terminou) {
					String imovel = "";
					
					if (listaImoveis.size() > qtdRegistros && listaImoveis.size() > (posFinal + qtdRegistros)) {
						posFinal += qtdRegistros;
					}else {
						posFinal = listaImoveis.size();
						terminou = true;
					}
					
					registrosPesquisa = listaImoveis.subList(posIni, posFinal);
					
					for(int i=0; i < registrosPesquisa.size(); i++)
						imovel += registrosPesquisa.get(i).toString() + ",";
					
					// Retira a ultima virgula da lista
					imovel = imovel.substring(0, (imovel.length() - 1));
	
					retorno = repositorioCobranca.pesquisarDebitoImovelPorFaixaValores(
							imovel, valorMinimoDebito, anoMesReferenciaInicial,
							anoMesReferenciaFinal, classificacao, pesquisaMunicipio);
					
					Iterator iRetorno = retorno.iterator();
					
					while (iRetorno.hasNext()) {
						Object[] colecaoRetorno = (Object[]) iRetorno.next();
						curvaAbc = new CurvaAbcDebitosHelper();
						curvaAbc.setFaixaInicial((BigDecimal) colecaoRetorno[0]);
						curvaAbc.setFaixaFinal((BigDecimal) colecaoRetorno[1]);
						curvaAbc.setIdFaixa((Integer) colecaoRetorno[2]);
						curvaAbc.setQuantidadeLigacoes((Integer) colecaoRetorno[3]);
						curvaAbc.setTotal((BigDecimal) colecaoRetorno[4]);
						curvaAbc.setQtdeDocumentos((Integer) colecaoRetorno[5]);
						curvaAbc.setIdGerencia((Integer) colecaoRetorno[6]);
						curvaAbc.setNomeGerencia((String) colecaoRetorno[7]);
						curvaAbc.setIdLocalidade((Integer) colecaoRetorno[8]);
						curvaAbc.setNomeLocalidade((String) colecaoRetorno[9]);
						curvaAbc.setIdSetor((Integer) colecaoRetorno[10]);
						curvaAbc.setCodigoSetor((Integer) colecaoRetorno[11]);
						curvaAbc.setNomeSetor((String) colecaoRetorno[12]);
						curvaAbc.setIdMunicipio((Integer) colecaoRetorno[13]);
						curvaAbc.setNomeMunicipio((String) colecaoRetorno[14]);
						if(!colecaoImoveisFaixaValores.contains(curvaAbc)){
							colecaoImoveisFaixaValores.add(curvaAbc);
						}
					}
					
					posIni = posFinal + 1;
				}
			}

			
			/*
			if (colecaoIdImoveis != null & !colecaoIdImoveis.isEmpty()) {
				Iterator icolecaoImoveis = colecaoIdImoveis.iterator();

				while (icolecaoImoveis.hasNext()) {
					imovel += ((Integer) icolecaoImoveis.next()).toString()
							+ ",";
				}

				// Retira a ultima virgula da lista

				imovel = imovel.substring(0, (imovel.length() - 1));

				colecaoImoveisFaixaValores = repositorioCobranca
						.pesquisarDebitoImovelPorFaixaValores(imovel,
								valorMinimoDebito, anoMesReferenciaInicial,
								anoMesReferenciaFinal, classificacao);

			}
			*/
		

		} catch (ErroRepositorioException e) {
			//sessionContext.setRollbackOnly();
			throw new ControladorException("erro.sistema", e);
		}

		return colecaoImoveisFaixaValores;
	}

	/**
	 * [UC0644] Filtrar Ação de Cobrança
	 * 
	 * @author Sávio Luiz
	 * @created 10/10/2007
	 * 
	 * @param idImovel
	 * @return
	 * @throws ErroRepositorioException
	 */
	public FiltroCobrancaAcao filtrarAcaoCobranca(String descricaoAcaoCobranca,
			String numeroDiasValidade, String idAcaoPredecessora,
			String numeroDiasEntreAcoes, String idTipoDocumentoGerado,
			String idSituacaoLigacaoAgua, String idSituacaoLigacaoEsgoto,
			String idCobrancaCriterio, String descricaoCobrancaCriterio,
			String idServicoTipo, String descricaoServicoTipo,
			String ordemCronograma, String icCompoeCronograma,
			String icAcaoObrigatoria, String icRepetidaCiclo,
			String icSuspensaoAbastecimento, String icDebitosACobrar,
			String icAcrescimosImpontualidade, String icGeraTaxa,
			String icEmitirBoletimCadastro, String icImoveisSemDebitos,
			String icMetasCronograma, String icOrdenamentoCronograma,
			String icOrdenamentoEventual, String icDebitoInterfereAcao,
			String numeroDiasRemuneracaoTerceiro,
			String icUso,
			String icCreditosARealizar, String icNotasPromissoria, 
			String icEfetuarAcaoCpfCnpjValido) throws ControladorException {

		FiltroCobrancaAcao filtroCobrancaAcao = new FiltroCobrancaAcao();

		boolean peloMenosUmParametroInformado = false;

		// verifica a existencia da descrição da ação de cobrança
		if (descricaoAcaoCobranca != null && !descricaoAcaoCobranca.equals("")) {
			filtroCobrancaAcao.adicionarParametro(new ComparacaoTexto(
					FiltroCobrancaAcao.DESCRICAO, descricaoAcaoCobranca));
			peloMenosUmParametroInformado = true;
		}

		// verifica a existencia do numero de dias de validade da ação
		if (numeroDiasValidade != null && !numeroDiasValidade.equals("")) {
			filtroCobrancaAcao
					.adicionarParametro(new ComparacaoTexto(
							FiltroCobrancaAcao.NUMERO_DIAS_VALIDADE,
							numeroDiasValidade));
			peloMenosUmParametroInformado = true;
		}

		// verifica a existencia da ação predecessora
		if (idAcaoPredecessora != null && !idAcaoPredecessora.equals("")) {

			filtroCobrancaAcao.adicionarParametro(new ParametroSimples(
					FiltroCobrancaAcao.COBRANCA_ACAO_PRECEDENTE_ID,
					idAcaoPredecessora));
			peloMenosUmParametroInformado = true;
		}

		// verifica a existencia do numero de dias entre a ação e sua
		// predecessora
		if (numeroDiasEntreAcoes != null && !numeroDiasEntreAcoes.equals("")) {
			filtroCobrancaAcao.adicionarParametro(new ParametroSimples(
					FiltroCobrancaAcao.NUMERO_DIAS_MINIMO_ACAO_PRECEDENTE,
					numeroDiasEntreAcoes));
			peloMenosUmParametroInformado = true;
		}

		// verifica a existencia do tipo do documento a ser gerado
		if (idTipoDocumentoGerado != null && !idTipoDocumentoGerado.equals("")) {
			filtroCobrancaAcao
					.adicionarParametro(new ParametroSimples(
							FiltroCobrancaAcao.DOCUMENTO_TIPO_ID,
							idTipoDocumentoGerado));
			peloMenosUmParametroInformado = true;
		}

		// verifica a existencia da situação da ligação de agua
		if (idSituacaoLigacaoAgua != null && !idSituacaoLigacaoAgua.equals("")) {
			filtroCobrancaAcao.adicionarParametro(new ParametroSimples(
					FiltroCobrancaAcao.LIGACAO_AGUA_SITUACAO_ID,
					idSituacaoLigacaoAgua));
			peloMenosUmParametroInformado = true;
		}

		// verifica a existencia da situação da ligação de esgoto
		if (idSituacaoLigacaoEsgoto != null
				&& !idSituacaoLigacaoEsgoto.equals("")) {
			filtroCobrancaAcao.adicionarParametro(new ParametroSimples(
					FiltroCobrancaAcao.LIGACAO_ESGOTO_SITUACAO_ID,
					idSituacaoLigacaoEsgoto));
			peloMenosUmParametroInformado = true;
		}

		// pesquisa enter de critério de cobrança
		if (idCobrancaCriterio != null && !idCobrancaCriterio.equals("")) {
			if (descricaoCobrancaCriterio == null
					|| descricaoCobrancaCriterio.equals("")) {

				FiltroCobrancaCriterio filtroCobrancaCriterio = new FiltroCobrancaCriterio();
				filtroCobrancaCriterio.adicionarParametro(new ParametroSimples(
						FiltroCobrancaCriterio.ID, new Integer(
								idCobrancaCriterio)));
				filtroCobrancaCriterio
						.setCampoOrderBy(FiltroCobrancaCriterio.DESCRICAO_COBRANCA_CRITERIO);
				Collection colecaoCobrancaCriterio = getControladorUtil()
						.pesquisar(filtroCobrancaCriterio,
								CobrancaCriterio.class.getName());

				if (colecaoCobrancaCriterio != null
						&& !colecaoCobrancaCriterio.isEmpty()) {
					filtroCobrancaAcao.adicionarParametro(new ParametroSimples(
							FiltroCobrancaAcao.COBRANCAO_CRITERIO_ID,
							idCobrancaCriterio));
					peloMenosUmParametroInformado = true;
				} else {
					// levanta a exceção para a próxima camada
					throw new ControladorException(
							"atencao.pesquisa_inexistente", null,
							"Critério de Cobrança");
				}
			} else {
				filtroCobrancaAcao.adicionarParametro(new ParametroSimples(
						FiltroCobrancaAcao.COBRANCAO_CRITERIO_ID,
						idCobrancaCriterio));
				peloMenosUmParametroInformado = true;
			}

		}

		// pesquisa enter de critério de cobrança
		if (idServicoTipo != null && !idServicoTipo.equals("")) {
			if (descricaoServicoTipo == null || descricaoServicoTipo.equals("")) {

				FiltroServicoTipo filtroServicoTipo = new FiltroServicoTipo();
				filtroServicoTipo.adicionarParametro(new ParametroSimples(
						FiltroServicoTipo.ID, new Integer(idServicoTipo)));
				filtroServicoTipo.setCampoOrderBy(FiltroServicoTipo.DESCRICAO);
				Collection colecaoServicoTipo = getControladorUtil().pesquisar(
						filtroServicoTipo, ServicoTipo.class.getName());

				if (colecaoServicoTipo != null && !colecaoServicoTipo.isEmpty()) {
					filtroCobrancaAcao.adicionarParametro(new ParametroSimples(
							FiltroCobrancaAcao.SERVICO_TIPO_ID_ACAO_COBRANCA,
							idServicoTipo));
					peloMenosUmParametroInformado = true;
				} else {
					// levanta a exceção para a próxima camada
					throw new ControladorException(
							"atencao.pesquisa_inexistente", null,
							"Tipo de serviço");
				}
			} else {
				filtroCobrancaAcao.adicionarParametro(new ParametroSimples(
						FiltroCobrancaAcao.SERVICO_TIPO_ID_ACAO_COBRANCA,
						idServicoTipo));
				peloMenosUmParametroInformado = true;
			}

		}

		// verifica a existencia da ordem do cronograma
		if (ordemCronograma != null && !ordemCronograma.equals("")) {
			filtroCobrancaAcao.adicionarParametro(new ParametroSimples(
					FiltroCobrancaAcao.ORDEM_REALIZACAO, ordemCronograma));
			peloMenosUmParametroInformado = true;
		}

		// verifica a existencia do indicador de compõe o cronograma
		if (icCompoeCronograma != null && !icCompoeCronograma.equals("")) {
			filtroCobrancaAcao
					.adicionarParametro(new ParametroSimples(
							FiltroCobrancaAcao.INDICADOR_CRONOGRAMA,
							icCompoeCronograma));
			peloMenosUmParametroInformado = true;
		}

		// verifica a existencia do indicador de ação Obrigatória
		if (icAcaoObrigatoria != null && !icAcaoObrigatoria.equals("")) {
			filtroCobrancaAcao.adicionarParametro(new ParametroSimples(
					FiltroCobrancaAcao.INDICADOR_OBRIGATORIEDADE,
					icAcaoObrigatoria));
			peloMenosUmParametroInformado = true;
		}

		// verifica a existencia do indicador de repetição
		if (icRepetidaCiclo != null && !icRepetidaCiclo.equals("")) {
			filtroCobrancaAcao.adicionarParametro(new ParametroSimples(
					FiltroCobrancaAcao.INDICADOR_REPETICAO, icRepetidaCiclo));
			peloMenosUmParametroInformado = true;
		}

		// verifica a existencia do indicador de suspensão de abastecimento
		if (icSuspensaoAbastecimento != null
				&& !icSuspensaoAbastecimento.equals("")) {
			filtroCobrancaAcao.adicionarParametro(new ParametroSimples(
					FiltroCobrancaAcao.INDICADOR_SUSPENSAO_ABASTECIMENTO,
					icSuspensaoAbastecimento));
			peloMenosUmParametroInformado = true;
		}

		// verifica a existencia do indicador de cobrança deb a cobrar
		if (icDebitosACobrar != null && !icDebitosACobrar.equals("")) {
			filtroCobrancaAcao.adicionarParametro(new ParametroSimples(
					FiltroCobrancaAcao.INDICADOR_COBRANCA_DEB_A_COBRAR,
					icDebitosACobrar));
			peloMenosUmParametroInformado = true;
		}

		// verifica a existencia do indicador de acrescimos por impontualidade
		if (icAcrescimosImpontualidade != null
				&& !icAcrescimosImpontualidade.equals("")) {
			filtroCobrancaAcao.adicionarParametro(new ParametroSimples(
					FiltroCobrancaAcao.INDICADOR_ACRESCIMO_IMPONTUALIDADE,
					icAcrescimosImpontualidade));
			peloMenosUmParametroInformado = true;
		}

		// verifica a existencia do indicador de geração de taxa
		if (icGeraTaxa != null && !icGeraTaxa.equals("")) {
			filtroCobrancaAcao.adicionarParametro(new ParametroSimples(
					FiltroCobrancaAcao.INDICADOR_GERACAO_TAXA, icGeraTaxa));
			peloMenosUmParametroInformado = true;
		}

		// verifica a existencia do indicador de emitir boletim de cadastro
		if (icEmitirBoletimCadastro != null
				&& !icEmitirBoletimCadastro.equals("")) {
			filtroCobrancaAcao.adicionarParametro(new ParametroSimples(
					FiltroCobrancaAcao.INDICADOR_BOLETIM,
					icEmitirBoletimCadastro));
			peloMenosUmParametroInformado = true;
		}

		// verifica a existencia do indicador de compõe o cronograma
		if (icImoveisSemDebitos != null && !icImoveisSemDebitos.equals("")) {
			filtroCobrancaAcao.adicionarParametro(new ParametroSimples(
					FiltroCobrancaAcao.INDICADOR_DEBITO, icImoveisSemDebitos));
			peloMenosUmParametroInformado = true;
		}
		
		//verifica a existencia do indicador de Metas no Cronograma
		if (icMetasCronograma != null && !icMetasCronograma.equals("")) {
			filtroCobrancaAcao.adicionarParametro(new ParametroSimples(
					FiltroCobrancaAcao.INDICADOR_METAS_CRONOGRAMA, icMetasCronograma));
			peloMenosUmParametroInformado = true;
		}
		
        //verifica a existencia do indicador de Ordenamento no Cronograma
		if (icOrdenamentoCronograma != null && !icOrdenamentoCronograma.equals("")) {
			filtroCobrancaAcao.adicionarParametro(new ParametroSimples(
					FiltroCobrancaAcao.INDICADOR_ORDENAMENTO_CRONOGRAMA, icOrdenamentoCronograma));
			peloMenosUmParametroInformado = true;
		}
		
		 //verifica a existencia do indicador de Ordenamento nas Eventuais
		if (icOrdenamentoEventual != null && !icOrdenamentoEventual.equals("")) {
			filtroCobrancaAcao.adicionarParametro(new ParametroSimples(
					FiltroCobrancaAcao.INDICADOR_ORDENAMENTO_EVENTUAL, icOrdenamentoEventual));
			peloMenosUmParametroInformado = true;
		}
		
		 //verifica a existencia do indicador de Situação de Débito Interfere na Situação da Ação
		if (icDebitoInterfereAcao != null && !icDebitoInterfereAcao.equals("")) {
			filtroCobrancaAcao.adicionarParametro(new ParametroSimples(
					FiltroCobrancaAcao.INDICADOR_DEBITO_INTERFERE_ACAO, icDebitoInterfereAcao));
			peloMenosUmParametroInformado = true;
		}
		
		 //verifica a existencia do Limite de Dias para Remuneração de Terceiros
		if (numeroDiasRemuneracaoTerceiro != null && !numeroDiasRemuneracaoTerceiro.equals("")) {
			filtroCobrancaAcao.adicionarParametro(new ParametroSimples(
					FiltroCobrancaAcao.NUMERO_DIAS_REMUNERACAO_TERCEIRO, numeroDiasRemuneracaoTerceiro));
			peloMenosUmParametroInformado = true;
		}

		if ((icUso != null && !icUso.equals(""
				+ ConstantesSistema.NUMERO_NAO_INFORMADO))
				&& (!icUso.equals("3"))) {

			filtroCobrancaAcao.adicionarParametro(new ParametroSimples(
					FiltroCobrancaAcao.INDICADOR_USO, icUso));
			peloMenosUmParametroInformado = true;
		}
		
		if(icCreditosARealizar != null && !icCreditosARealizar.equals("")) {
			filtroCobrancaAcao.adicionarParametro(new ParametroSimples(
					FiltroCobrancaAcao.INDICADOR_CREDITO_A_REALIZAR,
					icCreditosARealizar));
			peloMenosUmParametroInformado = true;
		}
		
		if(icNotasPromissoria != null && !icNotasPromissoria.equals("")) {
			filtroCobrancaAcao.adicionarParametro(new ParametroSimples(
					FiltroCobrancaAcao.INDICADOR_NOTAS_PROMISSORIA,
					icNotasPromissoria));
			peloMenosUmParametroInformado = true;
		}

		if(icEfetuarAcaoCpfCnpjValido != null && !icEfetuarAcaoCpfCnpjValido.equals("")) {
			filtroCobrancaAcao.adicionarParametro(new ParametroSimples(
					FiltroCobrancaAcao.INDICADOR_EFETUAR_ACAO_CPF_CNPJ_VALIDO,
					icEfetuarAcaoCpfCnpjValido));
			peloMenosUmParametroInformado = true;
		}
		
		// Erro caso o usuário mandou filtrar sem nenhum parâmetro
		if (!peloMenosUmParametroInformado) {
			throw new ControladorException(
					"atencao.filtro.nenhum_parametro_informado");
		}

		return filtroCobrancaAcao;

	}

//	Flávio Cordeiro
//	caso de uso [UC0543] Associar Conjunto de Rotas a Criterio de Cobranca
	public Collection pesquisarRotasIntervaloUnidadeNegocio(String idUnidadeNegocio,
			String idCobrancaAcao) 
			throws ControladorException{
		
		Collection retorno = null;
		
		try {
			retorno = repositorioCobranca.pesquisarRotasIntervaloUnidadeNegocio(idUnidadeNegocio, idCobrancaAcao);
		} catch (ErroRepositorioException e) {
			e.printStackTrace();
		}
		
		return retorno;
		
	}
	
//	caso de uso [UC0543] Associar Conjunto de Rotas a Criterio de Cobranca
	public Collection pesquisarRotasIntervaloGrupo(String idGrupoCobranca,
			String idCobrancaAcao) 
			throws ControladorException{
		
		Collection retorno = null;
		
		try {
			retorno = repositorioCobranca.pesquisarRotasIntervaloGrupo(idGrupoCobranca, idCobrancaAcao);
		} catch (ErroRepositorioException e) {
			e.printStackTrace();
		}
		
		return retorno;
		
	}
	
	//Flávio Cordeiro
//	caso de uso [UC0543] Associar Conjunto de Rotas a Criterio de Cobranca
	public Collection pesquisarRotasIntervaloGerencia(String idGerenciaRegional,
			String idCobrancaAcao) 
			throws ControladorException{
		
		Collection retorno = null;
		
		try {
			retorno = repositorioCobranca.pesquisarRotasIntervaloGerencia(idGerenciaRegional, idCobrancaAcao);
		} catch (ErroRepositorioException e) {
			e.printStackTrace();
		}
		
		return retorno;
		
	}
	
	//Flávio Cordeiro
//	caso de uso [UC0543] Associar Conjunto de Rotas a Criterio de Cobranca
	public Collection pesquisarRotasIntervaloLocalidade(String idLocalidadeInicial, 
			String idLocalidadeFinal, String idCobrancaAcao) 
			throws ControladorException{
		
		Collection retorno = null;
		
		try {
			retorno = repositorioCobranca.pesquisarRotasIntervaloLocalidade(idLocalidadeInicial, idLocalidadeFinal,idCobrancaAcao);
		} catch (ErroRepositorioException e) {
			e.printStackTrace();
		}
		
		return retorno;
		
	}
	
	//Flávio Cordeiro
//	caso de uso [UC0543] Associar Conjunto de Rotas a Criterio de Cobranca
	public Collection pesquisarRotasIntervaloSetor(String codigoSetorComercialInicial, 
			String codigoSetorComercialFinal, String idLocalidade,
			String idCobrancaAcao) 
			throws ControladorException{
		
		Collection retorno = null;
		
		try {
			retorno = repositorioCobranca.pesquisarRotasIntervaloSetor(codigoSetorComercialInicial,
					codigoSetorComercialFinal,idLocalidade, idCobrancaAcao);
		} catch (ErroRepositorioException e) {
			e.printStackTrace();
		}
		
		return retorno;
		
	}
	
	//Flávio Cordeiro
//	caso de uso [UC0543] Associar Conjunto de Rotas a Criterio de Cobranca
	public Collection pesquisarRotas(String codigoSetorComercial, 
			String rotaInicial, String rotaFinal, String idLocalidade,
			String idCobrancaAcao) 
			throws ControladorException{
		
		Collection retorno = null;
		
		try {
			retorno = repositorioCobranca.pesquisarRotas(codigoSetorComercial,rotaInicial, 
					rotaFinal,idLocalidade,idCobrancaAcao);
		} catch (ErroRepositorioException e) {
			e.printStackTrace();
		}
		
		return retorno;
		
	}
	
//	caso de uso [UC0543] Associar Conjunto de Rotas a Criterio de Cobranca
	public Collection pesquisarRotasPorCobrancaAcao(String idCobrancaAcao) 
			throws ControladorException{
		
		Collection retorno = null;
		
		try {
			retorno = repositorioCobranca.pesquisarRotasPorCobrancaAcao(idCobrancaAcao);
		} catch (ErroRepositorioException e) {
			e.printStackTrace();
		}
		
		return retorno;
		
	}
	
	/**
	 * [UC0645] Manter Ação de Cobrança
	 * 
	 * @author Sávio Luiz
	 * @created 06/11/2007
	 * 
	 * @param idImovel
	 * @return
	 * @throws ErroRepositorioException 
	 * @throws ErroRepositorioException
	 */
	public void atualizarAcaoCobranca(CobrancaAcao cobrancaAcao,CobrancaAcaoHelper cobrancaAcaoHelper)
			throws ControladorException, ErroRepositorioException {

		// verifica a existencia da descrição da ação de cobrança
		if (cobrancaAcaoHelper.getDescricaoCobrancaAcao() != null && !cobrancaAcaoHelper.getDescricaoCobrancaAcao().equals("")) {
			cobrancaAcao.setDescricaoCobrancaAcao(cobrancaAcaoHelper.getDescricaoCobrancaAcao());
		} else {
			// levanta a exceção para a próxima camada
			throw new ControladorException("atencao.required", null,
					"Descrição da Ação de Cobrança");
		}

		// verifica a existencia do numero de dias de validade da ação
		if (cobrancaAcaoHelper.getNumeroDiasValidade() != null && !cobrancaAcaoHelper.getNumeroDiasValidade().equals("")) {
			cobrancaAcao.setNumeroDiasValidade(new Short(cobrancaAcaoHelper.getNumeroDiasValidade()));
		} else {
			// levanta a exceção para a próxima camada
			throw new ControladorException("atencao.required", null,
					"Numero de Dias de Validade da Ação");
		}
		
		// verifica a existencia da ordem do cronograma
		if (cobrancaAcaoHelper.getOrdemRealizacao() != null && !cobrancaAcaoHelper.getOrdemRealizacao().equals("")) {
			// [FS0002] - Verificar existência de ação com mesma ordem
			FiltroCobrancaAcao filtroCobrancaAcao = new FiltroCobrancaAcao();
			filtroCobrancaAcao.adicionarParametro(new ParametroSimples(
					FiltroCobrancaAcao.ORDEM_REALIZACAO, cobrancaAcaoHelper.getOrdemRealizacao()));
			filtroCobrancaAcao.adicionarParametro(new ParametroSimplesDiferenteDe(
					FiltroCobrancaAcao.ID, cobrancaAcao.getId()));

			Collection colecaoCobarncaAcao = getControladorUtil().pesquisar(
					filtroCobrancaAcao, CobrancaAcao.class.getName());

			if (colecaoCobarncaAcao != null && !colecaoCobarncaAcao.isEmpty()) {
				CobrancaAcao cobAcao = (CobrancaAcao) Util
						.retonarObjetoDeColecao(colecaoCobarncaAcao);
				// // levanta a exceção para a próxima camada
				throw new ControladorException(
						"atencao.acao_cobranca_mesma_ordem", null, ""
								+ cobAcao.getDescricaoCobrancaAcao());
			} else {
				cobrancaAcao.setOrdemRealizacao(new Short(cobrancaAcaoHelper.getOrdemRealizacao()));
			}

		}

		// verifica a existencia da ação predecessora
		
		if (cobrancaAcaoHelper.getIdCobrancaAcaoPredecessora() != null && !cobrancaAcaoHelper.getIdCobrancaAcaoPredecessora().equals("")) {

			// [FS0008] - Verificar se o numero da ordem é menor que o da
			// predecessora
			FiltroCobrancaAcao filtroCobrancaAcao = new FiltroCobrancaAcao();
			filtroCobrancaAcao.adicionarParametro(new ParametroSimples(
					FiltroCobrancaAcao.ID, cobrancaAcaoHelper.getIdCobrancaAcaoPredecessora()));

			Collection colecaoCobarncaAcaoPredecessora = getControladorUtil()
					.pesquisar(filtroCobrancaAcao, CobrancaAcao.class.getName());

			if (colecaoCobarncaAcaoPredecessora != null && !colecaoCobarncaAcaoPredecessora.isEmpty()) {
				CobrancaAcao cobrancaAcaoPredecessoraPesquisa = null;
				
				cobrancaAcaoPredecessoraPesquisa = 
					(CobrancaAcao) Util.retonarObjetoDeColecao(colecaoCobarncaAcaoPredecessora);
				
				if (cobrancaAcaoPredecessoraPesquisa.getOrdemRealizacao() != null && 
						cobrancaAcaoPredecessoraPesquisa.getOrdemRealizacao() >= new Short(cobrancaAcaoHelper.getOrdemRealizacao())) {

					// levanta a exceção para a próxima camada
					throw new ControladorException("atencao.acao_cobranca_ordem_realizacao_predecessora");

				}

			}
			CobrancaAcao cobrancaAcaoPredecessora = new CobrancaAcao();
			cobrancaAcaoPredecessora.setId(new Integer(cobrancaAcaoHelper.getIdCobrancaAcaoPredecessora()));
			
			cobrancaAcao.setCobrancaAcaoPredecessora(cobrancaAcaoPredecessora);
		} else {
			cobrancaAcao.setCobrancaAcaoPredecessora(null);
		}

		// verifica a existencia do numero de dias entre a ação e sua
		// predecessora
		if (cobrancaAcaoHelper.getNumeroDiasMinimoAcaoPrecedente() != null && !cobrancaAcaoHelper.getNumeroDiasMinimoAcaoPrecedente().equals("")) {
			cobrancaAcao.setNumeroDiasMinimoAcaoPrecedente(new Short(
					cobrancaAcaoHelper.getNumeroDiasMinimoAcaoPrecedente()));
		} else {
			cobrancaAcao.setNumeroDiasMinimoAcaoPrecedente(null);
		}

		// verifica a existencia do tipo do documento a ser gerado
		if (cobrancaAcaoHelper.getIdDocumentoTipo() != null && !cobrancaAcaoHelper.getIdDocumentoTipo().equals("")) {
			DocumentoTipo documentoTipo = new DocumentoTipo();
			documentoTipo.setId(new Integer(cobrancaAcaoHelper.getIdDocumentoTipo()));
			cobrancaAcao.setDocumentoTipo(documentoTipo);
		} else {
			// levanta a exceção para a próxima camada
			throw new ControladorException("atencao.required", null,
					"Tipo de Documento a ser Gerado");
		}

		// verifica a existencia da situação da ligação de agua
		LigacaoAguaSituacao ligacaoAguaSituacao = new LigacaoAguaSituacao();
		if (cobrancaAcaoHelper.getIdLigacaoAguaSituacao() != null && 
				!cobrancaAcaoHelper.getIdLigacaoAguaSituacao().equals("")) {
			ligacaoAguaSituacao.setId(new Integer(cobrancaAcaoHelper.getIdLigacaoAguaSituacao()));
			cobrancaAcao.setLigacaoAguaSituacao(ligacaoAguaSituacao);
		} else {
			cobrancaAcao.setLigacaoAguaSituacao(null);
		}
		

		// verifica a existencia da situação da ligação de esgoto
		LigacaoEsgotoSituacao ligacaoEsgotoSituacao = new LigacaoEsgotoSituacao();
		if ( cobrancaAcaoHelper.getIdLigacaoEsgotoSituacao() != null &&
				!cobrancaAcaoHelper.getIdLigacaoEsgotoSituacao().equals("") ) {
		ligacaoEsgotoSituacao.setId(new Integer(cobrancaAcaoHelper.getIdLigacaoEsgotoSituacao()));
			cobrancaAcao.setLigacaoEsgotoSituacao(ligacaoEsgotoSituacao);
		} else {
			cobrancaAcao.setLigacaoEsgotoSituacao(null);
		}
		


		// pesquisa enter de critério de cobrança
		if (cobrancaAcaoHelper.getIdCobrancaCriterio() != null && !cobrancaAcaoHelper.getIdCobrancaCriterio().equals("")) {
			if (cobrancaAcaoHelper.getDescricaoCobrancaCriterio() == null
					|| cobrancaAcaoHelper.getDescricaoCobrancaCriterio().equals("")) {

				FiltroCobrancaCriterio filtroCobrancaCriterio = new FiltroCobrancaCriterio();
				filtroCobrancaCriterio.adicionarParametro(new ParametroSimples(
						FiltroCobrancaCriterio.ID, new Integer(
								cobrancaAcaoHelper.getIdCobrancaCriterio())));
				filtroCobrancaCriterio
						.setCampoOrderBy(FiltroCobrancaCriterio.DESCRICAO_COBRANCA_CRITERIO);
				Collection colecaoCobrancaCriterio = getControladorUtil()
						.pesquisar(filtroCobrancaCriterio,
								CobrancaCriterio.class.getName());

				if (colecaoCobrancaCriterio != null
						&& !colecaoCobrancaCriterio.isEmpty()) {
					CobrancaCriterio cobrancaCriterio = (CobrancaCriterio) Util
							.retonarObjetoDeColecao(colecaoCobrancaCriterio);
					cobrancaAcao.setCobrancaCriterio(cobrancaCriterio);
				} else {
					// levanta a exceção para a próxima camada
					throw new ControladorException(
							"atencao.pesquisa_inexistente", null,
							"Critério de Cobrança");
				}
			} else { 
				CobrancaCriterio cobrancaCriterio = new CobrancaCriterio();
				cobrancaCriterio.setId(new Integer(cobrancaAcaoHelper.getIdCobrancaCriterio()));
				cobrancaAcao.setCobrancaCriterio(cobrancaCriterio);
			}

		} else {
			// levanta a exceção para a próxima camada
			throw new ControladorException("atencao.required", null,
					"Critério de Cobrança");
		}

		// pesquisa enter de critério de cobrança
		ServicoTipo servicoTipo = new ServicoTipo();
		if (cobrancaAcaoHelper.getIdServicoTipo() != null && !cobrancaAcaoHelper.getIdServicoTipo().equals("")) {
			if (cobrancaAcaoHelper.getDescricaoServicoTipo() == null || cobrancaAcaoHelper.getDescricaoServicoTipo().equals("")) {

				FiltroServicoTipo filtroServicoTipo = new FiltroServicoTipo();
				filtroServicoTipo.adicionarParametro(new ParametroSimples(
						FiltroServicoTipo.ID, new Integer(cobrancaAcaoHelper.getIdServicoTipo())));
				filtroServicoTipo.setCampoOrderBy(FiltroServicoTipo.DESCRICAO);
				Collection colecaoServicoTipo = getControladorUtil().pesquisar(
						filtroServicoTipo, ServicoTipo.class.getName());

				if (colecaoServicoTipo != null && !colecaoServicoTipo.isEmpty()) {
					servicoTipo = (ServicoTipo) Util
							.retonarObjetoDeColecao(colecaoServicoTipo);
					cobrancaAcao.setServicoTipo(servicoTipo);
				} else {
					// levanta a exceção para a próxima camada
					throw new ControladorException(
							"atencao.pesquisa_inexistente", null,
							"Tipo de serviço");
				}
			} else {
				
				servicoTipo.setId(new Integer(cobrancaAcaoHelper.getIdServicoTipo()));
				cobrancaAcao.setServicoTipo(servicoTipo);
			}

		} else {
			cobrancaAcao.setServicoTipo(null);
		}

		

		// verifica a existencia do indicador de compõe o cronograma
		if (cobrancaAcaoHelper.getIndicadorCronograma() != null && !cobrancaAcaoHelper.getIndicadorCronograma().equals("")) {
			cobrancaAcao.setIndicadorCronograma(new Short(cobrancaAcaoHelper.getIndicadorCronograma()));
		} else {
			// levanta a exceção para a próxima camada
			throw new ControladorException("atencao.required", null,
					"Compõe Cronograma");
		}

		// verifica a existencia do indicador de ação Obrigatória
		if (cobrancaAcaoHelper.getIndicadorObrigatoriedade() != null && !cobrancaAcaoHelper.getIndicadorObrigatoriedade().equals("")) {
			if (new Short(cobrancaAcaoHelper.getIndicadorObrigatoriedade()).equals(CobrancaAcao.INDICADOR_SIM)
					&& new Short(cobrancaAcaoHelper.getIndicadorCronograma())
							.equals(CobrancaAcao.INDICADOR_NAO)) {
				// levanta a exceção para a próxima camada
				throw new ControladorException(
						"atencao.acao_cobranca_compor_cronograma");
			} else {
				cobrancaAcao.setIndicadorObrigatoriedade(new Short(
						cobrancaAcaoHelper.getIndicadorObrigatoriedade()));
			}
		} else {
			// levanta a exceção para a próxima camada
			throw new ControladorException("atencao.required", null,
					"Ação Obrigatória");
		}

		// verifica a existencia do indicador de repetição
		if (cobrancaAcaoHelper.getIndicadorRepeticao() != null && !cobrancaAcaoHelper.getIndicadorRepeticao().equals("")) {
			cobrancaAcao.setIndicadorRepeticao(new Short(cobrancaAcaoHelper.getIndicadorRepeticao()));
		} else {
			// levanta a exceção para a próxima camada
			throw new ControladorException("atencao.required", null,
					"Pode ser Repetida no Ciclo");
		}

		// verifica a existencia do indicador de suspensão de abastecimento
		if (cobrancaAcaoHelper.getIndicadorSuspensaoAbastecimento() != null
				&& !cobrancaAcaoHelper.getIndicadorSuspensaoAbastecimento().equals("")) {
			cobrancaAcao.setIndicadorSuspensaoAbastecimento(new Short(
					cobrancaAcaoHelper.getIndicadorSuspensaoAbastecimento()));
		} else {
			// levanta a exceção para a próxima camada
			throw new ControladorException("atencao.required", null,
					"Provoca Suspensão no Abastecimento");
		}

		// verifica a existencia do indicador de cobrança deb a cobrar
		if (cobrancaAcaoHelper.getIndicadorCobrancaDebACobrar() != null && !cobrancaAcaoHelper.getIndicadorCobrancaDebACobrar().equals("")) {
			cobrancaAcao.setIndicadorCobrancaDebACobrar(new Short(
					cobrancaAcaoHelper.getIndicadorCobrancaDebACobrar()));
		} else {
			// levanta a exceção para a próxima camada
			throw new ControladorException("atencao.required", null,
					"Considera Débitos a Cobrar");
		}

		// verifica a existencia do indicador de acrescimos por impontualidade
		if (cobrancaAcaoHelper.getIndicadorAcrescimoImpontualidade() != null
				&& !cobrancaAcaoHelper.getIndicadorAcrescimoImpontualidade().equals("")) {
			cobrancaAcao.setIndicadorAcrescimoImpontualidade(new Short(
					cobrancaAcaoHelper.getIndicadorAcrescimoImpontualidade()));
		} else {
			// levanta a exceção para a próxima camada
			throw new ControladorException("atencao.required", null,
					"Considera Acréscimos por Impontualidade");
		}

		// verifica a existencia do indicador de geração de taxa
		if (cobrancaAcaoHelper.getIndicadorGeracaoTaxa() != null && !cobrancaAcaoHelper.getIndicadorGeracaoTaxa().equals("")) {
			cobrancaAcao.setIndicadorGeracaoTaxa(new Short(cobrancaAcaoHelper.getIndicadorGeracaoTaxa()));
		} else {
			// levanta a exceção para a próxima camada
			throw new ControladorException("atencao.required", null,
					"Gera Taxa");
		}

		// verifica a existencia do indicador de emitir boletim de cadastro
		if (cobrancaAcaoHelper.getIndicadorBoletim() != null
				&& !cobrancaAcaoHelper.getIndicadorBoletim().equals("")) {
			cobrancaAcao
					.setIndicadorBoletim(new Short(cobrancaAcaoHelper.getIndicadorBoletim()));
		} else {
			// levanta a exceção para a próxima camada
			throw new ControladorException("atencao.required", null,
					"Pode Emitir Boletins de Cadastro");
		}

		// verifica a existencia do indicador de compõe o cronograma
		if (cobrancaAcaoHelper.getIndicadorDebito() != null && !cobrancaAcaoHelper.getIndicadorDebito().equals("")) {
			cobrancaAcao.setIndicadorDebito(new Short(cobrancaAcaoHelper.getIndicadorDebito()));
		} else {
			// levanta a exceção para a próxima camada
			throw new ControladorException("atencao.required", null,
					"Pode ser Executada para Imóveis sem Débito");
		}
		
		// verifica a existencia dnumero de dias de vencimento
		if (cobrancaAcaoHelper.getNumeroDiasVencimento() != null && !cobrancaAcaoHelper.getNumeroDiasVencimento().equals("")) {
			cobrancaAcao.setNumeroDiasVencimento(new Integer(cobrancaAcaoHelper.getNumeroDiasVencimento()));
		}  else {
			cobrancaAcao.setNumeroDiasVencimento(null);
		}
//		} else {
//			// levanta a exceção para a próxima camada
//			throw new ControladorException("atencao.required", null,
//					"Pode ser Executada para Imóveis sem Débito");
//		}

		
		// verifica a existencia dnumero de dias de vencimento
		if (cobrancaAcaoHelper.getIndicadorUso() != null && !cobrancaAcaoHelper.getIndicadorUso().equals("")) {
			cobrancaAcao.setIndicadorUso(new Short(cobrancaAcaoHelper.getIndicadorUso()));
		}
		
//		verifica a existencia do indicador de metasCronograma
		if (cobrancaAcaoHelper.getIndicadorMetasCronograma() != null && !cobrancaAcaoHelper.getIndicadorMetasCronograma().equals("")) {
			cobrancaAcao.setIndicadorMetasCronograma(new Integer(cobrancaAcaoHelper.getIndicadorMetasCronograma()));
		} else {
			// levanta a exceção para a próxima camada
			throw new ControladorException("atencao.required", null,
					"Usa Metas no Cronograma");
		}
		
		//verifica a existencia do indicador de ordenamentoCronograma
		if (cobrancaAcaoHelper.getIndicadorOrdenamentoCronograma() != null && !cobrancaAcaoHelper.getIndicadorOrdenamentoCronograma().equals("")) {
			cobrancaAcao.setIndicadorOrdenamentoCronograma(new Integer(cobrancaAcaoHelper.getIndicadorOrdenamentoCronograma()));
		} else {
			// levanta a exceção para a próxima camada
			throw new ControladorException("atencao.required", null,
					"Usa Ordenamento: No Cronograma");
		}
		
		//verifica a existencia do indicador de ordenamentoEventual
		if (cobrancaAcaoHelper.getIndicadorOrdenamentoEventual() != null && !cobrancaAcaoHelper.getIndicadorOrdenamentoEventual().equals("")) {
			cobrancaAcao.setIndicadorOrdenamentoEventual(new Integer(cobrancaAcaoHelper.getIndicadorOrdenamentoEventual()));
		} else {
			// levanta a exceção para a próxima camada
			throw new ControladorException("atencao.required", null,
					"Usa Ordenamento: Nas Eventuais");
		}
		
		//verifica a existencia do indicador de debitoInterfereAcao
		if (cobrancaAcaoHelper.getIndicadorDebitoInterfereAcao() != null && !cobrancaAcaoHelper.getIndicadorDebitoInterfereAcao().equals("")) {
			cobrancaAcao.setIndicadorDebitoInterfereAcao(new Integer(cobrancaAcaoHelper.getIndicadorDebitoInterfereAcao()));
		} else {
			// levanta a exceção para a próxima camada
			throw new ControladorException("atencao.required", null,
					"Situação do Débito Interfere na Situação da Ação");
		}
		
		//verifica a existencia numero de diasRemuneracaoTerceiro
		if (cobrancaAcaoHelper.getNumeroDiasRemuneracaoTerceiro() != null && !cobrancaAcaoHelper.getNumeroDiasRemuneracaoTerceiro().equals("")) {
			cobrancaAcao.setNumeroDiasRemuneracaoTerceiro(new Integer(cobrancaAcaoHelper.getNumeroDiasRemuneracaoTerceiro()));
		}
		
		if(cobrancaAcaoHelper.getIndicadorCreditosARealizar()!=null
				&& !cobrancaAcaoHelper.getIndicadorCreditosARealizar().equals("")){
			cobrancaAcao.setIndicadorCreditosARealizar(
					new Short(cobrancaAcaoHelper.getIndicadorCreditosARealizar()));
		}
		if(cobrancaAcaoHelper.getIndicadorNotasPromissoria()!=null
				&& !cobrancaAcaoHelper.getIndicadorNotasPromissoria().equals("")){
			cobrancaAcao.setIndicadorNotasPromissoria(
					new Short(cobrancaAcaoHelper.getIndicadorNotasPromissoria()));
		}
		
		if(cobrancaAcaoHelper.getIndicadorOrdenarMaiorValor()!=null
				&& !cobrancaAcaoHelper.getIndicadorOrdenarMaiorValor().equals("")){
			cobrancaAcao.setIndicadorOrdenarMaiorValor(
					new Short(cobrancaAcaoHelper.getIndicadorOrdenarMaiorValor()));
		}
		
		if(cobrancaAcaoHelper.getIndicadorValidarItem()!=null
				&& !cobrancaAcaoHelper.getIndicadorValidarItem().equals("")){
			cobrancaAcao.setIndicadorValidarItem(
					new Short(cobrancaAcaoHelper.getIndicadorValidarItem()));
		}
		
		if(cobrancaAcaoHelper.getIndicadorEfetuarAcaoCpfCnpjValido()!=null
				&& !cobrancaAcaoHelper.getIndicadorEfetuarAcaoCpfCnpjValido().equals("")){
			cobrancaAcao.setIndicadorEfetuarAcaoCpfCnpjValido(
					new Short(cobrancaAcaoHelper.getIndicadorEfetuarAcaoCpfCnpjValido()));
		}
		
		cobrancaAcao.setIndicadorUso(ConstantesSistema.INDICADOR_USO_ATIVO);

		// ------------ REGISTRAR TRANSAÇÃO----------------------------
		RegistradorOperacao registradorOperacao = new RegistradorOperacao(
				Operacao.OPERACAO_COBRANCA_ACAO_ATUALIZAR,
				cobrancaAcao.getId(), cobrancaAcao.getId(),
				new UsuarioAcaoUsuarioHelper(cobrancaAcaoHelper.getUsuarioLogado(), 
				UsuarioAcao.USUARIO_ACAO_EFETUOU_OPERACAO));
		registradorOperacao.registrarOperacao(cobrancaAcao);
		
//		RegistradorOperacao registradorOperacao = new RegistradorOperacao(
//				Operacao.OPERACAO_COBRANCA_ACAO_INSERIR,
//				new UsuarioAcaoUsuarioHelper(cobrancaAcaoHelper.getUsuarioLogado(),
//						UsuarioAcao.USUARIO_ACAO_EFETUOU_OPERACAO));
//
//		Operacao operacao = new Operacao();
//		operacao.setId(Operacao.OPERACAO_COBRANCA_ACAO_ATUALIZAR);
//
//		OperacaoEfetuada operacaoEfetuada = new OperacaoEfetuada();
//		operacaoEfetuada.setOperacao(operacao);
//
//		cobrancaAcao.setOperacaoEfetuada(operacaoEfetuada);
//		cobrancaAcao.adicionarUsuario(cobrancaAcaoHelper.getUsuarioLogado(),
//				UsuarioAcao.USUARIO_ACAO_EFETUOU_OPERACAO);
//		registradorOperacao.registrarOperacao(cobrancaAcao);
		// ------------ REGISTRAR TRANSAÇÃO----------------------------

		CobrancaAcao cobrancaAcaoNaBase = null;
		FiltroCobrancaAcao filtroCobrancaAcao = new FiltroCobrancaAcao();
		filtroCobrancaAcao.adicionarParametro(new ParametroSimples(
				FiltroCobrancaAcao.ID, cobrancaAcao.getId()));

		Collection collectionCobrancaAcao = getControladorUtil().pesquisar(
				filtroCobrancaAcao, CobrancaAcao.class.getName());

		// Caso a pesquisa tenha retornado o critério de cobrança
		if (collectionCobrancaAcao != null && !collectionCobrancaAcao.isEmpty()) {

			// Recupera da coleção a rota que vai ser atualizada
			cobrancaAcaoNaBase = (CobrancaAcao) Util
					.retonarObjetoDeColecao(collectionCobrancaAcao);
		}
		// Verificar se o logradouro já foi atualizado por outro usuário
		// durante
		// esta atualização
		if (cobrancaAcaoNaBase == null
				|| cobrancaAcaoNaBase.getUltimaAlteracao().after(
						cobrancaAcao.getUltimaAlteracao())) {
			sessionContext.setRollbackOnly();
			throw new ControladorException("atencao.atualizacao.timestamp");
		}
		
		cobrancaAcao.setUltimaAlteracao(new Date());
		
		getControladorUtil().atualizar(cobrancaAcao);
		
		if(cobrancaAcaoHelper.getTextoPersonalizado()!=null && 
		   !cobrancaAcaoHelper.getTextoPersonalizado().equals("")){
					
			FiltroDocumentoTipo filtroDocumentoTipo = new FiltroDocumentoTipo();
			filtroDocumentoTipo.adicionarParametro(new ParametroSimples(
			FiltroDocumentoTipo.ID, cobrancaAcao.getDocumentoTipo().getId()));
					
			Collection colecaoDocumentoTipo = this.getControladorUtil().pesquisar(filtroDocumentoTipo, DocumentoTipo.class.getName());
					
			DocumentoTipo documentoTipo = (DocumentoTipo) Util.retonarObjetoDeColecao(colecaoDocumentoTipo);
					
			if (documentoTipo.getIndicadorTextoPersonalizado() != null &&
				documentoTipo.getIndicadorTextoPersonalizado().equals(ConstantesSistema.SIM)){
							
				//Atualizando o texto personalizado
				this.atualizarCobrancaAcaoTextoPersonalizado(cobrancaAcao.getId(), cobrancaAcaoHelper.getTextoPersonalizado());
			}
		}

		

	}
	
	/**
	 * [UC0067] Inserir Comando Negaivação
	 * 
	 * @autor: Ana Maria
	 * 
	 * [FS0019] Verificar existência de Parcelamento
	 * 
	 * @param idImovel
	 * @return Cliente
	 * @throws ErroRepositorioException
	 */
	public Cliente pesquisarClienteResponsavelParcelamento(Integer idImovel) 
			throws ControladorException {
		try {
			return repositorioCobranca
					.pesquisarClienteResponsavelParcelamento(idImovel);

		} catch (ErroRepositorioException ex) {
			sessionContext.setRollbackOnly();
			throw new ControladorException("erro.sistema", ex);
		}
	}	

	
	/**
	 * [UC0543] Associar Conjunto de Rotas a Critério de Cobrança
	 * 
	 * @author Raphael Rossiter, Anderson Italo
	 * @date 24/01/2008, 04/06/2009
	 * Adicionado registro de transação CRC1946
	 * 
	 * @param 
	 * @throws ControladorException
	 */
	public void associarConjuntoRotasCriterioCobranca(Collection colecaoRotas, Usuario usuarioLogado, 
			RotaAcaoCriterioHelper rotaAcaoCriterioHelper) throws ControladorException {
		
		if(colecaoRotas != null && !colecaoRotas.isEmpty()){
			
			Iterator iterator = colecaoRotas.iterator();
			Integer id = null;
			Rota rota = null;
			CobrancaAcao cobrancaAcao = null;
			CobrancaCriterio cobrancaCriterio = null;
			RotaAcaoCriterio rotaAcaoCriterio = null;
			
			// ------------ REGISTRAR TRANSAÇÃO----------------------------
			
			UsuarioAcao usuarioAcao = UsuarioAcao.USUARIO_ACAO_EFETUOU_OPERACAO;

			UsuarioAcaoUsuarioHelper usuarioAcaoUsuarioHelper = new UsuarioAcaoUsuarioHelper(usuarioLogado,usuarioAcao);
			
			OperacaoEfetuada operacaoEfetuada = new OperacaoEfetuada();
			Operacao operacao = new Operacao();
			operacao.setId(Operacao.OPERACAO_ASSOCIAR_CONJUNTO_ROTAS_CRITERIO_COBRANCA);
			operacaoEfetuada.setOperacao(operacao);

			cobrancaAcao = new CobrancaAcao();
			cobrancaAcao.setId(new Integer(rotaAcaoCriterioHelper.getCobrancaAcao().getId()));
			cobrancaAcao.setDescricaoCobrancaAcao(Interceptador.consultarDescricao(cobrancaAcao));
			rotaAcaoCriterioHelper.setCobrancaAcao(cobrancaAcao);
			
			cobrancaCriterio = new CobrancaCriterio();
			cobrancaCriterio.setId(new Integer(rotaAcaoCriterioHelper.getCobrancaCriterio().getId()));
			cobrancaCriterio.setDescricaoCobrancaCriterio(Interceptador.consultarDescricao(cobrancaCriterio));
			rotaAcaoCriterioHelper.setCobrancaCriterio(cobrancaCriterio);
			
			operacaoEfetuada.preencherDadosAdicionais(rotaAcaoCriterioHelper);
			operacaoEfetuada.setArgumentoValor(new Integer(rotaAcaoCriterioHelper.getCobrancaAcao().getId()));
			
		    getControladorTransacao().processaRegistroOperacaoObjetohelper(usuarioAcaoUsuarioHelper, AlteracaoTipo.INCLUSAO,
													 rotaAcaoCriterioHelper, operacaoEfetuada, RotaAcaoCriterioHelper.TABELA_ID);
			// ------------ REGISTRAR TRANSAÇÃO----------------------------
			cobrancaAcao = null;
			cobrancaCriterio = null;
			while(iterator.hasNext()){
				id = (Integer)iterator.next();
				//-----
				rota = new Rota();
				rota.setId(id);
				cobrancaAcao = new CobrancaAcao();
				cobrancaAcao.setId(rotaAcaoCriterioHelper.getCobrancaAcao().getId());
				cobrancaCriterio = new CobrancaCriterio();
				cobrancaCriterio.setId(rotaAcaoCriterioHelper.getCobrancaCriterio().getId());
				//-----
				rotaAcaoCriterio = new RotaAcaoCriterio();
				rotaAcaoCriterio.setRota(rota);
				rotaAcaoCriterio.setCobrancaAcao(cobrancaAcao);
				rotaAcaoCriterio.setCobrancaCriterio(cobrancaCriterio);
				rotaAcaoCriterio.setUltimaAlteracao(new Date());
				
				RotaAcaoCriterioPK rotaAcaoCriterioPK = new RotaAcaoCriterioPK();
				rotaAcaoCriterioPK.setRotaId(rota.getId());
				rotaAcaoCriterioPK.setCobrancaAcaoId(cobrancaAcao.getId());
				rotaAcaoCriterio.setComp_id(rotaAcaoCriterioPK);
				
				this.getControladorUtil().inserir(rotaAcaoCriterio);
			}
			
		}else{
			
			throw new ControladorException("atencao.naocadastrado", null, "rota sem associação");
		}
	}
    
     /**
     * [UC0737] Atualiza Quantdade de Parcela Paga Consecutiva e Parcela Bônus
     * 
     * Retorna dados dos parcelamentos com RD = 8 que estejam com situação normal 
     * e que não exista outro parcelamento com data posterior  
     * 
     * @author Vivianne Sousa
     * @date 31/01/2008
     * 
     * @return Collection retorno
     * @throws ErroRepositorioException
     */
    public Collection pesquisarParcelamentoRDEspecial(
            Integer situacaoParcelamento, Integer idLocalidade)throws ControladorException {
        
        try {
            Collection colecaoRetorno = null;
            
            Collection colecaoParcelamento = repositorioCobranca.
                pesquisarParcelamentoRDEspecial(situacaoParcelamento, idLocalidade);
            
            if (colecaoParcelamento != null && !colecaoParcelamento.isEmpty()) {

                Iterator iteratorColecaoParcelamento = colecaoParcelamento.iterator();
                colecaoRetorno = new ArrayList();
                
                while (iteratorColecaoParcelamento.hasNext()) {

                    Object[] colecaoParcelamentoArray = (Object[]) iteratorColecaoParcelamento.next();

                    Parcelamento parcelamento = new Parcelamento();
                    Imovel imovel = new Imovel();

                    if (colecaoParcelamentoArray[0] != null) {
                        parcelamento.setId((Integer)colecaoParcelamentoArray[0]);
                    }

                    if (colecaoParcelamentoArray[1] != null) {
                        parcelamento.setParcelamento((Date) colecaoParcelamentoArray[1]);
                    }

                    if (colecaoParcelamentoArray[2] != null) {
                        parcelamento.setNumeroPrestacoes((Short) colecaoParcelamentoArray[2]);
                    }

                    if (colecaoParcelamentoArray[3] != null) {
                        imovel.setId((Integer) colecaoParcelamentoArray[3]);
                        parcelamento.setImovel(imovel);
                    }
                    
                    if (colecaoParcelamentoArray[4] != null) {
                        parcelamento.setNumeroParcelasPagasConsecutivas((Short) colecaoParcelamentoArray[4]);
                    }

                    colecaoRetorno.add(parcelamento);
                }

            }
             
             return colecaoRetorno;

        } catch (ErroRepositorioException ex) {
            sessionContext.setRollbackOnly();
            throw new ControladorException("erro.sistema", ex);
        }
        
    }   
    
    /**
     * [UC0737] Atualiza Quantidade de Parcela Paga Consecutiva e Parcela Bônus
     * 
     * @author Vivianne Sousa
     * @created 07/02/2008
     * 
     * @param idParcelamento
     * @exception ErroRepositorioException
     *                Repositorio Exception
     */
    public void atualizarNumeroParcelasPagasConsecutivasParcelamento(Integer idParcelamento,
            Short numeroParcelas)throws ControladorException {
        try {
            repositorioCobranca.atualizarNumeroParcelasPagasConsecutivasParcelamento(idParcelamento,numeroParcelas);

        } catch (ErroRepositorioException ex) {
            sessionContext.setRollbackOnly();
            throw new ControladorException("erro.sistema", ex);
        }
    }
    
	/**
	 * Informa as unidades de negócio testemunha
	 * 
	 * [UC0796] Informar Unidade Negócio Testemunha
	 * 
	 * @author Rafael Corrêa
	 * @param usuarioLogado
	 * @date 19/05/2008
	 * 
	 */
	public void informarUnidadeOrganizacionalTestemunha(
			Collection<UnidadeOrganizacionalTestemunha> colecaoUnidadeOrganizacionalTestemunhaAdicionadas,
			Collection<UnidadeOrganizacionalTestemunha> colecaoUnidadeOrganizacionalTestemunhaRemovidas,
			Usuario usuarioLogado) throws ControladorException {

		// ------------ REGISTRAR TRANSAÇÃO----------------------------
		RegistradorOperacao registradorOperacao = new RegistradorOperacao(
				Operacao.OPERACAO_INFORMAR_UNIDADE_NEGOCIO_TESTEMUNHA,
				new UsuarioAcaoUsuarioHelper(usuarioLogado,
						UsuarioAcao.USUARIO_ACAO_EFETUOU_OPERACAO));

		Operacao operacao = new Operacao();
		operacao.setId(Operacao.OPERACAO_INFORMAR_UNIDADE_NEGOCIO_TESTEMUNHA);

		OperacaoEfetuada operacaoEfetuada = new OperacaoEfetuada();
		operacaoEfetuada.setOperacao(operacao);
		
		// Atualiza as Unidade de Negócio Testemunha removidas pelo usuário
		if (colecaoUnidadeOrganizacionalTestemunhaRemovidas != null && !colecaoUnidadeOrganizacionalTestemunhaRemovidas.isEmpty()) {
			for (UnidadeOrganizacionalTestemunha unidadeOrganizacionalTestemunha : colecaoUnidadeOrganizacionalTestemunhaRemovidas) {
				
				// [FS0003] - Atualização realizada por outro usuário
				FiltroUnidadeOrganizacionalTestemunha filtroUnidadeOrganizacionalTestemunha = new FiltroUnidadeOrganizacionalTestemunha();
				filtroUnidadeOrganizacionalTestemunha.adicionarParametro(new ParametroSimples(
						FiltroUnidadeOrganizacionalTestemunha.ID, unidadeOrganizacionalTestemunha.getId()));

				Collection colecaoUnidadeOrganizacionalTestemunhaBase = getControladorUtil()
						.pesquisar(filtroUnidadeOrganizacionalTestemunha,
								UnidadeOrganizacionalTestemunha.class.getName());

				if (colecaoUnidadeOrganizacionalTestemunhaBase == null
						|| colecaoUnidadeOrganizacionalTestemunhaBase.isEmpty()) {
					sessionContext.setRollbackOnly();
					throw new ControladorException("atencao.atualizacao.timestamp");
				}

				UnidadeOrganizacionalTestemunha unidadeOrganizacionalTestemunhaBase = (UnidadeOrganizacionalTestemunha) colecaoUnidadeOrganizacionalTestemunhaBase
						.iterator().next();

				if (unidadeOrganizacionalTestemunhaBase.getUltimaAlteracao().after(
						unidadeOrganizacionalTestemunha.getUltimaAlteracao())) {
					sessionContext.setRollbackOnly();
					throw new ControladorException("atencao.atualizacao.timestamp");
				}
				
				unidadeOrganizacionalTestemunha.setUltimaAlteracao(new Date());
				unidadeOrganizacionalTestemunha.setOperacaoEfetuada(operacaoEfetuada);
				unidadeOrganizacionalTestemunha.adicionarUsuario(usuarioLogado,
						UsuarioAcao.USUARIO_ACAO_EFETUOU_OPERACAO);
				registradorOperacao.registrarOperacao(unidadeOrganizacionalTestemunha);
				
				getControladorUtil().atualizar(unidadeOrganizacionalTestemunha);
			}
		}
		
		// Insere as Unidade de Negócio Testemunha adicionadas pelo usuário
		if (colecaoUnidadeOrganizacionalTestemunhaAdicionadas != null && !colecaoUnidadeOrganizacionalTestemunhaAdicionadas.isEmpty()) {
			for (UnidadeOrganizacionalTestemunha unidadeOrganizacionalTestemunha : colecaoUnidadeOrganizacionalTestemunhaAdicionadas) {
				
				// [FS0001] - Validar data relação fim
				FiltroUnidadeOrganizacionalTestemunha filtroUnidadeOrganizacionalTestemunha = new FiltroUnidadeOrganizacionalTestemunha();
				filtroUnidadeOrganizacionalTestemunha.adicionarParametro(new ParametroSimples(
						FiltroUnidadeOrganizacionalTestemunha.UNIDADE_ORGANIZACIONAL_ID, unidadeOrganizacionalTestemunha.getUnidadeOrganizacional().getId()));
				filtroUnidadeOrganizacionalTestemunha.adicionarParametro(new ParametroSimples(
						FiltroUnidadeOrganizacionalTestemunha.USUARIO_ID, unidadeOrganizacionalTestemunha.getUsuario().getId()));
				filtroUnidadeOrganizacionalTestemunha.adicionarParametro(new ParametroNulo(
						FiltroUnidadeOrganizacionalTestemunha.DATA_RELACAO_FIM));

				Collection colecaoUnidadeOrganizacionalTestemunhaBase = getControladorUtil()
						.pesquisar(filtroUnidadeOrganizacionalTestemunha,
								UnidadeOrganizacionalTestemunha.class.getName());

				if (colecaoUnidadeOrganizacionalTestemunhaBase != null
						&& !colecaoUnidadeOrganizacionalTestemunhaBase.isEmpty()) {
					sessionContext.setRollbackOnly();
					throw new ControladorException(
							"atencao.testemunha.ja.existente", null,
							unidadeOrganizacionalTestemunha.getUnidadeOrganizacional()
									.getDescricao(), unidadeOrganizacionalTestemunha
									.getUsuario().getNomeUsuario());
				}
				
				unidadeOrganizacionalTestemunha.setUltimaAlteracao(new Date());
				unidadeOrganizacionalTestemunha.setOperacaoEfetuada(operacaoEfetuada);
				unidadeOrganizacionalTestemunha.adicionarUsuario(usuarioLogado,
						UsuarioAcao.USUARIO_ACAO_EFETUOU_OPERACAO);
				registradorOperacao.registrarOperacao(unidadeOrganizacionalTestemunha);
				
				getControladorUtil().inserir(unidadeOrganizacionalTestemunha);
			}
		}
		
	}
    
    /**
	 * [UC0676] - Consultar Resumo da Negativacao
	 * 
	 * @author Marcio Roberto
	 * @date 28/02/2008
	 * 
	 * @return NegativacaoHelper
	 * @throws ErroRepositorioException
	 */
	public Collection consultarResumoNegativacao(
			DadosConsultaNegativacaoHelper dadosConsultaNegativacaoHelper, int tipo)
			throws ControladorException {

		Collection negativacaoHelper = null;
		try {
			// Pega a lista de Resumo das Negativacoes da base de dados.
			negativacaoHelper = repositorioCobranca.consultarNegativacao(dadosConsultaNegativacaoHelper, tipo);

		} catch (ErroRepositorioException ex) {
			ex.printStackTrace();
			throw new ControladorException("erro.sistema", ex);
		}
		return negativacaoHelper;
	}
	
	/**
	 * Metodo que cria o relatorio de parcelamento de débitos default
	 * @author brunobarros
	 * 
	 * @param usuario
	 * @param idParcelamento
	 * @param unidadeUsuario
	 * @param colecaoFaturasEmAberto
	 * @param colecaoGuiasPagamento
	 * @param colecaoServicosACobrar
	 * @param colecaoCreditoARealizar
	 * @return
	 */
	public Object gerarRelatorioParcelamentoCobranca(
			Usuario usuario,
			String idParcelamento,
			UnidadeOrganizacional unidadeUsuario,
			Collection colecaoFaturasEmAberto,
			Collection colecaoGuiasPagamento,
			Collection colecaoServicosACobrar,
			Collection colecaoCreditoARealizar, boolean parcelamentoLojaVirtual ){

		if(parcelamentoLojaVirtual){
			RelatorioDocumentosParcelamentoPortal relatorioParcelamento = new RelatorioDocumentosParcelamentoPortal(usuario);
			relatorioParcelamento.addParametro("idParcelamento", idParcelamento);
			relatorioParcelamento.addParametro("unidadeUsuario", unidadeUsuario);
			relatorioParcelamento.addParametro("sistemaParametro", Fachada.getInstancia().pesquisarParametrosDoSistema() );
			relatorioParcelamento.addParametro("colecaoFaturasEmAberto", colecaoFaturasEmAberto );
			relatorioParcelamento.addParametro("colecaoGuiasPagamento", colecaoGuiasPagamento );
			relatorioParcelamento.addParametro("colecaoServicosACobrar",	colecaoServicosACobrar );
			relatorioParcelamento.addParametro("colecaoCreditoARealizar", colecaoCreditoARealizar );
			relatorioParcelamento.addParametro("usuario",usuario);
			return relatorioParcelamento; 
		}else{
			RelatorioParcelamento relatorioParcelamento = new RelatorioParcelamento(usuario); 
			relatorioParcelamento.addParametro("idParcelamento", idParcelamento);
			relatorioParcelamento.addParametro("unidadeUsuario", unidadeUsuario);
			relatorioParcelamento.addParametro("sistemaParametro", Fachada.getInstancia().pesquisarParametrosDoSistema() );
			relatorioParcelamento.addParametro("colecaoFaturasEmAberto", colecaoFaturasEmAberto );
			relatorioParcelamento.addParametro("colecaoGuiasPagamento", colecaoGuiasPagamento );
			relatorioParcelamento.addParametro("colecaoServicosACobrar",	colecaoServicosACobrar );
			relatorioParcelamento.addParametro("colecaoCreditoARealizar", colecaoCreditoARealizar );
			relatorioParcelamento.addParametro("usuario",usuario);
			return relatorioParcelamento;		
		}
	}
	
	
	/**
	 * Atualiza o documento de cobranca apos a OS ser encerrada. Este metodo sera usado nos metodos de 
	 * encerrar OS 
	 * 
	 * @param OS
	 * @throws ControladorException
	 * 
	 * @author Francisco do Nascimento
	 * @date 16/05/2008
	 * 
	 */
	public void atualizarCobrancaDocumentoAposEncerrarOS(OrdemServico OS) throws ControladorException{
//		 posições do array com os dados que serão atualizados
		DadosPesquisaCobrancaDocumentoHelper cobrancaDocumentoParaAtualizar = new DadosPesquisaCobrancaDocumentoHelper();
		Collection colecaoCobrancaDocumentoParaAtualizar = new ArrayList();
		
		CobrancaDocumento cobrancaDocumento = OS.getCobrancaDocumento();
		if (cobrancaDocumento != null){
			cobrancaDocumentoParaAtualizar.setIdDocumento(cobrancaDocumento.getId());
			// recebe a data de encerramento da ordem de
			// serivo(ORSE_TMENCERRAMENTO)
			
			if(OS.getDataEncerramento()!= null){
				cobrancaDocumento.setDataSituacaoAcao(OS.getDataEncerramento());
				cobrancaDocumentoParaAtualizar.setDataSituacaoAcao(OS.getDataEncerramento());
			}

			// indicador de Execução
			// caso o motivo de encerramento
			// corresponda
			// à
			// execução
			if (OS.getAtendimentoMotivoEncerramento() != null){
				
				FiltroAtendimentoMotivoEncerramento filtroAtendimento = new FiltroAtendimentoMotivoEncerramento();
				filtroAtendimento.adicionarParametro(new ParametroSimples("id", OS.getAtendimentoMotivoEncerramento().getId()));
				
				Collection motivos = getControladorUtil().pesquisar(filtroAtendimento, 
						AtendimentoMotivoEncerramento.class.getName());
				
				AtendimentoMotivoEncerramento ame = (AtendimentoMotivoEncerramento) Util.retonarObjetoDeColecao(motivos);
								
				determinarSituacaoAcaoAPartirMotivoEncerramentoOS(cobrancaDocumentoParaAtualizar, ame);	
				
				cobrancaDocumentoParaAtualizar.setIdMotivoEncerramento(ame.getId());
			}
		
			if (OS.getImovel() != null){
				try {
					// [UC0306] - Obter Principal CAtegoria do Imovel
					// De acordo com o metodo ControladorImovel.obterPrincipalCategoriaImovel
					// caso seja a empresa FEBRABAN, a categoria principal sera a que tiver o maior codigo,
					// caso contrario, a principal será a que tiver menor codigo						
					SistemaParametro sistemaParametro = getControladorUtil().pesquisarParametrosDoSistema();
					boolean ehFEBRABAN = sistemaParametro.getCodigoEmpresaFebraban().equals(
							SistemaParametro.CODIGO_EMPRESA_FEBRABAN_CAERN); 
					Integer idCategoria = repositorioImovel.obterIdCategoriaPrincipal(
							OS.getImovel().getId(), ehFEBRABAN);
					
					cobrancaDocumentoParaAtualizar.setIdCategoria(idCategoria);
					
					// pesquisa os imovel para ser usado para gravar o
					// Resumo Cobrança Ação						
					Integer idEsferaPoder = repositorioImovel.obterIdEsferaPoder(OS.getImovel().getId());
					
					cobrancaDocumentoParaAtualizar.setIdEsferaPoder(idEsferaPoder);
				} catch (ErroRepositorioException e) {
					e.printStackTrace();
					throw new ControladorException("erro.sistema", e);
				}				
			}			
			
			colecaoCobrancaDocumentoParaAtualizar.add(cobrancaDocumentoParaAtualizar);
			try {
				this.repositorioCobranca.atualizarCobrancaDocumento(colecaoCobrancaDocumentoParaAtualizar);
			} catch (ErroRepositorioException e) {
				e.printStackTrace();
				throw new ControladorException("erro.sistema", e);
			}
			colecaoCobrancaDocumentoParaAtualizar.clear();
		} 
		
	}

	private void determinarSituacaoAcaoAPartirMotivoEncerramentoOS(DadosPesquisaCobrancaDocumentoHelper cobrancaDocumentoParaAtualizar, AtendimentoMotivoEncerramento ame) {
		Short indicadorExecucaoMotivoEncerramento = ame.getIndicadorExecucao();
		if (indicadorExecucaoMotivoEncerramento != null
				&& indicadorExecucaoMotivoEncerramento
						.intValue() == 1) {
			// atribuir o valor AÇÃO EXECUTADA
			cobrancaDocumentoParaAtualizar.setIdSituacaoAcao(CobrancaAcaoSituacao.EXECUTADA);

		} else {
			switch(ame.getId().shortValue()){
				case AtendimentoMotivoEncerramento.CANCELADO_POR_DERCURSO_DE_PRAZO:
					cobrancaDocumentoParaAtualizar.setIdSituacaoAcao(CobrancaAcaoSituacao.CANCELADA_PRAZO);
					break;
				case AtendimentoMotivoEncerramento.SUSPENSA_PAG_PARC_CANC_DO_DEBITO:
					cobrancaDocumentoParaAtualizar.setIdSituacaoAcao(CobrancaAcaoSituacao.CANCELADA_PRAZO);
					break;
				default:
					// atribuir o valor AÇÃO CANCELADA
					cobrancaDocumentoParaAtualizar.setIdSituacaoAcao(CobrancaAcaoSituacao.CANCELADA);								
			}
		}
	}
	
	/**
	 * Atualiza cobranca documento com os campos passados na colecao
	 * [UC478 - Gerar Resumo de Acoes de cobranca]
	 *  
	 * @param colecaoCobrancaDocumento
	 * @throws ControladorException
	 */
	public void atualizarCobrancaDocumento(Collection colecaoCobrancaDocumento) throws ControladorException{
		try {
			this.repositorioCobranca.atualizarCobrancaDocumento(colecaoCobrancaDocumento);
		} catch (ErroRepositorioException e) {
			e.printStackTrace();
			throw new ControladorException("erro.sistema", e);
		}
	}

	private void logPerformance(String mens, long tempo1, long tempo2){
		if (tempo2 - tempo1 > 7000){
			System.out.println("%$% " + mens + ": " + (tempo2 - tempo1) + " ms");
		}
	}
	
	/**
	 * 
	 * Este caso de uso permite gerar o resumo das ações de cobrança com a
	 * atividade emitir já realizada e a atividade encerrar ainda não realizada
	 * e realizar a atividade encerrar das ações que estejam comandadas.
	 * 
	 * [UC0478] Gerar Resumo das Ações de Cobrança do Cronograma
	 * 
	 * Este método se refere ao [SB0007] que foi separado para uma unidade de processamento
	 * 
	 * Pós-oncidção: Resumo das ações de cobrança gerado e atividade encerrar da
	 * ação de cobrança, se for o caso, realizada
	 * 
	 * @author Francisco do Nascimento
	 * @date 16/05/2008
	 * 
	 */
	public void gerarResumoAcoesCobrancaCronogramaEncerrarOS(
		Object[] dadosCobrancaAcaoAtividadeCronograma,
		int idFuncionalidadeIniciada) throws ControladorException {

		int idUnidadeIniciada = 0;

		// posições do array com os dados que serão atualizados
		final int POSICAO_ID_COB_ACAO_ATIV_CRON_EMITIR = 0;
		final int POSICAO_ID_COB_ACAO = 8;

		// -------------------------
		//
		// Registrar o início do processamento da Unidade de
		// Processamento
		// do Batch
		//
		// -------------------------

		idUnidadeIniciada = getControladorBatch()
				.iniciarUnidadeProcessamentoBatch(
						idFuncionalidadeIniciada,
						UnidadeProcessamento.COB_ACAO_ATIV_CRONOG,
						((Integer) dadosCobrancaAcaoAtividadeCronograma[POSICAO_ID_COB_ACAO_ATIV_CRON_EMITIR]));

		// coleção com os cronogramas de cobrança dos grupos de cobrança e meses
		// de referência
		try {

			if (dadosCobrancaAcaoAtividadeCronograma != null) {
				Integer idCobrancaAcao = null;
				Integer idCobrancaAtividadeAcaoCronogramaEmitir = null;

				if (dadosCobrancaAcaoAtividadeCronograma[POSICAO_ID_COB_ACAO] != null) {
					idCobrancaAcao = (Integer) dadosCobrancaAcaoAtividadeCronograma[POSICAO_ID_COB_ACAO];
				}
				if (dadosCobrancaAcaoAtividadeCronograma[POSICAO_ID_COB_ACAO_ATIV_CRON_EMITIR] != null) {
					idCobrancaAtividadeAcaoCronogramaEmitir = (Integer) dadosCobrancaAcaoAtividadeCronograma[POSICAO_ID_COB_ACAO_ATIV_CRON_EMITIR];
				}

				Collection colecaoCobrancaAcao = null;
				FiltroCobrancaAcao filtroCobrancaAcao = new FiltroCobrancaAcao();
				filtroCobrancaAcao.adicionarParametro(new ParametroSimples(FiltroCobrancaAcao.ID, idCobrancaAcao));
				filtroCobrancaAcao.adicionarCaminhoParaCarregamentoEntidade(FiltroCobrancaAcao.DOCUMENTO_TIPO);
				filtroCobrancaAcao.adicionarCaminhoParaCarregamentoEntidade(FiltroCobrancaAcao.SERVICO_TIPO);
				
				colecaoCobrancaAcao = this.getControladorUtil().pesquisar(
					filtroCobrancaAcao, CobrancaAcao.class.getName());
				
				CobrancaAcao cobrancaAcao = (CobrancaAcao) 
					Util.retonarObjetoDeColecao(colecaoCobrancaAcao);
				
				if (cobrancaAcao != null) {

					// Item 3.4
					// verfica se o valor do documento tipo é
					// diferente de nulo
					if (cobrancaAcao.getDocumentoTipo() != null) {

						// caso a atividade da ação de cobrança
						// correspondente a
						// encerrar esteja comandada e a data
						// prescita para o
						// encerramento seja igual ou menor do
						// que a data
						// corrente

						Collection colecaoCobrancaDocumantoParaAtualizar = null;
						
						// caso o id do serviço tipo seja diferente de nulo então
						// pode ter OS e é verificado as os dos documentos de
						// cobrança
						if (cobrancaAcao.getServicoTipo() != null) {
							long t1 = System.currentTimeMillis();
//							colecaoCobrancaDocumantoParaAtualizar = this
//									.gerarColecaoDocumentoCobrancaOrdemServico(
//											cobrancaAcao,
//											dataRealizacaoAtividadeEncerrar,
//											usuarioLogado,
//											idCobrancaAtividadeAcaoCronogramaEmitir, ConstantesSistema.NUMERO_NAO_INFORMADO);
							logPerformance("UC478.    gerarColecaoDocumentoCobrancaOrdemServico." +
									idCobrancaAtividadeAcaoCronogramaEmitir, t1, System.currentTimeMillis());
							
							if ( !Util.isVazioOrNulo(colecaoCobrancaDocumantoParaAtualizar)) {
								// grava no banco as COBRANCA_DOCUMENTO
								repositorioCobranca
										.atualizarCobrancaDocumento(colecaoCobrancaDocumantoParaAtualizar);
							}
						}
					}
				}
			}
			getControladorBatch().encerrarUnidadeProcessamentoBatch(null,
					idUnidadeIniciada, false);
			
			System.out.println("########## FINALIZADO EM  = " + new Date());

		}catch (Exception e) {
			// Este catch serve para interceptar qualquer exceção que o processo
			// batch venha a lançar e garantir que a unidade de processamento do
			// batch será atualizada com o erro ocorrido
			e.printStackTrace();

			getControladorBatch().encerrarUnidadeProcessamentoBatch(e,
					idUnidadeIniciada, true);

			throw new EJBException(e);
		}		
	}
	
	/**
	 * [UC478 -  GERAR RESUMO DE ACOES DE COBRANCA]
	 * Atualizar a situacao do item do documento de cobranca a partir de um pagamento realizado
	 * @param pagamento
	 * 
	 * @author Francisco do Nascimento
	 * @date 28/05/2008
	 * 
	 */
	public void atualizarSituacaoCobrancaDocumentoItemAPartirPagamento(Pagamento pagamento, 
			Integer idCobrancaDebitoSituacao) throws ControladorException {

		Integer idConta = pagamento.getContaGeral() != null ? pagamento.getContaGeral().getId() : null;
		Integer idDebitoACobrar = pagamento.getDebitoACobrarGeral() != null ? 
				pagamento.getDebitoACobrarGeral().getId() : null;
		Integer idGuiaPagamento = pagamento.getGuiaPagamento() != null ? 
				pagamento.getGuiaPagamento().getId() : null;
		
		try {
			// Atualizar item documento de cobranca da conta, se houver, para cancelado
			repositorioCobranca.atualizarSituacaoCobrancaDocumentoItem(idCobrancaDebitoSituacao,
					new Date(), idConta, idGuiaPagamento, idDebitoACobrar);
		} catch (ErroRepositorioException ex) {
			sessionContext.setRollbackOnly();
			new ControladorException("erro.sistema", ex);
		}	
	}
	
	/**
	 * 
	 * Este caso de uso permite gerar o resumo das ações de cobrança com a
	 * atividade emitir já realizada e a atividade encerrar ainda não realizada
	 * e realizar a atividade encerrar das ações que estejam comandadas.
	 *
	 * Versao Reduzida: Foi retirado do escopo deste metodo, a busca de dados para
	 * atualizar a situacao da acao do documento de cobranca 
	 * e situacao dos debitos dos itens do documento de cobranca, considerando
	 * que estes foram atualizados nos casos de usos:
	 *  [UC    ] Encerrar OS
	 *  [UC    ] Informar Retorno de fiscalizacao
	 *  [UC    ] Cancelar Conta
	 *  [UC    ] Desfazer cancelamento de conta
	 *  [UC    ] Efetuar Parcelamento de Débitos
	 *  [UC    ] Remover Parcelamento
	 *  [UC    ] Inserir Pagamento
	 *  [UC    ] Remover Pagamento
	 *  [UC    ] Registrar movimento de arrecadores
	 *  
	 * [UC0478] Gerar Resumo das Ações de Cobrança do Cronograma
	 * 
	 * [SB0001] - Processar Documento de Cobrança
	 * 
	 * @author Rafael Santos, Pedro Alexandre,Sávio Luiz, Francisco do Nascimento, Anderson Italo
	 * @date 16/10/2006, 19/01/2007, 25/05/2007, 28/05/2008, 29/05/2009, 25/02/2010
	 * 
	 */		
	private void processarDocumentoCobrancaVersaoReduzida(
			int idCobrancaAtividadeAcaoCronogramaEmitir,
			int idCobrancaAtividadeAcaoComandoEmitir,
			CobrancaAcao cobrancaAcao, 
			Usuario usuarioLogado,
			Date dataRealizacaoAtividadeEncerrar,
			Date dataComandoAtividadeEncerrar,
			Date dataPrevistaAtividadeEncerrar) throws ControladorException {

		try {
			Collection colecaoCobrancaDocumentoParaAtualizar = null;
			// Item 1
			// COBRANCA_DOCUMENTO com CAAC_ID igual a
			// idCobrancaAtividadeAcaoCronogramaEmitir
			
			// caso o id do serviço tipo seja diferente de nulo então
			// pode ter OS e é verificado as os dos documentos de cobrança
			colecaoCobrancaDocumentoParaAtualizar = this.repositorioCobranca
				.pesquisarCobrancaDocumentoResumoAcaoCobranca(idCobrancaAtividadeAcaoCronogramaEmitir, 
					idCobrancaAtividadeAcaoComandoEmitir);				
			

			HashtableCache cacheCriterios = new HashtableCache("criterioCobranca");
			
			// para cada documento de cobrança
			if (colecaoCobrancaDocumentoParaAtualizar != null
					&& !colecaoCobrancaDocumentoParaAtualizar.isEmpty()) {
				Iterator iteratorCobrancaDocumantoParaAtualizar = null;

				iteratorCobrancaDocumantoParaAtualizar = colecaoCobrancaDocumentoParaAtualizar.iterator();
				
				while (iteratorCobrancaDocumantoParaAtualizar.hasNext()) {

					Integer idCobrancaDocumento = null;
					Integer idImovel = null;
					BigDecimal valorLimitePrioridade = null;
					BigDecimal valorDocumento = null;
					Integer idCobrancaCriterio = null;
					
					DadosPesquisaCobrancaDocumentoHelper cobrancaDocumentoParaAtualizar = 
						(DadosPesquisaCobrancaDocumentoHelper) iteratorCobrancaDocumantoParaAtualizar.next();
					
					idCobrancaDocumento = cobrancaDocumentoParaAtualizar.getIdDocumento();
					idImovel = cobrancaDocumentoParaAtualizar.getIdImovel();					

					// Consultando criterio de cobranca... usando cache, pois ha muita repeticao de criterios
					idCobrancaCriterio = cobrancaDocumentoParaAtualizar.getIdCobrancaCriterio();

					if (cobrancaAcao.getServicoTipo() != null) {
						
						// Atribuir o valor AÇÃO PENDENTES à situação de Cobrança
						if (cobrancaDocumentoParaAtualizar.getIdSituacaoAcao() == null){
							cobrancaDocumentoParaAtualizar.setIdSituacaoAcao(CobrancaAcaoSituacao.PENDENTE);							
						}						
						
					} else {
				
						// atualiza os campos para serem utilizados para atualização
						// e consulta de dados da cobrança documento
						// Atribuir o valor AÇÃO ENVIADOS à situação de Cobrança
						if (cobrancaDocumentoParaAtualizar.getIdSituacaoAcao() == null){
							cobrancaDocumentoParaAtualizar.setIdSituacaoAcao(CobrancaAcaoSituacao.ENVIADOS);
							
						}						
					}
					
					if (idImovel != null){
						
						if (cobrancaDocumentoParaAtualizar.getIdCategoria() == null){
							
							// [UC0306] - Obter Principal CAtegoria do Imovel
							// De acordo com o metodo ControladorImovel.obterPrincipalCategoriaImovel
							// caso seja a empresa FEBRABAN, a categoria principal sera a que tiver o maior codigo,
							// caso contrario, a principal será a que tiver menor codigo						
							SistemaParametro sistemaParametro = getControladorUtil().pesquisarParametrosDoSistema();
							boolean ehFEBRABAN = sistemaParametro.getCodigoEmpresaFebraban().equals(
									SistemaParametro.CODIGO_EMPRESA_FEBRABAN_CAERN); 
							Integer idCategoria = repositorioImovel.obterIdCategoriaPrincipal(
									idImovel, ehFEBRABAN);
							
							cobrancaDocumentoParaAtualizar.setIdCategoria(idCategoria);
						}
						
						if (cobrancaDocumentoParaAtualizar.getIdEsferaPoder() == null){
							// pesquisa os imovel para ser usado para gravar o
							// Resumo Cobrança Ação						
							Integer idEsferaPoder = repositorioImovel.obterIdEsferaPoder(idImovel);
							
							cobrancaDocumentoParaAtualizar.setIdEsferaPoder(idEsferaPoder);
						}
						
					}
					
					// Consultando criterio de cobranca... usando cache, pois ha muita repeticao de criterios
					if (idCobrancaCriterio != null){
						CobrancaCriterio cobrancaCriterio = null;
						Object objCache = cacheCriterios.get(idCobrancaCriterio);
						if (objCache == null){
							FiltroCobrancaCriterio filtroCriterio = new FiltroCobrancaCriterio();
							filtroCriterio.adicionarParametro(new ParametroSimples(
									FiltroCobrancaCriterio.ID,	idCobrancaCriterio));
							Collection retorno = repositorioUtil.pesquisar(filtroCriterio, CobrancaCriterio.class.getName());
							cobrancaCriterio = (CobrancaCriterio) Util.retonarObjetoDeColecao(retorno);
							cacheCriterios.put(idCobrancaCriterio, cobrancaCriterio);
						} else {
							cobrancaCriterio = (CobrancaCriterio) objCache;
						}
						
						cobrancaDocumentoParaAtualizar.setPercentualValorMinimoCobrancaCriterio(cobrancaCriterio
								.getPercentualValorMinimoPagoParceladoCancelado()); 
						cobrancaDocumentoParaAtualizar.setPercentualQuantidadeMinimaCobrancaCriterio(
								cobrancaCriterio.getPercentualQuantidadeMinimoPagoParceladoCancelado());
						cobrancaDocumentoParaAtualizar.setValorLimitePrioridadeCobrancaCriterio(
								cobrancaCriterio.getValorLimitePrioridade());
						valorLimitePrioridade = cobrancaCriterio.getValorLimitePrioridade();
					}
					
					valorDocumento = cobrancaDocumentoParaAtualizar.getValorDocumento(); 

					// indicador acima do limite
					Short indicadorAcimaLimite = null;
					if (valorDocumento != null && valorLimitePrioridade != null
							&& valorDocumento.compareTo(valorLimitePrioridade) > 0) {
						indicadorAcimaLimite = new Short("1");
					} else {
						indicadorAcimaLimite = new Short("2");
					}

					cobrancaDocumentoParaAtualizar.setIcAcimaLimite(indicadorAcimaLimite);
					

					// 2.2 Seleciona os itens do documento de cobrança
					Collection colecaoCobrancaDocumentoItem = null;
					// COBRANCA_DOCUMENTO_ITEM por CBDO_ID igual a idCobrancaDocmento
					colecaoCobrancaDocumentoItem = this.repositorioCobranca
						.pesquisarDadosCobrancaDocumentoItemSituacaoJaAtualizada(idCobrancaDocumento);

					// [SB0003] - Determinar Situação de Débtio do Item de Cobrança
					if (colecaoCobrancaDocumentoItem != null
							&& !colecaoCobrancaDocumentoItem.isEmpty()) {
						processarCobrancaDocumentoItemComItensJaAtualizados(
							colecaoCobrancaDocumentoItem,cobrancaDocumentoParaAtualizar,cobrancaAcao);
					} else {
						cobrancaDocumentoParaAtualizar.setIdSituacaoDebito(CobrancaDebitoSituacao.SEM_DEBITOS);
					}
					
//					if (cobrancaAcao.getServicoTipo() == null) {
//						colecaoCobrancaDocumentoParaAtualizar
//							.add(cobrancaDocumentoParaAtualizar);
//					}

				}// fim do while da Colecao Cobranca Documentos
				
				colecaoCobrancaDocumentoParaAtualizar = this
				.gerarColecaoDocumentoCobrancaOrdemServico(
						cobrancaAcao,
						dataRealizacaoAtividadeEncerrar,
						usuarioLogado,
						colecaoCobrancaDocumentoParaAtualizar, 
						dataPrevistaAtividadeEncerrar,
						dataComandoAtividadeEncerrar);		

				
				if(dataRealizacaoAtividadeEncerrar != null){
					//adicionado por Vivianne Sousa - 14/12/2009 - analista:Chico
					//deleta os documentos de cobranca impressão pelo idCobrancaAtividadeAcaoComando 
					//ou pelo idCobrancaAtividadeAcaoCronograma 
					repositorioCobranca.deletarDocumentoCobrancaImpressao(
					idCobrancaAtividadeAcaoComandoEmitir,idCobrancaAtividadeAcaoCronogramaEmitir);
				}
				
				if (!colecaoCobrancaDocumentoParaAtualizar.isEmpty()) {
					// grava no banco as COBRANCA_DOCUMENTO
					repositorioCobranca.atualizarCobrancaDocumento(colecaoCobrancaDocumentoParaAtualizar);
				}

				// seta null para o GC liberar
				colecaoCobrancaDocumentoParaAtualizar.clear();
				colecaoCobrancaDocumentoParaAtualizar = null;
			}

			// } else {
			// flagTerminou = true;
			// }
			cacheCriterios.clear();
			// }

		} catch (Exception ex) {
			ex.printStackTrace();
			throw new ControladorException("erro.sistema", ex);
		}
	}
	
	/**
	 * 
	 * Este caso de uso permite gerar o resumo das ações de cobrança com a
	 * atividade emitir já realizada e a atividade encerrar ainda não realizada
	 * e realizar a atividade encerrar das ações que estejam comandadas.
	 *
	 * Este método processar os itens de documento de cobranca 
	 * considerando que estes foram atualizados nos casos de usos:
	 *  [UC    ] Encerrar OS
	 *  [UC    ] Informar Retorno de fiscalizacao
	 *  [UC    ] Cancelar Conta
	 *  [UC    ] Desfazer cancelamento de conta
	 *  [UC    ] Efetuar Parcelamento de Débitos
	 *  [UC    ] Remover Parcelamento
	 *  [UC    ] Inserir Pagamento
	 *  [UC    ] Remover Pagamento
	 *  [UC    ] Registrar movimento de arrecadores
	 *  
	 * [UC0478] Gerar Resumo das Ações de Cobrança do Cronograma
	 * 
	 * [SB0002] - Processar Documento de Cobrança Item
	 * 
	 * @author Rafael Santos, Pedro Alexandre,Sávio Luiz, Francisco do Nascimento
	 * @date 16/10/2006, 19/01/2007, 25/05/2007, 28/05/2008
	 * 
	 */	
	protected void processarCobrancaDocumentoItemComItensJaAtualizados(
			Collection colecaoCobrancaDocumentoItem,
			DadosPesquisaCobrancaDocumentoHelper cobrancaDocumentoParaAtualizar,
			CobrancaAcao cobrancaAcao)
			throws ControladorException {
		try {

			// coleção com as situação de debitos acumuladas
			Collection<GerarResumoAcoesCobrancaCronogramaHelper> colecaoGerarResumoAcoesCobrancaCronogramaHelper = new ArrayList();

			if (colecaoCobrancaDocumentoItem != null
					&& !colecaoCobrancaDocumentoItem.isEmpty()) {
				Iterator iteratorColecaoCobrancaDocumentoItem = colecaoCobrancaDocumentoItem
						.iterator();

				Object[] dadosCobrancaDocumentoItem = null;
				while (iteratorColecaoCobrancaDocumentoItem.hasNext()) {
					dadosCobrancaDocumentoItem = (Object[]) iteratorColecaoCobrancaDocumentoItem
							.next();

					BigDecimal valorItemCobrado = (BigDecimal) dadosCobrancaDocumentoItem[1];
					valorItemCobrado = valorItemCobrado == null ? new BigDecimal("0.0") : valorItemCobrado;
					// [SB0004] - Atualizar o Resumo da Acao de Cobrancao com os dados do Item do Documento de
					// Cobrança
					if (dadosCobrancaDocumentoItem[2] != null){
						this.atualizarItemDocumentoCobranca(
								(Integer) dadosCobrancaDocumentoItem[2], // id da situacao do debito
								valorItemCobrado, // valor do item cobrado
								(Date) dadosCobrancaDocumentoItem[3], // data situacao do debito
								colecaoGerarResumoAcoesCobrancaCronogramaHelper);						
					} else {
						this
						.atualizarItemDocumentoCobranca(
								CobrancaDebitoSituacao.PENDENTE,
								valorItemCobrado, null,
								colecaoGerarResumoAcoesCobrancaCronogramaHelper);						
					}

				}
								
			}
			
			// 2.3 Determinar a Situação
			determinarSituacaoDocumentoCobranca(colecaoGerarResumoAcoesCobrancaCronogramaHelper,
					cobrancaDocumentoParaAtualizar, cobrancaAcao);
			
		} catch (Exception ex) {
			ex.printStackTrace();
			throw new ControladorException("erro.sistema", ex);
		}

//		return cobrancaDocumentoParaAtualizar;			
	}
	
	
	 /* [UC0478] Gerar Resumo das Ações de Cobrança do Cronograma
	 * 
	 * [SB0004] Determinar Situação Predominante do Débito do Documento de Cobrança
	 * 
	 * @author Rafael Santos, Pedro Alexandre,Sávio Luiz, Francisco do Nascimento
	 * @date 16/10/2006, 19/01/2007, 25/05/2007, 28/05/2008
	 * 
	 */	
	private void determinarSituacaoDocumentoCobranca(
			Collection<GerarResumoAcoesCobrancaCronogramaHelper> colecaoGerarResumoAcoesCobrancaCronogramaHelper,
			DadosPesquisaCobrancaDocumentoHelper cobrancaDocumentoParaAtualizar,
			CobrancaAcao cobrancaAcao) throws ControladorException{
		if (colecaoGerarResumoAcoesCobrancaCronogramaHelper != null
				&& !colecaoGerarResumoAcoesCobrancaCronogramaHelper
						.isEmpty()) {
			// [SB0005] - Determinar Situação Predominante do
			// Débito
			// do
			// Documento de Cobrança

			Iterator iteratorColecaoGerarResumoAcoesCobrancaCronogramaHelper = colecaoGerarResumoAcoesCobrancaCronogramaHelper
					.iterator();
			// quantidade total de todas as ocorrencias
			int quantidadeTotalOcorrencia = 0;
			// Valor total acumulado de todas situações de
			// debito
			BigDecimal valorTotalAcumulado = new BigDecimal("0.00");
			
			BigDecimal percValorMinimoPagoParceladoCancelado = cobrancaDocumentoParaAtualizar
				.getPercentualValorMinimoCobrancaCriterio();
			BigDecimal percQuantidadeMinimaPagoParceladoCancelado = cobrancaDocumentoParaAtualizar
				.getPercentualQuantidadeMinimaCobrancaCriterio();
			// Situação PAGO
			BigDecimal valorSituacaoPago = null;
			BigDecimal quantidadeSituacaoPago = null;
			Date dataSituacaoPago = null;

			// Situação PARCELADO
			BigDecimal valorSituacaoParcelado = null;
			Date dataSituacaoParcelado = null;

			// Situação CANCELADO
			BigDecimal valorSituacaoCancelado = null;
			BigDecimal quantidadeSituacaoCancelado = null;
			Date dataSituacaoCancelado = null;

			// flag para saber se so existe situação pendente
			boolean existeAlgumSituacaoPendente = false;

			while (iteratorColecaoGerarResumoAcoesCobrancaCronogramaHelper
					.hasNext()) {
				GerarResumoAcoesCobrancaCronogramaHelper gerarResumoAcoesCobrancaCronogramaHelper = (GerarResumoAcoesCobrancaCronogramaHelper) iteratorColecaoGerarResumoAcoesCobrancaCronogramaHelper
						.next();

				// se a situação for DEBITO PAGO
				if (gerarResumoAcoesCobrancaCronogramaHelper
						.getIdSituacaoDebito() == CobrancaDebitoSituacao.PAGO
						.intValue()) {
					valorSituacaoPago = gerarResumoAcoesCobrancaCronogramaHelper
							.getValorItemCobrado();
					quantidadeSituacaoPago = new BigDecimal(
							gerarResumoAcoesCobrancaCronogramaHelper
									.getQuantidadeOcorrenciaSituacaoDebito());
					dataSituacaoPago = gerarResumoAcoesCobrancaCronogramaHelper
							.getDataSituacaoDebito();

					// se a situação for DEBITO PARCELADO
				} else if (gerarResumoAcoesCobrancaCronogramaHelper
						.getIdSituacaoDebito() == CobrancaDebitoSituacao.PARCELADO
						.intValue()) {
					valorSituacaoParcelado = gerarResumoAcoesCobrancaCronogramaHelper
							.getValorItemCobrado();
					dataSituacaoParcelado = gerarResumoAcoesCobrancaCronogramaHelper
							.getDataSituacaoDebito();

					// se a situação for DEBITO CANCELADO
				} else if (gerarResumoAcoesCobrancaCronogramaHelper
						.getIdSituacaoDebito() == CobrancaDebitoSituacao.CANCELADO
						.intValue()) {
					valorSituacaoCancelado = gerarResumoAcoesCobrancaCronogramaHelper
							.getValorItemCobrado();
					quantidadeSituacaoCancelado = new BigDecimal(
							gerarResumoAcoesCobrancaCronogramaHelper
									.getQuantidadeOcorrenciaSituacaoDebito());
					dataSituacaoCancelado = gerarResumoAcoesCobrancaCronogramaHelper
							.getDataSituacaoDebito();
				} else {
					// caso não seja nenhuma situação então
					existeAlgumSituacaoPendente = true;
				}
				// acumula o total das quantidade de ocorrencia
				quantidadeTotalOcorrencia = quantidadeTotalOcorrencia
						+ gerarResumoAcoesCobrancaCronogramaHelper
								.getQuantidadeOcorrenciaSituacaoDebito();

				// acumula o total acumulado das situações de
				// debito
				valorTotalAcumulado = valorTotalAcumulado
						.add(gerarResumoAcoesCobrancaCronogramaHelper
								.getValorItemCobrado());
			}

			// flag para saber se antender a alguma das
			// situçãoes de PAGO/PARCELADO/CANCELADO
			boolean atenderAlgumaSituacao = false;


			// Novos Criterios para a atribuicao da situacao do debito - 16/06/08 - Francisco / Ana Breda
			// Caso o documento apresente ALGUM item PARCELADO 
			//     Caso nao exista nenhum item PENDENTE -> atribuir PARCELADO
			//     Caso contrario -> atribuir PENDENTE 
			// Caso contrario
			//     caso o documento apresente a porcentagem minima de itens ou valor pagos -> Atribuir PAGO
			//     Caso contrario
			//         Caso o documento apresente a porcentagem minima de seus itens ou de valor cancelados -> Atribuir CANCELADO
			//         Caso contrario -> atribuir PENDENTE
			//////////////////////////////////////////////////////////////////////////
			// Caso o documento apresente ALGUM item PARCELADO 
			//     Caso nao exista nenhum item PENDENTE -> atribuir PARCELADO
			//     Caso contrario -> atribuir PENDENTE
			if (valorSituacaoParcelado != null) {

				// Foi considerado que para o caso de parcelado nao precisa verificar
				// a quantidade minima de itens ou o valor minimo, pois o parcelamento sempre pega tudo
				// e eh considerado parcelado quando a entrada estah paga, por isso as situacoes
				// possiveis sao: ITENS PARCELADOS E (PENDENTES OU PAGOS, que sao as entradas)
				if (!existeAlgumSituacaoPendente){
					
					boolean houvePagamento = getControladorArrecadacao().
						verificarExistenciaPagamentoEntradaParcelamento(
							cobrancaDocumentoParaAtualizar.getIdImovel(), dataSituacaoParcelado);
					if (houvePagamento){
						// atribuir a situação DÉBITO PARCELADO
						cobrancaDocumentoParaAtualizar.setIdSituacaoDebito(CobrancaDebitoSituacao.PARCELADO);
						cobrancaDocumentoParaAtualizar.setDataSituacaoDebito(dataSituacaoParcelado);
						atenderAlgumaSituacao = true;													
					}
				} else {
					// atribuir a situação do debito PENDENTE
					cobrancaDocumentoParaAtualizar.setIdSituacaoDebito(CobrancaDebitoSituacao.PENDENTE);
					cobrancaDocumentoParaAtualizar.setDataSituacaoDebito(null);
					atenderAlgumaSituacao = true;												
				}
			} else {			
			
				if (percValorMinimoPagoParceladoCancelado != null) {
					// 2. Calcula o valor minimo para considerar
					// o
					// documento pago/parcelado/cancelado

					// valor minimo pago parcelado canccelado,
					// CBCT_PCVLMINIMOPGPARCCANC

					BigDecimal resultadoValorMinimo = percValorMinimoPagoParceladoCancelado
							.divide(new BigDecimal("100.00"), 7,
									BigDecimal.ROUND_HALF_UP);
					resultadoValorMinimo = resultadoValorMinimo
							.multiply(valorTotalAcumulado);

					// arredonda o valor
					BigDecimal valorMinimo = resultadoValorMinimo.setScale(
							2, BigDecimal.ROUND_HALF_UP);

					// 3. Calcula a quantidade minima de itens
					// para
					// considerar o documento
					// pago/parcelado/cancelado

					// quantidade minimo pago parcelado
					// cancelado,
					// CBCT_PCQTMINIMOPGPARCCANC

					BigDecimal resultadoQuantidadeMinima = percQuantidadeMinimaPagoParceladoCancelado
							.divide(new BigDecimal("100.00"), 7,
									BigDecimal.ROUND_HALF_UP);
					resultadoQuantidadeMinima = resultadoQuantidadeMinima
							.multiply(new BigDecimal(
									quantidadeTotalOcorrencia));

					// arredonda o valor
					BigDecimal quantidadeMinima = resultadoQuantidadeMinima
							.setScale(2, BigDecimal.ROUND_HALF_UP);

					// caso tenha situação DÉBITO PAGO
					if (valorSituacaoPago != null) {

						// se o valor do pago ou a quantidade
						// maior ou igual aos seus respectivos minimos
						if ((valorSituacaoPago.compareTo(valorMinimo) >= 0)
								|| (quantidadeSituacaoPago.compareTo(quantidadeMinima) >= 0)) {
							// atribuir a situação DÉBITO PAGO
							cobrancaDocumentoParaAtualizar.setIdSituacaoDebito(CobrancaDebitoSituacao.PAGO);
							cobrancaDocumentoParaAtualizar.setDataSituacaoDebito(dataSituacaoPago);
							atenderAlgumaSituacao = true;
						}
					// caso tenha situação DÉBITO CANCELADO
					} else if (valorSituacaoCancelado != null) {

						// se o valor do cancelado ou a quantidade
						// maior ou igual oas seus respectivos minimos
						if ((valorSituacaoCancelado.compareTo(valorMinimo) >= 0)
								|| (quantidadeSituacaoCancelado
										.compareTo(quantidadeMinima) >= 0)) {
							// atribuir a situação DÉBITO CANCELADO
							cobrancaDocumentoParaAtualizar.setIdSituacaoDebito(CobrancaDebitoSituacao.CANCELADO);
							cobrancaDocumentoParaAtualizar.setDataSituacaoDebito(dataSituacaoCancelado);
							atenderAlgumaSituacao = true;
						}

					}

				}
			}

			// se não antender as condições acima de
			// PAGO/PARCELADO/CANCELADO, sera DÉBITO
			// PENDENTE
			if (!(atenderAlgumaSituacao)) {
				// atribuir a situção DÉBITO PENDENTE
				cobrancaDocumentoParaAtualizar.setIdSituacaoDebito(CobrancaDebitoSituacao.PENDENTE);
				cobrancaDocumentoParaAtualizar.setDataSituacaoDebito(null);
			} else {
				/*
				 * Alterado por Francisco em 29/05/09, analista Ana Breda 
				 * refere-se ao [SB0004]
				 */
				if (cobrancaAcao.getServicoTipo() != null
					&& (cobrancaDocumentoParaAtualizar.getIdSituacaoAcao() == null
						|| cobrancaDocumentoParaAtualizar.getIdSituacaoAcao().intValue() == CobrancaAcaoSituacao.PENDENTE)
					&& cobrancaAcao.getIndicadorDebitoInterfereAcao() != null 
					&& cobrancaAcao.getIndicadorDebitoInterfereAcao().intValue() == ConstantesSistema.SIM.intValue()){
					
					Integer idSituacaoAcao = null;
					
//					Short motivoEncerramento = AtendimentoMotivoEncerramento.SUSPENSA_PAG_PARC_CANC_DO_DEBITO;
//					
//					this.encerrarOSPeloResumoAcaoCobranca(cobrancaDocumentoParaAtualizar.getIdOrdemServico(), 
//							cobrancaDocumentoParaAtualizar.getIdLocalidade(), motivoEncerramento);

					/*
					 * 
					 * caso a acao nao tenha limite de dias para pagamento de terceiros
					 *     CAST  = acao suspensa por pag/canc/parc
					 * caso contrario, 
					 *    caso o intervalo de dias entre a data da situacao do debito e a data de emissao 
					 *    seja menor que o limite de dias para pagamento de terceiros
					 *    	  CAST = acao suspensa por pag/canc/parc até
					 *    caso contrario
					 *        CAST = acao suspensa por pag/canc/parc após
					 */
					if (cobrancaAcao.getNumeroDiasRemuneracaoTerceiro() == null){
						idSituacaoAcao = CobrancaAcaoSituacao.SUSPENSA_POR_PAG_PARC_CANC;
					} else {
						
						if (cobrancaDocumentoParaAtualizar.getDataSituacaoDebito() != null &&
								cobrancaDocumentoParaAtualizar.getDataEmissao() != null){
							
							if (Math.abs(Util.obterQuantidadeDiasEntreDuasDatas(cobrancaDocumentoParaAtualizar.getDataEmissao(),
									cobrancaDocumentoParaAtualizar.getDataSituacaoDebito())) <= cobrancaAcao.getNumeroDiasRemuneracaoTerceiro().intValue()){
								idSituacaoAcao = CobrancaAcaoSituacao.SUSPENSA_POR_PAG_PARC_CANC_ATE;		
							} else {
								idSituacaoAcao = CobrancaAcaoSituacao.SUSPENSA_POR_PAG_PARC_CANC_APOS;
							}
							
						}
						
					}

					cobrancaDocumentoParaAtualizar.setIdSituacaoAcao(idSituacaoAcao);
				}
				/*
				 * Fim de alteracao de Francisco, 29/05/09
				 */
			}
			
		}// fim do 2.3 Determinar a Situação
		
		
		Date dataSituacaoAcao = cobrancaDocumentoParaAtualizar.getDataSituacaoAcao();
		Date dataSituacaoDebito = cobrancaDocumentoParaAtualizar.getDataSituacaoDebito();

		// retira a hora das datas
		if (dataSituacaoAcao != null && dataSituacaoDebito != null) {
			dataSituacaoAcao = Util.formatarDataSemHora(dataSituacaoAcao);
			dataSituacaoDebito = Util
					.formatarDataSemHora(dataSituacaoDebito);
		}

		// verifica o valor do indicador antes apos
		Short indicadorAntesApos = null;
		if (dataSituacaoAcao != null && dataSituacaoDebito != null) {
			// data da situação da ação de cobrança seja
			// anterior a
			// data da situação do débito
			if (dataSituacaoAcao.after(dataSituacaoDebito)) {
				indicadorAntesApos = new Short("1");
			} else {
				indicadorAntesApos = new Short("2");
			}
		}

		cobrancaDocumentoParaAtualizar.setIcAntesDepois(indicadorAntesApos);		

		
	}
	
	/**
	 * Consulta as contas transferidas
	 * 
	 * [UC0204] - Consultar Transferências do Débito
	 * 
	 * @author Rafael Corrêa
	 * @date 22/08/2008
	 */
	public Collection<TransferenciasDebitoHelper> consultarContasTransferidas(ConsultarTransferenciasDebitoHelper consultarTransferenciasDebitoHelper)
			throws ControladorException {
		
		Collection<TransferenciasDebitoHelper> retorno = null;
		
		Collection<Object[]> colecaoDados = null;
		
		try {
			colecaoDados = repositorioCobranca.consultarContasTransferidas(consultarTransferenciasDebitoHelper);
		} catch (ErroRepositorioException ex) {
			throw new ControladorException("erro.sistema", ex);
		}
		
		if (colecaoDados != null){
			
			retorno = new ArrayList();
			
			for (Object[] dados : colecaoDados) {
				
				TransferenciasDebitoHelper transferenciasDebitoHelper = new TransferenciasDebitoHelper();
				Conta conta = new Conta();
				
				// Ano/Mês de Referência da Conta
				if (dados[0] != null) {
					conta.setReferencia((Integer) dados[0]);
				}
				
				// Imóvel Origem
				if (dados[1] != null) {
					Imovel imovelOrigem = new Imovel();
					imovelOrigem.setId((Integer) dados[1]);
					
					transferenciasDebitoHelper.setImovelOrigem(imovelOrigem);
				}
				
				// Imóvel Destino
				if (dados[2] != null) {
					Imovel imovelDestino = new Imovel();
					imovelDestino.setId((Integer) dados[2]);
					
					transferenciasDebitoHelper.setImovelDestino(imovelDestino);
				}
				
				// Usuário
				if (dados[3] != null) {
					Usuario usuario = new Usuario();
					usuario.setNomeUsuario((String) dados[3]);
					
					transferenciasDebitoHelper.setUsuario(usuario);
				}
				
				// Data da Transferência
				if (dados[4] != null) {
					Date dataTransferencia = new Date( ((Timestamp) dados[4]).getTime() );
					transferenciasDebitoHelper.setDataTransferencia(dataTransferencia);
				}
				
				// Id da Conta
				if (dados[5] != null) {
					conta.setId((Integer) dados[5]);
				}
				
				transferenciasDebitoHelper.setConta(conta);
				
				retorno.add(transferenciasDebitoHelper);
				
			}
		}
		
		 return retorno;
	}
	
	/**
	 * Consulta os débitos a cobrar transferidos
	 * 
	 * [UC0204] - Consultar Transferências do Débito
	 * 
	 * @author Rafael Corrêa
	 * @date 22/08/2008
	 */
	public Collection<TransferenciasDebitoHelper> consultarDebitosACobrarTransferidos(ConsultarTransferenciasDebitoHelper consultarTransferenciasDebitoHelper)
			throws ControladorException {
		
		Collection<TransferenciasDebitoHelper> retorno = null;
		
		Collection<Object[]> colecaoDados = null;
		
		try {
			colecaoDados = repositorioCobranca.consultarDebitosACobrarTransferidos(consultarTransferenciasDebitoHelper);
		} catch (ErroRepositorioException ex) {
			throw new ControladorException("erro.sistema", ex);
		}
		
		if (colecaoDados != null){
			
			retorno = new ArrayList();
			
			for (Object[] dados : colecaoDados) {
				
				TransferenciasDebitoHelper transferenciasDebitoHelper = new TransferenciasDebitoHelper();
				DebitoACobrar debitoACobrar = new DebitoACobrar();
				
				// Tipo do Débito
				if (dados[0] != null) {
					DebitoTipo debitoTipo = new DebitoTipo();
					debitoTipo.setDescricao((String) dados[0]);
					
					debitoACobrar.setDebitoTipo(debitoTipo);
				}
				
				// Imóvel Origem
				if (dados[1] != null) {
					Imovel imovelOrigem = new Imovel();
					imovelOrigem.setId((Integer) dados[1]);
					
					transferenciasDebitoHelper.setImovelOrigem(imovelOrigem);
				}
				
				// Imóvel Destino
				if (dados[2] != null) {
					Imovel imovelDestino = new Imovel();
					imovelDestino.setId((Integer) dados[2]);
					
					transferenciasDebitoHelper.setImovelDestino(imovelDestino);
				}
				
				// Usuário
				if (dados[3] != null) {
					Usuario usuario = new Usuario();
					usuario.setNomeUsuario((String) dados[3]);
					
					transferenciasDebitoHelper.setUsuario(usuario);
				}
				
				// Data da Transferência
				if (dados[4] != null) {
					Date dataTransferencia = new Date( ((Timestamp) dados[4]).getTime() );
					transferenciasDebitoHelper.setDataTransferencia(dataTransferencia);
				}
				
				// Id do Débito a Cobrar
				if (dados[5] != null) {
					debitoACobrar.setId((Integer) dados[5]);
				}
				
				transferenciasDebitoHelper.setDebitoACobrar(debitoACobrar);
				
				retorno.add(transferenciasDebitoHelper);
				
			}
		}
		
		 return retorno;
	}
	
	/**
	 * Consulta as guias de pagamento transferidas
	 * 
	 * [UC0204] - Consultar Transferências do Débito
	 * 
	 * @author Rafael Corrêa
	 * @date 22/08/2008
	 */
	public Collection<TransferenciasDebitoHelper> consultarGuiasDePagamentoTransferidas(ConsultarTransferenciasDebitoHelper consultarTransferenciasDebitoHelper)
			throws ControladorException {

		Collection<TransferenciasDebitoHelper> retorno = null;

		Collection<Object[]> colecaoDados = null;

		try {
			colecaoDados = repositorioCobranca
					.consultarGuiasDePagamentoTransferidas(consultarTransferenciasDebitoHelper);
		} catch (ErroRepositorioException ex) {
			throw new ControladorException("erro.sistema", ex);
		}

		if (colecaoDados != null) {

			retorno = new ArrayList();

			for (Object[] dados : colecaoDados) {

				TransferenciasDebitoHelper transferenciasDebitoHelper = new TransferenciasDebitoHelper();
				GuiaPagamento guiaPagamento = new GuiaPagamento();

				// Tipo do Débito
				if (dados[0] != null) {
					DebitoTipo debitoTipo = new DebitoTipo();
					debitoTipo.setDescricao((String) dados[0]);

					guiaPagamento.setDebitoTipo(debitoTipo);
				}

				// Imóvel Origem
				if (dados[1] != null) {
					Imovel imovelOrigem = new Imovel();
					imovelOrigem.setId((Integer) dados[1]);

					transferenciasDebitoHelper.setImovelOrigem(imovelOrigem);
				}

				// Imóvel Destino
				if (dados[2] != null) {
					Imovel imovelDestino = new Imovel();
					imovelDestino.setId((Integer) dados[2]);

					transferenciasDebitoHelper.setImovelDestino(imovelDestino);
				}

				// Usuário
				if (dados[3] != null) {
					Usuario usuario = new Usuario();
					usuario.setNomeUsuario((String) dados[3]);

					transferenciasDebitoHelper.setUsuario(usuario);
				}
				
				// Data da Transferência
				if (dados[4] != null) {
					Date dataTransferencia = new Date( ((Timestamp) dados[4]).getTime() );
					transferenciasDebitoHelper.setDataTransferencia(dataTransferencia);
				}
				
				// Id da Guia de Pagamento
				if (dados[5] != null) {
					guiaPagamento.setId((Integer) dados[5]);
				}

				transferenciasDebitoHelper.setGuiaPagamento(guiaPagamento);
				
				retorno.add(transferenciasDebitoHelper);

			}
		}

		return retorno;
	}
	
	/**
	 * Consulta os créditos a realizar transferidos
	 * 
	 * [UC0204] - Consultar Transferências do Débito
	 * 
	 * @author Rafael Corrêa
	 * @date 22/08/2008
	 */
	public Collection<TransferenciasDebitoHelper> consultarCreditosARealizarTransferidos(ConsultarTransferenciasDebitoHelper consultarTransferenciasDebitoHelper)
			throws ControladorException {

		Collection<TransferenciasDebitoHelper> retorno = null;

		Collection<Object[]> colecaoDados = null;

		try {
			colecaoDados = repositorioCobranca
					.consultarCreditosARealizarTransferidos(consultarTransferenciasDebitoHelper);
		} catch (ErroRepositorioException ex) {
			throw new ControladorException("erro.sistema", ex);
		}

		if (colecaoDados != null) {

			retorno = new ArrayList();

			for (Object[] dados : colecaoDados) {

				TransferenciasDebitoHelper transferenciasDebitoHelper = new TransferenciasDebitoHelper();
				CreditoARealizar creditoARealizar = new CreditoARealizar();

				// Tipo do Débito
				if (dados[0] != null) {
					CreditoTipo creditoTipo = new CreditoTipo();
					creditoTipo.setDescricao((String) dados[0]);

					creditoARealizar.setCreditoTipo(creditoTipo);
				}

				// Imóvel Origem
				if (dados[1] != null) {
					Imovel imovelOrigem = new Imovel();
					imovelOrigem.setId((Integer) dados[1]);

					transferenciasDebitoHelper.setImovelOrigem(imovelOrigem);
				}

				// Imóvel Destino
				if (dados[2] != null) {
					Imovel imovelDestino = new Imovel();
					imovelDestino.setId((Integer) dados[2]);

					transferenciasDebitoHelper.setImovelDestino(imovelDestino);
				}

				// Usuário
				if (dados[3] != null) {
					Usuario usuario = new Usuario();
					usuario.setNomeUsuario((String) dados[3]);

					transferenciasDebitoHelper.setUsuario(usuario);
				}
				
				// Data da Transferência
				if (dados[4] != null) {
					Date dataTransferencia = new Date( ((Timestamp) dados[4]).getTime() );
					transferenciasDebitoHelper.setDataTransferencia(dataTransferencia);
				}
				
				// Id do Crédito a Realizar
				if (dados[5] != null) {
					creditoARealizar.setId((Integer) dados[5]);
				}

				transferenciasDebitoHelper.setCreditoARealizar(creditoARealizar);
				
				retorno.add(transferenciasDebitoHelper);

			}
		}

		return retorno;
	}
	
	/**
	 * @author Vivianne Sousa
	 * @date 15/07/2008
	 */
	public Collection<Usuario> obterNomeCPFTestemunhas(Integer unidadeUsuario) throws ControladorException{
		
		Collection colecaoUsuario = null;
		Collection colecaoTestemunha = null;
		
		try {
			colecaoTestemunha = repositorioCobranca.obterNomeCPFTestemunhas(unidadeUsuario);
		} catch (ErroRepositorioException ex) {
			throw new ControladorException("erro.sistema", ex);
		}
		
		if (colecaoTestemunha != null){
			
			colecaoUsuario = new ArrayList();
			Iterator iterTestemunha = colecaoTestemunha.iterator();
			Usuario usuario = null;
			
			while (iterTestemunha.hasNext()) {
				
				Object[] testemunha = (Object[]) iterTestemunha.next();
				usuario = new Usuario();
				
				if (testemunha[0] != null){
					usuario.setNomeUsuario((String) testemunha[0]);
				}
				
				if (testemunha[1] != null){
					usuario.setCpf((String) testemunha[1]);
				}
				
				colecaoUsuario.add(usuario);
				
			}
		}
		
		 return colecaoUsuario;
	}

	
	/**
	 * [UC0852] Incluir Débito a Cobrar de Entrada de Parcelamento Não Paga
	 * 
	 * Este caso de uso permite incluir um débito a cobrar da entrada de pagamento não paga.
	 * 
	 * @author Raphael Rossiter
	 * @created 26/08/2008
	 * 
	 * @throws ControladorException
	 */
	public void incluirDebitoACobrarEntradaParcelamentoNaoPaga(
			int idFuncionalidadeIniciada) throws ControladorException {

		int idUnidadeIniciada = 0;

		idUnidadeIniciada = getControladorBatch()
		.iniciarUnidadeProcessamentoBatch(idFuncionalidadeIniciada,
		UnidadeProcessamento.FUNCIONALIDADE, 0);

		//PARCELAMENTOS
		Collection parcelamentosMes = null;
		
		//GUIAS DE PAGAMENTO
		Collection guiaPagamento = null;
		
		//CONTAS
		Collection colecaoConta = null;
		
		//PAGAMENTOS
		Collection pagamento = null;
		
		//PAGAMENTO DAS CONTAS
		Collection pagamentoConta = null;

		try {
			
			//PARÂMETROS DO SISTEMA
			SistemaParametro sistemaParametros = getControladorUtil()
			.pesquisarParametrosDoSistema();

			//Recupera todos os parcelamentos e que esteja com a situacao normal
			parcelamentosMes = repositorioCobranca.pesquisarTodosParcelamentosSituacaoNormal(
			ParcelamentoSituacao.NORMAL.toString());

			if (parcelamentosMes != null && !parcelamentosMes.isEmpty()) {

				Iterator parcelamentosMesIterator = parcelamentosMes.iterator();

				while (parcelamentosMesIterator.hasNext()) {

					// Dados do parcelamento
					Object[] dadosParcelamento = (Object[]) parcelamentosMesIterator.next();
					
					//ID do parcelamento
					Integer numeroParcelamentosMes = (Integer) dadosParcelamento[0];
					Integer idImovel = (Integer) dadosParcelamento[2];

					//Seleciona as guias de pagamento referente à entrada de parcelamento
					guiaPagamento = repositorioCobranca.pesquisarGuiaPagamentoDoParcelamentoPorEntradaNaoPaga(
					numeroParcelamentosMes.toString());

					if (guiaPagamento != null && !guiaPagamento.isEmpty()) {

						Iterator guiaPagamentoIterator = guiaPagamento.iterator();

						while (guiaPagamentoIterator.hasNext()) {

							//Dados da guia de poagamento
							Object[] dadosGuiaPagamento = (Object[]) guiaPagamentoIterator.next();

							//ID da guia de pagamento
							Integer numeroGuiaPagamento = (Integer) dadosGuiaPagamento[0];
							
							//Data de Vencimento da guia de pagamento
							Date dataVencimentoGuia = (Date) dadosGuiaPagamento[1];
							
							//Última data do mês de arrecadação
							//Date dataUltimoDiaArrecadacao = Util.obterUltimaDataMes(Util.obterMes(
							//anoMesReferenciaArrecadacao), Util.obterAno(anoMesReferenciaArrecadacao));
							
							/*
							 * 1.1.1.	Caso não existam pagamentos para a guia de pagamento correspondente 
							 * a entrada do parcelamento e a mesma esteja vencida seja menor ou igual ou anterior à 
							 * data corrente menos a quantidade mínima de dias para início da cobrança da conta 
							 * 
							 * Alterado por Arthur Carvalho, Analista: Rosana Carvalho.
							 * Data: 10/05/2010
							 */
							if (dataVencimentoGuia.compareTo( 
									Util.subtrairNumeroDiasDeUmaData(new Date(), 
											sistemaParametros.getNumeroDiasVencimentoCobranca()) ) <= 0) {

								/*
								 * Seleciona os pagamentos para a guia de pagamento correspondente a 
								 * entrada do parcelamento.
								 */
								pagamento = repositorioCobranca.pesquisarPagamentoParaGuiaPagamentoDoParcelamento(
										numeroGuiaPagamento.toString(),idImovel);

								if (pagamento == null || pagamento.isEmpty()) {

									DebitoACobrarGeral debitoACobrarGeral = new DebitoACobrarGeral();
									debitoACobrarGeral.setIndicadorHistorico(new Short("2"));
									debitoACobrarGeral.setUltimaAlteracao(new Date());
									Integer idDebitoACobrarGeral = (Integer) this.getControladorUtil()
										.inserir(debitoACobrarGeral);
									
									DebitoACobrar debitoACobrar = 
									this.carregarDebitoACobrarEntradaParcelamentoNaoPago(idDebitoACobrarGeral, 
											numeroGuiaPagamento, sistemaParametros);
									
									/*--------------- REGISTRAR TRANSAÇÃO ----------------*/
									RegistradorOperacao registradorOperacao = new RegistradorOperacao(
											Operacao.OPERACAO_DEBITO_A_COBRAR_INSERIR,
											debitoACobrar.getImovel().getId(),debitoACobrar.getId(),
											new UsuarioAcaoUsuarioHelper(Usuario.USUARIO_BATCH,
													UsuarioAcao.USUARIO_ACAO_EFETUOU_OPERACAO));

									registradorOperacao.registrarOperacao(debitoACobrar);
									
									this.getControladorUtil().inserir(debitoACobrar);
									
									//FP 1.1.1.2 <<inclui>> [UC0108] - Obter Quantidade de Economias por Categoria
									Collection colecaoCategorias = getControladorImovel()
											.obterQuantidadeEconomiasCategoria(debitoACobrar.getImovel());
									
									//FP 1.1.1.3 <<inclui>> [UC0185] - Obter Valor por Categoria, passando o valor da taxa
									Collection<BigDecimal> colecaoValorPorCategoria = getControladorImovel()
											.obterValorPorCategoria(colecaoCategorias, debitoACobrar.getValorDebito());
										
									// Cria as iterações de categoria e valor
									Iterator iteratorCategoria = colecaoCategorias.iterator();
									Iterator iteratorValorCategoria = colecaoValorPorCategoria.iterator();

									// Laço para criar os débitos a cobrar por categoria
									while (iteratorCategoria.hasNext()) {
										// Recupera a categoria
										Categoria categoria = (Categoria) iteratorCategoria.next();

										// Recupera o valor da categoria
										BigDecimal valorPorCategoria = (BigDecimal) iteratorValorCategoria.next();

										// Cria o débito a cobrar categoria
										DebitoACobrarCategoria debitoACobrarCategoria = new DebitoACobrarCategoria();
										DebitoACobrarCategoriaPK debitoACobrarCategoriaPK = new DebitoACobrarCategoriaPK(
												debitoACobrar, categoria);
										debitoACobrarCategoria.setComp_id(debitoACobrarCategoriaPK);
										debitoACobrarCategoria.setDebitoACobrar(debitoACobrar);
										debitoACobrarCategoria.setCategoria(categoria);
										debitoACobrarCategoria.setQuantidadeEconomia(categoria
												.getQuantidadeEconomiasCategoria());
										debitoACobrarCategoria.setValorCategoria(valorPorCategoria);
										debitoACobrarCategoria.setUltimaAlteracao(new Date());

										//Inclui na tabela DEBITO_A_COBRAR_CATEGORIA
										getControladorUtil().inserir(debitoACobrarCategoria);
									}

									//[UC0183] Inserir Débito a Cobrar
//									this.getControladorFaturamento().inserirDebitoACobrar(
//									1 , debitoACobrar, null, debitoACobrar.getImovel(), null, null, 
//									Usuario.USUARIO_BATCH);
				
							/*
							 * Fim da Alteração - Arthur Carvalho.
							 */
									
									//Cancelar guia de pagamento
									repositorioCobranca.cancelarGuiaPagamento(numeroGuiaPagamento);
								}
							}
						}
					} 
					
					//Seleciona as contas referente à entrada de parcelamento
					colecaoConta = repositorioCobranca.pesquisarContaDoParcelamentoNaoPago(numeroParcelamentosMes);

					if (colecaoConta != null && !colecaoConta.isEmpty()) {

						Iterator contaIterator = colecaoConta.iterator();

						while (contaIterator.hasNext()) {

							//Objeto conta
							Conta conta = (Conta) contaIterator.next();
							
							/*
							 * Seleciona os pagamentos para a conta correspondente a 
							 * entrada do parcelamento.
							 */
							pagamentoConta = repositorioCobranca
							.pesquisarPagamentoParaContaDoParcelamento(conta.getId().toString());

							if (pagamentoConta == null || pagamentoConta.isEmpty()) {

								Collection colecaoContaManutencao = new ArrayList();
								colecaoContaManutencao.add(conta);
								
								//[UC0149] Retirar Conta de Revisão
								if (conta.getDataRevisao() != null) {
									
									this.getControladorFaturamento().retirarRevisaoConta(
									colecaoContaManutencao, null, Usuario.USUARIO_BATCH, false, null);
								}
								
								//[UC0151] Alterar Vencimento da Conta
								this.getControladorFaturamento().alterarVencimentoConta(colecaoContaManutencao,
								null, conta.getDataVencimentoOriginal(), Usuario.USUARIO_BATCH);
								
								//Desassociar a conta do parcelamento
								this.repositorioCobranca.desassociarContaParcelamento(conta.getId());
							}
						}
					}
				}
			}

			getControladorBatch().encerrarUnidadeProcessamentoBatch(null,
					idUnidadeIniciada, false);

		} catch (Exception ex) {

			getControladorBatch().encerrarUnidadeProcessamentoBatch(ex,
			idUnidadeIniciada, true);
			
			ex.printStackTrace();
			sessionContext.setRollbackOnly();
			
			throw new EJBException(ex);
		}
	}
	
	
	protected DebitoACobrar carregarDebitoACobrarEntradaParcelamentoNaoPago(Integer idDebitoACobrarGeral ,
			Integer idGuiaPagamento, SistemaParametro sistemaParametro) throws ControladorException {
		
		DebitoACobrar debitoACobrar = new DebitoACobrar();
		
		FiltroGuiaPagamento filtroGuiaPagamento = new FiltroGuiaPagamento();
		
		filtroGuiaPagamento.adicionarCaminhoParaCarregamentoEntidade("imovel.localidade");
		filtroGuiaPagamento.adicionarCaminhoParaCarregamentoEntidade("imovel.quadra.setorComercial");
		filtroGuiaPagamento.adicionarCaminhoParaCarregamentoEntidade("imovel.ligacaoAguaSituacao");
		filtroGuiaPagamento.adicionarCaminhoParaCarregamentoEntidade("debitoTipo.financiamentoTipo");
		filtroGuiaPagamento.adicionarCaminhoParaCarregamentoEntidade("lancamentoItemContabil");
		
		filtroGuiaPagamento.adicionarParametro(new ParametroSimples(FiltroGuiaPagamento.ID,
		idGuiaPagamento));
		
		Collection colecaoGuiaPagamento = this.getControladorUtil().pesquisar(filtroGuiaPagamento,
		GuiaPagamento.class.getName());
		
		GuiaPagamento guiaPagamento = (GuiaPagamento) Util.retonarObjetoDeColecao(colecaoGuiaPagamento);
		
		//Mesmo Id gerado na tabela DEBITO_A_COBRAR_GERAL
		debitoACobrar.setId(idDebitoACobrarGeral);
		
		//Id do imóvel da guia de pagamento
		debitoACobrar.setImovel(guiaPagamento.getImovel());
		
		//TIPO DO DÉBITO = 33
		DebitoTipo debitoTipo = new DebitoTipo();
		debitoTipo.setId(DebitoTipo.ENTRADA_PARCELAMENTO);
		debitoACobrar.setDebitoTipo(debitoTipo);
		
		//Current Timestamp
		debitoACobrar.setGeracaoDebito(new Date());
		
		//GPAG_AMREFERENCIADEBITO da guia de pagamento
		debitoACobrar.setAnoMesReferenciaDebito(guiaPagamento.getAnoMesReferenciaContabil());
		
		//PARM_AMREFERENCIAARRECADACAO da tabela SISTEMA_PARAMETROS
		debitoACobrar.setAnoMesCobrancaDebito(sistemaParametro.getAnoMesArrecadacao());
		
		//Maior valor entre o ano/mes da data corrente e o ano/mes de referencia do faturamento 
		//(PARM_AMREFERENCIAFATURAMENTO da tabela SISTEMA_PARAMETROS)
		if ( sistemaParametro.getAnoMesFaturamento() >= Util.recuperaAnoMesDaData(new Date()) ) {
			debitoACobrar.setAnoMesReferenciaContabil(sistemaParametro.getAnoMesFaturamento());	
		} else {
			debitoACobrar.setAnoMesReferenciaContabil(Util.recuperaAnoMesDaData(new Date()));	
		}
		
		//VALOR DO DÉBITO = VALOR DA GUIA
		debitoACobrar.setValorDebito(guiaPagamento.getValorDebito());
		
		//NÚMERO DE PRESTAÇÕES = 1
		debitoACobrar.setNumeroPrestacaoDebito(new Short("1"));
		
		//NÚMERO DE PRESTAÇÕES COBRADAS = 0
		debitoACobrar.setNumeroPrestacaoCobradas(ConstantesSistema.SET_ZERO);
		
		
		//Localidade = localidade da guia de pagamento.
		debitoACobrar.setLocalidade(guiaPagamento.getLocalidade());
		
		//Quadra
		debitoACobrar.setQuadra(guiaPagamento.getImovel().getQuadra());
		debitoACobrar.setNumeroQuadra(guiaPagamento.getImovel().getQuadra().getNumeroQuadra());
		
		//CODIGO DO SETOR COMERCIAL
		debitoACobrar.setCodigoSetorComercial(guiaPagamento.getImovel().getQuadra().getSetorComercial().getCodigo());
		
		//LOTE E SUBLOTE
		debitoACobrar.setNumeroLote(guiaPagamento.getImovel().getLote());
		debitoACobrar.setNumeroSubLote(guiaPagamento.getImovel().getSubLote());
		
		//PERCENTUAL DE FINANCIAMENTO 
		debitoACobrar.setPercentualTaxaJurosFinanciamento(BigDecimal.ZERO);
		
		//Registro de Atendimento
		debitoACobrar.setRegistroAtendimento(null);
		
		//Ordem de Servico
		debitoACobrar.setOrdemServico(null);
		
		//Finaciamento tipo
		FinanciamentoTipo financiamentoTipo = new FinanciamentoTipo();
		financiamentoTipo.setId(guiaPagamento.getFinanciamentoTipo().getId());
		debitoACobrar.setFinanciamentoTipo(financiamentoTipo);
		
		//LANCAMENTO_ITEM_CONTABIL = LANCAMENTO_ITEM_CONTABIL DA GUIA
		debitoACobrar.setLancamentoItemContabil(guiaPagamento.getLancamentoItemContabil());
		
		//Debito credito situacao Atual
		DebitoCreditoSituacao debitoCreditoSituacaoAtual = new DebitoCreditoSituacao();
		debitoCreditoSituacaoAtual.setId(0);
		debitoACobrar.setDebitoCreditoSituacaoAtual(debitoCreditoSituacaoAtual);
		
		//Debito Credito Situacao Anterior
		DebitoCreditoSituacao debitoCreditoSituacaoAnterior = new DebitoCreditoSituacao();
		debitoCreditoSituacaoAnterior.setId(null);
		debitoACobrar.setDebitoCreditoSituacaoAnterior(debitoCreditoSituacaoAnterior);
		
		//Parcelamento grupo = 1 documentos Emitidos
		ParcelamentoGrupo parcelamentoGrupo = new ParcelamentoGrupo();
		parcelamentoGrupo.setId(ParcelamentoGrupo.DOCUMENTOS_EMITIDOS);
		debitoACobrar.setParcelamentoGrupo(parcelamentoGrupo);
		
		//FORMA DE COBRANÇA = 1 - COBRANÇA EM CONTA
		CobrancaForma cobrancaForma = new CobrancaForma();
		cobrancaForma.setId(CobrancaForma.COBRANCA_EM_CONTA);
		debitoACobrar.setCobrancaForma(cobrancaForma);
		
		//Data e Hora correntes
		debitoACobrar.setUltimaAlteracao(new Date());
		
		//Parcelmento = null 
		debitoACobrar.setParcelamento(null);
		
		//Tipo de Documento = 6
		DocumentoTipo documentoTipo = new DocumentoTipo();
		documentoTipo.setId(DocumentoTipo.DEBITO_A_COBRAR);
		debitoACobrar.setDocumentoTipo(documentoTipo);
		
		//Debito a Cobrar Geral Origem
		debitoACobrar.setDebitoACobrarGeralOrigem(null);
		
		//Numero de Parcelas Total Bonus = null
		debitoACobrar.setNumeroParcelaBonus(null);
		
		//Ano Mes Referencia Prestacao = null
		debitoACobrar.setAnoMesReferenciaPrestacao(null);
		
		//numero de parcelas antecipadas = null
		debitoACobrar.setNumeroParcelasAntecipadas(null);
		
		//Usuario
		debitoACobrar.setUsuario(Usuario.USUARIO_BATCH);
		
		//Debito A cobrar Geral
		DebitoACobrarGeral debitoACobrarGeral = new DebitoACobrarGeral();
		debitoACobrarGeral.setId(idDebitoACobrarGeral);
		debitoACobrar.setDebitoACobrarGeral(debitoACobrarGeral);
		
	
		
		return debitoACobrar;
	}

	
    /**
     * [UC0214] Efetuar Parcelamento de Débitos
     * 
     * retorna o maior valor entre o ano/mês da data corrente e 
     * o ano/mês de referencia do faturamento
     * (PARM_AMREFERENCIAFATURAMENTO da tabela SISTEMA_PARAMETROS)
     * 
     * @author Vivianne Sousa, Raphael Rossiter
     * @date 01/09/2008, 28/10/2010
     */
    public Integer obterReferenciaContabilParcelamentoOUConta(boolean isContaEntradaParcelamento, Integer anoMesVencimentoGuia, 
    		Integer anoMesReferenciaConta)throws ControladorException {
    	   
    	/*
    	 * Maior valor entre o ano/mês da data corrente,  
    	 * o ano/mês de referencia do faturamento (PARM_AMREFERENCIAFATURAMENTO da tabela SISTEMA_PARAMETROS), 
    	 * o ano/mês de vencimento da entrada de parcelamento (GPAG_DTVENCIMENTO, 
    	 * caso exista entrada de parcelamento e o maior ano/mês de referencia da coleção de contas,  
    	 * caso exista (CNTA_AMREFERENCIACONTA da tabela CONTA))).
    	 */
    	SistemaParametro sistemaParametro = getControladorUtil().pesquisarParametrosDoSistema();
        
    	Integer anoMesCorrente = Util.getAnoMesComoInteger(new Date());
        Integer anoMesFaturamento = sistemaParametro.getAnoMesFaturamento();
        Integer referenciaContabil = anoMesFaturamento;
        
        if(anoMesCorrente.compareTo(anoMesFaturamento) == 1){
            referenciaContabil = anoMesCorrente;
        }
        
        Date dataVencimentoEntradaParcelamento = this.obterDataVencimentoEntradaParcelamento(
        isContaEntradaParcelamento, sistemaParametro);
        
        if (dataVencimentoEntradaParcelamento != null){
        	
        	Integer anoMesEntradaParcelamento = Util.getAnoMesComoInteger(dataVencimentoEntradaParcelamento);
        	
        	if(anoMesEntradaParcelamento.compareTo(referenciaContabil) == 1){
                referenciaContabil = anoMesEntradaParcelamento;
            }
        }
        
        if(anoMesVencimentoGuia != null && isContaEntradaParcelamento){
        	if(anoMesVencimentoGuia.compareTo(referenciaContabil) == 1){
                referenciaContabil = anoMesVencimentoGuia;
            }	
        }
        
        if(anoMesReferenciaConta!= null ){
        	if(anoMesReferenciaConta.compareTo(referenciaContabil) == 1){
                referenciaContabil = anoMesReferenciaConta;
            }	
        }

        
        return referenciaContabil;
    }
	
	
    
    /**
     * Gerar e Emitir Extrato de Débito
     * [UC0349] Emitir Documento de Cobrança
     * 
     * @author Vivianne Sousa
     * @date 15/09/2008
     */
	public Date obterDataValidadeDocumentoCobranca(CobrancaDocumento cobrancaDocumento, Usuario usuario, Date maiorDataVencimentoContas)throws ControladorException {
			
		Date dataValidade = cobrancaDocumento.getEmissao();
		
		try {
			
			if (dataValidade != null && cobrancaDocumento.getCobrancaAcao() != null && 
					cobrancaDocumento.getCobrancaAcao().getNumeroDiasValidade() != null){
				
				Calendar dataCalendar = Calendar.getInstance();
				dataCalendar.setTime(dataValidade);
				dataCalendar.add(Calendar.DAY_OF_MONTH, cobrancaDocumento.getCobrancaAcao().getNumeroDiasValidade().intValue());
			
				dataValidade = dataCalendar.getTime();
				
			}else{
				
				boolean temPermissaoAlterarValidadeExtratoDebito = false;
				
				if(usuario!= null){
					//verifica se tem permissão para alterar a data de validade do extrato de debito
					temPermissaoAlterarValidadeExtratoDebito = getControladorPermissaoEspecial().
						verificarPermissaoAlterarValidadeExtratoDebito(usuario);	
				}
				
				Short numeroDiasValidadeExtrato = 0;
				SistemaParametro sistemaParametro = getControladorUtil().pesquisarParametrosDoSistema();
				
				//se tiver permissão e o numero de validade do extrato para permissão especial não for nulo
				if (temPermissaoAlterarValidadeExtratoDebito &&
					sistemaParametro.getNumeroDiasValidadeExtratoPermissaoEspecial() != null){
	
					numeroDiasValidadeExtrato = sistemaParametro.getNumeroDiasValidadeExtratoPermissaoEspecial();

				}else{
				
					numeroDiasValidadeExtrato = sistemaParametro.getNumeroDiasValidadeExtrato();
				}
				
				dataValidade = Util.adicionarNumeroDiasDeUmaData(dataValidade, numeroDiasValidadeExtrato.intValue());

				//Vivianne Sousa - 16/04/2009 - analista:Adriano Britto
				if(maiorDataVencimentoContas != null){
					
					if(Util.compararData(maiorDataVencimentoContas, dataValidade) == 1){
						dataValidade = maiorDataVencimentoContas;
					}
					
				}
				
			}
			
			
		} catch (ControladorException e) {
			e.printStackTrace();
			throw new ControladorException("erro.sistema", e);
		}
		
		return dataValidade;
		
	}
	
	/**
	 * [UC0870] - Gerar Movimento de Contas em Cobrança por Empresa
	 *
	 * @author Rafael Corrêa
	 * @date 17/04/2008
	 *
	 * @param idRota
	 * @param anoMesReferencia
	 * @return boolean
	 * @throws ControladorException
	 */
	public void gerarMovimentoContasEmCobranca(ComandoEmpresaCobrancaConta comandoEmpresaCobrancaConta, int idFuncionalidadeIniciada) 
		throws ControladorException {

		int idUnidadeIniciada = 0;

        // -------------------------
        //
        // Registrar o início do processamento da Unidade de
        // Processamento
        // do Batch
        //
        // -------------------------
        idUnidadeIniciada = getControladorBatch()
                .iniciarUnidadeProcessamentoBatch(idFuncionalidadeIniciada,
                        UnidadeProcessamento.COMANDO_EMPRESA_COBRANCA_CONTA, comandoEmpresaCobrancaConta.getId());

        try {
        	System.out.println("Cobrança por Resultado - Iniciou Comando: " + comandoEmpresaCobrancaConta.getId());
        	
        	UC0870GerarMovimentoContasEmCobrancaPorEmpresa gerarMovimentoContasEmCobrancaPorEmpresa = 
        		UC0870GerarMovimentoContasEmCobrancaPorEmpresa.getInstancia(repositorioCobranca);

            gerarMovimentoContasEmCobrancaPorEmpresa.gerarMovimentoContasEmCobranca(comandoEmpresaCobrancaConta);

            comandoEmpresaCobrancaConta.setDataExecucao(new Date());
            comandoEmpresaCobrancaConta.setUltimaAlteracao(new Date());
            
            getControladorUtil().atualizar(comandoEmpresaCobrancaConta);
            
            getControladorBatch().encerrarUnidadeProcessamentoBatch(null,
                    idUnidadeIniciada, false);

        	System.out.println("Cobrança por Resultado - Finalizou Comando: " + comandoEmpresaCobrancaConta.getId());
        	
        } catch (Exception e) {

            getControladorBatch().encerrarUnidadeProcessamentoBatch(e,
                    idUnidadeIniciada, true);
			
            throw new EJBException(e);
        }
        
    }
	

	
	/**
	 * [UC0214] Efetuar Parcelamento de Débitos
	 *
	 * Calcula o valor total do desconto para os acréscimos por impontualidade
	 *
	 * @author Raphael Rossiter
	 * @date 23/09/2008
	 *
	 * @param DeterminarValorDescontoAcrescimosImpontualidadeHelper
	 * @return BigDecimal
	 * @throws ControladorException
	 */
	public BigDecimal determinarValorDescontoAcrescimosImpontualidade(
			DeterminarValorDescontoAcrescimosImpontualidadeHelper helper) throws ControladorException{
		
		// Calcula o valor do desconto nos acrescimos por impontualidade
		BigDecimal valorDescontoAcrecismosImpotualidade = BigDecimal.ZERO;
		BigDecimal percentualDesconto = BigDecimal.ZERO;
		BigDecimal valorTotalAcrescimosImpontualidade = BigDecimal.ZERO;

		//CALCULANDO O PERCENTUAL DO DESCONTO
		percentualDesconto = Util.dividirArredondando(helper.getParcelamentoPerfil()
		.getPercentualDescontoAcrescimo().setScale(
		Parcelamento.CASAS_DECIMAIS, Parcelamento.TIPO_ARREDONDAMENTO), ConstantesSistema.CEM);
		
		//TOTALIZANDO O VALOR DOS ACRÉSCIMOS POR IMPONTUALIDADE (ANTIGUIDADE + GUIA_PAGAMENTO)
		valorTotalAcrescimosImpontualidade = helper.getValorTotalAcrescimosImpontualidadePorAntiguidade().setScale(
		Parcelamento.CASAS_DECIMAIS, Parcelamento.TIPO_ARREDONDAMENTO)
		.add(helper.getValorAcrescimosImpontualidadeGuiaPagamento()
		.setScale(Parcelamento.CASAS_DECIMAIS, Parcelamento.TIPO_ARREDONDAMENTO));
		
		//CALCULANDO O DESCONTO
		valorDescontoAcrecismosImpotualidade = valorTotalAcrescimosImpontualidade.setScale(
		Parcelamento.CASAS_DECIMAIS, Parcelamento.TIPO_ARREDONDAMENTO)
		.multiply(percentualDesconto.setScale(Parcelamento.CASAS_DECIMAIS,
		Parcelamento.TIPO_ARREDONDAMENTO));
		
		//VALORES DOS DEBITOS A COBRAR E COBRADOS
		valorDescontoAcrecismosImpotualidade = valorDescontoAcrecismosImpotualidade
		.add(helper.getValorDescontoAcrescimosImpontualidadeRDEspecial());
		
		return valorDescontoAcrecismosImpotualidade;
	}
	

	
	
	/**
	 * [UC0214] Efetuar Parcelamento de Débitos
	 *
	 * Verificar a existência de um fator para cálculo da quantidade de parcelas
	 *
	 * @author Raphael Rossiter
	 * @date 23/09/2008
	 *
	 * @param Collection
	 * @param parcelamentoQuantidadePrestacao
	 * @return Short
	 * @throws ControladorException
	 */
	public Short determinarQuantidadeMaximaPrestacoes(Collection colecaoContasParaParcelamento,
		ParcelamentoQuantidadePrestacao parcelamentoQuantidadePrestacao) throws ControladorException {
		
		int quantidadeMaximaPrestacoes = 0;
		
		/*
		 * Caso exista fator informado para o cálculo da quantidade de prestações, o sistema deverá
		 * colocar como quantidade máxima de prestações o resultado da multiplicação da quantidade
		 * de contas do parcelamento pelo fator obtido limitando a quantidade de prestações pela
		 * quantidade máxima de prestações informada.
		 */
		if (parcelamentoQuantidadePrestacao.getFatorQuantidadePrestacoes() != null){
			
			int quantidadeContas = 0;
			
			if (colecaoContasParaParcelamento != null && !colecaoContasParaParcelamento.isEmpty()) {
				
				Iterator contaValores = colecaoContasParaParcelamento.iterator();
				
				while (contaValores.hasNext()) {
					
					ContaValoresHelper contaValoresHelper = (ContaValoresHelper) contaValores.next();
					
					if (contaValoresHelper.getIndicadorContasDebito() == null){
						quantidadeContas++;
					}
				}
			}
			
			quantidadeMaximaPrestacoes = parcelamentoQuantidadePrestacao.getFatorQuantidadePrestacoes() *
			quantidadeContas;
			
			if (quantidadeMaximaPrestacoes > 
				parcelamentoQuantidadePrestacao.getQuantidadeMaximaPrestacao().intValue()){
				
				quantidadeMaximaPrestacoes = parcelamentoQuantidadePrestacao
				.getQuantidadeMaximaPrestacao().intValue();
			}
		}
		
		/*
		 * Caso contrário, o sistema calcula os seguintes valores limitando a quantidade de prestações
		 * pela quantidade máxima de prestações informada.
		 */
		else{
			quantidadeMaximaPrestacoes = parcelamentoQuantidadePrestacao
			.getQuantidadeMaximaPrestacao().intValue();
		}
		
		return new Short(String.valueOf(quantidadeMaximaPrestacoes));
	}
	
	/**
	 * [UC0214] Efetuar Parcelamento Debito
	 * 
	 * @author Vivianne Sousa
	 * @created 20/09/2007
	 * 
	 * @param idImovel
	 * @param inicioIntervaloParcelamento
	 * @param fimIntervaloParcelamento
	 * @param indicadoresParcelamentoHelper
	 * @return
	 * @throws ErroRepositorioException
	 */
	public BigDecimal obterValorDescontoPagamentoAVista(Integer idImovel,
			Integer inicioIntervaloParcelamento,
			Integer fimIntervaloParcelamento,
			IndicadoresParcelamentoHelper indicadoresParcelamentoHelper,
			ParcelamentoPerfil parcelamentoPerfil, BigDecimal valorDescontos)
			throws ControladorException {

		BigDecimal valorDescontoPagamentoAVista = BigDecimal.ZERO;

		if (fimIntervaloParcelamento.compareTo(inicioIntervaloParcelamento) < 0) {
			fimIntervaloParcelamento = inicioIntervaloParcelamento;
		}

		ObterDebitoImovelOuClienteHelper obterDebitoImovelOuCliente = obterDebitoImovelOuCliente(
				1, // Indicador de débito do imóvel
				idImovel.toString(), // Matrícula do imóvel
				null, // Código do cliente
				null, // Tipo de relação cliente imóvel
				inicioIntervaloParcelamento.toString(), // Referência inicial do
				// débito
				fimIntervaloParcelamento.toString(), // Fim do débito
				Util.converteStringParaDate("01/01/0001"), // Inicio vencimento
				Util.converteStringParaDate("31/12/9999"), // Fim vencimento
				1, // Indicador de pagamento
				indicadoresParcelamentoHelper.getIndicadorContasRevisao(), // conta
				// em
				// revisão
				indicadoresParcelamentoHelper.getIndicadorDebitosACobrar(), // Débito
				// a
				// cobrar
				indicadoresParcelamentoHelper.getIndicadorCreditoARealizar(), // crédito
				// a
				// realizar
				1, // Indicador de notas promissórias
				indicadoresParcelamentoHelper.getIndicadorGuiasPagamento(), // guias
				// pagamento
				indicadoresParcelamentoHelper
						.getIndicadorAcrescimosImpotualidade(), // acréscimos
				// impontualidade
				true,
				indicadoresParcelamentoHelper
				.getIndicadorDividaAtiva() // divida ativa
		);

		Collection<ContaValoresHelper> colecaoContaValores = obterDebitoImovelOuCliente
				.getColecaoContasValores();

		if (colecaoContaValores != null
				&& !colecaoContaValores.isEmpty()
				&& parcelamentoPerfil.getParcelaQuantidadeMinimaFatura() != null
				&& colecaoContaValores.size() >= parcelamentoPerfil
						.getParcelaQuantidadeMinimaFatura()) {

			// Para o cálculo do Débito Total Atualizado
			BigDecimal valorTotalContas = BigDecimal.ZERO;

			BigDecimal valorTotalAcrescimoImpontualidade = BigDecimal.ZERO;
			BigDecimal valorTotalAcrescimoImpontualidadeContas = BigDecimal.ZERO;
			BigDecimal valorTotalAcrescimoImpontualidadeGuias = BigDecimal.ZERO;

			BigDecimal valorTotalRestanteServicosACobrar = BigDecimal.ZERO;
			BigDecimal valorTotalRestanteServicosACobrarCurtoPrazo = BigDecimal.ZERO;
			BigDecimal valorTotalRestanteServicosACobrarLongoPrazo = BigDecimal.ZERO;

			BigDecimal valorTotalRestanteParcelamentosACobrar = BigDecimal.ZERO;
			BigDecimal valorTotalRestanteParcelamentosACobrarCurtoPrazo = BigDecimal.ZERO;
			BigDecimal valorTotalRestanteParcelamentosACobrarLongoPrazo = BigDecimal.ZERO;

			BigDecimal valorTotalGuiasPagamento = BigDecimal.ZERO;

			BigDecimal valorRestanteACobrar = BigDecimal.ZERO;
			BigDecimal valorAtualizacaoMonetaria = BigDecimal.ZERO;
			BigDecimal valorJurosMora = BigDecimal.ZERO;
			BigDecimal valorMulta = BigDecimal.ZERO;

			BigDecimal valorDebitoTotalAtualizado = BigDecimal.ZERO;

			BigDecimal valorCreditoARealizar = BigDecimal.ZERO;

			if (colecaoContaValores != null && !colecaoContaValores.isEmpty()) {
				Iterator contaValores = colecaoContaValores.iterator();
				while (contaValores.hasNext()) {
					ContaValoresHelper contaValoresHelper = (ContaValoresHelper) contaValores
							.next();
					valorTotalContas.setScale(Parcelamento.CASAS_DECIMAIS,
							Parcelamento.TIPO_ARREDONDAMENTO);
					valorTotalContas = valorTotalContas.add(contaValoresHelper
							.getValorTotalConta());

					if (contaValoresHelper.getValorAtualizacaoMonetaria() != null
							&& !contaValoresHelper
									.getValorAtualizacaoMonetaria().equals("")) {
						valorAtualizacaoMonetaria.setScale(
								Parcelamento.CASAS_DECIMAIS,
								Parcelamento.TIPO_ARREDONDAMENTO);
						valorAtualizacaoMonetaria = valorAtualizacaoMonetaria
								.add(contaValoresHelper
										.getValorAtualizacaoMonetaria()
										.setScale(
												Parcelamento.CASAS_DECIMAIS,
												Parcelamento.TIPO_ARREDONDAMENTO));
					}
					if (contaValoresHelper.getValorJurosMora() != null
							&& !contaValoresHelper.getValorJurosMora().equals(
									"")) {
						valorJurosMora.setScale(Parcelamento.CASAS_DECIMAIS,
								Parcelamento.TIPO_ARREDONDAMENTO);
						valorJurosMora = valorJurosMora.add(contaValoresHelper
								.getValorJurosMora().setScale(
										Parcelamento.CASAS_DECIMAIS,
										Parcelamento.TIPO_ARREDONDAMENTO));
					}
					if (contaValoresHelper.getValorMulta() != null
							&& !contaValoresHelper.getValorMulta().equals("")) {
						valorMulta.setScale(Parcelamento.CASAS_DECIMAIS,
								Parcelamento.TIPO_ARREDONDAMENTO);
						valorMulta = valorMulta.add(contaValoresHelper
								.getValorMulta().setScale(
										Parcelamento.CASAS_DECIMAIS,
										Parcelamento.TIPO_ARREDONDAMENTO));
					}

					// Para cálculo do Acrescimo de Impontualidade
					valorTotalAcrescimoImpontualidadeContas.setScale(
							Parcelamento.CASAS_DECIMAIS,
							Parcelamento.TIPO_ARREDONDAMENTO);
					valorTotalAcrescimoImpontualidadeContas = valorTotalAcrescimoImpontualidadeContas
							.add(contaValoresHelper
									.getValorTotalContaValoresParcelamento());
				}
			}

			// Guias de Pagamento
			if (indicadoresParcelamentoHelper.getIndicadorGuiasPagamento()
					.equals(ConstantesSistema.SIM.intValue())) {
				Collection<GuiaPagamentoValoresHelper> colecaoGuiaPagamentoValores = obterDebitoImovelOuCliente
						.getColecaoGuiasPagamentoValores();
				if (colecaoGuiaPagamentoValores != null
						&& !colecaoGuiaPagamentoValores.isEmpty()) {
					Iterator guiaPagamentoValores = colecaoGuiaPagamentoValores
							.iterator();
					while (guiaPagamentoValores.hasNext()) {
						GuiaPagamentoValoresHelper guiaPagamentoValoresHelper = (GuiaPagamentoValoresHelper) guiaPagamentoValores
								.next();
						valorTotalGuiasPagamento.setScale(
								Parcelamento.CASAS_DECIMAIS,
								Parcelamento.TIPO_ARREDONDAMENTO);
						valorTotalGuiasPagamento = valorTotalGuiasPagamento
								.add(guiaPagamentoValoresHelper
										.getGuiaPagamento().getValorDebito());

						if (guiaPagamentoValoresHelper
								.getValorAtualizacaoMonetaria() != null
								&& !guiaPagamentoValoresHelper
										.getValorAtualizacaoMonetaria().equals(
												"")) {
							valorAtualizacaoMonetaria.setScale(
									Parcelamento.CASAS_DECIMAIS,
									Parcelamento.TIPO_ARREDONDAMENTO);
							valorAtualizacaoMonetaria = valorAtualizacaoMonetaria
									.add(guiaPagamentoValoresHelper
											.getValorAtualizacaoMonetaria()
											.setScale(
													Parcelamento.CASAS_DECIMAIS,
													Parcelamento.TIPO_ARREDONDAMENTO));
						}
						if (guiaPagamentoValoresHelper.getValorJurosMora() != null
								&& !guiaPagamentoValoresHelper
										.getValorJurosMora().equals("")) {
							valorJurosMora.setScale(
									Parcelamento.CASAS_DECIMAIS,
									Parcelamento.TIPO_ARREDONDAMENTO);
							valorJurosMora = valorJurosMora
									.add(guiaPagamentoValoresHelper
											.getValorJurosMora()
											.setScale(
													Parcelamento.CASAS_DECIMAIS,
													Parcelamento.TIPO_ARREDONDAMENTO));
						}
						if (guiaPagamentoValoresHelper.getValorMulta() != null
								&& !guiaPagamentoValoresHelper.getValorMulta()
										.equals("")) {
							valorMulta.setScale(Parcelamento.CASAS_DECIMAIS,
									Parcelamento.TIPO_ARREDONDAMENTO);
							valorMulta = valorMulta
									.add(guiaPagamentoValoresHelper
											.getValorMulta()
											.setScale(
													Parcelamento.CASAS_DECIMAIS,
													Parcelamento.TIPO_ARREDONDAMENTO));
						}

						// Para cálculo do Acrescimo de Impontualidade
						valorTotalAcrescimoImpontualidadeGuias.setScale(
								Parcelamento.CASAS_DECIMAIS,
								Parcelamento.TIPO_ARREDONDAMENTO);
						valorTotalAcrescimoImpontualidadeGuias = valorTotalAcrescimoImpontualidadeGuias
								.add(guiaPagamentoValoresHelper
										.getValorAcrescimosImpontualidade());
					}
				}
			}

			// Acrescimos por Impotualidade
			BigDecimal retornoSoma = new BigDecimal("0.00");
			if (indicadoresParcelamentoHelper
					.getIndicadorAcrescimosImpotualidade().equals(
							ConstantesSistema.SIM.intValue())) {
				retornoSoma.setScale(Parcelamento.CASAS_DECIMAIS,
						Parcelamento.TIPO_ARREDONDAMENTO);
				retornoSoma = retornoSoma
						.add(valorTotalAcrescimoImpontualidadeContas);
				retornoSoma = retornoSoma
						.add(valorTotalAcrescimoImpontualidadeGuias);

			}

			// Para o cálculo do Débito Total Atualizado
			valorTotalAcrescimoImpontualidade = retornoSoma;

			// Debitos A Cobrar
			if (indicadoresParcelamentoHelper.getIndicadorDebitosACobrar()
					.equals(ConstantesSistema.SIM.intValue())) {
				// [FS0022]-Verificar existência de juros sobre imóvel
				Collection colecaoDebitoACobrar = obterDebitoImovelOuCliente
						.getColecaoDebitoACobrar();
				if (colecaoDebitoACobrar != null
						&& !colecaoDebitoACobrar.isEmpty()) {
					Iterator debitoACobrarValores = colecaoDebitoACobrar
							.iterator();

					final int indiceCurtoPrazo = 0;
					final int indiceLongoPrazo = 1;

					while (debitoACobrarValores.hasNext()) {
						DebitoACobrar debitoACobrar = (DebitoACobrar) debitoACobrarValores
								.next();

						// [FS0022]-Verificar existência de juros sobre imóvel
						if (debitoACobrar.getDebitoTipo().getId() != null
								&& !debitoACobrar
										.getDebitoTipo()
										.getId()
										.equals(
												DebitoTipo.JUROS_SOBRE_PARCELAMENTO)) {

							// Debitos A Cobrar - Serviço
							if (debitoACobrar.getFinanciamentoTipo().getId()
									.equals(FinanciamentoTipo.SERVICO_NORMAL)) {
								// [SB0001] Obter Valores de Curto e Longo Prazo
								valorRestanteACobrar = debitoACobrar
										.getValorTotal();

								BigDecimal[] valoresDeCurtoELongoPrazo = getControladorFaturamento()
										.obterValorACobrarDeCurtoELongoPrazo(
												debitoACobrar
														.getNumeroPrestacaoDebito(),
												debitoACobrar
														.getNumeroPrestacaoCobradas(),
												valorRestanteACobrar);
								valorTotalRestanteServicosACobrarCurtoPrazo
										.setScale(
												Parcelamento.CASAS_DECIMAIS,
												Parcelamento.TIPO_ARREDONDAMENTO);
								valorTotalRestanteServicosACobrarCurtoPrazo = valorTotalRestanteServicosACobrarCurtoPrazo
										.add(valoresDeCurtoELongoPrazo[indiceCurtoPrazo]);

								valorTotalRestanteServicosACobrarLongoPrazo
										.setScale(
												Parcelamento.CASAS_DECIMAIS,
												Parcelamento.TIPO_ARREDONDAMENTO);
								valorTotalRestanteServicosACobrarLongoPrazo = valorTotalRestanteServicosACobrarLongoPrazo
										.add(valoresDeCurtoELongoPrazo[indiceLongoPrazo]);
							}

							// Debitos A Cobrar - Parcelamento
							if (debitoACobrar
									.getFinanciamentoTipo()
									.getId()
									.equals(FinanciamentoTipo.PARCELAMENTO_AGUA)
									|| debitoACobrar
											.getFinanciamentoTipo()
											.getId()
											.equals(
													FinanciamentoTipo.PARCELAMENTO_ESGOTO)
									|| debitoACobrar
											.getFinanciamentoTipo()
											.getId()
											.equals(
													FinanciamentoTipo.PARCELAMENTO_SERVICO)) {
								// [SB0001] Obter Valores de Curto e Longo Prazo
								valorRestanteACobrar = debitoACobrar
										.getValorTotal();

								BigDecimal[] valoresDeCurtoELongoPrazo = getControladorFaturamento()
										.obterValorACobrarDeCurtoELongoPrazo(
												debitoACobrar
														.getNumeroPrestacaoDebito(),
												debitoACobrar
														.getNumeroPrestacaoCobradas(),
												valorRestanteACobrar);

								valorTotalRestanteParcelamentosACobrarCurtoPrazo
										.setScale(
												Parcelamento.CASAS_DECIMAIS,
												Parcelamento.TIPO_ARREDONDAMENTO);
								valorTotalRestanteParcelamentosACobrarCurtoPrazo = valorTotalRestanteParcelamentosACobrarCurtoPrazo
										.add(valoresDeCurtoELongoPrazo[indiceCurtoPrazo]);

								valorTotalRestanteParcelamentosACobrarLongoPrazo
										.setScale(
												Parcelamento.CASAS_DECIMAIS,
												Parcelamento.TIPO_ARREDONDAMENTO);
								valorTotalRestanteParcelamentosACobrarLongoPrazo = valorTotalRestanteParcelamentosACobrarLongoPrazo
										.add(valoresDeCurtoELongoPrazo[indiceLongoPrazo]);
							}

						}

					}

					// Serviços
					valorTotalRestanteServicosACobrar.setScale(
							Parcelamento.CASAS_DECIMAIS,
							Parcelamento.TIPO_ARREDONDAMENTO);
					valorTotalRestanteServicosACobrar = valorTotalRestanteServicosACobrarCurtoPrazo
							.add(valorTotalRestanteServicosACobrarLongoPrazo);
					// Parcelamentos
					valorTotalRestanteParcelamentosACobrar.setScale(
							Parcelamento.CASAS_DECIMAIS,
							Parcelamento.TIPO_ARREDONDAMENTO);
					valorTotalRestanteParcelamentosACobrar = valorTotalRestanteParcelamentosACobrarCurtoPrazo
							.add(valorTotalRestanteParcelamentosACobrarLongoPrazo);
				}
			}

			// Crédito A Realizar
			if (indicadoresParcelamentoHelper.getIndicadorCreditoARealizar()
					.equals(ConstantesSistema.SIM.intValue())) {
				Collection<CreditoARealizar> colecaoCreditoARealizar = obterDebitoImovelOuCliente
						.getColecaoCreditoARealizar();
				if (colecaoCreditoARealizar != null
						&& !colecaoCreditoARealizar.isEmpty()) {
					Iterator creditoARealizarValores = colecaoCreditoARealizar
							.iterator();
					while (creditoARealizarValores.hasNext()) {
						CreditoARealizar creditoARealizar = (CreditoARealizar) creditoARealizarValores
								.next();
						valorCreditoARealizar.setScale(
								Parcelamento.CASAS_DECIMAIS,
								Parcelamento.TIPO_ARREDONDAMENTO);
						valorCreditoARealizar = valorCreditoARealizar
								.add(creditoARealizar.getValorTotal());
					}
				}
			}

			// Débito Total Atualizado
			valorDebitoTotalAtualizado.setScale(Parcelamento.CASAS_DECIMAIS,
					Parcelamento.TIPO_ARREDONDAMENTO);
			valorDebitoTotalAtualizado = valorDebitoTotalAtualizado
					.add(valorTotalContas);
			valorDebitoTotalAtualizado = valorDebitoTotalAtualizado
					.add(valorTotalGuiasPagamento);
			valorDebitoTotalAtualizado = valorDebitoTotalAtualizado
					.add(valorTotalAcrescimoImpontualidade);
			valorDebitoTotalAtualizado = valorDebitoTotalAtualizado
					.add(valorTotalRestanteServicosACobrar);
			valorDebitoTotalAtualizado = valorDebitoTotalAtualizado
					.add(valorTotalRestanteParcelamentosACobrar);
			valorDebitoTotalAtualizado = valorDebitoTotalAtualizado
					.subtract(valorCreditoARealizar);

			valorDebitoTotalAtualizado = valorDebitoTotalAtualizado
					.subtract(valorDescontos);

			BigDecimal descontoAVista = parcelamentoPerfil
					.getPercentualDescontoAVista();
			if (descontoAVista != null
					&& !descontoAVista.equals(BigDecimal.ZERO)) {
				descontoAVista = descontoAVista
						.divide(new BigDecimal("100.00"));
				valorDescontoPagamentoAVista = valorDebitoTotalAtualizado
						.multiply(descontoAVista.setScale(
								Parcelamento.CASAS_DECIMAIS,
								Parcelamento.TIPO_ARREDONDAMENTO));

			}

		}

		return valorDescontoPagamentoAVista.setScale(
				Parcelamento.CASAS_DECIMAIS, Parcelamento.TIPO_ARREDONDAMENTO);
	}
	
	/**
	 * [UC0214] Efetuar Parcelamento de Débitos
	 *
	 * @author Raphael Rossiter
	 * @date 25/09/2008
	 *
	 * @param idImovel
	 * @param inicioIntervaloParcelamento
	 * @param fimIntervaloParcelamento
	 * @param indicadoresParcelamentoHelper
	 * @param parcelamentoPerfil
	 * @return BigDecimal
	 * @throws ControladorException
	 */
	public Object[] obterValorTotalDebitoAtualizadoParaParcelamento(Integer idImovel,
			Integer inicioIntervaloParcelamento,Integer fimIntervaloParcelamento,
			IndicadoresParcelamentoHelper indicadoresParcelamentoHelper,
			ParcelamentoPerfil parcelamentoPerfil,ResolucaoDiretoria rd)
			throws ControladorException {

//		BigDecimal valorDebitoTotalAtualizado = BigDecimal.ZERO;
		Object[] valorDebitoTotalEAcrescimoImpontualidadeTotal = null;

		if(parcelamentoPerfil.getAnoMesReferenciaLimiteSuperior() == null ||
		   parcelamentoPerfil.getAnoMesReferenciaLimiteSuperior().compareTo(inicioIntervaloParcelamento) >= 0){
			
			if (fimIntervaloParcelamento != null && fimIntervaloParcelamento.compareTo(inicioIntervaloParcelamento) < 0) {
				fimIntervaloParcelamento = inicioIntervaloParcelamento;
			}
			
			Date dataFinalVencimento = Util.converteStringParaDate("31/12/9999");
			
			if (parcelamentoPerfil.getDataLimiteDescontoPagamentoAVista() != null){
				dataFinalVencimento = Util.formatarDataFinal(parcelamentoPerfil.getDataLimiteDescontoPagamentoAVista());
			}

			boolean indicadorNaoSomarDebitoCobradoParcelamentoConta = false;
			ObterDebitoImovelOuClienteHelper obterDebitoImovelOuCliente = null;
			if(rd.getIndicadorDescontoSoEmContaAVista().equals(ConstantesSistema.SIM)){
				
				indicadorNaoSomarDebitoCobradoParcelamentoConta = true;
				 obterDebitoImovelOuCliente = obterDebitoImovelOuCliente(
							1, // Indicador de débito do imóvel
							idImovel.toString(), // Matrícula do imóvel
							null, // Código do cliente
							null, // Tipo de relação cliente imóvel
							inicioIntervaloParcelamento != null ? inicioIntervaloParcelamento.toString():"190001", // Referência inicial do débito
							fimIntervaloParcelamento !=null ? fimIntervaloParcelamento.toString():"999912", // Fim do débito
							Util.converteStringParaDate("01/01/0001"), // Inicio vencimento
							dataFinalVencimento, // Fim vencimento
							1, // Indicador de pagamento
							indicadoresParcelamentoHelper.getIndicadorContasRevisao(), // conta em revisão
							ConstantesSistema.NAO, // Débito a cobrar
							ConstantesSistema.NAO, // crédito a realizar
							1, // Indicador de notas promissórias
							ConstantesSistema.NAO, // guias pagamento
							ConstantesSistema.NAO, // acréscimos impontualidade
							true,
							indicadoresParcelamentoHelper.getIndicadorDividaAtiva()); // divida ativa
				
				
			}else{
				 obterDebitoImovelOuCliente = obterDebitoImovelOuCliente(
						1, // Indicador de débito do imóvel
						idImovel.toString(), // Matrícula do imóvel
						null, // Código do cliente
						null, // Tipo de relação cliente imóvel
						inicioIntervaloParcelamento != null ? inicioIntervaloParcelamento.toString():"190001", // Referência inicial do débito
						fimIntervaloParcelamento !=null ? fimIntervaloParcelamento.toString():"999912", // Fim do débito
						Util.converteStringParaDate("01/01/0001"), // Inicio vencimento
						dataFinalVencimento, // Fim vencimento
						1, // Indicador de pagamento
						indicadoresParcelamentoHelper.getIndicadorContasRevisao(), // conta em revisão
						indicadoresParcelamentoHelper.getIndicadorDebitosACobrar(), // Débito a cobrar
						indicadoresParcelamentoHelper.getIndicadorCreditoARealizar(), // crédito a realizar
						1, // Indicador de notas promissórias
						indicadoresParcelamentoHelper.getIndicadorGuiasPagamento(), // guias pagamento
						indicadoresParcelamentoHelper.getIndicadorAcrescimosImpotualidade(), // acréscimos impontualidade
						true,
						indicadoresParcelamentoHelper.getIndicadorDividaAtiva()); // divida ativa
			}
			
			
			

			Collection<ContaValoresHelper> colecaoContaValores = obterDebitoImovelOuCliente
			.getColecaoContasValores();

			
			
			if (colecaoContaValores != null && !colecaoContaValores.isEmpty()
				&& parcelamentoPerfil.getParcelaQuantidadeMinimaFatura() != null
				&& colecaoContaValores.size() >= parcelamentoPerfil.getParcelaQuantidadeMinimaFatura()) {

				//CALCULANDO O VALOR TOTAL DOS DÉBITOS ATUALIZADOS
				valorDebitoTotalEAcrescimoImpontualidadeTotal = this.calcularValorTotalDebitoAtualizadoParaParcelamento(
						obterDebitoImovelOuCliente, indicadoresParcelamentoHelper,indicadorNaoSomarDebitoCobradoParcelamentoConta);
				
			}
			
		}
		
		
		

		return valorDebitoTotalEAcrescimoImpontualidadeTotal;
	}
	
	
	/**
	 * [UC0214] Efetuar Parcelamento de Débitos
	 *
	 * Calcula o valor total dos débitos atualizados
	 *
	 * @author Raphael Rossiter
	 * @date 25/09/2008
	 *
	 * @param ObterDebitoImovelOuClienteHelper
	 * @param indicadoresParcelamentoHelper
	 * @return BigDecimal
	 * @throws ControladorException
	 */
	public Object[] calcularValorTotalDebitoAtualizadoParaParcelamento(
			ObterDebitoImovelOuClienteHelper obterDebitoImovelOuCliente,
			IndicadoresParcelamentoHelper indicadoresParcelamentoHelper,
			boolean indicadorNaoSomarDebitoCobradoParcelamentoConta) throws ControladorException {
		
		//Para o cálculo do Débito Total Atualizado
		BigDecimal valorTotalContas = BigDecimal.ZERO;

		BigDecimal valorTotalAcrescimoImpontualidade = BigDecimal.ZERO;
		BigDecimal valorTotalAcrescimoImpontualidadeContas = BigDecimal.ZERO;
		BigDecimal valorTotalAcrescimoImpontualidadeGuias = BigDecimal.ZERO;

		BigDecimal valorTotalRestanteServicosACobrar = BigDecimal.ZERO;
		BigDecimal valorTotalRestanteServicosACobrarCurtoPrazo = BigDecimal.ZERO;
		BigDecimal valorTotalRestanteServicosACobrarLongoPrazo = BigDecimal.ZERO;

		BigDecimal valorTotalRestanteParcelamentosACobrar = BigDecimal.ZERO;
		BigDecimal valorTotalRestanteParcelamentosACobrarCurtoPrazo = BigDecimal.ZERO;
		BigDecimal valorTotalRestanteParcelamentosACobrarLongoPrazo = BigDecimal.ZERO;

		BigDecimal valorTotalGuiasPagamento = BigDecimal.ZERO;

		BigDecimal valorRestanteACobrar = BigDecimal.ZERO;
		BigDecimal valorAtualizacaoMonetaria = BigDecimal.ZERO;
		BigDecimal valorJurosMora = BigDecimal.ZERO;
		BigDecimal valorMulta = BigDecimal.ZERO;
		
		BigDecimal valorTotalMultasDasContas = BigDecimal.ZERO; 
		BigDecimal valorTotalJurosMoraDasContas = BigDecimal.ZERO;
		BigDecimal valorTotalAtualizacoesMonetariasDasContas = BigDecimal.ZERO;
		
		BigDecimal valorDebitoTotalAtualizado = BigDecimal.ZERO;

		BigDecimal valorCreditoARealizar = BigDecimal.ZERO;
		
		Collection<ContaValoresHelper> colecaoContaValores = obterDebitoImovelOuCliente
		.getColecaoContasValores();

		if (colecaoContaValores != null && !colecaoContaValores.isEmpty()) {
			Iterator contaValores = colecaoContaValores.iterator();
			while (contaValores.hasNext()) {
				ContaValoresHelper contaValoresHelper = (ContaValoresHelper) contaValores.next();
				valorTotalContas.setScale(Parcelamento.CASAS_DECIMAIS, Parcelamento.TIPO_ARREDONDAMENTO);
				valorTotalContas = valorTotalContas.add(contaValoresHelper.getValorTotalConta());
				
				if(indicadorNaoSomarDebitoCobradoParcelamentoConta){
					BigDecimal valorDebitoCobradoParcelamentoConta = pesquisarValorDebitoCobradoParcelamentoConta(contaValoresHelper.getConta().getId());
					valorTotalContas = valorTotalContas.subtract(valorDebitoCobradoParcelamentoConta);
				}

				if (contaValoresHelper.getValorAtualizacaoMonetaria() != null && !contaValoresHelper.getValorAtualizacaoMonetaria().equals("")) {
					valorTotalAtualizacoesMonetariasDasContas.setScale(Parcelamento.CASAS_DECIMAIS, Parcelamento.TIPO_ARREDONDAMENTO);
					valorTotalAtualizacoesMonetariasDasContas = valorTotalAtualizacoesMonetariasDasContas.add(contaValoresHelper
									.getValorAtualizacaoMonetaria().setScale(Parcelamento.CASAS_DECIMAIS,Parcelamento.TIPO_ARREDONDAMENTO));
					valorAtualizacaoMonetaria = valorAtualizacaoMonetaria.add(valorTotalAtualizacoesMonetariasDasContas);
				}
				if (contaValoresHelper.getValorJurosMora() != null	&& !contaValoresHelper.getValorJurosMora().equals("")) {
					valorTotalJurosMoraDasContas.setScale(Parcelamento.CASAS_DECIMAIS, Parcelamento.TIPO_ARREDONDAMENTO);
					valorTotalJurosMoraDasContas = valorTotalJurosMoraDasContas.add(contaValoresHelper.getValorJurosMora().setScale(Parcelamento.CASAS_DECIMAIS,Parcelamento.TIPO_ARREDONDAMENTO));
					valorJurosMora = valorJurosMora.add(valorTotalJurosMoraDasContas);
				}
				if (contaValoresHelper.getValorMulta() != null && !contaValoresHelper.getValorMulta().equals("")) {
					valorTotalMultasDasContas.setScale(Parcelamento.CASAS_DECIMAIS,Parcelamento.TIPO_ARREDONDAMENTO);
					valorTotalMultasDasContas = valorTotalMultasDasContas.add(contaValoresHelper.getValorMulta().setScale(Parcelamento.CASAS_DECIMAIS,Parcelamento.TIPO_ARREDONDAMENTO));
					valorMulta = valorMulta.add(valorTotalMultasDasContas);
				}

				// Para cálculo do Acrescimo de Impontualidade
				valorTotalAcrescimoImpontualidadeContas.setScale(Parcelamento.CASAS_DECIMAIS,Parcelamento.TIPO_ARREDONDAMENTO);
				valorTotalAcrescimoImpontualidadeContas = valorTotalAcrescimoImpontualidadeContas.add(contaValoresHelper.getValorTotalContaValoresParcelamento());
			}
		}

		// Guias de Pagamento
		if (indicadoresParcelamentoHelper.getIndicadorGuiasPagamento().equals(ConstantesSistema.SIM.intValue())) {
			Collection<GuiaPagamentoValoresHelper> colecaoGuiaPagamentoValores = obterDebitoImovelOuCliente.getColecaoGuiasPagamentoValores();
			if (colecaoGuiaPagamentoValores != null && !colecaoGuiaPagamentoValores.isEmpty()) {
				Iterator guiaPagamentoValores = colecaoGuiaPagamentoValores.iterator();
				while (guiaPagamentoValores.hasNext()) {
					GuiaPagamentoValoresHelper guiaPagamentoValoresHelper = (GuiaPagamentoValoresHelper) guiaPagamentoValores.next();
					valorTotalGuiasPagamento.setScale(Parcelamento.CASAS_DECIMAIS, Parcelamento.TIPO_ARREDONDAMENTO);
					valorTotalGuiasPagamento = valorTotalGuiasPagamento.add(guiaPagamentoValoresHelper.getGuiaPagamento().getValorDebito());

					if (guiaPagamentoValoresHelper.getValorAtualizacaoMonetaria() != null
							&& !guiaPagamentoValoresHelper.getValorAtualizacaoMonetaria().equals("")) {
						valorAtualizacaoMonetaria.setScale(Parcelamento.CASAS_DECIMAIS,	Parcelamento.TIPO_ARREDONDAMENTO);
						valorAtualizacaoMonetaria = valorAtualizacaoMonetaria.add(guiaPagamentoValoresHelper
							.getValorAtualizacaoMonetaria().setScale(Parcelamento.CASAS_DECIMAIS,Parcelamento.TIPO_ARREDONDAMENTO));
					}
					if (guiaPagamentoValoresHelper.getValorJurosMora() != null	&& !guiaPagamentoValoresHelper.getValorJurosMora().equals("")) {
						valorJurosMora.setScale(Parcelamento.CASAS_DECIMAIS, Parcelamento.TIPO_ARREDONDAMENTO);
						valorJurosMora = valorJurosMora.add(guiaPagamentoValoresHelper.getValorJurosMora()
										.setScale(Parcelamento.CASAS_DECIMAIS, Parcelamento.TIPO_ARREDONDAMENTO));
					}
					if (guiaPagamentoValoresHelper.getValorMulta() != null
							&& !guiaPagamentoValoresHelper.getValorMulta().equals("")) {
						valorMulta.setScale(Parcelamento.CASAS_DECIMAIS,Parcelamento.TIPO_ARREDONDAMENTO);
						valorMulta = valorMulta.add(guiaPagamentoValoresHelper.getValorMulta()
										.setScale(Parcelamento.CASAS_DECIMAIS,Parcelamento.TIPO_ARREDONDAMENTO));
					}

					// Para cálculo do Acrescimo de Impontualidade
					valorTotalAcrescimoImpontualidadeGuias.setScale(Parcelamento.CASAS_DECIMAIS,Parcelamento.TIPO_ARREDONDAMENTO);
					valorTotalAcrescimoImpontualidadeGuias = valorTotalAcrescimoImpontualidadeGuias.add(guiaPagamentoValoresHelper.getValorAcrescimosImpontualidade());
				}
			}
		}

		// Acrescimos por Impotualidade
		BigDecimal retornoSoma = new BigDecimal("0.00");
		if (indicadoresParcelamentoHelper.getIndicadorAcrescimosImpotualidade().equals(ConstantesSistema.SIM.intValue())) {
			retornoSoma.setScale(Parcelamento.CASAS_DECIMAIS,Parcelamento.TIPO_ARREDONDAMENTO);
			retornoSoma = retornoSoma.add(valorTotalAcrescimoImpontualidadeContas);
			retornoSoma = retornoSoma.add(valorTotalAcrescimoImpontualidadeGuias);

		}

		// Para o cálculo do Débito Total Atualizado
		valorTotalAcrescimoImpontualidade = retornoSoma;

		// Debitos A Cobrar
		if (indicadoresParcelamentoHelper.getIndicadorDebitosACobrar()
				.equals(ConstantesSistema.SIM.intValue())) {
			// [FS0022]-Verificar existência de juros sobre imóvel
			Collection colecaoDebitoACobrar = obterDebitoImovelOuCliente.getColecaoDebitoACobrar();
			if (colecaoDebitoACobrar != null && !colecaoDebitoACobrar.isEmpty()) {
				Iterator debitoACobrarValores = colecaoDebitoACobrar.iterator();

				final int indiceCurtoPrazo = 0;
				final int indiceLongoPrazo = 1;

				while (debitoACobrarValores.hasNext()) {
					DebitoACobrar debitoACobrar = (DebitoACobrar) debitoACobrarValores.next();

					// [FS0022]-Verificar existência de juros sobre imóvel
					if (debitoACobrar.getDebitoTipo().getId() != null
							&& !debitoACobrar.getDebitoTipo().getId().equals(DebitoTipo.JUROS_SOBRE_PARCELAMENTO)) {

						// Debitos A Cobrar - Serviço
						if (debitoACobrar.getFinanciamentoTipo().getId().equals(FinanciamentoTipo.SERVICO_NORMAL)) {
							// [SB0001] Obter Valores de Curto e Longo Prazo
							valorRestanteACobrar = debitoACobrar.getValorTotalComBonus();

							BigDecimal[] valoresDeCurtoELongoPrazo = getControladorFaturamento().obterValorACobrarDeCurtoELongoPrazo(
									debitoACobrar.getNumeroPrestacaoDebito(),debitoACobrar.getNumeroPrestacaoCobradasMaisBonus(),valorRestanteACobrar);
							valorTotalRestanteServicosACobrarCurtoPrazo.setScale(Parcelamento.CASAS_DECIMAIS,Parcelamento.TIPO_ARREDONDAMENTO);
							valorTotalRestanteServicosACobrarCurtoPrazo = valorTotalRestanteServicosACobrarCurtoPrazo
									.add(valoresDeCurtoELongoPrazo[indiceCurtoPrazo]);

							valorTotalRestanteServicosACobrarLongoPrazo.setScale(Parcelamento.CASAS_DECIMAIS,Parcelamento.TIPO_ARREDONDAMENTO);
							valorTotalRestanteServicosACobrarLongoPrazo = valorTotalRestanteServicosACobrarLongoPrazo
									.add(valoresDeCurtoELongoPrazo[indiceLongoPrazo]);
						}

						// Debitos A Cobrar - Parcelamento
						if (debitoACobrar.getFinanciamentoTipo().getId().equals(FinanciamentoTipo.PARCELAMENTO_AGUA)
								|| debitoACobrar.getFinanciamentoTipo().getId().equals(FinanciamentoTipo.PARCELAMENTO_ESGOTO)
								|| debitoACobrar.getFinanciamentoTipo().getId().equals(FinanciamentoTipo.PARCELAMENTO_SERVICO)) {
							// [SB0001] Obter Valores de Curto e Longo Prazo
							valorRestanteACobrar = debitoACobrar.getValorTotalComBonus();

							BigDecimal[] valoresDeCurtoELongoPrazo = getControladorFaturamento()
									.obterValorACobrarDeCurtoELongoPrazo(debitoACobrar.getNumeroPrestacaoDebito(),
											debitoACobrar.getNumeroPrestacaoCobradasMaisBonus(),valorRestanteACobrar);

							valorTotalRestanteParcelamentosACobrarCurtoPrazo.setScale(Parcelamento.CASAS_DECIMAIS,Parcelamento.TIPO_ARREDONDAMENTO);
							valorTotalRestanteParcelamentosACobrarCurtoPrazo = valorTotalRestanteParcelamentosACobrarCurtoPrazo
								.add(valoresDeCurtoELongoPrazo[indiceCurtoPrazo]);

							valorTotalRestanteParcelamentosACobrarLongoPrazo.setScale(Parcelamento.CASAS_DECIMAIS,Parcelamento.TIPO_ARREDONDAMENTO);
							valorTotalRestanteParcelamentosACobrarLongoPrazo = valorTotalRestanteParcelamentosACobrarLongoPrazo
									.add(valoresDeCurtoELongoPrazo[indiceLongoPrazo]);
						}

					}

				}

				// Serviços
				valorTotalRestanteServicosACobrar.setScale(Parcelamento.CASAS_DECIMAIS,	Parcelamento.TIPO_ARREDONDAMENTO);
				valorTotalRestanteServicosACobrar = valorTotalRestanteServicosACobrarCurtoPrazo.add(valorTotalRestanteServicosACobrarLongoPrazo);
				// Parcelamentos
				valorTotalRestanteParcelamentosACobrar.setScale(Parcelamento.CASAS_DECIMAIS,Parcelamento.TIPO_ARREDONDAMENTO);
				valorTotalRestanteParcelamentosACobrar = valorTotalRestanteParcelamentosACobrarCurtoPrazo
						.add(valorTotalRestanteParcelamentosACobrarLongoPrazo);
			}
		}

		// Crédito A Realizar
		if (indicadoresParcelamentoHelper.getIndicadorCreditoARealizar().equals(ConstantesSistema.SIM.intValue())) {
			Collection<CreditoARealizar> colecaoCreditoARealizar = obterDebitoImovelOuCliente.getColecaoCreditoARealizar();
			if (colecaoCreditoARealizar != null && !colecaoCreditoARealizar.isEmpty()) {
				Iterator creditoARealizarValores = colecaoCreditoARealizar.iterator();
				while (creditoARealizarValores.hasNext()) {
					CreditoARealizar creditoARealizar = (CreditoARealizar) creditoARealizarValores.next();
					valorCreditoARealizar.setScale(Parcelamento.CASAS_DECIMAIS,	Parcelamento.TIPO_ARREDONDAMENTO);
					valorCreditoARealizar = valorCreditoARealizar.add(creditoARealizar.getValorTotalComBonus());
				}
			}
		}

		// Débito Total Atualizado
		valorDebitoTotalAtualizado.setScale(Parcelamento.CASAS_DECIMAIS,Parcelamento.TIPO_ARREDONDAMENTO);
		valorDebitoTotalAtualizado = valorDebitoTotalAtualizado.add(valorTotalContas);
		valorDebitoTotalAtualizado = valorDebitoTotalAtualizado.add(valorTotalGuiasPagamento);
		valorDebitoTotalAtualizado = valorDebitoTotalAtualizado.add(valorTotalAcrescimoImpontualidade);
		valorDebitoTotalAtualizado = valorDebitoTotalAtualizado.add(valorTotalRestanteServicosACobrar);
		valorDebitoTotalAtualizado = valorDebitoTotalAtualizado.add(valorTotalRestanteParcelamentosACobrar);
		valorDebitoTotalAtualizado = valorDebitoTotalAtualizado.subtract(valorCreditoARealizar);

		
		Object[] valorDebitoTotalEAcrescimoImpontualidadeTotal = new Object[10];
		valorDebitoTotalEAcrescimoImpontualidadeTotal[0] = valorDebitoTotalAtualizado;
		valorDebitoTotalEAcrescimoImpontualidadeTotal[1] = valorTotalAcrescimoImpontualidade;
		valorDebitoTotalEAcrescimoImpontualidadeTotal[2] = valorTotalContas;
		valorDebitoTotalEAcrescimoImpontualidadeTotal[3] = valorTotalGuiasPagamento;
		valorDebitoTotalEAcrescimoImpontualidadeTotal[4] = valorTotalRestanteServicosACobrar;
		valorDebitoTotalEAcrescimoImpontualidadeTotal[5] = valorTotalRestanteParcelamentosACobrar;
		valorDebitoTotalEAcrescimoImpontualidadeTotal[6] = valorCreditoARealizar;
		valorDebitoTotalEAcrescimoImpontualidadeTotal[7] = valorTotalMultasDasContas; 
		valorDebitoTotalEAcrescimoImpontualidadeTotal[8] = valorTotalJurosMoraDasContas;
		valorDebitoTotalEAcrescimoImpontualidadeTotal[9] = valorTotalAtualizacoesMonetariasDasContas;
		
		return valorDebitoTotalEAcrescimoImpontualidadeTotal;
	}
	
	
	/**
	 * [UC0214] Efetuar Parcelamento de Débitos
	 *
	 * @author Raphael Rossiter
	 * @date 29/09/2008
	 *
	 * @param parcelamentoPerfil
	 * @param conta
	 * @return Collection<ParcelamentoDescontoAntiguidade>
	 * @throws ControladorException
	 */
	public Collection<ParcelamentoDescontoAntiguidade> obterParcelamentoDescontoAntiguidadeParaConta(
			ParcelamentoPerfil parcelamentoPerfil, Conta conta) throws ControladorException {
		
		SistemaParametro sistemaParametros = getControladorUtil()
		.pesquisarParametrosDoSistema();
		
		Date dataAnoMesReferenciaParametro = Util.criarData(1, Util.obterMes(sistemaParametros
		.getAnoMesFaturamento()), Util.obterAno(sistemaParametros
		.getAnoMesFaturamento()));
		
		int quantidadeMeses = 0;

		Date dataAnoMesReferencia = Util.criarData(1, Util.obterMes(conta.getReferencia()), 
		Util.obterAno(conta.getReferencia()));
		
		quantidadeMeses = Util.dataDiff(dataAnoMesReferencia,
		dataAnoMesReferenciaParametro);

		FiltroParcelamentoDescontoAntiguidade filtroParcelamentoDescontoAntiguidade = new FiltroParcelamentoDescontoAntiguidade();

		filtroParcelamentoDescontoAntiguidade.adicionarCaminhoParaCarregamentoEntidade("contaMotivoRevisao");
		
		filtroParcelamentoDescontoAntiguidade
		.adicionarParametro(new ParametroSimples(FiltroParcelamentoDescontoAntiguidade.PARCELAMENTO_PERFIL,
		parcelamentoPerfil.getId()));
		
		filtroParcelamentoDescontoAntiguidade.adicionarParametro(new MenorQue(
		FiltroParcelamentoDescontoAntiguidade.QUANTIDADE_MINIMA_MESES_DEBITO,
		quantidadeMeses));

		Collection<ParcelamentoDescontoAntiguidade> colecaoParcelamentoDescontoAntiguidade = 
		getControladorUtil().pesquisar(filtroParcelamentoDescontoAntiguidade,
		ParcelamentoDescontoAntiguidade.class.getName());
		
		return colecaoParcelamentoDescontoAntiguidade;
	}
	
	/**
	 * [UC0214] Efetuar Parcelamento de Débitos 
	 *
	 * @author Raphael Rossiter
	 * @date 25/09/2008, 12/01/2011
	 *
	 * @param obterOpcoesDeParcelamentoHelper
	 * @param fimIntervaloParcelamento
	 * @param isParcelamento
	 * @return BigDecimal
	 * @throws ControladorException
	 */
	public BigDecimal obterValorTotalAcrescimosImpontualidadeParaParcelamento(
			ObterOpcoesDeParcelamentoHelper obterOpcoesDeParcelamentoHelper, Integer fimIntervaloParcelamento,
			boolean isParcelamento,Collection colecaoContasParcel)
			throws ControladorException {

		BigDecimal valorDescontoAcrescimosImpontualidadePagamentoAVista = BigDecimal.ZERO;

		Integer idImovel = obterOpcoesDeParcelamentoHelper.getIdImovel(); 
		Integer inicioIntervaloParcelamento = obterOpcoesDeParcelamentoHelper.getAnoMesInicialReferenciaDebito();
		IndicadoresParcelamentoHelper indicadoresParcelamentoHelper = obterOpcoesDeParcelamentoHelper.getIndicadoresParcelamentoHelper();
		
		if (fimIntervaloParcelamento != null && fimIntervaloParcelamento.compareTo(inicioIntervaloParcelamento) < 0) {
			fimIntervaloParcelamento = inicioIntervaloParcelamento;
		}

		Collection<ContaValoresHelper> colecaoContaValores = null;
		Collection<GuiaPagamentoValoresHelper> colecaoGuiaPagamentoValores = null;
		
		if (isParcelamento){
			
			//VIA PARCELAMENTO
			ObterDebitoImovelOuClienteHelper obterDebitoImovelOuCliente = obterDebitoImovelOuCliente(
					1, // Indicador de débito do imóvel
					idImovel.toString(), // Matrícula do imóvel
					null, // Código do cliente
					null, // Tipo de relação cliente imóvel
					inicioIntervaloParcelamento != null ? inicioIntervaloParcelamento.toString():"000101", // Referência inicial do
					// débito
					fimIntervaloParcelamento != null ? fimIntervaloParcelamento.toString():"999912", // Fim do débito
					Util.converteStringParaDate("01/01/0001"), // Inicio vencimento
					Util.converteStringParaDate("31/12/9999"), // Fim vencimento
					1, // Indicador de pagamento
					indicadoresParcelamentoHelper.getIndicadorContasRevisao(), // conta
					// em
					// revisão
					indicadoresParcelamentoHelper.getIndicadorDebitosACobrar(), // Débito
					// a
					// cobrar
					indicadoresParcelamentoHelper.getIndicadorCreditoARealizar(), // crédito
					// a
					// realizar
					1, // Indicador de notas promissórias
					indicadoresParcelamentoHelper.getIndicadorGuiasPagamento(), // guias
					// pagamento
					indicadoresParcelamentoHelper
							.getIndicadorAcrescimosImpotualidade(), // acréscimos
					// impontualidade
					true, indicadoresParcelamentoHelper.getIndicadorDividaAtiva());
			
			colecaoContaValores = obterDebitoImovelOuCliente.getColecaoContasValores();
			colecaoGuiaPagamentoValores = obterDebitoImovelOuCliente.getColecaoGuiasPagamentoValores();
		}
		else{
			
			//VIA EXTRATO DE DÉBITO
			colecaoContaValores = obterOpcoesDeParcelamentoHelper.getColecaoContaValores();
			colecaoGuiaPagamentoValores = obterOpcoesDeParcelamentoHelper.getColecaoGuiaPagamentoValores();
		}
		
		BigDecimal valorTotalGuiasPagamento = BigDecimal.ZERO;
		BigDecimal valorTotalAcrescimoImpontualidadeContas = BigDecimal.ZERO;
		BigDecimal valorTotalAcrescimoImpontualidadeGuias = BigDecimal.ZERO;
		BigDecimal valorAtualizacaoMonetaria = BigDecimal.ZERO;
		BigDecimal valorJurosMora = BigDecimal.ZERO;
		BigDecimal valorMulta = BigDecimal.ZERO;

		if (colecaoContaValores != null && !colecaoContaValores.isEmpty()) {
			
			Iterator contaValores = colecaoContaValores.iterator();
			
			while (contaValores.hasNext()) {
				
				ContaValoresHelper contaValoresHelper = (ContaValoresHelper)contaValores.next();
				
				if(colecaoContasParcel.contains(contaValoresHelper)){

					if (contaValoresHelper.getValorAtualizacaoMonetaria() != null && !contaValoresHelper.getValorAtualizacaoMonetaria().equals("")) {
						valorAtualizacaoMonetaria.setScale(Parcelamento.CASAS_DECIMAIS,Parcelamento.TIPO_ARREDONDAMENTO);
						valorAtualizacaoMonetaria = valorAtualizacaoMonetaria.add(contaValoresHelper.getValorAtualizacaoMonetaria().setScale(Parcelamento.CASAS_DECIMAIS,Parcelamento.TIPO_ARREDONDAMENTO));
					}
					if (contaValoresHelper.getValorJurosMora() != null	&& !contaValoresHelper.getValorJurosMora().equals("")) {
						valorJurosMora.setScale(Parcelamento.CASAS_DECIMAIS,Parcelamento.TIPO_ARREDONDAMENTO);
						valorJurosMora = valorJurosMora.add(contaValoresHelper.getValorJurosMora().setScale(Parcelamento.CASAS_DECIMAIS,Parcelamento.TIPO_ARREDONDAMENTO));
					}
					if (contaValoresHelper.getValorMulta() != null && !contaValoresHelper.getValorMulta().equals("")) {
						valorMulta.setScale(Parcelamento.CASAS_DECIMAIS,Parcelamento.TIPO_ARREDONDAMENTO);
						valorMulta = valorMulta.add(contaValoresHelper.getValorMulta().setScale(Parcelamento.CASAS_DECIMAIS,Parcelamento.TIPO_ARREDONDAMENTO));
					}
	
					// Para cálculo do Acrescimo de Impontualidade
					valorTotalAcrescimoImpontualidadeContas.setScale(Parcelamento.CASAS_DECIMAIS, Parcelamento.TIPO_ARREDONDAMENTO);
					valorTotalAcrescimoImpontualidadeContas = valorTotalAcrescimoImpontualidadeContas.add(contaValoresHelper.getValorTotalContaValoresParcelamento());
				}
			}	
		}
		
		
		//Guias de Pagamento
		if(indicadoresParcelamentoHelper.getIndicadorGuiasPagamento().equals(ConstantesSistema.SIM.intValue())){
			
			if (colecaoGuiaPagamentoValores != null && !colecaoGuiaPagamentoValores.isEmpty() ){
				
				Iterator guiaPagamentoValores = colecaoGuiaPagamentoValores.iterator();
				
				while (guiaPagamentoValores.hasNext()) {
					
					GuiaPagamentoValoresHelper guiaPagamentoValoresHelper = (GuiaPagamentoValoresHelper) guiaPagamentoValores.next();
					valorTotalGuiasPagamento.setScale(Parcelamento.CASAS_DECIMAIS, Parcelamento.TIPO_ARREDONDAMENTO);
					valorTotalGuiasPagamento = valorTotalGuiasPagamento.add(guiaPagamentoValoresHelper.getGuiaPagamento().getValorDebito());
					
					if (guiaPagamentoValoresHelper.getValorAtualizacaoMonetaria() != null && !guiaPagamentoValoresHelper.getValorAtualizacaoMonetaria().equals("")) {
						valorAtualizacaoMonetaria.setScale(Parcelamento.CASAS_DECIMAIS,Parcelamento.TIPO_ARREDONDAMENTO);
						valorAtualizacaoMonetaria = valorAtualizacaoMonetaria.add(guiaPagamentoValoresHelper.getValorAtualizacaoMonetaria().setScale(Parcelamento.CASAS_DECIMAIS,Parcelamento.TIPO_ARREDONDAMENTO));
					}
					if (guiaPagamentoValoresHelper.getValorJurosMora() != null && !guiaPagamentoValoresHelper.getValorJurosMora().equals("")) {
						valorJurosMora.setScale(Parcelamento.CASAS_DECIMAIS,Parcelamento.TIPO_ARREDONDAMENTO);
						valorJurosMora = valorJurosMora.add(guiaPagamentoValoresHelper.getValorJurosMora().setScale(Parcelamento.CASAS_DECIMAIS,Parcelamento.TIPO_ARREDONDAMENTO));
					}
					if (guiaPagamentoValoresHelper.getValorMulta() != null	&& !guiaPagamentoValoresHelper.getValorMulta().equals("")) {
						valorMulta.setScale(Parcelamento.CASAS_DECIMAIS,Parcelamento.TIPO_ARREDONDAMENTO);
						valorMulta = valorMulta.add(guiaPagamentoValoresHelper.getValorMulta().setScale(Parcelamento.CASAS_DECIMAIS,Parcelamento.TIPO_ARREDONDAMENTO));
					}

					// Para cálculo do Acrescimo de Impontualidade
					valorTotalAcrescimoImpontualidadeGuias.setScale(Parcelamento.CASAS_DECIMAIS, Parcelamento.TIPO_ARREDONDAMENTO);
					valorTotalAcrescimoImpontualidadeGuias = valorTotalAcrescimoImpontualidadeGuias.add(guiaPagamentoValoresHelper.getValorAcrescimosImpontualidade());
				}
			}
		}
		
		//Acrescimos por Impotualidade
		BigDecimal retornoSoma = BigDecimal.ZERO;
		
		if(indicadoresParcelamentoHelper.getIndicadorAcrescimosImpotualidade().equals(ConstantesSistema.SIM.intValue())){
			
			retornoSoma.setScale(Parcelamento.CASAS_DECIMAIS, Parcelamento.TIPO_ARREDONDAMENTO);
			retornoSoma = retornoSoma.add(valorTotalAcrescimoImpontualidadeContas);
			retornoSoma = retornoSoma.add(valorTotalAcrescimoImpontualidadeGuias);
		
			valorDescontoAcrescimosImpontualidadePagamentoAVista = retornoSoma;
		}

		return valorDescontoAcrescimosImpontualidadePagamentoAVista.setScale(
		Parcelamento.CASAS_DECIMAIS, Parcelamento.TIPO_ARREDONDAMENTO);
	}
	
	
	/**
	 * [UC0867] Atualizar Pagamentos das Contas em Cobrança
	 *
	 * @author Sávio Luiz, Raimundo Martins
	 * @date 23/10/2008, 03/10/2011
	 *
	 * @param idLocalidade
	 * @param anoMesArrecadacao
	 * @param idFuncionalidadeIniciada
	 * @throws ControladorException
	 */
	public void atualizarPagamentosContasCobranca(Integer idLocalidade,
			Integer anoMesArrecadacao,int idFuncionalidadeIniciada)
			throws ControladorException {
		int idUnidadeIniciada = 0;
		SistemaParametro sistemaParametro = getControladorUtil().pesquisarParametrosDoSistema();

		idUnidadeIniciada = getControladorBatch()
				.iniciarUnidadeProcessamentoBatch(idFuncionalidadeIniciada,
						UnidadeProcessamento.LOCALIDADE, idLocalidade);
		try{
			
			Collection colecaoEmpresaContaCobrancaPagamentos = new ArrayList();
			
			//remove as empresas cobrancas contas pagamentos para o mesmo mês/ano de arrecadação
			repositorioCobranca.removerEmpresaCobrancaContaPagamentos(anoMesArrecadacao,idLocalidade);
			repositorioCobranca.removerMotivoNaoGeracaoPagamento(anoMesArrecadacao,idLocalidade);
			
			System.out.println("loca " + idLocalidade + " pesquisa pagamentos");
			
			//recupera a coleção de pagamentos
			Collection<Pagamento> collPagamentos = 
				repositorioarrecadacao.pesquisarPagamentoPorLocalidade(idLocalidade,anoMesArrecadacao);
			
			System.out.println("loca " + idLocalidade + " fim pesquisa pagamentos");
			
			if(collPagamentos != null &&  !collPagamentos.isEmpty()){
				System.out.println("loca " + idLocalidade + " - quantidade pgmt: " + collPagamentos.size());
				
				int count = 0;
				
				//laço da coleção de pagamentos
				for(Pagamento pagamento : collPagamentos){
					
					count++;
					System.out.println("loca " + idLocalidade + " " + count + "/" + collPagamentos.size());
					
					if (pagamento.getImovel() != null && pagamento.getImovel().getCategoriaPrincipalId().equals(Categoria.PUBLICO)) {
						//[SB0017] Incluir Motivo de Não Geração do Pagamento
						PagamentoNaoGeracaoCobrancaResultado pgNaoGeracao = new PagamentoNaoGeracaoCobrancaResultado();
						pgNaoGeracao.setMotivoNaoGeracao(repositorioCobranca
								.obterMotivoNaoGeracaoCobrancaResultadoConstanteMotivo(
							MotivoNaoGeracaoCobrancaResultado.IMOVEL_COM_PERFIL_ATUAL_IGUAL_A_PUBLICO));
						
						pgNaoGeracao.setImovel(pagamento.getImovel());
						pgNaoGeracao.setAnoMesReferenciaArrecadacao(pagamento.getAnoMesReferenciaArrecadacao());
						pgNaoGeracao.setAnoMesReferenciaPagamento(pagamento.getAnoMesReferenciaPagamento());
						pgNaoGeracao.setDataNaoGeracao(new Date());
						pgNaoGeracao.setDataPagamento(pagamento.getDataPagamento());
						pgNaoGeracao.setDataProcessamentoPagamento(pagamento.getDataProcessamento());
						pgNaoGeracao.setUltimaAlteracao(new Date());
						pgNaoGeracao.setValorPagamento(pagamento.getValorPagamento());
						pgNaoGeracao.setConta(pagamento.getContaGeral());
						pgNaoGeracao.setAnoMesReferenciaGeracao(anoMesArrecadacao);
						pgNaoGeracao.setIndicadorAtualizarPagamentos(new Short("1"));
						
						repositorioUtil.inserir(pgNaoGeracao);
					} else {
					
							//Verifica se o pagamento está em duplicidade
							if(pagamento.getPagamentoSituacaoAtual() != null && 
							   !pagamento.getPagamentoSituacaoAtual().getId().equals(PagamentoSituacao.PAGAMENTO_CLASSIFICADO) &&
							   !pagamento.getPagamentoSituacaoAtual().getId().equals(PagamentoSituacao.VALOR_NAO_CONFERE) &&
							   !pagamento.getPagamentoSituacaoAtual().getId().equals(PagamentoSituacao.DOCUMENTO_A_CONTABILIZAR) ){
								
								if (pagamento.getContaGeral() != null) {
									//[SB0017] Incluir Motivo de Não Geração do Pagamento
									PagamentoNaoGeracaoCobrancaResultado pgNaoGeracao = new PagamentoNaoGeracaoCobrancaResultado();
									pgNaoGeracao.setMotivoNaoGeracao(repositorioCobranca
											.obterMotivoNaoGeracaoCobrancaResultadoConstanteMotivo(
										MotivoNaoGeracaoCobrancaResultado.PAGAMENTO_SITUACAO_DIFERENTE_DE_CLASSIFICADO_A_CONTABILIZAR_E_VALOR_NAO_CONFERE));
									
									pgNaoGeracao.setImovel(pagamento.getImovel());
									pgNaoGeracao.setAnoMesReferenciaArrecadacao(pagamento.getAnoMesReferenciaArrecadacao());
									pgNaoGeracao.setAnoMesReferenciaPagamento(pagamento.getAnoMesReferenciaPagamento());
									pgNaoGeracao.setDataNaoGeracao(new Date());
									pgNaoGeracao.setDataPagamento(pagamento.getDataPagamento());
									pgNaoGeracao.setDataProcessamentoPagamento(pagamento.getDataProcessamento());
									pgNaoGeracao.setUltimaAlteracao(new Date());
									pgNaoGeracao.setValorPagamento(pagamento.getValorPagamento());
									pgNaoGeracao.setConta(pagamento.getContaGeral());
									pgNaoGeracao.setAnoMesReferenciaGeracao(anoMesArrecadacao);
									pgNaoGeracao.setIndicadorAtualizarPagamentos(new Short("1"));
									
									repositorioUtil.inserir(pgNaoGeracao);
								}
							}else{
							// verifica se o pagamento tem conta
							if (pagamento.getContaGeral() != null) {
									
									Integer idEmpresaCobrancaPagamentos = repositorioCobranca
											.pesquisarEmpresaCobrancaConta(pagamento
													.getContaGeral().getId(), pagamento.getDataPagamento());
									
									if (idEmpresaCobrancaPagamentos != null) {
										
										ComandoEmpresaCobrancaConta comando = repositorioCobranca
												.pesquisarComandoEmpresaCobrancaContaPorEmpresaCobrancaConta(idEmpresaCobrancaPagamentos);
										
										Date dataRetiradaConta = repositorioCobranca.pesquisarDataRetiradaConta(idEmpresaCobrancaPagamentos);
										
										if(comando != null){
											if(											 
											  (comando.getDataEncerramento() == null ||
											  (pagamento.getDataPagamento() !=null && 
											   comando.getDataExecucao() !=null &&
											   pagamento.getDataPagamento().compareTo(comando.getDataExecucao()) >=0  &&
											   pagamento.getDataPagamento() !=null &&
											   pagamento.getDataPagamento().compareTo(comando.getDataEncerramento()) <=0)) 
											   &&
											   (dataRetiradaConta == null || 
											   (pagamento.getDataPagamento() !=null &&
											    comando.getDataExecucao() !=null &&
											   	pagamento.getDataPagamento().compareTo(comando.getDataExecucao()) >=0 &&
											   	pagamento.getDataPagamento() !=null &&
											    pagamento.getDataPagamento().compareTo(dataRetiradaConta) <=0))  
												){
												
												// [SB0001] - Atualizar pagamento de conta em
												// cobranÁa
		//										Collection<Integer> idsCobrancaDocumento = null;									
		//										idsCobrancaDocumento = repositorioCobranca.pesquisarDocumentoCobrancaConta(pagamento.getId());
												Integer idCobrancaDocumento = null;
												
												if(pagamento.getCobrancaDocumento() != null){
													idCobrancaDocumento = pagamento.getCobrancaDocumento().getId();
												}
												
		//											for(Integer idCobrancaDocumento : idsCobrancaDocumento){
													criaColecaoEmpresaContaCobrancaPagamento(
															pagamento.getContaGeral().getId(),
															pagamento.getValorPagamento(),
															pagamento,
															null,
															null,
															false,
															null,
															anoMesArrecadacao,
															null,
															colecaoEmpresaContaCobrancaPagamentos,
															ConstantesSistema.INDICADOR_PAGAMENTO_A_VISTA,
															new Integer("0"), new Integer("0"), idCobrancaDocumento, "PAGAMENTO");
		//											}
											}
											else{
												//[SB0017] Incluir Motivo de Não Geração do Pagamento
												PagamentoNaoGeracaoCobrancaResultado pgNaoGeracao = new PagamentoNaoGeracaoCobrancaResultado();
												pgNaoGeracao.setMotivoNaoGeracao(repositorioCobranca
														.obterMotivoNaoGeracaoCobrancaResultadoConstanteMotivo(
																MotivoNaoGeracaoCobrancaResultado.DATA_PAGAMENTO_FORA_PERIODO_VALIDADE_COMANDO));
												pgNaoGeracao.setImovel(pagamento.getImovel());
												pgNaoGeracao.setAnoMesReferenciaArrecadacao(pagamento.getAnoMesReferenciaArrecadacao());
												pgNaoGeracao.setAnoMesReferenciaPagamento(pagamento.getAnoMesReferenciaPagamento());
												pgNaoGeracao.setDataNaoGeracao(new Date());
												pgNaoGeracao.setDataPagamento(pagamento.getDataPagamento());
												pgNaoGeracao.setDataProcessamentoPagamento(pagamento.getDataProcessamento());
												pgNaoGeracao.setUltimaAlteracao(new Date());
												pgNaoGeracao.setValorPagamento(pagamento.getValorPagamento());
												pgNaoGeracao.setConta(pagamento.getContaGeral());
												pgNaoGeracao.setAnoMesReferenciaGeracao(anoMesArrecadacao);
												pgNaoGeracao.setIndicadorAtualizarPagamentos(new Short("1"));
												
												repositorioUtil.inserir(pgNaoGeracao);
											}
											
										}
										else{
											//[SB0017] Incluir Motivo de Não Geração do Pagamento
											PagamentoNaoGeracaoCobrancaResultado pgNaoGeracao = new PagamentoNaoGeracaoCobrancaResultado();
											pgNaoGeracao.setMotivoNaoGeracao(repositorioCobranca
													.obterMotivoNaoGeracaoCobrancaResultadoConstanteMotivo(
															MotivoNaoGeracaoCobrancaResultado.DATA_PAGAMENTO_FORA_PERIODO_VALIDADE_COMANDO));
											pgNaoGeracao.setImovel(pagamento.getImovel());
											pgNaoGeracao.setAnoMesReferenciaArrecadacao(pagamento.getAnoMesReferenciaArrecadacao());
											pgNaoGeracao.setAnoMesReferenciaPagamento(pagamento.getAnoMesReferenciaPagamento());
											pgNaoGeracao.setDataNaoGeracao(new Date());
											pgNaoGeracao.setDataPagamento(pagamento.getDataPagamento());
											pgNaoGeracao.setDataProcessamentoPagamento(pagamento.getDataProcessamento());
											pgNaoGeracao.setUltimaAlteracao(new Date());
											pgNaoGeracao.setValorPagamento(pagamento.getValorPagamento());
											pgNaoGeracao.setConta(pagamento.getContaGeral());
											pgNaoGeracao.setAnoMesReferenciaGeracao(anoMesArrecadacao);
											pgNaoGeracao.setIndicadorAtualizarPagamentos(new Short("1"));
											
											repositorioUtil.inserir(pgNaoGeracao);
										}
										
									} else {
										Collection collIdsFincanciamentoTipo = new ArrayList();
										collIdsFincanciamentoTipo
												.add(FinanciamentoTipo.PARCELAMENTO_AGUA);
										collIdsFincanciamentoTipo
												.add(FinanciamentoTipo.PARCELAMENTO_ESGOTO);
										collIdsFincanciamentoTipo
												.add(FinanciamentoTipo.PARCELAMENTO_SERVICO);
										collIdsFincanciamentoTipo
												.add(FinanciamentoTipo.JUROS_PARCELAMENTO);
										collIdsFincanciamentoTipo
												.add(FinanciamentoTipo.ENTRADA_PARCELAMENTO);
										
										Collection<Object[]> colecaoDadosDebitoCobrado = repositorioFaturamento
												.pesquisaridDebitoTipoDoDebitoCobradoDeParcelamento(
														pagamento.getContaGeral().getId(),
														collIdsFincanciamentoTipo);
										
										/*verifica EMPR_DTENCCONTRCOB da tabela EMPRESA */
										Date dataComparacao = repositorioCobranca
												.pesquisarDataEncerContratoMaisQtdMesValPgmt(pagamento.getContaGeral().getId());
										
										/*Se a data não for nula verifica 
										 * se a data de pagamento é menor 
										 * que a data pesquisada acima*/
										if(dataComparacao !=null){
											if(pagamento.getDataPagamento().compareTo(dataComparacao)<=0){
												if (colecaoDadosDebitoCobrado != null && 
													!colecaoDadosDebitoCobrado.isEmpty() ) {
				
													for (Object[] dadosDebitoCobrado : colecaoDadosDebitoCobrado) {
														if (dadosDebitoCobrado != null) {
															DebitoTipo debitoTipo = null;
															Parcelamento parcelamento = null;
															DebitoCobrado debitoCobrado = null;
				
															if (dadosDebitoCobrado[3] != null) {
																debitoCobrado = new DebitoCobrado();
																debitoCobrado
																		.setValorPrestacao((BigDecimal) dadosDebitoCobrado[3]);
																debitoCobrado
																		.setNumeroPrestacaoDebito((Short) dadosDebitoCobrado[4]);
																debitoCobrado
																		.setNumeroPrestacao((Short) dadosDebitoCobrado[5]);
																if (dadosDebitoCobrado[0] != null) {
																	debitoTipo = new DebitoTipo();
																	debitoTipo
																			.setId((Integer) dadosDebitoCobrado[0]);
																	debitoCobrado
																			.setDebitoTipo(debitoTipo);
																}
				
																if (dadosDebitoCobrado[1] != null) {
																	parcelamento = new Parcelamento();
																	parcelamento
																			.setId((Integer) dadosDebitoCobrado[1]);
																	if (dadosDebitoCobrado[2] != null) {
																		parcelamento
																				.setValorDebitoAtualizado((BigDecimal) dadosDebitoCobrado[2]);
																	}
																	if (dadosDebitoCobrado[6] != null) {
																		parcelamento
																				.setValorConta((BigDecimal) dadosDebitoCobrado[6]);
																	}
																	if (dadosDebitoCobrado[7] != null) {
																		parcelamento
																				.setParcelamento((Date) dadosDebitoCobrado[7]);
																	}
																}
				
															}
				
															// [SB0002] - Verificar itens do
															// parcelamento a partir do debito
															// cobrado
															verificarItensParcelamentos(
																	parcelamento, null, null,
																	pagamento, debitoCobrado,
																	anoMesArrecadacao,
																	colecaoEmpresaContaCobrancaPagamentos);
				
														}
													}
												//}
											}
										}
										else{
											//[SB0017] Incluir Motivo de Não Geração do Pagamento
											PagamentoNaoGeracaoCobrancaResultado pgNaoGeracao = new PagamentoNaoGeracaoCobrancaResultado();
											pgNaoGeracao.setMotivoNaoGeracao(repositorioCobranca
													.obterMotivoNaoGeracaoCobrancaResultadoConstanteMotivo(
															MotivoNaoGeracaoCobrancaResultado.DATA_PAGAMENTO_SUPERIOR_DATA_ENCERRAMENTO_CONTRATO_EMPRESA));
											pgNaoGeracao.setImovel(pagamento.getImovel());
											pgNaoGeracao.setAnoMesReferenciaArrecadacao(pagamento.getAnoMesReferenciaArrecadacao());
											pgNaoGeracao.setAnoMesReferenciaPagamento(pagamento.getAnoMesReferenciaPagamento());
											pgNaoGeracao.setDataNaoGeracao(new Date());
											pgNaoGeracao.setDataPagamento(pagamento.getDataPagamento());
											pgNaoGeracao.setDataProcessamentoPagamento(pagamento.getDataProcessamento());
											pgNaoGeracao.setUltimaAlteracao(new Date());
											pgNaoGeracao.setValorPagamento(pagamento.getValorPagamento());
											pgNaoGeracao.setConta(pagamento.getContaGeral());
											pgNaoGeracao.setAnoMesReferenciaGeracao(anoMesArrecadacao);
											pgNaoGeracao.setIndicadorAtualizarPagamentos(new Short("1"));
											
											repositorioUtil.inserir(pgNaoGeracao);
										}
									}
									else{
										if (colecaoDadosDebitoCobrado != null && 
												!colecaoDadosDebitoCobrado.isEmpty()) {
			
												for (Object[] dadosDebitoCobrado : colecaoDadosDebitoCobrado) {
													if (dadosDebitoCobrado != null) {
														DebitoTipo debitoTipo = null;
														Parcelamento parcelamento = null;
														DebitoCobrado debitoCobrado = null;
			
														if (dadosDebitoCobrado[3] != null) {
															debitoCobrado = new DebitoCobrado();
															debitoCobrado
																	.setValorPrestacao((BigDecimal) dadosDebitoCobrado[3]);
															debitoCobrado
																	.setNumeroPrestacaoDebito((Short) dadosDebitoCobrado[4]);
															debitoCobrado
																	.setNumeroPrestacao((Short) dadosDebitoCobrado[5]);
															if (dadosDebitoCobrado[0] != null) {
																debitoTipo = new DebitoTipo();
																debitoTipo
																		.setId((Integer) dadosDebitoCobrado[0]);
																debitoCobrado
																		.setDebitoTipo(debitoTipo);
															}
			
															if (dadosDebitoCobrado[1] != null) {
																parcelamento = new Parcelamento();
																parcelamento
																		.setId((Integer) dadosDebitoCobrado[1]);
																if (dadosDebitoCobrado[2] != null) {
																	parcelamento
																			.setValorDebitoAtualizado((BigDecimal) dadosDebitoCobrado[2]);
																}
																if (dadosDebitoCobrado[6] != null) {
																	parcelamento
																			.setValorConta((BigDecimal) dadosDebitoCobrado[6]);
																}
																if (dadosDebitoCobrado[7] != null) {
																	parcelamento
																			.setParcelamento((Date) dadosDebitoCobrado[7]);
																}
															}
			
														}
			
														// [SB0002] - Verificar itens do
														// parcelamento a partir do debito
														// cobrado
														verificarItensParcelamentos(
																parcelamento, null, null,
																pagamento, debitoCobrado,
																anoMesArrecadacao,
																colecaoEmpresaContaCobrancaPagamentos);
			
													}
												}
											//}
										}
									}
								}
		
								
							
							}
							
							//verifica se o pagamento tem guia de pagamento
							if (pagamento.getGuiaPagamento() != null) {
								// verifica se a guia de pagamento tem parcelamento
								if (pagamento.getGuiaPagamento().getParcelamento() != null) {
									// [SB0006] - Verificar itens do parcelamento a
									// partir de guia de pagamento
									verificarItensParcelamentos(pagamento
											.getGuiaPagamento().getParcelamento(),
											pagamento.getGuiaPagamento(), null,
											pagamento, null, anoMesArrecadacao,
											colecaoEmpresaContaCobrancaPagamentos);
								}
							}
		
							// verifica se o pagamento tem debito a cobrar
							if (pagamento.getDebitoACobrarGeral() != null) {
								// verifica se o debito a cobrar tem parcelamento
								if (pagamento.getDebitoACobrarGeral()
										.getDebitoACobrar().getParcelamento() != null) {
									// [SB0010] - Verificar itens do parcelamento a
									// partir de debito a cobrar
									verificarItensParcelamentos(pagamento
											.getDebitoACobrarGeral()
											.getDebitoACobrar().getParcelamento(),
											null, pagamento.getDebitoACobrarGeral()
													.getDebitoACobrar(), pagamento,
											null, anoMesArrecadacao,
											colecaoEmpresaContaCobrancaPagamentos);
								}
							}
						}
					}
				}
			}
						
			// CRC 3257 - Alteracao para nao considerar categoria Publica			
//			Iterator it = colecaoEmpresaContaCobrancaPagamentos.iterator();
//
//			while (it.hasNext()) {
//				EmpresaCobrancaContaPagamentos empresaCobrancaContaPagamentos = 
//					(EmpresaCobrancaContaPagamentos) it.next();
//
//				Categoria categoria = getControladorImovel()
//						.obterPrincipalCategoriaImovel(
//								empresaCobrancaContaPagamentos.getIdImovel());
//
//				if (categoria.getId().equals(Categoria.PUBLICO)) {
//
//					it.remove();
//
//				}
//
//			}
			// Final da alteracao
			
			System.out.println("loca " + idLocalidade + " inserindo");
			if(!colecaoEmpresaContaCobrancaPagamentos.isEmpty()){
//				getControladorBatch().inserirColecaoObjetoParaBatch(colecaoEmpresaContaCobrancaPagamentos);
				repositorioCobranca.inserirEmpresaCobrancaContaPagamentos(colecaoEmpresaContaCobrancaPagamentos);
			}
			
			System.out.println("loca " + idLocalidade + " fim insercao");
			
			getControladorBatch().encerrarUnidadeProcessamentoBatch(null,
					idUnidadeIniciada, false);

		} catch (Exception ex) {

			getControladorBatch().encerrarUnidadeProcessamentoBatch(ex,
					idUnidadeIniciada, true);
			ex.printStackTrace();

			throw new EJBException(ex);
		}
		
	}
	
	/**
	 * [UC0867] Atualizar Pagamentos das Contas em Cobrança
	 *
	 * @author Sávio Luiz
	 * @date 27/10/2008
	 *
	 */
	private void verificarItensParcelamentos(Parcelamento parcelamento, 
            GuiaPagamento guiaPagamento,
            DebitoACobrar debitoACobrar,
            Pagamento pagamento,
            DebitoCobrado debitoCobrado,
            Integer anoMesArrecadacao,
            Collection colecaoEmpresaContaCobrancaPagamentos) 
			 throws ControladorException{

		try{
		
			if(parcelamento != null){
			
				Collection<Object[]> collItensParcelamentos = repositorioCobranca.
				pesquisarItensParcelamentos(parcelamento.getId());
				
				//loop de dados dos itens do parcelamentos
				Integer idContaGeral = null;
				Integer idDebitoACobrarGeral = null;
				BigDecimal valorConta = null;
				if(collItensParcelamentos != null && !collItensParcelamentos.isEmpty()){
					for (Object[] dadosItensParcelamento : collItensParcelamentos){
						//verifica se os dados dos itens de parcelamento está diferente de nulo
						if(dadosItensParcelamento != null){
							//verifica se existe o valor da conta
							if(dadosItensParcelamento[2] != null){
								valorConta = (BigDecimal)dadosItensParcelamento[2];
							}
							//verifica se existe o id da conta
							if(dadosItensParcelamento[0] != null){
								idContaGeral = (Integer)dadosItensParcelamento[0];
								//caso não seja guia de pagamento nem debito a cobrar 
								if(guiaPagamento == null && debitoACobrar == null){
									//[SB0003] - Atualizar pagamento de conta parcelada a partir do debito cobrado
									criaColecaoEmpresaContaCobrancaPagamento(idContaGeral,valorConta,pagamento
											,debitoCobrado.getDebitoTipo(),parcelamento,false,debitoCobrado.getValorPrestacao(),
											anoMesArrecadacao,null,colecaoEmpresaContaCobrancaPagamentos, 
											ConstantesSistema.INDICADOR_PAGAMENTO_PARCELADO, 
											new Integer(debitoCobrado.getNumeroPrestacaoDebito()),
											new Integer(debitoCobrado.getNumeroPrestacao()), null, "PARCELAMENTO");
								}else{
									if(guiaPagamento != null){
										//[SB0007] - Atualizar pagamento de conta parcelada a partir da guia de pagamento
										criaColecaoEmpresaContaCobrancaPagamento(idContaGeral,valorConta,pagamento
												,guiaPagamento.getDebitoTipo(),parcelamento,false,guiaPagamento.getValorDebito(),
												anoMesArrecadacao,null,colecaoEmpresaContaCobrancaPagamentos,
												ConstantesSistema.INDICADOR_PAGAMENTO_A_VISTA,
												new Integer("0"),
												new Integer("0"), null, "PARCELAMENTO");
									}else{
										//[SB0011] - Atualizar pagamento de conta parcelada a partir do debito a cobrar
										criaColecaoEmpresaContaCobrancaPagamento(idContaGeral,valorConta,pagamento
												,debitoACobrar.getDebitoTipo()
												,parcelamento,false,debitoACobrar.getValorTotalComBonus(),
												anoMesArrecadacao,null,colecaoEmpresaContaCobrancaPagamentos,
												ConstantesSistema.INDICADOR_PAGAMENTO_PARCELADO,
												new Integer("0"),
												new Integer("0"), null, "PARCELAMENTO");
									}
									
								}
							
							}
							//verifica se existe o id do debito a cobrar geral, refeere-se a um re-parcelamento
							if(dadosItensParcelamento[1] != null){
							idDebitoACobrarGeral = (Integer)dadosItensParcelamento[1];
							verificarItensParcelamentosNivel2(parcelamento, 
									 guiaPagamento,
									 debitoACobrar,
									 pagamento,
							        debitoCobrado,
							        anoMesArrecadacao,
							        idDebitoACobrarGeral,
							        colecaoEmpresaContaCobrancaPagamentos);
							
							}
						
						}
						
						//limpa os campos
						idContaGeral = null;
						idDebitoACobrarGeral = null;
					}
				}
			
			}
		
		}catch (Exception ex) {
		
			ex.printStackTrace();
		
			throw new EJBException(ex);
		}

	}
	
	private Collection criaColecaoEmpresaContaCobrancaPagamento(Integer idConta,
			BigDecimal valorConta,
			Pagamento pagamento,
			DebitoTipo debitoTipo,
			Parcelamento parcelamento,
			boolean nivel2,
			BigDecimal valorPagamentoSemPercentual,
			Integer anoMesArrecadacao,
			BigDecimal valorCalculadoDebitoACobrarHistorico,
			Collection colecaoEmpresaContaCobrancaPagamentos,
			Short indicadorTipoPagamento,
			Integer numeroParcelaAtual,
			Integer numeroTotalParcelas,
			Integer  idCobrancaDocumento,
			String verificaDataPagamentoParcelamento
			) throws ControladorException{

		try{
		
			Integer idEmpresaCobrancaConta;
			
			if(verificaDataPagamentoParcelamento.equals("PAGAMENTO")){
				idEmpresaCobrancaConta = repositorioCobranca.pesquisarEmpresaCobrancaConta(idConta, pagamento.getDataPagamento());
			}else{
				idEmpresaCobrancaConta = repositorioCobranca.pesquisarEmpresaCobrancaConta(idConta, parcelamento.getParcelamento());
			}
			
			SistemaParametro sisp = repositorioUtil.pesquisarParametrosDoSistema();
			
			if(idEmpresaCobrancaConta != null){
				//caso seja um re-parcelamento
				BigDecimal percentualContaParcelada = null;
				BigDecimal valorPagamentoMes = null;
			
				if(nivel2){
			
					/*
					* Comentado por Raphael Rossiter a pedido de Eduardo Borges em 10/08/2011
					* OBJ: Igualar a fórmula de cálculo dos dois níveis
					*/
					/*if(valorCalculadoDebitoACobrarHistorico != null){
					BigDecimal valorContaParceladaNivel2 = valorConta.multiply(valorCalculadoDebitoACobrarHistorico);
					percentualContaParcelada = Util.dividirArredondando(valorContaParceladaNivel2,parcelamento.getValorConta());
					valorPagamentoMes = (valorPagamentoSemPercentual.multiply(percentualContaParcelada)).setScale(2,BigDecimal.ROUND_HALF_DOWN);
					}*/
					
					/* Comentado por Raimundo Martins para satisfazer
					* a alteração no UC0867 solicitada no dia 29/12/2011
					* */
					//if(sisp.getIndicadorCalculaProporcional() == 1){
					percentualContaParcelada = Util.dividirArredondando(valorConta,parcelamento.getValorConta());
					valorPagamentoMes = (valorPagamentoSemPercentual.multiply(percentualContaParcelada)).setScale(2,BigDecimal.ROUND_HALF_DOWN);
					/*}
					else{
					valorPagamentoMes = valorPagamentoSemPercentual;
					}*/
			
				}else{
					//caso exista parcelamento, calcular o percentual da conta paga
					if(parcelamento != null){
						/* Comentado por Raimundo Martins para satisfazer
						* a alteração no UC0867 solicitada no dia 29/12/2011
						* */
						//if(sisp.getIndicadorCalculaProporcional() == 1){
						percentualContaParcelada = Util.dividirArredondando(valorConta,parcelamento.getValorConta());
						valorPagamentoMes = (valorPagamentoSemPercentual.multiply(percentualContaParcelada)).setScale(2,BigDecimal.ROUND_HALF_DOWN);
						/*}
						else{
						valorPagamentoMes = valorPagamentoSemPercentual;
						}*/
					}else{
						//caso não tenha parcelamento, o pagamento refere-se a uma conta e esteja em cobrança 
						//por alguma empresa.
						valorPagamentoMes = valorConta;
					}
				}
				
				//criando o objeto de empresa cobranca conta pagamentos
				EmpresaCobrancaContaPagamentos empresaCobrancaContaPagamentos = new EmpresaCobrancaContaPagamentos();
				empresaCobrancaContaPagamentos.setDebitoTipo(debitoTipo);
				EmpresaCobrancaConta empresaCobrancaConta = new EmpresaCobrancaConta();
				empresaCobrancaConta.setId(idEmpresaCobrancaConta);
				empresaCobrancaContaPagamentos.setEmpresaCobrancaConta(empresaCobrancaConta);
				empresaCobrancaContaPagamentos.setAnoMesPagamentoArrecadacao(anoMesArrecadacao);
				empresaCobrancaContaPagamentos.setValorPagamentoMes(valorPagamentoMes);
				//Alteracao CRC 2650
				empresaCobrancaContaPagamentos.setIndicadorTipoPagamento(indicadorTipoPagamento);
				empresaCobrancaContaPagamentos.setNumeroParcelaAtual(numeroParcelaAtual);
				empresaCobrancaContaPagamentos.setNumeroTotalParcelas(numeroTotalParcelas);
				//FIM - Alteracao CRC 2650
				empresaCobrancaContaPagamentos.setUltimaAlteracao(new Date());
				if(pagamento.getAnoMesReferenciaPagamento() != null){
					empresaCobrancaContaPagamentos.setAnoMesReferenciaPagamento(pagamento.getAnoMesReferenciaPagamento());
				}
				
				empresaCobrancaContaPagamentos.setDataPagamento(pagamento.getDataPagamento());
				
				if(pagamento.getImovel() != null){
					empresaCobrancaContaPagamentos.setIdImovel(pagamento.getImovel().getId());	
				}
				
				if(pagamento.getAvisoBancario() != null){
					empresaCobrancaContaPagamentos.setIdArrecadador(pagamento.getAvisoBancario().getArrecadador().getId());	
				}
				
				empresaCobrancaContaPagamentos.setCobrancaDocumento(null);
				
				if(idCobrancaDocumento !=null && idCobrancaDocumento.intValue() !=0){
					CobrancaDocumento cd = new CobrancaDocumento();
					cd.setId(idCobrancaDocumento);
					empresaCobrancaContaPagamentos.setCobrancaDocumento(cd);
				}
				
				colecaoEmpresaContaCobrancaPagamentos.add(empresaCobrancaContaPagamentos);
			}
		
		}catch (Exception ex) {
			ex.printStackTrace();
			
			throw new EJBException(ex);
		}
		
		return colecaoEmpresaContaCobrancaPagamentos;
	}

	/**
	 * [UC0867] Atualizar Pagamentos das Contas em Cobrança
	 *
	 * @author Sávio Luiz
	 * @date 27/10/2008
	 *
	 */
	private void verificarItensParcelamentosNivel2(Parcelamento parcelamento, 
            GuiaPagamento guiaPagamento,
            DebitoACobrar debitoACobrar,
            Pagamento pagamento,
            DebitoCobrado debitoCobrado,
            Integer anoMesArrecadacao,
            Integer idDebitoACobrarNivel2,
            Collection colecaoEmpresaContaCobrancaPagamentos) 
			 throws ControladorException{

		try{

			Integer idParcelamento = null;
		
			/*
			* Comentado por Raphael Rossiter a pedido de Eduardo Borges em 10/08/2011
			* OBJ: Igualar a fórmula de cálculo dos dois níveis
			*/
			
			/*
			BigDecimal valorCalculadoDebitoACobrarHistorico = null;
			
			Object[] dadosDebitoACobrar = repositorioCobranca.
			pesquisarDadosDebitoACobrar(idDebitoACobrarNivel2);
			
			if(dadosDebitoACobrar != null){
			
				Short prestacaoDebitos = null;
				Short prestacaoCobradas = null;
				
				if(dadosDebitoACobrar[0] != null){
					idParcelamento = (Integer)dadosDebitoACobrar[0];
				}
				if(dadosDebitoACobrar[1] != null){
					prestacaoDebitos = (Short)dadosDebitoACobrar[1];
				}
				if(dadosDebitoACobrar[2] != null){
					prestacaoCobradas = (Short)dadosDebitoACobrar[2];
				}

				valorCalculadoDebitoACobrarHistorico = new BigDecimal((prestacaoDebitos.floatValue() - prestacaoCobradas.floatValue())/prestacaoDebitos.floatValue()).setScale(2,BigDecimal.ROUND_HALF_UP);
			}*/

			if(idParcelamento != null){

				System.out.println("consulta itens parcelamento nivel 2");
				Collection<Object[]> collItensParcelamentosNivel2 = repositorioCobranca.
				pesquisarItensParcelamentosNivel2(idParcelamento);
				System.out.println("fim consulta itens parcelamento nivel 2");
				//loop de dados dos itens do parcelamentos
				Integer idContaGeralNivel2 = null;
				BigDecimal valorContaNivel2 = null;

				if(collItensParcelamentosNivel2 != null && !collItensParcelamentosNivel2.isEmpty()){
					for (Object[] dadosItensParcelamento : collItensParcelamentosNivel2){
						//verifica se os dados dos itens de parcelamento est· diferente de nulo
						if(dadosItensParcelamento != null){
							//verifica se existe o valor da conta
							if(dadosItensParcelamento[2] != null){
								valorContaNivel2 = (BigDecimal)dadosItensParcelamento[2];
							}
						
							//verifica se existe o id da conta
							if(dadosItensParcelamento[0] != null){
								idContaGeralNivel2 = (Integer)dadosItensParcelamento[0];
								//caso não seja guia de pagamento nem debito a cobrar 
								if(guiaPagamento == null && debitoACobrar == null){
									//[SB0005] - Atualizar pagamento de conta parcelada a partir do debito cobrado nivel 2
									criaColecaoEmpresaContaCobrancaPagamento(idContaGeralNivel2,valorContaNivel2,pagamento
											,debitoCobrado.getDebitoTipo(),parcelamento,true,debitoCobrado.getValorPrestacao(),
											anoMesArrecadacao,
											null,
											colecaoEmpresaContaCobrancaPagamentos,
											ConstantesSistema.INDICADOR_PAGAMENTO_PARCELADO,
											new Integer(debitoCobrado.getNumeroPrestacaoDebito()),
											new Integer(debitoCobrado.getNumeroPrestacao()), null, "PARCELAMENTO");
								}else{
									if(guiaPagamento != null){
										//[SB0008] - Atualizar pagamento de conta parcelada a partir da guia de pagamento nivel 2
										criaColecaoEmpresaContaCobrancaPagamento(idContaGeralNivel2,valorContaNivel2,pagamento
												,guiaPagamento.getDebitoTipo(),parcelamento,true,guiaPagamento.getValorDebito(),
												anoMesArrecadacao,
												null,
												colecaoEmpresaContaCobrancaPagamentos,
												ConstantesSistema.INDICADOR_PAGAMENTO_A_VISTA,
												new Integer("0"),
												new Integer("0"), null, "PARCELAMENTO");
									}else{
										//[SB0013] - Atualizar pagamento de conta parcelada a partir do debito a cobrar nivel 2
										criaColecaoEmpresaContaCobrancaPagamento(idContaGeralNivel2,valorContaNivel2,pagamento
												,debitoACobrar.getDebitoTipo(),parcelamento,true,debitoACobrar.getValorTotalComBonus(),
												anoMesArrecadacao,
												null,
												colecaoEmpresaContaCobrancaPagamentos,
												ConstantesSistema.INDICADOR_PAGAMENTO_PARCELADO,
												new Integer("0"),
												new Integer("0"), null, "PARCELAMENTO");
									}
	
								}

							}

						}

						//limpa os campos
						idContaGeralNivel2 = null;
					}
				}

			}

		}catch (Exception ex) {

			ex.printStackTrace();

			throw new EJBException(ex);
		}

	}
	
	/**
	 * [UC0869] Gerar Arquivo Texto de Contas em Cobrança por Empresa
	 * 
	 * Pesquisa a quantidade de contas
	 * 
	 * @author: Rômulo Aurélio
	 * @date: 29/10/2008
	 */
	
	
	public Integer pesquisarDadosGerarArquivoTextoContasCobrancaEmpresaCount(
			Integer idEmpresa, Date comandoInicial, Date comandoFinal)
			throws ControladorException{
			Integer retorno = 0;	
			
			try {
			
			retorno = repositorioCobranca.pesquisarDadosGerarArquivoTextoContasCobrancaEmpresaParaCobrancaCount(
					 idEmpresa,  comandoInicial,  comandoFinal);
			
			}catch (ErroRepositorioException e) {
				throw new ControladorException("erro.sistema", e);
			}
			
			return retorno;
		
	}
	
	
	/**
	 * [UC0869] Gerar Arquivo Texto de Contas em Cobrança por Empresa
	 * 
	 * Pesquisa a quantidade de contas
	 * 
	 * @author: Rômulo Aurélio
	 * @date: 29/10/2008
	 */
	
	public Collection<GerarArquivoTextoContasCobrancaEmpresaHelper> pesquisarDadosGerarArquivoTextoContasCobrancaEmpresa(
			Integer idEmpresa, Date comandoInicial, Date comandoFinal,int pagina)
			throws ControladorException {
		
		Collection<GerarArquivoTextoContasCobrancaEmpresaHelper> colecaoGerarArquivoTextoContasCobrancaEmpresaHelper = null;

		
		try {

			
			// Variáveis para a paginação da pesquisa
			// ========================================================================
			final int quantidadeRegistros = 10;
			// ========================================================================


				//colecaoGerarArquivoTextoContasCobrancaEmpresaHelper = this.montarDadosContasCobrancaEmpresa();
				
				colecaoGerarArquivoTextoContasCobrancaEmpresaHelper = (Collection) repositorioCobranca
						.pesquisarDadosGerarArquivoTextoContasCobrancaEmpresaParaCobrancaResumido(
								idEmpresa, comandoInicial, comandoFinal,
								pagina, quantidadeRegistros);

				/*Collection dadosContasCobrancaEmpresaParaCriterio = repositorioCobranca
						.pesquisarDadosGerarArquivoTextoContasCobrancaEmpresaParaCriterio(
								idEmpresa, comandoInicial, comandoFinal,
								numeroIndice, quantidadeRegistros);

				Map<Integer, GerarArquivoTextoContasCobrancaEmpresaHelper> mapHelper = new HashMap<Integer, GerarArquivoTextoContasCobrancaEmpresaHelper>();

				if (dadosContasCobrancaEmpresaParaCriterio != null
						&& !dadosContasCobrancaEmpresaParaCriterio.isEmpty()) {

					Iterator dadosContasCobrancaEmpresaParaCriterioIterator = dadosContasCobrancaEmpresaParaCriterio
							.iterator();

					while (dadosContasCobrancaEmpresaParaCriterioIterator
							.hasNext()) {
						// cria um array de objetos para pegar os parametros
						// de
						// retorno da pesquisa
						Object[] arraydadosContasCobrancaEmpresaParaCriterio = (Object[]) dadosContasCobrancaEmpresaParaCriterioIterator
								.next();

						GerarArquivoTextoContasCobrancaEmpresaHelper helper = new GerarArquivoTextoContasCobrancaEmpresaHelper();

						if (arraydadosContasCobrancaEmpresaParaCriterio[0] != null) {
							helper
									.setIdComandoEmpresaCobrancaConta((Integer) arraydadosContasCobrancaEmpresaParaCriterio[0]);
						}

						if (arraydadosContasCobrancaEmpresaParaCriterio[1] != null) {
							helper
									.setQtdeContasCriterioComando((Integer) arraydadosContasCobrancaEmpresaParaCriterio[1]);
						}

						if (arraydadosContasCobrancaEmpresaParaCriterio[2] != null) {
							helper
									.setValorContasCriterioComando((BigDecimal) arraydadosContasCobrancaEmpresaParaCriterio[2]);
						}

						mapHelper.put(
								helper.getIdComandoEmpresaCobrancaConta(),
								helper);
					}

				}*/

				// Colecao com o Helper principal

				/*if (colecaoGerarArquivoTextoContasCobrancaEmpresaHelper != null
						&& !colecaoGerarArquivoTextoContasCobrancaEmpresaHelper
								.isEmpty()) {

					Iterator colecaoGerarArquivoTextoContasCobrancaEmpresaHelperIterator = colecaoGerarArquivoTextoContasCobrancaEmpresaHelper
							.iterator();

					while (colecaoGerarArquivoTextoContasCobrancaEmpresaHelperIterator
							.hasNext()) {

						GerarArquivoTextoContasCobrancaEmpresaHelper helper = (GerarArquivoTextoContasCobrancaEmpresaHelper) colecaoGerarArquivoTextoContasCobrancaEmpresaHelperIterator
								.next();

						// Passa os dados do Map para o Helper principal

						if (mapHelper.containsKey(helper
								.getIdComandoEmpresaCobrancaConta())) {

							GerarArquivoTextoContasCobrancaEmpresaHelper aux = mapHelper
									.get(helper
											.getIdComandoEmpresaCobrancaConta());

							helper.setQtdeContasCriterioComando(aux
									.getQtdeContasCriterioComando());

							helper.setValorContasCriterioComando(aux
									.getValorContasCriterioComando());

						}
					}
				}*/



	
	
			

		} catch (ErroRepositorioException e) {
			throw new ControladorException("erro.sistema", e);
		}
		
		return colecaoGerarArquivoTextoContasCobrancaEmpresaHelper;
	}
	
	
	/*public Collection<GerarArquivoTextoContasCobrancaEmpresaHelper> montarDadosContasCobrancaEmpresa() 
	throws ControladorException{
	
		//Collection colecaoDados = 
	
		Collection<GerarArquivoTextoContasCobrancaEmpresaHelper> retorno = null;;
		
		/*
		
		if(colecaoDados != null  && colecaoDados.hasnext()){
		 
			while (colecaoDados.hasNext()) {
				// cria um array de objetos para pegar os parametros
				// de
				// retorno da pesquisa
				Object[] arraydados = (Object[]) dadosContasCobrancaEmpresaParaCriterioIterator
						.next();
	
				GerarArquivoTextoContasCobrancaEmpresaHelper helper = new GerarArquivoTextoContasCobrancaEmpresaHelper();
	
				if (arraydados[0] != null) {
					helper
							.setIdComandoEmpresaCobrancaConta((Integer) arraydados[0]);
				}
	
				if (arraydados[1] != null) {
					helper
							.setIdEmpresa((Integer) arraydados[1]);
				}
	
				if (arraydados[2] != null) {
					helper
							.setNomeEmpresa((String) arraydados[2]);
			}
			
			if (arraydados[3] != null) {
					helper
							.setCodigoSetorComercialInicial((String) arraydados[3]);
			}
			
			if (arraydados[4] != null) {
					helper
							.setCodigoSetorComercialFinal((String) arraydados[4]);
			}
			
			if (arraydados[5] != null) {
					helper
							.setValorMinimoConta((BigDecimal) arraydados[5]);
			}
			
			if (arraydados[6] != null) {
					helper
							.setValorMaximoConta((BigDecimal) arraydados[6]);
			}
			
			if (arraydados[7] != null) {
					helper
							.setAnoMesReferenciaContaInicial((Integer) arraydados[7]);
			}
			if (arraydados[8] != null) {
					helper
							.setAnoMesReferenciaContaFinal((Integer) arraydados[8]);
			}
			if (arraydados[9] != null) {
					helper
							.setDataVencimentoContaInicial((Date) arraydados[9]);
			}
			if (arraydados[10] != null) {
					helper
							.setDataVencimentoContaFinal((Date) arraydados[10]);
			}
			if (arraydados[11] != null) {
					helper
							.setDataExecucao((String) arraydados[11]);
			}
			if (arraydados[12] != null) {
					helper
							.setIdImovel((Integer) arraydados[12]);
			}
			if (arraydados[13] != null) {
					helper
							.setIdCliente(Integer) arraydados[13]);
			}
			if (arraydados[14] != null) {
					helper
							.setNomeCliente(String) arraydados[14]);
			}
			if (arraydados[15] != null) {
					helper
							.setIdLocalidadeInicial(Integer) arraydados[15]);
			}
			if (arraydados[16] != null) {
					helper
							.setIdLocalidadeFinal(Integer) arraydados[16]);
			}
			if (arraydados[17] != null) {
					helper
							.setIdCliente(Integer) arraydados[17]);
			}
			if (arraydados[18] != null) {
					helper
							.setIdUnidadeNegocio(Integer) arraydados[18]);
			}
			if (arraydados[19] != null) {
					helper
							.setNomeUnidadeNegocio(String) arraydados[19]);
			}
		}
		}
		
	
	
		return retorno;
	}*/
	
	
	public Collection obterUnidadeNegocioEmpresaCobrancaConta(Integer[] ids)
			throws ControladorException{
		
		Collection colecaoUnidadeNegocio = null;
		
		Collection colecaoIdsUnidades = null;
		
		try {
			
			colecaoIdsUnidades = repositorioCobranca.obterUnidadeNegocioEmpresaCobrancaConta(ids);
		
		
			if(colecaoIdsUnidades != null && !colecaoIdsUnidades.isEmpty()){
				
				colecaoUnidadeNegocio = new ArrayList();
				Iterator iter = colecaoIdsUnidades.iterator();
				while(iter.hasNext()) {
					
					Integer idUnidade = (Integer) iter.next();
				
					UnidadeNegocio unidadeNegocio = new UnidadeNegocio();
					
					unidadeNegocio.setId(idUnidade);
					
					colecaoUnidadeNegocio.add(unidadeNegocio);
				}
			}
		} catch (ErroRepositorioException e) {
			e.printStackTrace();
		}
		return colecaoUnidadeNegocio;
	}
			
			
			
	/**
	 * [UC0869] Gerar Arquivo Texto de Contas em Cobrança por Empresa
	 * 
	 * Pesquisa a quantidade de contas
	 * 
	 * @author: Rômulo Aurélio
	 * @throws ControladorException 
	 * @date: 29/10/2008
	 */
	private void montarDadosGerarArquivoTextoContasEmCobrancaEmpresa(
			Object[] arraydadosTxt,
			GerarArquivoTextoContasCobrancaEmpresaHelper helper,
			Collection ids) throws ControladorException {
		// ID EmpresaCobrancaConta
		if (arraydadosTxt[0] != null) {
			helper.setIdCobrancaConta((Integer) (arraydadosTxt[0]));
		}
		// Id unidadeNegocio
		if (arraydadosTxt[1] != null) {
			helper.setIdUnidadeNegocio((Integer) (arraydadosTxt[1]));
		}

		// Nome unidadeNegocio
		if (arraydadosTxt[2] != null) {
			helper.setNomeUnidadeNegocio((String) (arraydadosTxt[2]));
		}

		// Faturamento Grupo
		if (arraydadosTxt[3] != null) {
			helper.setIdFaturamentoGrupo((Integer) (arraydadosTxt[3]));
		}

		// Localidade

		if (arraydadosTxt[4] != null) {
			helper.setIdLocalidade((Integer) (arraydadosTxt[4]));
		}

		if (arraydadosTxt[5] != null) {
			helper.setNomeLocalidade((String) (arraydadosTxt[5]));
		}
		// Codigo da Rota
		if (arraydadosTxt[6] != null) {
			helper.setCodigoRota((Short) (arraydadosTxt[6]));
		}

		// Sequencial da Rota
		if (arraydadosTxt[7] != null) {
			helper.setNumeroSequencialRota((Integer) (arraydadosTxt[7]));
		}

		// IdImovel
		if (arraydadosTxt[8] != null) {
			helper.setIdImovel((Integer) (arraydadosTxt[8]));
		}

		// nomeCliente
		if (arraydadosTxt[9] != null) {
			helper.setNomeClienteConta((String) (arraydadosTxt[9]));
		}

		// IndicadorPessoaFisicaJuridica
		if (arraydadosTxt[10] != null) {
			helper.setIndicadorPessoaFisicaJuridica((Short) (arraydadosTxt[10]));
		}
		// Cpf
		if (arraydadosTxt[11] != null) {
			helper.setCpf((String) (arraydadosTxt[11]));
		}

		// Cnpj
		if (arraydadosTxt[12] != null) {
			helper.setCnpj((String) (arraydadosTxt[12]));
		}

		// RG
		if (arraydadosTxt[13] != null) {
			helper.setRg((String) (arraydadosTxt[13]));
		}

		// numeroQuadra
		if (arraydadosTxt[14] != null) {
			helper
					.setNumeroQuadra((((Integer) (arraydadosTxt[14]))
							.intValue()));
		}
		
		Conta conta = new Conta();
		// idConta
		if (arraydadosTxt[15] != null) {
			conta.setId((Integer) (arraydadosTxt[15]));

		}
		// telefone
		if (arraydadosTxt[16] != null) {
			helper.setTelefone((String) (arraydadosTxt[16]));
		}
		
		// Nome Abreviado Cliente
		
		if (arraydadosTxt[17] != null) {
			helper.setNomeAbreviadoCliente((String) (arraydadosTxt[17]));
		}
		
		// AnoMesReferencia conta
		if (arraydadosTxt[18] != null) {
			conta.setReferencia(((Integer) (arraydadosTxt[18])).intValue());

		}

		// Data vencimento conta
		if (arraydadosTxt[19] != null) {
			conta.setDataVencimentoConta((Date) (arraydadosTxt[19]));

		}

		// Valor Agua
		if (arraydadosTxt[20] != null) {
			conta.setValorAgua((BigDecimal) (arraydadosTxt[20]));

		}

		// Valor Esgoto
		if (arraydadosTxt[21] != null) {
			conta.setValorEsgoto((BigDecimal) (arraydadosTxt[21]));

		}

		// Valor Debitos
		if (arraydadosTxt[22] != null) {
			conta.setDebitos((BigDecimal) (arraydadosTxt[22]));

		}

		// Valor creditos
		if (arraydadosTxt[23] != null) {
			conta.setValorCreditos((BigDecimal) (arraydadosTxt[23]));

		}
		// codigoSetor comercial
		if (arraydadosTxt[24] != null) {
			helper.setCodigoSetorComercial(((Integer) (arraydadosTxt[24]))
					.toString());

		}

		// lote
		if (arraydadosTxt[25] != null) {
			helper.setNumeroLote((Short) (arraydadosTxt[25]));

		}

		// sublote
		if (arraydadosTxt[26] != null) {
			helper.setNumeroSublote((Short) (arraydadosTxt[26]));

		}

		// cliente id
		if (arraydadosTxt[27] != null) {
			helper.setIdCliente((Integer) (arraydadosTxt[27]));

		}

		// id da gerência regional
		if (arraydadosTxt[28] != null) {
			helper.setIdGerenciaRegional((Integer) (arraydadosTxt[28]));

		}

		// nome da gerência regional
		if (arraydadosTxt[29] != null) {
			helper.setNomeGerenciaRegional((String) (arraydadosTxt[29]));

		}

		// código do layout txt
		if (arraydadosTxt[30] != null) {
			helper.setCodigoLayoutTxt((Short) (arraydadosTxt[30]));

		}

		helper.setConta(conta);

		try {
			Collection colecaoDadosTxt = getControladorEndereco()
					.pesquisarDadosClienteEnderecoArquivoTextoContasCobrancaEmpresa(
							helper.getIdCliente());

			if (colecaoDadosTxt != null && !colecaoDadosTxt.isEmpty()) {

				Iterator colecaoDadosTxtIterator = colecaoDadosTxt.iterator();

				while (colecaoDadosTxtIterator.hasNext()) {

					// cria um array de objetos para pegar os parametros
					// de retorno da pesquisa
					Object[] arraydados = (Object[]) colecaoDadosTxtIterator
							.next();

					// nomeLogradouro
					if (arraydados[0] != null) {
						helper.setNomeLogradouro((String) (arraydados[0]));
					}

					// complemento endereco
					if (arraydados[1] != null) {
						helper.setComplementoEndereco((String) (arraydados[1]));
					}

					// codigo cep
					if (arraydados[2] != null) {
						helper.setCodigoCep(((Integer) (arraydados[2]))
								.toString());
					}

					// nome Bairro
					if (arraydados[3] != null) {
						helper.setNomeBairro((String) (arraydados[3]));
					}

					// numero imovel
					if (arraydados[4] != null) {
						helper.setNumeroImovel((String) (arraydados[4]));
					}
					
					//tipo logradouro
					if ( arraydados[5] != null ) {
						Integer id = (Integer) arraydados[5];
						FiltroLogradouroTipo filtroLogradouroTipo = new FiltroLogradouroTipo();
						filtroLogradouroTipo.adicionarParametro(new ParametroSimples(FiltroLogradouroTipo.ID, id));
						Collection colecaoLogradouroTipo = this.getControladorUtil().pesquisar(filtroLogradouroTipo,
								LogradouroTipo.class.getName());
						LogradouroTipo logradouroTipo = (LogradouroTipo) Util.retonarObjetoDeColecao(colecaoLogradouroTipo);
						helper.setTipoLogradouro( logradouroTipo.getDescricao() );
					}

				}

			}
			if(colecaoDadosTxt !=null ){
				colecaoDadosTxt.clear();
			}

			Integer quantidadeContas = repositorioCobranca.
				pesquisarQuantidadeContasArquivoTextoContasCobrancaEmpresa(ids, helper.getIdImovel());
			
			if (quantidadeContas != null) {
				helper.setQuantidadeContas(quantidadeContas);
			}
			
		} catch (ControladorException e) {
			e.printStackTrace();
			throw new ControladorException("erro.sistema", e);
		} catch (ErroRepositorioException e) {
			e.printStackTrace();
			throw new ControladorException("erro.sistema", e);
		}
	}

	/**
	 * [UC0869] Gerar Arquivo Texto de Contas em Cobrança por Empresa
	 * 
	 * Pesquisa a quantidade de contas
	 * 
	 * @author: Rômulo Aurélio
	 * @date: 29/10/2008
	 */
	private void montarArquivoTextoContasEmCobrancaEmpresa(
			StringBuilder arquivoTxt,
			GerarArquivoTextoContasCobrancaEmpresaHelper helper) {

		// idUnidadeNegocio tam 04
		if (helper.getIdUnidadeNegocio() != null) {
			arquivoTxt.append(Util.truncarString(helper.getIdUnidadeNegocio()
					.toString(), 4)
					+ ";");
		} else {
			arquivoTxt.append(";");
		}
		// nomeUnidadeNegocio tam 50
		if (helper.getNomeUnidadeNegocio() != null) {
			arquivoTxt.append(Util.truncarString(
					helper.getNomeUnidadeNegocio(), 50)
					+ ";");
		} else {
			arquivoTxt.append(";");
		}
		// IdFaturamentoGrupo tam 04
		if (helper.getIdFaturamentoGrupo() != null) {
			arquivoTxt.append(Util.truncarString(helper.getIdFaturamentoGrupo()
					.toString(), 4)
					+ ";");
		} else {
			arquivoTxt.append(";");
		}
		// IdLocalidade tam 04
		if (helper.getIdLocalidade() != null) {
			arquivoTxt.append(Util.truncarString(helper.getIdLocalidade()
					.toString(), 4)
					+ ";");
		} else {
			arquivoTxt.append(";");
		}
		// NomeLocalidade tam 30
		if (helper.getNomeLocalidade() != null) {
			arquivoTxt.append(Util
					.truncarString(helper.getNomeLocalidade(), 30)
					+ ";");
		} else {
			arquivoTxt.append(";");
		}

		// codigoRota tam 06
		if (helper.getCodigoRota() != null) {
			arquivoTxt.append(Util.truncarString(helper.getCodigoRota()
					.toString(), 6)
					+ ";");
		} else {
			arquivoTxt.append(";");
		}

		// sequencialRota tam 09
		if (helper.getNumeroSequencialRota() != null) {
			arquivoTxt.append(Util.truncarString(helper
					.getNumeroSequencialRota().toString(), 9)
					+ ";");
		} else {
			arquivoTxt.append(";");
		}

		// ComplementoSequencialRota tam 0 ????
		// arquivoTxt.append(";");

		// matriculaImovel tam 09
		if (helper.getIdImovel() != null) {
			arquivoTxt.append(Util.truncarString(helper.getIdImovel()
					.toString(), 9)
					+ ";");
		} else {
			arquivoTxt.append(";");
		}

		// nomeCliente tam 40
		if (helper.getNomeClienteConta() != null) {
			arquivoTxt.append(Util.truncarString(helper.getNomeClienteConta(),
					40)
					+ ";");
		} else {
			arquivoTxt.append(";");
		}

		// nomeAbreviadoCliente tam 40
		if (helper.getNomeAbreviadoCliente() != null) {
			arquivoTxt.append(Util.truncarString(helper
					.getNomeAbreviadoCliente(), 40)
					+ ";");
		} else {
			arquivoTxt.append(";");
		}
		// NomeLogradouro tam 30
		if (helper.getNomeLogradouro() != null) {
			arquivoTxt.append(Util
					.truncarString(helper.getNomeLogradouro(), 30)
					+ ";");
		} else {
			arquivoTxt.append(";");
		}

		// NumeroImovel tam 5
		if (helper.getNumeroImovel() != null) {
			arquivoTxt.append(Util.adicionarZerosEsquedaNumeroTruncando(5,
					helper.getNumeroImovel().toString())
					+ ";");
		} else {
			arquivoTxt.append(Util.adicionarZerosEsquedaNumeroTruncando(5, "")+";");
		}

		// ComplementoImovel tam 3 ????
		// arquivoTxt.append(";");

		// complementoEndereco tam 50
		if (helper.getComplementoEndereco() != null) {
			arquivoTxt.append(Util.truncarString(helper
					.getComplementoEndereco(), 50)
					+ ";");
		} else {
			arquivoTxt.append(";");
		}

		// codigo cep tam 10
		if (helper.getCodigoCep() != null) {
			arquivoTxt.append(Util.truncarString(helper.getCodigoCep(), 10)
					+ ";");
		} else {
			arquivoTxt.append(";");
		}

		// nomeBairro tam 30
		if (helper.getNomeBairro() != null) {
			arquivoTxt.append(Util.truncarString(helper.getNomeBairro(), 30)
					+ ";");
		} else {
			arquivoTxt.append(";");
		}
		// telefone tam 9
		if (helper.getTelefone() != null) {
			arquivoTxt
					.append(Util.truncarString(helper.getTelefone(), 9) + ";");
		} else {
			arquivoTxt.append(";");
		}

		// CPF e CNPJtam 18
		if (helper.getIndicadorPessoaFisicaJuridica().toString().equalsIgnoreCase(
				ClienteTipo.INDICADOR_PESSOA_FISICA.toString())) {
			// cpf
			if (helper.getCpf() != null) {
				arquivoTxt.append(Util.truncarString(Util.formatarCpf(helper
						.getCpf()), 18)
						+ ";");
			} else {
				arquivoTxt.append(";");
			}

		} else {

			// cnpj

			if (helper.getCnpj() != null) {
				arquivoTxt.append(Util.truncarString(Util.formatarCnpj(helper
						.getCnpj()), 18)
						+ ";");
			} else {
				arquivoTxt.append(";");
			}
		}

		// RG tam 13
		if (helper.getIndicadorPessoaFisicaJuridica().toString().equalsIgnoreCase(
				ClienteTipo.INDICADOR_PESSOA_FISICA.toString())) {

			if (helper.getRg() != null) {
				arquivoTxt.append(Util.truncarString(helper.getRg(), 13) + ";");
			} else {
				arquivoTxt.append(";");
			}
		} else {
			arquivoTxt.append(";");
		}

		

		// Dados Conta
		if (helper.getConta() != null) {
			
			arquivoTxt.append(Util.formatarAnoMesParaMesAnoSemZeroNoMes(""+helper.getConta().getReferencia())
						+ ";");


			// Referencia tam 10 DD/MM/AAAA
			if (helper
					.getConta().getDataVencimentoConta() != null) {
				arquivoTxt.append(Util.formatarDataSemZeroAntesMes(helper
						.getConta().getDataVencimentoConta())
						+ ";");
			} else {
				arquivoTxt.append(";");
			}

			// Valor Ligacao Agua tam 15
			if (helper.getConta().getValorAgua() != null) {

				arquivoTxt.append(Util.adicionarZerosEsquedaNumeroTruncando(15,
						Util.formatarBigDecimalParaString(helper.getConta()
								.getValorAgua()))
						+ ";");

			} else {
				arquivoTxt.append(";");
			}

			// Valor Ligacao Esgoto tam 15
			if (helper.getConta().getValorEsgoto() != null) {

				arquivoTxt.append(Util.truncarString(
						Util.formatarBigDecimalParaString(helper.getConta()
								.getValorEsgoto()),15)
						+ ";");

			} else {
				arquivoTxt.append(";");
			}

			// Valor Ligacao Esgoto tam 15
			if (helper.getConta().getValorEsgoto() != null) {

				arquivoTxt.append(Util.truncarString(
						Util.formatarBigDecimalParaString(helper.getConta()
								.getValorEsgoto()),15)
						+ ";");

			} else {
				arquivoTxt.append(";");
			}
			// Valor Ligacao Esgoto tam 15
			if (helper.getConta().getValorEsgoto() != null) {

				arquivoTxt.append(Util.truncarString(
						Util.formatarBigDecimalParaString(helper.getConta()
								.getValorEsgoto()),15)
						+ ";");

			} else {
				arquivoTxt.append(";");
			}

			// Valor Ligacao Debitos tam 15

			if (helper.getConta().getDebitos() != null) {

				arquivoTxt.append(Util.truncarString(
						Util.formatarBigDecimalParaString(helper.getConta()
								.getDebitos()),15)
						+ ";");
			} else {
				arquivoTxt.append(";");
			}

			// Valor Ligacao Creditos tam 15
			if (helper.getConta().getValorCreditos() != null) {

				arquivoTxt.append(Util.truncarString(
						Util.formatarBigDecimalParaString(helper.getConta()
								.getValorCreditos()),15)
						+ ";");

			} else {
				arquivoTxt.append(";");
			}

			// Valor Ligacao Fatura tam 15
			if (helper.getConta().getValorTotal() != null) {

				arquivoTxt.append(Util.truncarString(
						Util.formatarBigDecimalParaString(helper.getConta()
								.getValorTotal()),15)
						+ ";");

			} else {
				arquivoTxt.append(";");
			}

			// Ano Controle tam 4

			arquivoTxt.append(Util.obterAno(helper.getConta().getReferencia())
					+ ";");

			// Controle

			arquivoTxt.append(Util.truncarString(helper.getConta().getId()
					.toString(), 10)
					+ ";");

			// Setor Comercial

			if (helper.getCodigoSetorComercial() != null) {
				arquivoTxt.append(Util.truncarString(helper
						.getCodigoSetorComercial().toString(), 4)
						+ ";");
			} else {
				arquivoTxt.append(";");
			}
			// Quadra

				
			arquivoTxt.append(Util.truncarString("" + helper.getNumeroQuadra(),
					7)
					+ ";");
			

			// Lote
			arquivoTxt.append(Util.truncarString(""
					+ helper.getNumeroLote(), 4)
					+ ";");

			// Sublote

			arquivoTxt.append(Util.truncarString(""
					+ helper.getNumeroSublote(), 4)
					+ ";");
			
			//tipoLogradouro tam 20
			if (helper.getTipoLogradouro() != null) {
				arquivoTxt.append(Util
						.truncarString(helper.getTipoLogradouro(), 20)
						+ "");
			} 
		}

	}
	
	
	/**
	 * [UC0214] - Efetuar Parcelamento de Débitos
	 *
	 * @author Raphael Rossiter
	 * @date 13/11/2008
	 *
	 * @return Collection<ResolucaoDiretoria>
	 * @throws ControladorException
	 */
	public Collection<ResolucaoDiretoria> pesquisarResolucaoDiretoriaMaiorDataVigenciaInicioPermissaoEspecial(
			Imovel imovel, Usuario usuarioLogado) throws ControladorException {

		try {
			Collection colecaoRD = null;
			Collection colecaoRDComLimitacaoGeografica = null;
			
			//pesquisa as RD sem limitação geográfica
			colecaoRD = repositorioCobranca.pesquisarResolucaoDiretoriaMaiorDataVigenciaInicioPermissaoEspecial();
			
			if (imovel != null){
				//pesquisa as RD com limitação geográfica
				colecaoRDComLimitacaoGeografica = repositorioCobranca.
						pesquisarResolucaoDiretoriaComLimitacaoGeograficaPermissaoEspecial(imovel,ConstantesSistema.NAO,null); 
				if(colecaoRDComLimitacaoGeografica != null && !colecaoRDComLimitacaoGeografica.isEmpty()){
					colecaoRD.addAll(colecaoRDComLimitacaoGeografica);
				}
			}
			
			Collection colecaoRDAcessoRestrito = pesquisarResolucaoDiretoriaMaiorDataVigenciaInicioRDAcessoRestrito(imovel, usuarioLogado);
			if(colecaoRDAcessoRestrito != null && !colecaoRDAcessoRestrito.isEmpty()){
				colecaoRD.addAll(colecaoRDAcessoRestrito);
			}
			
			return colecaoRD;
			
			// erro no hibernate
		} catch (ErroRepositorioException ex) {
			// seta o rollback
			sessionContext.setRollbackOnly();
			// levanta a exceção para a próxima camada
			throw new ControladorException("erro.sistema", ex);
		}
	}
	
	/**
	 * Pesquisa a quantidade de Rotas que nao possui um Criterio definido para cada uma das Acoes de Cobrancas passadas no filtro
	 * 
	 * @author Victor Cisneiros
	 * @date 10/12/2008
	 */
	public Integer pesquisarQtdeRotasSemCriteriosParaAcoesCobranca(
			PesquisarQtdeRotasSemCriteriosParaAcoesCobranca filtro) throws ControladorException {
		try {
			return repositorioCobranca.pesquisarQtdeRotasSemCriteriosParaAcoesCobranca(filtro);
		} catch (ErroRepositorioException ex) {
			sessionContext.setRollbackOnly();
			throw new ControladorException("erro.sistema", ex);
		}
	}
	
	/**
	 * [UC0325] Consultar Comandos de Ação de Cobrança
	 * 
	 * Cancela os Documentos de Cobranças Gerados do Cronograma ou Eventual
	 * 
	 * @author Victor Cisneiros
	 * @date 19/12/2008
	 */
	public void cancelarDocumentosCobrancaDoCronogramaOuEventual(Usuario usuarioLogado,
			Integer idCobrancaAcaoAtividadeCronograma, Integer idCobrancaAcaoAtividadeComando) throws ControladorException {
		 
		// Verifica se é possível realizar esse cancelamento
		CancelarDocumentosCobrancaHelper helper = this.verificarCancelamentoDocumentosCobranca(idCobrancaAcaoAtividadeCronograma, idCobrancaAcaoAtividadeComando);
		
		CobrancaAcao cobrancaAcao = helper.getCobrancaAcao();
		CobrancaAcaoAtividadeCronograma cobrancaAcaoAtividadeCronograma = helper.getCobrancaAcaoAtividadeCronograma();
		CobrancaAcaoAtividadeComando cobrancaAcaoAtividadeComando = helper.getCobrancaAcaoAtividadeComando();
		ArrayList<Integer> idsCobrancaDocumento = (ArrayList<Integer>) helper.getIdsDocumentosCobranca();
		
		try {
			
			cancelarDocumentosCobrancaDoCronogramaOuEventual(idsCobrancaDocumento,cobrancaAcao,null,null);

			
			if (cobrancaAcaoAtividadeCronograma != null) {
			
				repositorioCobranca.removerImoveisNaoGerados(cobrancaAcaoAtividadeCronograma.getId(), null);
				
				// ------------ REGISTRAR TRANSAÇÃO----------------------------
				RegistradorOperacao registradorOperacao = new RegistradorOperacao(
						Operacao.OPERACAO_CANCELAR_DOCUMENTOS_COBRANCA,
						idCobrancaAcaoAtividadeCronograma, idCobrancaAcaoAtividadeCronograma,
						new UsuarioAcaoUsuarioHelper(usuarioLogado, UsuarioAcao.USUARIO_ACAO_EFETUOU_OPERACAO));
				registradorOperacao.registrarOperacao(cobrancaAcaoAtividadeCronograma);
				// ------------ REGISTRAR TRANSAÇÃO----------------------------
				
				cobrancaAcaoAtividadeCronograma.setRealizacao(null);
				cobrancaAcaoAtividadeCronograma.setQuantidadeDocumentos(0);
				cobrancaAcaoAtividadeCronograma.setValorDocumentos(new BigDecimal("0"));
				cobrancaAcaoAtividadeCronograma.setQuantidadeItensCobrados(0);
				cobrancaAcaoAtividadeCronograma.setUltimaAlteracao(new Date());
				repositorioUtil.atualizar(cobrancaAcaoAtividadeCronograma);
				
				//Vivianne Sousa - 19/04/2010
				//zerar os valores da tabela CobrancaDocumentoControleGeracao
				repositorioCobranca.atualizarCobrancaDocumentoControleGeracao(0,0,new BigDecimal("0"),
						null,cobrancaAcaoAtividadeCronograma.getId());
			}
			
			if (cobrancaAcaoAtividadeComando != null) {
				
				repositorioCobranca.removerImoveisNaoGerados(null, cobrancaAcaoAtividadeComando.getId());
				
				// ------------ REGISTRAR TRANSAÇÃO----------------------------
				RegistradorOperacao registradorOperacao = new RegistradorOperacao(
						Operacao.OPERACAO_CANCELAR_DOCUMENTOS_COBRANCA,
						idCobrancaAcaoAtividadeComando, idCobrancaAcaoAtividadeComando, 
						new UsuarioAcaoUsuarioHelper(usuarioLogado, UsuarioAcao.USUARIO_ACAO_EFETUOU_OPERACAO));
				registradorOperacao.registrarOperacao(cobrancaAcaoAtividadeComando);
				// ------------ REGISTRAR TRANSAÇÃO----------------------------
				
				cobrancaAcaoAtividadeComando.setRealizacao(null);
				cobrancaAcaoAtividadeComando.setQuantidadeDocumentos(0);
				cobrancaAcaoAtividadeComando.setValorDocumentos(new BigDecimal("0"));
				cobrancaAcaoAtividadeComando.setQuantidadeItensCobrados(0);
				cobrancaAcaoAtividadeComando.setUltimaAlteracao(new Date());
				repositorioUtil.atualizar(cobrancaAcaoAtividadeComando); 
				
				//Vivianne Sousa - 19/04/2010
				//zerar os valores da tabela CobrancaDocumentoControleGeracao
				repositorioCobranca.atualizarCobrancaDocumentoControleGeracao(0,0,new BigDecimal("0"),
						cobrancaAcaoAtividadeComando.getId(),null);
				
			}
			
		} catch (Exception ex) {
			sessionContext.setRollbackOnly();
			throw new ControladorException(ex.getMessage(), ex); 
		}
	}
	
	/**
	 * [UC0325] Consultar Comandos de Ação de Cobrança
	 * 
	 * Cancela os Documentos de Cobranças Gerados do Cronograma ou Eventual
	 * 
	 * @author Victor Cisneiros
	 * @throws ErroRepositorioException 
	 * @date 19/12/2008
	 */
	private void cancelarDocumentosCobrancaDoCronogramaOuEventual(ArrayList<Integer> idsCobrancaDocumento,
			CobrancaAcao cobrancaAcao,Integer idCobrancaDocumentoControleGeracao,
			BigDecimal valorTotalCobrancaDocumento)throws ControladorException, ErroRepositorioException {
		
		SistemaParametro sistemaParametro = getControladorUtil().pesquisarParametrosDoSistema();
		
		int TAM_BLOCO = 998;
		
		if (idsCobrancaDocumento != null && idsCobrancaDocumento.size() > 0) {
			
			int qtdBlocos = (idsCobrancaDocumento.size() / TAM_BLOCO) + 1;
			
			for (int i = 0; i < qtdBlocos; i++) {
				
				int fimBloco = 0;
				if (i == (qtdBlocos - 1)){
					fimBloco = idsCobrancaDocumento.size();
				} else {
					fimBloco = TAM_BLOCO*(i+1);
				}
								
				Integer[] arrayAux = idsCobrancaDocumento.subList(i * TAM_BLOCO, fimBloco).toArray(new Integer[0]); 
			
				int qtdDebitosACobrar = 0;
				// caso seja aviso de corte ou outra ação com o indicador em cobrança ação cbac_icgeraçãotaxa com valor 1 
				if (cobrancaAcao.getIndicadorGeracaoTaxa() != null && cobrancaAcao.getIndicadorGeracaoTaxa().equals(CobrancaAcao.INDICADOR_SIM)) {
					
					qtdDebitosACobrar = repositorioCobranca.deletarDebitoACobrarGeradasPelosDocumentosCobranca(
							Arrays.asList(arrayAux), sistemaParametro.getAnoMesFaturamento());
				}
				
				// Inserindo os registros de nao geracao dos documentos
				repositorioCobranca.inserirImoveisNaoGeradosParaDocumentosExcedentes(Arrays.asList(arrayAux));
				
				repositorioCobranca.removerDebitoACobrarOrdemServicoGeradasPelosDocumentosCobranca(Arrays.asList(arrayAux));
				repositorioCobranca.deletarOrdemServicoUnidadeGeradasPelosDocumentosCobranca(Arrays.asList(arrayAux));
				repositorioCobranca.deletarOrdemServicoGeradasPelosDocumentosCobranca(Arrays.asList(arrayAux));
				Integer quantidadeCobrancaDocumentoItemDeletados =  repositorioCobranca.
					deletarCobrancaDocumentoItemGeradasPelosDocumentosCobranca(Arrays.asList(arrayAux));
				
				//adicionado por Vivianne Sousa - 14/12/2009 - analista:Chico
				//deleta os documentos de cobranca impressão pelos idDocumentoCobranca 
				repositorioCobranca.deletarDocumentoCobrancaImpressao(Arrays.asList(arrayAux));
				
				
				int qtdDocumentos = repositorioCobranca.deletarCobrancaDocumentos(Arrays.asList(arrayAux));
				
				//Vivianne Sousa - 19/04/2010
				//atualizar a quantidade de documentos cobrados, a quantidade de itens cobrados 
				//e o valor total dos documentos na tabela cobranca_documento_controle_geracao
				if(idCobrancaDocumentoControleGeracao != null){
					
					repositorioCobranca.atualizarCobrancaDocumentoControleGeracaoSubtrair(
							idCobrancaDocumentoControleGeracao,qtdDocumentos,
							quantidadeCobrancaDocumentoItemDeletados,valorTotalCobrancaDocumento);
					
				}
				
				// Caso seja uma ação que gere taxa, verificar se a quantidade de debitos a cobrar é igual a quantidade de documentos gerados/excluidos
				// considerando que a quantidade de debitos a cobrar menor que a quantidade de documentos
				// representa que debitos a cobrar ja foram faturados
				if (cobrancaAcao.getIndicadorGeracaoTaxa() != null && cobrancaAcao.getIndicadorGeracaoTaxa().equals(CobrancaAcao.INDICADOR_SIM)
						&& qtdDebitosACobrar < qtdDocumentos) {
					throw new ControladorException("atencao.cancelamento.documentos.ja.existem.debitos.cobrados");
				}
				
			}
		}
		
	}
	
	
	/**
	 * Verifica se é possível realizar o cancelamento dos Documentos de Cobrança do Cronograma ou Comando
	 * 
	 * @author Victor Cisneiros
	 * @date 19/12/2008
	 */
	public CancelarDocumentosCobrancaHelper verificarCancelamentoDocumentosCobranca(
			Integer idCobrancaAcaoAtividadeCronograma, Integer idCobrancaAcaoAtividadeComando) throws ControladorException {
		
		CancelarDocumentosCobrancaHelper helper = null;
		
		try {
			
			helper = pesquisarIdsDocumentosCobranca(idCobrancaAcaoAtividadeCronograma, idCobrancaAcaoAtividadeComando);
			CobrancaAcaoAtividadeComando cobrancaAcaoAtividadeComando = helper.getCobrancaAcaoAtividadeComando();
			CobrancaAcaoAtividadeCronograma cobrancaAcaoAtividadeCronograma = helper.getCobrancaAcaoAtividadeCronograma();
			
			// [FS0001] - Atividade diferente de EMITIR
			//System.out.println("[FS0001] - Atividade diferente de EMITIR");
			if (cobrancaAcaoAtividadeCronograma != null) {
				if (cobrancaAcaoAtividadeCronograma.getCobrancaAtividade() == null || 
					!cobrancaAcaoAtividadeCronograma.getCobrancaAtividade().getId().equals(CobrancaAtividade.EMITIR)) {
					throw new ControladorException("atencao.apenas.possivel.cancelar.atividade.emitir");
				}
			}
			if (cobrancaAcaoAtividadeComando != null) {
				if (cobrancaAcaoAtividadeComando.getCobrancaAtividade() == null || 
					!cobrancaAcaoAtividadeComando.getCobrancaAtividade().getId().equals(CobrancaAtividade.EMITIR)) {
						throw new ControladorException("atencao.apenas.possivel.cancelar.atividade.emitir");
				}
			}
			
			// [FS0002] - Ação de Cobrança já encerrada
			//System.out.println("[FS0002] - Ação de Cobrança já encerrada");
			if (cobrancaAcaoAtividadeCronograma != null) {
				Integer idCobrancaAcaoCronograma = cobrancaAcaoAtividadeCronograma.getCobrancaAcaoCronograma().getId();
				
				FiltroCobrancaAcaoAtividadeCronograma filtroCobrancaAcaoAtividadeCronograma = new FiltroCobrancaAcaoAtividadeCronograma();
				filtroCobrancaAcaoAtividadeCronograma.adicionarParametro(new ParametroSimples(
						FiltroCobrancaAcaoAtividadeCronograma.ID_COBRANCA_ACAO_CRONOGRAMA, idCobrancaAcaoCronograma));
				filtroCobrancaAcaoAtividadeCronograma.adicionarParametro(new ParametroSimples(
						FiltroCobrancaAcaoAtividadeCronograma.ID_COBRANCA_ATIVIDADE, CobrancaAtividade.ENCERRAR));
				
				Collection<CobrancaAcaoAtividadeCronograma> pesquisa = this.getControladorUtil().pesquisar(filtroCobrancaAcaoAtividadeCronograma, CobrancaAcaoAtividadeCronograma.class.getName());
				if (pesquisa != null && pesquisa.size() > 0) {
					CobrancaAcaoAtividadeCronograma cobrancaAcaoAtividadeCronogramaDoEncerrar = 
						(CobrancaAcaoAtividadeCronograma) Util.retonarObjetoDeColecao(pesquisa);
					
					if (cobrancaAcaoAtividadeCronogramaDoEncerrar.getRealizacao() != null) {
						throw new ControladorException("atencao.nao.possivel.cancelar.para.acoes.cobranca.encerradas");
					}
				}
			}
			if (cobrancaAcaoAtividadeComando != null) {
				if (cobrancaAcaoAtividadeComando.getDataEncerramentoRealizada() != null) {
					throw new ControladorException("atencao.nao.possivel.cancelar.para.acoes.cobranca.encerradas");
				}
			}
			
			// [FS0003] - Ordem de serviço já encerrada 
			//System.out.println("[FS0003] - Ordem de serviço já encerrada");
			if (cobrancaAcaoAtividadeCronograma != null) {
				CobrancaAcao cobrancaAcao = cobrancaAcaoAtividadeCronograma.getCobrancaAcaoCronograma().getCobrancaAcao();
				if (cobrancaAcao != null && cobrancaAcao.getServicoTipo() != null) {
					Integer ordensExecutadas = repositorioCobranca.pesquisarQuantidadeOrdensServicoEncerradasPorCobrancaAcaoAtividade(
							idCobrancaAcaoAtividadeCronograma, idCobrancaAcaoAtividadeComando);
					if (ordensExecutadas != null && ordensExecutadas > 0) {
						throw new ControladorException("atencao.cancelamento.documentos.ja.existem.ordens");
					}
				}
			}
			if (cobrancaAcaoAtividadeComando != null) {
				CobrancaAcao cobrancaAcao = cobrancaAcaoAtividadeComando.getCobrancaAcao();
				if (cobrancaAcao != null && cobrancaAcao.getServicoTipo() != null) {
					Integer ordensExecutadas = repositorioCobranca.pesquisarQuantidadeOrdensServicoEncerradasPorCobrancaAcaoAtividade(
							idCobrancaAcaoAtividadeCronograma, idCobrancaAcaoAtividadeComando);
					if (ordensExecutadas != null && ordensExecutadas > 0) {
						throw new ControladorException("atencao.cancelamento.documentos.ja.existem.ordens");
					}
				}
			}
			
			// [FS0004] - Pagamento já realizado para documento de cobrança
			//System.out.println("[FS0004] - Pagamento já realizado para documento de cobrança");
			Integer pagamentosExecutados = repositorioCobranca.pesquisarQuantidadePagamentosPorDocumentosCobranca(
					idCobrancaAcaoAtividadeCronograma, idCobrancaAcaoAtividadeComando);
			if (pagamentosExecutados != null && pagamentosExecutados > 0) {
				throw new ControladorException("atencao.cancelamento.documentos.ja.existem.pagamentos");
			}
			
			// [FS0005] - Ação sucessora já realizada
			//System.out.println("[FS0005] - Ação sucessora já realizada");
			Integer comandosSucessores = repositorioCobranca.pesquisarQuantidadeComandosSucessores(
					idCobrancaAcaoAtividadeCronograma, idCobrancaAcaoAtividadeComando);
			if (comandosSucessores != null && comandosSucessores > 0) {
				throw new ControladorException("atencao.cancelamento.docuemntos.ja.existem.comandos");
			}
			
		} catch (ErroRepositorioException ex) {
			sessionContext.setRollbackOnly();
			throw new ControladorException("erro.sistema", ex);
		}
		
		return helper;
	}
	
	private CancelarDocumentosCobrancaHelper pesquisarIdsDocumentosCobranca(
			Integer idCobrancaAcaoAtividadeCronograma, Integer idCobrancaAcaoAtividadeComando) throws ControladorException {
		
		CancelarDocumentosCobrancaHelper retorno = new CancelarDocumentosCobrancaHelper();
		
		Integer anoMesReferencia = null;
		Integer idGrupo = null; 
		CobrancaAcao cobrancaAcao = null;
		CobrancaAcaoAtividadeCronograma cobrancaAcaoAtividadeCronograma = null;
		CobrancaAcaoAtividadeComando cobrancaAcaoAtividadeComando = null;
		Collection<Integer> idsCobrancaDocumento = new ArrayList<Integer>();
		
		// Pesquisar a CobrancaAcao por cobrancaAcaoAtividadeCronomgrama (CRONOGRAMA)
		if (idCobrancaAcaoAtividadeCronograma != null) {
			FiltroCobrancaAcaoAtividadeCronograma filtroCobrancaAcaoAtividadeCronograma = new FiltroCobrancaAcaoAtividadeCronograma();
			filtroCobrancaAcaoAtividadeCronograma.adicionarCaminhoParaCarregamentoEntidade(FiltroCobrancaAcaoAtividadeCronograma.COBRANCA_ACAO);
			filtroCobrancaAcaoAtividadeCronograma.adicionarCaminhoParaCarregamentoEntidade(FiltroCobrancaAcaoAtividadeCronograma.COBRANCA_GRUPO_CRONOGRAMA_MES);
			filtroCobrancaAcaoAtividadeCronograma.adicionarCaminhoParaCarregamentoEntidade(FiltroCobrancaAcaoAtividadeCronograma.COBRANCA_ACAO_CRONOGRAMA);
			filtroCobrancaAcaoAtividadeCronograma.adicionarCaminhoParaCarregamentoEntidade(FiltroCobrancaAcaoAtividadeCronograma.COBRANCA_ATIVIDADE);
			filtroCobrancaAcaoAtividadeCronograma.adicionarParametro(new ParametroSimples(FiltroCobrancaAcaoAtividadeCronograma.ID, idCobrancaAcaoAtividadeCronograma));
			
			Collection<CobrancaAcaoAtividadeCronograma> colecaoCobrancaAcaoAtividadeCronograma = this.getControladorUtil().pesquisar(filtroCobrancaAcaoAtividadeCronograma, CobrancaAcaoAtividadeCronograma.class.getName());
			if (colecaoCobrancaAcaoAtividadeCronograma == null || colecaoCobrancaAcaoAtividadeCronograma.isEmpty()) {
				throw new ControladorException("atencao.pesquisa_inexistente", null, "Cobranca Acao Atividade Cronograma");
			}
			cobrancaAcaoAtividadeCronograma = (CobrancaAcaoAtividadeCronograma) Util.retonarObjetoDeColecao(colecaoCobrancaAcaoAtividadeCronograma);
			
			cobrancaAcao = cobrancaAcaoAtividadeCronograma.getCobrancaAcaoCronograma().getCobrancaAcao();
			idGrupo = cobrancaAcaoAtividadeCronograma.getCobrancaAcaoCronograma().getCobrancaGrupoCronogramaMes().getCobrancaGrupo().getId();
			anoMesReferencia = cobrancaAcaoAtividadeCronograma.getCobrancaAcaoCronograma().getCobrancaGrupoCronogramaMes().getAnoMesReferencia();
			
			try{
				
				idsCobrancaDocumento = this.repositorioCobranca.pesquisarIdsDocumentosCobranca(idCobrancaAcaoAtividadeCronograma, idCobrancaAcaoAtividadeComando);
				
			} catch (ErroRepositorioException e) {
				throw new ControladorException("erro.sistema", e);
			}
		}

		// Pesquisar a CobrancaAcao por cobrancaAcaoAtividadeComando(EVENTUAL)
		if (idCobrancaAcaoAtividadeComando != null) {
			FiltroCobrancaAcaoAtividadeComando filtroCobrancaAcaoAtividadeComando = new FiltroCobrancaAcaoAtividadeComando();
			filtroCobrancaAcaoAtividadeComando.adicionarCaminhoParaCarregamentoEntidade(FiltroCobrancaAcaoAtividadeComando.COBRANCA_ACAO);
			filtroCobrancaAcaoAtividadeComando.adicionarParametro(new ParametroSimples(FiltroCobrancaAcaoAtividadeComando.ID, idCobrancaAcaoAtividadeComando));
			
			Collection<CobrancaAcaoAtividadeComando> colecaoCobrancaAcaoAtividadeComando = this.getControladorUtil().pesquisar(filtroCobrancaAcaoAtividadeComando, CobrancaAcaoAtividadeComando.class.getName());
			if (colecaoCobrancaAcaoAtividadeComando == null || colecaoCobrancaAcaoAtividadeComando.isEmpty()) {
				throw new ControladorException("atencao.pesquisa_inexistente", null, "Cobranca Acao Atividade Comando");
			}
			cobrancaAcaoAtividadeComando = (CobrancaAcaoAtividadeComando) Util.retonarObjetoDeColecao(colecaoCobrancaAcaoAtividadeComando);
			cobrancaAcao = cobrancaAcaoAtividadeComando.getCobrancaAcao();
			
			try{
				
				idsCobrancaDocumento = this.repositorioCobranca.pesquisarIdsDocumentosCobranca(idCobrancaAcaoAtividadeCronograma, idCobrancaAcaoAtividadeComando);
				
			} catch (ErroRepositorioException e) {
				throw new ControladorException("erro.sistema", e);
			}
		}
		
		
		retorno.setCobrancaAcaoAtividadeComando(cobrancaAcaoAtividadeComando);
		retorno.setCobrancaAcaoAtividadeCronograma(cobrancaAcaoAtividadeCronograma);
		retorno.setAnoMesReferencia(anoMesReferencia);
		retorno.setIdGrupo(idGrupo);
		retorno.setCobrancaAcao(cobrancaAcao);
		retorno.setIdsDocumentosCobranca(idsCobrancaDocumento);
		return retorno;
	}
	
	
	/**
	 * [UC0868] Gerar Relatorio de Pagamentos das Contas em Cobranca por Empresa
	 * 
	 * @author: Rômulo Aurélio
	 * @date: 08/01/2009
	 */
	public Collection pesquisarDadosGerarRelatorioPagamentosContasCobrancaEmpresa(
			RelatorioPagamentosContasCobrancaEmpresaHelper helper
			)
			throws ControladorException {

		Collection<RelatorioPagamentosContasCobrancaEmpresaBean> retorno = new ArrayList<RelatorioPagamentosContasCobrancaEmpresaBean>();

		Collection<Object[]> colecaoDados = null;

		try {

			colecaoDados = repositorioCobranca
					.pesquisarDadosGerarRelatorioPagamentosContasCobrancaEmpresaOpcaoTotalizacao(
							helper);

			if (colecaoDados != null && !colecaoDados.isEmpty()) {

				for (Object[] dados : colecaoDados) {

					RelatorioPagamentosContasCobrancaEmpresaBean relatorioBean = new RelatorioPagamentosContasCobrancaEmpresaBean();

					// idImovel
					if (dados[0] != null) {
						Integer idImovel = (Integer) dados[0];

						relatorioBean.setMatricula(Util
								.retornaMatriculaImovelFormatada(idImovel));
					}
					// nomeCliente
					if (dados[1] != null) {
						String nomeCliente = (String) dados[1];

						relatorioBean.setNomeCliente(nomeCliente);
					}
					// anoMesConta
					if (dados[2] != null) {
						Integer anoMesConta = (Integer) dados[2];

						relatorioBean.setAnoMesConta(Util
								.formatarAnoMesParaMesAno(anoMesConta
										.intValue()));
					}

					// valorConta
					if (dados[3] != null) {
						BigDecimal valorConta = (BigDecimal) dados[3];

						relatorioBean.setValorConta(Util
								.formatarMoedaReal(valorConta));
					}

					// anoMesReferenciaPagamento
					if (dados[4] != null) {
						Integer anoMesReferenciaPagamento = (Integer) dados[4];

						relatorioBean
								.setAnoMesReferenciaPagamento(Util
										.formatarAnoMesParaMesAno(anoMesReferenciaPagamento));
					}

					// valorPrincipal
					BigDecimal valorPrincipal = new BigDecimal(0.0);
					if (dados[5] != null) {
						valorPrincipal = (BigDecimal) dados[5];
					}
					relatorioBean.setValorPrincipal(Util
							.formatarMoedaReal(valorPrincipal));

					BigDecimal valorEncargos = new BigDecimal(0.0);
					// valorEncargos
					if (dados[6] != null) {
						valorEncargos = (BigDecimal) dados[6];

					}
					relatorioBean.setValorEncargos(Util
							.formatarMoedaReal(valorEncargos));

					BigDecimal percentualEmpresa = new BigDecimal(0.0);
					// percentualEmpresa
					if (dados[7] != null) {
						percentualEmpresa = (BigDecimal) dados[7];

					}
					relatorioBean.setPercentualEmpresa(Util
							.formatarMoedaReal(percentualEmpresa));
					
					// Id da Localidade
					if(dados[8] != null){
						Integer idLocalidade = (Integer) dados[8];
						relatorioBean.setIdLocalidade(idLocalidade.toString());
					}
					
					// nome da Localidade
					if(dados[9] != null){
						
						relatorioBean.setNomeLocalidade((String) dados[9]);
					}
					
					// Id Gerencia Regional
					if(dados[10] != null){
						Integer idGerenciaRegional = (Integer) dados[10];
						relatorioBean.setIdGerenciaRegional(idGerenciaRegional.toString());
					}
					
					// Nome Gerencia Regional
					if(dados[11] != null){
						
						relatorioBean.setNomeGerenciaRegional((String) dados[11]);
					}
					
					// Id Unidade Negocio
					if(dados[12] != null){
						Integer idUnidadeNegocio = (Integer) dados[12];
						relatorioBean.setIdUnidadeNegocio(idUnidadeNegocio.toString());
					}
					
					// Nome Unidade Negocio
					if(dados[13] != null){
						
						relatorioBean.setNomeUnidadeNegocio((String) dados[13]);
					}
					
					// Id Rota
					if(dados[14] != null){
						Integer idRota = (Integer) dados[14];
						relatorioBean.setIdRota(idRota.toString());
					}
					//Indicador do Tipo de Pagamento
					if(dados[15] != null){
						Short indicadorTipoPagamento = (Short) dados[15];
						relatorioBean.setIndicadorTipoPagamento(indicadorTipoPagamento.toString());
						if (indicadorTipoPagamento.intValue() == ConstantesSistema.INDICADOR_PAGAMENTO_A_VISTA
								.intValue()) {
							relatorioBean.setTipoPagamento("À Vista");
						}else{
							relatorioBean.setTipoPagamento("Parcelado");
						}
					}
					
					//Numero Parcela Atual
					if(dados[16] != null){
						Integer numeroParcelaAtual = (Integer) dados[16];
						relatorioBean.setNumeroParcelaAtual(numeroParcelaAtual.toString());
					}
					//Numero Total Parcelas
					if(dados[17] != null){
						Integer numeroTotalParcelas = (Integer) dados[17];
						relatorioBean.setNumeroTotalParcelas(numeroTotalParcelas.toString());
					}
					
					
					BigDecimal valorTotal = new BigDecimal(0.0);

					valorTotal = valorTotal.add(valorPrincipal);
					valorTotal = valorTotal.add(valorEncargos);

					// Valor total
					relatorioBean.setValorTotalPagamentos(Util
							.formatarMoedaReal4Casas(valorTotal));

					// Valor Empresa
					BigDecimal valorEmpresa = new BigDecimal(0.0);

					BigDecimal aux = new BigDecimal(100.0);

					valorEmpresa = valorEmpresa.add(valorTotal
							.multiply(percentualEmpresa));

					valorEmpresa = valorEmpresa.setScale(4,
							BigDecimal.ROUND_HALF_UP);
					
					valorEmpresa = valorEmpresa.divide(aux);

					valorEmpresa = valorEmpresa.setScale(4,
							BigDecimal.ROUND_HALF_UP);
					
					relatorioBean.setValorEmpresa(Util
							.formatarMoedaReal4Casas(valorEmpresa));
					
					relatorioBean.setCodigoQuebra2("");
					
					relatorioBean.setDescricaoQuebra2("");
					
					if (helper.getOpcaoTotalizacao().equalsIgnoreCase("estadoGerencia")) {
						
						relatorioBean.setCodigoQuebra(relatorioBean.getIdGerenciaRegional());
						
						relatorioBean.setDescricaoQuebra(relatorioBean.getNomeGerenciaRegional());
					
					}else if (helper.getOpcaoTotalizacao().equalsIgnoreCase("estadoLocalidade")) {
						
						relatorioBean.setCodigoQuebra(relatorioBean.getIdLocalidade());
						
						relatorioBean.setDescricaoQuebra(relatorioBean.getNomeLocalidade());
					
					}else if (helper.getOpcaoTotalizacao().equalsIgnoreCase("gerenciaRegional")) {
						
						relatorioBean.setCodigoQuebra(relatorioBean.getIdGerenciaRegional());
						
						relatorioBean.setDescricaoQuebra(relatorioBean.getNomeGerenciaRegional());
					
					}else if (helper.getOpcaoTotalizacao().equalsIgnoreCase("gerenciaRegionalLocalidade")) {
						
						relatorioBean.setCodigoQuebra(relatorioBean.getIdGerenciaRegional());
						
						relatorioBean.setDescricaoQuebra(relatorioBean.getNomeGerenciaRegional());
						
						relatorioBean.setCodigoQuebra2(relatorioBean.getIdLocalidade());
						
						relatorioBean.setDescricaoQuebra2(relatorioBean.getNomeLocalidade());
					
					}else if (helper.getOpcaoTotalizacao().equalsIgnoreCase("localidade")) {
						
						relatorioBean.setCodigoQuebra(relatorioBean.getIdLocalidade());
						
						relatorioBean.setDescricaoQuebra(relatorioBean.getNomeLocalidade());
					
					}else if (helper.getOpcaoTotalizacao().equalsIgnoreCase("estadoUnidadeNegocio")) {
						
						relatorioBean.setCodigoQuebra(relatorioBean.getIdUnidadeNegocio());
						
						relatorioBean.setDescricaoQuebra(relatorioBean.getNomeUnidadeNegocio());
					
					}else if (helper.getOpcaoTotalizacao().equalsIgnoreCase("unidadeNegocio")) {
						
						relatorioBean.setCodigoQuebra(relatorioBean.getIdUnidadeNegocio());
						
						relatorioBean.setDescricaoQuebra(relatorioBean.getNomeUnidadeNegocio());
					
					}else{
						relatorioBean.setCodigoQuebra("");
						
						SistemaParametro sistemaParametro = getControladorUtil().pesquisarParametrosDoSistema();
						
						relatorioBean.setDescricaoQuebra(sistemaParametro.getNomeEstado());
					}
					retorno.add(relatorioBean);
				}

			}

		} catch (ErroRepositorioException e) {
			sessionContext.setRollbackOnly();
			throw new ControladorException("erro.sistema", e);
		}
		return retorno;
	}
	
	

	public Integer pesquisarDadosGerarRelatorioPagamentosContasCobrancaEmpresaCount(
			Integer idEmpresa, Integer referenciaPagamentoInicial,
			Integer referenciaPagamentoFinal)
			throws ControladorException {
		Integer retorno = 0;
		Collection colecaoDados = null;

		try {

			colecaoDados = repositorioCobranca
					.pesquisarDadosGerarRelatorioPagamentosContasCobrancaEmpresaCount(
							idEmpresa, referenciaPagamentoInicial,
							referenciaPagamentoFinal);

			if (colecaoDados != null && !colecaoDados.isEmpty()) {
				Iterator it = colecaoDados.iterator();
				while (it.hasNext()) {
					Integer objeto = (Integer) it.next();

					retorno = retorno + objeto;
				}
			}

		} catch (ErroRepositorioException e) {
			throw new ControladorException("erro.sistema", e);
		}

		return retorno;

	}

	/**
	 * [UC0868] Gerar Relatorio de Pagamentos das Contas em Cobranca por Empresa
	 * 
	 * Pesquisa a quantidade de contas
	 * 
	 * @author: Rômulo Aurélio
	 * @date: 29/10/2008
	 */

	public Collection gerarRelatorioPagamentosContasEmCobrancaEmpresa(
			RelatorioPagamentosContasCobrancaEmpresaHelper helper,
			int idFuncionalidadeIniciada)
			throws ControladorException {

		Collection colecaoRelatorioPagamentosContasCobrancaEmpresaBean = null;

		int idUnidadeIniciada = 0;

		idUnidadeIniciada = getControladorBatch()
				.iniciarUnidadeProcessamentoBatch(idFuncionalidadeIniciada,
						UnidadeProcessamento.RELATORIO, 0);

		colecaoRelatorioPagamentosContasCobrancaEmpresaBean = this
				.pesquisarDadosGerarRelatorioPagamentosContasCobrancaEmpresa(
						helper);

		getControladorBatch().encerrarUnidadeProcessamentoBatch(null,
				idUnidadeIniciada, false);

		return colecaoRelatorioPagamentosContasCobrancaEmpresaBean;

	}
	
	/**
	 * [UC0879] Gerar Extensao de Comando de Contas em Cobrança por Empresa [CRC1109]
	 * 
	 * Pesquisa a quantidade de contas
	 * 
	 * @author: Rômulo Aurélio
	 * @date: 02/02/2009
	 */
	
	/**
	 * @param idEmpresa
	 * @param comandoInicial
	 * @param comandoFinal
	 * @return
	 * @throws ControladorException
	 */
	/**
	 * @param idEmpresa
	 * @param comandoInicial
	 * @param comandoFinal
	 * @return
	 * @throws ControladorException
	 */
	/**
	 * @param idEmpresa
	 * @param comandoInicial
	 * @param comandoFinal
	 * @return
	 * @throws ControladorException
	 */
	/**
	 * @param idEmpresa
	 * @param comandoInicial
	 * @param comandoFinal
	 * @return
	 * @throws ControladorException
	 */
	@SuppressWarnings("unused")
	public Collection<GerarExtensaoComandoContasCobrancaEmpresaHelper> pesquisarDadosGerarExtensaoComandoContasCobrancaEmpresa(
			Integer idEmpresa, Date comandoInicial, Date comandoFinal, int numeroIndice)
			throws ControladorException {

		try {

			Collection<GerarExtensaoComandoContasCobrancaEmpresaHelper> colecaoGerarExtensaoComandoContasCobrancaEmpresaHelper = new ArrayList();

			// Variáveis para a paginação da pesquisa
			// ========================================================================
			final int quantidadeRegistros = 10;
			// ========================================================================


				// Colecao de helper com os dados das contas em cobranca por
				// empresa
								
				Collection<GerarArquivoTextoContasCobrancaEmpresaHelper> colecaoGerarArquivoTextoContasCobrancaEmpresaHelper = (Collection) repositorioCobranca
				.pesquisarDadosGerarArquivoTextoContasCobrancaEmpresaParaCobrancaResumido(
						idEmpresa, comandoInicial, comandoFinal,
						numeroIndice, quantidadeRegistros);
								

				/*Collection dadosContasCobrancaEmpresaParaCriterio = repositorioCobranca
						.pesquisarDadosGerarArquivoTextoContasCobrancaEmpresaParaCriterio(
								idEmpresa, comandoInicial, comandoFinal,
								numeroIndice, quantidadeRegistros);

				Map<Integer, GerarArquivoTextoContasCobrancaEmpresaHelper> mapHelper = new HashMap<Integer, GerarArquivoTextoContasCobrancaEmpresaHelper>();

				if (dadosContasCobrancaEmpresaParaCriterio != null
						&& !dadosContasCobrancaEmpresaParaCriterio.isEmpty()) {

					Iterator dadosContasCobrancaEmpresaParaCriterioIterator = dadosContasCobrancaEmpresaParaCriterio
							.iterator();

					while (dadosContasCobrancaEmpresaParaCriterioIterator
							.hasNext()) {
						// cria um array de objetos para pegar os parametros
						// de
						// retorno da pesquisa
						Object[] arraydadosContasCobrancaEmpresaParaCriterio = (Object[]) dadosContasCobrancaEmpresaParaCriterioIterator
								.next();

						GerarArquivoTextoContasCobrancaEmpresaHelper helper = new GerarArquivoTextoContasCobrancaEmpresaHelper();

						if (arraydadosContasCobrancaEmpresaParaCriterio[0] != null) {
							helper
									.setIdComandoEmpresaCobrancaConta((Integer) arraydadosContasCobrancaEmpresaParaCriterio[0]);
						}

						if (arraydadosContasCobrancaEmpresaParaCriterio[1] != null) {
							helper
									.setQtdeContasCriterioComando((Integer) arraydadosContasCobrancaEmpresaParaCriterio[1]);
						}

						if (arraydadosContasCobrancaEmpresaParaCriterio[2] != null) {
							helper
									.setValorContasCriterioComando((BigDecimal) arraydadosContasCobrancaEmpresaParaCriterio[2]);
						}

						mapHelper.put(
								helper.getIdComandoEmpresaCobrancaConta(),
								helper);
					}

				}*/

				if (colecaoGerarArquivoTextoContasCobrancaEmpresaHelper != null
						&& !colecaoGerarArquivoTextoContasCobrancaEmpresaHelper
								.isEmpty()) {
					
					Iterator colecaoGerarArquivoTextoContasCobrancaEmpresaHelperIterator = 
						colecaoGerarArquivoTextoContasCobrancaEmpresaHelper.iterator();

					while (colecaoGerarArquivoTextoContasCobrancaEmpresaHelperIterator
							.hasNext()) {
						// helper com os dados das contas em cobranca por
						// empresa
						GerarArquivoTextoContasCobrancaEmpresaHelper helperArquivoTextoContasCobrancaEmpresa = (GerarArquivoTextoContasCobrancaEmpresaHelper) colecaoGerarArquivoTextoContasCobrancaEmpresaHelperIterator
								.next();

						// Passa os dados do Map para o Helper principal

						/*if (mapHelper
								.containsKey(helperArquivoTextoContasCobrancaEmpresa
										.getIdComandoEmpresaCobrancaConta())) {

							GerarArquivoTextoContasCobrancaEmpresaHelper aux = mapHelper
									.get(helperArquivoTextoContasCobrancaEmpresa
											.getIdComandoEmpresaCobrancaConta());

							helperArquivoTextoContasCobrancaEmpresa
									.setQtdeContasCriterioComando(aux
											.getQtdeContasCriterioComando());

							helperArquivoTextoContasCobrancaEmpresa
									.setValorContasCriterioComando(aux
											.getValorContasCriterioComando());

						}*/

						Collection<ExtensaoComandoContasCobrancaEmpresaHelper> colecaoExtensaoComandoContasCobrancaEmpresaHelper = new ArrayList();

						Collection<Object[]> colecaoDadosExtensaoComandoContasCobrancaEmpresa = repositorioCobranca
								.pesquisarDadosGerarExtensaoComandoContasCobrancaEmpresaParaCobranca(helperArquivoTextoContasCobrancaEmpresa
										.getIdComandoEmpresaCobrancaConta());
						// helper com os dados das contas em
						// cobranca
						// por empresa e com colecao de helper dos dados da
						// tabela
						// ExtensaoComandoContasCobranca

						GerarExtensaoComandoContasCobrancaEmpresaHelper helperGerarExtensaoComandoContasCobrancaEmpresa = new GerarExtensaoComandoContasCobrancaEmpresaHelper();

						if (colecaoDadosExtensaoComandoContasCobrancaEmpresa != null
								&& !colecaoDadosExtensaoComandoContasCobrancaEmpresa
										.isEmpty()) {
							Iterator it = colecaoDadosExtensaoComandoContasCobrancaEmpresa
									.iterator();

							while (it.hasNext()) {

								ExtensaoComandoContasCobrancaEmpresaHelper helperExtensaoComandoContasCobrancaEmpresa = new ExtensaoComandoContasCobrancaEmpresaHelper();

//								 retorno da pesquisa
								Object[] dados = (Object[]) it.next();
								

									// Seta os dados da
									// extensaoComandoContasCobrancaEmpresa no
									// helper
									// idImovel
									if (dados[0] != null) {
										helperExtensaoComandoContasCobrancaEmpresa
												.setIdComandoEmpresaCobrancaContaExtensao((Integer) dados[0]);
									}
									if (dados[1] != null) {
										helperExtensaoComandoContasCobrancaEmpresa
												.setAnoMesInicialContaComandoEmpresaCobrancaContaExtensao((Integer) dados[1]);
									}

									if (dados[2] != null) {
										helperExtensaoComandoContasCobrancaEmpresa
												.setAnoMesFinalContaComandoEmpresaCobrancaContaExtensao((Integer) dados[2]);
									}
									if (dados[3] != null) {
										helperExtensaoComandoContasCobrancaEmpresa
												.setDataExecucaoComandoEmpresaCobrancaContaExtensao((Date) dados[3]);
									}
									
									if (dados[4] != null) {
										helperExtensaoComandoContasCobrancaEmpresa
												.setQtdDiasVencimento(((Integer) dados[4]).toString());
									}
									
									/*if (dados[4] != null) {
										helperExtensaoComandoContasCobrancaEmpresa
												.setQtdeContasParaCobranca((Integer) dados[4]);
									} else {
										helperExtensaoComandoContasCobrancaEmpresa
												.setQtdeContasParaCobranca(new Integer(
														0));
									}
									if (dados[5] != null) {
										helperExtensaoComandoContasCobrancaEmpresa
												.setValorTotalContasParaCobranca((BigDecimal) dados[5]);
									} else {

										

									}*/
									
									helperExtensaoComandoContasCobrancaEmpresa
									.setQtdeContasParaCobranca(new Integer(
											0));
									
									BigDecimal valorTotal = new BigDecimal(
											0.0);
									helperExtensaoComandoContasCobrancaEmpresa
											.setValorTotalContasParaCobranca(valorTotal);

									helperGerarExtensaoComandoContasCobrancaEmpresa
											.setAnoMesInicial(Util
													.formatarAnoMesParaMesAno(Util
															.somaUmMesAnoMesReferencia(helperExtensaoComandoContasCobrancaEmpresa
																	.getAnoMesFinalContaComandoEmpresaCobrancaContaExtensao())));
									colecaoExtensaoComandoContasCobrancaEmpresaHelper
									.add(helperExtensaoComandoContasCobrancaEmpresa);
								}
								
						}
						// Seta o helperArquivoTextoContasCobrancaEmpresa e a
						// colecaoExtensaoComandoContasCobrancaEmpresaHelper
						// para
						// exibicao na tela
						helperGerarExtensaoComandoContasCobrancaEmpresa
								.setGerarArquivoTextoContasCobrancaEmpresaHelper(helperArquivoTextoContasCobrancaEmpresa);

						helperGerarExtensaoComandoContasCobrancaEmpresa
								.setColecaoExtensaoComandoContasCobrancaEmpresaHelper(colecaoExtensaoComandoContasCobrancaEmpresaHelper);

						// AnoMesInicial
						SistemaParametro sistemaParametro = getControladorUtil()
								.pesquisarParametrosDoSistema();

						helperGerarExtensaoComandoContasCobrancaEmpresa
								.setAnoMesFinal(Util
										.formatarAnoMesParaMesAno(Util
												.subtrairMesDoAnoMes(
														sistemaParametro
																.getAnoMesFaturamento(),
														1)));

						// anoMesFinal

						if (helperGerarExtensaoComandoContasCobrancaEmpresa
								.getAnoMesInicial() == null
								|| helperGerarExtensaoComandoContasCobrancaEmpresa
										.getAnoMesInicial().equals("")) {
							helperGerarExtensaoComandoContasCobrancaEmpresa
									.setAnoMesInicial(Util
											.formatarAnoMesParaMesAno(Util
													.somaUmMesAnoMesReferencia(helperArquivoTextoContasCobrancaEmpresa
															.getReferenciaContaFinal())));
						}
						
						//3.8. Quantidade de Dias de Vencimento
						if(sistemaParametro.getNumeroDiasEnvioContaEmpresaCobranca() != null)
							helperGerarExtensaoComandoContasCobrancaEmpresa.setQtdDiasVencimento(sistemaParametro.getNumeroDiasEnvioContaEmpresaCobranca().toString());
						
						colecaoGerarExtensaoComandoContasCobrancaEmpresaHelper
								.add(helperGerarExtensaoComandoContasCobrancaEmpresa);
					}

				}			
							
				/**
				 * Incrementa o nº do indice da páginação
				 */
				//numeroIndice = numeroIndice + quantidadeRegistros;

				/**
				 * Caso a coleção de dados retornados for menor que a quantidade
				 * de registros seta a flag indicando que a paginação terminou.
				 */
				/*if (colecaoGerarArquivoTextoContasCobrancaEmpresaHelper == null
						|| colecaoGerarArquivoTextoContasCobrancaEmpresaHelper
								.size() < quantidadeRegistros) {

					flagTerminou = true;
				}*/

			
			return colecaoGerarExtensaoComandoContasCobrancaEmpresaHelper;

		} catch (ErroRepositorioException e) {
			throw new ControladorException("erro.sistema", e);
		}
	}

	/**
	 * [UC0879] Gerar Extensao de Comando de Contas em Cobrança por Empresa [CRC1109]
	 * 
	 * Pesquisa a quantidade de contas
	 * 
	 * @author: Rômulo Aurélio
	 * @date: 02/02/2009
	 */
	
	@SuppressWarnings("unused")
	public void inserirExtensaoComandoContasCobrancaEmpresa(
			ComandoEmpresaCobrancaContaExtensao comandoEmpresaCobrancaContaExtensao,
			Collection colecaoGerarExtensaoComandoContasCobrancaEmpresaHelper) throws ControladorException {
		// colecao de helper com as extensoes ja cadastradas e com o comando
		Iterator iterator = colecaoGerarExtensaoComandoContasCobrancaEmpresaHelper
				.iterator();

		SistemaParametro sistemaParametro = getControladorUtil()
				.pesquisarParametrosDoSistema();

		try {
			while (iterator.hasNext()) {
				GerarExtensaoComandoContasCobrancaEmpresaHelper helper = (GerarExtensaoComandoContasCobrancaEmpresaHelper) iterator
						.next();

				if (helper.getGerarArquivoTextoContasCobrancaEmpresaHelper()
						.getIdComandoEmpresaCobrancaConta().toString().equals(
								comandoEmpresaCobrancaContaExtensao
										.getComandoEmpresaCobrancaConta()
										.getId().toString())) {

					Collection colecaoExtensaoComandoContasCobrancaEmpresaHelper = helper
							.getColecaoExtensaoComandoContasCobrancaEmpresaHelper();

					if (colecaoExtensaoComandoContasCobrancaEmpresaHelper != null
							&& !colecaoExtensaoComandoContasCobrancaEmpresaHelper
									.isEmpty()) {

						Iterator colecaoExtensaoComandoContasCobrancaEmpresaHelperIterator = colecaoExtensaoComandoContasCobrancaEmpresaHelper
								.iterator();
						while (colecaoExtensaoComandoContasCobrancaEmpresaHelperIterator
								.hasNext()) {

							ExtensaoComandoContasCobrancaEmpresaHelper extensaoComandoContasCobrancaEmpresaHelper = (ExtensaoComandoContasCobrancaEmpresaHelper) colecaoExtensaoComandoContasCobrancaEmpresaHelperIterator
									.next();

							Integer anoMesFinalUltimaExtensao;

							anoMesFinalUltimaExtensao = repositorioCobranca
									.retornaAnoMesContaUltimaExtensao(helper
											.getGerarArquivoTextoContasCobrancaEmpresaHelper()
											.getIdComandoEmpresaCobrancaConta());

							// [FS0007] - Verificar referencia inicial
							if ((Util
									.compararAnoMesReferencia(
											comandoEmpresaCobrancaContaExtensao
													.getReferenciaContaInicial(),
											helper
													.getGerarArquivoTextoContasCobrancaEmpresaHelper()
													.getReferenciaContaFinal()
													.intValue(), "<") || Util
									.compararAnoMesReferencia(
											helper
													.getGerarArquivoTextoContasCobrancaEmpresaHelper()
													.getReferenciaContaFinal()
													.intValue(),
											comandoEmpresaCobrancaContaExtensao
													.getReferenciaContaInicial(),
											"="))
									|| Util
											.compararAnoMesReferencia(
													comandoEmpresaCobrancaContaExtensao
															.getReferenciaContaInicial(),
													helper
															.getGerarArquivoTextoContasCobrancaEmpresaHelper()
															.getReferenciaContaFinal()
															.intValue(), "<")
									|| Util
											.compararAnoMesReferencia(
													comandoEmpresaCobrancaContaExtensao
															.getReferenciaContaInicial(),
													anoMesFinalUltimaExtensao
													/*
													 * extensaoComandoContasCobrancaEmpresaHelper
													 * .getAnoMesFinalContaComandoEmpresaCobrancaContaExtensao()
													 */, "<")
									|| Util
											.compararAnoMesReferencia(
													comandoEmpresaCobrancaContaExtensao
															.getReferenciaContaInicial(),
													anoMesFinalUltimaExtensao
													/*
													 * extensaoComandoContasCobrancaEmpresaHelper
													 * .getAnoMesFinalContaComandoEmpresaCobrancaContaExtensao()
													 */, "=")) {

								throw new ControladorException(
										"atencao.referencia_inicial_extensao_comando_invalida");

							}
							// [FS0008] - Verificar referencia final
							if (Util.compararAnoMesReferencia(sistemaParametro
									.getAnoMesFaturamento(),
									comandoEmpresaCobrancaContaExtensao
											.getReferenciaContaFinal(), "=")
									|| Util.compararAnoMesReferencia(
											sistemaParametro
													.getAnoMesFaturamento(),
											comandoEmpresaCobrancaContaExtensao
													.getReferenciaContaFinal(),
											"<")) {
								throw new ControladorException(
										"atencao.referencia_final_extensao_comando_invalida");
							}

						}

					} else {
						// [FS0007] - Verificar referencia inicial
						if ((Util
								.compararAnoMesReferencia(
										comandoEmpresaCobrancaContaExtensao
												.getReferenciaContaInicial(),
										helper
												.getGerarArquivoTextoContasCobrancaEmpresaHelper()
												.getReferenciaContaFinal()
												.intValue(), "<") || Util
								.compararAnoMesReferencia(
										helper
												.getGerarArquivoTextoContasCobrancaEmpresaHelper()
												.getReferenciaContaFinal()
												.intValue(),
										comandoEmpresaCobrancaContaExtensao
												.getReferenciaContaInicial(), "="))) {

							throw new ControladorException(
									"atencao.referencia_inicial_extensao_comando_invalida");

						}
						// [FS0008] - Verificar referencia final
						if (Util.compararAnoMesReferencia(sistemaParametro
								.getAnoMesFaturamento(),
								comandoEmpresaCobrancaContaExtensao
										.getReferenciaContaFinal(), "=")
								|| Util
										.compararAnoMesReferencia(
												sistemaParametro
														.getAnoMesFaturamento(),
												comandoEmpresaCobrancaContaExtensao
														.getReferenciaContaFinal(),
												"<")) {
							throw new ControladorException(
									"atencao.referencia_final_extensao_comando_invalida");
						}

					}
				

				// ------------ REGISTRAR TRANSAÇÃO ----------------
				RegistradorOperacao registradorOperacao = new RegistradorOperacao(
						Operacao.OPERACAO_GERAR_COMANDO_CONTAS_COBRANCA_EMPRESA,
						new UsuarioAcaoUsuarioHelper(
								comandoEmpresaCobrancaContaExtensao
										.getUsuario(),
								UsuarioAcao.USUARIO_ACAO_EFETUOU_OPERACAO));

				Operacao operacao = new Operacao();

				operacao
						.setId(Operacao.OPERACAO_GERAR_COMANDO_CONTAS_COBRANCA_EMPRESA);

				OperacaoEfetuada operacaoEfetuada = new OperacaoEfetuada();
				operacaoEfetuada.setOperacao(operacao);

				comandoEmpresaCobrancaContaExtensao
						.setOperacaoEfetuada(operacaoEfetuada);
				comandoEmpresaCobrancaContaExtensao.adicionarUsuario(
						comandoEmpresaCobrancaContaExtensao.getUsuario(),
						UsuarioAcao.USUARIO_ACAO_EFETUOU_OPERACAO);
				registradorOperacao
						.registrarOperacao(comandoEmpresaCobrancaContaExtensao);
				// ------------ REGISTRAR TRANSAÇÃO ----------------
				
				//----Verifica se ja existe extensao informada para o comando no mesmo periodo
				FiltroComandoEmpresaCobrancaContaExtensao filtroComandoEmpresaCobrancaContaExtensao = new FiltroComandoEmpresaCobrancaContaExtensao();
				
				filtroComandoEmpresaCobrancaContaExtensao.adicionarParametro(
						new ParametroSimples(
								FiltroComandoEmpresaCobrancaContaExtensao.ID_COMANDO_EMPRESA_COBRANCA_CONTA,
								comandoEmpresaCobrancaContaExtensao.getComandoEmpresaCobrancaConta().getId()));
				filtroComandoEmpresaCobrancaContaExtensao.adicionarParametro(
						new ParametroSimples(
								FiltroComandoEmpresaCobrancaContaExtensao.REFERENCIA_INICIAL,
								comandoEmpresaCobrancaContaExtensao.getReferenciaContaInicial()));
				filtroComandoEmpresaCobrancaContaExtensao.adicionarParametro(
						new ParametroSimples(
								FiltroComandoEmpresaCobrancaContaExtensao.REFERENCIA_FINAL,
								comandoEmpresaCobrancaContaExtensao.getReferenciaContaFinal()));
				
				
				Collection colecaoComandoEmpresaCobrancaContaExtensaoBase = getControladorUtil().pesquisar(
						filtroComandoEmpresaCobrancaContaExtensao,
						ComandoEmpresaCobrancaContaExtensao.class.getName());
				
				
				if(colecaoComandoEmpresaCobrancaContaExtensaoBase!=null && !colecaoComandoEmpresaCobrancaContaExtensaoBase.isEmpty()){
					throw new ControladorException("atencao.extensao_ja_informada",null,
							comandoEmpresaCobrancaContaExtensao.getComandoEmpresaCobrancaConta()
							.getId().toString(),Util.formatarAnoMesParaMesAno(
									comandoEmpresaCobrancaContaExtensao.getReferenciaContaInicial()),
									Util.formatarAnoMesParaMesAno(comandoEmpresaCobrancaContaExtensao.getReferenciaContaFinal()));
				}
			//	----Verifica se ja existe extensao informada para o comando no mesmo periodo
				
				comandoEmpresaCobrancaContaExtensao
						.setUltimaAlteracao(new Date());
				getControladorUtil().inserir(
						comandoEmpresaCobrancaContaExtensao);
				}

			}
		} catch (ErroRepositorioException e) {
			e.printStackTrace();
		}
	}
	
		
	/**
	 * [UC0880] - Gerar Movimento de Extensão de Contas em Cobrança por Empresa
	 *
	 * @author Rômulo Aurélio
	 * @date 09/02/2009
	 *
	 * @throws ControladorException
	 */
	public void gerarMovimentoExtensaoContasEmCobranca(
			Integer idLocalidade, int idFuncionalidadeIniciada) 
		throws ControladorException {

		int idUnidadeIniciada = 0;
		

        // -------------------------
        //
        // Registrar o início do processamento da Unidade de
        // Processamento
        // do Batch
        //
        // -------------------------
        idUnidadeIniciada = getControladorBatch()
                .iniciarUnidadeProcessamentoBatch(idFuncionalidadeIniciada,
                        UnidadeProcessamento.LOCALIDADE, idLocalidade);

        try {
        	
        	SistemaParametro sistemaParametro = this.getControladorUtil().pesquisarParametrosDoSistema();
			
			Integer idPerfilProgramaEspecial = null;
			
			if(sistemaParametro.getPerfilProgramaEspecial()!=null){
				idPerfilProgramaEspecial = sistemaParametro.getPerfilProgramaEspecial().getId();
			}
			
        	
        	UC0880GerarMovimentoExtensaoContasEmCobrancaPorEmpresa gerarMovimentoExtensaoContasEmCobrancaPorEmpresa = 
        		UC0880GerarMovimentoExtensaoContasEmCobrancaPorEmpresa.getInstancia(repositorioCobranca, sessionContext);

        	gerarMovimentoExtensaoContasEmCobrancaPorEmpresa
        				.gerarMovimentoExtensaoContasEmCobranca(
        						idLocalidade,idPerfilProgramaEspecial);

        	/*comandoEmpresaCobrancaContaExtensao.setDataExecucao(new Date());
        	comandoEmpresaCobrancaContaExtensao.setUltimaAlteracao(new Date());
            
            getControladorUtil().atualizar(comandoEmpresaCobrancaContaExtensao);*/
            
            getControladorBatch().encerrarUnidadeProcessamentoBatch(null,
                    idUnidadeIniciada, false);

        } catch (Exception e) {

            getControladorBatch().encerrarUnidadeProcessamentoBatch(e,
                    idUnidadeIniciada, true);
            throw new EJBException(e);
        }
    }
	
	/**
	 * [UC0214] Efetuar Parcelamento de Débitos
	 * 
	 * @author Vivianne Sousa
	 * @date 10/02/2009
	 * 
	 * @return
	 * @throws ErroRepositorioException
	 */
	public Parcelamento obterParcelamentoMaisAtualDoImovel(Integer idImovel)
	throws ControladorException {
		
		Parcelamento parcelamento = null;
		Object[] dadosParcelamento = null;
		try {
			dadosParcelamento = repositorioCobranca
					.obterParcelamentoMaisAtualDoImovel(idImovel);
			
			if (dadosParcelamento != null){
				parcelamento = new Parcelamento();
				
				if (dadosParcelamento[0] != null) {
					parcelamento.setId((Integer) dadosParcelamento[0]);
				}
				
				if (dadosParcelamento[1] != null) {
					ResolucaoDiretoria resolucaoDiretoria = new ResolucaoDiretoria();
					resolucaoDiretoria.setId((Integer) dadosParcelamento[1]);
					if (dadosParcelamento[2] != null) {
						resolucaoDiretoria.setNumeroResolucaoDiretoria((String) dadosParcelamento[2]);
					}
					parcelamento.setResolucaoDiretoria(resolucaoDiretoria);
				}
			}
			
			
		} catch (ErroRepositorioException e) {
			throw new ControladorException("erro.sistema", e);
		}
		
		return parcelamento;
		
	}
	
	
	/**
	 * [UC0214] Efetuar Parcelamento de Débitos
	 * [FS0028] Verifica se existeParcelas em atraso
	 * 
	 * @author Vivianne Sousa
	 * @date 10/02/2009
	 * 
	 * @return
	 * @throws ErroRepositorioException
	 */
	public void verificaSeExisteParcelasEmAtraso(
			Integer idImovel, 
			Integer idResolucaoDiretoria,
			Integer refInicialInformada,
			Integer refFinalInformada)throws ControladorException {
		
		FiltroResolucaoDiretoria filtroResolucaoDiretoria = new FiltroResolucaoDiretoria();
		filtroResolucaoDiretoria.adicionarParametro(new ParametroSimples(
		FiltroResolucaoDiretoria.CODIGO, idResolucaoDiretoria));
		Collection colecaoRD = getControladorUtil().pesquisar(filtroResolucaoDiretoria, ResolucaoDiretoria.class.getName());
		ResolucaoDiretoria rd = (ResolucaoDiretoria) Util.retonarObjetoDeColecao(colecaoRD);
		
		if(rd.getIndicadorParcelasEmAtraso().equals(ConstantesSistema.SIM)){
			
			Integer idRDParcelasEmAtraso = null;
			if(rd.getRdParcelasEmAtraso() != null){
				idRDParcelasEmAtraso = rd.getRdParcelasEmAtraso().getId();
			}
			
			//obtem o parcelamento mais atual do imovel com situação do parcelamento Normal
			Parcelamento parcelamento = obterParcelamentoMaisAtualDoImovel(idImovel);
			
			if (parcelamento != null){
				
				if(idRDParcelasEmAtraso == null ||
				  (idRDParcelasEmAtraso != null &&  parcelamento.getResolucaoDiretoria()!= null && 
						  parcelamento.getResolucaoDiretoria().getId().equals(idRDParcelasEmAtraso))){
					
					//verifica se existe parcelas a serem cobradas do Parcelamento
//					Boolean existeParcelasASeremCobradas = verificaSeExisteParcelasASeremCobradas(parcelamento.getId());
//					if(existeParcelasASeremCobradas){
//						
//						throw new ControladorException("atencao.id.parcelas.atraso.ativo", null,
//								parcelamento.getResolucaoDiretoria().getNumeroResolucaoDiretoria());
//						
//					}else{
						// verificar se existe parcelas em atraso, ou seja, 
						//verificar nas contas que irão fazer parte do parcelamento, 
						//se existe algum débito de parcelamento da RDIR_ID = RDIR_IDPARCELASEMATRASO
						
						Boolean existeContasComParcelasEmAtrasoDoParcelamento = 
							verificaSeExisteContasComParcelasEmAtrasoDoParcelamento(
									idImovel,refInicialInformada,refFinalInformada);
						
						if (existeContasComParcelasEmAtrasoDoParcelamento){
							
							if(parcelamento.getResolucaoDiretoria() == null){
								throw new ControladorException("atencao.parcelas.atraso.ativo", null);
								
							}else{
							
								throw new ControladorException("atencao.id.parcelas.atraso.ativo", null,
									parcelamento.getResolucaoDiretoria().getNumeroResolucaoDiretoria());
							}	
							
						}
//					}
					
					
				}
				
				
			}
			
			
		}
		
		
	}
	
	/**
	 * [UC0214] Efetuar Parcelamento de Débitos
	 * [FS0028] Verifica se existeParcelas em atraso
	 * [FS0029] Verificar se existe parcelamento em andamento
	 * 
	 * @author Vivianne Sousa
	 * @date 10/02/2009
	 * 
	 * @return
	 * @throws ErroRepositorioException
	 */
	public Boolean verificaSeExisteParcelasASeremCobradas(
			Integer idParcelamento)throws ControladorException {
		
		Boolean retorno = false;
		try {
			
			// verificar se existe parcelas a serem cobradas 
			// (selecionar na tabela de debito a cobrar (FATURAMENTO.DEBITO_A_COBRAR),
			// a linha que tenha o PARC_ID = PARC_ID da tabela COBRANCA.PARCELAMENTO e 
			// o tipo de débito (DBTP_ID) = 40) 
			// e caso o número de prestações do débito não seja igual ao número de prestações cobradas 
			
			Collection colecaoDebitoACobrar =  repositorioCobranca.obterDebitoACobrarDoParcelamento(idParcelamento); 
			
			if(colecaoDebitoACobrar != null && !colecaoDebitoACobrar.isEmpty()){
				return true;
			}
			
		} catch (ErroRepositorioException e) {
			throw new ControladorException("erro.sistema", e);
		}
		return retorno;
		
	}
	
	/**
	 * [UC0214] Efetuar Parcelamento de Débitos
	 * [FS0028] Verifica se existe Parcelas em atraso
	 * 
	 * @author Vivianne Sousa
	 * @date 10/02/2009
	 * 
	 * @return
	 * @throws ErroRepositorioException
	 */
	public Boolean verificaSeExisteContasComParcelasEmAtrasoDoParcelamento(
			Integer idImovel,Integer refInicialInformada,
			Integer refFinalInformada)throws ControladorException {
		
		Boolean retorno = false;
		try {
			
			// verificar se existe parcelas em atraso, ou seja, 
			//verificar nas contas que irão fazer parte do parcelamento, 
			//se existe algum débito de parcelamento da RDIR_ID = RDIR_IDPARCELASEMATRASO
			
			Collection colecaoContasComParcelasEmAtrasoDoParcelamento =  
					repositorioCobranca.obterContasComParcelasEmAtrasoDoParcelamento(
					 idImovel, refInicialInformada,refFinalInformada); 
			
			if(colecaoContasComParcelasEmAtrasoDoParcelamento != null 
					&& !colecaoContasComParcelasEmAtrasoDoParcelamento.isEmpty()){
				return true;
			}
			
		} catch (ErroRepositorioException e) {
			throw new ControladorException("erro.sistema", e);
		}
		return retorno;
		
	}
	
	
	/**
	 * [UC0214] Efetuar Parcelamento de Débitos
	 * [FS0029] Verifica se existe parcelamento em andamento
	 * 
	 * @author Vivianne Sousa
	 * @date 10/02/2009
	 * 
	 * @return
	 * @throws ErroRepositorioException
	 */
	public Boolean verificaSeExisteParcelamentoEmAndamento(
			Integer idImovel, ResolucaoDiretoria resolucaoDiretoria)throws ControladorException {
		
		Boolean retorno = false;
		
		if(resolucaoDiretoria.getIndicadorParcelamentoEmAndamento().equals(ConstantesSistema.SIM)
				&& resolucaoDiretoria.getRdParcelamentoEmAndamento() != null ){
			
			Integer idRDParcelamentoEmAndamento = resolucaoDiretoria.getRdParcelamentoEmAndamento().getId();
			
			//verifica se o parcelamento mais atual do imovel na tabela parcelamento 
			//é da mesma resolucaoDiretoria informada na RD de parcelas em atraso
			Parcelamento parcelamento = obterParcelamentoMaisAtualDoImovel(idImovel);
			if(parcelamento != null && parcelamento.getResolucaoDiretoria()!= null
				&& parcelamento.getResolucaoDiretoria().getId().equals(idRDParcelamentoEmAndamento)){
				
				//verifica se existe parcelas a serem cobradas do Parcelamento
				Boolean existeParcelasASeremCobradas = verificaSeExisteParcelasASeremCobradas(parcelamento.getId());
				if(existeParcelasASeremCobradas){
					
					retorno = true;
					
				}
				
			}
			
		}
	
		return retorno;
	}
	
	
	/**
	 * [UC0891] Gerar Relatorio de Imóveis com Acordo
	 * 
	 * @author: Rômulo Aurélio
	 * @date: 01/04/2009
	 */
	public Collection pesquisarDadosGerarRelatorioImoveisComAcordo(
			Integer idUnidadeNegocio, Integer idLocalidadeInicial,
			Integer idLocalidadeFinal, Integer idGerenciaRegional,
			Date dataInicialAcordo, Date dataFinalAcordo, Integer rotaInicial,
			Integer rotaFinal, Integer sequencialRotaInicial,
			Integer sequencialRotaFinal, Integer idSetorComercialInicial,
			Integer idSetorComercialFinal) throws ControladorException {

		Collection<RelatorioImoveisComAcordoBean> retorno = new ArrayList<RelatorioImoveisComAcordoBean>();

		Collection<Object[]> colecaoDados = null;

		try {

			colecaoDados = repositorioCobranca
					.pesquisarDadosGerarRelatorioImoveisComAcordo(
							idUnidadeNegocio, idLocalidadeInicial,
							idLocalidadeFinal, idGerenciaRegional,
							dataInicialAcordo, dataFinalAcordo, rotaInicial,
							rotaFinal, sequencialRotaInicial,
							sequencialRotaFinal, idSetorComercialInicial,
							idSetorComercialFinal);

			if (colecaoDados != null && !colecaoDados.isEmpty()) {

				for (Object[] dados : colecaoDados) {

					RelatorioImoveisComAcordoBean relatorioBean = new RelatorioImoveisComAcordoBean();

					// idImovel
					if (dados[0] != null) {
						Integer idImovel = (Integer) dados[0];

						relatorioBean.setIdImovel(idImovel.toString());
						
						relatorioBean.setMatricula(Util
								.retornaMatriculaImovelFormatada(idImovel));
					}
					// codigoRota
					if (dados[1] != null) {
						Integer codigoRota = (Integer) dados[1];

						relatorioBean.setCodigoRota(codigoRota.toString());
					}
					// sequencialRota
					if (dados[2] != null) {
						Integer sequencialRota = (Integer) dados[2];

						relatorioBean.setSequencialRota(sequencialRota
								.toString());
					}

					// situacaoLigacaoAgua
					if (dados[3] != null) {
						String situacaoLigacaoAgua = (String) dados[3];

						relatorioBean
								.setSituacaoLigacaoAgua(situacaoLigacaoAgua);
					}

					// situacaoLigacaoEsgoto
					if (dados[4] != null) {
						String situacaoLigacaoEsgoto = (String) dados[4];

						relatorioBean
								.setSituacaoLigacaoEsgoto(situacaoLigacaoEsgoto);
					}

					// tipoSituacaoCobranca
					if (dados[5] != null) {
						String tipoSituacaoCobranca = (String) dados[5];

						relatorioBean.setDescricaoAcordo(tipoSituacaoCobranca);
					}

					// periodoAcordo
					if (dados[6] != null && dados[7] != null) {
						Integer periodoAcordoInicial = (Integer) dados[6];
						Integer periodoAcordoFinal = (Integer) dados[7];

						String periodoAcordo = ""
								+ Util
										.formatarAnoMesParaMesAno(periodoAcordoInicial
												.intValue())
								+ " à "
								+ Util
										.formatarAnoMesParaMesAno(periodoAcordoFinal
												.intValue()) + "";

						relatorioBean.setPeriodoAcordo(periodoAcordo);
					}

					// Data final do acordo
					if (dados[8] != null) {

						Date dataFinalSituacao = (Date) dados[8];

						String dataFinalSituacoAcordo = Util
								.formatarData(dataFinalSituacao);

						relatorioBean
								.setDataFinalAcordo(dataFinalSituacoAcordo);
					}

					// Observacao
					if (dados[9] != null) {

						String observacao = (String) dados[9];

						relatorioBean.setObservacao(observacao);
					}
					// Responsavel
					if (dados[10] != null) {

						String nomeUsuario = (String) dados[10];

						relatorioBean.setResponsavel(nomeUsuario);
					}
					

					retorno.add(relatorioBean);
				}

			}

		} catch (ErroRepositorioException e) {
			sessionContext.setRollbackOnly();
			throw new ControladorException("erro.sistema", e);
		}
		return retorno;
	}

	public Integer pesquisarDadosGerarRelatorioImoveisComAcordoCount(
			Integer idUnidadeNegocio, Integer idLocalidadeInicial,
			Integer idLocalidadeFinal, Integer idGerenciaRegional,
			Date dataInicialAcordo, Date dataFinalAcordo, Integer rotaInicial,
			Integer rotaFinal, Integer sequencialRotaInicial,
			Integer sequencialRotaFinal, Integer idSetorComercialInicial,
			Integer idSetorComercialFinal) throws ControladorException {

		Integer retorno = 0;

		try {

			retorno = repositorioCobranca
					.pesquisarDadosGerarRelatorioImoveisComAcordoCount(
							idUnidadeNegocio, idLocalidadeInicial,
							idLocalidadeFinal, idGerenciaRegional,
							dataInicialAcordo, dataFinalAcordo, rotaInicial,
							rotaFinal, sequencialRotaInicial,
							sequencialRotaFinal, idSetorComercialInicial,
							idSetorComercialFinal);

		} catch (ErroRepositorioException e) {
			throw new ControladorException("erro.sistema", e);
		}

		return retorno;

	}
	
	/**
	 * 
	 * [UC0251] Gerar Atividade de Ação de Cobrança
	 * Consiste no uso de metas e valor limite para restringir a quantidade
	 * dos documentos gerados e seleção dos documentos com valores acima do 
	 * valor limite
	 * Este método cancelará os documentos excedentes, ou seja, documentos além 
	 * da meta definida, excetuando aqueles que tenham valor acima do limite.
	 * 
	 * [SB0006] - Remover documentos de cobrança excedentes
	 * 
	 * Este procedimento será chamado após a geração dos documentos (inclusão dos 
	 * registros em cobranca_documento), porém antes da emissão destes (geração 
	 * do txt).
	 *
	 * @author Francisco do Nascimento
	 * @date 15/04/2009
	 *
	 * @param grupoCobranca Grupo de cobrança
	 * @param anoMesReferencia - Ano mês do ciclo
	 * @param cobrancaAcaoAtividadeCronograma - Cronograma
	 * @param cobrancaAcaoAtividadeComando Comando eventual
	 * @param cobrancaAcao Ação de cobrança
	 * @return Se houve remocao de documentos
	 * @throws ControladorException
	 */
	private boolean removerDocumentosCobrancaExcedentes(CobrancaGrupo grupoCobranca, int anoMesReferencia,
			CobrancaAcaoAtividadeCronograma cobrancaAcaoAtividadeCronograma,
			CobrancaAcaoAtividadeComando cobrancaAcaoAtividadeComando,
			CobrancaAcao cobrancaAcao,Integer idCobrancaDocumentoControleGeracao) throws ControladorException{

		Integer idCAAC = null;
		Integer idCACM = null;
		Integer meta = null;
		Integer quantidadeDocumentosGeradosAcimaValorLimite = 0;
		Integer quantidadeDocumentosGerados = 0;
		Integer quantidadeRealizada = 0;
		Integer quantidadeParaRemover = 0;
		Integer quantidadeRealizadaTotal = 0;
		boolean removeuDocumentos = false;
		
		// identificando se o parametro passado foi de cronograma ou eventual 
		if (cobrancaAcaoAtividadeCronograma != null && cobrancaAcaoAtividadeCronograma.getId() != null){
			idCAAC = cobrancaAcaoAtividadeCronograma.getId();
			
		} else {
			idCACM = cobrancaAcaoAtividadeComando.getId();
			
		}
		
		try {
			// Verifica se é um comando de cronograma e se a acao de cobranca usa metas 
			if (idCAAC != null && cobrancaAcao.getIndicadorMetasCronograma().intValue() == ConstantesSistema.SIM.intValue()){
			
				// pesquisar o objeto ciclometa para esta ação e este ciclo
				CicloMeta cicloMeta = repositorioCobranca.pesquisarMetaCiclo(
					anoMesReferencia, cobrancaAcao.getId());
				
				// Pesquisando os ciclos meta grupo  
				List<CicloMetaGrupo> idsCiclosMetaGrupo = (List<CicloMetaGrupo>) repositorioCobranca.pesquisarCicloMetaGrupoPorCicloMeta(
					cicloMeta.getId(), grupoCobranca.getId());
				
				for (int i = 0; i < idsCiclosMetaGrupo.size(); i++) {
					
					CicloMetaGrupo metaGrupo = (CicloMetaGrupo) idsCiclosMetaGrupo.get(i);		
					
					meta = metaGrupo.getMetaAjustada();
					int idLocalidade = metaGrupo.getLocalidade().getId();
					
					// Caso o valor limite esteja definido
					if (cicloMeta.getValorLimite() != null && cicloMeta.getValorLimite().compareTo(ConstantesSistema.VALOR_ZERO) > 0) {
						// Pesquisar a quantidade de documentos que estão acima do limite
						quantidadeDocumentosGeradosAcimaValorLimite = 
							repositorioCobranca.pesquisarQuantidadeDocumentosGeradosAcimaValorLimite(
							idCAAC, idCACM, metaGrupo.getLocalidade().getId(), cicloMeta.getValorLimite());
					}
		
					
					// Pesquisar a quantidade total de documentos gerados
					quantidadeDocumentosGerados = repositorioCobranca.pesquisarQuantidadeDocumentosGerados(
							idCAAC, idCACM, idLocalidade);
					
					System.out.println(" Remover Documentos Excedentes.Cron: quantidadeDocumentosGerados = " + quantidadeDocumentosGerados);
					System.out.println(" Remover Documentos Excedentes.Cron: meta = " + meta);
					System.out.println(" Remover Documentos Excedentes.Cron: quantidadeDocumentosGeradosAcimaValorLimite = " + quantidadeDocumentosGeradosAcimaValorLimite);

					// Identificando a quantidade de documentos que deverão ser removidos
					// Caso tenha sido gerado mais documentos que a meta esperada
					// há a possibilidade de remoção
					if (quantidadeDocumentosGerados > meta){ // remover excedentes
						// Caso a quantidade de documentos acima do valor limite seja 
						// menor que a meta, então tem documentos que podem ser removidos 
						if (meta > quantidadeDocumentosGeradosAcimaValorLimite){
							quantidadeParaRemover = quantidadeDocumentosGerados - meta;
							// a quantidade realizada será a meta, pois será a quantidade 
							// resultante após a remoção dos excedentes
							quantidadeRealizada = meta;
						} else {
							//caso a meta seja menor que a quantidade de doc valor acima 
							quantidadeParaRemover = quantidadeDocumentosGerados - quantidadeDocumentosGeradosAcimaValorLimite;
							quantidadeRealizada = quantidadeDocumentosGeradosAcimaValorLimite;
						}		
						if (quantidadeParaRemover > 0){
							Collection docs = repositorioCobranca
								.pesquisarDocumentosCobrancaExcedentes(idCAAC, idCACM, quantidadeParaRemover, idLocalidade);
							
							// Calculando o valor total dos documentos que serao excluidos 
							BigDecimal valorTotal = new BigDecimal(0);
							ArrayList<Integer> ids = new ArrayList<Integer>();
							for (Iterator iterator = docs.iterator(); iterator.hasNext();) {
								Object[] doc = (Object[]) iterator.next();
								ids.add((Integer) doc[0]);
								valorTotal = valorTotal.add((BigDecimal) doc[1]);
							}
							
							metaGrupo.setQuantidadeDocumentosRestantes(ids.size());
							metaGrupo.setValorTotalDocumentosRestantes(valorTotal);									
							
							cancelarDocumentosCobrancaDoCronogramaOuEventual(ids, cobrancaAcao,idCobrancaDocumentoControleGeracao,valorTotal);
							removeuDocumentos = true;
						}
						System.out.println(" Remover Documentos Excedentes.Cron: quantidadeParaRemover = " + quantidadeParaRemover);
					} else {
						quantidadeRealizada = quantidadeDocumentosGerados;
						// Caso a meta não tenha sido alcançada, a diferença entre a meta e a quantidade gerada devera ser 
						// creditada para o próximo grupo, alterado a metaajustada do ciclometagrupo desta localidade
						if (meta.intValue() != quantidadeDocumentosGerados.intValue()){ 
							repositorioCobranca.adicionarMetaCicloLocalidade(cicloMeta.getId(), grupoCobranca.getId(),
								idLocalidade, meta - quantidadeDocumentosGerados);
						}					
					}
					// Atualizar a quantidade realizada no ciclometagrupo desta localidade
					metaGrupo.setQuantidadeRealizada(quantidadeRealizada);
					metaGrupo.setUltimaAlteracao(new Date());
					getControladorUtil().atualizar(metaGrupo);
					
					quantidadeRealizadaTotal += quantidadeRealizada;
					
				}
				// redistribuir localidades que não ocorreram neste comando
				
			} else { // caso seja eventual ou seja cronograma sem uso de metas .. tratar do mesmo jeito

				// Caso nao esteja preenchida a quantidade maxima de documentos para o comando
				// eventual ou cronograma, nao haverá documentos excedentes a serem removidos
				if (cobrancaAcaoAtividadeCronograma != null){
					meta = cobrancaAcaoAtividadeCronograma.getQuantidadeMaximaDocumentos(); 
				}
				if (cobrancaAcaoAtividadeComando != null) {
					meta = cobrancaAcaoAtividadeComando.getQuantidadeMaximaDocumentos();
				}
				
				if (meta == null) {
					return false;
				}
				
				// Caso o valor limite esteja definido
				if (cobrancaAcaoAtividadeComando != null && cobrancaAcaoAtividadeComando.getValorLimiteObrigatoria() != null){
					
					// pesquisar quantidade de documentos que tem valor maior que o limite 
					// que obriga a emissao
					quantidadeDocumentosGeradosAcimaValorLimite = 
						repositorioCobranca.pesquisarQuantidadeDocumentosGeradosAcimaValorLimite(
						idCAAC, idCACM, null, cobrancaAcaoAtividadeComando.getValorLimiteObrigatoria());					
					
				}

				// Pesquisar a quantidade total de documentos gerados
				quantidadeDocumentosGerados = repositorioCobranca.pesquisarQuantidadeDocumentosGerados(
						idCAAC, idCACM, null);
				
				System.out.println(" Remover Documentos Excedentes.Even: quantidadeDocumentosGerados = " + quantidadeDocumentosGerados);
				System.out.println(" Remover Documentos Excedentes.Even: meta = " + meta);
				System.out.println(" Remover Documentos Excedentes.Even: quantidadeDocumentosGeradosAcimaValorLimite = " + quantidadeDocumentosGeradosAcimaValorLimite);
				
				// Caso a quantidade de documentos acima do valor limite seja 
				// menor que a meta, então tem documentos que podem ser removidos 
				if (meta > quantidadeDocumentosGeradosAcimaValorLimite){
					quantidadeParaRemover = quantidadeDocumentosGerados - meta;
				} else {
					//caso a meta seja menor que a quantidade de doc valor acima 
					quantidadeParaRemover = quantidadeDocumentosGerados - quantidadeDocumentosGeradosAcimaValorLimite;
				}		
				if (quantidadeParaRemover > 0){
					Collection docs = repositorioCobranca
						.pesquisarDocumentosCobrancaExcedentes(idCAAC, idCACM, quantidadeParaRemover, null);
					
					BigDecimal valorTotal = new BigDecimal(0);
					ArrayList<Integer> ids = new ArrayList<Integer>();
					for (Iterator iterator = docs.iterator(); iterator.hasNext();) {
						Object[] doc = (Object[]) iterator.next();
						ids.add((Integer) doc[0]);
						valorTotal = valorTotal.add((BigDecimal) doc[1]);
					}
					
					
					cancelarDocumentosCobrancaDoCronogramaOuEventual(ids, cobrancaAcao,idCobrancaDocumentoControleGeracao,valorTotal);
					removeuDocumentos = true;
				}
				System.out.println(" Remover Documentos Excedentes.Even: quantidadeParaRemover = " + quantidadeParaRemover);
			}
			
		} catch (ErroRepositorioException e) {
			throw new ControladorException("erro.sistema", e);
		}
		return removeuDocumentos;
	}
	
	/**
	 * 
	 * @author Francisco do Nascimento
	 * @date 23/04/2009
	 *
	 * @param cicloMeta
	 * @return void
	 * @throws ControladorException
	 */
	public void distribuirMetasCiclo(CicloMeta cicloMeta) throws ControladorException{
		
		// Distribuir as metas de grupo/localidade por gerencia/cas/localidade		
		//TreeMap<String, InformarCicloMetaGrupoHelper> helpersGerencia = new TreeMap<String, InformarCicloMetaGrupoHelper>();
		
		try {

			Collection colecaoCicloMetaGrupo = new ArrayList();
			
			if (cicloMeta.getId() != null && cicloMeta.getId().intValue() != -1){
				
				cicloMeta.setUltimaAlteracao(new Date());
				getControladorUtil().atualizar(cicloMeta);
				
				FiltroCicloMetaGrupo filtroCicloGrupo = new FiltroCicloMetaGrupo();
				filtroCicloGrupo.adicionarParametro(new ParametroSimples(FiltroCicloMetaGrupo.CICLO_META, 
					cicloMeta.getId()));
				
				colecaoCicloMetaGrupo = getControladorUtil().pesquisar(
						filtroCicloGrupo, CicloMetaGrupo.class.getName());			
				
				if (colecaoCicloMetaGrupo != null && !colecaoCicloMetaGrupo.isEmpty()){
					getControladorBatch().removerColecaoObjetoParaBatch(colecaoCicloMetaGrupo);
					colecaoCicloMetaGrupo.clear();
				}
				
			} else {
				
				cicloMeta.setUltimaAlteracao(new Date());
				
				getControladorUtil().inserir(cicloMeta);
				
			}
				
			Collection<GrupoLocalidadeImovelHelper> colecaoQuantidadeHelper = 
				new ArrayList<GrupoLocalidadeImovelHelper>();
			
			int quantidadeTotalImoveis = 0;
			
			// [3.1.2] Pesquisar as situações de ligação de agua permitidas para a ação		
			if (cicloMeta.getCobrancaAcao() != null && cicloMeta.getCobrancaAcao().getCobrancaCriterio() != null){

				Collection<Integer> colecaoIdsSituacaoLigacaoAgua = new ArrayList<Integer>();
				
				// pesquisar a colecao de criterios para situacao ligacao agua, esgoto e cobranca
				FiltroCriterioSituacaoLigacaoAgua filtroCritSitAgua = new FiltroCriterioSituacaoLigacaoAgua();
				filtroCritSitAgua.adicionarParametro(new ParametroSimples(
						FiltroCriterioSituacaoLigacaoAgua.COBRANCA_CRITERIO_ID,
						cicloMeta.getCobrancaAcao().getCobrancaCriterio().getId()));
				filtroCritSitAgua.adicionarCaminhoParaCarregamentoEntidade(FiltroCriterioSituacaoLigacaoAgua.LIGACAO_AGUA_SITUACAO);
				Collection colecaoCritSituacaoLigacaoAgua = getControladorUtil().pesquisar(filtroCritSitAgua, CriterioSituacaoLigacaoAgua.class.getName());				

				if (colecaoCritSituacaoLigacaoAgua == null || colecaoCritSituacaoLigacaoAgua.isEmpty()){
					if (cicloMeta.getCobrancaAcao().getLigacaoAguaSituacao() == null){
						throw new ControladorException("atencao.cobranca_acao_sem_situacao_acao");
					}
					colecaoIdsSituacaoLigacaoAgua.add(cicloMeta.getCobrancaAcao().getLigacaoAguaSituacao().getId());
				} else {
					for (Iterator iter = colecaoCritSituacaoLigacaoAgua.iterator(); iter
							.hasNext();) {
						CriterioSituacaoLigacaoAgua clas = (CriterioSituacaoLigacaoAgua) iter.next();
						colecaoIdsSituacaoLigacaoAgua.add(clas.getComp_id().getLigacaoAguaSituacao().getId());
					}
				}
				
				Collection colecaoQuantidadeImoveis = null;
				
				try {
					colecaoQuantidadeImoveis 
					   = repositorioCobranca.pesquisarQuantidadeImoveisPorGrupoLocalidade(
							   colecaoIdsSituacaoLigacaoAgua);
				} catch (ErroRepositorioException e) {
					e.printStackTrace();
				}
				
				if (colecaoQuantidadeImoveis != null){
					Iterator iter = colecaoQuantidadeImoveis.iterator(); 
					while (iter.hasNext()) {
						Object[] linha = (Object[]) iter.next();
						
						GrupoLocalidadeImovelHelper helper = new GrupoLocalidadeImovelHelper();
						helper.setIdGrupo((Integer) linha[0]);
						helper.setIdLocalidade((Integer) linha[1]);
						helper.setQuantidadeImoveis((Integer) linha[2]);
						
						quantidadeTotalImoveis += helper.getQuantidadeImoveis();
						
						colecaoQuantidadeHelper.add(helper);
					}
				}

				// antes do (double) veio 0.0
				double fator = ((double) cicloMeta.getMetaTotal()) / quantidadeTotalImoveis;
				
				int metaAcumulada = 0;
				boolean estouro = false;
				CicloMetaGrupo itemMaior = null;
				
				// Gerando as metas proporcionais
				for (Iterator iter = colecaoQuantidadeHelper.iterator(); 
					iter.hasNext();) {
					GrupoLocalidadeImovelHelper helper = 
						(GrupoLocalidadeImovelHelper) iter.next();
					
					CicloMetaGrupo cicloMetaGrupo = 
						new CicloMetaGrupo();
					
					cicloMetaGrupo.setCicloMeta(cicloMeta);
					
					CobrancaGrupo cobGrupo = new CobrancaGrupo();
					cobGrupo.setId(helper.getIdGrupo());
					cicloMetaGrupo.setCobrancaGrupo(cobGrupo);
					
					Localidade localidade = new Localidade();
					localidade.setId(helper.getIdLocalidade());
					cicloMetaGrupo.setLocalidade(localidade);
					
					cicloMetaGrupo.setQuantidadeImoveisSituacaoAgua(
							helper.getQuantidadeImoveis());
					//m.qtd_imoveis*cm.clmt_qtmeta/3771120
					
					int metaCalculada = 0;
					
					if (!estouro){
						BigDecimal calculoMeta = new BigDecimal(fator).multiply(
								new BigDecimal(helper.getQuantidadeImoveis()));
						//calculoMeta = calculoMeta.setScale(0, BigDecimal.ROUND_CEILING);
						calculoMeta = calculoMeta.setScale(0, BigDecimal.ROUND_HALF_EVEN);
						metaCalculada = calculoMeta.intValue();
						if (itemMaior == null || itemMaior.getMetaCalculada() < metaCalculada){
							itemMaior = cicloMetaGrupo;
						}
						
						metaAcumulada += metaCalculada;
					}
					
					
					cicloMetaGrupo.setMetaCalculada(metaCalculada);
					cicloMetaGrupo.setMetaAjustada(metaCalculada);
					
					if (metaCalculada < 0){
						cicloMetaGrupo.setMetaCalculada(0);
						cicloMetaGrupo.setMetaAjustada(0);
					}
					
					cicloMetaGrupo.setUltimaAlteracao(new Date());
					
					Integer idCicloMetaGrupo = (Integer) getControladorUtil().inserir(cicloMetaGrupo);
					
					cicloMetaGrupo.setId(idCicloMetaGrupo);
					
					//colecaoCicloMetaGrupo.add(cicloMetaGrupo);
					
				}

				// Alterando o item com maior meta para ficar exatamente o valor da meta total
				if (metaAcumulada > cicloMeta.getMetaTotal()){
					itemMaior.setMetaCalculada(itemMaior.getMetaCalculada() - (metaAcumulada - cicloMeta.getMetaTotal()));
					if (itemMaior.getMetaCalculada() < 0){
						itemMaior.setMetaCalculada(0);
					}
					
					itemMaior.setMetaAjustada(itemMaior.getMetaAjustada() - (metaAcumulada - cicloMeta.getMetaTotal()));
					if (itemMaior.getMetaAjustada() < 0){
						itemMaior.setMetaAjustada(0);
					}
					
					getControladorUtil().atualizar(itemMaior);
				}else if (cicloMeta.getMetaTotal() > metaAcumulada){
					itemMaior.setMetaCalculada(itemMaior.getMetaCalculada() - (cicloMeta.getMetaTotal() - metaAcumulada));
					if (itemMaior.getMetaCalculada() < 0){
						itemMaior.setMetaCalculada(0);
					}
					
					itemMaior.setMetaAjustada(itemMaior.getMetaAjustada() - (cicloMeta.getMetaTotal() - metaAcumulada));
					if (itemMaior.getMetaAjustada() < 0){
						itemMaior.setMetaAjustada(0);
					}
					
					getControladorUtil().atualizar(itemMaior);
				}

			}
				
			//helpersGerencia = agruparCicloMetaGrupo(colecaoCicloMetaGrupo);
			
			colecaoQuantidadeHelper.clear();
			
		} catch (ControladorException ex){
			sessionContext.setRollbackOnly();
			throw new ControladorException("erro.sistema", ex);			
		}
		
		//return helpersGerencia;
	}
	
	/**
	 * 
	 * Dado um objeto de cicloMeta, consultar a colecao de ciclo meta grupo, agrupando 
	 * por gerencia, unidade de negocio e localidade
	 * 
	 * @author Francisco do Nascimento
	 * @date 13/05/2009
	 *
	 * @param cicloMeta Objeto ciclo meta 
	 * @return Helpers com os agrupamentos definidos de ciclo meta grupo
	 */
	public TreeMap<String, InformarCicloMetaGrupoHelper> consultarColecaoCicloMetaGrupo(CicloMeta cicloMeta) throws ControladorException {
		
		FiltroCicloMetaGrupo filtroCicloGrupo = new FiltroCicloMetaGrupo();
		filtroCicloGrupo.adicionarParametro(new ParametroSimples(FiltroCicloMetaGrupo.CICLO_META, 
			cicloMeta.getId()));
		
		Collection<CicloMetaGrupo> colecaoCicloMetaGrupo = getControladorUtil().pesquisar(
				filtroCicloGrupo, CicloMetaGrupo.class.getName());			

		return agruparCicloMetaGrupo(colecaoCicloMetaGrupo);
	}

	/**
	 *
	 * @author Francisco do Nascimento
	 * @date 13/05/2009
	 *
	 * @param helpersGerencia
	 * @param colecaoCicloMetaGrupo
	 * @throws ControladorException
	 */
	private TreeMap<String, InformarCicloMetaGrupoHelper> agruparCicloMetaGrupo(Collection colecaoCicloMetaGrupo) throws ControladorException {
		
		TreeMap<String, InformarCicloMetaGrupoHelper> helpersGerencia = new TreeMap<String, InformarCicloMetaGrupoHelper>();
		
		if (colecaoCicloMetaGrupo != null) {
			for (Iterator iter = colecaoCicloMetaGrupo.iterator(); iter.hasNext();) {
				CicloMetaGrupo cicloMetaGrupo = (CicloMetaGrupo) iter.next();
				
				FiltroLocalidade filtroLocalidade = new FiltroLocalidade();
				filtroLocalidade.adicionarParametro(new ParametroSimples(FiltroLocalidade.ID, 
					cicloMetaGrupo.getLocalidade().getId()));
				filtroLocalidade.adicionarCaminhoParaCarregamentoEntidade(FiltroLocalidade.GERENCIA);
				filtroLocalidade.adicionarCaminhoParaCarregamentoEntidade(FiltroLocalidade.UNIDADE_NEGOCIO);
				
				Collection colecaoLocalidade = getControladorUtil().pesquisar(
						filtroLocalidade, Localidade.class.getName());
				
				Localidade localidade = (Localidade) Util.retonarObjetoDeColecao(colecaoLocalidade);
				
				Integer idGerencia = localidade.getGerenciaRegional().getId();
				Integer idUnidadeNegocio = localidade.getUnidadeNegocio().getId();
				
				InformarCicloMetaGrupoHelper helperGerenciaLoc = helpersGerencia.get(localidade.getGerenciaRegional().getNome());
				
				if (helperGerenciaLoc == null){
					helperGerenciaLoc = new InformarCicloMetaGrupoHelper();
					helperGerenciaLoc.setTipoItem("G");
					helperGerenciaLoc.setIdItem(idGerencia);
					helperGerenciaLoc.setNomeItem(localidade.getGerenciaRegional().getNome());
					helperGerenciaLoc.setMetaOriginal(cicloMetaGrupo.getMetaCalculada());
					helperGerenciaLoc.setMetaAtual(cicloMetaGrupo.getMetaAjustada());
					helperGerenciaLoc.setQtdImoveisSituacao(cicloMetaGrupo.getQuantidadeImoveisSituacaoAgua());
					
					/** Usado pelo analisar metas Ciclo **/
					if(cicloMetaGrupo.getQuantidadeRealizada() == null){
						helperGerenciaLoc.setQtdTotalRealizada(0);
					}else {
						helperGerenciaLoc.setQtdTotalRealizada(cicloMetaGrupo.getQuantidadeRealizada());
					}
					//helperGerenciaLoc.setValorTotalRealizado(cicloMetaGrupo.);
					if(cicloMetaGrupo.getQuantidadeDocumentosRestantes() == null){
						helperGerenciaLoc.setQtdTotalRestante(0);
					}else {
						helperGerenciaLoc.setQtdTotalRestante(cicloMetaGrupo.getQuantidadeDocumentosRestantes());
					}
					if(cicloMetaGrupo.getValorTotalDocumentosRestantes() == null){
						helperGerenciaLoc.setValorTotalRestante(new BigDecimal(0));
					}else {
						helperGerenciaLoc.setValorTotalRestante(cicloMetaGrupo.getValorTotalDocumentosRestantes());
					}
					
					/** ------------------------------ **/
			
					helpersGerencia.put(localidade.getGerenciaRegional().getNome(), helperGerenciaLoc);
					
					TreeMap<String, InformarCicloMetaGrupoHelper> helpersUneg = new TreeMap<String, InformarCicloMetaGrupoHelper>();
					helperGerenciaLoc.setSubItens(helpersUneg);

				} else {
					helperGerenciaLoc.setMetaOriginal(helperGerenciaLoc.getMetaOriginal() 
							+ cicloMetaGrupo.getMetaCalculada());
					helperGerenciaLoc.setMetaAtual(helperGerenciaLoc.getMetaAtual() 
							+ cicloMetaGrupo.getMetaAjustada());
					helperGerenciaLoc.setQtdImoveisSituacao(helperGerenciaLoc.getQtdImoveisSituacao() + 
							cicloMetaGrupo.getQuantidadeImoveisSituacaoAgua());
					
					/** Usado pelo analisar metas Ciclo **/
					if(cicloMetaGrupo.getQuantidadeRealizada() == null){
						cicloMetaGrupo.setQuantidadeRealizada(0);
					}
					helperGerenciaLoc.setQtdTotalRealizada(helperGerenciaLoc.getQtdTotalRealizada() +
							cicloMetaGrupo.getQuantidadeRealizada());
					//helperGerenciaLoc.setValorTotalRealizado(cicloMetaGrupo.);
					if(cicloMetaGrupo.getQuantidadeDocumentosRestantes() == null){
						cicloMetaGrupo.setQuantidadeDocumentosRestantes(0);
					}
					helperGerenciaLoc.setQtdTotalRestante(helperGerenciaLoc.getQtdTotalRestante() +
							cicloMetaGrupo.getQuantidadeDocumentosRestantes());
					if(cicloMetaGrupo.getValorTotalDocumentosRestantes() == null){
						cicloMetaGrupo.setValorTotalDocumentosRestantes(new BigDecimal(0));
					}
					helperGerenciaLoc.setValorTotalRestante(helperGerenciaLoc.getValorTotalRestante().
							add(cicloMetaGrupo.getValorTotalDocumentosRestantes()));
					/** ------------------------------ **/
					
					
				}
				
				InformarCicloMetaGrupoHelper helperUnegLoc = helperGerenciaLoc.getSubItens().get(localidade.getUnidadeNegocio().getNome());
				
				if (helperUnegLoc == null){
					
					helperUnegLoc = new InformarCicloMetaGrupoHelper();
					helperUnegLoc.setTipoItem("U");
					helperUnegLoc.setIdItem(idUnidadeNegocio);
					helperUnegLoc.setNomeItem(localidade.getUnidadeNegocio().getNome());
					helperUnegLoc.setMetaOriginal(cicloMetaGrupo.getMetaCalculada());
					helperUnegLoc.setMetaAtual(cicloMetaGrupo.getMetaAjustada());
					helperUnegLoc.setQtdImoveisSituacao(cicloMetaGrupo.getQuantidadeImoveisSituacaoAgua());
					
					/** Usado pelo analisar metas Ciclo **/
					helperUnegLoc.setQtdTotalRealizada(cicloMetaGrupo.getQuantidadeRealizada());
					//helperUnegLoc.setValorTotalRealizado(cicloMetaGrupo.);
					helperUnegLoc.setQtdTotalRestante(cicloMetaGrupo.getQuantidadeDocumentosRestantes());
					helperUnegLoc.setValorTotalRestante(cicloMetaGrupo.getValorTotalDocumentosRestantes());
					/** ------------------------------ **/
					
					helperGerenciaLoc.getSubItens().put(localidade.getUnidadeNegocio().getNome(), helperUnegLoc);
										
					TreeMap<String, InformarCicloMetaGrupoHelper> helpersLoc = new TreeMap<String, InformarCicloMetaGrupoHelper>();
					helperUnegLoc.setSubItens(helpersLoc);

				} else {
					helperUnegLoc.setMetaOriginal(helperUnegLoc.getMetaOriginal() 
							+ cicloMetaGrupo.getMetaCalculada());
					helperUnegLoc.setMetaAtual(helperUnegLoc.getMetaAtual() 
							+ cicloMetaGrupo.getMetaAjustada());
					helperUnegLoc.setQtdImoveisSituacao(helperUnegLoc.getQtdImoveisSituacao() + 
							cicloMetaGrupo.getQuantidadeImoveisSituacaoAgua());
					
					/** Usado pelo analisar metas Ciclo **/
					helperUnegLoc.setQtdTotalRealizada(helperGerenciaLoc.getQtdTotalRealizada() +
							cicloMetaGrupo.getQuantidadeRealizada());
					//helperGerenciaLoc.setValorTotalRealizado(cicloMetaGrupo.);
					helperUnegLoc.setQtdTotalRestante(helperGerenciaLoc.getQtdTotalRestante() +
							cicloMetaGrupo.getQuantidadeDocumentosRestantes());
					helperUnegLoc.setValorTotalRestante(helperGerenciaLoc.getValorTotalRestante().
							add(cicloMetaGrupo.getValorTotalDocumentosRestantes()));
					/** ------------------------------ **/
					
				}
				
				InformarCicloMetaGrupoHelper helperLoc = helperUnegLoc.getSubItens().get(localidade.getDescricao());
				
				if (helperLoc == null){
					helperLoc = new InformarCicloMetaGrupoHelper();
					helperLoc.setTipoItem("L");
					helperLoc.setIdItem(localidade.getId());
					helperLoc.setNomeItem(localidade.getDescricao());
					helperLoc.setMetaOriginal(cicloMetaGrupo.getMetaCalculada());
					helperLoc.setMetaAtual(cicloMetaGrupo.getMetaAjustada());
					helperLoc.setQtdImoveisSituacao(cicloMetaGrupo.getQuantidadeImoveisSituacaoAgua());
					
					/** Usado pelo analisar metas Ciclo **/
					helperLoc.setQtdTotalRealizada(cicloMetaGrupo.getQuantidadeRealizada());
					//helperLoc.setValorTotalRealizado(cicloMetaGrupo.);
					helperLoc.setQtdTotalRestante(cicloMetaGrupo.getQuantidadeDocumentosRestantes());
					helperLoc.setValorTotalRestante(cicloMetaGrupo.getValorTotalDocumentosRestantes());
					/** ------------------------------ **/
					
					helperUnegLoc.getSubItens().put(localidade.getDescricao(), helperLoc);		
				} else {
					helperLoc.setMetaOriginal(helperLoc.getMetaOriginal() 
							+ cicloMetaGrupo.getMetaCalculada());
					helperLoc.setMetaAtual(helperLoc.getMetaAtual() 
							+ cicloMetaGrupo.getMetaAjustada());
					helperLoc.setQtdImoveisSituacao(helperLoc.getQtdImoveisSituacao() + 
							cicloMetaGrupo.getQuantidadeImoveisSituacaoAgua());
					
					/** Usado pelo analisar metas Ciclo **/
					helperLoc.setQtdTotalRealizada(helperGerenciaLoc.getQtdTotalRealizada() +
							cicloMetaGrupo.getQuantidadeRealizada());
					//helperGerenciaLoc.setValorTotalRealizado(cicloMetaGrupo.);
					helperLoc.setQtdTotalRestante(helperGerenciaLoc.getQtdTotalRestante() +
							cicloMetaGrupo.getQuantidadeDocumentosRestantes());
					helperLoc.setValorTotalRestante(helperGerenciaLoc.getValorTotalRestante().
							add(cicloMetaGrupo.getValorTotalDocumentosRestantes()));
					/** ------------------------------ **/
				}
			}			
		}
		
		return helpersGerencia;
		
	}

	/**
	 * 
	 * Atualizar metas dos grupos/localidade 
	 *
	 * @author Francisco do Nascimento
	 * @date 28/04/2009
	 *
	 * @param cicloMeta
	 * @param helpersLocalidade
	 * @throws ControladorException
	 */	
	public void atualizarDistribuicaoMetasCicloGrupoLocalidade(CicloMeta cicloMeta, 
			Collection<InformarCicloMetaGrupoHelper> helpersLocalidade) throws ControladorException{

		if (helpersLocalidade != null){
			for (Iterator iter = helpersLocalidade.iterator(); iter.hasNext();) {
				InformarCicloMetaGrupoHelper helper = (InformarCicloMetaGrupoHelper) iter.next();
				
				FiltroCicloMetaGrupo filtroCicloGrupo = new FiltroCicloMetaGrupo();
				filtroCicloGrupo.adicionarParametro(new ParametroSimples(FiltroCicloMetaGrupo.CICLO_META, 
					cicloMeta.getId()));
				filtroCicloGrupo.adicionarParametro(new ParametroSimples(FiltroCicloMetaGrupo.LOCALIDADE_ID, 
						helper.getIdItem()));
				
				Collection<CicloMetaGrupo> colecaoCicloMetaGrupoLocalidade = getControladorUtil().pesquisar(
						filtroCicloGrupo, CicloMetaGrupo.class.getName());
				
				int qtdTotalLocalidadeAcumulada = 0; 
				
				int contadorLocalidade = 1;
				 
				for (Iterator iterCicloMetaGrupo = colecaoCicloMetaGrupoLocalidade
						.iterator(); iterCicloMetaGrupo.hasNext();) {
					CicloMetaGrupo cicloMetaGrupo = (CicloMetaGrupo) iterCicloMetaGrupo.next();
					
					if (helper.getMetaOriginal() > 0){
						int metaAjustada = (int) ((double) cicloMetaGrupo.getMetaCalculada() * helper.getMetaAtual()) /
							helper.getMetaOriginal();
						
						if (contadorLocalidade == colecaoCicloMetaGrupoLocalidade.size()){
							metaAjustada = helper.getMetaAtual() - qtdTotalLocalidadeAcumulada;
						}
						
						
						cicloMetaGrupo.setMetaAjustada(metaAjustada);
						
						if(metaAjustada < 0){
							cicloMetaGrupo.setMetaAjustada(0);
						}
						
						getControladorUtil().atualizar(cicloMetaGrupo);
						
						qtdTotalLocalidadeAcumulada += metaAjustada;
					}
					contadorLocalidade++;
					
				} 
				
			}
		}
		
	}
	
	/**
	 * [UC0214] Efetuar Parcelamento de Débitos
	 * 
	 * @author Vivianne Sousa
	 * @date 13/05/2009
	 * 
	 * @return
	 * @throws ErroRepositorioException
	 */
	public Object[] pesquisaSomatorioValorDebitoACobrarParcelamentoImovel(
			Integer idImovel, Integer referencia)throws ControladorException {
		
		BigDecimal valorDebitoACobrar = BigDecimal.ZERO;
		Collection colDebitoACobrar = null;
		
		try {
			//verifica se existe parcelamento de faturas com amreferenciaconta <= referencia
			Integer idParcelamento = repositorioCobranca.pesquisarIdParcelamentoNormal(idImovel, referencia);
			
			if(idParcelamento != null){
				
				colDebitoACobrar = repositorioCobranca.pesquisarDebitosACobrarParcelamento(idParcelamento);
				
				if (colDebitoACobrar != null && !colDebitoACobrar.isEmpty()){
					Iterator iterDebitoACobrar = colDebitoACobrar.iterator();
					
					while (iterDebitoACobrar.hasNext()) {
						DebitoACobrar debitoACobrar = (DebitoACobrar) iterDebitoACobrar.next();
						valorDebitoACobrar = valorDebitoACobrar.add(debitoACobrar.getValorTotalComBonus());
					}
				}
				
			}
			
		} catch (ErroRepositorioException e) {
			e.printStackTrace();
			throw new ControladorException("erro.sistema", e);
		}

		Object[] retorno = new Object[2];
		retorno[0] = (BigDecimal) valorDebitoACobrar;
		retorno[1] = (Collection) colDebitoACobrar;
		
		return retorno;
	}
	
	/**
	 * [UC0214] Efetuar Parcelamento de Débitos
	 * Author: Vivianne Sousa 
	 * Data: 18/05/2009
	 */
	public BigDecimal pesquisarValorDebitoCobradoParcelamentoConta(Integer idConta)throws ControladorException {
		
		BigDecimal retorno = BigDecimal.ZERO;
		
		try {
			retorno = repositorioCobranca.pesquisarValorDebitoCobradoParcelamentoConta(idConta);
			
		} catch (ErroRepositorioException e) {
			e.printStackTrace();
			throw new ControladorException("erro.sistema", e);
		}
		return retorno;
	}
	
	
	/**
	 * 
	 * 
	 * [UC0177] Informar Situacao Especial de Cobrança
	 * 
	 * @author Rômulo Aurélio
	 * @date 28/05/2009
	 * 
	 * @return
	 */
	public void inserirSituacaoEspecialCobranca(
			Collection colecaoImoveisParaSerInseridos,
			SituacaoEspecialCobrancaHelper situacaoEspecialCobrancaHelper,
			Usuario usuarioLogado, Integer idCobrancaSituacaoTipo,
			Integer anoMesReferenciaInicial, Integer anoMesReferenciaFinal)
			throws ControladorException {
		try {
			
			
			Integer idCobrancaSituacaoComando = this
					.inserirCobrancaSituacaoComando(
							situacaoEspecialCobrancaHelper, false);

			CobrancaSituacaoComando cobrancaSituacaoComando = new CobrancaSituacaoComando();

			cobrancaSituacaoComando.setId(idCobrancaSituacaoComando);
			
			Collection colecaoImoveis = new ArrayList();

			// Incluir tabela Cobranca situacao historico

			Iterator iterator = colecaoImoveisParaSerInseridos.iterator();
			Collection collectionCobrancaSituaoHistorico = new ArrayList();
			while (iterator.hasNext()) {
				
				Object[] dadosImoveis = (Object[]) iterator.next();

				if (dadosImoveis != null) {

					Integer id = (Integer) dadosImoveis[0];

					Date ultimaAlteracao = (Date) dadosImoveis[1];

					Date ultimaAlteracaoImovel = getControladorImovel()
							.pesquisarUltimaAlteracaoImovel(id);
					// Controle de concorrencia
					if (ultimaAlteracaoImovel.after(ultimaAlteracao)) {
						throw new ControladorException(
								"atencao.atualizacao.timestamp");
					}

					// Adiciona os imoveis 
					colecaoImoveis.add(id);
					// Construindo as variaveis
					CobrancaSituacaoHistorico cobrancaSituacaoHistorico = new CobrancaSituacaoHistorico();
					Imovel imovel = new Imovel();
					
					FiltroCobrancaSituacaoTipo filtroCobrancaSituacaoTipo = new FiltroCobrancaSituacaoTipo();

					filtroCobrancaSituacaoTipo
							.adicionarParametro(new ParametroSimples(
									FiltroCobrancaSituacaoTipo.ID,
									situacaoEspecialCobrancaHelper
									.getIdCobrancaSituacaoTipo()));

					Collection colecaoCobrancasSituacoesTipo = this.getControladorUtil().pesquisar(
							filtroCobrancaSituacaoTipo, CobrancaSituacaoTipo.class
									.getName());
					
					CobrancaSituacaoTipo cobrancaSituacaoTipo = (CobrancaSituacaoTipo) colecaoCobrancasSituacoesTipo.iterator().next();
					
					FiltroCobrancaSituacaoMotivo filtroCobrancaSituacaoMotivo = new FiltroCobrancaSituacaoMotivo();

					filtroCobrancaSituacaoMotivo
						.adicionarParametro(new ParametroSimples(
									FiltroCobrancaSituacaoMotivo.ID,
									situacaoEspecialCobrancaHelper
									.getIdCobrancaSituacaoMotivo()));

					Collection colecaoCobrancasSituacoesMotivo = this.getControladorUtil().pesquisar(
							filtroCobrancaSituacaoMotivo, CobrancaSituacaoMotivo.class
									.getName());
					
					CobrancaSituacaoMotivo cobrancaSituacaoMotivo = (CobrancaSituacaoMotivo) colecaoCobrancasSituacoesMotivo.iterator().next();
					
					
					// Setando as Variaveis
					imovel.setId(new Integer(id));
					cobrancaSituacaoHistorico.setImovel(imovel);

					cobrancaSituacaoHistorico
							.setAnoMesCobrancaSituacaoInicio(anoMesReferenciaInicial);
					cobrancaSituacaoHistorico
							.setAnoMesCobrancaSituacaoFim(anoMesReferenciaFinal);

					cobrancaSituacaoHistorico.setAnoMesCobrancaRetirada(null);
					cobrancaSituacaoHistorico
							.setCobrancaSituacaoMotivo(cobrancaSituacaoMotivo);

					cobrancaSituacaoHistorico
							.setCobrancaSituacaoTipo(cobrancaSituacaoTipo);
					cobrancaSituacaoHistorico.setObservacaoInforma(situacaoEspecialCobrancaHelper.getObservacaoInforma());

					if (situacaoEspecialCobrancaHelper.getDataFimSituacao() != null
							&& !situacaoEspecialCobrancaHelper
									.getDataFimSituacao().equals("")) {

						Date dataFimSituacao = Util
								.converteStringParaDate(situacaoEspecialCobrancaHelper
										.getDataFimSituacao());

						if (dataFimSituacao.before(new Date())) {
							throw new ActionServletException(
									"atencao.data_final_situacao_cobranca_invalida");
						} else {
							cobrancaSituacaoHistorico
									.setDataFimSituacao(dataFimSituacao);
						}

					}

					cobrancaSituacaoHistorico.setUltimaAlteracao(Calendar
							.getInstance().getTime());

					
					// CobrancaSituacaoComando
					cobrancaSituacaoHistorico
							.setCobrancaSituacaoComandoInforma(cobrancaSituacaoComando);


					collectionCobrancaSituaoHistorico
							.add(cobrancaSituacaoHistorico);
				}
			}
			

			//this.inserirFaturamentoSituacaoHistorico(collectionFaturmentoSituaoHistorico);
			//------------------------REGISTRAR TRANSAÇÃO---------------------FATURAMENTO HISTORICO-----
			Iterator itera = collectionCobrancaSituaoHistorico.iterator();
			while(itera.hasNext()){
				CobrancaSituacaoHistorico csh = (CobrancaSituacaoHistorico) itera.next();
				
				RegistradorOperacao registradorOperacao = new RegistradorOperacao(
						Operacao.OPERACAO_INFORMAR_SITUACAO_ESPECIAL_COBRANCA,csh.getImovel().getId(),csh.getImovel().getId(),
						new UsuarioAcaoUsuarioHelper(usuarioLogado,
								UsuarioAcao.USUARIO_ACAO_EFETUOU_OPERACAO));
				
				registradorOperacao.registrarOperacao(csh);
			}
			//------------------------REGISTRAR TRANSAÇÃO---------------------FATURAMENTO HISTORICO-----

		    // Incluir tabela Cobranca situacao historico
			// this.inserirCobrancaSituacaoHistorico(collectionCobrancaSituaoHistorico);

			getControladorBatch().inserirColecaoObjetoParaBatch(
					collectionCobrancaSituaoHistorico);

			// Atualizar Imoveis
			getControladorImovel().atualizarCobrancaSituacaoTipo(
					colecaoImoveis, idCobrancaSituacaoTipo,usuarioLogado);

		} catch (ControladorException ex) {
			sessionContext.setRollbackOnly();
			throw new ControladorException("erro.sistema", ex);
		}

	}

	/**
	 * [UC0177] Informar Situacao Especial Cobranca
	 * 
	 * @author Rômulo Aurélio
	 * @created 27/05/2009
	 * 
	 */
	public Integer inserirCobrancaSituacaoComando(
			SituacaoEspecialCobrancaHelper situacaoEspecialCobrancaHelper,
			boolean retirar) throws ControladorException {

		Integer id;

		CobrancaSituacaoComando cobrancaSituacaoComando = new CobrancaSituacaoComando();

		if (situacaoEspecialCobrancaHelper.getIdImovel() != null
				&& !situacaoEspecialCobrancaHelper.getIdImovel()
						.equalsIgnoreCase("")) {

			Imovel imovel = new Imovel();

			imovel.setId(new Integer(situacaoEspecialCobrancaHelper
					.getIdImovel()));

			cobrancaSituacaoComando.setImovel(imovel);

		}

		if (situacaoEspecialCobrancaHelper.getLocalidadeOrigemID() != null
				&& !situacaoEspecialCobrancaHelper.getLocalidadeOrigemID()
						.equalsIgnoreCase("")) {

			Localidade localidadeInicial = new Localidade();

			localidadeInicial.setId(new Integer(situacaoEspecialCobrancaHelper
					.getLocalidadeOrigemID()));

			cobrancaSituacaoComando.setLocalidadeInicial(localidadeInicial);

		}

		if (situacaoEspecialCobrancaHelper.getLocalidadeDestinoID() != null
				&& !situacaoEspecialCobrancaHelper.getLocalidadeDestinoID()
						.equalsIgnoreCase("")) {

			Localidade localidadeFinal = new Localidade();

			localidadeFinal.setId(new Integer(situacaoEspecialCobrancaHelper
					.getLocalidadeDestinoID()));

			cobrancaSituacaoComando.setLocalidadeFinal(localidadeFinal);

		}

		if (situacaoEspecialCobrancaHelper.getSetorComercialOrigemCD() != null
				&& !situacaoEspecialCobrancaHelper.getSetorComercialOrigemCD()
						.equalsIgnoreCase("")) {

			cobrancaSituacaoComando
					.setCodigoSetorComercialInicial(new Integer(
							situacaoEspecialCobrancaHelper
									.getSetorComercialOrigemCD()));

		}

		if (situacaoEspecialCobrancaHelper.getSetorComercialDestinoCD() != null
				&& !situacaoEspecialCobrancaHelper.getSetorComercialDestinoCD()
						.equalsIgnoreCase("")) {

			cobrancaSituacaoComando
					.setCodigoSetorComercialFinal(new Integer(
							situacaoEspecialCobrancaHelper
									.getSetorComercialDestinoCD()));

		}

		if (situacaoEspecialCobrancaHelper.getQuadraOrigemNM() != null
				&& !situacaoEspecialCobrancaHelper.getQuadraOrigemNM()
						.equalsIgnoreCase("")) {

			cobrancaSituacaoComando.setNumeroQuadraInicial(new Integer(
					situacaoEspecialCobrancaHelper.getQuadraOrigemNM()));

		}

		if (situacaoEspecialCobrancaHelper.getQuadraDestinoNM() != null
				&& !situacaoEspecialCobrancaHelper.getQuadraDestinoNM()
						.equalsIgnoreCase("")) {

			cobrancaSituacaoComando.setNumeroQuadraFinal(new Integer(
					situacaoEspecialCobrancaHelper.getQuadraDestinoNM()));

		}

		if (situacaoEspecialCobrancaHelper.getLoteOrigem() != null
				&& !situacaoEspecialCobrancaHelper.getLoteOrigem()
						.equalsIgnoreCase("")) {

			cobrancaSituacaoComando.setNumeroLoteInicial(new Integer(
					situacaoEspecialCobrancaHelper.getLoteOrigem()));

		}

		if (situacaoEspecialCobrancaHelper.getLoteDestino() != null
				&& !situacaoEspecialCobrancaHelper.getLoteDestino()
						.equalsIgnoreCase("")) {

			cobrancaSituacaoComando.setNumeroLoteFinal(new Integer(
					situacaoEspecialCobrancaHelper.getLoteDestino()));

		}

		if (situacaoEspecialCobrancaHelper.getSubloteOrigem() != null
				&& !situacaoEspecialCobrancaHelper.getSubloteOrigem()
						.equalsIgnoreCase("")) {

			cobrancaSituacaoComando.setNumeroSubLoteInicial(new Integer(
					situacaoEspecialCobrancaHelper.getSubloteOrigem()));

		}

		if (situacaoEspecialCobrancaHelper.getSubloteDestino() != null
				&& !situacaoEspecialCobrancaHelper.getSubloteDestino()
						.equalsIgnoreCase("")) {

			cobrancaSituacaoComando.setNumeroSubLoteFinal(new Integer(
					situacaoEspecialCobrancaHelper.getSubloteDestino()));

		}

		if (situacaoEspecialCobrancaHelper.getCodigoRotaInicial() != null
				&& !situacaoEspecialCobrancaHelper.getCodigoRotaInicial()
						.equalsIgnoreCase("")) {

			cobrancaSituacaoComando.setCodigoRotaInicial(new Integer(
					situacaoEspecialCobrancaHelper.getCodigoRotaInicial()));

		}

		if (situacaoEspecialCobrancaHelper.getCodigoRotaFinal() != null
				&& !situacaoEspecialCobrancaHelper.getCodigoRotaFinal()
						.equalsIgnoreCase("")) {

			cobrancaSituacaoComando.setCodigoRotaFinal(new Integer(
					situacaoEspecialCobrancaHelper.getCodigoRotaFinal()));

		}

		if (situacaoEspecialCobrancaHelper.getSequencialRotaInicial() != null
				&& !situacaoEspecialCobrancaHelper.getSequencialRotaInicial()
						.equalsIgnoreCase("")) {

			cobrancaSituacaoComando.setSequencialRotaInicial(new Integer(
					situacaoEspecialCobrancaHelper.getSequencialRotaInicial()));

		}

		if (situacaoEspecialCobrancaHelper.getSequencialRotaFinal() != null
				&& !situacaoEspecialCobrancaHelper.getSequencialRotaFinal()
						.equalsIgnoreCase("")) {

			cobrancaSituacaoComando.setSequencialRotaFinal(new Integer(
					situacaoEspecialCobrancaHelper.getSequencialRotaFinal()));

		}

		if (situacaoEspecialCobrancaHelper.getIdsCategoria() != null) {

			String[] idsCategoria = situacaoEspecialCobrancaHelper
					.getIdsCategoria();

			for (int i = 0; i < idsCategoria.length; i++) {
				if (idsCategoria[i] != null && !idsCategoria[0].equals("-1")
						&& i == 0) {
					Categoria cat = new Categoria();
					cat.setId(new Integer(idsCategoria[i]));
					cobrancaSituacaoComando.setCategoria1(cat);
				} else if (idsCategoria[i] != null
						&& !idsCategoria[0].equals("-1") && i == 2) {
					Categoria cat = new Categoria();
					cat.setId(new Integer(idsCategoria[i]));
					cobrancaSituacaoComando.setCategoria2(cat);
				} else if (idsCategoria[i] != null
						&& !idsCategoria[0].equals("-1") && i == 3) {
					Categoria cat = new Categoria();
					cat.setId(new Integer(idsCategoria[i]));
					cobrancaSituacaoComando.setCategoria3(cat);
				} else if (idsCategoria[i] != null
						&& !idsCategoria[0].equals("-1") && i == 4) {
					Categoria cat = new Categoria();
					cat.setId(new Integer(idsCategoria[i]));
					cobrancaSituacaoComando.setCategoria4(cat);
				}
			}
		}

		if (situacaoEspecialCobrancaHelper.getQuantidadeImoveisAtualizados() != null
				&& !situacaoEspecialCobrancaHelper
						.getQuantidadeImoveisAtualizados().equalsIgnoreCase("")) {

			cobrancaSituacaoComando.setQuantidadeImoveis(new Integer(
					situacaoEspecialCobrancaHelper
							.getQuantidadeImoveisAtualizados()));

		}

		if (situacaoEspecialCobrancaHelper.getMesAnoReferenciaCobrancaInicial() != null
				&& !situacaoEspecialCobrancaHelper
						.getMesAnoReferenciaCobrancaInicial().equals("")) {
			cobrancaSituacaoComando
					.setAnoMesInicialSituacaoCobranca(Util
							.formatarMesAnoComBarraParaAnoMes(situacaoEspecialCobrancaHelper
									.getMesAnoReferenciaCobrancaInicial()));
		}

		if (situacaoEspecialCobrancaHelper.getMesAnoReferenciaCobrancaFinal() != null
				&& !situacaoEspecialCobrancaHelper
						.getMesAnoReferenciaCobrancaFinal().equals("")) {
			cobrancaSituacaoComando
					.setAnoMesFinalSituacaoCobranca(Util
							.formatarMesAnoComBarraParaAnoMes(situacaoEspecialCobrancaHelper
									.getMesAnoReferenciaCobrancaFinal()));
		}

		

		// Verifica se vem do retirar ou do Inserir

		if (!retirar) {
			if (situacaoEspecialCobrancaHelper.getIdCobrancaSituacaoTipo() != null
					&& !situacaoEspecialCobrancaHelper
							.getIdCobrancaSituacaoTipo().equals("-1")) {
				// Comando de Inserir
				CobrancaSituacaoTipo cobrancaSituacaoTipo = new CobrancaSituacaoTipo();

				cobrancaSituacaoTipo.setId(new Integer(
						situacaoEspecialCobrancaHelper
								.getIdCobrancaSituacaoTipo()));

				cobrancaSituacaoComando
						.setCobrancaSituacaoTipo(cobrancaSituacaoTipo);

				Usuario usuario = new Usuario();

				usuario.setId(new Integer(situacaoEspecialCobrancaHelper
						.getIdUsuarioInforma()));

				cobrancaSituacaoComando.setUsuario(usuario);
			}
			
			if (situacaoEspecialCobrancaHelper.getObservacaoInforma() != null
					&& !situacaoEspecialCobrancaHelper.getObservacaoInforma()
							.equals("")) {
				cobrancaSituacaoComando
						.setObservacao(situacaoEspecialCobrancaHelper
								.getObservacaoInforma());
			}

			if (situacaoEspecialCobrancaHelper.getIdCobrancaSituacaoMotivo() != null
					&& !situacaoEspecialCobrancaHelper
							.getIdCobrancaSituacaoMotivo().equals("-1")) {

				CobrancaSituacaoMotivo cobrancaSituacaoMotivo = new CobrancaSituacaoMotivo();

				cobrancaSituacaoMotivo.setId(new Integer(
						situacaoEspecialCobrancaHelper
								.getIdCobrancaSituacaoMotivo()));

				cobrancaSituacaoComando
						.setCobrancaSituacaoMotivo(cobrancaSituacaoMotivo);

			}

			cobrancaSituacaoComando.setIndicadorComando(ConstantesSistema.SIM);
		} else {

			// Comando de Retirar

			// Seta o Usuario no Comando
			Usuario usuario = new Usuario();

			usuario.setId(new Integer(situacaoEspecialCobrancaHelper
					.getIdUsuarioRetira()));

			cobrancaSituacaoComando.setUsuario(usuario);

			cobrancaSituacaoComando.setIndicadorComando(ConstantesSistema.NAO);
			
			if (situacaoEspecialCobrancaHelper.getObservacaoRetira() != null
					&& !situacaoEspecialCobrancaHelper.getObservacaoRetira()
							.equals("")) {
				cobrancaSituacaoComando
						.setObservacao(situacaoEspecialCobrancaHelper
								.getObservacaoRetira());
			}
		}

		cobrancaSituacaoComando.setUltimaAlteracao(new Date());

		id = (Integer) getControladorUtil().inserir(cobrancaSituacaoComando);

		return id;
	}
	
	
	
	
	/**
	 * retorna id da ResolucaoDiretoria 
	 * 
	 * [UC0214] - Efetuar Parcelamento de Débitos
	 * 
	 * @author Vivianne Sousa
	 * @date 08/11/2006
	 * 
	 * @return
	 * @throws ErroRepositorioException
	 */
	public  Integer  pesquisarResolucaoDiretoriaComPercentualDoacao()throws ControladorException {
		try {
			return repositorioCobranca.pesquisarResolucaoDiretoriaComPercentualDoacao();
			
		} catch (ErroRepositorioException e) {
			e.printStackTrace();
			throw new ControladorException("erro.sistema", e);
		}
	}
	
	/**
     * [UC0911] - Gerar Cartas da Campanha de Solidariedade da Criança para Negociação a Vista
     * 
     * @author: Vivianne Sousa
     * @date: 11/06/2009
     */
    public void gerarCartasCampanhaSolidariedadeCriancaParaNegociacaoAVista(
           Integer idRota , Integer idFuncionalidadeIniciada)
            throws ControladorException{
        
        int idUnidadeIniciada = 0;
       
        try {
	        /*
	         * Registrar o início do processamento da Unidade de
	         * Processamento do Batch
	        */
                    
            idUnidadeIniciada = getControladorBatch().iniciarUnidadeProcessamentoBatch(idFuncionalidadeIniciada,UnidadeProcessamento.ROTA,(idRota));

            //Deleta DocumentoCobranca e DocumentoCobrancaItem 
            //da rota a ser processada com DocumentoTipo = CARTA_SOLIDARIEDADE_DA_CRIANCA
             deletarCobrancaDocumentoECobrancaDocumentoItem(idRota,DocumentoTipo.CARTA_SOLIDARIEDADE_DA_CRIANCA);
        	
        	DocumentoEmissaoForma documentoEmissaoForma = new DocumentoEmissaoForma();
			documentoEmissaoForma.setId(DocumentoEmissaoForma.INDIVIDUAL);
			
			DocumentoTipo documentoTipo = new DocumentoTipo();
			documentoTipo.setId(DocumentoTipo.CARTA_SOLIDARIEDADE_DA_CRIANCA);
			
			ResolucaoDiretoria resolucaoDiretoria = new ResolucaoDiretoria();
			resolucaoDiretoria.setId(12);
			
			int anoMesLimite = 200812;
			Integer idRDParcelasEmAtraso = 8;
			BigDecimal valorLimite = new BigDecimal("5.00");
			
			Rota rota = new Rota();
			rota.setId(idRota);
			Empresa empresa = new Empresa();
			empresa.setId(repositorioMicromedicao.obterIdEmpresaPorRota(rota));
			
			Collection  colecaoImoveis = repositorioCobranca.pesquisarDadosImoveisPorRota(idRota);
			
			if(colecaoImoveis != null && !colecaoImoveis.isEmpty()){
			
				Iterator iteratorImoveis = colecaoImoveis.iterator();
				
				while (iteratorImoveis.hasNext()) {
					Imovel imovel = (Imovel) iteratorImoveis.next();
					
					if(!existeCategoriaPublica(imovel)){
						
						//[SB0001]-Verificar se o imóvel possue débitos que satisfaça
						ObterDebitoImovelOuClienteHelper obterDebitoImovelOuCliente = obterDebitoImovelOuCliente(
									1, // Indicador de débito do imóvel
									imovel.getId().toString(), // Matrícula do imóvel
									null, // Código do cliente
									null, // Tipo de relação cliente imóvel
									"000101", // Referência inicial do débito
									"200906", // Referência final do débito
									Util.converteStringParaDate("01/01/0001"), // Inicio Vencimento
									Util.converteStringParaDate("31/12/9999"), // Final Vencimento
									1, // Indicador de pagamento
									ConstantesSistema.SIM, // conta em revisão
									ConstantesSistema.NAO, // Débito a cobrar
									ConstantesSistema.NAO, // crédito a realizar
									ConstantesSistema.NAO, // Indicador de notas promissórias
									ConstantesSistema.NAO, // guias pagamento
									ConstantesSistema.SIM, // acréscimos impontualidade
									true);

						//4. caso de lista de conta não esteja vazia
						if(obterDebitoImovelOuCliente.getColecaoContasValores() != null 
								&& !obterDebitoImovelOuCliente.getColecaoContasValores().isEmpty() ){
							
							BigDecimal valorTotalContas = BigDecimal.ZERO;
							BigDecimal valorTotalAcrescimoImpontualidadeContas = BigDecimal.ZERO;
							BigDecimal valorAtualizacaoMonetaria = BigDecimal.ZERO;
							BigDecimal valorJurosMora = BigDecimal.ZERO;
							BigDecimal valorMulta = BigDecimal.ZERO;
							
							boolean existeDebitoACobrarParaDesconto = false;
							boolean existeContaParaDesconto = false;
							BigDecimal valorTotalContasParaDesconto = BigDecimal.ZERO;
							BigDecimal valorDesconto = BigDecimal.ZERO;
							BigDecimal valorDocumento = BigDecimal.ZERO;
							BigDecimal valorTotalDebitoParaDesconto = BigDecimal.ZERO;
							BigDecimal valorDebitoTotalAtualizado = BigDecimal.ZERO;
							
							//Contas
							Collection colecaoContasValores = obterDebitoImovelOuCliente.getColecaoContasValores();
							Iterator contaValores = colecaoContasValores.iterator();
							while (contaValores.hasNext()) {
								ContaValoresHelper contaValoresHelper = (ContaValoresHelper) contaValores.next();
								valorTotalContas.setScale(Parcelamento.CASAS_DECIMAIS, Parcelamento.TIPO_ARREDONDAMENTO);
								valorTotalContas = valorTotalContas.add(contaValoresHelper.getValorTotalConta());
								
								if (contaValoresHelper.getValorAtualizacaoMonetaria() != null && !contaValoresHelper.getValorAtualizacaoMonetaria().equals("")) {
									valorAtualizacaoMonetaria.setScale(Parcelamento.CASAS_DECIMAIS, Parcelamento.TIPO_ARREDONDAMENTO);
									valorAtualizacaoMonetaria = valorAtualizacaoMonetaria.add(contaValoresHelper.getValorAtualizacaoMonetaria().setScale(Parcelamento.CASAS_DECIMAIS,Parcelamento.TIPO_ARREDONDAMENTO));
								}
								if (contaValoresHelper.getValorJurosMora() != null	&& !contaValoresHelper.getValorJurosMora().equals("")) {
									valorJurosMora.setScale(Parcelamento.CASAS_DECIMAIS, Parcelamento.TIPO_ARREDONDAMENTO);
									valorJurosMora = valorJurosMora.add(contaValoresHelper.getValorJurosMora().setScale(Parcelamento.CASAS_DECIMAIS,Parcelamento.TIPO_ARREDONDAMENTO));
								}
								if (contaValoresHelper.getValorMulta() != null && !contaValoresHelper.getValorMulta().equals("")) {
									valorMulta.setScale(Parcelamento.CASAS_DECIMAIS,Parcelamento.TIPO_ARREDONDAMENTO);
									valorMulta = valorMulta.add(contaValoresHelper.getValorMulta().setScale(Parcelamento.CASAS_DECIMAIS,Parcelamento.TIPO_ARREDONDAMENTO));
								}
								
								//7. verificar se o imóvel possui conta com referencia até o limite
								if(contaValoresHelper.getConta().getReferencia() <= anoMesLimite){
									existeContaParaDesconto = true;
									//guarda o valor total das contas com referencia menor ou igual ao limite
									valorTotalContasParaDesconto = valorTotalContasParaDesconto.add(contaValoresHelper.getValorTotalConta());
									valorTotalContasParaDesconto.setScale(Parcelamento.CASAS_DECIMAIS, Parcelamento.TIPO_ARREDONDAMENTO);
									
									//Subtrai do valor das contas os debitosCobrados com FinanciamentoTipo 
									//igual a PARCELAMENTO_AGUA,PARCELAMENTO_ESGOTO,PARCELAMENTO_SERVICO,JUROS_PARCELAMENTO
									BigDecimal valorDebitoCobradoParcelamentoConta = pesquisarValorDebitoCobradoParcelamentoConta(contaValoresHelper.getConta().getId());
									valorTotalContasParaDesconto = valorTotalContasParaDesconto.subtract(valorDebitoCobradoParcelamentoConta);
									
								}

								// Para cálculo do Acrescimo de Impontualidade
								valorTotalAcrescimoImpontualidadeContas.setScale(Parcelamento.CASAS_DECIMAIS,Parcelamento.TIPO_ARREDONDAMENTO);
								valorTotalAcrescimoImpontualidadeContas = valorTotalAcrescimoImpontualidadeContas.add(contaValoresHelper.getValorTotalContaValoresParcelamento());
							}
							
							//Debito A Cobrar
							//8. verificar se possui débito a cobrar com debitoTipo igual a 
							//PARCELAMENTO DE CONTAS,JUROS SOBRE PARCELAMENTO,PARCEL.ACRESC.IMPONT.
							Object[] debitoACobrarParcelamentoImovel = this.pesquisaSomatorioValorDebitoACobrarParcelamentoImovel(imovel.getId(), anoMesLimite);
							//retorna o valor do somatorio dos valores dos debitos a cobrar e a colecao de debitos
							//correspondente a parcelamento de contas com referencia menor ou igual ao AnoMesLimiteMaximo 
							BigDecimal valorDebitoACobrarParcelamento = BigDecimal.ZERO;
							Collection colecaoDebitoACobrarParcelamento = null;
							if(debitoACobrarParcelamentoImovel != null && !debitoACobrarParcelamentoImovel[0].equals(BigDecimal.ZERO)){
								existeDebitoACobrarParaDesconto = true;
								valorDebitoACobrarParcelamento = (BigDecimal) debitoACobrarParcelamentoImovel[0];
								colecaoDebitoACobrarParcelamento = (Collection)debitoACobrarParcelamentoImovel[1];
							}
							
							//6. verificar se o parcelamento mais recente do imóvel seja da "RD 001/2007" e esteja com situação normal
							
							//obtem o parcelamento mais atual do imovel com situação do parcelamento Normal
							Parcelamento parcelamento = obterParcelamentoMaisAtualDoImovel(imovel.getId());
							
							if (parcelamento == null || parcelamento.getResolucaoDiretoria() == null 
									|| !parcelamento.getResolucaoDiretoria().getId().equals(idRDParcelasEmAtraso)){
								
								//7. verificar se existe conta com referência até 200812
								//8. verificar se existe débito a cobrar com debito tipo igual a 
								//parcel. de contas, juros sobre parcelamento, parcel. acresc. impont. 	
								if(existeContaParaDesconto || existeDebitoACobrarParaDesconto){
									
									//Soma do valor das contas e do valor dos debitos a cobrar
									valorDebitoTotalAtualizado = valorTotalContas.add(valorDebitoACobrarParcelamento).add(valorTotalAcrescimoImpontualidadeContas);
									
									//Soma do valor das contas com referencia monor ou igual ao limite e do valor dos debitos a cobrar
									valorTotalDebitoParaDesconto = valorTotalContasParaDesconto.add(valorDebitoACobrarParcelamento);
									
									//calculando o desconto
									BigDecimal percentualDesconto = new BigDecimal("0.40");
									valorDesconto = valorTotalDebitoParaDesconto.multiply(percentualDesconto);
									valorDesconto = valorDesconto.add(valorTotalAcrescimoImpontualidadeContas);
								
									//valor do documento
									valorDocumento = valorDebitoTotalAtualizado.subtract(valorDesconto);
									
									if(valorDocumento.compareTo(valorLimite) >= 0){
										//[SB0002]Gerar Dados das Cartas
										gerarDocumentoCobranca(
												imovel,
												ConstantesSistema.NAO,
												colecaoContasValores,
												null,
												colecaoDebitoACobrarParcelamento,
												valorTotalAcrescimoImpontualidadeContas, 
												valorDesconto,
												null,
												documentoEmissaoForma,
												documentoTipo,
												null,
												null,
												empresa, 
												null,
												null,
												valorDocumento,
												new Date(),
												null,
												null,
												resolucaoDiretoria,
												null,
												null,
												null,
												// usuario
												null,
												new Short("1"));
									}
									
								}
								
							}
							
						}
						
					}
					
				}
									
			}
								
            
            getControladorBatch().encerrarUnidadeProcessamentoBatch(null,idUnidadeIniciada, false);
        
        } catch (Exception ex) {
            ex.printStackTrace();
            getControladorBatch().encerrarUnidadeProcessamentoBatch(ex,idUnidadeIniciada, true);
            throw new EJBException(ex);
        }       
        
    }
    
	
	/**
	 * [UC0911] - Gerar Cartas da Campanha de Solidariedade da Criança para Negociação a Vista
	 * 
	 * @author Vivianne Sousa
	 * @date 15/06/2009
	 */
	public boolean existeCategoriaPublica(Imovel imovel)throws ControladorException {
		
		boolean existeCategoriaPublica = false;
		Collection colecaoImovelSubCategoria = getControladorImovel().obterColecaoImovelSubcategorias(imovel, 1);

		Subcategoria subcategoria = null;
		Categoria categoria = null;

		if (colecaoImovelSubCategoria != null && !colecaoImovelSubCategoria.isEmpty()) {
			Iterator iteretorImovelSubCategoria = colecaoImovelSubCategoria.iterator();

			while (iteretorImovelSubCategoria.hasNext()) {
				ImovelSubcategoria imovelSubCategoria = (ImovelSubcategoria) iteretorImovelSubCategoria.next();
				subcategoria = imovelSubCategoria.getComp_id().getSubcategoria();
				categoria = subcategoria.getCategoria();
				if(categoria.getId().equals(Categoria.PUBLICO)){
					existeCategoriaPublica = true;
				}
				
			}
		}
		
		return existeCategoriaPublica;
	}
    
	/**
	 * retorna coleção de ids de Rota de um Grupo de faturamento 
	 * 
	 * [UC0911] - Gerar Cartas da Campanha de Solidariedade da Criança para Negociação a Vista
	 * 
	 * @author Vivianne Sousa
	 * @date 11/06/2009
	 * 
	 * @return
	 * @throws ErroRepositorioException
	 */
	public Collection pesquisarRotasPorGrupoFaturamento(
			Integer idGrupoFaturamento) throws ControladorException {
		
		try {
			return repositorioCobranca.pesquisarRotasPorGrupoFaturamento(idGrupoFaturamento);
		} catch (ErroRepositorioException e) {
			e.printStackTrace();
			throw new ControladorException("erro.sistema", e);
		}
		
	}
	
	
	/**
	 * [UC0911] - Gerar Cartas da Campanha de Solidariedade da Criança para Negociação a Vista
	 * 
	 * @author Vivianne Sousa
	 * @date 17/06/2009
	 */
	public void deletarCobrancaDocumentoECobrancaDocumentoItem(
			Integer idRota,Integer documentoTipo)throws ControladorException {
		
		try {
			repositorioCobranca.deletarCobrancaDocumentoECobrancaDocumentoItem(idRota,documentoTipo);
		} catch (ErroRepositorioException e) {
			e.printStackTrace();
			throw new ControladorException("erro.sistema", e);
		}
		
	}
	
	
	/**
     * [UC0911] - Gerar Cartas da Campanha de Solidariedade da Criança para Negociação a Vista
     * 
     * @author: Vivianne Sousa
     * @date: 11/06/2009
     */
	public void emitirCartasCampanhaSolidariedadeCriancaParaNegociacaoAVista(Integer idGrupoFaturamento, 
			Integer idFuncionalidadeIniciada)throws ControladorException{
        
        int idUnidadeIniciada = 0;
           
        // Criação do Arquivo
		// ========================================================================
		Date dataAtual = new Date();
		String nomeZip = null;
		nomeZip = "CARTA_CAMPANHA_CRIANCA_GRUPO_" + idGrupoFaturamento + "_"
		+ Util.formatarData(dataAtual) + Util.formatarHoraSemDataSemDoisPontos(dataAtual);
		nomeZip = nomeZip.replace("/", "_");
		File compactado = new File(nomeZip + ".zip");
		ZipOutputStream zos = null;
		File leitura = new File(nomeZip + ".txt");
		BufferedWriter out = null;
		// ========================================================================
       
        try {
	        /*
	         * Registrar o início do processamento da Unidade de
	         * Processamento do Batch
	        */
                    
//            idUnidadeIniciada = getControladorBatch().iniciarUnidadeProcessamentoBatch(idFuncionalidadeIniciada,UnidadeProcessamento.ROTA,(idRota));

            
//    		boolean flagFimPesquisa = false;
//    		final int quantidadeCobrancaDocumento = 1000;
//    		int quantidadeCobrancaDocumentoInicio = 0;
        	
        	

    		System.out.println("***************************************");
    		System.out.println("EMITIR CARTAS CAMPANHA SOLIDARIEDADE DA CRIANCA");
    		System.out.println("***************************************");
    		
//    		Integer idGrupoFaturamento = 25;
    		Integer anoMesFaturamento = (this.getControladorUtil().pesquisarParametrosDoSistema()).getAnoMesFaturamento();
    		Collection rotas = pesquisarRotasPorGrupoFaturamento(idGrupoFaturamento);
    		Iterator iterRotas = rotas.iterator();
    		
    		StringBuilder cobrancaDocumentoTxt = null;
    		int sequencialImpressao = 0;
    		
    		zos = new ZipOutputStream(new FileOutputStream(compactado));
        	out = new BufferedWriter(new OutputStreamWriter(new FileOutputStream(leitura.getAbsolutePath())));
    		
    		while (iterRotas.hasNext()) {
    			Integer idRota = (Integer) iterRotas.next();
    			
    			idUnidadeIniciada = getControladorBatch().iniciarUnidadeProcessamentoBatch(idFuncionalidadeIniciada,UnidadeProcessamento.ROTA,(idRota));
    			
    			Collection colecaoCobrancaDocumento = null;
    			Date dataVencimentoRota = pesquisarDataVencimentoRota(idRota,anoMesFaturamento,idGrupoFaturamento);
    			
//    			while (!flagFimPesquisa) {

    				colecaoCobrancaDocumento = pesquisarCobrancaDocumentoParaEmitir(idRota, DocumentoTipo.CARTA_SOLIDARIEDADE_DA_CRIANCA);
    				
    				if (colecaoCobrancaDocumento != null && !colecaoCobrancaDocumento.isEmpty()) {

    					System.out.println("***************************************");
    					System.out.println("ROTA : " + idRota + " QUANTIDADE COBRANÇA: " + colecaoCobrancaDocumento.size());
    					System.out.println("***************************************");

//    					if (colecaoCobrancaDocumento.size() < quantidadeCobrancaDocumento) {
//    						flagFimPesquisa = true;
//    					} else {
//    						quantidadeCobrancaDocumentoInicio = quantidadeCobrancaDocumentoInicio + 1000;
//    					}
    					
    					Iterator iteratorCobrancaDocumento = colecaoCobrancaDocumento.iterator();
    					while (iteratorCobrancaDocumento.hasNext()) {

    						CobrancaDocumento cobrancaDocumento = null;

    						cobrancaDocumento = (CobrancaDocumento) iteratorCobrancaDocumento.next();

    						String nomeClienteUsuario = null;
    						Collection colecaoCobrancaDocumentoItemConta = null;
    						Integer idClienteResponsavel = null;
    						/*
    						 * Estes objetos auxiliarão na formatação da inscrição que
    						 * será composta por informações do documento de cobrança e
    						 * do imóvel a ele associado
    						 */

    						/*
    						 * Objeto que será utilizado para armazenar as informações
    						 * do documento de cobrança de acordo com o layout definido
    						 * no caso de uso
    						 */


    						if (cobrancaDocumento != null) {
    							sequencialImpressao++;

    							try {

    								nomeClienteUsuario = this.repositorioClienteImovel.pesquisarNomeClientePorImovel(cobrancaDocumento.getImovel().getId());
    								idClienteResponsavel = this.repositorioClienteImovel.retornaIdClienteResponsavel(cobrancaDocumento.getImovel().getId());

    								colecaoCobrancaDocumentoItemConta = this.repositorioCobranca.selecionarCobrancaDocumentoItemReferenteConta(cobrancaDocumento);

    							} catch (ErroRepositorioException ex) {
    								ex.printStackTrace();
    								throw new ControladorException("erro.sistema", ex);
    							}
    							
    							if (colecaoCobrancaDocumentoItemConta != null && !colecaoCobrancaDocumentoItemConta.isEmpty()) {
    								
    								cobrancaDocumentoTxt = new StringBuilder();
    								
    								//Localidade
    								FiltroLocalidade filtroLocalidade = new FiltroLocalidade();
    								
    								filtroLocalidade.adicionarParametro(
    										new ParametroSimples(FiltroLocalidade.ID, 
    												cobrancaDocumento.getLocalidade().getId()));
    								
    								Collection<Localidade> colecaoLocalidades = 
    									this.getControladorUtil().pesquisar(filtroLocalidade, Localidade.class.getName());
    								
    								Localidade localidade = (Localidade) Util.retonarObjetoDeColecao(colecaoLocalidades);
    								
    								
    								String idGrupo = null;
    								// id do grupo
    								idGrupo = "" + cobrancaDocumento.getQuadra().getRota().getCobrancaGrupo().getId();
    								
    								//Grupo-XX Entrega-XXXXXXXXXX
    								String textoGrupoEntrega = "GRUPO-" + idGrupo + " ENTREGA-";
    								if (cobrancaDocumento.getEmpresa() != null) {
    									textoGrupoEntrega += cobrancaDocumento.getEmpresa().getDescricao();
    								}
    								cobrancaDocumentoTxt.append(Util.completaString(textoGrupoEntrega, 27));
    								
    								// Inscrição
    								String idLocalidade = Util.adicionarZerosEsquedaNumero(3, "" + cobrancaDocumento.getLocalidade().getId());
    								String codigoSetorComercial = Util.adicionarZerosEsquedaNumero(3, "" + cobrancaDocumento.getCodigoSetorComercial());
    								String numeroQuadra = Util.adicionarZerosEsquedaNumero(3, "" + cobrancaDocumento.getNumeroQuadra());
    								String lote = Util.adicionarZerosEsquedaNumero(4,""+ cobrancaDocumento.getImovel().getLote());
    								String subLote = Util.adicionarZerosEsquedaNumero(3, ""	+ cobrancaDocumento.getImovel().getSubLote());

    								cobrancaDocumentoTxt.append(Util.completaString(idLocalidade + "."	+ codigoSetorComercial + "." 
    										+ numeroQuadra + "." + lote + "." + subLote, 20));

    								// Nome da Localidade
    								cobrancaDocumentoTxt.append(Util.completaString("" + localidade.getDescricao(), 25));

    								// nome cliente
    								cobrancaDocumentoTxt.append(Util.completaString(nomeClienteUsuario, 50));

    								String nomeBairro = "";
    								String nomeMunicipio = "";
    								String siglaUnidadeFederecao = "";
    								String cepFormatado = "";

    								String[] parmsEnderecoImovel = getControladorEndereco().pesquisarEnderecoFormatadoDividido(cobrancaDocumento.getImovel().getId());
    								if (parmsEnderecoImovel != null) {
    									// nome do bairro
    									nomeBairro = "" + parmsEnderecoImovel[3];
    									// nome do municipio
    									nomeMunicipio = "" + parmsEnderecoImovel[1];
    									// sigla da unidade federação
    									siglaUnidadeFederecao = parmsEnderecoImovel[2];
    									cepFormatado = parmsEnderecoImovel[4];
    								}

    								// endereço do cliente com opção de recebimento via correio
    								if (idClienteResponsavel != null) {
    									String[] parmsEndereco = getControladorEndereco().pesquisarEnderecoClienteAbreviadoDividido(idClienteResponsavel);
    									// endereço sem municipio e unidade federação
    									cobrancaDocumentoTxt.append(Util.completaString(parmsEndereco[0], 50));
    									// nome do bairro
    									nomeBairro = "" + parmsEndereco[3];
    									// nome do municipio
    									nomeMunicipio = "" + parmsEndereco[1];
    									// sigla da unidade federação
    									siglaUnidadeFederecao = parmsEndereco[2];
    									cepFormatado = parmsEndereco[4];

    								} else {
    									if (parmsEnderecoImovel != null){
    										// endereço sem municipio e unidade federação
    										cobrancaDocumentoTxt.append(Util.completaString(parmsEnderecoImovel[0],50));
    									} else {
    										cobrancaDocumentoTxt.append(Util.completaString("", 50));									
    									}
    								}

    								// nome Bairro
    								cobrancaDocumentoTxt.append(Util.completaString(nomeBairro, 25));
    								// nome municipio
    								cobrancaDocumentoTxt.append(Util.completaString(nomeMunicipio, 24));
    								// sigla unidade federacao
    								cobrancaDocumentoTxt.append(Util.completaString(siglaUnidadeFederecao, 2));
    								// CEP
    								// variavel cepFormatado foi preenchido de acordo com a existencia de
    								// cliente responsavel
    								String cepStr = Util.completaString(cepFormatado, 8);
    								String cepLabeled = "CEP. " + cepStr.substring(0,5) + "-" + cepStr.substring(5,8); 
    								cobrancaDocumentoTxt.append(Util.completaString(cepLabeled, 14));
    								
    								// Sequencial de impressao [13]
    								String sequencialImpressaoStr = Util.adicionarZerosEsquedaNumero(6,sequencialImpressao + "");
    								cobrancaDocumentoTxt.append("SEQ.  " + sequencialImpressaoStr.substring(0,3) + "." + sequencialImpressaoStr.substring(3,6));
    								
    								// Matrícula do imóvel
    								String matriculaStr = Util.adicionarZerosEsquedaNumero(8, "" + cobrancaDocumento.getImovel().getId()); 
    								cobrancaDocumentoTxt.append(matriculaStr.substring(0,7) + "." + matriculaStr.substring(7,8));

    								// Endereço do imóvel sem municipio e unidade federação
    								cobrancaDocumentoTxt.append(Util.completaString(parmsEnderecoImovel[0],50));

    								// sequencial do documento de cobranca
    								String sequencialStr = Util.adicionarZerosEsquedaNumero(9, "" + cobrancaDocumento.getNumeroSequenciaDocumento()); 
    								cobrancaDocumentoTxt.append(sequencialStr.substring(0,5) + "." + sequencialStr.substring(5,9));

    								// Data de vencimento
    								String dataVencimento = Util.formatarData(dataVencimentoRota);
    								cobrancaDocumentoTxt.append(Util.completaString(dataVencimento, 10));
    								
    								// idgrupo
    								cobrancaDocumentoTxt.append(Util.completaString(idGrupo, 2));
    								cobrancaDocumentoTxt.append("-");
    								// código da firma
    								if (cobrancaDocumento.getEmpresa() != null) {
    									cobrancaDocumentoTxt.append(Util.adicionarZerosEsquedaNumero(2,cobrancaDocumento.getEmpresa().getId().toString()));
    								}
    										
    								String representacaoNumericaCodBarra = "";

    								// Obtém a representação numérica do código de barra
    								representacaoNumericaCodBarra = this.getControladorArrecadacao().obterRepresentacaoNumericaCodigoBarra(
    												5,
    												cobrancaDocumento.getValorDocumento(),
    												cobrancaDocumento.getLocalidade().getId(),
    												cobrancaDocumento.getImovel().getId(),
    												null,
    												null,
    												null,
    												null,
    												String.valueOf(cobrancaDocumento.getNumeroSequenciaDocumento()),
    												cobrancaDocumento.getDocumentoTipo().getId(),
    												null, null, null);

    								// Formata a representação númerica do código de barras
    								String representacaoNumericaCodBarraFormatada = representacaoNumericaCodBarra.substring(0, 11)
    										+ " " + representacaoNumericaCodBarra.substring(11, 12)
    										+ " " + representacaoNumericaCodBarra.substring(12, 23)
    										+ " " + representacaoNumericaCodBarra.substring(23, 24)
    										+ " " + representacaoNumericaCodBarra.substring(24, 35)
    										+ " " + representacaoNumericaCodBarra.substring(35, 36)
    										+ " " + representacaoNumericaCodBarra.substring(36, 47)
    										+ " " + representacaoNumericaCodBarra.substring(47, 48);

    								cobrancaDocumentoTxt.append(representacaoNumericaCodBarraFormatada);

    								// Cria o objeto para gerar o código de barras no padrão intercalado 2 de 5
    								Interleaved2of5 codigoBarraIntercalado2de5 = new Interleaved2of5();
    	 
    								// Recupera a representação númerica do código de barras sem os dígitos verificadores 
    								String representacaoCodigoBarrasSemDigitoVerificador = 
    									    representacaoNumericaCodBarra.substring(0, 11)
    										+ representacaoNumericaCodBarra.substring(12, 23)
    										+ representacaoNumericaCodBarra.substring(24, 35)
    										+ representacaoNumericaCodBarra.substring(36, 47);

    								cobrancaDocumentoTxt.append(codigoBarraIntercalado2de5.encodeValue(representacaoCodigoBarrasSemDigitoVerificador));
    								
    								int quantidadesContas = 0;
    								quantidadesContas = 24;

    								// retorna o indicador de estouro e formata o cobrançaDocumentoTxt com os dados
    								formatarCobrancaDocumentoItem(cobrancaDocumentoTxt,colecaoCobrancaDocumentoItemConta,quantidadesContas,cobrancaDocumento);
    								
    								cobrancaDocumentoTxt.append(System.getProperty("line.separator"));
    								

    								out.write(cobrancaDocumentoTxt.toString());
    								out.flush();
    								
    								cobrancaDocumentoTxt = null;
    								
    							}

    							colecaoCobrancaDocumentoItemConta = null;
    						}

    						// }// fim do laço que verifica as 2 contas

    					}// fim laço while do iterator do
    					// objeto helper countOrdem++;
    					// mapCobrancaoDocumentoDivididas = null;
    					// // }
    				} 
//    				else {
//    					flagFimPesquisa = true;
//    				}
    				// } else {
    				// flagFimPesquisa = true;
    				// }
    				// colecaoCobrancaDocumento = null;
//    			}
    			
    				getControladorBatch().encerrarUnidadeProcessamentoBatch(null,idUnidadeIniciada, false);	
    		}	

    		/*
    		Date dataAtual = new Date();

    		String nomeZip = null;

    		nomeZip = "CARTA_CAMPANHA_CRIANCA_GRUPO_" + idGrupoFaturamento + "_"
    				+ Util.formatarData(dataAtual) + Util.formatarHoraSemDataSemDoisPontos(dataAtual);
    		nomeZip = nomeZip.replace("/", "_");

    		// pegar o arquivo, zipar pasta e arquivo e escrever no stream
    		try {

    			System.out.println("***************************************");
    			System.out.println("INICO DA CRIACAO DO ARQUIVO");
    			System.out.println("***************************************");

    			if (cobrancaDocumentoTxt != null && cobrancaDocumentoTxt.length() != 0) {

    				// criar o arquivo zip
    				File compactado = new File(nomeZip + ".zip"); // nomeZip
    				ZipOutputStream zos = new ZipOutputStream(new FileOutputStream(compactado));

    				File leitura = new File(nomeZip + ".txt");
    				BufferedWriter out = new BufferedWriter(new OutputStreamWriter(new FileOutputStream(leitura.getAbsolutePath())));
    				out.write(cobrancaDocumentoTxt.toString());
    				out.close();
    				ZipUtil.adicionarArquivo(zos, leitura);

    				// close the stream
    				zos.close();
    				leitura.delete();
    			}
    			System.out.println("***************************************");
    			System.out.println("FIM DA CRIACAO DO ARQUIVO");
    			System.out.println("***************************************");

    		} catch (IOException e) {
    			e.printStackTrace();
    			throw new ControladorException("erro.sistema", e);
    		} catch (Exception e) {
    			e.printStackTrace();
    			throw new ControladorException("erro.sistema", e);
    		}
    		*/
            
//            getControladorBatch().encerrarUnidadeProcessamentoBatch(null,idUnidadeIniciada, false);
        System.out.println("FIM");
        } catch (Exception ex) {
            ex.printStackTrace();
            getControladorBatch().encerrarUnidadeProcessamentoBatch(ex,idUnidadeIniciada, true);
            throw new EJBException(ex);
        } finally {
			try{
				out.close();
				ZipUtil.adicionarArquivo(zos, leitura);
		
				// close the stream
				zos.close();
				leitura.delete();
			} catch (IOException e) {
				getControladorBatch().encerrarUnidadeProcessamentoBatch(e,idUnidadeIniciada, true);
	            throw new EJBException(e);
			}
        }
        
        
    }
    
	/**
	 * Formata a string builder de cobrança documento de acordo com a quantidade
	 * de itens.Caso a quantidade de itens seja maior que 24 então as contas com
	 * o ano mes referencia mais antigas serão somadas (os valores do item e dos
	 * acrescimos) e formatadas na stringbuilder.
	 * 
	 * [UC0910] Emitir Cartas da Campanha de Solidariedade da criança para Negociação a Vista
	 * 
	 * @author Vivianne Sousa
	 * @date 17/06/2009
	 * 
	 * @return
	 * @throws ControladorException
	 */
	protected int formatarCobrancaDocumentoItem(StringBuilder cobrancaDocumentoTxt,
			Collection colecaoCobrancaDocumentoItemConta, int quantidadeContas,CobrancaDocumento cobrancaDocumento) throws ControladorException {
		int indicadorEstouro = 0;
		int complementoEspecosBranco = 0;
		BigDecimal somaValorItem = new BigDecimal(0);
		BigDecimal somaValorAcrescimos = new BigDecimal(0);
		BigDecimal somaValorTotal = new BigDecimal(0);

		complementoEspecosBranco = quantidadeContas * 63;
		
		int countImpressao = colecaoCobrancaDocumentoItemConta.size() - (quantidadeContas - 1);

		if (colecaoCobrancaDocumentoItemConta.size() > quantidadeContas) {
			indicadorEstouro = 1;

			CalcularValorDataVencimentoAnteriorHelper calcularValorDataVencimentoAnteriorHelper = this
					.calcularValorDataVencimentoAnterior(colecaoCobrancaDocumentoItemConta, quantidadeContas);
			
			// Ano mes de referencia da conta anterior
			cobrancaDocumentoTxt.append(Util.completaStringComEspacoAEsquerda("ATÉ    ", 11));
			complementoEspecosBranco = complementoEspecosBranco - 11;
			// data de vencimento anterior
			cobrancaDocumentoTxt.append(Util.completaString(Util.formatarData(calcularValorDataVencimentoAnteriorHelper.getDataVencimentoAnterior()),10));
			complementoEspecosBranco = complementoEspecosBranco - 10;

			String valorItemAnterior = Util.formataBigDecimal(calcularValorDataVencimentoAnteriorHelper.getValorAnterior(), 2, true);

			// Valor do item anterior
			cobrancaDocumentoTxt.append(Util.completaStringComEspacoAEsquerda(valorItemAnterior,14));
			complementoEspecosBranco = complementoEspecosBranco - 14;
			somaValorItem = somaValorItem.add(calcularValorDataVencimentoAnteriorHelper.getValorAnterior());

			
			String valorAcrescimosAnterior = Util.formataBigDecimal(calcularValorDataVencimentoAnteriorHelper.getValorAcrescimosAnterior(), 2, true);

			// Valor dos encargos anterior
			cobrancaDocumentoTxt.append(Util.completaStringComEspacoAEsquerda(valorAcrescimosAnterior, 14));
			complementoEspecosBranco = complementoEspecosBranco - 14;
			
			somaValorAcrescimos = somaValorAcrescimos.add(calcularValorDataVencimentoAnteriorHelper.getValorAcrescimosAnterior());
			
			BigDecimal valorTotal = calcularValorDataVencimentoAnteriorHelper.getValorAcrescimosAnterior()
				.add(calcularValorDataVencimentoAnteriorHelper.getValorAnterior());
			String valorTotalConta = Util.formataBigDecimal(valorTotal, 2, true);

			// Valor dos encargos anterior
			cobrancaDocumentoTxt.append(Util.completaStringComEspacoAEsquerda(valorTotalConta, 14));
			complementoEspecosBranco = complementoEspecosBranco - 14;
			
			somaValorTotal = somaValorTotal.add(valorTotal);

		}

		if (countImpressao <= 1) {
			Iterator iteratorColecaoCobrancaDocumentoItem = colecaoCobrancaDocumentoItemConta.iterator();

			CobrancaDocumentoItem cobrancaDocumentoItem = null;

			while (iteratorColecaoCobrancaDocumentoItem.hasNext()) {
				cobrancaDocumentoItem = (CobrancaDocumentoItem) iteratorColecaoCobrancaDocumentoItem.next();

				// Ano mes de referencia da conta
				cobrancaDocumentoTxt.append(Util.completaStringComEspacoAEsquerda(
						Util.formatarAnoMesParaMesAno(cobrancaDocumentoItem.getContaGeral().getConta().getReferencia()), 11));
				complementoEspecosBranco = complementoEspecosBranco - 11;
				// data de vencimento
				cobrancaDocumentoTxt.append(Util.completaString(Util
						.formatarData(cobrancaDocumentoItem.getContaGeral().getConta().getDataVencimentoConta()), 10));
				complementoEspecosBranco = complementoEspecosBranco - 10;

				String valorItem = Util.formataBigDecimal(cobrancaDocumentoItem.getValorItemCobrado(),2, true);

				// Valor do item
				cobrancaDocumentoTxt.append(Util.completaStringComEspacoAEsquerda(valorItem, 14));
				complementoEspecosBranco = complementoEspecosBranco - 14;
				
				somaValorItem = somaValorItem.add(cobrancaDocumentoItem.getValorItemCobrado());
				
				String valorAcrescimos = Util.formataBigDecimal(cobrancaDocumentoItem.getValorAcrescimos(),	2, true);

				// Valor dos encargos
				cobrancaDocumentoTxt.append(Util.completaStringComEspacoAEsquerda(valorAcrescimos, 14));
				complementoEspecosBranco = complementoEspecosBranco - 14;
				
				somaValorAcrescimos = somaValorAcrescimos.add(cobrancaDocumentoItem.getValorAcrescimos());
				
				String valorTotalConta = Util.formataBigDecimal(cobrancaDocumentoItem.getValorAcrescimos().add(
								cobrancaDocumentoItem.getValorItemCobrado()), 2, true);
				// Valor total da conta
				cobrancaDocumentoTxt.append(Util.completaStringComEspacoAEsquerda(valorTotalConta, 14));
				complementoEspecosBranco = complementoEspecosBranco - 14;	
				
				somaValorTotal = somaValorTotal.add(cobrancaDocumentoItem.getValorAcrescimos().add(cobrancaDocumentoItem.getValorItemCobrado()));

			}

		} else {
			CobrancaDocumentoItem cobrancaDocumentoItem = null;
			while (countImpressao < colecaoCobrancaDocumentoItemConta.size()) {
				cobrancaDocumentoItem = (CobrancaDocumentoItem) ((List) colecaoCobrancaDocumentoItemConta).get(countImpressao);

				// Ano mes de referencia da conta
				cobrancaDocumentoTxt.append(Util.completaStringComEspacoAEsquerda(Util.formatarAnoMesParaMesAno(
						cobrancaDocumentoItem.getContaGeral().getConta().getReferencia()), 11));
				
				complementoEspecosBranco = complementoEspecosBranco - 11;
				// data de vencimento
				cobrancaDocumentoTxt.append(Util.completaString(Util
						.formatarData(cobrancaDocumentoItem.getContaGeral().getConta().getDataVencimentoConta()), 10));
				complementoEspecosBranco = complementoEspecosBranco - 10;

				String valorItem = Util.formataBigDecimal(cobrancaDocumentoItem.getValorItemCobrado(), 2 ,true);

				// Valor do item
				cobrancaDocumentoTxt.append(Util.completaStringComEspacoAEsquerda(valorItem, 14));
				complementoEspecosBranco = complementoEspecosBranco - 14;
				
				somaValorItem = somaValorItem.add(cobrancaDocumentoItem.getValorItemCobrado());
				
				String valorAcrescimos = Util.formataBigDecimal(cobrancaDocumentoItem.getValorAcrescimos(), 2, true);

				// Valor dos encargos
				cobrancaDocumentoTxt.append(Util.completaStringComEspacoAEsquerda(valorAcrescimos, 14));
				complementoEspecosBranco = complementoEspecosBranco - 14;
				
				somaValorAcrescimos = somaValorAcrescimos.add(cobrancaDocumentoItem.getValorAcrescimos());
				
				String valorTotalConta = Util.formataBigDecimal(cobrancaDocumentoItem.getValorAcrescimos().add(
								cobrancaDocumentoItem.getValorItemCobrado()), 2, true);
				// Valor total da conta
				cobrancaDocumentoTxt.append(Util.completaStringComEspacoAEsquerda(valorTotalConta, 14));
				complementoEspecosBranco = complementoEspecosBranco - 14;	
				
				somaValorTotal = somaValorTotal.add(cobrancaDocumentoItem.getValorAcrescimos().add(
						cobrancaDocumentoItem.getValorItemCobrado()));

				countImpressao++;

			}
		}
		
		cobrancaDocumentoTxt.append(Util.completaStringComEspacoAEsquerda("",complementoEspecosBranco));
	
		//2.15.3 soma dos valores item 
		String somaValorItemStr = Util.formataBigDecimal(somaValorItem, 2, true);
		cobrancaDocumentoTxt.append(Util.completaStringComEspacoAEsquerda(somaValorItemStr, 14));

//		//2.15.4 valor historico asteriscos
//		cobrancaDocumentoTxt.append(Util.completaStringComAsteriscos(somaValorItemStr, 14));
		
		// 2.15.5 soma dos valores acrescimos (valor encargos)
		String somaValorAcrescimosStr = Util.formataBigDecimal(somaValorAcrescimos, 2, true);
		cobrancaDocumentoTxt.append(Util.completaStringComEspacoAEsquerda(somaValorAcrescimosStr, 14));
		
		// 2.15.6 soma do valor total da conta + soma do valor dos encargos da conta
		String somaValorTotalStr = Util.formataBigDecimal(somaValorTotal, 2, true);
		cobrancaDocumentoTxt.append(Util.completaStringComEspacoAEsquerda(somaValorTotalStr, 14));
			
//		//2.15.7.	Somatório dos Débitos a Cobrar (CDIT_VLITEMCOBRADO da tabela COBRANCA_DOCUMENTO_ITEM   cujo DBAC_ID esteja preenchido);
//		BigDecimal somaValorItemDebito = selecionarValorTotalCobrancaDocumentoItemReferenteDebito(cobrancaDocumento);
//		String somaValorItemDebitoStr = Util.formataBigDecimal(somaValorItemDebito, 2, true);
//		cobrancaDocumentoTxt.append(Util.completaStringComEspacoAEsquerda(somaValorItemDebitoStr, 14));
//		
//		//2.15.8 Somatório do Valor Total da Conta + Valor dos Débitos a Cobrar;
//		BigDecimal somaValorTotalContaAcrescimosDebitos =  somaValorTotal.add(somaValorItemDebito);
//		String somaValorTotalContaAcrescimosDebitosStr =  Util.formataBigDecimal(somaValorTotalContaAcrescimosDebitos, 2, true);
//		cobrancaDocumentoTxt.append(Util.completaStringComEspacoAEsquerda(somaValorTotalContaAcrescimosDebitosStr, 14));
//		
//		//2.15.9 Valor dos Descontos (CBDO_VLDESCONTO da tabela DOCUMENTO_COBRANCA);
//		BigDecimal valorDescontoTotal = BigDecimal.ZERO;
//		if(cobrancaDocumento.getValorDesconto() != null){
//			valorDescontoTotal = cobrancaDocumento.getValorDesconto();
//			BigDecimal valorDesconto = valorDescontoTotal.subtract(somaValorAcrescimos);
//			String valorDescontoStr = Util.formataBigDecimal(valorDesconto, 2, true);
//			cobrancaDocumentoTxt.append(Util.completaStringComEspacoAEsquerda(valorDescontoStr, 14));
//		}else{
//			cobrancaDocumentoTxt.append(Util.completaStringComEspacoAEsquerda("", 14));
//		}
//		
//		System.out.println("somaValorItem " + somaValorItem);
//		System.out.println("somaValorAcrescimos " + somaValorAcrescimos);
//		System.out.println("somaValorTotal " + somaValorTotal);
//		
//		//2.15.10 Valor Total dos Descontos (Somatório dos Encargos + os Descontos);
//		String valorDescontoTotalStr = Util.formataBigDecimal(valorDescontoTotal, 2, true);
//		cobrancaDocumentoTxt.append(Util.completaStringComEspacoAEsquerda(valorDescontoTotalStr, 14));
//		
//		//2.15.11 Valor para pagamento a vista
//		cobrancaDocumentoTxt.append(Util.completaStringComEspacoAEsquerda(Util.formataBigDecimal(cobrancaDocumento.getValorDocumento(), 2, true), 14));
		
		return indicadorEstouro;
	}
	
	 /**
	 * Seleciona os itens do documento de cobrança correspondentes a debito a cobrar
	 * 
	 * [UC0910] Emitir Cartas da Campanha de Solidariedade da criança para Negociação a Vista
	 * 
	 * @author Vivianne Sousa
	 * @data 17/06/2009
	 */
	public BigDecimal selecionarValorTotalCobrancaDocumentoItemReferenteDebito(
			CobrancaDocumento cobrancaDocumento)throws ControladorException {
		
		try {
			return repositorioCobranca.selecionarValorTotalCobrancaDocumentoItemReferenteDebito(cobrancaDocumento);
		} catch (ErroRepositorioException e) {
			e.printStackTrace();
			throw new ControladorException("erro.sistema", e);
		}
		
	}
	
	/**
	 * [UC0910] Emitir Cartas da Campanha de Solidariedade da criança para Negociação a Vista
	 * 
	 * O sistema ordena a lista de documentos de cobrança por empresa (EMPR_ID
	 * da tabela DOCUMENTO_COBRANCA), localidade (LOCA_ID), setor
	 * (CBDO_CDSETORCOMERCIAL), quadra (CBDO_NNQUADRA), lote e sublote
	 * (IMOV_NNLOTE e IMOV_SUBLOTE da tabela IMOVEL com IMOV_ID da tabela
	 * DOCUMENTO_COBRANCA)
	 * 
	 * @author Vivianne Sousa
	 * @data 17/06/2009
	 * 
	 * @param idRota,
	 *            idDocumentoTipo
	 * @return Collection<CobrancaDocumento>
	 */
	 public Collection<CobrancaDocumento> pesquisarCobrancaDocumentoParaEmitir(
			Integer idRota, Integer idDocumentoTipo)throws ControladorException {
				
		try {
			return repositorioCobranca.pesquisarCobrancaDocumentoParaEmitir(idRota, idDocumentoTipo);
		} catch (ErroRepositorioException e) {
			e.printStackTrace();
			throw new ControladorException("erro.sistema", e);
		}
		
	}
	
	/***
	 * [UC0904] Gerar TXT Inspeção de Ligacoes
	 * 
	 * @author Ivan Sergio
	 * @data 18/05/2009
	 *
	 * @param cobrancaAcaoAtividadeCronograma
	 * @param cobrancaAcaoAtividadeComando
	 * @param dataAtualPesquisa
	 * @param acaoCobranca
	 * @param cobrancaGrupo
	 * @param cobrancaCriterio
	 * @throws ControladorException
	 */
	public void gerarTxtInspecaoLigacoes(
			CobrancaAcaoAtividadeCronograma cobrancaAcaoAtividadeCronograma,
			CobrancaAcaoAtividadeComando cobrancaAcaoAtividadeComando,
			Date dataAtualPesquisa, CobrancaAcao acaoCobranca,
			CobrancaGrupo cobrancaGrupo, CobrancaCriterio cobrancaCriterio)
			throws ControladorException {
	
		SistemaParametro sistemaParametro = this.getControladorUtil()
				.pesquisarParametrosDoSistema();
	
		System.out.println("***********************************");
		System.out.println("INICIO FISCALIZAÇÃO INATIVO COMPESA");
		System.out.println("***********************************");
	
		boolean flagFimPesquisa = false;
		final int quantidadeCobrancaDocumento = 1000;
		int quantidadeCobrancaDocumentoInicio = 0;
		StringBuilder cobrancaDocumentoTxt = new StringBuilder();
		int sequencialImpressao = 0;
		Map<Integer, Integer> mapAtualizaSequencial = null;
	
		Integer idCronogramaAtividadeAcaoCobranca = null;
		Integer idComandoAtividadeAcaoCobranca = null;
		Integer idAcaoCobranca = null;
		
		if (cobrancaAcaoAtividadeCronograma != null
				&& cobrancaAcaoAtividadeCronograma.getId() != null) {
			idCronogramaAtividadeAcaoCobranca = cobrancaAcaoAtividadeCronograma
					.getId();
		}
		if (cobrancaAcaoAtividadeComando != null
				&& cobrancaAcaoAtividadeComando.getId() != null) {
			idComandoAtividadeAcaoCobranca = cobrancaAcaoAtividadeComando
					.getId();
		}
		if (acaoCobranca != null && acaoCobranca.getId() != null) {
			idAcaoCobranca = acaoCobranca.getId();
		}
	
		while (!flagFimPesquisa) {
			// map que armazena o sequencial e o numero da
			// conta para no final atualizar todos os
			// sequencias
			mapAtualizaSequencial = new HashMap();
			Collection colecaoEmitirDocumentoCobranca = null;
			try {
				colecaoEmitirDocumentoCobranca = repositorioCobranca
						.pesquisarCobrancaDocumentoOrdemCorte(
								idCronogramaAtividadeAcaoCobranca,
								idComandoAtividadeAcaoCobranca,
								dataAtualPesquisa, idAcaoCobranca,
								quantidadeCobrancaDocumentoInicio);
			} catch (ErroRepositorioException ex) {
				ex.printStackTrace();
				throw new ControladorException("erro.sistema", ex);
			}
	
			if (colecaoEmitirDocumentoCobranca != null && !colecaoEmitirDocumentoCobranca.equals("")) {
				System.out.println("********************");
				System.out.println("QUANTIDADE COBRANÇA:" + colecaoEmitirDocumentoCobranca.size());
				System.out.println("********************");
	
				if (colecaoEmitirDocumentoCobranca.size() < quantidadeCobrancaDocumento) {
					flagFimPesquisa = true;
				} else {
					quantidadeCobrancaDocumentoInicio = quantidadeCobrancaDocumentoInicio + 1000;
				}
				
				Iterator iteratorColecaoCobrancaDocumento = colecaoEmitirDocumentoCobranca.iterator();
				EmitirDocumentoCobrancaHelper emitirDocumentoCobrancaHelper = null;
				
				while (iteratorColecaoCobrancaDocumento.hasNext()) {
					emitirDocumentoCobrancaHelper = 
						(EmitirDocumentoCobrancaHelper) iteratorColecaoCobrancaDocumento.next();
					
					String nomeCliente = null;
					//Collection colecaoCobrancaDocumentoItem = null;
	
					/*
					 * Estes objetos auxiliarão na formatação da inscrição que
					 * será composta por informações do documento de cobrança e
					 * do imóvel a ele associado
					 */
					Imovel inscricao = null;
					SetorComercial setorComercialInscricao = null;
					Quadra quadraInscricao = null;
					Localidade localidade = null;
					sequencialImpressao++;
					
					if (emitirDocumentoCobrancaHelper != null) {
						try {
							nomeCliente = this.repositorioClienteImovel
									.pesquisarNomeClientePorImovel(emitirDocumentoCobrancaHelper
											.getIdImovel());
	
							CobrancaDocumento cobrancaDocumento = new CobrancaDocumento();
							cobrancaDocumento.setId(emitirDocumentoCobrancaHelper.getIdDocumentoCobranca());
	
							//colecaoCobrancaDocumentoItem = this.repositorioCobranca
							//		.selecionarCobrancaDocumentoItemReferenteConta(cobrancaDocumento);
							
							cobrancaDocumento = null;
						} catch (ErroRepositorioException ex) {
							ex.printStackTrace();
							throw new ControladorException("erro.sistema", ex);
						}
						
						//******************************************************
						// Inscricao do Imovel
						quadraInscricao = new Quadra();
						setorComercialInscricao = new SetorComercial();
						localidade = new Localidade();
						inscricao = new Imovel();
	
						quadraInscricao.setNumeroQuadra(emitirDocumentoCobrancaHelper.getNumeroQuadra());
						setorComercialInscricao.setCodigo(emitirDocumentoCobrancaHelper.getCodigoSetorComercial());
						localidade.setId(emitirDocumentoCobrancaHelper.getIdLocalidade());
						inscricao.setLocalidade(localidade);
						inscricao.setSetorComercial(setorComercialInscricao);
						inscricao.setQuadra(quadraInscricao);
						inscricao.setLote(emitirDocumentoCobrancaHelper.getLote());
						inscricao.setSubLote(emitirDocumentoCobrancaHelper.getSubLote());
	
						cobrancaDocumentoTxt.append(Util.completaString(inscricao.getInscricaoFormatada(), 20));
						
						//******************************************************
						// Nome do Cliente Usuario
						cobrancaDocumentoTxt.append(Util.completaString(nomeCliente, 50));
						
						//******************************************************
						// Matricula do Imovel
						//String matriculaImovelFormatada = Util.retornaMatriculaImovelFormatada(emitirDocumentoCobrancaHelper.getIdImovel());
						String matricula = "";
						if(emitirDocumentoCobrancaHelper.getIdImovel()!=null){
							matricula = emitirDocumentoCobrancaHelper.getIdImovel().toString();
						}
						cobrancaDocumentoTxt.append(Util.adicionarZerosEsquedaNumero(9,matricula));
						
						//******************************************************
						// Endereco do Imovel
						String nomeBairro = "";
						String nomeMunicipio = "";
						String siglaUnidadeFederecao = "";
						String cepFormatado = "";
	
						String[] parmsEnderecoImovel = getControladorEndereco()
								.pesquisarEnderecoFormatadoDividido(emitirDocumentoCobrancaHelper.getIdImovel());
						
						if (parmsEnderecoImovel != null) {
							// Endereço sem Municipio e Unidade Federação
							cobrancaDocumentoTxt.append(Util.completaString(parmsEnderecoImovel[0], 100));
							
							// Nome do Municipio
							nomeMunicipio = "" + parmsEnderecoImovel[1];
							// Sigla da Unidade Federação
							siglaUnidadeFederecao = parmsEnderecoImovel[2];
							// Nome do Bairro
							nomeBairro = "" + parmsEnderecoImovel[3];
							// CEP Formatado
							cepFormatado = parmsEnderecoImovel[4];
						} else {
							cobrancaDocumentoTxt.append(Util.completaString("", 100));
						}
							
						// Bairro
						cobrancaDocumentoTxt.append(Util.completaString(nomeBairro, 30));
						// Municipio
						cobrancaDocumentoTxt.append(Util.completaString(nomeMunicipio, 30));
						// UF
						cobrancaDocumentoTxt.append(Util.completaString(siglaUnidadeFederecao, 2));
						// CEP
						String cepStr = Util.completaString(cepFormatado, 8);
						cobrancaDocumentoTxt.append(cepStr.substring(0,5) + "-" + cepStr.substring(5,8));
						
						//******************************************************
						//CRC2574 alterado por Vivianne Sousa 19/08/2009 - Francisco
						// Numero da OS
						cobrancaDocumentoTxt.append(Util.completaString(
								"" +emitirDocumentoCobrancaHelper.getNumeroOS(), 9));
						//"" +emitirDocumentoCobrancaHelper.getNumeroSequenciaDocumento(), 9));
						
						//******************************************************
						// Categorias
						// Quantidades de economias por categoria: 1º RESIDÊNCIAL 2º COMERCIAL 3º INDUSTRIAL 4º PÚBLICA
						Imovel imovel = new Imovel();
						imovel.setId(emitirDocumentoCobrancaHelper.getIdImovel());
						Collection colecaoCategorias = getControladorImovel().obterQuantidadeEconomiasCategoria(imovel);
						imovel = null;
						String qtdResidencial = "";
						String qtdComercial = "";
						String qtdIndustrial = "";
						String qtdPublico = "";
						Integer totalCategoria = 0;
	
						if (colecaoCategorias != null && !colecaoCategorias.isEmpty()) {
							Iterator iteratorColecaoCategorias = colecaoCategorias.iterator();
							Categoria categoria = null;
							
							while (iteratorColecaoCategorias.hasNext()) {
								categoria = (Categoria) iteratorColecaoCategorias.next();
	
								if (categoria.getId().equals(Categoria.RESIDENCIAL)) {
									qtdResidencial = "" + categoria.getQuantidadeEconomiasCategoria();
									totalCategoria += categoria.getQuantidadeEconomiasCategoria();
								} else if (categoria.getId().equals(Categoria.COMERCIAL)) {
									qtdComercial = "" + categoria.getQuantidadeEconomiasCategoria();
									totalCategoria += categoria.getQuantidadeEconomiasCategoria();
								} else if (categoria.getId().equals(Categoria.INDUSTRIAL)) {
									qtdIndustrial = "" + categoria.getQuantidadeEconomiasCategoria();
									totalCategoria += categoria.getQuantidadeEconomiasCategoria();
								} else if (categoria.getId().equals(Categoria.PUBLICO)) {
									qtdPublico = "" + categoria.getQuantidadeEconomiasCategoria();
									totalCategoria += categoria.getQuantidadeEconomiasCategoria();
								}
							}
						}
						colecaoCategorias = null;
						
						// Residencial
						if (!qtdResidencial.equals(""))
							cobrancaDocumentoTxt.append(Util.adicionarZerosEsquedaNumero(3, qtdResidencial));
						else
							cobrancaDocumentoTxt.append(Util.completaString("", 3));
						
						// Comercial
						if (!qtdComercial.equals(""))
							cobrancaDocumentoTxt.append(Util.adicionarZerosEsquedaNumero(3, qtdComercial));
						else
							cobrancaDocumentoTxt.append(Util.completaString("", 3));
	
						// Industrial
						if (!qtdIndustrial.equals(""))
							cobrancaDocumentoTxt.append(Util.adicionarZerosEsquedaNumero(3, qtdIndustrial));
						else
							cobrancaDocumentoTxt.append(Util.completaString("", 3));
	
						// Publico
						if (!qtdPublico.equals(""))
							cobrancaDocumentoTxt.append(Util.adicionarZerosEsquedaNumero(3, qtdPublico));
						else
							cobrancaDocumentoTxt.append(Util.completaString("", 3));
						
						//******************************************************
						// Total Categorias
						cobrancaDocumentoTxt.append(Util.adicionarZerosEsquedaNumero(3, totalCategoria.toString()));
						
						//******************************************************
						// Data de Emissao
						if (emitirDocumentoCobrancaHelper.getEmissao() != null)
							cobrancaDocumentoTxt.append(
									Util.formatarData(emitirDocumentoCobrancaHelper.getEmissao()));
						else
							cobrancaDocumentoTxt.append(Util.completaString("", 10));
						
						//******************************************************
						// Perfil do Cliente
						cobrancaDocumentoTxt.append(Util.completaString(
								emitirDocumentoCobrancaHelper.getDescricaoImovelPerfil(), 20));
						
						//******************************************************
						// Ultima Alteracao
						if (emitirDocumentoCobrancaHelper.getDtImovelUltimaAlteracao() != null) {
							cobrancaDocumentoTxt.append(
									Util.formatarData(emitirDocumentoCobrancaHelper.getDtImovelUltimaAlteracao()));
						} else {
							cobrancaDocumentoTxt.append(Util.completaString("", 10));
						}
						
						//******************************************************
						// Grupo de Cobranca
						cobrancaDocumentoTxt.append(
								Util.completaStringComEspacoAEsquerda(
										"" + emitirDocumentoCobrancaHelper.getIdCobrancaGrupo(), 2));
						
						//******************************************************
						// Sequencial de Impressao
						cobrancaDocumentoTxt.append(Util.completaStringComEspacoAEsquerda(
								Util.retornaSequencialFormatado(sequencialImpressao), 7));
						
						//******************************************************
						// Codigo da Situacao da Ligacao de Agua
						cobrancaDocumentoTxt.append(Util.completaString(
								emitirDocumentoCobrancaHelper.getDescricaoSituacaoLigacaoAgua(), 20));
						
						//******************************************************
						// Consumo Medio
						Integer consumoMedio = getControladorMicromedicao()
								.pesquisarConsumoMedioImovel(
										emitirDocumentoCobrancaHelper.getIdImovel());
	
						if (consumoMedio != null)
							cobrancaDocumentoTxt.append(Util.completaString(consumoMedio.toString(), 28));
						else
							cobrancaDocumentoTxt.append(Util.completaString("", 28));
						
						//******************************************************
						// Situacao da Ligacao de Esgoto
						cobrancaDocumentoTxt.append(Util.completaString(
								emitirDocumentoCobrancaHelper.getDescricaoSituacaoLigacaoEsgoto(), 20));
						
						//******************************************************
						// Consumo Fixo de Esgoto
						Integer consumoMinimoEsgoto = getControladorLigacaoEsgoto()
								.recuperarConsumoMinimoEsgoto(emitirDocumentoCobrancaHelper.getIdImovel());
						
						if (consumoMinimoEsgoto != null)
							cobrancaDocumentoTxt.append(Util.completaString(consumoMinimoEsgoto.toString(), 10));
						else
							cobrancaDocumentoTxt.append(Util.completaString("", 10));
						
						//******************************************************
						// Dados da Ligacao de Agua
						Object[] dadosLigacaoAgua = null;
						dadosLigacaoAgua = getControladorAtendimentoPublico()
								.pesquisarDadosLigacaoAgua(emitirDocumentoCobrancaHelper.getIdImovel());
	
						if (dadosLigacaoAgua != null) {
							if (dadosLigacaoAgua[1] != null)
								//******************************************************
								// Data do Corte
								cobrancaDocumentoTxt.append(Util.completaString(
										Util.formatarData((Date) dadosLigacaoAgua[1]), 10));
							else
								cobrancaDocumentoTxt.append(Util.completaString("", 10));
							
							if (dadosLigacaoAgua[2] != null)
								//******************************************************
								// Data Supressao
								cobrancaDocumentoTxt.append(Util.completaString(
										Util.formatarData((Date) dadosLigacaoAgua[2]), 10));
							else
								cobrancaDocumentoTxt.append(Util.completaString("", 10));
							
						} else {
							cobrancaDocumentoTxt.append(Util.completaString("", 20));
						}
						
						//******************************************************
						// Origem
						String origem = "";
						Integer anormalidadeLeitura = emitirDocumentoCobrancaHelper.getIdLeituraAnormalidade();
						if (anormalidadeLeitura == null) {
							origem = "AUTOMÁTICO";
						} else if (anormalidadeLeitura == LeituraAnormalidade.INDICADOR_LIGADO_CLANDESTINO_AGUA
								|| anormalidadeLeitura == LeituraAnormalidade.INDICADOR_LIGADO_CLANDESTINO_ESGOTO
								|| anormalidadeLeitura == LeituraAnormalidade.INDICADOR_LIGADO_CLANDESTINO_AGUA_ESGOTO) {
							origem = "RECADASTRAMENTO";
						} else {
							origem = "LEITURA";
						}
						cobrancaDocumentoTxt.append(Util.completaString(origem, 15));
						
						//******************************************************
						// Ocorrencia
						cobrancaDocumentoTxt.append(Util.completaString(
								emitirDocumentoCobrancaHelper.getDescricaoLeitAnormalidade(), 34));
						
						//******************************************************
						// Data da Posicao do Debito
						String anoMesValidade = sistemaParametro.getAnoMesArrecadacao().toString();
						Calendar calendario = new GregorianCalendar();
	
						if (anoMesValidade != null && !anoMesValidade.equals("")) {
							calendario.set(Calendar.YEAR, new Integer(
									anoMesValidade.substring(0, 4)).intValue());
							calendario.set(Calendar.MONTH, new Integer(
									anoMesValidade.substring(4, 6)).intValue() - 1);
							calendario.set(Calendar.DAY_OF_MONTH, calendario
									.getActualMaximum(Calendar.DAY_OF_MONTH));
							
							cobrancaDocumentoTxt.append(Util.formatarData(calendario.getTime()));
						} else {
							cobrancaDocumentoTxt.append(Util.completaString("", 10));
						}
						
						//******************************************************
						// Valor total do documento de cobrança
						cobrancaDocumentoTxt.append(Util.completaStringComEspacoAEsquerda(
								Util.formatarMoedaReal(emitirDocumentoCobrancaHelper.getValorDocumento()), 18));
						
						//******************************************************
						// Executor - Empresa
						String executor = "";
						FiltroEmpresa filtroEmpresa = new FiltroEmpresa();
						filtroEmpresa.adicionarParametro(new ParametroSimples(
								FiltroEmpresa.ID, emitirDocumentoCobrancaHelper.getIdEmpresa()));
						Collection<Empresa> colecaoEmpresa = getControladorUtil().pesquisar(
								filtroEmpresa, Empresa.class.getName());
						
						if (colecaoEmpresa != null && !colecaoEmpresa.isEmpty()) {
							Empresa empresa = (Empresa) Util.retonarObjetoDeColecao(colecaoEmpresa);
							executor = empresa.getDescricaoAbreviada();
						}
						cobrancaDocumentoTxt.append(Util.completaString(executor, 10));
						
						//******************************************************
						// CAS - Nome da Unidade de Negocio
						String nomeUnidadeNegocio = "";
						Integer idUnidadeNegocio = getControladorLocalidade().pesquisarIdUnidadeNegocioParaLocalidade(
								emitirDocumentoCobrancaHelper.getIdLocalidade());
						
						if (idUnidadeNegocio != null) {
							FiltroUnidadeNegocio filtroUnidadeNegocio = new FiltroUnidadeNegocio();
							filtroUnidadeNegocio.adicionarParametro(new ParametroSimples(
									FiltroUnidadeNegocio.ID, idUnidadeNegocio));
							
							UnidadeNegocio unidadeNegocio = (UnidadeNegocio) Util.retonarObjetoDeColecao(
									getControladorUtil().pesquisar(filtroUnidadeNegocio, UnidadeNegocio.class.getName()));
							
							if (unidadeNegocio != null)
								nomeUnidadeNegocio = unidadeNegocio.getNome();

						}
						cobrancaDocumentoTxt.append(Util.completaString(nomeUnidadeNegocio, 50));
						
						//******************************************************
						// Dados do Cliente Imovel
						String cpfcnpj = "";
						String rg = "";
						String uf = "";
						String ddd = "";
						String numeroFone = "";
						String ramal = "";
						String tipo = "";
						
						FiltroClienteImovel filtroClienteImovel = new FiltroClienteImovel();
						// Parametros
						filtroClienteImovel.adicionarParametro(new ParametroSimples(
							FiltroClienteImovel.IMOVEL_ID, emitirDocumentoCobrancaHelper.getIdImovel()));
						filtroClienteImovel.adicionarParametro(new ParametroSimples(
								FiltroClienteImovel.CLIENTE_RELACAO_TIPO_ID, ClienteRelacaoTipo.USUARIO));
						filtroClienteImovel.adicionarParametro(new ParametroNulo(FiltroClienteImovel.DATA_FIM_RELACAO));
						//filtroClienteImovel.adicionarParametro(new ParametroSimples(
						//		FiltroClienteImovel.CLIENTE_FONE_INDICADOR_TELEFONE_PADRAO,
						//		ClienteFone.INDICADOR_FONE_PADRAO));
						// Entidades
						filtroClienteImovel.adicionarCaminhoParaCarregamentoEntidade(FiltroClienteImovel.CLIENTE);
						filtroClienteImovel.adicionarCaminhoParaCarregamentoEntidade(FiltroClienteImovel.ORGAO_EXPEDIDOR_RG);
						filtroClienteImovel.adicionarCaminhoParaCarregamentoEntidade(FiltroClienteImovel.UNIDADE_FEDERACAO);
						filtroClienteImovel.adicionarCaminhoParaCarregamentoEntidade(FiltroClienteImovel.CLIENTE_FONE);
						//filtroClienteImovel.adicionarCaminhoParaCarregamentoEntidade(FiltroClienteImovel.FONE_TIPO);
						// Realiza a pesquisa
						Collection<ClienteImovel> colecaoClienteImovel = getControladorUtil().pesquisar(
								filtroClienteImovel, ClienteImovel.class.getName());
						
						if (colecaoClienteImovel != null && !colecaoClienteImovel.isEmpty()) {
							ClienteImovel clienteImovel = (ClienteImovel) Util.retonarObjetoDeColecao(colecaoClienteImovel);
							
							if (clienteImovel.getCliente() != null) {
								Cliente cliente = (Cliente) clienteImovel.getCliente();
								
								//********************************************************
								// CPF/CNPJ
								if (cliente.getCpf() != null) {
									cpfcnpj = cliente.getCpfFormatado();
								}else if (cliente.getCnpj() != null) {
									cpfcnpj = cliente.getCnpjFormatado();
								}
								
								//********************************************************
								// RG
								if (cliente.getRg() != null) {
									rg = cliente.getRg();
									if (cliente.getOrgaoExpedidorRg() != null) {
										rg += " " + cliente.getOrgaoExpedidorRg().getDescricaoAbreviada();
									}
								}
								
								//********************************************************
								// Unidade Federacao
								if (cliente.getUnidadeFederacao() != null) {
									uf = cliente.getUnidadeFederacao().getSigla();
								}
								
								//********************************************************
								// Cliente Fones
								if (cliente.getClienteFones() != null) {
									Iterator iClienteFone = cliente.getClienteFones().iterator();
									ClienteFone clienteFone = new ClienteFone();
									boolean achou = false;
									
									while (iClienteFone.hasNext() & !achou) {
										clienteFone = (ClienteFone) iClienteFone.next();
										
										if (clienteFone.getIndicadorTelefonePadrao() != null && 
												clienteFone.getIndicadorTelefonePadrao().equals(ClienteFone.INDICADOR_FONE_PADRAO)) {
											//********************************************************
											// DDD
											ddd = clienteFone.getDdd();
											//********************************************************
											// Numero Fone
											numeroFone = clienteFone.getTelefone();
											//********************************************************
											// Ramal
											ramal = clienteFone.getRamal();
											//********************************************************
											// Tipo
											if (clienteFone.getFoneTipo() != null) {
												FoneTipo foneTipo = (FoneTipo) clienteFone.getFoneTipo();
												
												if (foneTipo.getId().equals(FoneTipo.RESIDENCIAL)) {
													tipo = "RES";
												}else if (foneTipo.getId().equals(FoneTipo.COMERCIAL)) {
													tipo = "COM";
												}else if (foneTipo.getId().equals(FoneTipo.CELULAR)) {
													tipo = "CEL";
												}else if (foneTipo.getId().equals(FoneTipo.FAX)) {
													tipo = "FAX";
												}
											}
											achou = true;
										}
									}
								}
								
								cobrancaDocumentoTxt.append(Util.completaString(cpfcnpj, 18));
								cobrancaDocumentoTxt.append(Util.completaString(rg, 20));
								cobrancaDocumentoTxt.append(Util.completaString(uf, 2));
								cobrancaDocumentoTxt.append(Util.completaString(ddd, 3));
								cobrancaDocumentoTxt.append(Util.completaString(numeroFone, 8));
								cobrancaDocumentoTxt.append(Util.completaString(ramal, 4));
								cobrancaDocumentoTxt.append(Util.completaString(tipo, 3));
							}else {
								cobrancaDocumentoTxt.append(Util.completaString("", 58));
							}
						}else {
							cobrancaDocumentoTxt.append(Util.completaString("", 58));
						}
						
						//******************************************************
						// Servicos/Atualizacoes
						BigDecimal totalServicosAtualizacoes = null;
						try {
							totalServicosAtualizacoes = repositorioCobranca.pesquisarServioAtualizacao(
									emitirDocumentoCobrancaHelper.getIdDocumentoCobranca());
							
							if (totalServicosAtualizacoes == null)
								totalServicosAtualizacoes = new BigDecimal("0.00");
						} catch (ErroRepositorioException ex) {
							ex.printStackTrace();
							throw new ControladorException("erro.sistema", ex);
						}
						cobrancaDocumentoTxt.append(Util.completaStringComEspacoAEsquerda(
								Util.formatarMoedaReal(totalServicosAtualizacoes), 17));
						
						cobrancaDocumentoTxt.append(System.getProperty("line.separator"));
						
						mapAtualizaSequencial.put(emitirDocumentoCobrancaHelper
								.getIdDocumentoCobranca(), sequencialImpressao);
						//colecaoCobrancaDocumentoItem = null;
					}
					emitirDocumentoCobrancaHelper = null;
				}
			} else {
				flagFimPesquisa = true;
			}
			
			try {
				repositorioCobranca
						.atualizarSequencialCobrancaDocumentoImpressao(mapAtualizaSequencial);
			} catch (ErroRepositorioException e) {
				throw new ControladorException("erro.sistema", e);
			}
			mapAtualizaSequencial = null;
	
			colecaoEmitirDocumentoCobranca = null;
		}
	
		System.out.println("********************************");
		System.out.println("FIM FISCALIZAÇÃO INATIVO COMPESA");
		System.out.println("********************************");
	
		Date dataAtual = new Date();
		String nomeZip = null;
				
		if (idAcaoCobranca.equals(CobrancaAcao.INSPECAO_LIGACOES)){
			if (idCronogramaAtividadeAcaoCobranca != null) {
				nomeZip = "ORDEM_INSPECAO_LIGACOES_"
					+ cobrancaAcaoAtividadeComando.getCobrancaGrupo().getId() + "_"
					+ Util.formatarData(dataAtual) + Util.formatarHoraSemDataSemDoisPontos(dataAtual);
			}
		}
		
		if (idCronogramaAtividadeAcaoCobranca == null) {
			String descricaoAbrevDocumentoTipo = "";
			if (acaoCobranca != null && acaoCobranca.getDocumentoTipo() != null) {
				
				if(acaoCobranca.getDocumentoTipo().getId().equals(DocumentoTipo.INSPECAO_DE_LIGACOES)){
					descricaoAbrevDocumentoTipo = "ORDEM_INSPECAO_DE_LIGACOES";
				}else{
					descricaoAbrevDocumentoTipo = acaoCobranca.getDocumentoTipo().getDescricaoAbreviado();
				}
				
				
			}
			String tituloComandoEventual = cobrancaAcaoAtividadeComando.getDescricaoTitulo();
			
			nomeZip = descricaoAbrevDocumentoTipo + " "
					+ tituloComandoEventual + " "
					+ Util.formatarData(dataAtual) + Util.formatarHoraSemDataSemDoisPontos(dataAtual);
			nomeZip = nomeZip.replace("/", "_");
			nomeZip = nomeZip.replace(" ", "_");			
		}
		
		nomeZip = nomeZip.replace("/", "_");
	
		try {
			if (cobrancaDocumentoTxt != null && cobrancaDocumentoTxt.length() != 0) {
				cobrancaDocumentoTxt.append("\u0004");
				// criar o arquivo zip
				File compactado = new File(nomeZip + ".zip"); // nomeZip
				ZipOutputStream zos = new ZipOutputStream(new FileOutputStream(compactado));
	
				File leitura = new File(nomeZip + ".txt");
				BufferedWriter out = new BufferedWriter(new OutputStreamWriter(
						new FileOutputStream(leitura.getAbsolutePath())));
				out.write(cobrancaDocumentoTxt.toString());
				out.flush();
				out.close();
				ZipUtil.adicionarArquivo(zos, leitura);
				// close the stream
				zos.close();
				leitura.delete();
			}
			
			System.out.println("********************");
			System.out.println("FIM GERAÇÃO ARQUIVO");
			System.out.println("********************");
		} catch (IOException e) {
			e.printStackTrace();
			throw new ControladorException("erro.sistema", e);
		} catch (Exception e) {
			e.printStackTrace();
			throw new ControladorException("erro.sistema", e);
		}
	}

	/**
	 * retorna a Data de Vencimento da Rota 
	 * (FACR_DTCONTAVENCIMENTO da tabela FATURAMENTO_ATIV_CRON_ROTA com ROTA_ID = ROTA_ID já pesquisado antes 
	 * e FTAC_ID = FTAC_ID da tabela FATURAMENTO_ATIVIDADE_CRONOGRAMA e FTAT_ID = 5 
	 * e FTCM_ID = FTCM_ID da tabela FATURAMENTO_GRUPO_CRONOGRAMA_MENSAL com FTGR_ID = ao grupo informado 
	 * e FTCM_AMREFERENCIA = anoMesFaturamento da tabela SISTEMA_PARAMETROS )
	 * 
	 * [UC0910] Emitir Cartas da Campanha de Solidariedade da criança para Negociação a Vista
	 * 
	 * @author Vivianne Sousa
	 * @data 22/06/2009
	 */
	public Date pesquisarDataVencimentoRota(Integer idRota, 
			Integer anoMesFaturamento, Integer grupoFaturamento)throws ControladorException {
		
		try {
			return repositorioCobranca.pesquisarDataVencimentoRota(idRota, anoMesFaturamento, grupoFaturamento);
		} catch (ErroRepositorioException e) {
			e.printStackTrace();
			throw new ControladorException("erro.sistema", e);
		}
		
	}
	
	/**
	 * 
	 * Esse metodo está de acordo com o UC0919 - Gerar Relatorio de Impostos Por Cliente Responsavel. Dessa forma,
	 * esse método realiza a pesquisa por impostos por cliente responsável, agrupando os impostos a partir das
	 * faturas de cada cliente. Para esse caso de uso, todos os CLIENTES devem ser FEDERAIS, dessa forma a pesquisa
	 * está sendo realizada por cliente responsáveis federais, ou seja clientes que tem na tabela cadastro.cliente_tipo
	 * EPOD_ID = 3. - continuar descricao -
	 *
	 * @author Jose Guilherme Macedo Vieira, Fernando Fontelles
	 * @date 08/07/2009, 02/10/2010
	 *
	 * @param Integer anoMes - o ano/mes já formatado, sem barra, na forma de Integer
	 * @param Integer clienteID - o id do cliente
	 * @param String tipoRelatorio (SINTETICO ou ANALITICO)
	 * @return Collection<RelatorioImpostosPorClienteResponsavelHelper> - a coleção de helpers do relatorio
	 * @throws ControladorException
	 */
	public Collection<ImpostoDeduzidoHelper> pesquisarImpostosPorClienteResponsavelFederal(
			Integer anoMes, 
			Integer clienteID, 
			String tipoRelatorio) throws ControladorException{
		

		Collection<ImpostoDeduzidoHelper> colecaoImpostosDeduzidosHelper = new ArrayList();
				
				if(tipoRelatorio != null){
					
					if(tipoRelatorio.equalsIgnoreCase("sintetico") ){

						//cria uma colecao de impostos
						Collection colecaoImpostos = new ArrayList();
							
						try {				
							
							//faz a pesquisa por impostos que estao associados à fatura passando o ano mes
							colecaoImpostos = 
								this.repositorioCobranca.pesquisaImpostoFaturaClienteResponsavelFederal(anoMes, clienteID);
							
						} catch (ErroRepositorioException e) {
							e.printStackTrace();
							throw new ControladorException("erro.sistema", e);
						}		
						
						//valida a colecao de impostos pesquisada
						if(colecaoImpostos != null && !colecaoImpostos.isEmpty()){
							Iterator iteraImposto = colecaoImpostos.iterator();
							
							//varre a colecao de impostos
							while (iteraImposto.hasNext()) {
								
								Object[] imposto = (Object[]) iteraImposto.next();
								
								//cria uma instancia do helper de impostos
								ImpostoDeduzidoHelper impostoDeduzidoHelper = new ImpostoDeduzidoHelper();
								
								//seta os valores do imposto pequisado no helper do imposto para se usar no relatorio
								impostoDeduzidoHelper.setIdImpostoTipo((Integer) imposto[0]);
								impostoDeduzidoHelper.setDescricaoImposto((String) imposto[1]);						
								impostoDeduzidoHelper.setPercentualAliquota((BigDecimal) imposto[2]);
								impostoDeduzidoHelper.setValor((BigDecimal) imposto[3]);
								impostoDeduzidoHelper.setIdCliente((Integer) imposto[4] );
								impostoDeduzidoHelper.setNomeCliente((String) imposto[5] );
								impostoDeduzidoHelper.setValorFatura((BigDecimal) imposto[6]);
								impostoDeduzidoHelper.setCnpjCliente((String) imposto[7]);
								
								//adiciona o helper à colecao dos helpers de imposto
								colecaoImpostosDeduzidosHelper.add(impostoDeduzidoHelper);
								
							}
						
						}
						
					}else if(tipoRelatorio.equalsIgnoreCase("analitico")){		
									
								//Cria lista QUEBRA para realizar a soma dos valores da fatura
								List<ImpostoDeduzidoHelper> quebra = 
										new ArrayList<ImpostoDeduzidoHelper>();
						
//								Collection colecaoImpostosCliente = new ArrayList();
								List colecaoImpostosCliente = new ArrayList();
								
								try{								
									
									//faz a pesquisa por impostos que estao associados à fatura passando o id da fatura
									colecaoImpostosCliente = 
										(List)this.repositorioCobranca.pesquisaImpostoFaturaClienteResponsavelFederalAnalitico(anoMes, clienteID);
									
								}catch (ErroRepositorioException e) {
									e.printStackTrace();
									throw new ControladorException("erro.sistema", e);
								}
								
								//inicio daseção da coleção de impostos do Cliente
								if(colecaoImpostosCliente != null && !colecaoImpostosCliente.isEmpty()){
									
									for (int i = 0; i<colecaoImpostosCliente.size(); i++ ) {
										
										Object obj = (Object) colecaoImpostosCliente.get(i);
										
										if (obj instanceof Object[]) {
							                Object[] imposto = (Object[]) obj;
										
							                //cria uma instancia do helper de impostos
											ImpostoDeduzidoHelper helper = new ImpostoDeduzidoHelper();
											
											//seta os valores do imposto pequisado no helper do imposto para se usar no relatorio
											helper.setIdImpostoTipo((Integer) imposto[0]);
											helper.setDescricaoImposto((String) imposto[1]);						
											helper.setPercentualAliquota((BigDecimal) imposto[2]);
											helper.setValor((BigDecimal) imposto[3]);
											helper.setIdCliente((Integer)imposto[4]);
											helper.setNomeCliente((String) imposto[5] );
											helper.setValorFatura((BigDecimal) imposto[6]);
											helper.setIdImovel((Integer) imposto[7]);
											helper.setCnpjCliente((String) imposto[8]);
											
											
											
											// Verificamos se o objeto ja possue uma quebra cadastrada
							                if (quebra.contains(helper)) {
							                	
							                	int posicao = quebra.indexOf(helper);
							                	
							                	ImpostoDeduzidoHelper jaCadastrado = (ImpostoDeduzidoHelper) quebra.get(posicao);
							                	
							                	jaCadastrado.setValorFatura(jaCadastrado.getValorFatura().add(helper.getValorFatura()));
							                	
							                	//seta os valores do imposto pequisado no helper do imposto para se usar no relatorio
												helper.setIdImpostoTipo((Integer) imposto[0]);
												helper.setDescricaoImposto((String) imposto[1]);						
												helper.setPercentualAliquota((BigDecimal) imposto[2]);
												helper.setValor((BigDecimal) imposto[3]);
												helper.setIdCliente((Integer)imposto[4]);
												helper.setNomeCliente((String) imposto[5] );
//												helper.setValorFatura((BigDecimal) imposto[6]);
												helper.setIdImovel((Integer) imposto[7]);
												helper.setCnpjCliente((String) imposto[8]);
												
												quebra.add(helper);
							                	
							                }else{
							                	
							                	quebra.add(helper);
							                	
							                }
										
										}
										
									}
									
									colecaoImpostosDeduzidosHelper = (Collection) quebra;
									
									/*Iterator iterator = colecaoImpostosCliente.iterator();
								    
									//inicio do laço da coleção de impostos do imovel
									while (iterator.hasNext()) {
										
										Object[] imposto = (Object[]) iterator.next();
										
										//cria uma instancia do helper de impostos
										ImpostoDeduzidoHelper impostoDeduzidoHelper = new ImpostoDeduzidoHelper();
										
										//seta os valores do imposto pequisado no helper do imposto para se usar no relatorio
										impostoDeduzidoHelper.setIdImpostoTipo((Integer) imposto[0]);
										impostoDeduzidoHelper.setDescricaoImposto((String) imposto[1]);						
										impostoDeduzidoHelper.setPercentualAliquota((BigDecimal) imposto[2]);
										impostoDeduzidoHelper.setValor((BigDecimal) imposto[3]);
										impostoDeduzidoHelper.setIdCliente((Integer)imposto[4]);
										impostoDeduzidoHelper.setNomeCliente((String) imposto[5] );
										impostoDeduzidoHelper.setValorFatura((BigDecimal) imposto[6]);
										impostoDeduzidoHelper.setIdImovel((Integer) imposto[7]);
										
										//adiciona o helper à colecao dos helpers de imposto
										colecaoImpostosDeduzidosHelper.add(impostoDeduzidoHelper);									
									}//fim do laço da coleção de impostos do imovel	
									 */									
								}//fim seção da coleção dos imposto do imovel								
							}//fim do laço da coleção de imoveis
						}
				
		return colecaoImpostosDeduzidosHelper;
	}
	
	/**
	 * [UC0251] Gerar Atividade de Ação de Cobrança
	 *
	 * @author Raphael Rossiter
	 * @date 20/07/2009
	 *
	 * @param helper
	 * @throws ControladorException
	 */
	public void gerarAtividadeAcaoCobrancaEmissaoDocumento(EmissaoDocumentoCobrancaHelper helper) 
		throws ControladorException{
		
		if (!helper.getAcaoCobranca().getId().equals(CobrancaAcao.CARTA_COBRANCA_PARCELAMENTO)){
			
			// [UC0575] Emitir Aviso de Cobrança
			emitirAvisoCobrancaFormatado(helper.getCobrancaAcaoAtividadeCronograma(),
			helper.getCobrancaAcaoAtividadeComando(), helper.getDataAtual(), helper.getAcaoCobranca(), 
			helper.getGrupoCobranca(), helper.getCriterioCobranca());
		}
		else{
			
			// [UC0576 Emitir Parcelamento em atraso]
			emitirParcelamentoEmAtraso(helper.getCobrancaAcaoAtividadeCronograma(),
			helper.getCobrancaAcaoAtividadeComando(), helper.getDataAtual(), helper.getAcaoCobranca(), 
			helper.getGrupoCobranca(), helper.getCriterioCobranca());
			
		}
	}
	
	/**
	 * Faz parte de [UC0216] Calcular Acréscimo por Impontualidade Santos Data:
	 * 09/01/2006 Dados do Indices Acrescimo Impontualidade
	 * 
	 * @param anoMesReferenciaDebito
	 *            Ano Mês de Referencia de Débito
	 * @return O Indices Acrescimos por Impontualidade
	 * @throws ErroRepositorioException
	 */
	public IndicesAcrescimosImpontualidade pesquisarIndiceAcrescimoImpontualidade(
			int anoMesReferenciaDebito) throws ControladorException {
		try {
			return repositorioCobranca.pesquisarIndiceAcrescimoImpontualidade(anoMesReferenciaDebito);
		} catch (ErroRepositorioException e) {
			e.printStackTrace();
			throw new ControladorException("erro.sistema", e);
		}
	}
	
	/**
	 * 
	 * Dado um objeto de cicloMeta, consultar a colecao de ciclo meta grupo
	 * 
	 * @author Genival Barbosa
	 * @date 22/07/2009
	 *
	 * @param cicloMeta Objeto ciclo meta 
	 * @return Helpers com os agrupamentos definidos de ciclo meta grupo
	 */
	public List consultarColecaoCicloMetaGrupoRelatorio(CicloMeta cicloMeta) throws ControladorException {
		
		List colecaoCicloMetaGrupo;
		try {				
		
			colecaoCicloMetaGrupo = 
			this.repositorioCobranca.consultarColecaoCicloMetaGrupoRelatorio(cicloMeta.getId());
		} catch (ErroRepositorioException e) {
			e.printStackTrace();
			throw new ControladorException("erro.sistema", e);
		}

		return colecaoCicloMetaGrupo;
	}

	/**
	 * [UC0879] Gerar Extensão de Comando de Contas em Cobrança por Empresa
	 * - Pesquisa dados do popup
	 * @author Hugo Amorim
	 * @throws ControladorException 
	 * @throws ErroRepositorioException  
	 */
	public Object[] pesquisarDadosPopupExtensaoComando
	(Integer idComando,Date dateInicial, Date dateFinal) throws ControladorException{
		Object[] retorno = new Object[26];
		try{
			
			//Dados do comando empresa cobranca conta obs: retorno[0 a 21]
			Collection dadosPopup = repositorioCobranca.pesquisarDadosPopup(idComando);
			
			Iterator iteraDadosPopup = dadosPopup.iterator();

			Object[] array = (Object[]) iteraDadosPopup.next();
			
			for (int i = 0; i < array.length; i++) {
				retorno[i] = array[i];
			}
			//Dados das Cobranças do Comando
			Collection dadosCobranca = repositorioCobranca
				.pesquisarValorTotalCobranca(idComando,dateInicial,dateFinal);
				
			//Quantidade Total de Contas Selecionadas para Cobrança
			retorno[22] = dadosCobranca.size();
			Iterator iteraDadosCobranca = dadosCobranca.iterator();
			BigDecimal somaCobranca = new BigDecimal("0.0");			
			while(iteraDadosCobranca.hasNext()){
				 BigDecimal valor = (BigDecimal) iteraDadosCobranca.next();
				 somaCobranca = somaCobranca.add(valor);
			}
			retorno[23] = somaCobranca;
				
			//Dados das Cobranças do Comando
			Collection dadosCriterio = repositorioCobranca
				.pesquisarValorTotalCobrancaCriterio(idComando,dateInicial,dateFinal);
			//Quantidade Total de Contas Selecionadas para Cobrança Criterio
			retorno[24] = dadosCriterio.size();
			Iterator iteratorCobrancaCriterio = dadosCriterio.iterator();
			BigDecimal somaCobrancaCriterio = new BigDecimal("0.0");			
			while(iteratorCobrancaCriterio.hasNext()){
				 BigDecimal valor = (BigDecimal) iteratorCobrancaCriterio.next();
				 somaCobrancaCriterio = somaCobrancaCriterio.add(valor);
			}
			retorno[25] = somaCobrancaCriterio;
			
			
			
		} catch (ErroRepositorioException e) {
			e.printStackTrace();
			throw new ControladorException("erro.sistema", e);
		}
		
		return retorno;
		
	}
	
	
	/**
	 * [UC0640] Gerar TXT Corte Fisico COMPESA
	 * 
	 * @author Ivan Sergio
	 * @data 21/05/2009
	 * 
	 * @param
	 * @return void
	 */
	public void gerarTxtCorteFisico(
			CobrancaAcaoAtividadeCronograma cobrancaAcaoAtividadeCronograma,
			CobrancaAcaoAtividadeComando cobrancaAcaoAtividadeComando,
			Date dataAtualPesquisa, CobrancaAcao acaoCobranca,
			CobrancaGrupo grupoCobranca, CobrancaCriterio cobrancaCriterio)
			throws ControladorException {

		boolean flagFimPesquisa = false;
		final int quantidadeCobrancaDocumento = 1000;
		int quantidadeCobrancaDocumentoInicio = 0;
		StringBuilder cobrancaDocumentoTxt = new StringBuilder();
		int sequencialImpressao = 0;

		System.out.println("****************************************");
		System.out.println("ENTROU NO GERAR TXT CORTE FISICO COMPESA");
		System.out.println("****************************************");

		Collection colecaoEmitirDocumentoCobranca = null;
		Map<Integer, Integer> mapAtualizaSequencial = null;

		Integer idCronogramaAtividadeAcaoCobranca = null;
		Integer idComandoAtividadeAcaoCobranca = null;
		Integer idAcaoCobranca = null;
		
		if (cobrancaAcaoAtividadeCronograma != null && cobrancaAcaoAtividadeCronograma.getId() != null) {
			idCronogramaAtividadeAcaoCobranca = cobrancaAcaoAtividadeCronograma.getId();
		}
		if (cobrancaAcaoAtividadeComando != null && cobrancaAcaoAtividadeComando.getId() != null) {
			idComandoAtividadeAcaoCobranca = cobrancaAcaoAtividadeComando.getId();
		}
		if (acaoCobranca != null && acaoCobranca.getId() != null) {
			idAcaoCobranca = acaoCobranca.getId();
		}
		
		while (!flagFimPesquisa) {
			// map que armazena o sequencial e o numero da
			// conta para no final atualizar todos os
			// sequencias
			mapAtualizaSequencial = new HashMap();

			try {
				colecaoEmitirDocumentoCobranca = repositorioCobranca
						.pesquisarCobrancaDocumentoOrdemCorte(
								idCronogramaAtividadeAcaoCobranca,
								idComandoAtividadeAcaoCobranca,
								dataAtualPesquisa, idAcaoCobranca,
								quantidadeCobrancaDocumentoInicio);
			} catch (ErroRepositorioException ex) {
				ex.printStackTrace();
				throw new ControladorException("erro.sistema", ex);
			}

			if (colecaoEmitirDocumentoCobranca != null
					&& !colecaoEmitirDocumentoCobranca.isEmpty()) {

				System.out.println("***************************************");
				System.out.println("QUANTIDADE DE COBRANÇA:"
						+ colecaoEmitirDocumentoCobranca.size());
				System.out.println("***************************************");

				Collection colecaoCobrancaDocumentoItem = null;

				if (colecaoEmitirDocumentoCobranca.size() < quantidadeCobrancaDocumento) {
					flagFimPesquisa = true;
				} else {
					quantidadeCobrancaDocumentoInicio = quantidadeCobrancaDocumentoInicio + 1000;
				}

//				int metadeColecao = 0;
//				if (colecaoEmitirDocumentoCobranca.size() % 2 == 0) {
//					metadeColecao = colecaoEmitirDocumentoCobranca.size() / 2;
//				} else {
//					metadeColecao = (colecaoEmitirDocumentoCobranca.size() / 2) + 1;
//				}
//
//				System.out.println("***************************************");
//				System.out.println("INICIO DIVIDE A COLECAO:");
//				System.out.println("***************************************");
//
//				Map<Integer, Map<Object, Object>> mapCobrancaDocumentoOrdenada = dividirColecao(colecaoEmitirDocumentoCobranca);
//				System.out.println("***************************************");
//				System.out.println("FIM DIVIDE A COLECAO:");
//				System.out.println("***************************************");
				Iterator iteratorColecaoCobrancaDocumento = colecaoEmitirDocumentoCobranca.iterator();
				EmitirDocumentoCobrancaHelper emitirDocumentoCobrancaHelper = null;
				
				//if (mapCobrancaDocumentoOrdenada != null) {
					//int countOrdem = 0;

					//while (countOrdem < mapCobrancaDocumentoOrdenada.size()) {
						//Map<Object, Object> mapCobrancaoDocumentoDivididas = mapCobrancaDocumentoOrdenada.get(countOrdem);

						//Iterator iteratorColecaoCobrancaDocumento = mapCobrancaoDocumentoDivididas.keySet().iterator();

						while (iteratorColecaoCobrancaDocumento.hasNext()) {
							emitirDocumentoCobrancaHelper = null;
							String nomeCliente = null;
							//int situacao = 0;
							emitirDocumentoCobrancaHelper = 
								(EmitirDocumentoCobrancaHelper) iteratorColecaoCobrancaDocumento.next();

							/*
							 * Estes objetos auxiliarão na formatação da
							 * inscrição que será composta por informações do
							 * documento de cobrança e do imóvel a ele associado
							 */
							Imovel inscricao = null;
							SetorComercial setorComercialInscricao = null;
							Quadra quadraInscricao = null;
							Localidade localidade = null;
							sequencialImpressao++;

							//while (situacao < 2) {
//								if (situacao == 0) {
//									situacao = 1;
//									sequencialImpressao = atualizaSequencial(
//											sequencialImpressao, situacao,
//											metadeColecao);
//
//								} else {
//									emitirDocumentoCobrancaHelper = (EmitirDocumentoCobrancaHelper) mapCobrancaoDocumentoDivididas
//											.get(emitirDocumentoCobrancaHelper);
//									situacao = 2;
//									sequencialImpressao = atualizaSequencial(
//											sequencialImpressao, situacao,
//											metadeColecao);
//								}

								if (emitirDocumentoCobrancaHelper != null) {
									try {
										nomeCliente = this.repositorioClienteImovel
												.pesquisarNomeClientePorImovel(emitirDocumentoCobrancaHelper.getIdImovel());

										CobrancaDocumento cobrancaDocumento = new CobrancaDocumento();
										cobrancaDocumento.setId(emitirDocumentoCobrancaHelper.getIdDocumentoCobranca());

										colecaoCobrancaDocumentoItem = this.repositorioCobranca
												.selecionarCobrancaDocumentoItemReferenteConta(cobrancaDocumento);
									} catch (ErroRepositorioException ex) {
										ex.printStackTrace();
										throw new ControladorException("erro.sistema", ex);
									}
									
									if (colecaoCobrancaDocumentoItem != null && !colecaoCobrancaDocumentoItem.isEmpty()) {
										// Início do processo de geração do
										// arquivo txt
										
										//******************************************************
										// Inscricao do Imovel
										quadraInscricao = new Quadra();
										setorComercialInscricao = new SetorComercial();
										localidade = new Localidade();
										inscricao = new Imovel();

										quadraInscricao.setNumeroQuadra(emitirDocumentoCobrancaHelper.getNumeroQuadra());
										setorComercialInscricao.setCodigo(emitirDocumentoCobrancaHelper.getCodigoSetorComercial());
										localidade.setId(emitirDocumentoCobrancaHelper.getIdLocalidade());
										inscricao.setLocalidade(localidade);
										inscricao.setSetorComercial(setorComercialInscricao);
										inscricao.setQuadra(quadraInscricao);
										inscricao.setLote(emitirDocumentoCobrancaHelper.getLote());
										inscricao.setSubLote(emitirDocumentoCobrancaHelper.getSubLote());
										
										cobrancaDocumentoTxt.append(Util.completaString(
												inscricao.getInscricaoFormatada(), 20));
										
										//******************************************************
										// Nome do Cliente
										cobrancaDocumentoTxt.append(Util.completaString(nomeCliente, 50));
										
										//******************************************************
										// Matrícula do imóvel
										String matriculaImovelFormatada = Util.retornaMatriculaImovelFormatada(emitirDocumentoCobrancaHelper.getIdImovel());
										cobrancaDocumentoTxt.append(Util.adicionarZerosEsquedaNumero(10,matriculaImovelFormatada));
										
										//******************************************************
										// Endereco do Imovel
										String nomeBairro = "";
										String nomeMunicipio = "";
										String siglaUnidadeFederecao = "";
										String cepFormatado = "";
										
										String[] parmsEnderecoImovel = getControladorEndereco()
												.pesquisarEnderecoFormatadoDividido(emitirDocumentoCobrancaHelper.getIdImovel());
										
										if (parmsEnderecoImovel != null) {
											// Endereço sem Municipio e Unidade Federação
											cobrancaDocumentoTxt.append(Util.completaString(parmsEnderecoImovel[0], 100));
											
											// Nome do Municipio
											nomeMunicipio = "" + parmsEnderecoImovel[1];
											// Sigla da Unidade Federação
											siglaUnidadeFederecao = parmsEnderecoImovel[2];
											// Nome do Bairro
											nomeBairro = "" + parmsEnderecoImovel[3];
											// CEP Formatado
											cepFormatado = parmsEnderecoImovel[4];
										} else {
											cobrancaDocumentoTxt.append(Util.completaString("", 100));									
										}
											
										// Bairro
										cobrancaDocumentoTxt.append(Util.completaString(nomeBairro, 30));
										// Municipio
										cobrancaDocumentoTxt.append(Util.completaString(nomeMunicipio, 30));
										// UF
										cobrancaDocumentoTxt.append(Util.completaString(siglaUnidadeFederecao, 2));
										// CEP
										String cepStr = Util.completaString(cepFormatado, 8);
										cobrancaDocumentoTxt.append(cepStr.substring(0,5) + "-" + cepStr.substring(5,8));
										
										//******************************************************
										//CRC2574 alterado por Vivianne Sousa 19/08/2009 - Francisco
										// Numero da OS
										cobrancaDocumentoTxt.append(Util.completaString(
												"" +emitirDocumentoCobrancaHelper.getNumeroOS(), 9));
										//	"" +emitirDocumentoCobrancaHelper.getNumeroSequenciaDocumento(), 9));
										
										//******************************************************
										// Categorias
										// Quantidades de economias por categoria: 1º RESIDÊNCIAL 2º COMERCIAL 3º INDUSTRIAL 4º PÚBLICA
										Imovel imovel = new Imovel();
										imovel.setId(emitirDocumentoCobrancaHelper.getIdImovel());
										Collection colecaoCategorias = getControladorImovel().obterQuantidadeEconomiasCategoria(imovel);
										imovel = null;
										String qtdResidencial = "";
										String qtdComercial = "";
										String qtdIndustrial = "";
										String qtdPublico = "";
										Integer totalCategoria = 0;
					
										if (colecaoCategorias != null && !colecaoCategorias.isEmpty()) {
											Iterator iteratorColecaoCategorias = colecaoCategorias.iterator();
											Categoria categoria = null;
											
											while (iteratorColecaoCategorias.hasNext()) {
												categoria = (Categoria) iteratorColecaoCategorias.next();
					
												if (categoria.getId().equals(Categoria.RESIDENCIAL)) {
													qtdResidencial = "" + categoria.getQuantidadeEconomiasCategoria();
													totalCategoria += categoria.getQuantidadeEconomiasCategoria();
												} else if (categoria.getId().equals(Categoria.COMERCIAL)) {
													qtdComercial = "" + categoria.getQuantidadeEconomiasCategoria();
													totalCategoria += categoria.getQuantidadeEconomiasCategoria();
												} else if (categoria.getId().equals(Categoria.INDUSTRIAL)) {
													qtdIndustrial = "" + categoria.getQuantidadeEconomiasCategoria();
													totalCategoria += categoria.getQuantidadeEconomiasCategoria();
												} else if (categoria.getId().equals(Categoria.PUBLICO)) {
													qtdPublico = "" + categoria.getQuantidadeEconomiasCategoria();
													totalCategoria += categoria.getQuantidadeEconomiasCategoria();
												}
											}
										}
										colecaoCategorias = null;
										
										// Residencial
										if (!qtdResidencial.equals(""))
											cobrancaDocumentoTxt.append(Util.adicionarZerosEsquedaNumero(3, qtdResidencial));
										else
											cobrancaDocumentoTxt.append(Util.completaString("", 3));
										
										// Comercial
										if (!qtdComercial.equals(""))
											cobrancaDocumentoTxt.append(Util.adicionarZerosEsquedaNumero(3, qtdComercial));
										else
											cobrancaDocumentoTxt.append(Util.completaString("", 3));
					
										// Industrial
										if (!qtdIndustrial.equals(""))
											cobrancaDocumentoTxt.append(Util.adicionarZerosEsquedaNumero(3, qtdIndustrial));
										else
											cobrancaDocumentoTxt.append(Util.completaString("", 3));
					
										// Publico
										if (!qtdPublico.equals(""))
											cobrancaDocumentoTxt.append(Util.adicionarZerosEsquedaNumero(3, qtdPublico));
										else
											cobrancaDocumentoTxt.append(Util.completaString("", 3));
										
										//******************************************************
										// Codigo da Situacao da Ligacao de Agua
										cobrancaDocumentoTxt.append(Util.completaString(
												emitirDocumentoCobrancaHelper.getIdLigacaoAguaSituacao().toString(), 1));
										
										//******************************************************
										// Codigo da Situacao da Ligacao do Esgoto
										cobrancaDocumentoTxt.append(Util.completaString(
												emitirDocumentoCobrancaHelper.getIdLigacaoEsgotoSituacao().toString(), 1));
										
										//******************************************************
										// Data de Emissao Ordem de Corte
										if (emitirDocumentoCobrancaHelper.getEmissao() != null)
											cobrancaDocumentoTxt.append(
													Util.formatarData(emitirDocumentoCobrancaHelper.getEmissao()));
										else
											cobrancaDocumentoTxt.append(Util.completaString("", 10));
										
										//******************************************************
										// Numero do Hidrometro
										String numeroHidrometro = getControladorAtendimentoPublico()
											.pesquisarNumeroHidrometroLigacaoAgua(emitirDocumentoCobrancaHelper.getIdImovel());
										
										if (numeroHidrometro != null)
											cobrancaDocumentoTxt.append(Util.completaString(numeroHidrometro, 10));
										else
											cobrancaDocumentoTxt.append(Util.completaString("", 10));
										
										//******************************************************
										// Grupo de Cobranca
										cobrancaDocumentoTxt.append(Util.completaString(
												emitirDocumentoCobrancaHelper.getIdCobrancaGrupo().toString(), 2));
										
										//******************************************************
										// Data de Emissao Aviso de Corte
										if (emitirDocumentoCobrancaHelper.getDataEmissaoPredecessor() != null)
											cobrancaDocumentoTxt.append(
													Util.formatarData(emitirDocumentoCobrancaHelper.getDataEmissaoPredecessor()));
										else
											cobrancaDocumentoTxt.append(Util.completaString("", 10));
										
										//******************************************************
										// Sequencial de impressão
										cobrancaDocumentoTxt.append(Util.completaStringComEspacoAEsquerda(
												Util.retornaSequencialFormatado(sequencialImpressao), 7));
										
										//******************************************************
										// Ciclo
										String ciclo = "";
										if (idCronogramaAtividadeAcaoCobranca != null) {
											if (cobrancaAcaoAtividadeCronograma.getCobrancaAcaoCronograma() != null) {
												if (cobrancaAcaoAtividadeCronograma.getCobrancaAcaoCronograma()
														.getCobrancaGrupoCronogramaMes() != null) {
													ciclo = Util.formatarAnoMesParaMesAno(
															cobrancaAcaoAtividadeCronograma.getCobrancaAcaoCronograma()
															.getCobrancaGrupoCronogramaMes().getAnoMesReferencia());
												}
											}
										}
										cobrancaDocumentoTxt.append(Util.completaString(ciclo, 7));
										
										//******************************************************
										// Perfil do Imovel
										cobrancaDocumentoTxt.append(Util.completaString(
												emitirDocumentoCobrancaHelper.getDescricaoImovelPerfil(), 20));
										
										//******************************************************
										// CAS - Nome da Unidade de Negocio
										String nomeUnidadeNegocio = "";
										Integer idUnidadeNegocio = getControladorLocalidade().pesquisarIdUnidadeNegocioParaLocalidade(
												emitirDocumentoCobrancaHelper.getIdLocalidade());
										
										if (idUnidadeNegocio != null) {
											FiltroUnidadeNegocio filtroUnidadeNegocio = new FiltroUnidadeNegocio();
											filtroUnidadeNegocio.adicionarParametro(new ParametroSimples(
													FiltroUnidadeNegocio.ID, idUnidadeNegocio));
											
											UnidadeNegocio unidadeNegocio = (UnidadeNegocio) Util.retonarObjetoDeColecao(
													getControladorUtil().pesquisar(filtroUnidadeNegocio, UnidadeNegocio.class.getName()));
											
											if (unidadeNegocio != null)
												nomeUnidadeNegocio = unidadeNegocio.getNome();

										}
										cobrancaDocumentoTxt.append(Util.completaString(nomeUnidadeNegocio, 50));
										
										//******************************************************
										// Quantidade de Contas em Debito
										cobrancaDocumentoTxt.append(Util.completaStringComEspacoAEsquerda(
												"" + colecaoCobrancaDocumentoItem.size(), 3));
										
										//******************************************************
										// Documentos - Dados da Conta
										/*
										 * Selecionar os itens do documento de cobrança
										 * correspondentes a conta e ordenar por ano/mês de
										 * referência da conta.
										 */
										Iterator iteratorColecaoCobrancaDocumentoItem = null;
										CobrancaDocumentoItem cobrancaDocumentoItem = null;

										int countImpressao = colecaoCobrancaDocumentoItem.size() - 11;

										/*
										 * Caso a quantidade de itens
										 * selecionados seja superior a 12
										 * [SB0001 - Calcular Valor e Data
										 * de Vencimento Anterior]
										 * 
										 * Caso contrário: Dados do primeiro
										 * e segundo itens selecionados
										 */
										if (colecaoCobrancaDocumentoItem.size() > 12) {
											CalcularValorDataVencimentoAnteriorHelper calcularValorDataVencimentoAnteriorHelper = this
													.calcularValorDataVencimentoAnterior(colecaoCobrancaDocumentoItem, 12);

											cobrancaDocumentoTxt.append("DEB.ATE");

											// Data de Vencimento da Conta
											cobrancaDocumentoTxt.append(Util.formatarData(
													calcularValorDataVencimentoAnteriorHelper.getDataVencimentoAnterior()));
											
											// Valor do Item da Conta
											cobrancaDocumentoTxt.append(Util.completaStringComEspacoAEsquerda(
													Util.formatarMoedaReal(calcularValorDataVencimentoAnteriorHelper.getValorAnterior()), 14));
										} else {
											iteratorColecaoCobrancaDocumentoItem = colecaoCobrancaDocumentoItem.iterator();
											cobrancaDocumentoItem = null;
											cobrancaDocumentoItem = (CobrancaDocumentoItem) iteratorColecaoCobrancaDocumentoItem.next();

											// Mes/Ano Referencia da conta
											cobrancaDocumentoTxt.append(Util.completaString(Util.formatarAnoMesParaMesAno(
													cobrancaDocumentoItem.getContaGeral().getConta().getReferencia()), 7));

											// Data de Vencimento da Conta
											cobrancaDocumentoTxt.append(Util.formatarData(
													cobrancaDocumentoItem.getContaGeral().getConta().getDataVencimentoConta()));
											
											// Valor do Item da Conta
											cobrancaDocumentoTxt.append(Util.completaStringComEspacoAEsquerda(
													Util.formatarMoedaReal(cobrancaDocumentoItem.getValorItemCobrado()), 14));
										}
										
										if (countImpressao <= 0) {
											iteratorColecaoCobrancaDocumentoItem = colecaoCobrancaDocumentoItem.iterator();
											cobrancaDocumentoItem = null;
											int countRegistros = 0;
											
											while (iteratorColecaoCobrancaDocumentoItem.hasNext()) {
												cobrancaDocumentoItem = (CobrancaDocumentoItem) iteratorColecaoCobrancaDocumentoItem.next();
												
												if (countRegistros > 0) {
													// Mes/Ano Referencia da conta
													cobrancaDocumentoTxt.append(Util.completaString(Util.formatarAnoMesParaMesAno(
															cobrancaDocumentoItem.getContaGeral().getConta().getReferencia()), 7));

													// Data de Vencimento da Conta
													cobrancaDocumentoTxt.append(Util.formatarData(
															cobrancaDocumentoItem.getContaGeral().getConta().getDataVencimentoConta()));
													
													// Valor do Item da Conta
													cobrancaDocumentoTxt.append(Util.completaStringComEspacoAEsquerda(
															Util.formatarMoedaReal(cobrancaDocumentoItem.getValorItemCobrado()), 14));
												}
												
												countRegistros++;
											}
											
											if (countRegistros < 12) {
												for (int x = 0; x < (12 - countRegistros); x++) {
													cobrancaDocumentoTxt.append(Util.completaString("", 31));
												}
											}
										} else {
											while (countImpressao < colecaoCobrancaDocumentoItem.size()) {
												cobrancaDocumentoItem = (CobrancaDocumentoItem) ((List) colecaoCobrancaDocumentoItem).get(countImpressao);

												//Mes/Ano Referencia da conta
												cobrancaDocumentoTxt.append(Util.completaString(Util.formatarAnoMesParaMesAno(
														cobrancaDocumentoItem.getContaGeral().getConta().getReferencia()), 7));
												
												// Data de Vencimento da Conta
												cobrancaDocumentoTxt.append(Util.formatarData(
														cobrancaDocumentoItem.getContaGeral().getConta().getDataVencimentoConta()));
												
												// Valor do Item da Conta
												cobrancaDocumentoTxt.append(Util.completaStringComEspacoAEsquerda(
														Util.formatarMoedaReal(cobrancaDocumentoItem.getValorItemCobrado()), 14));
												
												countImpressao++;
											}
										}
										
										//******************************************************
										// Valor total do Documento de Cobranca
										cobrancaDocumentoTxt.append(Util.completaStringComEspacoAEsquerda(
												Util.formatarMoedaReal(emitirDocumentoCobrancaHelper.getValorDocumento()), 14));
										
										//******************************************************
										// Representacao Numerica do Codigo de Barras
										String representacaoNumericaCodBarra = "";
										
										representacaoNumericaCodBarra = this.getControladorArrecadacao()
												.obterRepresentacaoNumericaCodigoBarra(
														5,
														emitirDocumentoCobrancaHelper.getValorDocumento(),
														localidade.getId(),
														emitirDocumentoCobrancaHelper.getIdImovel(),
														null, null, null, null,
														String.valueOf(emitirDocumentoCobrancaHelper.getNumeroSequenciaDocumento()),
														acaoCobranca.getDocumentoTipo().getId(),
														null, null, null);
										
										// Formata a representacao numerica do Codigo de Barras
										String representacaoNumericaCodBarraFormatada =
											representacaoNumericaCodBarra.substring(0, 11) + " " +
											representacaoNumericaCodBarra.substring(11, 12) + " " +
											representacaoNumericaCodBarra.substring(12, 23) + " " +
											representacaoNumericaCodBarra.substring(23, 24) + " " +
											representacaoNumericaCodBarra.substring(24, 35) + " " +
											representacaoNumericaCodBarra.substring(35, 36) + " " +
											representacaoNumericaCodBarra.substring(36, 47) + " " +
											representacaoNumericaCodBarra.substring(47, 48);
										
										cobrancaDocumentoTxt.append(representacaoNumericaCodBarraFormatada);
										
										//******************************************************
										// Codigo de Barras
										Interleaved2of5 codigoBarraIntercalado2de5 = new Interleaved2of5();
										
										// Recupera a representação númerica do código de barras
										// sem os dígitos verificadores
										String representacaoCodigoBarrasSemDigitoVerificador = 
											representacaoNumericaCodBarra.substring(0, 11) +
											representacaoNumericaCodBarra.substring(12, 23) +
											representacaoNumericaCodBarra.substring(24, 35) +
											representacaoNumericaCodBarra.substring(36, 47);
										
										cobrancaDocumentoTxt
												.append(codigoBarraIntercalado2de5.encodeValue(
														representacaoCodigoBarrasSemDigitoVerificador));
										
										//******************************************************
										// Rota
										cobrancaDocumentoTxt.append(Util.completaString(String.valueOf(emitirDocumentoCobrancaHelper.getCodigoRota()), 5));
										
										//******************************************************
										// Sequencial na Rota
										if (emitirDocumentoCobrancaHelper.getNumeroSequencialRota() != null){
											cobrancaDocumentoTxt.append(Util.completaString(String.valueOf(emitirDocumentoCobrancaHelper.getNumeroSequencialRota()), 8));
										}else{
											cobrancaDocumentoTxt.append(Util.completaString("", 8));
										}
										
										//******************************************************
										// Data de Vencimento
										if (emitirDocumentoCobrancaHelper.getNumeroDiasVencimento() != null){
											Date dataVencimento = Util.adicionarNumeroDiasDeUmaData(emitirDocumentoCobrancaHelper.getEmissao(), emitirDocumentoCobrancaHelper.getNumeroDiasVencimento());
											cobrancaDocumentoTxt.append(Util.completaString(Util.formatarData(dataVencimento),10));
										}else{
											cobrancaDocumentoTxt.append(Util.completaString("",10));
										}
										
										//******************************************************
										// Data de Validade
										if (emitirDocumentoCobrancaHelper.getNumeroDiasValidade() != null){
											Date dataValidade = Util.adicionarNumeroDiasDeUmaData(emitirDocumentoCobrancaHelper.getEmissao(), emitirDocumentoCobrancaHelper.getNumeroDiasValidade());
											cobrancaDocumentoTxt.append(Util.completaString(Util.formatarData(dataValidade),10));
										}else{
											cobrancaDocumentoTxt.append(Util.completaString("",10));
										}
										
										cobrancaDocumentoTxt.append(System.getProperty("line.separator"));
									}

									// adiciona o id da
									// conta e o sequencial
									// no para serem
									// atualizados
									mapAtualizaSequencial.put(
											emitirDocumentoCobrancaHelper.getIdDocumentoCobranca(),
											sequencialImpressao);
									
									colecaoCobrancaDocumentoItem = null;
								}
							//}
						}
						
						//mapCobrancaoDocumentoDivididas = null;
						//countOrdem++;
					//}
					//mapCobrancaDocumentoOrdenada = null;
				//}
			} else {
				flagFimPesquisa = true;
			}
			try {
				repositorioCobranca
						.atualizarSequencialCobrancaDocumentoImpressao(mapAtualizaSequencial);
			} catch (ErroRepositorioException e) {
				throw new ControladorException("erro.sistema", e);
			}
			mapAtualizaSequencial = null;
			colecaoEmitirDocumentoCobranca = null;
		}

		System.out.println("*************************************");
		System.out.println("FIM DO GERAR TXT CORTE FISICO COMPESA");
		System.out.println("*************************************");

		Date dataAtual = new Date();
		String nomeZip = "";
		// caso seja cronograma
		if (idCronogramaAtividadeAcaoCobranca != null) {
			if (idAcaoCobranca.equals(CobrancaAcao.CORTE_FISICO)) {
				nomeZip = "NOVA_ORDEM_CORTE_FISICO_GRUPO_"
						+ grupoCobranca.getId() + "_"
						+ Util.formatarData(dataAtual) + Util.formatarHoraSemDataSemDoisPontos(dataAtual);
			} else if (idAcaoCobranca.equals(CobrancaAcao.CORTE_FISICO_LIGADO_A_REVELIA)) {
				nomeZip = "NOVA_ORDEM_CORTE_FISICO_LIGADO_A_REVELIA_GRUPO_"
						+ grupoCobranca.getId() + "_"
						+ Util.formatarData(dataAtual) + Util.formatarHoraSemDataSemDoisPontos(dataAtual);
			} else if (idAcaoCobranca.equals(CobrancaAcao.CORTE_FISICO_PUBLICO)) {
				nomeZip = "NOVA_ORDEM_CORTE_FISICO_PUBLICO_GRUPO_"
						+ grupoCobranca.getId() + "_"
						+ Util.formatarData(dataAtual) + Util.formatarHoraSemDataSemDoisPontos(dataAtual);
			} else if (idAcaoCobranca.equals(CobrancaAcao.RECORTE)) {
				nomeZip = "NOVA_ORDEM_RECORTE_GRUPO_"
						+ grupoCobranca.getId() + "_"
						+ Util.formatarData(dataAtual) + Util.formatarHoraSemDataSemDoisPontos(dataAtual);
			} 
			// para o caso de eventual
		} else {
			String descricaoAbrevDocumentoTipo = "";
			if (acaoCobranca != null
					&& acaoCobranca.getDocumentoTipo() != null) {
				descricaoAbrevDocumentoTipo = acaoCobranca
						.getDocumentoTipo().getDescricaoAbreviado();
			}
			String tituloComandoEventual = cobrancaAcaoAtividadeComando
					.getDescricaoTitulo();
	
			nomeZip = descricaoAbrevDocumentoTipo + " "
					+ tituloComandoEventual + " "
					+ Util.formatarData(dataAtual) + Util.formatarHoraSemDataSemDoisPontos(dataAtual);
		}
		nomeZip = nomeZip.replace("/", "_");
		nomeZip = nomeZip.replace(" ", "_");

		try {
			System.out.println("***************************************");
			System.out.println("INICIO CRIAR ARQUIVO");
			System.out.println("***************************************");

			if (cobrancaDocumentoTxt != null
					&& cobrancaDocumentoTxt.length() != 0) {

				cobrancaDocumentoTxt.append("\u0004");

				File leitura = new File(nomeZip + ".txt");
				// criar o arquivo zip
				File compactado = new File(nomeZip + ".zip"); // nomeZip
				ZipOutputStream zos = new ZipOutputStream(new FileOutputStream(
						compactado));

				BufferedWriter out = new BufferedWriter(new OutputStreamWriter(
						new FileOutputStream(leitura.getAbsolutePath())));
				out.write(cobrancaDocumentoTxt.toString());
				out.close();
				ZipUtil.adicionarArquivo(zos, leitura);

				// close the stream
				zos.close();
				leitura.delete();
			}
			System.out.println("***************************************");
			System.out.println("FIM CRIAR ARQUIVO");
			System.out.println("***************************************");

		} catch (IOException e) {
			e.printStackTrace();
			throw new ControladorException("erro.sistema", e);
		} catch (Exception e) {
			e.printStackTrace();
			throw new ControladorException("erro.sistema", e);
		}
	}
	
	/**
	 * [UCXXXX] - Gerar Conta
	 *
	 * @author Rafael Corrêa
	 * @date 22/07/2009
	 *
	 * @param anoMes
	 * @param idFaturamentoGrupo
	 * @param idLocalidadeInicial
	 * @param idLocalidadeFinal
	 * @param codigoSetorComercialInicial
	 * @param codigoSetorComercialFinal
	 * @param codigoRotaInicial
	 * @param codigoRotaFinal
	 * @return Collection<RelatorioContaBean>
	 * @throws ControladorException
	 */
	public List<RelatorioContaBean> pesquisarDadosContaRelatorio(
			Integer anoMes, Integer idFaturamentoGrupo,
			Integer idLocalidadeInicial, Integer idLocalidadeFinal,
			Integer codigoSetorComercialInicial, Integer codigoSetorComercialFinal,
			Short codigoRotaInicial, Short codigoRotaFinal, 
			Short sequencialRotaInicial, Short sequencialRotaFinal, String indicadorEmissao, String indicadorOrdenacao) throws ControladorException {
		
		List<RelatorioContaBean> retorno = new ArrayList<RelatorioContaBean>();
		
		SistemaParametro sistemaParametro = getControladorUtil().pesquisarParametrosDoSistema();
		
		try {
			Collection<Object[]> colecaoDadosRelatorio = repositorioFaturamento.pesquisarDadosContaRelatorio(anoMes, idFaturamentoGrupo,
					idLocalidadeInicial, idLocalidadeFinal,
					codigoSetorComercialInicial, codigoSetorComercialFinal,
					codigoRotaInicial, codigoRotaFinal,
					sequencialRotaInicial, sequencialRotaFinal, indicadorEmissao, indicadorOrdenacao);
			
			colecaoDadosRelatorio = this.ordenarColecaoParaConta((List) colecaoDadosRelatorio);
		
			for (Object[] dadosRelatorio : colecaoDadosRelatorio) {
			
				Integer idImovel = null;
//				.addScalar("idImovel", Hibernate.INTEGER)
				if (dadosRelatorio[0] != null) {
					idImovel = (Integer) dadosRelatorio[0];
				}
				
				Integer idConta = null;
//				.addScalar("idConta", Hibernate.INTEGER)
				if (dadosRelatorio[1] != null) {
					idConta = (Integer) dadosRelatorio[1];
				}
				
				Integer anoMesConta = null;
//				.addScalar("anoMesConta", Hibernate.INTEGER)
				if (dadosRelatorio[2] != null) {
					anoMesConta = (Integer) dadosRelatorio[2];
				}
				
				String aguaEsgoto = "";
//				.addScalar("aguaEsgoto", Hibernate.STRING)
				if (dadosRelatorio[3] != null) {
					aguaEsgoto = (String) dadosRelatorio[3];
				}
				
				BigDecimal valorImpostos = new BigDecimal("0.00");
				if(dadosRelatorio[33] != null){
					valorImpostos = (BigDecimal) dadosRelatorio[33];
				}
				
				
				Collection<RelatorioContaDetailBean> colecaoDetail = new ArrayList<RelatorioContaDetailBean>();
				
				if (aguaEsgoto.contains("A")) {
					RelatorioContaDetailBean detail = new RelatorioContaDetailBean();
					
					Integer consumoAgua = (Integer) dadosRelatorio[29];
					BigDecimal valorAgua = (BigDecimal) dadosRelatorio[30];
					
					if(valorAgua != null && valorAgua.compareTo(new BigDecimal("0.00")) != 0){
						detail.setCodigoServico("TA");
						detail.setDescricaoServico("AGUA");
						detail.setConsumo(consumoAgua);
						detail.setValor(valorAgua);
						colecaoDetail.add(detail);
					}
			
				}
				
				if (aguaEsgoto.contains("E")) {
					RelatorioContaDetailBean detail = new RelatorioContaDetailBean();
					
					Integer consumoEsgoto = (Integer) dadosRelatorio[31];
					BigDecimal valorEsgoto = (BigDecimal) dadosRelatorio[32];
					
					if(valorEsgoto != null && valorEsgoto.compareTo(new BigDecimal("0.00")) != 0){
						detail.setCodigoServico("TE");
						detail.setDescricaoServico("ESGOTO");
						detail.setConsumo(consumoEsgoto);
						detail.setValor(valorEsgoto);
						colecaoDetail.add(detail);
					}
				}
				
				Collection<RelatorioContaDetailBean> colecaoServicos = this.getColecaoRelatorioContaServicosBean(idConta,valorImpostos);
				colecaoDetail.addAll(colecaoServicos);
				
				Collection<RelatorioContaConsumosAnterioresBean> colecaoConsumosAnteriores = null;
				
				Integer idLigacaoTipo = null;
				
				if (aguaEsgoto.contains("A")) {
					idLigacaoTipo = LigacaoTipo.LIGACAO_AGUA;
				} else {
					idLigacaoTipo = LigacaoTipo.LIGACAO_ESGOTO;
				}
				
				colecaoConsumosAnteriores = this.getColecaoRelatorioContaConsumosAnterioresBean(anoMesConta, idImovel, idLigacaoTipo, 13);
				
				RelatorioContaBean bean = new RelatorioContaBean(colecaoDetail, colecaoConsumosAnteriores);
				bean.setIdImovel(Util.retornaMatriculaImovelFormatada(idImovel));
				bean.setIdConta(idConta);
				bean.setMesAnoConta(Util.formatarAnoMesParaMesAno(anoMesConta));
				bean.setAguaEsgoto(aguaEsgoto);
				
//				.addScalar("qtdEconomias", Hibernate.SHORT)
				if (dadosRelatorio[4] != null) {
					bean.setQuantidadeEconomias((Short) dadosRelatorio[4]);
				}
//				.addScalar("codigoRota", Hibernate.SHORT)
				if (dadosRelatorio[5] != null) {
					bean.setRota((Short) dadosRelatorio[5]);
				}
//				.addScalar("seqRota", Hibernate.INTEGER)
				if (dadosRelatorio[6] != null) {
					bean.setSequencialRota((Integer) dadosRelatorio[6]);
				}
				
//				.addScalar("dataEmissao", Hibernate.DATE)
				if (dadosRelatorio[7] != null) {
					bean.setDataEmissao((Date) dadosRelatorio[7]);
				}
				
//				.addScalar("percentualEsgoto", Hibernate.BIG_DECIMAL)
				if (dadosRelatorio[8] != null) {
					bean.setPercentualEsgoto((BigDecimal) dadosRelatorio[8]);
				}
				
//				.addScalar("dataVencimento", Hibernate.DATE)
				if (dadosRelatorio[9] != null) {
					bean.setDataVencimento((Date) dadosRelatorio[9]);
				}
				
				Short digitoVerificador = null;
//				.addScalar("digitoVerificador", Hibernate.SHORT)
				if (dadosRelatorio[10] != null) {
					digitoVerificador = (Short) dadosRelatorio[10];
				}
				
				Imovel imovel = new Imovel();
				
//				.addScalar("idLocalidade", Hibernate.INTEGER)
				if (dadosRelatorio[11] != null) {
					Localidade localidade = new Localidade();
					localidade.setId((Integer) dadosRelatorio[11]);
					imovel.setLocalidade(localidade);
				}
				
				
//				.addScalar("codigoSetorComercial", Hibernate.INTEGER)
				if (dadosRelatorio[12] != null) {
					SetorComercial setorComercial = new SetorComercial();
					setorComercial.setCodigo((Integer) dadosRelatorio[12]);
					imovel.setSetorComercial(setorComercial);
				}
				
//				.addScalar("numeroQuadra", Hibernate.INTEGER)
				if (dadosRelatorio[13] != null) {
					Quadra quadra = new Quadra();
					quadra.setNumeroQuadra((Integer) dadosRelatorio[13]);
					imovel.setQuadra(quadra);
				}
				
//				.addScalar("lote", Hibernate.SHORT)
				if (dadosRelatorio[14] != null) {
					imovel.setLote((Short) dadosRelatorio[14]);
				}
				
//				.addScalar("sublote", Hibernate.SHORT)
				if (dadosRelatorio[15] != null) {
					imovel.setSubLote((Short) dadosRelatorio[15]);
				}
				
				BigDecimal valorConta = null;
//				.addScalar("valorConta", Hibernate.BIG_DECIMAL)
				if (dadosRelatorio[16] != null) {
					valorConta = (BigDecimal) dadosRelatorio[16];
					bean.setValorConta(valorConta);
				}
				
//				.addScalar("nomeUsuario", Hibernate.STRING)
				if (dadosRelatorio[35] != null) {
					
					bean.setNomeCliente((String) dadosRelatorio[35]);
				}
				else{
					
					bean.setNomeCliente(this.getControladorFaturamento().obterNomeCliente(idConta));
				}
				
//				.addScalar("cpfCnpj", Hibernate.STRING)
				if (dadosRelatorio[18] != null) {
					bean.setCpfCnpj((String) dadosRelatorio[18]);
				}
				
//				.addScalar("numeroHidrometro", Hibernate.STRING)
				if (dadosRelatorio[19] != null) {
					bean.setNumeroHidrometro((String) dadosRelatorio[19]);
				}
				
//				.addScalar("dataInstalacao", Hibernate.DATE)
				if (dadosRelatorio[20] != null) {
					bean.setDataInstalacao((Date) dadosRelatorio[20]);
				}
				
//				.addScalar("leituraAnterior", Hibernate.INTEGER)
				if (dadosRelatorio[21] != null) {
					bean.setLeituraAnterior((Integer) dadosRelatorio[21]);
				}
				
//				.addScalar("dataLeituraAnterior", Hibernate.DATE)
				if (dadosRelatorio[22] != null) {
					bean.setDataLeituraAnterior((Date) dadosRelatorio[22]);
				}
				
//				.addScalar("leituraAtual", Hibernate.INTEGER)
				if (dadosRelatorio[23] != null) {
					bean.setLeituraAtual((Integer) dadosRelatorio[23]);
				}
				
//				.addScalar("dataLeituraAtual", Hibernate.DATE)
				if (dadosRelatorio[24] != null) {
					bean.setDataLeituraAtual((Date) dadosRelatorio[24]);
				}
				
//				.addScalar("anormalidadeLeitura", Hibernate.INTEGER)
				if (dadosRelatorio[25] != null) {
					bean.setAnormalidadeLeitura(((Integer) dadosRelatorio[25]).toString());
				}
				
//				.addScalar("leiturista", Hibernate.INTEGER)
				if (dadosRelatorio[26] != null) {
					bean.setLeiturista((Integer) dadosRelatorio[26]);
				}
				
//				.addScalar("consumoFaturado", Hibernate.INTEGER)
				if (dadosRelatorio[27] != null) {
					bean.setConsumo((Integer) dadosRelatorio[27]);
				}
				
//				.addScalar("consumoMedio", Hibernate.INTEGER)
				if (dadosRelatorio[28] != null) {
					bean.setMediaConsumo(((Integer) dadosRelatorio[28]).toString());
				} else {
					bean.setMediaConsumo("0");
				}
				
				if(dadosRelatorio[34] != null){
					bean.setIndicadorDebitoConta(""+(Short) dadosRelatorio[34]);
				}
				
				String endereco = "";
				String enderecoCliente = "";
				String idCliente = "";
				
				
				/*
				 * Adicionado por: Hugo Azevedo
				 * Data: 13/09/2011
				 */
				if (sistemaParametro.getNomeAbreviadoEmpresa().equalsIgnoreCase(
						SistemaParametro.EMPRESA_COSAMA)){
					if (indicadorEmissao.equalsIgnoreCase("3")){
						FiltroClienteImovel filtroClienteImovel = new FiltroClienteImovel();
						filtroClienteImovel.adicionarCaminhoParaCarregamentoEntidade("cliente");
						filtroClienteImovel.adicionarCaminhoParaCarregamentoEntidade("imovel");
						filtroClienteImovel.adicionarCaminhoParaCarregamentoEntidade("clienteRelacaoTipo");
						filtroClienteImovel.adicionarParametro(new ParametroNulo(FiltroClienteImovel.DATA_FIM_RELACAO));
						filtroClienteImovel.adicionarParametro(new ParametroSimples(FiltroClienteImovel.CLIENTE_RELACAO_TIPO_ID, ClienteRelacaoTipo.RESPONSAVEL));
						filtroClienteImovel.adicionarParametro(new ParametroSimples(FiltroClienteImovel.IMOVEL_ID, idImovel));
						
						Collection colClienteImovel = getControladorUtil().pesquisar(filtroClienteImovel, ClienteImovel.class.getName());
						
						if (colClienteImovel != null && !colClienteImovel.isEmpty()){
							
							ClienteImovel clienteImovel = (ClienteImovel) colClienteImovel.iterator().next();
							
							enderecoCliente = getControladorEndereco().pesquisarEnderecoClienteAbreviado(clienteImovel.getCliente().getId());
							endereco = getControladorEndereco().pesquisarEnderecoFormatado(idImovel);
							idCliente = clienteImovel.getCliente().getId().toString();
						} else {
							endereco = getControladorEndereco().pesquisarEnderecoFormatado(idImovel);
						}
						
						
					} else {
						endereco = getControladorEndereco().pesquisarEnderecoFormatado(idImovel);
					}
					
					
					bean.setEndereco(endereco);
					bean.setEnderecoClienteResponsavel(enderecoCliente);
					bean.setIdClienteResponsavel(idCliente);
					
				}
				
				else{
					if (indicadorEmissao.equalsIgnoreCase("3")){
						FiltroClienteImovel filtroClienteImovel = new FiltroClienteImovel();
						filtroClienteImovel.adicionarCaminhoParaCarregamentoEntidade("cliente");
						filtroClienteImovel.adicionarCaminhoParaCarregamentoEntidade("imovel");
						filtroClienteImovel.adicionarCaminhoParaCarregamentoEntidade("clienteRelacaoTipo");
						filtroClienteImovel.adicionarParametro(new ParametroNulo(FiltroClienteImovel.DATA_FIM_RELACAO));
						filtroClienteImovel.adicionarParametro(new ParametroSimples(FiltroClienteImovel.CLIENTE_RELACAO_TIPO_ID, ClienteRelacaoTipo.RESPONSAVEL));
						filtroClienteImovel.adicionarParametro(new ParametroSimples(FiltroClienteImovel.IMOVEL_ID, idImovel));
						
						Collection colClienteImovel = getControladorUtil().pesquisar(filtroClienteImovel, ClienteImovel.class.getName());
						
						if (colClienteImovel != null && !colClienteImovel.isEmpty()){
							
							ClienteImovel clienteImovel = (ClienteImovel) colClienteImovel.iterator().next();
							
							endereco = getControladorEndereco().pesquisarEnderecoClienteAbreviado(clienteImovel.getCliente().getId());
						} else {
							endereco = getControladorEndereco().pesquisarEnderecoFormatado(idImovel);
						}
						
						
					} else {
						endereco = getControladorEndereco().pesquisarEnderecoFormatado(idImovel);
					}
					
					
					if (endereco != null) {
						bean.setEndereco(endereco);
					} else {
						bean.setEndereco("");
					}
				}
				
				bean.setInscricao(imovel.getInscricaoFormatada());
				
				Categoria categoria = getControladorImovel().obterPrincipalCategoriaImovel(idImovel);
				if (categoria != null) {
					bean.setCategoria(categoria.getDescricaoAbreviada());
				} else {
					bean.setCategoria("");
				}
				
				EmitirContaHelper emitirContaHelper = new EmitirContaHelper();
				emitirContaHelper.setIdImovel(idImovel);
				emitirContaHelper.setIdLocalidade(imovel.getLocalidade() != null? imovel.getLocalidade().getId():null);
				emitirContaHelper.setAmReferencia(anoMes);
				emitirContaHelper.setCategoriaImovel(""+categoria.getId());
				Object[] mensagemConta = getControladorFaturamento().obterMensagemConta3Partes(emitirContaHelper,sistemaParametro);
				if(mensagemConta != null && !mensagemConta.equals("")){
					bean.setMensagem1((String)mensagemConta[0]);
					bean.setMensagem2((String)mensagemConta[1]);
					bean.setMensagem3((String)mensagemConta[2]);
				}
				
				
				ImovelSubcategoria imovelSubcategoria = getControladorImovel().obterPrincipalSubcategoria(categoria.getId(), idImovel);
				if (imovelSubcategoria != null) {
					FiltroSubCategoria filtroSubcategoria = new FiltroSubCategoria();
					filtroSubcategoria.adicionarParametro(new ParametroSimples(FiltroSubCategoria.ID, imovelSubcategoria.getComp_id().getSubcategoria().getId()));
					
					Collection colecaoSubcategorias = getControladorUtil().pesquisar(filtroSubcategoria, Subcategoria.class.getName());
					Subcategoria subcategoria = (Subcategoria) Util.retonarObjetoDeColecao(colecaoSubcategorias);
					
					bean.setTarifa(subcategoria.getDescricaoAbreviada());
				} else {
					bean.setTarifa("");
				}
				
				if (bean.getDataLeituraAnterior() != null && bean.getDataLeituraAtual() != null) {
					int diasConsumo = Util.obterQuantidadeDiasEntreDuasDatas(bean.getDataLeituraAnterior(), bean.getDataLeituraAtual());
					bean.setDiasConsumo(diasConsumo);
				}
				
				IndicesAcrescimosImpontualidade iai = repositorioCobranca.pesquisarMenorIgualIndiceAcrescimoImpontualidade(anoMesConta);
				bean.setMulta(iai.getPercentualMulta());
				bean.setEncargos(iai.getPercentualJurosMora());
				
				QualidadeAgua qualidadeAgua = getControladorFaturamento().getQualidadeAgua(imovel, anoMes);
				
				if (qualidadeAgua != null) {
					bean.setTurbidez(qualidadeAgua.getNumeroIndiceTurbidez());
					bean.setCloro(qualidadeAgua.getNumeroCloroResidual());
					bean.setCor(qualidadeAgua.getNumeroIndiceCor());
					bean.setPh(qualidadeAgua.getNumeroIndicePh());
					if(qualidadeAgua.getNumeroIndiceColiformesTotais() != null) {
						if(qualidadeAgua.getNumeroIndiceColiformesTotais().compareTo(new BigDecimal("0.00")) != 0){
						 bean.setColiformesTotais((""+qualidadeAgua.getNumeroIndiceColiformesTotais()).replace(".",","));
						}else{
						 bean.setColiformesTotais("AUSENTE");	
						}
					} else {
						bean.setColiformesTotais("AUSENTE");	
					}
					if(qualidadeAgua.getNumeroIndiceColiformesFecais() != null){
						if(qualidadeAgua.getNumeroIndiceColiformesFecais().compareTo(new BigDecimal("0.00")) != 0){
						  bean.setColiformesFecais((""+qualidadeAgua.getNumeroIndiceColiformesFecais()).replace(".",","));
						}else{
						  bean.setColiformesFecais("AUSENTE");	
						}
					} else {
						bean.setColiformesFecais("AUSENTE");	
					}
					bean.setAlcalinidade(qualidadeAgua.getNumeroIndiceAlcalinidade());
				}
				
				
				
				
				// Representação numérica código de barras
				String representacaoNumericaCodBarra = null;

				representacaoNumericaCodBarra = this.getControladorArrecadacao()
						.obterRepresentacaoNumericaCodigoBarra(3, valorConta,
								imovel.getLocalidade().getId(),
								idImovel, Util.formatarAnoMesParaMesAnoSemBarra(anoMes),
								new Integer(digitoVerificador.toString()), null, null, null, null,
								null, null, null);

				String representacaoNumericaCodBarraSemDigito = "";
				String representacaoNumericaCodBarraFormatada = "";
				if (representacaoNumericaCodBarra != null) {
					// Formata a representação númerica do código de
					// barras
					representacaoNumericaCodBarraFormatada = representacaoNumericaCodBarra
							.substring(0, 11)
							+ "-"
							+ representacaoNumericaCodBarra.substring(11, 12)
							+ " "
							+ representacaoNumericaCodBarra.substring(12, 23)
							+ "-"
							+ representacaoNumericaCodBarra.substring(23, 24)
							+ " "
							+ representacaoNumericaCodBarra.substring(24, 35)
							+ "-"
							+ representacaoNumericaCodBarra.substring(35, 36)
							+ " "
							+ representacaoNumericaCodBarra.substring(36, 47)
							+ "-" + representacaoNumericaCodBarra.substring(47, 48);

					representacaoNumericaCodBarraSemDigito = representacaoNumericaCodBarra
							.substring(0, 11)
							+ representacaoNumericaCodBarra.substring(12, 23)
							+ representacaoNumericaCodBarra.substring(24, 35)
							+ representacaoNumericaCodBarra.substring(36, 47);
									
					bean.setRepresentacaoNumericaCodBarraFormatada(representacaoNumericaCodBarraFormatada);
					
					if ( sistemaParametro.getCodigoEmpresaFebraban().equals(SistemaParametro.CODIGO_EMPRESA_FEBRABAN_COSAMA) 
							&& idFaturamentoGrupo.toString().equals("63") ) {
						bean.setRepresentacaoNumericaCodBarraSemDigito(representacaoNumericaCodBarraSemDigito);
						bean.setIndicadorNaoGeraCodigoDeBarras("naoGeraContas");
						
					} else {
						bean.setRepresentacaoNumericaCodBarraSemDigito(representacaoNumericaCodBarraSemDigito);
						bean.setIndicadorNaoGeraCodigoDeBarras("geraContas");
					}
					
				}
				
				retorno.add(bean);
			}
		
		} catch (ErroRepositorioException ex) {
			throw new ControladorException("erro.sistema", ex);
		}
		
		return retorno;
	}
	
	private Collection ordenarColecaoParaConta(List colecaoDadosConta) {
		Collection retorno = new ArrayList();
		
		int count = 0;
		
//		while (colecaoDadosConta.size() > count+1000) {
//			boolean primeiraVez = true;
//			while (primeiraVez || count % 500 != 0) {
//				primeiraVez = false;
//				retorno.add(colecaoDadosConta.get(count));
//				retorno.add(colecaoDadosConta.get(count + 500));
//				count++;
//			}
//			count = count + 500;
//		}
		
		int metadeRestante = 0;
		int qtdRestante =  colecaoDadosConta.size() - retorno.size();
		
		if (qtdRestante % 2 == 0) {
			metadeRestante = qtdRestante / 2; 
		} else {
			metadeRestante = (qtdRestante + 1) / 2;
		}
		
		while (qtdRestante > 0) {
			retorno.add(colecaoDadosConta.get(count));
			qtdRestante--;
			
			if (qtdRestante > 0) {
				retorno.add(colecaoDadosConta.get(count + metadeRestante));
				qtdRestante--;
			}
			
			count++;
		}
		
		return retorno;
	}
	
	private Collection<RelatorioContaConsumosAnterioresBean> getColecaoRelatorioContaConsumosAnterioresBean(Integer anoMesConta, Integer idImovel, Integer idLigacaoTipo, int numeroMeses) throws ControladorException {
		Collection<RelatorioContaConsumosAnterioresBean> retorno = new ArrayList<RelatorioContaConsumosAnterioresBean>();
		
		Integer anoMesFinal = Util.subtrairMesDoAnoMes(anoMesConta, numeroMeses);
		
		Collection<Object[]> colecaoDadosConsumo = getControladorMicromedicao().obterConsumosAnterioresAnormalidadeDoImovel(idImovel, anoMesFinal, anoMesConta, idLigacaoTipo);
			
		for (Object[] dadosConsumo : colecaoDadosConsumo) {
			
			if (dadosConsumo != null) {  
				RelatorioContaConsumosAnterioresBean bean = new RelatorioContaConsumosAnterioresBean();
			
				if (dadosConsumo[0] != null) {
					bean.setConsumo((Integer) dadosConsumo[0]);
				}
			
				if (dadosConsumo[2] != null) {
					bean.setMesAno(Util.formatarAnoMesParaMesAno((Integer) dadosConsumo[2]));
				}
			
				retorno.add(bean);
			}
			
		}
		
		return retorno;
	}
	
	private Collection<RelatorioContaDetailBean> getColecaoRelatorioContaServicosBean(Integer idConta,BigDecimal valorImpostos) throws ControladorException {
		Collection<RelatorioContaDetailBean> retorno = new ArrayList<RelatorioContaDetailBean>();
		
		try {
			
			Conta conta = new Conta();
			conta.setId(idConta);
			
			Collection<Object[]> colecaoDadosServicos = repositorioFaturamento.pesquisarDebitoCobradoConta(idConta);
			Collection<CreditoRealizado> colecaoDadosCreditos = repositorioFaturamento.pesquisarCreditoRealizado(conta);
			
			int quantidadeLinhasTotal =  0;
			if(valorImpostos.compareTo(new BigDecimal("0.00")) != 0){
				quantidadeLinhasTotal = 13;
			}else{
				quantidadeLinhasTotal = 15;
			}
			
			int quantidadeCreditosAExibir = 0;
			
			if (colecaoDadosCreditos.size() > 3) {
				quantidadeCreditosAExibir = 3;
			} else {
				quantidadeCreditosAExibir = colecaoDadosCreditos.size(); 
			}
			
			int quantidadeLinhas = 0;
			
			String descricaoOutros = "OUTROS SERVIÇOS ";
			BigDecimal valor = new BigDecimal("0.00");
			RelatorioContaDetailBean bean = null;
			
			for (Object[] dadosServico : colecaoDadosServicos) {
				
				if (dadosServico != null) {  
					quantidadeLinhas = quantidadeLinhas + 1;
					
					if(quantidadeLinhas <= quantidadeLinhasTotal - quantidadeCreditosAExibir){
						
						bean = new RelatorioContaDetailBean();
						String descricao = "";
	
						if (dadosServico[0] != null) {
							bean.setValor((BigDecimal) dadosServico[0]);
						}
						
						Short numeroPrestacoesDebito = (Short) dadosServico[1];
						Short numeroPrestacoes = (Short) dadosServico[2];
						Integer anoMesReferencia = (Integer) dadosServico[3];
						if(anoMesReferencia == null || anoMesReferencia.equals("")){
							anoMesReferencia = (Integer) dadosServico[7];
						}
						Short numeroParcelasBonus = new Short("0");
						
						if (dadosServico[4] != null) {
							bean.setCodigoServico(((Integer) dadosServico[4]).toString());
						}
						
						if (dadosServico[5] != null) {
							descricao = (String) dadosServico[5];						
						}
	
						if (dadosServico[6] != null) {
							numeroParcelasBonus = (Short) dadosServico[6];
						}
	
						int totalPrestacoes = numeroPrestacoes.intValue() - numeroParcelasBonus.intValue(); 
						
						descricao += " " + Util.formatarAnoMesParaMesAno(anoMesReferencia) + " (" + numeroPrestacoesDebito + "/" + totalPrestacoes + ")";
	
						bean.setDescricaoServico(descricao);
					
						retorno.add(bean);
					}else{
						if (dadosServico[0] != null) {
							valor = valor.add((BigDecimal) dadosServico[0]);
						}
						
					}
				}
				
			}
			
			if(valor.compareTo(new BigDecimal("0.00")) != 0){
				bean = new RelatorioContaDetailBean();
				bean.setDescricaoServico(descricaoOutros);
				bean.setValor(valor);
				retorno.add(bean);
			}
			
			valor = new BigDecimal("0.00");
			descricaoOutros = "OUTROS CRÉDITOS";
			
			for (CreditoRealizado credito : colecaoDadosCreditos) {
				quantidadeLinhas = quantidadeLinhas + 1;
				
				if(quantidadeLinhas <= quantidadeLinhasTotal){
					
					bean = new RelatorioContaDetailBean();
					String descricao = "";

					bean.setValor(credito.getValorCredito());
					
					Short numeroPrestacoesCredito = credito.getNumeroPrestacaoCredito();
					Short numeroPrestacoes = credito.getNumeroPrestacao();
					Integer anoMesReferencia = credito.getAnoMesReferenciaCredito();
					if(anoMesReferencia == null || anoMesReferencia.equals("")){
						anoMesReferencia = credito.getAnoMesCobrancaCredito();
					}
					Short numeroParcelasBonus = new Short("0");
					
					bean.setCodigoServico(credito.getCreditoTipo().getId().toString());
					
					descricao = credito.getCreditoTipo().getDescricao();						

					if (credito.getNumeroParcelaBonus() != null) {
						numeroParcelasBonus = credito.getNumeroParcelaBonus();
					}

					int totalPrestacoes = numeroPrestacoes.intValue() - numeroParcelasBonus.intValue(); 
					
					descricao += " " + Util.formatarAnoMesParaMesAno(anoMesReferencia) + " (" + numeroPrestacoesCredito + "/" + totalPrestacoes + ")";

					bean.setDescricaoServico(descricao);
				
					retorno.add(bean);
				}else{
					valor = valor.add(credito.getValorCredito());
				}
			}
			
			if(valor.compareTo(new BigDecimal("0.00")) != 0){
				bean = new RelatorioContaDetailBean();
				bean.setDescricaoServico(descricaoOutros);
				bean.setValor(valor);
				retorno.add(bean);
			}
			
			if(valorImpostos.compareTo(new BigDecimal("0.00")) != 0){
				//linha 1
				bean = new RelatorioContaDetailBean();
				bean.setDescricaoServico("DEDUCAO LEI FEDERAL N.9430 DE 27/12/1996");
				retorno.add(bean);
				
				//linha 2
				bean = new RelatorioContaDetailBean();
				
				Collection colecaoParmsImpostosDeduzidos = repositorioFaturamento
				.pesquisarParmsContaImpostosDeduzidos(idConta);
				
				StringBuilder descricaoAbreviadaImposto = new StringBuilder();
				BigDecimal valorImpostosTotal = new BigDecimal("0.00");
				// verifica se a coleção é diferente de nulo
				if (colecaoParmsImpostosDeduzidos != null
						&& !colecaoParmsImpostosDeduzidos.isEmpty()) {
					Iterator iteratorParmsImpostosDeduzidos = colecaoParmsImpostosDeduzidos
							.iterator();
					while (iteratorParmsImpostosDeduzidos.hasNext()) {
						Object[] parmsImpostoDeduzido = (Object[]) iteratorParmsImpostosDeduzidos
								.next();
						String descricaoTipoImposto = "";
						if (parmsImpostoDeduzido[0] != null) {
							descricaoTipoImposto = (String) parmsImpostoDeduzido[0];
						}
						String percentualAliquota = "";
						if (parmsImpostoDeduzido[1] != null) {
							percentualAliquota = Util
									.formatarMoedaReal((BigDecimal) parmsImpostoDeduzido[1]);
						}
						BigDecimal valorImpostosDeduzidos = null;
						if (parmsImpostoDeduzido[2] != null) {
							valorImpostosDeduzidos = (BigDecimal) parmsImpostoDeduzido[2];
						}
						// concatena a descrição abreviada do tipo de imposto com o
						// precentual de aliquota
						descricaoAbreviadaImposto.append(descricaoTipoImposto + "-"
								+ percentualAliquota + "%");
						// Completa com espaços em branco
						descricaoAbreviadaImposto.append(" ");
						// adiciona o valor dos impostos
						valorImpostosTotal = valorImpostosTotal.add(valorImpostosDeduzidos);
					}
				}
				
				bean.setDescricaoServico(descricaoAbreviadaImposto.toString());
				bean.setValor(valorImpostosTotal);
				retorno.add(bean);

			}
			
		} catch (ErroRepositorioException e) {
			throw new ControladorException("erro.sistema", e);
		}
			
		return retorno;
	}

	/**
	 * 
	 * UC0905 - Gerar Relatario Acompanhamento Acao Cobrança
	 * 
	 * 
	 * @author Genival Barbosa
	 * @date 26/08/2009
	 * 
	 * @param RelatorioAcompanhamentoAcoesCobrancaHelper helper
	 *            
	 * @return Lista de acoes de cobranca
	 */
	public List consultarColecaoAcaoCobranca(RelatorioAcompanhamentoAcoesCobrancaHelper helper) throws ControladorException {
		
		List colecaoAcaoCobranca;
		try {				
		
			colecaoAcaoCobranca = 
			this.repositorioCobranca.consultarColecaoAcaoCobranca(helper);
		} catch (ErroRepositorioException e) {
			e.printStackTrace();
			throw new ControladorException("erro.sistema", e);
		}
	
		return colecaoAcaoCobranca;
	}
	
	/**
	 * retorna conjunto de CAAC_ID(ações do ciclo) selecionados
	 * [UC0258] Filtrar Documentos de Cobrança
	 * 
	 * @author Anderson Italo
	 * @data 03/08/2009
	 */
	public Collection<Integer> pesquisarIdsAcoesCiclo(Collection<Integer> idsAcao, 
								Integer anoMesReferencia) throws ControladorException{
		Collection<Integer> idsAcoesEncontradas = new ArrayList();
		
		try {		
		  Collection colecaoCobrancaAcaoAtividadeCronograma = null;
		  
		  colecaoCobrancaAcaoAtividadeCronograma = this.repositorioCobranca.pesquisarAcoesCiclo(idsAcao, anoMesReferencia);
		  
		  Iterator colecaoIterator = colecaoCobrancaAcaoAtividadeCronograma.iterator();
		  
		  while (colecaoIterator.hasNext()){
			  Integer idCobrancaAcaoAtividadeCronograma = (Integer)colecaoIterator.next();
			  idsAcoesEncontradas.add(idCobrancaAcaoAtividadeCronograma);
		  }
		} catch (ErroRepositorioException e) {
			e.printStackTrace();
			throw new ControladorException("erro.sistema", e);
		}	
			
		return idsAcoesEncontradas;
		
	}
	
	/**
	 * Este método está de acordo com o UC[0258]Filtrar Documento de Cobranca,
	 * é utilizado pelo relatório filtrar documentos de cobrança
	 * 
	 * @author Anderson Italo
	 * @date 19/08/2009
	 *
	 * @param FiltrarDocumentoCobrancaHelper filtro
	 * @return List
	 * @throws ControladorException
	 */
	public List filtrarCobrancaDocumento(FiltrarDocumentoCobrancaHelper filtro)
			throws ControladorException{
		
		List retorno = null;
		
		try {
			retorno = this.repositorioCobranca.filtrarCobrancaDocumento(filtro);
		} catch (ErroRepositorioException e) {
			e.printStackTrace();
			throw new ControladorException("erro.sistema", e);
		}	
			
		return retorno;
		
	}
	
	/**
	 * Este método está de acordo com o UC[0258]Filtrar Documento de Cobranca,
	 * é utilizado pelo relatório filtrar documentos de cobrança para totalizar
	 * os registros filtrados
	 * 
	 * @author Anderson Italo
	 * @date 19/08/2009
	 *
	 * @param FiltrarDocumentoCobrancaHelper filtro
	 * @return Integer
	 * @throws ControladorException
	 */
	public Integer filtrarCobrancaDocumentoCount(FiltrarDocumentoCobrancaHelper filtro)
			throws ControladorException{
		
		Integer retorno = 0;
		
		try {
			retorno = this.repositorioCobranca.filtrarCobrancaDocumentoCount(filtro);
		} catch (ErroRepositorioException e) {
			e.printStackTrace();
			throw new ControladorException("erro.sistema", e);
		}	
			
		return retorno;
		
	}
	
	/**
	 * Este método está de acordo com o [UC0906] Gerar Relatório de Acompanhamento das Supressões, 
	 * Religações e Reestabelecimentos. É utilizado pelo relatório filtrar os registros do relatorio
	 * 
	 * @author Anderson Italo
	 * @date 28/08/2009
	 *
	 * @param FiltroSupressoesReligacoesReestabelecimentoHelper filtro
	 * @return List
	 * @throws ErroRepositorioException
	 */
	public List filtrarSupressoesReligacoesReestabelecimentos(FiltroSupressoesReligacoesReestabelecimentoHelper filtro)
		throws ControladorException{

		List retorno = null;

		try {
			retorno = this.repositorioCobranca.filtrarSupressoesReligacoesReestabelecimentos(filtro);
		} catch (ErroRepositorioException e) {
			e.printStackTrace();
			throw new ControladorException("erro.sistema", e);
		}	
			
		return retorno;
	}

	
	/**
	 * 
	 * @author Arthur Carvalho
	 * @date 14/09/2009
	 *
	 * @param FiltroSupressoesReligacoesReestabelecimentoHelper filtro
	 * @return Collection
	 * @throws ErroRepositorioException
	 */
	public Collection pesquisarParcelamentosSituacaoNormal(Integer idImovel)
		throws ControladorException{

		Collection retorno = null;

		try {
			retorno = this.repositorioCobranca.pesquisarParcelamentosSituacaoNormal(idImovel);
		} catch (ErroRepositorioException e) {
			e.printStackTrace();
			throw new ControladorException("erro.sistema", e);
		}	
			
		return retorno;
	}
	
	/**
	 * Este método está de acordo com o UC[0258]Filtrar Documento de Cobranca
	 * 
	 * @author Anderson Italo
	 * @date 11/09/2009
	 *
	 * @param FiltrarDocumentoCobrancaHelper filtro
	 * @return Collection<CobrancaDocumento>
	 * @throws ControladorException
	 */
	public Collection<CobrancaDocumento> consultarCobrancaDocumento(
			FiltrarDocumentoCobrancaHelper filtro) throws ControladorException{
		
		Collection<CobrancaDocumento> documentosCobrancaEncontrados = new ArrayList();
		
		try {		
			List objetosEncontrados = null;
			Object obj = null;
			Object[] dados = null;
			CobrancaDocumento cobrancaDocumento = null;
			Imovel imovel = null;
			CobrancaAcao cobrancaAcao = null;
			DocumentoEmissaoForma documentoEmissaoForma = null;
			DocumentoTipo documentoTipo = null;
			Empresa empresa = null;
			
			objetosEncontrados = this.repositorioCobranca.consultarDocumentosCobranca(filtro);
			
			if (objetosEncontrados != null){
				for (int i = 0; i < objetosEncontrados.size(); i++) {
					obj = objetosEncontrados.get(i);
					
					if (obj instanceof Object[]) {
						dados = (Object[]) obj;
						cobrancaDocumento = new CobrancaDocumento();
						
						
						cobrancaDocumento.setId(new Integer(dados[0].toString()));
						
						//imovel
						if (dados[1] != null && !dados[1].toString().equals("")){
							imovel = new Imovel();
							imovel.setId(new Integer(dados[1].toString()));
							cobrancaDocumento.setImovel(imovel);
						}
						
						//ação de cobrança
						if (dados[2] != null && !dados[2].toString().equals("")){
							cobrancaAcao = new CobrancaAcao();
							cobrancaAcao.setId(new Integer(dados[2].toString()));
							cobrancaAcao.setDescricaoCobrancaAcao(dados[3].toString());
							cobrancaDocumento.setCobrancaAcao(cobrancaAcao);
						}
						
						//data de emissão
						if (dados[4] != null && !dados[4].toString().equals("")){
							
							String ano = dados[4].toString().substring(0,4);
							String mes = dados[4].toString().substring(5,7);
							String dia = dados[4].toString().substring(8,10);
							String hora = dados[4].toString().substring(11, dados[4].toString().length()-1);
							
							String dataFormatada = dia + "/" + mes + "/" + ano + " " + hora;
							
							cobrancaDocumento.setEmissao(Util.converteStringParaDateHora(dataFormatada));
						}
						
						//forma de emissão
						documentoEmissaoForma = new DocumentoEmissaoForma();
						documentoEmissaoForma.setId(new Integer(dados[5].toString()));
						documentoEmissaoForma.setDescricaoDocumentoEmissaoForma(dados[6].toString());
						cobrancaDocumento.setDocumentoEmissaoForma(documentoEmissaoForma);
						
						//tipo do documento
						documentoTipo = new DocumentoTipo();
						documentoTipo.setId(new Integer(dados[7].toString()));
						documentoTipo.setDescricaoDocumentoTipo(dados[8].toString());
						cobrancaDocumento.setDocumentoTipo(documentoTipo);
						
						//empresa
						if (dados[9] != null && !dados[9].toString().equals("")){
							empresa = new Empresa();
							empresa.setId(new Integer(dados[9].toString()));
							empresa.setDescricaoAbreviada(dados[10].toString());
							cobrancaDocumento.setEmpresa(empresa);
						}
						
						//valor do documento
						if (dados[11] != null && !dados[11].toString().equals("")){
							cobrancaDocumento.setValorDocumento(new BigDecimal(dados[11].toString()));
						}
						
						documentosCobrancaEncontrados.add(cobrancaDocumento);
					}
				}
			}
			
		} catch (ErroRepositorioException e) {
			e.printStackTrace();
			throw new ControladorException("erro.sistema", e);
		}	
		
		return documentosCobrancaEncontrados;

	}
	
	/**
	 * [UC0959] Gerar Arquivo Texto de Pagamentos das Contas em Cobrança por Empresa
	 * 
	 * @author: Hugo Amorim
	 * @date: 05/10/2009
	 */
	public void gerarArquivoTextoPagamentosContasEmCobrancaEmpresa(
			Integer idEmpresa, Integer referenciaInicial,
			Integer referenciaFinal, int idFuncionalidadeIniciada,
			Integer idUnidadeNegocio) throws ControladorException {

		int idUnidadeIniciada = 0;
		ZipOutputStream zos = null;
		BufferedWriter out = null;

		try {
			// -------------------------
			// Registrar o início do processamento da Unidade de
			// Processamento do Batch
			// -------------------------

			idUnidadeIniciada = getControladorBatch()
					.iniciarUnidadeProcessamentoBatch(idFuncionalidadeIniciada,
							UnidadeProcessamento.UNIDADE_NEGOCIO,
							idUnidadeNegocio);

			// Variáveis para a paginação da pesquisa
			// ========================================================================
			boolean flagTerminou = false;
			final int quantidadeRegistros = 5000;
			int numeroIndice = 0;
			// ========================================================================

			Collection colecaoDadosTxt = null;

			String nomeArquivo = "pagamentos_contas_cobranca_empresa_"
					+ idEmpresa + "_"
					+ Util.formatarDataComTracoAAAAMMDD(new Date()) + "_"
					+ Util.formatarDataHHMM(new Date()) + "_" + idUnidadeNegocio+"";

			// criar o arquivo zip
			File compactado = new File(nomeArquivo + ".zip"); // nomeZip
			zos = new ZipOutputStream(new FileOutputStream(compactado));

			File leitura = new File(nomeArquivo + ".txt");

			out = new BufferedWriter(new OutputStreamWriter(
					new FileOutputStream(leitura.getAbsolutePath())));

			while (!flagTerminou) {

				colecaoDadosTxt = repositorioCobranca
						.pesquisarDadosArquivoTextoPagamentosContasCobrancaEmpresa(
								idEmpresa, referenciaInicial, referenciaFinal,
								quantidadeRegistros, numeroIndice,
								idUnidadeNegocio);

				if (colecaoDadosTxt != null && !colecaoDadosTxt.isEmpty()) {

					Iterator colecaoDadosTxtIterator = colecaoDadosTxt
							.iterator();

					while (colecaoDadosTxtIterator.hasNext()) {

						GerarArquivoTextoPagamentosContasCobrancaEmpresaHelper helper = 
							new GerarArquivoTextoPagamentosContasCobrancaEmpresaHelper();

						StringBuilder arquivoTxt = new StringBuilder();

						// cria um array de objetos para pegar os parametros
						// de retorno da pesquisa
						Object[] arraydadosTxt = (Object[]) colecaoDadosTxtIterator
								.next();

						this.montarDadosGerarArquivoTextoPagamentosContasEmCobrancaEmpresa(
										arraydadosTxt, helper);

						this.montarArquivoTextoPagamentosContasEmCobrancaEmpresa(
										arquivoTxt, helper);

						arquivoTxt.append(System.getProperty("line.separator"));

						if (arquivoTxt != null && arquivoTxt.length() != 0) {

							out.write(arquivoTxt.toString());
							out.flush();

						}

						helper = null;
					}
				}

				// Incrementa o nº do indice da páginação
				numeroIndice = numeroIndice + quantidadeRegistros;

				/**
				 * Caso a coleção de dados retornados for menor que a quantidade
				 * de registros seta a flag indicando que a paginação terminou.
				 */
				if (colecaoDadosTxt == null
						|| colecaoDadosTxt.size() < quantidadeRegistros) {

					flagTerminou = true;
				}

				if (colecaoDadosTxt != null) {
					colecaoDadosTxt.clear();
					colecaoDadosTxt = null;
				}
			}

			ZipUtil.adicionarArquivo(zos, leitura);
			out.close();
			leitura.delete();

			getControladorBatch().encerrarUnidadeProcessamentoBatch(null,
					idUnidadeIniciada, false);

		} catch (ErroRepositorioException e) {
			e.printStackTrace();
			getControladorBatch().encerrarUnidadeProcessamentoBatch(e,
					idUnidadeIniciada, true);
			throw new EJBException(e);

		} catch (IOException e) {
			e.printStackTrace();
			getControladorBatch().encerrarUnidadeProcessamentoBatch(e,
					idUnidadeIniciada, true);
		} finally {
			IoUtil.fecharStream(out);
			IoUtil.fecharStream(zos);
		}
	}
	
	/**
	 * [UC0959] Gerar Arquivo Texto de Pagamentos das Contas em Cobrança por
	 * Empresa
	 * 
	 * @author: Hugo Amorim
	 * @date: 05/10/2009
	 */
	private void montarDadosGerarArquivoTextoPagamentosContasEmCobrancaEmpresa(
			Object[] arraydadosTxt,
			GerarArquivoTextoPagamentosContasCobrancaEmpresaHelper helper) {
		//Matricula
		if (arraydadosTxt[0] != null) {
			helper.setMatricula((Integer) (arraydadosTxt[0]));
		}
		// Nome Cliente
		if (arraydadosTxt[1] != null) {
			helper.setNomeClienteConta((String) (arraydadosTxt[1]));
		}

		// Referencia Conta
		if (arraydadosTxt[2] != null) {
			helper.setReferenciaConta((Integer) (arraydadosTxt[2]));
		}

		// Valor Conta
		if (arraydadosTxt[3] != null) {
			helper.setValorConta((BigDecimal) (arraydadosTxt[3]));
		}

		// Referencia Pagamento
		if (arraydadosTxt[4] != null) {
			helper.setReferenciaPagamento((Integer) (arraydadosTxt[4]));
		}
		//Tipo Pagamento
		if (arraydadosTxt[5] != null) {
			helper.setTipoPagamento((Integer) (arraydadosTxt[5]));
		}
		// Numero de Parcelas
		if (arraydadosTxt[6] != null) {
			helper.setNumeroParcelas((Integer) (arraydadosTxt[6]));
		}

		// Numero de Parcelas Total
		if (arraydadosTxt[7] != null) {
			helper.setNumeroParcelasTotal((Integer) (arraydadosTxt[7]));
		}

		// Valor Pagamento Principal
		if (arraydadosTxt[8] != null) {
			helper.setValorPagamentoPrincipal((BigDecimal) (arraydadosTxt[8]));
		}

		// Valor Encargos
		if (arraydadosTxt[9] != null) {
			helper.setValorEncargos((BigDecimal) (arraydadosTxt[9]));
		}

		// Percentual Empresa
		if (arraydadosTxt[10] != null) {
			helper.setPercentualEmpresa((BigDecimal) (arraydadosTxt[10]));
		}
		// id Unidade
		if (arraydadosTxt[11] != null) {
			helper.setIdUnidadeNegocio((Integer) (arraydadosTxt[11]));
		}

		// nome Unidade
		if (arraydadosTxt[12] != null) {
			helper.setNomeUnidadeNegocio((String) (arraydadosTxt[12]));
		}

		// id Localidade
		if (arraydadosTxt[13] != null) {
			helper.setIdLocalidade((Integer) (arraydadosTxt[13]));
		}

		// nome Localidade
		if (arraydadosTxt[14] != null) {
			helper.setNomeLocalidade((String) (arraydadosTxt[14]));
		}
		// Quadra
		if (arraydadosTxt[15] != null) {
			helper.setIdQuadra((Integer) (arraydadosTxt[15]));
		}
		// Lote
		if (arraydadosTxt[16] != null) {
			helper.setLote((Integer) (arraydadosTxt[16]));
		}
		// SubLote
		if (arraydadosTxt[17] != null) {
			helper.setSubLote((Integer) (arraydadosTxt[17]));
		}
		// Codigo Rota
		if (arraydadosTxt[18] != null) {
			helper.setCodigoRota((Integer) (arraydadosTxt[18]));
		}
		// Sequecial Rota
		if (arraydadosTxt[19] != null) {
			helper.setSequencialRota((Integer) (arraydadosTxt[19]));
		}
		//Codigo Setor
		if (arraydadosTxt[20] != null) {
			helper.setIdSetor((Integer) (arraydadosTxt[20]));
		}
		// Data Pagamento
		if (arraydadosTxt[21] != null) {
			helper.setDataPagamento((Date) (arraydadosTxt[21]));
		}
		

		
		//Valor Pagamento Total
		BigDecimal valorPagamentoTotal = Util.somaBigDecimal(helper.getValorPagamentoPrincipal(),helper.getValorEncargos());
		helper.setValorPagamentoTotal(valorPagamentoTotal);

		//Valor Pagamento Empresa
		BigDecimal result = helper.getValorPagamentoTotal().multiply(helper.getPercentualEmpresa());
		result = result.setScale(2,BigDecimal.ROUND_HALF_UP);
		BigDecimal valorPagamentoEmpresa = result.divide(new BigDecimal("100"));
		valorPagamentoEmpresa = valorPagamentoEmpresa.setScale(2,BigDecimal.ROUND_HALF_UP);
		helper.setValorPagamentoEmpresa(valorPagamentoEmpresa);					

		
	}
	
	/**
	 * [UC0959] Gerar Arquivo Texto de Pagamentos das Contas em Cobrança por Empresa
	 * 
	 * @author: Hugo Amorim
	 * @date: 05/10/2009
	 */
	private void montarArquivoTextoPagamentosContasEmCobrancaEmpresa(
			StringBuilder arquivoTxt,
			GerarArquivoTextoPagamentosContasCobrancaEmpresaHelper helper) {

		// Matricula tam 09
		if (helper.getMatricula() != null) {
			arquivoTxt.append(Util.truncarString(helper.getMatricula()
					.toString(),9)+ ";");
		} else {
			arquivoTxt.append(";");
		}
		// Nome Cliente tam 40
		if (helper.getNomeClienteConta() != null) {
			arquivoTxt.append(Util.truncarString(helper.getNomeClienteConta(), 40)+";");
		} else {
			arquivoTxt.append(";");
		}
		// Referencia da Conta tam 7
		if (helper.getReferenciaConta() != null) {
			arquivoTxt.append(Util.formatarAnoMesParaMesAno(helper.getReferenciaConta())+";");
		} else {
			arquivoTxt.append(";");
		}
		// Valor da Conta tam 15
		if (helper.getValorConta() != null) {
			arquivoTxt.append(Util.truncarString(
						Util.formatarBigDecimalParaString(helper.getValorConta()),15)+";");
		} else {
			arquivoTxt.append(";");
		}
		// Referencia da Pagamento tam 7
		if (helper.getReferenciaPagamento() != null) {
			arquivoTxt.append(Util.formatarAnoMesParaMesAno(helper.getReferenciaPagamento())+";");
		} else {
			arquivoTxt.append(";");
		}
		// Tipo da Pagamento tam 1
		if (helper.getTipoPagamento() != null) {
			arquivoTxt.append(Util.truncarString(helper.getTipoPagamento().toString(),1)+";");
		} else {
			arquivoTxt.append(";");
		}
		// Numero de Parcelas tam 2
		if (helper.getNumeroParcelas() != null) {
			arquivoTxt.append(Util.truncarString(helper.getNumeroParcelas().toString(),2)+";");
		} else {
			arquivoTxt.append(";");
		}
		// Numero de Parcelas Total tam 2
		if (helper.getNumeroParcelasTotal() != null) {
			arquivoTxt.append(Util.truncarString(helper.getNumeroParcelasTotal().toString(),2)+";");
		} else {
			arquivoTxt.append(";");
		}
		// Valor da Conta tam 15
		if (helper.getValorPagamentoPrincipal() != null) {
			arquivoTxt.append(Util.truncarString(
					Util.formatarBigDecimalParaString(helper.getValorPagamentoPrincipal()),15)+";");
		} else {
			arquivoTxt.append(";");
		}
		// Valor da Conta tam 15
		if (helper.getValorEncargos() != null) {
			arquivoTxt.append(Util.truncarString(
				Util.formatarBigDecimalParaString(helper.getValorEncargos()),15)+";");
		} else {
			arquivoTxt.append(";");
		}
		// Valor da Pagamento Total tam 15
		if (helper.getValorPagamentoTotal() != null) {
			arquivoTxt.append(Util.truncarString(
				Util.formatarBigDecimalParaString(helper.getValorPagamentoTotal()),15)+";");
		} else {
			arquivoTxt.append(";");
		}
		// Valor da Percentual Empresa tam 5
		if (helper.getPercentualEmpresa() != null) {
			arquivoTxt.append(Util.truncarString(
				Util.formatarBigDecimalParaString(helper.getPercentualEmpresa()),5)+";");
		} else {
			arquivoTxt.append(";");
		}
		// Valor da Pagamento Empresa tam 15
		if (helper.getValorPagamentoEmpresa() != null) {
			arquivoTxt.append(Util.truncarString(
				Util.formatarBigDecimalParaString(helper.getValorPagamentoEmpresa()),15)+";");
		} else {
			arquivoTxt.append(";");
		}
		// idUnidadeNegocio tam 04
		if (helper.getIdUnidadeNegocio() != null) {
			arquivoTxt.append(Util.truncarString(helper.getIdUnidadeNegocio()
				.toString(), 4)+";");
		} else {
			arquivoTxt.append(";");
		}
		// nomeUnidadeNegocio tam 50
		if (helper.getNomeUnidadeNegocio() != null) {
			arquivoTxt.append(Util.truncarString(helper.getNomeUnidadeNegocio(), 50)+";");
		} else {
			arquivoTxt.append(";");
		}
		// IdLocalidade tam 04
		if (helper.getIdLocalidade() != null) {
			arquivoTxt.append(Util.truncarString(helper.getIdLocalidade()
					.toString(), 4)+";");
		} else {
			arquivoTxt.append(";");
		}
		// NomeLocalidade tam 30
		if (helper.getNomeLocalidade() != null) {
			arquivoTxt.append(Util.truncarString(helper.getNomeLocalidade(), 30)+";");
	} else {
		arquivoTxt.append(";");
	}
	// idSetor tam 04
	if (helper.getIdSetor() != null) {
		arquivoTxt.append(Util.truncarString(helper.getIdSetor()
			.toString(), 4)+";");
	} else {
		arquivoTxt.append(";");
	}
	// idQuadra tam 07
	if (helper.getIdQuadra() != null) {
		arquivoTxt.append(Util.truncarString(helper.getIdQuadra()
			.toString(), 7)+";");
	} else {
		arquivoTxt.append(";");
	}
	// lote tam 04
	if (helper.getLote() != null) {
		arquivoTxt.append(Util.truncarString(helper.getLote()
			.toString(), 4)+";");
	} else {
		arquivoTxt.append(";");
	}
	// subLote tam 04
	if (helper.getSubLote() != null) {
		arquivoTxt.append(Util.truncarString(helper.getSubLote()
			.toString(), 4)+";");
	} else {
		arquivoTxt.append(";");
	}
	// codigoRota tam 06
	if (helper.getCodigoRota() != null) {
		arquivoTxt.append(Util.truncarString(helper.getCodigoRota()
			.toString(), 6)+";");
		} else {
		arquivoTxt.append(";");
	}
	// sequenciaRota tam 09
	if (helper.getSequencialRota() != null) {
		arquivoTxt.append(Util.truncarString(helper.getSequencialRota()
			.toString(), 9)+";");
	} else {
		arquivoTxt.append(";");
	}
	
	// dataPagamento tam 10
	if (helper.getDataPagamento() != null) {
		
		String dataPagamento = Util.formatarData(helper.getDataPagamento());
		arquivoTxt.append(Util.truncarString(dataPagamento.toString(), 10)+";");
	} else {
		arquivoTxt.append(";");
	}
		
	}
	
	
	public Collection obterUnidadeNegocioPagamentosEmpresaCobrancaConta()
			throws ControladorException {

		Collection colecaoUnidadeNegocio = null;

		Collection colecaoIdsUnidades = null;

		try {

			colecaoIdsUnidades = repositorioCobranca
					.obterUnidadeNegocioPagamentosEmpresaCobrancaConta();

			if (colecaoIdsUnidades != null && !colecaoIdsUnidades.isEmpty()) {

				colecaoUnidadeNegocio = new ArrayList();
				Iterator iter = colecaoIdsUnidades.iterator();
				while (iter.hasNext()) {

					Integer idUnidade = (Integer) iter.next();

					UnidadeNegocio unidadeNegocio = new UnidadeNegocio();

					unidadeNegocio.setId(idUnidade);

					colecaoUnidadeNegocio.add(unidadeNegocio);
				}
			}
		} catch (ErroRepositorioException e) {
			e.printStackTrace();
		}
		return colecaoUnidadeNegocio;
	}
	
	/**
	 * Este método está de acordo com o [UC0901] Gerar Metas do Ciclo
	 * 
	 * @author Anderson Italo
	 * @date 21/09/2009
	 *
	 * @param Integer idCicloMeta
	 * @throws ControladorException
	 */
	public void removerCicloMetaGrupo(Integer idCicloMeta) throws ControladorException{
		try{
			this.repositorioCobranca.removerCicloMetaGrupo(idCicloMeta);
			
		} catch (ErroRepositorioException e) {
			e.printStackTrace();
			throw new ControladorException("erro.sistema", e);
		}	
	}
	
	/**
	 * 
	 * [UC0000] - Gerar Metas do Cilo
	 * Pesquisar a quantidade de imoveis em cada grupo/localidade
	 *
	 * @author Anderson Italo
	 * @date 25/09/2009
	 *
	 * @param idsLast Colecao de ids de situacao de ligação de água
	 * @return Colecao no formato [idGrupo, idLocalidade, qtdImoveis]
	 */
	public Collection pesquisarQuantidadeImoveisPorGrupoLocalidade(Collection colecaoIdsSituacaoLigacaoAgua) throws ControladorException{
		
		try{
			Collection colecaoQuantidadeImoveis = repositorioCobranca.pesquisarQuantidadeImoveisPorGrupoLocalidade(
					colecaoIdsSituacaoLigacaoAgua);
			
			return colecaoQuantidadeImoveis;
		} catch (ErroRepositorioException e) {
			e.printStackTrace();
			throw new ControladorException("erro.sistema", e);
		}	
	}
	
	/**
	 * [UC????] Relatorio Comando Documento Cobranca
	 * Alterado para verificar tipo da ação a partir da tabela documento_tipo
	 * @author Rômulo Aurélio, Anderson Italo
	 * 
	 * @data 20/10/2009, 04/05/2010
	 */
	public DocumentoTipo pesquisarTipoAcaoCobrancaParaRelatorio(
			Integer idCobrancaAcaoAtividadeComando, Integer idCobrancaAcaoAtividadeCronograma)
			throws ControladorException {
		
		
		DocumentoTipo retorno = null;
		try {
			retorno = repositorioCobranca
					.pesquisarTipoAcaoCobrancaParaRelatorio(idCobrancaAcaoAtividadeComando, idCobrancaAcaoAtividadeCronograma);
		} catch (ErroRepositorioException e) {
			e.printStackTrace();
		}
		
		return retorno;
		
	}
	
	
	/**
	 * [UCXXXX] - Gerar Relatorio Comando Documento Cobranca
	 * 
	 * @author Rômulo Aurélio
	 * @date 20/10/2009
	 * 
	 * @return
	 * @throws ErroRepositorioException
	 */
	public Collection<RelatorioComandoDocumentoCobrancaHelper> gerarRelatorioComandoDocumentoCobranca(
			Integer idCobrancaAcaoCronograma, Integer idCobrancaAcaoComando)
			throws ControladorException {

		Collection<RelatorioComandoDocumentoCobrancaHelper> retorno = new ArrayList<RelatorioComandoDocumentoCobrancaHelper>();

		try {
			Collection<CobrancaDocumento> colecaoDocumentoCobranca = repositorioCobranca
					.pesquisarCobrancaDocumentoParaRelatorio(
							idCobrancaAcaoCronograma, idCobrancaAcaoComando);

			for (CobrancaDocumento cobrancaDocumento : colecaoDocumentoCobranca) {

				String inscricao = getControladorImovel()
						.pesquisarInscricaoImovel(
								cobrancaDocumento.getImovel().getId());
				String clienteUsuario = getControladorImovel()
						.consultarClienteUsuarioImovel(
								cobrancaDocumento.getImovel().getId());
				String endereco = getControladorEndereco().pesquisarEndereco(
						cobrancaDocumento.getImovel().getId());

				String codigoRota = cobrancaDocumento.getImovel().getQuadra()
						.getRota().getCodigo().toString();
				
				String sequencialRota = "";
				if (cobrancaDocumento.getImovel()
					.getNumeroSequencialRota() != null){
					sequencialRota = cobrancaDocumento.getImovel()
					.getNumeroSequencialRota().toString();
				}

				if (cobrancaDocumento.getImovel().getNumeroSequencialRota() != null){
					sequencialRota = cobrancaDocumento.getImovel().getNumeroSequencialRota().toString();
				}


				String idFaturamentoGrupo = cobrancaDocumento.getImovel()
						.getQuadra().getRota().getFaturamentoGrupo()
						.getDescricaoAbreviada();

				String descricaoSituacaoLigacaoAgua = cobrancaDocumento
						.getLigacaoAguaSituacao().getDescricao();
				String descricaoSituacaoLigacaoEsgoto = cobrancaDocumento
						.getLigacaoEsgotoSituacao().getDescricao();

				Categoria categoriaPrincipal = getControladorImovel()
						.obterPrincipalCategoriaImovel(
								cobrancaDocumento.getImovel().getId());

				FiltroHidrometroInstalacaoHistorico filtroHidrometroInstalacaoHistorico = new FiltroHidrometroInstalacaoHistorico();
				filtroHidrometroInstalacaoHistorico
						.adicionarParametro(new ParametroSimples(
								FiltroHidrometroInstalacaoHistorico.LIGACAO_AGUA_ID,
								cobrancaDocumento.getImovel().getId()));

				filtroHidrometroInstalacaoHistorico
						.adicionarCaminhoParaCarregamentoEntidade(FiltroHidrometroInstalacaoHistorico.HIDROMETRO);
				filtroHidrometroInstalacaoHistorico
						.adicionarCaminhoParaCarregamentoEntidade(FiltroHidrometroInstalacaoHistorico.HIDROMETRO_LOCAL_INSTALACAO);

				Collection colecaoHidrometroInstalacaoHistorico = repositorioUtil
						.pesquisar(filtroHidrometroInstalacaoHistorico,
								HidrometroInstalacaoHistorico.class.getName());

				String numeroHidrometro = "";
				String localizacaoHidrometro = "";

				if (colecaoHidrometroInstalacaoHistorico != null
						&& !colecaoHidrometroInstalacaoHistorico.isEmpty()) {

					HidrometroInstalacaoHistorico hidrometroInstalacaoHistorico = (HidrometroInstalacaoHistorico) colecaoHidrometroInstalacaoHistorico
							.iterator().next();

					numeroHidrometro = hidrometroInstalacaoHistorico
							.getHidrometro().getNumero();

					localizacaoHidrometro = hidrometroInstalacaoHistorico
							.getHidrometroLocalInstalacao()
							.getDescricaoAbreviada();

				}

				String representacaoNumericaCodBarra = "";

				// Obtém a representação numérica do
				// códigode
				// barra
				representacaoNumericaCodBarra = this
						.getControladorArrecadacao()
						.obterRepresentacaoNumericaCodigoBarra(
								5,
								cobrancaDocumento.getValorDocumento(),
								cobrancaDocumento.getLocalidade().getId(),
								cobrancaDocumento.getImovel().getId(),
								null,
								null,
								null,
								null,
								String.valueOf(cobrancaDocumento
										.getNumeroSequenciaDocumento()),
								cobrancaDocumento.getDocumentoTipo().getId(),
								null, null, null);

				// Formata a representação númerica do
				// código de
				// barras
				String representacaoNumericaCodBarraFormatada = representacaoNumericaCodBarra
						.substring(0, 11)
						+ "-"
						+ representacaoNumericaCodBarra.substring(11, 12)
						+ " "
						+ representacaoNumericaCodBarra.substring(12, 23)
						+ "-"
						+ representacaoNumericaCodBarra.substring(23, 24)
						+ " "
						+ representacaoNumericaCodBarra.substring(24, 35)
						+ "-"
						+ representacaoNumericaCodBarra.substring(35, 36)
						+ " "
						+ representacaoNumericaCodBarra.substring(36, 47)
						+ "-" + representacaoNumericaCodBarra.substring(47, 48);
				
				String representacaoNumericaCodBarraSemDigito = representacaoNumericaCodBarra
				.substring(0, 11)
				+ representacaoNumericaCodBarra.substring(12, 23)
				+ representacaoNumericaCodBarra.substring(24, 35)
				+ representacaoNumericaCodBarra.substring(36, 47);
				
				RelatorioComandoDocumentoCobrancaHelper helper = new RelatorioComandoDocumentoCobrancaHelper();

				helper.setMatricula(cobrancaDocumento.getImovel()
						.getMatriculaFormatada());
				helper.setInscricao(inscricao);
				helper.setNomeCliente(clienteUsuario);
				helper.setEndereco(endereco);
				helper.setCodigoRota(codigoRota);
				helper.setSequencialRota(sequencialRota);
				helper.setIdDocumentoCobranca(cobrancaDocumento.getId()
						.toString());
				helper.setIdFaturamentoGrupo(idFaturamentoGrupo);
				helper.setSituacaoLigacaoAgua(descricaoSituacaoLigacaoAgua);
				helper.setSituacaoLigacaoEsgoto(descricaoSituacaoLigacaoEsgoto);
				helper.setDataEmissao(Util.formatarData(new Date()));
				helper.setCategoriaPrincipal(categoriaPrincipal.getDescricao());
				helper.setRotaGrupo(idFaturamentoGrupo
						+ "/"
						+ Util.adicionarZerosEsquedaNumeroTruncando(6,
								codigoRota)
						+ "/"
						+ Util.adicionarZerosEsquedaNumeroTruncando(4,
								sequencialRota));

				helper.setLocalizacaoHidrometro(localizacaoHidrometro);
				helper.setNumeroHidrometro(numeroHidrometro);

				
				helper.setValor(Util.formatarMoedaReal(cobrancaDocumento
						.getValorDocumento()));
				
				Date dataVencimento = Util.adicionarNumeroDiasDeUmaData(new Date(),
						cobrancaDocumento.getCobrancaAcao().getNumeroDiasVencimento());
				
				
				helper.setDataVencimento(Util.formatarData(dataVencimento));
				helper.setNumeroDocumento(cobrancaDocumento.getId().toString());
				Integer idOrdemServico = null;

				idOrdemServico = repositorioCobranca
						.obterOrdemServicoAssociadaDocumentoCobranca(cobrancaDocumento.getId());

				if (idOrdemServico != null) {
					helper.setNumero(idOrdemServico.toString());
				} else {
					helper.setNumero("");
				}

				helper
						.setRepresentacaoNumericaCodBarraFormatada(representacaoNumericaCodBarraFormatada);
				helper
						.setRepresentacaoNumericaCodBarraSemDigito(representacaoNumericaCodBarraSemDigito);

				retorno.add(helper);

			}

		} catch (ErroRepositorioException e) {
			throw new ControladorException("erro.sistema", e);
		}

		return retorno;
	}
	
	/**
	 * [UC0960] Transferir Rotas entre Grupos e Empresas
	 *
	 * @author Anderson Italo
	 * @date 26/10/2009
	 * 
	 * @param idGrupoFaturamentoDestino
	 * @param idGrupoCobrancaDestino
	 * @param idEmpresaFaturamentoDestino
	 * @param idEmpresaCobrancaDestino
	 * @param usuarioLogado
	 */
	public void transferirRotasEntreGrupoEmpresa(FaturamentoGrupo grupoFaturamentoDestino,CobrancaGrupo grupoCobrancaDestino,
			Empresa empresaFaturamentoDestino,Empresa empresaCobrancaDestino, 
			Collection colecaoRotas,Usuario usuarioLogado)throws ControladorException{
		
		/* 7.1.	Caso não tenha sido informado algum dos parâmetros para 
		 * onde devem ser transferidas as rotas, este campo não deve ser alterado.
		 * 7.2.	Para cada parâmetro de destino informado, todas as rotas da seleção
		 *  deverão ter os respectivos campos alterados na tabela ROTA.*/
		for (Iterator iter = colecaoRotas.iterator(); iter.hasNext();) {
			Rota rota = (Rota) iter.next();
			
			if (grupoFaturamentoDestino != null){
				if (grupoFaturamentoDestino.getId() != rota.getFaturamentoGrupo().getId()){
					rota.setFaturamentoGrupo(grupoFaturamentoDestino);
					rota.setUltimaAlteracao(new Date());
				}
			}
			
			if (grupoCobrancaDestino != null){
				if (grupoCobrancaDestino.getId() != rota.getCobrancaGrupo().getId()){
					rota.setCobrancaGrupo(grupoCobrancaDestino);
					rota.setUltimaAlteracao(new Date());
				}
			}
			
			if (empresaFaturamentoDestino != null){
				if (empresaFaturamentoDestino.getId() != rota.getEmpresa().getId()){
					rota.setEmpresa(empresaFaturamentoDestino);
					rota.setUltimaAlteracao(new Date());
				}
			}
			
			if (empresaCobrancaDestino != null){
				if (empresaCobrancaDestino.getId() != rota.getEmpresaCobranca().getId()){
					rota.setEmpresaCobranca(empresaCobrancaDestino);
					rota.setUltimaAlteracao(new Date());
				}
			}
			
			//colocar registro de transação e atualizar
			//this.getControladorMicromedicao().atualizarRota()

			/*  Chama o registrar operacao só no final do while para
			 * não ocorrer erro no banco de dados "duplicate key violates unique constraint"
			 * na tabela "seguranca.operacao_tabela", registrando a operacao apenas uma vez.
			 * */
			if(iter.hasNext() == false){
			//------------ REGISTRAR TRANSAÇÃO----------------------------
			RegistradorOperacao registradorOperacao = new RegistradorOperacao(
					Operacao.TRANSFERIR_ROTA_ENTRE_GRUPO_EMPRESA,
					rota.getId(), rota.getId(),
					new UsuarioAcaoUsuarioHelper(usuarioLogado, 
					UsuarioAcao.USUARIO_ACAO_EFETUOU_OPERACAO));
			registradorOperacao.registrarOperacao(rota);
			// ------------ REGISTRAR TRANSAÇÃO----------------------------
			}
			
			
			this.getControladorUtil().atualizar(rota);
		}
		

	}
	
	/**
     * [] - 
     * 
     * @author: Vivianne Sousa
     * @date: 06/11/2009
     */
    public void gerarCartasDeFinalDeAno(Integer idRota , Integer idFuncionalidadeIniciada)
            throws ControladorException{
        
        int idUnidadeIniciada = 0;
       
        try {
	        /*
	         * Registrar o início do processamento da Unidade de
	         * Processamento do Batch
	        */
                    
            idUnidadeIniciada = getControladorBatch().iniciarUnidadeProcessamentoBatch(idFuncionalidadeIniciada,UnidadeProcessamento.ROTA,(idRota));

            //Deleta DocumentoCobranca e DocumentoCobrancaItem 
            //da rota a ser processada com DocumentoTipo = CARTA_DE_FINAL_DE_ANO_2009
             deletarCobrancaDocumentoECobrancaDocumentoItem(idRota,DocumentoTipo.CARTA_DE_FINAL_DE_ANO_2009);
             deletarCartaFinalAno(idRota);
             
        	DocumentoEmissaoForma documentoEmissaoForma = new DocumentoEmissaoForma();
			documentoEmissaoForma.setId(DocumentoEmissaoForma.INDIVIDUAL);
			
			DocumentoTipo documentoTipo = new DocumentoTipo();
			documentoTipo.setId(DocumentoTipo.CARTA_DE_FINAL_DE_ANO_2009);
			
			ResolucaoDiretoria resolucaoDiretoria = new ResolucaoDiretoria();
			resolucaoDiretoria.setId(13);
			
			BigDecimal valorLimite = new BigDecimal("10.00");
			
			Rota rota = new Rota();
			rota.setId(idRota);
			Empresa empresa = new Empresa();
			empresa.setId(repositorioMicromedicao.obterIdEmpresaPorRota(rota));
			
			Collection  colecaoImoveis = repositorioCobranca.pesquisarDadosImoveisPorRota(idRota);
			
	  		StringBuilder cobrancaDocumentoTxt = new StringBuilder();
    		int sequencialImpressao = 0;
			
			if(colecaoImoveis != null && !colecaoImoveis.isEmpty()){
			
				Iterator iteratorImoveis = colecaoImoveis.iterator();
				
				while (iteratorImoveis.hasNext()) {
					Imovel imovel = (Imovel) iteratorImoveis.next();
					
					//[SB0001]-Verificar se o imóvel possue débitos que satisfaça
					ObterDebitoImovelOuClienteHelper obterDebitoImovelOuCliente = obterDebitoImovelOuCliente(
								1, // Indicador de débito do imóvel
								imovel.getId().toString(), // Matrícula do imóvel
								null, // Código do cliente
								null, // Tipo de relação cliente imóvel
								"000101", // Referência inicial do débito
								"200910", // Referência final do débito
								Util.converteStringParaDate("01/01/0001"), // Inicio Vencimento
								Util.converteStringParaDate("31/12/9999"), // Final Vencimento
								1, // Indicador de pagamento
								ConstantesSistema.NAO, // conta em revisão
								ConstantesSistema.SIM, // Débito a cobrar
								ConstantesSistema.SIM, // crédito a realizar
								ConstantesSistema.NAO, // Indicador de notas promissórias
								ConstantesSistema.SIM, // guias pagamento
								ConstantesSistema.SIM, // acréscimos impontualidade
								true);

					
					//4. caso de lista de conta não esteja vazia
					if(obterDebitoImovelOuCliente.getColecaoContasValores() != null 
							&& !obterDebitoImovelOuCliente.getColecaoContasValores().isEmpty()
							&& obterDebitoImovelOuCliente.getColecaoContasValores().size() >= 2){
						
						BigDecimal valorAcrescimosImpontualidadeTotal = BigDecimal.ZERO;
						BigDecimal valorTotalContas = BigDecimal.ZERO;
						BigDecimal valorDebitoTotalAtualizado = BigDecimal.ZERO;
						BigDecimal valorTotalGuiasPagamento = BigDecimal.ZERO;
						BigDecimal valorTotalRestanteServicosACobrar = BigDecimal.ZERO;
						BigDecimal valorTotalRestanteParcelamentosACobrar = BigDecimal.ZERO;
						BigDecimal valorCreditoARealizar = BigDecimal.ZERO;
						BigDecimal valorTotalMultasDasContas = BigDecimal.ZERO; 
						BigDecimal valorTotalJurosMoraDasContas = BigDecimal.ZERO;
						BigDecimal valorTotalAtualizacoesMonetariasDasContas = BigDecimal.ZERO;
						BigDecimal descontoTotalPagamentoAVista = new BigDecimal("0.00");   
						BigDecimal valorPagamentoAVista = new BigDecimal("0.00");   
						BigDecimal valorTotalImpostosConta = new BigDecimal("0.00");
						
						IndicadoresParcelamentoHelper indicadoresParcelamentoHelper = 
							new IndicadoresParcelamentoHelper();
						
						indicadoresParcelamentoHelper.setIndicadorDebitosACobrar(new Integer("1"));
						indicadoresParcelamentoHelper.setIndicadorCreditoARealizar(new Integer("1"));
						indicadoresParcelamentoHelper.setIndicadorGuiasPagamento(new Integer("1"));
						indicadoresParcelamentoHelper.setIndicadorAcrescimosImpotualidade(new Integer("1"));
						indicadoresParcelamentoHelper.setIndicadorContasRevisao(new Integer("2"));
						indicadoresParcelamentoHelper.setIndicadorDividaAtiva(new Integer("3"));
						
						Object[] valorDebitoTotalEAcrescimoImpontualidadeTotal = calcularValorTotalDebitoAtualizadoParaParcelamento(
								obterDebitoImovelOuCliente,	indicadoresParcelamentoHelper, false);
						
						if(valorDebitoTotalEAcrescimoImpontualidadeTotal != null){
							
							valorDebitoTotalAtualizado = (BigDecimal)valorDebitoTotalEAcrescimoImpontualidadeTotal[0];
							valorAcrescimosImpontualidadeTotal = (BigDecimal)valorDebitoTotalEAcrescimoImpontualidadeTotal[1];
							valorTotalContas = (BigDecimal)valorDebitoTotalEAcrescimoImpontualidadeTotal[2];
							valorTotalGuiasPagamento = (BigDecimal)valorDebitoTotalEAcrescimoImpontualidadeTotal[3];
							valorTotalRestanteServicosACobrar = (BigDecimal)valorDebitoTotalEAcrescimoImpontualidadeTotal[4];
							valorTotalRestanteParcelamentosACobrar = (BigDecimal)valorDebitoTotalEAcrescimoImpontualidadeTotal[5];
							valorCreditoARealizar = (BigDecimal)valorDebitoTotalEAcrescimoImpontualidadeTotal[6];
							valorTotalMultasDasContas = (BigDecimal)valorDebitoTotalEAcrescimoImpontualidadeTotal[7]; 
							valorTotalJurosMoraDasContas = (BigDecimal)valorDebitoTotalEAcrescimoImpontualidadeTotal[8];
							valorTotalAtualizacoesMonetariasDasContas = (BigDecimal)valorDebitoTotalEAcrescimoImpontualidadeTotal[9];
							
						}
			
						if(valorTotalContas.compareTo(valorLimite) >= 0 &&
						   valorDebitoTotalAtualizado.compareTo(new BigDecimal("0.00")) == 1){
							
							
							Integer numeroReparcelamentoConsecutivos = 0;
							if(imovel.getNumeroReparcelamentoConsecutivos() != null){
								numeroReparcelamentoConsecutivos = new Integer(imovel
										.getNumeroReparcelamentoConsecutivos().toString());
							}
							
							Integer situacaoLigacaoAgua = imovel.getLigacaoAguaSituacao().getId();
							// O indicador só será usado caso a situação de Água do Imóvel seja
							// SUPRIMIDO, SUPRIMIDO PARCIAL, SUPRIMIDO PARCIAL A PEDIDO
							Integer indicadorRestabelecimento = new Integer("0");
							if (situacaoLigacaoAgua.equals(LigacaoAguaSituacao.SUPRIMIDO) ||
									situacaoLigacaoAgua.equals(LigacaoAguaSituacao.SUPR_PARC) ||
									situacaoLigacaoAgua.equals(LigacaoAguaSituacao.SUPR_PARC_PEDIDO)) {
								indicadorRestabelecimento = new Integer("2");
							}
							
							
							//CARREGANDO O HELPER COM AS INFORMAÇÕES DO PARCELAMENTO
							ObterOpcoesDeParcelamentoHelper helper = new ObterOpcoesDeParcelamentoHelper(
									resolucaoDiretoria.getId(),
									imovel.getId(), 
									null, 
									imovel.getLigacaoAguaSituacao().getId(), 
									imovel.getLigacaoEsgotoSituacao().getId(), 
									imovel.getImovelPerfil().getId(), 
									"010001", // Referência inicial do débito
									indicadorRestabelecimento, //indicadorRestabelecimento
    								obterDebitoImovelOuCliente.getColecaoContasValores(), 
									valorDebitoTotalAtualizado, 
									valorTotalMultasDasContas, 
									valorTotalJurosMoraDasContas, 
									valorTotalAtualizacoesMonetariasDasContas,
									numeroReparcelamentoConsecutivos, 
									obterDebitoImovelOuCliente.getColecaoGuiasPagamentoValores(), 
									Usuario.USUARIO_BATCH,
									valorTotalRestanteParcelamentosACobrar, 
									new Integer("000101"), // Referência inicial do débito
									new Integer("200910"), // Referência final do débito 
									indicadoresParcelamentoHelper,
									valorCreditoARealizar);
							
							NegociacaoOpcoesParcelamentoHelper opcoesParcelamento = 
								this.obterOpcoesDeParcelamento(helper);
							
							//Definição do valor do documento e do valor do desconto
							if (opcoesParcelamento.getValorTotalDescontoPagamentoAVista() != null){
								descontoTotalPagamentoAVista  = opcoesParcelamento.getValorTotalDescontoPagamentoAVista();
							}

							valorTotalImpostosConta = obterDebitoImovelOuCliente.obterValorImpostosDasContas(
									obterDebitoImovelOuCliente.getColecaoContasValores());
							
							valorPagamentoAVista = valorDebitoTotalAtualizado.subtract(descontoTotalPagamentoAVista);
							valorPagamentoAVista = valorPagamentoAVista.subtract(valorTotalImpostosConta);
						
							if(valorPagamentoAVista.compareTo(new BigDecimal("0.00")) == 1){
								//[SB0002]Gerar Dados das Cartas
								ExtratoDebitoRelatorioHelper extratoHelper = gerarDocumentoCobranca(
										imovel,
										ConstantesSistema.NAO,
										obterDebitoImovelOuCliente.getColecaoContasValores(),
										obterDebitoImovelOuCliente.getColecaoGuiasPagamentoValores(),
										obterDebitoImovelOuCliente.getColecaoDebitoACobrar(),
										valorAcrescimosImpontualidadeTotal, 
										descontoTotalPagamentoAVista,
										null,
										documentoEmissaoForma,
										documentoTipo,
										null,
										null,
										empresa, 
										null,
										null,
										valorPagamentoAVista,
										new Date(),
										obterDebitoImovelOuCliente.getColecaoCreditoARealizar(),
										null,
										resolucaoDiretoria,
										null,
										null,
										null,
										null,
										new Short("1"));
								
								
								//inicio arquivo!!!
								
								CobrancaDocumento cobrancaDoc = extratoHelper.getDocumentoCobranca();
								
								String nomeClienteUsuario = null;
								Collection colecaoCobrancaDocumentoItemConta = null;
								Integer idClienteResponsavel = null;
								
								if (cobrancaDoc != null) {
//										sequencialImpressao++;

									CobrancaDocumento cobrancaDocumento  = (CobrancaDocumento)Util.retonarObjetoDeColecao(repositorioCobranca.pesquisarCobrancaDocumentoParaEmitir(0,cobrancaDoc.getId()));
									
									try {

										nomeClienteUsuario = this.repositorioClienteImovel.pesquisarNomeClientePorImovel(cobrancaDocumento.getImovel().getId());
										idClienteResponsavel = this.repositorioClienteImovel.retornaIdClienteResponsavel(cobrancaDocumento.getImovel().getId());

										colecaoCobrancaDocumentoItemConta = extratoHelper.getColecaoCobrancaDocumentoItemContas(); 
											//this.repositorioCobranca.selecionarCobrancaDocumentoItemReferenteConta(cobrancaDocumento);

									} catch (ErroRepositorioException ex) {
										ex.printStackTrace();
										throw new ControladorException("erro.sistema", ex);
									}
									
									if (colecaoCobrancaDocumentoItemConta != null && !colecaoCobrancaDocumentoItemConta.isEmpty()) {

										cobrancaDocumentoTxt = new StringBuilder();
									
										String idGrupo = null;
										// id do grupo
										idGrupo = "" + cobrancaDocumento.getQuadra().getRota().getCobrancaGrupo().getId();
										
										//Grupo-XX Entrega-XXXXXXXXXX
										String textoGrupoEntrega = "GRUPO-" + idGrupo + " ENTREGA-";
										if (cobrancaDocumento.getEmpresa() != null) {
											textoGrupoEntrega += cobrancaDocumento.getEmpresa().getDescricao();
										}
										
										cobrancaDocumentoTxt.append(Util.completaString(textoGrupoEntrega, 27));
										
										// Inscrição
										String idLocalidade = Util.adicionarZerosEsquedaNumero(3, "" + cobrancaDocumento.getLocalidade().getId());
										String codigoSetorComercial = Util.adicionarZerosEsquedaNumero(3, "" + cobrancaDocumento.getCodigoSetorComercial());
										String numeroQuadra = Util.adicionarZerosEsquedaNumero(3, "" + cobrancaDocumento.getNumeroQuadra());
										String lote = Util.adicionarZerosEsquedaNumero(4,""+ cobrancaDocumento.getImovel().getLote());
										String subLote = Util.adicionarZerosEsquedaNumero(3, ""	+ cobrancaDocumento.getImovel().getSubLote());

										cobrancaDocumentoTxt.append(Util.completaString(idLocalidade + "."	+ codigoSetorComercial + "." 
												+ numeroQuadra + "." + lote + "." + subLote, 20));

										// Nome da Localidade
										cobrancaDocumentoTxt.append(Util.completaString("" + cobrancaDocumento.getLocalidade().getDescricao(), 25));

										// nome cliente
										cobrancaDocumentoTxt.append(Util.completaString(nomeClienteUsuario, 50));

										String nomeBairro = "";
										String nomeMunicipio = "";
										String siglaUnidadeFederecao = "";
										String cepFormatado = "";

										String[] parmsEnderecoImovel = getControladorEndereco().pesquisarEnderecoFormatadoDividido(cobrancaDocumento.getImovel().getId());
										if (parmsEnderecoImovel != null) {
											// nome do bairro
											nomeBairro = "" + parmsEnderecoImovel[3];
											// nome do municipio
											nomeMunicipio = "" + parmsEnderecoImovel[1];
											// sigla da unidade federação
											siglaUnidadeFederecao = parmsEnderecoImovel[2];
											cepFormatado = parmsEnderecoImovel[4];
										}

										// endereço do cliente com opção de recebimento via correio
										if (idClienteResponsavel != null) {
											String[] parmsEndereco = getControladorEndereco().pesquisarEnderecoClienteAbreviadoDividido(idClienteResponsavel);
											// endereço sem municipio e unidade federação
											cobrancaDocumentoTxt.append(Util.completaString(parmsEndereco[0], 50));
											// nome do bairro
											nomeBairro = "" + parmsEndereco[3];
											// nome do municipio
											nomeMunicipio = "" + parmsEndereco[1];
											// sigla da unidade federação
											siglaUnidadeFederecao = parmsEndereco[2];
											cepFormatado = parmsEndereco[4];

										} else {
											if (parmsEnderecoImovel != null){
												// endereço sem municipio e unidade federação
												cobrancaDocumentoTxt.append(Util.completaString(parmsEnderecoImovel[0],50));
											} else {
												cobrancaDocumentoTxt.append(Util.completaString("", 50));									
											}
										}

										// nome Bairro
										cobrancaDocumentoTxt.append(Util.completaString(nomeBairro, 25));
										// nome municipio
										cobrancaDocumentoTxt.append(Util.completaString(nomeMunicipio, 24));
										// sigla unidade federacao
										cobrancaDocumentoTxt.append(Util.completaString(siglaUnidadeFederecao, 2));
										// CEP
										// variavel cepFormatado foi preenchido de acordo com a existencia de
										// cliente responsavel
										String cepStr = Util.completaString(cepFormatado, 8);
										String cepLabeled = "CEP. " + cepStr.substring(0,5) + "-" + cepStr.substring(5,8); 
										cobrancaDocumentoTxt.append(Util.completaString(cepLabeled, 14));
										
										// Sequencial de impressao [13]
										String sequencialImpressaoStr = Util.adicionarZerosEsquedaNumero(6,sequencialImpressao + "");
										cobrancaDocumentoTxt.append("SEQ.  " + sequencialImpressaoStr.substring(0,3) + "." + sequencialImpressaoStr.substring(3,6));
										
										// Matrícula do imóvel
										String matriculaStr = Util.adicionarZerosEsquedaNumero(8, "" + cobrancaDocumento.getImovel().getId()); 
										cobrancaDocumentoTxt.append(matriculaStr.substring(0,7) + "." + matriculaStr.substring(7,8));

										// Endereço do imóvel sem municipio e unidade federação
										cobrancaDocumentoTxt.append(Util.completaString(parmsEnderecoImovel[0],50));

										// sequencial do documento de cobranca
										String sequencialStr = Util.adicionarZerosEsquedaNumero(9, "" + cobrancaDocumento.getNumeroSequenciaDocumento()); 
										cobrancaDocumentoTxt.append(sequencialStr.substring(0,5) + "." + sequencialStr.substring(5,9));

										// Data de vencimento
										cobrancaDocumentoTxt.append("30/12/2009");
										
										// idgrupo
										cobrancaDocumentoTxt.append(Util.completaString(idGrupo, 2));
										cobrancaDocumentoTxt.append("-");
										// código da firma
										if (cobrancaDocumento.getEmpresa() != null) {
											cobrancaDocumentoTxt.append(Util.adicionarZerosEsquedaNumero(2,cobrancaDocumento.getEmpresa().getId().toString()));
										}
									
        								String representacaoNumericaCodBarra = "";

        								// Obtém a representação numérica do código de barra
        								representacaoNumericaCodBarra = this.getControladorArrecadacao().obterRepresentacaoNumericaCodigoBarra(
        												5,
        												valorPagamentoAVista,
        												cobrancaDocumento.getLocalidade().getId(),
        												cobrancaDocumento.getImovel().getId(),
        												null,
        												null,
        												null,
        												null,
        												String.valueOf(cobrancaDocumento.getNumeroSequenciaDocumento()),
        												cobrancaDocumento.getDocumentoTipo().getId(),
        												null, null, null);

        								// Formata a representação númerica do código de barras
        								String representacaoNumericaCodBarraFormatada = representacaoNumericaCodBarra.substring(0, 11)
        										+ " " + representacaoNumericaCodBarra.substring(11, 12)
        										+ " " + representacaoNumericaCodBarra.substring(12, 23)
        										+ " " + representacaoNumericaCodBarra.substring(23, 24)
        										+ " " + representacaoNumericaCodBarra.substring(24, 35)
        										+ " " + representacaoNumericaCodBarra.substring(35, 36)
        										+ " " + representacaoNumericaCodBarra.substring(36, 47)
        										+ " " + representacaoNumericaCodBarra.substring(47, 48);

        								cobrancaDocumentoTxt.append(representacaoNumericaCodBarraFormatada);

        								// Cria o objeto para gerar o código de barras no padrão intercalado 2 de 5
        								Interleaved2of5 codigoBarraIntercalado2de5 = new Interleaved2of5();
        	 
        								// Recupera a representação númerica do código de barras sem os dígitos verificadores 
        								String representacaoCodigoBarrasSemDigitoVerificador = 
        									    representacaoNumericaCodBarra.substring(0, 11)
        										+ representacaoNumericaCodBarra.substring(12, 23)
        										+ representacaoNumericaCodBarra.substring(24, 35)
        										+ representacaoNumericaCodBarra.substring(36, 47);

        								cobrancaDocumentoTxt.append(codigoBarraIntercalado2de5.encodeValue(representacaoCodigoBarrasSemDigitoVerificador));
        								
        								int quantidadesContas = 0;
        								quantidadesContas = 24;

        								// retorna o indicador de estouro e formata o cobrançaDocumentoTxt com os dados
        								formatarCobrancaDocumentoItem(cobrancaDocumentoTxt,colecaoCobrancaDocumentoItemConta,quantidadesContas,cobrancaDocumento);
        								
        								//somatório das guias
        								cobrancaDocumentoTxt.append(Util.completaStringComEspacoAEsquerda(
        										Util.formataBigDecimal(valorTotalGuiasPagamento, 2, true), 14));
        								
        								//somatório dos débitos a cobrar de serviços
        								cobrancaDocumentoTxt.append(Util.completaStringComEspacoAEsquerda(
        										Util.formataBigDecimal(valorTotalRestanteServicosACobrar, 2, true), 14));
        								
        								//somatório dos débitos a cobrar de parcelamento
        								cobrancaDocumentoTxt.append(Util.completaStringComEspacoAEsquerda(
        										Util.formataBigDecimal(valorTotalRestanteParcelamentosACobrar, 2, true), 14));
        								
        								//somatório dos creditos a realizar
        								cobrancaDocumentoTxt.append(Util.completaStringComEspacoAEsquerda(
        										Util.formataBigDecimal(valorCreditoARealizar, 2, true), 14));
        								
        								//valor do debito atualizado
        								cobrancaDocumentoTxt.append(Util.completaStringComEspacoAEsquerda(
        										Util.formataBigDecimal(valorDebitoTotalAtualizado, 2, true), 14));
        								
        								//valor do documento de pagamento a vista
        								cobrancaDocumentoTxt.append(Util.completaStringComEspacoAEsquerda(
        										Util.formataBigDecimal(valorPagamentoAVista, 2, true), 14));
        								
        								ArrayList colecaoOpcoesParcelamento = 
        									(ArrayList)opcoesParcelamento.getOpcoesParcelamento();
        								String asteriscos = "**,**";
        								
        								if(colecaoOpcoesParcelamento != null && !colecaoOpcoesParcelamento.isEmpty()){
            								OpcoesParcelamentoHelper opcoesHelper = null;
            								
            								try {
            									opcoesHelper = ((OpcoesParcelamentoHelper)colecaoOpcoesParcelamento.get(3));
            									
            								} catch (IndexOutOfBoundsException e) {
            									opcoesHelper = null;
        									}
            								if(opcoesHelper != null){
            									
            									if(opcoesHelper.getValorEntradaMinima() != null
            											&& !opcoesHelper.getValorEntradaMinima().equals(new BigDecimal("0.00"))){
            										
            										cobrancaDocumentoTxt.append(Util.completaStringComEspacoAEsquerda(
                            								Util.formataBigDecimal(opcoesHelper.getValorEntradaMinima(), 2, true), 14));
            									}else{
            										cobrancaDocumentoTxt.append(Util.
            												completaStringComEspacoAEsquerda(asteriscos, 14));
            									}
            									
            									cobrancaDocumentoTxt.append(Util.completaStringComEspacoAEsquerda(
                        								Util.formataBigDecimal(opcoesHelper.getValorPrestacao(), 2, true), 14));
            									
            									cobrancaDocumentoTxt.append(Util.completaStringComEspacoAEsquerda(
                        								Util.formataBigDecimal(opcoesHelper.getTaxaJuros(), 2, true), 4));
            									
            								}else{
            									cobrancaDocumentoTxt.append(Util.completaStringComEspacoAEsquerda(asteriscos, 14));
            									cobrancaDocumentoTxt.append(Util.completaStringComEspacoAEsquerda(asteriscos, 14));
            									cobrancaDocumentoTxt.append("*,**");
            								}
            								
            								try {
            									opcoesHelper = ((OpcoesParcelamentoHelper)colecaoOpcoesParcelamento.get(11));
            									
            								} catch (IndexOutOfBoundsException e) {
            									opcoesHelper = null;
        									}
            								if(opcoesHelper != null){
            									
            									if(opcoesHelper.getValorEntradaMinima() != null
            											&& !opcoesHelper.getValorEntradaMinima().equals(new BigDecimal("0.00"))){
            										
            										cobrancaDocumentoTxt.append(Util.completaStringComEspacoAEsquerda(
                            								Util.formataBigDecimal(opcoesHelper.getValorEntradaMinima(), 2, true), 14));
            									}else{
            										cobrancaDocumentoTxt.append(Util.
            												completaStringComEspacoAEsquerda(asteriscos, 14));
            									}
            									
            									cobrancaDocumentoTxt.append(Util.completaStringComEspacoAEsquerda(
                        								Util.formataBigDecimal(opcoesHelper.getValorPrestacao(), 2, true), 14));
            									
            									cobrancaDocumentoTxt.append(Util.completaStringComEspacoAEsquerda(
                        								Util.formataBigDecimal(opcoesHelper.getTaxaJuros(), 2, true), 4));
            									
            								}else{
            									cobrancaDocumentoTxt.append(Util.completaStringComEspacoAEsquerda(asteriscos, 14));
            									cobrancaDocumentoTxt.append(Util.completaStringComEspacoAEsquerda(asteriscos, 14));
            									cobrancaDocumentoTxt.append("*,**");
            								}
            								
            								try {
            									opcoesHelper = ((OpcoesParcelamentoHelper)colecaoOpcoesParcelamento.get(23));
            									
            								} catch (IndexOutOfBoundsException e) {
            									opcoesHelper = null;
        									}
            								if(opcoesHelper != null){
        									
            									if(opcoesHelper.getValorEntradaMinima() != null
            											&& !opcoesHelper.getValorEntradaMinima().equals(new BigDecimal("0.00"))){
            										
            										cobrancaDocumentoTxt.append(Util.completaStringComEspacoAEsquerda(
                            								Util.formataBigDecimal(opcoesHelper.getValorEntradaMinima(), 2, true), 14));
            									}else{
            										cobrancaDocumentoTxt.append(Util.
            												completaStringComEspacoAEsquerda(asteriscos, 14));
            									}
            									
            									cobrancaDocumentoTxt.append(Util.completaStringComEspacoAEsquerda(
                        								Util.formataBigDecimal(opcoesHelper.getValorPrestacao(), 2, true), 14));
            									
            									cobrancaDocumentoTxt.append(Util.completaStringComEspacoAEsquerda(
                        								Util.formataBigDecimal(opcoesHelper.getTaxaJuros(), 2, true), 4));
            									
            								}else{
            									cobrancaDocumentoTxt.append(Util.completaStringComEspacoAEsquerda(asteriscos, 14));
            									cobrancaDocumentoTxt.append(Util.completaStringComEspacoAEsquerda(asteriscos, 14));
            									cobrancaDocumentoTxt.append("*,**");
            								}
            								
            								try {
            									opcoesHelper = ((OpcoesParcelamentoHelper)colecaoOpcoesParcelamento.get(35));
            									
            								} catch (IndexOutOfBoundsException e) {
            									opcoesHelper = null;
        									}
            								if(opcoesHelper != null){
            									
            									if(opcoesHelper.getValorEntradaMinima() != null
            											&& !opcoesHelper.getValorEntradaMinima().equals(new BigDecimal("0.00"))){
            										
            										cobrancaDocumentoTxt.append(Util.completaStringComEspacoAEsquerda(
                            								Util.formataBigDecimal(opcoesHelper.getValorEntradaMinima(), 2, true), 14));
            									}else{
            										cobrancaDocumentoTxt.append(Util.
            												completaStringComEspacoAEsquerda(asteriscos, 14));
            									}
            									
            									cobrancaDocumentoTxt.append(Util.completaStringComEspacoAEsquerda(
                        								Util.formataBigDecimal(opcoesHelper.getValorPrestacao(), 2, true), 14));
            									
            									cobrancaDocumentoTxt.append(Util.completaStringComEspacoAEsquerda(
                        								Util.formataBigDecimal(opcoesHelper.getTaxaJuros(), 2, true), 4));
            									
            								}else{
            									cobrancaDocumentoTxt.append(Util.completaStringComEspacoAEsquerda(asteriscos, 14));
            									cobrancaDocumentoTxt.append(Util.completaStringComEspacoAEsquerda(asteriscos, 14));
            									cobrancaDocumentoTxt.append("*,**");
            								}
            								
            								try {
            									opcoesHelper = ((OpcoesParcelamentoHelper)colecaoOpcoesParcelamento.get(47));
            									
            								} catch (IndexOutOfBoundsException e) {
            									opcoesHelper = null;
        									}
            								if(opcoesHelper != null){
            									if(opcoesHelper.getValorEntradaMinima() != null
            											&& !opcoesHelper.getValorEntradaMinima().equals(new BigDecimal("0.00"))){
            										
            										cobrancaDocumentoTxt.append(Util.completaStringComEspacoAEsquerda(
                            								Util.formataBigDecimal(opcoesHelper.getValorEntradaMinima(), 2, true), 14));
            									}else{
            										cobrancaDocumentoTxt.append(Util.
            												completaStringComEspacoAEsquerda(asteriscos, 14));
            									}
            									
            									cobrancaDocumentoTxt.append(Util.completaStringComEspacoAEsquerda(
                        								Util.formataBigDecimal(opcoesHelper.getValorPrestacao(), 2, true), 14));
            									
            									cobrancaDocumentoTxt.append(Util.completaStringComEspacoAEsquerda(
                        								Util.formataBigDecimal(opcoesHelper.getTaxaJuros(), 2, true), 4));
            									
            								}else{
            									cobrancaDocumentoTxt.append(Util.completaStringComEspacoAEsquerda(asteriscos, 14));
            									cobrancaDocumentoTxt.append(Util.completaStringComEspacoAEsquerda(asteriscos, 14));
            									cobrancaDocumentoTxt.append("*,**");
            								}
        								}else{
        									
        									for (int i = 0; i < 5; i++) {
        										
        										cobrancaDocumentoTxt.append(Util.completaStringComEspacoAEsquerda(asteriscos, 14));
            									cobrancaDocumentoTxt.append(Util.completaStringComEspacoAEsquerda(asteriscos, 14));
            									cobrancaDocumentoTxt.append("*,**");
											}
        									
        								}

        								
        								String txtString =  cobrancaDocumentoTxt.toString();
        								
        								txtString = txtString.replace('\'',' ');
        								txtString = txtString.replace('`',' ');
        								
        								repositorioCobranca.inserirCartaFinalAno(new Integer(idGrupo) ,
        										cobrancaDocumento.getEmpresa().getId(),
        										new Integer(idLocalidade),
        										new Integer (codigoSetorComercial),
        										new Integer (numeroQuadra),
        										new Integer (lote), 
        										new Integer (subLote),
        										cobrancaDocumento.getId(),
        										txtString.substring(0,241),
        										txtString.substring(250,2299),
        										idRota);
        								cobrancaDocumentoTxt = null;

        										
									}
								
								}
								
							}	
							
						}
	
					}	
						
				}
						
			}
								
            
            getControladorBatch().encerrarUnidadeProcessamentoBatch(null,idUnidadeIniciada, false);
        
        } catch (Exception ex) {
            ex.printStackTrace();
            getControladorBatch().encerrarUnidadeProcessamentoBatch(ex,idUnidadeIniciada, true);
            throw new EJBException(ex);
        }       
        
    }

  
    /**
     * [0968] - Emitir Cartas da Campanha de Final de Ano 2009 
     * 
     * @author: Vivianne Sousa
     * @date: 10/11/2009
     */
	public void emitirCartasDeFinalDeAno(Integer idGrupoFaturamento, 
			Integer idFuncionalidadeIniciada)throws ControladorException{
        
        int idUnidadeIniciada = 0;
        
        Date dataAtual = new Date();
		String nomeZip = null;
		nomeZip = "CARTA_FINAL_DE_ANO_GRUPO_" + idGrupoFaturamento + "_"
				+ Util.formatarData(dataAtual) + Util.formatarHoraSemDataSemDoisPontos(dataAtual);
		nomeZip = nomeZip.replace("/", "_");
		File compactado = new File(nomeZip + ".zip");
		ZipOutputStream zos = null;
		File leitura = new File(nomeZip + ".txt");
		BufferedWriter out = null;
		
        try {
        	
        	zos = new ZipOutputStream(new FileOutputStream(compactado));
        	out = new BufferedWriter(new OutputStreamWriter(new FileOutputStream(leitura.getAbsolutePath())));
        	 
    		System.out.println("***************************************");
    		System.out.println("EMITIR CARTAS DE FINAL DE ANO ");
    		System.out.println("***************************************");
    		
    		Collection colecaoPartesCarta = repositorioCobranca.pesquisarCartaFinalAnoGrupo(idGrupoFaturamento);
    		Iterator iter = colecaoPartesCarta.iterator();
    		
    		int sequencialImpressao = 0;
    		
    		idUnidadeIniciada = getControladorBatch().iniciarUnidadeProcessamentoBatch(idFuncionalidadeIniciada,UnidadeProcessamento.ROTA,0);
    		
    		while (iter.hasNext()) {
    			Object[] partesCarta = (Object[])iter.next();
    			
    			if(partesCarta != null && partesCarta[0] != null){
    				StringBuilder cobrancaDocumentoTxt = new StringBuilder();
    				sequencialImpressao++;
        			String parte1 = (String)partesCarta[0];
        			String parte2 = (String)partesCarta[1];
        			// Sequencial de impressao [13]
    				String sequencialImpressaoStr = Util.adicionarZerosEsquedaNumero(6,sequencialImpressao + "");
    				
    				cobrancaDocumentoTxt.append(parte1);
    				cobrancaDocumentoTxt.append("  " + sequencialImpressaoStr.substring(0,3) + "." + sequencialImpressaoStr.substring(3,6));
    				cobrancaDocumentoTxt.append(parte2);
    				
    				cobrancaDocumentoTxt.append(System.getProperty("line.separator"));
    			    out.write(cobrancaDocumentoTxt.toString());
    			}
    			
    		}	
    		
//		    out.write(cobrancaDocumentoTxt.toString());
    		
    		getControladorBatch().encerrarUnidadeProcessamentoBatch(null,idUnidadeIniciada, false);	
			System.out.println("***************************************");
			System.out.println("FIM DA CRIACAO DO ARQUIVO");
			System.out.println("***************************************");

        } catch (Exception ex) {
            ex.printStackTrace();
            getControladorBatch().encerrarUnidadeProcessamentoBatch(ex,idUnidadeIniciada, true);
            throw new EJBException(ex);
		} finally {
			try{
				out.close();
				ZipUtil.adicionarArquivo(zos, leitura);
		
				// close the stream
				zos.close();
				leitura.delete();
			} catch (IOException e) {
				getControladorBatch().encerrarUnidadeProcessamentoBatch(e,idUnidadeIniciada, true);
	            throw new EJBException(e);
			}
        }
        
    }
	
	/**
	 * [UC0214] Efetuar Parcelamento de Débitos
	 * 
	 * pesquisa o documento de cobranca do imovel 
	 * e do documento tipo passado como parametro
	 * 
	 * @author Vivianne Sousa
	 * @date 19/11/2009
	 * 
	 * @return
	 * @throws ErroRepositorioException
	 */
	public boolean existeCobrancaDocumentoDoImovel(
			Integer idImovel, Integer idDocumentoTipo)throws ControladorException{
		try{
			
			boolean retorno = false;
			
			Collection colecaoCobrancaDocumento = repositorioCobranca.
				pesquisarCobrancaDocumentoDoImovel(idImovel, idDocumentoTipo);
			
			if(colecaoCobrancaDocumento != null &&
					!colecaoCobrancaDocumento.isEmpty()){
				retorno = true;
			}
			
			return retorno;
		} catch (ErroRepositorioException e) {
			e.printStackTrace();
			throw new ControladorException("erro.sistema", e);
		}	
	}
	

	/**
	 * @author Vivianne Sousa
	 * @date 20/11/2009
	 * 
	 * @return
	 * @throws ErroRepositorioException
	 */
	public void deletarCartaFinalAno(Integer idRota) 
	throws ControladorException{
		try{
			
			repositorioCobranca.deletarCartaFinalAno(idRota);

		} catch (ErroRepositorioException e) {
			e.printStackTrace();
			throw new ControladorException("erro.sistema", e);
		}	
	}
	
	/**
	 * @author Anderson Italo
	 * @date 26/11/2009
	 * 
	 * @return Integer retorno
	 * @throws ErroRepositorioException
	 */
	public Integer pesquisarQuantidadeImoveisPorGrupoCobranca(Integer idCobrancaGrupo, Integer gerencia, Integer unidade, Integer localidade, Integer setorComercial, Integer quadra)
			throws ControladorException {
		Integer totalImoveis = null;
		try {
			totalImoveis = repositorioCobranca
					.pesquisarQuantidadeImoveisPorGrupoCobranca(idCobrancaGrupo,gerencia,unidade,localidade,setorComercial,quadra);
		} catch (ErroRepositorioException ex) {
			ex.printStackTrace();
			throw new ControladorException("erro.sistema", ex);
		}

		return totalImoveis;
	}
	
	/**
	 * @author Davi Menezes
	 * @date 17/11/2011
	 * 
	 * @return Integer
	 * @throws ControladorException
	 */
	public Integer pesquisarQuantidadeImoveisPorGrupoCobrancaAgrupadosTitulo(Integer gerencia, Integer unidade, Integer localidade, Integer setorComercial, Integer quadra)
			throws ControladorException {
		Integer totalImoveis = null;
		try{
			totalImoveis = repositorioCobranca.pesquisarQuantidadeImoveisPorGrupoCobrancaAgrupadosTitulo(gerencia, unidade, localidade, setorComercial, quadra);
		}catch(ErroRepositorioException ex){
			ex.printStackTrace();
			throw new ControladorException("erro.sistema", ex);
		}
		
		return totalImoveis;
	}
	
	/**
	 * 
	 * Este caso de uso permite a emissão de um ou mais documentos de cobrança
	 * 
	 * [UC0349] Emitir Documento de Cobrança
	 * 
	 * @author Raphael Rossiter,Vivianne Sousa
	 * @data 26/05/2006,14/12/2009
	 * 
	 * @param
	 * @return void
	 */
	public void gerarDocumentoCobrancaImpressao(
			CobrancaAcaoAtividadeCronograma cobrancaAcaoAtividadeCronograma,
			CobrancaAcaoAtividadeComando cobrancaAcaoAtividadeComando,
			Date dataAtualPesquisa, CobrancaAcao acaoCobranca,
			CobrancaGrupo grupoCobranca, CobrancaCriterio cobrancaCriterio)
			throws ControladorException {
		
		boolean flagFimPesquisa = false;
		final int quantidadeCobrancaDocumento = 1000;
		int quantidadeCobrancaDocumentoInicio = 0;

		StringBuilder cobrancaDocumentoTxt = new StringBuilder();
		int sequencialImpressao = 0;
		int sequencialOrdenacao = 0;
		Collection colecaoCobrancaDocumento = null;

		Map<Integer, Integer> mapAtualizaSequencial = null;

		Integer idCronogramaAtividadeAcaoCobranca = null;
		Integer idComandoAtividadeAcaoCobranca = null;
		Integer idAcaoCobranca = null;
		if (cobrancaAcaoAtividadeCronograma != null
				&& cobrancaAcaoAtividadeCronograma.getId() != null) {
			idCronogramaAtividadeAcaoCobranca = cobrancaAcaoAtividadeCronograma.getId();
		}
		if (cobrancaAcaoAtividadeComando != null
				&& cobrancaAcaoAtividadeComando.getId() != null) {
			idComandoAtividadeAcaoCobranca = cobrancaAcaoAtividadeComando.getId();
		}
		if (acaoCobranca != null && acaoCobranca.getId() != null) {
			idAcaoCobranca = acaoCobranca.getId();
		}

		while (!flagFimPesquisa) {
			// map que armazena o sequencial e o numero da
			// conta para no final atualizar todos os sequencias
			mapAtualizaSequencial = new HashMap();

			try {

				System.out.println("***************************************");
				System.out.println("ENTROU NO AVISO DE CORTE");
				System.out.println("***************************************");
				colecaoCobrancaDocumento = repositorioCobranca
						.pesquisarCobrancaDocumentoParaEmitir(
								idCronogramaAtividadeAcaoCobranca,
								idComandoAtividadeAcaoCobranca,
								dataAtualPesquisa, idAcaoCobranca,
								quantidadeCobrancaDocumentoInicio);
				System.out.println("***************************************");
				System.out.println("QTD DE COBRANCA DOCUMENTO:"	+ colecaoCobrancaDocumento.size());
				System.out.println("***************************************");
			} catch (ErroRepositorioException ex) {
				ex.printStackTrace();
				throw new ControladorException("erro.sistema", ex);
			}

			if (colecaoCobrancaDocumento != null
					&& !colecaoCobrancaDocumento.isEmpty()) {

				System.out.println("***************************************");
				System.out.println("QUANTIDADE COBRANÇA:" + colecaoCobrancaDocumento.size());
				System.out.println("***************************************");

				if (colecaoCobrancaDocumento.size() < quantidadeCobrancaDocumento) {
					flagFimPesquisa = true;
				} else {
					quantidadeCobrancaDocumentoInicio = quantidadeCobrancaDocumentoInicio + 1000;
				}

				int metadeColecao = 0;
				if (colecaoCobrancaDocumento.size() % 2 == 0) {
					metadeColecao = colecaoCobrancaDocumento.size() / 2;
				} else {
					metadeColecao = (colecaoCobrancaDocumento.size() / 2) + 1;
				}

				Map<Integer, Map<Object, Object>> mapCobrancaDocumentoOrdenada = dividirColecao(colecaoCobrancaDocumento);

				if (mapCobrancaDocumentoOrdenada != null) {
					int countOrdem = 0;

					while (countOrdem < mapCobrancaDocumentoOrdenada.size()) {
						Map<Object, Object> mapCobrancaoDocumentoDivididas = mapCobrancaDocumentoOrdenada
								.get(countOrdem);

						Iterator iteratorCobrancaDocumento = mapCobrancaoDocumentoDivididas.keySet().iterator();

						while (iteratorCobrancaDocumento.hasNext()) {

							CobrancaDocumento cobrancaDocumento = null;

							int situacao = 0;

							cobrancaDocumento = (CobrancaDocumento) iteratorCobrancaDocumento.next();

							String nomeCliente = null;
							Collection colecaoCobrancaDocumentoItem = null;

							/*
							 * Estes objetos auxiliarão na formatação da
							 * inscrição que será composta por informações do
							 * documento de cobrança e do imóvel a ele associado
							 */
							Imovel inscricao = null;
							SetorComercial setorComercialInscricao = null;
							Quadra quadraInscricao = null;

							/*
							 * Objeto que será utilizado para armazenar as
							 * informações do documento de cobrança de acordo
							 * com o layout definido no caso de uso
							 */

							sequencialImpressao++;

							while (situacao < 2) {
								if (situacao == 0) {
									situacao = 1;
									sequencialImpressao = atualizaSequencial(
											sequencialImpressao, situacao, metadeColecao);

								} else {
									cobrancaDocumento = (CobrancaDocumento) mapCobrancaoDocumentoDivididas.get(cobrancaDocumento);
									situacao = 2;
									sequencialImpressao = atualizaSequencial(
											sequencialImpressao, situacao, metadeColecao);
								}

								if (cobrancaDocumento != null) {

									try {

										nomeCliente = this.repositorioClienteImovel
											.pesquisarNomeClientePorImovel(cobrancaDocumento.getImovel().getId());

										colecaoCobrancaDocumentoItem = this.repositorioCobranca
												.selecionarCobrancaDocumentoItemReferenteConta(cobrancaDocumento);

									} catch (ErroRepositorioException ex) {
										ex.printStackTrace();
										throw new ControladorException(
												"erro.sistema", ex);
									}

									if (colecaoCobrancaDocumentoItem != null
											&& !colecaoCobrancaDocumentoItem.isEmpty()) {

										// Início do processo de geração da linha do txt 

										// Nome da Localidade
										cobrancaDocumentoTxt.append(Util.completaString(
											cobrancaDocumento.getLocalidade().getDescricao(),25));
										
										if (cobrancaAcaoAtividadeCronograma != null) {
											
											String ciclo = "CICLO:" + Util.formatarAnoMesParaMesAno(
													cobrancaAcaoAtividadeCronograma.getCobrancaAcaoCronograma()
													.getCobrancaGrupoCronogramaMes().getAnoMesReferencia());
											
											cobrancaDocumentoTxt.append(Util.completaString(ciclo, 13));
											
										}else {
											cobrancaDocumentoTxt.append(Util.completaString("", 13));
										}

										// Inscrição
										quadraInscricao = new Quadra();
										setorComercialInscricao = new SetorComercial();
										inscricao = new Imovel();

										quadraInscricao.setNumeroQuadra(cobrancaDocumento.getNumeroQuadra());
										setorComercialInscricao.setCodigo(cobrancaDocumento.getCodigoSetorComercial());
										inscricao.setLocalidade(cobrancaDocumento.getLocalidade());
										inscricao.setSetorComercial(setorComercialInscricao);
										inscricao.setQuadra(quadraInscricao);
										inscricao.setLote(cobrancaDocumento.getImovel().getLote());
										inscricao.setSubLote(cobrancaDocumento.getImovel().getSubLote());

										cobrancaDocumentoTxt.append(Util.completaString(
												inscricao.getInscricaoFormatada(),20));

										// Nome do Cliente
										cobrancaDocumentoTxt.append(Util.completaString(nomeCliente, 50));

										// Matrícula do imóvel
										String matriculaImovelFormatada = Util.retornaMatriculaImovelFormatada(
												cobrancaDocumento.getImovel().getId());

										cobrancaDocumentoTxt.append(Util.completaStringComEspacoAEsquerda(
											   matriculaImovelFormatada,10));

										// Endereço Formatado
										cobrancaDocumentoTxt.append(Util.completaString(cobrancaDocumento
											.getImovel().getEnderecoFormatadoAbreviado(),72));
										
										// Grupo de Cobrança
										cobrancaDocumentoTxt.append(Util.completaStringComEspacoAEsquerda(
											cobrancaDocumento.getQuadra().getRota().getCobrancaGrupo().getId().toString(),2));

										// Sequencial do Documento de Cobrança
										cobrancaDocumentoTxt.append(Util.completaStringComEspacoAEsquerda(
											"" + cobrancaDocumento.getNumeroSequenciaDocumento(),9));

										// Código da situação da ligação de água
										cobrancaDocumentoTxt
											.append(Util.completaStringComEspacoAEsquerda(cobrancaDocumento
											.getImovel().getLigacaoAguaSituacao().getId().toString(),1));

										// Código da situação da ligação de esgoto
										cobrancaDocumentoTxt
											.append(Util.completaStringComEspacoAEsquerda(cobrancaDocumento
											.getImovel().getLigacaoEsgotoSituacao().getId().toString(),1));

										/*
										 * Quantidades de economias por categoria: 
										 * 1º RESIDÊNCIAL 2º COMERCIAL 3º INDUSTRIAL 4º PÚBLICA
										 */
										Collection colecaoCategorias = this.getControladorImovel()
												.obterQuantidadeEconomiasCategoria(cobrancaDocumento.getImovel());
										
										String qtdResidencial = "";
										String qtdComercial = "";
										String qtdIndustrial = "";
										String qtdPublico = "";

										if (colecaoCategorias != null && !colecaoCategorias.isEmpty()) {
											Iterator iteratorColecaoCategorias = colecaoCategorias.iterator();
											Categoria categoria = null;

											while (iteratorColecaoCategorias.hasNext()) {
												categoria = (Categoria) iteratorColecaoCategorias.next();

												if (categoria.getId().equals(Categoria.RESIDENCIAL)) {
													qtdResidencial = ""	+ categoria.getQuantidadeEconomiasCategoria();
												} else if (categoria.getId().equals(Categoria.COMERCIAL)) {
													qtdComercial = "" + categoria.getQuantidadeEconomiasCategoria();
												} else if (categoria.getId().equals(Categoria.INDUSTRIAL)) {
													qtdIndustrial = "" + categoria.getQuantidadeEconomiasCategoria();
												} else if (categoria.getId().equals(Categoria.PUBLICO)) {
													qtdPublico = "" + categoria.getQuantidadeEconomiasCategoria();
												}
											}
										}
										colecaoCategorias = null;

										// Residêncial
										if (!qtdResidencial.equals("")) {
											cobrancaDocumentoTxt.append(Util.adicionarZerosEsquedaNumero(
													3,qtdResidencial));
										} else {
											cobrancaDocumentoTxt.append(Util.completaString("", 3));
										}

										// Comercial
										if (!qtdComercial.equals("")) {
											cobrancaDocumentoTxt.append(Util.adicionarZerosEsquedaNumero(
													3, qtdComercial));
										} else {
											cobrancaDocumentoTxt.append(Util.completaString("", 3));
										}

										// Industrial
										if (!qtdIndustrial.equals("")) {
											cobrancaDocumentoTxt.append(Util.adicionarZerosEsquedaNumero(
													3,qtdIndustrial));
										} else {
											cobrancaDocumentoTxt.append(Util.completaString("", 3));
										}

										// Público
										if (!qtdPublico.equals("")) {
											cobrancaDocumentoTxt.append(Util.adicionarZerosEsquedaNumero(
													3,qtdPublico));
										} else {
											cobrancaDocumentoTxt.append(Util.completaString("", 3));
										}
			

										// Perfil do Imóvel
										cobrancaDocumentoTxt.append(Util.completaString(cobrancaDocumento
											.getImovelPerfil().getDescricao(),8));

										// Data de Emissão
										if (cobrancaDocumento.getEmissao() != null) {
											cobrancaDocumentoTxt.append(Util.formatarData(cobrancaDocumento.getEmissao()));
										} else {
											cobrancaDocumentoTxt.append(Util.completaString("", 10));
										}

										//alterado por Vivianne Sousa 15/09/2008
										//Data de Validade
										Date dataValidade = this.
											obterDataValidadeDocumentoCobranca(cobrancaDocumento,null,null);
										
										if (dataValidade != null) {
											cobrancaDocumentoTxt.append(Util.formatarData(dataValidade));
										} else {
											cobrancaDocumentoTxt.append(Util.completaString("", 10));
										}
										
										// LINHA 07
										// ==================================

										/*
										 * Selecionar os itens do documento de
										 * cobrança correspondentes a conta e
										 * ordenar por ano/mês de referência da
										 * conta
										 */
										
										if (colecaoCobrancaDocumentoItem != null
												&& !colecaoCobrancaDocumentoItem.isEmpty()) {
											
											//retorna o indicador de estouro e formata o cobrançaDocumentoTxt com os dados
		    								formatarCobrancaDocumentoItemSemValorEncargos(cobrancaDocumentoTxt,colecaoCobrancaDocumentoItem,28,cobrancaDocumento);
		    								
										}
										
										// Constante "GR- "
										cobrancaDocumentoTxt.append("GR-");

										// Grupo de Cobrança
										cobrancaDocumentoTxt.append(Util.completaStringComEspacoAEsquerda(cobrancaDocumento
											.getQuadra().getRota().getCobrancaGrupo().getId().toString(),2));

										// Código e descrição da empresa
										if (cobrancaDocumento.getEmpresa() != null) {
											cobrancaDocumentoTxt.append(Util.completaStringComEspacoAEsquerda(
													cobrancaDocumento.getEmpresa().getId().toString(),2));

											cobrancaDocumentoTxt.append("-");

											cobrancaDocumentoTxt.append(Util.completaString(
													cobrancaDocumento.getEmpresa().getDescricaoAbreviada(),11));
										} else {
											cobrancaDocumentoTxt.append(Util.completaString("", 14));
										}

										// Sigla e descriçao da gerência regional
										cobrancaDocumentoTxt.append(Util.completaString(
											cobrancaDocumento.getLocalidade().getGerenciaRegional().getNomeAbreviado(),3));

										cobrancaDocumentoTxt.append("-");

										cobrancaDocumentoTxt.append(Util.completaString(
											cobrancaDocumento.getLocalidade().getGerenciaRegional().getNome(),8));

										// Sequencial de impressão
										cobrancaDocumentoTxt.append(Util.completaStringComEspacoAEsquerda(
											Util.retornaSequencialFormatado(sequencialImpressao),9));

										// LINHA 13
										// ==================================

										String representacaoNumericaCodBarra = "";

										// Obtém a representação numérica do código de barra
										representacaoNumericaCodBarra = this.getControladorArrecadacao()
												.obterRepresentacaoNumericaCodigoBarra(
												5,
												cobrancaDocumento.getValorDocumento(),
												cobrancaDocumento.getLocalidade().getId(),
												cobrancaDocumento.getImovel().getId(),
												null,
												null,
												null,
												null,
												String.valueOf(cobrancaDocumento.getNumeroSequenciaDocumento()),
												cobrancaDocumento.getDocumentoTipo().getId(), 
												null,
												null,
												null);

										// Formata a representação númerica do código de barras
										String representacaoNumericaCodBarraFormatada = 
											  representacaoNumericaCodBarra.substring(0, 11) + " "
											+ representacaoNumericaCodBarra.substring(11, 12) + " "
											+ representacaoNumericaCodBarra.substring(12, 23) + " "
											+ representacaoNumericaCodBarra.substring(23, 24) + " "
											+ representacaoNumericaCodBarra.substring(24, 35) + " "
											+ representacaoNumericaCodBarra.substring(35, 36) + " "
											+ representacaoNumericaCodBarra.substring(36, 47) + " "
											+ representacaoNumericaCodBarra.substring(47, 48);

										cobrancaDocumentoTxt.append(representacaoNumericaCodBarraFormatada);

										// LINHA 16
										// ==================================

										// Cria o objeto para gerar o código de barras no padrão intercalado 2 de 5
										Interleaved2of5 codigoBarraIntercalado2de5 = new Interleaved2of5();

										// Recupera a representação númerica do
										// código de barras sem os dígitos verificadores
										String representacaoCodigoBarrasSemDigitoVerificador = 
											  representacaoNumericaCodBarra.substring(0, 11)
											+ representacaoNumericaCodBarra.substring(12, 23)
											+ representacaoNumericaCodBarra.substring(24, 35)
											+ representacaoNumericaCodBarra.substring(36, 47);

										cobrancaDocumentoTxt.append(codigoBarraIntercalado2de5.encodeValue(representacaoCodigoBarrasSemDigitoVerificador));

										String txtString =  cobrancaDocumentoTxt.toString();
        								
        								txtString = txtString.replace('\'',' ');
        								txtString = txtString.replace('`',' ');
        								
        								try {
        									
											repositorioCobranca.inserirDocumentoCobrancaImpressao(
													cobrancaDocumento.getId(),
													txtString,
													idComandoAtividadeAcaoCobranca,
													idCronogramaAtividadeAcaoCobranca,
													sequencialOrdenacao++);
        									
										} catch (ErroRepositorioException ex) {
											ex.printStackTrace();
											throw new ControladorException("erro.sistema", ex);
										}

		
										cobrancaDocumentoTxt = new StringBuilder();
										
									}
									// adiciona o id da  conta e o sequencial
									// no para serem atualizados
									mapAtualizaSequencial.put(cobrancaDocumento.getId(), sequencialImpressao);

									colecaoCobrancaDocumentoItem = null;
								}

							}// fim do laço que verifica as 2 contas

						}// fim laço while do iterator do objeto helper
						countOrdem++;
						mapCobrancaoDocumentoDivididas = null;
					}
				}
			} else {
				flagFimPesquisa = true;
			}
			try {
				repositorioCobranca
						.atualizarSequencialCobrancaDocumentoImpressao(mapAtualizaSequencial);
			} catch (ErroRepositorioException e) {
				throw new ControladorException("erro.sistema", e);
			}
			mapAtualizaSequencial = null;
			colecaoCobrancaDocumento = null;
		}
		
		System.out.println("***************************************");
		System.out.println("FINAL GERAR DOCUMENTO COBRANCA IMPRESSAO");
		System.out.println("***************************************");
		

	}
	
	/**
	 * @author Anderson Italo
	 * @date 30/11/2009
	 * 
	 * @return Integer retorno
	 * @throws ErroRepositorioException
	 */
	public Integer pesquisarQuantidadeImoveisPorComandoEventual(Integer idCobrancaAcaoAtividadeComando, Integer gerencia, Integer unidade, Integer localidade, Integer setorComercial, Integer quadra)
			throws ControladorException {
		Integer totalImoveis = null;
		try {
			totalImoveis = repositorioCobranca
					.pesquisarQuantidadeImoveisPorComandoEventual(idCobrancaAcaoAtividadeComando,gerencia,unidade,localidade,setorComercial,quadra);
		} catch (ErroRepositorioException ex) {
			ex.printStackTrace();
			throw new ControladorException("erro.sistema", ex);
		}

		return totalImoveis;
	}
	
	/**
	 * [UC0927] ? Confirmar Cartão de Crédito/Débito
	 * 
	 * Identifica e obtém as informações necessárias para confirmar pagamento(s) por cartão de crédito
	 * ou débito 
	 *
	 * @author Raphael Rossiter
	 * @date 05/01/2010
	 *
	 * @param modalidadeCartao
	 * @param matriculaImovel
	 * @return ObterDadosConfirmarCartaoCreditoDebitoHelper
	 * @throws ControladorException
	 */
	public ObterDadosConfirmarCartaoCreditoDebitoHelper obterDadosConfirmarCartaoCreditoDebito(Short modalidadeCartao,
			Integer matriculaImovel) throws ControladorException {
		
		ObterDadosConfirmarCartaoCreditoDebitoHelper retorno = null;
		
		if (modalidadeCartao != null && matriculaImovel != null){
			
			retorno = new ObterDadosConfirmarCartaoCreditoDebitoHelper();
			
			//MODALIDADE CRÉDITO
			if (modalidadeCartao.equals(ConstantesSistema.MODALIDADE_CARTAO_CREDITO)){
				
				/*
				 * O sistema apresenta uma lista dos parcelamentos de débitos ativos efetuados para o 
				 * imóvel (a partir da tabela PARCELAMENTO com IMOV_ID=IMOV_ID do IMOVEL e PCST_ID da tabela 
				 * PARCELAMENTO com valor igual à NORMAL)
				 */
				FiltroParcelamento filtroParcelamento = new FiltroParcelamento();

				filtroParcelamento.adicionarParametro(new ParametroSimples(
				FiltroParcelamento.IMOVEL_ID, matriculaImovel.intValue()));
			
				filtroParcelamento.adicionarParametro(new ParametroSimples(
				FiltroParcelamento.PARCELAMENTO_SITUACAO, ParcelamentoSituacao.NORMAL));

				filtroParcelamento.adicionarCaminhoParaCarregamentoEntidade("parcelamentoSituacao");
			
				filtroParcelamento.adicionarCaminhoParaCarregamentoEntidade("usuario");

				Collection<Parcelamento> colecaoParcelamento = this.getControladorUtil().pesquisar(filtroParcelamento, 
				Parcelamento.class.getName());
				
				if (colecaoParcelamento == null || colecaoParcelamento.isEmpty()){
					
					//[FS0002 ? Verificar existência de parcelamentos para o imóvel]
					throw new ControladorException("atencao.parcelamento.inexistente");
	        	}
				
				retorno.setModalidade(ConstantesSistema.MODALIDADE_CARTAO_CREDITO);
				retorno.setColecaoParcelamentosModalidadeCredito(colecaoParcelamento);
			}
			
			//MODALIDADE DÉBITO
			else{
				
				/*
				 * [UC0630] - Solicitar Emissão do Extrato de Débitos Apresentar
				 * [SB0001] - Apresentar Débitos/Créditos do Imóvel de Origem
				 */
				ObterDebitoImovelOuClienteHelper colecaoDebitoImovel = 
				this.apresentarDebitoCreditoImovelExtratoDebito(new Integer(matriculaImovel), false);
				
				boolean existeDebitoCredito = false;
				
				//CONTA
				if (colecaoDebitoImovel.getColecaoContasValoresImovel() != null && 
					!colecaoDebitoImovel.getColecaoContasValoresImovel().isEmpty()) {
					
					existeDebitoCredito = true;
				}

				// DEBITO_A_COBRAR
				if (colecaoDebitoImovel.getColecaoDebitoACobrar() != null && 
					!colecaoDebitoImovel.getColecaoDebitoACobrar().isEmpty()) {
					
					existeDebitoCredito = true;
				}

				// GUIA_PAGAMENTO
				if (colecaoDebitoImovel.getColecaoGuiasPagamentoValores() != null && 
					!colecaoDebitoImovel.getColecaoGuiasPagamentoValores().isEmpty()) {
					
					existeDebitoCredito = true;
				}
				
				//PARCELAMENTO
				if (colecaoDebitoImovel.getColecaoDebitoCreditoParcelamentoHelper() != null && 
					!colecaoDebitoImovel.getColecaoDebitoCreditoParcelamentoHelper().isEmpty()) {
					
					existeDebitoCredito = true;
				}
				
				if (!existeDebitoCredito) {
					throw new ControladorException("atencao.imovel_sem_debito_credito");
				}
				
				retorno.setModalidade(ConstantesSistema.MODALIDADE_CARTAO_DEBITO);
				retorno.setDebitosImovelModalidadeDebito(colecaoDebitoImovel);
			}
		}
		
		return retorno;
	}
	
	/**
	 * [UC0927] ? Confirmar Cartão de Crédito/Débito
	 * 
	 * [FS0008] ? Verificar validade da data
	 *
	 * @author Raphael Rossiter
	 * @date 15/01/2010
	 *
	 * @param dataConfirmacaoOperadora
	 * @param idCliente
	 * @param idArrecadacaoForma
	 * @throws ControladorException
	 */
	public void verificarValidadeData(Date dataConfirmacaoOperadora, Integer idCliente, Integer idArrecadacaoForma) 
		throws ControladorException{
		
		/*
		 * Caso a data informada seja maior que a data corrente, exibir a mensagem ?Data deve menor ou 
		 * igual a data corrente? e retornar para o passo correspondente no fluxo principal.
		 */
		Date dataCorrente = new Date();
		
		if (dataConfirmacaoOperadora.compareTo(dataCorrente) > 0){
			throw new ControladorException("atencao.data_menor_que_atual", null, "Confirmação na Operadora");
		}
		
		/*
		 * Caso a data informada seja menor que a data corrente menos a quantidade de dias do float 
		 * (ACTF_NNDIAFLOAT da tabela ARRECADADOR_CONTRATO_TARIFA com ARCT_ID = ARCT_ID da tabela 
		 * ARRECADOR_CONTRATO com ARRC_ID = ARRC_ID do cartão de crédito selecionado ARFM_ID = ?Carão de Crédito?), 
		 * exibir a mensagem ?Data informada não é data válida para baixa de pagamento? e retornar para o 
		 * passo correspondente no fluxo principal.
		 */
		Date dataCorrenteMenosNumeroDiasFloat = dataCorrente;
		Short nnDiasFloat = null;
		
		try {
			
			nnDiasFloat = repositorioCobranca.pesquisarNumeroDiasFloatCartao(idCliente, idArrecadacaoForma);
		} 
		catch (ErroRepositorioException ex) {
			ex.printStackTrace();
			throw new ControladorException("erro.sistema", ex);
		}
		
		if (nnDiasFloat != null){
			
			dataCorrenteMenosNumeroDiasFloat = Util.subtrairNumeroDiasDeUmaData(
			dataCorrenteMenosNumeroDiasFloat, nnDiasFloat.intValue());
		}
		
		if (dataConfirmacaoOperadora.compareTo(dataCorrenteMenosNumeroDiasFloat) < 0){
			throw new ControladorException("atencao.data_menor_que_atual_menos_float");
		}
	}
	
	
	/**
	 * [UC0927] ? Confirmar Cartão de Crédito/Débito
	 * 
	 * [FS0007] ? Somatório Inválido
     * [FS00010] ? Somatório Inválido
	 *
	 * @author Raphael Rossiter
	 * @date 08/01/2010
	 *
	 * @param colecaoTransacao
	 * @param valorTotalParaQuitacao
	 * @throws ControladorException
	 */
	public void verificarSomatorio(Collection colecaoTransacao, BigDecimal valorTotalParaQuitacao) 
		throws ControladorException{
		
		if(colecaoTransacao == null){
	        throw new ControladorException("atencao.somatorio_invalido",null,"menor");    	
		}
		
		BigDecimal valorTotalTransacao = BigDecimal.ZERO;
		ParcelamentoCartaoCreditoHelper helper = null;
		BigDecimal valorTransacao = null;
		
		Iterator iteratorTransacao = colecaoTransacao.iterator();
		
		while(iteratorTransacao.hasNext()){
        	
			helper = (ParcelamentoCartaoCreditoHelper) iteratorTransacao.next();
        	
			valorTransacao = new BigDecimal(helper.getValorTransacao().replace(".","").replace(",","."));
			valorTotalTransacao = Util.somaBigDecimal(valorTotalTransacao, valorTransacao);
        }
		
		/*
		 * Caso o somatório dos cartões esteja maior ou menor que o valor total dos débitos selecionados, 
		 * exibir a mensagem ?Valor informado para os cartões está inválido? + menor  ou maior ?que o 
		 * valor dos débitos selecionados?.
		 */
		if((valorTotalTransacao.compareTo(valorTotalParaQuitacao)!=0)){
        	
			if(valorTotalTransacao.compareTo(valorTotalParaQuitacao)< 0){
        		throw new ControladorException("atencao.somatorio_invalido",null,"menor");
        	}
			else{
        		throw new ControladorException("atencao.somatorio_invalido",null,"maior");
        	}
        }
		
	}
	
	
	/**
	 * [UC0927] ? Confirmar Cartão de Crédito/Débito
	 *
	 * @author Raphael Rossiter
	 * @date 12/01/2010
	 *
	 * @param idParcelamentoSelecionado
	 * @param colecaoTransacao
	 * @param usuarioLogado
	 * @throws ControladorException
	 */
	public void confirmarCartaoCredito(Integer idParcelamentoSelecionado, 
		Collection colecaoTransacao, Usuario usuarioLogado) throws ControladorException{
		
		try{
			
			//[SB0001? Incluir Dados da Confirmação do Parcelamento]
			IncluirConfirmacaoParcelamentoHelper incluirConfirmacaoParcelamentoHelper = 
			this.incluirDadosConfirmacaoParcelamento(idParcelamentoSelecionado, colecaoTransacao, usuarioLogado);
				
			/*
			 * O sistema deverá atualizar todos os débitos do parcelamento que estejam na situação normal 
			 * (DCST_IDATUAL = 0 e PARC_ID = PARC_ID confirmado na tabela de DEBITO_A_COBRAR). 
			 */
			Iterator iterator = incluirConfirmacaoParcelamentoHelper.getColecaoDebitoACobrar().iterator();	
					
			while(iterator.hasNext()){
					
				DebitoACobrar dAc = (DebitoACobrar) iterator.next();
						
				//------------ REGISTRAR TRANSAÇÃO ----------------
				RegistradorOperacao registradorOperacao = new RegistradorOperacao(
				    Operacao.OPERACAO_CONFIRMAR_PARCELAMENTO_CARTAO_CREDITO,
				    dAc.getId(),dAc.getId(),
				    new UsuarioAcaoUsuarioHelper(usuarioLogado,
				    UsuarioAcao.USUARIO_ACAO_EFETUOU_OPERACAO));
			
				registradorOperacao.registrarOperacao(dAc);
				// ------------ REGISTRAR TRANSAÇÃO ----------------
					
				getControladorUtil().atualizar(dAc);
				
			}
				
			//ATUALIZANDO OS CRÉDITOS
			Iterator iteratorCreditoAtualizar = incluirConfirmacaoParcelamentoHelper
			.getColecaoCreditoARealizar().iterator();	
				
			while(iteratorCreditoAtualizar.hasNext()){
					
				CreditoARealizar credito = (CreditoARealizar) iteratorCreditoAtualizar.next();
						
				//------------ REGISTRAR TRANSAÇÃO ----------------
				RegistradorOperacao registradorOperacao = new RegistradorOperacao(
				    Operacao.OPERACAO_CONFIRMAR_PARCELAMENTO_CARTAO_CREDITO,
				    credito.getId(),credito.getId(),
				    new UsuarioAcaoUsuarioHelper(usuarioLogado,
				    UsuarioAcao.USUARIO_ACAO_EFETUOU_OPERACAO));
			
				registradorOperacao.registrarOperacao(credito);
				// ------------ REGISTRAR TRANSAÇÃO ----------------
					
				getControladorUtil().atualizar(credito);
				
			}
				
			/*
			 * O sistema deverá atualizar a tabela de PARCELAMENTO_PAGAMENTO_CARTAO_CREDITO
			 */
			Iterator itera =  incluirConfirmacaoParcelamentoHelper
			.getColecaoParcelamentoPagamentoCartaoCredito().iterator();
				
			while(itera.hasNext()){
					
				ParcelamentoPagamentoCartaoCredito parcPagamento = (ParcelamentoPagamentoCartaoCredito) itera.next();			
					
				this.getControladorUtil().inserir(parcPagamento);
				
			}
			
			//Cria a variável que vai armazenar a forma de cobrança
			CobrancaForma cobrancaForma = new CobrancaForma();
			cobrancaForma.setId(CobrancaForma.COBRANCA_EM_CARTAO_CREDITO);
			incluirConfirmacaoParcelamentoHelper.getParcelamento().setCobrancaForma(cobrancaForma);
			
			//O sistema deverá atualizar a tabela de parcelamento para confirmar o parcelamento:
			this.getControladorUtil().atualizar(incluirConfirmacaoParcelamentoHelper.getParcelamento());
				
				
			//[SB0002] ? Gerar/Atualizar Guia de Pagamento Cartão de Crédito
			this.gerarAtualizarGuiaPagamentoCartaoCredito(incluirConfirmacaoParcelamentoHelper.getParcelamento(),
			incluirConfirmacaoParcelamentoHelper.getColecaoParcelamentoPagamentoCartaoCredito(), usuarioLogado);
		}
		catch (Exception e) {
			
			/*
			 * COLOCADO PARA VERIFICAR SE JÁ FOI DADO ROLLBACK
			 */
			if (!sessionContext.getRollbackOnly()){
				sessionContext.setRollbackOnly();
			}
			
			e.printStackTrace();
		}
		
	}
	
	
	/**
	 * [UC0927] ? Confirmar Cartão de Crédito/Débito
	 * 
	 * [SB0001? Incluir Dados da Confirmação do Parcelamento]
	 *
	 * @author Raphael Rossiter
	 * @date 08/01/2010
	 *
	 * @param idParcelamentoSelecionado
	 * @param colecaoTransacao
	 * @param usuarioLogado
	 * @return
	 * @throws ControladorException
	 */
	public IncluirConfirmacaoParcelamentoHelper incluirDadosConfirmacaoParcelamento(
		Integer idParcelamentoSelecionado, Collection colecaoTransacao, Usuario usuarioLogado) 
		throws ControladorException{
		
		IncluirConfirmacaoParcelamentoHelper retorno = new 
		IncluirConfirmacaoParcelamentoHelper();
		
		//CARREGANDO O PARCELAMENTO SELECIONADO
        FiltroParcelamento filtroParcelamento = new FiltroParcelamento();
		
		filtroParcelamento.adicionarParametro(new ParametroSimples(
		FiltroParcelamento.ID,idParcelamentoSelecionado));
		
		filtroParcelamento.adicionarCaminhoParaCarregamentoEntidade("parcelamentoSituacao");
		filtroParcelamento.adicionarCaminhoParaCarregamentoEntidade("parcelamentoSituacao");
		filtroParcelamento.adicionarCaminhoParaCarregamentoEntidade("parcelamentoTipo");
		
		Collection<Parcelamento> colecaoParcelamento = this.getControladorUtil()
		.pesquisar(filtroParcelamento, Parcelamento.class.getName());
		
		Parcelamento parcelamento = (Parcelamento) Util.retonarObjetoDeColecao(colecaoParcelamento);
		
		//PREPARANDO O PARCELAMENTO PARA CONFIRMAR SEU PAGAMENTO VIA CARTÃO DE CRÉDITO 
		parcelamento.setIndicadorConfirmacaoParcelamento(ConstantesSistema.SIM);
		parcelamento.setUltimaAlteracao(new Date());
		
		retorno.setParcelamento(parcelamento);
		
		
		//GERANDO A CONFIRMAÇÃO DO PARCELAMENTO POR CARTÃO DE CRÉDITO
		Iterator iteratorColecaoTransacao = colecaoTransacao.iterator();
        
        Collection colecaoParcelamentoPagamentoCartaoCredito = new ArrayList();
        
        while(iteratorColecaoTransacao.hasNext()){
        	
        	ParcelamentoCartaoCreditoHelper cartaoCreditoHelper = (ParcelamentoCartaoCreditoHelper) 
        	iteratorColecaoTransacao.next();
        	
        	ParcelamentoPagamentoCartaoCredito parcelamentoPagamentoCartaoCredito = 
        	new ParcelamentoPagamentoCartaoCredito();
        	
        	parcelamentoPagamentoCartaoCredito.setParcelamento(parcelamento);
        	parcelamentoPagamentoCartaoCredito.setDocumentoCartaoCredito(cartaoCreditoHelper.getDocumentoCartao());
        	parcelamentoPagamentoCartaoCredito.setNumeroAutorizacao(cartaoCreditoHelper.getAutorizacaoCartao());
        	parcelamentoPagamentoCartaoCredito.setNumeroCartaoCredito(Util.encrypt(cartaoCreditoHelper.getNumeroCartao()));
        	parcelamentoPagamentoCartaoCredito.setAnoMesValidade(
        	new Integer(Util.formatarMesAnoParaAnoMesSemBarra(cartaoCreditoHelper.getValidadeCartao())));
        	
        	//PESQUISA DO CLIENTE
        	FiltroCliente filtroCliente = new FiltroCliente();    
        	filtroCliente.adicionarParametro(new ParametroSimples(
        	FiltroCliente.ID, cartaoCreditoHelper.getIdCliente()));
        	
        	Collection clientes =  this.getControladorUtil().pesquisar(filtroCliente,Cliente.class.getName());
        	Cliente cliente = (Cliente) Util.retonarObjetoDeColecao(clientes);
        	
        	parcelamentoPagamentoCartaoCredito.setCliente(cliente);
        	
            //PESQUISA DO ARRECADADOR
        	FiltroArrecadador filtroArrecadador = new FiltroArrecadador();
        	filtroArrecadador.adicionarCaminhoParaCarregamentoEntidade("cliente");
        	filtroArrecadador.adicionarParametro(new ParametroSimples(
        	FiltroArrecadador.CLIENTE_ID,cartaoCreditoHelper.getIdArrecadador()));
        	
        	Collection arrecadadores =  this.getControladorUtil().pesquisar(filtroArrecadador,Arrecadador.class.getName());
        	Arrecadador arrecadador = (Arrecadador) Util.retonarObjetoDeColecao(arrecadadores);
        	
        	parcelamentoPagamentoCartaoCredito.setArrecadador(arrecadador);
        	parcelamentoPagamentoCartaoCredito.setUsuarioConfirmacao(usuarioLogado);
        	parcelamentoPagamentoCartaoCredito.setUltimaAlteracao(new Date());
        	parcelamentoPagamentoCartaoCredito.setValorParcelado(
        	new BigDecimal(cartaoCreditoHelper.getValorTransacao().replace(".","").replace(",",".")));
        	parcelamentoPagamentoCartaoCredito.setIdentificacaoTransacao(cartaoCreditoHelper.getNumeroIdentificacaoTransacao());
        	parcelamentoPagamentoCartaoCredito.setQuantidadeParcelas(
        	new Integer(cartaoCreditoHelper.getQtdParcelas()));
        	
        	
        	//DATA DE CONFIRMAÇÃO NA OPERADORA
        	parcelamentoPagamentoCartaoCredito.setDataConfirmacao(cartaoCreditoHelper
        	.getDataConfirmacaoOperadora());
        	
        	//INDICADOR CONFIRMAÇÃO OPERADORA
        	parcelamentoPagamentoCartaoCredito.setIndicadorConfirmadoOperadora(ConstantesSistema.NAO);
        	
        	colecaoParcelamentoPagamentoCartaoCredito.add(parcelamentoPagamentoCartaoCredito);
        
        }
        
        retorno.setColecaoParcelamentoPagamentoCartaoCredito(colecaoParcelamentoPagamentoCartaoCredito);
        
        
        //GERANDO A COLEÇÃO DE DÉBITOS A COBRAR QUE SERÃO ATUALIZADOS
        FiltroDebitoACobrar filtroDebitoACobrar = new FiltroDebitoACobrar();
		
		filtroDebitoACobrar.adicionarParametro(new ParametroSimples(
		FiltroDebitoACobrar.PARCELAMENTO_ID,idParcelamentoSelecionado));
		filtroDebitoACobrar.adicionarParametro(new ParametroSimples(
		FiltroDebitoACobrar.DEBITO_CREDITO_SITUACAO_ATUAL_ID,DebitoCreditoSituacao.NORMAL));
		
		filtroDebitoACobrar.adicionarCaminhoParaCarregamentoEntidade("parcelamento");
		filtroDebitoACobrar.adicionarCaminhoParaCarregamentoEntidade("debitoCreditoSituacaoAtual");
		filtroDebitoACobrar.adicionarCaminhoParaCarregamentoEntidade("debitoCreditoSituacaoAnterior");
		filtroDebitoACobrar.adicionarCaminhoParaCarregamentoEntidade("cobrancaForma");
		
		Collection<DebitoACobrar> colecaoDebito = this.getControladorUtil()
		.pesquisar(filtroDebitoACobrar,DebitoACobrar.class.getName() );
		
		Iterator iterator = colecaoDebito.iterator();
		
		Collection<DebitoACobrar> colecaoDebitoAtualizar = new ArrayList();
		
		CobrancaForma cf = new CobrancaForma();
		cf.setId(CobrancaForma.COBRANCA_EM_CARTAO_CREDITO);
		
		while(iterator.hasNext()){
			
			DebitoACobrar debitoACobrar = (DebitoACobrar) iterator.next();

			debitoACobrar.setUltimaAlteracao(new Date());
			debitoACobrar.setParcelamento(parcelamento);
			debitoACobrar.setDebitoCreditoSituacaoAnterior(debitoACobrar.getDebitoCreditoSituacaoAtual());
			debitoACobrar.setCobrancaForma(cf);

			DebitoCreditoSituacao dcs = new DebitoCreditoSituacao();
			dcs.setId(DebitoCreditoSituacao.CARTAO_CREDITO);
			debitoACobrar.setDebitoCreditoSituacaoAtual(dcs);
		
			colecaoDebitoAtualizar.add(debitoACobrar);	

		}
		
		retorno.setColecaoDebitoACobrar(colecaoDebitoAtualizar);
		
		
		//GERANDO A COLEÇÃO DE CREDITOS A REALIZAR QUE SERÃO ATUALIZADOS
		FiltroCreditoARealizar filtroCreditoARealizar = new FiltroCreditoARealizar();
		
		filtroCreditoARealizar.adicionarParametro(new ParametroSimples(
		FiltroCreditoARealizar.PARCELAMENTO_ID,idParcelamentoSelecionado));
		filtroCreditoARealizar.adicionarParametro(new ParametroSimples(
		FiltroCreditoARealizar.DEBITO_CREDITO_SITUACAO_ATUAL,DebitoCreditoSituacao.NORMAL));
		
		filtroCreditoARealizar.adicionarCaminhoParaCarregamentoEntidade("parcelamento");
		filtroCreditoARealizar.adicionarCaminhoParaCarregamentoEntidade("debitoCreditoSituacaoAtual");
		filtroCreditoARealizar.adicionarCaminhoParaCarregamentoEntidade("debitoCreditoSituacaoAnterior");
		
		Collection<CreditoARealizar> colecaoCredito = this.getControladorUtil()
		.pesquisar(filtroCreditoARealizar,CreditoARealizar.class.getName() );
		
		Collection<CreditoARealizar> colecaoCreditoAtualizar = new ArrayList();
		
		if (colecaoCredito != null && !colecaoCredito.isEmpty()){
			
			Iterator iteratorCredito = colecaoCredito.iterator();
			
			DebitoCreditoSituacao debitoCreditoSituacao = new DebitoCreditoSituacao();
			debitoCreditoSituacao.setId(DebitoCreditoSituacao.CARTAO_CREDITO);
			
			while(iteratorCredito.hasNext()){
				
				CreditoARealizar creditoARealizar = (CreditoARealizar) iteratorCredito.next();

				creditoARealizar.setUltimaAlteracao(new Date());
				creditoARealizar.setParcelamento(parcelamento);
				creditoARealizar.setDebitoCreditoSituacaoAtual(debitoCreditoSituacao);
			
				colecaoCreditoAtualizar.add(creditoARealizar);	

			}
		}
		
		retorno.setColecaoCreditoARealizar(colecaoCreditoAtualizar);
        
		
		
		return retorno;
	}
	
	
	/**
	 * [UC0927] ? Confirmar Cartão de Crédito/Débito
	 * 
	 * [SB0002] ? Gerar/Atualizar Guia de Pagamento Cartão de Crédito
	 *
	 * @author Raphael Rossiter
	 * @date 13/01/2010
	 *
	 * @param parcelamento
	 * @param colecaoParcelamentoPagamentoCartaoCredito
	 * @param usuarioLogado
	 * @throws ControladorException
	 */
	public void gerarAtualizarGuiaPagamentoCartaoCredito(Parcelamento parcelamento, 
			Collection colecaoParcelamentoPagamentoCartaoCredito, Usuario usuarioLogado) 
		throws ControladorException{
		
		/*
		 * Para cada transação de cartão de crédito informada na quitação do parcelamento, o sistema deverá 
		 * gerar/atualizar a guia de pagamento de acordo com a quantidade de parcelas informada
		 */
		if (colecaoParcelamentoPagamentoCartaoCredito != null &&
			!colecaoParcelamentoPagamentoCartaoCredito.isEmpty()){
			
			/*
			 * [FS0009 ? Verificar dia útil]
			 * 
			 * FERIADO NACIONAL - Para verificar a existência de formatação de vencimento para um dia que 
			 * não seja útil.
			 */
			Collection<NacionalFeriado> colecaoFeriadosNacionais = null;
			
			try {
				
				colecaoFeriadosNacionais = repositorioUtil.pesquisarFeriadosNacionais();
				
			} catch (ErroRepositorioException ex) {
				throw new ControladorException("erro.sistema", ex);
			}
			
			Iterator iterator =  colecaoParcelamentoPagamentoCartaoCredito.iterator();
			Collection colecaoGuiaPagamentoParcelamento = new ArrayList();
			boolean guiaPagamentoParcelamentoCartaoJaExiste = false;
			
			while(iterator.hasNext()){
				
				ParcelamentoPagamentoCartaoCredito transacaoCartaoCredito = (ParcelamentoPagamentoCartaoCredito) 
				iterator.next();
					
				//QUANTIDADE DE PARCELAS GERADAS NA TRANSAÇÃO
				Integer qtdParcela = transacaoCartaoCredito.getQuantidadeParcelas();
				
				//VALOR DA PARCELA DO PARCELAMENTO FEITO PELA TRANSAÇÃO
				BigDecimal valorParcelaTransacao = transacaoCartaoCredito.getValorParcelado()
				.divide(new BigDecimal(qtdParcela.intValue()), Parcelamento.CASAS_DECIMAIS, 
				Parcelamento.TIPO_ARREDONDAMENTO);
				
				
				//GERANDO A PRIMEIRA DATA DE VENCIMENTO DA GUIA
				Date dataPrimeiroVencimentoGuiaPagamento = this.obterDataVencimentoGuiaPagamentoCartaoCredito(
				transacaoCartaoCredito, transacaoCartaoCredito.getArrecadador().getCliente().getId(), 
				colecaoFeriadosNacionais, null);
				
				Date dataVencimentoGuiaPagamento = dataPrimeiroVencimentoGuiaPagamento;
				
				/*
				 * Para cada data de vencimento das parcelas do parcelamento, a partir do 1º vencimento adicionar 
				 * 30 dias até a última parcela informada,  o sistema deverá verificar a geração/atualização 
				 * das guias.
				 */
				for (Short i = 1; i <= qtdParcela; i++) {
					
					/*
					 * O sistema verifica se existe uma guia de pagamento para o primeiro vencimento da transação 
					 * (data da confirmação na operadora + quantidade de dias informados no FLOAT do contrato 
					 * do arrecadador.
					 */
					GuiaPagamento guiaPagamento = this.pesquisarGuiaPagamentoCartaoCredito(transacaoCartaoCredito
					.getArrecadador().getCliente().getId(), dataVencimentoGuiaPagamento);
					
					if (guiaPagamento != null){
						
						/*
						 * Caso exista a guia de pagamento, o sistema deverá acumular no valor da guia de pagamento 
						 * (GPAG_VLDEBITO) com o valor da parcela do parcelamento (Valor da Transação/Quantidade de 
						 * Parcelas) de cada confirmação do cartão de crédito.
						 */
						BigDecimal valorAcumuladoGuiaPagamento = guiaPagamento.getValorDebito();
						valorAcumuladoGuiaPagamento = valorAcumuladoGuiaPagamento.add(valorParcelaTransacao);
						
						guiaPagamento.setValorDebito(valorAcumuladoGuiaPagamento);
						guiaPagamento.setUsuario(usuarioLogado);
						
						//ATUALIZANDO A GUIA DE PAGAMENTO
						this.atualizarGuiaPagamentoCartaoCredito(guiaPagamento);
					}
					else{
						
						/*
						 * Caso contrário, o sistema deverá gerar uma guia de pagamento do cliente do cartão de 
						 * crédito no valor pago no cartão de crédito.
						 * 
						 * [SB0003] ? Inserir Guia de Pagamento Cliente
						 */
						guiaPagamento = this.inserirGuiaPagamentoCliente(transacaoCartaoCredito.getArrecadador()
						.getCliente().getId(), dataVencimentoGuiaPagamento, valorParcelaTransacao, null, usuarioLogado);
					}
					
					//Faz validação para não incluir registro com chave duplicada em GuiaParcelamentoCartao
					for (Iterator iteratorColecaoGuiaPagamentoParcelamento = colecaoGuiaPagamentoParcelamento
							.iterator(); iteratorColecaoGuiaPagamentoParcelamento.hasNext();) {
						GuiaPagamentoParcelamentoCartao guiaPagamentoParcelamentoCartao = (GuiaPagamentoParcelamentoCartao) iteratorColecaoGuiaPagamentoParcelamento.next();
						
						if (guiaPagamentoParcelamentoCartao.getComp_id()
								.getGuiaPagamentoId().intValue() == guiaPagamento.getId().intValue() &&
								guiaPagamentoParcelamentoCartao.getComp_id()
								.getParcelamentoId().intValue() == parcelamento.getId().intValue()){
							
							guiaPagamentoParcelamentoCartaoJaExiste = true;
							break;
							
						}else{
							
							guiaPagamentoParcelamentoCartaoJaExiste = false;
						}
					}
					
					if (guiaPagamentoParcelamentoCartaoJaExiste == false){
						
						/*
						 * Para cada guia incluída ou atualizada, o sistema deverá inserir a associação do parcelamento 
						 * com as guias de pagamento gerada e/ou atualizadas
						 */
						this.inserirGuiaPagamentoParcelamentoCartao(parcelamento, guiaPagamento, colecaoGuiaPagamentoParcelamento);
					}
					
					/*
					 * AJUSTANDO A DATA DE VENCIMENTO PARA A PRÓXIMA GUIA DE PAGAMENTO
					 * 
					 * A partir do 1º vencimento adicionar 30 dias até a última parcela informada
					 */
					dataPrimeiroVencimentoGuiaPagamento = Util.adicionarNumeroDiasDeUmaData(
					dataPrimeiroVencimentoGuiaPagamento, 30);
					
					dataVencimentoGuiaPagamento = dataPrimeiroVencimentoGuiaPagamento;
					
					/*
					 * [FS0009 ? Verificar dia útil]
					 * 
					 * Caso a data calculada não seja um dia útil e esteja na tabela de feriados nacionais 
					 * (NFER_DTFERIADO da tabela NACIONAL_FERIADO), adicionar 1 dia a data até a obtenção de um dia útil.
					 */
					while (!Util.ehDiaUtil(dataVencimentoGuiaPagamento, colecaoFeriadosNacionais, null)){
						
						dataVencimentoGuiaPagamento = Util.adicionarNumeroDiasDeUmaData(
						dataVencimentoGuiaPagamento, 1);
					}
				}
			}
		}
	}
	
	/**
	 * [UC0927] ? Confirmar Cartão de Crédito/Débito 
	 *
	 * @author Raphael Rossiter
	 * @date 12/01/2010
	 *
	 * @param transacaoCartaoCredito
	 * @param idCliente
	 * @param colecaoFeriadosNacionais
	 * @param colecaoFeriadosMunicipais
	 * @return Date
	 * @throws ControladorException
	 */
	public Date obterDataVencimentoGuiaPagamentoCartaoCredito(ParcelamentoPagamentoCartaoCredito transacaoCartaoCredito,
		Integer idCliente, Collection colecaoFeriadosNacionais, Collection colecaoFeriadosMunicipais) 
		throws ControladorException{
		
		/*
		 * GERANDO A PRIMEIRA DATA DE VENCIMENTO DA GUIA
		 * 
		 * Data da confirmação na operadora + quantidade de dias informados no FLOAT do contrato 
		 * do arrecadador
		 */
		Date dataPrimeiroVencimentoTransacao = transacaoCartaoCredito.getDataConfirmacao();
		Short nnDiasFloat = null;
		
		try {
			
			nnDiasFloat = repositorioCobranca.pesquisarNumeroDiasFloatCartao(idCliente, 
			ArrecadacaoForma.CARTAO_CREDITO);
		} 
		catch (ErroRepositorioException ex) {
			throw new ControladorException("erro.sistema", ex);
		}
		
		if (nnDiasFloat != null){
			
			dataPrimeiroVencimentoTransacao = Util.adicionarNumeroDiasDeUmaData(
			dataPrimeiroVencimentoTransacao, nnDiasFloat.intValue());
		}
		
		/*
		 * [FS0009 ? Verificar dia útil]
		 * 
		 * Caso a data calculada não seja um dia útil e esteja na tabela de feriados nacionais 
		 * (NFER_DTFERIADO da tabela NACIONAL_FERIADO), adicionar 1 dia a data até a obtenção de um dia útil.
		 */
		while (!Util.ehDiaUtil(dataPrimeiroVencimentoTransacao, colecaoFeriadosNacionais, null)){
			
			dataPrimeiroVencimentoTransacao = Util.adicionarNumeroDiasDeUmaData(
			dataPrimeiroVencimentoTransacao, 1);
		}
		
		
		return dataPrimeiroVencimentoTransacao;
	}
	
	/**
	 * [UC0927] ? Confirmar Cartão de Crédito/Débito
	 *
	 * @author Raphael Rossiter
	 * @date 11/01/2010
	 *
	 * @param idCliente
	 * @param dataVencimento
	 * @return GuiaPagamento
	 * @throws ErroRepositorioException
	 */
	public GuiaPagamento pesquisarGuiaPagamentoCartaoCredito(Integer idCliente, Date dataVencimento) 
		throws ControladorException {
		
		GuiaPagamento guiaPagamento = null;
		
		try {
			
			guiaPagamento = repositorioCobranca.pesquisarGuiaPagamentoCartaoCredito(idCliente, dataVencimento);
			
		} catch (ErroRepositorioException ex) {
			throw new ControladorException("erro.sistema", ex);
		}
		
		return guiaPagamento;
	}
	
	/**
	 * [UC0927] ? Confirmar Cartão de Crédito/Débito
	 *
	 * @author Raphael Rossiter
	 * @date 12/01/2010
	 *
	 * @param guiaPagamento
	 * @throws ErroRepositorioException
	 */
	public void atualizarGuiaPagamentoCartaoCredito(GuiaPagamento guiaPagamento) throws ControladorException {
	
		try {
			
			repositorioCobranca.atualizarGuiaPagamentoCartaoCredito(guiaPagamento);
			
		} catch (ErroRepositorioException ex) {
			throw new ControladorException("erro.sistema", ex);
		}
	}
	
	
	/**
	 * [UC0927] ? Confirmar Cartão de Crédito/Débito
	 * 
	 * [SB0003] ? Inserir Guia de Pagamento Cliente
	 *
	 * @author Raphael Rossiter
	 * @date 02/02/2010
	 *
	 * @param idCliente
	 * @param dataVencimento
	 * @param valorDebito
	 * @param idDebitoTipo
	 * @param usuarioLogado
	 * @return GuiaPagamento
	 * @throws ControladorException
	 */
	public GuiaPagamento inserirGuiaPagamentoCliente(Integer idCliente, Date dataVencimento,
			BigDecimal valorDebito, Integer idDebitoTipo, Usuario usuarioLogado) throws ControladorException {
		
		//GERANDO A GUIA DE PAGAMENTO
		GuiaPagamento guiaPagamento = new GuiaPagamento();
		
		//LOCA_ID da tabela LOCALIDADE com LOCA_ICSEDE = 1
		Localidade localidadeSede = this.pesquisarLocalidadeSede();
		guiaPagamento.setLocalidade(localidadeSede);
		
		//CLIE_ID = CLIE_ID da tabela ARRECADADOR com ARRC_ID = ARRC_ID do Cartão de Crédito selecionado
		Cliente cliente = new Cliente();
		cliente.setId(idCliente);
		
		guiaPagamento.setCliente(cliente);
		
		//DATA DE VENCIMENTO CALCULADA
		guiaPagamento.setDataVencimento(dataVencimento);
		
		//VALOR DO DÉBITO CALCULADO
		guiaPagamento.setValorDebito(valorDebito);
		
		DebitoTipo debitoTipo = null;
		if (idDebitoTipo == null){
			
			//Id débito cartão de crédito (DBTP_ID da tabela DEBITO_TIPO com DBTP_ICCARTAOCREDITO =1
			debitoTipo = this.pesquisarDebitoTipoCartaoCredito();
			guiaPagamento.setDebitoTipo(debitoTipo);
		}
		else{
			
			//Id que esta sendo recebido
			debitoTipo = new DebitoTipo();
			debitoTipo.setId(idDebitoTipo);
			guiaPagamento.setDebitoTipo(debitoTipo);
		}
		
		
		//GPAG_NNPRESTACAODEBITO
		guiaPagamento.setNumeroPrestacaoDebito(new Short("1"));
		
		//GPAG_NNPRESTACAOTOTAL
		guiaPagamento.setNumeroPrestacaoTotal(new Short("1"));
		
		//Id do usuário que efetuou a confirmação do cartão
		guiaPagamento.setUsuario(usuarioLogado);
		
		//OBSERVAÇÃO
		guiaPagamento.setObservacao("GUIA DE PAGAMENTO PARA BAIXA CARTAO DE CREDITO");
		guiaPagamento.setIndicadorEmitirObservacao(ConstantesSistema.SIM);
		
		//IMOVEL NÃO SERÁ INFORMADO
		Imovel imovel = new Imovel();
		guiaPagamento.setImovel(imovel);
		
		//REGISTRO DE ATENDIMENTO NÃO SERÁ INFORMADO
		RegistroAtendimento registroAtendimento = new RegistroAtendimento();
		guiaPagamento.setRegistroAtendimento(registroAtendimento);
		
		//ORDEM DE SERVIÇO NÃO SERÁ INFORMADA
		OrdemServico ordemServico = new OrdemServico();
		guiaPagamento.setOrdemServico(ordemServico);
		
		//GERANDO OS ÍTENS DA GUIA DE PAGAMENTO
		GuiaPagamentoItem guiaPagamentoItem = new GuiaPagamentoItem();
		
		if (idDebitoTipo == null){
			
			//Id débito cartão de crédito (DBTP_ID da tabela DEBITO_TIPO com DBTP_ICCARTAOCREDITO =1
			DebitoTipo debitoTipoCartaoCredito = this.pesquisarDebitoTipoCartaoCredito();
			guiaPagamento.setDebitoTipo(debitoTipoCartaoCredito);
		}
		else{
			
			//Id que esta sendo recebido
			DebitoTipo debitoTipoRecebido = new DebitoTipo();
			debitoTipoRecebido.setId(idDebitoTipo);
			guiaPagamento.setDebitoTipo(debitoTipoRecebido);
		}
		guiaPagamentoItem.setDebitoTipo(debitoTipo);
		guiaPagamentoItem.setValorDebito(valorDebito);
		guiaPagamentoItem.setUltimaAlteracao(new Date());
		
		Collection colecaoGuiaPagamentoItem = new ArrayList();
		colecaoGuiaPagamentoItem.add(guiaPagamentoItem);
		
		
		//[UC0187] - Inserir Guia de Pagamento
		String[] idGuiaPagamento = this.getControladorFaturamento().inserirGuiaPagamento(guiaPagamento, usuarioLogado, 0, 
		colecaoGuiaPagamentoItem, localidadeSede, true);
		
		guiaPagamento.setId(Integer.valueOf(idGuiaPagamento[0]));
		
		
		return guiaPagamento;
	}
	
	/**
	 * [UC0927] ? Confirmar Cartão de Crédito/Débito
	 *
	 * @author Raphael Rossiter
	 * @date 12/01/2010
	 *
	 * @return Localidade
	 * @throws ErroRepositorioException
	 */
	public Localidade pesquisarLocalidadeSede() throws ControladorException {
		
		try {
			
			return repositorioCobranca.pesquisarLocalidadeSede();
			
		} catch (ErroRepositorioException ex) {
			throw new ControladorException("erro.sistema", ex);
		}
	}
	
	/**
	 * [UC0927] ? Confirmar Cartão de Crédito/Débito
	 *
	 * @author Raphael Rossiter
	 * @date 12/01/2010
	 *
	 * @return DebitoTipo
	 * @throws ErroRepositorioException
	 */
	public DebitoTipo pesquisarDebitoTipoCartaoCredito() throws ControladorException {
		
		try {
			
			return repositorioCobranca.pesquisarDebitoTipoCartaoCredito();
			
		} catch (ErroRepositorioException ex) {
			throw new ControladorException("erro.sistema", ex);
		}
	}
	
	/**
	 * [UC0927] ? Confirmar Cartão de Crédito/Débito 
	 *
	 * @author Raphael Rossiter
	 * @date 12/01/2010
	 *
	 * @param parcelamento
	 * @param guiaPagamento
	 * @throws ControladorException
	 */
	public void inserirGuiaPagamentoParcelamentoCartao(Parcelamento parcelamento, GuiaPagamento guiaPagamento,
			Collection colecaoGuiaPagamentoParcelamento) 
		throws ControladorException{
		
		GuiaPagamentoParcelamentoCartaoPK guiaPagamentoParcelamentoCartaoPK = 
			new GuiaPagamentoParcelamentoCartaoPK();
		
		guiaPagamentoParcelamentoCartaoPK.setParcelamentoId(parcelamento.getId());
		guiaPagamentoParcelamentoCartaoPK.setGuiaPagamentoId(guiaPagamento.getId());
		
		GuiaPagamentoParcelamentoCartao guiaPagamentoParcelamentoCartao = new GuiaPagamentoParcelamentoCartao();
		guiaPagamentoParcelamentoCartao.setComp_id(guiaPagamentoParcelamentoCartaoPK);
		
		guiaPagamentoParcelamentoCartao.setUltimaAlteracao(new Date());
		
		//INSERINDO GUIA DE PAGAMENTO PARCELAMENTO CARTÃO
		getControladorUtil().inserir(guiaPagamentoParcelamentoCartao);
		
		colecaoGuiaPagamentoParcelamento.add(guiaPagamentoParcelamentoCartao);
		
	}
	
	
	/**
	 * [UC0927] ? Confirmar Cartão de Crédito/Débito
	 * 
	 *  [FS0005 ? Alerta Parcelamento Com Parcela Paga]
	 *  [FS0006 ? Parcelamento Sem Débito a Cobrar]
	 *  [FS0007 ? Parcelamento Com Pagamento de Cartão de Crédito Já Informado]
	 *  
	 * @author Raphael Rossiter
	 * @date 14/01/2010
	 *
	 * @param parcelamento
	 * @return int
	 * @throws ControladorException
	 */
	public int validarParcelamentoCartaoCredito(Parcelamento parcelamento) throws ControladorException{
		
		int numeroPrestacaoCobradas = 0;
		
		//DÉBITOS A COBRAR DO PARCELAMENTO
		FiltroDebitoACobrar filtroDebitoACobrar = new FiltroDebitoACobrar();
		
		filtroDebitoACobrar.adicionarParametro(new ParametroSimples(
		FiltroDebitoACobrar.PARCELAMENTO_ID, parcelamento.getId()));
		
		filtroDebitoACobrar.adicionarCaminhoParaCarregamentoEntidade("parcelamento");
		
		Collection<DebitoACobrar> colecaoDebito = this.getControladorUtil().pesquisar(filtroDebitoACobrar,
		DebitoACobrar.class.getName() );
		
		DebitoACobrar dacMaiorData = null;
		Iterator itera = colecaoDebito.iterator();
		Date dataTeste = new Date(0);
		while(itera.hasNext()){
			
			DebitoACobrar debitoACobrar = (DebitoACobrar) itera.next();
			
			int retornoCompararDatas = Util.compararDataTime(dataTeste,debitoACobrar.getUltimaAlteracao());
			if(retornoCompararDatas==-1){
				dataTeste = (Date) debitoACobrar.getUltimaAlteracao();
				dacMaiorData = debitoACobrar;
			}
			
		}
		
		if(colecaoDebito != null && colecaoDebito.isEmpty() || 
		   !parcelamento.getParcelamentoSituacao().getId().equals(ParcelamentoSituacao.NORMAL )){
				
			//[FS0006 ? Parcelamento Sem Débito a Cobrar]
			throw new ControladorException("atencao.parcelamento_sem_debito_a_cobrar", null
			,parcelamento.getParcelamentoSituacao().getDescricao());

		}
				
		if(dacMaiorData.getDebitoCreditoSituacaoAtual().getId().compareTo(new Integer(DebitoCreditoSituacao.CARTAO_CREDITO))==0){
					
			//[FS0007 ? Parcelamento Com Pagamento de Cartão de Crédito Já Informado]
			throw new ControladorException("atencao.parcelamento_ja_confirmado_cartao", null
			,parcelamento.getParcelamentoSituacao().getDescricao());	
		}
		
		//[FS0005 ? Alerta Parcelamento Com Parcela Paga]
		if(dacMaiorData.getNumeroPrestacaoCobradas() != 0){
			numeroPrestacaoCobradas = dacMaiorData.getNumeroPrestacaoCobradas();
		}
		
		
		return numeroPrestacaoCobradas;
	}
	
	
	/**
	 * [UC0927] ? Confirmar Cartão de Crédito/Débito
	 * 
	 * [SB0004] ? Incluir Dados da Confirmação dos Pagamentos
	 *
	 * @author Raphael Rossiter
	 * @date 20/01/2010
	 *
	 * @param parcelamentoCartaoCreditoHelper
	 * @param colecaoConta
	 * @param colecaoGuia
	 * @param colecaoDebitoACobrar
	 * @param colecaoParcelamento
	 * @param usuarioLogado
	 * @throws ControladorException
	 */
	public void confirmarCartaoDebito(ParcelamentoCartaoCreditoHelper parcelamentoCartaoCreditoHelper, 
		Collection<ContaValoresHelper> colecaoConta, Collection<GuiaPagamentoGeral> colecaoGuia,
		Collection<DebitoACobrarGeral> colecaoDebitoACobrar, Collection<Parcelamento> colecaoParcelamento,
		Collection<DebitoCreditoParcelamentoHelper> colecaoAntecipacaoDebitosDeParcelamento, 
		Collection<DebitoCreditoParcelamentoHelper> colecaoAntecipacaoCreditosDeParcelamento, Usuario usuarioLogado) throws ControladorException{
		
		try{
			
			/*
			 * O sistema deverá incluir na tabela de PAGAMENTO_CARTAO_DEBITO os dados da trasação, lembrando que
			 * só será permitido informar apenas um cartão de débito por transação.
			 */
			PagamentoCartaoDebito pagamentoCartaoDebito = (PagamentoCartaoDebito)
			this.inserirPagamentoCartaoDebito(parcelamentoCartaoCreditoHelper, usuarioLogado);
				
				
			//OBTENDO O AVISO BANCÁRIO PARA ASSOCIAR COM O(S) PAGAMENTO(S) QUE SERÃO GERADOS
			AvisoBancario avisoBancario = this.obterAvisoBancarioPagamentoCartaoDebito(pagamentoCartaoDebito);
				
			/*
			 * O sistema deverá incluir os itens dos débitos efetuados com o cartão débitos na tabela 
			 * PAGAMENTO_CARTAO_DEBITO_ITEM para cada débito selecionado e gerar o pagamentos para 
			 * o mesmo [UC0265 ? Inserir Pagamento].
			 */
			BigDecimal valorArrecadacaoCalculada = new BigDecimal("0.00");
			BigDecimal valorArrecadacaoInformada = new BigDecimal("0.00");
			BigDecimal valorDevolucaoCalculada = new BigDecimal("0.00");
			BigDecimal valorDeducaoAcumulado = new BigDecimal("0.00");
			Collection colecaoPagamentos = new ArrayList();
			Collection colecaoDevolucoes = new ArrayList();
				
			//CONTA
			if (colecaoConta != null && !colecaoConta.isEmpty()){
					
				Iterator iteratorConta = colecaoConta.iterator();
					
				while(iteratorConta.hasNext()){
					
					ContaValoresHelper contaValoresHelper = (ContaValoresHelper) iteratorConta.next();
					
					//INSERINDO PAGAMENTO_CARTAO_DEBITO_ITEM
					this.inserirPagamentoCartaoDebitoItem(pagamentoCartaoDebito, contaValoresHelper, null, null);
					
					//GERANDO PAGAMENTO
					Pagamento pagamento = this.gerarPagamentoContaCartaoDebito(contaValoresHelper, avisoBancario, pagamentoCartaoDebito);
					colecaoPagamentos.add(pagamento);
					
					//ACUMULANDO O VALOR DO PAGAMENTO PARA ATUALIZAR O AVISO BANCÁRIO
					valorArrecadacaoCalculada = valorArrecadacaoCalculada.add(pagamento.getValorPagamento());
					
					//[SB0005  ? Calcular Valor da  Dedução]
					valorDeducaoAcumulado = valorDeducaoAcumulado.add(this.calcularValorDeducao(
					pagamentoCartaoDebito.getArrecadador().getId(), pagamento.getValorPagamento(),
					ArrecadacaoForma.CARTAO_DEBITO));
					
				}
			}
			
			//GUIA PAGAMENTO
			if (colecaoGuia != null && !colecaoGuia.isEmpty()){
					
				Iterator iteratorGuia = colecaoGuia.iterator();
					
				while(iteratorGuia.hasNext()){
					
					GuiaPagamentoGeral guiaPagamentoGeral = (GuiaPagamentoGeral) iteratorGuia.next();
					
					//INSERINDO PAGAMENTO_CARTAO_DEBITO_ITEM
					this.inserirPagamentoCartaoDebitoItem(pagamentoCartaoDebito, null, guiaPagamentoGeral, null);
					
					//GERANDO PAGAMENTO
					Pagamento pagamento = this.gerarPagamentoGuiaPagamentoCartaoDebito(guiaPagamentoGeral, 
					avisoBancario, pagamentoCartaoDebito);
					colecaoPagamentos.add(pagamento);
					
					//ACUMULANDO O VALOR DO PAGAMENTO PARA ATUALIZAR O AVISO BANCÁRIO
					valorArrecadacaoCalculada = valorArrecadacaoCalculada.add(pagamento.getValorPagamento());
					
					//[SB0005  ? Calcular Valor da  Dedução]
					valorDeducaoAcumulado = valorDeducaoAcumulado.add(this.calcularValorDeducao(
					pagamentoCartaoDebito.getArrecadador().getId(), pagamento.getValorPagamento(),
					ArrecadacaoForma.CARTAO_DEBITO));
					
				}
			}
			
			//DEBITO A COBRAR
			if (colecaoDebitoACobrar != null && !colecaoDebitoACobrar.isEmpty()){
					
				Iterator iteratorDebitoACobrar = colecaoDebitoACobrar.iterator();
					
				while(iteratorDebitoACobrar.hasNext()){
					
					DebitoACobrarGeral debitoACobrarGeral = (DebitoACobrarGeral) iteratorDebitoACobrar.next();
					
					//INSERINDO PAGAMENTO_CARTAO_DEBITO_ITEM
					this.inserirPagamentoCartaoDebitoItem(pagamentoCartaoDebito, null, null, debitoACobrarGeral);
					
					//GERANDO PAGAMENTO
					Pagamento pagamento = this.gerarPagamentoDebitoACobrarCartaoDebito(debitoACobrarGeral, 
					avisoBancario, pagamentoCartaoDebito);
					colecaoPagamentos.add(pagamento);
					
					//ACUMULANDO O VALOR DO PAGAMENTO PARA ATUALIZAR O AVISO BANCÁRIO
					valorArrecadacaoCalculada = valorArrecadacaoCalculada.add(pagamento.getValorPagamento());
					
					//[SB0005  ? Calcular Valor da  Dedução]
					valorDeducaoAcumulado = valorDeducaoAcumulado.add(this.calcularValorDeducao(
					pagamentoCartaoDebito.getArrecadador().getId(), pagamento.getValorPagamento(),
					ArrecadacaoForma.CARTAO_DEBITO));
					
				}
			}
			
			
			if ((colecaoParcelamento != null) && (!colecaoParcelamento.isEmpty())) {
			
				Iterator iteratorParcelamento = colecaoParcelamento.iterator();
			
				while (iteratorParcelamento.hasNext()){
					
					Parcelamento parcelamento = (Parcelamento)(Parcelamento)iteratorParcelamento.next();
					Collection colecaoDebitosACobrarParcelamento = null;
			
					try {
						colecaoDebitosACobrarParcelamento = this.repositorioCobranca
						.pesquisarDebitosACobrarImovelParcelamento(parcelamento.getId());
					}
					catch (ErroRepositorioException e) {
						this.sessionContext.setRollbackOnly();
						throw new ControladorException("erro.sistema", e);
					}
			
					if ((colecaoDebitosACobrarParcelamento != null) && (!colecaoDebitosACobrarParcelamento.isEmpty())){
			
						Iterator iteratorDebitosACobrarParcelamento = colecaoDebitosACobrarParcelamento.iterator();
						DebitoACobrar debitoACobrarParcelamento = null;
			
						while (iteratorDebitosACobrarParcelamento.hasNext()){
			
							debitoACobrarParcelamento = (DebitoACobrar) iteratorDebitosACobrarParcelamento.next();
							DebitoACobrarGeral debitoACobrarGeralParcelamento = new DebitoACobrarGeral();
							debitoACobrarGeralParcelamento.setId(debitoACobrarParcelamento.getId());
			
							inserirPagamentoCartaoDebitoItem(pagamentoCartaoDebito, null, null, debitoACobrarGeralParcelamento);
			
							Pagamento pagamento = gerarPagamentoDebitoACobrarCartaoDebito(debitoACobrarGeralParcelamento, avisoBancario, pagamentoCartaoDebito);
							colecaoPagamentos.add(pagamento);
			
							valorArrecadacaoCalculada = valorArrecadacaoCalculada.add(pagamento.getValorPagamento());
			
							valorDeducaoAcumulado = valorDeducaoAcumulado.add(
							calcularValorDeducao(pagamentoCartaoDebito.getArrecadador().getId(), pagamento.getValorPagamento(), 
							ArrecadacaoForma.CARTAO_DEBITO));
						}
			
						getControladorArrecadacao().verificaPagamentoDebitoACobrarParcelamento(debitoACobrarParcelamento.getId(), null, usuarioLogado);
					}
			
					Collection colecaoCreditosARealizarParcelamento = null;
			
					try {
						colecaoCreditosARealizarParcelamento = this.repositorioCobranca
						.pesquisarCreditosARealizarParcelamento(parcelamento.getId());
					}
					catch (ErroRepositorioException e) {
						this.sessionContext.setRollbackOnly();
						throw new ControladorException("erro.sistema", e);
					}
			
					if ((colecaoCreditosARealizarParcelamento != null) && (!colecaoCreditosARealizarParcelamento.isEmpty())){
			
						Iterator iteratorCreditosARealizarParcelamento = colecaoCreditosARealizarParcelamento.iterator();
			
						while (iteratorCreditosARealizarParcelamento.hasNext()){
			
							CreditoARealizar creditoARealizarParcelamento = (CreditoARealizar)((Object[])(Object[])iteratorCreditosARealizarParcelamento.next())[0];
							CreditoARealizarGeral creditoARealizarGeralParcelamento = new CreditoARealizarGeral();
							creditoARealizarGeralParcelamento.setId(creditoARealizarParcelamento.getId());
			
							Devolucao devolucao = gerarDevolucaoCreditoARealizarCartaoDebito(creditoARealizarGeralParcelamento, avisoBancario);
							colecaoDevolucoes.add(devolucao);
			
							valorDevolucaoCalculada = valorDevolucaoCalculada.add(devolucao.getValorDevolucao());
						}
			
					}
			
				}
			
			}
			
			Collection colecaoDebitosACobrarJurosParcelamento = new ArrayList();
			
			if ((colecaoAntecipacaoDebitosDeParcelamento != null) && (!colecaoAntecipacaoDebitosDeParcelamento.isEmpty())){
			
				Iterator iteratorAntecipacaoDebitosDeParcelamento = colecaoAntecipacaoDebitosDeParcelamento.iterator();
			
				while (iteratorAntecipacaoDebitosDeParcelamento.hasNext()){
						
					DebitoCreditoParcelamentoHelper debitoCreditoParcelamentoHelper = 
					(DebitoCreditoParcelamentoHelper)iteratorAntecipacaoDebitosDeParcelamento.next();
			
					if ((debitoCreditoParcelamentoHelper.getColecaoDebitoACobrarParcelamento() != null) && 
							(!debitoCreditoParcelamentoHelper.getColecaoDebitoACobrarParcelamento().isEmpty())){
			
						Iterator iteratorAntecipacaoDebitoACobrarParcelamento = debitoCreditoParcelamentoHelper
						.getColecaoDebitoACobrarParcelamento().iterator();
			
						while (iteratorAntecipacaoDebitoACobrarParcelamento.hasNext()){
			
							DebitoACobrar debitoACobrarParcelamento = (DebitoACobrar)iteratorAntecipacaoDebitoACobrarParcelamento.next();
			
							CobrancaDocumentoItem cobrancaDocumentoItemAux = new CobrancaDocumentoItem();
							DebitoACobrarGeral debitoACobrarGeralParcelamento = new DebitoACobrarGeral();
							debitoACobrarGeralParcelamento.setDebitoACobrar(debitoACobrarParcelamento);
			
							cobrancaDocumentoItemAux.setDebitoACobrarGeral(debitoACobrarGeralParcelamento);
							cobrancaDocumentoItemAux.setNumeroParcelasAntecipadas(debitoCreditoParcelamentoHelper.getQuantidadeAntecipacaoParcelas());
			
							cobrancaDocumentoItemAux.setValorItemCobrado(debitoACobrarParcelamento
			                .getValorAntecipacaoParcela(debitoCreditoParcelamentoHelper.getQuantidadeAntecipacaoParcelas().intValue()));
			
							DebitoACobrar debitoACobrarAntecipacao = (DebitoACobrar)
							getControladorArrecadacao().gerarDebitoCreditoParcelasAntecipadas(debitoACobrarParcelamento.getImovel().getId(), 
			                cobrancaDocumentoItemAux, usuarioLogado);
			
							DebitoACobrarGeral debitoACobrarGeralAntecipacao = new DebitoACobrarGeral();
							debitoACobrarGeralAntecipacao.setId(debitoACobrarAntecipacao.getId());
							debitoACobrarGeralAntecipacao.setDebitoACobrar(debitoACobrarAntecipacao);
			
							DebitoACobrar debitoACobrarJurosParcelamento = getControladorArrecadacao().pesquisarDebitoACobrarJurosParcelamento(
			                debitoACobrarAntecipacao.getParcelamento().getId());
			
							if (!colecaoDebitosACobrarJurosParcelamento.contains(debitoACobrarJurosParcelamento)){
			
								Short numeroParcelaBonus = debitoACobrarAntecipacao.getNumeroPrestacaoDebito();
								
								if (debitoACobrarJurosParcelamento.getNumeroParcelaBonus() != null){
									
									numeroParcelaBonus = Short.valueOf(
									String.valueOf(numeroParcelaBonus.shortValue() + debitoACobrarJurosParcelamento.getNumeroParcelaBonus().shortValue()));
								}
			
								debitoACobrarJurosParcelamento.setNumeroParcelaBonus(numeroParcelaBonus);
								colecaoDebitosACobrarJurosParcelamento.add(debitoACobrarJurosParcelamento);
							}
			
							inserirPagamentoCartaoDebitoItem(pagamentoCartaoDebito, null, null, debitoACobrarGeralAntecipacao);
			
							Pagamento pagamento = gerarPagamentoDebitoACobrarCartaoDebito(debitoACobrarGeralAntecipacao, avisoBancario, pagamentoCartaoDebito);
							colecaoPagamentos.add(pagamento);
			
							valorArrecadacaoCalculada = valorArrecadacaoCalculada.add(pagamento.getValorPagamento());
			
							valorDeducaoAcumulado = valorDeducaoAcumulado.add(
			                calcularValorDeducao(pagamentoCartaoDebito.getArrecadador().getId(), pagamento.getValorPagamento(), 
			                ArrecadacaoForma.CARTAO_DEBITO));
						}
			
						if ((colecaoDebitosACobrarJurosParcelamento != null) && (!colecaoDebitosACobrarJurosParcelamento.isEmpty())){
			
							Iterator itDebitosACobrarJurosParcelamento = colecaoDebitosACobrarJurosParcelamento.iterator();
			
							while (itDebitosACobrarJurosParcelamento.hasNext()){
							
								getControladorArrecadacao().atualizarNumeroParcelasBonus((DebitoACobrar)(DebitoACobrar)
								itDebitosACobrarJurosParcelamento.next());
							}
						}
			
					}
			
					if ((colecaoAntecipacaoCreditosDeParcelamento != null) && (!colecaoAntecipacaoCreditosDeParcelamento.isEmpty())){
			
						Iterator iteratorAntecipacaoCreditosDeParcelamento = colecaoAntecipacaoCreditosDeParcelamento.iterator();
							
						while (iteratorAntecipacaoCreditosDeParcelamento.hasNext()){
			
							debitoCreditoParcelamentoHelper = (DebitoCreditoParcelamentoHelper)
							iteratorAntecipacaoCreditosDeParcelamento.next();
			
							if ((debitoCreditoParcelamentoHelper.getColecaoCreditoARealizarParcelamento() != null) || 
								(!debitoCreditoParcelamentoHelper.getColecaoCreditoARealizarParcelamento().isEmpty())){
			
								Iterator iteratorAntecipacaoCreditoARealizarParcelamento = debitoCreditoParcelamentoHelper
								.getColecaoCreditoARealizarParcelamento().iterator();
			
								while (iteratorAntecipacaoCreditoARealizarParcelamento.hasNext()){
			
									CreditoARealizar creditoARealizarParcelamento = (CreditoARealizar)iteratorAntecipacaoCreditoARealizarParcelamento.next();
			
									CobrancaDocumentoItem cobrancaDocumentoItemAux = new CobrancaDocumentoItem();
			
									CreditoARealizarGeral creditoARealizarGeralParcelamento = new CreditoARealizarGeral();
									creditoARealizarGeralParcelamento.setCreditoARealizar(creditoARealizarParcelamento);
									creditoARealizarGeralParcelamento.setId(creditoARealizarParcelamento.getId());
			
									cobrancaDocumentoItemAux.setCreditoARealizarGeral(creditoARealizarGeralParcelamento);
									cobrancaDocumentoItemAux.setNumeroParcelasAntecipadas(debitoCreditoParcelamentoHelper.getQuantidadeAntecipacaoParcelas());
			
									cobrancaDocumentoItemAux.setValorItemCobrado(creditoARealizarParcelamento
			                        .getValorAntecipacaoParcela(debitoCreditoParcelamentoHelper.getQuantidadeAntecipacaoParcelas().intValue()));
			
									CreditoARealizar creditoARealizarAntecipacao = (CreditoARealizar)
									getControladorArrecadacao().gerarDebitoCreditoParcelasAntecipadas(creditoARealizarParcelamento.getImovel().getId(), 
		                            cobrancaDocumentoItemAux, usuarioLogado);
			
									CreditoARealizarGeral creditoARealizarGeralAntecipacao = new CreditoARealizarGeral();
									creditoARealizarGeralAntecipacao.setId(creditoARealizarAntecipacao.getId());
									creditoARealizarGeralAntecipacao.setCreditoARealizar(creditoARealizarAntecipacao);
			
									Devolucao devolucao = gerarDevolucaoCreditoARealizarCartaoDebito(creditoARealizarGeralAntecipacao, avisoBancario);
									colecaoDevolucoes.add(devolucao);
			
									valorDevolucaoCalculada = valorDevolucaoCalculada.add(devolucao.getValorDevolucao());
								}
							}
						}
					}
				}
			}
			
			
			valorArrecadacaoInformada = valorArrecadacaoCalculada.subtract(valorDevolucaoCalculada);
			
			BigDecimal valorArrecadacaoInformadaTotal = avisoBancario.getValorArrecadacaoInformado().add(valorArrecadacaoInformada);
			avisoBancario.setValorArrecadacaoInformado(valorArrecadacaoInformadaTotal);
			
			BigDecimal valorDevolucaoCalculadoAcumulado = avisoBancario.getValorDevolucaoCalculado().add(valorDevolucaoCalculada);
			avisoBancario.setValorDevolucaoCalculado(valorDevolucaoCalculadoAcumulado);
			
			this.repositorioCobranca.atualizarValorAvisoBancario(avisoBancario);
			
			gerarAtualizarAvisoDeducoes(avisoBancario, valorDeducaoAcumulado);
			
			getControladorArrecadacao().inserirPagamentos(colecaoPagamentos, usuarioLogado, avisoBancario);
			
			if ((colecaoDevolucoes != null) && (!colecaoDevolucoes.isEmpty())){
				 getControladorBatch().inserirColecaoObjetoParaBatchTransacao(colecaoDevolucoes);
			}      
		}
		catch (Exception e) {
			
			/*
			 * COLOCADO PARA VERIFICAR SE JÁ FOI DADO ROLLBACK
			 */
			if (!sessionContext.getRollbackOnly()){
				sessionContext.setRollbackOnly();
			}
			
			e.printStackTrace();
			throw new ControladorException("erro.sistema", e);
		}
	}
	
	
	/**
	 * [UC0927] ? Confirmar Cartão de Crédito/Débito
	 *
	 * @author Raphael Rossiter
	 * @date 18/01/2010
	 *
	 * @param helper
	 * @param usuarioLogado
	 * @return
	 * @throws ControladorException
	 */
	public PagamentoCartaoDebito inserirPagamentoCartaoDebito(ParcelamentoCartaoCreditoHelper helper,
			Usuario usuarioLogado) throws ControladorException{
	
		PagamentoCartaoDebito pagamentoCartaoDebito = new PagamentoCartaoDebito();
    	
		pagamentoCartaoDebito.setDocumentoCartaoDebito(helper.getDocumentoCartao());
		pagamentoCartaoDebito.setNumeroAutorizacao(helper.getAutorizacaoCartao());
		pagamentoCartaoDebito.setNumeroCartaoDebito(Util.encrypt(helper.getNumeroCartao()));
		pagamentoCartaoDebito.setAnoMesValidade(new Integer(Util.formatarMesAnoParaAnoMesSemBarra(
		helper.getValidadeCartao())));
    	
    	//PESQUISA DO CLIENTE
    	FiltroCliente filtroCliente = new FiltroCliente();    
    	filtroCliente.adicionarParametro(new ParametroSimples(
    	FiltroCliente.ID, helper.getIdCliente()));
    	
    	Collection clientes =  this.getControladorUtil().pesquisar(filtroCliente,Cliente.class.getName());
    	Cliente cliente = (Cliente) Util.retonarObjetoDeColecao(clientes);
    	
    	pagamentoCartaoDebito.setCliente(cliente);
    	
        //PESQUISA DO ARRECADADOR
    	FiltroArrecadador filtroArrecadador = new FiltroArrecadador();
    	filtroArrecadador.adicionarCaminhoParaCarregamentoEntidade("cliente");
    	filtroArrecadador.adicionarParametro(new ParametroSimples(
    	FiltroArrecadador.CLIENTE_ID, helper.getIdArrecadador()));
    	
    	Collection arrecadadores =  this.getControladorUtil().pesquisar(filtroArrecadador,Arrecadador.class.getName());
    	Arrecadador arrecadador = (Arrecadador) Util.retonarObjetoDeColecao(arrecadadores);
    	
    	pagamentoCartaoDebito.setArrecadador(arrecadador);
    	pagamentoCartaoDebito.setUsuarioConfirmacao(usuarioLogado);
    	pagamentoCartaoDebito.setUltimaAlteracao(new Date());
    	pagamentoCartaoDebito.setValorPagamento(
    	new BigDecimal(helper.getValorTransacao().replace(".","").replace(",",".")));
    	pagamentoCartaoDebito.setIdentificacaoTransacao(helper.getNumeroIdentificacaoTransacao());
    	
    	
    	//DATA DE CONFIRMAÇÃO NA OPERADORA
    	pagamentoCartaoDebito.setDataConfirmacao(helper.getDataConfirmacaoOperadora());
    	
    	//INDICADOR CONFIRMAÇÃO OPERADORA
    	pagamentoCartaoDebito.setIndicadorConfirmadoOperadora(ConstantesSistema.NAO);
    	
    	//INSERINDO PAGAMENTO CARTÃO DÉBITO
    	Integer idPagamentoCartaoDebito  = (Integer) this.getControladorUtil().inserir(pagamentoCartaoDebito);
    	pagamentoCartaoDebito.setId(idPagamentoCartaoDebito);
    	
    	
    	return pagamentoCartaoDebito;
	}
	
	/**
	 * [UC0927] ? Confirmar Cartão de Crédito/Débito
	 * 
	 * [SB0004] ? Incluir Dados da Confirmação dos Pagamentos
	 *
	 * @author Raphael Rossiter
	 * @date 18/01/2010
	 *
	 * @param pagamentoCartaoDebito
	 * @return
	 * @throws ControladorException
	 */
	public AvisoBancario obterAvisoBancarioPagamentoCartaoDebito(PagamentoCartaoDebito pagamentoCartaoDebito) 
	throws ControladorException{
	
		AvisoBancario avisoBancario = null;
		
		/*
		 * O sistema deverá verificar se já existe o aviso bancário para associar o pagamento 
		 * (Tabela AVISO_BANCARIO com ARRC_ID = ARRC_ID do arrecadador selecionado, 
		 * AVBC_DTLANCAMENTO = (data corrente + ARTF_NNDIAFLOAT da tabela ARRECADADOR _CONTRATO_TARIFA 
		 * com ARFM_ID = ?CARTAO DE DEBITO? e ARTF_ID = ARTF_ID da tabela ARRECADADOR_CONTRATO com 
		 * ARRC_ID = arrecadador selecionado)
		 */
		Date dataLancamento = pagamentoCartaoDebito.getDataConfirmacao();
		Short nnDiasFloat = null;
		
		try {
			
			//GERANDO A DATA DE LANÇAMENTO DO AVISO BANCÁRIO
			nnDiasFloat = repositorioCobranca.pesquisarNumeroDiasFloatCartao(pagamentoCartaoDebito
			.getArrecadador().getCliente().getId(), ArrecadacaoForma.CARTAO_DEBITO);
			
			if (nnDiasFloat != null){
				
				dataLancamento = Util.adicionarNumeroDiasDeUmaData(
				dataLancamento, nnDiasFloat.intValue());
			}
			
			//VERIFICANDO A EXISTÊNCIA DO AVISO BANCÁRIO
			avisoBancario = this.repositorioCobranca.pesquisarAvisoBancario(pagamentoCartaoDebito
			.getArrecadador().getId(), dataLancamento);
			
			/*
			 * Caso não exista, inserir o aviso bancário para associar com o pagamento que será gerado.
			 */
			if (avisoBancario == null){
				
				avisoBancario = new AvisoBancario();
				
				//DATA DE LANÇAMENTO
				avisoBancario.setDataLancamento(dataLancamento);
				
				//SEQUENCIAL
				avisoBancario.setNumeroSequencial(new Short("1"));
				
				//DATA REALIZADA
				avisoBancario.setDataRealizada(dataLancamento);
				
				/*
				 * AVBC_VLREALIZADO	Zero
				 * AVBC_VLARRECADACAOINFORMADO	Zero
				 * AVBC_VLDEVOLUCAOINFORMADO	Zero
				 * AVBC_VLARRECADACAOCALCULADO	Zero
				 * AVBC_VLDEVOLUCAOCALCULADO	Zero
				 * AVBC_VLCONTABILIZADO	Zero
				 */
				avisoBancario.setValorRealizado(BigDecimal.ZERO);
				avisoBancario.setValorArrecadacaoInformado(BigDecimal.ZERO);
				avisoBancario.setValorDevolucaoInformado(BigDecimal.ZERO);
				avisoBancario.setValorArrecadacaoCalculado(BigDecimal.ZERO);
				avisoBancario.setValorDevolucaoCalculado(BigDecimal.ZERO);
				avisoBancario.setValorContabilizado(BigDecimal.ZERO);
				
				/*
				 * AVBC_AMREFERENCIAARRECADACAO
				 * 
				 * Maior ano/mês entre o ano/mês da data de lançamento (AVBC_DTLANCAMENTO) e o ano/mês da 
				 * arrecadação (PARM_AMREFERENCIAARRECADACAO da tabela SISTEMA_PARAMETROS).
				 */
				SistemaParametro sistemaParametro = this.getControladorUtil()
				.pesquisarParametrosDoSistema();
				
				Integer anoMesDataLancamento = Util.getAnoMesComoInteger(dataLancamento);
				Integer anosMesArrecadacao = sistemaParametro.getAnoMesArrecadacao();
				
				if (Util.compararAnoMesReferencia(anoMesDataLancamento, anosMesArrecadacao, ">")){
					avisoBancario.setAnoMesReferenciaArrecadacao(anoMesDataLancamento);
				}
				else{
					avisoBancario.setAnoMesReferenciaArrecadacao(anosMesArrecadacao);
				}
				
				//AVBC_ICCREDITODEBITO
				avisoBancario.setIndicadorCreditoDebito(AvisoBancario.INDICADOR_CREDITO);
				
				//AVBC_NNDOCUMENTO
				avisoBancario.setNumeroDocumento(0);
				
				//ARRC_ID
				avisoBancario.setArrecadador(pagamentoCartaoDebito.getArrecadador());
				
				/*
				 * CTBC_IDDEPOSITOARRECADACAO da tabela ARRECADADOR_CONTRATO com ARRC_ID= ARRC_ID e 
				 * ARCT_DTCONTRATOENCERRAMENTO com o valor nulo
				 */
				Integer idContaBancaria = this.getControladorArrecadacao().pesquisarContaBancaria(
				pagamentoCartaoDebito.getArrecadador().getCodigoAgente());
				
				ContaBancaria contaBancaria = new ContaBancaria();
				contaBancaria.setId(idContaBancaria);
				
				avisoBancario.setContaBancaria(contaBancaria);
				
				//AVBC _TMULTIMAALTERACAO
				avisoBancario.setUltimaAlteracao(new Date());
				
				//Id da Forma de arrecadação escolhida ?Cartão de Débito?
				ArrecadacaoForma arrecadacaoForma = new ArrecadacaoForma();
				arrecadacaoForma.setId(ArrecadacaoForma.CARTAO_DEBITO);
				
				avisoBancario.setArrecadacaoForma(arrecadacaoForma);
				
				//INSERINDO O AVISO BANCÁRIO
				Integer idAvisoBancario = (Integer) this.getControladorUtil().inserir(avisoBancario);
				avisoBancario.setId(idAvisoBancario);
			}
		} 
		catch (ErroRepositorioException ex) {
			sessionContext.setRollbackOnly();
			ex.printStackTrace();
			throw new ControladorException("erro.sistema", ex);
		}
		
		
		return avisoBancario;
	}
	
	
	/**
	 * [UC0927] ? Confirmar Cartão de Crédito/Débito
	 * 
	 * [SB0004] ? Incluir Dados da Confirmação dos Pagamentos 
	 *
	 * @author Raphael Rossiter
	 * @date 19/01/2010
	 *
	 * @param pagamentoCartaoDebito
	 * @param contaGeral
	 * @param guiaPagamentoGeral
	 * @param debitoACobrarGeral
	 * @return PagamentoCartaoDebitoItem
	 * @throws ControladorException
	 */
	public PagamentoCartaoDebitoItem inserirPagamentoCartaoDebitoItem(
		PagamentoCartaoDebito pagamentoCartaoDebito, ContaValoresHelper contaValoresHelper, 
		GuiaPagamentoGeral guiaPagamentoGeral, DebitoACobrarGeral debitoACobrarGeral)throws ControladorException{
		
		PagamentoCartaoDebitoItem pagamentoCartaoDebitoItem = new PagamentoCartaoDebitoItem();
		
		pagamentoCartaoDebitoItem.setPagamentoCartaoDebito(pagamentoCartaoDebito);
		
		//ASSOCIANDO COM O DÉBITO SELECIONADO
		if (contaValoresHelper != null){
			ContaGeral contaGeral = new ContaGeral();
			contaGeral.setId(contaValoresHelper.getConta().getId());
			pagamentoCartaoDebitoItem.setContaGeral(contaGeral);
		}
		
		pagamentoCartaoDebitoItem.setGuiaPagamentoGeral(guiaPagamentoGeral);
		pagamentoCartaoDebitoItem.setDebitoACobrarGeral(debitoACobrarGeral);
		
		pagamentoCartaoDebitoItem.setUltimaAlteracao(new Date());
		
		Integer idPagamentoCartaoDebitoItem = (Integer) this.getControladorUtil()
		.inserir(pagamentoCartaoDebitoItem);
		
		pagamentoCartaoDebitoItem.setId(idPagamentoCartaoDebitoItem);
		
		return pagamentoCartaoDebitoItem;
	}
	
	
	/**
	 * [UC0927] ? Confirmar Cartão de Crédito/Débito
	 * 
	 * [SB0004] ? Incluir Dados da Confirmação dos Pagamentos 
	 *
	 * @author Raphael Rossiter
	 * @date 19/01/2010
	 *
	 * @param contaGeral
	 * @param avisoBancario
	 * @param pagamentoCartaoDebito
	 * @return Pagamento
	 * @throws ControladorException
	 */
	public Pagamento gerarPagamentoContaCartaoDebito(ContaValoresHelper contaValoresHelper, 
		AvisoBancario avisoBancario, PagamentoCartaoDebito pagamentoCartaoDebito) throws ControladorException{
			
		Pagamento pagamento = new Pagamento();
		
		//RECUPERANDO OS DADOS DA CONTA
		FiltroConta filtroConta = new FiltroConta();
		
		filtroConta.adicionarCaminhoParaCarregamentoEntidade("imovel");
		filtroConta.adicionarCaminhoParaCarregamentoEntidade("localidade");
		
		filtroConta.adicionarParametro(new ParametroSimples(FiltroConta.ID, 
		contaValoresHelper.getConta().getId()));
		
		Collection colecaoConta = this.getControladorUtil().pesquisar(filtroConta, Conta.class.getName());
		Conta conta = (Conta) Util.retonarObjetoDeColecao(colecaoConta);
		
		//A REFERÊNCIA DO PAGAMENTO SERÁ A MESMA REFERÊNCIA DA CONTA
		pagamento.setAnoMesReferenciaPagamento(conta.getReferencia());
		pagamento.setAnoMesReferenciaArrecadacao(avisoBancario.getAnoMesReferenciaArrecadacao());
		
		BigDecimal valorTotalContaSemAcrescimos = conta.getValorTotal();
		pagamento.setValorPagamento(valorTotalContaSemAcrescimos);
		
		pagamento.setDataPagamento(avisoBancario.getDataLancamento());
		pagamento.setPagamentoSituacaoAtual(null);
		pagamento.setPagamentoSituacaoAnterior(null);
		pagamento.setDebitoTipo(null);
		
		ContaGeral contaGeral = new ContaGeral();
		contaGeral.setConta(conta);
		contaGeral.setId(conta.getId());
		pagamento.setContaGeral(contaGeral);
		
		pagamento.setGuiaPagamento(null);
		pagamento.setDebitoACobrarGeral(null);
		
		DocumentoTipo documentoTipo = new DocumentoTipo();
		documentoTipo.setId(new Integer(DocumentoTipo.CONTA));
		pagamento.setDocumentoTipo(documentoTipo);
		pagamento.setDocumentoTipoAgregador(documentoTipo);
		
		pagamento.setAvisoBancario(avisoBancario);
		pagamento.setImovel(conta.getImovel());
		pagamento.setArrecadadorMovimentoItem(null);
		
		ArrecadacaoForma arrecadacaoForma = new ArrecadacaoForma();
		arrecadacaoForma.setId(ArrecadacaoForma.CARTAO_DEBITO);
		pagamento.setArrecadacaoForma(arrecadacaoForma);
		
		pagamento.setUltimaAlteracao(new Date());
		pagamento.setCliente(null);
		pagamento.setDataProcessamento(new Date());
		
		//LOCALIDADE DA CONTA
		pagamento.setLocalidade(conta.getLocalidade());
		
		//PAGAMENTO_CARTAO_DEBITO
		pagamento.setPagamentoCartaoDebito(pagamentoCartaoDebito);
		
		
		return pagamento;
		
	}
	
	
	/**
	 * [UC0927] ? Confirmar Cartão de Crédito/Débito
	 * 
	 * [SB0004] ? Incluir Dados da Confirmação dos Pagamentos 
	 *
	 * @author Raphael Rossiter
	 * @date 19/01/2010
	 *
	 * @param guiaPagamentoGeral
	 * @param avisoBancario
	 * @param pagamentoCartaoDebito
	 * @return Pagamento
	 * @throws ControladorException
	 */
	public Pagamento gerarPagamentoGuiaPagamentoCartaoDebito(GuiaPagamentoGeral guiaPagamentoGeral, 
			AvisoBancario avisoBancario, PagamentoCartaoDebito pagamentoCartaoDebito) throws ControladorException{
		
		Pagamento pagamento = new Pagamento();
		
		//RECUPERANDO OS DADOS DA GUIA DE PAGAMENTO
		FiltroGuiaPagamento filtroGuiaPagamento = new FiltroGuiaPagamento();
		
		filtroGuiaPagamento.adicionarCaminhoParaCarregamentoEntidade("imovel");
		filtroGuiaPagamento.adicionarCaminhoParaCarregamentoEntidade("debitoTipo");
		filtroGuiaPagamento.adicionarCaminhoParaCarregamentoEntidade("localidade");
		
		filtroGuiaPagamento.adicionarParametro(new ParametroSimples(FiltroGuiaPagamento.ID, guiaPagamentoGeral.getId()));
		
		Collection colecaoGuiaPagamento = this.getControladorUtil().pesquisar(filtroGuiaPagamento, GuiaPagamento.class.getName());
		GuiaPagamento guiaPagamento = (GuiaPagamento) Util.retonarObjetoDeColecao(colecaoGuiaPagamento);
		
		//Cria o pagamento para a guia de pagamento
		pagamento.setAnoMesReferenciaPagamento(null);
		pagamento.setAnoMesReferenciaArrecadacao(avisoBancario.getAnoMesReferenciaArrecadacao());
		pagamento.setValorPagamento(guiaPagamento.getValorDebito());
		pagamento.setDataPagamento(avisoBancario.getDataLancamento());
		pagamento.setPagamentoSituacaoAtual(null);
		pagamento.setPagamentoSituacaoAnterior(null);
		pagamento.setDebitoTipo(guiaPagamento.getDebitoTipo());	
		pagamento.setContaGeral(null);
		pagamento.setGuiaPagamento(guiaPagamento);
		pagamento.setDebitoACobrarGeral(null);
		pagamento.setLocalidade(guiaPagamento.getLocalidade());
		
		DocumentoTipo documentoTipo = new DocumentoTipo();
		documentoTipo.setId(new Integer(DocumentoTipo.GUIA_PAGAMENTO));
		pagamento.setDocumentoTipo(documentoTipo);
		pagamento.setDocumentoTipoAgregador(documentoTipo);
		
		pagamento.setAvisoBancario(avisoBancario);
		pagamento.setImovel(guiaPagamento.getImovel());
		pagamento.setArrecadadorMovimentoItem(null);
		
		ArrecadacaoForma arrecadacaoForma = new ArrecadacaoForma();
		arrecadacaoForma.setId(ArrecadacaoForma.CARTAO_DEBITO);
		pagamento.setArrecadacaoForma(arrecadacaoForma);
		
		pagamento.setUltimaAlteracao(new Date());
		pagamento.setCliente(null);
		pagamento.setDataProcessamento(new Date());
		
		//PAGAMENTO_CARTAO_DEBITO
		pagamento.setPagamentoCartaoDebito(pagamentoCartaoDebito);
		
		
		return pagamento;
	}
	
	
	/**
	 * [UC0927] ? Confirmar Cartão de Crédito/Débito
	 * 
	 * [SB0004] ? Incluir Dados da Confirmação dos Pagamentos
	 *
	 * @author Raphael Rossiter
	 * @date 19/01/2010
	 *
	 * @param debitoACobrarGeral
	 * @param avisoBancario
	 * @param pagamentoCartaoDebito
	 * @return Pagamento
	 * @throws ControladorException
	 */
	public Pagamento gerarPagamentoDebitoACobrarCartaoDebito(DebitoACobrarGeral debitoACobrarGeral, 
			AvisoBancario avisoBancario, PagamentoCartaoDebito pagamentoCartaoDebito) throws ControladorException{
		
		Pagamento pagamento = new Pagamento();
		
		//RECUPERANDO OS DADOS DA GUIA DE PAGAMENTO
		FiltroDebitoACobrar filtroDebitoACobrar = new FiltroDebitoACobrar();
		
		filtroDebitoACobrar.adicionarCaminhoParaCarregamentoEntidade("imovel");
		filtroDebitoACobrar.adicionarCaminhoParaCarregamentoEntidade("debitoTipo");
		filtroDebitoACobrar.adicionarCaminhoParaCarregamentoEntidade("localidade");
		
		filtroDebitoACobrar.adicionarParametro(new ParametroSimples(FiltroDebitoACobrar.ID, debitoACobrarGeral.getId()));
		
		Collection colecaoDebitoACobrar = this.getControladorUtil().pesquisar(filtroDebitoACobrar, 
		DebitoACobrar.class.getName());
		DebitoACobrar debitoACobrar = (DebitoACobrar) Util.retonarObjetoDeColecao(colecaoDebitoACobrar);
		
		if (debitoACobrar == null){
			debitoACobrar = debitoACobrarGeral.getDebitoACobrar();
		}
		
		//Cria o pagamento para o débito a cobrar
		pagamento.setAnoMesReferenciaPagamento(null);
		pagamento.setAnoMesReferenciaArrecadacao(avisoBancario.getAnoMesReferenciaArrecadacao());
		pagamento.setValorPagamento(debitoACobrar.getValorTotalComBonus());
		pagamento.setDataPagamento(avisoBancario.getDataLancamento());
		pagamento.setPagamentoSituacaoAtual(null);
		pagamento.setPagamentoSituacaoAnterior(null);
		pagamento.setDebitoTipo(debitoACobrar.getDebitoTipo());	
		pagamento.setContaGeral(null);
		pagamento.setGuiaPagamento(null);
		pagamento.setDebitoACobrarGeral(debitoACobrarGeral);
		pagamento.setLocalidade(debitoACobrar.getLocalidade());
		
		DocumentoTipo documentoTipo = new DocumentoTipo();
		documentoTipo.setId(new Integer(DocumentoTipo.DEBITO_A_COBRAR));
		pagamento.setDocumentoTipo(documentoTipo);
		pagamento.setDocumentoTipoAgregador(documentoTipo);
		
		pagamento.setAvisoBancario(avisoBancario);
		pagamento.setImovel(debitoACobrar.getImovel());
		pagamento.setArrecadadorMovimentoItem(null);
		
		ArrecadacaoForma arrecadacaoForma = new ArrecadacaoForma();
		arrecadacaoForma.setId(ArrecadacaoForma.CARTAO_DEBITO);
		pagamento.setArrecadacaoForma(arrecadacaoForma);
		
		pagamento.setUltimaAlteracao(new Date());
		pagamento.setCliente(null);
		
		pagamento.setDataProcessamento(new Date());
		
		//PAGAMENTO_CARTAO_DEBITO
		pagamento.setPagamentoCartaoDebito(pagamentoCartaoDebito);
		
		return pagamento;
	}
	
	
	/**
	 * [UC0927] ? Confirmar Cartão de Crédito/Débito
	 * 
	 * @author Raphael Rossiter
	 * @date 19/01/2010
	 *
	 * @param idArrecadador
	 * @param valorPagamento
	 * @return BigDecimal
	 * @throws ControladorException
	 */
	public BigDecimal calcularValorDeducao(Integer idArrecadador, BigDecimal valorPagamento, Integer idArrecadacaoForma) 
		throws ControladorException{
		
		BigDecimal valorDeducao = new BigDecimal("0.00");
		ArrecadadorContratoTarifa arrecadadorContratoTarifa = null;
		
		arrecadadorContratoTarifa = this.pesquisarArrecadadorContratoTarifa(idArrecadador,
		idArrecadacaoForma);
		
		/*
		 * O sistema deverá verificar qual o tipo de cálculo da tarifa para o contrato do arrecadador, 
		 * valor monetário ou percentual do pagamento.
		 */
		if (arrecadadorContratoTarifa.getValorTarifa() != null){
			
			/*
			 * VALOR MONETÁRIO
			 * 
			 * O sistema deverá adicionar ao valor da dedução o valor da tarifa para cada 
			 * pagamento informado. 
			 */
			valorDeducao = arrecadadorContratoTarifa.getValorTarifa();
		}
		else{
			
			/*
			 * VALOR PERCENTUAL
			 * 
			 * o sistema deverá calcular qual o valor do percentual no valor do pagamento 
			 * ((Valor do Pagamento * ARCT_PCTARIFA)/100)
			 */
			valorDeducao = (valorPagamento.multiply(arrecadadorContratoTarifa.getValorTarifaPercentual()))
			.divide(new BigDecimal("100.00"));
		}
		
		
		return valorDeducao;
	}
	
	
	/**
	 * [UC0927] ? Confirmar Cartão de Crédito/Débito
	 * 
	 * [SB0005  ? Calcular Valor da  Dedução]
	 *
	 * @author Raphael Rossiter
	 * @date 19/01/2010
	 *
	 * @param idArrecadador
	 * @param idArrecadacaoForma
	 * @return
	 * @throws ErroRepositorioException
	 */
	public ArrecadadorContratoTarifa pesquisarArrecadadorContratoTarifa(Integer idArrecadador, 
			Integer idArrecadacaoForma) throws ControladorException {
		
		ArrecadadorContratoTarifa retorno = null;
		
		try {
			
			retorno = repositorioCobranca.pesquisarArrecadadorContratoTarifa(
			idArrecadador, idArrecadacaoForma);
			
		} catch (ErroRepositorioException ex) {
			ex.printStackTrace();
			throw new ControladorException("erro.sistema", ex);
		}
		
		
		return retorno;
	}
	
	
	/**
	 * [UC0927] ? Confirmar Cartão de Crédito/Débito
	 * 
	 * [SB0005  ? Calcular Valor da  Dedução] 
	 *
	 * @author Raphael Rossiter
	 * @date 02/02/2010
	 *
	 * @param avisoBancario
	 * @param valorDeducao
	 * @throws ControladorException
	 */
	public void gerarAtualizarAvisoDeducoes(AvisoBancario avisoBancario, BigDecimal valorDeducao) 
		throws ControladorException {
		
		try {
			
			//VERIFICANDO A EXISTÊNCIA DE DEDUÇÃO PARA O AVISO BANCÁRIO
			AvisoDeducoes avisoDeducoes = repositorioCobranca.pesquisarAvisoDeducoes(avisoBancario.getId());
			BigDecimal valorTotalAvisoDeducoes = new BigDecimal(0);
			BigDecimal valorAviso = new BigDecimal(0);
				
			if (avisoDeducoes != null){
					
				//ATUALIZANDO A DEDUÇÃO DO AVISO BANCÁRIO
				valorTotalAvisoDeducoes = avisoDeducoes.getValorDeducao()
				.add(valorDeducao);
					
				repositorioCobranca.atualizarValorAvisoDeducoes(avisoBancario.getId(), valorTotalAvisoDeducoes);
			}
			else{
					
				//INSERINDO A DEDUÇÃO DO AVISO BANCÁRIO
				AvisoDeducoesPK avisoDeducoesPK = new AvisoDeducoesPK();
				avisoDeducoesPK.setAvisoBancarioId(avisoBancario.getId());
				avisoDeducoesPK.setDeducaoTipoId(DeducaoTipo.TARIFA);
					
				avisoDeducoes = new AvisoDeducoes();
					
				avisoDeducoes.setComp_id(avisoDeducoesPK);
				avisoDeducoes.setValorDeducao(valorDeducao);
				avisoDeducoes.setUltimaAlteracao(new Date());
					
				this.getControladorUtil().inserir(avisoDeducoes);
				
				valorTotalAvisoDeducoes = valorDeducao;
				
			}
			
			//ATUALIZA O VALOR REALIZADO DO AVISO BANCÁRIO RETIRANDO O VALOR DA DEDUÇÃO
			valorAviso = avisoBancario.getValorArrecadacaoInformado().subtract(valorTotalAvisoDeducoes);
			avisoBancario.setValorRealizado(valorAviso);
			this.getControladorUtil().atualizar(avisoBancario);
			
		} catch (ErroRepositorioException ex) {
			ex.printStackTrace();
			throw new ControladorException("erro.sistema", ex);
		}
	}


	/**
	 *[UC0349] Emitir Documento de Cobrança ? Aviso de Corte
	 * 
	 * @author Vivianne Sousa
	 * @date 11/12/2009
	 */

	public void emitirDocumentoCobranca(CobrancaAcaoAtividadeCronograma cobrancaAcaoAtividadeCronograma,
			CobrancaAcaoAtividadeComando cobrancaAcaoAtividadeComando,
			CobrancaAcao acaoCobranca, CobrancaGrupo grupoCobranca)throws ControladorException{
	    
		BufferedWriter out = null;
		ZipOutputStream zos = null;
		File leitura = null;
		
		try{
			
			Integer idCronogramaAtividadeAcaoCobranca = null;
			Integer idComandoAtividadeAcaoCobranca = null;
			Integer idAcaoCobranca = null;
			if (cobrancaAcaoAtividadeCronograma != null
					&& cobrancaAcaoAtividadeCronograma.getId() != null) {
				idCronogramaAtividadeAcaoCobranca = cobrancaAcaoAtividadeCronograma.getId();
			}
			if (cobrancaAcaoAtividadeComando != null
					&& cobrancaAcaoAtividadeComando.getId() != null) {
				idComandoAtividadeAcaoCobranca = cobrancaAcaoAtividadeComando.getId();
			}
			if (acaoCobranca != null && acaoCobranca.getId() != null) {
				idAcaoCobranca = acaoCobranca.getId();
			}
			
			// Definindo arquivo para escrita
			Date dataAtual = new Date();
			String nomeZip = null;
			if (idAcaoCobranca.equals(CobrancaAcao.AVISO_CORTE)) {		
				if (idCronogramaAtividadeAcaoCobranca != null) {
					nomeZip = "AVISO_CORTE_GRUPO_" + grupoCobranca.getId() + "_"
							+ Util.formatarData(dataAtual) + Util.formatarHoraSemDataSemDoisPontos(dataAtual);
					nomeZip = nomeZip.replace("/", "_");
			
				} else {
					String descricaoAbrevDocumentoTipo = "";
					if (acaoCobranca != null && acaoCobranca.getDocumentoTipo() != null) {
						descricaoAbrevDocumentoTipo = acaoCobranca.getDocumentoTipo()
								.getDescricaoAbreviado();
					}
					String tituloComandoEventual = cobrancaAcaoAtividadeComando.getDescricaoTitulo();
			
					nomeZip = descricaoAbrevDocumentoTipo + " " + tituloComandoEventual
							+ " " + Util.formatarData(dataAtual) + Util.formatarHoraSemDataSemDoisPontos(dataAtual);
					nomeZip = nomeZip.replace("/", "_");
					nomeZip = nomeZip.replace(" ", "_");
			
				}
			} else if (idAcaoCobranca.equals(CobrancaAcao.AVISO_CORTE_A_REVELIA)){
				if (idCronogramaAtividadeAcaoCobranca != null) {
					nomeZip = "AVISO_CORTE_A_REVELIA_GRUPO_" + grupoCobranca.getId() + "_"
							+ Util.formatarData(dataAtual) + Util.formatarHoraSemDataSemDoisPontos(dataAtual);
					nomeZip = nomeZip.replace("/", "_");
			
				} else {
					String descricaoAbrevDocumentoTipo = "";
					if (acaoCobranca != null && acaoCobranca.getDocumentoTipo() != null) {
						descricaoAbrevDocumentoTipo = acaoCobranca.getDocumentoTipo()
								.getDescricaoAbreviado();
					}
					String tituloComandoEventual = cobrancaAcaoAtividadeComando.getDescricaoTitulo();
			
					nomeZip = descricaoAbrevDocumentoTipo + " " + tituloComandoEventual
							+ " " + Util.formatarData(dataAtual) + Util.formatarHoraSemDataSemDoisPontos(dataAtual);
					nomeZip = nomeZip.replace("/", "_");
					nomeZip = nomeZip.replace(" ", "_");
			
				}
			}
	        
			// pegar o arquivo, zipar pasta e arquivo e escrever no stream
			System.out.println("***************************************");
			System.out.println("INICO DA CRIACAO DO ARQUIVO");
			System.out.println("***************************************");
	
			// criar o arquivo zip
			File compactado = new File(nomeZip + ".zip"); // nomeZip
			zos = new ZipOutputStream(new FileOutputStream(compactado));
	
			leitura = new File(nomeZip + ".txt");
			out = new BufferedWriter(new OutputStreamWriter(
					new FileOutputStream(leitura.getAbsolutePath())));
			
			System.out.println("***************************************");
			System.out.println("ENTROU NO AVISO DE CORTE");
			System.out.println("***************************************");
			Collection colecaoCobrancaDocumento = repositorioCobranca
					.pesquisarDocumentoCobrancaImpressao(
							idComandoAtividadeAcaoCobranca,idCronogramaAtividadeAcaoCobranca);
			System.out.println("***************************************");
			System.out.println("QTD DE COBRANCA DOCUMENTO:"	+ colecaoCobrancaDocumento.size());
			System.out.println("***************************************");
			
			if(colecaoCobrancaDocumento != null && !colecaoCobrancaDocumento.isEmpty()){
				
				Iterator iterCobrancaDocumentoImpressao = colecaoCobrancaDocumento.iterator();
				
				while (iterCobrancaDocumentoImpressao.hasNext()) {
					String  linhaTxt  = (String) iterCobrancaDocumentoImpressao.next();
					
					StringBuilder cobrancaDocumentoTxt = new StringBuilder();
					cobrancaDocumentoTxt.append(linhaTxt);
					cobrancaDocumentoTxt.append(System.getProperty("line.separator"));
				    out.write(cobrancaDocumentoTxt.toString());					
					
				}
				
			}
			
			out.flush();                           
	
			System.out.println("***************************************");
			System.out.println("FIM DA CRIACAO DO ARQUIVO");
			System.out.println("***************************************");
		
		}catch (ErroRepositorioException ex) {
				ex.printStackTrace();
				throw new ControladorException("erro.sistema", ex);
		} catch (IOException e) {
			e.printStackTrace();
			throw new ControladorException("erro.sistema", e);
		} catch (Exception e) {
			e.printStackTrace();
			throw new ControladorException("erro.sistema", e);
		} finally {
			try{
				out.close();
				ZipUtil.adicionarArquivo(zos, leitura);
		
				// close the stream
				zos.close();
				leitura.delete();
			} catch (IOException e) {
				e.printStackTrace();
				throw new ControladorException("erro.sistema", e);
			}
	    }
		
	}
	
	/**
	 * Formata a string builder de cobrança documento de acordo com a quantidade
	 * de itens.Caso a quantidade de itens seja maior que quantidadeContas então as contas com
	 * o ano mes referencia mais antigas serão somadas (os valores do item e dos
	 * acrescimos) e formatadas na stringbuilder.
	 * 
	 * [UC0348] Emitir Documento de Cobranca
	 * 
	 * @author Vivianne Sousa
	 * @date 09/12/2009
	 * 
	 * @return
	 * @throws ControladorException
	 */
	protected int formatarCobrancaDocumentoItemSemValorEncargos(StringBuilder cobrancaDocumentoTxt,
			Collection colecaoCobrancaDocumentoItemConta, int quantidadeContas,
			CobrancaDocumento cobrancaDocumento) throws ControladorException {
		
		int indicadorEstouro = 0;
		int complementoEspecosBranco = 0;
		BigDecimal somaValorItem = new BigDecimal(0);
		complementoEspecosBranco = quantidadeContas * 35;
		
		int countImpressao = colecaoCobrancaDocumentoItemConta.size() - (quantidadeContas - 1);
	
		if (colecaoCobrancaDocumentoItemConta.size() > quantidadeContas) {
			indicadorEstouro = 1;
	
			CalcularValorDataVencimentoAnteriorHelper calcularValorDataVencimentoAnteriorHelper = this
					.calcularValorDataVencimentoAnterior(colecaoCobrancaDocumentoItemConta, quantidadeContas);
			
			// Ano mes de referencia da conta anterior
			cobrancaDocumentoTxt.append("DEBTO.ATE  ");
			complementoEspecosBranco = complementoEspecosBranco - 11;
			// data de vencimento anterior
			cobrancaDocumentoTxt.append(Util.completaString(Util.formatarData(calcularValorDataVencimentoAnteriorHelper.getDataVencimentoAnterior()),10));
			complementoEspecosBranco = complementoEspecosBranco - 10;
	
			String valorItemAnterior = Util.formataBigDecimal(calcularValorDataVencimentoAnteriorHelper.getValorAnterior(), 2, true);
	
			// Valor do item anterior
			cobrancaDocumentoTxt.append(Util.completaStringComEspacoAEsquerda(valorItemAnterior,14));
			complementoEspecosBranco = complementoEspecosBranco - 14;
			somaValorItem = somaValorItem.add(calcularValorDataVencimentoAnteriorHelper.getValorAnterior());
			
		}
	
		if (countImpressao <= 1) {
			Iterator iteratorColecaoCobrancaDocumentoItem = colecaoCobrancaDocumentoItemConta.iterator();
	
			CobrancaDocumentoItem cobrancaDocumentoItem = null;
	
			while (iteratorColecaoCobrancaDocumentoItem.hasNext()) {
				cobrancaDocumentoItem = (CobrancaDocumentoItem) iteratorColecaoCobrancaDocumentoItem.next();
	
				// Ano mes de referencia da conta
				cobrancaDocumentoTxt.append(Util.completaStringComEspacoAEsquerda(
						Util.formatarAnoMesParaMesAno(cobrancaDocumentoItem.getContaGeral().getConta().getReferencia()), 11));
				complementoEspecosBranco = complementoEspecosBranco - 11;
				// data de vencimento
				cobrancaDocumentoTxt.append(Util.completaString(Util
						.formatarData(cobrancaDocumentoItem.getContaGeral().getConta().getDataVencimentoConta()), 10));
				complementoEspecosBranco = complementoEspecosBranco - 10;
	
				String valorItem = Util.formataBigDecimal(cobrancaDocumentoItem.getValorItemCobrado(),2, true);
	
				// Valor do item
				cobrancaDocumentoTxt.append(Util.completaStringComEspacoAEsquerda(valorItem, 14));
				complementoEspecosBranco = complementoEspecosBranco - 14;
				
				somaValorItem = somaValorItem.add(cobrancaDocumentoItem.getValorItemCobrado());
				
			}
	
		} else {
			CobrancaDocumentoItem cobrancaDocumentoItem = null;
			while (countImpressao < colecaoCobrancaDocumentoItemConta.size()) {
				cobrancaDocumentoItem = (CobrancaDocumentoItem) ((List) colecaoCobrancaDocumentoItemConta).get(countImpressao);
	
				// Ano mes de referencia da conta
				cobrancaDocumentoTxt.append(Util.completaStringComEspacoAEsquerda(Util.formatarAnoMesParaMesAno(
						cobrancaDocumentoItem.getContaGeral().getConta().getReferencia()), 11));
				
				complementoEspecosBranco = complementoEspecosBranco - 11;
				// data de vencimento
				cobrancaDocumentoTxt.append(Util.completaString(Util
						.formatarData(cobrancaDocumentoItem.getContaGeral().getConta().getDataVencimentoConta()), 10));
				complementoEspecosBranco = complementoEspecosBranco - 10;
	
				String valorItem = Util.formataBigDecimal(cobrancaDocumentoItem.getValorItemCobrado(), 2 ,true);
	
				// Valor do item
				cobrancaDocumentoTxt.append(Util.completaStringComEspacoAEsquerda(valorItem, 14));
				complementoEspecosBranco = complementoEspecosBranco - 14;
				
				somaValorItem = somaValorItem.add(cobrancaDocumentoItem.getValorItemCobrado());
				
				countImpressao++;
	
			}
		}
		
		cobrancaDocumentoTxt.append(Util.completaStringComEspacoAEsquerda("",complementoEspecosBranco));
	
		//soma dos valores item 
		String somaValorItemStr = Util.formataBigDecimal(somaValorItem, 2, true);
		cobrancaDocumentoTxt.append(Util.completaStringComEspacoAEsquerda(somaValorItemStr, 14));
	
		return indicadorEstouro;
	}
	
	/**
	 * 
	 * Este caso de uso permite a emissão de um ou mais documentos de cobrança
	 * 
	 * [UC0349] Emitir Documento de Cobrança
	 * 
	 * @author Raphael Rossiter,Vivianne Sousa
	 * @data 26/05/2006,14/12/2009
	 * 
	 * @param
	 * @return void
	 */
	public void gerarDocumentoCobrancaImpressaoAvisoCorte(
			CobrancaAcaoAtividadeCronograma cobrancaAcaoAtividadeCronograma,
			CobrancaAcaoAtividadeComando cobrancaAcaoAtividadeComando,
			Date dataAtualPesquisa, CobrancaAcao acaoCobranca,
			CobrancaGrupo grupoCobranca, CobrancaCriterio cobrancaCriterio)
			throws ControladorException {
		
		boolean flagFimPesquisa = false;
		final int quantidadeCobrancaDocumento = 1000;
		int quantidadeCobrancaDocumentoInicio = 0;

		StringBuilder cobrancaDocumentoTxt = new StringBuilder();
		int sequencialImpressao = 0;
		int sequencialOrdenacao = 0;
		Collection colecaoCobrancaDocumento = null;

		Map<Integer, Integer> mapAtualizaSequencial = null;

		Integer idCronogramaAtividadeAcaoCobranca = null;
		Integer idComandoAtividadeAcaoCobranca = null;
		Integer idAcaoCobranca = null;
		if (cobrancaAcaoAtividadeCronograma != null
				&& cobrancaAcaoAtividadeCronograma.getId() != null) {
			idCronogramaAtividadeAcaoCobranca = cobrancaAcaoAtividadeCronograma.getId();
		}
		if (cobrancaAcaoAtividadeComando != null
				&& cobrancaAcaoAtividadeComando.getId() != null) {
			idComandoAtividadeAcaoCobranca = cobrancaAcaoAtividadeComando.getId();
		}
		if (acaoCobranca != null && acaoCobranca.getId() != null) {
			idAcaoCobranca = acaoCobranca.getId();
		}

		while (!flagFimPesquisa) {
			// map que armazena o sequencial e o numero da
			// conta para no final atualizar todos os sequencias
			mapAtualizaSequencial = new HashMap();

			try {

				System.out.println("***************************************");
				System.out.println("ENTROU NO AVISO DE CORTE");
				System.out.println("***************************************");
				colecaoCobrancaDocumento = repositorioCobranca
						.pesquisarCobrancaDocumentoParaEmitir(
								idCronogramaAtividadeAcaoCobranca,
								idComandoAtividadeAcaoCobranca,
								dataAtualPesquisa, idAcaoCobranca,
								quantidadeCobrancaDocumentoInicio);
				System.out.println("***************************************");
				System.out.println("QTD DE COBRANCA DOCUMENTO:"	+ colecaoCobrancaDocumento.size());
				System.out.println("***************************************");
			} catch (ErroRepositorioException ex) {
				ex.printStackTrace();
				throw new ControladorException("erro.sistema", ex);
			}

			if (colecaoCobrancaDocumento != null
					&& !colecaoCobrancaDocumento.isEmpty()) {

				System.out.println("***************************************");
				System.out.println("QUANTIDADE COBRANÇA:" + colecaoCobrancaDocumento.size());
				System.out.println("***************************************");

				if (colecaoCobrancaDocumento.size() < quantidadeCobrancaDocumento) {
					flagFimPesquisa = true;
				} else {
					quantidadeCobrancaDocumentoInicio = quantidadeCobrancaDocumentoInicio + 1000;
				}

				int metadeColecao = 0;
				if (colecaoCobrancaDocumento.size() % 2 == 0) {
					metadeColecao = colecaoCobrancaDocumento.size() / 2;
				} else {
					metadeColecao = (colecaoCobrancaDocumento.size() / 2) + 1;
				}

				Map<Integer, Map<Object, Object>> mapCobrancaDocumentoOrdenada = dividirColecao(colecaoCobrancaDocumento);

				if (mapCobrancaDocumentoOrdenada != null) {
					int countOrdem = 0;

					while (countOrdem < mapCobrancaDocumentoOrdenada.size()) {
						Map<Object, Object> mapCobrancaoDocumentoDivididas = mapCobrancaDocumentoOrdenada
								.get(countOrdem);

						Iterator iteratorCobrancaDocumento = mapCobrancaoDocumentoDivididas.keySet().iterator();

						while (iteratorCobrancaDocumento.hasNext()) {

							CobrancaDocumento cobrancaDocumento = null;

							int situacao = 0;

							cobrancaDocumento = (CobrancaDocumento) iteratorCobrancaDocumento.next();

							String nomeCliente = null;
							Collection colecaoCobrancaDocumentoItem = null;

							/*
							 * Estes objetos auxiliarão na formatação da
							 * inscrição que será composta por informações do
							 * documento de cobrança e do imóvel a ele associado
							 */
							Imovel inscricao = null;
							SetorComercial setorComercialInscricao = null;
							Quadra quadraInscricao = null;

							/*
							 * Objeto que será utilizado para armazenar as
							 * informações do documento de cobrança de acordo
							 * com o layout definido no caso de uso
							 */

							sequencialImpressao++;

							while (situacao < 2) {
								if (situacao == 0) {
									situacao = 1;
									sequencialImpressao = atualizaSequencial(
											sequencialImpressao, situacao, metadeColecao);

								} else {
									cobrancaDocumento = (CobrancaDocumento) mapCobrancaoDocumentoDivididas.get(cobrancaDocumento);
									situacao = 2;
									sequencialImpressao = atualizaSequencial(
											sequencialImpressao, situacao, metadeColecao);
								}

								if (cobrancaDocumento != null) {

									try {

										nomeCliente = this.repositorioClienteImovel
											.pesquisarNomeClientePorImovel(cobrancaDocumento.getImovel().getId());

										colecaoCobrancaDocumentoItem = this.repositorioCobranca
												.selecionarCobrancaDocumentoItemReferenteConta(cobrancaDocumento);

									} catch (ErroRepositorioException ex) {
										ex.printStackTrace();
										throw new ControladorException(
												"erro.sistema", ex);
									}

									if (colecaoCobrancaDocumentoItem != null
											&& !colecaoCobrancaDocumentoItem.isEmpty()) {

										// Início do processo de geração da linha do txt 

										// Nome da Localidade
										cobrancaDocumentoTxt.append(Util.completaString(
											cobrancaDocumento.getLocalidade().getDescricao(),25));
										
										if (cobrancaAcaoAtividadeCronograma != null) {
											
											String ciclo = "CICLO:" + Util.formatarAnoMesParaMesAno(
													cobrancaAcaoAtividadeCronograma.getCobrancaAcaoCronograma()
													.getCobrancaGrupoCronogramaMes().getAnoMesReferencia());
											
											cobrancaDocumentoTxt.append(Util.completaString(ciclo, 13));
											
										}else {
											cobrancaDocumentoTxt.append(Util.completaString("", 13));
										}

										// Inscrição
										quadraInscricao = new Quadra();
										setorComercialInscricao = new SetorComercial();
										inscricao = new Imovel();

										quadraInscricao.setNumeroQuadra(cobrancaDocumento.getNumeroQuadra());
										setorComercialInscricao.setCodigo(cobrancaDocumento.getCodigoSetorComercial());
										inscricao.setLocalidade(cobrancaDocumento.getLocalidade());
										inscricao.setSetorComercial(setorComercialInscricao);
										inscricao.setQuadra(quadraInscricao);
										inscricao.setLote(cobrancaDocumento.getImovel().getLote());
										inscricao.setSubLote(cobrancaDocumento.getImovel().getSubLote());

										cobrancaDocumentoTxt.append(Util.completaString(
												inscricao.getInscricaoFormatada(),20));

										// Nome do Cliente
										cobrancaDocumentoTxt.append(Util.completaString(nomeCliente, 50));

										// Matrícula do imóvel
										String matriculaImovelFormatada = Util.retornaMatriculaImovelFormatada(
												cobrancaDocumento.getImovel().getId());

										cobrancaDocumentoTxt.append(Util.completaStringComEspacoAEsquerda(
											   matriculaImovelFormatada,10));

										// Endereço Formatado
										cobrancaDocumentoTxt.append(Util.completaString(cobrancaDocumento
											.getImovel().getEnderecoFormatadoAbreviado(),72));
										
										// Grupo de Cobrança
										cobrancaDocumentoTxt.append(Util.completaStringComEspacoAEsquerda(
											cobrancaDocumento.getQuadra().getRota().getCobrancaGrupo().getId().toString(),2));

										// Sequencial do Documento de Cobrança
										cobrancaDocumentoTxt.append(Util.completaStringComEspacoAEsquerda(
											"" + cobrancaDocumento.getNumeroSequenciaDocumento(),9));

										// Código da situação da ligação de água
										cobrancaDocumentoTxt
											.append(Util.completaStringComEspacoAEsquerda(cobrancaDocumento
											.getImovel().getLigacaoAguaSituacao().getId().toString(),1));

										// Código da situação da ligação de esgoto
										cobrancaDocumentoTxt
											.append(Util.completaStringComEspacoAEsquerda(cobrancaDocumento
											.getImovel().getLigacaoEsgotoSituacao().getId().toString(),1));

										/*
										 * Quantidades de economias por categoria: 
										 * 1º RESIDÊNCIAL 2º COMERCIAL 3º INDUSTRIAL 4º PÚBLICA
										 */
										Collection colecaoCategorias = this.getControladorImovel()
												.obterQuantidadeEconomiasCategoria(cobrancaDocumento.getImovel());
										
										String qtdResidencial = "";
										String qtdComercial = "";
										String qtdIndustrial = "";
										String qtdPublico = "";

										if (colecaoCategorias != null && !colecaoCategorias.isEmpty()) {
											Iterator iteratorColecaoCategorias = colecaoCategorias.iterator();
											Categoria categoria = null;

											while (iteratorColecaoCategorias.hasNext()) {
												categoria = (Categoria) iteratorColecaoCategorias.next();

												if (categoria.getId().equals(Categoria.RESIDENCIAL)) {
													qtdResidencial = ""	+ categoria.getQuantidadeEconomiasCategoria();
												} else if (categoria.getId().equals(Categoria.COMERCIAL)) {
													qtdComercial = "" + categoria.getQuantidadeEconomiasCategoria();
												} else if (categoria.getId().equals(Categoria.INDUSTRIAL)) {
													qtdIndustrial = "" + categoria.getQuantidadeEconomiasCategoria();
												} else if (categoria.getId().equals(Categoria.PUBLICO)) {
													qtdPublico = "" + categoria.getQuantidadeEconomiasCategoria();
												}
											}
										}
										colecaoCategorias = null;

										// Residêncial
										if (!qtdResidencial.equals("")) {
											cobrancaDocumentoTxt.append(Util.adicionarZerosEsquedaNumero(
													3,qtdResidencial));
										} else {
											cobrancaDocumentoTxt.append(Util.completaString("", 3));
										}

										// Comercial
										if (!qtdComercial.equals("")) {
											cobrancaDocumentoTxt.append(Util.adicionarZerosEsquedaNumero(
													3, qtdComercial));
										} else {
											cobrancaDocumentoTxt.append(Util.completaString("", 3));
										}

										// Industrial
										if (!qtdIndustrial.equals("")) {
											cobrancaDocumentoTxt.append(Util.adicionarZerosEsquedaNumero(
													3,qtdIndustrial));
										} else {
											cobrancaDocumentoTxt.append(Util.completaString("", 3));
										}

										// Público
										if (!qtdPublico.equals("")) {
											cobrancaDocumentoTxt.append(Util.adicionarZerosEsquedaNumero(
													3,qtdPublico));
										} else {
											cobrancaDocumentoTxt.append(Util.completaString("", 3));
										}
			

										// Perfil do Imóvel
										cobrancaDocumentoTxt.append(Util.completaString(cobrancaDocumento
											.getImovelPerfil().getDescricao(),8));

										// Data de Emissão
										if (cobrancaDocumento.getEmissao() != null) {
											cobrancaDocumentoTxt.append(Util.formatarData(cobrancaDocumento.getEmissao()));
										} else {
											cobrancaDocumentoTxt.append(Util.completaString("", 10));
										}

										//alterado por Vivianne Sousa 15/09/2008
										//Data de Validade
										Date dataValidade = this.
											obterDataValidadeDocumentoCobranca(cobrancaDocumento,null,null);
										
										if (dataValidade != null) {
											cobrancaDocumentoTxt.append(Util.formatarData(dataValidade));
										} else {
											cobrancaDocumentoTxt.append(Util.completaString("", 10));
										}
										
										// LINHA 07
										// ==================================

										/*
										 * Selecionar os itens do documento de
										 * cobrança correspondentes a conta e
										 * ordenar por ano/mês de referência da
										 * conta
										 */
										
										if (colecaoCobrancaDocumentoItem != null
												&& !colecaoCobrancaDocumentoItem.isEmpty()) {
											
											//retorna o indicador de estouro e formata o cobrançaDocumentoTxt com os dados
		    								formatarCobrancaDocumentoItemSemValorEncargos(cobrancaDocumentoTxt,colecaoCobrancaDocumentoItem,28,cobrancaDocumento);
		    								
										}
										
										// Constante "GR- "
										cobrancaDocumentoTxt.append("GR-");

										// Grupo de Cobrança
										cobrancaDocumentoTxt.append(Util.completaStringComEspacoAEsquerda(cobrancaDocumento
											.getQuadra().getRota().getCobrancaGrupo().getId().toString(),2));

										// Código e descrição da empresa
										if (cobrancaDocumento.getEmpresa() != null) {
											cobrancaDocumentoTxt.append(Util.completaStringComEspacoAEsquerda(
													cobrancaDocumento.getEmpresa().getId().toString(),2));

											cobrancaDocumentoTxt.append("-");

											cobrancaDocumentoTxt.append(Util.completaString(
													cobrancaDocumento.getEmpresa().getDescricaoAbreviada(),11));
										} else {
											cobrancaDocumentoTxt.append(Util.completaString("", 14));
										}

										// Sigla e descriçao da gerência regional
										cobrancaDocumentoTxt.append(Util.completaString(
											cobrancaDocumento.getLocalidade().getGerenciaRegional().getNomeAbreviado(),3));

										cobrancaDocumentoTxt.append("-");

										cobrancaDocumentoTxt.append(Util.completaString(
											cobrancaDocumento.getLocalidade().getGerenciaRegional().getNome(),8));

										// Sequencial de impressão
										cobrancaDocumentoTxt.append(Util.completaStringComEspacoAEsquerda(
											Util.retornaSequencialFormatado(sequencialImpressao),9));

										// LINHA 13
										// ==================================

										String representacaoNumericaCodBarra = "";

										// Obtém a representação numérica do código de barra
										representacaoNumericaCodBarra = this.getControladorArrecadacao()
												.obterRepresentacaoNumericaCodigoBarra(
												5,
												cobrancaDocumento.getValorDocumento(),
												cobrancaDocumento.getLocalidade().getId(),
												cobrancaDocumento.getImovel().getId(),
												null,
												null,
												null,
												null,
												String.valueOf(cobrancaDocumento.getNumeroSequenciaDocumento()),
												cobrancaDocumento.getDocumentoTipo().getId(), 
												null,
												null,
												null);

										// Formata a representação númerica do código de barras
										String representacaoNumericaCodBarraFormatada = 
											  representacaoNumericaCodBarra.substring(0, 11) + " "
											+ representacaoNumericaCodBarra.substring(11, 12) + " "
											+ representacaoNumericaCodBarra.substring(12, 23) + " "
											+ representacaoNumericaCodBarra.substring(23, 24) + " "
											+ representacaoNumericaCodBarra.substring(24, 35) + " "
											+ representacaoNumericaCodBarra.substring(35, 36) + " "
											+ representacaoNumericaCodBarra.substring(36, 47) + " "
											+ representacaoNumericaCodBarra.substring(47, 48);

										cobrancaDocumentoTxt.append(representacaoNumericaCodBarraFormatada);

										// LINHA 16
										// ==================================

										// Cria o objeto para gerar o código de barras no padrão intercalado 2 de 5
										Interleaved2of5 codigoBarraIntercalado2de5 = new Interleaved2of5();

										// Recupera a representação númerica do
										// código de barras sem os dígitos verificadores
										String representacaoCodigoBarrasSemDigitoVerificador = 
											  representacaoNumericaCodBarra.substring(0, 11)
											+ representacaoNumericaCodBarra.substring(12, 23)
											+ representacaoNumericaCodBarra.substring(24, 35)
											+ representacaoNumericaCodBarra.substring(36, 47);

										cobrancaDocumentoTxt.append(codigoBarraIntercalado2de5.encodeValue(representacaoCodigoBarrasSemDigitoVerificador));

										String txtString =  cobrancaDocumentoTxt.toString();
        								
        								txtString = txtString.replace('\'',' ');
        								txtString = txtString.replace('`',' ');
        								
        								try {
        									
											repositorioCobranca.inserirDocumentoCobrancaImpressao(
													cobrancaDocumento.getId(),
													txtString,
													idComandoAtividadeAcaoCobranca,
													idCronogramaAtividadeAcaoCobranca,
													sequencialOrdenacao++);
        									
										} catch (ErroRepositorioException ex) {
											ex.printStackTrace();
											throw new ControladorException("erro.sistema", ex);
										}

		
										cobrancaDocumentoTxt = new StringBuilder();
										
									}
									// adiciona o id da  conta e o sequencial
									// no para serem atualizados
									mapAtualizaSequencial.put(cobrancaDocumento.getId(), sequencialImpressao);

									colecaoCobrancaDocumentoItem = null;
								}

							}// fim do laço que verifica as 2 contas

						}// fim laço while do iterator do objeto helper
						countOrdem++;
						mapCobrancaoDocumentoDivididas = null;
					}
				}
			} else {
				flagFimPesquisa = true;
			}
			try {
				repositorioCobranca
						.atualizarSequencialCobrancaDocumentoImpressao(mapAtualizaSequencial);
			} catch (ErroRepositorioException e) {
				throw new ControladorException("erro.sistema", e);
			}
			mapAtualizaSequencial = null;
			colecaoCobrancaDocumento = null;
		}
		
		System.out.println("***************************************");
		System.out.println("FINAL GERAR DOCUMENTO COBRANCA IMPRESSAO");
		System.out.println("***************************************");
		

	}
	
	
	
	/**
	 * [UC0987] ? Inserir Faixa de Dias Vencidos para Documentos a Receber
	 * 
	 * @author Hugo Leonardo
	 * @date 22/02/2010
	 *
	 * @param documentosReceberFaixaDiasVencidos
	 * @throws ControladorException
	 */
	public Integer inserirDocumentosReceberFaixaDiasVencidos(DocumentosReceberFaixaDiasVencidos documentosReceberFaixaDiasVencidos,
			Usuario usuarioLogado) throws ControladorException{
		
		Date dataAtual = new Date();
		
		FiltroDocumentosReceberFaixaDiasVencidos filtroDocumentosReceberFaixaDiasVencidos = 
				new FiltroDocumentosReceberFaixaDiasVencidos();
		
		filtroDocumentosReceberFaixaDiasVencidos.adicionarParametro(new ParametroSimples(
				FiltroDocumentosReceberFaixaDiasVencidos.ID, documentosReceberFaixaDiasVencidos.getId()));

		Collection documentosReceber = this.getControladorUtil().pesquisar(
				filtroDocumentosReceberFaixaDiasVencidos, DocumentosReceberFaixaDiasVencidos.class.getName());
		
		if(documentosReceber==null){

			this.getControladorUtil().inserir(documentosReceberFaixaDiasVencidos);
		}
		
		this.getControladorUtil().atualizar(documentosReceberFaixaDiasVencidos);

		documentosReceberFaixaDiasVencidos.setUltimaAlteracao(dataAtual);
			
		Integer idDocumentosReceberFaixaDiasVencidos = 
			(Integer) this.getControladorUtil().inserir(documentosReceberFaixaDiasVencidos);
		
		return idDocumentosReceberFaixaDiasVencidos;
		
	}
	
	/**
	 * 
	 * [UC0987] Inserir Faixa de Dias Vencidos para Documentos a Receber
	 * 
	 * Verificar se existe Faixa inicial já cadastrada.
	 * 
	 * @author Hugo Leonardo
	 * @param valorInicialFaixa
	 * @throws ControladorException
	 * @data 22/02/2010
	 * 
	 * @return String
	 */
	public String verificarExistenciaFaixaInicial(Integer valorInicialFaixa)
			throws ControladorException {

		String retorno = "";

		try {
			retorno = repositorioCobranca
					.verificarExistenciaFaixaInicial(valorInicialFaixa);
		} catch (ErroRepositorioException e) {
			e.printStackTrace();
		}

		return retorno;
	}
	
	/**
	 * 
	 * [UC0987] Inserir Faixa de Dias Vencidos para Documentos a Receber
	 * 
	 * Verificar se existe Faixa final já cadastrada.
	 * 
	 * @author Hugo Leonardo
	 * @param  valorFinalFaixa
     * @throws ControladorException 
	 * @data  22/02/2010
	 *
	 * @return Boolean
	 */
	public Boolean verificarExistenciaFaixaFinal(Integer valorFinalFaixa) throws ControladorException {

		Boolean retorno = false;
		Integer quantidade = 0; 
		
		try {
			quantidade = repositorioCobranca
					.verificarExistenciaFaixaFinal(valorFinalFaixa);
		} catch (ErroRepositorioException e) {
			e.printStackTrace();
		}

		if (quantidade.equals(0)) {
			retorno = true;
		}

		return retorno;
	}
	
	
	/**
	 * 
	 * [UC0995] Emitir Declaração Transferencia de Débitos/Dréditos
	 * 
	 * Prepara os beans para o relatório.
	 * 
	 * @author Daniel Alves 
     * @throws ControladorException 
	 * @data  2/03/2010
	 *
	 * @return List<Bean>
	 */
	public Collection<RelatorioEmitirDeclaracaoTransferenciaDebitoBean> gerarRelatorioEmitirDeclaracaoTransferenciaDebitoCredito(String clienteUsuarioDestino,		
	 String clienteUsuarioOrigem, String valorNovaConta, String indicadorTipoEmissao, String municipio)throws ControladorException{
		Collection<RelatorioEmitirDeclaracaoTransferenciaDebitoBean> colecao = new ArrayList();
		RelatorioEmitirDeclaracaoTransferenciaDebitoBean bean = 
			new RelatorioEmitirDeclaracaoTransferenciaDebitoBean();		
		
		bean.setClienteUsuarioDestino(clienteUsuarioDestino);
		bean.setClienteUsuarioOrigem(clienteUsuarioOrigem);
		bean.setValorNovaConta(valorNovaConta);
		bean.setIndicadorTipoEmissao(indicadorTipoEmissao);		
		bean.setDiaMesAno(Util.retornaDataPorExtenso(new Date()));			
		bean.setMunicipio(municipio);
		
		colecao.add(bean);
		return colecao;
	}
   	
	/**
	 * [UC990] Pesquisa Relatório de Documentos a Receber
	 * 
	 * @author Hugo Amorim
	 * @date 22/02/2010
	 * 
	 */
	public Collection pesquisarRelatorioDocumentosAReceber(
			FiltroRelatorioDocumentosAReceberHelper helper)
			throws ControladorException {

		Collection<RelatorioDocumentosAReceberBean> retorno = new ArrayList<RelatorioDocumentosAReceberBean>();
		Collection<RelatorioDocumentosAReceberBean> beansPorLocalidade = new ArrayList<RelatorioDocumentosAReceberBean>();
		Collection<RelatorioDocumentosAReceberBean> beansPorUnidade = new ArrayList<RelatorioDocumentosAReceberBean>();
		Collection<RelatorioDocumentosAReceberBean> beansPorGerencia = new ArrayList<RelatorioDocumentosAReceberBean>();
		Collection<RelatorioDocumentosAReceberBean> beansPorEstado = new ArrayList<RelatorioDocumentosAReceberBean>();
		Collection colecaoDadosLocalidade = null;
		Collection colecaoDadosUnidade = null;
		Collection colecaoDadosGerencia = null;
		Collection colecaoDadosEstado = null;

		try {

			// DADOS PARA CONTROLE DE FLUXO LOCALIDADE
			Integer idGerenciaFluxoLoc = null;
			String nomeGerenciaFluxoLoc = "";
			Integer idUnidadeFluxoLoc = null;
			String nomeUnidadeFluxoLoc = "";
			Integer idLocalidadeFluxoLoc = null;
			String nomeLocalidadeFluxoLoc = "";
			Integer idDocumentoTipoFluxoLoc = null;
			String nomeDocumentoTipoFluxoLoc = "";
			Integer idSituacaoFluxoLoc = null;
			String descricaoFluxoLoc = "";
			String faixaFluxoLoc = "";

			boolean primeiraVezLoc = true;

			// DADOS PARA AGRUPAR DADOS POR TIPO DOCUMENTO
			Integer qtDocumentosPubLoc = new Integer(0);
			BigDecimal valorDocumentosPubLoc = BigDecimal.ZERO;
			Integer qtDocumentosResLoc = new Integer(0);
			BigDecimal valorDocumentosResLoc = BigDecimal.ZERO;
			Integer qtDocumentosComLoc = new Integer(0);
			BigDecimal valorDocumentosComLoc = BigDecimal.ZERO;
			Integer qtDocumentosIndLoc = new Integer(0);
			BigDecimal valorDocumentosIndLoc = BigDecimal.ZERO;
			Integer qtDocumentosPrivadosLoc = new Integer(0);
			BigDecimal valorDocumentosPrivadosLoc = BigDecimal.ZERO;

			// VARIAVEIS PARA ARMAZERNAR DADOS DA PESQUISA
			Integer idCategoriaLoc = null;
			Integer idGerenciaLoc = null;
			String nomeGerenciaLoc = null;
			Integer idUnidadeLoc = null;
			String nomeUnidadeLoc = null;
			Integer idLocalidadeLoc = null;
			String nomeLocalidadeLoc = null;
			Integer idDocumentoTipoLoc = null;
			String nomeDocumentoTipoLoc = null;
			Integer idSituacaoLoc = null;
			String descricaoSituacaoLoc = null;
			String faixaLoc = "";
			Integer qtDocumentosLoc = null;
			BigDecimal valorDocumentosLoc = null;

			// DADOS PARA CONTROLE DE FLUXO UNIDADE
			Integer idGerenciaFluxoUni = null;
			String nomeGerenciaFluxoUni = "";
			Integer idUnidadeFluxoUni = null;
			String nomeUnidadeFluxoUni = "";
			Integer idDocumentoTipoFluxoUni = null;
			String nomeDocumentoTipoFluxoUni = "";
			Integer idSituacaoFluxoUni = null;
			String descricaoFluxoUni = "";
			String faixaFluxoUni = "";

			boolean primeiraVezUni = true;

			// DADOS PARA AGRUPAR DADOS POR TIPO DOCUMENTO
			Integer qtDocumentosPubUni = new Integer(0);
			BigDecimal valorDocumentosPubUni = BigDecimal.ZERO;
			Integer qtDocumentosResUni = new Integer(0);
			BigDecimal valorDocumentosResUni = BigDecimal.ZERO;
			Integer qtDocumentosComUni = new Integer(0);
			BigDecimal valorDocumentosComUni = BigDecimal.ZERO;
			Integer qtDocumentosIndUni = new Integer(0);
			BigDecimal valorDocumentosIndUni = BigDecimal.ZERO;
			Integer qtDocumentosPrivadosUni = new Integer(0);
			BigDecimal valorDocumentosPrivadosUni = BigDecimal.ZERO;

			// VARIAVEIS PARA ARMAZERNAR DADOS DA PESQUISA
			Integer idCategoriaUni = null;
			Integer idGerenciaUni = null;
			String nomeGerenciaUni = null;
			Integer idUnidadeUni = null;
			String nomeUnidadeUni = null;
			Integer idDocumentoTipoUni = null;
			String nomeDocumentoTipoUni = null;
			Integer idSituacaoUni = null;
			String descricaoSituacaoUni = null;
			String faixaUni = "";
			Integer qtDocumentosUni = null;
			BigDecimal valorDocumentosUni = null;

			// DADOS PARA CONTROLE DE FLUXO GERENCIA
			Integer idGerenciaFluxoGer = null;
			String nomeGerenciaFluxoGer = "";
			Integer idDocumentoTipoFluxoGer = null;
			String nomeDocumentoTipoFluxoGer = "";
			Integer idSituacaoFluxoGer = null;
			String descricaoFluxoGer = "";
			String faixaFluxoGer = "";

			boolean primeiraVezGer = true;

			// DADOS PARA AGRUPAR DADOS POR TIPO DOCUMENTO
			Integer qtDocumentosPubGer = new Integer(0);
			BigDecimal valorDocumentosPubGer = BigDecimal.ZERO;
			Integer qtDocumentosResGer = new Integer(0);
			BigDecimal valorDocumentosResGer = BigDecimal.ZERO;
			Integer qtDocumentosComGer = new Integer(0);
			BigDecimal valorDocumentosComGer = BigDecimal.ZERO;
			Integer qtDocumentosIndGer = new Integer(0);
			BigDecimal valorDocumentosIndGer = BigDecimal.ZERO;
			Integer qtDocumentosPrivadosGer = new Integer(0);
			BigDecimal valorDocumentosPrivadosGer = BigDecimal.ZERO;

			// VARIAVEIS PARA ARMAZERNAR DADOS DA PESQUISA
			Integer idCategoriaGer = null;
			Integer idGerenciaGer = null;
			String nomeGerenciaGer = null;
			Integer idDocumentoTipoGer = null;
			String nomeDocumentoTipoGer = null;
			Integer idSituacaoGer = null;
			String descricaoSituacaoGer = null;
			String faixaGer = "";
			Integer qtDocumentosGer = null;
			BigDecimal valorDocumentosGer = null;

			// DADOS PARA CONTROLE DE FLUXO ESTADO
			Integer idDocumentoTipoFluxoEst = null;
			String nomeDocumentoTipoFluxoEst = "";
			Integer idSituacaoFluxoEst = null;
			String descricaoFluxoEst = "";
			String faixaFluxoEst = "";

			boolean primeiraVezEst = true;

			// DADOS PARA AGRUPAR DADOS POR TIPO DOCUMENTO
			Integer qtDocumentosPubEst = new Integer(0);
			BigDecimal valorDocumentosPubEst = BigDecimal.ZERO;
			Integer qtDocumentosResEst = new Integer(0);
			BigDecimal valorDocumentosResEst = BigDecimal.ZERO;
			Integer qtDocumentosComEst = new Integer(0);
			BigDecimal valorDocumentosComEst = BigDecimal.ZERO;
			Integer qtDocumentosIndEst = new Integer(0);
			BigDecimal valorDocumentosIndEst = BigDecimal.ZERO;
			Integer qtDocumentosPrivadosEst = new Integer(0);
			BigDecimal valorDocumentosPrivadosEst = BigDecimal.ZERO;

			// VARIAVEIS PARA ARMAZERNAR DADOS DA PESQUISA
			Integer idCategoriaEst = null;
			Integer idDocumentoTipoEst = null;
			String nomeDocumentoTipoEst = null;
			Integer idSituacaoEst = null;
			String descricaoSituacaoEst = null;
			String faixaEst = "";
			Integer qtDocumentosEst = null;
			BigDecimal valorDocumentosEst = null;

			RelatorioDocumentosAReceberBean bean = null;

			// Variáveis para a paginação da pesquisa
			// ========================================================================
			boolean flagTerminouLoc = false;
			boolean flagTerminouUni = false;
			boolean flagTerminouGer = false;
			boolean flagTerminouEst = false;
			final int quantidadeMaxima = 1000;
			int quantidadeInicio = 0;
			// ========================================================================

			while (!flagTerminouLoc || !flagTerminouUni || !flagTerminouGer
					|| !flagTerminouEst) {

				// REALIZA PESQUISA CASO TIPO DE TOTALIZAÇÃO SEJA:

				// Gerência Regional por Localidade
				// Unidade de Negócio por Localidade
				// Localidade
				if (!flagTerminouLoc) {
					if (helper.getIdOpcaoTotalizacao().equals("4")
							|| helper.getIdOpcaoTotalizacao().equals("5")
							|| helper.getIdOpcaoTotalizacao().equals("7")
							|| helper.getIdOpcaoTotalizacao().equals("9")
							|| helper.getIdOpcaoTotalizacao().equals("10")) {

						colecaoDadosLocalidade = repositorioCobranca
								.pesquisarRelatorioDocumentosAReceber(helper,
										"LOCALIDADE", quantidadeInicio,
										quantidadeMaxima);
					}
				}
				// Estado por Unidade de Negócio
				// Estado por Unidade de Negócio e por Localidade
				// Unidade de Negócio
				// Unidade de Negócio por Localidade
				if (!flagTerminouUni) {
					if (helper.getIdOpcaoTotalizacao().equals("3")
							|| helper.getIdOpcaoTotalizacao().equals("5")
							|| helper.getIdOpcaoTotalizacao().equals("8")
							|| helper.getIdOpcaoTotalizacao().equals("9")) {

						colecaoDadosUnidade = repositorioCobranca
								.pesquisarRelatorioDocumentosAReceber(helper,
										"UNIDADE", quantidadeInicio,
										quantidadeMaxima);
					}
				}
				// Estado
				// Estado por Gerência Regional
				// Estado por Unidade de Negócio
				// Estado por Gerência Regional e por Localidade
				// Estado por Unidade de Negócio e por Localidade
				// Gerência Regional
				// Gerência Regional por Localidade
				if (!flagTerminouGer) {
					if (helper.getIdOpcaoTotalizacao().equals("2")
							|| helper.getIdOpcaoTotalizacao().equals("4")
							|| helper.getIdOpcaoTotalizacao().equals("6")
							|| helper.getIdOpcaoTotalizacao().equals("7")) {

						colecaoDadosGerencia = repositorioCobranca
								.pesquisarRelatorioDocumentosAReceber(helper,
										"GERENCIA", quantidadeInicio,
										quantidadeMaxima);
					}
				}
				// Estado
				// Estado por Gerência Regional e por Localidade
				// Estado por Unidade de Negócio e por Localidade
				// Estado por Unidade de Negócio
				// Estado por Unidade de Negócio e por Localidade
				if (!flagTerminouEst) {
					if (helper.getIdOpcaoTotalizacao().equals("1")
							|| helper.getIdOpcaoTotalizacao().equals("2")
							|| helper.getIdOpcaoTotalizacao().equals("3")
							|| helper.getIdOpcaoTotalizacao().equals("4")
							|| helper.getIdOpcaoTotalizacao().equals("5")) {

						colecaoDadosEstado = repositorioCobranca
								.pesquisarRelatorioDocumentosAReceber(helper,
										"ESTADO", quantidadeInicio,
										quantidadeMaxima);
					}
				}

				if (colecaoDadosLocalidade != null) {
					// GERAR DADOS DAS LOCALIDADES
					for (Iterator iterator = colecaoDadosLocalidade.iterator(); iterator
							.hasNext();) {

						Object[] dados = null;

						dados = (Object[]) iterator.next();

						// Dados Pesquisa
						idCategoriaLoc = (Integer) dados[0];
						idGerenciaLoc = (Integer) dados[2];
						nomeGerenciaLoc = (String) dados[3];
						idUnidadeLoc = (Integer) dados[4];
						nomeUnidadeLoc = (String) dados[5];
						idLocalidadeLoc = (Integer) dados[6];
						nomeLocalidadeLoc = (String) dados[7];
						idDocumentoTipoLoc = (Integer) dados[8];
						nomeDocumentoTipoLoc = (String) dados[9];
						idSituacaoLoc = (Integer) dados[10];
						descricaoSituacaoLoc = (String) dados[11];
						faixaLoc = (String) dados[12];

						if (!faixaLoc.equals("0")) {
							// Verifica se a faixa não existia na base,
							// caso seja verdadeiro atribui descrição da
							// faixa correspondente informada no filtro

							for (FaixaHelper faixaHelper : helper
									.getColecaoFaixas()) {
								Integer qtdDias = new Integer(faixaLoc);

								if (qtdDias.compareTo(faixaHelper
										.getValorInicial()) >= 0
										&& qtdDias.compareTo(faixaHelper
												.getValorFinal()) <= 0) {
									faixaLoc = faixaHelper.getDescricao();
									break;
								}

							}
						} else {
							faixaLoc = "A VENCER";
						}

						qtDocumentosLoc = (Integer) dados[13];
						valorDocumentosLoc = (BigDecimal) dados[14];

						if (primeiraVezLoc) {

							idGerenciaFluxoLoc = idGerenciaLoc;
							nomeGerenciaFluxoLoc = nomeGerenciaLoc;
							idUnidadeFluxoLoc = idUnidadeLoc;
							nomeUnidadeFluxoLoc = nomeUnidadeLoc;
							idLocalidadeFluxoLoc = idLocalidadeLoc;
							nomeLocalidadeFluxoLoc = nomeLocalidadeLoc;
							idSituacaoFluxoLoc = idSituacaoLoc;
							idDocumentoTipoFluxoLoc = idDocumentoTipoLoc;
							nomeDocumentoTipoFluxoLoc = nomeDocumentoTipoLoc;
							faixaFluxoLoc = faixaLoc;
							descricaoFluxoLoc = descricaoSituacaoLoc;

							primeiraVezLoc = false;
						}

						// SE TODOS OS DADOS FOREM IGUAIS
						// ACUMULA DOCUMENTO TIPO
						if (idGerenciaFluxoLoc.intValue() == idGerenciaLoc
								.intValue()
								&& idUnidadeFluxoLoc.intValue() == idUnidadeLoc
										.intValue()
								&& idLocalidadeFluxoLoc.intValue() == idLocalidadeLoc
										.intValue()
								&& idSituacaoFluxoLoc.intValue() == idSituacaoLoc
										.intValue()
								&& faixaFluxoLoc.equals(faixaLoc)
								&& idDocumentoTipoFluxoLoc.intValue() == idDocumentoTipoLoc
										.intValue()) {

							// TOTAL DO TIPO DOCUMENTO
							if (idCategoriaLoc.compareTo(Categoria.RESIDENCIAL) == 0) {
								qtDocumentosResLoc += qtDocumentosLoc;
								valorDocumentosResLoc = Util.somaBigDecimal(
										valorDocumentosResLoc,
										valorDocumentosLoc);
								qtDocumentosPrivadosLoc += qtDocumentosLoc;
								valorDocumentosPrivadosLoc = Util
										.somaBigDecimal(
												valorDocumentosPrivadosLoc,
												valorDocumentosLoc);
							}
							if (idCategoriaLoc.compareTo(Categoria.COMERCIAL) == 0) {
								qtDocumentosComLoc += qtDocumentosLoc;
								valorDocumentosComLoc = Util.somaBigDecimal(
										valorDocumentosComLoc,
										valorDocumentosLoc);
								qtDocumentosPrivadosLoc += qtDocumentosLoc;
								valorDocumentosPrivadosLoc = Util
										.somaBigDecimal(
												valorDocumentosPrivadosLoc,
												valorDocumentosLoc);
							}
							if (idCategoriaLoc.compareTo(Categoria.INDUSTRIAL) == 0) {
								qtDocumentosIndLoc += qtDocumentosLoc;
								valorDocumentosIndLoc = Util.somaBigDecimal(
										valorDocumentosIndLoc,
										valorDocumentosLoc);
								qtDocumentosPrivadosLoc += qtDocumentosLoc;
								valorDocumentosPrivadosLoc = Util
										.somaBigDecimal(
												valorDocumentosPrivadosLoc,
												valorDocumentosLoc);
							}
							if (idCategoriaLoc.compareTo(Categoria.PUBLICO) == 0) {
								qtDocumentosPubLoc += qtDocumentosLoc;
								valorDocumentosPubLoc = Util.somaBigDecimal(
										valorDocumentosPubLoc,
										valorDocumentosLoc);
							}

						} else {

							if (idLocalidadeFluxoLoc.intValue() == idLocalidadeLoc
									.intValue()) {

								if (idSituacaoFluxoLoc.intValue() == idSituacaoLoc
										.intValue()) {

									if (faixaFluxoLoc.equals(faixaLoc)) {

										if (idDocumentoTipoFluxoLoc.intValue() != idDocumentoTipoLoc
												.intValue()) {

											bean = criarBeanRelatorioDocumentosAReceber(
													idGerenciaFluxoLoc,
													nomeGerenciaFluxoLoc,
													idUnidadeFluxoLoc,
													nomeUnidadeFluxoLoc,
													idLocalidadeFluxoLoc,
													nomeLocalidadeFluxoLoc,
													idDocumentoTipoFluxoLoc,
													nomeDocumentoTipoFluxoLoc,
													idSituacaoFluxoLoc,
													descricaoFluxoLoc,
													qtDocumentosResLoc,
													valorDocumentosResLoc,
													qtDocumentosComLoc,
													valorDocumentosComLoc,
													qtDocumentosIndLoc,
													valorDocumentosIndLoc,
													qtDocumentosPrivadosLoc,
													valorDocumentosPrivadosLoc,
													qtDocumentosPubLoc,
													valorDocumentosPubLoc,
													"LOCALIDADE - "
															+ nomeLocalidadeFluxoLoc,
													ConstantesSistema.NAO
															.toString(),
													faixaFluxoLoc);

											beansPorLocalidade.add(bean);

											// Reiniciando valores e mudando
											// variaveis de controle de fluxo
											qtDocumentosPubLoc = new Integer(0);
											valorDocumentosPubLoc = BigDecimal.ZERO;
											qtDocumentosResLoc = new Integer(0);
											valorDocumentosResLoc = BigDecimal.ZERO;
											qtDocumentosComLoc = new Integer(0);
											valorDocumentosComLoc = BigDecimal.ZERO;
											qtDocumentosIndLoc = new Integer(0);
											valorDocumentosIndLoc = BigDecimal.ZERO;
											qtDocumentosPrivadosLoc = new Integer(
													0);
											valorDocumentosPrivadosLoc = BigDecimal.ZERO;

											idGerenciaFluxoLoc = idGerenciaLoc;
											nomeGerenciaFluxoLoc = nomeGerenciaLoc;
											idUnidadeFluxoLoc = idUnidadeLoc;
											nomeUnidadeFluxoLoc = nomeUnidadeLoc;
											idLocalidadeFluxoLoc = idLocalidadeLoc;
											nomeLocalidadeFluxoLoc = nomeLocalidadeLoc;
											idSituacaoFluxoLoc = idSituacaoLoc;
											idDocumentoTipoFluxoLoc = idDocumentoTipoLoc;
											nomeDocumentoTipoFluxoLoc = nomeDocumentoTipoLoc;
											faixaFluxoLoc = faixaLoc;
											descricaoFluxoLoc = descricaoSituacaoLoc;

											// TOTAL DO TIPO DOCUMENTO
											if (idCategoriaLoc
													.compareTo(Categoria.RESIDENCIAL) == 0) {
												qtDocumentosResLoc += qtDocumentosLoc;
												valorDocumentosResLoc = Util
														.somaBigDecimal(
																valorDocumentosResLoc,
																valorDocumentosLoc);
												qtDocumentosPrivadosLoc += qtDocumentosLoc;
												valorDocumentosPrivadosLoc = Util
														.somaBigDecimal(
																valorDocumentosPrivadosLoc,
																valorDocumentosLoc);
											}
											if (idCategoriaLoc
													.compareTo(Categoria.COMERCIAL) == 0) {
												qtDocumentosComLoc += qtDocumentosLoc;
												valorDocumentosComLoc = Util
														.somaBigDecimal(
																valorDocumentosComLoc,
																valorDocumentosLoc);
												qtDocumentosPrivadosLoc += qtDocumentosLoc;
												valorDocumentosPrivadosLoc = Util
														.somaBigDecimal(
																valorDocumentosPrivadosLoc,
																valorDocumentosLoc);
											}
											if (idCategoriaLoc
													.compareTo(Categoria.INDUSTRIAL) == 0) {
												qtDocumentosIndLoc += qtDocumentosLoc;
												valorDocumentosIndLoc = Util
														.somaBigDecimal(
																valorDocumentosIndLoc,
																valorDocumentosLoc);
												qtDocumentosPrivadosLoc += qtDocumentosLoc;
												valorDocumentosPrivadosLoc = Util
														.somaBigDecimal(
																valorDocumentosPrivadosLoc,
																valorDocumentosLoc);
											}
											if (idCategoriaLoc
													.compareTo(Categoria.PUBLICO) == 0) {
												qtDocumentosPubLoc += qtDocumentosLoc;
												valorDocumentosPubLoc = Util
														.somaBigDecimal(
																valorDocumentosPubLoc,
																valorDocumentosLoc);
											}
										}
									} else {
										bean = criarBeanRelatorioDocumentosAReceber(
												idGerenciaFluxoLoc,
												nomeGerenciaFluxoLoc,
												idUnidadeFluxoLoc,
												nomeUnidadeFluxoLoc,
												idLocalidadeFluxoLoc,
												nomeLocalidadeFluxoLoc,
												idDocumentoTipoFluxoLoc,
												nomeDocumentoTipoFluxoLoc,
												idSituacaoFluxoLoc,
												descricaoFluxoLoc,
												qtDocumentosResLoc,
												valorDocumentosResLoc,
												qtDocumentosComLoc,
												valorDocumentosComLoc,
												qtDocumentosIndLoc,
												valorDocumentosIndLoc,
												qtDocumentosPrivadosLoc,
												valorDocumentosPrivadosLoc,
												qtDocumentosPubLoc,
												valorDocumentosPubLoc,
												"LOCALIDADE - "
														+ nomeLocalidadeFluxoLoc,
												ConstantesSistema.NAO
														.toString(),
												faixaFluxoLoc);

										beansPorLocalidade.add(bean);

										// Reiniciando valores e mudando
										// variaveis de controle de fluxo
										qtDocumentosPubLoc = new Integer(0);
										valorDocumentosPubLoc = BigDecimal.ZERO;
										qtDocumentosResLoc = new Integer(0);
										valorDocumentosResLoc = BigDecimal.ZERO;
										qtDocumentosComLoc = new Integer(0);
										valorDocumentosComLoc = BigDecimal.ZERO;
										qtDocumentosIndLoc = new Integer(0);
										valorDocumentosIndLoc = BigDecimal.ZERO;
										qtDocumentosPrivadosLoc = new Integer(0);
										valorDocumentosPrivadosLoc = BigDecimal.ZERO;

										idGerenciaFluxoLoc = idGerenciaLoc;
										nomeGerenciaFluxoLoc = nomeGerenciaLoc;
										idUnidadeFluxoLoc = idUnidadeLoc;
										nomeUnidadeFluxoLoc = nomeUnidadeLoc;
										idLocalidadeFluxoLoc = idLocalidadeLoc;
										nomeLocalidadeFluxoLoc = nomeLocalidadeLoc;
										idSituacaoFluxoLoc = idSituacaoLoc;
										idDocumentoTipoFluxoLoc = idDocumentoTipoLoc;
										nomeDocumentoTipoFluxoLoc = nomeDocumentoTipoLoc;
										faixaFluxoLoc = faixaLoc;
										descricaoFluxoLoc = descricaoSituacaoLoc;

										// TOTAL DO TIPO DOCUMENTO
										if (idCategoriaLoc
												.compareTo(Categoria.RESIDENCIAL) == 0) {
											qtDocumentosResLoc += qtDocumentosLoc;
											valorDocumentosResLoc = Util
													.somaBigDecimal(
															valorDocumentosResLoc,
															valorDocumentosLoc);
											qtDocumentosPrivadosLoc += qtDocumentosLoc;
											valorDocumentosPrivadosLoc = Util
													.somaBigDecimal(
															valorDocumentosPrivadosLoc,
															valorDocumentosLoc);
										}
										if (idCategoriaLoc
												.compareTo(Categoria.COMERCIAL) == 0) {
											qtDocumentosComLoc += qtDocumentosLoc;
											valorDocumentosComLoc = Util
													.somaBigDecimal(
															valorDocumentosComLoc,
															valorDocumentosLoc);
											qtDocumentosPrivadosLoc += qtDocumentosLoc;
											valorDocumentosPrivadosLoc = Util
													.somaBigDecimal(
															valorDocumentosPrivadosLoc,
															valorDocumentosLoc);
										}
										if (idCategoriaLoc
												.compareTo(Categoria.INDUSTRIAL) == 0) {
											qtDocumentosIndLoc += qtDocumentosLoc;
											valorDocumentosIndLoc = Util
													.somaBigDecimal(
															valorDocumentosIndLoc,
															valorDocumentosLoc);
											qtDocumentosPrivadosLoc += qtDocumentosLoc;
											valorDocumentosPrivadosLoc = Util
													.somaBigDecimal(
															valorDocumentosPrivadosLoc,
															valorDocumentosLoc);
										}
										if (idCategoriaLoc
												.compareTo(Categoria.PUBLICO) == 0) {
											qtDocumentosPubLoc += qtDocumentosLoc;
											valorDocumentosPubLoc = Util
													.somaBigDecimal(
															valorDocumentosPubLoc,
															valorDocumentosLoc);
										}
									}
								} else {

									bean = criarBeanRelatorioDocumentosAReceber(
											idGerenciaFluxoLoc,
											nomeGerenciaFluxoLoc,
											idUnidadeFluxoLoc,
											nomeUnidadeFluxoLoc,
											idLocalidadeFluxoLoc,
											nomeLocalidadeFluxoLoc,
											idDocumentoTipoFluxoLoc,
											nomeDocumentoTipoFluxoLoc,
											idSituacaoFluxoLoc,
											descricaoFluxoLoc,
											qtDocumentosResLoc,
											valorDocumentosResLoc,
											qtDocumentosComLoc,
											valorDocumentosComLoc,
											qtDocumentosIndLoc,
											valorDocumentosIndLoc,
											qtDocumentosPrivadosLoc,
											valorDocumentosPrivadosLoc,
											qtDocumentosPubLoc,
											valorDocumentosPubLoc,
											"LOCALIDADE - "
													+ nomeLocalidadeFluxoLoc,
											ConstantesSistema.SIM.toString(),
											faixaFluxoLoc);

									beansPorLocalidade.add(bean);

									// Reiniciando valores e mudando
									// variaveis de controle de fluxo
									qtDocumentosPubLoc = new Integer(0);
									valorDocumentosPubLoc = BigDecimal.ZERO;
									qtDocumentosResLoc = new Integer(0);
									valorDocumentosResLoc = BigDecimal.ZERO;
									qtDocumentosComLoc = new Integer(0);
									valorDocumentosComLoc = BigDecimal.ZERO;
									qtDocumentosIndLoc = new Integer(0);
									valorDocumentosIndLoc = BigDecimal.ZERO;
									qtDocumentosPrivadosLoc = new Integer(0);
									valorDocumentosPrivadosLoc = BigDecimal.ZERO;

									idGerenciaFluxoLoc = idGerenciaLoc;
									nomeGerenciaFluxoLoc = nomeGerenciaLoc;
									idUnidadeFluxoLoc = idUnidadeLoc;
									nomeUnidadeFluxoLoc = nomeUnidadeLoc;
									idLocalidadeFluxoLoc = idLocalidadeLoc;
									nomeLocalidadeFluxoLoc = nomeLocalidadeLoc;
									idSituacaoFluxoLoc = idSituacaoLoc;
									idDocumentoTipoFluxoLoc = idDocumentoTipoLoc;
									nomeDocumentoTipoFluxoLoc = nomeDocumentoTipoLoc;
									faixaFluxoLoc = faixaLoc;
									descricaoFluxoLoc = descricaoSituacaoLoc;

									// TOTAL DO TIPO DOCUMENTO
									if (idCategoriaLoc
											.compareTo(Categoria.RESIDENCIAL) == 0) {
										qtDocumentosResLoc += qtDocumentosLoc;
										valorDocumentosResLoc = Util
												.somaBigDecimal(
														valorDocumentosResLoc,
														valorDocumentosLoc);
										qtDocumentosPrivadosLoc += qtDocumentosLoc;
										valorDocumentosPrivadosLoc = Util
												.somaBigDecimal(
														valorDocumentosPrivadosLoc,
														valorDocumentosLoc);
									}
									if (idCategoriaLoc
											.compareTo(Categoria.COMERCIAL) == 0) {
										qtDocumentosComLoc += qtDocumentosLoc;
										valorDocumentosComLoc = Util
												.somaBigDecimal(
														valorDocumentosComLoc,
														valorDocumentosLoc);
										qtDocumentosPrivadosLoc += qtDocumentosLoc;
										valorDocumentosPrivadosLoc = Util
												.somaBigDecimal(
														valorDocumentosPrivadosLoc,
														valorDocumentosLoc);
									}
									if (idCategoriaLoc
											.compareTo(Categoria.INDUSTRIAL) == 0) {
										qtDocumentosIndLoc += qtDocumentosLoc;
										valorDocumentosIndLoc = Util
												.somaBigDecimal(
														valorDocumentosIndLoc,
														valorDocumentosLoc);
										qtDocumentosPrivadosLoc += qtDocumentosLoc;
										valorDocumentosPrivadosLoc = Util
												.somaBigDecimal(
														valorDocumentosPrivadosLoc,
														valorDocumentosLoc);
									}
									if (idCategoriaLoc
											.compareTo(Categoria.PUBLICO) == 0) {
										qtDocumentosPubLoc += qtDocumentosLoc;
										valorDocumentosPubLoc = Util
												.somaBigDecimal(
														valorDocumentosPubLoc,
														valorDocumentosLoc);
									}
								}

							} else {

								bean = criarBeanRelatorioDocumentosAReceber(
										idGerenciaFluxoLoc,
										nomeGerenciaFluxoLoc,
										idUnidadeFluxoLoc, nomeUnidadeFluxoLoc,
										idLocalidadeFluxoLoc,
										nomeLocalidadeFluxoLoc,
										idDocumentoTipoFluxoLoc,
										nomeDocumentoTipoFluxoLoc,
										idSituacaoFluxoLoc, descricaoFluxoLoc,
										qtDocumentosResLoc,
										valorDocumentosResLoc,
										qtDocumentosComLoc,
										valorDocumentosComLoc,
										qtDocumentosIndLoc,
										valorDocumentosIndLoc,
										qtDocumentosPrivadosLoc,
										valorDocumentosPrivadosLoc,
										qtDocumentosPubLoc,
										valorDocumentosPubLoc, "LOCALIDADE - "
												+ nomeLocalidadeFluxoLoc,
										ConstantesSistema.NAO.toString(),
										faixaFluxoLoc);

								beansPorLocalidade.add(bean);

								// Reiniciando valores e mudando
								// variaveis de controle de fluxo
								qtDocumentosPubLoc = new Integer(0);
								valorDocumentosPubLoc = BigDecimal.ZERO;
								qtDocumentosResLoc = new Integer(0);
								valorDocumentosResLoc = BigDecimal.ZERO;
								qtDocumentosComLoc = new Integer(0);
								valorDocumentosComLoc = BigDecimal.ZERO;
								qtDocumentosIndLoc = new Integer(0);
								valorDocumentosIndLoc = BigDecimal.ZERO;
								qtDocumentosPrivadosLoc = new Integer(0);
								valorDocumentosPrivadosLoc = BigDecimal.ZERO;

								idGerenciaFluxoLoc = idGerenciaLoc;
								nomeGerenciaFluxoLoc = nomeGerenciaLoc;
								idUnidadeFluxoLoc = idUnidadeLoc;
								nomeUnidadeFluxoLoc = nomeUnidadeLoc;
								idLocalidadeFluxoLoc = idLocalidadeLoc;
								nomeLocalidadeFluxoLoc = nomeLocalidadeLoc;
								idSituacaoFluxoLoc = idSituacaoLoc;
								idDocumentoTipoFluxoLoc = idDocumentoTipoLoc;
								nomeDocumentoTipoFluxoLoc = nomeDocumentoTipoLoc;
								faixaFluxoLoc = faixaLoc;
								descricaoFluxoLoc = descricaoSituacaoLoc;

								// TOTAL DO TIPO DOCUMENTO
								if (idCategoriaLoc
										.compareTo(Categoria.RESIDENCIAL) == 0) {
									qtDocumentosResLoc += qtDocumentosLoc;
									valorDocumentosResLoc = Util
											.somaBigDecimal(
													valorDocumentosResLoc,
													valorDocumentosLoc);
									qtDocumentosPrivadosLoc += qtDocumentosLoc;
									valorDocumentosPrivadosLoc = Util
											.somaBigDecimal(
													valorDocumentosPrivadosLoc,
													valorDocumentosLoc);
								}
								if (idCategoriaLoc
										.compareTo(Categoria.COMERCIAL) == 0) {
									qtDocumentosComLoc += qtDocumentosLoc;
									valorDocumentosComLoc = Util
											.somaBigDecimal(
													valorDocumentosComLoc,
													valorDocumentosLoc);
									qtDocumentosPrivadosLoc += qtDocumentosLoc;
									valorDocumentosPrivadosLoc = Util
											.somaBigDecimal(
													valorDocumentosPrivadosLoc,
													valorDocumentosLoc);
								}
								if (idCategoriaLoc
										.compareTo(Categoria.INDUSTRIAL) == 0) {
									qtDocumentosIndLoc += qtDocumentosLoc;
									valorDocumentosIndLoc = Util
											.somaBigDecimal(
													valorDocumentosIndLoc,
													valorDocumentosLoc);
									qtDocumentosPrivadosLoc += qtDocumentosLoc;
									valorDocumentosPrivadosLoc = Util
											.somaBigDecimal(
													valorDocumentosPrivadosLoc,
													valorDocumentosLoc);
								}
								if (idCategoriaLoc.compareTo(Categoria.PUBLICO) == 0) {
									qtDocumentosPubLoc += qtDocumentosLoc;
									valorDocumentosPubLoc = Util
											.somaBigDecimal(
													valorDocumentosPubLoc,
													valorDocumentosLoc);
								}

							}
						}

						if (colecaoDadosLocalidade.size() < quantidadeMaxima) {

							if (!iterator.hasNext()) {
								bean = criarBeanRelatorioDocumentosAReceber(
										idGerenciaFluxoLoc,
										nomeGerenciaFluxoLoc,
										idUnidadeFluxoLoc, nomeUnidadeFluxoLoc,
										idLocalidadeFluxoLoc,
										nomeLocalidadeFluxoLoc,
										idDocumentoTipoFluxoLoc,
										nomeDocumentoTipoFluxoLoc,
										idSituacaoFluxoLoc, descricaoFluxoLoc,
										qtDocumentosResLoc,
										valorDocumentosResLoc,
										qtDocumentosComLoc,
										valorDocumentosComLoc,
										qtDocumentosIndLoc,
										valorDocumentosIndLoc,
										qtDocumentosPrivadosLoc,
										valorDocumentosPrivadosLoc,
										qtDocumentosPubLoc,
										valorDocumentosPubLoc, "LOCALIDADE - "
												+ nomeLocalidadeFluxoLoc,
										ConstantesSistema.NAO.toString(),
										faixaFluxoLoc);

								beansPorLocalidade.add(bean);
							}

						}
					}
				}

				bean = null;

				if (colecaoDadosUnidade != null) {
					// GERAR DADOS DAS UNIDADES
					for (Iterator iterator = colecaoDadosUnidade.iterator(); iterator
							.hasNext();) {

						Object[] dados = null;

						dados = (Object[]) iterator.next();

						// Dados Pesquisa
						idCategoriaUni = (Integer) dados[0];
						idGerenciaUni = (Integer) dados[2];
						nomeGerenciaUni = (String) dados[3];
						idUnidadeUni = (Integer) dados[4];
						nomeUnidadeUni = (String) dados[5];
						idDocumentoTipoUni = (Integer) dados[6];
						nomeDocumentoTipoUni = (String) dados[7];
						idSituacaoUni = (Integer) dados[8];
						descricaoSituacaoUni = (String) dados[9];
						faixaUni = (String) dados[10];

						if (!faixaUni.equals("0")) {
							// Verifica se a faixa não existia na base,
							// caso seja verdadeiro atribui descrição da
							// faixa correspondente informada no filtro

							for (FaixaHelper faixaHelper : helper
									.getColecaoFaixas()) {
								Integer qtdDias = new Integer(faixaUni);

								if (qtdDias.compareTo(faixaHelper
										.getValorInicial()) >= 0
										&& qtdDias.compareTo(faixaHelper
												.getValorFinal()) <= 0) {
									faixaUni = faixaHelper.getDescricao();
									break;
								}

							}
						} else {
							faixaUni = "A VENCER";
						}

						qtDocumentosUni = (Integer) dados[11];
						valorDocumentosUni = (BigDecimal) dados[12];

						if (primeiraVezUni) {

							idGerenciaFluxoUni = idGerenciaUni;
							nomeGerenciaFluxoUni = nomeGerenciaUni;
							idUnidadeFluxoUni = idUnidadeUni;
							nomeUnidadeFluxoUni = nomeUnidadeUni;
							idSituacaoFluxoUni = idSituacaoUni;
							idDocumentoTipoFluxoUni = idDocumentoTipoUni;
							nomeDocumentoTipoFluxoUni = nomeDocumentoTipoUni;
							faixaFluxoUni = faixaUni;

							descricaoFluxoUni = descricaoSituacaoUni;

							primeiraVezUni = false;
						}

						// SE TODOS OS DADOS FOREM IGUAIS
						// ACUMULA DOCUMENTO TIPO
						if (idGerenciaFluxoUni.intValue() == idGerenciaUni
								.intValue()
								&& idUnidadeFluxoUni.intValue() == idUnidadeUni
										.intValue()
								&& idSituacaoFluxoUni.intValue() == idSituacaoUni
										.intValue()
								&& faixaFluxoUni.equals(faixaUni)
								&& idDocumentoTipoFluxoUni.intValue() == idDocumentoTipoUni
										.intValue()) {

							// TOTAL DO TIPO DOCUMENTO
							if (idCategoriaUni.compareTo(Categoria.RESIDENCIAL) == 0) {
								qtDocumentosResUni += qtDocumentosUni;
								valorDocumentosResUni = Util.somaBigDecimal(
										valorDocumentosResUni,
										valorDocumentosUni);
								qtDocumentosPrivadosUni += qtDocumentosUni;
								valorDocumentosPrivadosUni = Util
										.somaBigDecimal(
												valorDocumentosPrivadosUni,
												valorDocumentosUni);
							}
							if (idCategoriaUni.compareTo(Categoria.COMERCIAL) == 0) {
								qtDocumentosComUni += qtDocumentosUni;
								valorDocumentosComUni = Util.somaBigDecimal(
										valorDocumentosComUni,
										valorDocumentosUni);
								qtDocumentosPrivadosUni += qtDocumentosUni;
								valorDocumentosPrivadosUni = Util
										.somaBigDecimal(
												valorDocumentosPrivadosUni,
												valorDocumentosUni);
							}
							if (idCategoriaUni.compareTo(Categoria.INDUSTRIAL) == 0) {
								qtDocumentosIndUni += qtDocumentosUni;
								valorDocumentosIndUni = Util.somaBigDecimal(
										valorDocumentosIndUni,
										valorDocumentosUni);
								qtDocumentosPrivadosUni += qtDocumentosUni;
								valorDocumentosPrivadosUni = Util
										.somaBigDecimal(
												valorDocumentosPrivadosUni,
												valorDocumentosUni);
							}
							if (idCategoriaUni.compareTo(Categoria.PUBLICO) == 0) {
								qtDocumentosPubUni += qtDocumentosUni;
								valorDocumentosPubUni = Util.somaBigDecimal(
										valorDocumentosPubUni,
										valorDocumentosUni);
							}

						} else {

							if (idUnidadeFluxoUni.intValue() == idUnidadeUni
									.intValue()) {

								if (idSituacaoFluxoUni.intValue() == idSituacaoUni
										.intValue()) {

									if (faixaFluxoUni.equals(faixaUni)) {

										if (idDocumentoTipoFluxoUni.intValue() != idDocumentoTipoUni
												.intValue()) {

											bean = criarBeanRelatorioDocumentosAReceber(
													idGerenciaFluxoUni,
													nomeGerenciaFluxoUni,
													idUnidadeFluxoUni,
													nomeUnidadeFluxoUni,
													null,
													null,
													idDocumentoTipoFluxoUni,
													nomeDocumentoTipoFluxoUni,
													idSituacaoFluxoUni,
													descricaoFluxoUni,
													qtDocumentosResUni,
													valorDocumentosResUni,
													qtDocumentosComUni,
													valorDocumentosComUni,
													qtDocumentosIndUni,
													valorDocumentosIndUni,
													qtDocumentosPrivadosUni,
													valorDocumentosPrivadosUni,
													qtDocumentosPubUni,
													valorDocumentosPubUni,
													"UNIDADE - "
															+ nomeUnidadeFluxoUni,
													ConstantesSistema.NAO
															.toString(),
													faixaFluxoUni);

											beansPorUnidade.add(bean);

											// Reiniciando valores e mudando
											// variaveis de controle de fluxo
											qtDocumentosPubUni = new Integer(0);
											valorDocumentosPubUni = BigDecimal.ZERO;
											qtDocumentosResUni = new Integer(0);
											valorDocumentosResUni = BigDecimal.ZERO;
											qtDocumentosComUni = new Integer(0);
											valorDocumentosComUni = BigDecimal.ZERO;
											qtDocumentosIndUni = new Integer(0);
											valorDocumentosIndUni = BigDecimal.ZERO;
											qtDocumentosPrivadosUni = new Integer(
													0);
											valorDocumentosPrivadosUni = BigDecimal.ZERO;

											idGerenciaFluxoUni = idGerenciaUni;
											nomeGerenciaFluxoUni = nomeGerenciaUni;
											idUnidadeFluxoUni = idUnidadeUni;
											nomeUnidadeFluxoUni = nomeUnidadeUni;
											idSituacaoFluxoUni = idSituacaoUni;
											idDocumentoTipoFluxoUni = idDocumentoTipoUni;
											nomeDocumentoTipoFluxoUni = nomeDocumentoTipoUni;
											faixaFluxoUni = faixaUni;
											descricaoFluxoUni = descricaoSituacaoUni;

											// TOTAL DO TIPO DOCUMENTO
											if (idCategoriaUni
													.compareTo(Categoria.RESIDENCIAL) == 0) {
												qtDocumentosResUni += qtDocumentosUni;
												valorDocumentosResUni = Util
														.somaBigDecimal(
																valorDocumentosResUni,
																valorDocumentosUni);
												qtDocumentosPrivadosUni += qtDocumentosUni;
												valorDocumentosPrivadosUni = Util
														.somaBigDecimal(
																valorDocumentosPrivadosUni,
																valorDocumentosUni);
											}
											if (idCategoriaUni
													.compareTo(Categoria.COMERCIAL) == 0) {
												qtDocumentosComUni += qtDocumentosUni;
												valorDocumentosComUni = Util
														.somaBigDecimal(
																valorDocumentosComUni,
																valorDocumentosUni);
												qtDocumentosPrivadosUni += qtDocumentosUni;
												valorDocumentosPrivadosUni = Util
														.somaBigDecimal(
																valorDocumentosPrivadosUni,
																valorDocumentosUni);
											}
											if (idCategoriaUni
													.compareTo(Categoria.INDUSTRIAL) == 0) {
												qtDocumentosIndUni += qtDocumentosUni;
												valorDocumentosIndUni = Util
														.somaBigDecimal(
																valorDocumentosIndUni,
																valorDocumentosUni);
												qtDocumentosPrivadosUni += qtDocumentosUni;
												valorDocumentosPrivadosUni = Util
														.somaBigDecimal(
																valorDocumentosPrivadosUni,
																valorDocumentosUni);
											}
											if (idCategoriaUni
													.compareTo(Categoria.PUBLICO) == 0) {
												qtDocumentosPubUni += qtDocumentosUni;
												valorDocumentosPubUni = Util
														.somaBigDecimal(
																valorDocumentosPubUni,
																valorDocumentosUni);
											}

										}
									} else {

										bean = criarBeanRelatorioDocumentosAReceber(
												idGerenciaFluxoUni,
												nomeGerenciaFluxoUni,
												idUnidadeFluxoUni,
												nomeUnidadeFluxoUni, null,
												null, idDocumentoTipoFluxoUni,
												nomeDocumentoTipoFluxoUni,
												idSituacaoFluxoUni,
												descricaoFluxoUni,
												qtDocumentosResUni,
												valorDocumentosResUni,
												qtDocumentosComUni,
												valorDocumentosComUni,
												qtDocumentosIndUni,
												valorDocumentosIndUni,
												qtDocumentosPrivadosUni,
												valorDocumentosPrivadosUni,
												qtDocumentosPubUni,
												valorDocumentosPubUni,
												"UNIDADE - "
														+ nomeUnidadeFluxoUni,
												"3", faixaFluxoUni);

										beansPorUnidade.add(bean);

										// Reiniciando valores e mudando
										// variaveis de controle de fluxo
										qtDocumentosPubUni = new Integer(0);
										valorDocumentosPubUni = BigDecimal.ZERO;
										qtDocumentosResUni = new Integer(0);
										valorDocumentosResUni = BigDecimal.ZERO;
										qtDocumentosComUni = new Integer(0);
										valorDocumentosComUni = BigDecimal.ZERO;
										qtDocumentosIndUni = new Integer(0);
										valorDocumentosIndUni = BigDecimal.ZERO;
										qtDocumentosPrivadosUni = new Integer(0);
										valorDocumentosPrivadosUni = BigDecimal.ZERO;

										idGerenciaFluxoUni = idGerenciaUni;
										nomeGerenciaFluxoUni = nomeGerenciaUni;
										idUnidadeFluxoUni = idUnidadeUni;
										nomeUnidadeFluxoUni = nomeUnidadeUni;
										idSituacaoFluxoUni = idSituacaoUni;
										idDocumentoTipoFluxoUni = idDocumentoTipoUni;
										nomeDocumentoTipoFluxoUni = nomeDocumentoTipoUni;
										faixaFluxoUni = faixaUni;
										descricaoFluxoUni = descricaoSituacaoUni;

										// TOTAL DO TIPO DOCUMENTO
										if (idCategoriaUni
												.compareTo(Categoria.RESIDENCIAL) == 0) {
											qtDocumentosResUni += qtDocumentosUni;
											valorDocumentosResUni = Util
													.somaBigDecimal(
															valorDocumentosResUni,
															valorDocumentosUni);
											qtDocumentosPrivadosUni += qtDocumentosUni;
											valorDocumentosPrivadosUni = Util
													.somaBigDecimal(
															valorDocumentosPrivadosUni,
															valorDocumentosUni);
										}
										if (idCategoriaUni
												.compareTo(Categoria.COMERCIAL) == 0) {
											qtDocumentosComUni += qtDocumentosUni;
											valorDocumentosComUni = Util
													.somaBigDecimal(
															valorDocumentosComUni,
															valorDocumentosUni);
											qtDocumentosPrivadosUni += qtDocumentosUni;
											valorDocumentosPrivadosUni = Util
													.somaBigDecimal(
															valorDocumentosPrivadosUni,
															valorDocumentosUni);
										}
										if (idCategoriaUni
												.compareTo(Categoria.INDUSTRIAL) == 0) {
											qtDocumentosIndUni += qtDocumentosUni;
											valorDocumentosIndUni = Util
													.somaBigDecimal(
															valorDocumentosIndUni,
															valorDocumentosUni);
											qtDocumentosPrivadosUni += qtDocumentosUni;
											valorDocumentosPrivadosUni = Util
													.somaBigDecimal(
															valorDocumentosPrivadosUni,
															valorDocumentosUni);
										}
										if (idCategoriaUni
												.compareTo(Categoria.PUBLICO) == 0) {
											qtDocumentosPubUni += qtDocumentosUni;
											valorDocumentosPubUni = Util
													.somaBigDecimal(
															valorDocumentosPubUni,
															valorDocumentosUni);
										}

									}
								} else {

									bean = criarBeanRelatorioDocumentosAReceber(
											idGerenciaFluxoUni,
											nomeGerenciaFluxoUni,
											idUnidadeFluxoUni,
											nomeUnidadeFluxoUni, null, null,
											idDocumentoTipoFluxoUni,
											nomeDocumentoTipoFluxoUni,
											idSituacaoFluxoUni,
											descricaoFluxoUni,
											qtDocumentosResUni,
											valorDocumentosResUni,
											qtDocumentosComUni,
											valorDocumentosComUni,
											qtDocumentosIndUni,
											valorDocumentosIndUni,
											qtDocumentosPrivadosUni,
											valorDocumentosPrivadosUni,
											qtDocumentosPubUni,
											valorDocumentosPubUni, "UNIDADE - "
													+ nomeUnidadeFluxoUni, "3",
											faixaFluxoUni);

									beansPorUnidade.add(bean);

									// Reiniciando valores e mudando
									// variaveis de controle de fluxo
									qtDocumentosPubUni = new Integer(0);
									valorDocumentosPubUni = BigDecimal.ZERO;
									qtDocumentosResUni = new Integer(0);
									valorDocumentosResUni = BigDecimal.ZERO;
									qtDocumentosComUni = new Integer(0);
									valorDocumentosComUni = BigDecimal.ZERO;
									qtDocumentosIndUni = new Integer(0);
									valorDocumentosIndUni = BigDecimal.ZERO;
									qtDocumentosPrivadosUni = new Integer(0);
									valorDocumentosPrivadosUni = BigDecimal.ZERO;

									idGerenciaFluxoUni = idGerenciaUni;
									nomeGerenciaFluxoUni = nomeGerenciaUni;
									idUnidadeFluxoUni = idUnidadeUni;
									nomeUnidadeFluxoUni = nomeUnidadeUni;
									idSituacaoFluxoUni = idSituacaoUni;
									idDocumentoTipoFluxoUni = idDocumentoTipoUni;
									nomeDocumentoTipoFluxoUni = nomeDocumentoTipoUni;
									faixaFluxoUni = faixaUni;
									descricaoFluxoUni = descricaoSituacaoUni;

									// TOTAL DO TIPO DOCUMENTO
									if (idCategoriaUni
											.compareTo(Categoria.RESIDENCIAL) == 0) {
										qtDocumentosResUni += qtDocumentosUni;
										valorDocumentosResUni = Util
												.somaBigDecimal(
														valorDocumentosResUni,
														valorDocumentosUni);
										qtDocumentosPrivadosUni += qtDocumentosUni;
										valorDocumentosPrivadosUni = Util
												.somaBigDecimal(
														valorDocumentosPrivadosUni,
														valorDocumentosUni);
									}
									if (idCategoriaUni
											.compareTo(Categoria.COMERCIAL) == 0) {
										qtDocumentosComUni += qtDocumentosUni;
										valorDocumentosComUni = Util
												.somaBigDecimal(
														valorDocumentosComUni,
														valorDocumentosUni);
										qtDocumentosPrivadosUni += qtDocumentosUni;
										valorDocumentosPrivadosUni = Util
												.somaBigDecimal(
														valorDocumentosPrivadosUni,
														valorDocumentosUni);
									}
									if (idCategoriaUni
											.compareTo(Categoria.INDUSTRIAL) == 0) {
										qtDocumentosIndUni += qtDocumentosUni;
										valorDocumentosIndUni = Util
												.somaBigDecimal(
														valorDocumentosIndUni,
														valorDocumentosUni);
										qtDocumentosPrivadosUni += qtDocumentosUni;
										valorDocumentosPrivadosUni = Util
												.somaBigDecimal(
														valorDocumentosPrivadosUni,
														valorDocumentosUni);
									}
									if (idCategoriaUni
											.compareTo(Categoria.PUBLICO) == 0) {
										qtDocumentosPubUni += qtDocumentosUni;
										valorDocumentosPubUni = Util
												.somaBigDecimal(
														valorDocumentosPubUni,
														valorDocumentosUni);
									}
								}

							} else {

								bean = criarBeanRelatorioDocumentosAReceber(
										idGerenciaFluxoUni,
										nomeGerenciaFluxoUni,
										idUnidadeFluxoUni, nomeUnidadeFluxoUni,
										null, null, idDocumentoTipoFluxoUni,
										nomeDocumentoTipoFluxoUni,
										idSituacaoFluxoUni, descricaoFluxoUni,
										qtDocumentosResUni,
										valorDocumentosResUni,
										qtDocumentosComUni,
										valorDocumentosComUni,
										qtDocumentosIndUni,
										valorDocumentosIndUni,
										qtDocumentosPrivadosUni,
										valorDocumentosPrivadosUni,
										qtDocumentosPubUni,
										valorDocumentosPubUni, "UNIDADE - "
												+ nomeUnidadeFluxoUni,
										ConstantesSistema.NAO.toString(),
										faixaFluxoUni);

								beansPorUnidade.add(bean);

								// Reiniciando valores e mudando
								// variaveis de controle de fluxo
								qtDocumentosPubUni = new Integer(0);
								valorDocumentosPubUni = BigDecimal.ZERO;
								qtDocumentosResUni = new Integer(0);
								valorDocumentosResUni = BigDecimal.ZERO;
								qtDocumentosComUni = new Integer(0);
								valorDocumentosComUni = BigDecimal.ZERO;
								qtDocumentosIndUni = new Integer(0);
								valorDocumentosIndUni = BigDecimal.ZERO;
								qtDocumentosPrivadosUni = new Integer(0);
								valorDocumentosPrivadosUni = BigDecimal.ZERO;

								idGerenciaFluxoUni = idGerenciaUni;
								nomeGerenciaFluxoUni = nomeGerenciaUni;
								idUnidadeFluxoUni = idUnidadeUni;
								nomeUnidadeFluxoUni = nomeUnidadeUni;
								idSituacaoFluxoUni = idSituacaoUni;
								idDocumentoTipoFluxoUni = idDocumentoTipoUni;
								nomeDocumentoTipoFluxoUni = nomeDocumentoTipoUni;
								faixaFluxoUni = faixaUni;
								descricaoFluxoUni = descricaoSituacaoUni;

								// TOTAL DO TIPO DOCUMENTO
								if (idCategoriaUni
										.compareTo(Categoria.RESIDENCIAL) == 0) {
									qtDocumentosResUni += qtDocumentosUni;
									valorDocumentosResUni = Util
											.somaBigDecimal(
													valorDocumentosResUni,
													valorDocumentosUni);
									qtDocumentosPrivadosUni += qtDocumentosUni;
									valorDocumentosPrivadosUni = Util
											.somaBigDecimal(
													valorDocumentosPrivadosUni,
													valorDocumentosUni);
								}
								if (idCategoriaUni
										.compareTo(Categoria.COMERCIAL) == 0) {
									qtDocumentosComUni += qtDocumentosUni;
									valorDocumentosComUni = Util
											.somaBigDecimal(
													valorDocumentosComUni,
													valorDocumentosUni);
									qtDocumentosPrivadosUni += qtDocumentosUni;
									valorDocumentosPrivadosUni = Util
											.somaBigDecimal(
													valorDocumentosPrivadosUni,
													valorDocumentosUni);
								}
								if (idCategoriaUni
										.compareTo(Categoria.INDUSTRIAL) == 0) {
									qtDocumentosIndUni += qtDocumentosUni;
									valorDocumentosIndUni = Util
											.somaBigDecimal(
													valorDocumentosIndUni,
													valorDocumentosUni);
									qtDocumentosPrivadosUni += qtDocumentosUni;
									valorDocumentosPrivadosUni = Util
											.somaBigDecimal(
													valorDocumentosPrivadosUni,
													valorDocumentosUni);
								}
								if (idCategoriaUni.compareTo(Categoria.PUBLICO) == 0) {
									qtDocumentosPubUni += qtDocumentosUni;
									valorDocumentosPubUni = Util
											.somaBigDecimal(
													valorDocumentosPubUni,
													valorDocumentosUni);
								}
							}
						}
						if (colecaoDadosUnidade.size() < quantidadeMaxima) {
							if (!iterator.hasNext()) {
								bean = criarBeanRelatorioDocumentosAReceber(
										idGerenciaFluxoUni,
										nomeGerenciaFluxoUni,
										idUnidadeFluxoUni, nomeUnidadeFluxoUni,
										null, null, idDocumentoTipoFluxoUni,
										nomeDocumentoTipoFluxoUni,
										idSituacaoFluxoUni, descricaoFluxoUni,
										qtDocumentosResUni,
										valorDocumentosResUni,
										qtDocumentosComUni,
										valorDocumentosComUni,
										qtDocumentosIndUni,
										valorDocumentosIndUni,
										qtDocumentosPrivadosUni,
										valorDocumentosPrivadosUni,
										qtDocumentosPubUni,
										valorDocumentosPubUni, "UNIDADE - "
												+ nomeUnidadeFluxoUni,
										ConstantesSistema.NAO.toString(),
										faixaFluxoUni);

								beansPorUnidade.add(bean);
							}
						}
					}
				}

				bean = null;

				if (colecaoDadosGerencia != null) {
					// GERAR DADOS DAS GERENCIAS
					for (Iterator iterator = colecaoDadosGerencia.iterator(); iterator
							.hasNext();) {

						Object[] dados = null;

						dados = (Object[]) iterator.next();

						// Dados Pesquisa
						idCategoriaGer = (Integer) dados[0];
						idGerenciaGer = (Integer) dados[2];
						nomeGerenciaGer = (String) dados[3];
						idDocumentoTipoGer = (Integer) dados[4];
						nomeDocumentoTipoGer = (String) dados[5];
						idSituacaoGer = (Integer) dados[6];
						descricaoSituacaoGer = (String) dados[7];
						faixaGer = (String) dados[8];

						if (!faixaGer.equals("0")) {
							// Verifica se a faixa não existia na base,
							// caso seja verdadeiro atribui descrição da
							// faixa correspondente informada no filtro

							for (FaixaHelper faixaHelper : helper
									.getColecaoFaixas()) {
								Integer qtdDias = new Integer(faixaGer);

								if (qtdDias.compareTo(faixaHelper
										.getValorInicial()) >= 0
										&& qtdDias.compareTo(faixaHelper
												.getValorFinal()) <= 0) {
									faixaGer = faixaHelper.getDescricao();
									break;
								}

							}
						} else {
							faixaGer = "A VENCER";
						}

						qtDocumentosGer = (Integer) dados[9];
						valorDocumentosGer = (BigDecimal) dados[10];

						if (primeiraVezGer) {

							idGerenciaFluxoGer = idGerenciaGer;
							nomeGerenciaFluxoGer = nomeGerenciaGer;
							idSituacaoFluxoGer = idSituacaoGer;
							idDocumentoTipoFluxoGer = idDocumentoTipoGer;
							nomeDocumentoTipoFluxoGer = nomeDocumentoTipoGer;
							faixaFluxoGer = faixaGer;
							descricaoFluxoGer = descricaoSituacaoGer;

							primeiraVezGer = false;
						}

						// SE TODOS OS DADOS FOREM IGUAIS
						// ACUMULA DOCUMENTO TIPO
						if (idGerenciaFluxoGer.intValue() == idGerenciaGer
								.intValue()
								&& idSituacaoFluxoGer.intValue() == idSituacaoGer
										.intValue()
								&& faixaFluxoGer.equals(faixaGer)
								&& idDocumentoTipoFluxoGer.intValue() == idDocumentoTipoGer
										.intValue()) {

							// TOTAL DO TIPO DOCUMENTO
							if (idCategoriaGer.compareTo(Categoria.RESIDENCIAL) == 0) {
								qtDocumentosResGer += qtDocumentosGer;
								valorDocumentosResGer = Util.somaBigDecimal(
										valorDocumentosResGer,
										valorDocumentosGer);
								qtDocumentosPrivadosGer += qtDocumentosGer;
								valorDocumentosPrivadosGer = Util
										.somaBigDecimal(
												valorDocumentosPrivadosGer,
												valorDocumentosGer);
							}
							if (idCategoriaGer.compareTo(Categoria.COMERCIAL) == 0) {
								qtDocumentosComGer += qtDocumentosGer;
								valorDocumentosComGer = Util.somaBigDecimal(
										valorDocumentosComGer,
										valorDocumentosGer);
								qtDocumentosPrivadosGer += qtDocumentosGer;
								valorDocumentosPrivadosGer = Util
										.somaBigDecimal(
												valorDocumentosPrivadosGer,
												valorDocumentosGer);
							}
							if (idCategoriaGer.compareTo(Categoria.INDUSTRIAL) == 0) {
								qtDocumentosIndGer += qtDocumentosGer;
								valorDocumentosIndGer = Util.somaBigDecimal(
										valorDocumentosIndGer,
										valorDocumentosGer);
								qtDocumentosPrivadosGer += qtDocumentosGer;
								valorDocumentosPrivadosGer = Util
										.somaBigDecimal(
												valorDocumentosPrivadosGer,
												valorDocumentosGer);
							}
							if (idCategoriaGer.compareTo(Categoria.PUBLICO) == 0) {
								qtDocumentosPubGer += qtDocumentosGer;
								valorDocumentosPubGer = Util.somaBigDecimal(
										valorDocumentosPubGer,
										valorDocumentosGer);
							}

						} else {

							if (idGerenciaFluxoGer.intValue() == idGerenciaGer
									.intValue()) {

								if (idSituacaoFluxoGer.intValue() == idSituacaoGer
										.intValue()) {

									if (faixaFluxoGer.equals(faixaGer)) {

										if (idDocumentoTipoFluxoGer.intValue() != idDocumentoTipoGer
												.intValue()) {

											bean = criarBeanRelatorioDocumentosAReceber(
													idGerenciaFluxoGer,
													nomeGerenciaFluxoGer,
													null,
													null,
													null,
													null,
													idDocumentoTipoFluxoGer,
													nomeDocumentoTipoFluxoGer,
													idSituacaoFluxoGer,
													descricaoFluxoGer,
													qtDocumentosResGer,
													valorDocumentosResGer,
													qtDocumentosComGer,
													valorDocumentosComGer,
													qtDocumentosIndGer,
													valorDocumentosIndGer,
													qtDocumentosPrivadosGer,
													valorDocumentosPrivadosGer,
													qtDocumentosPubGer,
													valorDocumentosPubGer,
													"GERÊNCIA - "
															+ nomeGerenciaFluxoGer,
													ConstantesSistema.NAO
															.toString(),
													faixaFluxoGer);

											beansPorGerencia.add(bean);

											// Reiniciando valores e mudando
											// variaveis de controle de fluxo
											qtDocumentosPubGer = new Integer(0);
											valorDocumentosPubGer = BigDecimal.ZERO;
											qtDocumentosResGer = new Integer(0);
											valorDocumentosResGer = BigDecimal.ZERO;
											qtDocumentosComGer = new Integer(0);
											valorDocumentosComGer = BigDecimal.ZERO;
											qtDocumentosIndGer = new Integer(0);
											valorDocumentosIndGer = BigDecimal.ZERO;
											qtDocumentosPrivadosGer = new Integer(
													0);
											valorDocumentosPrivadosGer = BigDecimal.ZERO;

											idGerenciaFluxoGer = idGerenciaGer;
											nomeGerenciaFluxoGer = nomeGerenciaGer;
											idSituacaoFluxoGer = idSituacaoGer;
											idDocumentoTipoFluxoGer = idDocumentoTipoGer;
											nomeDocumentoTipoFluxoGer = nomeDocumentoTipoGer;
											faixaFluxoGer = faixaGer;
											descricaoFluxoGer = descricaoSituacaoGer;

											// TOTAL DO TIPO DOCUMENTO
											if (idCategoriaGer
													.compareTo(Categoria.RESIDENCIAL) == 0) {
												qtDocumentosResGer += qtDocumentosGer;
												valorDocumentosResGer = Util
														.somaBigDecimal(
																valorDocumentosResGer,
																valorDocumentosGer);
												qtDocumentosPrivadosGer += qtDocumentosGer;
												valorDocumentosPrivadosGer = Util
														.somaBigDecimal(
																valorDocumentosPrivadosGer,
																valorDocumentosGer);
											}
											if (idCategoriaGer
													.compareTo(Categoria.COMERCIAL) == 0) {
												qtDocumentosComGer += qtDocumentosGer;
												valorDocumentosComGer = Util
														.somaBigDecimal(
																valorDocumentosComGer,
																valorDocumentosGer);
												qtDocumentosPrivadosGer += qtDocumentosGer;
												valorDocumentosPrivadosGer = Util
														.somaBigDecimal(
																valorDocumentosPrivadosGer,
																valorDocumentosGer);
											}
											if (idCategoriaGer
													.compareTo(Categoria.INDUSTRIAL) == 0) {
												qtDocumentosIndGer += qtDocumentosGer;
												valorDocumentosIndGer = Util
														.somaBigDecimal(
																valorDocumentosIndGer,
																valorDocumentosGer);
												qtDocumentosPrivadosGer += qtDocumentosGer;
												valorDocumentosPrivadosGer = Util
														.somaBigDecimal(
																valorDocumentosPrivadosGer,
																valorDocumentosGer);
											}
											if (idCategoriaGer
													.compareTo(Categoria.PUBLICO) == 0) {
												qtDocumentosPubGer += qtDocumentosGer;
												valorDocumentosPubGer = Util
														.somaBigDecimal(
																valorDocumentosPubGer,
																valorDocumentosGer);
											}

										}
									} else {
										bean = criarBeanRelatorioDocumentosAReceber(
												idGerenciaFluxoGer,
												nomeGerenciaFluxoGer, null,
												null, null, null,
												idDocumentoTipoFluxoGer,
												nomeDocumentoTipoFluxoGer,
												idSituacaoFluxoGer,
												descricaoFluxoGer,
												qtDocumentosResGer,
												valorDocumentosResGer,
												qtDocumentosComGer,
												valorDocumentosComGer,
												qtDocumentosIndGer,
												valorDocumentosIndGer,
												qtDocumentosPrivadosGer,
												valorDocumentosPrivadosGer,
												qtDocumentosPubGer,
												valorDocumentosPubGer,
												"GERÊNCIA - "
														+ nomeGerenciaFluxoGer,
												"3", faixaFluxoGer);

										beansPorGerencia.add(bean);

										// Reiniciando valores e mudando
										// variaveis de controle de fluxo
										qtDocumentosPubGer = new Integer(0);
										valorDocumentosPubGer = BigDecimal.ZERO;
										qtDocumentosResGer = new Integer(0);
										valorDocumentosResGer = BigDecimal.ZERO;
										qtDocumentosComGer = new Integer(0);
										valorDocumentosComGer = BigDecimal.ZERO;
										qtDocumentosIndGer = new Integer(0);
										valorDocumentosIndGer = BigDecimal.ZERO;
										qtDocumentosPrivadosGer = new Integer(0);
										valorDocumentosPrivadosGer = BigDecimal.ZERO;

										idGerenciaFluxoGer = idGerenciaGer;
										nomeGerenciaFluxoGer = nomeGerenciaGer;
										idSituacaoFluxoGer = idSituacaoGer;
										idDocumentoTipoFluxoGer = idDocumentoTipoGer;
										nomeDocumentoTipoFluxoGer = nomeDocumentoTipoGer;
										faixaFluxoGer = faixaGer;
										descricaoFluxoGer = descricaoSituacaoGer;

										// TOTAL DO TIPO DOCUMENTO
										if (idCategoriaGer
												.compareTo(Categoria.RESIDENCIAL) == 0) {
											qtDocumentosResGer += qtDocumentosGer;
											valorDocumentosResGer = Util
													.somaBigDecimal(
															valorDocumentosResGer,
															valorDocumentosGer);
											qtDocumentosPrivadosGer += qtDocumentosGer;
											valorDocumentosPrivadosGer = Util
													.somaBigDecimal(
															valorDocumentosPrivadosGer,
															valorDocumentosGer);
										}
										if (idCategoriaGer
												.compareTo(Categoria.COMERCIAL) == 0) {
											qtDocumentosComGer += qtDocumentosGer;
											valorDocumentosComGer = Util
													.somaBigDecimal(
															valorDocumentosComGer,
															valorDocumentosGer);
											qtDocumentosPrivadosGer += qtDocumentosGer;
											valorDocumentosPrivadosGer = Util
													.somaBigDecimal(
															valorDocumentosPrivadosGer,
															valorDocumentosGer);
										}
										if (idCategoriaGer
												.compareTo(Categoria.INDUSTRIAL) == 0) {
											qtDocumentosIndGer += qtDocumentosGer;
											valorDocumentosIndGer = Util
													.somaBigDecimal(
															valorDocumentosIndGer,
															valorDocumentosGer);
											qtDocumentosPrivadosGer += qtDocumentosGer;
											valorDocumentosPrivadosGer = Util
													.somaBigDecimal(
															valorDocumentosPrivadosGer,
															valorDocumentosGer);
										}
										if (idCategoriaGer
												.compareTo(Categoria.PUBLICO) == 0) {
											qtDocumentosPubGer += qtDocumentosGer;
											valorDocumentosPubGer = Util
													.somaBigDecimal(
															valorDocumentosPubGer,
															valorDocumentosGer);
										}
									}
								} else {

									bean = criarBeanRelatorioDocumentosAReceber(
											idGerenciaFluxoGer,
											nomeGerenciaFluxoGer, null, null,
											null, null,
											idDocumentoTipoFluxoGer,
											nomeDocumentoTipoFluxoGer,
											idSituacaoFluxoGer,
											descricaoFluxoGer,
											qtDocumentosResGer,
											valorDocumentosResGer,
											qtDocumentosComGer,
											valorDocumentosComGer,
											qtDocumentosIndGer,
											valorDocumentosIndGer,
											qtDocumentosPrivadosGer,
											valorDocumentosPrivadosGer,
											qtDocumentosPubGer,
											valorDocumentosPubGer,
											"GERÊNCIA - "
													+ nomeGerenciaFluxoGer,
											"3", faixaFluxoGer);

									beansPorGerencia.add(bean);

									// Reiniciando valores e mudando
									// variaveis de controle de fluxo
									qtDocumentosPubGer = new Integer(0);
									valorDocumentosPubGer = BigDecimal.ZERO;
									qtDocumentosResGer = new Integer(0);
									valorDocumentosResGer = BigDecimal.ZERO;
									qtDocumentosComGer = new Integer(0);
									valorDocumentosComGer = BigDecimal.ZERO;
									qtDocumentosIndGer = new Integer(0);
									valorDocumentosIndGer = BigDecimal.ZERO;
									qtDocumentosPrivadosGer = new Integer(0);
									valorDocumentosPrivadosGer = BigDecimal.ZERO;

									idGerenciaFluxoGer = idGerenciaGer;
									nomeGerenciaFluxoGer = nomeGerenciaGer;
									idSituacaoFluxoGer = idSituacaoGer;
									idDocumentoTipoFluxoGer = idDocumentoTipoGer;
									nomeDocumentoTipoFluxoGer = nomeDocumentoTipoGer;
									faixaFluxoGer = faixaGer;
									descricaoFluxoGer = descricaoSituacaoGer;

									// TOTAL DO TIPO DOCUMENTO
									if (idCategoriaGer
											.compareTo(Categoria.RESIDENCIAL) == 0) {
										qtDocumentosResGer += qtDocumentosGer;
										valorDocumentosResGer = Util
												.somaBigDecimal(
														valorDocumentosResGer,
														valorDocumentosGer);
										qtDocumentosPrivadosGer += qtDocumentosGer;
										valorDocumentosPrivadosGer = Util
												.somaBigDecimal(
														valorDocumentosPrivadosGer,
														valorDocumentosGer);
									}
									if (idCategoriaGer
											.compareTo(Categoria.COMERCIAL) == 0) {
										qtDocumentosComGer += qtDocumentosGer;
										valorDocumentosComGer = Util
												.somaBigDecimal(
														valorDocumentosComGer,
														valorDocumentosGer);
										qtDocumentosPrivadosGer += qtDocumentosGer;
										valorDocumentosPrivadosGer = Util
												.somaBigDecimal(
														valorDocumentosPrivadosGer,
														valorDocumentosGer);
									}
									if (idCategoriaGer
											.compareTo(Categoria.INDUSTRIAL) == 0) {
										qtDocumentosIndGer += qtDocumentosGer;
										valorDocumentosIndGer = Util
												.somaBigDecimal(
														valorDocumentosIndGer,
														valorDocumentosGer);
										qtDocumentosPrivadosGer += qtDocumentosGer;
										valorDocumentosPrivadosGer = Util
												.somaBigDecimal(
														valorDocumentosPrivadosGer,
														valorDocumentosGer);
									}
									if (idCategoriaGer
											.compareTo(Categoria.PUBLICO) == 0) {
										qtDocumentosPubGer += qtDocumentosGer;
										valorDocumentosPubGer = Util
												.somaBigDecimal(
														valorDocumentosPubGer,
														valorDocumentosGer);
									}
								}

							} else {

								bean = criarBeanRelatorioDocumentosAReceber(
										idGerenciaFluxoGer,
										nomeGerenciaFluxoGer, null, null, null,
										null, idDocumentoTipoFluxoGer,
										nomeDocumentoTipoFluxoGer,
										idSituacaoFluxoGer, descricaoFluxoGer,
										qtDocumentosResGer,
										valorDocumentosResGer,
										qtDocumentosComGer,
										valorDocumentosComGer,
										qtDocumentosIndGer,
										valorDocumentosIndGer,
										qtDocumentosPrivadosGer,
										valorDocumentosPrivadosGer,
										qtDocumentosPubGer,
										valorDocumentosPubGer, "GERÊNCIA - "
												+ nomeGerenciaFluxoGer,
										ConstantesSistema.NAO.toString(),
										faixaFluxoGer);

								beansPorGerencia.add(bean);

								// Reiniciando valores e mudando
								// variaveis de controle de fluxo
								qtDocumentosPubGer = new Integer(0);
								valorDocumentosPubGer = BigDecimal.ZERO;
								qtDocumentosResGer = new Integer(0);
								valorDocumentosResGer = BigDecimal.ZERO;
								qtDocumentosComGer = new Integer(0);
								valorDocumentosComGer = BigDecimal.ZERO;
								qtDocumentosIndGer = new Integer(0);
								valorDocumentosIndGer = BigDecimal.ZERO;
								qtDocumentosPrivadosGer = new Integer(0);
								valorDocumentosPrivadosGer = BigDecimal.ZERO;

								idGerenciaFluxoGer = idGerenciaGer;
								nomeGerenciaFluxoGer = nomeGerenciaGer;
								idSituacaoFluxoGer = idSituacaoGer;
								idDocumentoTipoFluxoGer = idDocumentoTipoGer;
								nomeDocumentoTipoFluxoGer = nomeDocumentoTipoGer;
								faixaFluxoGer = faixaGer;
								descricaoFluxoGer = descricaoSituacaoGer;

								// TOTAL DO TIPO DOCUMENTO
								if (idCategoriaGer
										.compareTo(Categoria.RESIDENCIAL) == 0) {
									qtDocumentosResGer += qtDocumentosGer;
									valorDocumentosResGer = Util
											.somaBigDecimal(
													valorDocumentosResGer,
													valorDocumentosGer);
									qtDocumentosPrivadosGer += qtDocumentosGer;
									valorDocumentosPrivadosGer = Util
											.somaBigDecimal(
													valorDocumentosPrivadosGer,
													valorDocumentosGer);
								}
								if (idCategoriaGer
										.compareTo(Categoria.COMERCIAL) == 0) {
									qtDocumentosComGer += qtDocumentosGer;
									valorDocumentosComGer = Util
											.somaBigDecimal(
													valorDocumentosComGer,
													valorDocumentosGer);
									qtDocumentosPrivadosGer += qtDocumentosGer;
									valorDocumentosPrivadosGer = Util
											.somaBigDecimal(
													valorDocumentosPrivadosGer,
													valorDocumentosGer);
								}
								if (idCategoriaGer
										.compareTo(Categoria.INDUSTRIAL) == 0) {
									qtDocumentosIndGer += qtDocumentosGer;
									valorDocumentosIndGer = Util
											.somaBigDecimal(
													valorDocumentosIndGer,
													valorDocumentosGer);
									qtDocumentosPrivadosGer += qtDocumentosGer;
									valorDocumentosPrivadosGer = Util
											.somaBigDecimal(
													valorDocumentosPrivadosGer,
													valorDocumentosGer);
								}
								if (idCategoriaGer.compareTo(Categoria.PUBLICO) == 0) {
									qtDocumentosPubGer += qtDocumentosGer;
									valorDocumentosPubGer = Util
											.somaBigDecimal(
													valorDocumentosPubGer,
													valorDocumentosGer);
								}
							}
						}
						if (colecaoDadosGerencia.size() < quantidadeMaxima) {
							if (!iterator.hasNext()) {
								bean = criarBeanRelatorioDocumentosAReceber(
										idGerenciaFluxoGer,
										nomeGerenciaFluxoGer, null, null, null,
										null, idDocumentoTipoFluxoGer,
										nomeDocumentoTipoFluxoGer,
										idSituacaoFluxoGer, descricaoFluxoGer,
										qtDocumentosResGer,
										valorDocumentosResGer,
										qtDocumentosComGer,
										valorDocumentosComGer,
										qtDocumentosIndGer,
										valorDocumentosIndGer,
										qtDocumentosPrivadosGer,
										valorDocumentosPrivadosGer,
										qtDocumentosPubGer,
										valorDocumentosPubGer, "GERÊNCIA - "
												+ nomeGerenciaFluxoGer,
										ConstantesSistema.NAO.toString(),
										faixaFluxoGer);

								beansPorGerencia.add(bean);
							}
						}
					}
				}

				bean = null;

				if (colecaoDadosEstado != null) {
					// GERAR DADOS DO ESTADO
					for (Iterator iterator = colecaoDadosEstado.iterator(); iterator
							.hasNext();) {

						Object[] dados = null;

						dados = (Object[]) iterator.next();

						// Dados Pesquisa
						idCategoriaEst = (Integer) dados[0];
						idDocumentoTipoEst = (Integer) dados[2];
						nomeDocumentoTipoEst = (String) dados[3];
						idSituacaoEst = (Integer) dados[4];
						descricaoSituacaoEst = (String) dados[5];
						faixaEst = (String) dados[6];

						if (!faixaEst.equals("0")) {
							// Verifica se a faixa não existia na base,
							// caso seja verdadeiro atribui descrição da
							// faixa correspondente informada no filtro

							for (FaixaHelper faixaHelper : helper
									.getColecaoFaixas()) {
								Integer qtdDias = new Integer(faixaEst);

								if (qtdDias.compareTo(faixaHelper
										.getValorInicial()) >= 0
										&& qtdDias.compareTo(faixaHelper
												.getValorFinal()) <= 0) {
									faixaEst = faixaHelper.getDescricao();
									break;
								}

							}
						} else {
							faixaEst = "A VENCER";
						}

						qtDocumentosEst = (Integer) dados[7];
						valorDocumentosEst = (BigDecimal) dados[8];

						if (primeiraVezEst) {

							idSituacaoFluxoEst = idSituacaoEst;
							idDocumentoTipoFluxoEst = idDocumentoTipoEst;
							nomeDocumentoTipoFluxoEst = nomeDocumentoTipoEst;
							faixaFluxoEst = faixaEst;
							descricaoFluxoEst = descricaoSituacaoEst;

							primeiraVezEst = false;
						}

						// SE TODOS OS DADOS FOREM IGUAIS
						// ACUMULA DOCUMENTO TIPO
						if (idSituacaoFluxoEst.intValue() == idSituacaoEst
								.intValue()
								&& faixaFluxoEst.equals(faixaEst)
								&& idDocumentoTipoFluxoEst.intValue() == idDocumentoTipoEst
										.intValue()) {

							// TOTAL DO TIPO DOCUMENTO
							if (idCategoriaEst.compareTo(Categoria.RESIDENCIAL) == 0) {
								qtDocumentosResEst += qtDocumentosEst;
								valorDocumentosResEst = Util.somaBigDecimal(
										valorDocumentosResEst,
										valorDocumentosEst);
								qtDocumentosPrivadosEst += qtDocumentosEst;
								valorDocumentosPrivadosEst = Util
										.somaBigDecimal(
												valorDocumentosPrivadosEst,
												valorDocumentosEst);
							}
							if (idCategoriaEst.compareTo(Categoria.COMERCIAL) == 0) {
								qtDocumentosComEst += qtDocumentosEst;
								valorDocumentosComEst = Util.somaBigDecimal(
										valorDocumentosComEst,
										valorDocumentosEst);
								qtDocumentosPrivadosEst += qtDocumentosEst;
								valorDocumentosPrivadosEst = Util
										.somaBigDecimal(
												valorDocumentosPrivadosEst,
												valorDocumentosEst);
							}
							if (idCategoriaEst.compareTo(Categoria.INDUSTRIAL) == 0) {
								qtDocumentosIndEst += qtDocumentosEst;
								valorDocumentosIndEst = Util.somaBigDecimal(
										valorDocumentosIndEst,
										valorDocumentosEst);
								qtDocumentosPrivadosEst += qtDocumentosEst;
								valorDocumentosPrivadosEst = Util
										.somaBigDecimal(
												valorDocumentosPrivadosEst,
												valorDocumentosEst);
							}
							if (idCategoriaEst.compareTo(Categoria.PUBLICO) == 0) {
								qtDocumentosPubEst += qtDocumentosEst;
								valorDocumentosPubEst = Util.somaBigDecimal(
										valorDocumentosPubEst,
										valorDocumentosEst);
							}

						} else {

							if (idSituacaoFluxoEst.intValue() == idSituacaoEst
									.intValue()) {

								if (faixaFluxoEst.equals(faixaEst)) {

									if (idDocumentoTipoFluxoEst.intValue() != idDocumentoTipoEst
											.intValue()) {

										bean = criarBeanRelatorioDocumentosAReceber(
												null,
												null,
												null,
												null,
												null,
												null,
												idDocumentoTipoFluxoEst,
												nomeDocumentoTipoFluxoEst,
												idSituacaoFluxoEst,
												descricaoFluxoEst,
												qtDocumentosResEst,
												valorDocumentosResEst,
												qtDocumentosComEst,
												valorDocumentosComEst,
												qtDocumentosIndEst,
												valorDocumentosIndEst,
												qtDocumentosPrivadosEst,
												valorDocumentosPrivadosEst,
												qtDocumentosPubEst,
												valorDocumentosPubEst,
												"ESTADO - "
														+ helper
																.getDescricaoEstado(),
												ConstantesSistema.NAO
														.toString(),
												faixaFluxoEst);

										beansPorEstado.add(bean);

										// Reiniciando valores e mudando
										// variaveis de controle de fluxo
										qtDocumentosPubEst = new Integer(0);
										valorDocumentosPubEst = BigDecimal.ZERO;
										qtDocumentosResEst = new Integer(0);
										valorDocumentosResEst = BigDecimal.ZERO;
										qtDocumentosComEst = new Integer(0);
										valorDocumentosComEst = BigDecimal.ZERO;
										qtDocumentosIndEst = new Integer(0);
										valorDocumentosIndEst = BigDecimal.ZERO;
										qtDocumentosPrivadosEst = new Integer(0);
										valorDocumentosPrivadosEst = BigDecimal.ZERO;

										idSituacaoFluxoEst = idSituacaoEst;
										idDocumentoTipoFluxoEst = idDocumentoTipoEst;
										nomeDocumentoTipoFluxoEst = nomeDocumentoTipoEst;
										faixaFluxoEst = faixaEst;
										descricaoFluxoEst = descricaoSituacaoEst;

										// TOTAL DO TIPO DOCUMENTO
										if (idCategoriaEst
												.compareTo(Categoria.RESIDENCIAL) == 0) {
											qtDocumentosResEst += qtDocumentosEst;
											valorDocumentosResEst = Util
													.somaBigDecimal(
															valorDocumentosResEst,
															valorDocumentosEst);
											qtDocumentosPrivadosEst += qtDocumentosEst;
											valorDocumentosPrivadosEst = Util
													.somaBigDecimal(
															valorDocumentosPrivadosEst,
															valorDocumentosEst);
										}
										if (idCategoriaEst
												.compareTo(Categoria.COMERCIAL) == 0) {
											qtDocumentosComEst += qtDocumentosEst;
											valorDocumentosComEst = Util
													.somaBigDecimal(
															valorDocumentosComEst,
															valorDocumentosEst);
											qtDocumentosPrivadosEst += qtDocumentosEst;
											valorDocumentosPrivadosEst = Util
													.somaBigDecimal(
															valorDocumentosPrivadosEst,
															valorDocumentosEst);
										}
										if (idCategoriaEst
												.compareTo(Categoria.INDUSTRIAL) == 0) {
											qtDocumentosIndEst += qtDocumentosEst;
											valorDocumentosIndEst = Util
													.somaBigDecimal(
															valorDocumentosIndEst,
															valorDocumentosEst);
											qtDocumentosPrivadosEst += qtDocumentosEst;
											valorDocumentosPrivadosEst = Util
													.somaBigDecimal(
															valorDocumentosPrivadosEst,
															valorDocumentosEst);
										}
										if (idCategoriaEst
												.compareTo(Categoria.PUBLICO) == 0) {
											qtDocumentosPubEst += qtDocumentosEst;
											valorDocumentosPubEst = Util
													.somaBigDecimal(
															valorDocumentosPubEst,
															valorDocumentosEst);
										}

									}
								} else {
									bean = criarBeanRelatorioDocumentosAReceber(
											null,
											null,
											null,
											null,
											null,
											null,
											idDocumentoTipoFluxoEst,
											nomeDocumentoTipoFluxoEst,
											idSituacaoFluxoEst,
											descricaoFluxoEst,
											qtDocumentosResEst,
											valorDocumentosResEst,
											qtDocumentosComEst,
											valorDocumentosComEst,
											qtDocumentosIndEst,
											valorDocumentosIndEst,
											qtDocumentosPrivadosEst,
											valorDocumentosPrivadosEst,
											qtDocumentosPubEst,
											valorDocumentosPubEst,
											"ESTADO - "
													+ helper
															.getDescricaoEstado(),
											"3", faixaFluxoEst);

									beansPorEstado.add(bean);

									// Reiniciando valores e mudando
									// variaveis de controle de fluxo
									qtDocumentosPubEst = new Integer(0);
									valorDocumentosPubEst = BigDecimal.ZERO;
									qtDocumentosResEst = new Integer(0);
									valorDocumentosResEst = BigDecimal.ZERO;
									qtDocumentosComEst = new Integer(0);
									valorDocumentosComEst = BigDecimal.ZERO;
									qtDocumentosIndEst = new Integer(0);
									valorDocumentosIndEst = BigDecimal.ZERO;
									qtDocumentosPrivadosEst = new Integer(0);
									valorDocumentosPrivadosEst = BigDecimal.ZERO;

									idSituacaoFluxoEst = idSituacaoEst;
									idDocumentoTipoFluxoEst = idDocumentoTipoEst;
									nomeDocumentoTipoFluxoEst = nomeDocumentoTipoEst;
									faixaFluxoEst = faixaEst;
									descricaoFluxoEst = descricaoSituacaoEst;

									// TOTAL DO TIPO DOCUMENTO
									if (idCategoriaEst
											.compareTo(Categoria.RESIDENCIAL) == 0) {
										qtDocumentosResEst += qtDocumentosEst;
										valorDocumentosResEst = Util
												.somaBigDecimal(
														valorDocumentosResEst,
														valorDocumentosEst);
										qtDocumentosPrivadosEst += qtDocumentosEst;
										valorDocumentosPrivadosEst = Util
												.somaBigDecimal(
														valorDocumentosPrivadosEst,
														valorDocumentosEst);
									}
									if (idCategoriaEst
											.compareTo(Categoria.COMERCIAL) == 0) {
										qtDocumentosComEst += qtDocumentosEst;
										valorDocumentosComEst = Util
												.somaBigDecimal(
														valorDocumentosComEst,
														valorDocumentosEst);
										qtDocumentosPrivadosEst += qtDocumentosEst;
										valorDocumentosPrivadosEst = Util
												.somaBigDecimal(
														valorDocumentosPrivadosEst,
														valorDocumentosEst);
									}
									if (idCategoriaEst
											.compareTo(Categoria.INDUSTRIAL) == 0) {
										qtDocumentosIndEst += qtDocumentosEst;
										valorDocumentosIndEst = Util
												.somaBigDecimal(
														valorDocumentosIndEst,
														valorDocumentosEst);
										qtDocumentosPrivadosEst += qtDocumentosEst;
										valorDocumentosPrivadosEst = Util
												.somaBigDecimal(
														valorDocumentosPrivadosEst,
														valorDocumentosEst);
									}
									if (idCategoriaEst
											.compareTo(Categoria.PUBLICO) == 0) {
										qtDocumentosPubEst += qtDocumentosEst;
										valorDocumentosPubEst = Util
												.somaBigDecimal(
														valorDocumentosPubEst,
														valorDocumentosEst);
									}
								}
							} else {

								bean = criarBeanRelatorioDocumentosAReceber(
										null, null, null, null, null, null,
										idDocumentoTipoFluxoEst,
										nomeDocumentoTipoFluxoEst,
										idSituacaoFluxoEst, descricaoFluxoEst,
										qtDocumentosResEst,
										valorDocumentosResEst,
										qtDocumentosComEst,
										valorDocumentosComEst,
										qtDocumentosIndEst,
										valorDocumentosIndEst,
										qtDocumentosPrivadosEst,
										valorDocumentosPrivadosEst,
										qtDocumentosPubEst,
										valorDocumentosPubEst, "ESTADO - "
												+ helper.getDescricaoEstado(),
										"3", faixaFluxoEst);

								beansPorEstado.add(bean);

								// Reiniciando valores e mudando
								// variaveis de controle de fluxo
								qtDocumentosPubEst = new Integer(0);
								valorDocumentosPubEst = BigDecimal.ZERO;
								qtDocumentosResEst = new Integer(0);
								valorDocumentosResEst = BigDecimal.ZERO;
								qtDocumentosComEst = new Integer(0);
								valorDocumentosComEst = BigDecimal.ZERO;
								qtDocumentosIndEst = new Integer(0);
								valorDocumentosIndEst = BigDecimal.ZERO;
								qtDocumentosPrivadosEst = new Integer(0);
								valorDocumentosPrivadosEst = BigDecimal.ZERO;

								idSituacaoFluxoEst = idSituacaoEst;
								idDocumentoTipoFluxoEst = idDocumentoTipoEst;
								nomeDocumentoTipoFluxoEst = nomeDocumentoTipoEst;
								faixaFluxoEst = faixaEst;
								descricaoFluxoEst = descricaoSituacaoEst;

								// TOTAL DO TIPO DOCUMENTO
								if (idCategoriaEst
										.compareTo(Categoria.RESIDENCIAL) == 0) {
									qtDocumentosResEst += qtDocumentosEst;
									valorDocumentosResEst = Util
											.somaBigDecimal(
													valorDocumentosResEst,
													valorDocumentosEst);
									qtDocumentosPrivadosEst += qtDocumentosEst;
									valorDocumentosPrivadosEst = Util
											.somaBigDecimal(
													valorDocumentosPrivadosEst,
													valorDocumentosEst);
								}
								if (idCategoriaEst
										.compareTo(Categoria.COMERCIAL) == 0) {
									qtDocumentosComEst += qtDocumentosEst;
									valorDocumentosComEst = Util
											.somaBigDecimal(
													valorDocumentosComEst,
													valorDocumentosEst);
									qtDocumentosPrivadosEst += qtDocumentosEst;
									valorDocumentosPrivadosEst = Util
											.somaBigDecimal(
													valorDocumentosPrivadosEst,
													valorDocumentosEst);
								}
								if (idCategoriaEst
										.compareTo(Categoria.INDUSTRIAL) == 0) {
									qtDocumentosIndEst += qtDocumentosEst;
									valorDocumentosIndEst = Util
											.somaBigDecimal(
													valorDocumentosIndEst,
													valorDocumentosEst);
									qtDocumentosPrivadosEst += qtDocumentosEst;
									valorDocumentosPrivadosEst = Util
											.somaBigDecimal(
													valorDocumentosPrivadosEst,
													valorDocumentosEst);
								}
								if (idCategoriaEst.compareTo(Categoria.PUBLICO) == 0) {
									qtDocumentosPubEst += qtDocumentosEst;
									valorDocumentosPubEst = Util
											.somaBigDecimal(
													valorDocumentosPubEst,
													valorDocumentosEst);
								}
							}
						}

						if (colecaoDadosEstado.size() < quantidadeMaxima) {

							if (!iterator.hasNext()) {
								bean = criarBeanRelatorioDocumentosAReceber(
										null, null, null, null, null, null,
										idDocumentoTipoFluxoEst,
										nomeDocumentoTipoFluxoEst,
										idSituacaoFluxoEst, descricaoFluxoEst,
										qtDocumentosResEst,
										valorDocumentosResEst,
										qtDocumentosComEst,
										valorDocumentosComEst,
										qtDocumentosIndEst,
										valorDocumentosIndEst,
										qtDocumentosPrivadosEst,
										valorDocumentosPrivadosEst,
										qtDocumentosPubEst,
										valorDocumentosPubEst, "ESTADO - "
												+ helper.getDescricaoEstado(),
										ConstantesSistema.NAO.toString(),
										faixaFluxoEst);

								beansPorEstado.add(bean);
							}
						}

					}
				}

				// Incrementa o nº do indice da páginação
				quantidadeInicio = quantidadeInicio + quantidadeMaxima;

				/**
				 * Caso a coleção de dados retornados for menor que a quantidade
				 * de registros seta a flag indicando que a paginação terminou.
				 */
				if (colecaoDadosLocalidade == null
						|| colecaoDadosLocalidade.size() < quantidadeMaxima) {

					flagTerminouLoc = true;
				}
				if (colecaoDadosUnidade == null
						|| colecaoDadosUnidade.size() < quantidadeMaxima) {

					flagTerminouUni = true;
				}
				if (colecaoDadosGerencia == null
						|| colecaoDadosGerencia.size() < quantidadeMaxima) {

					flagTerminouGer = true;
				}
				if (colecaoDadosEstado == null
						|| colecaoDadosEstado.size() < quantidadeMaxima) {

					flagTerminouEst = true;
				}

				if (colecaoDadosLocalidade != null) {
					colecaoDadosLocalidade.clear();
					colecaoDadosLocalidade = null;
				}

				if (colecaoDadosUnidade != null) {
					colecaoDadosUnidade.clear();
					colecaoDadosUnidade = null;
				}

				if (colecaoDadosGerencia != null) {
					colecaoDadosGerencia.clear();
					colecaoDadosGerencia = null;
				}

				if (colecaoDadosEstado != null) {
					colecaoDadosEstado.clear();
					colecaoDadosEstado = null;
				}

			}// FIM DO WHILE

			// REALIZA CONTRUÇÃO ORDENADA DA
			// COLEÇÃO DE BEANS DE ACORDO COM
			// TIPO DE TOTALIZAÇÃO

			// VARIAVEIS PARA CONTROLE DE FLUXO DA MONTAGEM DA
			// DA COLECÃO DE BEANS POR TOTALIZAÇÃO
			Integer idUnidadeAnterior = null;
			Integer idGerenciaAnterior = null;

			switch (new Integer(helper.getIdOpcaoTotalizacao())) {
			// Estado
			case 1:
				retorno = beansPorEstado;
				break;
			// Estado por Gerência Regional
			case 2:
				for (RelatorioDocumentosAReceberBean beanGer : beansPorGerencia) {
					retorno.add(beanGer);
				}
				for (RelatorioDocumentosAReceberBean beanEst : beansPorEstado) {
					retorno.add(beanEst);
				}
				break;
			// Estado por Unidade de Negócio
			case 3:
				for (RelatorioDocumentosAReceberBean beanUni : beansPorUnidade) {
					retorno.add(beanUni);
				}
				for (RelatorioDocumentosAReceberBean beanEst : beansPorEstado) {
					retorno.add(beanEst);
				}
				break;
			// Estado por Gerência Regional e por Localidade
			case 4:
				for (Iterator iteraLocalidades = beansPorLocalidade.iterator(); iteraLocalidades
						.hasNext();) {

					RelatorioDocumentosAReceberBean beanLoc = (RelatorioDocumentosAReceberBean) iteraLocalidades
							.next();

					// INICIALIZA ID DA PRIMEIRA GERENCIA
					if (idGerenciaAnterior == null) {
						idGerenciaAnterior = beanLoc.getIdGerencia();
					}

					if (idGerenciaAnterior.intValue() == beanLoc
							.getIdGerencia().intValue()) {
						retorno.add(beanLoc);
					} else {
						for (RelatorioDocumentosAReceberBean beanGer : beansPorGerencia) {
							if (beanGer.getIdGerencia().intValue() == idGerenciaAnterior
									.intValue()) {
								retorno.add(beanGer);
							}
						}
						idGerenciaAnterior = beanLoc.getIdGerencia();
						retorno.add(beanLoc);
					}

					if (!iteraLocalidades.hasNext()) {
						for (RelatorioDocumentosAReceberBean beanGer : beansPorGerencia) {
							if (beanGer.getIdGerencia().intValue() == idGerenciaAnterior
									.intValue()) {
								retorno.add(beanGer);
							}
						}
					}
				}
				for (RelatorioDocumentosAReceberBean beanEst : beansPorEstado) {
					retorno.add(beanEst);
				}
				idUnidadeAnterior = null;
				idGerenciaAnterior = null;
				break;
			// Estado por Unidade de Negócio e por Localidade
			case 5:
				for (Iterator iteraLocalidades = beansPorLocalidade.iterator(); iteraLocalidades
						.hasNext();) {

					RelatorioDocumentosAReceberBean beanLoc = (RelatorioDocumentosAReceberBean) iteraLocalidades
							.next();

					// INICIALIZA ID DA PRIMEIRA UNIDADE
					if (idUnidadeAnterior == null) {
						idUnidadeAnterior = beanLoc.getIdUnidade();
					}

					if (idUnidadeAnterior.intValue() == beanLoc.getIdUnidade()
							.intValue()) {
						retorno.add(beanLoc);
					} else {
						for (RelatorioDocumentosAReceberBean beanUni : beansPorUnidade) {
							if (beanUni.getIdUnidade().intValue() == idUnidadeAnterior
									.intValue()) {
								retorno.add(beanUni);
							}
						}
						idUnidadeAnterior = beanLoc.getIdUnidade();
						retorno.add(beanLoc);
					}

					if (!iteraLocalidades.hasNext()) {
						for (RelatorioDocumentosAReceberBean beanUni : beansPorUnidade) {
							if (beanUni.getIdUnidade().intValue() == idUnidadeAnterior
									.intValue()) {
								retorno.add(beanUni);
							}
						}
					}
				}
				for (RelatorioDocumentosAReceberBean beanEst : beansPorEstado) {
					retorno.add(beanEst);
				}
				idUnidadeAnterior = null;
				idGerenciaAnterior = null;
				break;
			// Gerência Regional
			case 6:
				retorno = beansPorGerencia;
				break;
			// Gerência Regional por Localidade
			case 7:
				for (Iterator iteraLocalidades = beansPorLocalidade.iterator(); iteraLocalidades
						.hasNext();) {

					RelatorioDocumentosAReceberBean beanLoc = (RelatorioDocumentosAReceberBean) iteraLocalidades
							.next();

					// INICIALIZA ID DA PRIMEIRA GERENCIA
					if (idGerenciaAnterior == null) {
						idGerenciaAnterior = beanLoc.getIdGerencia();
					}

					if (idGerenciaAnterior.intValue() == beanLoc
							.getIdGerencia().intValue()) {
						retorno.add(beanLoc);
					} else {
						for (RelatorioDocumentosAReceberBean beanGer : beansPorGerencia) {
							if (beanGer.getIdGerencia().intValue() == idGerenciaAnterior
									.intValue()) {
								retorno.add(beanGer);
							}
						}
						idGerenciaAnterior = beanLoc.getIdGerencia();
						retorno.add(beanLoc);
					}

					if (!iteraLocalidades.hasNext()) {
						for (RelatorioDocumentosAReceberBean beanGer : beansPorGerencia) {
							if (beanGer.getIdGerencia().intValue() == idGerenciaAnterior
									.intValue()) {
								retorno.add(beanGer);
							}
						}
					}
				}
				idUnidadeAnterior = null;
				idGerenciaAnterior = null;
				break;
			// Unidade de Negócio
			case 8:
				retorno = beansPorUnidade;
				break;
			// Unidade de Negócio por Localidade
			case 9:
				for (Iterator iteraLocalidades = beansPorLocalidade.iterator(); iteraLocalidades
						.hasNext();) {

					RelatorioDocumentosAReceberBean beanLoc = (RelatorioDocumentosAReceberBean) iteraLocalidades
							.next();

					// INICIALIZA ID DA PRIMEIRA UNIDADE
					if (idUnidadeAnterior == null) {
						idUnidadeAnterior = beanLoc.getIdUnidade();
					}

					if (idUnidadeAnterior.intValue() == beanLoc.getIdUnidade()
							.intValue()) {
						retorno.add(beanLoc);
					} else {
						for (RelatorioDocumentosAReceberBean beanUni : beansPorUnidade) {
							if (beanUni.getIdUnidade().intValue() == idUnidadeAnterior
									.intValue()) {
								retorno.add(beanUni);
							}
						}
						idUnidadeAnterior = beanLoc.getIdUnidade();
						retorno.add(beanLoc);
					}

					if (!iteraLocalidades.hasNext()) {
						for (RelatorioDocumentosAReceberBean beanUni : beansPorUnidade) {
							if (beanUni.getIdUnidade().intValue() == idUnidadeAnterior
									.intValue()) {
								retorno.add(beanUni);
							}
						}
					}
				}
				idUnidadeAnterior = null;
				idGerenciaAnterior = null;
				break;
			// Localidade
			case 10:
				retorno = beansPorLocalidade;
				break;
			default:
				break;
			}
		} catch (ErroRepositorioException e) {
			throw new ControladorException("erro.sistema", e);
		}

		return retorno;
	}
	
	private RelatorioDocumentosAReceberBean criarBeanRelatorioDocumentosAReceber(
			Integer idGerencia, String nomeGerencia, Integer idUnidade,
			String nomeUnidade, Integer idLocalidade, String nomeLocalidade,
			Integer idDocumentoTipo, String nomeDocumentoTipo,
			Integer idSituacao, String descricaoSituacao,
			Integer qtdDocumentosRes, BigDecimal valorDocumentosRes,
			Integer qtdDocumentosCom, BigDecimal valorDocumentosCom,
			Integer qtdDocumentosInd, BigDecimal valorDocumentosInd,
			Integer qtdDocumentosTot, BigDecimal valorDocumentosTot,
			Integer qtdDocumentosPub, BigDecimal valorDocumentosPub,
			String descricaTotalizacao, String indicadorTotal, String faixa) {

		RelatorioDocumentosAReceberBean bean = new RelatorioDocumentosAReceberBean();

		bean.setIdDocumentoTipo(idDocumentoTipo);
		bean.setNomeDocumentoTipo(nomeDocumentoTipo);
		bean.setIdSituacao(idSituacao);
		bean.setDescricaoSituacao(descricaoSituacao);
		bean.setIdGerencia(idGerencia);
		bean.setNomeGerencia(nomeGerencia);
		bean.setIdUnidade(idUnidade);
		bean.setNomeUnidade(nomeUnidade);
		bean.setIdLocalidade(idLocalidade);
		bean.setNomeLocalidade(nomeLocalidade);
		bean.setFaixa(faixa);
		bean.setIndicadorTotal(indicadorTotal);
		bean.setIdSituacao(idSituacao);
		bean.setDescricaoSituacao(descricaoSituacao);
		bean.setDescricaTotalizacao(descricaTotalizacao);
		bean.setQtdDocumentosRes(qtdDocumentosRes);
		bean.setValorDocumentosRes(valorDocumentosRes);
		bean.setQtdDocumentosCom(qtdDocumentosCom);
		bean.setValorDocumentosCom(valorDocumentosCom);
		bean.setQtdDocumentosInd(qtdDocumentosInd);
		bean.setValorDocumentosInd(valorDocumentosInd);
		bean.setQtdDocumentosTot(qtdDocumentosTot);
		bean.setValorDocumentosTot(valorDocumentosTot);
		bean.setQtdDocumentosPub(qtdDocumentosPub);
		bean.setValorDocumentosPub(valorDocumentosPub);

		return bean;

	}
	
	/** 
	 * [UC990] Count Relatório de Documentos a Receber
	 *
	 * @author Hugo Amorim
	 * @date 22/02/2010
	 *
	 */
	public Integer countRelatorioDocumentosAReceber(
			FiltroRelatorioDocumentosAReceberHelper helper)
		throws ControladorException{

		Integer retorno = new Integer(0);

		try {
			retorno = this.repositorioCobranca.countRelatorioDocumentosAReceber(helper);
		} catch (ErroRepositorioException e) {
			throw new ControladorException("erro.sistema", e);
		}	
			
		return retorno;
	}


	
	
	/**
	 * 
	 * Calcula Valor total de debitos
	 * 	
	 * 		Valor Contas + Valor Debitos + Valor Guias - Creditos				
	 * 
	 * @author Hugo Amorim
	 * @param debitoImovelClienteHelper
	 * @return Valor Total de Debitos
	 */
	public BigDecimal calcularValorTotalDebitos(
			ObterDebitoImovelOuClienteHelper debitoImovelClienteHelper) {

		BigDecimal valorTotal = BigDecimal.ZERO;

		if (debitoImovelClienteHelper != null) {

			BigDecimal valorConta = BigDecimal.ZERO;
			BigDecimal valorDebitoACobrar = BigDecimal.ZERO;
			BigDecimal valorGuiaPagamento = BigDecimal.ZERO;
			BigDecimal valorCreditoARealizar = BigDecimal.ZERO;

			ContaValoresHelper dadosConta = null;
			DebitoACobrar dadosDebito = null;
			CreditoARealizar dadosCredito = null;
			GuiaPagamentoValoresHelper dadosGuiaPagamentoValoresHelper = null;

			Collection<ContaValoresHelper> colecaoContaValores = debitoImovelClienteHelper
					.getColecaoContasValores();
			if (colecaoContaValores != null && !colecaoContaValores.isEmpty()) {

				Iterator<ContaValoresHelper> colecaoContaValoresIterator = colecaoContaValores
						.iterator();

				// percorre a colecao de conta somando o valor para obter um
				// valor total
				while (colecaoContaValoresIterator.hasNext()) {

					dadosConta = (ContaValoresHelper) colecaoContaValoresIterator
							.next();
					valorConta = valorConta.add(dadosConta.getConta()
							.getValorTotal());
				}
			}

			Collection<DebitoACobrar> colecaoDebitoACobrar = debitoImovelClienteHelper
					.getColecaoDebitoACobrar();

			if (colecaoDebitoACobrar != null && !colecaoDebitoACobrar.isEmpty()) {
				Iterator<DebitoACobrar> colecaoDebitoACobrarIterator = colecaoDebitoACobrar
						.iterator();

				// percorre a colecao de debito a cobrar somando o valor para
				// obter um valor total
				while (colecaoDebitoACobrarIterator.hasNext()) {

					dadosDebito = (DebitoACobrar) colecaoDebitoACobrarIterator
							.next();
					// alterado por Vivianne Sousa data:11/04/2008
					// analista :Adriano
					valorDebitoACobrar = valorDebitoACobrar.add(dadosDebito
							.getValorTotalComBonus());
				}
			}

			Collection<CreditoARealizar> colecaoCreditoARealizar = debitoImovelClienteHelper
					.getColecaoCreditoARealizar();

			if (colecaoCreditoARealizar != null
					&& !colecaoCreditoARealizar.isEmpty()) {

				Iterator<CreditoARealizar> colecaoCreditoARealizarIterator = colecaoCreditoARealizar
						.iterator();

				// percorre a colecao de credito a realizar somando o valor para
				// obter um valor total
				while (colecaoCreditoARealizarIterator.hasNext()) {

					dadosCredito = (CreditoARealizar) colecaoCreditoARealizarIterator
							.next();
					// alterado por Vivianne Sousa data:11/04/2008
					// analista :Adriano
					valorCreditoARealizar = valorCreditoARealizar
							.add(dadosCredito.getValorTotalComBonus());

				}
			}

			Collection<GuiaPagamentoValoresHelper> colecaoGuiaPagamentoValores = debitoImovelClienteHelper
					.getColecaoGuiasPagamentoValores();

			if (colecaoGuiaPagamentoValores != null
					&& !colecaoGuiaPagamentoValores.isEmpty()) {
				Iterator<GuiaPagamentoValoresHelper> colecaoGuiaPagamentoValoresHelperIterator = colecaoGuiaPagamentoValores
						.iterator();

				// percorre a colecao de guia de pagamento somando o valor para
				// obter um valor total
				while (colecaoGuiaPagamentoValoresHelperIterator.hasNext()) {

					dadosGuiaPagamentoValoresHelper = (GuiaPagamentoValoresHelper) colecaoGuiaPagamentoValoresHelperIterator
							.next();

					valorGuiaPagamento = valorGuiaPagamento
							.add(dadosGuiaPagamentoValoresHelper
									.getGuiaPagamento().getValorDebito());
				}
			}

			valorTotal = valorConta.add(valorDebitoACobrar);
			valorTotal = valorTotal.add(valorGuiaPagamento);
			valorTotal = valorTotal.subtract(valorCreditoARealizar);

		}// fim do if debitoImovelClienteHelper != null

		return valorTotal;
	}
	
	/**
	 * 
	 * Calcula Valor Contas de debitos
	 * 	
	 * @author Hugo Amorim
	 * @param debitoImovelClienteHelper
	 * @return Valor Total de Debitos
	 */
	public BigDecimal calcularValorContas(
			ObterDebitoImovelOuClienteHelper debitoImovelClienteHelper) {

		BigDecimal valorConta = BigDecimal.ZERO;

		if (debitoImovelClienteHelper != null) {

			ContaValoresHelper dadosConta = null;

			Collection<ContaValoresHelper> colecaoContaValores = 
				debitoImovelClienteHelper.getColecaoContasValores();
			
			if (colecaoContaValores != null && !colecaoContaValores.isEmpty()) {

				Iterator<ContaValoresHelper> colecaoContaValoresIterator = colecaoContaValores
						.iterator();

				// percorre a colecao de conta somando o valor para obter um
				// valor total
				while (colecaoContaValoresIterator.hasNext()) {

					dadosConta = (ContaValoresHelper) colecaoContaValoresIterator
							.next();
					valorConta = valorConta.add(dadosConta.getConta()
							.getValorTotal());
				}
			}

		}// fim do if debitoImovelClienteHelper != null

		return valorConta;
	}
	
	
	/**
	 * [UC0630] Solicitar Emissão do Extrato de Débitos 
	 *
	 * @author Raphael Rossiter
	 * @date 30/03/2010
	 *
	 * @param debitoACobrar
	 * @param quantidadeParcelas
	 * @throws ControladorException
	 */
	public void verificarQuantidadeParcelasInformada(DebitoACobrar debitoACobrar,
			Short quantidadeParcelas) throws ControladorException{
		
		/*
		 * Caso a quantidade de parcelas informadas seja mais que a quantidade que falta cobrar 
		 * (quantidade informada maior que (DBAC_NNPRESTACAODEBITO ? (DBAC_NNPRESTACAOCOBRADAS 
		 * + DBAC_NNPARCELABONUS)).
		 */
		if (quantidadeParcelas.shortValue() > debitoACobrar.getNumeroPrestacaoRestante()){
			throw new ControladorException("atencao.quantidade_parcelas_informadas_maior");
		}
		
		/*
		 * Caso a quantidade de parcelas informadas seja igual a quantidade que falta cobrar 
		 * (quantidade informada igual que (DBAC_NNPRESTACAODEBITO ? (DBAC_NNPRESTACAOCOBRADAS + 
		 * DBAC_NNPARCELABONUS)).
		 */
		if (quantidadeParcelas.shortValue() == debitoACobrar.getNumeroPrestacaoRestante()){
			throw new ControladorException("atencao.quantidade_parcelas_informadas_igual");
		}
	}
	
	
	/**
	 * [UC0927] ? Confirmar Cartão de Crédito/Débito
	 * 
	 * [SB0004] ? Incluir Dados da Confirmação dos Pagamentos
	 *
	 * @author Raphael Rossiter
	 * @date 03/05/2010
	 *
	 * @param creditoARealizarGeral
	 * @param avisoBancario
	 * @return Devolucao
	 * @throws ControladorException
	 */
	public Devolucao gerarDevolucaoCreditoARealizarCartaoDebito(CreditoARealizarGeral creditoARealizarGeral, AvisoBancario avisoBancario)
		throws ControladorException{
	
		Devolucao devolucao = new Devolucao();
	
		FiltroCreditoARealizar filtroCreditoARealizar = new FiltroCreditoARealizar();
	
		filtroCreditoARealizar.adicionarCaminhoParaCarregamentoEntidade("imovel");
		filtroCreditoARealizar.adicionarCaminhoParaCarregamentoEntidade("localidade");
	
		filtroCreditoARealizar.adicionarParametro(new ParametroSimples(FiltroCreditoARealizar.ID, creditoARealizarGeral.getId()));
		Collection colecaoCreditoARealizar = getControladorUtil().pesquisar(filtroCreditoARealizar, 
	    CreditoARealizar.class.getName());
	
		CreditoARealizar creditoARealizar = (CreditoARealizar)Util.retonarObjetoDeColecao(colecaoCreditoARealizar);
		
		if (creditoARealizar == null){
			creditoARealizar = creditoARealizarGeral.getCreditoARealizar();
		}
	
		devolucao.setAvisoBancario(avisoBancario);
		devolucao.setDataDevolucao(avisoBancario.getDataLancamento());
		devolucao.setAnoMesReferenciaArrecadacao(avisoBancario.getAnoMesReferenciaArrecadacao());
		devolucao.setValorDevolucao(creditoARealizar.getValorTotalComBonus());
		devolucao.setLocalidade(creditoARealizar.getLocalidade());
		devolucao.setImovel(creditoARealizar.getImovel());
		DebitoTipo debitoTipo = new DebitoTipo();
		debitoTipo.setId(DebitoTipo.OUTROS);
		devolucao.setDebitoTipo(debitoTipo);
	
		devolucao.setCreditoARealizarGeral(creditoARealizarGeral);
	
		devolucao.setUltimaAlteracao(new Date());
	
		return devolucao;
	}

	
	/**
	 * [UC0251] Gerar Atividade de Ação de Cobrança  step1
	 *
	 * @author Pedro Alexandre, Ivan Sergio, Raphael Rossiter,Vivianne Sousa
	 * @date 01/02/2006, 18/05/2009, 20/07/2009 , 05/04/2010
	 *
	 */
	public void gerarAtividadeAcaoCobranca(
			CobrancaAcaoAtividadeCronograma cobrancaAcaoAtividadeCronograma,
			CobrancaAcaoAtividadeComando cobrancaAcaoAtividadeComando,
			Rota rota, CobrancaAcao acaoCobranca,
			CobrancaAtividade atividadeCobranca, Integer indicadorCriterio,
			CobrancaCriterio criterioCobranca, Cliente cliente,
			ClienteRelacaoTipo relacaoClienteImovel,
			String anoMesReferenciaInicial, String anoMesReferenciaFinal,
			Date dataVencimentoInicial, Date dataVencimentoFinal,
			Date dataAtual, int idFuncionalidadeIniciada,Cliente clienteSuperior,
			Integer idCobrancaDocumentoControleGeracao,
			Integer quantidadeDiasVencimento,
			Integer ligacaoAlteradaDebito)
			throws ControladorException {

		int idUnidadeIniciada = 0;
		System.out.println("*********************************");
		System.out.println("INICIO DO GERAR ACAO DE COBRANCA");
		System.out.println("*********************************");
		
		if (cliente != null || clienteSuperior != null ||
			(cobrancaAcaoAtividadeComando!= null &&	cobrancaAcaoAtividadeComando.getLogradouro()!=null)) {
			
			idUnidadeIniciada = getControladorBatch().iniciarUnidadeProcessamentoBatch(
					idFuncionalidadeIniciada,UnidadeProcessamento.FUNCIONALIDADE, 0);
		}
		else if (rota == null){
			idUnidadeIniciada = getControladorBatch().iniciarUnidadeProcessamentoBatch(
					idFuncionalidadeIniciada,UnidadeProcessamento.FUNCIONALIDADE, 0);
		}
		else{
			idUnidadeIniciada = getControladorBatch().iniciarUnidadeProcessamentoBatch(
					idFuncionalidadeIniciada,UnidadeProcessamento.ROTA, rota.getId());
		}
		
		try {

			Collection<CobrancaCriterioLinha> colecaoCobrancaCriterioLinhaComando = null;

			// se o indicador do critério for igual a 2(dois) - "usa o critério do comando"
			if (indicadorCriterio.intValue() == 2) {

				try {
					colecaoCobrancaCriterioLinhaComando = repositorioCobranca
							.pesquisarCobrancaCriterioLinhaCriterio(criterioCobranca.getId());
					
				} catch (ErroRepositorioException ex) {
					ex.printStackTrace();
					throw new ControladorException("erro.sistema", ex);
				}

			}
			if (colecaoCobrancaCriterioLinhaComando != null) {
				System.out.println("*********************************");
				System.out.println("QTD DE COBRANCA CRITERIO LINHA:" + colecaoCobrancaCriterioLinhaComando.size());
				System.out.println("*********************************");
			}
			
			if (cobrancaAcaoAtividadeComando != null && cobrancaAcaoAtividadeComando.getId() != null) {
				Collection colecaoAtivImoveis = repositorioCobranca.obterImoveisComandoAtividadeImovel(null,cobrancaAcaoAtividadeComando.getId());
				
				//4. Caso tenha sido informada uma relação de imóveis a partir do arquivo texto
				if(colecaoAtivImoveis != null && colecaoAtivImoveis.size() > 0){
					
					//gerar a atividade de ação de cobrança para os imóveis informados
					//[SB0008 - Gerar Atividade de Ação de Cobrança para a Relação de Imóveis do Arquivo]
					System.out.println("*********************************");
					System.out.println("INICIO gerarAtividadeAcaoCobrancaParaRelacaoImoveisArquivo:");
					System.out.println("*********************************");
					this.gerarAtividadeAcaoCobrancaParaRelacaoImoveisArquivo(
									cobrancaAcaoAtividadeCronograma,
									cobrancaAcaoAtividadeComando, cliente,
									relacaoClienteImovel, indicadorCriterio,
									acaoCobranca, atividadeCobranca,
									colecaoCobrancaCriterioLinhaComando,
									criterioCobranca, anoMesReferenciaInicial,
									anoMesReferenciaFinal, dataVencimentoInicial,
									dataVencimentoFinal, dataAtual,clienteSuperior,
									idCobrancaDocumentoControleGeracao,
									quantidadeDiasVencimento,
									ligacaoAlteradaDebito);
					System.out.println("*********************************");
					System.out.println("FIM gerarAtividadeAcaoCobrancaParaRelacaoImoveisArquivo:");
					System.out.println("*********************************");
					
				}
			}

			// se o cliente for informado
			if (cliente != null || clienteSuperior != null) {
				// [SB0001] - Gerar Atividade de Ação de Cobrança para os Imóveis do Cliente
				System.out.println("*********************************");
				System.out.println("INICIO gerarAtividadeAcaoCobrancaParaImoveisCliente:");
				System.out.println("*********************************");
				this.gerarAtividadeAcaoCobrancaParaImoveisCliente(
								cobrancaAcaoAtividadeCronograma,
								cobrancaAcaoAtividadeComando, cliente,
								relacaoClienteImovel, indicadorCriterio,
								acaoCobranca, atividadeCobranca,
								colecaoCobrancaCriterioLinhaComando,
								criterioCobranca, anoMesReferenciaInicial,
								anoMesReferenciaFinal, dataVencimentoInicial,
								dataVencimentoFinal, dataAtual,clienteSuperior,
								idCobrancaDocumentoControleGeracao);
				System.out.println("*********************************");
				System.out.println("FIM gerarAtividadeAcaoCobrancaParaImoveisCliente:");
				System.out.println("*********************************");
			} else if(cobrancaAcaoAtividadeComando!=null &&
					cobrancaAcaoAtividadeComando.getLogradouro()!=null){
				// Gerar Atividade de Ação de Cobrança para os Imóveis do Logradouro
				System.out.println("*********************************");
				System.out.println("INICIO gerarAtividadeAcaoCobrancaParaImoveisLogradouro:");
				System.out.println("*********************************");
				this.gerarAtividadeAcaoCobrancaParaImoveisLogradouro(
								cobrancaAcaoAtividadeCronograma,
								cobrancaAcaoAtividadeComando, cliente,
								relacaoClienteImovel, indicadorCriterio,
								acaoCobranca, atividadeCobranca,
								colecaoCobrancaCriterioLinhaComando,
								criterioCobranca, anoMesReferenciaInicial,
								anoMesReferenciaFinal, dataVencimentoInicial,
								dataVencimentoFinal, dataAtual,clienteSuperior,
								idCobrancaDocumentoControleGeracao);
				System.out.println("*********************************");
				System.out.println("FIM gerarAtividadeAcaoCobrancaParaImoveisLogradouro:");
				System.out.println("*********************************");
				
				
				
			} else {
				// [SB0002] - Gerar Atividade de Ação de Cobrança para os imóveis da Lista de Rotas
				Integer quantidadeMaxima = this.consideraQuantidadeMaximaDocumentos(
						cobrancaAcaoAtividadeCronograma, cobrancaAcaoAtividadeComando, acaoCobranca);
				
				if(quantidadeMaxima != null){
					
					System.out.println("*************************");
		            System.out.println("INICIO gerarAtividadeAcaoCobrancaParaImoveisListaRotasComQuantidadeMaxima");
		            System.out.println("*************************");
					
		            /*
		             * Colocado por Raphael Rossiter em 25/10/2011
		             * Motivo: Usuário estava comandando grupos de cobrança sem que o mesmo esteja associado a pelo menos 1 rota.
		             */
		            if (rota != null){
		            	
		            	this.gerarAtividadeAcaoCobrancaParaImoveisListaRotasComQuantidadeMaxima(
								cobrancaAcaoAtividadeCronograma,
								cobrancaAcaoAtividadeComando, rota,
								indicadorCriterio, acaoCobranca,
								atividadeCobranca,
								colecaoCobrancaCriterioLinhaComando,
								criterioCobranca, anoMesReferenciaInicial,
								anoMesReferenciaFinal, dataVencimentoInicial,
								dataVencimentoFinal, dataAtual, quantidadeMaxima,
								idCobrancaDocumentoControleGeracao);
		            }
		            
				}else{

					System.out.println("*************************");
		            System.out.println("INICIO gerarAtividadeAcaoCobrancaParaImoveisListaRotasSemQuantidadeMaxima");
		            System.out.println("*************************");
		            
		            /*
		             * Colocado por Raphael Rossiter em 25/10/2011
		             * Motivo: Usuário estava comandando grupos de cobrança sem que o mesmo esteja associado a pelo menos 1 rota.
		             */
		            if (rota != null){
		            	
		            	this.gerarAtividadeAcaoCobrancaParaImoveisListaRotasSemQuantidadeMaxima(
								cobrancaAcaoAtividadeCronograma,
								cobrancaAcaoAtividadeComando, rota,
								indicadorCriterio, acaoCobranca,
								atividadeCobranca,
								colecaoCobrancaCriterioLinhaComando,
								criterioCobranca, anoMesReferenciaInicial,
								anoMesReferenciaFinal, dataVencimentoInicial,
								dataVencimentoFinal, dataAtual, 
								idCobrancaDocumentoControleGeracao);
		            }
				}

				System.out.println("*********************************");
				System.out.println("FIM gerarAtividadeAcaoCobrancaParaImoveisListaRotas:");
				System.out.println("*********************************");
			}

			getControladorBatch().encerrarUnidadeProcessamentoBatch(null, idUnidadeIniciada, false);

		} catch (Throwable e) {
			// Este catch serve para interceptar qualquer exceção que o processo
			// batch venha a lançar e garantir que a unidade de processamento do
			// batch será atualizada com o erro ocorrido

			e.printStackTrace();

			getControladorBatch().encerrarUnidadeProcessamentoBatch(e, idUnidadeIniciada, true);

			throw new ControladorException("erro.sistema",e);
		}

	}
	
	/**
	 * 
	 * Este caso de uso permite a emissão de um ou mais documentos de cobrança
	 * 
	 * @author Hugo Amorim, Mariana Victor
	 * @data 22/04/2010, 16/03/2011
	 * 
	 * @param
	 * @return void
	 */
	public void gerarDocumentoCobrancaImpressaoCartasCampanha(
			CobrancaAcaoAtividadeCronograma cobrancaAcaoAtividadeCronograma,
			CobrancaAcaoAtividadeComando cobrancaAcaoAtividadeComando,
			Date dataAtualPesquisa, CobrancaAcao acaoCobranca,
			CobrancaGrupo grupoCobranca, CobrancaCriterio cobrancaCriterio)
			throws ControladorException {
		
		SistemaParametro sistemaParametro = this.getControladorUtil().pesquisarParametrosDoSistema();
		
		List<CobrancaDocumento> listaDocumentoFormatoPadrao = new ArrayList();
		List<CobrancaDocumento> listaDocumentoFichaCompensacao = new ArrayList();
		
		ResolucaoDiretoria resolucaoDiretoria = new ResolucaoDiretoria();
		resolucaoDiretoria.setId(14);
		
		boolean flagFimPesquisa = false;
		final int quantidadeCobrancaDocumento = 1000;
		int quantidadeCobrancaDocumentoInicio = 0;

		int sequencialImpressao = 0;
		Collection colecaoCobrancaDocumento = null;


		Integer idCronogramaAtividadeAcaoCobranca = null;
		Integer idComandoAtividadeAcaoCobranca = null;
		Integer idAcaoCobranca = null;
		if (cobrancaAcaoAtividadeCronograma != null
				&& cobrancaAcaoAtividadeCronograma.getId() != null) {
			idCronogramaAtividadeAcaoCobranca = cobrancaAcaoAtividadeCronograma.getId();
		}
		if (cobrancaAcaoAtividadeComando != null
				&& cobrancaAcaoAtividadeComando.getId() != null) {
			idComandoAtividadeAcaoCobranca = cobrancaAcaoAtividadeComando.getId();
		}
		if (acaoCobranca != null && acaoCobranca.getId() != null) {
			idAcaoCobranca = acaoCobranca.getId();
		}

		while (!flagFimPesquisa) {
			// map que armazena o sequencial e o numero da
			// conta para no final atualizar todos os sequencias

			try {

				System.out.println("***************************************");
				System.out.println("ENTROU NO CARTAS");
				System.out.println("***************************************");
				colecaoCobrancaDocumento = repositorioCobranca
						.pesquisarCobrancaDocumentoParaEmitir(
								idCronogramaAtividadeAcaoCobranca,
								idComandoAtividadeAcaoCobranca,
								dataAtualPesquisa, idAcaoCobranca,
								quantidadeCobrancaDocumentoInicio);
				System.out.println("***************************************");
				System.out.println("QTD DE COBRANCA DOCUMENTO:"	+ colecaoCobrancaDocumento.size());
				System.out.println("***************************************");
			} catch (ErroRepositorioException ex) {
				ex.printStackTrace();
				throw new ControladorException("erro.sistema", ex);
			}

			if (colecaoCobrancaDocumento != null
					&& !colecaoCobrancaDocumento.isEmpty()) {

				System.out.println("***************************************");
				System.out.println("QUANTIDADE COBRANÇA:" + colecaoCobrancaDocumento.size());
				System.out.println("***************************************");

				if (colecaoCobrancaDocumento.size() < quantidadeCobrancaDocumento) {
					flagFimPesquisa = true;
				} else {
					quantidadeCobrancaDocumentoInicio = quantidadeCobrancaDocumentoInicio + 1000;
				}
				
				Iterator it = colecaoCobrancaDocumento.iterator();
				
				while (it.hasNext()) {
					CobrancaDocumento cobrancaDocumento = (CobrancaDocumento) it.next();
					
					// 2. Caso a empresa tenha estabelecido um valor padrão para emissão de demonstrativo de parcelamento no formato de ficha de compensação 
					if (sistemaParametro.getValorDemonstrativoParcelamentoFichaComp() != null
							&& !sistemaParametro.getValorDemonstrativoParcelamentoFichaComp().equals(
									BigDecimal.ZERO)) {
						BigDecimal valorDocumento = this.obterValorDoDocumento(cobrancaDocumento);
						
						// 2.1.1. Caso o valor do documento seja inferior ao valor padrão para
						// emissão de demonstrativo de parcelamento no formato de ficha de compensação  
						if (valorDocumento.compareTo(
								sistemaParametro.getValorDemonstrativoParcelamentoFichaComp()) < 0) {
							listaDocumentoFormatoPadrao.add(cobrancaDocumento);
						} else {
							listaDocumentoFichaCompensacao.add(cobrancaDocumento);
						}
						
					}
					// 3. Caso contrário, ou seja, a empresa não tenha estabelecido um valor padrão para emissão de demonstrativo de parcelamento no formato de ficha de compensação
					else { 
						listaDocumentoFormatoPadrao.add(cobrancaDocumento);
					}
					
				}	
							
			} else {
				flagFimPesquisa = true;
			}

		}
		
		// 4. Para cada documento de cobrança da lista Lista de Documentos em Formato Padrão
		if (listaDocumentoFormatoPadrao != null && !listaDocumentoFormatoPadrao.isEmpty()) {
			
			Iterator iterator = listaDocumentoFormatoPadrao.iterator();
			
			while (iterator.hasNext()) {
				CobrancaDocumento cobrancaDocumento = (CobrancaDocumento) iterator.next();

				String[] retorno = this.gerarDadosComunsFormatosPadraoFichaCompensacao(cobrancaDocumento,
						acaoCobranca, cobrancaAcaoAtividadeComando, resolucaoDiretoria, sequencialImpressao);
				
				if (retorno != null
						&& retorno[0] != null
						&& retorno[1] != null) {
					String txtString = retorno[0];
					
					String sequencialImpressaoStr = retorno[1];
					
					try {
						
						repositorioCobranca.inserirDocumentoCobrancaImpressao(
								cobrancaDocumento.getId(),
								txtString,
								idComandoAtividadeAcaoCobranca,
								idCronogramaAtividadeAcaoCobranca,
								new Integer(sequencialImpressaoStr));
						
					} catch (ErroRepositorioException e) {
						e.printStackTrace();
					}
					
					sequencialImpressao++;
				}
			}
		}
		
		// 5. Para cada documento de cobrança da Lista de Documentos em Ficha de Compensação
		if (listaDocumentoFichaCompensacao != null && !listaDocumentoFichaCompensacao.isEmpty()) {
			Iterator iterator = listaDocumentoFichaCompensacao.iterator();
			
			while (iterator.hasNext()) {
				CobrancaDocumento cobrancaDocumento = (CobrancaDocumento) iterator.next();

				// [SB0002 ? Gerar Dados Comuns aos Formatos Padrão e Ficha de Compensação]
				String[] retorno = this.gerarDadosComunsFormatosPadraoFichaCompensacao(cobrancaDocumento,
						acaoCobranca, cobrancaAcaoAtividadeComando, resolucaoDiretoria, sequencialImpressao);

				String txtString = retorno[0];
				String sequencialImpressaoStr = retorno[1];
				
				// [SB0003 ? Gerar Dados Próprios do Formato Ficha de Compensação]
				String txtStringFichaCompensacao = this.gerarDadosPropriosFormatoFichaCompensacao(cobrancaDocumento);
				
				try {
					repositorioCobranca.inserirDocumentoCobrancaImpressaoFichaCompensasao(
							cobrancaDocumento.getId(),
							txtString, txtStringFichaCompensacao,
							idComandoAtividadeAcaoCobranca,
							idCronogramaAtividadeAcaoCobranca,
							new Integer(sequencialImpressaoStr));

				} catch (ErroRepositorioException e) {
					e.printStackTrace();
				}
				
				sequencialImpressao++;
					
			}
		}
		
		System.out.println("***************************************");
		System.out.println("FINAL GERAR DOCUMENTO COBRANCA IMPRESSAO");
		System.out.println("***************************************");
	
	}
	
	
	/**
	 * [UC0968] Emitir Cartas da Campanha de Final de Ano 2009
	 * 
	 * [SB0002] ? Gerar Dados Comuns aos Formatos Padrão e Ficha de Compensação
	 * 
	 * @param
	 * @return String[]
	 * */
	private String[] gerarDadosComunsFormatosPadraoFichaCompensacao(CobrancaDocumento cobrancaDocumento,
			CobrancaAcao acaoCobranca, CobrancaAcaoAtividadeComando cobrancaAcaoAtividadeComando,
			ResolucaoDiretoria resolucaoDiretoria, int sequencialImpressao) throws ControladorException {
		StringBuilder cobrancaDocumentoTxt = new StringBuilder();
		
		Imovel imovel = cobrancaDocumento.getImovel();
		
		int indicadorDebitoImovel = ConstantesSistema.SIM.intValue();
		int indicadorPagamento = ConstantesSistema.SIM.intValue();
		int indicadorConta = ConstantesSistema.NAO.intValue();
		int indicadorDebitoACobrar = acaoCobranca.getIndicadorCobrancaDebACobrar();
		int indicadorCreditoARalizar = acaoCobranca.getIndicadorCreditosARealizar().intValue();
		int indicadorNotasPromissorias = acaoCobranca.getIndicadorNotasPromissoria().intValue();
		int indicadorGuiaPagamento = ConstantesSistema.SIM.intValue();
		int indicadorCalcularAcrescimoImpontualidade = acaoCobranca.getIndicadorAcrescimoImpontualidade().intValue();
		
		//[SB0001]-Verificar se o imóvel possue débitos que satisfaça
		ObterDebitoImovelOuClienteHelper obterDebitoImovelOuCliente = obterDebitoImovelOuCliente(
					indicadorDebitoImovel, // Indicador de débito do imóvel
					imovel.getId().toString(), // Matrícula do imóvel
					null, // Código do cliente
					null, // Tipo de relação cliente imóvel
					cobrancaAcaoAtividadeComando
						.getAnoMesReferenciaContaInicial().toString(), // Referência inicial do débito
					cobrancaAcaoAtividadeComando
						.getAnoMesReferenciaContaFinal().toString(), // Referência final do débito
					cobrancaAcaoAtividadeComando
						.getDataVencimentoContaInicial(), // Inicio Vencimento
					cobrancaAcaoAtividadeComando
						.getDataVencimentoContaFinal(), // Final Vencimento
					indicadorPagamento, indicadorConta,
					indicadorDebitoACobrar, indicadorCreditoARalizar,
					indicadorNotasPromissorias, indicadorGuiaPagamento,
					indicadorCalcularAcrescimoImpontualidade, null);

			
			//BigDecimal valorAcrescimosImpontualidadeTotal = BigDecimal.ZERO;
			//BigDecimal valorTotalContas = BigDecimal.ZERO;
			BigDecimal valorDebitoTotalAtualizado = BigDecimal.ZERO;
			BigDecimal valorTotalGuiasPagamento = BigDecimal.ZERO;
			BigDecimal valorTotalRestanteServicosACobrar = BigDecimal.ZERO;
			BigDecimal valorTotalRestanteParcelamentosACobrar = BigDecimal.ZERO;
			BigDecimal valorCreditoARealizar = BigDecimal.ZERO;
			BigDecimal valorTotalMultasDasContas = BigDecimal.ZERO; 
			BigDecimal valorTotalJurosMoraDasContas = BigDecimal.ZERO;
			BigDecimal valorTotalAtualizacoesMonetariasDasContas = BigDecimal.ZERO;
			BigDecimal descontoTotalPagamentoAVista = new BigDecimal("0.00");   
			BigDecimal valorPagamentoAVista = new BigDecimal("0.00");   
			BigDecimal valorTotalImpostosConta = new BigDecimal("0.00");
			
			IndicadoresParcelamentoHelper indicadoresParcelamentoHelper = 
				new IndicadoresParcelamentoHelper();
			
			indicadoresParcelamentoHelper.setIndicadorDebitosACobrar(indicadorDebitoACobrar);
			indicadoresParcelamentoHelper.setIndicadorCreditoARealizar(indicadorCreditoARalizar);
			indicadoresParcelamentoHelper.setIndicadorGuiasPagamento(indicadorGuiaPagamento);
			indicadoresParcelamentoHelper.setIndicadorAcrescimosImpotualidade(indicadorCalcularAcrescimoImpontualidade);
			indicadoresParcelamentoHelper.setIndicadorContasRevisao(indicadorConta);
			indicadoresParcelamentoHelper.setIndicadorDividaAtiva(new Integer("3"));
			
			Object[] valorDebitoTotalEAcrescimoImpontualidadeTotal = calcularValorTotalDebitoAtualizadoParaParcelamento(
					obterDebitoImovelOuCliente,	indicadoresParcelamentoHelper, false);
			
			if(valorDebitoTotalEAcrescimoImpontualidadeTotal != null){
				
				valorDebitoTotalAtualizado = (BigDecimal)valorDebitoTotalEAcrescimoImpontualidadeTotal[0];
				//valorAcrescimosImpontualidadeTotal = (BigDecimal)valorDebitoTotalEAcrescimoImpontualidadeTotal[1];
				//valorTotalContas = (BigDecimal)valorDebitoTotalEAcrescimoImpontualidadeTotal[2];
				valorTotalGuiasPagamento = (BigDecimal)valorDebitoTotalEAcrescimoImpontualidadeTotal[3];
				valorTotalRestanteServicosACobrar = (BigDecimal)valorDebitoTotalEAcrescimoImpontualidadeTotal[4];
				valorTotalRestanteParcelamentosACobrar = (BigDecimal)valorDebitoTotalEAcrescimoImpontualidadeTotal[5];
				valorCreditoARealizar = (BigDecimal)valorDebitoTotalEAcrescimoImpontualidadeTotal[6];
				valorTotalMultasDasContas = (BigDecimal)valorDebitoTotalEAcrescimoImpontualidadeTotal[7]; 
				valorTotalJurosMoraDasContas = (BigDecimal)valorDebitoTotalEAcrescimoImpontualidadeTotal[8];
				valorTotalAtualizacoesMonetariasDasContas = (BigDecimal)valorDebitoTotalEAcrescimoImpontualidadeTotal[9];
				
			}

				Integer numeroReparcelamentoConsecutivos = 0;
				if(imovel.getNumeroReparcelamentoConsecutivos() != null){
					numeroReparcelamentoConsecutivos = new Integer(imovel
							.getNumeroReparcelamentoConsecutivos().toString());
				}
				
				Integer situacaoLigacaoAgua = imovel.getLigacaoAguaSituacao().getId();
				// O indicador só será usado caso a situação de Água do Imóvel seja
				// SUPRIMIDO, SUPRIMIDO PARCIAL, SUPRIMIDO PARCIAL A PEDIDO
				Integer indicadorRestabelecimento = new Integer("0");
				if (situacaoLigacaoAgua.equals(LigacaoAguaSituacao.SUPRIMIDO) ||
						situacaoLigacaoAgua.equals(LigacaoAguaSituacao.SUPR_PARC) ||
						situacaoLigacaoAgua.equals(LigacaoAguaSituacao.SUPR_PARC_PEDIDO)) {
					indicadorRestabelecimento = new Integer("2");
				}
				
				
				//CARREGANDO O HELPER COM AS INFORMAÇÕES DO PARCELAMENTO
				ObterOpcoesDeParcelamentoHelper helper = new ObterOpcoesDeParcelamentoHelper(
						resolucaoDiretoria.getId(),
						imovel.getId(), 
						null, 
						imovel.getLigacaoAguaSituacao().getId(), 
						imovel.getLigacaoEsgotoSituacao().getId(), 
						imovel.getImovelPerfil().getId(), 
						"010001", // Referência inicial do débito
						indicadorRestabelecimento, //indicadorRestabelecimento
						obterDebitoImovelOuCliente.getColecaoContasValores(), 
						valorDebitoTotalAtualizado, 
						valorTotalMultasDasContas, 
						valorTotalJurosMoraDasContas, 
						valorTotalAtualizacoesMonetariasDasContas,
						numeroReparcelamentoConsecutivos, 
						obterDebitoImovelOuCliente.getColecaoGuiasPagamentoValores(), 
						Usuario.USUARIO_BATCH,
						valorTotalRestanteParcelamentosACobrar, 
						cobrancaAcaoAtividadeComando
							.getAnoMesReferenciaContaInicial(), // Referência inicial do débito
						cobrancaAcaoAtividadeComando
							.getAnoMesReferenciaContaFinal(), // Referência final do débito
						indicadoresParcelamentoHelper,
						valorCreditoARealizar);
				
				NegociacaoOpcoesParcelamentoHelper opcoesParcelamento = 
					this.obterOpcoesDeParcelamento(helper);
				
				//Definição do valor do documento e do valor do desconto
				if (opcoesParcelamento.getValorTotalDescontoPagamentoAVista() != null){
					descontoTotalPagamentoAVista  = opcoesParcelamento.getValorTotalDescontoPagamentoAVista();
				}

				valorTotalImpostosConta = obterDebitoImovelOuCliente.obterValorImpostosDasContas(
						obterDebitoImovelOuCliente.getColecaoContasValores());
				
				valorPagamentoAVista = valorDebitoTotalAtualizado.subtract(descontoTotalPagamentoAVista);
				valorPagamentoAVista = valorPagamentoAVista.subtract(valorTotalImpostosConta);
				
				/*
				try {
					this.repositorioCobranca
						.atualizarValoresDocumentoCobrancaCartas(
							cobrancaDocumento.getId(),descontoTotalPagamentoAVista,valorTotalImpostosConta);
				} catch (ErroRepositorioException e1) {
					e1.printStackTrace();
					throw new ControladorException("erro.sistema", e1);
				}
				*/
															
					//inicio arquivo!!!
					
					String nomeClienteUsuario = null;
					Collection colecaoCobrancaDocumentoItemConta = null;
					Integer idClienteResponsavel = null;					

						try {

							nomeClienteUsuario = this.repositorioClienteImovel.pesquisarNomeClientePorImovel(cobrancaDocumento.getImovel().getId());
							idClienteResponsavel = this.repositorioClienteImovel.retornaIdClienteResponsavel(cobrancaDocumento.getImovel().getId());

							colecaoCobrancaDocumentoItemConta = //extratoHelper.getColecaoCobrancaDocumentoItemContas(); 
								this.repositorioCobranca.selecionarCobrancaDocumentoItemReferenteConta(cobrancaDocumento);

						} catch (ErroRepositorioException ex) {
							ex.printStackTrace();
							throw new ControladorException("erro.sistema", ex);
						}
						
						if (colecaoCobrancaDocumentoItemConta != null && !colecaoCobrancaDocumentoItemConta.isEmpty()) {

							cobrancaDocumentoTxt = new StringBuilder();
						
							String idGrupo = null;
							// id do grupo
							idGrupo = "" + cobrancaDocumento.getQuadra().getRota().getCobrancaGrupo().getId();
							
							//Grupo-XX Entrega-XXXXXXXXXX
							String textoGrupoEntrega = "GRUPO-" + idGrupo + " ENTREGA-";
							if (cobrancaDocumento.getEmpresa() != null) {
								textoGrupoEntrega += cobrancaDocumento.getEmpresa().getDescricao();
							}
							
							cobrancaDocumentoTxt.append(Util.completaString(textoGrupoEntrega, 27));
							
							// Inscrição
							String idLocalidade = Util.adicionarZerosEsquedaNumero(3, "" + cobrancaDocumento.getLocalidade().getId());
							String codigoSetorComercial = Util.adicionarZerosEsquedaNumero(3, "" + cobrancaDocumento.getCodigoSetorComercial());
							String numeroQuadra = Util.adicionarZerosEsquedaNumero(3, "" + cobrancaDocumento.getNumeroQuadra());
							String lote = Util.adicionarZerosEsquedaNumero(4,""+ cobrancaDocumento.getImovel().getLote());
							String subLote = Util.adicionarZerosEsquedaNumero(3, ""	+ cobrancaDocumento.getImovel().getSubLote());

							cobrancaDocumentoTxt.append(Util.completaString(idLocalidade + "."	+ codigoSetorComercial + "." 
									+ numeroQuadra + "." + lote + "." + subLote, 20));

							// Nome da Localidade
							cobrancaDocumentoTxt.append(Util.completaString("" + cobrancaDocumento.getLocalidade().getDescricao(), 25));

							// nome cliente
							cobrancaDocumentoTxt.append(Util.completaString(nomeClienteUsuario, 50));

							String nomeBairro = "";
							String nomeMunicipio = "";
							String siglaUnidadeFederecao = "";
							String cepFormatado = "";

							String[] parmsEnderecoImovel = getControladorEndereco().pesquisarEnderecoFormatadoDividido(cobrancaDocumento.getImovel().getId());
							if (parmsEnderecoImovel != null) {
								// nome do bairro
								nomeBairro = "" + parmsEnderecoImovel[3];
								// nome do municipio
								nomeMunicipio = "" + parmsEnderecoImovel[1];
								// sigla da unidade federação
								siglaUnidadeFederecao = parmsEnderecoImovel[2];
								cepFormatado = parmsEnderecoImovel[4];
							}

							// endereço do cliente com opção de recebimento via correio
							if (idClienteResponsavel != null) {
								String[] parmsEndereco = getControladorEndereco().pesquisarEnderecoClienteAbreviadoDividido(idClienteResponsavel);
								// endereço sem municipio e unidade federação
								cobrancaDocumentoTxt.append(Util.completaString(parmsEndereco[0], 50));
								// nome do bairro
								nomeBairro = "" + parmsEndereco[3];
								// nome do municipio
								nomeMunicipio = "" + parmsEndereco[1];
								// sigla da unidade federação
								siglaUnidadeFederecao = parmsEndereco[2];
								cepFormatado = parmsEndereco[4];

							} else {
								if (parmsEnderecoImovel != null){
									// endereço sem municipio e unidade federação
									cobrancaDocumentoTxt.append(Util.completaString(parmsEnderecoImovel[0],50));
								} else {
									cobrancaDocumentoTxt.append(Util.completaString("", 50));									
								}
							}

							// nome Bairro
							cobrancaDocumentoTxt.append(Util.completaString(nomeBairro, 25));
							// nome municipio
							cobrancaDocumentoTxt.append(Util.completaString(nomeMunicipio, 24));
							// sigla unidade federacao
							cobrancaDocumentoTxt.append(Util.completaString(siglaUnidadeFederecao, 2));
							// CEP
							// variavel cepFormatado foi preenchido de acordo com a existencia de
							// cliente responsavel
							String cepStr = Util.completaString(cepFormatado, 8);
							String cepLabeled = "CEP. " + cepStr.substring(0,5) + "-" + cepStr.substring(5,8); 
							cobrancaDocumentoTxt.append(Util.completaString(cepLabeled, 14));
							
							// Sequencial de impressao [13]
							String sequencialImpressaoStr = Util.adicionarZerosEsquedaNumero(6,sequencialImpressao + "");
							cobrancaDocumentoTxt.append("SEQ.  " + sequencialImpressaoStr.substring(0,3) + "." + sequencialImpressaoStr.substring(3,6));
							
							// Matrícula do imóvel
							String matriculaStr = Util.adicionarZerosEsquedaNumero(8, "" + cobrancaDocumento.getImovel().getId()); 
							cobrancaDocumentoTxt.append(matriculaStr.substring(0,7) + "." + matriculaStr.substring(7,8));

							// Endereço do imóvel sem municipio e unidade federação
							cobrancaDocumentoTxt.append(Util.completaString(parmsEnderecoImovel[0],50));

							// sequencial do documento de cobranca
							String sequencialStr = Util.adicionarZerosEsquedaNumero(9, "" + cobrancaDocumento.getNumeroSequenciaDocumento()); 
							cobrancaDocumentoTxt.append(sequencialStr.substring(0,5) + "." + sequencialStr.substring(5,9));
							
							Date dataEmissao = new Date();
							
							dataEmissao = Util.adicionarNumeroDiasDeUmaData(dataEmissao,acaoCobranca.getNumeroDiasValidade());
							
							String dataVencimento = Util.formatarData(dataEmissao);
							
							// Data de vencimento
							cobrancaDocumentoTxt.append(dataVencimento);
							
							// idgrupo
							cobrancaDocumentoTxt.append(Util.completaString(idGrupo, 2));
							cobrancaDocumentoTxt.append("-");
							// código da firma
							if (cobrancaDocumento.getEmpresa() != null) {
								cobrancaDocumentoTxt.append(Util.adicionarZerosEsquedaNumero(2,cobrancaDocumento.getEmpresa().getId().toString()));
							}
						
							String representacaoNumericaCodBarra = "";

							// Obtém a representação numérica do código de barra
							representacaoNumericaCodBarra = this.getControladorArrecadacao().obterRepresentacaoNumericaCodigoBarra(
											5,
											cobrancaDocumento.getValorDocumento(),
											cobrancaDocumento.getLocalidade().getId(),
											cobrancaDocumento.getImovel().getId(),
											null,
											null,
											null,
											null,
											String.valueOf(cobrancaDocumento.getNumeroSequenciaDocumento()),
											cobrancaDocumento.getDocumentoTipo().getId(),
											null, null, null);

							// Formata a representação númerica do código de barras
							String representacaoNumericaCodBarraFormatada = representacaoNumericaCodBarra.substring(0, 11)
									+ " " + representacaoNumericaCodBarra.substring(11, 12)
									+ " " + representacaoNumericaCodBarra.substring(12, 23)
									+ " " + representacaoNumericaCodBarra.substring(23, 24)
									+ " " + representacaoNumericaCodBarra.substring(24, 35)
									+ " " + representacaoNumericaCodBarra.substring(35, 36)
									+ " " + representacaoNumericaCodBarra.substring(36, 47)
									+ " " + representacaoNumericaCodBarra.substring(47, 48);

							cobrancaDocumentoTxt.append(representacaoNumericaCodBarraFormatada);

							// Cria o objeto para gerar o código de barras no padrão intercalado 2 de 5
							Interleaved2of5 codigoBarraIntercalado2de5 = new Interleaved2of5();
 
							// Recupera a representação númerica do código de barras sem os dígitos verificadores 
							String representacaoCodigoBarrasSemDigitoVerificador = 
								    representacaoNumericaCodBarra.substring(0, 11)
									+ representacaoNumericaCodBarra.substring(12, 23)
									+ representacaoNumericaCodBarra.substring(24, 35)
									+ representacaoNumericaCodBarra.substring(36, 47);

							cobrancaDocumentoTxt.append(codigoBarraIntercalado2de5.encodeValue(representacaoCodigoBarrasSemDigitoVerificador));
							
							int quantidadesContas = 0;
							quantidadesContas = 24;

							// retorna o indicador de estouro e formata o cobrançaDocumentoTxt com os dados
							formatarCobrancaDocumentoItem(cobrancaDocumentoTxt,colecaoCobrancaDocumentoItemConta,quantidadesContas,cobrancaDocumento);
							
							//somatório das guias
							cobrancaDocumentoTxt.append(Util.completaStringComEspacoAEsquerda(
									Util.formataBigDecimal(valorTotalGuiasPagamento, 2, true), 14));
							
							//somatório dos débitos a cobrar de serviços
							cobrancaDocumentoTxt.append(Util.completaStringComEspacoAEsquerda(
									Util.formataBigDecimal(valorTotalRestanteServicosACobrar, 2, true), 14));
							
							//somatório dos débitos a cobrar de parcelamento
							cobrancaDocumentoTxt.append(Util.completaStringComEspacoAEsquerda(
									Util.formataBigDecimal(valorTotalRestanteParcelamentosACobrar, 2, true), 14));
							
							//somatório dos creditos a realizar
							cobrancaDocumentoTxt.append(Util.completaStringComEspacoAEsquerda(
									Util.formataBigDecimal(valorCreditoARealizar, 2, true), 14));
							
							//valor do debito atualizado
							cobrancaDocumentoTxt.append(Util.completaStringComEspacoAEsquerda(
									Util.formataBigDecimal(valorDebitoTotalAtualizado, 2, true), 14));
							
							//valor do documento de pagamento a vista
							cobrancaDocumentoTxt.append(Util.completaStringComEspacoAEsquerda(
									Util.formataBigDecimal(valorPagamentoAVista, 2, true), 14));
							
							ArrayList colecaoOpcoesParcelamento = 
								(ArrayList)opcoesParcelamento.getOpcoesParcelamento();
							String asteriscos = "**,**";
							
							if(colecaoOpcoesParcelamento != null && !colecaoOpcoesParcelamento.isEmpty()){
								OpcoesParcelamentoHelper opcoesHelper = null;
								
								try {
									opcoesHelper = ((OpcoesParcelamentoHelper)colecaoOpcoesParcelamento.get(3));
									
								} catch (IndexOutOfBoundsException e) {
									opcoesHelper = null;
								}
								if(opcoesHelper != null){
									
									if(opcoesHelper.getValorEntradaMinima() != null
											&& !opcoesHelper.getValorEntradaMinima().equals(new BigDecimal("0.00"))){
										
										cobrancaDocumentoTxt.append(Util.completaStringComEspacoAEsquerda(
                								Util.formataBigDecimal(opcoesHelper.getValorEntradaMinima(), 2, true), 14));
									}else{
										cobrancaDocumentoTxt.append(Util.
												completaStringComEspacoAEsquerda(asteriscos, 14));
									}
									
									cobrancaDocumentoTxt.append(Util.completaStringComEspacoAEsquerda(
            								Util.formataBigDecimal(opcoesHelper.getValorPrestacao(), 2, true), 14));
									
									cobrancaDocumentoTxt.append(Util.completaStringComEspacoAEsquerda(
            								Util.formataBigDecimal(opcoesHelper.getTaxaJuros(), 2, true), 4));
									
								}else{
									cobrancaDocumentoTxt.append(Util.completaStringComEspacoAEsquerda(asteriscos, 14));
									cobrancaDocumentoTxt.append(Util.completaStringComEspacoAEsquerda(asteriscos, 14));
									cobrancaDocumentoTxt.append("*,**");
								}
								
								try {
									opcoesHelper = ((OpcoesParcelamentoHelper)colecaoOpcoesParcelamento.get(11));
									
								} catch (IndexOutOfBoundsException e) {
									opcoesHelper = null;
								}
								if(opcoesHelper != null){
									
									if(opcoesHelper.getValorEntradaMinima() != null
											&& !opcoesHelper.getValorEntradaMinima().equals(new BigDecimal("0.00"))){
										
										cobrancaDocumentoTxt.append(Util.completaStringComEspacoAEsquerda(
                								Util.formataBigDecimal(opcoesHelper.getValorEntradaMinima(), 2, true), 14));
									}else{
										cobrancaDocumentoTxt.append(Util.
												completaStringComEspacoAEsquerda(asteriscos, 14));
									}
									
									cobrancaDocumentoTxt.append(Util.completaStringComEspacoAEsquerda(
            								Util.formataBigDecimal(opcoesHelper.getValorPrestacao(), 2, true), 14));
									
									cobrancaDocumentoTxt.append(Util.completaStringComEspacoAEsquerda(
            								Util.formataBigDecimal(opcoesHelper.getTaxaJuros(), 2, true), 4));
									
								}else{
									cobrancaDocumentoTxt.append(Util.completaStringComEspacoAEsquerda(asteriscos, 14));
									cobrancaDocumentoTxt.append(Util.completaStringComEspacoAEsquerda(asteriscos, 14));
									cobrancaDocumentoTxt.append("*,**");
								}
								
								try {
									opcoesHelper = ((OpcoesParcelamentoHelper)colecaoOpcoesParcelamento.get(23));
									
								} catch (IndexOutOfBoundsException e) {
									opcoesHelper = null;
								}
								if(opcoesHelper != null){
								
									if(opcoesHelper.getValorEntradaMinima() != null
											&& !opcoesHelper.getValorEntradaMinima().equals(new BigDecimal("0.00"))){
										
										cobrancaDocumentoTxt.append(Util.completaStringComEspacoAEsquerda(
                								Util.formataBigDecimal(opcoesHelper.getValorEntradaMinima(), 2, true), 14));
									}else{
										cobrancaDocumentoTxt.append(Util.
												completaStringComEspacoAEsquerda(asteriscos, 14));
									}
									
									cobrancaDocumentoTxt.append(Util.completaStringComEspacoAEsquerda(
            								Util.formataBigDecimal(opcoesHelper.getValorPrestacao(), 2, true), 14));
									
									cobrancaDocumentoTxt.append(Util.completaStringComEspacoAEsquerda(
            								Util.formataBigDecimal(opcoesHelper.getTaxaJuros(), 2, true), 4));
									
								}else{
									cobrancaDocumentoTxt.append(Util.completaStringComEspacoAEsquerda(asteriscos, 14));
									cobrancaDocumentoTxt.append(Util.completaStringComEspacoAEsquerda(asteriscos, 14));
									cobrancaDocumentoTxt.append("*,**");
								}
								
								try {
									opcoesHelper = ((OpcoesParcelamentoHelper)colecaoOpcoesParcelamento.get(35));
									
								} catch (IndexOutOfBoundsException e) {
									opcoesHelper = null;
								}
								if(opcoesHelper != null){
									
									if(opcoesHelper.getValorEntradaMinima() != null
											&& !opcoesHelper.getValorEntradaMinima().equals(new BigDecimal("0.00"))){
										
										cobrancaDocumentoTxt.append(Util.completaStringComEspacoAEsquerda(
                								Util.formataBigDecimal(opcoesHelper.getValorEntradaMinima(), 2, true), 14));
									}else{
										cobrancaDocumentoTxt.append(Util.
												completaStringComEspacoAEsquerda(asteriscos, 14));
									}
									
									cobrancaDocumentoTxt.append(Util.completaStringComEspacoAEsquerda(
            								Util.formataBigDecimal(opcoesHelper.getValorPrestacao(), 2, true), 14));
									
									cobrancaDocumentoTxt.append(Util.completaStringComEspacoAEsquerda(
            								Util.formataBigDecimal(opcoesHelper.getTaxaJuros(), 2, true), 4));
									
								}else{
									cobrancaDocumentoTxt.append(Util.completaStringComEspacoAEsquerda(asteriscos, 14));
									cobrancaDocumentoTxt.append(Util.completaStringComEspacoAEsquerda(asteriscos, 14));
									cobrancaDocumentoTxt.append("*,**");
								}
								
								try {
									opcoesHelper = ((OpcoesParcelamentoHelper)colecaoOpcoesParcelamento.get(47));
									
								} catch (IndexOutOfBoundsException e) {
									opcoesHelper = null;
								}
								if(opcoesHelper != null){
									if(opcoesHelper.getValorEntradaMinima() != null
											&& !opcoesHelper.getValorEntradaMinima().equals(new BigDecimal("0.00"))){
										
										cobrancaDocumentoTxt.append(Util.completaStringComEspacoAEsquerda(
                								Util.formataBigDecimal(opcoesHelper.getValorEntradaMinima(), 2, true), 14));
									}else{
										cobrancaDocumentoTxt.append(Util.
												completaStringComEspacoAEsquerda(asteriscos, 14));
									}
									
									cobrancaDocumentoTxt.append(Util.completaStringComEspacoAEsquerda(
            								Util.formataBigDecimal(opcoesHelper.getValorPrestacao(), 2, true), 14));
									
									cobrancaDocumentoTxt.append(Util.completaStringComEspacoAEsquerda(
            								Util.formataBigDecimal(opcoesHelper.getTaxaJuros(), 2, true), 4));
									
								}else{
									cobrancaDocumentoTxt.append(Util.completaStringComEspacoAEsquerda(asteriscos, 14));
									cobrancaDocumentoTxt.append(Util.completaStringComEspacoAEsquerda(asteriscos, 14));
									cobrancaDocumentoTxt.append("*,**");
								}
							}else{
								
								for (int i = 0; i < 5; i++) {
									
									cobrancaDocumentoTxt.append(Util.completaStringComEspacoAEsquerda(asteriscos, 14));
									cobrancaDocumentoTxt.append(Util.completaStringComEspacoAEsquerda(asteriscos, 14));
									cobrancaDocumentoTxt.append("*,**");
								}
								
							}

							String txtString =  cobrancaDocumentoTxt.toString();
							
							txtString = txtString.replace('\'',' ');
							txtString = txtString.replace('`',' ');
							
							String[] retorno = {
									txtString,
									sequencialImpressaoStr};
							
							return retorno;
							
				}
	
		return null;
	}
	
	
	/**
	 *[UC0349] Emitir Documento de Cobrança Cartas Campanha
	 * 
	 * @author Hugo Amorim, Mariana Victor
	 * @date 23/04/2010, 28/03/2011
	 */
	public void emitirDocumentoCobrancaCartasCampanha(CobrancaAcaoAtividadeCronograma cobrancaAcaoAtividadeCronograma,
			CobrancaAcaoAtividadeComando cobrancaAcaoAtividadeComando,
			CobrancaAcao acaoCobranca, CobrancaGrupo grupoCobranca)throws ControladorException{
	    
		BufferedWriter out = null;
		ZipOutputStream zos = null;
		File leitura = null;
		Date dataAtual = new Date();
		String nomeZip = null;

		// Arquivo txt para dados de ficha de compensação (Boleto)
		BufferedWriter outBoleto = null;
		ZipOutputStream zosBoleto = null;
		File leituraBoleto = null;
		String nomeZipBoleto = null;
		List<Object[]> listaBoleto = new ArrayList<Object[]>();
			
		try{
			
			SistemaParametro sistemaParametro = this.getControladorUtil().pesquisarParametrosDoSistema();
			
			Integer idCronogramaAtividadeAcaoCobranca = null;
			Integer idComandoAtividadeAcaoCobranca = null;

			if (cobrancaAcaoAtividadeCronograma != null
					&& cobrancaAcaoAtividadeCronograma.getId() != null) {
				idCronogramaAtividadeAcaoCobranca = cobrancaAcaoAtividadeCronograma.getId();
				
				nomeZip = "CARTAS_PARCELAMENTO_" + idCronogramaAtividadeAcaoCobranca + "_"
					+ Util.formatarData(dataAtual) + Util.formatarHoraSemDataSemDoisPontos(dataAtual);

				nomeZipBoleto = "CARTAS_PARCELAMENTO_BOLETO_" + idCronogramaAtividadeAcaoCobranca + "_"
				+ Util.formatarData(dataAtual) + Util.formatarHoraSemDataSemDoisPontos(dataAtual);
			}
			if (cobrancaAcaoAtividadeComando != null
					&& cobrancaAcaoAtividadeComando.getId() != null) {
				idComandoAtividadeAcaoCobranca = cobrancaAcaoAtividadeComando.getId();
				
				nomeZip = "CARTAS_PARCELAMENTO_" + idComandoAtividadeAcaoCobranca + "_"
					+ Util.formatarData(dataAtual) + Util.formatarHoraSemDataSemDoisPontos(dataAtual);
				
				nomeZipBoleto = "CARTAS_PARCELAMENTO_BOLETO_" + idComandoAtividadeAcaoCobranca + "_"
					+ Util.formatarData(dataAtual) + Util.formatarHoraSemDataSemDoisPontos(dataAtual);
			}
			
			// Definindo arquivo para escrita	
			nomeZip = nomeZip.replace("/", "_");
			File compactado = new File(nomeZip + ".zip");
			leitura = new File(nomeZip + ".txt");

		    zos = new ZipOutputStream(new FileOutputStream(compactado));
		    out = new BufferedWriter(new OutputStreamWriter(new FileOutputStream(leitura.getAbsolutePath())));
		    
		    // pegar o arquivo, zipar pasta e arquivo e escrever no stream
			System.out.println("***************************************");
			System.out.println("INICO DA CRIACAO DO ARQUIVO");
			System.out.println("***************************************");
	
			
			System.out.println("***************************************");
			System.out.println("ENTROU NO CARTAS");
			System.out.println("***************************************");
			Collection colecaoCobrancaDocumento = repositorioCobranca
					.pesquisarDocumentoCobrancaImpressaoFichaCompensacao(
							idComandoAtividadeAcaoCobranca,idCronogramaAtividadeAcaoCobranca);
			System.out.println("***************************************");
			System.out.println("QTD DE COBRANCA DOCUMENTO:"	+ colecaoCobrancaDocumento.size());
			System.out.println("***************************************");
			
			if(colecaoCobrancaDocumento != null && !colecaoCobrancaDocumento.isEmpty()){
				
				Iterator iterCobrancaDocumentoImpressao = colecaoCobrancaDocumento.iterator();
				
				while (iterCobrancaDocumentoImpressao.hasNext()) {
					Object[] dadosTxt = (Object[]) iterCobrancaDocumentoImpressao.next();
					
					
					if (sistemaParametro.getValorDemonstrativoParcelamentoFichaComp() != null
							&& !sistemaParametro.getValorDemonstrativoParcelamentoFichaComp().equals(
									BigDecimal.ZERO) && dadosTxt[1] != null) {
						listaBoleto.add(dadosTxt);
					} else {
						String  linhaTxt  = "";
					
						if (dadosTxt[0] != null) {
							linhaTxt  = (String) dadosTxt[0];
						}
						
						StringBuilder cobrancaDocumentoTxt = new StringBuilder();
						cobrancaDocumentoTxt.append(linhaTxt);
						cobrancaDocumentoTxt.append(System.getProperty("line.separator"));
					    out.write(cobrancaDocumentoTxt.toString());	
					}
					
				}
				
			}
			
			if (listaBoleto != null && !listaBoleto.isEmpty()) {
				// Definindo arquivo de boleto para escrita	
				nomeZipBoleto = nomeZipBoleto.replace("/", "_");
				File compactadoBoleto = new File(nomeZipBoleto + ".zip");
				leituraBoleto = new File(nomeZipBoleto + ".txt");

			    zosBoleto = new ZipOutputStream(new FileOutputStream(compactadoBoleto));
			    outBoleto = new BufferedWriter(new OutputStreamWriter(new FileOutputStream(leituraBoleto.getAbsolutePath())));
			    
			    Iterator iterator = listaBoleto.iterator();
			    while (iterator.hasNext()) {
			    	Object[] dadosTxt = (Object[]) iterator.next();
			    	
					String  linhaTxt  = "";
				
					if (dadosTxt[0] != null) {
						linhaTxt  = (String) dadosTxt[0];
					}
					String conteudoFichaCompensacao  = (String) dadosTxt[1];
					
					StringBuilder cobrancaDocumentoTxt = new StringBuilder();
					cobrancaDocumentoTxt.append(linhaTxt);
					cobrancaDocumentoTxt.append(conteudoFichaCompensacao);
					cobrancaDocumentoTxt.append(System.getProperty("line.separator"));
				    outBoleto.write(cobrancaDocumentoTxt.toString());
			    }
				outBoleto.flush(); 
			}
			
			out.flush();                       
	
			System.out.println("***************************************");
			System.out.println("FIM DA CRIACAO DO ARQUIVO");
			System.out.println("***************************************");
		
		}catch (ErroRepositorioException ex) {
				ex.printStackTrace();
				throw new ControladorException("erro.sistema", ex);
		} catch (IOException e) {
			e.printStackTrace();
			throw new ControladorException("erro.sistema", e);
		} catch (Exception e) {
			e.printStackTrace();
			throw new ControladorException("erro.sistema", e);
		} finally {
			try{
				out.close();
				ZipUtil.adicionarArquivo(zos, leitura);
		
				// close the stream
				zos.close();
				leitura.delete();
				
				if (listaBoleto != null && !listaBoleto.isEmpty()) {
					outBoleto.close();
					ZipUtil.adicionarArquivo(zosBoleto, leituraBoleto);
					
					zosBoleto.close();
					leituraBoleto.delete();
				}
				
			} catch (IOException e) {
				e.printStackTrace();
				throw new ControladorException("erro.sistema", e);
			}
	    }
		
	}
	


	

	
	/**
	 * [UC0251] Gerar Atividade de Ação de Cobrança - step2
	 *
	 * @author Pedro Alexandre, Ivan Sergio, Raphael Rossiter,Vivianne Sousa
	 * @date 01/02/2006, 18/05/2009, 20/07/2009 , 05/04/2010
	 *
	 */
	public void atualizarComandoAtividadeAcaoCobranca(
			CobrancaGrupo grupoCobranca, int anoMesReferenciaCicloCobranca,
			CobrancaAcaoAtividadeCronograma cobrancaAcaoAtividadeCronograma,
			CobrancaAcaoAtividadeComando cobrancaAcaoAtividadeComando,
			CobrancaAcao acaoCobranca, Integer indicadorCriterio,
			CobrancaCriterio criterioCobranca, 
			int idFuncionalidadeIniciada,Integer idCobrancaDocumentoControleGeracao)
			throws ControladorException {

		int idUnidadeIniciada = 0;
		System.out.println("*********************************");
		System.out.println("INICIO DO ATUALIZAR COMANDO DE ATIVIDADE DE ACAO DE COBRANCA");
		System.out.println("*********************************");
		
		idUnidadeIniciada = getControladorBatch().iniciarUnidadeProcessamentoBatch(
				idFuncionalidadeIniciada,UnidadeProcessamento.FUNCIONALIDADE, 0);
		
		try {

			Date dataCorrente = new Date();

			Collection<CobrancaCriterioLinha> colecaoCobrancaCriterioLinhaComando = null;

			// se o indicador do critério for igual a 2(dois) - "usa o critério do comando"
			if (indicadorCriterio.intValue() == 2) {

				colecaoCobrancaCriterioLinhaComando = repositorioCobranca
					.pesquisarCobrancaCriterioLinhaCriterio(criterioCobranca.getId());
			}
			if (colecaoCobrancaCriterioLinhaComando != null) {
				System.out.println("*********************************");
				System.out.println("QTD DE COBRANCA CRITERIO LINHA:" + colecaoCobrancaCriterioLinhaComando.size());
				System.out.println("*********************************");
			}

			
			//[SB0006] - Remover documentos de cobrança excedentes
			// Alterado por Francisco / Ana Breda em 14/04/09
			// Foi solicitada uma meta de quantidade de documentos a serem gerados
			// além dessa meta, só deverão permanecer documentos com valores acima 
			// do valor limite definido na tabela de ciclometa			
			//boolean houveRemocaoDocumentos = 
				removerDocumentosCobrancaExcedentes(grupoCobranca, anoMesReferenciaCicloCobranca, 
					cobrancaAcaoAtividadeCronograma, cobrancaAcaoAtividadeComando, acaoCobranca,idCobrancaDocumentoControleGeracao);				
			
			/**
			 * Item 6
			 * **********************************************************************************
			 */
			Integer quantidadeDocumentosAtual = null;
			Integer quantidadeItensCobradosAtual = null;
			BigDecimal valorDocumentoAtual = null;
			
			/**
			 * Item 6.1
			 * *******************************************************************************
			 */
			
			if (cobrancaAcaoAtividadeCronograma != null
					&& cobrancaAcaoAtividadeCronograma.getId() != null) {

				// Alterado por Francisco, em 30/07/09
				// Caso a acao de cobranca use metas, os documentos gerados podem ter sido reduzidos 
				// para contemplar as metas, dai, os totais de quantidade de documento, valor total realizado, e quantidade
				// de itens deverá ser calculados neste momento, apos a execucao do procedimento de removerDocumentosCobrancaExcedentes
				
//				if (houveRemocaoDocumentos){
//					Object[] totais = repositorioCobranca.calcularTotaisCronogramaAcaoCobranca(cobrancaAcaoAtividadeCronograma.getId());
//					quantidadeItensCobradosAtual = (Integer) totais[0]; 
//					valorDocumentoAtual = (BigDecimal) totais[1];
//					quantidadeDocumentosAtual = (Integer) totais[2];
//					
//					cobrancaAcaoAtividadeCronograma.setQuantidadeDocumentos(quantidadeDocumentosAtual);
//					cobrancaAcaoAtividadeCronograma.setQuantidadeItensCobrados(quantidadeItensCobradosAtual);
//					cobrancaAcaoAtividadeCronograma.setValorDocumentos(valorDocumentoAtual);
//					
//				} else {

				if ( cobrancaAcaoAtividadeCronograma.getCobrancaAtividade().getId().toString().equals(  
						CobrancaAtividade.EMITIR.toString() ) ) {
				
					Object[] totais = repositorioCobranca.calcularTotaisCronogramaAcaoCobranca(cobrancaAcaoAtividadeCronograma.getId());
					quantidadeItensCobradosAtual = (Integer) totais[0]; 
					valorDocumentoAtual = (BigDecimal) totais[1];
					quantidadeDocumentosAtual = (Integer) totais[2];
				
				} else if ( cobrancaAcaoAtividadeCronograma.getCobrancaAtividade().getId().toString().equals(  
						CobrancaAtividade.SIMULAR.toString() ) ) {
					
					quantidadeDocumentosAtual = cobrancaAcaoAtividadeCronograma.getQuantidadeDocumentos();
					quantidadeItensCobradosAtual = cobrancaAcaoAtividadeCronograma.getQuantidadeDocumentos();
					valorDocumentoAtual = cobrancaAcaoAtividadeCronograma.getValorDocumentos();

				}
				
				
				if (quantidadeDocumentosAtual == null) {
					quantidadeDocumentosAtual = new Integer(0);
				}

				if (quantidadeItensCobradosAtual == null) {
					quantidadeItensCobradosAtual = new Integer(0);
				}

				if (valorDocumentoAtual == null) {
					valorDocumentoAtual = new BigDecimal("0.00");
				}

				if ( cobrancaAcaoAtividadeCronograma.getCobrancaAtividade().getId().toString().equals(  
						CobrancaAtividade.EMITIR.toString() ) ) {
				
					cobrancaAcaoAtividadeCronograma.setQuantidadeDocumentos(quantidadeDocumentosAtual);
					cobrancaAcaoAtividadeCronograma.setQuantidadeItensCobrados(quantidadeItensCobradosAtual);
					cobrancaAcaoAtividadeCronograma.setValorDocumentos(valorDocumentoAtual);
				
				} else if ( cobrancaAcaoAtividadeCronograma.getCobrancaAtividade().getId().toString().equals(  
						CobrancaAtividade.EMITIR.toString() ) ) {
					
					//pesquisa na tabela CobrancaDocumentoControleGeracao 
					//a quantidade de Cobranca Documento,a quantidade de Cobranca Documento Item e 
					//o valor total de Cobranca Documento gerados 
					CobrancaDocumentoControleGeracao cobrancaDocumentoControleGeracao = repositorioCobranca.
					pesquisarCobrancaDocumentoControleGeracao(idCobrancaDocumentoControleGeracao);
					
					cobrancaAcaoAtividadeCronograma.setQuantidadeDocumentos(quantidadeDocumentosAtual
							+ cobrancaDocumentoControleGeracao.getQuantidadeCobrancaDocumento());
					cobrancaAcaoAtividadeCronograma.setQuantidadeItensCobrados(quantidadeItensCobradosAtual
									+ cobrancaDocumentoControleGeracao.getQuantidadeCobrancaDocumentoItem());
					cobrancaAcaoAtividadeCronograma.setValorDocumentos(valorDocumentoAtual
									.add(cobrancaDocumentoControleGeracao.getValorTotalCobrancaDocumentos()));
					
				}
				
				cobrancaAcaoAtividadeCronograma.setRealizacao(dataCorrente);
				cobrancaAcaoAtividadeCronograma.setUltimaAlteracao(dataCorrente);
				getControladorUtil().atualizar(cobrancaAcaoAtividadeCronograma);

				/**
				 * Item 6.2 - alterado por pedro alexandre dia 16/11/2006
				 * **********************************
				 */
			} else if (cobrancaAcaoAtividadeComando != null
					&& cobrancaAcaoAtividadeComando.getId() != null) {
				
				if ( cobrancaAcaoAtividadeComando.getCobrancaAtividade().getId().toString().equals(  
					CobrancaAtividade.EMITIR.toString() ) ) {
				
					Object[] totais = repositorioCobranca.calcularTotaisComandoAcaoCobranca(cobrancaAcaoAtividadeComando.getId());
					quantidadeItensCobradosAtual = (Integer) totais[0]; 
					valorDocumentoAtual = (BigDecimal) totais[1];
					quantidadeDocumentosAtual = (Integer) totais[2];

				} else if ( cobrancaAcaoAtividadeComando.getCobrancaAtividade().getId().toString().equals(  
						CobrancaAtividade.SIMULAR.toString() ) ) {

					quantidadeDocumentosAtual = cobrancaAcaoAtividadeComando.getQuantidadeDocumentos();
					quantidadeItensCobradosAtual = cobrancaAcaoAtividadeComando.getQuantidadeDocumentos();
					valorDocumentoAtual = cobrancaAcaoAtividadeComando.getValorDocumentos();					
					
					
				}
				
				//PESQUISA

				if (quantidadeDocumentosAtual == null) {
					quantidadeDocumentosAtual = new Integer(0);
				}

				if (quantidadeItensCobradosAtual == null) {
					quantidadeItensCobradosAtual = new Integer(0);
				}

				if (valorDocumentoAtual == null) {
					valorDocumentoAtual = new BigDecimal("0.00");
				}
				// caso a quantidade de dias de realização seja diferente de nulo
				if (cobrancaAcaoAtividadeComando.getQuantidadeDiasRealizacao() != null) {
					// caso a atividade seja diferente de nulo
					if (cobrancaAcaoAtividadeComando.getCobrancaAtividade() != null) {
						// caso a atividade seja EMITIR, então a data de
						// encerramento prevista recebe soma a data de
						// realização com a quantidade de dias de realização
						if (cobrancaAcaoAtividadeComando.getCobrancaAtividade().getId().equals(CobrancaAtividade.EMITIR)) {
							Date dataEncerramentoPrevista = Util.adicionarNumeroDiasDeUmaData(
								dataCorrente, cobrancaAcaoAtividadeComando.getQuantidadeDiasRealizacao());
							cobrancaAcaoAtividadeComando.setDataEncerramentoPrevista(dataEncerramentoPrevista);

						}
					}
				}

				if (cobrancaAcaoAtividadeComando.getCobrancaAtividade().getId().equals(CobrancaAtividade.SIMULAR)) {
					cobrancaAcaoAtividadeComando.setDataEncerramentoPrevista(dataCorrente);

					cobrancaAcaoAtividadeComando.setDataEncerramentoRealizada(dataCorrente);
				}
				
				//pesquisa na tabela CobrancaDocumentoControleGeracao 
				//a quantidade de Cobranca Documento,a quantidade de Cobranca Documento Item e 
				//o valor total de Cobranca Documento gerados 
				if ( cobrancaAcaoAtividadeComando.getCobrancaAtividade().getId().toString().equals(  
						CobrancaAtividade.EMITIR.toString() ) ) {

					cobrancaAcaoAtividadeComando.setQuantidadeDocumentos(quantidadeDocumentosAtual);
					cobrancaAcaoAtividadeComando.setQuantidadeItensCobrados(quantidadeItensCobradosAtual);
					cobrancaAcaoAtividadeComando.setValorDocumentos(valorDocumentoAtual);
					
				} else if ( cobrancaAcaoAtividadeComando.getCobrancaAtividade().getId().toString().equals(  
						CobrancaAtividade.SIMULAR.toString() ) ) {

					CobrancaDocumentoControleGeracao cobrancaDocumentoControleGeracao = repositorioCobranca.
					pesquisarCobrancaDocumentoControleGeracao(idCobrancaDocumentoControleGeracao);
					
					cobrancaAcaoAtividadeComando.setQuantidadeDocumentos(quantidadeDocumentosAtual
					+ cobrancaDocumentoControleGeracao.getQuantidadeCobrancaDocumento());
					cobrancaAcaoAtividadeComando.setQuantidadeItensCobrados(quantidadeItensCobradosAtual
					+ cobrancaDocumentoControleGeracao.getQuantidadeCobrancaDocumentoItem());
					cobrancaAcaoAtividadeComando.setValorDocumentos(valorDocumentoAtual
					.add(cobrancaDocumentoControleGeracao.getValorTotalCobrancaDocumentos()));
					
				}
				
				cobrancaAcaoAtividadeComando.setRealizacao(dataCorrente);
				cobrancaAcaoAtividadeComando.setUltimaAlteracao(dataCorrente);
				getControladorUtil().atualizar(cobrancaAcaoAtividadeComando);
				
			}
								
			/**
			 * Fim Item 6
			 * **********************************************************************************
			 */
			
			getControladorBatch().encerrarUnidadeProcessamentoBatch(null,idUnidadeIniciada, false);

		} catch (Throwable e) {
			// Este catch serve para interceptar qualquer exceção que o processo
			// batch venha a lançar e garantir que a unidade de processamento do
			// batch será atualizada com o erro ocorrido

			e.printStackTrace();

			getControladorBatch().encerrarUnidadeProcessamentoBatch(e,
					idUnidadeIniciada, true);

			throw new ControladorException("erro.sistema",e);
		}

	}
	
	/**
	 * [UC0251] Gerar Atividade de Ação de Cobrança - step3
	 *  
	 * @author Pedro Alexandre, Ivan Sergio, Raphael Rossiter,Vivianne Sousa
	 * @date 01/02/2006, 18/05/2009, 20/07/2009 , 05/04/2010
	 *
	 */
	public void emitirDocumentoCobranca(CobrancaGrupo grupoCobranca, 
			CobrancaAcaoAtividadeCronograma cobrancaAcaoAtividadeCronograma,
			CobrancaAcaoAtividadeComando cobrancaAcaoAtividadeComando,
			CobrancaAcao acaoCobranca, CobrancaCriterio criterioCobranca, 
			Date dataAtual, int idFuncionalidadeIniciada)
			throws ControladorException {

		int idUnidadeIniciada = 0;
		System.out.println("*********************************");
		System.out.println("INICIO DO GERAR ACAO DE COBRANCA");
		System.out.println("*********************************");

		idUnidadeIniciada = getControladorBatch().iniciarUnidadeProcessamentoBatch(
				idFuncionalidadeIniciada,UnidadeProcessamento.FUNCIONALIDADE, 0);
		
		try {
		
			Integer idCobrancaAtividadeAcaoCronogramaEmitir = cobrancaAcaoAtividadeCronograma != null ? cobrancaAcaoAtividadeCronograma.getId() : null;
			Integer idCobrancaAtividadeAcaoComandoEmitir = cobrancaAcaoAtividadeComando != null ? cobrancaAcaoAtividadeComando.getId() : null;

			//deleta os documentos de cobranca impressão pelo idCobrancaAtividadeAcaoComando
			//ou pelo idCobrancaAtividadeAcaoCronograma
			repositorioCobranca.deletarDocumentoCobrancaImpressao(
			idCobrancaAtividadeAcaoComandoEmitir,idCobrancaAtividadeAcaoCronogramaEmitir);

			// 7. O sistema emite os documento de cobrança gerados
			if (acaoCobranca.getId() != null) {
				
				EmissaoDocumentoCobrancaHelper helper = new EmissaoDocumentoCobrancaHelper();
				
				helper.setAcaoCobranca(acaoCobranca);
				helper.setCobrancaAcaoAtividadeCronograma(cobrancaAcaoAtividadeCronograma);
				helper.setCobrancaAcaoAtividadeComando(cobrancaAcaoAtividadeComando);
				helper.setDataAtual(dataAtual);
				helper.setGrupoCobranca(grupoCobranca);
				helper.setCriterioCobranca(criterioCobranca);
				
				this.gerarAtividadeAcaoCobrancaEmissaoDocumento(helper);

			}

			// --------------------------------------------------------
			// Registrar o fim da execução da Unidade de Processamento
			// --------------------------------------------------------
			getControladorBatch().encerrarUnidadeProcessamentoBatch(null, idUnidadeIniciada, false);

		} catch (Throwable e) {
			// Este catch serve para interceptar qualquer exceção que o processo
			// batch venha a lançar e garantir que a unidade de processamento do
			// batch será atualizada com o erro ocorrido

			e.printStackTrace();
			getControladorBatch().encerrarUnidadeProcessamentoBatch(e, idUnidadeIniciada, true);
			throw new ControladorException("erro.sistema",e);
		}

	}
	
	/**
	 * [UC0251] Gerar Atividade de Ação de Cobrança [SB0002] Gerar Atividade de
	 * Ação de Cobrança para os Imóveis da Lista de Rotas
	 * 
	 * @author Pedro Alexandre, Vivianne Sousa 
	 * @created 07/02/2006, 07/04/2010
	 * 
	 * @param cobrancaAcaoAtividadeCronograma
	 *            Atividade de Ação de Cobrança de Cronograma
	 * @param cobrancaAcaoAtividadeComando
	 *            Atividade de Ação de Cobrança de Comando
	 * @param colecaoRotas
	 *            Coleção de rotas
	 * @param indicadorCriterio
	 *            Indicador do critério a ser utilizado
	 * @param acaoCobranca
	 *            Ação de Cobrança
	 * @param atividadeCobranca
	 *            Atividade de Cobrança
	 * @param colecaoCobrancaCriterioLinhaComando
	 *            Coleção de linha de critério de cobrança do comando
	 * @param cobrancaCriterioComando
	 *            Critério de Cobrança do Comando
	 * @param anoMesReferenciaInicial
	 *            Ano/Mês de referência inicial
	 * @param anoMesReferenciaFinal
	 *            Ano/Mês de referência final
	 * @param dataVencimentoInicial
	 *            Data de vencimento inicial
	 * @param dataVencimentoFinal
	 *            Data de vencimento final
	 * 
	 * @throws ControladorException
	 *             Controlador Exception
	 */
	private void gerarAtividadeAcaoCobrancaParaImoveisListaRotasComQuantidadeMaxima(
			CobrancaAcaoAtividadeCronograma cobrancaAcaoAtividadeCronograma,
			CobrancaAcaoAtividadeComando cobrancaAcaoAtividadeComando,
			Rota rota,
			Integer indicadorCriterio,
			CobrancaAcao acaoCobranca,
			CobrancaAtividade atividadeCobranca,
			Collection<CobrancaCriterioLinha> colecaoCobrancaCriterioLinhaComando,
			CobrancaCriterio cobrancaCriterioComando,
			String anoMesReferenciaInicial, String anoMesReferenciaFinal,
			Date dataVencimentoInicial, Date dataVencimentoFinal, Date dataAtual,
			Integer quantidadeMaxima,Integer idCobrancaDocumentoControleGeracao)throws ControladorException {

		try{
			
			//pesquisar na tabela cobranca_documento_controle_geracao
			Integer quantidadeCobrancaDocumento = repositorioCobranca.pesquisarQuantidadeCobrancaDocumento(
						idCobrancaDocumentoControleGeracao);
			//verifica se a quantidade de documento gerado é menor que a quantidade máxima permitida
			if(quantidadeCobrancaDocumento.compareTo(quantidadeMaxima) < 0){
				
				 Integer quantidadeCobrancaDocumentoItem = 0;
			    BigDecimal valorTotalDocumentoCobranca = new BigDecimal("0.00");
			    
				// cria a variável que vai armazenar o critério de cobrança
				CobrancaCriterio cobrancaCriterio = null;
		
				// cria a variável que vai armazenar a coleção de linhas de critério de cobrança
				Collection<CobrancaCriterioLinha> colecaoCobrancaCriterioLinha = new ArrayList();
		
				Object[] arrayImovel = null;
		
				// item 2
				// cria o objeto que vai armazenar temporariamente os dados retornados pelo [SB0003], para cada imóvel
				GerarAtividadeAcaoCobrancaHelper gerarAtividadeAcaoCobrancaHelperTemp = new GerarAtividadeAcaoCobrancaHelper();
		
				// se o indicador do critério for igual a 1(um) - "usa critério da rota"
				if (indicadorCriterio.intValue() == 1) {

					CobrancaCriterio cobrancaCriterioRota = null;

					cobrancaCriterioRota = repositorioCobranca.pesquisarCriterioCobrancaRota(rota.getId(),acaoCobranca.getId());

					// pesquisa a coleção de linhas de critério de cobrança
					colecaoCobrancaCriterioLinha = repositorioCobranca.pesquisarCobrancaCriterioLinhaCriterio(cobrancaCriterioRota.getId());

					// o critério de cobrança utilizado vai ser o da rota
					cobrancaCriterio = cobrancaCriterioRota;

					// se o indicador do critério for igual a 2(dois) - "usa o critério do comando"
				} else {
					// a coleção de linha de critério de cobrança vai ser a do comando
					colecaoCobrancaCriterioLinha = colecaoCobrancaCriterioLinhaComando;

					// o critério de cobrança utilizado vai ser o do comando
					cobrancaCriterio = cobrancaCriterioComando;
				}
				
				// Verificar as situacoes de ligacao de agua e esgoto validas para o criterio ou acao de cobranca
				Collection idsSituacaoLigacaoAgua = new ArrayList();
				Collection idsSituacaoLigacaoEsgoto = new ArrayList();
			
				Collection colecaoSituacoesLigacaoAgua = repositorioCobranca.pesquisarCobrancaCriterioSituacaoLigacaoAgua(cobrancaCriterio.getId());
				if (colecaoSituacoesLigacaoAgua != null && !colecaoSituacoesLigacaoAgua.isEmpty()){
					for (Iterator iter = colecaoSituacoesLigacaoAgua.iterator(); iter.hasNext();) {
						CriterioSituacaoLigacaoAgua critSitLigAgua = (CriterioSituacaoLigacaoAgua) iter.next();
						idsSituacaoLigacaoAgua.add(critSitLigAgua.getComp_id().getLigacaoAguaSituacao().getId());
					}
				} else {
					if (acaoCobranca.getLigacaoAguaSituacao() != null){
						idsSituacaoLigacaoAgua.add(acaoCobranca.getLigacaoAguaSituacao().getId());	
					}
				}
				Collection colecaoSituacoesLigacaoEsgoto = repositorioCobranca.pesquisarCobrancaCriterioSituacaoLigacaoEsgoto(cobrancaCriterio.getId());
				if (colecaoSituacoesLigacaoEsgoto != null && !colecaoSituacoesLigacaoEsgoto.isEmpty()){
					for (Iterator iter = colecaoSituacoesLigacaoEsgoto.iterator(); iter.hasNext();) {
						CriterioSituacaoLigacaoEsgoto critSitLigEsgoto = (CriterioSituacaoLigacaoEsgoto) iter.next();
						idsSituacaoLigacaoEsgoto.add(critSitLigEsgoto.getComp_id().getLigacaoEsgotoSituacao().getId());
					}
				} else {
					if (acaoCobranca.getLigacaoEsgotoSituacao() != null){
						idsSituacaoLigacaoEsgoto.add(acaoCobranca.getLigacaoEsgotoSituacao().getId());	
					}
				}
					
				
				Imovel imovel = null;
				LigacaoAguaSituacao ligacaoAguaSituacao = null;
				LigacaoEsgotoSituacao ligacaoEsgotoSituacao = null;
				ImovelPerfil imovelPerfil = null;
				Empresa empresa = null;
				Quadra quadra = null;
				Localidade localidade = null;
				SetorComercial setorComercial = null;
				CobrancaSituacaoTipo cobrancaSituacaoTipo = null;

				boolean flagTerminou = false;
				int numeroInicial = 0;
				int numeroMaximo = 100;	
				while (!flagTerminou) {

					Collection colecaoImoveis = getControladorImovel().pesquisarImoveisPorRotaComPaginacao(
							rota, idsSituacaoLigacaoAgua, idsSituacaoLigacaoEsgoto,numeroInicial,numeroMaximo, cobrancaAcaoAtividadeComando);

					System.out.println(" Gerar Doc Cob - Qtd Imoveis iniciais: " + colecaoImoveis.size());
					
					if (colecaoImoveis != null && !colecaoImoveis.isEmpty()) {
						Iterator iteratorColecaoImoveis = colecaoImoveis.iterator();

						if (colecaoImoveis.size() < numeroMaximo) {
							flagTerminou = true;
						}

						while (iteratorColecaoImoveis.hasNext()) {

							arrayImovel = (Object[]) iteratorColecaoImoveis.next();
							
							if(quantidadeCobrancaDocumento.compareTo(quantidadeMaxima) < 0){
								//se quantidadeCobrancaDocumentogerados for menor que a  quantidadeMaxima

								imovel = new Imovel();
								ligacaoAguaSituacao = new LigacaoAguaSituacao();
								ligacaoEsgotoSituacao = new LigacaoEsgotoSituacao();
								imovelPerfil = new ImovelPerfil();
								empresa = new Empresa();
								quadra = new Quadra();
								localidade = new Localidade();
								setorComercial = new SetorComercial();

								if (arrayImovel[0] != null) {
									imovel.setId((Integer) arrayImovel[0]);
								}

								if (arrayImovel[1] != null) {
									ligacaoAguaSituacao.setId((Integer) arrayImovel[1]);
								}

								if (arrayImovel[2] != null) {
									ligacaoEsgotoSituacao.setId((Integer) arrayImovel[2]);
								}

								if (arrayImovel[3] != null) {
									imovelPerfil.setId((Integer) arrayImovel[3]);
								}
								// caso a ação de cobrança gere a ordem de serviço
								if (acaoCobranca.getServicoTipo() != null && acaoCobranca.getServicoTipo().getId() != null) {
									// seta a empresa cobranca
									if (arrayImovel[13] != null) {
										empresa.setId((Integer) arrayImovel[13]);
									}
								} else {
									// seta a empresa
									if (arrayImovel[4] != null) {
										empresa.setId((Integer) arrayImovel[4]);
									}
								}

								if (arrayImovel[5] != null) {
									localidade.setId((Integer) arrayImovel[5]);
								}

								if (arrayImovel[6] != null) {
									setorComercial.setCodigo(((Integer) arrayImovel[6]).intValue());
								}

								if (arrayImovel[7] != null) {
									quadra.setNumeroQuadra(((Integer) arrayImovel[7]).intValue());
								}

								if (arrayImovel[8] != null) {
									imovel.setLote(((Short) arrayImovel[8]).shortValue());
								}

								if (arrayImovel[9] != null) {
									imovel.setLote(((Short) arrayImovel[9]).shortValue());
								}

								if (arrayImovel[10] != null) {
									quadra.setId(((Integer) arrayImovel[10]).intValue());
								}
								if (arrayImovel[11] != null) {
									cobrancaSituacaoTipo = new CobrancaSituacaoTipo();
									cobrancaSituacaoTipo.setId(((Integer) arrayImovel[11]).intValue());
								}
								if (arrayImovel[12] != null) {
									imovel.setIndicadorDebitoConta((Short) arrayImovel[12]);
								}

								imovel.setLigacaoAguaSituacao(ligacaoAguaSituacao);
								imovel.setLigacaoEsgotoSituacao(ligacaoEsgotoSituacao);
								imovel.setImovelPerfil(imovelPerfil);
								rota.setEmpresa(empresa);
								quadra.setRota(rota);
								imovel.setQuadra(quadra);
								imovel.setLocalidade(localidade);
								imovel.setSetorComercial(setorComercial);
								imovel.setCobrancaSituacaoTipo(cobrancaSituacaoTipo);

								// [SB0003] - Gerar Atividade de Ação de Cobrança para o imóvel
								gerarAtividadeAcaoCobrancaHelperTemp = gerarAtividadeAcaoCobrancaParaImovel(
										cobrancaAcaoAtividadeCronograma, cobrancaAcaoAtividadeComando, 
										imovel, indicadorCriterio, acaoCobranca, atividadeCobranca, 
										cobrancaCriterio, colecaoCobrancaCriterioLinha,	anoMesReferenciaInicial, 
										anoMesReferenciaFinal, dataVencimentoInicial, dataVencimentoFinal, dataAtual);

								// se o objeto for diferente de nulo
								// recupera a quantidade de documentos de cobrança,
								// quantidade de itens cobrados e o valor do documento do objeto retornado pelo [SB0003]
								if (gerarAtividadeAcaoCobrancaHelperTemp != null) {
									
									//*****************************************************
									//alterado por Vivianne Sousa - 07/04/2010 
									//o batch inicialmente funcionava sequencialmente 
									//é importante manter a quantidadeCobrancaDocumento atualizada 
									//para q o batch funcione corretamente com paralelismo.
									
									
									//atualizar quantidade de cobranca documento na tabela cobranca_documento_controle_geracao
									repositorioCobranca.atualizarQuantidadeCobrancaDocumento(idCobrancaDocumentoControleGeracao,1);
									
									//pesquisar a quantidade de cobranca documento para atualizar a variavel 
									quantidadeCobrancaDocumento = repositorioCobranca.
										pesquisarQuantidadeCobrancaDocumento(idCobrancaDocumentoControleGeracao);
									//******************************************************
									
									//acumula a quantidade de itens cobrados e o valor do documento 
									//e no final do metodo atualiza a tabela cobranca_documento_controle_geracao
									quantidadeCobrancaDocumentoItem = quantidadeCobrancaDocumentoItem + 
									gerarAtividadeAcaoCobrancaHelperTemp.getQuantidadeItensCobradosDocumentos();
									
									valorTotalDocumentoCobranca = valorTotalDocumentoCobranca.add(
											gerarAtividadeAcaoCobrancaHelperTemp.getValorDocumentosCobranca());
									
								}
								
								gerarAtividadeAcaoCobrancaHelperTemp = null;

								imovel = null;
								ligacaoAguaSituacao = null;
								ligacaoEsgotoSituacao = null;
								imovelPerfil = null;
								empresa = null;
								quadra = null;
								localidade = null;
								setorComercial = null;
								cobrancaSituacaoTipo = null;
								
	                        //if de quantidadeMaxima	
							}else{
								flagTerminou = true;
							}

						}
					} else {
						flagTerminou = true;
					}
					numeroInicial = numeroInicial + numeroMaximo;
					colecaoImoveis = null;
				}
				
				System.out.println("!!!!!!!!!!!!!!!!!!!ATUALIZAR DOCUMENTO !!!!!!!!!!!!!!!!!!!!!!!!!");
				
				
				//atualizar apenas a quantidade de itens cobrados 
				//e o valor total dos documentos na tabela cobranca_documento_controle_geracao
				repositorioCobranca.atualizarCobrancaDocumentoControleGeracaoSomar(idCobrancaDocumentoControleGeracao,
						quantidadeCobrancaDocumentoItem,valorTotalDocumentoCobranca);	
				
			}
			
		} catch (ErroRepositorioException ex) {
			// levanta a exceção para a próxima camada
			throw new ControladorException("erro.sistema", ex);
		}
	}

	/**
	 * [UC0251] Gerar Atividade de Ação de Cobrança 
	 *  
	 * @author Pedro Alexandre, Ivan Sergio, Raphael Rossiter,Vivianne Sousa
	 * @date 01/02/2006, 18/05/2009, 20/07/2009 , 05/04/2010
	 *
	 */
	private Integer consideraQuantidadeMaximaDocumentos(
			CobrancaAcaoAtividadeCronograma cobrancaAcaoAtividadeCronograma, 
			CobrancaAcaoAtividadeComando cobrancaAcaoAtividadeComando, 
			CobrancaAcao acaoCobranca) {
		
		// Caso seja um comando eventual e a quantidade de
		// documentos gerados seja igual a quantidade máxima
		// de documentos especificada no comando

		// Alterado por Chico, 06/06/08, analista: Ana Breda
		// caso seja um comando de cronograma, verificar se foi preenchida a quantidade
		// maxima de documentos a ser gerada
		
		Integer quantidadeMaxima = null;
		boolean possuiValorLimiteEventual = false;
		boolean usaOrdenamento = false;
		if (cobrancaAcaoAtividadeComando != null) {
			
			quantidadeMaxima =  cobrancaAcaoAtividadeComando.getQuantidadeMaximaDocumentos();
			possuiValorLimiteEventual = (cobrancaAcaoAtividadeComando.getValorLimiteObrigatoria() != null);
			
			if (acaoCobranca.getIndicadorOrdenamentoEventual().intValue() == ConstantesSistema.SIM.intValue()){
				usaOrdenamento = true;
			}
			
		} else if (cobrancaAcaoAtividadeCronograma != null){
			
			quantidadeMaxima =  cobrancaAcaoAtividadeCronograma.getQuantidadeMaximaDocumentos();
			
			if(acaoCobranca.getIndicadorOrdenamentoCronograma().intValue() == ConstantesSistema.SIM.intValue()){
				usaOrdenamento = true;
			}

		}
		
		/* Alteracao feita por Chico, em 21/05/09, analista: Ana Breda
		 * Caso o eventual tenha valor limite obrigatorio preenchido ou 
		 * a ação de cobrança tenha indicador de uso de ordenamento igual a 1 (SIM) 
		 * ENTAO: nao devera ser considerada a quantidade maxima de documentos 
		 * nesta fase, deixara ser gerado todos os documentos
		 * normalmente e no final, será analisado os que ficarão.
		 * 
		 */
		if (quantidadeMaxima != null){
			if (possuiValorLimiteEventual || usaOrdenamento ){
				// se a quantidade maxima de documentos não for considerada, retorna null
				quantidadeMaxima = null;
			}
		}
		return quantidadeMaxima;
	}

	/**
	 * [UC0251] Gerar Atividade de Ação de Cobrança [SB0002] Gerar Atividade de
	 * Ação de Cobrança para os Imóveis da Lista de Rotas
	 * 
	 * @author Pedro Alexandre, Vivianne Sousa 
	 * @created 07/02/2006, 07/04/2010
	 * 
	 * @param cobrancaAcaoAtividadeCronograma
	 *            Atividade de Ação de Cobrança de Cronograma
	 * @param cobrancaAcaoAtividadeComando
	 *            Atividade de Ação de Cobrança de Comando
	 * @param colecaoRotas
	 *            Coleção de rotas
	 * @param indicadorCriterio
	 *            Indicador do critério a ser utilizado
	 * @param acaoCobranca
	 *            Ação de Cobrança
	 * @param atividadeCobranca
	 *            Atividade de Cobrança
	 * @param colecaoCobrancaCriterioLinhaComando
	 *            Coleção de linha de critério de cobrança do comando
	 * @param cobrancaCriterioComando
	 *            Critério de Cobrança do Comando
	 * @param anoMesReferenciaInicial
	 *            Ano/Mês de referência inicial
	 * @param anoMesReferenciaFinal
	 *            Ano/Mês de referência final
	 * @param dataVencimentoInicial
	 *            Data de vencimento inicial
	 * @param dataVencimentoFinal
	 *            Data de vencimento final
	 * 
	 * @throws ControladorException
	 *             Controlador Exception
	 */
	private void gerarAtividadeAcaoCobrancaParaImoveisListaRotasSemQuantidadeMaxima(
			CobrancaAcaoAtividadeCronograma cobrancaAcaoAtividadeCronograma,
			CobrancaAcaoAtividadeComando cobrancaAcaoAtividadeComando,
			Rota rota,
			Integer indicadorCriterio,
			CobrancaAcao acaoCobranca,
			CobrancaAtividade atividadeCobranca,
			Collection<CobrancaCriterioLinha> colecaoCobrancaCriterioLinhaComando,
			CobrancaCriterio cobrancaCriterioComando,
			String anoMesReferenciaInicial, String anoMesReferenciaFinal,
			Date dataVencimentoInicial, Date dataVencimentoFinal, Date dataAtual,
			Integer idCobrancaDocumentoControleGeracao)throws ControladorException {

		try{
			
			Integer quantidadeCobrancaDocumento = 0;
		    Integer quantidadeCobrancaDocumentoItem = 0;
		    BigDecimal valorTotalDocumentoCobranca = new BigDecimal("0.00");
		    
			// cria a variável que vai armazenar o critério de cobrança
			CobrancaCriterio cobrancaCriterio = null;
	
			// cria a variável que vai armazenar a coleção de linhas de critério de cobrança
			Collection<CobrancaCriterioLinha> colecaoCobrancaCriterioLinha = new ArrayList();
	
			Object[] arrayImovel = null;
	
			// item 2
			// cria o objeto que vai armazenar temporariamente os dados retornados pelo [SB0003], para cada imóvel
			GerarAtividadeAcaoCobrancaHelper gerarAtividadeAcaoCobrancaHelperTemp = new GerarAtividadeAcaoCobrancaHelper();
	
			// se o indicador do critério for igual a 1(um) - "usa critério da rota"
			if (indicadorCriterio.intValue() == 1) {

				CobrancaCriterio cobrancaCriterioRota = null;

				cobrancaCriterioRota = repositorioCobranca.pesquisarCriterioCobrancaRota(rota.getId(),acaoCobranca.getId());

				// pesquisa a coleção de linhas de critério de cobrança
				colecaoCobrancaCriterioLinha = repositorioCobranca.pesquisarCobrancaCriterioLinhaCriterio(cobrancaCriterioRota.getId());

				// o critério de cobrança utilizado vai ser o da rota
				cobrancaCriterio = cobrancaCriterioRota;

				// se o indicador do critério for igual a 2(dois) - "usa o critério do comando"
			} else {
				// a coleção de linha de critério de cobrança vai ser a do comando
				colecaoCobrancaCriterioLinha = colecaoCobrancaCriterioLinhaComando;

				// o critério de cobrança utilizado vai ser o do comando
				cobrancaCriterio = cobrancaCriterioComando;
			}
			
			// Verificar as situacoes de ligacao de agua e esgoto validas para o criterio ou acao de cobranca
			Collection idsSituacaoLigacaoAgua = new ArrayList();
			Collection idsSituacaoLigacaoEsgoto = new ArrayList();
		
			Collection colecaoSituacoesLigacaoAgua = repositorioCobranca.pesquisarCobrancaCriterioSituacaoLigacaoAgua(cobrancaCriterio.getId());
			if (colecaoSituacoesLigacaoAgua != null && !colecaoSituacoesLigacaoAgua.isEmpty()){
				for (Iterator iter = colecaoSituacoesLigacaoAgua.iterator(); iter.hasNext();) {
					CriterioSituacaoLigacaoAgua critSitLigAgua = (CriterioSituacaoLigacaoAgua) iter.next();
					idsSituacaoLigacaoAgua.add(critSitLigAgua.getComp_id().getLigacaoAguaSituacao().getId());
				}
			} else {
				if (acaoCobranca.getLigacaoAguaSituacao() != null){
					idsSituacaoLigacaoAgua.add(acaoCobranca.getLigacaoAguaSituacao().getId());	
				}
			}
			Collection colecaoSituacoesLigacaoEsgoto = repositorioCobranca.pesquisarCobrancaCriterioSituacaoLigacaoEsgoto(cobrancaCriterio.getId());
			if (colecaoSituacoesLigacaoEsgoto != null && !colecaoSituacoesLigacaoEsgoto.isEmpty()){
				for (Iterator iter = colecaoSituacoesLigacaoEsgoto.iterator(); iter.hasNext();) {
					CriterioSituacaoLigacaoEsgoto critSitLigEsgoto = (CriterioSituacaoLigacaoEsgoto) iter.next();
					idsSituacaoLigacaoEsgoto.add(critSitLigEsgoto.getComp_id().getLigacaoEsgotoSituacao().getId());
				}
			} else {
				if (acaoCobranca.getLigacaoEsgotoSituacao() != null){
					idsSituacaoLigacaoEsgoto.add(acaoCobranca.getLigacaoEsgotoSituacao().getId());	
				}
			}
				
			
			Imovel imovel = null;
			LigacaoAguaSituacao ligacaoAguaSituacao = null;
			LigacaoEsgotoSituacao ligacaoEsgotoSituacao = null;
			ImovelPerfil imovelPerfil = null;
			Empresa empresa = null;
			Quadra quadra = null;
			Localidade localidade = null;
			SetorComercial setorComercial = null;
			CobrancaSituacaoTipo cobrancaSituacaoTipo = null;

			boolean flagTerminou = false;
			int numeroInicial = 0;
			int numeroMaximo = 100;	
			while (!flagTerminou) {

				Collection colecaoImoveis = getControladorImovel().pesquisarImoveisPorRotaComPaginacao(
						rota, idsSituacaoLigacaoAgua, idsSituacaoLigacaoEsgoto,numeroInicial,numeroMaximo, cobrancaAcaoAtividadeComando);

				System.out.println(" Gerar Doc Cob - Qtd Imoveis iniciais: " + colecaoImoveis.size());
				
				if (colecaoImoveis != null && !colecaoImoveis.isEmpty()) {
					Iterator iteratorColecaoImoveis = colecaoImoveis.iterator();

					if (colecaoImoveis.size() < numeroMaximo) {
						flagTerminou = true;
					}

					while (iteratorColecaoImoveis.hasNext()) {

						arrayImovel = (Object[]) iteratorColecaoImoveis.next();

						imovel = new Imovel();
						ligacaoAguaSituacao = new LigacaoAguaSituacao();
						ligacaoEsgotoSituacao = new LigacaoEsgotoSituacao();
						imovelPerfil = new ImovelPerfil();
						empresa = new Empresa();
						quadra = new Quadra();
						localidade = new Localidade();
						setorComercial = new SetorComercial();

						if (arrayImovel[0] != null) {
							imovel.setId((Integer) arrayImovel[0]);
						}

						if (arrayImovel[1] != null) {
							ligacaoAguaSituacao.setId((Integer) arrayImovel[1]);
						}

						if (arrayImovel[2] != null) {
							ligacaoEsgotoSituacao.setId((Integer) arrayImovel[2]);
						}

						if (arrayImovel[3] != null) {
							imovelPerfil.setId((Integer) arrayImovel[3]);
						}
						// caso a ação de cobrança gere a ordem de serviço
						if (acaoCobranca.getServicoTipo() != null && acaoCobranca.getServicoTipo().getId() != null) {
							// seta a empresa cobranca
							if (arrayImovel[13] != null) {
								empresa.setId((Integer) arrayImovel[13]);
							}
						} else {
							// seta a empresa
							if (arrayImovel[4] != null) {
								empresa.setId((Integer) arrayImovel[4]);
							}
						}

						if (arrayImovel[5] != null) {
							localidade.setId((Integer) arrayImovel[5]);
						}

						if (arrayImovel[6] != null) {
							setorComercial.setCodigo(((Integer) arrayImovel[6]).intValue());
						}

						if (arrayImovel[7] != null) {
							quadra.setNumeroQuadra(((Integer) arrayImovel[7]).intValue());
						}

						if (arrayImovel[8] != null) {
							imovel.setLote(((Short) arrayImovel[8]).shortValue());
						}

						if (arrayImovel[9] != null) {
							imovel.setLote(((Short) arrayImovel[9]).shortValue());
						}

						if (arrayImovel[10] != null) {
							quadra.setId(((Integer) arrayImovel[10]).intValue());
						}
						if (arrayImovel[11] != null) {
							cobrancaSituacaoTipo = new CobrancaSituacaoTipo();
							cobrancaSituacaoTipo.setId(((Integer) arrayImovel[11]).intValue());
						}
						if (arrayImovel[12] != null) {
							imovel.setIndicadorDebitoConta((Short) arrayImovel[12]);
						}

						imovel.setLigacaoAguaSituacao(ligacaoAguaSituacao);
						imovel.setLigacaoEsgotoSituacao(ligacaoEsgotoSituacao);
						imovel.setImovelPerfil(imovelPerfil);
						rota.setEmpresa(empresa);
						quadra.setRota(rota);
						imovel.setQuadra(quadra);
						imovel.setLocalidade(localidade);
						imovel.setSetorComercial(setorComercial);
						imovel.setCobrancaSituacaoTipo(cobrancaSituacaoTipo);
						

						// [SB0003] - Gerar Atividade de Ação de Cobrança para o imóvel
						gerarAtividadeAcaoCobrancaHelperTemp = gerarAtividadeAcaoCobrancaParaImovel(
								cobrancaAcaoAtividadeCronograma, cobrancaAcaoAtividadeComando, 
								imovel, indicadorCriterio, acaoCobranca, atividadeCobranca, 
								cobrancaCriterio, colecaoCobrancaCriterioLinha,	anoMesReferenciaInicial, 
								anoMesReferenciaFinal, dataVencimentoInicial, dataVencimentoFinal, dataAtual);

						// se o objeto for diferente de nulo
						// recupera a quantidade de documentos de cobrança,
						// quantidade de itens cobrados e o valor do documento do objeto retornado pelo [SB0003]
						if (gerarAtividadeAcaoCobrancaHelperTemp != null) {
								
							quantidadeCobrancaDocumento = quantidadeCobrancaDocumento + 1;
								
							//acumula a quantidade de itens cobrados e o valor do documento 
							//e no final do metodo atualiza a tabela cobranca_documento_controle_geracao
							quantidadeCobrancaDocumentoItem = quantidadeCobrancaDocumentoItem + 
							gerarAtividadeAcaoCobrancaHelperTemp.getQuantidadeItensCobradosDocumentos();
							
							valorTotalDocumentoCobranca = valorTotalDocumentoCobranca.add(
									gerarAtividadeAcaoCobrancaHelperTemp.getValorDocumentosCobranca());
							
						}
						
						gerarAtividadeAcaoCobrancaHelperTemp = null;

						imovel = null;
						ligacaoAguaSituacao = null;
						ligacaoEsgotoSituacao = null;
						imovelPerfil = null;
						empresa = null;
						quadra = null;
						localidade = null;
						setorComercial = null;
						cobrancaSituacaoTipo = null;
							
					}
				} else {
					flagTerminou = true;
				}
				numeroInicial = numeroInicial + numeroMaximo;
				colecaoImoveis = null;
			}
			
			//atualizar a quantidade de documentos cobrados, a quantidade de itens cobrados 
			//e o valor total dos documentos na tabela cobranca_documento_controle_geracao
			this.atualizarCobrancaDocumentoControleGeracao(
					idCobrancaDocumentoControleGeracao,quantidadeCobrancaDocumento,
					quantidadeCobrancaDocumentoItem,valorTotalDocumentoCobranca);	
				
		} catch (ErroRepositorioException ex) {
			// levanta a exceção para a próxima camada
			throw new ControladorException("erro.sistema", ex);
		}
	}


	/**
	 *  [UC0251] Gerar Atividade de Ação de Cobrança
	 * 
	 * @author Vivianne Sousa
	 * @date 07/04/2010
	 */
	public void atualizarQuantidadeCobrancaDocumento(
			Integer idCobrancaDocumentoControleGeracao, 
			Integer quantidadeCobrancaDocumento) throws ControladorException {
		try {
			repositorioCobranca.atualizarQuantidadeCobrancaDocumento(
					idCobrancaDocumentoControleGeracao,	quantidadeCobrancaDocumento);
		} catch (ErroRepositorioException ex) {
			ex.printStackTrace();
			throw new ControladorException("erro.sistema", ex);
		}
	}

	/**
	 *  [UC0251] Gerar Atividade de Ação de Cobrança
	 * 
	 * @author Vivianne Sousa
	 * @date 07/04/2010
	 */
	public void atualizarCobrancaDocumentoControleGeracao(
			Integer idCobrancaDocumentoControleGeracao,
			Integer quantidadeCobrancaDocumento, 
			Integer quantidadeCobrancaDocumentoItem,
			BigDecimal valorTotalCobrancaDocumento) throws ControladorException {
		try {
			repositorioCobranca.atualizarCobrancaDocumentoControleGeracaoSomar(
					idCobrancaDocumentoControleGeracao,	quantidadeCobrancaDocumento, 
					quantidadeCobrancaDocumentoItem, valorTotalCobrancaDocumento);
		} catch (ErroRepositorioException ex) {
			ex.printStackTrace();
			throw new ControladorException("erro.sistema", ex);
		}
	}

	/**
	 *  [UC0251] Gerar Atividade de Ação de Cobrança
	 * 
	 * @author Vivianne Sousa
	 * @date 07/04/2010
	 */
	public Integer pesquisarQuantidadeCobrancaDocumento(
			Integer idCobrancaDocumentoControleGeracao) throws ControladorException {
		try {
			return repositorioCobranca.pesquisarQuantidadeCobrancaDocumento(
					idCobrancaDocumentoControleGeracao);
		} catch (ErroRepositorioException ex) {
			ex.printStackTrace();
			throw new ControladorException("erro.sistema", ex);
		}
	}
	
	/**
	 *  [UC0251] Gerar Atividade de Ação de Cobrança
	 * 
	 * @author Vivianne Sousa
	 * @date 07/04/2010
	 */
	public void atualizarCobrancaDocumentoControleGeracao(
			Integer idCobrancaDocumentoControleGeracao,
			Integer quantidadeCobrancaDocumentoItem,
			BigDecimal valorTotalCobrancaDocumento) throws ControladorException {
		try {
			repositorioCobranca.atualizarCobrancaDocumentoControleGeracaoSomar(
			idCobrancaDocumentoControleGeracao,quantidadeCobrancaDocumentoItem,valorTotalCobrancaDocumento);
		} catch (ErroRepositorioException ex) {
			ex.printStackTrace();
			throw new ControladorException("erro.sistema", ex);
		}
	}
	
	/**
	 * @author Vivianne Sousa
	 * @date 29/04/2010
	 */
	public Collection pesquisarImovelCobrancaSituacaoPorImovel(
			Integer idImovel) throws ControladorException {
		try {
			return repositorioCobranca.pesquisarImovelCobrancaSituacaoPorImovel(idImovel);
		} catch (ErroRepositorioException ex) {
			ex.printStackTrace();
			throw new ControladorException("erro.sistema", ex);
		}
	}
	/**
	 * 
	 * 
	 * [UC0968] Emitir Cartas da Campanha
	 * 
	 * @author Hugo Amorim
	 * @data 22/04/2010
	 * 
	 * @param
	 * @return void
	 */
	public void emitirCartasCampanha(
			CobrancaAcaoAtividadeCronograma cobrancaAcaoAtividadeCronograma,
			CobrancaAcaoAtividadeComando cobrancaAcaoAtividadeComando,
			Date dataAtualPesquisa, CobrancaAcao acaoCobranca,
			CobrancaGrupo grupoCobranca, CobrancaCriterio cobrancaCriterio)
			throws ControladorException {
		
		try{
			
			Integer idCobrancaAcaoAtividadeComando = cobrancaAcaoAtividadeComando != null ? cobrancaAcaoAtividadeComando.getId() : null;
			Integer idCobrancaAcaoAtividadeCronograma = cobrancaAcaoAtividadeCronograma != null ? cobrancaAcaoAtividadeCronograma.getId() : null;
			
			//deleta os dados da tabela COBRANCA_DOCUMENTO_IMPRESSAO 
			//para não gerar dados duplicados quando reiniciar o batch
			repositorioCobranca.deletarDocumentoCobrancaImpressao(idCobrancaAcaoAtividadeComando,
					idCobrancaAcaoAtividadeCronograma);
			
			// gera os dados da tabela COBRANCA_DOCUMENTO_IMPRESSAO 
			gerarDocumentoCobrancaImpressaoCartasCampanha(cobrancaAcaoAtividadeCronograma,
					 cobrancaAcaoAtividadeComando,dataAtualPesquisa,  acaoCobranca,
					 grupoCobranca,  cobrancaCriterio);
			
			//gerar arquivo com os dados da tabela COBRANCA_DOCUMENTO_IMPRESSAO 
			emitirDocumentoCobrancaCartasCampanha(cobrancaAcaoAtividadeCronograma,
					cobrancaAcaoAtividadeComando, acaoCobranca, grupoCobranca);
			
		} catch (ErroRepositorioException e) {
			throw new ControladorException("erro.sistema", e);
		}
		
	}

	
	/**
	 * @author Vivianne Sousa, Raimundo Martins
	 * @date 03/05/2010, 12/03/2012
	 */
	public Collection pesquisarDadosImovelCobrancaSituacaoPorImovel(
			Integer idImovel) throws ControladorException {
		try {
			Collection colecaoRetorno = null;
			
			Collection colecaoDados = repositorioCobranca.pesquisarDadosImovelCobrancaSituacaoPorImovel(idImovel);
	
			if(colecaoDados != null && !colecaoDados.isEmpty()){
				colecaoRetorno = new ArrayList();
				
				Iterator iteratorImovelCobrancaSituacao = colecaoDados.iterator();
				
				while (iteratorImovelCobrancaSituacao.hasNext()) {
					Object[] dadosImovelCobrancaSituacao = (Object[]) iteratorImovelCobrancaSituacao.next();
					ImovelCobrancaSituacaoHelper helper = new ImovelCobrancaSituacaoHelper();
					
					if(dadosImovelCobrancaSituacao[0] != null){
						helper.setDescricaoSituacaoCobranca((String)dadosImovelCobrancaSituacao[0]);
						if(helper.getDescricaoSituacaoCobranca().equalsIgnoreCase("EMPRESA DE COBRANCA")){
							helper.setIsEmpresaCobranca(true);
							
							List<ContasCobrancaHelper> contasEnviadas = new ArrayList<ContasCobrancaHelper>(); 
							List<ContasCobrancaHelper> contasPagas = new ArrayList<ContasCobrancaHelper>(); 
							BigDecimal totalContasEnviadas = new BigDecimal("0.00");
							BigDecimal totalContasPagas = new BigDecimal("0.00");
							Collection<Object[]> dadosContasEnviadas = repositorioCobranca.pesquisarContasEnviadasCobrancaPorImovel(idImovel, 
								(Date)dadosImovelCobrancaSituacao[3], (Integer) dadosImovelCobrancaSituacao[8]);
							Collection<Object[]> dadosContasPagas = repositorioCobranca.pesquisarContasPagasEmCobrancaPorImovel(idImovel, 
								(Date)dadosImovelCobrancaSituacao[4], (Integer) dadosImovelCobrancaSituacao[8]);
							
							for(Object[] ob : dadosContasEnviadas){
								ContasCobrancaHelper cech = new ContasCobrancaHelper();
								cech.setMesAno(Util.formatarAnoMesParaMesAno((Integer) ob[0]));
								cech.setValorConta(Util.formatarMoedaReal((BigDecimal) ob[1]));
								cech.setSituacao(ob[2].toString());
								totalContasEnviadas = totalContasEnviadas.add((BigDecimal) ob[1]);
								contasEnviadas.add(cech);
							}
							for(Object [] ob : dadosContasPagas){
								ContasCobrancaHelper cech = new ContasCobrancaHelper();
								cech.setMesAno(Util.formatarAnoMesParaMesAno((Integer) ob[0]));
								cech.setValorConta(Util.formatarMoedaReal((BigDecimal) ob[1]));
								cech.setSituacao(ob[2].toString());
								cech.setDataPagamento(Util.formatarData((Date) ob[3]));
								if(ob[4] !=null){
									cech.setDocumentoTipo(ob[4].toString());
								}
								else{
									cech.setDocumentoTipo("");
								}
								totalContasPagas = totalContasPagas.add((BigDecimal) ob[1]);
								contasPagas.add(cech);
							}
							Collections.sort(contasEnviadas, Collections.reverseOrder());
							Collections.sort(contasPagas, Collections.reverseOrder());							
							helper.setContasEnviadasCobrancaHelper(contasEnviadas);
							helper.setValorTotalEnviadas(Util.formatarMoedaReal(totalContasEnviadas));
							helper.setValorTotalPagas(Util.formatarMoedaReal(totalContasPagas));
							helper.setContasPagasCobrancaHelper(contasPagas);
						}
						else{
							helper.setIsEmpresaCobranca(false);
						}
					}
					
					if(dadosImovelCobrancaSituacao[1] != null){
						helper.setAnoMesReferenciaInicio((Integer)dadosImovelCobrancaSituacao[1]);
					}
					
					if(dadosImovelCobrancaSituacao[2] != null){
						helper.setAnoMesReferenciaFinal((Integer)dadosImovelCobrancaSituacao[2]);
					}
					
					if(dadosImovelCobrancaSituacao[3] != null){
						helper.setDataImplantacaoCobranca((Date)dadosImovelCobrancaSituacao[3]);
					}
					
					if(dadosImovelCobrancaSituacao[4] != null){
						helper.setDataRetiradaCobranca((Date)dadosImovelCobrancaSituacao[4]);
					}
					
					if(dadosImovelCobrancaSituacao[5] != null){
						helper.setIdClienteAlvo((Integer)dadosImovelCobrancaSituacao[5]);
					}
					
					
					if(dadosImovelCobrancaSituacao[6] != null){
						helper.setEscritorioCobranca((String)dadosImovelCobrancaSituacao[6]);
					}
					
					if(dadosImovelCobrancaSituacao[7] != null){
						helper.setAdvogadoResponsavelCobranca((String)dadosImovelCobrancaSituacao[7]);
					}
					
					colecaoRetorno.add(helper);
					
				}
				
			}
			
			return colecaoRetorno;
		} catch (ErroRepositorioException ex) {
			ex.printStackTrace();
			throw new ControladorException("erro.sistema", ex);
		}
	}
	
	
	/**
	 * [UC????] Relatorio Comando Documento Cobranca
	 * Retorna a ação de cobrança para exibição 
	 * de parametros do relatório
	 * 
	 * @author Anderson Italo
	 * @data 04/05/2010
	 */
	public CobrancaAcao pesquisarAcaoCobrancaParaRelatorio(
			Integer idCobrancaAcaoAtividadeComando, Integer idCobrancaAcaoAtividadeCronograma)
			throws ControladorException {
		
		
		CobrancaAcao retorno = null;
		try {
			retorno = repositorioCobranca
					.pesquisarAcaoCobrancaParaRelatorio(idCobrancaAcaoAtividadeComando, idCobrancaAcaoAtividadeCronograma);
		} catch (ErroRepositorioException e) {
			e.printStackTrace();
		}
		
		return retorno;
		
	}

	public Collection pesquisarImovelCobrancaSituacao(Integer idImovel)throws ControladorException {
		try {
			return repositorioCobranca.pesquisarImovelCobrancaSituacao(idImovel);
		} catch (ErroRepositorioException ex) {
			ex.printStackTrace();
			throw new ControladorException("erro.sistema", ex);
		}
	}
	
	
	/**
	 * 
	 * [UC1038] Prescrever Débitos de Imóveis
	 * 
	 * @author Hugo Leonardo
	 * @date 08/07/2010
	 * 
	 */
	public Collection obterCobrancaSituacaoParaPrescreverDebitos() throws ControladorException {
		
		try {		
			return repositorioCobranca.obterCobrancaSituacaoParaPrescreverDebitos();

		} catch (ErroRepositorioException ex) {
			ex.printStackTrace();
			throw new ControladorException("erro.sistema", ex);
		}
	}
	

	/**
	 * 
	 * Inserir um comando de atividade de cobrança eventual
	 * 
	 * [UC0243] - Inserir Comando Ação de Cobrança
	 * 
	 * Verificar data final menos que data inicial
	 * 
	 * [FS0014] - Verificar data final menos que data inicial
	 * 
	 * @author Hugo Amorim
	 * @throws ControladorException
	 * @date 12/07/2010
	 */
	private void verificarPeriodoFiscalizacaoComandoAcaoCobranca(
			String anoMesVencimentoInicial, String anoMesVencimentoFinal)
			throws ControladorException {

		if (anoMesVencimentoInicial != null
				&& !anoMesVencimentoInicial.equals("")) {

			boolean valida = Util.validarDiaMesAno(anoMesVencimentoInicial);
			if (valida) {
				throw new ControladorException("atencao.erro_invalido", null,
						"Data Inicial do Período de Fiscalização");
			}

		}

		if ((anoMesVencimentoInicial != null && !anoMesVencimentoInicial
				.equals(""))
				&& (anoMesVencimentoFinal != null && !anoMesVencimentoFinal
						.equals(""))) {

			if (anoMesVencimentoInicial.length() == 10
					& anoMesVencimentoFinal.length() == 10) {

				boolean valida = Util.validarDiaMesAno(anoMesVencimentoInicial);
				if (valida) {
					throw new ControladorException("atencao.erro_invalido", null,
							"Data Inicial do Período de Fiscalização");
				}
				valida = Util.validarDiaMesAno(anoMesVencimentoFinal);
				if (valida) {
					throw new ControladorException("atencao.erro_invalido", null,
							"Data Final do Período de Fiscalização");
				}

			} else {
				if (anoMesVencimentoInicial.length() < 10) {
					throw new ControladorException("atencao.erro_invalido", null,
							"Data Inicial do Período de Fiscalização");
				}

				if (anoMesVencimentoFinal.length() < 10) {
					throw new ControladorException("atencao.erro_invalido", null,
							"Data Final do Período de Fiscalização");
				}
			}
		}
	}
	
	/**
	 * [UC0244] Manter Comando Ação de Cobrança
	 * 
	 * @author Hugo Amorim
	 * @created 14/07/2010
	 *
	 * @exception ErroRepositorioException
	 *             
	 */
	public void removerCobrancaAcaoAtividadeComandoFiscalizacaoSituacao(
			Integer idComando)throws ControladorException{
		try{
			
			this.repositorioCobranca
				.removerCobrancaAcaoAtividadeComandoFiscalizacaoSituacao(idComando);

		} catch (ErroRepositorioException e) {
			e.printStackTrace();
			throw new ControladorException("erro.sistema", e);
		}	
	}

	
	/**
	 * [UC0478] Gerar Resumo das Ações de Cobrança do Cronograma
	 * 
	 * Pesquisa os dados de cobranca documento agrupado para pegar a quantidade
	 * e o valor dos documentos
	 * 
	 * @author Sávio Luiz
	 * @date 19/10/2006
	 * 
	 * @return Collection retorno
	 * @throws ErroRepositorioException
	 */
	public Collection pesquisarDadosCobrancaDocumentoEventualAgrupadoPorDataPrevista(
			int idCobrancaAtividadeAcaoComando)throws ControladorException{
		try{
			
			Collection retorno = null;
			
			Collection colecaoDados =  this.repositorioCobranca.
			pesquisarDadosCobrancaDocumentoEventualAgrupadoPorDataPrevista
			(idCobrancaAtividadeAcaoComando);

			if(colecaoDados != null && !colecaoDados.isEmpty()){
				retorno = new ArrayList();
				DadosCobrancaDocumentoHelper helper = null;
				Iterator iteratorDados = colecaoDados.iterator();
				while (iteratorDados.hasNext()) {
					Object[] dados = (Object[]) iteratorDados.next();
					helper = new DadosCobrancaDocumentoHelper();
					
					if(dados[0] != null){
						helper.setIdFiscalizacao((Integer)dados[0]);
					}
					if(dados[1] != null){
						helper.setIndicadorAcimaAbaixo((Short)dados[1]);
					}
					if(dados[2] != null){
						helper.setIndicadorAcimaLimite((Short)dados[2]);
					}
					if(dados[3] != null){
						helper.setIdCobrancaAcaoSituacao((Integer)dados[3]);
					}
					if(dados[4] != null){
						helper.setIdSituacaoDebito((Integer)dados[4]);
					}
					if(dados[5] != null){
						helper.setIdCategoria((Integer)dados[5]);
					}
					
					if(dados[6] != null){
						helper.setIdEsferaPoder((Integer)dados[6]);
					}
					if(dados[7] != null){
						helper.setIdCobrancaCriterio((Integer)dados[7]);
					}
					if(dados[8] != null){
						helper.setIdCobrancaGrupo((Integer)dados[8]);
					}
					if(dados[9] != null){
						helper.setIdGerenciaRegional((Integer)dados[9]);
					}
					if(dados[10] != null){
						helper.setIdLocalidade((Integer)dados[10]);
					}
					if(dados[11] != null){
						helper.setIdSetorComercial((Integer)dados[11]);
					}
					if(dados[12] != null){
						helper.setIdRota((Integer)dados[12]);
					}
					if(dados[13] != null){
						helper.setIdQuadra((Integer)dados[13]);
					}
					if(dados[14] != null){
						helper.setNumeroQuadra((Integer)dados[14]);
					}
					if(dados[15] != null){
						helper.setCodigoSetorComercial((Integer)dados[15]);
					}
					if(dados[16] != null){
						helper.setIdImovelPerfil((Integer)dados[16]);
					}
					if(dados[17] != null){
						helper.setIdSituacaoLigacaoAgua((Integer)dados[17]);
					}
					if(dados[18] != null){
						helper.setIdSituacaoLigacaoEsgoto((Integer)dados[18]);
					}
					if(dados[19] != null){
						helper.setIdEmpresa((Integer)dados[19]);
					}
					if(dados[20] != null){
						helper.setIdAtendimentoMotivoEncerramento((Integer)dados[20]);
					}
					if(dados[21] != null){
						helper.setIdUnidadeNegocio((Integer)(dados[21]));
					}
					if(dados[22] != null){
						helper.setQuantidadeDocumentos((Integer)dados[22]);
					}
					if(dados[23] != null){
						helper.setValorDocumentos((BigDecimal)dados[23]);
					}

					retorno.add(helper);
					
				}
				
			}
			
			return retorno;
			
		} catch (ErroRepositorioException e) {
			e.printStackTrace();
			throw new ControladorException("erro.sistema", e);
		}	
	}
	
	/**
	 * [UC0478] Gerar Resumo das Ações de Cobrança do Cronograma
	 * 
	 * Pesquisa os dados de cobranca documento agrupado para pegar a quantidade
	 * e o valor dos documentos
	 * 
	 * @author Sávio Luiz,Vivianne Sousa, Ivan Sergio
	 * @date 17/10/2006,30/08/2010, 23/12/2010
	 * 
	 * @return Collection retorno
	 * @throws ErroRepositorioException
	 */
	public Collection pesquisarDadosCobrancaDocumentoAgrupadoPorDataComando(
			int idCobrancaAtividadeAcaoCronograma)throws ControladorException{
		try{
			
			Collection retorno = null;
			
			Collection colecaoDados =  this.repositorioCobranca.
			pesquisarDadosCobrancaDocumentoAgrupadoPorDataComando
			(idCobrancaAtividadeAcaoCronograma);

			if(colecaoDados != null && !colecaoDados.isEmpty()){
				retorno = new ArrayList();
				DadosCobrancaDocumentoHelper helper = null;
				Iterator iteratorDados = colecaoDados.iterator();
				while (iteratorDados.hasNext()) {
					Object[] dados = (Object[]) iteratorDados.next();
					helper = new DadosCobrancaDocumentoHelper();
					
					if(dados[0] != null){
						helper.setIdFiscalizacao((Integer)dados[0]);
					}
					if(dados[1] != null){
						helper.setIndicadorAcimaAbaixo((Short)dados[1]);
					}
					if(dados[2] != null){
						helper.setIndicadorAcimaLimite((Short)dados[2]);
					}
					if(dados[3] != null){
						helper.setIdCobrancaAcaoSituacao((Integer)dados[3]);
					}
					if(dados[4] != null){
						helper.setIdSituacaoDebito((Integer)dados[4]);
					}
					if(dados[5] != null){
						helper.setIdCategoria((Integer)dados[5]);
					}
					
					if(dados[6] != null){
						helper.setIdEsferaPoder((Integer)dados[6]);
					}
					if(dados[7] != null){
						helper.setIdCobrancaCriterio((Integer)dados[7]);
					}
					
					if(dados[8] != null){
						helper.setIdGerenciaRegional((Integer)dados[8]);
					}
					if(dados[9] != null){
						helper.setIdLocalidade((Integer)dados[9]);
					}
					if(dados[10] != null){
						helper.setIdSetorComercial((Integer)dados[10]);
					}
					if(dados[11] != null){
						helper.setIdRota((Integer)dados[11]);
					}
					if(dados[12] != null){
						helper.setIdQuadra((Integer)dados[12]);
					}
					if(dados[13] != null){
						helper.setNumeroQuadra((Integer)dados[13]);
					}
					if(dados[14] != null){
						helper.setCodigoSetorComercial((Integer)dados[14]);
					}
					if(dados[15] != null){
						helper.setIdImovelPerfil((Integer)dados[15]);
					}
					if(dados[16] != null){
						helper.setIdSituacaoLigacaoAgua((Integer)dados[16]);
					}
					if(dados[17] != null){
						helper.setIdSituacaoLigacaoEsgoto((Integer)dados[17]);
					}
					if(dados[18] != null){
						helper.setIdEmpresa((Integer)dados[18]);
					}
					if(dados[19] != null){
						helper.setIdAtendimentoMotivoEncerramento((Integer)dados[19]);
					}
					if(dados[20] != null){
						helper.setIdUnidadeNegocio((Integer)(dados[20]));
					}
					if(dados[21] != null){
						helper.setIdDocumentoEmissaoForma((Integer)dados[21]);
					}
					if(dados[22] != null){
						helper.setQuantidadeDocumentos((Integer)dados[22]);
					}
					if(dados[23] != null){
						helper.setValorDocumentos((BigDecimal)dados[23]);
					}
					//*************************************************
					// RM3323
					// Autor: Ivan Sergio
					// Data: 23/12/2010
					// Alteracao para gerar consulta de tipo de corte;
					//*************************************************
					if(dados[24] != null){
						helper.setIdCorteTipo((Integer) dados[24]);
					}
					//*************************************************

					retorno.add(helper);
					
				}
				
			}
			
			return retorno;
			
		} catch (ErroRepositorioException e) {
			e.printStackTrace();
			throw new ControladorException("erro.sistema", e);
		}	
	}
	
	/**
	 * [UC0478] Gerar Resumo das Ações de Cobrança do Cronograma
	 * 
	 * Pesquisa os dados de cobranca documento agrupado para pegar a quantidade
	 * e o valor dos documentos
	 * 
	 * @author Sávio Luiz,Vivianne Sousa
	 * @date 17/10/2006,30/08/2010
	 * 
	 * @return Collection retorno
	 * @throws ErroRepositorioException
	 */
	public Collection pesquisarDadosCobrancaDocumentoAgrupadoPorDataPrevista(
			int idCobrancaAtividadeAcaoCronograma)throws ControladorException{
		try{
			
			Collection retorno = null;
			
			Collection colecaoDados =  this.repositorioCobranca.
			pesquisarDadosCobrancaDocumentoAgrupadoPorDataComando
			(idCobrancaAtividadeAcaoCronograma);

			if(colecaoDados != null && !colecaoDados.isEmpty()){
				retorno = new ArrayList();
				DadosCobrancaDocumentoHelper helper = null;
				Iterator iteratorDados = colecaoDados.iterator();
				while (iteratorDados.hasNext()) {
					Object[] dados = (Object[]) iteratorDados.next();
					helper = new DadosCobrancaDocumentoHelper();
					
					if(dados[0] != null){
						helper.setIdFiscalizacao((Integer)dados[0]);
					}
					if(dados[1] != null){
						helper.setIndicadorAcimaAbaixo((Short)dados[1]);
					}
					if(dados[2] != null){
						helper.setIndicadorAcimaLimite((Short)dados[2]);
					}
					if(dados[3] != null){
						helper.setIdCobrancaAcaoSituacao((Integer)dados[3]);
					}
					if(dados[4] != null){
						helper.setIdSituacaoDebito((Integer)dados[4]);
					}
					if(dados[5] != null){
						helper.setIdCategoria((Integer)dados[5]);
					}
					
					if(dados[6] != null){
						helper.setIdEsferaPoder((Integer)dados[6]);
					}
					if(dados[7] != null){
						helper.setIdCobrancaCriterio((Integer)dados[7]);
					}
					
					if(dados[8] != null){
						helper.setIdGerenciaRegional((Integer)dados[8]);
					}
					if(dados[9] != null){
						helper.setIdLocalidade((Integer)dados[9]);
					}
					if(dados[10] != null){
						helper.setIdSetorComercial((Integer)dados[10]);
					}
					if(dados[11] != null){
						helper.setIdRota((Integer)dados[11]);
					}
					if(dados[12] != null){
						helper.setIdQuadra((Integer)dados[12]);
					}
					if(dados[13] != null){
						helper.setNumeroQuadra((Integer)dados[13]);
					}
					if(dados[14] != null){
						helper.setCodigoSetorComercial((Integer)dados[14]);
					}
					if(dados[15] != null){
						helper.setIdImovelPerfil((Integer)dados[15]);
					}
					if(dados[16] != null){
						helper.setIdSituacaoLigacaoAgua((Integer)dados[16]);
					}
					if(dados[17] != null){
						helper.setIdSituacaoLigacaoEsgoto((Integer)dados[17]);
					}
					if(dados[18] != null){
						helper.setIdEmpresa((Integer)dados[18]);
					}
					if(dados[19] != null){
						helper.setIdAtendimentoMotivoEncerramento((Integer)dados[19]);
					}
					if(dados[20] != null){
						helper.setIdUnidadeNegocio((Integer)(dados[20]));
					}
					if(dados[21] != null){
						helper.setIdDocumentoEmissaoForma((Integer)dados[21]);
					}
					if(dados[22] != null){
						helper.setQuantidadeDocumentos((Integer)dados[22]);
					}
					if(dados[23] != null){
						helper.setValorDocumentos((BigDecimal)dados[23]);
					}
					//*************************************************
					// RM3323
					// Autor: Ivan Sergio
					// Data: 23/12/2010
					// Alteracao para gerar consulta de tipo de corte;
					//*************************************************
					if(dados[24] != null){
						helper.setIdCorteTipo((Integer) dados[24]);
					}
					//*************************************************

					retorno.add(helper);
					
				}
				
			}
			
			return retorno;
			
		} catch (ErroRepositorioException e) {
			e.printStackTrace();
			throw new ControladorException("erro.sistema", e);
		}	
	}
	
	
	/**
	 * Pesquisa Documentos de cobranças validos para imovel para determinado tipo de documento
	 * 
	 * @author Hugo Amorim
	 * @date 09/09/2010
	 */
	public Collection<CobrancaDocumento> pesquisarCobrancaDocumentoValidoImovel(Integer idImovel,Integer idDocumentoTipo,
		Integer idAcaoCobranca)throws ControladorException{
		
		Collection<CobrancaDocumento> retorno = new ArrayList<CobrancaDocumento>();
		
			try{
				
				
				retorno = 
					this.repositorioCobranca.pesquisarDadosCobrancaDocumentoValidoImovel(
							idImovel,idDocumentoTipo,idAcaoCobranca);
				
				/*Date dataAtual = new Date();

				Collection colecaoDados =
					this.repositorioCobranca.pesquisarDadosCobrancaDocumentoValidoImovel(idImovel,idDocumentoTipo);
	
				if(colecaoDados != null && !colecaoDados.isEmpty()){
					Iterator iteratorDados = colecaoDados.iterator();
					while (iteratorDados.hasNext()) {
						Object[] dados = (Object[]) iteratorDados.next();
						
						CobrancaDocumento cobrancaDocumento = null;
						Integer numeroDiasValidadeAcao = null;
						
						if(dados[0] != null){
							cobrancaDocumento = (CobrancaDocumento) dados[0];
						}
						if(dados[1] != null){
							numeroDiasValidadeAcao = (Integer) dados[1];
						}
						
						Date dataValidade = 
							Util.adicionarNumeroDiasDeUmaData(cobrancaDocumento.getEmissao(),
									numeroDiasValidadeAcao);
						
						if(dataValidade.compareTo(dataAtual)>0){
							retorno.add(cobrancaDocumento);
						}
					}			
				}*/
			} catch (ErroRepositorioException e) {
				e.printStackTrace();
				throw new ControladorException("erro.sistema", e);
			}
		
		return retorno;
	}
	
	/**
	* [UC0478] Gerar Resumo das Ações de Cobrança do Cronograma
	*
	* Data: 16/09/2010
	* @author Vivianne Sousa
	*/
	public boolean existeCobrancaDocumentoFisc(
		Integer idFiscalizacaoSituacao,
		Integer idOrdemServico,
		Integer idCobrancaDocumento)throws ControladorException {

		boolean existeCobrancaDocumentoFisc = false;
		try {
	
			Integer idCobrancaDocumentoFisc = repositorioCobranca.pesquisarCobrancaDocumentoFisc(
					idFiscalizacaoSituacao,idOrdemServico,idCobrancaDocumento);
		
			if (idCobrancaDocumentoFisc != null){
				existeCobrancaDocumentoFisc = true;
			}
		
		} catch (ErroRepositorioException ex) {
			throw new ControladorException("erro.sistema", ex);
		}
		return existeCobrancaDocumentoFisc;
	}
	
	
	/**
	 * [UC0214] Efetuar Parcelamento de Débitos 
	 *
	 * @author Raphael Rossiter
	 * @date 28/10/2010
	 *
	 * @param isContaEntradaParcelamento
	 * @param sistemaParametro
	 * @return Date
	 * @throws ControladorException
	 */
	public Date obterDataVencimentoEntradaParcelamento(boolean isContaEntradaParcelamento, SistemaParametro sistemaParametro) 
		throws ControladorException{
		
		Date dataVencimentoEntradaParcelamento = null;
		
		if (isContaEntradaParcelamento){
			
			int numeroDiasVencimentoEntradaParcelamento = sistemaParametro.getNumeroDiasVencimentoEntradaParcelamento().intValue();
			dataVencimentoEntradaParcelamento = Util.adicionarNumeroDiasDeUmaData(new Date(), numeroDiasVencimentoEntradaParcelamento);
		}
		
		
		return dataVencimentoEntradaParcelamento;
	}
	
	/**
	 * [UC1112] Processar  Encerramento Ordens de Serviço da Ação de Cobrança
	 * 
	 * @author Mariana Victor
	 * @created 02/12/2010
	 * 
	 * @exception ErroRepositorioException
	 *                Repositorio Exception
	 */
	public Collection<Integer> pesquisarOrdemServicoParaEncerrar(Integer idCobrancaAcaoCronograma)
			throws ControladorException {
		try {

			return repositorioCobranca
					.pesquisarOrdemServicoParaEncerrar(idCobrancaAcaoCronograma);

		} catch (ErroRepositorioException ex) {
			sessionContext.setRollbackOnly();
			ex.printStackTrace();
			throw new ControladorException("erro.sistema", ex);
		}
	}
	
	/**
	 * 
	 * [UC1112] Processar Encerramento Ordens de Serviço da Ação de Cobrança
	 * 
	 * Ordens de Serviço que não tenham sido executadas encerradas por decurso de prazo
	 * 
	 * @author Mariana Victor
	 * @date 02/12/2010
	 * 
	 */
	public void processarEncerramentoOSAcaoCobranca(
			Integer dadosAtividadeCronograma, Integer idCobrancaAtividadeCronograma,
			int idFuncionalidadeIniciada) throws ControladorException {
		int idUnidadeIniciada = 0;

		// posições do array com os dados que serão atualizados
		final int POSICAO_ID_COB_ACAO_ATIV_CRON_ENCERRAR = 0;
		final int POSICAO_DATA_COM_ATIV_ENCERRAR = 1;
		final int POSICAO_DATA_PREV_ATIV_ENCERRAR = 2;
		final int POSICAO_ID_ORDEM_SERVICO = 3;
		final int POSICAO_ID_COBRANCA_ATIVIDADE = 4;

		// -------------------------
		//
		// Registrar o início do processamento da Unidade de
		// Processamento
		// do Batch
		//
		// -------------------------

		idUnidadeIniciada = getControladorBatch()
				.iniciarUnidadeProcessamentoBatch(
						idFuncionalidadeIniciada,
						UnidadeProcessamento.COB_ACAO_ATIV_CRONOG,
						((Integer) dadosAtividadeCronograma));

		
		Usuario usuarioLogado = Usuario.USUARIO_BATCH;

		
		try {
			Collection colecaoOrdemServicoParaEncerrar = repositorioCobranca
				.pesquisarAtivCronogOrdemServicoParaEncerrar(dadosAtividadeCronograma);
			
			if (colecaoOrdemServicoParaEncerrar != null
					&& !colecaoOrdemServicoParaEncerrar
							.isEmpty()) {
				
				if (colecaoOrdemServicoParaEncerrar != null) {
					Iterator iteratorColecaoOrdemServicoParaEncerrar = colecaoOrdemServicoParaEncerrar
							.iterator();

					while (iteratorColecaoOrdemServicoParaEncerrar
							.hasNext()) {

						Object[] dadosOrdemServicoParaEncerrar = (Object[]) iteratorColecaoOrdemServicoParaEncerrar
								.next();
	
							Date dataAtual = new Date();
							Timestamp dataComando = null;
							Date dataPrevista = null;
							Integer idOrdemServico = null;
							Integer idLocalidade = null;
							Integer idCobAcaoAtivCron = null;
							Integer idCobAtiv = null;
							Short idMotivoEncerramento = AtendimentoMotivoEncerramento.CANCELADO_POR_DERCURSO_DE_PRAZO;
							
							if (dadosOrdemServicoParaEncerrar[POSICAO_ID_ORDEM_SERVICO] != null) {
								idOrdemServico = ((Integer) dadosOrdemServicoParaEncerrar[POSICAO_ID_ORDEM_SERVICO])
										.intValue();
							}
							if (dadosOrdemServicoParaEncerrar[POSICAO_DATA_COM_ATIV_ENCERRAR] != null) {
								dataComando = (Timestamp) dadosOrdemServicoParaEncerrar[POSICAO_DATA_COM_ATIV_ENCERRAR];
							}
							if (dadosOrdemServicoParaEncerrar[POSICAO_DATA_PREV_ATIV_ENCERRAR] != null) {
								dataPrevista = (Date) dadosOrdemServicoParaEncerrar[POSICAO_DATA_PREV_ATIV_ENCERRAR];
							}
							if(dadosOrdemServicoParaEncerrar[POSICAO_ID_COB_ACAO_ATIV_CRON_ENCERRAR] != null){
								idCobAcaoAtivCron = (Integer) dadosOrdemServicoParaEncerrar[POSICAO_ID_COB_ACAO_ATIV_CRON_ENCERRAR];
							}
							if(dadosOrdemServicoParaEncerrar[POSICAO_ID_COBRANCA_ATIVIDADE] != null){
								idCobAtiv = (Integer) dadosOrdemServicoParaEncerrar[POSICAO_ID_COBRANCA_ATIVIDADE];
							}
							if (dataComando != null
									&& Util.compararDataTime(dataPrevista, dataAtual) != 1 ) {
								
								Collection localidade = repositorioCobranca
									.pesquisarLocalidade(idOrdemServico);
								if (localidade != null) {
									Iterator iteratorLocalidade = localidade.iterator();
									if (iteratorLocalidade.hasNext()) {
										Object dadosLocalidade = iteratorLocalidade.next();
										idLocalidade = ((Integer)(dadosLocalidade)).intValue();
									}
								}
								
								UnidadeOrganizacional unidadeOrganizacional = getControladorUnidade()
										.pesquisarUnidadeOrganizacionalLocalidade(
												idLocalidade);
								usuarioLogado
										.setUnidadeOrganizacional(unidadeOrganizacional);
								
								 // encerrar a ordem de serviço, com o motivo
								// correspodente a decurso de prazo
								// [UC0457] - Encerrar Ordem de Serviço
								this.getControladorOrdemServico()
									.encerrarOSSemExecucao(
											idOrdemServico,
											dataAtual,
											usuarioLogado,
											idMotivoEncerramento.toString(),
											dataAtual, null, null, null, null,null,null, null);
									 
								if(idCobAtiv != null && idCobAtiv.equals(CobrancaAtividade.ENCERRAR_OS)){
									repositorioCobranca.atualizarDataRealizacaoCobrancaAcaoAtivCronograma(idCobAtiv);
								}
								
							}
							
							// seta para null para o GC liberar
							idOrdemServico = null;
							dataComando = null;
							dataPrevista = null;
							
							
					}
	
				}
				
				
			}
			
			repositorioCobranca.atualizarDataRealizacaoCobrancaAcaoAtivCronograma(idCobrancaAtividadeCronograma);
			
			getControladorBatch().encerrarUnidadeProcessamentoBatch(null,
					idUnidadeIniciada, false);

			System.out.println("########## FINALIZADO EM  = " + new Date());

		} catch (Exception e) {
			// Este catch serve para interceptar qualquer exceção que o processo
			// batch venha a lançar e garantir que a unidade de processamento do
			// batch será atualizada com o erro ocorrido
			e.printStackTrace();

			getControladorBatch().encerrarUnidadeProcessamentoBatch(e,
					idUnidadeIniciada, true);

			throw new EJBException(e);
		}

	}
	
	/**
	 * [UC1112] Processar  Encerramento Ordens de Serviço da Ação de Cobrança
	 * 
	 * @author Mariana Victor
	 * @created 07/12/2010
	 * 
	 * @exception ErroRepositorioException
	 *                Repositorio Exception
	 */
	public Collection<Object[]> pesquisarAtividadeCronograma(Integer idCobrancaAcao)
			throws ControladorException {
		try {

			return repositorioCobranca
					.pesquisarAtividadeCronograma(idCobrancaAcao);

		} catch (ErroRepositorioException ex) {
			sessionContext.setRollbackOnly();
			ex.printStackTrace();
			throw new ControladorException("erro.sistema", ex);
		}
	}
	
	/**
	 * [UC0214] Efetuar Parcelamento de Débitos 
	 *
	 * @author Raphael Rossiter
	 * @date 28/10/2010
	 *
	 * @param colecaoContaValores
	 * @return Collection<Conta>
	 * @throws ControladorException
	 */
	public Collection<Conta> obterContasEntradaParcelamento(Collection<ContaValoresHelper> colecaoContaValores) 
		throws ControladorException{
		
		Collection<Conta> colecaoContaEP = new ArrayList<Conta>();

		if (colecaoContaValores != null && !colecaoContaValores.isEmpty()) {
			Iterator contaValores = colecaoContaValores.iterator();

			while (contaValores.hasNext()) {
				ContaValoresHelper contaValoresHelper = (ContaValoresHelper) contaValores
						.next();

				if (contaValoresHelper.getIndicadorContasDebito() != null && 
					contaValoresHelper.getIndicadorContasDebito().equals(new Integer("1"))) {

					colecaoContaEP.add(contaValoresHelper.getConta());
				}
			}
		}
		
		return colecaoContaEP;
	}
	

	public Integer recuperaMaiorAnoMesContasParcelamento(Collection colecaoContas){
		Integer maiorAnoMes = null;
		
		Iterator iteratorContas = colecaoContas.iterator();
		
		while (iteratorContas.hasNext()){
			
			ContaValoresHelper helper = (ContaValoresHelper) iteratorContas.next();
			Conta conta = helper.getConta();
			
			if(maiorAnoMes == null){
				maiorAnoMes = conta.getReferencia();
			}else if(conta.getReferencia() > maiorAnoMes){
				maiorAnoMes = conta.getReferencia();
			}
			
		}
		return maiorAnoMes;
	}
	
	/**
	 * [UC676] Consultar Resumo Negativação
	 * 
	 * @author Ivan Sergio
	 * @date 14/01/2011
	 * 
	 * @param dadosConsultaNegativacaoHelper
	 * @param idSituacaoDebito
	 * @return
	 * @throws ControladorException
	 */
	public Collection consultarResumoNegativacaoLigacaoAguaPorSituacaoDebito(
			DadosConsultaNegativacaoHelper dadosConsultaNegativacaoHelper, int idSituacaoDebito)
			throws ControladorException {

		Collection negativacaoHelper = null;
		try {
			// Pega a lista de Resumo das Negativacoes da base de dados.
			negativacaoHelper = repositorioCobranca.consultarNegativacaoLigacaoAguaPorSituacaoDebito(
					dadosConsultaNegativacaoHelper, idSituacaoDebito);

		} catch (ErroRepositorioException ex) {
			ex.printStackTrace();
			throw new ControladorException("erro.sistema", ex);
		}
		return negativacaoHelper;
	}


	/**
	 * [UC0251] Gerar Atividade de Ação de Cobrança 
	 * [SB0003] Gerar Atividade de Ação de Cobrança para Imóvel
	 * 
	 * @author Vivianne Sousa
	 * @created 22/12/2010
	**/
	public boolean verificaValidacaoPorItemCobrado(Integer idImovel, 
			Integer idDocumentoTipo	,Collection<ContaValoresHelper> colecaoContasValores,
			Collection<DebitoACobrar> colecaoDebitoACobrar) throws ControladorException{
		try{
			boolean retorno = false;
			
			Collection idsDocumentoCobranca = repositorioCobranca.
				pesquisarIdDocumentoCobrancaParaImovel(idImovel,idDocumentoTipo);
			
			if(idsDocumentoCobranca != null && !idsDocumentoCobranca.isEmpty()){
				
				Collection idsConta = null;
				if(colecaoContasValores != null && !colecaoContasValores.isEmpty()){
					idsConta = new ArrayList();
					
					Iterator iterContas = colecaoContasValores.iterator();
					while (iterContas.hasNext()) {
						ContaValoresHelper contaValoresHelper = (ContaValoresHelper) iterContas.next();
						if(contaValoresHelper.getConta() != null){
							idsConta.add(contaValoresHelper.getConta().getId());
						}
					}
				}
				
				
				if(idsConta != null && !idsConta.isEmpty()){
					
					Integer qtdeDocumentoCobrancaItemConta = repositorioCobranca.
						pesquisarQtdeDocumentoCobrancaItemConta(idsDocumentoCobranca,idsConta);
					
					if(qtdeDocumentoCobrancaItemConta > 0){
						retorno = true;
					}
					
				}
				
				if(!retorno){
					
					Collection idsDebitoACobrar = null;
					if(colecaoDebitoACobrar != null && !colecaoDebitoACobrar.isEmpty()){
						idsDebitoACobrar = new ArrayList();
						
						Iterator iterContas = colecaoDebitoACobrar.iterator();
						while (iterContas.hasNext()) {
							DebitoACobrar debitoACobrar = (DebitoACobrar) iterContas.next();
							idsDebitoACobrar.add(debitoACobrar.getId());
						}
					}
					
					if(idsDebitoACobrar != null && !idsDebitoACobrar.isEmpty()){
						
						Integer qtdeDocumentoCobrancaItemDebitoACobrar = repositorioCobranca.
							pesquisarQtdeDocumentoCobrancaItemDebitoACobrar(idsDocumentoCobranca,idsDebitoACobrar);
						
						if(qtdeDocumentoCobrancaItemDebitoACobrar > 0){
							retorno = true;
						}
						
					}
					
				}
				
			}
			
			return retorno;
		} catch (ErroRepositorioException e) {
			throw new ControladorException("erro.sistema", e);
		}	
		
	}

	/**
	 * [UC1156] Emitir Documentos de Cobrança Em Lote
	 * 
	 * @author Mariana Victor
	 * @date 17/01/2011
	 * 
	 * @return
	 * @throws ErroRepositorioException ----
	 */
	public Collection<RelatorioVisitaCobrancaBean> gerarRelatorioVisitaCobranca(
			Integer idCobrancaAcaoCronograma, Integer idCobrancaAcaoComando,
			int tamanhoMaximoDebito, String quantidadeRelatorios, Collection<CobrancaDocumento> colecaoDocumentoCobranca) throws ControladorException {
		
		Collection<RelatorioVisitaCobrancaBean> retorno = new ArrayList<RelatorioVisitaCobrancaBean>();
		
		try {
			FiltroSistemaParametro filtroSistemaParametro = new FiltroSistemaParametro();
			Collection colecaoSistemaParametro = Fachada.getInstancia().pesquisar(filtroSistemaParametro,SistemaParametro.class.getName());
			SistemaParametro sistemaParametro = (SistemaParametro) colecaoSistemaParametro.iterator().next();
			
			if (colecaoDocumentoCobranca == null || colecaoDocumentoCobranca.isEmpty()){
				colecaoDocumentoCobranca = repositorioCobranca
						.pesquisarCobrancaDocumentoParaRelatorio(idCobrancaAcaoCronograma, idCobrancaAcaoComando);
			}

			int count = 1;
			
			if(Util.isVazioOrNulo(colecaoDocumentoCobranca)){
				throw new ActionServletException("atencao.relatorio.vazio");
			}
			
			for (CobrancaDocumento cobrancaDocumento : colecaoDocumentoCobranca) {
				int count2 = 0;
				
				BigDecimal valor = new BigDecimal(0);
				Collection<Conta> contas = repositorioCobranca.pesquisarCobrancaDocumentoItem(cobrancaDocumento.getId());
				
				String inscricao = getControladorImovel().pesquisarInscricaoImovel(cobrancaDocumento.getImovel().getId());
				Cliente clienteUsuario = getControladorCliente().retornaDadosClienteUsuario(cobrancaDocumento.getImovel().getId());
				String telefoneCliente = ""; 
				String codigoRota = cobrancaDocumento.getImovel().getQuadra().getRota().getCodigo().toString();
				String sequencialRota = "";
				String descricaoSituacaoLigacaoAgua = cobrancaDocumento
						.getLigacaoAguaSituacao().getDescricao();
				String descricaoSituacaoLigacaoEsgoto = cobrancaDocumento
						.getLigacaoEsgotoSituacao().getDescricao();
				String numeroHidrometro = "";
				
				FiltroLocalidade filtroLocalidade = new FiltroLocalidade();
				filtroLocalidade.adicionarParametro(new ParametroSimples(FiltroLocalidade.ID, 
					cobrancaDocumento.getImovel().getLocalidade().getLocalidade().getId()));				
				filtroLocalidade.adicionarCaminhoParaCarregamentoEntidade("logradouroCep");
				filtroLocalidade.adicionarCaminhoParaCarregamentoEntidade("logradouroCep.cep");
				filtroLocalidade.adicionarCaminhoParaCarregamentoEntidade("logradouroCep.logradouro");
				filtroLocalidade.adicionarCaminhoParaCarregamentoEntidade("logradouroCep.logradouro.logradouroTipo");
				filtroLocalidade.adicionarCaminhoParaCarregamentoEntidade("logradouroCep.logradouro.logradouroTitulo");
				filtroLocalidade.adicionarCaminhoParaCarregamentoEntidade("enderecoReferencia");
				filtroLocalidade.adicionarCaminhoParaCarregamentoEntidade("logradouroBairro");
				filtroLocalidade.adicionarCaminhoParaCarregamentoEntidade("logradouroBairro.bairro");
				filtroLocalidade.adicionarCaminhoParaCarregamentoEntidade("logradouroBairro.bairro.municipio");
				filtroLocalidade.adicionarCaminhoParaCarregamentoEntidade("logradouroBairro.bairro.municipio.unidadeFederacao");
				filtroLocalidade.adicionarCaminhoParaCarregamentoEntidade("enderecoReferencia");
				filtroLocalidade.adicionarCaminhoParaCarregamentoEntidade("unidadeNegocio");
				
				Collection cLocalidade = (Collection) getControladorUtil().pesquisar(filtroLocalidade,Localidade.class.getName());				
				Localidade localidadeUnidadeNegocio = (Localidade) cLocalidade.iterator().next();
				
				String enderecoUnidadeNegocio;
				if(localidadeUnidadeNegocio !=null){
					enderecoUnidadeNegocio = localidadeUnidadeNegocio.getEnderecoFormatadoTituloAbreviado();
				}
				else{
					enderecoUnidadeNegocio = sistemaParametro.getEnderecoFormatadoAbreviado();
				}
				
				if(cobrancaDocumento.getImovel().getLigacaoAgua() != null){
					if(cobrancaDocumento.getImovel().getLigacaoAgua().getHidrometroInstalacaoHistorico() != null){
						if(cobrancaDocumento.getImovel().getLigacaoAgua().getHidrometroInstalacaoHistorico().getHidrometro() != null){
							numeroHidrometro = cobrancaDocumento.getImovel().getLigacaoAgua().getHidrometroInstalacaoHistorico().getHidrometro().getNumero();
						}
					}
				}
				Date dataVencimento = null;
				
				if (colecaoDocumentoCobranca == null || colecaoDocumentoCobranca.isEmpty()) {
					Util.adicionarNumeroDiasDeUmaData(new Date(),
						cobrancaDocumento.getCobrancaAcao().getNumeroDiasVencimento());
				} else {			
					dataVencimento = this.obterDataVencimentoDocumentoCobranca(cobrancaDocumento);
				}
				
				if(cobrancaDocumento.getImovel().getNumeroSequencialRota()!=null){	
					sequencialRota = cobrancaDocumento.getImovel().getNumeroSequencialRota().toString();
				}
				
				Integer idOrdemServico = null;

				idOrdemServico = repositorioCobranca
						.obterOrdemServicoAssociadaDocumentoCobranca(cobrancaDocumento.getId());

				Integer categoriaRES = 0;
				Integer categoriaPUB = 0;
				Integer categoriaIND = 0;
				Integer categoriaCOM = 0;
				// Inclui [UC0108] - Obter Quantidade de Economias por Categoria
				Collection<Categoria> colecaoCategorias = getControladorImovel()
						.obterQuantidadeEconomiasCategoria(cobrancaDocumento.getImovel());

				Iterator iteratorCategoria = colecaoCategorias.iterator();
				while (iteratorCategoria.hasNext()) {
					Categoria categoria = (Categoria) iteratorCategoria.next();
					if (categoria.getDescricaoAbreviada().equals(Categoria.RESIDENCIAL_DESCRICAO_ABREVIADA)) {
						categoriaRES++;
					} else if (categoria.getDescricaoAbreviada().equals(Categoria.COMERCIAL_DESCRICAO_ABREVIADA)) {
						categoriaCOM++;
					} else if (categoria.getDescricaoAbreviada().equals(Categoria.INDUSTRIAL_DESCRICAO_ABREVIADA)) {
						categoriaIND++;
					} else if (categoria.getDescricaoAbreviada().equals(Categoria.PUBLICO_DESCRICAO_ABREVIADA)) {
						categoriaPUB++;
					}
				}
				
				Collection colecaoClienteFone = getControladorCliente().pesquisarClienteFone(clienteUsuario.getId());

				ClienteFone clienteFone = null;
		
				if (colecaoClienteFone != null && !colecaoClienteFone.isEmpty()) {
		
					Iterator colecaoClienteFoneIterator = colecaoClienteFone
							.iterator();
		
					while (colecaoClienteFoneIterator.hasNext()) {
						clienteFone = (ClienteFone) colecaoClienteFoneIterator
								.next();
		
						if (clienteFone.getIndicadorTelefonePadrao() != null
								&& clienteFone
										.getIndicadorTelefonePadrao()
										.equals(
												ClienteFone.INDICADOR_FONE_PADRAO)) {
							break;
						}
					}
		
					telefoneCliente = clienteFone.getDddTelefone();
		
				}
				
				FiltroCobrancaDocumento filtroCobrancaDocumento = new FiltroCobrancaDocumento();
				filtroCobrancaDocumento.adicionarParametro(
						new ParametroSimples(FiltroCobrancaDocumento.ID, cobrancaDocumento.getId()));
				filtroCobrancaDocumento.adicionarCaminhoParaCarregamentoEntidade(FiltroCobrancaDocumento.PERFIL_IMOVEL);
				Collection colecaoCobrancaDocumento = Fachada.getInstancia().pesquisar(filtroCobrancaDocumento, CobrancaDocumento.class.getName());
				ImovelPerfil imovelPerfil = ((CobrancaDocumento) Util.retonarObjetoDeColecao(colecaoCobrancaDocumento)).getImovelPerfil();
				
				
				//[SB0004 ? Obter Representação numérica do Nosso Número da Ficha de Compensação]
				StringBuilder nossoNumero = Fachada.getInstancia().obterNossoNumeroFichaCompensacao(
						cobrancaDocumento.getDocumentoTipo().getId().toString(),cobrancaDocumento.getId().toString()) ;

				String sacadoParte01;
				if (cobrancaDocumento.getImovel().getNomeImovel() != null) {
					sacadoParte01 = cobrancaDocumento.getImovel().getNomeImovel(); 
				} else {
					sacadoParte01 = clienteUsuario.getNome();
				}
				
				String sacadoParte03 = Util.retornaMatriculaImovelFormatada(cobrancaDocumento.getImovel().getId());
				
				
				String enderecoImovel = getControladorEndereco().pesquisarEnderecoFormatado(
							cobrancaDocumento.getImovel()
									.getId());
				
				
				// representação numérica do código de barras
				String representacaoNumericaCodBarra = "";

				// Obtém a representação numérica do
				// códigode
				// barra
				representacaoNumericaCodBarra = this
						.getControladorArrecadacao()
						.obterRepresentacaoNumericaCodigoBarra(
								5,
								cobrancaDocumento
										.getValorDocumento(),
								cobrancaDocumento.getLocalidade()
										.getId(),
								cobrancaDocumento.getImovel()
										.getId(),
								null,
								null,
								null,
								null,
								String
										.valueOf(cobrancaDocumento
												.getNumeroSequenciaDocumento()),
								cobrancaDocumento
										.getDocumentoTipo().getId(),
								null, null, null);

				// Formata a representação númerica do
				// código de
				// barras
				String representacaoNumericaCodBarraFormatada = representacaoNumericaCodBarra
						.substring(0, 11)
						+ "-"
						+ representacaoNumericaCodBarra.substring(
								11, 12)
						+ " "
						+ representacaoNumericaCodBarra.substring(
								12, 23)
						+ "-"
						+ representacaoNumericaCodBarra.substring(
								23, 24)
						+ " "
						+ representacaoNumericaCodBarra.substring(
								24, 35)
						+ "-"
						+ representacaoNumericaCodBarra.substring(
								35, 36)
						+ " "
						+ representacaoNumericaCodBarra.substring(
								36, 47)
						+ "-"
						+ representacaoNumericaCodBarra.substring(
								47, 48);
				
				String representacaoNumericaCodBarraSemDigito = representacaoNumericaCodBarra
				.substring(0, 11)
				+ representacaoNumericaCodBarra.substring(12, 23)
				+ representacaoNumericaCodBarra.substring(24, 35)
				+ representacaoNumericaCodBarra.substring(36, 47);
				
				
				String nossoNumeroSemDV = nossoNumero.toString().substring(0,17);
				String fatorVencimento = Fachada.getInstancia().obterFatorVencimento(dataVencimento);
				String especificacaoCodigoBarra = Fachada.getInstancia().
					obterEspecificacaoCodigoBarraFichaCompensacao(
				    ConstantesSistema.CODIGO_BANCO_FICHA_COMPENSACAO, 
				    ConstantesSistema.CODIGO_MOEDA_FICHA_COMPENSACAO, 
				    cobrancaDocumento.getValorDocumento(), nossoNumeroSemDV.toString(),
					ConstantesSistema.CARTEIRA_FICHA_COMPENSACAO, fatorVencimento);
			                                
				String representacaoNumericaCodigoBarraFichaCompensacao = 
					Fachada.getInstancia().obterRepresentacaoNumericaCodigoBarraFichaCompensacao(especificacaoCodigoBarra);
				
				Collection<AtendimentoMotivoEncerramento> colecaoMotivosEncerramento = new ArrayList<AtendimentoMotivoEncerramento>();
				
				// 24 - Motivo de Encerramento - [SB0005] - Obter Motivo de Encerramento da Ação de Cobrança
				if (cobrancaDocumento != null 
						&& cobrancaDocumento.getCobrancaAcao() != null
						&& cobrancaDocumento.getCobrancaAcao().getId() != null) {
					
					colecaoMotivosEncerramento = this.selecionaMotivosEncerramentoAcaoCobranca(
						cobrancaDocumento.getCobrancaAcao().getId());
				}
						
				boolean registroAdicionado = false;
				
				BigDecimal valorTotal = BigDecimal.ZERO;
				
				for (Conta conta : contas) {
					count2++;
					
					if ((contas.size() - count2) > tamanhoMaximoDebito) {
						valor = valor.add(conta.getValorTotal());
					} else {
						RelatorioVisitaCobrancaBean bean = new RelatorioVisitaCobrancaBean();

						bean.setSequencial(Util.retornaSequencialFormatado(count));
						if (idOrdemServico != null) {
							bean.setOrdemServico(idOrdemServico.toString());
						} else {
							bean.setOrdemServico("");
						}
						bean.setDataEmissao(Util.formatarData(cobrancaDocumento.getEmissao()));
						bean.setDataValidade(Util.formatarData(dataVencimento));
						bean.setGrupo(cobrancaDocumento.getQuadra().getRota().getCobrancaGrupo().getId().toString());
						bean.setMatricula(cobrancaDocumento.getImovel().getMatriculaFormatada());
						bean.setInscricao(inscricao);
						bean.setEnderecoUnidadeNegocio(enderecoUnidadeNegocio);						
						bean.setRota(codigoRota);
						bean.setSequencialRota(sequencialRota);
						bean.setCategoriaRES(categoriaRES.toString());
						bean.setCategoriaCOM(categoriaCOM.toString());
						bean.setCategoriaIND(categoriaIND.toString());
						bean.setCategoriaPUB(categoriaPUB.toString());
						bean.setSituacaoLigacaoAgua(descricaoSituacaoLigacaoAgua);
						bean.setSituacaoLigacaoEsgoto(descricaoSituacaoLigacaoEsgoto);
						bean.setNomeClienteUsuario(clienteUsuario.getNome());
						bean.setPerfilCliente(imovelPerfil.getDescricao());
						if (clienteUsuario.getCpf() != null)
							bean.setCpfCliente(Util.formatarCpf(clienteUsuario.getCpf()));
						else if (clienteUsuario.getCnpj() != null)
							bean.setCpfCliente(Util.formatarCnpj(clienteUsuario.getCnpj()));
						else
							bean.setCpfCliente("");
						bean.setTelefoneCliente(telefoneCliente);
						bean.setEnderecoImovel(enderecoImovel);
						bean.setSequencialDocumentoCobranca("" + cobrancaDocumento.getNumeroSequenciaDocumento());
						bean.setHidrometro(numeroHidrometro);
						
						RelatorioVisitaCobrancaSubBean relatorioVisitaCobrancaSubBean = new RelatorioVisitaCobrancaSubBean();
//						relatorioVisitaCobrancaSubBean.setRepresentacaoNumericaCodBarraSemDigito(representacaoNumericaCodBarraSemDigito);
						relatorioVisitaCobrancaSubBean.setIdImovel(cobrancaDocumento.getImovel().getId().toString());
						relatorioVisitaCobrancaSubBean.setNossoNumero(nossoNumero.toString());
						relatorioVisitaCobrancaSubBean.setSacadoParte01(sacadoParte01);
						relatorioVisitaCobrancaSubBean.setSacadoParte03(sacadoParte03);
						
						if ((contas.size() - count2) == tamanhoMaximoDebito) {
							valor = valor.add(conta.getValorTotal());
							valorTotal = valorTotal.add(valor);
							bean.setValor(Util.formatarMoedaReal(valor));
							bean.setMesAno("DEB. ATÉ " + conta.getReferenciaFormatada());
							bean.setDataVencimento(Util.formatarData(conta.getDataVencimentoConta()));
						} else {
							valorTotal = valorTotal.add(conta.getValorTotal());
							bean.setValor(Util.formatarMoedaReal(conta.getValorTotal()));
							bean.setMesAno(conta.getReferenciaFormatada());
							bean.setDataVencimento(Util.formatarData(conta.getDataVencimentoConta()));
						}	
						bean.setValorTotal(Util.formatarMoedaReal(valorTotal));
						
						BigDecimal valorDocumento = valorTotal;
						if (cobrancaDocumento.getValorAcrescimos() != null) {
							valorDocumento.add(cobrancaDocumento.getValorAcrescimos());
						}
						if (cobrancaDocumento.getValorDesconto() != null) {
							valorDocumento.subtract(cobrancaDocumento.getValorDesconto());
						}
						relatorioVisitaCobrancaSubBean.setValorDocumento(Util.formatarMoedaReal(valorDocumento));
						
						if (sistemaParametro.getValorExtratoFichaComp() != null && !sistemaParametro.getValorExtratoFichaComp().equals(BigDecimal.ZERO)) {
							if (valorDocumento
									.compareTo(sistemaParametro.getValorExtratoFichaComp()) != -1) {
								relatorioVisitaCobrancaSubBean.setRepresentacaoNumericaCodBarraFormatada(representacaoNumericaCodigoBarraFichaCompensacao);
								relatorioVisitaCobrancaSubBean.setRepresentacaoNumericaCodBarraSemDigito(especificacaoCodigoBarra);
								bean.setSubRelatorio("relatorioOrdemCorteEmissaoFichaCompensacao.jasper");
							} else {
								relatorioVisitaCobrancaSubBean.setRepresentacaoNumericaCodBarraFormatada(representacaoNumericaCodBarraFormatada);
								relatorioVisitaCobrancaSubBean.setRepresentacaoNumericaCodBarraSemDigito(representacaoNumericaCodBarraSemDigito);
								bean.setSubRelatorio("relatorioOrdemCorteEmissaoPadrao.jasper");
							}
						} else {
							relatorioVisitaCobrancaSubBean.setRepresentacaoNumericaCodBarraFormatada(representacaoNumericaCodBarraFormatada);
							relatorioVisitaCobrancaSubBean.setRepresentacaoNumericaCodBarraSemDigito(representacaoNumericaCodBarraSemDigito);
							bean.setSubRelatorio("relatorioOrdemCorteEmissaoPadrao.jasper");
						}

						bean.setRelatorioVisitaCobrancaSubBean(relatorioVisitaCobrancaSubBean);
						
						Collection<RelatorioDocumentoCobrancaMotivosEncerramentoBean> colecaoMotivosEncerramentoSubBean = 
								new ArrayList<RelatorioDocumentoCobrancaMotivosEncerramentoBean>();
						
						if (colecaoMotivosEncerramento != null 
								&& !colecaoMotivosEncerramento.isEmpty()) {
							
							Iterator<AtendimentoMotivoEncerramento> iteratorMotivos = 
									colecaoMotivosEncerramento.iterator();
							
							int quantidadeMotivos = 0;
							
							while(iteratorMotivos.hasNext()) {
								if(quantidadeMotivos == 7) {
									break;
								}
								
								AtendimentoMotivoEncerramento motivo = (AtendimentoMotivoEncerramento)
										iteratorMotivos.next();
								
								RelatorioDocumentoCobrancaMotivosEncerramentoBean beanMotivo = new RelatorioDocumentoCobrancaMotivosEncerramentoBean();
								
								beanMotivo.setMotivoEncerramento(motivo.getDescricao());
								
								if (iteratorMotivos.hasNext()) {
									AtendimentoMotivoEncerramento motivo2 = (AtendimentoMotivoEncerramento)
											iteratorMotivos.next();
									
									beanMotivo.setMotivoEncerramento2(motivo2.getDescricao());
								} else {
									beanMotivo.setMotivoEncerramento2("");
								}
								
								colecaoMotivosEncerramentoSubBean.add(beanMotivo);
								quantidadeMotivos++;
							}
							
							bean.setRelatorioVisitaCobrancaMotivosEncerramentoBean(colecaoMotivosEncerramentoSubBean);
							
						}
						
						registroAdicionado = true;
						retorno.add(bean);
						
					}
					
				}
				
				//adiciona linhas em branco no relatorio para alinhar, 
				//quando a quantidade de relatorios/pagina = 2 
				//e o numero de contas for menor que a metade do "tamanhoMaximoDebito"
				int metadeTamanhoMaxDebito = (tamanhoMaximoDebito + 1) /2;
				
				if(quantidadeRelatorios != null && quantidadeRelatorios.equals("2") && contas.size() < metadeTamanhoMaxDebito){
					for(int i = 0; i < (metadeTamanhoMaxDebito - contas.size()); i++){
						RelatorioVisitaCobrancaBean bean = new RelatorioVisitaCobrancaBean();

						bean.setSequencial(Util.retornaSequencialFormatado(count));
						if (idOrdemServico != null) {
							bean.setOrdemServico(idOrdemServico.toString());
						} else {
							bean.setOrdemServico("");
						}
						bean.setDataEmissao(Util.formatarData(cobrancaDocumento.getEmissao()));
						bean.setDataValidade(Util.formatarData(dataVencimento));
						bean.setGrupo(cobrancaDocumento.getQuadra().getRota().getCobrancaGrupo().getId().toString());
						bean.setMatricula(cobrancaDocumento.getImovel().getMatriculaFormatada());
						bean.setInscricao(inscricao);
						bean.setEnderecoUnidadeNegocio(enderecoUnidadeNegocio);
						bean.setRota(codigoRota);
						bean.setSequencialRota(sequencialRota);
						bean.setCategoriaRES(categoriaRES.toString());
						bean.setCategoriaCOM(categoriaCOM.toString());
						bean.setCategoriaIND(categoriaIND.toString());
						bean.setCategoriaPUB(categoriaPUB.toString());
						bean.setSituacaoLigacaoAgua(descricaoSituacaoLigacaoAgua);
						bean.setSituacaoLigacaoEsgoto(descricaoSituacaoLigacaoEsgoto);
						bean.setNomeClienteUsuario(clienteUsuario.getNome());
						bean.setPerfilCliente(imovelPerfil.getDescricao());
						if (clienteUsuario.getCpf() != null)
							bean.setCpfCliente(Util.formatarCpf(clienteUsuario.getCpf()));
						else if (clienteUsuario.getCnpj() != null)
							bean.setCpfCliente(Util.formatarCnpj(clienteUsuario.getCnpj()));
						else
							bean.setCpfCliente("");
						bean.setTelefoneCliente(telefoneCliente);
						bean.setEnderecoImovel(enderecoImovel);
						bean.setSequencialDocumentoCobranca("" + cobrancaDocumento.getNumeroSequenciaDocumento());
						bean.setHidrometro(numeroHidrometro);
						
						RelatorioVisitaCobrancaSubBean relatorioVisitaCobrancaSubBean = new RelatorioVisitaCobrancaSubBean();
						relatorioVisitaCobrancaSubBean.setRepresentacaoNumericaCodBarraSemDigito(representacaoNumericaCodBarraSemDigito);
						relatorioVisitaCobrancaSubBean.setIdImovel(cobrancaDocumento.getImovel().getId().toString());
						relatorioVisitaCobrancaSubBean.setNossoNumero(nossoNumero.toString());
						relatorioVisitaCobrancaSubBean.setSacadoParte01(sacadoParte01);
						relatorioVisitaCobrancaSubBean.setSacadoParte03(sacadoParte03);
						
						BigDecimal valorDocumento = valorTotal;
						if (cobrancaDocumento.getValorAcrescimos() != null) {
							valorDocumento.add(cobrancaDocumento.getValorAcrescimos());
						}
						if (cobrancaDocumento.getValorDesconto() != null) {
							valorDocumento.subtract(cobrancaDocumento.getValorDesconto());
						}
						relatorioVisitaCobrancaSubBean.setValorDocumento(Util.formatarMoedaReal(valorDocumento));
						
						if (sistemaParametro.getValorExtratoFichaComp() != null && !sistemaParametro.getValorExtratoFichaComp().equals(BigDecimal.ZERO)) {
							if (valorDocumento
									.compareTo(sistemaParametro.getValorExtratoFichaComp()) != -1) {
								bean.setSubRelatorio("relatorioOrdemCorteEmissaoFichaCompensacao.jasper");
								relatorioVisitaCobrancaSubBean.setRepresentacaoNumericaCodBarraFormatada(representacaoNumericaCodigoBarraFichaCompensacao);
							} else {
								bean.setSubRelatorio("relatorioOrdemCorteEmissaoPadrao.jasper");
								relatorioVisitaCobrancaSubBean.setRepresentacaoNumericaCodBarraFormatada(representacaoNumericaCodBarraFormatada);
							}
						} else {
							bean.setSubRelatorio("relatorioOrdemCorteEmissaoPadrao.jasper");
							relatorioVisitaCobrancaSubBean.setRepresentacaoNumericaCodBarraFormatada(representacaoNumericaCodBarraFormatada);
						}
						
						bean.setRelatorioVisitaCobrancaSubBean(relatorioVisitaCobrancaSubBean);
						
						registroAdicionado = true;
						retorno.add(bean);								
					}
				}
				if (registroAdicionado) {
					count++;
				}
			}
			
		} catch (ErroRepositorioException e) {
			throw new ControladorException("erro.sistema", e);
		}
		
		return retorno;
	}

	/**
	 * [UC1156] Emitir Documentos de Cobrança Em Lote
	 * 
	 * @author Mariana Victor
	 * @date 20/01/2011
	 * 
	 * @return
	 * @throws ErroRepositorioException
	 */
	public Collection<RelatorioDocumentoCobrancaOrdemCorteBean> gerarRelatorioDocumentoCobrancaOrdemCorte(
			Integer idCobrancaAcaoCronograma, Integer idCobrancaAcaoComando, int tamanhoMaximoDebito, String quantidadeRelatorios) throws ControladorException {
		
		Collection<RelatorioDocumentoCobrancaOrdemCorteBean> retorno = new ArrayList<RelatorioDocumentoCobrancaOrdemCorteBean>();
		
		try {
			FiltroSistemaParametro filtroSistemaParametro = new FiltroSistemaParametro();
			Collection colecaoSistemaParametro = Fachada.getInstancia().pesquisar(filtroSistemaParametro,SistemaParametro.class.getName());
			SistemaParametro sistemaParametro = (SistemaParametro) colecaoSistemaParametro.iterator().next();
			
			Collection<CobrancaDocumento> colecaoDocumentoCobranca = repositorioCobranca
					.pesquisarCobrancaDocumentoParaRelatorio(idCobrancaAcaoCronograma, idCobrancaAcaoComando);

			if(Util.isVazioOrNulo(colecaoDocumentoCobranca)){
				throw new ActionServletException("atencao.relatorio.vazio");
			}
			
			int count = 1;
			
			for (CobrancaDocumento cobrancaDocumento : colecaoDocumentoCobranca) {
				int count2 = 0;
				
				BigDecimal valor = new BigDecimal(0);
				Collection<Conta> contas = repositorioCobranca.pesquisarCobrancaDocumentoItem(cobrancaDocumento.getId());
				
				String inscricao = getControladorImovel().pesquisarInscricaoImovel(cobrancaDocumento.getImovel().getId());
				
				FiltroLocalidade filtroLocalidade = new FiltroLocalidade();
				filtroLocalidade.adicionarParametro(new ParametroSimples(FiltroLocalidade.ID, 
					cobrancaDocumento.getImovel().getLocalidade().getLocalidade().getId()));				
				filtroLocalidade.adicionarCaminhoParaCarregamentoEntidade("logradouroCep");
				filtroLocalidade.adicionarCaminhoParaCarregamentoEntidade("logradouroCep.cep");
				filtroLocalidade.adicionarCaminhoParaCarregamentoEntidade("logradouroCep.logradouro");
				filtroLocalidade.adicionarCaminhoParaCarregamentoEntidade("logradouroCep.logradouro.logradouroTipo");
				filtroLocalidade.adicionarCaminhoParaCarregamentoEntidade("logradouroCep.logradouro.logradouroTitulo");
				filtroLocalidade.adicionarCaminhoParaCarregamentoEntidade("enderecoReferencia");
				filtroLocalidade.adicionarCaminhoParaCarregamentoEntidade("logradouroBairro");
				filtroLocalidade.adicionarCaminhoParaCarregamentoEntidade("logradouroBairro.bairro");
				filtroLocalidade.adicionarCaminhoParaCarregamentoEntidade("logradouroBairro.bairro.municipio");
				filtroLocalidade.adicionarCaminhoParaCarregamentoEntidade("logradouroBairro.bairro.municipio.unidadeFederacao");
				filtroLocalidade.adicionarCaminhoParaCarregamentoEntidade("enderecoReferencia");
				filtroLocalidade.adicionarCaminhoParaCarregamentoEntidade("unidadeNegocio");
				
				Collection cLocalidade = (Collection) getControladorUtil().pesquisar(filtroLocalidade,Localidade.class.getName());				
				Localidade localidadeUnidadeNegocio = (Localidade) cLocalidade.iterator().next();
				
				String enderecoUnidadeNegocio;
				if(localidadeUnidadeNegocio !=null){
					enderecoUnidadeNegocio = localidadeUnidadeNegocio.getEnderecoFormatadoTituloAbreviado();
				}
				else{
					enderecoUnidadeNegocio = sistemaParametro.getEnderecoFormatadoAbreviado();
				}
				
				Cliente clienteUsuario = getControladorCliente().retornaDadosClienteUsuario(cobrancaDocumento.getImovel().getId());
				String telefoneCliente = ""; 
				String codigoRota = cobrancaDocumento.getImovel().getQuadra().getRota().getCodigo().toString();
				String sequencialRota = "";
				String descricaoSituacaoLigacaoAgua = cobrancaDocumento
						.getLigacaoAguaSituacao().getDescricao();
				String descricaoSituacaoLigacaoEsgoto = cobrancaDocumento
						.getLigacaoEsgotoSituacao().getDescricao();
				String numeroHidrometro = "";
				if(cobrancaDocumento.getImovel().getLigacaoAgua() != null){
					if(cobrancaDocumento.getImovel().getLigacaoAgua().getHidrometroInstalacaoHistorico() != null){
						if(cobrancaDocumento.getImovel().getLigacaoAgua().getHidrometroInstalacaoHistorico().getHidrometro() != null){
							numeroHidrometro = cobrancaDocumento.getImovel().getLigacaoAgua().getHidrometroInstalacaoHistorico().getHidrometro().getNumero();
						}
					}
				}
				
				Date dataVencimento = Util.adicionarNumeroDiasDeUmaData(new Date(),
						cobrancaDocumento.getCobrancaAcao().getNumeroDiasVencimento());
				
				if(cobrancaDocumento.getImovel().getNumeroSequencialRota()!=null){	
					sequencialRota = cobrancaDocumento.getImovel().getNumeroSequencialRota().toString();
				}
				
				Integer idOrdemServico = null;

				idOrdemServico = repositorioCobranca
						.obterOrdemServicoAssociadaDocumentoCobranca(cobrancaDocumento.getId());

				
				Collection colecaoClienteFone = getControladorCliente().pesquisarClienteFone(clienteUsuario.getId());

				ClienteFone clienteFone = null;
		
				if (colecaoClienteFone != null && !colecaoClienteFone.isEmpty()) {
		
					Iterator colecaoClienteFoneIterator = colecaoClienteFone
							.iterator();
		
					while (colecaoClienteFoneIterator.hasNext()) {
						clienteFone = (ClienteFone) colecaoClienteFoneIterator
								.next();
		
						if (clienteFone.getIndicadorTelefonePadrao() != null
								&& clienteFone
										.getIndicadorTelefonePadrao()
										.equals(
												ClienteFone.INDICADOR_FONE_PADRAO)) {
							break;
						}
					}
		
					telefoneCliente = clienteFone.getDddTelefone();
		
				}
				
				FiltroCobrancaDocumento filtroCobrancaDocumento = new FiltroCobrancaDocumento();
				filtroCobrancaDocumento.adicionarParametro(
						new ParametroSimples(FiltroCobrancaDocumento.ID, cobrancaDocumento.getId()));
				filtroCobrancaDocumento.adicionarCaminhoParaCarregamentoEntidade(FiltroCobrancaDocumento.PERFIL_IMOVEL);
				Collection colecaoCobrancaDocumento = Fachada.getInstancia().pesquisar(filtroCobrancaDocumento, CobrancaDocumento.class.getName());
				ImovelPerfil imovelPerfil = ((CobrancaDocumento) Util.retonarObjetoDeColecao(colecaoCobrancaDocumento)).getImovelPerfil();
				
				
				//[SB0004 ? Obter Representação numérica do Nosso Número da Ficha de Compensação]
				StringBuilder nossoNumero = Fachada.getInstancia().obterNossoNumeroFichaCompensacao(
						cobrancaDocumento.getDocumentoTipo().getId().toString(),cobrancaDocumento.getId().toString()) ;

				String sacadoParte01;
				if (cobrancaDocumento.getImovel().getNomeImovel() != null) {
					sacadoParte01 = cobrancaDocumento.getImovel().getNomeImovel(); 
				} else {
					sacadoParte01 = clienteUsuario.getNome();
				}
				
				String sacadoParte03 = Util.retornaMatriculaImovelFormatada(cobrancaDocumento.getImovel().getId());
				
				
				String enderecoImovel = getControladorEndereco().pesquisarEnderecoFormatado(
							cobrancaDocumento.getImovel()
									.getId());
				
				Integer categoriaRES = 0;
				Integer categoriaPUB = 0;
				Integer categoriaIND = 0;
				Integer categoriaCOM = 0;
				// Inclui [UC0108] - Obter Quantidade de Economias por Categoria
				Collection<Categoria> colecaoCategorias = getControladorImovel()
						.obterQuantidadeEconomiasCategoria(cobrancaDocumento.getImovel());

				Iterator iteratorCategoria = colecaoCategorias.iterator();
				while (iteratorCategoria.hasNext()) {
					Categoria categoria = (Categoria) iteratorCategoria.next();
					if (categoria.getDescricaoAbreviada().equals(Categoria.RESIDENCIAL_DESCRICAO_ABREVIADA)) {
						categoriaRES++;
					} else if (categoria.getDescricaoAbreviada().equals(Categoria.COMERCIAL_DESCRICAO_ABREVIADA)) {
						categoriaCOM++;
					} else if (categoria.getDescricaoAbreviada().equals(Categoria.INDUSTRIAL_DESCRICAO_ABREVIADA)) {
						categoriaIND++;
					} else if (categoria.getDescricaoAbreviada().equals(Categoria.PUBLICO_DESCRICAO_ABREVIADA)) {
						categoriaPUB++;
					}
				}
				
				// representação numérica do código de barras
				String representacaoNumericaCodBarra = "";

				// Obtém a representação numérica do
				// códigode
				// barra
				representacaoNumericaCodBarra = this
						.getControladorArrecadacao()
						.obterRepresentacaoNumericaCodigoBarra(
								5,
								cobrancaDocumento
										.getValorDocumento(),
								cobrancaDocumento.getLocalidade()
										.getId(),
								cobrancaDocumento.getImovel()
										.getId(),
								null,
								null,
								null,
								null,
								String
										.valueOf(cobrancaDocumento
												.getNumeroSequenciaDocumento()),
								cobrancaDocumento
										.getDocumentoTipo().getId(),
								null, null, null);

				// Formata a representação númerica do
				// código de
				// barras
				String representacaoNumericaCodBarraFormatada = representacaoNumericaCodBarra
						.substring(0, 11)
						+ "-"
						+ representacaoNumericaCodBarra.substring(
								11, 12)
						+ " "
						+ representacaoNumericaCodBarra.substring(
								12, 23)
						+ "-"
						+ representacaoNumericaCodBarra.substring(
								23, 24)
						+ " "
						+ representacaoNumericaCodBarra.substring(
								24, 35)
						+ "-"
						+ representacaoNumericaCodBarra.substring(
								35, 36)
						+ " "
						+ representacaoNumericaCodBarra.substring(
								36, 47)
						+ "-"
						+ representacaoNumericaCodBarra.substring(
								47, 48);
				
				String representacaoNumericaCodBarraSemDigito = representacaoNumericaCodBarra
				.substring(0, 11)
				+ representacaoNumericaCodBarra.substring(12, 23)
				+ representacaoNumericaCodBarra.substring(24, 35)
				+ representacaoNumericaCodBarra.substring(36, 47);
				
				
				String nossoNumeroSemDV = nossoNumero.toString().substring(0,17);
				String fatorVencimento = Fachada.getInstancia().obterFatorVencimento(dataVencimento);
				String especificacaoCodigoBarra = Fachada.getInstancia().
					obterEspecificacaoCodigoBarraFichaCompensacao(
				    ConstantesSistema.CODIGO_BANCO_FICHA_COMPENSACAO, 
				    ConstantesSistema.CODIGO_MOEDA_FICHA_COMPENSACAO, 
				    cobrancaDocumento.getValorDocumento(), nossoNumeroSemDV.toString(),
					ConstantesSistema.CARTEIRA_FICHA_COMPENSACAO, fatorVencimento);
			                                
				String representacaoNumericaCodigoBarraFichaCompensacao = 
					Fachada.getInstancia().obterRepresentacaoNumericaCodigoBarraFichaCompensacao(especificacaoCodigoBarra);
				
				Collection<AtendimentoMotivoEncerramento> colecaoMotivosEncerramento = new ArrayList<AtendimentoMotivoEncerramento>();
				
				// 24 - Motivo de Encerramento - [SB0005] - Obter Motivo de Encerramento da Ação de Cobrança
				if (cobrancaDocumento != null 
						&& cobrancaDocumento.getCobrancaAcao() != null
						&& cobrancaDocumento.getCobrancaAcao().getId() != null) {
					
					colecaoMotivosEncerramento = this.selecionaMotivosEncerramentoAcaoCobranca(
						cobrancaDocumento.getCobrancaAcao().getId());
				}
						
				boolean registroAdicionado = false;
				
				BigDecimal valorTotal = BigDecimal.ZERO;
				
				for (Conta conta : contas) {
					count2++;
					
					if ((contas.size() - count2) > tamanhoMaximoDebito) {
						valor = valor.add(conta.getValorTotal());
					} else {
						RelatorioDocumentoCobrancaOrdemCorteBean bean = new RelatorioDocumentoCobrancaOrdemCorteBean();

						bean.setSequencial(Util.retornaSequencialFormatado(count));
						if (idOrdemServico != null) {
							bean.setOrdemServico(idOrdemServico.toString());
						} else {
							bean.setOrdemServico("");
						}
						bean.setDataEmissao(Util.formatarData(cobrancaDocumento.getEmissao()));
						bean.setDataValidade(Util.formatarData(dataVencimento));
						bean.setGrupo(cobrancaDocumento.getQuadra().getRota().getCobrancaGrupo().getId().toString());
						bean.setMatricula(cobrancaDocumento.getImovel().getMatriculaFormatada());
						bean.setInscricao(inscricao);
						bean.setEnderecoUnidadeNegocio(enderecoUnidadeNegocio);
						bean.setRota(codigoRota);
						bean.setSequencialRota(sequencialRota);
						bean.setSituacaoLigacaoAgua(descricaoSituacaoLigacaoAgua);
						bean.setSituacaoLigacaoEsgoto(descricaoSituacaoLigacaoEsgoto);
						bean.setNomeClienteUsuario(clienteUsuario.getNome());
						bean.setPerfilCliente(imovelPerfil.getDescricao());
						if (clienteUsuario.getCpf() != null)
							bean.setCpfCliente(Util.formatarCpf(clienteUsuario.getCpf()));
						else if (clienteUsuario.getCnpj() != null)
							bean.setCpfCliente(Util.formatarCnpj(clienteUsuario.getCnpj()));
						else
							bean.setCpfCliente("");
						bean.setTelefoneCliente(telefoneCliente);
						bean.setEnderecoImovel(enderecoImovel);
						bean.setHidrometro(numeroHidrometro);
						bean.setSequencialDocumentoCobranca("" + cobrancaDocumento.getNumeroSequenciaDocumento());
						bean.setCategoriaRES(categoriaRES.toString());
						bean.setCategoriaCOM(categoriaCOM.toString());
						bean.setCategoriaIND(categoriaIND.toString());
						bean.setCategoriaPUB(categoriaPUB.toString());
						
						RelatorioVisitaCobrancaSubBean relatorioVisitaCobrancaSubBean = new RelatorioVisitaCobrancaSubBean();
//						relatorioVisitaCobrancaSubBean.setRepresentacaoNumericaCodBarraSemDigito(representacaoNumericaCodBarraSemDigito);
						relatorioVisitaCobrancaSubBean.setIdImovel(cobrancaDocumento.getImovel().getId().toString());
						relatorioVisitaCobrancaSubBean.setNossoNumero(nossoNumero.toString());
						relatorioVisitaCobrancaSubBean.setSacadoParte01(sacadoParte01);
						relatorioVisitaCobrancaSubBean.setSacadoParte03(sacadoParte03);
						
						if ((contas.size() - count2) == tamanhoMaximoDebito) {
							valor = valor.add(conta.getValorTotal());
							valorTotal = valorTotal.add(valor);
							bean.setValor(Util.formatarMoedaReal(valor));
							bean.setMesAno("DEB. ATÉ " + conta.getReferenciaFormatada());
							bean.setDataVencimento(Util.formatarData(conta.getDataVencimentoConta()));
						} else {
							valorTotal = valorTotal.add(conta.getValorTotal());
							bean.setValor(Util.formatarMoedaReal(conta.getValorTotal()));
							bean.setMesAno(conta.getReferenciaFormatada());
							bean.setDataVencimento(Util.formatarData(conta.getDataVencimentoConta()));
						}	
						bean.setValorTotal(Util.formatarMoedaReal(valorTotal));
						
						BigDecimal valorDocumento = valorTotal;
						if (cobrancaDocumento.getValorAcrescimos() != null) {
							valorDocumento.add(cobrancaDocumento.getValorAcrescimos());
						}
						if (cobrancaDocumento.getValorDesconto() != null) {
							valorDocumento.subtract(cobrancaDocumento.getValorDesconto());
						}
						relatorioVisitaCobrancaSubBean.setValorDocumento(Util.formatarMoedaReal(valorDocumento));
						
						if (sistemaParametro.getValorExtratoFichaComp() != null && !sistemaParametro.getValorExtratoFichaComp().equals(BigDecimal.ZERO)) {
							if (valorDocumento
									.compareTo(sistemaParametro.getValorExtratoFichaComp()) != -1) {
								relatorioVisitaCobrancaSubBean.setRepresentacaoNumericaCodBarraFormatada(representacaoNumericaCodigoBarraFichaCompensacao);
								relatorioVisitaCobrancaSubBean.setRepresentacaoNumericaCodBarraSemDigito(especificacaoCodigoBarra);
								bean.setSubRelatorio("relatorioOrdemCorteEmissaoFichaCompensacao.jasper");
							} else {
								relatorioVisitaCobrancaSubBean.setRepresentacaoNumericaCodBarraFormatada(representacaoNumericaCodBarraFormatada);
								relatorioVisitaCobrancaSubBean.setRepresentacaoNumericaCodBarraSemDigito(representacaoNumericaCodBarraSemDigito);
								bean.setSubRelatorio("relatorioOrdemCorteEmissaoPadrao.jasper");
							}
						} else {
							relatorioVisitaCobrancaSubBean.setRepresentacaoNumericaCodBarraFormatada(representacaoNumericaCodBarraFormatada);
							relatorioVisitaCobrancaSubBean.setRepresentacaoNumericaCodBarraSemDigito(representacaoNumericaCodBarraSemDigito);
							bean.setSubRelatorio("relatorioOrdemCorteEmissaoPadrao.jasper");
						}

						bean.setRelatorioVisitaCobrancaSubBean(relatorioVisitaCobrancaSubBean);
						
						Collection<RelatorioDocumentoCobrancaMotivosEncerramentoBean> colecaoMotivosEncerramentoSubBean = 
								new ArrayList<RelatorioDocumentoCobrancaMotivosEncerramentoBean>();
						
						if (colecaoMotivosEncerramento != null 
								&& !colecaoMotivosEncerramento.isEmpty()) {
							
							Iterator<AtendimentoMotivoEncerramento> iteratorMotivos = 
									colecaoMotivosEncerramento.iterator();
							
							int quantidadeMotivos = 0;
							
							while(iteratorMotivos.hasNext()) {
								if(quantidadeMotivos == 7) {
									break;
								}
								
								AtendimentoMotivoEncerramento motivo = (AtendimentoMotivoEncerramento)
										iteratorMotivos.next();
								
								RelatorioDocumentoCobrancaMotivosEncerramentoBean beanMotivo = new RelatorioDocumentoCobrancaMotivosEncerramentoBean();
								
								beanMotivo.setMotivoEncerramento(motivo.getDescricao());
								
								if (iteratorMotivos.hasNext()) {
									AtendimentoMotivoEncerramento motivo2 = (AtendimentoMotivoEncerramento)
											iteratorMotivos.next();
									
									beanMotivo.setMotivoEncerramento2(motivo2.getDescricao());
								} else {
									beanMotivo.setMotivoEncerramento2("");
								}
								
								colecaoMotivosEncerramentoSubBean.add(beanMotivo);
								quantidadeMotivos++;
							}
							
							bean.setRelatorioDocumentoCobrancaMotivosEncerramentoBean(colecaoMotivosEncerramentoSubBean);
							
						}
						
						registroAdicionado = true;
						retorno.add(bean);
						
					}
					
				}
				
				//adiciona linhas em branco no relatorio para alinhar, 
				//quando a quantidade de relatorios/pagina = 2 
				//e o numero de contas for menor que a metade do "tamanhoMaximoDebito"
				int metadeTamanhoMaxDebito = (tamanhoMaximoDebito + 1) /2;
				
				if(quantidadeRelatorios != null && quantidadeRelatorios.equals("2") && contas.size() < metadeTamanhoMaxDebito){
					for(int i = 0; i < (metadeTamanhoMaxDebito - contas.size()); i++){
						RelatorioDocumentoCobrancaOrdemCorteBean bean = new RelatorioDocumentoCobrancaOrdemCorteBean();

						bean.setSequencial(Util.retornaSequencialFormatado(count));
						if (idOrdemServico != null) {
							bean.setOrdemServico(idOrdemServico.toString());
						} else {
							bean.setOrdemServico("");
						}
						bean.setDataEmissao(Util.formatarData(cobrancaDocumento.getEmissao()));
						bean.setDataValidade(Util.formatarData(dataVencimento));
						bean.setGrupo(cobrancaDocumento.getQuadra().getRota().getCobrancaGrupo().getId().toString());
						bean.setMatricula(cobrancaDocumento.getImovel().getMatriculaFormatada());
						bean.setInscricao(inscricao);
						bean.setEnderecoUnidadeNegocio(enderecoUnidadeNegocio);
						bean.setRota(codigoRota);
						bean.setSequencialRota(sequencialRota);
						bean.setSituacaoLigacaoAgua(descricaoSituacaoLigacaoAgua);
						bean.setSituacaoLigacaoEsgoto(descricaoSituacaoLigacaoEsgoto);
						bean.setNomeClienteUsuario(clienteUsuario.getNome());
						bean.setPerfilCliente(imovelPerfil.getDescricao());
						if (clienteUsuario.getCpf() != null)
							bean.setCpfCliente(Util.formatarCpf(clienteUsuario.getCpf()));
						else if (clienteUsuario.getCnpj() != null)
							bean.setCpfCliente(Util.formatarCnpj(clienteUsuario.getCnpj()));
						else
							bean.setCpfCliente("");
						bean.setTelefoneCliente(telefoneCliente);
						bean.setEnderecoImovel(enderecoImovel);
						bean.setHidrometro(numeroHidrometro);
						bean.setSequencialDocumentoCobranca("" + cobrancaDocumento.getNumeroSequenciaDocumento());
						bean.setCategoriaRES(categoriaRES.toString());
						bean.setCategoriaCOM(categoriaCOM.toString());
						bean.setCategoriaIND(categoriaIND.toString());
						bean.setCategoriaPUB(categoriaPUB.toString());
						
						RelatorioVisitaCobrancaSubBean relatorioVisitaCobrancaSubBean = new RelatorioVisitaCobrancaSubBean();
						relatorioVisitaCobrancaSubBean.setRepresentacaoNumericaCodBarraSemDigito(representacaoNumericaCodBarraSemDigito);
						relatorioVisitaCobrancaSubBean.setIdImovel(cobrancaDocumento.getImovel().getId().toString());
						relatorioVisitaCobrancaSubBean.setNossoNumero(nossoNumero.toString());
						relatorioVisitaCobrancaSubBean.setSacadoParte01(sacadoParte01);
						relatorioVisitaCobrancaSubBean.setSacadoParte03(sacadoParte03);
						
						BigDecimal valorDocumento = valorTotal;
						if (cobrancaDocumento.getValorAcrescimos() != null) {
							valorDocumento.add(cobrancaDocumento.getValorAcrescimos());
						}
						if (cobrancaDocumento.getValorDesconto() != null) {
							valorDocumento.subtract(cobrancaDocumento.getValorDesconto());
						}
						relatorioVisitaCobrancaSubBean.setValorDocumento(Util.formatarMoedaReal(valorDocumento));
						
						if (sistemaParametro.getValorExtratoFichaComp() != null && !sistemaParametro.getValorExtratoFichaComp().equals(BigDecimal.ZERO)) {
							if (valorDocumento
									.compareTo(sistemaParametro.getValorExtratoFichaComp()) != -1) {
								bean.setSubRelatorio("relatorioOrdemCorteEmissaoFichaCompensacao.jasper");
								relatorioVisitaCobrancaSubBean.setRepresentacaoNumericaCodBarraFormatada(representacaoNumericaCodigoBarraFichaCompensacao);
							} else {
								bean.setSubRelatorio("relatorioOrdemCorteEmissaoPadrao.jasper");
								relatorioVisitaCobrancaSubBean.setRepresentacaoNumericaCodBarraFormatada(representacaoNumericaCodBarraFormatada);
							}
						} else {
							bean.setSubRelatorio("relatorioOrdemCorteEmissaoPadrao.jasper");
							relatorioVisitaCobrancaSubBean.setRepresentacaoNumericaCodBarraFormatada(representacaoNumericaCodBarraFormatada);
						}
						
						bean.setRelatorioVisitaCobrancaSubBean(relatorioVisitaCobrancaSubBean);
						
						registroAdicionado = true;
						retorno.add(bean);								
					}
				}
				if (registroAdicionado) {
					count++;
				}
			}
			
		} catch (ErroRepositorioException e) {
			e.printStackTrace();
			throw new ControladorException("erro.sistema", e);
		}
		
		return retorno;
	}
	

	/**
	 * [UC1156] Emitir Documentos de Cobrança Em Lote
	 * 
	 * @author Mariana Victor
	 * @date 25/01/2011
	 * 
	 * @return
	 * @throws ErroRepositorioException
	 */
	public Collection<RelatorioDocumentoCobrancaOrdemFiscalizacaoBean> gerarRelatorioDocumentoCobrancaOrdemFiscalizacao(
			Integer idCobrancaAcaoCronograma, Integer idCobrancaAcaoComando, int tamanhoMaximoDebito, String quantidadeRelatorios) throws ControladorException {
		
		Collection<RelatorioDocumentoCobrancaOrdemFiscalizacaoBean> retorno = new ArrayList<RelatorioDocumentoCobrancaOrdemFiscalizacaoBean>();
		
		try {
			Collection<CobrancaDocumento> colecaoDocumentoCobranca = repositorioCobranca
					.pesquisarCobrancaDocumentoParaRelatorio(idCobrancaAcaoCronograma, idCobrancaAcaoComando);
			FiltroSistemaParametro filtroSistemaParametro = new FiltroSistemaParametro();
			Collection colecaoSistemaParametro = Fachada.getInstancia().pesquisar(filtroSistemaParametro,SistemaParametro.class.getName());
			SistemaParametro sistemaParametro = (SistemaParametro) colecaoSistemaParametro.iterator().next();

			int count = 1;
			
			if(Util.isVazioOrNulo(colecaoDocumentoCobranca)){
				throw new ActionServletException("atencao.relatorio.vazio");
			}
			
			for (CobrancaDocumento cobrancaDocumento : colecaoDocumentoCobranca) {
				int count2 = 0;
				
				BigDecimal valor = new BigDecimal(0);
				Collection<Conta> contas = repositorioCobranca.pesquisarCobrancaDocumentoItem(cobrancaDocumento.getId());
				
				String inscricao = getControladorImovel().pesquisarInscricaoImovel(cobrancaDocumento.getImovel().getId());
				Cliente clienteUsuario = getControladorCliente().retornaDadosClienteUsuario(cobrancaDocumento.getImovel().getId());
				String telefoneCliente = ""; 
				String codigoRota = cobrancaDocumento.getImovel().getQuadra().getRota().getCodigo().toString();
				String sequencialRota = "";
				String descricaoSituacaoLigacaoAgua = cobrancaDocumento
						.getLigacaoAguaSituacao().getDescricao();
				String descricaoSituacaoLigacaoEsgoto = cobrancaDocumento
						.getLigacaoEsgotoSituacao().getDescricao();
				String numeroHidrometro = "";
				
				FiltroLocalidade filtroLocalidade = new FiltroLocalidade();
				filtroLocalidade.adicionarParametro(new ParametroSimples(FiltroLocalidade.ID, 
					cobrancaDocumento.getImovel().getLocalidade().getLocalidade().getId()));				
				filtroLocalidade.adicionarCaminhoParaCarregamentoEntidade("logradouroCep");
				filtroLocalidade.adicionarCaminhoParaCarregamentoEntidade("logradouroCep.cep");
				filtroLocalidade.adicionarCaminhoParaCarregamentoEntidade("logradouroCep.logradouro");
				filtroLocalidade.adicionarCaminhoParaCarregamentoEntidade("logradouroCep.logradouro.logradouroTipo");
				filtroLocalidade.adicionarCaminhoParaCarregamentoEntidade("logradouroCep.logradouro.logradouroTitulo");
				filtroLocalidade.adicionarCaminhoParaCarregamentoEntidade("enderecoReferencia");
				filtroLocalidade.adicionarCaminhoParaCarregamentoEntidade("logradouroBairro");
				filtroLocalidade.adicionarCaminhoParaCarregamentoEntidade("logradouroBairro.bairro");
				filtroLocalidade.adicionarCaminhoParaCarregamentoEntidade("logradouroBairro.bairro.municipio");
				filtroLocalidade.adicionarCaminhoParaCarregamentoEntidade("logradouroBairro.bairro.municipio.unidadeFederacao");
				filtroLocalidade.adicionarCaminhoParaCarregamentoEntidade("enderecoReferencia");
				filtroLocalidade.adicionarCaminhoParaCarregamentoEntidade("unidadeNegocio");
				
				Collection cLocalidade = (Collection) getControladorUtil().pesquisar(filtroLocalidade,Localidade.class.getName());				
				Localidade localidadeUnidadeNegocio = (Localidade) cLocalidade.iterator().next();
				
				String enderecoUnidadeNegocio;
				if(localidadeUnidadeNegocio !=null){
					enderecoUnidadeNegocio = localidadeUnidadeNegocio.getEnderecoFormatadoTituloAbreviado();
				}
				else{
					enderecoUnidadeNegocio = sistemaParametro.getEnderecoFormatadoAbreviado();
				}
				
				if(cobrancaDocumento.getImovel().getLigacaoAgua() != null){
					if(cobrancaDocumento.getImovel().getLigacaoAgua().getHidrometroInstalacaoHistorico() != null){
						if(cobrancaDocumento.getImovel().getLigacaoAgua().getHidrometroInstalacaoHistorico().getHidrometro() != null){
							numeroHidrometro = cobrancaDocumento.getImovel().getLigacaoAgua().getHidrometroInstalacaoHistorico().getHidrometro().getNumero();
						}
					}
				}
				Date dataVencimento = Util.adicionarNumeroDiasDeUmaData(new Date(),
						cobrancaDocumento.getCobrancaAcao().getNumeroDiasVencimento());
				
				if(cobrancaDocumento.getImovel().getNumeroSequencialRota()!=null){	
					sequencialRota = cobrancaDocumento.getImovel().getNumeroSequencialRota().toString();
				}
				
				Integer idOrdemServico = null;

				idOrdemServico = repositorioCobranca
						.obterOrdemServicoAssociadaDocumentoCobranca(cobrancaDocumento.getId());

				
				Collection colecaoClienteFone = getControladorCliente().pesquisarClienteFone(clienteUsuario.getId());

				ClienteFone clienteFone = null;
		
				if (colecaoClienteFone != null && !colecaoClienteFone.isEmpty()) {
		
					Iterator colecaoClienteFoneIterator = colecaoClienteFone
							.iterator();
		
					while (colecaoClienteFoneIterator.hasNext()) {
						clienteFone = (ClienteFone) colecaoClienteFoneIterator
								.next();
		
						if (clienteFone.getIndicadorTelefonePadrao() != null
								&& clienteFone
										.getIndicadorTelefonePadrao()
										.equals(
												ClienteFone.INDICADOR_FONE_PADRAO)) {
							break;
						}
					}
		
					telefoneCliente = clienteFone.getDddTelefone();
		
				}
				
				FiltroCobrancaDocumento filtroCobrancaDocumento = new FiltroCobrancaDocumento();
				filtroCobrancaDocumento.adicionarParametro(
						new ParametroSimples(FiltroCobrancaDocumento.ID, cobrancaDocumento.getId()));
				filtroCobrancaDocumento.adicionarCaminhoParaCarregamentoEntidade(FiltroCobrancaDocumento.PERFIL_IMOVEL);
				Collection colecaoCobrancaDocumento = Fachada.getInstancia().pesquisar(filtroCobrancaDocumento, CobrancaDocumento.class.getName());
				ImovelPerfil imovelPerfil = ((CobrancaDocumento) Util.retonarObjetoDeColecao(colecaoCobrancaDocumento)).getImovelPerfil();
				
				
				String enderecoImovel = getControladorEndereco().pesquisarEnderecoFormatado(
							cobrancaDocumento.getImovel()
									.getId());
				
				Integer categoriaRES = 0;
				Integer categoriaPUB = 0;
				Integer categoriaIND = 0;
				Integer categoriaCOM = 0;
				// Inclui [UC0108] - Obter Quantidade de Economias por Categoria
				Collection<Categoria> colecaoCategorias = getControladorImovel()
						.obterQuantidadeEconomiasCategoria(cobrancaDocumento.getImovel());

				Iterator iteratorCategoria = colecaoCategorias.iterator();
				while (iteratorCategoria.hasNext()) {
					Categoria categoria = (Categoria) iteratorCategoria.next();
					if (categoria.getDescricaoAbreviada().equals(Categoria.RESIDENCIAL_DESCRICAO_ABREVIADA)) {
						categoriaRES++;
					} else if (categoria.getDescricaoAbreviada().equals(Categoria.COMERCIAL_DESCRICAO_ABREVIADA)) {
						categoriaCOM++;
					} else if (categoria.getDescricaoAbreviada().equals(Categoria.INDUSTRIAL_DESCRICAO_ABREVIADA)) {
						categoriaIND++;
					} else if (categoria.getDescricaoAbreviada().equals(Categoria.PUBLICO_DESCRICAO_ABREVIADA)) {
						categoriaPUB++;
					}
				}
				
				String quantidadeContas = this.repositorioCobranca.pesquisarQuantidadeContasDebito(cobrancaDocumento.getId()).toString();
						
				boolean registroAdicionado = false;
				
				BigDecimal valorTotal = BigDecimal.ZERO;
				
				RelatorioDocumentoCobrancaOrdemFiscalizacaoBean bean = new RelatorioDocumentoCobrancaOrdemFiscalizacaoBean();

				bean.setSequencial(Util.retornaSequencialFormatado(count));
				if (idOrdemServico != null) {
					bean.setOrdemServico(idOrdemServico.toString());
				} else {
					bean.setOrdemServico("");
				}
				bean.setDataEmissao(Util.formatarData(cobrancaDocumento.getEmissao()));
				bean.setDataValidade(Util.formatarData(dataVencimento));
				bean.setGrupo(cobrancaDocumento.getImovel().getQuadra().getRota().getCobrancaGrupo().getId().toString());
				bean.setMatricula(cobrancaDocumento.getImovel().getMatriculaFormatada());
				bean.setInscricao(inscricao);
				bean.setEnderecoUnidadeNegocio(enderecoUnidadeNegocio);
				bean.setRota(codigoRota);
				bean.setSequencialRota(sequencialRota);
				bean.setSituacaoLigacaoAgua(descricaoSituacaoLigacaoAgua);
				bean.setSituacaoLigacaoEsgoto(descricaoSituacaoLigacaoEsgoto);
				bean.setNomeClienteUsuario(clienteUsuario.getNome());
				bean.setPerfilCliente(imovelPerfil.getDescricao());
				if (clienteUsuario.getCpf() != null)
					bean.setCpfCliente(Util.formatarCpf(clienteUsuario.getCpf()));
				else if (clienteUsuario.getCnpj() != null)
					bean.setCpfCliente(Util.formatarCnpj(clienteUsuario.getCnpj()));
				else
					bean.setCpfCliente("");
				bean.setTelefoneCliente(telefoneCliente);
				bean.setEnderecoImovel(enderecoImovel);
				bean.setHidrometro(numeroHidrometro);
				bean.setSequencialDocumentoCobranca("" + cobrancaDocumento.getNumeroSequenciaDocumento());
				bean.setQuantidadeContas(quantidadeContas);bean.setCategoriaRES(categoriaRES.toString());
				bean.setCategoriaCOM(categoriaCOM.toString());
				bean.setCategoriaIND(categoriaIND.toString());
				bean.setCategoriaPUB(categoriaPUB.toString());
				
				ArrayList arraySubBean = new ArrayList();
				
				for (Conta conta : contas) {
					count2++;
					
					if ((contas.size() - count2) > tamanhoMaximoDebito) {
						valor = valor.add(conta.getValorTotal());
					} else {
						RelatorioDocumentoCobrancaOrdemFiscalizacaoSubBean subBean = new RelatorioDocumentoCobrancaOrdemFiscalizacaoSubBean();

						if ((contas.size() - count2) == tamanhoMaximoDebito) {
							valor = valor.add(conta.getValorTotal());
							valorTotal = valorTotal.add(valor);
							subBean.setValor(Util.formatarMoedaReal(valor));
							subBean.setMesAno("DEB. ATÉ " + conta.getReferenciaFormatada());
							subBean.setDataVencimento(Util.formatarData(conta.getDataVencimentoConta()));
						} else {
							valorTotal = valorTotal.add(conta.getValorTotal());
							subBean.setValor(Util.formatarMoedaReal(conta.getValorTotal()));
							subBean.setMesAno(conta.getReferenciaFormatada());
							subBean.setDataVencimento(Util.formatarData(conta.getDataVencimentoConta()));
						}	
						
						arraySubBean.add(subBean);
						
						registroAdicionado = true;
						
					}
					
				}

				if (registroAdicionado) {
					RelatorioDataSource dataSourceAno = new RelatorioDataSource(arraySubBean);
					//bean.setArrayJRSubrelatorioBean(new JRBeanCollectionDataSource(arraySubBean));
					bean.setDataSource(dataSourceAno);
					bean.setValorTotal(Util.formatarMoedaReal(valorTotal));
					retorno.add(bean);
					count++;
				}
				
				
			}
			
		} catch (ErroRepositorioException e) {
			throw new ControladorException("erro.sistema", e);
		}
		
		return retorno;
	}

	/**
	 *  [UC1156] Emitir Documentos de Cobrança Em Lote
	 * 
	 * @author Mariana Victor
	 * @created 20/01/2011
	**/
	public List<String> pesquisarTipoDeCorte() throws ControladorException {
		
		try {
			return this.repositorioCobranca.pesquisarTipoDeCorte();
		}  catch (ErroRepositorioException e) {
			throw new ControladorException("erro.sistema", e);
		}
		
	}

	/**
	 *  [UC1156] Emitir Documentos de Cobrança Em Lote
	 * 
	 * @author Mariana Victor
	 * @created 26/01/2011
	**/
	public List<String> pesquisarOcorrenciasFiscalizacao() throws ControladorException {
		try {
			return this.repositorioCobranca.pesquisarOcorrenciasFiscalizacao();
		}  catch (ErroRepositorioException e) {
			throw new ControladorException("erro.sistema", e);
		}
		
	}

	
	/**
	 * [UC0968] Emitir Cartas da Campanha de Final de Ano 2009
	 * 
	 * [SB0001] ? Obter Valor do Documento
	 * 
	 * @author Mariana Victor
	 * @data 16/03/2011
	 * 
	 * @throws ControladorException 
	 * */
	public BigDecimal obterValorDoDocumento(CobrancaDocumento cobrancaDocumento) throws ControladorException{
		
		BigDecimal valorTotalContas = BigDecimal.ZERO;
		BigDecimal valorTotalGuias = BigDecimal.ZERO;
		BigDecimal valorTotalDebitosACobrar = BigDecimal.ZERO;
		BigDecimal valorTotalCreditosARealizar = BigDecimal.ZERO;
		
		BigDecimal valorDocumento = BigDecimal.ZERO;

		BigDecimal[] valorContaAcrescimos = 
			this.obterValorTotalContaAcrescimos(cobrancaDocumento);
		valorTotalContas = valorContaAcrescimos[0];

		valorTotalGuias = 
			this.obterValorTotalGuias(cobrancaDocumento);

		valorTotalDebitosACobrar = 
			this.obterValorTotalDebitosACobrar(cobrancaDocumento);

		valorTotalCreditosARealizar = 
			this.obterValorTotalCreditosARealizar(cobrancaDocumento);
		
		
		// Valor Total
		valorDocumento = valorTotalContas.
				add(valorTotalGuias).
				 	add(valorTotalDebitosACobrar).
						subtract(valorTotalCreditosARealizar);
		
		return valorDocumento;
	}
	
	
	/**
	 * [UC0968] Emitir Cartas da Campanha de Final de Ano 2009
	 * 
	 * Obter Valor Total das Contas e Valor total de Acréscimos das Contas 
	 * 
	 * @author Mariana Victor
	 * @throws ControladorException 
	 * @data 17/03/2011
	 * 
	 * @throws ControladorException 
	 * */
	private BigDecimal[] obterValorTotalContaAcrescimos(CobrancaDocumento cobrancaDocumento) throws ControladorException {
		
		BigDecimal valorTotalContas = BigDecimal.ZERO;
		BigDecimal valorTotalAcrescimos = BigDecimal.ZERO;
		Collection colecaoCobrancaDocumentoItemConta = null;
		
		try {

			colecaoCobrancaDocumentoItemConta =  
				this.repositorioCobranca.selecionarCobrancaDocumentoItemReferenteConta(cobrancaDocumento);

		} catch (ErroRepositorioException ex) {
			ex.printStackTrace();
			throw new ControladorException("erro.sistema", ex);
		}
		
		// 1.2. Para cada item do tipo CONTA da lista de itens do documento
		if (colecaoCobrancaDocumentoItemConta != null && !colecaoCobrancaDocumentoItemConta.isEmpty()) {
			Iterator iterator = colecaoCobrancaDocumentoItemConta.iterator();
			while(iterator.hasNext()) {
				CobrancaDocumentoItem item = (CobrancaDocumentoItem) iterator.next();
				valorTotalContas = valorTotalContas.add(item.getValorItemCobrado())
					.add(item.getValorAcrescimos());
				valorTotalAcrescimos = valorTotalAcrescimos.add(item.getValorAcrescimos());
			}
		}
		
		BigDecimal[] retorno = {
				valorTotalContas,
				valorTotalAcrescimos};
		
		return retorno;
	}

	
	/**
	 * [UC0968] Emitir Cartas da Campanha de Final de Ano 2009
	 * 
	 * Obter Valor Total das Guias
	 * 
	 * @author Mariana Victor
	 * @throws ControladorException 
	 * @data 17/03/2011
	 * 
	 * @throws ControladorException 
	 * */
	private BigDecimal obterValorTotalGuias(CobrancaDocumento cobrancaDocumento) throws ControladorException {
		
		BigDecimal valorTotalGuias = BigDecimal.ZERO;
		Collection colecaoCobrancaDocumentoItemGuia = null;
		
		try {

			colecaoCobrancaDocumentoItemGuia = 
				this.repositorioCobranca.selecionarCobrancaDocumentoItemReferenteGuia(cobrancaDocumento);

		} catch (ErroRepositorioException ex) {
			ex.printStackTrace();
			throw new ControladorException("erro.sistema", ex);
		}
		
		// 1.3. Para cada item do tipo GUIA da lista de itens do documento
		if (colecaoCobrancaDocumentoItemGuia != null && !colecaoCobrancaDocumentoItemGuia.isEmpty()) {
			Iterator iterator = colecaoCobrancaDocumentoItemGuia.iterator();
			while(iterator.hasNext()) {
				CobrancaDocumentoItem item = (CobrancaDocumentoItem) iterator.next();
				valorTotalGuias = valorTotalGuias.add(item.getValorItemCobrado());
			}
		}
		
		return valorTotalGuias;
	}
	
	
	/**
	 * [UC0968] Emitir Cartas da Campanha de Final de Ano 2009
	 * 
	 * Obter Valor Total dos Débitos à Cobrar
	 * 
	 * @author Mariana Victor
	 * @throws ControladorException 
	 * @data 17/03/2011
	 * 
	 * @throws ControladorException 
	 * */
	private BigDecimal obterValorTotalDebitosACobrar(CobrancaDocumento cobrancaDocumento) throws ControladorException {
		
		BigDecimal valorTotalDebitosACobrar = BigDecimal.ZERO;
		Collection colecaoCobrancaDocumentoItemDebitoACobrar = null;
		
		try {

			colecaoCobrancaDocumentoItemDebitoACobrar = 
				this.repositorioCobranca.selecionarCobrancaDocumentoItemReferenteDebitoACobrar(cobrancaDocumento);

		} catch (ErroRepositorioException ex) {
			ex.printStackTrace();
			throw new ControladorException("erro.sistema", ex);
		}
		
		// 1.4.	Para cada item do tipo DÉBITO A COBRAR da lista de itens do documento
		if (colecaoCobrancaDocumentoItemDebitoACobrar != null && !colecaoCobrancaDocumentoItemDebitoACobrar.isEmpty()) {
			Iterator iterator = colecaoCobrancaDocumentoItemDebitoACobrar.iterator();
			while(iterator.hasNext()) {
				CobrancaDocumentoItem item = (CobrancaDocumentoItem) iterator.next();
				valorTotalDebitosACobrar = valorTotalDebitosACobrar.add(item.getValorItemCobrado());
			}
		} 
		
		return valorTotalDebitosACobrar;
	}
	
	
	/**
	 * [UC0968] Emitir Cartas da Campanha de Final de Ano 2009
	 * 
	 * Obter Valor Total dos Créditos à Realizar
	 * 
	 * @author Mariana Victor
	 * @throws ControladorException 
	 * @data 17/03/2011
	 * 
	 * @throws ControladorException 
	 * */
	private BigDecimal obterValorTotalCreditosARealizar(CobrancaDocumento cobrancaDocumento) throws ControladorException {
		
		BigDecimal valorTotalCreditosARealizar = BigDecimal.ZERO;
		Collection colecaoCobrancaDocumentoItemCreditoACobrar = null;
		
		try {

			colecaoCobrancaDocumentoItemCreditoACobrar = 
				this.repositorioCobranca.selecionarCobrancaDocumentoItemReferenteCreditoACobrar(cobrancaDocumento);

		} catch (ErroRepositorioException ex) {
			ex.printStackTrace();
			throw new ControladorException("erro.sistema", ex);
		}
		
		// 1.5.	Para cada item do tipo CRÉDITO A COBRAR da lista de itens do documento
		if (colecaoCobrancaDocumentoItemCreditoACobrar != null && !colecaoCobrancaDocumentoItemCreditoACobrar.isEmpty()) {
			Iterator iterator = colecaoCobrancaDocumentoItemCreditoACobrar.iterator();
			while(iterator.hasNext()) {
				CobrancaDocumentoItem item = (CobrancaDocumentoItem) iterator.next();
				valorTotalCreditosARealizar = valorTotalCreditosARealizar.add(item.getValorItemCobrado());
			}
		}
		
		return valorTotalCreditosARealizar;
	}
	

	/**
	 * [UC0968] Emitir Cartas da Campanha de Final de Ano 2009
	 * 
	 * [SB0003] ? Gerar Dados Próprios do Formato Ficha de Compensação
	 * 
	 * @author Mariana Victor
	 * @data 16/03/2011
	 * 
	 * @param
	 * @return String[]
	 * */
	private String gerarDadosPropriosFormatoFichaCompensacao(CobrancaDocumento cobrancaDocumento)
		throws ControladorException {
		
		SistemaParametro sistemaParametro = this.getControladorUtil().pesquisarParametrosDoSistema();
		
		StringBuilder cobrancaDocumentoTxt = new StringBuilder();
		
		// 1 - Código do Banco
		String codigoBanco = "001-9";
		cobrancaDocumentoTxt.append(Util.completaString(codigoBanco, 5));
		
		// [SB0005 ? Obter Representação numérica do Nosso Número da Ficha de Compensação]
		StringBuilder nossoNumero = Fachada.getInstancia().obterNossoNumeroFichaCompensacao(
				cobrancaDocumento.getDocumentoTipo().getId().toString(),cobrancaDocumento.getId().toString()) ;
		String nossoNumeroSemDV = nossoNumero.toString().substring(0,17);
		
		// [SB0006 ? Obter Fator de Vencimento]
		Date dataVencimento = Util.adicionarNumeroDiasDeUmaData(new Date(),75);
		String fatorVencimento = Fachada.getInstancia().obterFatorVencimento(dataVencimento);
		
		String representacaoNumericaCodBarraSemDigito = Fachada.getInstancia().
			obterEspecificacaoCodigoBarraFichaCompensacao(
		    ConstantesSistema.CODIGO_BANCO_FICHA_COMPENSACAO, 
		    ConstantesSistema.CODIGO_MOEDA_FICHA_COMPENSACAO, 
		    cobrancaDocumento.getValorDocumento(), nossoNumeroSemDV.toString(),
			ConstantesSistema.CARTEIRA_FICHA_COMPENSACAO, fatorVencimento);

		// 2 - Representação numérica do código de barras
		String representacaoNumericaCodigoBarraFichaCompensacao = 
			Fachada.getInstancia().obterRepresentacaoNumericaCodigoBarraFichaCompensacao(representacaoNumericaCodBarraSemDigito);
		cobrancaDocumentoTxt.append(Util.completaString(representacaoNumericaCodigoBarraFichaCompensacao, 54));

		// 3 - Local de Pagamento 
		String localPagamento = "PAGÁVEL EM QUALQUER BANCO ATÉ O VENCIMENTO";
		cobrancaDocumentoTxt.append(Util.completaString(localPagamento, 45));

		// 4 - Vencimento
		String vencimento = "Contra-apresentação";
		cobrancaDocumentoTxt.append(Util.completaString(vencimento, 20));

		// 5 - Cedente
		String cedente = "";
		if (sistemaParametro.getNomeAbreviadoEmpresa().equals(SistemaParametro.EMPRESA_COMPESA)) {
			cedente = "COMPESA - Companhia Pernambucana de Saneamento";
		}
		cobrancaDocumentoTxt.append(Util.completaString(cedente, 50));
		
		// 6 - Agência/Código Cedente 
		String agenciaCodigoCedente = "";
		if (sistemaParametro.getNomeAbreviadoEmpresa().equals(SistemaParametro.EMPRESA_COMPESA)) {
			agenciaCodigoCedente = "3234-4/2868-1";
		}
		cobrancaDocumentoTxt.append(Util.completaString(agenciaCodigoCedente, 13));

		// 7 - Data do Documento
		String dataDocumento = Util.formatarData(new Date());
		cobrancaDocumentoTxt.append(Util.completaString(dataDocumento, 10));

		// 8 - Número do Documento 
		String numeroDocumento = cobrancaDocumento.getImovel().getId().toString();
		cobrancaDocumentoTxt.append(Util.completaString(numeroDocumento, 10));

		// 9 - Espécie do Documento
		String especie = "FAT";
		cobrancaDocumentoTxt.append(Util.completaString(especie, 3));

		// 10 - Aceite
		String aceite = "N";
		cobrancaDocumentoTxt.append(Util.completaString(aceite, 1));

		// 11 - Data do Processamento
		String dataProcessamento = Util.formatarData(new Date());
		cobrancaDocumentoTxt.append(Util.completaString(dataProcessamento, 10));

		// 12 - Nosso Número
		cobrancaDocumentoTxt.append(Util.completaString(nossoNumero.toString(), 19));

		// 13 - Carteira
		String carteira = "18";
		cobrancaDocumentoTxt.append(Util.completaString(carteira, 2));
		
		// 14 - Valor Documento
		BigDecimal valorDocumento = this.obterValorDoDocumento(cobrancaDocumento);
		cobrancaDocumentoTxt.append(Util.completaStringComEspacoAEsquerda(
				Util.formataBigDecimal(valorDocumento, 2, true), 14));

		// 15 - Desconto/Abatimento
		BigDecimal[] valorTotalContasAcrescimos = this.obterValorTotalContaAcrescimos(cobrancaDocumento);
		BigDecimal descontoAbatimento = valorTotalContasAcrescimos[1];
		cobrancaDocumentoTxt.append(Util.completaStringComEspacoAEsquerda(
				Util.formataBigDecimal(descontoAbatimento, 2, true), 14));
		
		// 16 - Mora/Multa
		BigDecimal moraMulta = BigDecimal.ZERO;
		cobrancaDocumentoTxt.append(Util.completaStringComEspacoAEsquerda(
				Util.formataBigDecimal(moraMulta, 2, true), 14));
		
		// 17 - Valor Cobrado
		BigDecimal valorCobrado = valorDocumento.subtract(descontoAbatimento.add(moraMulta));
		cobrancaDocumentoTxt.append(Util.completaStringComEspacoAEsquerda(
				Util.formataBigDecimal(valorCobrado, 2, true), 14));
		
		// 18 - Sacado ? parte 1
		String sacadoParte01 = "";
		if (cobrancaDocumento.getImovel() != null
				&& cobrancaDocumento.getImovel().getNomeImovel() != null) {
			sacadoParte01 = cobrancaDocumento.getImovel().getNomeImovel();
		} else {
			Cliente cliente = this.getControladorImovel().pesquisarClienteUsuarioImovel(cobrancaDocumento.getImovel().getId());
			if (cliente != null) {
				sacadoParte01 = cliente.getNome();
			}
		}
		cobrancaDocumentoTxt.append(Util.completaString(sacadoParte01, 30));
		
		// 19 - Sacado ? parte 2
		String sacadoParte02 = "     Matricula: ";
		cobrancaDocumentoTxt.append(Util.completaString(sacadoParte02, 16));
		
		// 20 - Sacado ? parte 3
		String sacadoParte03 = Util.retornaMatriculaImovelFormatada(
				cobrancaDocumento.getImovel().getId());
		cobrancaDocumentoTxt.append(Util.completaString(sacadoParte03, 9));
		
		// 21 - Sacado ? endereço
		String[] parmsEnderecoImovel = getControladorEndereco().pesquisarEnderecoFormatadoDividido(cobrancaDocumento.getImovel().getId());
		String sacadoEndereco = parmsEnderecoImovel[0];
		cobrancaDocumentoTxt.append(Util.completaString(sacadoEndereco, 50));
		
		// 22 - Código de Barras
        // Cria o objeto para gerar o códigode barras no
        // padrão intercalado 2 de 5
        Interleaved2of5 codigoBarraIntercalado2de5 = new Interleaved2of5();
        cobrancaDocumentoTxt.append(Util.completaString(codigoBarraIntercalado2de5
                            .encodeValue(representacaoNumericaCodBarraSemDigito), 112));
		
		String txtString =  cobrancaDocumentoTxt.toString();
		
		txtString = txtString.replace('\'',' ');
		txtString = txtString.replace('`',' ');
		
		return txtString;
	}
	
	
	/**
	 * [UC1152] Emissão Boletim Medição Cobrança
	 * 
	 *  Pesquisa os Itens de Serviço relacionados ao boletim de medição de cobrança selecionado
	 *  
	 * @author Mariana Victor
	 * @date 21/03/2011
	 * 
	 * @param FiltrarRelatorioBoletimMedicaoCobrancaHelper
	 * 
	 * @return Collection<RelatorioBoletimMedicaoCobrancaHelper>
	 * @throws ControladorException
	 */
	public Collection<RelatorioBoletimMedicaoCobrancaHelper> pesquisarItensServico(
			FiltrarRelatorioBoletimMedicaoCobrancaHelper helper, String tipoCobrancaBoletim) throws ControladorException {
			
			Collection colecaoRetorno = new ArrayList();
			try {
				Integer anoMes = new Integer(helper.getMesAnoReferencia());
				Integer idGrupoCobranca = new Integer(helper.getGrupoCobranca());
				
				Integer idGerenciaRegional = null;
				if (helper.getGerenciaRegional() != null
						&& !helper.getGerenciaRegional().equals("")){
					idGerenciaRegional = new Integer(helper.getGerenciaRegional());
				}
				
				Integer idUnidadeNegocio = null;
				if (helper.getUnidadeNegocio() != null
						&& !helper.getUnidadeNegocio().equals("")){
					idUnidadeNegocio = new Integer(helper.getUnidadeNegocio());
				}
				
				Integer idLocalidadeInicial = null;
				if (helper.getLocalidadeInicial() != null
						&& !helper.getLocalidadeInicial().equals("")){
					idLocalidadeInicial = new Integer(helper.getLocalidadeInicial());
				}
				
				Integer idLocalidadeFinal = null;
				if (helper.getLocalidadeFinal() != null
						&& !helper.getLocalidadeFinal().equals("")){
					idLocalidadeFinal = new Integer(helper.getLocalidadeFinal());
				}
				
				Collection colecaoBoletimMedicaoCobranca = null;
				
				if (tipoCobrancaBoletim.equals("desconto")){
					colecaoBoletimMedicaoCobranca =  this.repositorioCobranca.pesquisarItensServicoCobrancaBoletimDesconto(
							anoMes, idGrupoCobranca, idGerenciaRegional, idUnidadeNegocio, idLocalidadeInicial, idLocalidadeFinal);
				} else if (tipoCobrancaBoletim.equals("executado")){
					colecaoBoletimMedicaoCobranca =  this.repositorioCobranca.pesquisarItensServicoCobrancaBoletimExecutados(
							anoMes, idGrupoCobranca, idGerenciaRegional, idUnidadeNegocio, idLocalidadeInicial, idLocalidadeFinal);
				} else if (tipoCobrancaBoletim.equals("sucesso")){
					colecaoBoletimMedicaoCobranca =  this.repositorioCobranca.pesquisarItensServicoCobrancaBoletimSucesso(
							anoMes, idGrupoCobranca, idGerenciaRegional, idUnidadeNegocio, idLocalidadeInicial, idLocalidadeFinal);
				}

				colecaoRetorno = this.carregarColecaoRelatorioBoletimMedicaoCobranca(colecaoBoletimMedicaoCobranca, helper, tipoCobrancaBoletim);
				
				
			} catch (ErroRepositorioException e) {
				throw new ControladorException("erro.sistema", e);
			}
			
			return colecaoRetorno;
		
	}
	
	private Collection<RelatorioBoletimMedicaoCobrancaHelper> carregarColecaoRelatorioBoletimMedicaoCobranca(
			Collection<Object[]> colecaoBoletimMedicaoCobranca, FiltrarRelatorioBoletimMedicaoCobrancaHelper helper,
			String tipoCobrancaBoletim) {
		
		Collection<RelatorioBoletimMedicaoCobrancaHelper> colecaoRetorno = null;
		

		int POSICAO_DATA_GERACAO = 4;
		int POSICAO_NOME_GERENCIA = 6;
		int POSICAO_NOME_LOCALIDADE = 7;
		int POSICAO_ID_LOCALIDADE = 8;
		int POSICAO_ID_GERENCIA = 9;
		int POSICAO_NOME_UNIDADE = 10;

		if (tipoCobrancaBoletim.equals("sucesso")){
			POSICAO_DATA_GERACAO = 1;
			POSICAO_NOME_GERENCIA = 2;
			POSICAO_NOME_LOCALIDADE = 3;
			POSICAO_ID_LOCALIDADE = 4;
			POSICAO_ID_GERENCIA = 5;
			POSICAO_NOME_UNIDADE = 6;
		}
		
		if (colecaoBoletimMedicaoCobranca != null
				&& !colecaoBoletimMedicaoCobranca.isEmpty()) {
			
			colecaoRetorno = new ArrayList();
			
			Iterator iterator = colecaoBoletimMedicaoCobranca.iterator();
			
			while (iterator.hasNext()) {
			
				RelatorioBoletimMedicaoCobrancaHelper relatorioHelper = new RelatorioBoletimMedicaoCobrancaHelper();
				
				Object[] objeto = (Object[]) iterator.next();
				
				// Id do CobrancaBoletimMedicao
				if ( objeto[0] != null ) {
					Integer idCobrancaBoletimMedicao = new Integer(objeto[0].toString());

					relatorioHelper.setIdCobrancaBoletimMedicao(idCobrancaBoletimMedicao);
				}
				
				if (!tipoCobrancaBoletim.equals("sucesso")) {
					// Item de Serviço
					ItemServico itemServico = new ItemServico();
					if ( objeto[1] != null && !objeto[1].equals("")) {
						Integer idItemServico = new Integer(objeto[1].toString());
						
						itemServico.setId(idItemServico);
					}
					if ( objeto[2] != null ) {
						String descricao = objeto[2].toString();
						
						itemServico.setDescricao(descricao);
					}
					if ( objeto[3] != null ) {
						Integer codigoConstanteCalculo = new Integer(objeto[3].toString());
						
						itemServico.setCodigoConstanteCalculo(codigoConstanteCalculo);
					}
					if ( objeto[5] != null ) {
						Long codigoItem = (Long) objeto[5];
						
						itemServico.setCodigoItem(codigoItem);
					}
					relatorioHelper.setItemServico(itemServico);
				}
				
				// Data de Geração do Boletim
				if ( objeto[POSICAO_DATA_GERACAO] != null ) {
					Date dataGeracao = (Date) objeto[POSICAO_DATA_GERACAO];
					
					relatorioHelper.setDataGeracao(dataGeracao);
				}

				// Nome da Gerência Regional
				if ( objeto[POSICAO_NOME_GERENCIA] != null) {
					String nomeGerenciaRegional = (String) objeto[POSICAO_NOME_GERENCIA];
					
					relatorioHelper.setNomeGerenciaRegional(nomeGerenciaRegional);
				}
				// Nome da Localidade
				if ( objeto[POSICAO_NOME_LOCALIDADE] != null) {
					String localidade = (String) objeto[POSICAO_NOME_LOCALIDADE];
					
					relatorioHelper.setNomeLocalidade(localidade);
				}
				
				// Id da Localidade
				if ( objeto[POSICAO_ID_LOCALIDADE] != null) {
					Integer idLocalidade = (Integer) objeto[POSICAO_ID_LOCALIDADE];
					
					relatorioHelper.setIdLocalidade(idLocalidade);
				}
				
				// Id da Gerencia
				if ( objeto[POSICAO_ID_GERENCIA] != null) {
					Integer idGerencia = (Integer) objeto[POSICAO_ID_GERENCIA];
					
					relatorioHelper.setIdGerenciaRegional(idGerencia);
				}
				
				// Nome da Unidade de Negócio
				if ( objeto[POSICAO_NOME_UNIDADE] != null) {
					String unidadeNegocio = (String) objeto[POSICAO_NOME_UNIDADE];
					
					relatorioHelper.setNomeUnidadeNegocio(unidadeNegocio);
				}
				
				if (helper.getGerenciaRegional() != null && !helper.getGerenciaRegional().equals("")) {
					relatorioHelper.setGerenciaRegional(new Integer(helper.getGerenciaRegional()));
				}
				if (helper.getLocalidadeInicial() != null && !helper.getLocalidadeInicial().equals("")) {
					relatorioHelper.setLocalidadeInicial(new Integer(helper.getLocalidadeInicial()));
					
				}
				if (helper.getLocalidadeFinal() != null && !helper.getLocalidadeFinal().equals("")) {
					relatorioHelper.setLocalidadeFinal(new Integer(helper.getLocalidadeFinal()));
				}
				
				relatorioHelper.setGrupoCobranca(new Integer(helper.getGrupoCobranca()));
				relatorioHelper.setMesAnoReferencia(helper.getMesAnoReferencia());
				
				colecaoRetorno.add(relatorioHelper);
			}
		}
		return colecaoRetorno;
	}

	/**
	 *  [UC1153] Solicitar Geração/Emissão Boletim de Medição de Cobrança
	 *  
	 *  [FS0002] ? Ações não encerradas no cronograma.
	 * 
	 * @author Mariana Victor
	 * @created 21/03/2011
	**/
	public Integer pesquisarAcoesEncerradasCronograma(Integer anoMesReferencia, Integer idCobrancaGrupo) throws ControladorException {
		
		try {

			return 
				this.repositorioCobranca.pesquisarAcoesEncerradasCronograma(anoMesReferencia, idCobrancaGrupo);

		} catch (ErroRepositorioException ex) {
			ex.printStackTrace();
			throw new ControladorException("erro.sistema", ex);
		}
	}

	/**
	 *  [UC1152] Emissão Boletim Medição Cobrança
	 *  
	 *  De acordo com o código da constate do item, pesquisa os valores do mesmo.
	 * 
	 * @author Mariana Victor
	 * @created 22/03/2011
	**/
	public Object[] obterQuantidadeOSBoletimMedicaoCobranca(RelatorioBoletimMedicaoCobrancaHelper helper) throws ControladorException {

		try {

			return 
				this.repositorioCobranca.obterQuantidadeOSBoletimMedicaoCobranca(helper);

		} catch (ErroRepositorioException ex) {
			ex.printStackTrace();
			throw new ControladorException("erro.sistema", ex);
		}
	}


	/**
	 *  [UC1152] Emissão Boletim Medição Cobrança
	 *  
	 *  De acordo com o código da constate do item, pesquisa os valores do mesmo.
	 * 
	 * @author Mariana Victor
	 * @created 22/03/2011
	**/
	public Object[] obterSomatorioOSBoletimMedicaoCobranca(RelatorioBoletimMedicaoCobrancaHelper helper) throws ControladorException {

		try {

			return 
				this.repositorioCobranca.obterSomatorioOSBoletimMedicaoCobranca(helper);

		} catch (ErroRepositorioException ex) {
			ex.printStackTrace();
			throw new ControladorException("erro.sistema", ex);
		}
	}
	
	
	/**
	 *  [UC1152] Emissão Boletim Medição Cobrança
	 *  
	 *  De acordo com o código da constate do item, pesquisa os valores do mesmo.
	 * 
	 * @author Mariana Victor
	 * @created 23/03/2011
	**/
	public Object[] obterQuantidadeOSBoletimMedicaoCobrancaDesconto(RelatorioBoletimMedicaoCobrancaHelper helper) throws ControladorException {

		try {

			return 
				this.repositorioCobranca.obterQuantidadeOSBoletimMedicaoCobrancaDesconto(helper);

		} catch (ErroRepositorioException ex) {
			ex.printStackTrace();
			throw new ControladorException("erro.sistema", ex);
		}
	}
	

	/**
	 *  [UC1152] Emissão Boletim Medição Cobrança
	 *  
	 *  Consulta os valores da totalização da taxa de sucesso.
	 * 
	 * @author Mariana Victor
	 * @created 23/03/2011
	**/
	public Object[] obterTotalizacaoOSBoletimMedicaoCobrancaSucesso(RelatorioBoletimMedicaoCobrancaHelper helper) throws ControladorException {

		try {

			return 
				this.repositorioCobranca.obterTotalizacaoOSBoletimMedicaoCobrancaSucesso(helper);

		} catch (ErroRepositorioException ex) {
			ex.printStackTrace();
			throw new ControladorException("erro.sistema", ex);
		}
	}
	

	/**
	 *  [UC1152] Emissão Boletim Medição Cobrança
	 *  
	 *  Pesquisa dados da empresa e do contrado do boletim de cobrança
	 * 
	 * @author Mariana Victor
	 * @created 24/03/2011
	**/
	public Object[] pesquisarDadosBoletimMedicaoCobranca(Integer anoMesReferencia, Integer idCobrancaGrupo)
		 throws ControladorException {

		try {

			return 
				this.repositorioCobranca.pesquisarDadosBoletimMedicaoCobranca(anoMesReferencia, idCobrancaGrupo);

		} catch (ErroRepositorioException ex) {
			ex.printStackTrace();
			throw new ControladorException("erro.sistema", ex);
		}
	
	}

	/**
	 * 
	 * Esse metodo está de acordo com o UC0919 - Gerar Relatorio de Impostos Por Cliente Responsavel. Dessa forma,
	 * esse método realiza a pesquisa de impostos arrecadados por cliente responsável, agrupando os impostos 
	 * a partir das faturas de cada cliente. Para esse caso de uso, todos os CLIENTES devem ser FEDERAIS, dessa 
	 * forma a pesquisa está sendo realizada por cliente responsáveis federais, ou seja clientes que tem na 
	 * tabela cadastro.cliente_tipo EPOD_ID = 3.
	 *
	 * @author Diogo Peixoto
	 * @date 24/03/2011
	 *
	 * @param Integer anoMes - o ano/mes já formatado, sem barra, na forma de Integer
	 * @param Integer clienteID - o id do cliente pode ser nulo, caso o usuário queira
	 * pesquisar os impostos de todos os clientes federais em um determinado mês/ano referência.
	 * @param String tipoRelatorio (SINTETICO ou ANALITICO)
	 * @return Collection<ImpostoDeduzidoHelper> - a coleção de helpers do relatorio
	 * @throws ControladorException
	 */
	public Collection<ImpostoDeduzidoHelper> pesquisarImpostosArrecadacaoClienteResponsavelFederal(
			Integer anoMes, Integer clienteID, String tipoRelatorio) throws ControladorException{
		
		Collection<ImpostoDeduzidoHelper> colecaoImpostosDeduzidosHelper = new ArrayList();
		
		if(tipoRelatorio != null){
			
			if(tipoRelatorio.equalsIgnoreCase("sintetico") ){

				//cria uma colecao de impostos
				Collection colecaoImpostos = new ArrayList();
					
				try {				
					
					//faz a pesquisa por impostos que estao associados à fatura passando o ano mes
					colecaoImpostos = 
						this.repositorioCobranca.pesquisarImpostosArrecadacaoClienteResponsavelFederal(anoMes, clienteID);
					
				} catch (ErroRepositorioException e) {
					e.printStackTrace();
					throw new ControladorException("erro.sistema", e);
				}		
				
				//valida a colecao de impostos pesquisada
				if(colecaoImpostos != null && !colecaoImpostos.isEmpty()){
					Iterator iteraImposto = colecaoImpostos.iterator();
					
					//varre a colecao de impostos
					while (iteraImposto.hasNext()) {
						
						Object[] imposto = (Object[]) iteraImposto.next();
						
						//cria uma instancia do helper de impostos
						ImpostoDeduzidoHelper impostoDeduzidoHelper = new ImpostoDeduzidoHelper();
						
						//seta os valores do imposto pequisado no helper do imposto para se usar no relatorio
						impostoDeduzidoHelper.setIdImpostoTipo((Integer) imposto[0]);
						impostoDeduzidoHelper.setDescricaoImposto((String) imposto[1]);						
						impostoDeduzidoHelper.setPercentualAliquota((BigDecimal) imposto[2]);
						impostoDeduzidoHelper.setValor((BigDecimal) imposto[3]);
						impostoDeduzidoHelper.setIdCliente((Integer) imposto[4] );
						impostoDeduzidoHelper.setNomeCliente((String) imposto[5] );
						impostoDeduzidoHelper.setValorFatura((BigDecimal) imposto[6]);
						impostoDeduzidoHelper.setCnpjCliente((String) imposto[7]);
						
						//adiciona o helper à colecao dos helpers de imposto
						colecaoImpostosDeduzidosHelper.add(impostoDeduzidoHelper);
						
					}
				
				}
				
			}else if(tipoRelatorio.equalsIgnoreCase("analitico")){		
							
						//Cria lista QUEBRA para realizar a soma dos valores da fatura
						List<ImpostoDeduzidoHelper> quebra = 
								new ArrayList<ImpostoDeduzidoHelper>();
				
//						Collection colecaoImpostosCliente = new ArrayList();
						List colecaoImpostosCliente = new ArrayList();
						
						try{								
							
							//faz a pesquisa por impostos que estao associados à fatura passando o id da fatura
							colecaoImpostosCliente = 
								(List)this.repositorioCobranca.pesquisarImpostosArrecadacaoClienteResponsavelFederalAnalitico(anoMes, clienteID);
							
						}catch (ErroRepositorioException e) {
							e.printStackTrace();
							throw new ControladorException("erro.sistema", e);
						}
						
						//inicio daseção da coleção de impostos do Cliente
						if(colecaoImpostosCliente != null && !colecaoImpostosCliente.isEmpty()){
							
							for (int i = 0; i<colecaoImpostosCliente.size(); i++ ) {
								
								Object obj = (Object) colecaoImpostosCliente.get(i);
								
								if (obj instanceof Object[]) {
					                Object[] imposto = (Object[]) obj;
								
					                //cria uma instancia do helper de impostos
									ImpostoDeduzidoHelper helper = new ImpostoDeduzidoHelper();
									
									//seta os valores do imposto pequisado no helper do imposto para se usar no relatorio
									helper.setIdImpostoTipo((Integer) imposto[0]);
									helper.setDescricaoImposto((String) imposto[1]);						
									helper.setPercentualAliquota((BigDecimal) imposto[2]);
									helper.setValor((BigDecimal) imposto[3]);
									helper.setIdCliente((Integer)imposto[4]);
									helper.setNomeCliente((String) imposto[5] );
									helper.setValorFatura((BigDecimal) imposto[6]);
									helper.setIdImovel((Integer) imposto[7]);
									helper.setCnpjCliente((String) imposto[8]);
									
									// Verificamos se o objeto ja possue uma quebra cadastrada
					                if (quebra.contains(helper)) {
					                	
					                	int posicao = quebra.indexOf(helper);
					                	
					                	ImpostoDeduzidoHelper jaCadastrado = (ImpostoDeduzidoHelper) quebra.get(posicao);
					                	
					                	jaCadastrado.setValorFatura(jaCadastrado.getValorFatura().add(helper.getValorFatura()));
					                	
					                	//seta os valores do imposto pesquisado no helper do imposto para se usar no relatorio
										helper.setIdImpostoTipo((Integer) imposto[0]);
										helper.setDescricaoImposto((String) imposto[1]);						
										helper.setPercentualAliquota((BigDecimal) imposto[2]);
										helper.setValor((BigDecimal) imposto[3]);
										helper.setIdCliente((Integer)imposto[4]);
										helper.setNomeCliente((String) imposto[5] );
//										helper.setValorFatura((BigDecimal) imposto[6]);
										helper.setIdImovel((Integer) imposto[7]);
										helper.setCnpjCliente((String) imposto[8]);
										
										quebra.add(helper);
					                	
					                }else{
					                	
					                	quebra.add(helper);
					                	
					                }
								
								}
								
							}
							
							colecaoImpostosDeduzidosHelper = (Collection) quebra;
							
							/*Iterator iterator = colecaoImpostosCliente.iterator();
						    
							//inicio do laço da coleção de impostos do imovel
							while (iterator.hasNext()) {
								
								Object[] imposto = (Object[]) iterator.next();
								
								//cria uma instancia do helper de impostos
								ImpostoDeduzidoHelper impostoDeduzidoHelper = new ImpostoDeduzidoHelper();
								
								//seta os valores do imposto pequisado no helper do imposto para se usar no relatorio
								impostoDeduzidoHelper.setIdImpostoTipo((Integer) imposto[0]);
								impostoDeduzidoHelper.setDescricaoImposto((String) imposto[1]);						
								impostoDeduzidoHelper.setPercentualAliquota((BigDecimal) imposto[2]);
								impostoDeduzidoHelper.setValor((BigDecimal) imposto[3]);
								impostoDeduzidoHelper.setIdCliente((Integer)imposto[4]);
								impostoDeduzidoHelper.setNomeCliente((String) imposto[5] );
								impostoDeduzidoHelper.setValorFatura((BigDecimal) imposto[6]);
								impostoDeduzidoHelper.setIdImovel((Integer) imposto[7]);
								
								//adiciona o helper à colecao dos helpers de imposto
								colecaoImpostosDeduzidosHelper.add(impostoDeduzidoHelper);									
							}//fim do laço da coleção de impostos do imovel	
							 */									
						}//fim seção da coleção dos imposto do imovel								
					}//fim do laço da coleção de imoveis
				}
		
			return colecaoImpostosDeduzidosHelper;
	}
	
	
	/**
	 * Gerar Relatório de Análise de Perdas com Crédito
	 * 
	 * [UC1155] Gerar Relatório de Análise de Perdas com Crédito
	 * 
	 * 
	 * @author Paulo Diniz
	 * @date 16/03/2011
	 * 
	 * @param mesAno para análise
	 * @throws ControladorException
	 */
	public RelatorioAnalisePerdasCreditosBean gerarRelatorioAnalisePerdasCreditos(String anoMesReferencia)
	throws ControladorException{
		
		try {

			return 
				this.repositorioCobranca.gerarRelatorioAnalisePerdasCreditos(anoMesReferencia);

		} catch (ErroRepositorioException ex) {
			ex.printStackTrace();
			throw new ControladorException("erro.sistema", ex);
		}
	}
	
	/**
	 * Retorna o maior ano mesReferencia da tabela docs_a_rec_resumo
	 * 
	 * [UC1155] Gerar Relatório de Análise de Perdas com Crédito
	 * 
	 * 
	 * @author Paulo Diniz
	 * @date 16/03/2011
	 * 
	 * @param mesAno para análise
	 * @throws ControladorException 
	 */
	public int maiorAnoMesReferenciaDocumentosAReceberResumo() throws ControladorException{
		try {

			return 
				this.repositorioCobranca.maiorAnoMesReferenciaDocumentosAReceberResumo();

		} catch (ErroRepositorioException ex) {
			ex.printStackTrace();
			throw new ControladorException("erro.sistema", ex);
		}
	}
	
	/**
	 * [UC0879] Gerar Extensão de Comando de Contas em Cobrança por Empresa -
	 * Pesquisa dados do popup
	 * 
	 * @author Mariana Victor
	 * @date 13/04/2011
	 */
	public Collection<Object[]> pesquisarDadosPopupExtensaoComandoImovelPerfil(Integer idComando) throws ControladorException {
		try {

			return 
				this.repositorioCobranca.pesquisarDadosPopupExtensaoComandoImovelPerfil(idComando);

		} catch (ErroRepositorioException ex) {
			ex.printStackTrace();
			throw new ControladorException("erro.sistema", ex);
		}
	}
	
	/**
	 * [UC0879] Gerar Extensão de Comando de Contas em Cobrança por Empresa -
	 * Pesquisa dados do popup
	 * 
	 * @author Mariana Victor
	 * @date 13/04/2011
	 */
	public Collection<Object[]> pesquisarDadosPopupExtensaoComandoGerenciaRegional(Integer idComando) throws ControladorException {
		try {

			return 
				this.repositorioCobranca.pesquisarDadosPopupExtensaoComandoGerenciaRegional(idComando);

		} catch (ErroRepositorioException ex) {
			ex.printStackTrace();
			throw new ControladorException("erro.sistema", ex);
		}
	}
	
	/**
	 * [UC0879] Gerar Extensão de Comando de Contas em Cobrança por Empresa -
	 * Pesquisa dados do popup
	 * 
	 * @author Mariana Victor
	 * @date 13/04/2011
	 */
	public Collection<Object[]> pesquisarDadosPopupExtensaoComandoUnidadeNegocio(Integer idComando) throws ControladorException {
		try {

			return 
				this.repositorioCobranca.pesquisarDadosPopupExtensaoComandoUnidadeNegocio(idComando);

		} catch (ErroRepositorioException ex) {
			ex.printStackTrace();
			throw new ControladorException("erro.sistema", ex);
		}
	}

	

	/**
	 * [UC0869] Gerar Arquivo Texto de Contas em Cobrança por Empresa
	 * 
	 * 5. Caso contrário, o layout selecionado seja 2 (dois)
	 * 
	 * @author: Mariana Victor
	 * @date: 13/04/2011
	 */
	private void montarArquivoTextoContasEmCobrancaEmpresaLayoutTipo02(
			StringBuilder arquivoTxt,
			GerarArquivoTextoContasCobrancaEmpresaHelper helper) {


		// 1. idGerenciaRegional tam 04
		if (helper.getIdGerenciaRegional() != null) {
			arquivoTxt.append(Util.truncarString(helper.getIdGerenciaRegional()
					.toString(), 4)
					+ "#");
		} else {
			arquivoTxt.append("#");
		}
		// 2. nomeGerenciaRegional tam 25
		if (helper.getNomeGerenciaRegional() != null) {
			arquivoTxt.append(Util.truncarString(
					helper.getNomeGerenciaRegional(), 25)
					+ "#");
		} else {
			arquivoTxt.append("#");
		}
		
		// 3. idUnidadeNegocio tam 04
		if (helper.getIdUnidadeNegocio() != null) {
			arquivoTxt.append(Util.truncarString(helper.getIdUnidadeNegocio()
					.toString(), 4)
					+ "#");
		} else {
			arquivoTxt.append("#");
		}
		// 4. nomeUnidadeNegocio tam 50
		if (helper.getNomeUnidadeNegocio() != null) {
			arquivoTxt.append(Util.truncarString(
					helper.getNomeUnidadeNegocio(), 50)
					+ "#");
		} else {
			arquivoTxt.append("#");
		}
		// 5. IdFaturamentoGrupo tam 04
		if (helper.getIdFaturamentoGrupo() != null) {
			arquivoTxt.append(Util.truncarString(helper.getIdFaturamentoGrupo()
					.toString(), 4)
					+ "#");
		} else {
			arquivoTxt.append("#");
		}
		// 6. IdLocalidade tam 04
		if (helper.getIdLocalidade() != null) {
			arquivoTxt.append(Util.truncarString(helper.getIdLocalidade()
					.toString(), 4)
					+ "#");
		} else {
			arquivoTxt.append("#");
		}
		// 7. NomeLocalidade tam 30
		if (helper.getNomeLocalidade() != null) {
			arquivoTxt.append(Util
					.truncarString(helper.getNomeLocalidade(), 30)
					+ "#");
		} else {
			arquivoTxt.append("#");
		}

		// 8. codigoRota tam 06
		if (helper.getCodigoRota() != null) {
			arquivoTxt.append(Util.truncarString(helper.getCodigoRota()
					.toString(), 6)
					+ "#");
		} else {
			arquivoTxt.append("#");
		}

		// 9. sequencialRota tam 09
		if (helper.getNumeroSequencialRota() != null) {
			arquivoTxt.append(Util.truncarString(helper
					.getNumeroSequencialRota().toString(), 9)
					+ "#");
		} else {
			arquivoTxt.append("#");
		}

		// 10. matriculaImovel tam 09
		if (helper.getIdImovel() != null) {
			arquivoTxt.append(Util.truncarString(helper.getIdImovel()
					.toString(), 9)
					+ "#");
		} else {
			arquivoTxt.append("#");
		}

		// 11. nomeCliente tam 40
		if (helper.getNomeClienteConta() != null) {
			arquivoTxt.append(Util.truncarString(helper.getNomeClienteConta(),
					40)
					+ "#");
		} else {
			arquivoTxt.append("#");
		}

		// 12. NomeLogradouro tam 30
		if (helper.getNomeLogradouro() != null) {
			arquivoTxt.append(Util
					.truncarString(helper.getNomeLogradouro(), 30)
					+ "#");
		} else {
			arquivoTxt.append("#");
		}

		// 13. NumeroImovel tam 5
		if (helper.getNumeroImovel() != null) {
			arquivoTxt.append(Util.adicionarZerosEsquedaNumeroTruncando(5,
					helper.getNumeroImovel().toString())
					+ "#");
		} else {
			arquivoTxt.append(Util.adicionarZerosEsquedaNumeroTruncando(5, "")+"#");
		}

		// 14. complementoEndereco tam 50
		if (helper.getComplementoEndereco() != null) {
			arquivoTxt.append(Util.truncarString(helper
					.getComplementoEndereco(), 50)
					+ "#");
		} else {
			arquivoTxt.append("#");
		}

		// 15. codigo cep tam 10
		if (helper.getCodigoCep() != null) {
			arquivoTxt.append(Util.truncarString(helper.getCodigoCep(), 10)
					+ "#");
		} else {
			arquivoTxt.append("#");
		}

		// 16. nomeBairro tam 30
		if (helper.getNomeBairro() != null) {
			arquivoTxt.append(Util.truncarString(helper.getNomeBairro(), 30)
					+ "#");
		} else {
			arquivoTxt.append("#");
		}
		// 17. telefone tam 9
		if (helper.getTelefone() != null) {
			arquivoTxt
					.append(Util.truncarString(helper.getTelefone(), 9) + "#");
		} else {
			arquivoTxt.append("#");
		}
		
		// 17.A. município tam 30
		if (helper.getNomeMunicipio() != null) {
			arquivoTxt
					.append(Util.truncarString(helper.getNomeMunicipio(), 30) + "#");
		} else {
			arquivoTxt.append("#");
		}

		// 18. CPF e CNPJtam 18
		if (helper.getIndicadorPessoaFisicaJuridica().toString().equalsIgnoreCase(
				ClienteTipo.INDICADOR_PESSOA_FISICA.toString())) {
			// cpf
			if (helper.getCpf() != null) {
				arquivoTxt.append(Util.truncarString(Util.formatarCpf(helper
						.getCpf()), 18)
						+ "#");
			} else {
				arquivoTxt.append("#");
			}

		} else {

			// cnpj

			if (helper.getCnpj() != null) {
				arquivoTxt.append(Util.truncarString(Util.formatarCnpj(helper
						.getCnpj()), 18)
						+ "#");
			} else {
				arquivoTxt.append("#");
			}
		}

		// 19. RG tam 13
		if (helper.getIndicadorPessoaFisicaJuridica().toString().equalsIgnoreCase(
				ClienteTipo.INDICADOR_PESSOA_FISICA.toString())) {

			if (helper.getRg() != null) {
				arquivoTxt.append(Util.truncarString(helper.getRg(), 13) + "#");
			} else {
				arquivoTxt.append("#");
			}
		} else {
			arquivoTxt.append("#");
		}

		// 20. id da ordem de serviço tam 10
		if (helper.getIdOrdemServico() != null) {
			arquivoTxt.append(Util
					.truncarString(helper.getIdOrdemServico().toString(), 10)
					+ "#");
		}  else {
			arquivoTxt.append("#");
		}
		
		// 21. Setor Comercial
		if (helper.getCodigoSetorComercial() != null) {
			arquivoTxt.append(Util.truncarString(helper
					.getCodigoSetorComercial().toString(), 4)
					+ "#");
		} else {
			arquivoTxt.append("#");
		}
		
		// 22. Quadra
		arquivoTxt.append(Util.truncarString("" + helper.getNumeroQuadra(),
				7)
				+ "#");
		
		// 23. Lote
		arquivoTxt.append(Util.truncarString(""
				+ helper.getNumeroLote(), 4)
				+ "#");

		// 24. Sublote
		arquivoTxt.append(Util.truncarString(""
				+ helper.getNumeroSublote(), 4)
				+ "#");
		
		// 25. quantidadeDeContas tam 4
		if (helper.getQuantidadeContas() != null) {
			arquivoTxt.append(Util
					.truncarString(helper.getQuantidadeContas().toString(), 4)
					+ "#");
		} else {
			arquivoTxt.append("#");
		}

		// Dados Conta
		if (helper.getConta() != null) {

			// 26. Ano/Mês Referencia tam 7 MM/AAAA
			arquivoTxt.append(Util.formatarAnoMesParaMesAnoSemZeroNoMes(""+helper.getConta().getReferencia())
						+ "#");

			// 27. Data de Vencimento tam 10 DD/MM/AAAA
			if (helper
					.getConta().getDataVencimentoConta() != null) {
				arquivoTxt.append(Util.formatarDataSemZeroAntesMes(helper
						.getConta().getDataVencimentoConta())
						+ "#");
			} else {
				arquivoTxt.append("#");
			}

			// 28. Valor Ligacao Agua tam 15
			if (helper.getConta().getValorAgua() != null) {

				String valorAgua = Util.formatarMoedaReal(helper.getConta()
					.getValorAgua());
				
				valorAgua = valorAgua.replace(".", "");
				valorAgua = valorAgua.replace(",", "");
				
				arquivoTxt.append(Util.truncarString(
					valorAgua,15)
						+ "#");

			} else {
				arquivoTxt.append("#");
			}

			// 29. Valor Ligacao Esgoto tam 15
			if (helper.getConta().getValorEsgoto() != null) {

				String valorEsgoto = Util.formatarMoedaReal(helper.getConta()
					.getValorEsgoto());
				
				valorEsgoto = valorEsgoto.replace(".", "");
				valorEsgoto = valorEsgoto.replace(",", "");
				
				arquivoTxt.append(Util.truncarString(
						valorEsgoto,15)
						+ "#");

			} else {
				arquivoTxt.append("#");
			}

			// 30. Valor Ligacao Debitos tam 15

			if (helper.getConta().getDebitos() != null) {

				String valorDebitos = Util.formatarMoedaReal(helper.getConta()
					.getDebitos());
				
				valorDebitos = valorDebitos.replace(".", "");
				valorDebitos = valorDebitos.replace(",", "");
				
				arquivoTxt.append(Util.truncarString(
						valorDebitos,15)
						+ "#");
			} else {
				arquivoTxt.append("#");
			}

			// 31. Valor Ligacao Creditos tam 15
			if (helper.getConta().getValorCreditos() != null) {

				String valorCreditos = Util.formatarMoedaReal(helper.getConta()
					.getValorCreditos());
				
				valorCreditos = valorCreditos.replace(".", "");
				valorCreditos = valorCreditos.replace(",", "");
				
				arquivoTxt.append(Util.truncarString(
						valorCreditos,15)
						+ "#");

			} else {
				arquivoTxt.append("#");
			}

			// 32. Valor Ligacao Fatura tam 15
			if (helper.getConta().getValorTotal() != null) {

				String valorTotal = Util.formatarMoedaReal(helper.getConta()
					.getValorTotal());
				
				valorTotal = valorTotal.replace(".", "");
				valorTotal = valorTotal.replace(",", "");
				
				arquivoTxt.append(Util.truncarString(
						valorTotal,15)
						+ "#");

			} else {
				arquivoTxt.append("#");
			}

			// 33.Ano Controle tam 4
			arquivoTxt.append(Util.obterAno(helper.getConta().getReferencia())
					+ "#");

			// 34. Controle
			arquivoTxt.append(Util.truncarString(helper.getConta().getId()
					.toString(), 10)
					+ "#");
			
		} else if (helper.getColecaoConta() != null && !helper.getColecaoConta().isEmpty()) {

			
			Iterator iterator = helper.getColecaoConta().iterator();
			
			while (iterator.hasNext()) {
			
				Conta conta = (Conta) iterator.next();

				// 26. Ano/Mês Referencia tam 7 MM/AAAA
				arquivoTxt.append(Util.formatarAnoMesParaMesAnoSemZeroNoMes(""+conta.getReferencia())
							+ "#");

				// 27. Data de Vencimento tam 10 DD/MM/AAAA
				if (conta.getDataVencimentoConta() != null) {
					arquivoTxt.append(Util.formatarDataSemZeroAntesMes(
							conta.getDataVencimentoConta())
							+ "#");
				} else {
					arquivoTxt.append("#");
				}
	
				// 28. Valor Ligacao Agua tam 15
				if (conta.getValorAgua() != null) {

					String valorAgua = Util.formatarMoedaReal(conta
						.getValorAgua());
					
					valorAgua = valorAgua.replace(".", "");
					valorAgua = valorAgua.replace(",", "");
					
					arquivoTxt.append(Util.truncarString(
							valorAgua, 15)
							+ "#");
	
				} else {
					arquivoTxt.append("#");
				}
				
				// 29. Valor Ligacao Esgoto tam 15
				if (conta.getValorEsgoto() != null) {

					String valorEsgoto = Util.formatarMoedaReal(conta
						.getValorEsgoto());
					
					valorEsgoto = valorEsgoto.replace(".", "");
					valorEsgoto = valorEsgoto.replace(",", "");
					
					arquivoTxt.append(Util.truncarString(
							valorEsgoto,15)
							+ "#");
	
				} else {
					arquivoTxt.append("#");
				}
	
				// 30. Valor Ligacao Debitos tam 15
	
				if (conta.getDebitos() != null) {

					String valorDebitos = Util.formatarMoedaReal(conta
						.getDebitos());
					
					valorDebitos = valorDebitos.replace(".", "");
					valorDebitos = valorDebitos.replace(",", "");
					
					arquivoTxt.append(Util.truncarString(
							valorDebitos,15)
							+ "#");
				} else {
					arquivoTxt.append("#");
				}
	
				// 31. Valor Ligacao Creditos tam 15
				if (conta.getValorCreditos() != null) {

					String valorCreditos = Util.formatarMoedaReal(conta
						.getValorCreditos());
					
					valorCreditos = valorCreditos.replace(".", "");
					valorCreditos = valorCreditos.replace(",", "");
					
					arquivoTxt.append(Util.truncarString(
							valorCreditos,15)
							+ "#");
	
				} else {
					arquivoTxt.append("#");
				}
	
				// 32. Valor Ligacao Fatura tam 15
				if (conta.getValorTotal() != null) {

					String valorTotal = Util.formatarMoedaReal(conta
						.getValorTotal());
					
					valorTotal = valorTotal.replace(".", "");
					valorTotal = valorTotal.replace(",", "");
					
					arquivoTxt.append(Util.truncarString(
							valorTotal,15)
							+ "#");
	
				} else {
					arquivoTxt.append("#");
				}
	
				// 33. Ano Controle tam 4
				arquivoTxt.append(Util.obterAno(conta.getReferencia())
						+ "#");
	
				// 34. Controle
				arquivoTxt.append(Util.truncarString(conta.getId()
						.toString(), 10)
						+ "#");

			}
			
		}

	}
	

	/**
	 * [UC0869] Gerar Arquivo Texto de Contas em Cobrança por Empresa
	 * 
	 * Pesquisa a quantidade de contas para o layout 02
	 * 
	 * @author: Mariana Victor
	 * @date: 26/04/2011
	 */
	private void montarDadosGerarArquivoTextoContasEmCobrancaEmpresaLayoutTipo02(
			Object[] arraydadosImovel, Object[] arrayDadosContas,
			Map<Integer, GerarArquivoTextoContasCobrancaEmpresaHelper> mapHelper,
			GerarArquivoTextoContasCobrancaEmpresaHelper helper,
			Collection ids) {
		
		List colecaoConta = new ArrayList();
		
		if ((Integer) (arraydadosImovel[7]) != null
				&& mapHelper.containsKey((Integer) (arraydadosImovel[7]))) {
			
			GerarArquivoTextoContasCobrancaEmpresaHelper helperImovel = mapHelper.get((Integer) (arraydadosImovel[7]));
			colecaoConta = helperImovel.getColecaoConta();

			// nomeCliente
			if (arraydadosImovel[8] != null) {
				helperImovel.setNomeClienteConta((String) (arraydadosImovel[8]));
			}
			// IndicadorPessoaFisicaJuridica
			if (arraydadosImovel[9] != null) {
				helperImovel.setIndicadorPessoaFisicaJuridica((Short) (arraydadosImovel[9]));
			}
			// Cpf
			if (arraydadosImovel[10] != null) {
				helperImovel.setCpf((String) (arraydadosImovel[10]));
			}
			// Cnpj
			if (arraydadosImovel[11] != null) {
				helperImovel.setCnpj((String) (arraydadosImovel[11]));
			}
			// RG
			if (arraydadosImovel[12] != null) {
				helperImovel.setRg((String) (arraydadosImovel[12]));
			}
			
			Conta conta = new Conta();
			// idConta
			if (arrayDadosContas[1] != null) {
				conta.setId((Integer) (arrayDadosContas[1]));
			}
			
			// AnoMesReferencia conta
			if (arrayDadosContas[2] != null) {
				conta.setReferencia(((Integer) (arrayDadosContas[2])).intValue());
			}
	
			// Data vencimento conta
			if (arrayDadosContas[3] != null) {
				conta.setDataVencimentoConta((Date) (arrayDadosContas[3]));
			}
	
			// Valor Agua
			if (arrayDadosContas[4] != null) {
				conta.setValorAgua((BigDecimal) (arrayDadosContas[4]));
			}
	
			// Valor Esgoto
			if (arrayDadosContas[5] != null) {
				conta.setValorEsgoto((BigDecimal) (arrayDadosContas[5]));
			}
	
			// Valor Debitos
			if (arrayDadosContas[6] != null) {
				conta.setDebitos((BigDecimal) (arrayDadosContas[6]));
			}
	
			// Valor creditos
			if (arrayDadosContas[7] != null) {
				conta.setValorCreditos((BigDecimal) (arrayDadosContas[7]));
			}
			
			colecaoConta.add(conta);
			
			helperImovel.setColecaoConta(colecaoConta);
			
			mapHelper.remove((Integer) (arraydadosImovel[7]));
			
			mapHelper.put((Integer) (arraydadosImovel[7]), helperImovel);
			
		} else {
			// ID EmpresaCobrancaConta
			if (arrayDadosContas[0] != null) {
				helper.setIdCobrancaConta((Integer) (arrayDadosContas[0]));
			}
			// Id unidadeNegocio
			if (arraydadosImovel[0] != null) {
				helper.setIdUnidadeNegocio((Integer) (arraydadosImovel[0]));
			}
	
			// Nome unidadeNegocio
			if (arraydadosImovel[1] != null) {
				helper.setNomeUnidadeNegocio((String) (arraydadosImovel[1]));
			}
	
			// Faturamento Grupo
			if (arraydadosImovel[2] != null) {
				helper.setIdFaturamentoGrupo((Integer) (arraydadosImovel[2]));
			}
	
			// Localidade
			if (arraydadosImovel[3] != null) {
				helper.setIdLocalidade((Integer) (arraydadosImovel[3]));
			}
			if (arraydadosImovel[4] != null) {
				helper.setNomeLocalidade((String) (arraydadosImovel[4]));
			}
			
			// Codigo da Rota
			if (arraydadosImovel[5] != null) {
				helper.setCodigoRota((Short) (arraydadosImovel[5]));
			}
	
			// Sequencial da Rota
			if (arraydadosImovel[6] != null) {
				helper.setNumeroSequencialRota((Integer) (arraydadosImovel[6]));
			}
	
			// IdImovel
			if (arraydadosImovel[7] != null) {
				helper.setIdImovel((Integer) (arraydadosImovel[7]));
			}
	
			// nomeCliente
			if (arraydadosImovel[8] != null) {
				helper.setNomeClienteConta((String) (arraydadosImovel[8]));
			}
	
			// IndicadorPessoaFisicaJuridica
			if (arraydadosImovel[9] != null) {
				helper.setIndicadorPessoaFisicaJuridica((Short) (arraydadosImovel[9]));
			}
			// Cpf
			if (arraydadosImovel[10] != null) {
				helper.setCpf((String) (arraydadosImovel[10]));
			}
	
			// Cnpj
			if (arraydadosImovel[11] != null) {
				helper.setCnpj((String) (arraydadosImovel[11]));
			}
	
			// RG
			if (arraydadosImovel[12] != null) {
				helper.setRg((String) (arraydadosImovel[12]));
			}
			
			Conta conta = new Conta();
			// idConta
			if (arrayDadosContas[1] != null) {
				conta.setId((Integer) (arrayDadosContas[1]));
	
			}
			// telefone
			if (arraydadosImovel[14] != null) {
				helper.setTelefone((String) (arraydadosImovel[14]));
			}
			
			// Nome Abreviado Cliente
			if (arraydadosImovel[15] != null) {
				helper.setNomeAbreviadoCliente((String) (arraydadosImovel[15]));
			}
			
			// AnoMesReferencia conta
			if (arrayDadosContas[2] != null) {
				conta.setReferencia(((Integer) (arrayDadosContas[2])).intValue());
	
			}
	
			// Data vencimento conta
			if (arrayDadosContas[3] != null) {
				conta.setDataVencimentoConta((Date) (arrayDadosContas[3]));
	
			}
	
			// Valor Agua
			if (arrayDadosContas[4] != null) {
				conta.setValorAgua((BigDecimal) (arrayDadosContas[4]));
	
			}
	
			// Valor Esgoto
			if (arrayDadosContas[5] != null) {
				conta.setValorEsgoto((BigDecimal) (arrayDadosContas[5]));
	
			}
	
			// Valor Debitos
			if (arrayDadosContas[6] != null) {
				conta.setDebitos((BigDecimal) (arrayDadosContas[6]));
	
			}
	
			// Valor creditos
			if (arrayDadosContas[7] != null) {
				conta.setValorCreditos((BigDecimal) (arrayDadosContas[7]));
	
			}
			
			// codigoSetor comercial
			if (arrayDadosContas[8] != null) {
				helper.setCodigoSetorComercial(((Integer) (arrayDadosContas[8])).toString());
	
			}
	
			// lote
			if (arrayDadosContas[9] != null) {
				helper.setNumeroLote((Short) (arrayDadosContas[9]));
	
			}
	
			// sublote
			if (arrayDadosContas[10] != null) {
				helper.setNumeroSublote((Short) (arrayDadosContas[10]));
	
			}

			// numeroQuadra
			if (arraydadosImovel[13] != null) {
				helper.setNumeroQuadra((((Integer) (arraydadosImovel[13]))
								.intValue()));
				
			}
	
			// cliente id
			if (arraydadosImovel[16] != null) {
				helper.setIdCliente((Integer) (arraydadosImovel[16]));
	
			}
	
			// id da gerência regional
			if (arraydadosImovel[17] != null) {
				helper.setIdGerenciaRegional((Integer) (arraydadosImovel[17]));
	
			}
	
			// nome da gerência regional
			if (arraydadosImovel[18] != null) {
				helper.setNomeGerenciaRegional((String) (arraydadosImovel[18]));
	
			}
	
			// código do layout txt
			if (arraydadosImovel[19] != null) {
				helper.setCodigoLayoutTxt((Short) (arraydadosImovel[19]));
	
			}
	
			// id da ordem de serviço
			if (arraydadosImovel[20] != null) {
				helper.setIdOrdemServico((Integer) (arraydadosImovel[20]));
	
			}
	
			colecaoConta.add(conta);
			
			helper.setColecaoConta(colecaoConta);
	
			try {
				Collection colecaoDadosTxt = getControladorEndereco()
						.pesquisarDadosClienteEnderecoArquivoTextoContasCobrancaEmpresaLayout02(
								helper.getIdCliente());
	
				if (colecaoDadosTxt != null && !colecaoDadosTxt.isEmpty()) {
	
					Iterator colecaoDadosTxtIterator = colecaoDadosTxt.iterator();
	
					while (colecaoDadosTxtIterator.hasNext()) {
	
						// cria um array de objetos para pegar os parametros
						// de retorno da pesquisa
						Object[] arraydados = (Object[]) colecaoDadosTxtIterator
								.next();
	
						// nomeLogradouro
						if (arraydados[0] != null) {
							helper.setNomeLogradouro((String) (arraydados[0]));
						}
	
						// complemento endereco
						if (arraydados[1] != null) {
							helper.setComplementoEndereco((String) (arraydados[1]));
						}
	
						// codigo cep
						if (arraydados[2] != null) {
							helper.setCodigoCep(((Integer) (arraydados[2]))
									.toString());
						}
	
						// nome Bairro
						if (arraydados[3] != null) {
							helper.setNomeBairro((String) (arraydados[3]));
						}
	
						// numero imovel
						if (arraydados[4] != null) {
							helper.setNumeroImovel((String) (arraydados[4]));
						}
						
						//tipo logradouro
						if ( arraydados[5] != null ) {
							Integer id = (Integer) arraydados[5];
							FiltroLogradouroTipo filtroLogradouroTipo = new FiltroLogradouroTipo();
							filtroLogradouroTipo.adicionarParametro(new ParametroSimples(FiltroLogradouroTipo.ID, id));
							Collection colecaoLogradouroTipo = this.getControladorUtil().pesquisar(filtroLogradouroTipo,
									LogradouroTipo.class.getName());
							LogradouroTipo logradouroTipo = (LogradouroTipo) Util.retonarObjetoDeColecao(colecaoLogradouroTipo);
							helper.setTipoLogradouro( logradouroTipo.getDescricao() );
						}
						
						//nome município
						if (arraydados[6] != null) {
							helper.setNomeMunicipio((String) (arraydados[6]));
						}
	
					}
	
				}
				if(colecaoDadosTxt !=null ){
					colecaoDadosTxt.clear();
				}
	
				Integer quantidadeContas = repositorioCobranca.
					pesquisarQuantidadeContasArquivoTextoContasCobrancaEmpresa(ids, helper.getIdImovel());
				
				if (quantidadeContas != null) {
					helper.setQuantidadeContas(quantidadeContas);
				}
				
				mapHelper.put(helper.getIdImovel(), helper);
			
			} catch (ControladorException e) {
				e.printStackTrace();
			} catch (ErroRepositorioException e) {
				e.printStackTrace();
			}
		}
	}
	
	/**
	 * [UC0869] Gerar Arquivo Texto das Contas em Cobranca por Empresa
	 * 
	 * Pesquisa a Situação de cobrança a partir do código constante.
	 * 
	 * @author: Mariana Victor
	 * @date: 18/04/2011
	 */
	public Integer pesquisarCobrancaSituacao(Integer codigoConstante) throws ControladorException {
		try {
			return repositorioCobranca.pesquisarCobrancaSituacao(codigoConstante);
		} catch (ErroRepositorioException ex) {
			sessionContext.setRollbackOnly();
			throw new ControladorException("erro.sistema", ex);
		}
	}


	/**
	 * [UC1136] Inserir Contrato Parcelamento Por Cliente
	 * 
	 * Pesquisa a Referencia da conta por ID
	 * 
	 * @author: Paulo Diniz
	 * @date: 14/05/2011
	 */
	public Integer pesquisarReferenciaContaPorId(Integer idConta)throws ControladorException {
		try {
			return repositorioCobranca.pesquisarReferenciaContaPorId(idConta);
		} catch (ErroRepositorioException ex) {
			sessionContext.setRollbackOnly();
			throw new ControladorException("erro.sistema", ex);
		}
	}

	
	/**
	 * [UC1140] Cancelar Contrato de Parcelamento por Cliente
	 * @author Rômulo Aurélio
	 * @throws ControladorException 
	 * @date 12/05/2011
	 */
	public ContratoParcelamento pesquisarContratoParcelamento(
			String numeroParcelamento) throws ControladorException{
		
		ContratoParcelamento contratoParcelamento = null;
		
		
		try {
			contratoParcelamento = repositorioCobranca.pesquisarContratoParcelamento(numeroParcelamento);
		} catch (ErroRepositorioException ex) {
			sessionContext.setRollbackOnly();
			throw new ControladorException("erro.sistema", ex);
		}
		return contratoParcelamento;
	}


	/**
	 * [UC1167] Consultar Comandos de Cobrança por Empresa
	 * 
	 * Pesquisa os dados dos comandos
	 * 
	 * @author: Mariana Victor
	 * @date: 04/05/2011
	 */
	public Collection<ConsultarComandosContasCobrancaEmpresaHelper> pesquisarConsultarComandosContasCobrancaEmpresa(
			Integer idEmpresa, Date cicloInicial, Date cicloFinal,int pagina) throws ControladorException {

		Collection<ConsultarComandosContasCobrancaEmpresaHelper> colecaoConsultarComandosContasCobrancaEmpresaHelper = null;
		
		try {
			
			// Variáveis para a paginação da pesquisa
			// ========================================================================
			final int quantidadeRegistros = 10;
			// ========================================================================
				
			colecaoConsultarComandosContasCobrancaEmpresaHelper = (Collection) repositorioCobranca
					.pesquisarDadosConsultarComandosContasCobrancaEmpresaResumido(
							idEmpresa, cicloInicial, cicloFinal,
							pagina, quantidadeRegistros);


		} catch (ErroRepositorioException e) {
			throw new ControladorException("erro.sistema", e);
		}
		
		return colecaoConsultarComandosContasCobrancaEmpresaHelper;
	}


	/**
	 * [UC1167] Consultar Comandos de Cobrança por Empresa
	 * 
	 * Pesquisa os dados de um comando para exibir no popup
	 * 
	 * @author: Mariana Victor
	 * @date: 04/05/2011 
	 */
	public Object[] pesquisarDadosPopupExtensaoComandoCobranca
	(Integer idComando,Date dateInicial, Date dateFinal) throws ControladorException{
		Object[] retorno = new Object[40];
		try{
			
			//Dados do comando empresa cobranca conta obs: retorno[0 a 37]
			Collection dadosPopup = repositorioCobranca.pesquisarDadosPopupExtensaoComandoCobranca(idComando);
			
			Iterator iteraDadosPopup = dadosPopup.iterator();

			Object[] array = (Object[]) iteraDadosPopup.next();
			
			for (int i = 0; i < array.length; i++) {
				retorno[i] = array[i];
			}
			
			if (retorno[32] != null && !retorno[32].toString().equals("")) {
			
				//Dados das Cobranças do Comando
				Collection dadosCobranca = repositorioCobranca
					.pesquisarValorTotalCobrancaComandoEmpresa(idComando);
					
				//Quantidade Total de Contas Selecionadas para Cobrança
				retorno[38] = dadosCobranca.size();
				Iterator iteraDadosCobranca = dadosCobranca.iterator();
				BigDecimal somaCobranca = new BigDecimal("0.0");			
				while(iteraDadosCobranca.hasNext()){
					 BigDecimal valor = (BigDecimal) iteraDadosCobranca.next();
					 somaCobranca = somaCobranca.add(valor);
				}
				//Valor Total das Contas
				retorno[39] = somaCobranca;
					
			}
			
		} catch (ErroRepositorioException e) {
			e.printStackTrace();
			throw new ControladorException("erro.sistema", e);
		}
		
		return retorno;
		
	}
	
	
	/**
	 * [UC1140] Cancelar Contrato de Parcelamento por Cliente
	 * [FS0008] - Verificar possibilidade de cancelamento do contrato de parcelamento por cliente
	 * @author Rômulo Aurélio
	 * @throws ControladorException 
	 * @date 12/05/2011
	 */
	public void verificarPossibilidadeCancelamentoContratoParcelamento(ContratoParcelamento contratoParcelamento) 
	throws ControladorException{
		
		if(contratoParcelamento.getParcelamentoSituacao() != null 
				&& contratoParcelamento.getParcelamentoSituacao().getId().intValue() != ParcelamentoSituacao.NORMAL.intValue()){
			
			throw new ControladorException("atencao.contrato_nao_pode_ser_cancelado", null, 
					contratoParcelamento.getNumero(), contratoParcelamento.getParcelamentoSituacao().getDescricao());
		}
		
	}
	
	
	/**
	 * [UC1167] Consultar Comandos de Cobrança por Empresa
	 * 
	 * Pesquisa a quantidade de contas, agrupando por imóvel
	 * 
	 * @author: Mariana Victor
	 * @date: 06/05/2011
	 * @throws ErroRepositorioException 
	 * 
	 */
	public Collection pesquisarValorTotalCobrancaComandoEmpresaPorImovel
		(Integer idComando, Integer idEmpresaCobrancaFaixa) throws ControladorException {
		try {
			return repositorioCobranca.pesquisarValorTotalCobrancaComandoEmpresaPorImovel(idComando, idEmpresaCobrancaFaixa);
		} catch (ErroRepositorioException ex) {
			sessionContext.setRollbackOnly();
			throw new ControladorException("erro.sistema", ex);
		}
	}
	
	/**
	 * [UC1168] Encerrar Comandos de Cobrança por Empresa
	 *
	 * @author Mariana Victor
	 * @created 09/05/2011
	 */
	public void encerrarComandosCobrancaPorEmpresa(Integer idFuncionalidadeIniciada, String idEmpresa,
			Usuario usuarioLogado, Integer idComando, Integer idCobrancaSituacao) throws ControladorException {

		int idUnidadeIniciada = 0;

		try {
			/*
			 * Registrar o início do processamento da Unidade de Processamento
			 * do Batch
			 */
			idUnidadeIniciada = getControladorBatch()
					.iniciarUnidadeProcessamentoBatch(idFuncionalidadeIniciada,
							UnidadeProcessamento.COMANDO_EMPRESA_COBRANCA_CONTA, idComando);

			this.encerrarComandoCobrancaPorEmpresa(
				idFuncionalidadeIniciada, usuarioLogado, idComando, idCobrancaSituacao);
			
			getControladorBatch().encerrarUnidadeProcessamentoBatch(null,
					idUnidadeIniciada, false);
			System.out.println("******* FIM **********");
		} catch (Exception ex) {
			ex.printStackTrace();
			getControladorBatch().encerrarUnidadeProcessamentoBatch(ex,
					idUnidadeIniciada, true);
			throw new EJBException(ex);
		}
	}

	/**
	 * [UC1168] Encerrar Comandos de Cobrança por Empresa
	 *
	 * @author Mariana Victor
	 * @created 09/05/2011
	 */
	private void encerrarComandoCobrancaPorEmpresa(Integer idFuncionalidadeIniciada, 
		Usuario usuarioLogado, Integer idComando, Integer idCobrancaSituacao) throws ControladorException {

		try {

			boolean flagFimPesquisa = false;
			final int quantidadeImoveis = 1000;
			int quantidadeInicio = 0;

			System.out.println("***************************************");
			System.out.println("ENCERRAR COMANDOS");
			System.out.println("***************************************");

			while (!flagFimPesquisa) {
				Collection dadosEmpresaCobConta = this.repositorioCobranca.pesquisarImovelOrdemServicoParaEncerrarComando(
						quantidadeInicio, idComando);

				if (dadosEmpresaCobConta != null && !dadosEmpresaCobConta.isEmpty()) {

					Iterator iterDadosEmpresaCobConta = dadosEmpresaCobConta.iterator();

					if (dadosEmpresaCobConta.size() < quantidadeImoveis) {
						flagFimPesquisa = true;
					} else {
						quantidadeInicio = quantidadeInicio + 1000;
					}

					System.out
							.println("***************************************");
					System.out.println("QUANTIDADE: " + dadosEmpresaCobConta.size());
					System.out
							.println("***************************************");

					while (iterDadosEmpresaCobConta.hasNext()) {
						Object[] dados = (Object[]) iterDadosEmpresaCobConta.next();

						if (dados != null) {
						
							if (dados[0] != null) {
								Integer idImovel = (Integer) dados[0];
								
								this.getControladorImovel()
									.retirarSituacaoCobrancaImovel(idImovel, idCobrancaSituacao);
								
							}
							
							if (dados[1] != null) {
								Integer idOrdemServico = (Integer) dados[1];

								Short idMotivoEncerramento = AtendimentoMotivoEncerramento.CANCELADO_POR_DERCURSO_DE_PRAZO;
								
								Date dataAtual = new Date();
								
								 // encerrar a ordem de serviço, com o motivo correspodente a decurso de prazo
								// [UC0457] - Encerrar Ordem de Serviço
								this.getControladorOrdemServico()
									.encerrarOSSemExecucao(
											idOrdemServico,
											dataAtual,
											usuarioLogado,
											idMotivoEncerramento.toString(),
											dataAtual, null, null, null, null,null,null, null);
							}
						}

					}

				} else {
					flagFimPesquisa = true;
				}

			}
			
			this.repositorioCobranca.atualizarDataEncerramentoUsuarioComando(idComando, usuarioLogado);
			
			System.out.println("******* FIM **********");
		} catch (Exception ex) {
			ex.printStackTrace();
			throw new EJBException(ex);
		}

	}

	/**
	 * [UC1169] Movimentar Ordens de Serviço de Cobrança por Resultado
	 * 
	 * Encerrar ordem(ns) de serviço.
	 * 
	 * @author: Mariana Victor
	 * @date: 17/05/2011
	 */
	public void movimentarOrdemServicoEncerrarOS(MovimentarOrdemServicoEncerrarOSHelper helper, Usuario usuarioLogado) throws ControladorException {
			
		if (helper.getColecaoOrdemServico() != null && !helper.getColecaoOrdemServico().isEmpty()) {
			Iterator iterator = helper.getColecaoOrdemServico().iterator();
			
			while(iterator.hasNext()) {
				OrdemServico ordemServico = (OrdemServico) iterator.next();
				
				Date dataEncerramento = helper.getDataEncerramento();
				
				String observacao = "Encerrada por Empresa de Cobrança";
				
				if (helper.getObservacaoEncerramento() != null && !helper.getObservacaoEncerramento().trim().equals("")) {
					observacao = helper.getObservacaoEncerramento();
				}
				
				// [UC0457] - Encerrar Ordem de Serviço
				this.getControladorOrdemServico()
					.encerrarOSSemExecucao(
							ordemServico.getId(),
							dataEncerramento,
							usuarioLogado,
							helper.getIdMotivoEncerramento(),
							new Date(), observacao,
							null, null, null,null,null, null);
			}
		}
			
	}
	
	/**
	 * 
	 * [UC1169] Movimentar Ordens de Serviço de Cobrança por Resultado
	 * 
	 * Gerar OS
	 * 
	 * @author Mariana Victor
	 * @data 17/05/2011
	 */
	public Collection<Integer> pesquisarIdsImoveis(MovimentarOrdemServicoGerarOSHelper helper) throws ControladorException {
		try {
			return repositorioCobranca.pesquisarIdsImoveis(helper);
		} catch (ErroRepositorioException ex) {
			sessionContext.setRollbackOnly();
			throw new ControladorException("erro.sistema", ex);
		}
	}

	/**
	 * [UC1169] Movimentar Ordens de Serviço de Cobrança por Resultado
	 * 
	 * Emitir OS Gerada pela Empresa
	 * 
	 * @author Mariana Victor
	 * @data 18/05/2011
	 */
	public Collection<Object[]> pesquisarDadosOSGeradasPelaEmpresa(Integer idComando, Integer idTipoServico) throws ControladorException {
		try {
			return repositorioCobranca.pesquisarDadosOSGeradasPelaEmpresa(idComando, idTipoServico);
		} catch (ErroRepositorioException ex) {
			sessionContext.setRollbackOnly();
			throw new ControladorException("erro.sistema", ex);
		}
	}

	/**
	 * [UC1169] Movimentar Ordens de Serviço de Cobrança por Resultado
	 * 
	 * Emitir OS de Registro de Atendimento
	 * 
	 * @author Mariana Victor
	 * @data 18/05/2011
	 */
	public Collection<Object[]> pesquisarDadosOSRegistroAtendimento(Integer idComando, Integer idTipoServico) throws ControladorException {
		try {
			
			return repositorioCobranca.pesquisarDadosOSRegistroAtendimento(idComando, idTipoServico);
		} catch (ErroRepositorioException ex) {
			sessionContext.setRollbackOnly();
			throw new ControladorException("erro.sistema", ex);
		}
	}
	
	/**
	 * obtem contas em débito do imóvel, comparando a data de vencimento original
	 * usado no emitir contas da CAEMA
	 * 
	 * Author: Vivianne Sousa
	 * Data: 15/06/2011
	 * 
	 * @throws ErroRepositorioException
	 */
	public Collection pesquisarContasImovelDataVencimentoOriginal(
			Integer idImovel,
			int indicadorPagamento, 
			int indicadorConta,
			String anoMesInicialReferenciaDebito,
			String anoMesFinalReferenciaDebito,
			Date anoMesInicialVencimentoDebito, 
			Date anoMesFinalVencimentoDebito, 
			int indicadorDividaAtiva)
	throws ControladorException {
		
		try {
			return repositorioCobranca.pesquisarContasImovelDataVencimentoOriginal(
					idImovel,
					indicadorPagamento, 
					indicadorConta, 
					DebitoCreditoSituacao.NORMAL.toString(),
					DebitoCreditoSituacao.RETIFICADA.toString(),
					DebitoCreditoSituacao.INCLUIDA.toString(),
					anoMesInicialReferenciaDebito,
					anoMesFinalReferenciaDebito,
					anoMesInicialVencimentoDebito,
					anoMesFinalVencimentoDebito, 
					indicadorDividaAtiva);
			
		} catch (ErroRepositorioException ex) {
//			sessionContext.setRollbackOnly();
			throw new ControladorException("erro.sistema", ex);
		}
	}
	
	/**
	 * [UC1146] Informar Pagamento Contrato de Parcelamento por Cliente
	 * 
	 * Atualizar a situacao do item do documento de cobranca a partir de um pagamento realizado, informando a data de pagamento
	 * @param pagamento
	 * 
	 * @author Mariana Victor
	 * @date 08/06/2011
	 */
	public void atualizarSituacaoCobrancaDocumentoItemAPartirPagamento(Pagamento pagamento, 
			Integer idCobrancaDebitoSituacao, Date dataPagamneto) throws ControladorException {

		Integer idConta = pagamento.getContaGeral() != null ? pagamento.getContaGeral().getId() : null;
		Integer idDebitoACobrar = pagamento.getDebitoACobrarGeral() != null ? 
				pagamento.getDebitoACobrarGeral().getId() : null;
		Integer idGuiaPagamento = pagamento.getGuiaPagamento() != null ? 
				pagamento.getGuiaPagamento().getId() : null;
		
		try {
			// Atualizar item documento de cobranca da conta, se houver, para cancelado
			repositorioCobranca.atualizarSituacaoCobrancaDocumentoItem(idCobrancaDebitoSituacao,
					dataPagamneto, idConta, idGuiaPagamento, idDebitoACobrar);
		} catch (ErroRepositorioException ex) {
			sessionContext.setRollbackOnly();
			new ControladorException("erro.sistema", ex);
		}	
	}
	
	/**
	 * [UC1183] Gerar Arquivo Txt OS Contas Pagas Parceladas
	 * 
	 * @author Paulo Diniz
	 * @throws ControladorException 
	 * @data 30/06/2011
	 */
	public List<Object[]> pesquisarOrdensServicoContasPagasParceladas() throws ControladorException{
		try {
			return repositorioCobranca.pesquisarOrdensServicoContasPagasParceladas();
		} catch (ErroRepositorioException ex) {
			sessionContext.setRollbackOnly();
			throw new ControladorException("erro.sistema", ex);
		}	
	}
	
	/**
	 * [UC1186] Gerar Relatório Ordem de Serviço Cobrança p/Resultado
	 * 
	 * Pesquisar EmpresaCobrancaConta a partir do imóvel
	 * 
	 * @author Hugo Azevedo
	 * @data 02/07/2011
	 */
	
	public Collection obterColecaoEmpresaCobrancaContaResultadoporImovel(Integer id, Integer tipoServico, String comando) throws ControladorException{
		Collection retorno = new ArrayList();
		try{
			retorno = repositorioCobranca.obterColecaoEmpresaCobrancaContaResultadoporImovel(id, tipoServico,comando);
		} catch (ErroRepositorioException ex) {
			sessionContext.setRollbackOnly();
			new ControladorException("erro.sistema", ex);
		}
		return retorno;	
	}

	/**
	 * Metodo que cria o relatorio dos documentos do parcelamento de débitos
	 * 
	 * @author Diogo Peixoto
	 * @date 08/07/2011
	 * 
	 * @param usuario
	 * @param idParcelamento
	 * @param unidadeUsuario
	 * @param colecaoFaturasEmAberto
	 * @param colecaoGuiasPagamento
	 * @param colecaoServicosACobrar
	 * @param colecaoCreditoARealizar
	 * 
	 * @return Object
	 */
	public Object gerarRelatorioDocumentosParcelamentoCobrancaPortal(
			Usuario usuario, String idParcelamento, UnidadeOrganizacional unidadeUsuario,
			Collection colecaoFaturasEmAberto, Collection colecaoGuiasPagamento,
			Collection colecaoServicosACobrar, Collection colecaoCreditoARealizar ){
		
		RelatorioDocumentosParcelamentoPortal relatorio = new RelatorioDocumentosParcelamentoPortal( usuario );
		
		relatorio.addParametro("idParcelamento", idParcelamento);
		relatorio.addParametro("unidadeUsuario", unidadeUsuario);
		relatorio.addParametro("sistemaParametro", Fachada.getInstancia().pesquisarParametrosDoSistema() );
		relatorio.addParametro("colecaoFaturasEmAberto", colecaoFaturasEmAberto );
		relatorio.addParametro("colecaoGuiasPagamento", colecaoGuiasPagamento );
		relatorio.addParametro("colecaoServicosACobrar",	colecaoServicosACobrar );
		relatorio.addParametro("colecaoCreditoARealizar", colecaoCreditoARealizar );
		relatorio.addParametro("usuario",usuario);
		
		return relatorio;		
	}
	
	
	/**
	 * [UC1167] Consultar Comandos de Cobrança por Empresa
	 * Pesquisa dados do popup
	 * 
	 * @author Hugo Azevedo
	 * @date 25/08/2011
	 */
	
	public Collection pesquisarDadosPopupExtensaoComandoAguaSituacao(Integer idComando) throws ControladorException{
		Collection retorno = new ArrayList();
		try{
			retorno = repositorioCobranca.pesquisarDadosPopupExtensaoComandoAguaSituacao(idComando);
		} catch (ErroRepositorioException ex) {
			sessionContext.setRollbackOnly();
			new ControladorException("erro.sistema", ex);
		}
		return retorno;	
	}
	
	
	/**
	 * [UC 0869] Gerar Arqv Texto das Contas em Cobrança por Empresa
	 * 
	 * @author Paulo Diniz
	 * @data 03/08/2011
	 * 
	 */
	public Object[] pesquisarDadosQtdContasEDiasVencidos(Integer idComando) throws ControladorException{
		Object[] retorno = null;
		try{
			retorno =  repositorioCobranca.pesquisarDadosQtdContasEDiasVencidos(idComando);
		} catch (ErroRepositorioException ex) {
			sessionContext.setRollbackOnly();
			new ControladorException("erro.sistema", ex);
		}
		return retorno;
	}
	
	/**
	 * [UC 0869] Gerar Arqv Texto das Contas em Cobrança por Empresa
	 * 
	 * @author Paulo Diniz
	 * @data 03/08/2011
	 * 
	 */
	public Collection<CmdEmpresaCobrancaContaLigacaoAguaSituacao> pesquisarColecaoLigacaoAguaSituacaoPorComandoEmpresaCobrancaConta(Integer idComando)
	throws ControladorException{
		Collection<CmdEmpresaCobrancaContaLigacaoAguaSituacao> retorno = null;
		try{
			retorno =  repositorioCobranca.pesquisarColecaoLigacaoAguaSituacaoPorComandoEmpresaCobrancaConta(idComando);
		} catch (ErroRepositorioException ex) {
			sessionContext.setRollbackOnly();
			new ControladorException("erro.sistema", ex);
		}
		return retorno;
	}
	
	/**
	 * [UC0067] Obter Débito do Imóvel ou Cliente
	 * 
	 * @author Raphael Rossiter
	 * @date 19/09/2011
	 * 
	 * @param idImovel
	 * @return Short
	 * @throws ErroRepositorioException
	 */
	public Short obterIndicadorAcrescimosClienteResponsavel(Integer idImovel) throws ControladorException {
		
		Short indicadorAcrescimosClienteResponsavel = null;
		
		try{
			
			indicadorAcrescimosClienteResponsavel = repositorioCobranca.obterIndicadorAcrescimosClienteResponsavel(idImovel);
		}
		catch (ErroRepositorioException ex) {
			new ControladorException("erro.sistema", ex);
		}
		
		return indicadorAcrescimosClienteResponsavel;
	}
	
	/**
	 * [UC0067] Obter Débito do Imóvel ou Cliente
	 * 
	 * @author Raphael Rossiter
	 * @date 19/09/2011
	 * 
	 * @param idImovel
	 * @return Short
	 * @throws ErroRepositorioException
	 */
	public Short obterIndicadorAcrescimosCliente(Integer idCliente) throws ControladorException {
		
		Short indicadorAcrescimosCliente = null;
		
		try{
			
			indicadorAcrescimosCliente = repositorioCobranca.obterIndicadorAcrescimosCliente(idCliente);
		}
		catch (ErroRepositorioException ex) {
			new ControladorException("erro.sistema", ex);
		}
		
		return indicadorAcrescimosCliente;
	}
	
	
	/**
	 * 
	 * [UC1233] - Encerrar Ordem de Servico de Visita de Cobrança
	 * 
	 * @author Hugo Azevedo
	 * @date 23/09/2011
	 */
	public Collection<OrdemServico> obterColecaoOrdemServicoVisitaCobranca(String idGrupo,
			String mesAno) throws ControladorException{
		
		Collection<Integer> retornoSQL = new ArrayList<Integer>();
		Collection<OrdemServico> retorno = new ArrayList<OrdemServico>();
		try{
			retornoSQL =  repositorioCobranca.obterColecaoOrdemServicoVisitaCobranca(idGrupo,mesAno);
		} catch (ErroRepositorioException ex) {
			sessionContext.setRollbackOnly();
			new ControladorException("erro.sistema", ex);
		}
		
		Iterator it = retornoSQL.iterator();
		while(it.hasNext()){
			Integer i = (Integer)it.next();
			OrdemServico os = new OrdemServico();
			os.setId(i);
			
			retorno.add(os);
		}
		
		return retorno;
		
	}
	
	/**
	 * 
	 * [UC1233] - Encerrar Ordem de Servico de Visita de Cobrança
	 * 
	 * @author Hugo Azevedo
	 * @date 23/09/2011
	 */
	
	public void encerrarOSVisitaCobranca(Integer idFuncionalidadeIniciada, Collection<?> colecaoOS, Usuario usuarioLogado) throws ControladorException{
		int idUnidadeIniciada = 0;	
		
		// -------------------------
		//
		// Registrar o início do processamento da Unidade de
		// Processamento
		// do Batch
		//
		// -------------------------

		idUnidadeIniciada = getControladorBatch()
				.iniciarUnidadeProcessamentoBatch(
						idFuncionalidadeIniciada,
						UnidadeProcessamento.FUNCIONALIDADE,
						0);

		String parecerEncerramento = "Encerrada através da funcionalidade \"Encerramento Visita de Cobrança\"";
		
		try {		
						
			Integer idMotivoEncerramento = AtendimentoMotivoEncerramento.CONCLUSAO_SERVICO;
		
			Date dataAtual = new Date();
			
			Iterator it = colecaoOS.iterator();
			
			//Unidade Organizacional do usuário logado
			FiltroUsuario filtroUsuario = new FiltroUsuario();
			filtroUsuario.adicionarParametro(
					new ParametroSimples(FiltroUsuario.ID, usuarioLogado.getId()));
			filtroUsuario.adicionarCaminhoParaCarregamentoEntidade(
					FiltroUsuario.UNIDADE_ORGANIZACIONAL);	
			Collection colecaoUsuario = Fachada.getInstancia().pesquisar(filtroUsuario, Usuario.class.getName());
			usuarioLogado = (Usuario) Util.retonarObjetoDeColecao(colecaoUsuario);
			
			
			while(it.hasNext()){
				OrdemServico os = (OrdemServico)it.next();
				
						this.getControladorOrdemServico()
							.encerrarOSSemExecucao(
									os.getId(),
									dataAtual,
									usuarioLogado,
									idMotivoEncerramento.toString(),
									dataAtual, parecerEncerramento, null, null, null,null,null, null);
					
					}
			
			getControladorBatch().encerrarUnidadeProcessamentoBatch(null,
					idUnidadeIniciada, false);
			
			System.out.println("########## FINALIZADO EM  = " + new Date());
								 
		}
		catch (Exception e) {
			// Este catch serve para interceptar qualquer exceção que o processo
			// batch venha a lançar e garantir que a unidade de processamento do
			// batch será atualizada com o erro ocorrido
			e.printStackTrace();

			getControladorBatch().encerrarUnidadeProcessamentoBatch(e,
					idUnidadeIniciada, true);
			System.out.println("########## FINALIZADO EM  = " + new Date());

			throw new EJBException(e);
		}		
	}
	/**
	 * [UC0251] Gerar Atividade de Ação de Cobrança
	 * 
	 * @author Vivianne Sousa
	 * @date 10/10/2011
	 */
	private BigDecimal[] obterValorDebitoTotalEDebitoComDesconto(Imovel imovel, 
			CobrancaAcaoAtividadeComando cobrancaAcaoAtividadeComando,
			IndicadoresParcelamentoHelper indicadoresParcelamentoHelper, 
			ObterDebitoImovelOuClienteHelper debitoImovel,
			ResolucaoDiretoria resolucaoDiretoria,
			Integer indicadorRestabelecimento) throws ControladorException {
		
		BigDecimal valorDebitoTotalAtualizado = BigDecimal.ZERO;
		BigDecimal valorTotalRestanteParcelamentosACobrar = BigDecimal.ZERO;
		BigDecimal valorCreditoARealizar = BigDecimal.ZERO;
		BigDecimal valorTotalMultasDasContas = BigDecimal.ZERO; 
		BigDecimal valorTotalJurosMoraDasContas = BigDecimal.ZERO;
		BigDecimal valorTotalAtualizacoesMonetariasDasContas = BigDecimal.ZERO;
		BigDecimal descontoTotalPagamentoAVista = new BigDecimal("0.00");   
		BigDecimal valorPagamentoAVista = new BigDecimal("0.00");   
		BigDecimal valorTotalImpostosConta = new BigDecimal("0.00");
		
		Object[] valorDebitoTotalEAcrescimoImpontualidadeTotal = calcularValorTotalDebitoAtualizadoParaParcelamento(
				debitoImovel, indicadoresParcelamentoHelper, false);
		
		if(valorDebitoTotalEAcrescimoImpontualidadeTotal != null){
			
			valorDebitoTotalAtualizado = (BigDecimal)valorDebitoTotalEAcrescimoImpontualidadeTotal[0];
			valorTotalRestanteParcelamentosACobrar = (BigDecimal)valorDebitoTotalEAcrescimoImpontualidadeTotal[5];
			valorCreditoARealizar = (BigDecimal)valorDebitoTotalEAcrescimoImpontualidadeTotal[6];
			valorTotalMultasDasContas = (BigDecimal)valorDebitoTotalEAcrescimoImpontualidadeTotal[7]; 
			valorTotalJurosMoraDasContas = (BigDecimal)valorDebitoTotalEAcrescimoImpontualidadeTotal[8];
			valorTotalAtualizacoesMonetariasDasContas = (BigDecimal)valorDebitoTotalEAcrescimoImpontualidadeTotal[9];
		}
				
		Integer numeroReparcelamentoConsecutivos = 0;
		if(imovel.getNumeroReparcelamentoConsecutivos() != null){
			numeroReparcelamentoConsecutivos = new Integer(imovel.getNumeroReparcelamentoConsecutivos().toString());
		}
		
		// Caso a referência dos debitos esteja nula, preencher com Jan/1900 		
		if (cobrancaAcaoAtividadeComando.getAnoMesReferenciaContaInicial() == null){
			cobrancaAcaoAtividadeComando.setAnoMesReferenciaContaInicial(190001);
		}
		
		// Caso a referência dos debitos esteja nula, preencher com Dez/9999 
		if (cobrancaAcaoAtividadeComando.getAnoMesReferenciaContaFinal() == null){
			cobrancaAcaoAtividadeComando.setAnoMesReferenciaContaFinal(999912);
		}
		
		//CARREGANDO O HELPER COM AS INFORMAÇÕES DO PARCELAMENTO
		ObterOpcoesDeParcelamentoHelper helper = new ObterOpcoesDeParcelamentoHelper(
				resolucaoDiretoria.getId(),
				imovel.getId(), 
				null, 
				imovel.getLigacaoAguaSituacao().getId(), 
				imovel.getLigacaoEsgotoSituacao().getId(), 
				imovel.getImovelPerfil().getId(), 
				"010001", // Referência inicial do débito
				indicadorRestabelecimento, //indicadorRestabelecimento
				debitoImovel.getColecaoContasValores(), 
				valorDebitoTotalAtualizado, 
				valorTotalMultasDasContas, 
				valorTotalJurosMoraDasContas, 
				valorTotalAtualizacoesMonetariasDasContas,
				numeroReparcelamentoConsecutivos, 
				debitoImovel.getColecaoGuiasPagamentoValores(), 
				Usuario.USUARIO_BATCH,
				valorTotalRestanteParcelamentosACobrar, 
				cobrancaAcaoAtividadeComando.getAnoMesReferenciaContaInicial(), // Referência inicial do débito
				cobrancaAcaoAtividadeComando.getAnoMesReferenciaContaFinal(), // Referência final do débito 
				indicadoresParcelamentoHelper,
				valorCreditoARealizar);
			
		NegociacaoOpcoesParcelamentoHelper opcoesParcelamento = this.obterOpcoesDeParcelamento(helper);
		
		//Definição do valor do documento e do valor do desconto
		if (opcoesParcelamento.getValorTotalDescontoPagamentoAVista() != null){
			descontoTotalPagamentoAVista  = opcoesParcelamento.getValorTotalDescontoPagamentoAVista();
		}

		valorTotalImpostosConta = debitoImovel.obterValorImpostosDasContas(debitoImovel.getColecaoContasValores());
		
		valorPagamentoAVista = valorDebitoTotalAtualizado.subtract(descontoTotalPagamentoAVista);
		valorPagamentoAVista = valorPagamentoAVista.subtract(valorTotalImpostosConta);
		
		
		BigDecimal[]retorno = new BigDecimal[2];
		retorno[0] = valorDebitoTotalAtualizado;
		retorno[1] = valorPagamentoAVista;
		
		return retorno;
	}
	
	/**
	 * [UC0243] Inserir Comando de Ação de Cobrança
	 * 
	 * @author Raphael Rossiter
	 * @date 21/10/2011
	 * 
	 * @return Integer
	 * @throws ErroRepositorioException
	 */
	public Integer pesquisarQuantidadeRotasPorGrupoCobranca(
			PesquisarQtdeRotasSemCriteriosParaAcoesCobranca filtro) throws ControladorException {
		
		try {
			return repositorioCobranca.pesquisarQuantidadeRotasPorGrupoCobranca(filtro.getIdGrupoCobranca());
		} catch (ErroRepositorioException ex) {
			sessionContext.setRollbackOnly();
			throw new ControladorException("erro.sistema", ex);
		}
	}
	
	/**
	 * [UC0214] Inserir Ação de Cobrança
	 * 
	 * @author Raphael Rossiter
	 * @created 07/11/2011
	 * 
	 * @return Integer
	 * @throws ErroRepositorioException
	 */
	public void atualizarCobrancaAcaoTextoPersonalizado(Integer idCobrancaAcao, String textoPersonalizado) throws ControladorException {
		
		try {
			repositorioCobranca.atualizarCobrancaAcaoTextoPersonalizado(idCobrancaAcao, textoPersonalizado);
		} catch (ErroRepositorioException ex) {
			sessionContext.setRollbackOnly();
			throw new ControladorException("erro.sistema", ex);
		}
	}
	
	/**
	 * [UC0214] Consultar Comando de Ação de Cobrança
	 * 
	 * @author Erivan Sousa
	 * @date 04/11/2011
	 * 
	 * @return String
	 * @throws ControladorException
	 */
	public String buscarTextoPersonalizadoAcaoCobranca(Integer idAcaoCobranca) throws ControladorException{
		try {
			return repositorioCobranca.buscarTextoPersonalizadoAcaoCobranca(idAcaoCobranca);
		} catch (ErroRepositorioException ex) {
			sessionContext.setRollbackOnly();
			throw new ControladorException("erro.sistema", ex);
		}
	}


	/**
	 * [UC0251] Gerar Atividade de Ação de Cobrança  
	 * [SB0007] - Verificar CPF/CNPJ válido
	 * 
	 * @author Mariana Victor
	 * @created 26/10/2011
	 * 
	 * @param idImovel
	 * 
	 * @throws ControladorException
	 *             Controlador Exception
	 */
	public boolean verificarCpfCnpjValido(
			Integer idImovel)
			throws ControladorException {
		
		try{
			// 1. O sistema seleciona o cliente usuário do imóvel
			Cliente clienteUsuario = this.getControladorCliente().pesquisarClienteUsuarioDoImovel(idImovel);
			
			// 1.1.	Caso o CPF seja diferente de nulo 
			if (clienteUsuario.getCpf() != null) {
				
				// 1.1.1. Verifica se já negativado e não rejeitado
				if (this.repositorioCliente.verificaClienteNegativadoNaoRejeitado(clienteUsuario.getCpf(), null)) {
					// 1.1.1.1.	Caso tenha registro na tabela, retornar documento válido;
					return true;
				} 
				
				// 1.1.1.2.	Caso contrário, documento não válido;
				
			} else if (clienteUsuario.getCnpj() != null) {
				// 1.2.	Caso contrário, o CNPJ seja diferente de nulo 
				
				// 1.2.1. Verifica se já negativado e não rejeitado
				if (this.repositorioCliente.verificaClienteNegativadoNaoRejeitado(null, clienteUsuario.getCnpj())) {
					// 1.2.1.1.	Caso tenha registro na tabela, retornar documento válido;
					return true;
				} 
				
				// 1.2.1.2.	Caso contrário, documento não válido;
			}

		} catch (ErroRepositorioException ex) {
			
			// levanta a exceção para a próxima camada
			throw new ControladorException("erro.sistema", ex);
		}
		
		// 1.3.	Caso contrário, documento não válido.
		return false;
	}
	

	/**
	 * [UC0867] Atualizar Pagamentos das Contas em Cobrança
	 * [SB0014] Verificar cancelamento de contas
	 * @author Raimundo Martins
	 * @date 03/10/2011
	 *
	 */
	public void verificarCancelamentoDeContas()throws ControladorException{
		try{
			SistemaParametro sistemaParametro = this.getControladorUtil().pesquisarParametrosDoSistema();
			if(sistemaParametro.getIndicadorIncluirContasCanceladasPagamento() == 1){
				
				/*remove as contas canceladas no mes de arrecadação para atualizar o ecco.id*/
				//repositorioCobranca.removerContasCanceladasMesAssocComandosCobranca(sistemaParametro.getAnoMesArrecadacao());
				
				
				Collection<Object[]> contasCanceladas = pesquisarContasCanceladasMesAssocComandosCobranca(sistemaParametro.getAnoMesArrecadacao(), 
					DebitoCreditoSituacao.CANCELADA);
				
				if(contasCanceladas !=null && !contasCanceladas.isEmpty()){
					for(Object[] contaCancelada : contasCanceladas){
						Imovel imov = this.getControladorImovel().pesquisarImovel((Integer)contaCancelada[3]);
						
						EmpresaCobrancaConta empresaCobrancaConta = new EmpresaCobrancaConta();
						empresaCobrancaConta.setId((Integer) contaCancelada[0]);
						
						ContaMotivoCancelamento contaMotivoCancelamento = new ContaMotivoCancelamento();
						contaMotivoCancelamento.setId((Integer) contaCancelada[1]);
						
						EmpresaContaCobrancaCancelada empresaContaCobrancaCancelada = new EmpresaContaCobrancaCancelada();
						
						empresaContaCobrancaCancelada.setEmpresaCobrancaConta(empresaCobrancaConta);
						empresaContaCobrancaCancelada.setContaMotivoCancelamento(contaMotivoCancelamento);
						empresaContaCobrancaCancelada.setDataUltimaAlteracao(new Date());
						empresaContaCobrancaCancelada.setValorCancelamento((BigDecimal) contaCancelada[2]);
						empresaContaCobrancaCancelada.setImovel(imov);
						empresaContaCobrancaCancelada.setDataCancelamento((Date) contaCancelada[4]);
						empresaContaCobrancaCancelada.setAmRefArrecadacao(sistemaParametro.getAnoMesArrecadacao());
						
						repositorioUtil.inserir(empresaContaCobrancaCancelada);
					}
				}
			}
		}catch(ErroRepositorioException e){			
			//sessionContext.setRollbackOnly();
			e.printStackTrace();
			throw new ControladorException("erro.sistema", e);
		}
	}
	
	/**
	 * [UC0867] Atualizar Pagamentos das Contas em Cobrança
	 *
	 * Metodo que pesquisa contas canceladas associadas
	 * a comandos de cobrança no mes de arrecadação 
	 *
	 * @author Raimundo Martins
	 * @date 03/10/2011
	 *
	 */
	public Collection<Object[]> pesquisarContasCanceladasMesAssocComandosCobranca(Integer anoMesArrecadacao, 
		Integer debitoCreditoSituacao)throws ControladorException{
		try {
			return repositorioCobranca.pesquisarContasCanceladasMesAssocComandosCobranca(anoMesArrecadacao, debitoCreditoSituacao);
		}catch (ErroRepositorioException e) {
				throw new ControladorException("erro.sistema", e);
		}
	}
	
	/**
	 * [UC0867] Atualizar Pagamentos das Contas em Cobrança
	 * 
	 * Método que insere os dados na tabela 
	 * COBRANCA.EMPR_CONTA_COBR_PENA dos comandos
	 * encerrados sem penalidade
	 * 
	 * @author Raimundo Martins
	 * @date 20/10/2011
	 * */
	
	public void inserirEmpresaContaCobrancaPena(Collection<Object[]> comandosEncerradosSemPenalidades) throws ControladorException{
		try{
			if(comandosEncerradosSemPenalidades !=null && !comandosEncerradosSemPenalidades.isEmpty()){
				for(Object[] ob : comandosEncerradosSemPenalidades){
					EmpresaCobrancaContaPenalidade empresaCobrancaContaPenalidade = new EmpresaCobrancaContaPenalidade();
					empresaCobrancaContaPenalidade.setComandoEmpresaCobrancaConta(repositorioCobranca
						.pesquisarDadosComandoEmpresaCobrancaConta((Integer) ob[0]));
					empresaCobrancaContaPenalidade.setQtdImoveisEnviados((Integer) ob[1]);
					empresaCobrancaContaPenalidade.setQtdImovesOSGeradas((Integer) ob[2]);
					empresaCobrancaContaPenalidade.setQtdOsEncerradasDercursoPrazo((Integer) ob[3]);
					empresaCobrancaContaPenalidade.setQtdFaturasSelecionadasComando((Integer) ob[4]);
					empresaCobrancaContaPenalidade.setQtdFaturasSelecionadasPagtoGerado((Integer) ob[5]);
					empresaCobrancaContaPenalidade.setVlTotalContasSelecionadasComando((BigDecimal) ob[6]);
					empresaCobrancaContaPenalidade.setVlTotalContasSelecionadasPagtoGerado((BigDecimal) ob[7]);
					empresaCobrancaContaPenalidade.setUltimaAlteracao(new Date());					
					
					repositorioUtil.inserir(empresaCobrancaContaPenalidade);
				}
			}
		}catch(ErroRepositorioException e){			
			//sessionContext.setRollbackOnly();
			e.printStackTrace();
			throw new ControladorException("erro.sistema", e);
		}
	}
	
	/**
 	 * [UC0867] Atualizar Pagamentos das Contas em Cobrança
 	 * 
 	 * metodo que pesquisa os comandos encerrados sem
 	 * penalidades geradas
 	 * 
 	 * @author Raimundo Martins
 	 * @date 20/10/2011
 	 * */ 	
 	public Collection<Object[]> pesquisarComandosEncerradosSemPenalidades() throws ControladorException{
 		try{
 			return repositorioCobranca.pesquisarComandosEncerradosSemPenalidades();
 		}catch(ErroRepositorioException e){			
			
			e.printStackTrace();
			throw new ControladorException("erro.sistema", e);
		}
 	}
 	
 	
 	

	
	/**
	 * [UC1237] Gerar Relatório de Boletim de Medição e Acompanhamento
	 * 
	 * @author Hugo Azevedo
	 * @date 13/10/2011
	 */
	public Collection<Empresa> obterColecaoEmpresasContratadasCobranca() throws ControladorException{
		
		Collection<Empresa> colecaoEmpresa = new ArrayList<Empresa>();
		
		try{
			colecaoEmpresa = repositorioCobranca.obterColecaoEmpresasContratadasCobranca();
		} catch (ErroRepositorioException ex) {
			sessionContext.setRollbackOnly();
			new ControladorException("erro.sistema", ex);
		}
		return colecaoEmpresa;
	}
	
	/**
	 * [UC1237] Gerar Relatório de Boletim de Medição e Acompanhamento
	 * 
	 * @author Hugo Azevedo
	 * @date 13/10/2011
	 */
	public Collection<Regiao> obterColecaoRegioes()  throws ControladorException{
		
		Collection<Regiao> colecaoRegiao = new ArrayList<Regiao>();
		
		try{
			colecaoRegiao = repositorioCobranca.obterColecaoRegioes();
		} catch (ErroRepositorioException ex) {
			sessionContext.setRollbackOnly();
			new ControladorException("erro.sistema", ex);
		}
		return colecaoRegiao;
	}
	
	
	/**
	 * [UC1237] Gerar Relatório de Boletim de Medição e Acompanhamento
	 * 
	 * @author Hugo Azevedo
	 * @date 13/10/2011
	 */
	public Collection<Microrregiao> obterColecaoMicroRegioes(String[] idsRegiao) throws ControladorException{
		Collection<Microrregiao> colecaoMicroRegiao = new ArrayList<Microrregiao>();
		
		try{
			//Caso a lista esteja vazia ou com o elemento nulo selecionado
			if(idsRegiao == null || (idsRegiao.length == 1 && idsRegiao[0].equals("-1")))	
				colecaoMicroRegiao = repositorioCobranca.obterColecaoMicroRegioes(null);
			else
				colecaoMicroRegiao = repositorioCobranca.obterColecaoMicroRegioes(idsRegiao);
			
		} catch (ErroRepositorioException ex) {
			sessionContext.setRollbackOnly();
			new ControladorException("erro.sistema", ex);
		}
		return colecaoMicroRegiao;
	}

	
	/**
	 * [UC1237] Gerar Relatório de Boletim de Medição e Acompanhamento
	 * 
	 * @author Hugo Azevedo
	 * @date 13/10/2011
	 */
	public Collection<Municipio> obterColecaoMunicipios(String[] idsRegiao, String[] idsMicroRegiao) throws ControladorException{
		
		Collection<Municipio> colecaoMunicipio = new ArrayList<Municipio>();
		
		try{
			//Caso a lista esteja vazia ou com o elemento nulo selecionado
			if(idsRegiao == null || (idsRegiao.length == 1 && idsRegiao[0].equals("-1")))	
				colecaoMunicipio = repositorioCobranca.obterColecaoMunicipios(null,null);
			else{
				if(idsMicroRegiao == null || (idsMicroRegiao.length == 1 && idsMicroRegiao[0].equals("-1")))	
					colecaoMunicipio = repositorioCobranca.obterColecaoMunicipios(idsRegiao,null);
				else
					colecaoMunicipio = repositorioCobranca.obterColecaoMunicipios(idsRegiao,idsMicroRegiao);
			}
				
			
		} catch (ErroRepositorioException ex) {
			sessionContext.setRollbackOnly();
			new ControladorException("erro.sistema", ex);
		}
		return colecaoMunicipio;
	}
	
	/**
	 * [UC1237] Gerar Relatório de Boletim de Medição e Acompanhamento
	 * 
	 * @author Hugo Azevedo
	 * @date 13/10/2011
	 */
	public Collection<UnidadeNegocio> obterColecaoUnidadeNegocio(String[] idsGerencias) throws ControladorException{
		
		Collection<UnidadeNegocio> colecaoUnidadeNegocio = new ArrayList<UnidadeNegocio>();
		
		try{
			//Caso a lista esteja vazia ou com o elemento nulo selecionado
			if(idsGerencias == null || (idsGerencias.length == 1 && idsGerencias[0].equals("-1")))	
				colecaoUnidadeNegocio = repositorioCobranca.obterColecaoUnidadeNegocio(null);
			else
				colecaoUnidadeNegocio = repositorioCobranca.obterColecaoUnidadeNegocio(idsGerencias);
			
		} catch (ErroRepositorioException ex) {
			sessionContext.setRollbackOnly();
			new ControladorException("erro.sistema", ex);
		}
		return colecaoUnidadeNegocio;
		
	}
	
	/**
	 * [UC1237] Gerar Relatório de Boletim de Medição e Acompanhamento
	 * 
	 * @author Hugo Azevedo
	 * @date 13/10/2011
	 */
	public Localidade obterColecaoLocalidade(Integer idLocalidade, String[] idsGerencias,String[] idsUnidadeNegocio) throws ControladorException{
		
			Collection<Localidade> colecaoLocalidade = new ArrayList<Localidade>();
			Localidade retorno = null;
		
		try{
			//Caso a lista esteja vazia ou com o elemento nulo selecionado
			if((idsGerencias == null || (idsGerencias.length == 1 && idsGerencias[0].equals("-1"))) 
					&& (idsUnidadeNegocio == null || (idsUnidadeNegocio.length == 1 && idsUnidadeNegocio[0].equals("-1"))))
				colecaoLocalidade = repositorioCobranca.obterColecaoLocalidade(idLocalidade, null,null);
			
			else if(idsUnidadeNegocio == null || (idsUnidadeNegocio.length == 1 && idsUnidadeNegocio[0].equals("-1")))
				colecaoLocalidade = repositorioCobranca.obterColecaoLocalidade(idLocalidade, idsGerencias,null);
			
			else if(idsGerencias == null || (idsGerencias.length == 1 && idsGerencias[0].equals("-1")))
				colecaoLocalidade = repositorioCobranca.obterColecaoLocalidade(idLocalidade, null,idsUnidadeNegocio);
			else
				colecaoLocalidade = repositorioCobranca.obterColecaoLocalidade(idLocalidade, idsGerencias,idsUnidadeNegocio);
			
		} catch (ErroRepositorioException ex) {
			sessionContext.setRollbackOnly();
			new ControladorException("erro.sistema", ex);
		}
		
		if(colecaoLocalidade.size() == 1)
			retorno = (Localidade) Util.retonarObjetoDeColecao(colecaoLocalidade);
		
		return retorno;
	}
	
	
	/**
	 * [UC1169] Movimentar Ordens de Serviço de Cobrança por Resultado
	 * 
	 * @author Hugo Azevedo
	 * @date 11/06/2012
	 */
	public Collection<Localidade> obterColecaoLocalidade(String[] idsGerencias,String[] idsUnidadeNegocio) throws ControladorException{
		
			Collection<Localidade> retorno = new ArrayList<Localidade>();
		
		try{
			//Caso a lista esteja vazia ou com o elemento nulo selecionado
			if((idsGerencias == null || (idsGerencias.length == 1 && idsGerencias[0].equals("-1"))) 
					&& (idsUnidadeNegocio == null || (idsUnidadeNegocio.length == 1 && idsUnidadeNegocio[0].equals("-1"))))
				retorno = repositorioCobranca.obterColecaoLocalidade(null,null);
			
			else if(idsUnidadeNegocio == null || (idsUnidadeNegocio.length == 1 && idsUnidadeNegocio[0].equals("-1")))
				retorno = repositorioCobranca.obterColecaoLocalidade(idsGerencias,null);
			
			else if(idsGerencias == null || (idsGerencias.length == 1 && idsGerencias[0].equals("-1")))
				retorno = repositorioCobranca.obterColecaoLocalidade(null,idsUnidadeNegocio);
			else
				retorno = repositorioCobranca.obterColecaoLocalidade(idsGerencias,idsUnidadeNegocio);
			
		} catch (ErroRepositorioException ex) {
			sessionContext.setRollbackOnly();
			new ControladorException("erro.sistema", ex);
		}
		
		return retorno;
	}
	
	
	/**
	 * [UC1237] Gerar Relatório de Boletim de Medição e Acompanhamento
	 * 
	 * @author Hugo Azevedo
	 * @date 17/10/2011
	 */
	public Collection<RelatorioBoletimMedicaoAcompanhamentoHelper> gerarDadosRelatorioBoletimMedicaoAcompanhamento (
			Integer idEmpresa,
			String periodoApuracao,
			Integer idLocalidade,
			String[] idsGerenciaRegional,
			String[] idsUnidadeNegocio,
			String[] idsRegiao,
			String[] idsMicroRegiao,
			String[] idsMunicipio,
			short indicadorOperacao,
			short indicadorLocalidade,
			short indicadorRelatorio4
		) throws ControladorException{
		
		Collection<RelatorioBoletimMedicaoAcompanhamentoHelper> retorno = new ArrayList<RelatorioBoletimMedicaoAcompanhamentoHelper>();
		Collection<Object[]> retornoQuery = new ArrayList<Object[]>();
		
		try{
			
			//Validando coleções com elemento em branco
			if(idsGerenciaRegional != null && idsGerenciaRegional.length == 1 & idsGerenciaRegional[0].equals("-1"))
	        	idsGerenciaRegional = null;
	        if(idsUnidadeNegocio != null && idsUnidadeNegocio.length == 1 && idsUnidadeNegocio[0].equals("-1"))
	        	idsUnidadeNegocio = null;
	        if(idsRegiao != null && idsRegiao.length == 1 && idsRegiao[0].equals("-1"))
	        	idsRegiao = null;
	        if(idsMicroRegiao != null && idsMicroRegiao.length == 1 && idsMicroRegiao[0].equals("-1"))
	        	idsMicroRegiao = null;
	        if(idsMunicipio != null && idsMunicipio.length == 1 && idsMunicipio[0].equals("-1"))
	        	idsMunicipio = null;
			
	        
	        FiltroEmpresaCobrancaFaixa filtroEmpresaCobrancaFaixa = new FiltroEmpresaCobrancaFaixa();
			filtroEmpresaCobrancaFaixa.adicionarParametro(new ParametroSimples(
					FiltroEmpresaCobrancaFaixa.EMPRESA_ID, idEmpresa));
			filtroEmpresaCobrancaFaixa.setCampoOrderBy(FiltroEmpresaCobrancaFaixa.NUMERO_MAXIMO_CONTAS_FAIXA);
			
			ArrayList<EmpresaCobrancaFaixa> colecaoEmpresaCobrancaFaixa = (ArrayList<EmpresaCobrancaFaixa>)
					this.getControladorUtil().pesquisar(filtroEmpresaCobrancaFaixa,
						EmpresaCobrancaFaixa.class.getName());
			
			if(indicadorOperacao == 1){
			
				retornoQuery = repositorioCobranca.gerarDadosRelatorioBoletimMedicaoAcompanhamentoGeralResumido(
						idEmpresa,
						periodoApuracao,
						idLocalidade,
						idsGerenciaRegional,
						idsUnidadeNegocio,
						idsRegiao,
						idsMicroRegiao,
						idsMunicipio,
						indicadorOperacao,
						indicadorLocalidade,
						colecaoEmpresaCobrancaFaixa);
			}
			
			else if(indicadorOperacao == 3){
				retornoQuery = repositorioCobranca.gerarDadosRelatorioBoletimMedicaoAcompanhamentoResumidoParcelamento(
						idEmpresa,
						periodoApuracao,
						idLocalidade,
						idsGerenciaRegional,
						idsUnidadeNegocio,
						idsRegiao,
						idsMicroRegiao,
						idsMunicipio,
						indicadorOperacao,
						indicadorLocalidade,
						colecaoEmpresaCobrancaFaixa);
			}
			
			else if(indicadorOperacao == 2){
				retornoQuery = repositorioCobranca.gerarDadosRelatorioBoletimMedicaoAcompanhamentoGeralAnalitico(
						idEmpresa,
						periodoApuracao,
						idLocalidade,
						idsGerenciaRegional,
						idsUnidadeNegocio,
						idsRegiao,
						idsMicroRegiao,
						idsMunicipio,
						indicadorOperacao,
						indicadorLocalidade,
						colecaoEmpresaCobrancaFaixa);
			}
			else{
				
				if(indicadorRelatorio4 == 1)
					retornoQuery = repositorioCobranca.gerarDadosRelatorioBoletimMedicaoAcompanhamentoParcAnalitico(
							idEmpresa,
							periodoApuracao,
							idLocalidade,
							idsGerenciaRegional,
							idsUnidadeNegocio,
							idsRegiao,
							idsMicroRegiao,
							idsMunicipio,
							indicadorOperacao,
							indicadorLocalidade,
							colecaoEmpresaCobrancaFaixa);
				else
					retornoQuery = repositorioCobranca.gerarDadosRelatorioBoletimMedicaoAcompanhamentoParcEmAtrasoAnalitico(
							idEmpresa,
							periodoApuracao,
							idLocalidade,
							idsGerenciaRegional,
							idsUnidadeNegocio,
							idsRegiao,
							idsMicroRegiao,
							idsMunicipio,
							indicadorOperacao,
							indicadorLocalidade,
							colecaoEmpresaCobrancaFaixa);
			}
			
			Iterator it = retornoQuery.iterator();
			while(it.hasNext()){
				Object[] obj = (Object[])it.next();
				RelatorioBoletimMedicaoAcompanhamentoHelper rel = new RelatorioBoletimMedicaoAcompanhamentoHelper();
				
				rel.setGerenciaRegional((Integer)obj[0]); //0
				rel.setIdLocalidade((Integer)obj[1]); //1
				rel.setIdFaixaContas((Integer)obj[2]); //2
				rel.setRegiao((Integer)obj[3]); //3
				rel.setIdMunicipio((Integer)obj[4]); //4
				rel.setEmpresa((String)obj[5]); //5
				rel.setContrato((String)obj[6]); //6
				rel.setMesAnoReferencia((String)obj[7]); //7
				rel.setDescricaoLocalidade((String)obj[8]); //8
				rel.setDescricaoMunicipio((String)obj[9]); //9
				rel.setDescricaoFaixaContas((String)obj[10]); //10
				rel.setQtdFaturasNegociadas((Integer)obj[11]); //11
				
				if(indicadorOperacao != 4){
					rel.setQtdImoveis((Integer)obj[12]);//12
					rel.setValorPagamentoAVista((BigDecimal)obj[13]); //13
					rel.setValorPagamentoParcelado((BigDecimal)obj[14]); //14
					rel.setPercentualFaixa((BigDecimal)obj[15]); //15
				}
				
				if(indicadorOperacao == 1){
					rel.setNomeGerenciaRegional((String)obj[16]); //16
					rel.setNomeRegiao((String)obj[17]); //17
					rel.setValorDesconto((BigDecimal)obj[18]); //18
				}
				
				if(indicadorOperacao == 2){
					rel.setNomeCLiente((String)obj[16]);//16
					rel.setIdImovel((Integer)obj[17]);//17
					rel.setValorNegociado((BigDecimal)obj[18]); //18
					rel.setNomeGerenciaRegional((String)obj[19]); //19
					rel.setNomeRegiao((String)obj[20]); //20
					rel.setValorDesconto((BigDecimal)obj[21]); //21
				}
				
				if(indicadorOperacao == 3){
					rel.setValorNegociado((BigDecimal)obj[16]); //16
					rel.setNomeGerenciaRegional((String)obj[17]); //17
					rel.setNomeRegiao((String)obj[18]); //18
				}
				
				
				if(indicadorOperacao == 4){
					rel.setValorNegociado((BigDecimal)obj[12]); //12
					rel.setParcelasPaga((Integer)obj[13]); //13
					rel.setValorPago((BigDecimal)obj[14]); //14
					if(indicadorRelatorio4 == 1 ){
						rel.setQuantidadeParcelasEmAberto((Integer)obj[15]); //15
						rel.setQuantidadeParcelasEmAbertoHist((Integer)obj[16]); //16
					}
					else{
						rel.setParcelaAtraso((Integer)obj[15]);
						rel.setValorEmAtraso((BigDecimal)obj[16]);
					}
					rel.setSaldoEmAberto((BigDecimal)obj[17]); //17
					rel.setSaldoEmAbertoHist((BigDecimal)obj[18]); //18
					rel.setNomeCLiente((String)obj[19]); //19
					rel.setIdImovel((Integer)obj[20]); //20
					rel.setNomeGerenciaRegional((String)obj[21]); //21
					rel.setNomeRegiao((String)obj[22]); //22
				}
				
				retorno.add(rel);
			}
			
		} catch (ErroRepositorioException ex) {
			sessionContext.setRollbackOnly();
			new ControladorException("erro.sistema", ex);
		}
			
		
//		this.gerarArquivoTxt(periodoApuracao, retorno, indicadorLocalidade,indicadorOperacao,indicadorRelatorio4);
		
		
		return retorno;
	}
	
	/**
	 * [UC1237] Gerar Relatório de Boletim de Medição e Acompanhamento
	 * [SB0004] - Emitir Relatório de Acompanhamento dos Parcelamentos - Recuperação de Créditos
	 * 
	 * 2.4.5. Quantidade de Parcelas Pagas
	 * 2.4.6. Valor Pago
	 * 
	 * Retorna a quantidade de parcelas pagas, bem como o valor total quitado.
	 * 
	 * @author Hugo Azevedo
	 * @date 24/10/2011
	 */
	
	public Collection obterParcelasPagasRecuperacaoCreditos(Integer idImovel) throws ControladorException {
		
		Collection retorno = null;
		
		try{
			retorno = repositorioCobranca.obterParcelasPagasRecuperacaoCreditos(idImovel);
			
		} catch (ErroRepositorioException e) {
			e.printStackTrace();
			throw new ControladorException("erro.sistema", e);
		}
			
		
		return retorno;
	}
	
	/**
	 * [UC1237] Gerar Relatório de Boletim de Medição e Acompanhamento
	 * [SB0004] - Emitir Relatório de Acompanhamento dos Parcelamentos - Recuperação de Créditos
	 * 
	 * 2.4.7. Quantidade de Parcelas Em Aberto
	 * 2.4.8. Saldo em Aberto
	 * 
	 * @author Hugo Azevedo
	 * @date 24/10/2011
	 */
	
	public Collection obterDebitosQtdParcelasACobrarRecuperacaoCreditos(Integer idImovel) throws ControladorException {
		
		Collection retorno = new ArrayList();
		
		try{
			retorno = repositorioCobranca.obterDebitosQtdParcelasACobrarRecuperacaoCreditos(idImovel);
			
		} catch (ErroRepositorioException e) {
			e.printStackTrace();
			throw new ControladorException("erro.sistema", e);
		}
		
		return retorno;
	}
	
	
	/**
	 * [UC1237] Gerar Relatório de Boletim de Medição e Acompanhamento
	 * [SB0005] - Emitir Relatório de Acompanhamento dos Parcelamentos em Atraso - Recuperação de Créditos
	 * 
	 * 2.4.6. Quantidade de Parcelas Em Atraso
	 * 
	 * @author Hugo Azevedo
	 * @date 24/10/2011
	 */
	public Collection obterParcelasEmAtrasoRecuperacaoCreditos(Integer idImovel) throws ControladorException {
		
		Collection retorno = new ArrayList();
		
		try{
			retorno = repositorioCobranca.obterParcelasEmAtrasoRecuperacaoCreditos(idImovel);
			
		} catch (ErroRepositorioException e) {
			e.printStackTrace();
			throw new ControladorException("erro.sistema", e);
		}
		
		return retorno;
	}
	
	
	/**
	 * [UC1186] Gerar Relatório Ordem de Serviço Cobrança p/Resultado
	 * 
	 * Pesquisar Valor enviado e quantidade de contas enviadas na cobranca por Resultado
	 * 
	 * @author Rômulo Aurélio
	 * @data 24/10/2011
	 */
	
	public Collection obterValorEnviadoCobrancaPorResultado(OrdemServico os) throws ControladorException{
		Collection retorno = new ArrayList();
		try{
			retorno = repositorioCobranca.obterValorEnviadoCobrancaPorResultado(os);
		} catch (ErroRepositorioException ex) {
			sessionContext.setRollbackOnly();
			new ControladorException("erro.sistema", ex);
		}
		return retorno;	
	}
	
	/**
	 * [UC1186] Gerar Relatório Ordem de Serviço Cobrança p/Resultado
	 * 
	 * Pesquisar Valor Pago e quantidade de contas Pagas na cobranca por Resultado
	 * 
	 * @author Rômulo Aurélio
	 * @data 24/10/2011
	 */
	
	public Collection obterValorPagoCobrancaPorResultado(OrdemServico os) throws ControladorException{
		Collection retorno = new ArrayList();
		try{
			retorno = repositorioCobranca.obterValorPagoCobrancaPorResultado(os);
		} catch (ErroRepositorioException ex) {
			sessionContext.setRollbackOnly();
			new ControladorException("erro.sistema", ex);
		}
		return retorno;	
	}
	
	
	/**
	 * [UC1186] Gerar Relatório Ordem de Serviço Cobrança p/Resultado
	 * 
	 * Pesquisar Valor Parcelado na cobranca por Resultado
	 * 
	 * @author Rômulo Aurélio
	 * @data 24/10/2011
	 */
	
	public Collection obterValorParceladoCobrancaPorResultado(OrdemServico os) throws ControladorException{
		Collection retorno = new ArrayList();
		try{
			retorno = repositorioCobranca.obterValorParceladoCobrancaPorResultado(os);
		} catch (ErroRepositorioException ex) {
			sessionContext.setRollbackOnly();
			new ControladorException("erro.sistema", ex);
		}
		return retorno;	
	}

	/**
	 * [UC1156] Emitir Documentos de Cobrança Em Lote
	 * 
	 * [SB0005] - Obter Motivo de Encerramento da Ação de Cobrança
	 *
	 * 1. Seleciona os motivos de encerramento da ação de cobrança
	 * 
	 * @author Mariana Victor
	 * @date 26/10/2011
	 * 
	 * @return
	 * @throws ErroRepositorioException
	 */
	public Collection<AtendimentoMotivoEncerramento> selecionaMotivosEncerramentoAcaoCobranca(Integer idAcaoCobranca) 
			throws ControladorException{
		Collection<AtendimentoMotivoEncerramento> retorno = null;
		try{
			retorno = this.repositorioCobranca.selecionaMotivosEncerramentoAcaoCobranca(idAcaoCobranca);
		} catch (ErroRepositorioException ex) {
			new ControladorException("erro.sistema", ex);
		}
		
		return retorno;
	}
	 
	
	/**
	 * [UC1239] Gerar Relatório de Penalidades por Índice de Atuação e Sucesso Financeiro
	 * 
	 * @author Hugo Azevedo
	 * @date 27/10/2011
	 */
	
	public Collection<RelatorioPenalidadesIndiceAtuacaoSucessoFinanceiroBean> obterComandosEmPenalidades(Integer idEmpresa, Date dataInicial, Date dataFinal) throws ControladorException {
		
		Collection<RelatorioPenalidadesIndiceAtuacaoSucessoFinanceiroBean> retorno = 
				new ArrayList<RelatorioPenalidadesIndiceAtuacaoSucessoFinanceiroBean>();
		
		Collection<Object[]> retornoQuery = new ArrayList<Object[]>();
		
		try{
			retornoQuery = repositorioCobranca.obterComandosEmPenalidades(idEmpresa,dataInicial,dataFinal);
		}
		catch (ErroRepositorioException ex) {
			sessionContext.setRollbackOnly();
			new ControladorException("erro.sistema", ex);
		}
		
		if(retornoQuery.size() > 0){
			Object[] obj = (Object[])Util.retonarObjetoDeColecao(retornoQuery);
			
			RelatorioPenalidadesIndiceAtuacaoSucessoFinanceiroBean bean = 
					new RelatorioPenalidadesIndiceAtuacaoSucessoFinanceiroBean();
			
			
			BigDecimal qtdOSGerada = (BigDecimal)obj[1];
			BigDecimal qtdOSEncerrada = (BigDecimal)obj[2];
			BigDecimal valorTotalEnviado = (BigDecimal)obj[3];
			BigDecimal valorTotalNegociado = (BigDecimal)obj[4];
			String empresa = (String)obj[5];
			String contrato = (String)obj[6];
			
			
			//IA = ( [Quantidade de Ordens de Serviço Geradas - Quantidade de Ordens de Serviço Encerradas por Decurso de Prazo] * 100 ) / Quantidade de Ordens de Serviço Geradas;
			BigDecimal IA = ((qtdOSGerada.subtract(qtdOSEncerrada)).multiply(new BigDecimal("100"))).divide(qtdOSGerada,2,BigDecimal.ROUND_HALF_EVEN);
			BigDecimal IF = (valorTotalNegociado.multiply(new BigDecimal(100))).divide(valorTotalEnviado,2,BigDecimal.ROUND_HALF_EVEN);
			
			BigDecimal percentualMultaIA = new BigDecimal("0.0");
			BigDecimal percentualMultaIF = new BigDecimal("0.0");
			
			//Percentual da Multa do IA (verificar em qual faixa do Índice Efetivo o IA calculado acima se enquadra e obter o percentual da multa correspondente)
			if(IA.compareTo(new BigDecimal("95.00")) >= 0)
				percentualMultaIA = new BigDecimal("0.0");
			else if(IA.compareTo(new BigDecimal("90.00")) >= 0 && IA.compareTo(new BigDecimal("94.99")) <= 0)
				percentualMultaIA = new BigDecimal("1.0");
			else if(IA.compareTo(new BigDecimal("85.00")) >= 0 && IA.compareTo(new BigDecimal("89.99")) <= 0)
				percentualMultaIA = new BigDecimal("1.5");
			else if(IA.compareTo(new BigDecimal("80.00")) >= 0 && IA.compareTo(new BigDecimal("84.99")) <= 0)
				percentualMultaIA = new BigDecimal("2.0");
			else if(IA.compareTo(new BigDecimal("75.00")) >= 0 && IA.compareTo(new BigDecimal("79.99")) <= 0)
				percentualMultaIA = new BigDecimal("3.0");
			else if(IA.compareTo(new BigDecimal("74.99")) <= 0 )	
				percentualMultaIA = new BigDecimal("10.00");
			
			//Percentual da Multa do IA (verificar em qual faixa do Índice Efetivo o IA calculado acima se enquadra e obter o percentual da multa correspondente)
			if(IF.compareTo(new BigDecimal("50.00")) >= 0)
				percentualMultaIF = new BigDecimal("0.0");
			else if(IF.compareTo(new BigDecimal("45.00")) >= 0 && IF.compareTo(new BigDecimal("49.99")) <= 0)
				percentualMultaIF = new BigDecimal("1.5");
			else if(IF.compareTo(new BigDecimal("40.00")) >= 0 && IF.compareTo(new BigDecimal("44.99")) <= 0)
				percentualMultaIF = new BigDecimal("3.0"); 
			else if(IF.compareTo(new BigDecimal("35.00")) >= 0 && IF.compareTo(new BigDecimal("39.99")) <= 0)
				percentualMultaIF = new BigDecimal("4.5"); 
			else if(IF.compareTo(new BigDecimal("30.00")) >= 0 && IF.compareTo(new BigDecimal("34.99")) <= 0)
				percentualMultaIF = new BigDecimal("6.0"); 
			else if(IF.compareTo(new BigDecimal("29.99")) <= 0 )	
				percentualMultaIF = new BigDecimal("10.00"); 
			
			bean.setNomeEmpresa(empresa);
			bean.setNumeroContrato(contrato);
			
			bean.setPercentualIA(IA.toString());
			bean.setPercentualIF(IF.toString());
			
			bean.setValorMedidoCiclo(valorTotalEnviado);
			
			bean.setPercentualMultaIA(percentualMultaIA.toString());
			bean.setValorMultaCicloIA((valorTotalEnviado.multiply(percentualMultaIA)).divide(new BigDecimal("100"),2,BigDecimal.ROUND_HALF_EVEN));
			
			bean.setPercentualMultaIF(percentualMultaIF.toString());
			bean.setValorMultaCicloIF((valorTotalEnviado.multiply(percentualMultaIF)).divide(new BigDecimal("100"),2,BigDecimal.ROUND_HALF_EVEN));
			
			retorno.add(bean);
		}
		return retorno;
		
	}


	/**
	 * [UC1238] Gerar Relatório de Acompanhamento dos Comandos de Cobrança
	 * 
	 * Pesquisa a quantidade de comandos
	 * 
	 * @author: Mariana Victor
	 * @date: 04/05/2011
	 */
	public Integer pesquisarQuantidadeComandosContasCobrancaEmpresa(
			Integer idEmpresa, Date cicloInicial, Date cicloFinal) throws ControladorException {
		Integer retorno = null;
		try{
			retorno = this.repositorioCobranca.pesquisarQuantidadeComandosContasCobrancaEmpresa(
				idEmpresa, cicloInicial, cicloFinal);
		} catch (ErroRepositorioException ex) {
			new ControladorException("erro.sistema", ex);
		}
		
		return retorno;
	}

	/**
	 * [UC0214] Efetuar Parcelamento de Débitos
	 * 
	 * @author Vivianne Sousa
	 * @date 23/11/2011
	 */
	public boolean existeParcelamentoQuantidadePrestacaoSituacaoLigacaoAgua(
		Integer idSituacaoLigacaoAgua,Integer idParcelamentoQuantidadePrestacao )throws ControladorException {
		try{
			return this.repositorioCobranca.existeParcelamentoQuantidadePrestacaoSituacaoLigacaoAgua(
				 idSituacaoLigacaoAgua, idParcelamentoQuantidadePrestacao);
		} catch (ErroRepositorioException ex) {
			throw new ControladorException("erro.sistema", ex);
		}
		
	}
	
	/**
	 * retorna uma colecao de ResolucaoDiretoria 
	 * 
	 * [UC0214] - Efetuar Parcelamento de Débitos
	 * 
	 * @author Vivianne Sousa
	 * @date 28/11/2011
	 * 
	 * @return
	 * @throws ErroRepositorioException
	 */
	public  ResolucaoDiretoria  pesquisarResolucaoDiretoriaPortal()throws ControladorException {
		try{
			return this.repositorioCobranca.pesquisarResolucaoDiretoriaPortal();
		} catch (ErroRepositorioException ex) {
			throw new ControladorException("erro.sistema", ex);
		}
		
	}
	/**
	 * [UC1153] Solicitar Geração/Emissão Boletim de Medição de Cobrança
	 * 
	 * Metódo que pesquisa as ações de penalidade
	 * a partir do grupo e o mês de referencia
	 * 
	 * @author Raimundo Martins
	 *
	 * @date 10/11/2011
	 */	
	public Collection<AcoesPenalidadeGrupoHelper> pesquisarAcoesPenalidadesPorGrupoMes(Integer idGrupo, Integer anoMes) 
			throws ControladorException{
		Collection<AcoesPenalidadeGrupoHelper> acoes = new ArrayList<AcoesPenalidadeGrupoHelper>();
		try{
			Collection<Object[]> dados = repositorioCobranca.pesquisarAcoesPenalidadesPorGrupoMes(idGrupo, anoMes);
			if(dados !=null && !dados.isEmpty()){
				for(Object[] ob : dados){
					AcoesPenalidadeGrupoHelper helper = new AcoesPenalidadeGrupoHelper();
					helper.setIdAcao((Integer) ob[0]);
					helper.setAcao(ob[1].toString());
					
					acoes.add(helper);					
				}
			}
			
		} catch (ErroRepositorioException ex) {
			new ControladorException("erro.sistema", ex);
		}
		return acoes;
	}
	
	/**
	 * [UC 1153] Solicitar Geração / Emissão Boletim de Medição
	 * 
	 * Metodo que retorna a CobrancaAçãoCronograma a partir
	 * da Ação, Ano/Mes e Grupo de ação de cobrança
	 * 
	 * @author Raimundo Martins
	 * @date 17/11/2011
	 * */
	public CobrancaAcaoCronograma pesquisarCobrancaAcaoCronograma(Integer idGrupo, Integer anoMes, Integer idAcaoCobranca)
			throws ControladorException{
		CobrancaAcaoCronograma cobranca = null;
		try{
			cobranca = repositorioCobranca.pesquisarCobrancaAcaoCronograma(idGrupo, anoMes, idAcaoCobranca);
		} catch (ErroRepositorioException ex) {
			new ControladorException("erro.sistema", ex);		
		}
		return cobranca;
	}
	
	/**
	 * [UC 1151] Gerar Boletim Medição
	 * 
	 * Metodo que pesquisa as justificativas de
	 * não penalidades para o grupo de cobrança
	 * a partir do ano / mês informado
	 * 
	 * @author Raimundo Martins
	 * @date 17/11/2011
	 * */
	public Collection<Integer> pesquisarNaoPenalidades(Integer idGrupo, Integer referencia) throws ControladorException {
		Collection<Integer> retorno = null;
		try{
			retorno = repositorioCobranca.pesquisarNaoPenalidades(idGrupo, referencia);
		}catch(ErroRepositorioException ex){
			new ControladorException("erro.sistema", ex);
		}
		return retorno;
	}
		
	/**
	 * [UC 1152] Emitir Boletim Medição Cobrança
	 * 
	 * Metodo que pesquisa a justificativa da penalidade
	 * de um boletim de medição
	 * 
	 * @author Raimundo Martins
	 * @date 22/11/2011
	 * */
	public BoletimMedicaoJustificativaPenalidade pesquisarBoletimMedicaoJustificativaPenalidade(Integer idBoletim) 
			throws ControladorException{
		BoletimMedicaoJustificativaPenalidade bol = null;
		try{
			bol = repositorioCobranca.pesquisarBoletimMedicaoJustificativaPenalidade(idBoletim);
		}catch(ErroRepositorioException ex){
			new ControladorException("erro.sistema", ex);
		}
		return bol;
	}

	/**
	 * [UC1250] Solicitar Geração/Emissão Boletim de Medição de Contratos
	 * 
	 *  1.5.1. O usuário informa o filtro e ao clicar no botão "Selecionar" o sistema deverá exibir, 
	 * em uma tabela, todos os boletins de medição 
	 * 
	 * @author Mariana Victor
	 * @date 21/11/2011
	 * */
	public Collection<BoletimMedicaoContratoHelper> pesquisarBoletimMedicaoContrato(
		Integer idContrato, Integer anoMes) throws ControladorException {
		
		Collection<BoletimMedicaoContratoHelper> retorno = new ArrayList<BoletimMedicaoContratoHelper>();
		
		try{
			
			Collection<Object[]> dadosBoletins = repositorioCobranca
					.pesquisarBoletimMedicaoContrato(
						idContrato, anoMes);

			// [FS0002] - Grupos não concluídos.
			if(dadosBoletins == null || dadosBoletins.isEmpty()) {

				throw new ControladorException("atencao.nao_existe.grupos_concluidos");
				
			} else {
				
				Iterator<Object[]> iterator = dadosBoletins.iterator();
				
				while(iterator.hasNext()) {
					Object[] dados = (Object[]) iterator.next();
					BoletimMedicaoContratoHelper helper = new BoletimMedicaoContratoHelper();
					
					if (dados[0] != null) {
						helper.setAnoMesReferencia(Util.formatarAnoMesParaMesAno((Integer) dados[0])); 
					}
					if (dados[1] != null) {
						helper.setIdBoletim((Integer) dados[1]); 
					}
					if (dados[2] != null) {
						helper.setDescricaoGrupoCobranca((String) dados[2]); 
					}
					
					retorno.add(helper);
				}
			}
			
		} catch (ErroRepositorioException ex) {
			new ControladorException("erro.sistema", ex);		
		}
		
		return retorno;
	}
	
	
	/**
	 * [UC1250] Solicitar Geração/Emissão Boletim de Medição de Contratos
	 * 
	 * [SB0001] - Gerar Boletim Medição de Contrato
	 * 
	 * @author Mariana Victor
	 * @date 21/11/2011
	 * */
	public void gerarBoletimMedicaoContrato(
			String[] idsBoletim, Integer idContrato) throws ControladorException {
		
		try{
			// verificar a quantidade de boletim de contrato para o mês/ano
			Integer quantidadeBoletimContrato = this.repositorioCobranca
					.pesquisarQuantidadeBoletimMedicaoContrato(idContrato);
			quantidadeBoletimContrato++;
			
			ContratoEmpresaServico contratoEmpresaServico = new ContratoEmpresaServico();
			contratoEmpresaServico.setId(idContrato);
			
			CobrancaBoletimContrato cobrancaBoletimContrato = new CobrancaBoletimContrato();
			cobrancaBoletimContrato.setAnoMesReferencia(Util.recuperaAnoMesDaData(new Date()));
			cobrancaBoletimContrato.setDescricaoBoletimContrato(quantidadeBoletimContrato + "º Boletim de Contrato");
			cobrancaBoletimContrato.setContratoEmpresaServico(contratoEmpresaServico);
			cobrancaBoletimContrato.setUltimaAlteracao(new Date());
			
			// 1. O sistema insere os dados do boletim de contrato na tabela cobranca.COBR_BOLETIM_CONTRATO
			Integer idCobrancaBoletimContrato = (Integer) this.getControladorUtil().inserir(cobrancaBoletimContrato);
			
			// 2. E, para cada boletim de medição selecionado, atualiza os dados da tabela COBR_BOLETIM_MEDICAO
			this.repositorioCobranca.atualizarBoletimMedicaoCobranca(idsBoletim, idCobrancaBoletimContrato);
			
		} catch (ErroRepositorioException ex) {
			new ControladorException("erro.sistema", ex);		
		}
		
	}
	
	/**
	 * [UC 0870] Gerar Movimento de Contas em Cobrança por Empresa
	 * 
	 * Método que pesquisa se o comando possui setores associados
	 * na tabela cobranca.cmd_empr_cobr_conta_stcm
	 * 
	 * @author Raimundo Martins
	 * @date 02/12/2011
	 * 
	 * */
	public Collection<SetorComercial> pesquisarSetoresComerciaisComandoEmpresaCobrancaContaSetorComercial(Integer idComando)
			throws ControladorException{
		try{
			return this.repositorioCobranca.pesquisarSetoresComerciaisComandoEmpresaCobrancaContaSetorComercial(idComando);
		}catch(ErroRepositorioException ex){
			ex.printStackTrace();
			throw new ControladorException("erro.sistema", ex);
		}
	}

	/**
	 * [UC1250] Solicitar Geração/Emissão Boletim de Medição de Contratos
	 * 
	 * 1.6.2. O usuário informa o filtro e ao clicar no botão "Selecionar" o sistema deverá exibir,
	 *   em uma tabela, todos os boletins de contrato 
	 * 
	 * @author Mariana Victor
	 * @date 16/12/2011
	 * */
	public Collection<BoletimMedicaoContratoDadosHelper> pesquisarBoletimMedicaoContratoEmitir(
		Integer idContrato, Integer anoMes) throws ControladorException {
		
		Collection<BoletimMedicaoContratoDadosHelper> retorno = new ArrayList<BoletimMedicaoContratoDadosHelper>();
		
		try{
			
			Collection<Object[]> dadosBoletins = repositorioCobranca
					.pesquisarBoletimMedicaoContratoEmitir(
						idContrato, anoMes);

			if(dadosBoletins != null && !dadosBoletins.isEmpty()) {

				Iterator<Object[]> iterator = dadosBoletins.iterator();
				
				while(iterator.hasNext()) {
					Object[] dados = (Object[]) iterator.next();
					BoletimMedicaoContratoDadosHelper helper = new BoletimMedicaoContratoDadosHelper();
					
					if (dados[0] != null) {
						helper.setAnoMesReferencia(Util.formatarAnoMesParaMesAno((Integer) dados[0])); 
					}
					if (dados[1] != null) {
						helper.setIdBoletim((Integer) dados[1]); 
					}
					if (dados[2] != null) {
						helper.setDescricaoContrato((String) dados[2]); 
					}
					
					retorno.add(helper);
				}
			}
			
		} catch (ErroRepositorioException ex) {
			new ControladorException("erro.sistema", ex);		
		}
		
		return retorno;
	}
	
	/**
	 * [UC0251] Gerar Atividade de Ação de Cobrança
	 * 
	 * [SB0006] Obter Desconto do Documento de Cobrança
	 * 
	 * @author Raphael Rossiter
	 * @date 16/12/2011
	 * 
	 * @param imovel
	 * @return ImovelSituacao
	 */
	private ImovelSituacao obterSituacaoImovel(Integer idLigacaoAguaSituacao, Integer idLigacaoEsgotoSituacao) throws ControladorException {
		
		//1. Obtem a situação do imovel
		ImovelSituacao imovelSituacao = null;

		// Condição 1
		if (idLigacaoAguaSituacao != null && idLigacaoEsgotoSituacao != null) {
			
			imovelSituacao = getControladorImovel().obterSituacaoImovel(
					idLigacaoAguaSituacao, idLigacaoEsgotoSituacao);
			
			// Condição 2
			if (imovelSituacao == null) {
				
				imovelSituacao = getControladorImovel().obterSituacaoImovel(
						idLigacaoAguaSituacao, null);
			}
		}
		
		//[FS004] Verificar existência da situação do imóvel
		if (imovelSituacao == null) {
			throw new ControladorException(
					"atencao.nao.existe.situacao.imovel.correspondente.situacao.agua.esgoto");
		}

		return imovelSituacao;
	}
	
	/**
	 * [UC0251] Gerar Atividade de Ação de Cobrança
	 * 
	 * [SB0006] Obter Desconto do Documento de Cobrança
	 * 
	 * @author Raphael Rossiter
	 * @date 16/12/2011
	 * 
	 * @param imovel
	 * @return ImovelSituacao
	 */
	private ParcelamentoPerfil obterPerfilParcelamentoPorNivel(Imovel imovel, ImovelSituacao imovelSituacao, 
			Integer idResolucaoDiretoria, Integer idImovelPerfil) throws ControladorException {
		
		Collection colecaoImovelSubCategoria = getControladorImovel().obterColecaoImovelSubcategorias(imovel, 1);

		Subcategoria subcategoria = null;
		Categoria categoria = null;
		
		if (colecaoImovelSubCategoria != null && !colecaoImovelSubCategoria.isEmpty()) {
			
			Iterator iteretorImovelSubCategoria = colecaoImovelSubCategoria.iterator();
			
			int quantidadeEconomisas = 0;
			int maiorQuantidadeEconomisas = 0;
		
			while (iteretorImovelSubCategoria.hasNext()) {
				
				ImovelSubcategoria imovelSubCategoria = (ImovelSubcategoria) iteretorImovelSubCategoria.next();
				
				quantidadeEconomisas = imovelSubCategoria.getQuantidadeEconomias();
				
				if (quantidadeEconomisas > maiorQuantidadeEconomisas) {
					maiorQuantidadeEconomisas = quantidadeEconomisas;
					subcategoria = imovelSubCategoria.getComp_id().getSubcategoria();
					categoria = subcategoria.getCategoria();
				}
			}
		}
		
		ParcelamentoPerfil parcelamentoPerfil = obterPerfilParcelamento(imovel.getId(),imovelSituacao.getImovelSituacaoTipo().getId(),
				idImovelPerfil, subcategoria.getId(), idResolucaoDiretoria, categoria.getId());
		
		if(parcelamentoPerfil == null){
			//Condição 1 - iper_id = iper_id do imovel e scat_id = scat_id do imovel
			parcelamentoPerfil = obterPerfilParcelamento(imovel.getId(),imovelSituacao.getImovelSituacaoTipo().getId(),
					idImovelPerfil, subcategoria.getId(), idResolucaoDiretoria, null);
		
			if (parcelamentoPerfil == null) {
				parcelamentoPerfil = obterPerfilParcelamento(imovel.getId(),imovelSituacao.getImovelSituacaoTipo().getId(),
						idImovelPerfil, null, idResolucaoDiretoria, categoria.getId());
				
				//Condição 2 - iper_id = iper_id do imovel e scat_id = null do imovel
				if (parcelamentoPerfil == null) {
					parcelamentoPerfil = obterPerfilParcelamento(imovel.getId(),imovelSituacao.getImovelSituacaoTipo().getId(),
							idImovelPerfil, null, idResolucaoDiretoria,null);
					
					if (parcelamentoPerfil == null) {
						parcelamentoPerfil = obterPerfilParcelamento(imovel.getId(),imovelSituacao.getImovelSituacaoTipo().getId(),
								null, subcategoria.getId(), idResolucaoDiretoria,categoria.getId());
					
						//Condição 3 - iper_id = null do imovel e scat_id = scat_id do imovel
						if (parcelamentoPerfil == null) {
							parcelamentoPerfil = obterPerfilParcelamento(imovel.getId(),imovelSituacao.getImovelSituacaoTipo().getId(),
									null, subcategoria.getId(), idResolucaoDiretoria,null);
							
							if(parcelamentoPerfil == null){
								parcelamentoPerfil = obterPerfilParcelamento(imovel.getId(),imovelSituacao.getImovelSituacaoTipo().getId(), 
										null, null, idResolucaoDiretoria,categoria.getId());
								
								//Condição 4 - iper_id = null do imovel e scat_id = null
								if (parcelamentoPerfil == null) {
									parcelamentoPerfil = obterPerfilParcelamento(imovel.getId(),imovelSituacao.getImovelSituacaoTipo().getId(), 
										null, null, idResolucaoDiretoria,null);
								}
							}
						}
					}
				}
			}
		}

		return parcelamentoPerfil;
	}
	
	
	/**
	 * [UC1257] - Gerar Relatório dos Imóveis e Contas Retirados das Empresas de Cobrança
	 * [SB0002] - Emitir Dados das Retiradas dos Imóveis de Cobrança
	 * 
	 * @author: Hugo Azevedo
	 * @date: 19/12/2011
	 */
	public Integer obterQtdRelatorioImoveisContasRetiradosEmpresasCobranca(
			Integer idEmpresa, int amReferenciaInicial,
			int amReferenciaFinal) throws ControladorException{
		
		try{
			return this.repositorioCobranca.
					obterQtdRelatorioImoveisRetiradosEmpresasCobranca(idEmpresa, amReferenciaInicial, amReferenciaFinal);
		}catch(ErroRepositorioException ex){
			ex.printStackTrace();
			throw new ControladorException("erro.sistema", ex);
		}
	}	
	
	
	/**
	 * [UC1257] - Gerar Relatório dos Imóveis e Contas Retirados das Empresas de Cobrança
	 * [SB0002] - Emitir Dados das Retiradas dos Imóveis de Cobrança
	 * 
	 * @author: Hugo Azevedo
	 * @date: 19/12/2011
	 */
	public Collection obterRelatorioImoveisContasRetiradosEmpresasCobranca(
			Integer idEmpresa, int amReferenciaInicial,
			int amReferenciaFinal) throws ControladorException{
		
		Collection retorno = new ArrayList();
		try{
			
			//1. O sistema seleciona os imóveis e os comandos enviados para cobrança no filtro informado
			Collection retornoQueryImoveis = this.repositorioCobranca.
					obterRelatorioImoveisRetiradosEmpresasCobranca(idEmpresa, amReferenciaInicial, amReferenciaFinal);
			
			if(retornoQueryImoveis != null && !retornoQueryImoveis.isEmpty()){
				
				Iterator it = retornoQueryImoveis.iterator();
				while(it.hasNext()){
					Object[] obj = (Object[])it.next();
					
					RelatorioImoveisContasRetiradosEmpresasCobrancaBean bean = new RelatorioImoveisContasRetiradosEmpresasCobrancaBean();
					List<RelatorioImoveisContasRetiradosEmpresasCobrancaSubBean> colecaoSubBean = 
							new ArrayList<RelatorioImoveisContasRetiradosEmpresasCobrancaSubBean>();
					
					Integer idImovel = (Integer)obj[0];
					Integer idComando = (Integer)obj[1];
					Integer idLocalidade = (Integer)obj[2];
					Integer codigoSetorComercial = (Integer)obj[3];
					Integer numeroQuadra = (Integer)obj[4];
					Integer numeroLote = (Integer)obj[5];
					Integer numeroSubLote = (Integer)obj[6];
					Date dataExecucao = (Date)obj[7];
					Date dataRetirada = (Date)obj[8];
					String motivoRetirada = (String)obj[9];
					
					//Imovel
					bean.setIdImovel(idImovel);
					
					//Comando
					bean.setIdComando(idComando);
					
					//[SB0003] - Obter inscrição do imóvel
					bean.setInscricao(Util.adicionarZerosEsquedaNumeroTruncando(3,idLocalidade.toString()) +"."
										+Util.adicionarZerosEsquedaNumeroTruncando(3,codigoSetorComercial.toString())+"."
										+Util.adicionarZerosEsquedaNumeroTruncando(3,numeroQuadra.toString())+"."
										+Util.adicionarZerosEsquedaNumeroTruncando(4,numeroLote.toString())+"."
										+Util.adicionarZerosEsquedaNumeroTruncando(3,numeroSubLote.toString()));
					
					//Data do Envio
					bean.setDataExecucao(Util.formatarData(dataExecucao));
					
					//Data da Retirada
					bean.setDataRetirada(Util.formatarData(dataRetirada));
					
					//Motivo da Retirada
					bean.setMotivoRetirada(motivoRetirada);
					
					
					//2.2. O sistema seleciona as contas do imóvel no comando selecionado
					Collection retornoQueryContas = this.repositorioCobranca.
							obterRelatorioContasRetiradasEmpresasCobranca(idImovel, idComando);
					
					if(retornoQueryContas != null && !retornoQueryContas.isEmpty()){
						
						Iterator it2 = retornoQueryContas.iterator();
						while(it2.hasNext()){
							Object[] obj2 = (Object[])it2.next();
							
							RelatorioImoveisContasRetiradosEmpresasCobrancaSubBean subBean = 
									new RelatorioImoveisContasRetiradosEmpresasCobrancaSubBean();
							
							//Referência
							if(obj2[0] != null)
								subBean.setAnoMesReferencia((String)Util.formatarAnoMesParaMesAno((Integer)obj2[0]));
							else
								subBean.setAnoMesReferencia((String)"");
							
							//Valor Conta
							subBean.setValorConta((BigDecimal)obj2[1]);
							
							//Data Envio
							subBean.setDataEnvio((String)Util.formatarData((Date)obj2[2]));
							
							//Data Retirada
							subBean.setDataRetirada((String)Util.formatarData((Date)obj2[3]));
							
							//Motivo Retrada
							subBean.setMotivoRetirada((String)obj2[4]);
							
							
							colecaoSubBean.add(subBean);
						}
						
						bean.setArrayJRContas(colecaoSubBean);
					}
					
					retorno.add(bean);
					
				}
				
			}
			
			
		}catch(ErroRepositorioException ex){
			ex.printStackTrace();
			throw new ControladorException("erro.sistema", ex);
		}
		
		
		return retorno;
	}
	
	
	/**
	 * [UC 1256] Retirar Imóveis e Contas das Empresas de Cobrança
	 * 
	 * Metodo que pesquisa a quantidade de comandos que podem ser
	 * retirados das empresas de cobrança
	 * 
	 * @author Raimundo Martins
	 * @date 14/12/2011
	 * */
	
	public Integer pesquisarDadosRetirarImoveisContasEmpresaCobrancaCount(Integer idEmpresa, 
			Date periodoIni, Date periodoFin) throws ControladorException{
		try{
			return this.repositorioCobranca.pesquisarDadosRetirarImoveisContasEmpresaCobrancaCount(idEmpresa, periodoIni, periodoFin);
		}catch(ErroRepositorioException ex){
			ex.printStackTrace();
			throw new ControladorException("erro.sistema", ex);
		}
	}

	/**
	 * [UC1264] Incluir Contas em Cobrança
	 *
	 * @author Mariana Victor
	 * @date 27/12/2011
	 *
	 * @param idLocalidade
	 * @param anoMesArrecadacao
	 * @param idFuncionalidadeIniciada
	 * @throws ControladorException
	 */
	public void incluirContasEmCobranca(Integer idLocalidade,
			Integer anoMesArrecadacao,int idFuncionalidadeIniciada)
			throws ControladorException {
		int idUnidadeIniciada = 0;

		SistemaParametro sistemaParametro = getControladorUtil().pesquisarParametrosDoSistema();
		
		Map<Integer, IncluirContaEmCobrancaHelper> mapHelper = new HashMap<Integer, IncluirContaEmCobrancaHelper>();

		idUnidadeIniciada = getControladorBatch()
				.iniciarUnidadeProcessamentoBatch(idFuncionalidadeIniciada,
						UnidadeProcessamento.LOCALIDADE, idLocalidade);
		try{
			
			// 1. O sistema verifica se é para não calcular a proporcionalidade 
			//  no pagamento da contas de cobrança por resultado
			if (sistemaParametro.getIndicadorCalculaProporcional().compareTo(ConstantesSistema.NAO) == 0) {
				Collection<Object[]> dadosContasParceladas = this.repositorioCobranca
						.pesquisarContasParceladasIncluirCobranca(idLocalidade, anoMesArrecadacao);
				if (dadosContasParceladas != null 
						&& !dadosContasParceladas.isEmpty()) {
					Iterator<Object[]> iteratorContasParceladas = dadosContasParceladas.iterator();
					
					while(iteratorContasParceladas.hasNext()) {
						Object[] dadosConta = (Object[]) iteratorContasParceladas.next();
						
						this.incluirContaCobranca(dadosConta, mapHelper, ConstantesSistema.SIM, idLocalidade);
						
					}
				}
			}
			
			// 2. O sistema verifica se é para incluir as contas pagas a vista 
			//  na relação das contas de cobrança por resultado 
			if (sistemaParametro.getIndicadorIncluirContaEmCobranca().compareTo(ConstantesSistema.SIM) == 0) {
				Collection<Object[]> dadosContasParceladas = this.repositorioCobranca
						.pesquisarContasPagasIncluirCobranca(idLocalidade, anoMesArrecadacao,
							sistemaParametro.getNumeroDiasVencimentoCobrancaResultado());
				
				if (dadosContasParceladas != null 
						&& !dadosContasParceladas.isEmpty()) {
					Iterator<Object[]> iteratorContasParceladas = dadosContasParceladas.iterator();
					
					while(iteratorContasParceladas.hasNext()) {
						Object[] dadosConta = (Object[]) iteratorContasParceladas.next();
						
						this.incluirContaCobranca(dadosConta, mapHelper, ConstantesSistema.NAO, idLocalidade);
						
					}
				}
				
				// 2.2.	Para cada pagamento de conta efetuado no mês da arrecadação 
				Collection<Object[]> dadosContasPagasNaoGeradas = this.repositorioCobranca
						.pesquisarContasPagasNaoGeradasIncluirCobranca(idLocalidade, anoMesArrecadacao);
				
				if (dadosContasPagasNaoGeradas != null 
						&& !dadosContasPagasNaoGeradas.isEmpty()) {
					Iterator<Object[]> iteratorContasPagasNaoGeradas = dadosContasPagasNaoGeradas.iterator();
					
					while(iteratorContasPagasNaoGeradas.hasNext()) {
						Object[] dadosConta = (Object[]) iteratorContasPagasNaoGeradas.next();
						
						Date dataVencimento = (Date) dadosConta[2];
						Date dataPagamento = (Date) dadosConta[3];
						Date dataImplantacao = (Date) dadosConta[4];
						Date dataRetirada = (Date) dadosConta[5];
						
						// 2.2.1.1.	Caso a data do pagamento não esteja válida para o período de cobrança do imóvel
						if (dataPagamento.compareTo(dataImplantacao) < 0
								|| (dataRetirada != null 
									&& dataPagamento.compareTo(dataRetirada) > 0)) {

							//[SB0002 - Obter Id do Motivo de Não Geração] 
							//[SB0003 - Incluir Motivo de Não Geração do Pagamento]
							this.incluirMotivoNaoGeracaoContaPaga(dadosConta, 
								null, 
								MotivoNaoGeracaoCobrancaResultado.DATA_PAGAMENTO_FORA_PERIODO_VALIDADE_COMANDO,
								anoMesArrecadacao);
							
						} else if (sistemaParametro.getNumeroDiasVencimentoCobrancaResultado() != null
								&& dataPagamento.compareTo(Util.adicionarNumeroDiasDeUmaData(
										dataVencimento, sistemaParametro.getNumeroDiasVencimentoCobrancaResultado())) <= 0) {
							// 2.2.1.2.	Caso contrário, caso a quantidade de dias do vencimento foi informada 

							//[SB0002 - Obter Id do Motivo de Não Geração] 
							//[SB0003 - Incluir Motivo de Não Geração do Pagamento]
							this.incluirMotivoNaoGeracaoContaPaga(dadosConta, 
								sistemaParametro.getNumeroDiasVencimentoCobrancaResultado(), 
								MotivoNaoGeracaoCobrancaResultado.DATA_PAGAMENTO_MENOR_IGUAL_DATA_VENCIMENTO_MAIS_QTD_DIAS_INFORMADA,
								anoMesArrecadacao);
							
						}
						
					}
				}
			}
			
			getControladorBatch().encerrarUnidadeProcessamentoBatch(null,
					idUnidadeIniciada, false);

		} catch (Exception e) {
			e.printStackTrace();
			sessionContext.setRollbackOnly();
			getControladorBatch().encerrarUnidadeProcessamentoBatch(e, idUnidadeIniciada, true);
			throw new ControladorException("erro.sistema",e);
		}

		
	}

	/**
	 * [UC1264] Incluir Contas em Cobrança
	 *
	 * [SB0001] - Incluir Contas.
	 *
	 * @author Mariana Victor
	 * @date 27/12/2011
	 *
	 * @param dadosConta
	 * @param mapHelper
	 * @param codigoIncluido
	 */
	private void incluirContaCobranca(Object[] dadosConta, 
			Map<Integer, IncluirContaEmCobrancaHelper> mapHelper, 
			Short codigoIncluido, Integer idLocalidade) throws ErroRepositorioException, ControladorException {
		EmpresaCobrancaConta empresaCobrancaConta = new EmpresaCobrancaConta();
		
		Integer idImovel = (Integer) dadosConta[0];
		Integer idConta = (Integer) dadosConta[1];
		Integer referenciaConta = (Integer) dadosConta[2];
		BigDecimal valorConta = (BigDecimal) dadosConta[3];
		
		IncluirContaEmCobrancaHelper helper = null;
		if (!mapHelper.containsKey(idImovel)) {
			Object[] dadosImovel = this.repositorioCobranca
					.pesquisarDadosImoveisIncluirCobranca(idImovel);
			if (dadosImovel != null) {
				helper = new IncluirContaEmCobrancaHelper();
				helper.setIdEmpresa((Integer) dadosImovel[0]);
				helper.setPercentual((BigDecimal) dadosImovel[1]);
				helper.setIdComando((Integer) dadosImovel[2]);
				helper.setIdOrdemServico((Integer) dadosImovel[3]);
				
				mapHelper.put(idImovel, helper);
			}
		} else {
			helper = mapHelper.get(idImovel);
		}
		
		if (helper != null) {
			Empresa empresa = new Empresa();
			empresa.setId(helper.getIdEmpresa());
			
			ComandoEmpresaCobrancaConta comando = new ComandoEmpresaCobrancaConta();
			comando.setId(helper.getIdComando());
			
			Imovel imovel = new Imovel();
			imovel.setId(idImovel);
			
			Localidade localidade = new Localidade();
			localidade.setId(idLocalidade);
			
			ContaGeral contaGeral = new ContaGeral();
			contaGeral.setId(idConta);
			
			OrdemServico ordemServico = new OrdemServico();
			ordemServico.setId(helper.getIdOrdemServico());
			
			empresaCobrancaConta.setEmpresa(empresa);
			empresaCobrancaConta.setImovel(imovel);
			empresaCobrancaConta.setContaGeral(contaGeral);
			empresaCobrancaConta.setValorOriginalConta(valorConta);
			empresaCobrancaConta.setPercentualEmpresaConta(helper.getPercentual());
			empresaCobrancaConta.setUltimaAlteracao(new Date());
			empresaCobrancaConta.setComandoEmpresaCobrancaConta(comando);
			empresaCobrancaConta.setIndicadorPagamentoValido(ConstantesSistema.NAO);
			empresaCobrancaConta.setOrdemServico(ordemServico);
			empresaCobrancaConta.setAnoMesReferenciaConta(referenciaConta);
			empresaCobrancaConta.setDataEnvioConta(new Date());
			empresaCobrancaConta.setDataRetiradaConta(null);
			empresaCobrancaConta.setMotivoRetirada(null);
			empresaCobrancaConta.setCdIncluido(codigoIncluido);
			empresaCobrancaConta.setLocalidade(localidade);
			
			this.getControladorBatch().inserirObjetoParaBatch(empresaCobrancaConta);
		}
		
	}
	
	/**
	 * [UC0896] Gerar Arquivo Texto das Contas em Cobrança por Empresa
	 *  
	 * Metodo que verifica a quantidade de contas para um determinado comando
	 * 
	 * @author Mariana Victor
	 * @date 09/02/2012
	 * */	
	public Integer pesquisarQuantidadeContasComando(Integer idComando) throws ControladorException {
		try{
			return this.repositorioCobranca.pesquisarQuantidadeContasComando(idComando);
		}catch(ErroRepositorioException ex){
			ex.printStackTrace();
			throw new ControladorException("erro.sistema", ex);
		}
	}
	
	/**
     * [UC0214] Efetuar Parcelamento de Débitos
     * [SB0002] Obter Opções Parcelamento
     * 
     * @author Vivianne Sousa
     * @date 21/05/2012
	 * */	
	public RdLimitacaoGeografica pesquisarRdLimitacaoGeografica(Integer idImovel, Integer idRD) throws ControladorException {
		try{
			Imovel imovel = this.getControladorImovel().pesquisarDadosImovelParcelamento(idImovel);
			
			RdLimitacaoGeografica rdLimitacaoGeografica = this.repositorioCobranca.
					pesquisarRdLimitacaoGeografica(imovel, idRD);
			
			return 	rdLimitacaoGeografica;
			
		}catch(ErroRepositorioException ex){
			ex.printStackTrace();
			throw new ControladorException("erro.sistema", ex);
		}
	}
	/**
	 * [UC1318] Filtrar Motivo de Não Geração Cobrança por Resultado
	 * 
	 * @author Hugo Azevedo
	 * @date 17/04/2012
	 */
	public Collection obterColecaoNaoGeracaoCobrancaResultado(String codigo,
			String descricao, String tipoDescricao, String descricaoAbreviada,
			String indicadorUso, String tipoMotivo,int numeroPagina)  throws ControladorException{
		
		try{
			return this.repositorioCobranca.obterColecaoNaoGeracaoCobrancaResultado(
					codigo, descricao, tipoDescricao, descricaoAbreviada, indicadorUso, tipoMotivo,numeroPagina);
			
		}catch(ErroRepositorioException ex){
			ex.printStackTrace();
			throw new ControladorException("erro.sistema", ex);
		}
		
	}
	
	
	/**
	 * [UC1318] Filtrar Motivo de Não Geração Cobrança por Resultado
	 * 
	 * @author Hugo Azevedo
	 * @date 17/04/2012
	 */
	public Integer obterQtdNaoGeracaoCobrancaResultado(String codigo,
			String descricao, String tipoDescricao, String descricaoAbreviada,
			String indicadorUso, String tipoMotivo)  throws ControladorException{
		
			try{
				return this.repositorioCobranca.obterQtdNaoGeracaoCobrancaResultado(
						codigo, descricao, tipoDescricao, descricaoAbreviada, indicadorUso, tipoMotivo);
				
			}catch(ErroRepositorioException ex){
				ex.printStackTrace();
				throw new ControladorException("erro.sistema", ex);
			}
	}
	
	/**
	 * [UC1319] Manter Motivo de Não Geração Cobrança por Resultado
	 * 
	 * @author Hugo Azevedo
	 * @date 20/04/2012
	 */
	public MotivoNaoGeracaoCobrancaResultado obterMotivoNaoGeracaoCobrancaResultado(
			Integer idMotivoINT) throws ControladorException {
		
		try{
			return this.repositorioCobranca.obterMotivoNaoGeracaoCobrancaResultado(idMotivoINT);
			
		}catch(ErroRepositorioException ex){
			ex.printStackTrace();
			throw new ControladorException("erro.sistema", ex);
		}
		
	}
	
	/**
	 * [UC1319] Manter Motivo de Não Geração Cobrança por Resultado
	 * 
	 * @author Hugo Azevedo
	 * @date 20/04/2012
	 */
	public void atualizarMotivoNaoGeracaoCobrancaResultado(
			MotivoNaoGeracaoCobrancaResultado motivo, Usuario usuarioLogado) throws ControladorException{
    	
    	
    	// ------------ REGISTRAR TRANSAÇÃO ----------------
        RegistradorOperacao registradorOperacao = new RegistradorOperacao(
		    Operacao.OPERACAO_ATUALIZAR_MOTIVO_NAO_GERACAO_COB_RESULTADO,motivo.getId(),
		    motivo.getId(),
		    new UsuarioAcaoUsuarioHelper(usuarioLogado,
		    UsuarioAcao.USUARIO_ACAO_EFETUOU_OPERACAO));

		registradorOperacao.registrarOperacao(motivo);

		getControladorTransacao().registrarTransacao(motivo);
    	
    	getControladorUtil().atualizar(motivo);
		
		// ------------ REGISTRAR TRANSAÇÃO ----------------	
	}

/**
	 * [UC1320] Consultar Motivo de Não Geração Cobrança por Resultado
	 * 
	 * Pesquisa os dados dos comandos
	 * 
	 * @author: Raimundo Martins
	 * @date: 19/04/2012
	 */
	public Collection pesquisarDadosNaoGeracaoImoveisContasComandos(Integer idEmpresa, Date cicloInicial, 
			Date cicloFinal, int pagina) throws ControladorException{
		
		Collection<ConsultarNaoGeracaoImoveisContasComandosHelper> colecaoConsultarNaoGeracaoImoveisContasComandosHelper = null;
		
		try {
			int quantidadeRegistros = 10;
			colecaoConsultarNaoGeracaoImoveisContasComandosHelper = (Collection) repositorioCobranca
					.pesquisarDadosNaoGeracaoImoveisContasComandos(
							idEmpresa, cicloInicial, cicloFinal,
							pagina, quantidadeRegistros);


		} catch (ErroRepositorioException e) {
			throw new ControladorException("erro.sistema", e);
		}
		
		return colecaoConsultarNaoGeracaoImoveisContasComandosHelper;
	}
	
	/**
	 * [UC0870] Gerar Movimento de Contas em Cobrança por Empresa
	 *
	 * @author Rômulo Aurélio
	 * @date 27/04/2012
	 * 
	 * [SB0002] Verificar Registros ja Inseridos
	 */
	
	public Collection obterImovelEmComandoNaoFinalizado(
			Integer idComando) throws ControladorException{
		
			try{
				return this.repositorioCobranca.obterImovelEmComandoNaoFinalizado(idComando);
				
			}catch(ErroRepositorioException ex){
				ex.printStackTrace();
				throw new ControladorException("erro.sistema", ex);
			}
	}
	

	/**
	 * [UC0870] Gerar Movimento de Contas em Cobrança por Empresa
	 *
	 * @author Rômulo Aurélio
	 * @date 27/04/2012
	 * 
	 * [SB0002] Verificar Registros ja Inseridos
	 */
	public void removerContasEmpresaCobrancaConta(Integer idComando) 
			throws ControladorException{
				
				try{
					this.repositorioCobranca.removerContasEmpresaCobrancaConta(idComando);
					
				}catch(ErroRepositorioException ex){
					ex.printStackTrace();
					throw new ControladorException("erro.sistema", ex);
				}
	}
	
	/**
	 * [UC1320] Consultar Motivo de Não Geração Cobrança por Resultado
	 * 
	 * Pesquisa a quantidade de comandos
	 * 
	 * @author: Raimundo Martins
	 * @date: 19/04/2012
	 */
	public Integer pesquisarDadosNaoGeracaoImoveisContasComandosCount(Integer idEmpresa, Date comandoInicial, Date comandoFinal)
			throws ControladorException{			
		Integer retorno = 0;
		try {		
			retorno = repositorioCobranca.pesquisarDadosNaoGeracaoImoveisContasComandosCount(idEmpresa,  comandoInicial,  comandoFinal);		
		}catch (ErroRepositorioException e) {
			throw new ControladorException("erro.sistema", e);
		}			
		return retorno;		
	}
	
	
	
	
	/**
	 * [UC 1320] Consultar Motivo Nao Geracao Cobranca Por Resultado
	 * 
	 * Metodo que pesquisa os motivos de não geração de contas
	 * de cobrança por resultado por imovel
	 * 
	 * @author: Diego Maciel
	 * @date: 30/04/2012
	 * */
	public int pesquisarMotivoNaoGeracaoPorDescricao(String descricao, String codigo) throws ControladorException{
		int retorno = 0;
		try {		
			retorno = repositorioCobranca.pesquisarMotivoNaoGeracaoPorDescricao(descricao,codigo);		
		}catch (ErroRepositorioException e) {
			throw new ControladorException("erro.sistema", e);
		}			
		return retorno;		
	}
	
	/**
	 * [UC0316] Inserir Critério de Cobrança
	 * 
	 * @author Vivianne Sousa
	 * @date 25/05/2012
	 * 
	 * @return
	 * @throws ErroRepositorioException
	 */
	public  Collection<ResolucaoDiretoria> pesquisarResolucaoDiretoriaComIndicadorValidoAcaoCobranca (Integer idRDSelecionada)
			throws ControladorException{
		
		try{
			return this.repositorioCobranca.pesquisarResolucaoDiretoriaComIndicadorValidoAcaoCobranca(idRDSelecionada);
			
		}catch(ErroRepositorioException ex){
			ex.printStackTrace();
			throw new ControladorException("erro.sistema", ex);
		}
}
	
	
	
	/**
	 * [UC 0218] Manter Resolução Diretoria
	 * 
	 * @author Davi Menezes
	 * @date 25/05/2012
	 * 
	 */
	public Collection<RdLimitacaoGeograficaLocalidade> obterRDLimitacaoGeografica(String numeroRD) throws ControladorException{
		try{
			return repositorioCobranca.obterRDLimitacaoGeografica(numeroRD);
		}catch (ErroRepositorioException ex) {
			ex.printStackTrace();
			throw new ControladorException("erro.sistema", ex);
		}
	}
	
	

	/**
	 * [UC1264] Incluir Contas em Cobrança
	 *
	 * [SB0001] - Incluir Contas.
	 *
	 * @author Mariana Victor
	 * @date 27/12/2011
	 *
	 * @param dadosConta
	 * @param mapHelper
	 * @param codigoIncluido
	 */
	private void incluirMotivoNaoGeracaoContaPaga(Object[] dadosConta, 
			Integer numeroDiasVencimento, 
			Integer codigoMotivo,
			Integer anoMesArrecadacao) throws ErroRepositorioException, ControladorException {
		EmpresaCobrancaConta empresaCobrancaConta = new EmpresaCobrancaConta();
		
		Integer idConta = (Integer) dadosConta[0];
		Integer idImovel = (Integer) dadosConta[1];
		Date dataVencimento = (Date) dadosConta[2];
		Date dataPagamento = (Date) dadosConta[3];
		BigDecimal valorPagamento = (BigDecimal) dadosConta[6];
		Integer anoMesRefPgto = (Integer) dadosConta[7];
		Integer anoMesArrPgto = (Integer) dadosConta[8];
		Date dataProcessamento = (Date) dadosConta[9];
		
		MotivoNaoGeracaoCobrancaResultado motivo = repositorioCobranca
				.obterMotivoNaoGeracaoCobrancaResultadoConstanteMotivo(codigoMotivo);
		
		Imovel imovel = new Imovel();
		imovel.setId(idImovel);
		
		ContaGeral conta = new ContaGeral();
		conta.setId(idConta);
				
		PagamentoNaoGeracaoCobrancaResultado pagamentoNaoGeracaoCobrancaResultado = 
				new PagamentoNaoGeracaoCobrancaResultado();
		
		pagamentoNaoGeracaoCobrancaResultado.setMotivoNaoGeracao(motivo);
		pagamentoNaoGeracaoCobrancaResultado.setImovel(imovel);
		pagamentoNaoGeracaoCobrancaResultado.setConta(conta);
		pagamentoNaoGeracaoCobrancaResultado.setNumeroDiasVencimento(numeroDiasVencimento);
		pagamentoNaoGeracaoCobrancaResultado.setDataProcessamentoPagamento(dataProcessamento);
		pagamentoNaoGeracaoCobrancaResultado.setDataPagamento(dataPagamento);
		pagamentoNaoGeracaoCobrancaResultado.setValorPagamento(valorPagamento);
		pagamentoNaoGeracaoCobrancaResultado.setAnoMesReferenciaPagamento(anoMesRefPgto);
		pagamentoNaoGeracaoCobrancaResultado.setAnoMesReferenciaArrecadacao(anoMesArrPgto);
		pagamentoNaoGeracaoCobrancaResultado.setAnoMesReferenciaGeracao(anoMesArrecadacao);
		pagamentoNaoGeracaoCobrancaResultado.setIndicadorAtualizarPagamentos(ConstantesSistema.NAO);
		pagamentoNaoGeracaoCobrancaResultado.setDataNaoGeracao(new Date());
		pagamentoNaoGeracaoCobrancaResultado.setUltimaAlteracao(new Date());
		
		this.getControladorBatch().inserirObjetoParaBatch(pagamentoNaoGeracaoCobrancaResultado);
		
	}
	
	/**
	 * [UC1345] Encerrar Automaticamente Comandos de Cobrança por Resultado
	 * 
	 * 1. O sistema deverá selecionar todos os comandos que possuem data final do ciclo, 
	 *   que ainda não estejam encerrados e que já estejam fora do ciclo de cobrança 
	 * 
	 * @author Mariana Victor
	 * @date 04/06/2012
	 */
	public Collection<Integer> pesquisarIdsComandosFimCiclo()
			throws ControladorException {
		try{
			return repositorioCobranca.pesquisarIdsComandosFimCiclo();
		}catch (ErroRepositorioException ex) {
			ex.printStackTrace();
			throw new ControladorException("erro.sistema", ex);
		}
	}

	/**
	 * [UC1345] Encerrar Automaticamente Comandos de Cobrança por Resultado
	 *
	 * @author Mariana Victor
	 * @created 04/06/2012
	 */
	public void encerrarAutomaticamenteComandosCobResultado(Integer idFuncionalidadeIniciada) 
					throws ControladorException {

		int idUnidadeIniciada = 0;

		try {
			/*
			 * Registrar o início do processamento da Unidade de Processamento
			 * do Batch
			 */
			idUnidadeIniciada = getControladorBatch()
					.iniciarUnidadeProcessamentoBatch(idFuncionalidadeIniciada,
							UnidadeProcessamento.FUNCIONALIDADE, 0);


			FiltroUsuario filtroUsuario = new FiltroUsuario();
			filtroUsuario.adicionarParametro(new ParametroSimples(
				FiltroUsuario.INDICADOR_USUARIO_BATCH, ConstantesSistema.SIM));
			Collection<Usuario> colecaoUsuario = this.getControladorUtil().pesquisar(filtroUsuario, Usuario.class.getName());
			Usuario usuario = (Usuario) Util.retonarObjetoDeColecao(colecaoUsuario);
			

			Collection<Integer> colecaoIdsComandos = this.pesquisarIdsComandosFimCiclo();
			
			if (colecaoIdsComandos != null
					&& !colecaoIdsComandos.isEmpty()) {
				Iterator<Integer> iterator = colecaoIdsComandos.iterator();
				
				System.out.println(
					"Batch ENC. AUTO. COMANDOS DE COBR. POR RESULT. - quantidade de comandos: " 
					+ colecaoIdsComandos.size());
				
				while(iterator.hasNext()) {
					Integer idComando = (Integer) iterator.next();
					
					System.out.println("Batch ENC. AUTO. COMANDOS DE COBR. POR RESULT. - início comando " + idComando);
					
					Integer idCobrancaSituacao = this.repositorioCobranca
							.pesquisarSituacaoCobrancaComando(idComando);
					this.encerrarComandoCobrancaPorEmpresa(
							idFuncionalidadeIniciada, usuario, idComando, idCobrancaSituacao);
					
					System.out.println("Batch ENC. AUTO. COMANDOS DE COBR. POR RESULT. - fim comando " + idComando);
				}
				
			}
			
			getControladorBatch().encerrarUnidadeProcessamentoBatch(null,
					idUnidadeIniciada, false);
			
		} catch (Exception e) {
			e.printStackTrace();
			getControladorBatch().encerrarUnidadeProcessamentoBatch(e, idUnidadeIniciada, true);
            throw new EJBException(e);
		}

	}

	
	
	/**
	 * [UC1321] Gerar Motivos Não Geração de Contas e Imóveis em Cobrança por Empresa
	 * [SB0010] Atualizar Comando de Cobrança
	 * 
	 * @author Hugo Azevedo
	 * @date 02/05/2012
	 */
	public ComandoEmpresaCobrancaConta obterComandoEmpresaCobrancaConta(Integer idComando)  throws ControladorException{
		try{
			
			return this.repositorioCobranca.obterComandoEmpresaCobrancaConta(idComando);
			
		}catch (ErroRepositorioException ex) {	
			ex.printStackTrace();
			throw new ControladorException("erro.sistema", ex);
		}
	}

	
	/**
	 * [UC1320] Consultar Motivo de Não Geração Cobrança por Resultado
	 * 
	 * Método que verifica se os motivos de não geração de cobrança
	 * por resultados foram gerados ou não. Retorna true se foi gerado
	 * false caso contrário
	 * 
	 * @author Raimundo Martins
	 * @date 19/06/2012
	 */
	public boolean motivosGerados(Integer idComando)throws ControladorException{
		try{
			return repositorioCobranca.motivosGerados(idComando);
		}catch (ErroRepositorioException ex) {
			ex.printStackTrace();
			throw new ControladorException("erro.sistema", ex);
		}
	}
	
	private void enviarArquivoTxtContasPagasParceladas(String nomeArquivo, StringBuilder arquivo, 
			Collection<Integer> idsHpcrAtualizar, String emailEmpresa) throws ControladorException {	
		try{
			File leitura = null;
			BufferedWriter out = null;
			
			leitura = new File(nomeArquivo);
			out = new BufferedWriter(new OutputStreamWriter( new FileOutputStream(leitura.getAbsolutePath())));
			out.write(arquivo.toString());
			out.flush();
			out.close();
	
			// 2. Para cada uma dos pagamentos enviados o sistema deverá atualizar 
			//  a tabela de histórico de pagamento de cobrança por resultado:
			for(Integer id : idsHpcrAtualizar){																														
				this.repositorioCobranca.atualizarHistoricoPagamentoCobrancaResultadoEnviado(id);
			}
			
			EnvioEmail envioEmail = getControladorCadastro().pesquisarEnvioEmail(EnvioEmail.GERAR_TXT_OS_CONTAS_PAGAS_PARCELADAS);
			
			String emailRemetente = envioEmail.getEmailRemetente();					
			String emailDestinatario = emailEmpresa + ", " + envioEmail.getEmailReceptor();		
			String tituloMensagem = envioEmail.getTituloMensagem();					
			String mensagem = envioEmail.getCorpoMensagem();
			
			ServicosEmail.enviarMensagemArquivoAnexado(emailDestinatario, emailRemetente, tituloMensagem, "Arquivo Gerado em anexo", leitura);
			
			leitura.delete();
		} catch (Exception ex) {
			ex.printStackTrace();
			throw new ControladorException("erro.sistema", ex);
		}
	}
	
	/**
	 * [UC 1167] Consultar Comandos de Cobrança por Empresa
	 * 
	 * Método que pesquisa as informações de proporcionalidade
	 * por comando
	 * 
	 * @date 20/07/2012
	 * @author Raimundo Martins
	 * */
	public Collection<Object[]> pesquisarInformacoesProporcionalidade(Integer idComando)throws ControladorException{
		try{
			return this.repositorioCobranca.pesquisarInformacoesProporcionalidade(idComando);
		} catch (Exception ex) {
			ex.printStackTrace();
			throw new ControladorException("erro.sistema", ex);
		}
	}
	/**
	 * [UC 1167] Consultar Comandos de Cobrança por Empresa
	 *  
	 * Metodo que verifica a quantidade de imoveis por 
	 * comando
	 * 
	 * @author Raimundo Martins
	 * @date 20/07/2012
	 * */	
	public Integer quantidadeImoveisPorComando(Integer idComando)throws ControladorException{
		try{
			return this.repositorioCobranca.quantidadeImoveisPorComando(idComando);
		} catch (Exception ex) {
			ex.printStackTrace();
			throw new ControladorException("erro.sistema", ex);
		}
	}
	
	/**
	 * RM7928
	 *
	 * @author Rodrigo Cabral
	 * @throws ErroRepositorioException 
	 * @created 24/09/2012
	 */
	public void validarCobrancaAcaoPrecedente(Integer idImovel, CobrancaAcao cobrancaAcao, CobrancaAcao cobrancaAcaoPrecedente) 
					throws ControladorException, ErroRepositorioException {

		boolean validacaoPorItemCobrado = false;
		Integer idDocumentoCobrancaAcaoPrecedente = null;
		Date dataCorrente = new Date();
		
			
			// calcula a data mínima de emissão/realização da ação precedente
			Date dataMinimaEmissaoRealizacaoAcaoPrecente = Util
					.subtrairNumeroDiasDeUmaData(dataCorrente, cobrancaAcao
							.getNumeroDiasMinimoAcaoPrecedente());
			// calcula a data minima de emissão/realização da ação precedente
			// diminuindo o numero de dias da validade
			Date dataEmissaoValidacaoAcaoPrecente = Util
					.subtrairNumeroDiasDeUmaData(dataCorrente,
							cobrancaAcaoPrecedente.getNumeroDiasValidade());

			// Formata adata para a última hora, minutos e segundos
			Calendar dataCalendar = new GregorianCalendar();
			dataCalendar.setTime(dataMinimaEmissaoRealizacaoAcaoPrecente);
			dataCalendar.set(Calendar.HOUR, 23);
			dataCalendar.set(Calendar.MINUTE, 59);
			dataCalendar.set(Calendar.SECOND, 59);
			dataCalendar.set(Calendar.MILLISECOND, 999);
			dataMinimaEmissaoRealizacaoAcaoPrecente = dataCalendar.getTime();

			// Formata a data para a última hora, minutos e segundos
			dataCalendar = new GregorianCalendar();
			dataCalendar.setTime(dataEmissaoValidacaoAcaoPrecente);
			dataCalendar.set(Calendar.HOUR, 00);
			dataCalendar.set(Calendar.MINUTE, 00);
			dataCalendar.set(Calendar.SECOND, 00);
			dataCalendar.set(Calendar.MILLISECOND, 000);
			dataEmissaoValidacaoAcaoPrecente = dataCalendar.getTime();
			
			idDocumentoCobrancaAcaoPrecedente = this.repositorioCobranca
					.pesquisarDocumentoCobrancaRelativoAcaoPrecedente(
						idImovel, cobrancaAcaoPrecedente.getDocumentoTipo().getId(),
					dataMinimaEmissaoRealizacaoAcaoPrecente, dataEmissaoValidacaoAcaoPrecente);
				
				if (!cobrancaAcao.getIndicadorValidarItem().equals(ConstantesSistema.NAO)){
					validacaoPorItemCobrado = true;
				}
				
				if(!validacaoPorItemCobrado){
					
					if (idDocumentoCobrancaAcaoPrecedente == null) {
						throw new ControladorException("atencao.imovel_sem_documento_do_tipo", null, idImovel.toString(),
							cobrancaAcaoPrecedente.getDescricaoCobrancaAcao());
					}
					
				}
				
				// se a ação de cobrança precedente gerar ordem de serviço
				if (cobrancaAcaoPrecedente.getServicoTipo() != null) {

					// Caso exista ação de cobrança para o motivo de encerramento
					if (this.repositorioCobranca.existeCobrancaAcaoMotivoEncerramento(
							cobrancaAcaoPrecedente.getId())) {
						
						idDocumentoCobrancaAcaoPrecedente = this.repositorioCobranca.documentoCobrancaOrdemServicoAcaoPrecedente(
							idImovel,	cobrancaAcaoPrecedente.getServicoTipo().getId(),
							dataMinimaEmissaoRealizacaoAcaoPrecente, cobrancaAcaoPrecedente.getId());
						
						// Caso não exista ordem de serviço, relativa à ação precedente, 
						//  realizada até a data mínima de emissão/realização da ação precedente
						if (idDocumentoCobrancaAcaoPrecedente == null) {
							
							throw new ControladorException("atencao.nao_os_precedente_prazo", null, 
								cobrancaAcaoPrecedente.getDescricaoCobrancaAcao(), idImovel.toString());
							
						}
						
					} else {
						// Caso contrário, ou seja, não exista ação de cobrança para o motivo de encerramento:
						
						idDocumentoCobrancaAcaoPrecedente = this.repositorioCobranca
							.pesquisarDocumentoCobrancaAcaoPrecedente(
								idImovel,	cobrancaAcaoPrecedente.getServicoTipo().getId(),
							AtendimentoMotivoEncerramento.INDICADOR_EXECUCAO_SIM,
							dataMinimaEmissaoRealizacaoAcaoPrecente);
		
			
						// Caso não exista ordem de serviço, relativa a ação precedente
						// passar para próximo imóvel
						if (idDocumentoCobrancaAcaoPrecedente == null) {
							
							throw new ControladorException("atencao.nao_os_precedente_prazo", null, 
								cobrancaAcaoPrecedente.getDescricaoCobrancaAcao(), idImovel.toString());
							
						}
					}
				}

	}
	
	/**
	 * [UC0870] - Gerar Movimento de Contas em Cobranca por Empresa
	 *  
	 * Metodo que lista os setores e quantidades de imoveis que já foram para empresa de cobranca em ordem decrescente,
	 * lista os setores que menos apareceram no comandos de cobranca.
	 * 
	 *  A consulta é feita a View setoresQtdeImoveisCobrancaRes
	 *  
	 *  [RM7313]
	 * 
	 * @author Rômulo Aurélio
	 * @date 26/07/2012
	 * */	
	public Collection recuperarSetoresPorQuantidadeImoveisComandoCobranca() throws ControladorException{
		Collection retorno = null;
		
		try{
			
		Collection colecaoQuantitativosSetores = 
				(Collection) this.repositorioCobranca.recuperarSetoresPorQuantidadeImoveisComandoCobranca();
		
		
		if(colecaoQuantitativosSetores!= null && colecaoQuantitativosSetores.isEmpty()){
			
			Iterator iterator = colecaoQuantitativosSetores.iterator();
			
			while(iterator.hasNext()){
				
				Object[] obj = (Object[]) iterator.next();
				
				QuantidadeImoveisSetorCobrancaResultadoHelper quantidadeImoveisSetorCobrancaResultadoHelper = new QuantidadeImoveisSetorCobrancaResultadoHelper();
				// idSetorComercial
				if(obj[0] != null){
					quantidadeImoveisSetorCobrancaResultadoHelper.setIdSetorComercial((Integer)obj[0]);
				}
				// Quantidade de Imoveis
				if(obj[1] != null){
					quantidadeImoveisSetorCobrancaResultadoHelper.setQuantidadeImoveis((Integer)obj[1]);
				}
				// Quantidade de comandos
				if(obj[2] != null){
					quantidadeImoveisSetorCobrancaResultadoHelper.setQuantidadeComandos((Integer)obj[2]);
				}
				
				retorno.add(quantidadeImoveisSetorCobrancaResultadoHelper);
				
			}
			
		}
		
		return retorno;
		
		} catch (Exception ex) {
			ex.printStackTrace();
			throw new ControladorException("erro.sistema", ex);
		}
		
	}
	
	/**
	 * [UC0870] - Gerar Movimento de Contas em Cobranca por Empresa
	 *  
	 * Metodo que retorna a quantidade de vezes que o imovel informado foi associado a comandos de cobranca
	 * 
	 * @author Rômulo Aurélio
	 * @date 30/07/2012
	 * */	
	public Integer retornarQuantidadeVezesImovelAssociadoComandoCobranca(Integer idImovel) throws ControladorException{
		
		try{
			
			return this.repositorioCobranca.retornarQuantidadeVezesImovelAssociadoComandoCobranca(idImovel);
			
		} catch (Exception ex) {
			ex.printStackTrace();
			throw new ControladorException("erro.sistema", ex);
		}	
			
		 
	}
	
	/**
	 * [UC0870] - Gerar Movimento de Contas em Cobranca por Empresa
	 *  
	 * Metodo que retorna os dados de empresa cobranca conta proporcionalidade
	 * 
	 * @author Rômulo Aurélio
	 * @date 31/07/2012
	 * */	
	public Collection<EmpresaCobrancaContaProporcionalidade> selecionarListaEmpresaCobrancaContaProporcionalidade(
			BigDecimal percentualFaixa, Integer idComando, Integer idImovel) throws ControladorException {

		try {

			Collection<EmpresaCobrancaContaProporcionalidade> retorno = null;

			Collection<Object[]> colecaoEmpresaCobrancaContaProporcionalidade = 
					this.repositorioCobranca.selecionarListaEmpresaCobrancaContaProporcionalidade(
						percentualFaixa, idComando, idImovel);
			
			if(colecaoEmpresaCobrancaContaProporcionalidade !=  null && !colecaoEmpresaCobrancaContaProporcionalidade.isEmpty()){
				
				retorno = new ArrayList<EmpresaCobrancaContaProporcionalidade>();
				
				Iterator iterator = colecaoEmpresaCobrancaContaProporcionalidade.iterator();
				
				while(iterator.hasNext()){
				
					Object[] obj = (Object[]) iterator.next();
					
					EmpresaCobrancaContaProporcionalidade empresaCobrancaContaProporcionalidade = 
							new EmpresaCobrancaContaProporcionalidade();
					
					// [0] idImovel
					Imovel imovel = new Imovel();
					imovel.setId((Integer) obj[0]);
					
					// [11] idLocalidade
					Localidade localidade = new Localidade();
					localidade.setId((Integer) obj[11]);
					imovel.setLocalidade(localidade);
					
					empresaCobrancaContaProporcionalidade.setImovel(imovel);
					
					// [1] idEmpresa
					Empresa empresa = new Empresa();
					empresa.setId((Integer) obj[1]);
					empresaCobrancaContaProporcionalidade.setEmpresa(empresa);
					
					// [2] idComando
					ComandoEmpresaCobrancaConta comandoEmpresaCobrancaConta = new ComandoEmpresaCobrancaConta();
					comandoEmpresaCobrancaConta.setId((Integer) obj[2]);
					empresaCobrancaContaProporcionalidade.setComandoEmpresaCobrancaConta(comandoEmpresaCobrancaConta);

					//[3] idConta
					ContaGeral contaGeral = new ContaGeral();
					contaGeral.setId((Integer) obj[3]);
					empresaCobrancaContaProporcionalidade.setContaGeral(contaGeral);
					
					
					//[4] referenciaConta
					empresaCobrancaContaProporcionalidade.setAnoMesReferenciaConta((Integer)obj[4]);
					
					//[5] valorOriginalConta
					empresaCobrancaContaProporcionalidade.setValorOriginalConta((BigDecimal)obj[5]);
					
					//[6] dataEnvioConta
					empresaCobrancaContaProporcionalidade.setDataEnvioConta((Date) obj[6]);
					
					//[7] dataRetiradaConta
					empresaCobrancaContaProporcionalidade.setDataRetiradaConta((Date) obj[7]);
					
					//[8] indicadorPagamentoValido
					empresaCobrancaContaProporcionalidade.setIndicadorPagamentoValido((Short) obj[8]);
					
					//[9] percentualEmpresa
					empresaCobrancaContaProporcionalidade.setPercentualEmpresaConta((BigDecimal) obj[9]);
					
					//[10] idMotivoRetirada
					MotivoRetiradaCobranca motivoRetiradaCobranca = new MotivoRetiradaCobranca();
					motivoRetiradaCobranca.setId((Integer) obj[10]);
					empresaCobrancaContaProporcionalidade.setMotivoRetirada(motivoRetiradaCobranca);
					
					retorno.add(empresaCobrancaContaProporcionalidade);
					
				}
				
			}
			
			return retorno;

		} catch (Exception ex) {
			ex.printStackTrace();
			throw new ControladorException(	"erro.sistema",
											ex);
		}

	}
	
	/**
	 * [UC0870] Gerar Movimento de Contas em Cobrança por Empresa
	 *
	 * @author Rômulo Aurélio
	 * @date 27/04/2012
	 * 
	 * [SB0002] Verificar Registros ja Inseridos
	 */
	public void removerContasEmpresaCobrancaContaProporcionalidade(Integer idComando) 
			throws ControladorException{
				
				try{
					this.repositorioCobranca.removerContasEmpresaCobrancaContaProporcionalidade(idComando);
					
				}catch(ErroRepositorioException ex){
					ex.printStackTrace();
					throw new ControladorException("erro.sistema", ex);
				}
	}
	
	
	/**
	 * [UC0870] - Gerar Movimento de Contas em Cobranca por Empresa
	 *  
	 * Metodo que retorna os Imoveis para aplicar Proporcionalidade
	 * 
	 * @author Rômulo Aurélio
	 * @date 31/07/2012
	 * */
	
	public Collection<Integer> selecionarListaImoveisProporcionalidade(BigDecimal percentualFaixa, Integer idComando,
			Integer numeroIndice) throws ControladorException {

		try {

			Collection<Integer> retorno = null;

			Collection<Object[]> colecaoImoveisProporcionalidade = this.repositorioCobranca.selecionarListaImoveisProporcionalidade(
				percentualFaixa, idComando, numeroIndice);

			if (colecaoImoveisProporcionalidade != null && !colecaoImoveisProporcionalidade.isEmpty()) {

				retorno = new ArrayList<Integer>();

				Iterator iterator = colecaoImoveisProporcionalidade.iterator();

				while (iterator.hasNext()) {

					Object[] obj = (Object[]) iterator.next();

					// [0] idImovel
					retorno.add((Integer) obj[0]);

				}

			}

			return retorno;
		} catch (Exception ex) {
			ex.printStackTrace();
			throw new ControladorException(	"erro.sistema",
											ex);
		}
	}

		
	/**
	 * [UC 0218] Manter Resolução Diretoria
	 * 
	 * @author Vivianne Sousa
	 * @date 12/11/2012
	 * 
	 */
	public Collection<RdRestricaoUsuario> obterRdRestricaoUsuario(String numeroRD) throws ControladorException{
		try{
			return repositorioCobranca.obterRdRestricaoUsuario(numeroRD);
		}catch (ErroRepositorioException ex) {
			ex.printStackTrace();
			throw new ControladorException("erro.sistema", ex);
		}
	}

	/**
	 * [UC 0218] Manter Resolução Diretoria
	 * 
	 * @author Vivianne Sousa
	 * @date 12/11/2012
	 * 
	 */
	public void removerRdRestricaoUsuario(String numeroRD)throws ControladorException{
		try{
			repositorioCobranca.removerRdRestricaoUsuario(numeroRD);
		}catch (ErroRepositorioException ex) {
			ex.printStackTrace();
			throw new ControladorException("erro.sistema", ex);
		}
	}
	
	
	/**
	 * [UC0214] - Efetuar Parcelamento de Débitos
	 *
	 * @author Vivianne Sousa
	 * @date 13/11/2012
	 *
	 * @return Collection<ResolucaoDiretoria>
	 * @throws ControladorException
	 */
	public Collection<ResolucaoDiretoria> pesquisarResolucaoDiretoriaMaiorDataVigenciaInicioRDAcessoRestrito(
			Imovel imovel, Usuario usuarioLogado)throws ControladorException {

		try {
			//RM8255 - Vivianne Sousa 
			
			Collection colecaoRD = null;
			Collection colecaoRDComLimitacaoGeografica = null;
			
			if(usuarioLogado != null){
			//pesquisa as RD sem limitação geográfica
			if (usuarioLogado != null ){
				colecaoRD = repositorioCobranca.
						pesquisarResolucaoDiretoriaMaiorDataVigenciaInicioRestricaoUsuario(usuarioLogado.getId());
			}
			}
			
			if (imovel != null && usuarioLogado != null){
				//pesquisa as RD com limitação geográfica e com acesso restrito
				colecaoRDComLimitacaoGeografica = repositorioCobranca.
						pesquisarResolucaoDiretoriaComLimitacaoGeograficaPermissaoEspecial(
						imovel,ConstantesSistema.SIM, usuarioLogado.getId()); 
				
				if(colecaoRDComLimitacaoGeografica != null 
						&& !colecaoRDComLimitacaoGeografica.isEmpty()){
					if(colecaoRD == null){
						colecaoRD = colecaoRDComLimitacaoGeografica;
					}else{
						colecaoRD.addAll(colecaoRDComLimitacaoGeografica);
					}
				}
			}
			
			return colecaoRD;
			
			// erro no hibernate
		} catch (ErroRepositorioException ex) {
			// seta o rollback
			sessionContext.setRollbackOnly();
			// levanta a exceção para a próxima camada
			throw new ControladorException("erro.sistema", ex);
		}
	}
	
	/**
	 * Permite consultar comandos de ação de cobrança 
	 * [UC0326] Filtrar Comandos de Ação de Conbrança - Cronograma 
	 * 
	 * [SB0007] Filtrar Reabrir Comandos de Cobrança
	 * 
	 * @author Rômulo Aurélio
	 * @since 26/10/2012
	 */
	public FiltroCobrancaAcaoAtividadeCronograma construirFiltroCobrancaAcaoAtividadeCronogramaReabrir(
			String anoMesPeriodoReferenciaCobrancaInicial,
			String anoMesPeriodoReferenciaCobrancaFinal,
			String[] grupoCobranca, String[] acaoCobranca,
			String dataPeriodoEncerramentoComandoInicial,
			String dataPeriodoEncerramentoComandoFinal)
			throws ControladorException {

		FiltroCobrancaAcaoAtividadeCronograma filtroCobrancaAcaoAtividadeCronograma = new FiltroCobrancaAcaoAtividadeCronograma();

		boolean peloMenosUmParametroInformado = false;

		// validar Período de Referência da Cobrança
		// [FS0001] - Validar Referência
		// [FS0002] - Verificar referência final menor que referência inicial
		this.getControladorUtil().validarAnoMesInicialFinalPeriodo(
				anoMesPeriodoReferenciaCobrancaInicial,
				anoMesPeriodoReferenciaCobrancaFinal,
				"Período de Referência da Cobrança Inicial",
				"Período de Referência da Cobrança Final",
				"atencao.referencia.final.menor.referencia.inicial");

		// Período de Referência da Cobrança
		if ((anoMesPeriodoReferenciaCobrancaInicial != null && !anoMesPeriodoReferenciaCobrancaInicial
				.equals(""))
				&& (anoMesPeriodoReferenciaCobrancaFinal != null && !anoMesPeriodoReferenciaCobrancaFinal
						.equals(""))) {

			peloMenosUmParametroInformado = true;

			String anoInicial = anoMesPeriodoReferenciaCobrancaInicial
					.substring(3, 7);
			String mesInicial = anoMesPeriodoReferenciaCobrancaInicial
					.substring(0, 2);

			String anoFinal = anoMesPeriodoReferenciaCobrancaFinal.substring(3,
					7);
			String mesFinal = anoMesPeriodoReferenciaCobrancaFinal.substring(0,
					2);

			Intervalo intervalo = new Intervalo(
					FiltroCobrancaAcaoAtividadeCronograma.COBRANCA_GRUPO_CRONOGRAMA_MES_MES_ANO,
					anoInicial + mesInicial, anoFinal + mesFinal);

			filtroCobrancaAcaoAtividadeCronograma.adicionarParametro(intervalo);

		}

		// grupo cobrança
		if (grupoCobranca != null && grupoCobranca.length > 0) {
			peloMenosUmParametroInformado = true;

			int i = 0;
			if (grupoCobranca != null) {

				while (i < grupoCobranca.length) {

					if (!grupoCobranca[i].equals("")) {
						peloMenosUmParametroInformado = true;
						if (i + 1 < grupoCobranca.length) {
							filtroCobrancaAcaoAtividadeCronograma
									.adicionarParametro(new ParametroSimples(
											FiltroCobrancaAcaoAtividadeCronograma.COBRANCA_GRUPO_CRONOGRAMA_MES_COBRANCA_GRUPO_ID,
											grupoCobranca[i],
											ConectorOr.CONECTOR_OR,
											(grupoCobranca.length)));
						} else {
							filtroCobrancaAcaoAtividadeCronograma
									.adicionarParametro(new ParametroSimples(
											FiltroCobrancaAcaoAtividadeCronograma.COBRANCA_GRUPO_CRONOGRAMA_MES_COBRANCA_GRUPO_ID,
											grupoCobranca[i]));
						}
					}

					i++;
				}

			}
		}

		// açao cobrança
		if (acaoCobranca != null && acaoCobranca.length > 0) {
			peloMenosUmParametroInformado = true;
			int i = 0;
			if (acaoCobranca != null) {

				while (i < acaoCobranca.length) {

					if (!acaoCobranca[i].equals("")) {
						peloMenosUmParametroInformado = true;
						if (i + 1 < acaoCobranca.length) {
							filtroCobrancaAcaoAtividadeCronograma
									.adicionarParametro(new ParametroSimples(
											FiltroCobrancaAcaoAtividadeCronograma.COBRANCA_ACAO_CRONOGRAMA_COBRANCA_ACAO_ID,
											acaoCobranca[i],
											ConectorOr.CONECTOR_OR,
											(acaoCobranca.length)));
						} else {
							filtroCobrancaAcaoAtividadeCronograma
									.adicionarParametro(new ParametroSimples(
											FiltroCobrancaAcaoAtividadeCronograma.COBRANCA_ACAO_CRONOGRAMA_COBRANCA_ACAO_ID,
											acaoCobranca[i]));
						}
					}

					i++;
				}

			}
		}

		// validar Período de Previsão do Comando
		// [FS0004] - Validar Data
		// [FS0005] - Verificar data final menor que data inicial
		this.getControladorUtil().verificarDataInicialFinalPeriodo(
				dataPeriodoEncerramentoComandoInicial,
				dataPeriodoEncerramentoComandoFinal,
				"Período de Encerramento do Comando Inicial",
				"Período de Encerramento do Comando Final",
				"atencao.data_final_periodo.anterior.data_inicial_periodo");

		// Período de Previsão do Comando
		if ((dataPeriodoEncerramentoComandoInicial != null && !dataPeriodoEncerramentoComandoInicial
				.equals(""))
				&& (dataPeriodoEncerramentoComandoFinal != null && !dataPeriodoEncerramentoComandoFinal
						.equals(""))) {

			peloMenosUmParametroInformado = true;

			String anoInicial = dataPeriodoEncerramentoComandoInicial.substring(6,
					10);
			String mesInicial = dataPeriodoEncerramentoComandoInicial.substring(3,
					5);
			String diaInicial = dataPeriodoEncerramentoComandoInicial.substring(0,
					2);

			String anoFinal = dataPeriodoEncerramentoComandoFinal.substring(6, 10);
			String mesFinal = dataPeriodoEncerramentoComandoFinal.substring(3, 5);
			String diaFinal = dataPeriodoEncerramentoComandoFinal.substring(0, 2);

			Calendar periodoInicial = new GregorianCalendar();
			periodoInicial.set(Calendar.DATE, new Integer(diaInicial)
					.intValue());
			periodoInicial.set(Calendar.MONTH, (new Integer(mesInicial)
					.intValue() - 1));
			periodoInicial.set(Calendar.YEAR, new Integer(anoInicial)
					.intValue());
			periodoInicial.set(Calendar.HOUR_OF_DAY, 00);
			periodoInicial.set(Calendar.MINUTE, 00);
			periodoInicial.set(Calendar.SECOND, 00);

			Calendar periodoFinal = new GregorianCalendar();
			periodoFinal.set(Calendar.DATE, new Integer(diaFinal).intValue());
			periodoFinal.set(Calendar.MONTH,
					(new Integer(mesFinal).intValue() - 1));
			periodoFinal.set(Calendar.YEAR, new Integer(anoFinal).intValue());
			periodoFinal.set(Calendar.HOUR_OF_DAY, 23);
			periodoFinal.set(Calendar.MINUTE, 59);
			periodoFinal.set(Calendar.SECOND, 59);

			
			Intervalo intervalo = new Intervalo(
					FiltroCobrancaAcaoAtividadeCronograma.REALIZACAO,
					periodoInicial, periodoFinal);

			filtroCobrancaAcaoAtividadeCronograma.adicionarParametro(intervalo);
		}

		filtroCobrancaAcaoAtividadeCronograma.adicionarParametro(new ParametroSimples(
			FiltroCobrancaAcaoAtividadeCronograma.COBRANCA_ATIVIDADE, CobrancaAtividade.ENCERRAR));
		filtroCobrancaAcaoAtividadeCronograma.adicionarParametro(
			new ParametroNaoNulo(FiltroCobrancaAcaoAtividadeCronograma.REALIZACAO));
		
		
		// Erro caso o usuário mandou filtrar sem nenhum parâmetro
		if (!peloMenosUmParametroInformado) {
			throw new ControladorException(
					"atencao.filtro.nenhum_parametro_informado");

		}
		filtroCobrancaAcaoAtividadeCronograma
				.adicionarCaminhoParaCarregamentoEntidade(FiltroCobrancaAcaoAtividadeCronograma.COBRANCA_ATIVIDADE);
		filtroCobrancaAcaoAtividadeCronograma
				.adicionarCaminhoParaCarregamentoEntidade(FiltroCobrancaAcaoAtividadeCronograma.COBRANCA_GRUPO_CRONOGRAMA_MES);
		filtroCobrancaAcaoAtividadeCronograma
				.adicionarCaminhoParaCarregamentoEntidade(FiltroCobrancaAcaoAtividadeCronograma.COBRANCA_GRUPO_CRONOGRAMA_MES_COBRANCA_GRUPO);
		filtroCobrancaAcaoAtividadeCronograma
				.adicionarCaminhoParaCarregamentoEntidade(FiltroCobrancaAcaoAtividadeCronograma.COBRANCA_ACAO_CRONOGRAMA_COBRANCA_ACAO);

		return filtroCobrancaAcaoAtividadeCronograma;
	}
	
	/**
	 * [UC1384] Reabrir Comando de Atividade de Ação de Cobrança
	 * [IT0001] Apresenta Comandos de Ação de Cobrança do Cronograma
	 * 
	 * @author Hugo Azevedo
	 * @date 29/10/2012
	 * 
	 */
	public Collection<ReabrirComandoAtividadeAcaoCobrancaHelper> obterComandosAcaoCobrancaCronogramaReabrir(Collection<Integer> colecaoIdsComando) throws ControladorException{
		
		Collection<ReabrirComandoAtividadeAcaoCobrancaHelper> retorno = new ArrayList<ReabrirComandoAtividadeAcaoCobrancaHelper>();
		
		try{
			//Pesquisa os comandos de ação de cobrança do cronograma
			Collection<Object[]> colecaoComandos = this.repositorioCobranca.obterComandosAcaoCobrancaCronogramaReabrir(colecaoIdsComando);
			
			//1. O sistema apresenta a lista dos comandos de ação de cobrança do cronograma
			Iterator it = colecaoComandos.iterator();
			while(it.hasNext()){
				Object[] obj = (Object[])it.next();
				ReabrirComandoAtividadeAcaoCobrancaHelper helper = new ReabrirComandoAtividadeAcaoCobrancaHelper();
				
				//ID
				helper.setIdAtividade(((Integer)obj[0]).toString());
				
				//1.2. Grupo de Cobrança
				helper.setGrupoCobranca((String)obj[1]);
				
				//1.3. Referência da Cobrança
				helper.setReferenciaCobranca(Util.formatarAnoMesParaMesAno((Integer)obj[2]));
				
				//1.4. Ação de Cobrança
				helper.setAcaoCobranca((String)obj[3]);
				
				//1.5. Data do Encerramento
				helper.setDataEncerramento(
						Util.formatarData((Date)obj[4]));
				
				//1.6. Qtd de OS
				helper.setQtdOS(((Integer)obj[6]).toString());
				
				retorno.add(helper);
				
			}
			
		}catch(ErroRepositorioException ex){
			ex.printStackTrace();
			throw new ControladorException("erro.sistema", ex);
		}
		
		return retorno;
	}
	
	/**
	 * [UC1384] Reabrir Comando de Atividade de Ação de Cobrança
	 * [IT0002] Apresenta Comandos de Ação de Cobrança Eventuais
	 * 
	 * @author Hugo Azevedo
	 * @date 29/10/2012
	 * 
	 */
	public Collection<ReabrirComandoAtividadeAcaoCobrancaHelper> obterComandosAcaoCobrancaEventualReabrir(Collection<Integer> colecaoIdsComando) throws ControladorException{
		
		Collection<ReabrirComandoAtividadeAcaoCobrancaHelper> retorno = new ArrayList<ReabrirComandoAtividadeAcaoCobrancaHelper>();
		
		try{
			//Pesquisa os comandos de ação de cobrança do cronograma
			Collection<Object[]> colecaoComandos = this.repositorioCobranca.obterComandosAcaoCobrancaEventualReabrir(colecaoIdsComando);
			
			//1. O sistema apresenta a lista dos comandos de ação de cobrança do cronograma
			Iterator it = colecaoComandos.iterator();
			while(it.hasNext()){
				Object[] obj = (Object[])it.next();
				ReabrirComandoAtividadeAcaoCobrancaHelper helper = new ReabrirComandoAtividadeAcaoCobrancaHelper();
				
				//ID
				helper.setIdAtividade(((Integer)obj[0]).toString());
				
				//1.2. Descrição do comando
				helper.setDescricaoComando((String)obj[1]);
				
				//1.3. Ação de Cobrança
				helper.setAcaoCobranca((String)obj[2]);
				
				//1.4. Data do Encerramento
				helper.setDataEncerramento(Util.formatarData((Date)obj[3]));
				
				//1.5. Qtd de OS
				helper.setQtdOS(((Integer)obj[4]).toString());
				
				retorno.add(helper);
				
			}
			
		}catch(ErroRepositorioException ex){
			ex.printStackTrace();
			throw new ControladorException("erro.sistema", ex);
		}
		
		return retorno;
	}
	
	/**
	 * [UC1384] Reabrir Comando de Atividade de Ação de Cobrança
	 * [IT0004] Reabrir Comandos Eventual
	 * 
	 * @author Hugo Azevedo
	 * @date 31/10/2012
	 * 
	 */
	public void reabrirComandoAtividadeAcaoCobrancaEventual(String[] idsSelecionados, Date novaDataEncerramento) throws ControladorException{
		
		Collection colecaoIds = new ArrayList();
		Collections.addAll(colecaoIds,idsSelecionados);
		
		try{
			//1. O sistema reabre os comandos de acordo com as seguintes regras, para cada comando selecionado
			Collection<Object[]> colecaoIdsSelecionados = this.repositorioCobranca.obterComandosAcaoCobrancaEventualReabrir(colecaoIds);
			
			Iterator it = colecaoIdsSelecionados.iterator();
			while(it.hasNext()){
				
				Object[] obj = (Object[])it.next();
				
				//   1.1. Caso o comando tenha OS encerradas por decurso de prazo (coluna "Qtd. OS" com valor diferente de zero)
				if(((Integer)obj[4]).intValue() != 0){
					
					//1.1.1. Excluir as unidades de encerramento das ordens de serviço, encerradas por decurso de prazo
					this.repositorioCobranca.excluirUnidadesEncerramentoOSDecursoPrazoEventual((Integer)obj[0]);
					
					//1.1.2. Reabrir essas ordens de serviços
					this.repositorioCobranca.reabrirOrdensServiçoDecursoPrazoEventual((Integer)obj[0]);
					
					//1.1.3. Reabrir os documentos de cobrança associados a essas ordens de serviço
					this.repositorioCobranca.reabrirDocumentosCobrancaOrdensServicoDecursoPrazoEventual((Integer)obj[0]);
					
					//1.1.4. E reabrir o comando de cobrança
					this.repositorioCobranca.reabrirComandoCobrancaDecursoPrazoEventual((Integer)obj[0], novaDataEncerramento);
				}
				
			}
			
		
		}catch(ErroRepositorioException ex){
			ex.printStackTrace();
			throw new ControladorException("erro.sistema", ex);
		}
		
		
	}


	
	/**
	 * [UC0326] Filtrar Comandos de Ação de Cobrança
	 * 
	 * @author Rômulo Aurélio
	 * @date 26/11/2012
	 * 
	 */
	public Collection consultarComandosAtividadeCronograma(String periodoReferenciaCobrancaInicial,
			String periodoReferenciaCobrancaFinal, String[] grupoCobranca, String[] acaoCobranca,
			String periodoEncerramentoComandoInicial, String periodoEncerramentoComandoFinal) throws ControladorException {


		boolean peloMenosUmParametroInformado = false;
		
		
		// validar Período de Encerramento do Comando
		// [FS0004] - Validar Data
		// [FS0005] - Verificar data final menor que data inicial
		this.getControladorUtil().verificarDataInicialFinalPeriodo(
			periodoEncerramentoComandoInicial, periodoEncerramentoComandoFinal,
				"Período de Encerramento do Comando Inicial", "Período de Encerramento do Comando Final",
				"atencao.data_final_periodo.anterior.data_inicial_periodo");

		Date periodoInicial = null;
		Date periodoFinal = null;
		
		// Período do Comando
		if ((periodoEncerramentoComandoInicial != null && !periodoEncerramentoComandoInicial
				.equals(""))
				&& (periodoEncerramentoComandoFinal != null && !periodoEncerramentoComandoFinal
						.equals(""))) {

			peloMenosUmParametroInformado = true;

			periodoInicial = Util.converteStringParaDate(periodoEncerramentoComandoInicial);
			periodoFinal = Util.converteStringParaDate(periodoEncerramentoComandoFinal);

			if(periodoFinal.compareTo(Util.adicionarNumeroDiasDeUmaData(periodoInicial, 30)) > 0){
				throw new ControladorException("atencao.data_diferenca_data_maior_dias", null, 
					"Período de Encerramento do Comando Inicial - " + periodoEncerramentoComandoInicial + " - ", 
					"Período de Encerramento do Comando Final - " + periodoEncerramentoComandoFinal + " - ",
					" 30 ");
			}
		}
		
		if(periodoReferenciaCobrancaInicial !=null && periodoReferenciaCobrancaFinal !=null
				&& !periodoReferenciaCobrancaInicial.equals("") && !periodoReferenciaCobrancaFinal.equals("")){
			peloMenosUmParametroInformado = true;
		}
		
		
		if(grupoCobranca !=null && grupoCobranca.length >0 
				&& !grupoCobranca[0].equals("-1")){
			peloMenosUmParametroInformado = true;
		}
		
		if(acaoCobranca !=null && acaoCobranca.length> 0 
				&& !acaoCobranca[0].equals("-1")){
			peloMenosUmParametroInformado = true;
		}
		
		// Erro caso o usuário mandou filtrar sem nenhum parâmetro
		if (!peloMenosUmParametroInformado) {
			throw new ControladorException(
					"atencao.filtro.nenhum_parametro_informado");
		}

		Collection colecaoIdsComandos = new ArrayList();
		
			try {
				colecaoIdsComandos = repositorioCobranca.consultarComandosAtividadeCronograma(
					periodoReferenciaCobrancaInicial, periodoReferenciaCobrancaFinal, 
					grupoCobranca, acaoCobranca, 
					periodoInicial, 
					periodoFinal);
			} catch (ErroRepositorioException e) {
				e.printStackTrace();
				throw new ControladorException("erro.sistema", e);
			}
		
		
		return colecaoIdsComandos;
	}
	
	/**
	 * [UC0326] Filtrar Comandos de Ação de Cobrança
	 * 
	 * @author Rômulo Aurélio
	 * @date 26/11/2012
	 * 
	 */
	public Collection consultarComandosAtividadeCronogramaEventual(
			String[] grupoCobranca, 
			String[] acaoCobranca,
			String periodoEncerramentoComandoInicial, 
			String periodoEncerramentoComandoFinal,
			String idCriterio,
			String dataEmissaoInicio,
			String dataEmissaoFim
			) throws ControladorException {


		boolean peloMenosUmParametroInformado = false;
		
		
		// validar Período de Encerramento do Comando
		// [FS0004] - Validar Data
		// [FS0005] - Verificar data final menor que data inicial
		this.getControladorUtil().verificarDataInicialFinalPeriodo(
			periodoEncerramentoComandoInicial, periodoEncerramentoComandoFinal,
				"Período de Encerramento do Comando Inicial", "Período de Encerramento do Comando Final",
				"atencao.data_final_periodo.anterior.data_inicial_periodo");

		Date periodoInicial = null;
		Date periodoFinal = null;
		
		// Período do Comando
		if ((periodoEncerramentoComandoInicial != null && !periodoEncerramentoComandoInicial
				.equals(""))
				&& (periodoEncerramentoComandoFinal != null && !periodoEncerramentoComandoFinal
						.equals(""))) {

			peloMenosUmParametroInformado = true;

			periodoInicial = Util.converteStringParaDate(periodoEncerramentoComandoInicial);
			periodoFinal = Util.converteStringParaDate(periodoEncerramentoComandoFinal);
			
			if(periodoFinal.compareTo(Util.adicionarNumeroDiasDeUmaData(periodoInicial, 30)) > 0){
				throw new ControladorException("atencao.data_diferenca_data_maior_dias", null, 
					"Período de Encerramento do Comando Inicial - " + periodoEncerramentoComandoInicial + " - ", 
					"Período de Encerramento do Comando Final - " + periodoEncerramentoComandoFinal + " - ",
					" 30 ");
			}
		}
		
		if(grupoCobranca !=null && grupoCobranca.length >0 
				&& !grupoCobranca[0].equals("-1")){
			peloMenosUmParametroInformado = true;
		}
		
		if(acaoCobranca !=null && acaoCobranca.length> 0 
				&& !acaoCobranca[0].equals("-1")){
			peloMenosUmParametroInformado = true;
		}
		
			
		if(idCriterio != null){
			peloMenosUmParametroInformado = true;
		}
		
		
		
		Date emissaoInicial = null;
		Date emissaoFinal = null;
		
		// Data de Emissao
		
		if ((dataEmissaoInicio != null && !dataEmissaoInicio
				.equals(""))
				&& (dataEmissaoFim != null && !dataEmissaoFim
						.equals(""))) {

			peloMenosUmParametroInformado = true;

			emissaoInicial = Util.converteStringParaDate(dataEmissaoInicio);
			emissaoFinal = Util.converteStringParaDate(dataEmissaoFim);
			
		}
		
		
		
		// Erro caso o usuário mandou filtrar sem nenhum parâmetro
		if (!peloMenosUmParametroInformado) {
			throw new ControladorException(
					"atencao.filtro.nenhum_parametro_informado");
		}

		Collection colecaoIdsComandos = new ArrayList();
		
			try {
				colecaoIdsComandos = repositorioCobranca.consultarComandosAtividadeCronogramaEventual(
					grupoCobranca, 
					acaoCobranca, 
					periodoInicial,
					periodoFinal,
					idCriterio,
					emissaoInicial, 
					emissaoFinal);
			} catch (ErroRepositorioException e) {
				e.printStackTrace();
				throw new ControladorException("erro.sistema", e);
			}
		
		
		return colecaoIdsComandos;
	}	
	
	/**
	 * [UC0203] - Cosultar Debitos
	 *  
	 * [SB0006] - Exibir Conta
	 * 
	 * @author Anderson Cabral
	 * @date 05/12/2012
	 * @throws ControladorException
	 * */			
	public Collection<Conta> pesquisarContasClienteImovel(Integer idCliente, Integer idImovel) 
			throws ControladorException{
				
				try{
					return	this.repositorioCobranca.pesquisarContasClienteImovel(idCliente, idImovel);
					
				}catch(ErroRepositorioException ex){
					ex.printStackTrace();
					throw new ControladorException("erro.sistema", ex);
				}
	}
	
	/**
	 * 
	 * [UC0243] - Inserir Comando Ação de Cobrança
	 * [SB0007] - Inserir cobranca acao atividade comando
	 * 
	 * @author Hugo Azevedo
	 * @date 25/09/2012
	 * 
	 */
	public Collection obterImoveisComandoAtividadeImovel(Integer idImovel, Integer idComando) throws ControladorException {	
		try{
			return repositorioCobranca.obterImoveisComandoAtividadeImovel(idImovel, idComando);	
		} catch (Exception ex) {
			ex.printStackTrace();
			throw new ControladorException(	"erro.sistema",
											ex);
		}
	}
	

	/**
	 * [UC0870] Gerar Movimento de Contas em Cobrança por Empresa
	 * 
	 * Método que pesquisa se o comando possui setores associados
	 * na tabela COBRANCA.CMD_EMPR_COBR_CONTA_ACCO 
	 * 
	 * @author Rômulo Aurélio
	 * @date 17/10/2011
	 * 
	 * */
	public Collection<CobrancaAcao> pesquisarComandoEmpresaCobrancaContaAcaoCobranca(Integer idComando)
			throws ControladorException{
		try{
			return this.repositorioCobranca.pesquisarComandoEmpresaCobrancaContaAcaoCobranca(idComando);
		}catch(ErroRepositorioException ex){
			ex.printStackTrace();
			throw new ControladorException("erro.sistema", ex);
		}
	}
	
	
	/**
	 * [UC0203] - Cosultar Debitos
	 *  
	 * [SB0006] -  Exibir Guia de Pagamento de Clientes imovel historico
	 * 
	 * @author Anderson Cabral
	 * @date 05/12/2012
	 * @throws ErroRepositorioException
	 * */			
	public Collection<GuiaPagamento> pesquisarGuiasPagamentoClienteImovel(Integer idCliente, Integer idImovel)
			throws ControladorException{
				
				try{
					return	this.repositorioCobranca.pesquisarGuiasPagamentoClienteImovel(idCliente, idImovel);
					
				}catch(ErroRepositorioException ex){
					ex.printStackTrace();
					throw new ControladorException("erro.sistema", ex);
				}
	}
	
	
	/**
	 * [UC0214] - Efetuar Parcelamento de Débitos
	 * [FS0030] - Verificar se RD pode ser usado para o valor do débito do imóvel.
	 *
	 * @author Vivianne Sousa
	 * @date 22/11/2012
	 *
	 * @throws ControladorException
	 */
	public void verificarRDUsadaValorDebito(BigDecimal valorDebito, 
			Integer idResolucaoDiretoria)throws ControladorException {

		//RM8248 - Vivianne Sousa 
		FiltroResolucaoDiretoria filtroResolucaoDiretoria = new FiltroResolucaoDiretoria();
		filtroResolucaoDiretoria.adicionarParametro(new ParametroSimples(
					FiltroResolucaoDiretoria.CODIGO, idResolucaoDiretoria));

		Collection colecaoRD = getControladorUtil().pesquisar(filtroResolucaoDiretoria, ResolucaoDiretoria.class.getName());
		ResolucaoDiretoria rd = (ResolucaoDiretoria) Util.retonarObjetoDeColecao(colecaoRD);
		
		if(rd.getValorDebitoMinimo() != null && !rd.getValorDebitoMinimo().equals("")){
			if(rd.getValorDebitoMinimo().compareTo(valorDebito) == 1){
				throw new ControladorException("atencao.rd.valor.minimo", null, 
						Util.formatarMoedaReal(rd.getValorDebitoMinimo()));
			}
		}

		if(rd.getValorDebitoMaximo() != null && !rd.getValorDebitoMaximo().equals("")){
			if(rd.getValorDebitoMaximo().compareTo(valorDebito) == -1){
				throw new ControladorException("atencao.rd.valor.maximo", null, 
						Util.formatarMoedaReal(rd.getValorDebitoMaximo()));
			}
		}	
	
	}
	
	/**
	 * [UC0870] GerarMovimentoContasEmCobrancaPorEmpresa
	 *
	 * @author Raphael Rossiter
	 * @date 15/02/2013
	 *
	 * @throws ControladorException
	 */
	public void inserirColecaoEmpresaCobrancaContaSemTransacao(
			Collection<? extends Object> colecaoObjetos)
			throws ControladorException {
		
		try {
			if (colecaoObjetos != null && !colecaoObjetos.isEmpty()) {
				Iterator iter = colecaoObjetos.iterator();
				//int count = 0;

				
				while (iter.hasNext()) {
					Object element = (Object) iter.next();

					repositorioCobranca.inserirEmpresaCobrancaConta((EmpresaCobrancaConta) element);
					//count++;
					
					//System.out.println("INSERINDO: " + count + " / " + colecaoObjetos.size());
				}
			}
		} catch (ErroRepositorioException e) {
			e.printStackTrace();
			throw new ControladorException("erro.sistema", e);
		}
	}
	
	/**
	 * [UC0870] GerarMovimentoContasEmCobrancaPorEmpresa
	 *
	 * @author Raphael Rossiter
	 * @date 15/02/2013
	 *
	 * @throws ControladorException
	 */
	public void inserirColecaoEmpresaCobrancaContaProporcionalidadeSemTransacao(
			Collection<? extends Object> colecaoObjetos)
			throws ControladorException {
		
		try {
			if (colecaoObjetos != null && !colecaoObjetos.isEmpty()) {
				Iterator iter = colecaoObjetos.iterator();
				int count = 0;
				
				while (iter.hasNext()) {
					Object element = (Object) iter.next();

					repositorioCobranca.inserirEmpresaCobrancaContaProporcionalidade((EmpresaCobrancaContaProporcionalidade) element);
					count++;
					
					System.out.println("INSERINDO: " + count + " / " + colecaoObjetos.size());
				}
			}
		} catch (ErroRepositorioException e) {
			e.printStackTrace();
			throw new ControladorException("erro.sistema", e);
		}
	}
	
	
	/**
	 * [UC0870] Gerar Movimento de Contas em Cobrança por Empresa
	 *
	 * @author Raphael Rossiter
	 * @date 18/02/2013
	 * 
	 * [SB0002] Verificar Registros ja Inseridos
	 */
	public void removerComandoEmpresaCobrancaContaImovel(Integer idComando) throws ControladorException{
				
		try{
			this.repositorioCobranca.removerComandoEmpresaCobrancaContaImovel(idComando);
			
		}catch(ErroRepositorioException ex){
			ex.printStackTrace();
			throw new ControladorException("erro.sistema", ex);
		}
	}
	
	/**
	 * [UC0870] Gerar Movimento de Contas em Cobrança por Empresa
	 *
	 * @author Raphael Rossiter
	 * @date 18/02/2013
	 * 
	 * [SB0002] Verificar Registros ja Inseridos
	 */
	public void removerComandoEmpresaCobrancaContaConta(Integer idComando) throws ControladorException{
				
		try{
			this.repositorioCobranca.removerComandoEmpresaCobrancaContaConta(idComando);
			
		}catch(ErroRepositorioException ex){
			ex.printStackTrace();
			throw new ControladorException("erro.sistema", ex);
		}
	}
	
	/**
	 * [UC0870] Gerar Movimento de Contas em Cobran?a por Empresa
	 * 
	 * @author Raphael Rossiter
	 * @date 18/02/2013
	 */
	public void inserirComandoEmpresaCobrancaContaImovel(
			ComandoEmpresaCobrancaContaHelper comandoEmpresaCobrancaContaHelper,
			boolean percentualInformado, SistemaParametro sistemaParametro, Integer quantidadeMenorFaixa) throws ControladorException {
		try {
			
			repositorioCobranca.inserirComandoEmpresaCobrancaContaImovel(comandoEmpresaCobrancaContaHelper, percentualInformado, sistemaParametro, quantidadeMenorFaixa);
			
		} catch (ErroRepositorioException e) {
			e.printStackTrace();
			throw new ControladorException("erro.sistema", e);
		}
	}
	
	/**
	 * [UC0870] Gerar Movimento de Contas em Cobran?a por Empresa
	 * 
	 * @author Raphael Rossiter
	 * @date 18/02/2013
	 */
	public void inserirComandoEmpresaCobrancaContaImovelParcial(
			ComandoEmpresaCobrancaContaHelper comandoEmpresaCobrancaContaHelper, boolean percentualInformado) throws ControladorException {
		try {
			
			repositorioCobranca.inserirComandoEmpresaCobrancaContaImovelParcial(comandoEmpresaCobrancaContaHelper, percentualInformado);
			
		} catch (ErroRepositorioException e) {
			e.printStackTrace();
			throw new ControladorException("erro.sistema", e);
		}
	}
	
	/**
	 * [UC0870] Gerar Movimento de Contas em Cobrança por Empresa
	 *
	 * @author Raphael Rossiter
	 * @date 18/02/2013
	 * 
	 * [SB0002] Verificar Registros ja Inseridos
	 */
	public void removerComandoEmpresaCobrancaContaImovelParcial(Integer idComando) throws ControladorException{
				
		try{
			this.repositorioCobranca.removerComandoEmpresaCobrancaContaImovelParcial(idComando);
			
		}catch(ErroRepositorioException ex){
			ex.printStackTrace();
			throw new ControladorException("erro.sistema", ex);
		}
	}

/**
	 * [UC1054] Gerar Ordem de Corte
	 * 
	 * @author Hugo Azevedo
	 * @date 22/02/2013
	 * 
	 */
	public void validarCobrancaAcaoPrecedente(Integer idImovel,
			CobrancaAcao cobrancaAcao, CobrancaAcao cobrancaAcaoPrecedente,
			Collection<ContaValoresHelper> colecaoContaValores) throws ControladorException {

		Date dataCorrente = new Date();
		
		Date dataEmissaoValidacaoAcaoPrecente = Util
				.subtrairNumeroMesesDeUmaData(dataCorrente, 12);
					
		// Formata a data para a última hora, minutos e segundos
		Calendar dataCalendar = new GregorianCalendar();
		dataCalendar.setTime(dataEmissaoValidacaoAcaoPrecente);
		dataCalendar.set(Calendar.HOUR, 00);
		dataCalendar.set(Calendar.MINUTE, 00);
		dataCalendar.set(Calendar.SECOND, 00);
		dataCalendar.set(Calendar.MILLISECOND, 000);
		dataEmissaoValidacaoAcaoPrecente = dataCalendar.getTime();
		
		Collection<Integer> colecaoIdsContas = new ArrayList<Integer>();
		Iterator it = colecaoContaValores.iterator();
		while(it.hasNext()){
			ContaValoresHelper helper = (ContaValoresHelper)it.next();
			colecaoIdsContas.add(helper.getConta().getId());
		}
		
		try{
			Integer count = repositorioCobranca.pesquisarQtdDebitoAvisoCorteCobAnterior(
					idImovel,cobrancaAcaoPrecedente.getDocumentoTipo().getId(),
					dataEmissaoValidacaoAcaoPrecente, colecaoIdsContas);
			
			if(count != null && count.intValue() == 0){
				throw new ControladorException("atencao.nao_existe_aviso_corte_debito");
			}
		}
		catch(ErroRepositorioException ex){
			ex.printStackTrace();
			throw new ControladorException("erro.sistema", ex);
		}
	}
	
	/**
	 * 
	 * [UC1441] Efetuar Parcelamento Judicial
	 * [FE0015] Verificar Número do Processo Judicial
	 * 
	 * @author Hugo Azevedo
	 * @throws ControladorException 
	 * @date 25/03/2013
	 */
	private void validarNumeroProcessoJudicial(String numeroProcesso) throws ControladorException{
		
		boolean eValido = false;
		
		//1. O sistema deverá verificar se o Número do Processo Judicial segue as seguintes regras:
		//1.1. Deve ser composto por até 20 dígitos numéricos no formato "NNNNNNN-DV.AAAA.JTR.OOOO"
		if(numeroProcesso.length() == 25){
			String[] numeros1 = numeroProcesso.split("-");
			if(numeros1.length == 2){
				String[] numeros2 = numeros1[1].split("\\.");
				if(numeros2.length == 5){
					long NNNNNNN = Long.parseLong(numeros1[0]);
					long DV = Long.parseLong(numeros2[0]);
					long AAAA = Long.parseLong(numeros2[1]);
					long JTR = Long.parseLong(numeros2[2]+numeros2[3]);
					long OOOO = Long.parseLong(numeros2[4]);
					
					//1.2. A parte do número "DV" deve corresponder ao seguinte cálculo:
					//    1.2.1. 98 menos o resto de (NNNNNNNAAAAJTROOOO x 100 ÷ 97);
					if(Util.validarNumeroProcessoJudicial(NNNNNNN, DV, AAAA, JTR, OOOO))
						eValido = true;
				}
			}
		}
		
		//2. Caso alguma das regras citadas nos itens anteriores não tenha sido satisfeita 
		//   o sistema deverá exibir a mensagem "Número do Processo Judicial inválido."
		if(!eValido)
			throw new ControladorException("atencao.elemento_invalido",null,"Número do Processo Judicial");
		
	}
	

	/**
	 * [UC1451] Manter Parcelamento Judicial.
	 * 
	 * @author Jonathan Marcos
	 * @date 01/04/2013
	 *  
	 * @throws ErroRepositorioException
	 */
	public Collection<ManterParcelamentoJudicialObterListaParcelamentoJudicialHelper> pesquisarObterDadosParcelamentoJudicial(FiltrarManterParcelamentoJudicial filtroManterParcelamentoJudical)	
			throws ControladorException,ErroRepositorioException{
		
		Collection colecaoRetorno = new ArrayList();
		
		Collection colecaoObterListaParcelamentoJudicial = this.repositorioCobranca
				.pesquisarObterListaParcelamentoJudicial(filtroManterParcelamentoJudical);
		
		Iterator iterator = colecaoObterListaParcelamentoJudicial.iterator();
		
		while (iterator.hasNext()){
		
		ManterParcelamentoJudicialObterListaParcelamentoJudicialHelper helper = new ManterParcelamentoJudicialObterListaParcelamentoJudicialHelper();	
		
		Object[] objeto = (Object[]) iterator.next();
		
		
		helper.setNomeClienteResponsavel((String) objeto[0].toString());
		helper.setDataParcelamento(Util.formatarData((Date)objeto[1]).toString());
		helper.setNumeroParcelas((String) objeto[2].toString());
		helper.setSituacao((String) objeto[3].toString());
		helper.setId((String) objeto[4].toString());
		
		colecaoRetorno.add(helper);
		
		} 
		
		return colecaoRetorno;
	}
	
	/**
	 * [UC1452] Consultar Dados do Parcelamento Judicial.
	 * 
	 * @author Jonathan Marcos
	 * @date 01/04/2013
	 *  
	 * @throws ErroRepositorioException
	 */		
	public Collection<ManterParcelamentoJudicialConsultarParcelamentoJudicialHelper> pesquisarConsultaParcelamentoJudicial(FiltrarManterParcelamentoJudicial filtroManterParcelamentoJudical)
			throws ControladorException, ErroRepositorioException{
		
		
		Collection colecaoRetorno = new ArrayList();
		
		Collection colecaoConsultarParcelamentoJudicial = this.repositorioCobranca
				.pesquisarConsultaParcelamentoJudicial(filtroManterParcelamentoJudical);
		
		Iterator iterator = colecaoConsultarParcelamentoJudicial.iterator();
		
		while(iterator.hasNext()){
			
			ManterParcelamentoJudicialConsultarParcelamentoJudicialHelper helper = new ManterParcelamentoJudicialConsultarParcelamentoJudicialHelper(); 
			
			Object[] objeto = (Object[]) iterator.next();
			
			helper.setIdParcelamentoJudicial((String) objeto[0].toString());
			helper.setIdCliente((String) objeto[1].toString());
			helper.setNomeCliente((String) objeto[2].toString());
			helper.setSituacao((String) objeto[3].toString());
			helper.setDataParcelamento(Util.formatarData((Date)objeto[4]).toString());
			helper.setNumeroProcesso((String) objeto[5].toString());
			
			if(objeto[6]==null){
				
				helper.setNomeAdvogado("");
				
			}else{
				
				helper.setNomeAdvogado((String) objeto[6].toString());
				
			}
			
			float debitoAtualizadoSoma1 = Float.parseFloat((String)objeto[7].toString());
			float debitoAtualizadoSoma2 = Float.parseFloat((String)objeto[8].toString());
			float somaDebitosAtualizados = debitoAtualizadoSoma1+debitoAtualizadoSoma2;
			
			helper.setDebitoAtualizado((String)(Util.formatarMoedaReal(BigDecimal.valueOf(somaDebitosAtualizados))).toString());
			helper.setValorAcordo((String)Util.formatarMoedaReal((BigDecimal)objeto[9]).toString());
			
			if(objeto[10]==null || objeto[10].equals("0")){
				
				helper.setDesconto("0,00%");
			
			}else{
			
				helper.setDesconto((String)Util.formatarMoedaReal((BigDecimal)objeto[10]).toString()+"%");
				
			}
			
			if(objeto[11]==null || objeto[11].equals("0")){
				
				helper.setJuros("0,00%");
				
			}else{
				
				helper.setJuros((String)Util.formatarMoedaReal((BigDecimal)objeto[11]).toString()+"%");
				
			}
			
			
			helper.setPercentualDesconto((String)Util.formatarMoedaReal((BigDecimal)objeto[12]).toString());
			helper.setCustas((String)Util.formatarMoedaReal((BigDecimal)objeto[13]).toString());
			helper.setHonorarios((String)Util.formatarMoedaReal((BigDecimal)objeto[14]).toString());
			helper.setValorParcelamento((String)Util.formatarMoedaReal((BigDecimal)objeto[15]).toString());
			
			if(objeto[16]==null || objeto[16].equals("0")){
				helper.setValorEntrada("0,00");
			}else{
				helper.setValorEntrada((String)Util.formatarMoedaReal((BigDecimal)objeto[16]).toString());
			}
			
			colecaoRetorno.add(helper);
			
		}
		
		return colecaoRetorno;
	}
	
	/**
	 * [UC1452] Consultar Dados do Parcelamento Judicial.
	 * 
	 * @author Jonathan Marcos
	 * @date 01/04/2013
	 *  
	 * @throws ErroRepositorioException
	 */
	public List<EmitirGuiasParcelamentoJudicialHelper>pesquisarEmitirGuiasParcelamentoJudicial(String idParcelamentoJudicial,Integer debitoTipo)
			throws ControladorException,ErroRepositorioException{
		
		List<EmitirGuiasParcelamentoJudicialHelper> listaRetorno = new ArrayList<EmitirGuiasParcelamentoJudicialHelper>();
		
		listaRetorno= (List<EmitirGuiasParcelamentoJudicialHelper>) this.repositorioCobranca
				.pesquisarEmitirGuiasParcelamentoJudicial(idParcelamentoJudicial, debitoTipo);
		
		
			
		return listaRetorno;
	}
	
	/**
	 * [UC1453] Emitir Parcelas do Parcelamento Judicial.
	 * 
	 * @author Jonathan Marcos
	 * @date 01/04/2013
	 *  
	 * @throws ErroRepositorioException
	 */
	public Collection<EmitirGuiasParcelamentoJudicialHelper> pesquisarParcelasParcelamentoJudicial(String idParcelamentoJudicial,Integer debitoTipo)
			throws ControladorException, ErroRepositorioException{
		
		Collection colecaoRetorno = new ArrayList();
		
		Collection colecaoParcelasParcelamentoJudicial = this.repositorioCobranca
				.pesquisarParcelasParcelamentoJudicial(idParcelamentoJudicial,debitoTipo);
		
		Iterator iterator = colecaoParcelasParcelamentoJudicial.iterator();
		
		while(iterator.hasNext()){
			
			EmitirGuiasParcelamentoJudicialHelper helper = new EmitirGuiasParcelamentoJudicialHelper();
			
			Object[] objeto = (Object[]) iterator.next();
			
			helper.setNumeroPrestacao((String) objeto[0].toString());
			helper.setNumeroPrestacaoTotal((String) objeto[1].toString());
			helper.setDataVencimento(Util.formatarData((Date)objeto[2]).toString());
			helper.setValorPrestacao((String) Util.formatarMoedaReal((BigDecimal)objeto[3]).toString());
			helper.setSituacao((String) objeto[4].toString());
						
			colecaoRetorno.add(helper);
			
		}
		
		return colecaoRetorno;
	}
	
	/**
	 * [UC1453] Emitir Parcelas do Parcelamento Judicial.
	 * 
	 * @author Jonathan Marcos
	 * @date 01/04/2013
	 *  
	 * @throws ErroRepositorioException
	 */
	public List<EmitirGuiasParcelamentoJudicialHelper>pesquisarEmitirParcelasParcelamentoJudicial(String idParcelamentoJudicial,Integer debitoTipo,String tipoParcelaEmissao,String intervaloInicialPrestacao,String intervaloFinalPrestacao)
			throws ControladorException,ErroRepositorioException{
		
		List<EmitirGuiasParcelamentoJudicialHelper> listaRetorno = new ArrayList<EmitirGuiasParcelamentoJudicialHelper>();
		
		listaRetorno= (List<EmitirGuiasParcelamentoJudicialHelper>) this.repositorioCobranca
				.pesquisarEmitirParcelasParcelamentoJudicial(idParcelamentoJudicial, debitoTipo, tipoParcelaEmissao, intervaloInicialPrestacao, intervaloFinalPrestacao);
		
		
			
		return listaRetorno;
	}
	
	/**
	 * [UC1464] Cancelar Guia Atraso ParcelamentoJudicial.
	 * 
	 * @author Jonathan Marcos
	 * @date 24/04/2013
	 *  
	 * @throws ErroRepositorioException
	 */
	public int tamanhoPesquisarObterListaParcelamentoJudicial(FiltrarManterParcelamentoJudicial filtroManterParcelamentoJudical)
			throws ControladorException, ErroRepositorioException{
		
		int tamanhoPesquisarObterListaParcelamentoJudicial = this.repositorioCobranca.tamanhoPesquisarObterListaParcelamentoJudicial(filtroManterParcelamentoJudical);
		
		return tamanhoPesquisarObterListaParcelamentoJudicial;
	}
	
	/**
	 * [UC1464] Cancelar Guia Atraso ParcelamentoJudicial.
	 * 
	 * @author Jonathan Marcos
	 * @date 01/04/2013
	 *  
	 * @throws ErroRepositorioException
	 */
	public List<EmitirGuiasParcelamentoJudicialHelper> pesquisarContratoConcluidoCanceladoParcelamentoJudicial(String idParcelamentoJudicial,String idConcluido,String idCancelado)
			throws ControladorException, ErroRepositorioException{
		
		List<EmitirGuiasParcelamentoJudicialHelper> listaRetorno = new ArrayList<EmitirGuiasParcelamentoJudicialHelper>();
		
		listaRetorno = (List<EmitirGuiasParcelamentoJudicialHelper>) this.repositorioCobranca
				.pesquisarContratoConcluidoCanceladoParcelamentoJudicial(idParcelamentoJudicial,idConcluido,idCancelado);
		
		return listaRetorno;
			
		}
	
	/**
	 * [UC1464] Cancelar Guia Atraso ParcelamentoJudicial.
	 * 
	 * @author Jonathan Marcos
	 * @date 12/04/2013
	 *  
	 * @throws ErroRepositorioException
	 */
	public Collection<CancelarGuiaAtrasoObterListaParcelamentoJudicialHelper> pesquisarObterListaParcelamentoJudicialCancelarGuiaAtraso(String idParcelamentoJudicial)
			throws ControladorException, ErroRepositorioException{
		
		Collection colecaoRetorno = new ArrayList();
		
		Collection ObterListaParcelamentoJudicialCancelarGuiaAtraso = this.repositorioCobranca
				.pesquisarObterListaParcelamentoJudicialCancelarGuiaAtraso(idParcelamentoJudicial);
		
		Iterator iterator = ObterListaParcelamentoJudicialCancelarGuiaAtraso.iterator();
		
		while(iterator.hasNext()){
			
			CancelarGuiaAtrasoObterListaParcelamentoJudicialHelper helper = new CancelarGuiaAtrasoObterListaParcelamentoJudicialHelper();
			
			Object[] objeto = (Object[]) iterator.next();
			
			
			helper.setNumeroProcesso((String) objeto[0].toString());
			helper.setIdImovel((String) objeto[1].toString());
			helper.setClienteResponsavel((String) objeto[2].toString());
			helper.setDataParcelamento(Util.formatarData((Date)objeto[3]).toString());
			
			colecaoRetorno.add(helper);
			
		}
		
		return colecaoRetorno;
	}
	
	/** [UC1464] Cancelar Guia Atraso ParcelamentoJudicial.
	 * 
	 * @author Jonathan Marcos
	 * @date 11/04/2013
	 *  
	 * @throws ErroRepositorioException
	 */
	public 	Collection<CancelarGuiaAtrasoParcelamentoJudicialHelper> pesquisarGuiasAtraso(String idParcelamentoJudicial,Integer debitoTipo)
			throws ControladorException,ErroRepositorioException{
		
		Collection colecaoRetorno = new ArrayList();
		
		Collection colecaoGuiaAtraso = this.repositorioCobranca
				.pesquisarGuiasAtraso(idParcelamentoJudicial, debitoTipo);
		
		Iterator iterator = colecaoGuiaAtraso.iterator();
		
		while(iterator.hasNext()){
			
			CancelarGuiaAtrasoParcelamentoJudicialHelper helper = new CancelarGuiaAtrasoParcelamentoJudicialHelper();
			
			Object[] objeto = (Object[]) iterator.next();
			
			helper.setIdGuia((String) objeto[0].toString());
			helper.setValor((String) Util.formatarMoedaReal((BigDecimal)objeto[1]).toString());
			helper.setDataVencimento(Util.formatarData((Date)objeto[2]).toString());
			helper.setObservacao((String) objeto[3].toString());
			
						
			colecaoRetorno.add(helper);
			
		}
		
		return colecaoRetorno;
	}
	
	/** [UC1464] Cancelar Guia Atraso ParcelamentoJudicial.
	 * 
	 * @author Jonathan Marcos
	 * @date 15/04/2013
	 *  
	 * @throws ErroRepositorioException
	 */
	public boolean cancelarGuiaAtraso(String[] idsGuiaAtraso)
			throws ControladorException, ErroRepositorioException{
		
		
		for(int a=0;a<idsGuiaAtraso.length;a++){
			
			this.repositorioCobranca.cancelarGuiaAtraso(idsGuiaAtraso[a]);
			
		}
		
		return true;
	}
	
	/**
	 * [UC1454] - Gerar Guia de Atraso do Parcelamento Judicial
	 * 
	 * @author Ana Maria Andrade
	 * @date 19/03/2013
	 */
	public void gerarGuiaAtrasoParcelamentoJudicial(Integer idFuncionalidadeIniciada, Usuario usuario) 
			throws ControladorException {
		int idUnidadeIniciada = 0;
		
		try{
			/*
			 * Registrar o início do processamento da Unidade de Processamento
			 * do Batch
			 */
			idUnidadeIniciada = getControladorBatch()
					.iniciarUnidadeProcessamentoBatch(idFuncionalidadeIniciada,
							UnidadeProcessamento.FUNCIONALIDADE, 0);
			
			System.out.println("***************************************");
			System.out.println("GERAR GUIA ATRASO PARCELAMENTO JUDICIAL");
			System.out.println("***************************************");
			
			/*[IT0001] - Obter Parcelamento Judicial
			 * 
			 * Pesquisar os parcelamentos judiciais efetuados que estejam com situação normal 
			 * e com o indicador de perca de desconto
			 */
			Collection<ParcelamentoJudicial> colecaoIdParcelamentoJudicial = 
					this.repositorioCobranca.pesquisarParcelamentoJudicial();
			
			if(!Util.isVazioOrNulo(colecaoIdParcelamentoJudicial)){

				ParcelamentoJudicial parcelamentoJudicial = null;
				
				int contador = 1;
				
				Iterator iterator = colecaoIdParcelamentoJudicial.iterator();
				while(iterator.hasNext()){
					parcelamentoJudicial = (ParcelamentoJudicial)iterator.next();
					
					System.out.println("ID parcelamento judicial: " + parcelamentoJudicial.getId());
					
					System.out.println("Registro " + contador + " / " + colecaoIdParcelamentoJudicial.size());
					
					/*[IT0002] - Obter Guias de Parcela com Atraso
					 * 
					 * Pesquisar as guias das parcelas que estão em atraso 
					 */
					Collection<GuiaPagamento> colecaoGuiaAtrasoParcelamentoJud = 
							this.repositorioCobranca.pesquisarGuiaAtrasoParcelamentoJudicial(parcelamentoJudicial.getId());
					if(!Util.isVazioOrNulo(colecaoGuiaAtrasoParcelamentoJud)){

						Iterator iteratorGuiaAtraso = colecaoGuiaAtrasoParcelamentoJud.iterator();
						while(iteratorGuiaAtraso.hasNext()){
							
							/*[IT0003] - Inserir Guia de Atraso
							 */
							GuiaPagamento guiaPagamentoAtraso = (GuiaPagamento)iteratorGuiaAtraso.next();
							
							FiltroImovel filtroImovel = new FiltroImovel();
							filtroImovel.adicionarCaminhoParaCarregamentoEntidade("localidade");

							filtroImovel.adicionarParametro(new ParametroSimples(FiltroImovel.ID, guiaPagamentoAtraso.getImovel()));

							Collection imovelEncontrado = getControladorUtil().pesquisar(
							filtroImovel, Imovel.class.getName());
							
							Imovel imovel = null;
							
							//Verifica a exist?ncia do im?vel
							if (imovelEncontrado != null && !imovelEncontrado.isEmpty()) {
								
								imovel = (Imovel) imovelEncontrado.iterator().next();
							
							}
							Collection colecaoCategoriasImovel = this.getControladorImovel()
									.obterQuantidadeEconomiasCategoria(imovel);
							
							SistemaParametro sistemaParametro = getControladorUtil().pesquisarParametrosDoSistema();
				            Integer anoMesReferenciaContabil = sistemaParametro.getAnoMesFaturamento();
				            
				            Date dataVencimento = Util.adicionarNumeroDiasDeUmaData(new Date(), 30);
				            
				            BigDecimal valorGuia = this.repositorioCobranca.pesquisarValorGuiaItem(guiaPagamentoAtraso.getId());
				            
				            String observacao = "";
				            
				            if(guiaPagamentoAtraso.getDebitoTipo().getId().equals(DebitoTipo.PARCELAMENTO_JUDICIAL_CONTAS)){
				            	observacao = "Guia inserida automaticamente por atraso da "+guiaPagamentoAtraso.getNumeroPrestacaoDebito()+"º parcela.  Nº do processo "+parcelamentoJudicial.getNumeroProcesso();
				            }else{
				            	observacao = "Guia inserida automaticamente por atraso da entrada do parcelamento.  Nº do processo "+parcelamentoJudicial.getNumeroProcesso();
				            }
				            
							 getControladorFaturamento().incluirGuiaPagamentoParcelamentoJudicial(parcelamentoJudicial.getId(), imovel.getLocalidade().getId(), imovel.getId(),
									 parcelamentoJudicial.getClienteResponsavel().getId(), anoMesReferenciaContabil, dataVencimento, valorGuia, 
									 DebitoTipo.GUIA_ADICION_ATRASO_PARC_JUD, LancamentoItemContabil.GUIA_ADICION_ATRASO_PARC_JUD,
									 observacao, usuario.getId(), colecaoCategoriasImovel);
							 
							//6.	Alterar o indicador de geração de guia de atraso para a guia selecionada 
							 this.repositorioCobranca.atualizarIndicadorGuiaAtrasoParcJudicial(guiaPagamentoAtraso.getId());
						}
					}
					contador++;
				}
			}
			
			//Encerrar Processamento Batch
			getControladorBatch().encerrarUnidadeProcessamentoBatch(null,
					idUnidadeIniciada, false);
			
			System.out.println("******* FIM GERAÇÃO GUIA DE ATRASO PARCELAMENTO JUDICIAL**********");
		
		/*
		 * Caso ocorra algum erro, o sistema faz o rollback das transações
		 * do batch e encerrar o processamento
		 */
		}catch (Exception ex) {
			sessionContext.setRollbackOnly();
			ex.printStackTrace();
			getControladorBatch().encerrarUnidadeProcessamentoBatch(ex,
			 	idUnidadeIniciada, true);
			throw new EJBException(ex);
		}
	}
	
	/**
	 * [UC1465] Gerar Relatório das Parcelas em Atraso do Parcelamento Judicial
	 * 
	 * [IT0001] Pesquisar Parcelas em Atraso.
	 * [IT0002] Obter Dados das Parcelas Em Atraso.
	 * 
	 * @author Mariana Victor
	 * @date 23/04/2013
	 */
	public Collection<Object[]> pesquisarParcelasEmAtrasoParcelamentoJudicial(
		FiltrarRelatorioParcelasEmAtrasoParcelamentoJudicialHelper helper) 
				throws ControladorException {
		try{
			
			return this.repositorioCobranca.pesquisarParcelasEmAtrasoParcelamentoJudicial(helper);
			
		}catch(ErroRepositorioException ex){
			ex.printStackTrace();
			throw new ControladorException("erro.sistema", ex);
		}
	}
	/**
	 * 
	 * [UC1463] Cancelar Parcelamento Judicial
	 * [IT0002] Obter Lista de Motivos de Cancelamento
	 * 
	 * @author Hugo Azevedo
	 * @date 16/03/2013
	 */
	public Collection<ParcelamentoMotivoDesfazer> obterListaMotivosCancelamento() throws ControladorException{
		try{
			return this.repositorioCobranca.obterListaMotivosCancelamento();
		}
		catch(ErroRepositorioException ex){
			ex.printStackTrace();
			throw new ControladorException("erro.sistema", ex);
		}
		
	}
	
	/**
	 * 
	 * [UC1463] Cancelar Parcelamento Judicial
	 * [IT0001] Obter Dados do Parcelamento Judicial
	 * 
	 * @author Hugo Azevedo
	 * @date 16/03/2013
	 */
	public ParcelamentoJudicialImovel obterParcelamentoJudicialImovel(Integer idParcelamento) throws ControladorException{
		try{
			return this.repositorioCobranca.obterParcelamentoJudicialImovel(idParcelamento);
		}
		catch(ErroRepositorioException ex){
			ex.printStackTrace();
			throw new ControladorException("erro.sistema", ex);
		}
	}
	
	/**
	 * [UC1452] Consultar Dados do Parcelamento Judicial.
	 * [IT0003] Obter PDF do Parcelamento Judicial.
	 * 
	 * @author Ana Maria
	 * @date 03/05/2013
	 */
	public ParcelamentoJudicial obterParcelamentoJudicial(Integer idParcelamento) throws ControladorException{
		try{
			return this.repositorioCobranca.obterParcelamentoJudicial(idParcelamento);
		}
		catch(ErroRepositorioException ex){
			ex.printStackTrace();
			throw new ControladorException("erro.sistema", ex);
		}
	}
	
	/**
	 * [UC0870] Gerar Movimento de Contas em Cobran?a por Empresa
	 * 
	 * @author Raphael Rossiter
	 * @date 04/07/2013
	 */
	public void inserirImovelEmpresaCobrancaComandoAberto() throws ControladorException {
		try {
			
			repositorioCobranca.inserirImovelEmpresaCobrancaComandoAberto();
			
		} catch (ErroRepositorioException e) {
			e.printStackTrace();
			throw new ControladorException("erro.sistema", e);
		}
	}
	
	/**
	 * [UC0870] Gerar Movimento de Contas em Cobrança por Empresa
	 *
	 * @author Raphael Rossiter
	 * @date 04/07/2013
	 * 
	 * [SB0002] Verificar Registros ja Inseridos
	 */
	public void removerImovelEmpresaCobrancaComandoAberto() throws ControladorException{
				
		try{
			this.repositorioCobranca.removerImovelEmpresaCobrancaComandoAberto();
			
		}catch(ErroRepositorioException ex){
			ex.printStackTrace();
			throw new ControladorException("erro.sistema", ex);
		}
	}
	
	/**
	 * 
	 * Método que verifica se o documento ja foi utilizado para devolução
	 * 
	 * @author Rodrigo Cabral
	 * @date 26/08/2013
	 */
	public Integer verificarDocumentoUtilizadoParaDevolucao(Integer idDocumento, Short documentoTipo, Integer idRA )
			throws ControladorException{
		try{
			
			return repositorioCobranca.verificarDocumentoUtilizadoParaDevolucao(idDocumento, documentoTipo, idRA);
			
		}catch (ErroRepositorioException e) {
			throw new ControladorException("erro.sistema", e);
		}
	}

	/**
	 * [UC1321] Gerar Motivos Não Geração de Contas e Imóveis em Cobrança por Empresa 
	 * [SB0010] Atualizar Comando de Cobrança
	 * 
	 * @author Mariana Victor
	 * @date 13/09/2013
	 */
	public void atualizarComandoEmpresaCobrancaConta(Integer idComando)
			throws ControladorException {
		try{
			
			repositorioCobranca.atualizarComandoEmpresaCobrancaConta(idComando);
			
		}catch (ErroRepositorioException e) {
			throw new ControladorException("erro.sistema", e);
		}
	}

	/**
	 * [UC0870] Gerar Movimento de Contas em Cobrança por Empresa
	 * 
	 * Método que pesquisa se o comando possui setores associados
	 * na tabela COBRANCA.CMD_EMPR_COBR_CONTA_CBST 
	 * 
	 * @author Mariana Victor
	 * @date 11/10/2013
	 * */
	public Collection<CobrancaSituacao> pesquisarComandoEmpresaCobrancaContaCobrancaSituacao(Integer idComando)
			throws ControladorException {
		try{
			return this.repositorioCobranca.pesquisarComandoEmpresaCobrancaContaCobrancaSituacao(idComando);
		}catch(ErroRepositorioException ex){
			ex.printStackTrace();
			throw new ControladorException("erro.sistema", ex);
		}
	}
	/**
	 * 
	 * @author Flavio Ferreira
	 * @date 18/12/2013
	 * 
	 */
	public Collection<SetorComercial> pesquisarListaDeSetoresComercialParaComandoCobrancaEventual(Integer idComando) throws ControladorException{
		Collection<SetorComercial> colecaoRetorno = new ArrayList<SetorComercial>();
		
		try{
			Collection colecao = repositorioCobranca.pesquisarListaDeSetoresComercialParaComandoCobrancaEventual(idComando);
			
			Iterator colecaoSetorArrayIt = colecao.iterator();
			Object[] setorArray;
			SetorComercial setorComercial;
			while(colecaoSetorArrayIt.hasNext()){
				setorArray = (Object[]) colecaoSetorArrayIt.next();
				Integer codigo = (Integer)setorArray[0];
				String descricao = (String) setorArray[1];
				setorComercial = new SetorComercial();
				setorComercial.setCodigo(codigo);
				setorComercial.setDescricao(descricao);
				colecaoRetorno.add(setorComercial);
			}
		}catch(ErroRepositorioException ex){
			throw new ControladorException("erro.sistema", ex);
		}
		
		return colecaoRetorno;
		
	}
	
	/**
	 * 
	 * Pesquisar os Comandos de Ação de Cobrança tipo comando Eventual
	 * 
	 * [UC0326] - Filtrar Comandos de Ação de Cobrança
	 * 
	 * @author Rafael Pinto
	 * @date 20/12/2013
	 * 
	 */
	public Collection<CobrancaAcaoAtividadeComando> pesquisarCobrancaAcaoAtividadeComando(FiltrarComandosAcaoCobrancaEventualHelper helper)
			throws ControladorException {
		try{
			return this.repositorioCobranca.pesquisarCobrancaAcaoAtividadeComando(helper);
		}catch(ErroRepositorioException ex){
			ex.printStackTrace();
			throw new ControladorException("erro.sistema", ex);
		}
	}
	
	/**
	 * [UC 1581] - Alterar Data Prevista Encerramento Comando Acao Cobranca
	 * 
	 * @author Davi Menezes
	 * @date 15/01/2014
	 */
	public void atualizarDataPrevistaEncerramentoComando(Collection<Integer> idsComandos, Date dataPrevista, String tipoComando)
			throws ControladorException {
		
		try{
			if(tipoComando != null && !tipoComando.equals("")){
				if(tipoComando.equalsIgnoreCase("C")){
					repositorioCobranca.atualizarDataPrevistaEncerramentoComandoCronograma(idsComandos, dataPrevista);
				}else{
					repositorioCobranca.atualizarDataPrevistaEncerramentoComandoEventual(idsComandos, dataPrevista);
				}
			}
				
		}catch(ErroRepositorioException ex){
			ex.printStackTrace();
			throw new ControladorException("erro.sistema", ex);
		}		
	}
	
	/**
	 * [UC 1580] - Cancelar Comando Acao Cobranca
	 * 
	 * @author Davi Menezes
	 * @date 16/01/2014
	 */
	public void cancelarComandoAcaoCobranca(Collection<Integer> idsComandos, String tipoComando, Usuario usuarioLogado) 
			throws ControladorException {
		
		try{
			if(tipoComando != null && !tipoComando.equals("")){
				Collection<Integer> colecaoOS = repositorioOrdemServico.
						pesquisarOrdensServicoComando(idsComandos, tipoComando);
				
				if(!Util.isVazioOrNulo(colecaoOS)){
					for(Integer idOrdemServico : colecaoOS){
						this.getControladorOrdemServico().encerrarOSSemExecucao(idOrdemServico, new Date(), usuarioLogado, 
							AtendimentoMotivoEncerramento.CANCELAMENTO_PELA_COMPESA.toString(), new Date(), 
								"CANCELADO PELA GCB", null, null, null, null, null, null);
					}
				}
				
				repositorioCobranca.cancelarComandoAcaoCobranca(idsComandos);
			}
			
		}catch(ErroRepositorioException ex){
			sessionContext.setRollbackOnly();
			ex.printStackTrace();
			throw new ControladorException("erro.sistema", ex);
		}
	}
	
	/**
	 * [UC 1581] - Alterar Data Prevista Encerramento Comando Acao Cobranca
	 * 
	 * @auhtor Davi Menezes
	 * @date 27/01/2014
	 */
	public Date pesquisarDataRealizacaoComandoCronograma(Integer idComando) throws ControladorException {
		try{
			return repositorioCobranca.pesquisarDataRealizacaoComandoCronograma(idComando);
		}catch(ErroRepositorioException ex){
			ex.printStackTrace();
			throw new ControladorException("erro.sistema", ex);
		}
	}
	
	/**
	 * [UC 1581] - Alterar Data Prevista Encerramento Comando Acao Cobranca
	 * 
	 * @auhtor Davi Menezes
	 * @date 27/01/2014
	 */
	public Date pesquisarDataPrevistaEncerramentoComandoCronograma(Integer idComando) throws ControladorException {
		try{
			return repositorioCobranca.pesquisarDataPrevistaEncerramentoComandoCronograma(idComando);
		}catch(ErroRepositorioException ex){
			ex.printStackTrace();
			throw new ControladorException("erro.sistema", ex);
		}
	}
	
	/**
	 * [UC1598] Gerar Relatório Cobrança Por Resultado Comando/Mês
	 * 
	 * @author Ana Maria
	 * @date 30/04/2014
	 */
	public Collection<ComandoEmpresaCobrancaConta> obterColecaoComandoEmpresaCobrancaConta(String idEmpresa, 
		Date dataInicialExecucao, Date dataFinalExecucao) throws ControladorException{
		
		Collection<ComandoEmpresaCobrancaConta> colecaoComando = new ArrayList<ComandoEmpresaCobrancaConta>();
		
		try{
			colecaoComando = repositorioCobranca.obterColecaoComandoEmpresaCobrancaConta(idEmpresa, dataInicialExecucao, dataFinalExecucao);
		} catch (ErroRepositorioException ex) {
			sessionContext.setRollbackOnly();
			new ControladorException("erro.sistema", ex);
		}
		return colecaoComando;
	}
	

	/**
	 * [UC0000] Relatório Opção Totalização por Comando e Opção de Totalização por Mês de Apuração
	 * 
	 * @author Vivianne Sousa
	 * @date 24/04/2014
	 */
	public Collection<RelatorioCobrancaPorResultadoPorComandoMesHelper> gerarDadosRelatorioCobrancaPorResultadoPorComandoMes(
			Integer idEmpresa, 
			String periodoApuracao, 
			Integer idLocalidade,
			String[] idsGerenciaRegional, 
			String[] idsUnidadeNegocio,
			String[] idsRegiao, 
			String[] idsMicroRegiao, 
			String[] idsMunicipio,
			short indicadorLocalidade,
			Date cicloInicial, 
			Date cicloFinal,
			String[] idsCategoria,
			Integer idComando)  throws ControladorException {
		
				try{
					
					Collection<RelatorioCobrancaPorResultadoPorComandoMesHelper> retorno = new ArrayList<RelatorioCobrancaPorResultadoPorComandoMesHelper>();
					Collection<Object[]> retornoQuery = new ArrayList<Object[]>();
					
					//Validando coleções com elemento em branco
					if(idsGerenciaRegional != null && idsGerenciaRegional.length == 1 & idsGerenciaRegional[0].equals("-1"))
			        	idsGerenciaRegional = null;
			        if(idsUnidadeNegocio != null && idsUnidadeNegocio.length == 1 && idsUnidadeNegocio[0].equals("-1"))
			        	idsUnidadeNegocio = null;
			        if(idsRegiao != null && idsRegiao.length == 1 && idsRegiao[0].equals("-1"))
			        	idsRegiao = null;
			        if(idsMicroRegiao != null && idsMicroRegiao.length == 1 && idsMicroRegiao[0].equals("-1"))
			        	idsMicroRegiao = null;
			        if(idsMunicipio != null && idsMunicipio.length == 1 && idsMunicipio[0].equals("-1"))
			        	idsMunicipio = null;
			        if(idsCategoria != null && idsCategoria.length == 1 && idsCategoria[0].equals("-1"))
			        	idsCategoria = null;
					
			        FiltroEmpresaCobrancaFaixa filtroEmpresaCobrancaFaixa = new FiltroEmpresaCobrancaFaixa();
					filtroEmpresaCobrancaFaixa.adicionarParametro(new ParametroSimples(FiltroEmpresaCobrancaFaixa.EMPRESA_ID, idEmpresa));
					filtroEmpresaCobrancaFaixa.setCampoOrderBy(FiltroEmpresaCobrancaFaixa.NUMERO_MAXIMO_CONTAS_FAIXA);
					
					ArrayList<EmpresaCobrancaFaixa> colecaoEmpresaCobrancaFaixa = (ArrayList<EmpresaCobrancaFaixa>)
							this.getControladorUtil().pesquisar(filtroEmpresaCobrancaFaixa,EmpresaCobrancaFaixa.class.getName());
					
					retornoQuery =  repositorioCobranca.gerarDadosRelatorioCobrancaPorResultadoPorComandoMes(idEmpresa, periodoApuracao, 
						 idLocalidade, idsGerenciaRegional, idsUnidadeNegocio, idsRegiao, idsMicroRegiao, idsMunicipio,
						 indicadorLocalidade, colecaoEmpresaCobrancaFaixa, cicloInicial, cicloFinal,idsCategoria, idComando);
					
					Iterator it = retornoQuery.iterator();
					while(it.hasNext()){
						Object[] obj = (Object[])it.next();
						RelatorioCobrancaPorResultadoPorComandoMesHelper rel = new RelatorioCobrancaPorResultadoPorComandoMesHelper();
						
						rel.setIdGerenciaRegional((Integer)obj[0]); 		//0
						rel.setIdLocalidade((Integer)obj[1]); 				//1
						rel.setIdFaixaContas((Integer)obj[2]);				//2
						rel.setIdRegiao((Integer)obj[3]); 					//3
						rel.setIdMunicipio((Integer)obj[4]); 				//4
						rel.setNomeEmpresa((String)obj[5]); 				//5
						rel.setNumeroContrato((String)obj[6]); 				//6
						rel.setAnoMesRef((String)obj[7]); 					//7
						rel.setIdLocalidade((Integer)obj[8]);				//8													
						rel.setDescLocalidade((String)obj[9]); 				//9
						rel.setDescMunicipio((String)obj[10]); 				//10
						rel.setDescFaixaContas((String)obj[11]); 			//11
						rel.setQtdContas((Integer)obj[12]); 				//12
						rel.setQtdeClientes((Integer)obj[13]);				//13
						rel.setVlPagtoAVista((BigDecimal)obj[14]); 			//14
						rel.setVlPagtoParcelado((BigDecimal)obj[15]);		//15
						rel.setPercentualFaixa((BigDecimal)obj[16]); 		//16
						rel.setDescGerenciaRegional((String)obj[17]); 		//17
						rel.setDescRegiao((String)obj[18]); 				//18
						rel.setVlDesconto((BigDecimal)obj[19]); 			//19
						rel.setVlTotalDivida((BigDecimal)obj[20]);			//20
						rel.setIdComando((Integer)obj[21]); 				//21
						rel.setDataExecucao((Date)obj[22]); 				//22
						rel.setDataInicio((Date)obj[23]); 					//23
						rel.setDataFinal((Date)obj[24]); 					//24
						rel.setIdUnidadeNegocio((Integer)obj[25]); 			//25
						rel.setDescUnidadeNegocio((String)obj[26]); 		//26
						rel.setIdMicroregiao((Integer)obj[27]); 			//27
						rel.setDescMicroregiao((String)obj[28]); 			//28
						rel.setQtdePagtoAVista((Integer)obj[29]);			//29
						rel.setQtdePagtoParcelado((Integer)obj[30]);		//30
						
						retorno.add(rel);
					}
					
				return retorno;	
					
				}catch(ErroRepositorioException ex){
					ex.printStackTrace();
					throw new ControladorException("erro.sistema", ex);
				}
			}
	
	
}